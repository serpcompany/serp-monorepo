[
  {
    "owner": "hashicorp",
    "repo": "vault",
    "content": "TITLE: Writing Data to KV Store\nDESCRIPTION: Example of writing a key-value pair to the KV secrets store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put kv/my-secret my-value=s3cr3t\n```\n\n----------------------------------------\n\nTITLE: Token Renewal Implementation in Go\nDESCRIPTION: This Go code demonstrates how to implement automatic token renewal for Vault authentication. It includes functions for initial login, token lifecycle management, and handling renewal events and errors. The example uses userpass authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/auth.mdx#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\tvault \"github.com/hashicorp/vault/api\"\n\tauth \"github.com/hashicorp/vault/api/auth/userpass\"\n)\n\n// Once you've set the token for your Vault client, you will need to\n// periodically renew its lease.\n//\n// A function like this should be run as a goroutine to avoid blocking.\n//\n// Production applications may also wish to be more tolerant of failures and\n// retry rather than exiting.\n//\n// Additionally, enterprise Vault users should be aware that due to eventual\n// consistency, the API may return unexpected errors when running Vault with\n// performance standbys or performance replication, despite the client having\n// a freshly renewed token. See https://developer.hashicorp.com/vault/docs/enterprise/consistency#vault-1-7-mitigations\n// for several ways to mitigate this which are outside the scope of this code sample.\nfunc renewToken(client *vault.Client) {\n\tfor {\n\t\tvaultLoginResp, err := login(client)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"unable to authenticate to Vault: %v\", err)\n\t\t}\n\t\ttokenErr := manageTokenLifecycle(client, vaultLoginResp)\n\t\tif tokenErr != nil {\n\t\t\tlog.Fatalf(\"unable to start managing token lifecycle: %v\", tokenErr)\n\t\t}\n\t}\n}\n\n// Starts token lifecycle management. Returns only fatal errors as errors,\n// otherwise returns nil so we can attempt login again.\nfunc manageTokenLifecycle(client *vault.Client, token *vault.Secret) error {\n\trenew := token.Auth.Renewable // You may notice a different top-level field called Renewable. That one is used for dynamic secrets renewal, not token renewal.\n\tif !renew {\n\t\tlog.Printf(\"Token is not configured to be renewable. Re-attempting login.\")\n\t\treturn nil\n\t}\n\n\twatcher, err := client.NewLifetimeWatcher(&vault.LifetimeWatcherInput{\n\t\tSecret:    token,\n\t\tIncrement: 3600, // Learn more about this optional value in https://developer.hashicorp.com/vault/docs/concepts/lease#lease-durations-and-renewal\n\t})\n\tif err != nil {\n\t\treturn fmt.Errorf(\"unable to initialize new lifetime watcher for renewing auth token: %w\", err)\n\t}\n\n\tgo watcher.Start()\n\tdefer watcher.Stop()\n\n\tfor {\n\t\tselect {\n\t\t// `DoneCh` will return if renewal fails, or if the remaining lease\n\t\t// duration is under a built-in threshold and either renewing is not\n\t\t// extending it or renewing is disabled. In any case, the caller\n\t\t// needs to attempt to log in again.\n\t\tcase err := <-watcher.DoneCh():\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Failed to renew token: %v. Re-attempting login.\", err)\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\t// This occurs once the token has reached max TTL.\n\t\t\tlog.Printf(\"Token can no longer be renewed. Re-attempting login.\")\n\t\t\treturn nil\n\n\t\t// Successfully completed renewal\n\t\tcase renewal := <-watcher.RenewCh():\n\t\t\tlog.Printf(\"Successfully renewed: %#v\", renewal)\n\t\t}\n\t}\n}\n\nfunc login(client *vault.Client) (*vault.Secret, error) {\n\t// WARNING: A plaintext password like this is obviously insecure.\n\t// See the hashicorp/vault-examples repo for full examples of how to securely\n\t// log in to Vault using various auth methods. This function is just\n\t// demonstrating the basic idea that a *vault.Secret is returned by\n\t// the login call.\n\tuserpassAuth, err := auth.NewUserpassAuth(\"my-user\", &auth.Password{FromString: \"my-password\"})\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to initialize userpass auth method: %w\", err)\n\t}\n\n\tauthInfo, err := client.Auth().Login(context.TODO(), userpassAuth)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"unable to login to userpass auth method: %w\", err)\n\t}\n\tif authInfo == nil {\n\t\treturn nil, fmt.Errorf(\"no auth info was returned after login\")\n\t}\n\n\treturn authInfo, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling an Auth Method in Vault via CLI\nDESCRIPTION: This command enables the 'userpass' authentication method at a custom path 'my-auth' in Vault. After enabling, authentication will be accessible at this path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/auth.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable -path=my-auth userpass \n```\n\n----------------------------------------\n\nTITLE: Implementing the Database Plugin Interface in Go\nDESCRIPTION: This code snippet shows the required interface that all database plugins must implement. It defines methods for initializing connections, creating and managing users, and handling database-specific operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/custom.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ntype Database interface {\n\t// Initialize the database plugin. This is the equivalent of a constructor for the\n\t// database object itself.\n\tInitialize(ctx context.Context, req InitializeRequest) (InitializeResponse, error)\n\n\t// NewUser creates a new user within the database. This user is temporary in that it\n\t// will exist until the TTL expires.\n\tNewUser(ctx context.Context, req NewUserRequest) (NewUserResponse, error)\n\n\t// UpdateUser updates an existing user within the database.\n\tUpdateUser(ctx context.Context, req UpdateUserRequest) (UpdateUserResponse, error)\n\n\t// DeleteUser from the database. This should not error if the user didn't\n\t// exist prior to this call.\n\tDeleteUser(ctx context.Context, req DeleteUserRequest) (DeleteUserResponse, error)\n\n\t// Type returns the Name for the particular database backend implementation.\n\t// This type name is usually set as a constant within the database backend\n\t// implementation, e.g. \"mysql\" for the MySQL database backend. This is used\n\t// for things like metrics and logging. No behavior is switched on this.\n\tType() (string, error)\n\n\t// Close attempts to close the underlying database connection that was\n\t// established by the backend.\n\tClose() error\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Vault Go Client Library\nDESCRIPTION: This code snippet shows how to import the Vault client library in a Go program.  It imports the library under the alias `vault` for easier referencing in the code.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport vault \"github.com/hashicorp/vault/api\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Main Package for Vault Plugin with Multiplexing\nDESCRIPTION: Example implementation of a main package for a Vault plugin using the Vault SDK for secrets engine or auth method. Shows setup of plugin multiplexing and TLS configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-development.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"os\"\n\n\tmyPlugin \"your/plugin/import/path\"\n\t\"github.com/hashicorp/vault/api\"\n\t\"github.com/hashicorp/vault/sdk/plugin\"\n)\n\nfunc main() {\n\tapiClientMeta := &api.PluginAPIClientMeta{}\n\tflags := apiClientMeta.FlagSet()\n\tflags.Parse(os.Args[1:])\n\n\ttlsConfig := apiClientMeta.GetTLSConfig()\n\ttlsProviderFunc := api.VaultPluginTLSProvider(tlsConfig)\n\n\terr := plugin.ServeMultiplex(&plugin.ServeOpts{\n\t\tBackendFactoryFunc: myPlugin.Factory,\n\t\tTLSProviderFunc:    tlsProviderFunc,\n\t})\n\tif err != nil {\n\t\tlogger := hclog.New(&hclog.LoggerOptions{})\n\n\t\tlogger.Error(\"plugin shutting down\", \"error\", err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Python\nDESCRIPTION: This code snippet authenticates to Vault using the hvac library in Python. It creates a Vault client and sets the URL and token ('dev-only-token'). This root token usage is only recommended for development.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\nclient = hvac.Client(\n    url='http://127.0.0.1:8200',\n    token='dev-only-token',\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling AppRole Auth Method via API in Vault\nDESCRIPTION: This API call enables the AppRole authentication method in Vault. It requires a Vault token for authorization. The request is sent to the `/sys/auth/approle` endpoint with the `type` parameter set to `approle` in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data '{\"type\": \"approle\"}' \\\n    http://127.0.0.1:8200/v1/sys/auth/approle\n```\n\n----------------------------------------\n\nTITLE: Basic Vault CLI Usage in Shell\nDESCRIPTION: Demonstrates the basic syntax for using Vault CLI commands, including subcommands, flags, and arguments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault <command> [subcommand(s)] [flag(s)] [command-argument(s)]\n\n$ vault <command> [subcommand(s)] [-help | -h]\n```\n\n----------------------------------------\n\nTITLE: Initializing New Vault Cluster Using operator init\nDESCRIPTION: Demonstrates the initialization of a new Vault cluster, which generates unseal keys and the initial root token. This is typically the first command run when setting up a new Vault instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator init\nUnseal Key 1: sP/4C/fwIDjJmHEC2bi/1Pa43uKhsUQMmiB31GRzFc0R\nUnseal Key 2: kHkw2xTBelbDFIMEgEC8NVX7NDSAZ+rdgBJ/HuJwxOX+\nUnseal Key 3: +1+1ZnkQDfJFHDZPRq0wjFxEuEEHxDDOQxa8JJ/AYWcb\nUnseal Key 4: cewseNJTLovmFrgpyY+9Hi5OgJlJgGGCg7PZyiVdPwN0\nUnseal Key 5: wyd7rMGWX5fi0k36X4e+C4myt5CoTmJsHJ0rdYT7BQcF\n\nInitial Root Token: 6662bb4a-afd0-4b6b-faad-e237fb564568\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Integrated Storage (Raft) Backend in Vault\nDESCRIPTION: This configuration snippet demonstrates how to set up Vault's integrated storage backend using the Raft consensus algorithm. It specifies the storage path, node ID, and cluster address which is required for inter-node communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path = \"/path/to/raft/data\"\n  node_id = \"raft_node_1\"\n}\ncluster_addr = \"http://127.0.0.1:8201\"\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate Credentials using Vault CLI\nDESCRIPTION: Generate new TLS credentials using Vault's PKI secrets engine for a particular role. Dependencies include a configured role and a Vault token with appropriate permissions. The command outputs the generated certificate and private key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/setup.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write pki/issue/example-dot-com \\\n    common_name=www.my-website.com\n\nKey                 Value\n---                 -----\ncertificate         -----BEGIN CERTIFICATE-----...\nissuing_ca          -----BEGIN CERTIFICATE-----...\nprivate_key         -----BEGIN RSA PRIVATE KEY-----...\nprivate_key_type    rsa\nserial_number       1d:2e:c6:06:45:18:60:0e:23:d6:c5:17:43:c0:fe:46:ed:d1:50:be\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Kubernetes Auth Method\nDESCRIPTION: This command configures the Kubernetes auth method in Vault with the Kubernetes host and issuer. It's necessary to set these parameters correctly for Vault to authenticate against the Kubernetes cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/kubernetes/config \\\n    kubernetes_host=\"https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT\" \\\n    issuer=\"\\\"test-aks-cluster-dns-d6cbb78e.hcp.uksouth.azmk8s.io\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Retrieved Secret in Go\nDESCRIPTION: This snippet demonstrates how to verify the retrieved secret in Go by comparing it with the expected value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nif value != \"Hashi123\" {\n    log.Fatalf(\"unexpected password value %q retrieved from vault\", value)\n}\n\nfmt.Println(\"Access granted!\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with GitHub via CLI\nDESCRIPTION: This command authenticates to Vault using the GitHub auth method. After authentication, the user is logged in and receives a token for future requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/auth.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=github token=<token>\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring a Database Role in Vault\nDESCRIPTION: Command to configure a role that maps a name in Vault to a set of creation statements for database credentials. This defines how Vault should create and manage database users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-database \\\n    creation_statements=\"...\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\nSuccess! Data written to: database/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Verifying Retrieved Secret in Java\nDESCRIPTION: This snippet demonstrates how to verify the retrieved secret in Java by comparing it with the expected value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_44\n\nLANGUAGE: Java\nCODE:\n```\nif (!password.equals(\"Hashi123\")) {\n    throw new Exception(\"Unexpected password\");\n}\n\nSystem.out.println(\"Access granted!\");\n```\n\n----------------------------------------\n\nTITLE: Create/Update Group by Name - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to create or update a group in Vault's Identity store using its name. It sends a POST request to the `/identity/group/name/:name` endpoint, replacing `:name` with the group name and including a Vault token for authentication, along with a JSON payload containing group details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/group/name/testgroupname\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with Vault Agent Injection\nDESCRIPTION: This YAML snippet demonstrates how to configure a Kubernetes Deployment with Vault Agent Injection. It includes a ServiceAccount and annotations for secret injection, template configuration, and TLS settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-example\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-example-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app-example\n  template:\n    metadata:\n      labels:\n        app: app-example\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/agent-inject-secret-db-creds: 'database/creds/db-app'\n        vault.hashicorp.com/agent-inject-template-db-creds: |\n          {{- with secret \"database/creds/db-app\" -}}\n          postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/appdb?sslmode=disable\n          {{- end }}\n        vault.hashicorp.com/role: 'db-app'\n        vault.hashicorp.com/ca-cert: '/vault/tls/ca.crt'\n        vault.hashicorp.com/client-cert: '/vault/tls/client.crt'\n        vault.hashicorp.com/client-key: '/vault/tls/client.key'\n        vault.hashicorp.com/tls-secret: 'vault-tls-client'\n    spec:\n      containers:\n        - name: app\n          image: 'app:1.0.0'\n      serviceAccountName: app-example\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Python Client Library\nDESCRIPTION: This command uses the `pip install` command to install the hvac client library for Python.  It installs the hvac package, which provides a client for interacting with HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pip install hvac\n```\n\n----------------------------------------\n\nTITLE: Configuring Raft Storage with Retry Join in HCL\nDESCRIPTION: This HCL code snippet provides a configuration for setting up a Vault node with Raft storage. It defines the storage path and node ID, and specifies leader nodes to join using the retry_join configuration. Required dependencies include a properly configured Vault environment. Key parameters are path, node_id, and leader_api_addr. Input includes the leader API address, and the output is the joining of the node to the cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path    = \"/var/raft/\"\n  node_id = \"node3\"\n\n  retry_join {\n    leader_api_addr = \"https://node1.vault.local:8200\"\n  }\n  retry_join {\n    leader_api_addr = \"https://node2.vault.local:8200\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Plaintext Data using Vault Transit API - Bash\nDESCRIPTION: This snippet demonstrates how to encrypt plaintext data using the `/encrypt` endpoint of Vault's transit secrets engine. It requires the plaintext to be base64-encoded due to Vault's handling of data. The output provides the encrypted ciphertext which includes version and identification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transit/encrypt/my-key plaintext=$(echo \"my secret data\" | base64)\n\nKey           Value\n---           -----\nciphertext    vault:v1:8SDd3WHDOjf7mq69CyCqYjBXAiQQAVZRkFM13ok481zoCmHnSeDX9vyf7w==\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using OpenAPI Go\nDESCRIPTION: This snippet demonstrates how to retrieve a secret from Vault using the OpenAPI Go client. It uses the KVv2Read method to read the secret from the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_38\n\nLANGUAGE: go\nCODE:\n```\ns, err := client.Secrets.KVv2Read(context.Background(), \"my-secret-password\")\nif err != nil {\n   log.Fatal(err)\n}\n\nlog.Println(\"Secret retrieved:\", s.Data)\n```\n\n----------------------------------------\n\nTITLE: Updating Policy via API\nDESCRIPTION: API request to update an existing policy using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n  --request POST \\\n  --header \"X-Vault-Token: ...\" \\\n  --data '{\"policy\":\"path \\\"...\\\" {...} \"}' \\\n  https://vault.hashicorp.rocks/v1/sys/policy/my-existing-policy\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using Bash\nDESCRIPTION: This snippet shows how to store a secret in Vault using a curl command in Bash. It sends a POST request to the Vault API with the secret data in JSON format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n    --header \"Content-Type: application/json\" \\\n    --request POST \\\n    --data '{\"data\": {\"password\": \"Hashi123\"}}' \\\n    http://127.0.0.1:8200/v1/secret/data/my-secret-password\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML for Vault Replication with Multiple ACS URLs\nDESCRIPTION: Command to configure SAML authentication to work across Vault replication clusters by specifying multiple assertion consumer service URLs. This allows the same auth method to be used on primary and secondary clusters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/saml/config \\\n   acs_urls=\"https://primary.vault/v1/auth/saml/callback,https://secondary.vault/v1/auth/saml/callback\"\n```\n\n----------------------------------------\n\nTITLE: Enable New Secrets Engine Request\nDESCRIPTION: POST request to enable a new secrets engine at a specified mount path. Requires Vault token and configuration payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mounts/my-mount\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Auth Method in Vault via CLI\nDESCRIPTION: This command provides help documentation for the authentication method configured at the 'my-auth' path, showing available endpoints and their usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/auth.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault path-help auth/my-auth\n# ...\n```\n\n----------------------------------------\n\nTITLE: Starting Vault in Docker\nDESCRIPTION: This command starts a Vault server in development mode using Docker. It maps port 8200 and sets the root token to 'dev-only-token'. This setup is only suitable for local development and not for production environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ docker run -p 8200:8200 -e 'VAULT_DEV_ROOT_TOKEN_ID=dev-only-token' hashicorp/vault\n```\n\n----------------------------------------\n\nTITLE: Generating a Self-Signed Root CA Certificate using Vault CLI\nDESCRIPTION: Create a self-signed root CA certificate using Vault's PKI secrets engine. Vault generates and securely stores the certificate’s private key. Dependencies include a configured PKI engine. This command outputs a CA certificate valid for one year.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/setup.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write pki/root/generate/internal \\\n    common_name=my-website.com \\\n    ttl=8760h\n\nKey              Value\n---              -----\ncertificate      -----BEGIN CERTIFICATE-----...\nexpiration       1536807433\nissuing_ca       -----BEGIN CERTIFICATE-----...\nserial_number    7c:f1:fb:2c:6e:4d:99:0e:82:1b:08:0a:81:ed:61:3e:1d:fa:f5:29\n```\n\n----------------------------------------\n\nTITLE: Vault Policy Path Matching Examples in HCL\nDESCRIPTION: This snippet illustrates different path matching techniques in Vault policies, including exact matches, glob patterns, and prefix matches. It demonstrates how to control access to specific paths or groups of paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Permit reading only \"secret/foo\". an attached token cannot read \"secret/food\"\n# or \"secret/foo/bar\".\npath \"secret/foo\" {\n  capabilities = [\"read\"]\n}\n\n# Permit reading everything under \"secret/bar\". an attached token could read\n# \"secret/bar/zip\", \"secret/bar/zip/zap\", but not \"secret/bars/zip\".\npath \"secret/bar/*\" {\n  capabilities = [\"read\"]\n}\n\n# Permit reading everything prefixed with \"zip-\". an attached token could read\n# \"secret/zip-zap\" or \"secret/zip-zap/zong\", but not \"secret/zip/zap\npath \"secret/zip-*\" {\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Paths for Vault Ingress\nDESCRIPTION: YAML configuration for adding extra paths to the Vault Ingress resource. This example adds a wildcard path that redirects to an SSL service, useful when working with annotation-based services.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nextraPaths:\n  - path: /*\n    backend:\n      service:\n        name: ssl-redirect\n        port:\n          number: use-annotation\n```\n\n----------------------------------------\n\nTITLE: AppRole Authentication and Secret Retrieval in Go\nDESCRIPTION: This Go code demonstrates AppRole authentication with Vault, including response wrapping for the secret ID. It initializes a Vault client, logs in using AppRole credentials, and retrieves a key-value secret from the KV v2 secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\tvault \"github.com/hashicorp/vault/api\"\n\tauth \"github.com/hashicorp/vault/api/auth/approle\"\n)\n\n// Fetches a key-value secret (kv-v2) after authenticating via AppRole.\nfunc getSecretWithAppRole() (string, error) {\n\tconfig := vault.DefaultConfig() // modify for more granular configuration\n\n\tclient, err := vault.NewClient(config)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize Vault client: %w\", err)\n\t}\n\n\t// A combination of a Role ID and Secret ID is required to log in to Vault\n\t// with an AppRole.\n\t// First, let's get the role ID given to us by our Vault administrator.\n\troleID := os.Getenv(\"APPROLE_ROLE_ID\")\n\tif roleID == \"\" {\n\t\treturn \"\", fmt.Errorf(\"no role ID was provided in APPROLE_ROLE_ID env var\")\n\t}\n\n\t// The Secret ID is a value that needs to be protected, so instead of the\n\t// app having knowledge of the secret ID directly, we have a trusted orchestrator (https://learn.hashicorp.com/tutorials/vault/secure-introduction?in=vault/app-integration#trusted-orchestrator)\n\t// give the app access to a short-lived response-wrapping token (https://developer.hashicorp.com/vault/docs/concepts/response-wrapping).\n\t// Read more at: https://learn.hashicorp.com/tutorials/vault/approle-best-practices?in=vault/auth-methods#secretid-delivery-best-practices\n\tsecretID := &auth.SecretID{FromFile: \"path/to/wrapping-token\"}\n\n\tappRoleAuth, err := auth.NewAppRoleAuth(\n\t\troleID,\n\t\tsecretID,\n\t\tauth.WithWrappingToken(), // Only required if the secret ID is response-wrapped.\n\t)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize AppRole auth method: %w\", err)\n\t}\n\n\tauthInfo, err := client.Auth().Login(context.Background(), appRoleAuth)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to login to AppRole auth method: %w\", err)\n\t}\n\tif authInfo == nil {\n\t\treturn \"\", fmt.Errorf(\"no auth info was returned after login\")\n\t}\n\n\t// get secret from the default mount path for KV v2 in dev mode, \"secret\"\n\tsecret, err := client.KVv2(\"secret\").Get(context.Background(), \"creds\")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read secret: %w\", err)\n\t}\n\n\t// data map can contain more than one key-value pair,\n\t// in this case we're just grabbing one of them\n\tvalue, ok := secret.Data[\"password\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"value type assertion failed: %T %#v\", secret.Data[\"password\"], secret.Data[\"password\"])\n\t}\n\n\treturn value, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using Python\nDESCRIPTION: This snippet shows how to retrieve a secret from Vault using the Python client. It uses the read_secret_version method to read the secret from the specified path and then extracts the password value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_35\n\nLANGUAGE: Python\nCODE:\n```\nread_response = client.secrets.kv.read_secret_version(path='my-secret-password')\n\npassword = read_response['data']['data']['password']\n```\n\n----------------------------------------\n\nTITLE: Configuring Comprehensive Vault Agent Templates Example\nDESCRIPTION: Complete example of Vault Agent template configuration demonstrating template_config block with custom settings and multiple template blocks, including both file-based and inline content-based templates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\n# Other Vault Agent configuration blocks\n# ...\n\ntemplate_config {\n  static_secret_render_interval = \"10m\"\n  exit_on_retry_failure = true\n  max_connections_per_host = 20\n}\n\ntemplate {\n  source      = \"/tmp/agent/template.ctmpl\"\n  destination = \"/tmp/agent/render.txt\"\n}\n\ntemplate {\n  contents     = \"{{ with secret \\\"secret/my-secret\\\" }}{{ .Data.data.foo }}{{ end }}\"\n  destination  = \"/tmp/agent/render-content.txt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Spring Vault Libraries (Java)\nDESCRIPTION: This code snippet shows how to import necessary classes from the Spring Vault library in a Java program. These classes are used for authentication, defining the Vault endpoint, and interacting with Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_11\n\nLANGUAGE: Java\nCODE:\n```\nimport org.springframework.vault.authentication.TokenAuthentication;\nimport org.springframework.vault.client.VaultEndpoint;\nimport org.springframework.vault.support.Versioned;\nimport org.springframework.vault.core.VaultTemplate;\n```\n\n----------------------------------------\n\nTITLE: Kubernetes RBAC Configuration for Vault Authentication\nDESCRIPTION: This YAML configuration creates a ClusterRoleBinding that grants the necessary permissions for the Vault authentication service account to access the TokenReview API in Kubernetes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: role-tokenreview-binding\n  namespace: default\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: system:auth-delegator\nsubjects:\n  - kind: ServiceAccount\n    name: vault-auth\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Enabling JWT/OIDC Auth Method in Vault\nDESCRIPTION: Commands to enable the JWT or OIDC authentication method in Vault. Either method name can be used and will be mounted at the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth enable jwt\n  or\n$ vault auth enable oidc\n```\n\n----------------------------------------\n\nTITLE: Example Bound Claims Configuration for JWT Auth\nDESCRIPTION: JSON configuration showing how to set up bound claims for JWT validation with specific department and division requirements. This requires the JWT to contain matching claim values for successful authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"division\": \"Europe\",\n  \"department\": \"Engineering\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: Command to enable the database secrets engine in Vault. By default, the engine will be enabled at the path 'database/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using OpenAPI .NET\nDESCRIPTION: This snippet shows how to retrieve a secret from Vault using the OpenAPI .NET client. It uses the KVv2Read method to read the secret from the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_39\n\nLANGUAGE: cs\nCODE:\n```\nVaultResponse<Object> resp = vaultClient.Secrets.KVv2Read(\"my-secret-password\");\nConsole.WriteLine(resp.Data);\n```\n\n----------------------------------------\n\nTITLE: OCI Identity Policy for Same-Tenant KMS Access\nDESCRIPTION: This snippet demonstrates an OCI Identity Policy that allows a dynamic group to use KMS keys within the same tenant. It defines the tenant, dynamic group, and grants permissions to use keys in a specific compartment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/ocikms.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\ndefine tenancy tenantA as <tenantA-ocid>\n\ndefine dynamic-group <dynamic-group-name> as <dynamic-group-ocid>\n\nadmit dynamic-group <dynamic-group-name> of tenancy tenantA to use keys in compartment <key-compartment>\n```\n\n----------------------------------------\n\nTITLE: Basic PKI Health Check Command\nDESCRIPTION: Performs a basic health check against the pki-root mount\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki health-check pki-root/\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Role with Custom Revocation Statements\nDESCRIPTION: This command configures a new role in Vault with custom revocation statements to drop the user instead of revoking privileges.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-mysql-database \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n    revocation_statements=\"DROP USER '{{name}}'@'%';\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Enabling the Database Secrets Engine in Vault\nDESCRIPTION: Command to enable the database secrets engine in Vault at the default path. This is typically the first step in setting up database credential management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Configuring Userpass Auth Method and Namespaces in Vault\nDESCRIPTION: This script configures the userpass auth method and creates two namespaces (us-west-org and us-east-org) in Vault. It sets up authentication roles, entities, policies, and secrets for cross-namespace access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# Create new namespaces - they are peer\nvault namespace create us-west-org\nvault namespace create us-east-org\n\n#--------------------------\n# us-west-org namespace\n#--------------------------\nVAULT_NAMESPACE=us-west-org vault secrets enable -path=\"kv-customer-info\" kv-v2\nVAULT_NAMESPACE=us-west-org vault kv put kv-customer-info/customer-001 name=\"Example LLC\" contact_email=\"admin@example.com\"\n# Create a policy to allow read access to kv-marketing\nVAULT_NAMESPACE=us-west-org vault policy write customer-info-read-only -<<EOF\npath \"kv-customer-info/data/*\" {\n   capabilities = [\"read\"]\n}\nEOF\nVAULT_NAMESPACE=us-west-org vault auth enable userpass\nVAULT_NAMESPACE=us-west-org vault write auth/userpass/users/tam-user password=\"my-long-password\" policies=customer-info-read-only\n\n# Create an entity\nVAULT_NAMESPACE=us-west-org vault auth list -format=json | jq -r '.[\"userpass/\"].accessor' > accessor.txt\nVAULT_NAMESPACE=us-west-org vault write -format=json identity/entity name=\"TAM\" | jq -r \".data.id\" > entity_id.txt\nVAULT_NAMESPACE=us-west-org vault write identity/entity-alias name=\"tam-user\" canonical_id=$(cat entity_id.txt) mount_accessor=$(cat accessor.txt)\n\n#--------------------------\n# us-east-org namespace\n#--------------------------\nVAULT_NAMESPACE=us-east-org vault secrets enable -path=\"kv-marketing\" kv-v2\nVAULT_NAMESPACE=us-east-org vault kv put kv-marketing/campaign start_date=\"March 1, 2023\" end_date=\"March 31, 2023\" prise=\"Certification voucher\" quantity=\"100\"\n\n# Create a policy to allow read access to kv-marketing\nVAULT_NAMESPACE=us-east-org vault policy write marketing-read-only -<<EOF\npath \"kv-marketing/data/campaign\" {\n   capabilities = [\"read\"]\n}\nEOF\n\n# Create a group\nVAULT_NAMESPACE=us-east-org vault write -format=json identity/group name=\"campaign-admin\" policies=\"marketing-read-only\" member_entity_ids=$(cat entity_id.txt)\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using OpenAPI .NET\nDESCRIPTION: This snippet shows how to store a secret in Vault using the OpenAPI .NET client. It creates a dictionary with the secret data and uses the KVv2Write method to write the secret to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_31\n\nLANGUAGE: cs\nCODE:\n```\nvar secretData = new Dictionary<string, string> { { \"password\", \"Hashi123\" } };\n\n// Write a secret\nvar kvRequestData = new KVv2WriteRequest(secretData);\n\nvaultClient.Secrets.KVv2Write(\"my-secret-password\", kvRequestData);\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using Go\nDESCRIPTION: This snippet demonstrates how to store a secret in Vault using the Go client. It creates a map with the secret data and uses the KVv2 Put method to write the secret to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_24\n\nLANGUAGE: go\nCODE:\n```\nsecretData := map[string]interface{}{\n    \"password\": \"Hashi123\",\n}\n\n\n_, err = client.KVv2(\"secret\").Put(context.Background(), \"my-secret-password\", secretData)\nif err != nil {\n    log.Fatalf(\"unable to write secret: %v\", err)\n}\n\nfmt.Println(\"Secret written successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Reading Wrapping Key for Key Import - Bash\nDESCRIPTION: This snippet reads the wrapping key needed for importing an existing key into Vault. The wrapping key is a 4096-bit RSA public key that will be used to wrap the target key before import.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault read transit/wrapping_key\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Certificate Authentication with File Paths\nDESCRIPTION: Commands to configure certificate authentication when TLS certificate data is present on the machine running Vault, by setting SSL credentials in the connection parameters as paths to files.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ export SSL=\"sslmode=verify-full&sslrootcert=/path/to/ca.pem&sslcert=/path/to/client.pem&sslkey=/path/to/client.key\"\n$ vault write database/config/my-postgresql-database \\\n    plugin_name=\"postgresql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"postgresql://{{username}}:{{password}}@localhost:5432/database-name?sslmode=verify-full&${SSL}\" \\\n    username=\"vaultuser\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MSSQL Role\nDESCRIPTION: Command to configure a role that maps a name in Vault to SQL statements for credential creation\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mssql.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-mssql-database \\\n    creation_statements=\"CREATE LOGIN [{{name}}] WITH PASSWORD = '{{password}}';\\\n        CREATE USER [{{name}}] FOR LOGIN [{{name}}];\\\n        GRANT SELECT ON SCHEMA::dbo TO [{{name}}];\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Registering Community Plugins in Vault\nDESCRIPTION: Command for registering an external community plugin in Vault's plugin catalog. This requires specifying the SHA256 hash of the plugin binary for authentication and integrity verification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register -sha256=<SHA256 Hex value of the plugin binary> \\\n    secret \\                  # type\n    passthrough-plugin\n\nSuccess! Registered plugin: passthrough-plugin\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variable Template Configuration for Single Plugin\nDESCRIPTION: This example demonstrates how to generate an environment variable template configuration for a single secrets plugin named 'foo'. It specifies the configuration type, execution command, and path to the secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/agent/generate-config.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault agent generate-config  \\\n    -type=\"env-template\"       \\\n    -exec=\"./my-app arg1 arg2\" \\\n    -path=\"secret/foo\"\n\nCommand output\n```\n\n----------------------------------------\n\nTITLE: Generating PostgreSQL Credentials from Vault\nDESCRIPTION: Command to generate new database credentials by reading from the /creds endpoint with the role name. Returns username and password with lease information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           SsnoaA-8Tv4t34f41baD\nusername           v-vaultuse-my-role-x\n```\n\n----------------------------------------\n\nTITLE: Detailed Vault Policy with Multiple Path Rules in HCL\nDESCRIPTION: This code snippet showcases a more complex Vault policy with multiple path rules. It includes broad access, explicit denials, and parameter restrictions, demonstrating various policy capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# This section grants all access on \"secret/*\". further restrictions can be\n# applied to this broad policy, as shown below.\npath \"secret/*\" {\n  capabilities = [\"create\", \"read\", \"update\", \"patch\", \"delete\", \"list\"]\n}\n\n# Even though we allowed secret/*, this line explicitly denies\n# secret/super-secret. this takes precedence.\npath \"secret/super-secret\" {\n  capabilities = [\"deny\"]\n}\n\n# Policies can also specify allowed, disallowed, and required parameters. here\n# the key \"secret/restricted\" can only contain \"foo\" (any value) and \"bar\" (one\n# of \"zip\" or \"zap\").\npath \"secret/restricted\" {\n  capabilities = [\"create\"]\n  allowed_parameters = {\n    \"foo\" = []\n    \"bar\" = [\"zip\", \"zap\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Multiplexing Configuration Snippet\nDESCRIPTION: Code snippet showing the core configuration for plugin multiplexing with backwards compatibility support for TLS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-development.mdx#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\terr := plugin.ServeMultiplex(&plugin.ServeOpts{\n\t\tBackendFactoryFunc: myPlugin.Factory,\n\t\tTLSProviderFunc:    tlsProviderFunc,\n\t})\n```\n\n----------------------------------------\n\nTITLE: Starting Vault Server in Developer Mode - Shell\nDESCRIPTION: This snippet demonstrates how to start the Vault server in development mode using specific flags to set the root token. It's crucial for local testing but should not be used in production environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault server -dev -dev-root-token-id=\"dev-only-token\"\n```\n\n----------------------------------------\n\nTITLE: Creating Shared KV Section for Group Members in HCL\nDESCRIPTION: This policy snippet creates a shared section of KV associated with entities in a specific group. It uses the group ID to map the group and path, granting various capabilities on the data and metadata paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/data/groups/{{identity.groups.ids.fb036ebc-2f62-4124-9503-42aa7A869741.name}}/*\" {\n  capabilities = [\"create\", \"update\", \"patch\", \"read\", \"delete\"]\n}\n\npath \"secret/metadata/groups/{{identity.groups.ids.fb036ebc-2f62-4124-9503-42aa7A869741.name}}/*\" {\n  capabilities = [\"list\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Kubernetes Auth Method via CLI\nDESCRIPTION: This command authenticates with Vault using the Kubernetes auth method from the command line. It requires a JWT token from a Kubernetes service account and a pre-configured role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/kubernetes/login role=demo jwt=...\n```\n\n----------------------------------------\n\nTITLE: JSON Response from Kubernetes Auth Login\nDESCRIPTION: This is the JSON response structure from a successful Kubernetes auth login, containing the client token, accessor, policies, and metadata about the service account that was used for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"38fe9691-e623-7238-f618-c94d4e7bc674\",\n    \"accessor\": \"78e87a38-84ed-2692-538f-ca8b9f400ab3\",\n    \"policies\": [\"default\"],\n    \"metadata\": {\n      \"role\": \"demo\",\n      \"service_account_name\": \"myapp\",\n      \"service_account_namespace\": \"default\",\n      \"service_account_secret_name\": \"myapp-token-pd21c\",\n      \"service_account_uid\": \"aa9aa8ff-98d0-11e7-9bb7-0800276d99bf\"\n    },\n    \"lease_duration\": 2764800,\n    \"renewable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via CLI\nDESCRIPTION: Sets up AWS credentials in Vault for making API calls, including both direct credential and workload identity federation options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/aws/config/client \\\n    secret_key=vCtSM8ZUEQ3mOFVlYPBQkf2sO6F/W7a5TVzrl3Oj \\\n    access_key=VKIAJBRHKH6EVTTNXDHA\n\n$ vault auth/aws/config/client \\\n    identity_token_audience=\"vault.example/v1/identity/oidc/plugins\" \\\n    role_arn=\"arn:aws:iam::123456789123:role/example-web-identity-role\"\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled Secrets Engines in Vault\nDESCRIPTION: This command lists all enabled secrets engines in HashiCorp Vault, showing their paths, types, accessors, and descriptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets list\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ncubbyhole/    cubbyhole    cubbyhole_548b4dc5    per-token private secret storage\nsecret/       kv           identity_aa00c06d     key/value secret storage\nsys/          system       system_547412e3       system endpoints used for control, policy and debugging\n```\n\n----------------------------------------\n\nTITLE: Example File System Storage Configuration in HCL\nDESCRIPTION: This snippet is an example configuration of the file system storage backend for HashiCorp Vault, showing the directive to mount storage at the specified directory. It illustrates the expected syntax and usage of the Vault configuration format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/filesystem.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"file\" {\n  path = \"/mnt/vault/data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating AWS Credentials in Vault\nDESCRIPTION: Example of generating dynamic AWS credentials for a specific role\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/read.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read aws/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Vault\nDESCRIPTION: Command to configure Vault with the proper database plugin and connection information. This creates a configuration for a database that Vault can manage credentials for.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-database \\\n    plugin_name=\"...\" \\\n    connection_url=\"...\" \\\n    allowed_roles=\"...\" \\\n    username=\"...\" \\\n    password=\"...\" \n```\n\n----------------------------------------\n\nTITLE: Creating New Vault Token\nDESCRIPTION: Creates a new token with specified policies and metadata. Can create service or batch tokens with various parameters like TTL, uses limit, and renewal properties.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\"web\", \"stage\"],\n  \"meta\": {\n    \"user\": \"armon\"\n  },\n  \"ttl\": \"1h\",\n  \"renewable\": true\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/create\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"f00341c1-fad5-f6e6-13fd-235617f858a1\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"wrap_info\": null,\n  \"warnings\": [\n    \"Policy \\\"stage\\\" does not exist\",\n    \"Policy \\\"web\\\" does not exist\"\n  ],\n  \"auth\": {\n    \"client_token\": \"s.wOrq9dO9kzOcuvB06CMviJhZ\",\n    \"accessor\": \"B6oixijqmeR4bsLOJH88Ska9\",\n    \"policies\": [\"default\", \"stage\", \"web\"],\n    \"token_policies\": [\"default\", \"stage\", \"web\"],\n    \"metadata\": {\n      \"user\": \"armon\"\n    },\n    \"lease_duration\": 3600,\n    \"renewable\": true,\n    \"entity_id\": \"\",\n    \"token_type\": \"service\",\n    \"orphan\": false,\n    \"num_uses\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Password Role\nDESCRIPTION: Configuration of a static role that rotates passwords for existing Snowflake users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/snowflake.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/static-roles/my-password-role \\\n    db_name=my-snowflake-database \\\n    username=\"snowflake_existing_user\" \\\n    rotation_period=\"24h\" \\\n    rotation_statements=\"ALTER USER {{name}} SET PASSWORD = '{{password}}'\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Server with Raft Storage and TCP Listener in HCL\nDESCRIPTION: This HCL snippet demonstrates a Vault server configuration with UI enabled, cluster and API addresses set, Raft storage, TCP listener with TLS, and telemetry settings. It's designed for a multi-node cluster setup with integrated storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nui            = true\ncluster_addr  = \"https://127.0.0.1:8201\"\napi_addr      = \"https://127.0.0.1:8200\"\ndisable_mlock = true\n\nstorage \"raft\" {\n  path = \"/path/to/raft/data\"\n  node_id = \"raft_node_id\"\n}\n\nlistener \"tcp\" {\n  address       = \"127.0.0.1:8200\"\n  tls_cert_file = \"/path/to/full-chain.pem\"\n  tls_key_file  = \"/path/to/private-key.pem\"\n}\n\ntelemetry {\n  statsite_address = \"127.0.0.1:8125\"\n  disable_hostname = true\n}\n```\n\n----------------------------------------\n\nTITLE: Simple Read-Only Policy for KVv1 Secret in HCL\nDESCRIPTION: This snippet demonstrates a basic policy granting read-only access to a specific KVv1 secret path. It shows the fundamental structure of a Vault policy using HCL syntax.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/foo\" {\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using Go\nDESCRIPTION: This snippet demonstrates how to retrieve a secret from Vault using the Go client. It uses the KVv2 Get method to read the secret from the specified path and then extracts the password value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nsecret, err := client.KVv2(\"secret\").Get(context.Background(), \"my-secret-password\")\nif err != nil {\n    log.Fatalf(\"unable to read secret: %v\", err)\n}\n\nvalue, ok := secret.Data[\"password\"].(string)\nif !ok {\nlog.Fatalf(\"value type assertion failed: %T %#v\", secret.Data[\"password\"], secret.Data[\"password\"])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vault-action in GitHub Actions Workflow\nDESCRIPTION: This YAML snippet demonstrates how to set up a vault-action step in a GitHub Actions workflow. It authenticates with a Vault instance, retrieves secrets, and makes them available as environment variables for subsequent steps.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/github-actions.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n    build:\n        # ...\n        steps:\n            # ...\n            - name: Import Secrets\n              uses: hashicorp/vault-action@v2.4.0\n              with:\n                url: https://vault.example.com:8200\n                token: ${{ secrets.VAULT_TOKEN }}\n                caCertificate: ${{ secrets.VAULT_CA_CERT }}\n                secrets: |\n                    secret/data/ci/aws accessKey | AWS_ACCESS_KEY_ID ;\n                    secret/data/ci/aws secretKey | AWS_SECRET_ACCESS_KEY ;\n                    secret/data/ci npm_token\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth in Vault (External)\nDESCRIPTION: These commands enable and configure JWT auth in Vault when Vault is running outside the Kubernetes cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvault auth enable jwt\nvault write auth/jwt/config oidc_discovery_url=\"${ISSUER}\"\n```\n\n----------------------------------------\n\nTITLE: Importing Vault Python Client Library\nDESCRIPTION: This code snippet shows how to import the hvac client library in a Python program. It uses the `import` keyword to make the library available for use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\nimport hvac\n```\n\n----------------------------------------\n\nTITLE: Verifying TLS Configuration with sslscan (RSA Certificate)\nDESCRIPTION: This shell session shows how to use sslscan to verify the TLS configuration of a Vault instance using an RSA certificate. It displays the supported protocols, ciphersuites, and certificate details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/tcp-tls.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\nsslscan 127.0.0.1:8200\nTesting SSL server 127.0.0.1 on port 8200 using SNI name 127.0.0.1\n\n  SSL/TLS Protocols:\nSSLv2     disabled\nSSLv3     disabled\nTLSv1.0   disabled\nTLSv1.1   disabled\nTLSv1.2   enabled\nTLSv1.3   enabled\n\n  Supported Server Cipher(s):\nPreferred TLSv1.3  128 bits  TLS_AES_128_GCM_SHA256        Curve 25519 DHE 253\nAccepted  TLSv1.3  256 bits  TLS_AES_256_GCM_SHA384        Curve 25519 DHE 253\nAccepted  TLSv1.3  256 bits  TLS_CHACHA20_POLY1305_SHA256  Curve 25519 DHE 253\nPreferred TLSv1.2  128 bits  ECDHE-RSA-AES128-GCM-SHA256   Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-GCM-SHA384   Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  ECDHE-RSA-CHACHA20-POLY1305   Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  ECDHE-RSA-AES128-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  ECDHE-RSA-AES256-SHA          Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  AES128-GCM-SHA256\nAccepted  TLSv1.2  256 bits  AES256-GCM-SHA384\nAccepted  TLSv1.2  128 bits  AES128-SHA\nAccepted  TLSv1.2  256 bits  AES256-SHA\nAccepted  TLSv1.2  112 bits  TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\nAccepted  TLSv1.2  112 bits  TLS_RSA_WITH_3DES_EDE_CBC_SHA\n\n  Server Key Exchange Group(s):\nTLSv1.3  128 bits  secp256r1 (NIST P-256)\nTLSv1.3  192 bits  secp384r1 (NIST P-384)\nTLSv1.3  260 bits  secp521r1 (NIST P-521)\nTLSv1.3  128 bits  x25519\nTLSv1.2  128 bits  secp256r1 (NIST P-256)\nTLSv1.2  192 bits  secp384r1 (NIST P-384)\nTLSv1.2  260 bits  secp521r1 (NIST P-521)\nTLSv1.2  128 bits  x25519\n\n  SSL Certificate:\nSignature Algorithm: sha256WithRSAEncryption\nRSA Key Strength:    4096\n```\n\n----------------------------------------\n\nTITLE: Generating Database Credentials in Vault\nDESCRIPTION: Command to generate new database credentials by reading from the /creds endpoint with a role name. This returns a username and password that can be used to access the database.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           FSREZ1S0kFsZtLat-y94\nusername           v-vaultuser-e2978cd0-ugp7iqI2hdlff5hfjylJ-1602537260\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Using Helm Basic Command\nDESCRIPTION: Basic helm install command to deploy the latest version of Vault chart\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-Based Static Role Rotation in Vault\nDESCRIPTION: This snippet configures automatic credential rotation for a static role in a database using Vault. It sets the rotation schedule to occur every Saturday at 00:00. Prerequisite: A configured Vault instance with database secrets engine enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/static-roles/my-role \\\n    db_name=my-database \\\n    username=\\\"vault\\\" \\\n    rotation_schedule=\\\"0 * * * SAT\\\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Shell\nDESCRIPTION: This snippet enables the database secrets engine in HashiCorp Vault using a shell command. The default path for the secrets engine is used; however, a different path can be specified with the `-path` argument. The output confirms successful enabling of the secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Importing Vault C# Client Library\nDESCRIPTION: This code snippet shows how to import the VaultSharp client library in a C# program.  It imports necessary namespaces for interacting with Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_7\n\nLANGUAGE: cs\nCODE:\n```\nusing VaultSharp;\nusing VaultSharp.V1.AuthMethods;\nusing VaultSharp.V1.AuthMethods.Token;\nusing VaultSharp.V1.Commons;\n```\n\n----------------------------------------\n\nTITLE: Vault Token Lookup by Token ID (Shell)\nDESCRIPTION: This command retrieves information about a specific token by providing its token ID. It uses the `/auth/token/lookup` endpoint to retrieve the token information. The token ID is passed as an argument to the `vault token lookup` command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/lookup.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token lookup 96ddf4bc-d217-f3ba-f9bd-017055595017\n```\n\n----------------------------------------\n\nTITLE: Listing Raft Peers to Verify Cluster Setup\nDESCRIPTION: This command lists all the Raft peers in the Vault cluster, showing their node IDs, addresses, states, and voting status. It helps verify that the Raft cluster has been successfully initialized and all nodes are participating.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-with-raft.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-0 -- vault operator raft list-peers\n```\n\n----------------------------------------\n\nTITLE: Enable Vault auth method\nDESCRIPTION: This command enables the \"userpass\" authentication method in Vault at the path \"userpass/\". This is a prerequisite for authenticating users using usernames and passwords. The command returns a success message if the operation is successful.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/enable.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth enable userpass\nSuccess! Enabled the userpass auth method at: userpass/\n```\n\n----------------------------------------\n\nTITLE: Using cURL to Enable KV Plugin\nDESCRIPTION: Perform an HTTP POST request using cURL to enable the key/value plugin by sending JSON data for v2 setup. Ensure proper headers and tokens are used for successful execution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/setup.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl                                        \\\n    --request POST                            \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n    --data @data.json                         \\\n    ${VAULT_ADDR}/v1/sys/mounts/<plugin_mount_path>\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultStaticSecret for Docker Registry in Kubernetes YAML\nDESCRIPTION: This YAML configuration creates a VaultStaticSecret resource to populate a Kubernetes secret named 'myregistryKey' with Docker registry credentials stored in Vault. It uses the 'kubernetes.io/dockerconfigjson' type to format the secret correctly for use as an imagePullSecret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/examples.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Apply a VaultStaticSecret which populates the k8s secret named 'myregistryKey' in the applications namespace\n# Note: this Secret uses the `default` VaultAuthMethod.\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  namespace: awesomeapps\n  name: vault-kv-app\nspec:\n  type: kv-v2\n  mount: kvv2\n  path: docker/config\n  # dest k8s secret\n  destination:\n    name: myregistryKey\n    create: true\n    type: \"kubernetes.io/dockerconfigjson\"\n---\n# Example pod from\n# https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod\napiVersion: v1\nkind: Pod\nmetadata:\n  name: foo\n  namespace: awesomeapps\nspec:\n  containers:\n    - name: foo\n      image: janedoe/awesomeapp:v1\n  imagePullSecrets:\n   - name: myregistrykey\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Device using Vault CLI - Shell\nDESCRIPTION: This snippet shows how to enable a new audit device in Vault using the CLI. It specifies the general command structure for enabling an audit device, including placeholders for flags, device type, and configuration options. Prerequisites include having Vault CLI installed and configured. Additional parameters can be set based on the audit device type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/enable.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable [flags] <device_type> [options] [<config_argument=value>...]\n\n$ vault audit enable [-help | -h]\n```\n\n----------------------------------------\n\nTITLE: Creating a JWT Authentication Role\nDESCRIPTION: Command to create a JWT role with specific constraints including redirect URIs, bound subject, audiences, user claim, groups claim, and TTL settings. Defines how JWT tokens are validated and mapped to Vault policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nvault write auth/jwt/role/demo \\\n    allowed_redirect_uris=\"http://localhost:8250/oidc/callback\" \\\n    bound_subject=\"r3qX9DljwFIWhsiqwFiu38209F10atW6@clients\" \\\n    bound_audiences=\"https://vault.plugin.auth.jwt.test\" \\\n    user_claim=\"https://vault/user\" \\\n    groups_claim=\"https://vault/groups\" \\\n    policies=webapps \\\n    ttl=1h\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Vault Dependency (Java)\nDESCRIPTION: This XML snippet shows how to add the Spring Vault Core dependency to a Java project's `pom.xml` file when using Maven.  It specifies the group ID, artifact ID, and version of the Spring Vault Core library.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n     <groupId>org.springframework.vault</groupId>\n     <artifactId>spring-vault-core</artifactId>\n     <version>2.3.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Applying New Vault Resources with Terraform\nDESCRIPTION: Demonstrates applying the Terraform configuration to create new Vault resources. Shows the creation of namespace, mount, and policy resources with execution results.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nterraform apply\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Auth Method\nDESCRIPTION: This command configures the Kubernetes auth method with the necessary parameters. It requires a token reviewer JWT, the Kubernetes host address, and the Kubernetes CA certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/kubernetes/config \\\n    token_reviewer_jwt=\"<your reviewer service account JWT>\" \\\n    kubernetes_host=https://192.168.99.100:<your TCP port or blank for 443> \\\n    kubernetes_ca_cert=@ca.crt\n```\n\n----------------------------------------\n\nTITLE: Vault Agent Config Generation Example\nDESCRIPTION: Example of generating a Vault Agent configuration file with specific paths and namespace settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/generate-config.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault agent generate-config \\\n         -type=\"env-template\" \\\n         -exec=\"./payment-app 'wf-test'\" \\\n         -namespace=\"testing\" \\\n         -path=\"shared/dev/*\" \\\n         -path=\"private/ci/integration\" \\\n         agent-config.hcl\n```\n\n----------------------------------------\n\nTITLE: Enabling Transit Secrets Engine in Vault\nDESCRIPTION: This command enables the Transit secrets engine in Vault. It mounts the engine at the default path 'transit/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault secrets enable transit\n```\n\n----------------------------------------\n\nTITLE: Looking Up Token Information\nDESCRIPTION: Retrieves detailed information about a specific token including its policies, metadata, and expiration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"ClientToken\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/lookup\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"accessor\": \"8609694a-cdbc-db9b-d345-e782dbb562ed\",\n    \"creation_time\": 1523979354,\n    \"creation_ttl\": 2764800,\n    \"display_name\": \"ldap2-tesla\",\n    \"entity_id\": \"7d2e3179-f69b-450c-7179-ac8ee8bd8ca9\",\n    \"expire_time\": \"2018-05-19T11:35:54.466476215-04:00\",\n    \"explicit_max_ttl\": 0,\n    \"id\": \"cf64a70f-3a12-3f6c-791d-6cef6d390eed\",\n    \"identity_policies\": [\"dev-group-policy\"],\n    \"issue_time\": \"2018-04-17T11:35:54.466476078-04:00\",\n    \"meta\": {\n      \"username\": \"tesla\"\n    },\n    \"num_uses\": 0,\n    \"orphan\": true,\n    \"path\": \"auth/ldap2/login/tesla\",\n    \"policies\": [\"default\", \"testgroup2-policy\"],\n    \"renewable\": true,\n    \"ttl\": 2764790\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using Python\nDESCRIPTION: This snippet shows how to store a secret in Vault using the Python client. It uses the create_or_update_secret method of the KV v2 secrets engine to write the secret to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\ncreate_response = client.secrets.kv.v2.create_or_update_secret(\n    path='my-secret-password',\n    secret=dict(password='Hashi123'),\n)\n\nprint('Secret written successfully.')\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Plugin via API\nDESCRIPTION: Post a JSON payload containing type and configuration options to the `sys/mounts` endpoint to enable the key/value v2 plugin via API. The options specify the version of the plugin type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/setup.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"kv\",\n  \"options\": {\n    \"version\": \"2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prefix Globbing for Parameter Values in Vault Policy (HCL)\nDESCRIPTION: This snippet shows how to use prefix globbing for parameter values in a Vault policy. It allows creating 'secret/foo' with a 'bar' parameter that must start with 'foo-'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/foo\" {\n  capabilities = [\"create\"]\n  allowed_parameters = {\n    \"bar\" = [\"foo-*\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the PKI secrets engine using Vault CLI\nDESCRIPTION: Enable the PKI secrets engine at its default path in Vault. The secrets engine allows Vault to manage TLS certificates. Dependencies include the Vault CLI and proper permissions. This command mounts the secrets engine at 'pki/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/setup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable pki\nSuccess! Enabled the pki secrets engine at: pki/\n```\n\n----------------------------------------\n\nTITLE: Creating a Complex IAM User Role with Multiple Policy Sources in AWS Secrets Engine\nDESCRIPTION: This command creates a Vault role that combines multiple AWS IAM policy sources: policy ARNs for AWS managed policies, IAM groups, and an inline policy document. This demonstrates how to create comprehensive permission sets for IAM users created by Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/roles/my-other-role \\\n    policy_arns=arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess,arn:aws:iam::aws:policy/IAMReadOnlyAccess \\\n    iam_groups=group1,group2 \\\n    credential_type=iam_user \\\n    policy_document=-<<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Active Node Inauguration Process\nDESCRIPTION: Details the steps a Vault node takes to become the active node in a high availability cluster, including sealing, reloading configurations, and preparing for client requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/high-availability.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n# Active Node Inauguration Steps\n1. Seal local Vault instance\n2. Reload seal configuration\n3. Migrate seal if needed\n4. Reload encryption keys\n5. Create new HA intra-cluster TLS certificate\n6. Write active node status to storage\n7. Unseal local Vault instance\n8. Start accepting cluster connections\n```\n\n----------------------------------------\n\nTITLE: Starting a Vault Server with Configuration File in Shell\nDESCRIPTION: Command example showing how to start a Vault server with a specific configuration file path. This is the standard way to run a Vault server in production with a predefined configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/server.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault server -config=/etc/vault/config.hcl\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Kubernetes Service Account in C#\nDESCRIPTION: This C# example shows how to authenticate to HashiCorp Vault using the Kubernetes auth method and retrieve a secret. It reads a service account token from a file, creates a Vault client with Kubernetes authentication, and retrieves a password value from a KV v2 secret store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.IO;\nusing VaultSharp;\nusing VaultSharp.V1.AuthMethods;\nusing VaultSharp.V1.AuthMethods.Kubernetes;\nusing VaultSharp.V1.Commons;\n\nnamespace Examples\n{\n    public class KubernetesAuthExample\n    {\n        const string DefaultTokenPath = \"path/to/service-account-token\";\n\n        // Fetches a key-value secret (kv-v2) after authenticating to Vault with a Kubernetes service account.\n        // For a more in-depth setup explanation, please see the relevant readme in the hashicorp/vault-examples repo.\n        public string GetSecretWithK8s()\n        {\n            var vaultAddr = Environment.GetEnvironmentVariable(\"VAULT_ADDR\");\n            if(String.IsNullOrEmpty(vaultAddr))\n            {\n                throw new System.ArgumentNullException(\"Vault Address\");\n            }\n\n            var roleName = Environment.GetEnvironmentVariable(\"VAULT_ROLE\");\n            if(String.IsNullOrEmpty(roleName))\n            {\n                throw new System.ArgumentNullException(\"Vault Role Name\");\n            }\n\n            // Get the path to service account token or fall back on default path\n            string pathToToken = String.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"SA_TOKEN_PATH\")) ? DefaultTokenPath : Environment.GetEnvironmentVariable(\"SA_TOKEN_PATH\");\n            string jwt = File.ReadAllText(pathToToken);\n\n            IAuthMethodInfo authMethod = new KubernetesAuthMethodInfo(roleName, jwt);\n            var vaultClientSettings = new VaultClientSettings(vaultAddr, authMethod);\n\n            IVaultClient vaultClient = new VaultClient(vaultClientSettings);\n\n            // We can retrieve the secret after creating our VaultClient object\n            Secret<SecretData> kv2Secret = null;\n            kv2Secret = vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(path: \"/creds\").Result;\n\n            var password = kv2Secret.Data.Data[\"password\"];\n\n            return password.ToString();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum TTL for Intermediate CA in Vault\nDESCRIPTION: Sets the maximum TTL (Time To Live) for secrets issued from the intermediate CA to 5 years (43800 hours).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune -max-lease-ttl=43800h pki_int\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultAuthGlobal with Multiple Auth Methods\nDESCRIPTION: YAML configuration for setting up a default VaultAuthGlobal resource that defines both Kubernetes and JWT authentication methods in the apps namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuthGlobal\nmetadata:\n  name: default\n  namespace: apps\nspec:\n  defaultAuthMethod: kubernetes\n  kubernetes:\n    audiences:\n    - vault\n    mount: kubernetes\n    role: apps\n    serviceAccount: apps-k8s\n    tokenExpirationSeconds: 600\n  jwt:\n    audiences:\n    - vault\n    mount: jwt\n    role: apps\n    serviceAccount: apps-jwt\n```\n\n----------------------------------------\n\nTITLE: API Call for Token Creation Without Default Policy\nDESCRIPTION: API request to create a token without the default policy using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n  --request POST \\\n  --header \"X-Vault-Token: ...\" \\\n  --data '{\"no_default_policy\": \"true\"}' \\\n  https://vault.hashicorp.rocks/v1/auth/token/create\n```\n\n----------------------------------------\n\nTITLE: Listing DynamoDB Tables using AWS CLI\nDESCRIPTION: This snippet demonstrates how to use the AWS CLI to list DynamoDB tables in a specific region. This requires having the AWS CLI configured with the dynamic credentials obtained from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws dynamodb list-tables --region us-east-1\n{\n    \"TableNames\": [\n        \"example-table\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Seal in HCL\nDESCRIPTION: This snippet demonstrates how to configure the Azure Key Vault seal through the Vault configuration file. It includes all required parameters such as tenant_id, client_id, client_secret, vault_name, and key_name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/azurekeyvault.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"azurekeyvault\" {\n  tenant_id      = \"46646709-b63e-4747-be42-516edeaf1e14\"\n  client_id      = \"03dc33fc-16d9-4b77-8152-3ec568f8af6e\"\n  client_secret  = \"DUJDS3...\"\n  vault_name     = \"hc-vault\"\n  key_name       = \"vault_key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS 1.2 with Custom Ciphersuites for Vault TCP Listener\nDESCRIPTION: This snippet shows how to configure a TCP listener to use TLS 1.2 with a specific set of ciphersuites. It sets both minimum and maximum TLS versions to 1.2 and explicitly defines preferred ciphersuites.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/tcp-tls.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_cert_file = \"cert.pem\"\n  tls_key_file  = \"key.pem\"\n  tls_min_version = \"tls12\"\n  tls_max_version = \"tls12\"\n  tls_cipher_suites = \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Join for Raft in Vault using HCL\nDESCRIPTION: This HCL configuration snippet demonstrates how to set up retry join stanzas for Raft storage in Vault. It includes fields for specifying leader addresses, TLS certificate file paths, and cloud auto-join settings using go-discover syntax. The snippet illustrates both fixed leader API addresses and auto-join via AWS tags. Required dependencies include Vault with Raft storage capability and optional use of go-discover for auto-join functionality. Port 8200 and HTTPS are used by default but can be customized.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path    = \"/Users/foo/raft/\"\n  node_id = \"node1\"\n\n  retry_join {\n    leader_api_addr = \"http://127.0.0.2:8200\"\n    leader_ca_cert_file = \"/path/to/ca1\"\n    leader_client_cert_file = \"/path/to/client/cert1\"\n    leader_client_key_file = \"/path/to/client/key1\"\n  }\n  retry_join {\n    leader_api_addr = \"http://127.0.0.3:8200\"\n    leader_ca_cert_file = \"/path/to/ca2\"\n    leader_client_cert_file = \"/path/to/client/cert2\"\n    leader_client_key_file = \"/path/to/client/key2\"\n  }\n  retry_join {\n    leader_api_addr = \"http://127.0.0.4:8200\"\n    leader_ca_cert_file = \"/path/to/ca3\"\n    leader_client_cert_file = \"/path/to/client/cert3\"\n    leader_client_key_file = \"/path/to/client/key3\"\n  }\n  retry_join {\n    auto_join = \"provider=aws region=eu-west-1 tag_key=vault tag_value=... access_key_id=... secret_access_key=...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Metadata Verification Output\nDESCRIPTION: CLI output showing the metadata of a KV v2 secret after setting max versions, including version tracking information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/max-versions.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv metadata get -mount shared dev/square-api\n\n======== Metadata Path ========\nshared/metadata/dev/square-api\n\n========== Metadata ==========\nKey                     Value\n---                     -----\ncas_required            false\ncreated_time            2024-11-13T21:51:50.898782695Z\ncurrent_version         4\ncustom_metadata         <nil>\ndelete_version_after    0s\nmax_versions            5\noldest_version          0\nupdated_time            2024-11-14T22:32:42.29534643Z\n\n====== Version 1 ======\nKey              Value\n---              -----\ncreated_time     2024-11-13T21:51:50.898782695Z\ndeletion_time    n/a\ndestroyed        false\n```\n\n----------------------------------------\n\nTITLE: Configuring HashiCorp Vault Agent with HCL\nDESCRIPTION: A complete Vault Agent configuration example demonstrating various stanzas including pid_file, vault connection, auto_auth with AWS method, cache, api_proxy, unix and tcp listeners, and template configurations. The example shows contrived values for illustration purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\npid_file = \"./pidfile\"\n\nvault {\n  address = \"https://vault-fqdn:8200\"\n  retry {\n    num_retries = 5\n  }\n}\n\nauto_auth {\n  method \"aws\" {\n    mount_path = \"auth/aws-subaccount\"\n    config = {\n      type = \"iam\"\n      role = \"foobar\"\n    }\n  }\n\n  sink \"file\" {\n    config = {\n      path = \"/tmp/file-foo\"\n    }\n  }\n\n  sink \"file\" {\n    wrap_ttl = \"5m\"\n    aad_env_var = \"TEST_AAD_ENV\"\n    dh_type = \"curve25519\"\n    dh_path = \"/tmp/file-foo-dhpath2\"\n    config = {\n      path = \"/tmp/file-bar\"\n    }\n  }\n}\n\ncache {\n  // An empty cache stanza still enables caching\n}\n\napi_proxy {\n  use_auto_auth_token = true\n}\n\nlistener \"unix\" {\n  address = \"/path/to/socket\"\n  tls_disable = true\n\n  agent_api {\n    enable_quit = true\n  }\n}\n\nlistener \"tcp\" {\n  address = \"127.0.0.1:8100\"\n  tls_disable = true\n}\n\ntemplate {\n  source = \"/etc/vault/server.key.ctmpl\"\n  destination = \"/etc/vault/server.key\"\n}\n\ntemplate {\n  source = \"/etc/vault/server.crt.ctmpl\"\n  destination = \"/etc/vault/server.crt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Retrieved Secret in C#\nDESCRIPTION: This snippet demonstrates how to verify the retrieved secret in C# by comparing it with the expected value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_42\n\nLANGUAGE: cs\nCODE:\n```\nif (password.ToString() != \"Hashi123\")\n{\n    throw new System.Exception(\"Unexpected password\");\n}\n\nConsole.WriteLine(\"Access granted!\");\n```\n\n----------------------------------------\n\nTITLE: OIDC Role Configuration using Vault CLI - JSON Object\nDESCRIPTION: Provides a sample configuration for setting an OIDC role in Vault using a JSON object. It includes important properties such as user claims, audience, role type, and policies. The configuration is essential for defining how Vault handles authentication requests via OIDC. The snippet makes use of the Vault CLI for configuration, suggesting the JSON object method for setting map values as a best practice.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nvault write auth/oidc/role/demo -<<EOF\n{\n  \"user_claim\": \"sub\",\n  \"bound_audiences\": \"abc123\",\n  \"role_type\": \"oidc\",\n  \"policies\": \"demo\",\n  \"ttl\": \"1h\",\n  \"bound_claims\": { \"groups\": [\"mygroup/mysubgroup\"] }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine\nDESCRIPTION: Command to enable the database secrets engine in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/cassandra.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Example API Response with AppRole Authentication\nDESCRIPTION: This JSON snippet shows the structure of the response received after successfully authenticating with Vault using the AppRole method. The response contains the token under the `auth.client_token` field, along with other metadata like policies, lease duration, and accessor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"renewable\": true,\n    \"lease_duration\": 2764800,\n    \"metadata\": {},\n    \"policies\": [\"default\", \"dev-policy\", \"test-policy\"],\n    \"accessor\": \"5d7fb475-07cb-4060-c2de-1ca3fcbf0c56\",\n    \"client_token\": \"98a4c7ab-b1fe-361b-ba0b-e307aacfd587\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using Ruby\nDESCRIPTION: This snippet shows how to store a secret in Vault using the Ruby client. It creates a hash with the secret data and uses the Vault.logical.write method to write the secret to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\nsecret_data = {data: {password: \"Hashi123\"}}\nVault.logical.write(\"secret/data/my-secret-password\", secret_data)\n\nputs \"Secret written successfully.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault with Consul Backend using YAML\nDESCRIPTION: This YAML snippet configures a Vault server with a Consul storage backend. It enables the Vault UI, specifies the API address with a placeholder IP, configures a TCP listener without TLS, and provides storage information for a Consul server. Prerequisites include having a Consul setup accessible from the Vault server. It expects a valid POD_IP and HOST_IP and is input as a YAML-formatted multi-line string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_39\n\nLANGUAGE: yaml\nCODE:\n```\n# ExtraConfig values are formatted as a multi-line string:\nconfig: |\n  ui = true\n  api_addr = \"http://POD_IP:8200\"\n  listener \"tcp\" {\n      tls_disable = 1\n      address     = \"0.0.0.0:8200\"\n  }\n\n  storage \"consul\" {\n      path = \"vault/\"\n      address = \"HOST_IP:8500\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Importing a Key with JSON Payload in Transit Secrets Engine\nDESCRIPTION: Sample JSON payload for importing a key into Vault's Transit secrets engine. Specifies the key type as 'ed25519' and includes the required ciphertext containing the encrypted key material.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ed25519\",\n  \"ciphertext\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Userpass Auth Method in Vault\nDESCRIPTION: This shell command creates a new user for the userpass authentication method. It specifies the username, password, and associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/userpass.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/<userpass:path>/users/mitchellh \\\n    password=foo \\\n    policies=admins\n```\n\n----------------------------------------\n\nTITLE: Removing Unsafe HTML Sanitization in Vault UI\nDESCRIPTION: Fixes potential security vulnerability by restricting usage of htmlSafe method to only sanitized content, improving overall UI security and preventing potential XSS risks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20235.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: remove use of htmlSafe except when first sanitized\n```\n\n----------------------------------------\n\nTITLE: User Authentication with Policy\nDESCRIPTION: Command for user authentication using the userpass method to receive a token with associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=\"userpass\" username=\"sethvargo\"\nPassword (will be hidden): ...\n```\n\n----------------------------------------\n\nTITLE: Generating MSSQL Credentials\nDESCRIPTION: Command to generate new database credentials using the configured role\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mssql.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           wJKpk9kg-T1Ma7qQfS8y\nusername           v-vaultuser-my-role-r7kCtKGGr3eYQP1OGR6G-1602542258\n```\n\n----------------------------------------\n\nTITLE: Complete Alicloud OSS Storage Configuration Example\nDESCRIPTION: Default example showing a complete configuration for using Alicloud OSS as a storage backend in Vault, including access credentials and endpoint specification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/alicloudoss.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"alicloudoss\" {\n  access_key = \"abcd1234\"\n  secret_key = \"defg5678\"\n  endpoint   = \"oss-us-west-1.aliyuncs.com\"\n  bucket     = \"my-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Plugin in Vault\nDESCRIPTION: Configure the SAML plugin in Vault with the default role, entity ID, callback URL, and metadata URL for AD FS integration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/adfs.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write <SAML_PLUGIN_PATH>/config \\\n    default_role=\"<VAULT_ROLE>\"         \\\n    entity_id=\"<TRUST_IDENTIFIER>\"      \\\n    acs_urls=\"<SAML_CALLBACK_URL>       \\\n    idp_metadata_url=\"<AD FS_URL>/<METADATA_FILE_PATH>\"\n```\n\n----------------------------------------\n\nTITLE: Creating Token Without Default Policy\nDESCRIPTION: Command to create a new token without attaching the default policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token create -no-default-policy\n```\n\n----------------------------------------\n\nTITLE: Configuring Role for PostgreSQL Database\nDESCRIPTION: Command to configure a role that maps a name in Vault to an SQL statement that creates database credentials. Includes TTL settings for the generated credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=\"my-postgresql-database\" \\\n    creation_statements=\"CREATE ROLE \\\"{{name}}\\\" WITH LOGIN PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \\\n        GRANT SELECT ON ALL TABLES IN SCHEMA public TO \\\"{{name}}\\\";\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\nSuccess! Data written to: database/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Setting up Vault development environment using Go and Make\nDESCRIPTION: This snippet shows the commands to set up a development environment for Vault, including installing Go, cloning the repository, and compiling a development version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ make bootstrap\n...\n$ make dev\n...\n$ bin/vault\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Security Features for Vault Service\nDESCRIPTION: This snippet shows recommended systemd security settings for the Vault service. These settings restrict filesystem access and administrative capabilities, enhancing the overall security of the Vault deployment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/production-hardening.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nProtectSystem=full\nPrivateTmp=yes\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nAmbientCapabilities=CAP_IPC_LOCK\nProtectHome=read-only\nPrivateDevices=yes\nNoNewPrivileges=yes\n```\n\n----------------------------------------\n\nTITLE: Authenticating via API with AppRole in Vault\nDESCRIPTION: This snippet demonstrates how to authenticate with Vault using the AppRole auth method via the API. It involves making a POST request to the auth/approle/login endpoint with role_id and secret_id in the request body. The response contains the Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"role_id\":\"988a9df- ...\",\"secret_id\":\"37b74931...\"}' \\\n    http://127.0.0.1:8200/v1/auth/approle/login\n```\n\n----------------------------------------\n\nTITLE: Initialize Basic Rekey Operation in Vault\nDESCRIPTION: Initializes a rekey operation with 15 key shares and a threshold of 9 keys required for unsealing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey \\\n    -init \\\n    -key-shares=15 \\\n    -key-threshold=9\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Ruby\nDESCRIPTION: This code snippet configures the Vault client in Ruby, setting the address to localhost:8200 and the token to 'dev-only-token'.  It uses the root token for authentication, which is only recommended for development.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_17\n\nLANGUAGE: ruby\nCODE:\n```\nVault.configure do |config|\n    config.address = \"http://127.0.0.1:8200\"\n    config.token = \"dev-only-token\"\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Plugin in Vault\nDESCRIPTION: Command to configure Vault with the MongoDB Atlas plugin and necessary connection information including public key, private key, and project ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodbatlas.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mongodbatlas-database \\\n    plugin_name=mongodbatlas-database-plugin \\\n    allowed_roles=\"*\" \\\n    public_key=\"jmskfortvf\" \\\n    private_key=\"ea6acbc7-8a30-4a3f-812e-6f869c08bcd1\" \\\n    project_id=\"4f96cad208574fd14aa8dda3a\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with ConfigMap for Vault Agent Configuration\nDESCRIPTION: This YAML example creates a Kubernetes Deployment that uses a ConfigMap to store Vault Agent configuration files. It includes both the Deployment and ConfigMap definitions with detailed Vault Agent settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app-example\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app-example-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: app-example\n  template:\n    metadata:\n      labels:\n        app: app-example\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/agent-configmap: 'my-configmap'\n        vault.hashicorp.com/tls-secret: 'vault-tls-client'\n    spec:\n      containers:\n        - name: app\n          image: 'app:1.0.0'\n      serviceAccountName: app-example\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: my-configmap\ndata:\n  config.hcl: |\n    \"auto_auth\" = {\n      \"method\" = {\n        \"config\" = {\n          \"role\" = \"db-app\"\n        }\n        \"type\" = \"kubernetes\"\n      }\n\n      \"sink\" = {\n        \"config\" = {\n          \"path\" = \"/home/vault/.token\"\n        }\n\n        \"type\" = \"file\"\n      }\n    }\n\n    \"exit_after_auth\" = false\n    \"pid_file\" = \"/home/vault/.pid\"\n\n    \"template\" = {\n      \"contents\" = \"{{- with secret \\\"database/creds/db-app\\\" -}}postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/mydb?sslmode=disable{{- end }}\"\n      \"destination\" = \"/vault/secrets/db-creds\"\n    }\n\n    \"vault\" = {\n      \"address\" = \"https://vault.demo.svc.cluster.local:8200\"\n      \"ca_cert\" = \"/vault/tls/ca.crt\"\n      \"client_cert\" = \"/vault/tls/client.crt\"\n      \"client_key\" = \"/vault/tls/client.key\"\n    }\n  config-init.hcl: |\n    \"auto_auth\" = {\n      \"method\" = {\n        \"config\" = {\n          \"role\" = \"db-app\"\n        }\n        \"type\" = \"kubernetes\"\n      }\n\n      \"sink\" = {\n        \"config\" = {\n          \"path\" = \"/home/vault/.token\"\n        }\n\n        \"type\" = \"file\"\n      }\n    }\n\n    \"exit_after_auth\" = true\n    \"pid_file\" = \"/home/vault/.pid\"\n\n    \"template\" = {\n      \"contents\" = \"{{- with secret \\\"database/creds/db-app\\\" -}}postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/mydb?sslmode=disable{{- end }}\"\n      \"destination\" = \"/vault/secrets/db-creds\"\n    }\n\n    \"vault\" = {\n      \"address\" = \"https://vault.demo.svc.cluster.local:8200\"\n      \"ca_cert\" = \"/vault/tls/ca.crt\"\n      \"client_cert\" = \"/vault/tls/client.crt\"\n      \"client_key\" = \"/vault/tls/client.key\"\n    }\n```\n\n----------------------------------------\n\nTITLE: Verifying Retrieved Secret in Ruby\nDESCRIPTION: This snippet shows how to verify the retrieved secret in Ruby by comparing it with the expected value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_41\n\nLANGUAGE: ruby\nCODE:\n```\nabort \"Unexpected password\" if password != \"Hashi123\"\n\nputs \"Access granted!\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret from KV v2 via CLI\nDESCRIPTION: This shell command retrieves a specific field from a secret stored in Vault's KV v2 engine using the CLI.  It uses the `vault kv get` command with the `-field` flag to specify the key to retrieve.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/random-string.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault kv get          \\\n   -mount <mount_path>  \\\n   -field <field_name>  \\\n   <secret_path>       \"\n```\n\n----------------------------------------\n\nTITLE: Listing secrets using Vault API with curl\nDESCRIPTION: Demonstrates how to list secrets using the LIST HTTP verb with the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -H \"X-Vault-Token: f3b09679-3001-009d-2b80-9c306ab81aa6\" \\\n    -X LIST \\\n    http://127.0.0.1:8200/v1/secret/\n```\n\n----------------------------------------\n\nTITLE: Joining Raft Cluster and Unsealing Remaining Vault Pods\nDESCRIPTION: These commands join the remaining Vault pods (vault-1 and vault-2) to the Raft cluster and unseal them. The pods communicate using the internal service provided by the Helm chart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-with-raft.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-1 -- vault operator raft join http://vault-0.vault-internal:8200\nkubectl exec -ti vault-1 -- vault operator unseal\n\nkubectl exec -ti vault-2 -- vault operator raft join http://vault-0.vault-internal:8200\nkubectl exec -ti vault-2 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial MSSQL Permissions\nDESCRIPTION: SQL commands to create required login, user and grant necessary permissions for Vault's MSSQL plugin functionality\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mssql.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- Create Login\nCREATE LOGIN vault_login WITH PASSWORD = '<password>';\n\n-- Create User\nCREATE user vault_user for login vault_login;\n\n-- Grant Permissions\nGRANT ALTER ANY LOGIN TO \"vault_user\";\nGRANT ALTER ANY USER TO \"vault_user\";\nGRANT ALTER ANY CONNECTION TO \"vault_login\";\nGRANT CONTROL ON SCHEMA::<schema_name> TO \"vault_user\";\nEXEC sp_addrolemember \"db_accessadmin\", \"vault_user\";\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Auth Method in Vault CLI\nDESCRIPTION: This command enables the userpass authentication method within Vault. Once enabled, it allows for the management of users and passwords through the userpass method, making it accessible via the API. This functionality is essential for integrating user authentication into Vault's security framework.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable userpass\n```\n\n----------------------------------------\n\nTITLE: Basic Template Config Configuration in HCL\nDESCRIPTION: HCL configuration example showing template_config settings including exit behavior, render interval, and connection limits.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate_config {\n  exit_on_retry_failure = true\n  static_secret_render_interval = \"10m\"\n  max_connections_per_host = 20\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Auth Method for Active Directory (Scenario 1)\nDESCRIPTION: This configuration sets up LDAP authentication for an Active Directory server with nested groups and STARTTLS encryption. It uses userPrincipalName for user identification and cn for group names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/ldap/config \\\n    url=\"ldap://ldap.example.com\" \\\n    userdn=\"ou=Users,dc=example,dc=com\" \\\n    groupdn=\"ou=Groups,dc=example,dc=com\" \\\n    groupfilter=\"(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\" \\\n    groupattr=\"cn\" \\\n    upndomain=\"example.com\" \\\n    certificate=@ldap_ca_cert.pem \\\n    insecure_tls=false \\\n    starttls=true\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Vault Namespaces in Terraform\nDESCRIPTION: Provides an example of how to define multiple Vault namespaces in a Terraform configuration file. This snippet shows how to create resources for existing and new namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_namespace\" \"admin_ns\" {\n  path = \"admin\"\n}\n\nresource \"vault_namespace\" \"dev_ns\" {\n  path = \"dev\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Listener for GUI Access\nDESCRIPTION: Demonstrates how to configure a TCP listener to make the Vault GUI accessible. Shows examples of binding to a specific IP address and potential localhost restriction.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/ui.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  address = \"10.0.1.35:8200\"\n\n  # If bound to localhost, the Vault GUI is only\n  # accessible from the local machine!\n  # address = \"127.0.0.1:8200\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Versions of a Secret in Vault KV Engine\nDESCRIPTION: This JSON payload and cURL command show how to delete specific versions of a secret in Vault's KV engine using the POST method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": [1, 2]\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/delete/my-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-based Credential Rotation in Azure Secrets Engine\nDESCRIPTION: Sets up automatic credential rotation for Azure root credentials to occur weekly on Saturday at midnight.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write azure/config \\\n    ...\n    rotation_schedule=\"0 * * * SAT\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Vault Health Endpoint\nDESCRIPTION: This snippet demonstrates how to send a GET request to the Vault health endpoint using curl. It's a basic health check without any parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/health.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/health\n```\n\n----------------------------------------\n\nTITLE: Creating User with Policy Association\nDESCRIPTION: Command to create a new user with associated policies using the userpass auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/userpass/users/sethvargo \\\n    password=\"s3cr3t!\" \\\n    policies=\"dev-readonly,logs\"\n```\n\n----------------------------------------\n\nTITLE: Executing Single-Phase Login MFA in Shell\nDESCRIPTION: This snippet demonstrates how to perform a single-phase login MFA request using curl. It includes the MFA credentials in the X-Vault-MFA header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --header \"X-Vault-MFA: d16fd3c2-50de-0b9b-eed3-0301dadeca10:695452\" \\\n    http://127.0.0.1:8200/v1/auth/userpass/login/alice\n```\n\n----------------------------------------\n\nTITLE: Vault Token Lookup by Accessor (Shell)\nDESCRIPTION: This command retrieves information about a token using its accessor ID. The `-accessor` flag indicates that the provided argument is an accessor rather than a token. The output will not include the token itself when using the accessor lookup method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/lookup.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token lookup -accessor 9793c9b3-e04a-46f3-e7b8-748d7da248da\n```\n\n----------------------------------------\n\nTITLE: Deleting Specific Version of Key in Vault KV v2 Store\nDESCRIPTION: This command deletes version 11 of the key 'creds' from the 'secret' mount in Vault's key/value store version 2. It uses the '-versions' flag which is specific to KV v2.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/delete.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv delete -mount=secret -versions=11 creds\n```\n\n----------------------------------------\n\nTITLE: Creating ClusterRoleBinding for Vault Client Authentication\nDESCRIPTION: This command creates a Kubernetes ClusterRoleBinding to grant the 'system:auth-delegator' ClusterRole to service accounts that need to authenticate with Vault using short-lived tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl create clusterrolebinding vault-client-auth-delegator \\\n    --clusterrole=system:auth-delegator \\\n    --group=group1 \\\n    --serviceaccount=default:svcaccount1 \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Address Environment Variable\nDESCRIPTION: Configures the VAULT_ADDR environment variable to point to your Vault installation URL. This is required for CLI commands to connect to the correct Vault instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_ADDR=\"<URL_FOR_YOUR_VAULT_INSTALLATION>\"\n```\n\n----------------------------------------\n\nTITLE: Basic Azure Storage Configuration in HCL\nDESCRIPTION: Basic configuration for Azure storage backend in Vault using HCL syntax. Demonstrates setting up required parameters including account name, account key, container name, and environment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/azure.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"azure\" {\n  accountName = \"my-storage-account\"\n  accountKey  = \"abcd1234\"\n  container   = \"container-efgh5678\"\n  environment = \"AzurePublicCloud\"\n}\n```\n\n----------------------------------------\n\nTITLE: Plugin Logging Implementation Example\nDESCRIPTION: Example showing how to implement logging in a Vault plugin using the SDK's default logger with different log levels.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-development.mdx#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc (b *backend) example() {\n    b.Logger().Trace(\"Trace level log\")\n    b.Logger().Debug(\"Debug level log\")\n    b.Logger().Info(\"Info level log\")\n    b.Logger().Warn(\"Warn level log\")\n    b.Logger().Error(\"Error level log\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Role in Vault\nDESCRIPTION: This command creates a Kubernetes role in Vault that allows users to authenticate and access secrets based on their service account and namespace. It applies the templated ACL policy created earlier.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/kubernetes/role/env-reader \\\n    bound_service_account_names=app \\\n    bound_service_account_namespaces=demo \\\n    policies=default,env-tmpl \\\n    ttl=1h\n```\n\n----------------------------------------\n\nTITLE: Creating Named Encryption Key in Transit Secrets Engine\nDESCRIPTION: This command creates a new named encryption key 'my-key' in the Transit secrets engine. The '-f' flag forces the write operation without additional data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write -f transit/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Enabling a Database Secrets Engine in Vault\nDESCRIPTION: This command enables the database secrets engine in Vault, which allows for dynamic generation of database credentials. The engine is mounted at the 'database/' path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Revoking a Token by Accessor\nDESCRIPTION: This snippet demonstrates how to revoke a token using its accessor, helpful when the token ID is not available.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/revoke-accessor\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using Java\nDESCRIPTION: This snippet demonstrates how to store a secret in Vault using the Java client. It creates a HashMap with the secret data and uses the put method of the opsForVersionedKeyValue to write the secret to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_28\n\nLANGUAGE: Java\nCODE:\n```\nMap<String, String> data = new HashMap<>();\ndata.put(\"password\", \"Hashi123\");\n\nVersioned.Metadata createResponse = vaultTemplate\n    .opsForVersionedKeyValue(\"secret\")\n    .put(\"my-secret-password\", data);\n\nSystem.out.println(\"Secret written successfully.\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Secondary for Performance Replication\nDESCRIPTION: Commands to enable performance replication on the secondary cluster and reseal pods with primary tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-perf-with-raft.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-secondary-0 -- vault write sys/replication/performance/secondary/enable token=<TOKEN FROM PRIMARY>\n\nkubectl delete pod vault-secondary-1\nkubectl exec -ti vault-secondary-1 -- vault operator unseal <PRIMARY UNSEAL TOKEN>\n\nkubectl delete pod vault-secondary-2\nkubectl exec -ti vault-secondary-2 -- vault operator unseal <PRIMARY UNSEAL TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Vault Root Protected API Endpoint Definitions\nDESCRIPTION: Markdown table defining root-level API endpoints with HTTP verbs, paths, and descriptions for HashiCorp Vault system management\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_31\n\nLANGUAGE: markdown\nCODE:\n```\n| Path                                                                                                                                                   | HTTP verb         | Description                                                                                                         |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------ | ----------------- | ------------------------------------------------------------------------------------------------------------------- |\n| [auth/token/accessors](/vault/api-docs/auth/token#list-accessors)                                                                                      | LIST              | List token accessors for all current Vault service tokens                                                           |\n```\n\n----------------------------------------\n\nTITLE: Vault Policy with Wildcard Path Matching in HCL\nDESCRIPTION: This code snippet shows how to use the '+' wildcard in Vault policies to match any single path segment. It allows for more flexible path matching within a single level of the path hierarchy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Permit reading the \"teamb\" path under any top-level path under secret/\npath \"secret/+/teamb\" {\n  capabilities = [\"read\"]\n}\n\n# Permit reading secret/foo/bar/teamb, secret/bar/foo/teamb, etc.\npath \"secret/+/+/teamb\" {\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Password Policy with Optional Charset in HCL\nDESCRIPTION: This snippet demonstrates a password policy where one charset is required and another is optional, allowing for more flexible password generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nlength = 8\nrule \"charset\" {\n  charset = \"abcde\"\n}\nrule \"charset\" {\n  charset = \"01234\"\n  min-chars = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Retrieved Secret in Python\nDESCRIPTION: This snippet shows how to verify the retrieved secret in Python by comparing it with the expected value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_43\n\nLANGUAGE: Python\nCODE:\n```\nif password != 'Hashi123':\n    sys.exit('unexpected password')\n\nprint('Access granted!')\n```\n\n----------------------------------------\n\nTITLE: Enabling the transit secrets engine in Vault\nDESCRIPTION: This command enables the transit secrets engine in Vault, which is necessary for key import operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable transit\nSuccess! Enabled the transit secrets engine at: transit/\n```\n\n----------------------------------------\n\nTITLE: Verifying Raft Cluster Initialization\nDESCRIPTION: These commands log into Vault and list Raft peers to verify successful cluster initialization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-primary-0 -- vault login\nkubectl exec -ti vault-primary-0 -- vault operator raft list-peers\n```\n\n----------------------------------------\n\nTITLE: Creating Static Role for Redis\nDESCRIPTION: Configuration of a static role that maps to an existing Redis user with rotation settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redis.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/static-roles/my-static-role \\\n    db_name=\"my-redis-database\" \\\n    username=\"my-existing-redis-user\" \\\n    rotation_period=5m\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Policy in Vault\nDESCRIPTION: Makes a POST request to create a new policy or update an existing one. The request includes the policy name in the URL path and sends the policy document in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policy.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/policy/my-policy\n```\n\n----------------------------------------\n\nTITLE: Enabling Key/Value Secret Engine - Shell\nDESCRIPTION: This snippet shows how to enable the key/value secret engine plugin in Vault. The command specifies a path for the secrets and sets the version to use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path shared -version 2 kv\n```\n\n----------------------------------------\n\nTITLE: Saving Consul Snapshot in Shell\nDESCRIPTION: This command saves a snapshot of the Consul data to a file named 'backup.snap' in the current working directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migrate-consul-storage.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ consul snapshot save backup.snap\n```\n\n----------------------------------------\n\nTITLE: Reading a Secret from Vault KV\nDESCRIPTION: This example shows how to read back the value of a secret named 'creds' from the KV engine mounted at 'secret'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get -mount=secret creds\n```\n\n----------------------------------------\n\nTITLE: Reading Secret - Vault KV API - Shell\nDESCRIPTION: This curl command retrieves the secret from the specified path in the Vault KV secrets engine. The `X-Vault-Token` header is required for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v1.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/secret/my-secret\n```\n\n----------------------------------------\n\nTITLE: Read Kubernetes Configuration (Vault)\nDESCRIPTION: Retrieves the previously set configuration for the Kubernetes secrets engine, excluding credentials. It uses a GET request to the `/kubernetes/config` endpoint. Requires a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/kubernetes/config\n```\n\n----------------------------------------\n\nTITLE: Creating Complex Password Policy with Multiple Rules in HCL\nDESCRIPTION: This snippet shows a more complex password policy that generates 20 character passwords with at least one lowercase letter, uppercase letter, number, and special character.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nlength = 20\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyz\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"0123456789\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"!@#$%^&*\"\n  min-chars = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Delegate EGP Policy Management Under a Path (Sentinel)\nDESCRIPTION: This Sentinel policy delegates EGP policy management to token holders, allowing them to write EGP policies that only take effect at Vault paths below certain prefixes. It uses `strings` import for path validation and restricts policy creation under specific prefixes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/sentinel/examples.mdx#2025-04-14_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport \"strings\"\n\ndata_match = func() {\n    # Make sure there is request data\n    if length(request.data else 0) is 0 {\n        return false\n    }\n\n    # Make sure request data includes paths\n    if length(request.data.paths else 0) is 0 {\n        return false\n    }\n\n    # For each path, verify that it is in the allowed list\n    for strings.split(request.data.paths, \",\") as path {\n        # Make it easier for users who might be used to starting paths with\n        # slashes\n        sanitizedPath = strings.trim_prefix(path, \"/\")\n        if not strings.has_prefix(sanitizedPath, \"dev-kv/teama/\") and\n           not strings.has_prefix(sanitizedPath, \"prod-kv/teama/\") {\n            return false\n        }\n    }\n\n    return true\n}\n\n# Only care about writing; reading can be allowed by normal ACLs\nprecond = rule {\n    request.operation in [\"create\", \"update\"] and\n    strings.has_prefix(request.path, \"sys/policies/egp/\")\n}\n\nmain = rule when precond {\n    strings.has_prefix(request.path, \"sys/policies/egp/teama-\") and data_match()\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying HA Vault with Raft using Terraform and Helm Provider\nDESCRIPTION: This Terraform configuration uses the Helm provider to deploy HA Vault with integrated Raft storage. It sets the necessary configuration options using the 'set' block in the helm_release resource.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"helm\" {\n  kubernetes {\n    config_path = \"~/.kube/config\"\n  }\n}\n\nresource \"helm_release\" \"vault\" {\n  name       = \"vault\"\n  repository = \"https://helm.releases.hashicorp.com\"\n  chart      = \"vault\"\n\n  set {\n    name  = \"server.ha.enabled\"\n    value = \"true\"\n  }\n  set {\n    name  = \"server.ha.raft.enabled\"\n    value = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Signed Key Metadata\nDESCRIPTION: This code snippet shows how to view the enabled extensions, principals, and metadata of the signed key using `ssh-keygen -Lf`. This allows the user to verify the contents of the signed certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh-keygen -Lf ~/.ssh/signed-cert.pub\n```\n\n----------------------------------------\n\nTITLE: Generating Oracle Credentials with Vault\nDESCRIPTION: After configuring the secrets engine, Vault can generate Oracle database credentials dynamically for specific roles. This is demonstrated by reading from the `/creds` endpoint with the role name to retrieve temporary database credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           yRUSyd-vPYDg5NkU9kDg\nusername           V_VAULTUSE_MY_ROLE_SJJUK3Q8W3BKAYAN8S62_1602543009\n```\n\n----------------------------------------\n\nTITLE: Attaching Policy to User - Shell\nDESCRIPTION: This snippet illustrates the process of attaching a previously created policy to a specific user in Vault. This defines the user's permissions within the Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/userpass/users/opsuser \\ \n    policies=kv-access-policy\n```\n\n----------------------------------------\n\nTITLE: Creating Temporary User Role with Session Token (Shell)\nDESCRIPTION: This command creates a temp_user role in Vault using the session_token credential type for generating short-lived credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write aws/roles/temp_user \\\n    credential_type=session_token\n```\n\n----------------------------------------\n\nTITLE: Passing Wrapped SecretID in Jenkins Environment\nDESCRIPTION: This plaintext snippet shows how to pass a wrapped SecretID as an environment variable in a Jenkins pipeline, using a curl command to retrieve it from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nenvironment {\n   WRAPPED_SID = \"\"\"$s{sh(\n                    returnStdout: true,\n                    Script: 'curl --header \"X-Vault-Token: $VAULT_TOKEN\"\n       --header \"X-Vault-Namespace: ${PROJ_NAME}_namespace\"\n       --header \"X-Vault-Wrap-Ttl: 300s\"\n         $VAULT_ADDR/v1/auth/approle/role/$JOB_NAME/secret-id'\n         | jq -r '.wrap_info.token'\n                 )}\"\"\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Logging in to Vault using JWT Auth\nDESCRIPTION: These commands demonstrate how to log in to Vault using JWT auth with a Kubernetes service account token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/jwt/login \\\n   role=my-role \\\n   jwt=@/var/run/secrets/kubernetes.io/serviceaccount/token\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n   --fail \\\n   --request POST \\\n   --header \"X-Vault-Request: true\" \\\n   --data '{\"jwt\":\"<JWT-TOKEN-HERE>\",\"role\":\"my-role\"}' \\\n   \"${VAULT_ADDR}/v1/auth/jwt/login\"\n```\n\n----------------------------------------\n\nTITLE: Starting Vault in Dev Server Mode\nDESCRIPTION: Command to start a Vault server in development mode. This creates an unsealed, initialized server with in-memory storage that's ready for immediate use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/dev-server.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault server -dev\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Credentials - Bash\nDESCRIPTION: This command is used to obtain dynamic credentials from Vault for the specified dynamic role. The output includes various credential details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ vault read ldap/creds/dynamic-role\n```\n\n----------------------------------------\n\nTITLE: Rotating Root Credentials in LDAP Auth Method\nDESCRIPTION: This command rotates the root bindpass to a Vault-generated value that is not accessible by the operator, ensuring only Vault can access the 'root' user for credential manipulation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvault write -f auth/ldap/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Checking Vault Status via CLI Command\nDESCRIPTION: Example of using the 'vault status' command to check the current state of a Vault server. The output shows information about seal status, key shares configuration, version details, and high-availability settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/status.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault status\n\nSealed: false\nKey Shares: 5\nKey Threshold: 3\nUnseal Progress: 0\nUnseal Nonce:\nVersion: x.y.z\nBuild Date: 2022-05-03T08:34:11Z\nCluster Name: vault-cluster-49ffd45f\nCluster ID: d2dad792-fb99-1c8d-452e-528d073ba205\n\nHigh-Availability Enabled: false\n```\n\n----------------------------------------\n\nTITLE: Verifying Certificate Signing Relationship in Vault PKI\nDESCRIPTION: This example demonstrates using the 'pki verify-sign' command to verify if a root certificate has signed an intermediate certificate. The command returns multiple fields indicating different aspects of the relationship between the certificates, including signature validation and trust chain verification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/verify-sign.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki verify-sign pki_root/issuer/root pki_int/issuer/FirstDepartment\nissuer:pki_root/issuer/root\nissued:pki_int/issuer/FirstDepartment\n\nfield              value\n-----              -----\nsubject_match      true\npath_match         true\ntrust_match        true\nkey_id_match       true\nsignature_match    true\n```\n\n----------------------------------------\n\nTITLE: Checking DR Status Request\nDESCRIPTION: HTTP GET request to check the status of DR replication. Returns detailed information about replication mode, sync progress, and cluster status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/status\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Userpass via CLI in Vault\nDESCRIPTION: This snippet demonstrates how to authenticate with Vault using the userpass method via the command line interface. It specifies the username and password as arguments to the 'vault login' command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/userpass.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=userpass \\\n    username=mitchellh \\\n    password=foo\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: This snippet demonstrates enabling the database secrets engine in HashiCorp Vault. The engine is enabled at the default path but can be changed using the `-path` option.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Sample Certificate Generation cURL Request\nDESCRIPTION: Shell command demonstrating how to request a certificate using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/issue/my-role\n```\n\n----------------------------------------\n\nTITLE: Reading LDAP User's Policies using cURL\nDESCRIPTION: This script retrieves policies associated with an LDAP user by sending a GET request to the LDAP user's endpoint. The username parameter is required, and the request must be authenticated with an X-Vault-Token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/ldap/users/mitchellh\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Authentication Method - Shell\nDESCRIPTION: This snippet shows how to enable the userpass authentication method in Vault for human clients. This method allows users to authenticate using a username and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable userpass\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Password Role\nDESCRIPTION: Configuration of a dynamic role that creates Snowflake users with password credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/snowflake.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-password-role \\\n    db_name=my-snowflake-database \\\n    creation_statements=\"CREATE USER {{name}} PASSWORD = '{{password}}' \\\n        DAYS_TO_EXPIRY = {{expiration}} DEFAULT_ROLE=myrole; \\\n        GRANT ROLE myrole TO USER {{name}};\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Redis ElastiCache Management\nDESCRIPTION: Example JSON IAM policy that grants the necessary permissions for Vault to manage ElastiCache users, including ModifyUser and DescribeUsers actions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/rediselasticache.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"elasticache:ModifyUser\",\n        \"elasticache:DescribeUsers\"\n      ],\n      \"Resource\": \"arn:aws:elasticache:<region>:<account-id>:user:*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault for Oracle with SSL\nDESCRIPTION: This configuration example sets up Vault for Oracle connections using SSL in HCP Vault Dedicated. It involves specifying plugin names, connection URLs with Oracle-specific parameters, and ensuring SSL parameters are configured correctly on AWS RDS instances.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/my-oracle-database \\\n    plugin_name=vault-plugin-database-oracle \\\n    connection_url=\"{{username}}/{{password}}@(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=your-oracle-host)(PORT=1521))(CONNECT_DATA=(SID=ORCL)))\" \\\n    allowed_roles=\"my-role\" \\\n    username=\"VAULT_SUPER_USER\" \\\n    password=\"myreallysecurepassword\"\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/oracle \\\n  plugin_name=vault-plugin-database-oracle \\\n  connection_url='{{username}}/{{password}}@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=<host>)(PORT=<port>))(CONNECT_DATA=(SERVICE_NAME=<service_name>))(SECURITY=(SSL_SERVER_CERT_DN=\"<cert_dn>\")(MY_WALLET_DIRECTORY=<path_to_wallet>)))' \\\n  allowed_roles=\"my-role\" \\\n  username=\"VAULT_SUPER_USER\" \\\n  password=\"myreallysecurepassword\"\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/my-oracle-database \\\n  plugin_name=vault-plugin-database-oracle \\\n  connection_url=\"{{username}}/{{password}}@(DESCRIPTION=(ADDRESS=(PROTOCOL=tcps)(HOST=your-rds-endpoint-url)(PORT=2484))(CONNECT_DATA=(SERVICE_NAME=ORCL))(SECURITY=(SSL_SERVER_CERT_DN=\"C=US,ST=Washington,L=Seattle,O=Amazon.com,OU=RDS,CN=your-rds-endpoint-url\")(MY_WALLET_DIRECTORY=/etc/vault.d/plugin/oracle/ssl_wallet)))\" \\\n  allowed_roles=\"my-role\" \\\n  username=\"admin\" \\\n  password=\"password\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: Command to enable the database secrets engine in Vault at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/influxdb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using C#\nDESCRIPTION: This snippet demonstrates how to retrieve a secret from Vault using the C# client. It uses the ReadSecretAsync method to read the secret from the specified path and then extracts the password value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_34\n\nLANGUAGE: cs\nCODE:\n```\nSecret<SecretData> secret = vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(\n    path: \"/my-secret-password\",\n    mountPoint: \"secret\"\n).Result;\n\nvar password = secret.Data.Data[\"password\"];\n```\n\n----------------------------------------\n\nTITLE: Configuring Network Policy Egress Rules\nDESCRIPTION: Shows how to define egress network policy rules for Vault pods to control outbound network traffic\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_33\n\nLANGUAGE: yaml\nCODE:\n```\negress:\n  - to:\n      - ipBlock:\n          cidr: 10.0.0.0/24\n    ports:\n      - protocol: TCP\n        port: 8200\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Key-Value Store Table in PostgreSQL\nDESCRIPTION: SQL schema definition for creating the primary table to store Vault key-value data with parent path, path, key, and value columns\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/postgresql.mdx#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE vault_kv_store (\n  parent_path TEXT COLLATE \"C\" NOT NULL,\n  path        TEXT COLLATE \"C\",\n  key         TEXT COLLATE \"C\",\n  value       BYTEA,\n  CONSTRAINT pkey PRIMARY KEY (path, key)\n);\n\nCREATE INDEX parent_path_idx ON vault_kv_store (parent_path);\n```\n\n----------------------------------------\n\nTITLE: Writing Arbitrary Secrets in Cubbyhole with Vault CLI\nDESCRIPTION: This example demonstrates storing username and password credentials in the token's cubbyhole storage area. Cubbyhole is a private secrets storage space unique to each token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write cubbyhole/git-credentials username=\"student01\" password=\"p@$$w0rd\"\n```\n\n----------------------------------------\n\nTITLE: Default Password Policy for Database Roles in Vault\nDESCRIPTION: This HCL snippet defines the default password policy used for database roles in Vault, ensuring passwords have a length of 20 characters with specific character requirements. Prerequisite: Understanding of Vault password policies and HCL syntax.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nlength = 20\n\nrule \\\"charset\\\" {\n\tcharset = \\\"abcdefghijklmnopqrstuvwxyz\\\"\n\tmin-chars = 1\n}\nrule \\\"charset\\\" {\n\tcharset = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\n\tmin-chars = 1\n}\nrule \\\"charset\\\" {\n\tcharset = \\\"0123456789\\\"\n\tmin-chars = 1\n}\nrule \\\"charset\\\" {\n\tcharset = \\\"-\\\"\n\tmin-chars = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Plugin in Vault\nDESCRIPTION: Command to configure Vault with the PostgreSQL plugin and connection information, including credentials and authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-postgresql-database \\\n    plugin_name=\"postgresql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"postgresql://{{username}}:{{password}}@localhost:5432/database-name\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass\" \\\n    password_authentication=\"scram-sha-256\"\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM-Type Role\nDESCRIPTION: This command creates a new IAM-type role within Vault's GCP auth configuration. It specifies the role type, policies, and bounds the role to specific service accounts. Key parameters include the role name, type, policies, and bound service accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/gcp/role/my-iam-role \\\n    type=\\\"iam\\\" \\\n    policies=\\\"dev,prod\\\" \\\n    bound_service_accounts=\\\"my-service@my-project.iam.gserviceaccount.com\\\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Versioning for KV Secrets Engine\nDESCRIPTION: Turns on versioning for a key/value secrets engine at the specified path in HashiCorp Vault. Used to upgrade a non-versioned KV version 1 engine to support versioned secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/enable-versioning.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault kv enable-versioning secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Unix Socket Listeners in Vault (HCL)\nDESCRIPTION: This example shows how to configure Vault to listen on multiple Unix sockets. It demonstrates using the default socket and a custom specified socket.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/unix.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"unix\" {}\n\nlistener \"unix\" {\n  address = \"/var/run/vault.sock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating GCP Service Account Keys from Vault - Shell\nDESCRIPTION: This command shows how to generate a GCP service account key from Vault for a specific roleset. The output includes key data in base64 format and lease information. The corresponding roleset should have been set to 'service_account_key' secret type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read gcp/roleset/my-key-roleset/key\n\nKey                 Value\n---                 -----\nlease_id            gcp/key/my-key-roleset/ce563a99-5e55-389b...\nlease_duration      30m\nlease_renewable     true\nkey_algorithm       KEY_ALG_RSA_2048\nkey_type            TYPE_GOOGLE_CREDENTIALS_FILE\nprivate_key_data    ewogICJ0eXBlIjogInNlcnZpY2VfYWNjb3VudCIsC...\n```\n\n----------------------------------------\n\nTITLE: Defining Vault Secret Engines in Terraform\nDESCRIPTION: Provides examples of how to define multiple Vault secret engines in a Terraform configuration file. This snippet shows how to create resources for existing and new secret engines, including those in namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_mount\" \"transit_plugin\" {\n  path = \"transit\"\n  type = \"transit\"\n}\n\nresource \"vault_mount\" \"admin_keys_plugin\" {\n  namespace = vault_namespace.admin_ns.path\n  path = \"admin_keys\"\n  type = \"kv\"\n  options = {\n    version = \"2\"\n  }\n}\n\nresource \"vault_mount\" \"dev_keys_plugin\" {\n  namespace = vault_namespace.dev_ns.path\n  path = \"dev_keys\"\n  type = \"kv\"\n  options = {\n    version = \"2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Existing Vault Resources into Terraform\nDESCRIPTION: Demonstrates how to import existing Vault resources into Terraform state using the terraform import command. This is necessary for managing pre-existing resources with Terraform.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform import vault_namespace.admin_ns admin\n\nvault_namespace.admin_ns: Importing from ID \"admin\"...\nvault_namespace.admin_ns: Import prepared!\n  Prepared vault_namespace for import\nvault_namespace.admin_ns: Refreshing state... [id=admin]\n\nImport successful!\n\nThe resources that were imported are shown above. These resources are now in\nyour Terraform state and will henceforth be managed by Terraform.\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using Bash\nDESCRIPTION: This snippet shows how to retrieve a secret from Vault using a curl command in Bash. It sends a GET request to the Vault API to read the secret and saves the response to a file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_37\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n    http://127.0.0.1:8200/v1/secret/data/my-secret-password > secrets.json\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener in HashiCorp Vault (HCL)\nDESCRIPTION: This snippet demonstrates how to configure a TCP listener for Vault to listen on a specific IP address and port. It's a basic configuration that can be expanded for multiple interfaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Sensitive Vault Config\nDESCRIPTION: Command to create a Kubernetes secret containing sensitive Vault configuration. This protects the configuration from being stored in plaintext in a ConfigMap.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl create secret generic vault-storage-config \\\n    --from-file=config.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Auth Method with LDAPS and Auto-discovery (Scenario 3)\nDESCRIPTION: This configuration sets up LDAP authentication using LDAPS, auto-discovery for user bind DN, and resolves group membership via memberUid, member, or uniqueMember attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/ldap/config \\\n    url=\"ldaps://ldap.example.com\" \\\n    userattr=\"uid\" \\\n    userdn=\"ou=Users,dc=example,dc=com\" \\\n    discoverdn=true \\\n    groupdn=\"ou=Groups,dc=example,dc=com\" \\\n    certificate=@ldap_ca_cert.pem \\\n    insecure_tls=false \\\n    starttls=true\n...\n```\n\n----------------------------------------\n\nTITLE: Customizing Vault Health Probes for Kubernetes\nDESCRIPTION: Configuration example for customizing Vault's readiness probe to consider pods ready even when sealed or uninitialized. This enables running post-start scripts for additional setup when pods are ready.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  readinessProbe:\n    enabled: true\n    path: '/v1/sys/health?standbyok=true&sealedcode=204&uninitcode=204'\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine - Shell\nDESCRIPTION: This snippet shows how to enable the database secrets engine in Vault. It ensures that the engine is ready for further configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Role via CLI in Vault\nDESCRIPTION: This snippet shows how to create a named role in Vault using the AppRole auth method via the CLI.  It sets the token type, secret ID TTL, token TTL, token max TTL, and secret ID number of uses. The role name is 'my-role'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/approle/role/my-role \\\n    token_type=batch \\\n    secret_id_ttl=10m \\\n    token_ttl=20m \\\n    token_max_ttl=30m \\\n    secret_id_num_uses=40\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Auth Method in Vault\nDESCRIPTION: Commands to enable the Kubernetes auth method in Vault and configure it with the Kubernetes API server endpoint. This uses environment variables available within the pod to automatically set the correct Kubernetes host address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/kubernetes-auth.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault auth enable kubernetes\nvault write auth/kubernetes/config \\\n    kubernetes_host=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-Based Static Role Rotation with Window in Vault\nDESCRIPTION: This snippet demonstrates how to configure a rotation window for static role credential rotation in Vault. The rotation occurs every Saturday at 00:00 and must complete by 01:00. Prerequisite: A configured Vault instance with database secrets engine enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/static-roles/my-role \\\n    db_name=my-database \\\n    username=\\\"vault\\\" \\\n    rotation_window=\\\"1h\\\" \\\n    rotation_schedule=\\\"0 * * * SAT\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Password Policy with Specific Special Character Requirements in HCL\nDESCRIPTION: This HCL snippet defines a password policy requiring at least one uppercase, one lowercase, one numeric character, and one character from a specific set of special characters (!@#$).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyz\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"0123456789\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"!@#$\"\n  min-chars = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Role for Database Credential Creation - Shell\nDESCRIPTION: This snippet sets up a role in Vault to map to MongoDB commands for creating database credentials. It specifies the database name, creation statements, and TTL values for the credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-mongodb-database \\\n    creation_statements='{ \"db\": \"admin\", \"roles\": [{ \"role\": \"readWrite\" }, {\"role\": \"read\", \"db\": \"foo\"}] }' \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\nSuccess! Data written to: database/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Defining KVv2 Secret Engine Access for Specific User in HCL\nDESCRIPTION: This policy snippet creates a section of the KVv2 Secret Engine specific to a user. It grants create, update, patch, read, and delete capabilities on the data path, and list capability on the metadata path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/data/{{identity.entity.id}}/*\" {\n  capabilities = [\"create\", \"update\", \"patch\", \"read\", \"delete\"]\n}\n\npath \"secret/metadata/{{identity.entity.id}}/*\" {\n  capabilities = [\"list\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Replication on Primary\nDESCRIPTION: Commands to enable performance replication on the primary cluster and generate a secondary token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-perf-with-raft.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-primary-0 -- vault write -f sys/replication/performance/primary/enable primary_cluster_addr=https://vault-primary-active:8201\n\nkubectl exec -ti vault-primary-0 -- vault write sys/replication/performance/primary/secondary-token id=secondary\n```\n\n----------------------------------------\n\nTITLE: Sending a Role Creation Request with cURL\nDESCRIPTION: This snippet demonstrates how to use cURL to send a POST request to create a new AWS role in Vault. The request requires the Vault token and payload in JSON format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/aws/roles/example-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Administrative Namespace Path in HCL\nDESCRIPTION: This snippet illustrates how to set the `administrative_namespace_path` parameter in the Vault configuration file using HCL.  This configuration assigns the specified namespace as the administrative namespace, granting it elevated permissions. The value should be the absolute path of the namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nui = true\napi_addr = \"https://127.0.0.1:8200\"\nadministrative_namespace_path = \"ns_admin/\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vault using Google Cloud IAM in C#\nDESCRIPTION: This C# example demonstrates authenticating with HashiCorp Vault using Google Cloud IAM and retrieving secrets. It includes methods for obtaining Google credentials, generating a signed JWT from GCP IAM, and using the VaultSharp client to authenticate and retrieve key-value secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Google.Apis.Auth.OAuth2;\nusing Google.Apis.Services;\nusing Google.Apis.Iam.v1;\nusing Newtonsoft.Json;\nusing VaultSharp;\nusing VaultSharp.V1.AuthMethods;\nusing VaultSharp.V1.AuthMethods.GoogleCloud;\nusing VaultSharp.V1.Commons;\n\nusing Data = Google.Apis.Iam.v1.Data;\n\nnamespace Examples\n{\n    public class GCPAuthExample\n    {\n        /// <summary>\n        /// Fetches a key-value secret (kv-v2) after authenticating to Vault via GCP IAM,\n        /// one of two auth methods used to authenticate with GCP (the other is GCE auth).\n        /// </summary>\n        public string GetSecretGcp()\n        {\n            var vaultAddr = Environment.GetEnvironmentVariable(\"VAULT_ADDR\");\n            if(String.IsNullOrEmpty(vaultAddr))\n            {\n                throw new System.ArgumentNullException(\"Vault Address\");\n            }\n\n            var roleName = Environment.GetEnvironmentVariable(\"VAULT_ROLE\");\n            if(String.IsNullOrEmpty(roleName))\n            {\n                throw new System.ArgumentNullException(\"Vault Role Name\");\n            }\n\n            // Learn about authenticating to GCS with service account credentials at https://cloud.google.com/docs/authentication/production\n            if(String.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"GOOGLE_APPLICATION_CREDENTIALS\")))\n            {\n                Console.WriteLine(\"WARNING: Environment variable GOOGLE_APPLICATION_CREDENTIALS was not set. IAM client for JWT signing will fall back to default instance credentials.\");\n            }\n\n            var jwt = SignJWT();\n\n            IAuthMethodInfo authMethod = new GoogleCloudAuthMethodInfo(roleName, jwt);\n            var vaultClientSettings = new VaultClientSettings(vaultAddr, authMethod);\n\n            IVaultClient vaultClient = new VaultClient(vaultClientSettings);\n\n            // We can retrieve the secret after creating our VaultClient object\n            Secret<SecretData> kv2Secret = null;\n            kv2Secret = vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(path: \"/creds\").Result;\n\n            var password = kv2Secret.Data.Data[\"password\"];\n\n            return password.ToString();\n        }\n\n        /// <summary>\n        /// Generate signed JWT from GCP IAM\n        /// </summary>\n        private string SignJWT()\n        {\n            var roleName = Environment.GetEnvironmentVariable(\"GCP_ROLE\");\n            var svcAcctName = Environment.GetEnvironmentVariable(\"GCP_SERVICE_ACCOUNT_NAME\");\n            var gcpProjName = Environment.GetEnvironmentVariable(\"GOOGLE_CLOUD_PROJECT\");\n\n            IamService iamService = new IamService(new BaseClientService.Initializer\n            {\n                HttpClientInitializer = GetCredential(),\n                ApplicationName = \"Google-iamSample/0.1\",\n            });\n\n            string svcEmail = $\"{svcAcctName}@{gcpProjName}.iam.gserviceaccount.com\";\n            string name = $\"projects/-/serviceAccounts/{svcEmail}\";\n\n            TimeSpan currentTime = (DateTime.UtcNow - new DateTime(1970, 1, 1));\n            int expiration = (int)(currentTime.TotalSeconds) + 900;\n\n            Data.SignJwtRequest requestBody = new Data.SignJwtRequest();\n            requestBody.Payload = JsonConvert.SerializeObject(new Dictionary<string, object> ()\n            {\n                { \"aud\", $\"vault/{roleName}\" } ,\n                { \"sub\", svcEmail } ,\n                { \"exp\", expiration }\n            });\n\n            ProjectsResource.ServiceAccountsResource.SignJwtRequest request = iamService.Projects.ServiceAccounts.SignJwt(requestBody, name);\n\n            Data.SignJwtResponse response = request.Execute();\n\n            return JsonConvert.SerializeObject(response.SignedJwt).Replace(\"\\\"\", \"\");\n        }\n\n        public static GoogleCredential GetCredential()\n        {\n            GoogleCredential credential = Task.Run(() => GoogleCredential.GetApplicationDefaultAsync()).Result;\n            if (credential.IsCreateScopedRequired)\n            {\n                credential = credential.CreateScoped(\"https://www.googleapis.com/auth/cloud-platform\");\n            }\n           return credential;\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching the RoleID via CLI in Vault\nDESCRIPTION: This command retrieves the RoleID of a specific AppRole using the Vault CLI. It's crucial for applications to know the RoleID to authenticate against Vault. The RoleID is a UUID associated with the AppRole.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read auth/approle/role/my-role/role-id\nrole_id     db02de05-fa39-4855-059b-67221c5c2f63\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using Java\nDESCRIPTION: This snippet demonstrates how to retrieve a secret from Vault using the Java client. It uses the get method of opsForVersionedKeyValue to read the secret from the specified path and then extracts the password value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_36\n\nLANGUAGE: Java\nCODE:\n```\nVersioned<Map<String, Object>> readResponse = vaultTemplate\n    .opsForVersionedKeyValue(\"secret\")\n    .get(\"my-secret-password\");\n\nString password = \"\";\nif (readResponse != null && readResponse.hasData()) {\n    password = (String) readResponse.getData().get(\"password\");\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from KV v1 Secrets Engine in Vault (Shell)\nDESCRIPTION: This snippet shows the output when retrieving data from a KV v1 secrets engine in Vault. It demonstrates that no metadata is displayed since versioning is not available in KV v1.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/get.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get -mount=secret creds\n====== Data ======\nKey         Value\n---         -----\npasscode    my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Token via CLI in HashiCorp Vault\nDESCRIPTION: This snippet demonstrates how to authenticate using a token through the Vault CLI. The command takes a token as an argument and logs the user into Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/token.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login token=<token>\n```\n\n----------------------------------------\n\nTITLE: Token Self-Capabilities Response Format in JSON\nDESCRIPTION: This JSON example shows the response format from the `/sys/capabilities-self` endpoint, which includes both a `capabilities` field for backward compatibility and path-specific capability lists.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities-self.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": [\"delete\", \"list\", \"read\", \"update\"],\n  \"secret/foo\": [\"delete\", \"list\", \"read\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Policy via CLI\nDESCRIPTION: Command to create a new policy in Vault using a policy file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy write policy-name policy-file.hcl\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Primary Replication\nDESCRIPTION: This API call enables replication in primary mode for a Vault cluster. This operation should be used with caution as multiple primaries can result in data loss. The request requires root token authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/enable\n```\n\n----------------------------------------\n\nTITLE: Mapping GitHub Team to Vault Policy\nDESCRIPTION: This snippet shows how to map a GitHub team to a Vault policy using the `vault write auth/github/map/teams/<team_name>` command. This assigns the specified policy to users who are members of the given team when they authenticate with Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/github/map/teams/dev value=dev-policy\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: Standard JSON structure used for returning error messages in the Vault API. This format is used for all HTTP status codes >= 400.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"errors\": [\n    \"message\",\n    \"another message\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Storage Backend for Vault (HCL)\nDESCRIPTION: A basic configuration snippet for setting up the S3 storage backend in HashiCorp Vault. It requires specifying access and secret keys to authenticate with AWS and the bucket name where Vault data will be stored. Suitable for initial setups without high availability considerations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/s3.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"s3\" {\n  access_key = \"abcd1234\"\n  secret_key = \"defg5678\"\n  bucket     = \"my-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Azure Key Vault KMS Provider in Vault\nDESCRIPTION: This command configures an Azure Key Vault as a KMS provider destination for key distribution. It requires Azure-specific credentials including client_id, client_secret, and tenant_id for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write keymgmt/kms/example-kms \\\n    provider=\"azurekeyvault\" \\\n    key_collection=\"keyvault-name\" \\\n    credentials=client_id=\"a0454cd1-e28e-405e-bc50-7477fa8a00b7\" \\\n    credentials=client_secret=\"eR%HizuCVEpAKgeaUEx\" \\\n    credentials=tenant_id=\"cd4bf224-d114-4f96-9bbc-b8f45751c43f\"\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Plugin via CLI\nDESCRIPTION: Use the command `vault secrets enable` with either the `-version` flag or `kv-v2` plugin type to activate the key/value secrets engine at the specified mount path. This allows differentiating between v1 and v2 versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/setup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable -path <mount_path> -version=2 kv\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable -path <mount_path> kv-v2\n```\n\n----------------------------------------\n\nTITLE: Creating a Role for Issuing Certificates in Vault PKI\nDESCRIPTION: Configures a role named 'example-dot-com' that allows issuing certificates for subdomains of example.com with a maximum TTL of 72 hours.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-root-ca.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki/roles/example-dot-com \\\n    allowed_domains=example.com \\\n    allow_subdomains=true max_ttl=72h\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Helm with AWS KMS Integration\nDESCRIPTION: A Vault Helm configuration example that sets up high availability (HA) with AWS KMS for auto-unsealing and Consul storage backend. Includes environment variable configuration for AWS credentials and TCP listener setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  enabled: true\n\nserver:\n  extraSecretEnvironmentVars:\n    - envName: AWS_ACCESS_KEY_ID\n      secretName: kms-creds\n      secretKey: AWS_ACCESS_KEY_ID\n    - envName: AWS_SECRET_ACCESS_KEY\n      secretName: kms-creds\n      secretKey: AWS_SECRET_ACCESS_KEY\n\n  ha:\n    enabled: true\n    config: |\n      ui = true\n\n      listener \"tcp\" {\n        tls_disable = 1\n        address = \"[::]::8200\"\n        cluster_address = \"[::]::8201\"\n      }\n\n      seal \"awskms\" {\n        region     = \"KMS_REGION_HERE\"\n        kms_key_id = \"KMS_KEY_ID_HERE\"\n      }\n\n      storage \"consul\" {\n        address = \"HOST_IP:8500\"\n        path = \"vault/\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Secret from Vault using Ruby\nDESCRIPTION: This snippet shows how to retrieve a secret from Vault using the Ruby client. It uses the Vault.logical.read method to read the secret from the specified path and then extracts the password value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nsecret = Vault.logical.read(\"secret/data/my-secret-password\")\npassword = secret.data[:data][:password]\n```\n\n----------------------------------------\n\nTITLE: Basic Vault Initialization\nDESCRIPTION: Initialize a Vault server with default options\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/init.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault operator init\n```\n\n----------------------------------------\n\nTITLE: Authenticating with LDAP via API in Vault\nDESCRIPTION: This snippet shows how to authenticate to Vault using LDAP credentials via the HTTP API. It demonstrates a POST request with the password in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"password\": \"foo\"}' \\\n    http://127.0.0.1:8200/v1/auth/ldap/login/mitchellh\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Vault-0 Pod\nDESCRIPTION: These commands initialize and unseal the first Vault pod (vault-0) in the cluster. Initialization is required to set up the initial root token and unseal keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-with-raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-0 -- vault operator init\nkubectl exec -ti vault-0 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent Auto-auth with AppRole in HCL\nDESCRIPTION: Complete configuration example showing how to set up Vault Agent with AppRole authentication, including token sinks and proxy settings. The configuration demonstrates both wrapped and unwrapped token sinks, TCP listener setup, and template configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/approle.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npid_file = \"./pidfile\"\n\nvault {\n  address = \"https://127.0.0.1:8200\"\n}\n\nauto_auth {\n  method {\n    type      = \"approle\"\n\n    config = {\n      role_id_file_path = \"roleid\"\n      secret_id_file_path = \"secretid\"\n      remove_secret_id_file_after_reading = false\n    }\n  }\n\n  sink {\n    type = \"file\"\n    wrap_ttl = \"30m\"\n    config = {\n      path = \"sink_file_wrapped_1.txt\"\n    }\n  }\n\n  sink {\n    type = \"file\"\n    config = {\n      path = \"sink_file_unwrapped_2.txt\"\n    }\n  }\n}\n\n\napi_proxy {\n  use_auto_auth_token = true\n}\n\nlistener \"tcp\" {\n  address = \"127.0.0.1:8100\"\n  tls_disable = true\n}\n\ntemplate {\n  source      = \"/etc/vault/server.key.ctmpl\"\n  destination = \"/etc/vault/server.key\"\n}\n\ntemplate {\n  source      = \"/etc/vault/server.crt.ctmpl\"\n  destination = \"/etc/vault/server.crt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Key Pair Role\nDESCRIPTION: Configuration of a static role that rotates RSA key pairs for existing Snowflake users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/snowflake.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/static-roles/my-keypair-role \\\n    db_name=my-snowflake-database \\\n    username=\"snowflake_existing_user\" \\\n    rotation_period=\"24h\" \\\n    rotation_statements=\"ALTER USER {{name}} SET RSA_PUBLIC_KEY='{{public_key}}'\" \\\n    credential_type=\"rsa_private_key\" \\\n    credential_config=key_bits=2048\n```\n\n----------------------------------------\n\nTITLE: Soft Delete KV Data Using Vault API\nDESCRIPTION: cURL command template for soft deleting secret versions via the Vault API. Makes a POST request to the delete endpoint with version numbers in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/delete-data.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl                                       \\\n   --request POST                            \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n   --data '{\"versions\":[<target_versions>]}  \\\n   ${VAULT_ADDR}/v1/<plugin_mount_path>/delete/<secret_path>\n```\n\n----------------------------------------\n\nTITLE: Starting Vault Agent with Configuration File (Shell)\nDESCRIPTION: This command starts the Vault Agent using a specified configuration file. The `-config` flag points to the path of the configuration file, which defines the agent's behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault agent -config=/etc/vault/agent-config.hcl\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Vault Encryption Key\nDESCRIPTION: Command to manually rotate Vault's encryption key, displaying the key term and installation time.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rotate.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator rotate\nKey Term        3\nInstall Time    01 May 17 10:30 UTC\n```\n\n----------------------------------------\n\nTITLE: Setting Vault HA Configuration using Helm CLI\nDESCRIPTION: This shell command demonstrates how to set Vault's HA server configuration using Helm's `--set` flag. This approach allows users to specify configuration inline, utilizing Helm for managing and applying changes dynamically. The command requires the Vault Helm chart (v0.1.0 or later) and sets a TCP listener on all network interfaces. It accepts settings as a string and outputs them within the Helm execution context.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\n--set server.ha.config='{ listener \"tcp\" { address = \"0.0.0.0:8200\" }'\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Connection Configuration Payload\nDESCRIPTION: JSON payload for configuring a MySQL database connection in Vault, including plugin name, allowed roles, connection details and credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mysql-maria.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"mysql-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"{{username}}:{{password}}@tcp(127.0.0.1:3306)/\",\n  \"max_open_connections\": 5,\n  \"max_connection_lifetime\": \"5s\",\n  \"username\": \"root\",\n  \"password\": \"mysql\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cross-Namespace Secret Sharing in Vault Enterprise with Kubernetes\nDESCRIPTION: This example demonstrates how to configure a Kubernetes Pod to access secrets across different Vault namespaces. It authenticates to the Kubernetes method in us-west-org namespace and retrieves secrets from the us-east-org namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: cross-namespace\n  namespace: client-nicecorp\n  annotations:\n    vault.hashicorp.com/agent-inject: \"true\"\n    vault.hashicorp.com/role: \"cross-namespace-demo\"\n    vault.hashicorp.com/auth-path: \"us-west-org/auth/kubernetes\"\n    vault.hashicorp.com/agent-inject-template-marketing: |\n      {{- with secret \"us-east-org/kv-marketing/campaign\" -}}\n      {{ range $k, $v := .Data.data }}{{ $k }}: {{ $v }}\n      {{ end }}{{- end -}}\nspec:\n  serviceAccountName: mega-app\n  containers:\n    - name: campaign\n      image: nginx\n```\n\n----------------------------------------\n\nTITLE: SecretID Access Policy Configuration in HCL\nDESCRIPTION: HCL configuration for granting update permission to generate SecretID for a specific AppRole named 'jenkins'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Grant 'update' permission on the 'auth/approle/role/<role_name>/secret-id' path\npath \"auth/approle/role/jenkins/secret-id\" {\n   capabilities = [ \"update\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Root CA Certificate in Vault PKI\nDESCRIPTION: Creates a root CA certificate with a 10-year TTL and the common name 'myvault.com'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-root-ca.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki/root/generate/internal common_name=myvault.com ttl=87600h\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Server with Integrated Storage in HCL\nDESCRIPTION: This HCL configuration sets up a Vault server using Integrated Storage (Raft) as the storage backend, along with TCP listener settings and other server options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migrate-consul-storage.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path = \"/vault/raft/\"\n  node_id = \"node_1\"\n}\n\nlistener \"tcp\" {\n  address = \"0.0.0.0:8200\"\n  cluster_address = \"0.0.0.0:8201\"\n  tls_cert_file = \"/path/to/fullchain.pem\"\n  tls_key_file  = \"/path/to/privkey.pem\"\n}\n\napi_addr = \"https://13.57.14.206:8200\"\ncluster_addr = \"https://10.0.101.22:8201\"\ndisable_mlock = true\nui=true\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Integrated Storage (Raft) using Helm\nDESCRIPTION: This command installs Vault using Helm chart with high availability and integrated storage (Raft) enabled. It sets the necessary configuration values to enable these features.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-with-raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install vault hashicorp/vault \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Vault using HTTP API\nDESCRIPTION: This JSON payload is used to configure a database connection in the Vault Database secrets engine. It specifies parameters like plugin_name, allowed_roles, and connection_url required for establishing a connection. The username and password fields are used in the connection_url template. Required prerequisites include enabling the database secrets engine at the /database path in Vault and having appropriate permissions for the configured user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"mysql-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"{{username}}:{{password}}@tcp(127.0.0.1:3306)/\",\n  \"username\": \"vaultuser\",\n  \"password\": \"secretpassword\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OIDC Role for Google Authentication\nDESCRIPTION: This snippet shows how to create an OIDC role in Vault for Google authentication. It specifies allowed redirect URIs, user and group claims, and custom claim mappings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/google.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nvault write auth/oidc/role/your_default_role \\\n    allowed_redirect_uris=\"http://localhost:8200/ui/vault/auth/oidc/oidc/callback,http://localhost:8250/oidc/callback\" \\\n    user_claim=\"sub\" \\\n    groups_claim=\"groups\" \\\n    claim_mappings=\"/Education/graduation_date\"=\"graduation_date\" \\\n    claim_mappings=\"/Preferences/shirt_size\"=\"shirt_size\"\n```\n\n----------------------------------------\n\nTITLE: Writing KV Secret from JSON File\nDESCRIPTION: Shows how to write secrets to Vault using data from a JSON file on disk, utilizing the '@' file prefix\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/put.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault kv put -mount=secret foo @data.json\n```\n\n----------------------------------------\n\nTITLE: Checking Replication Status with cURL\nDESCRIPTION: This snippet demonstrates how to check the status of replication using cURL. This is an unauthenticated endpoint that provides information about replication mode, sync progress, and other relevant details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/replication/status\n```\n\n----------------------------------------\n\nTITLE: Create/Update Managed Key Request via HTTP API\nDESCRIPTION: HTTP request example for creating or updating a managed key using curl. This posts to the /sys/managed-keys/:type/:name endpoint with the appropriate payload containing the configuration parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/managed-keys/pkcs11/hsm-key1\n```\n\n----------------------------------------\n\nTITLE: Sending Notifications to Systemd on Service Events - Go\nDESCRIPTION: This code snippet implements the functionality of sending notifications to systemd when the Vault service starts, stops, or reloads its configuration. This is essential for proper service management within a Linux environment that uses systemd. The snippet handles the core event notifications to ensure they are communicated effectively to systemd.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11517.txt#2025-04-14_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n\"release-note:improvement\\ncore: Send notifications to systemd on start, stop, and configuration reload.\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Deployment with Vault Agent Environment Variable Injection\nDESCRIPTION: This YAML example demonstrates how to use Vault Agent Injector to create environment variables from Vault secrets. It includes a template for exporting a secret as an environment variable and configures the application container to source these variables during startup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-deployment\n  labels:\n    app: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/role: 'web'\n        vault.hashicorp.com/agent-inject-secret-config: 'secret/data/web'\n        # Environment variable export template\n        vault.hashicorp.com/agent-inject-template-config: |\n          {{- with secret \"secret/data/web\" -}}\n            export api_key=\"{{ .Data.data.payments_api_key }}\"\n          {{- end }}\n    spec:\n      serviceAccountName: web\n      containers:\n        - name: web\n          image: alpine:latest\n          command:\n            ['sh', '-c']\n          args:\n            ['source /vault/secrets/config && <entrypoint script>']\n          ports:\n            - containerPort: 9090\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Auth Method in Vault with Azure AD\nDESCRIPTION: This command configures the OIDC auth method in Vault with the client ID, client secret, default role, and discovery URL obtained from Azure AD.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/azuread.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/config \\\n   oidc_client_id=\"your_client_id\" \\\n   oidc_client_secret=\"your_client_secret\" \\\n   default_role=\"your_default_role\" \\\n   oidc_discovery_url=\"https://login.microsoftonline.com/tenant_id/v2.0\"\n```\n\n----------------------------------------\n\nTITLE: Joining a Vault Node via CLI\nDESCRIPTION: The shell command demonstrates how to join a new Vault node to an existing cluster using the Vault CLI. It requires specifying the API address of an active node. Required dependencies include a Vault installation and network access to the specified node. The command joins the node when executed correctly and outputs the success message for the operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator raft join https://node1.vault.local:8200\n```\n\n----------------------------------------\n\nTITLE: Running Vault in Development Mode with Custom Root Token\nDESCRIPTION: Command example demonstrating how to start Vault in development mode with a custom initial root token. Development mode runs Vault in-memory and starts unsealed, making it suitable for testing but not for production use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/server.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault server -dev -dev-root-token-id=\"root\"\n```\n\n----------------------------------------\n\nTITLE: Writing Custom Metadata using API - Vault KV V2 - Shell\nDESCRIPTION: This snippet outlines the steps to create a JSON file with custom metadata fields and send a POST request to the Vault API to write this metadata to a KV V2 secret path. It requires a valid Vault token and correct API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/custom-metadata.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                      \\\n  --request POST                            \\\n  --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n  --data @metadata.json                     \\\n  ${VAULT_ADDR}/v1/<plugin_mount_path>/metadata/<secret_path>\n```\n\n----------------------------------------\n\nTITLE: Denying All Parameters in Vault Policy (HCL)\nDESCRIPTION: This snippet demonstrates how to deny all parameters in a Vault policy. It allows creating or updating transit encryption keys but denies setting any configuration parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\npath \"transit/keys/*\" {\n  capabilities = [\"create\", \"update\"]\n  denied_parameters = {\n    \"*\" = []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Custom Plugin Information in Vault\nDESCRIPTION: Example showing how to display information about a custom authentication plugin with a specific version using the plugin info command. Shows various metadata including args, builtin status, command, deprecation status, and SHA256 hash.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/info.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin info -version=v1.0.0 auth my-custom-plugin\n\nKey                   Value\n---                   -----\nargs                  []\nbuiltin               false\ncommand               my-custom-plugin\ndeprecation_status    n/a\nname                  my-custom-plugin\noci_image             n/a\nruntime               n/a\nsha256                04ce575260fa3a2cfc477d13ac327108c50838a03917ec4d6df38ecdc64452d1\nversion               v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with C#\nDESCRIPTION: This code snippet authenticates to Vault using the Token authentication method in C#. It creates a Vault client and sets the Vault address and token ('dev-only-token'). This should only be used in development environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_18\n\nLANGUAGE: cs\nCODE:\n```\nIAuthMethodInfo authMethod = new TokenAuthMethodInfo(vaultToken: \"dev-only-token\");\n\nVaultClientSettings vaultClientSettings = new\nVaultClientSettings(\"http://127.0.0.1:8200\", authMethod);\nIVaultClient vaultClient = new VaultClient(vaultClientSettings);\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Database Plugin - Shell\nDESCRIPTION: This snippet configures the MongoDB database connection by specifying the plugin name, allowed roles, connection URL, and credentials. Ensure that the provided roles and connection information aligns with your MongoDB setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mongodb-database \\\n    plugin_name=mongodb-database-plugin \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"mongodb://{{username}}:{{password}}@mongodb.acme.com:27017/admin?tls=true\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass!\"\n```\n\n----------------------------------------\n\nTITLE: Configuring CA for SSH Host Keys in Shell\nDESCRIPTION: Configure Vault with a CA for signing SSH host keys. This involves writing configuration with generated or uploaded keys and is crucial for initializing the key signing process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh-host-signer/config/ca generate_signing_key=true\nKey             Value\n---             -----\npublic_key      ssh-rsa AAAAB3NzaC1yc2EA...\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh-host-signer/config/ca \\\n    private_key=\"...\" \\\n    public_key=\"...\"\n```\n\n----------------------------------------\n\nTITLE: Using Local Service Account Token for Authentication\nDESCRIPTION: This command configures Kubernetes auth to use the local service account token when Vault is running in a Kubernetes pod. This approach supports short-lived tokens by periodically re-reading the token file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/kubernetes/config \\\n    kubernetes_host=https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT\n```\n\n----------------------------------------\n\nTITLE: Listing Child Issuers in Vault PKI\nDESCRIPTION: This command lists all intermediate certificates that might have been issued by a parent certificate in Vault. It displays the path to each potential intermediate certificate and indicates whether it matches as a child of the specified parent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki list-intermediates /pki_root/issuer/default\nintermediate                                             match?\n------------                                             ------\npki_int_2/issuer/d4404ccc-3ad4-83a9-f5df-398637654b3b    true\npki_int_2/issuer/db0b0a6c-6641-ac15-363a-4e5261315581    true\npki_root/issuer/9464c4fe-e8a6-d96a-0566-021575e7382c     true\npki_int/issuer/2f958ec5-1838-336e-331b-07032379b958      true\npki_int/issuer/b8cc0b41-e0e9-1a92-12c4-6849c9d6f837      true\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Auth Method in Vault\nDESCRIPTION: This shell command enables the userpass authentication method in Vault. It can be enabled at the default path or a custom path using the '-path' flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/userpass.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable userpass\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable -path=<path> userpass\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Secret Engine for ADFS in Vault\nDESCRIPTION: This command enables a KV version 2 secret engine at a specified path for ADFS integration. It creates a new mount point for storing ADFS-related secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=<ADFS_KV_PLUGIN_PATH> kv-v2\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=adfs-kv kv-v2\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Payload for Batch Input Transformation (JSON)\nDESCRIPTION: This JSON payload illustrates how to prepare a batch input for a transformation request to HashiCorp Vault, containing both transformation types and their corresponding values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batch_input\": [\n    {\n      \"transformation\": \"ccn-fpe\",\n      \"value\": \"5682-4613-6822-8064\",\n      \"reference\": \"order#1234\"\n    },\n    {\n      \"transformation\": \"ccn-tokenization\",\n      \"value\": \"Q4tYgFXHxURXf9MLekG82L51vSAQrDnpAiaB37J4VPRxoQEB3fRpwR\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GitHub Auth Method in Vault\nDESCRIPTION: This snippet shows how to enable the GitHub auth method in Vault using the `vault auth enable` command. This is a necessary step before configuring the auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth enable github\n```\n\n----------------------------------------\n\nTITLE: Verifying TLS Configuration with sslscan (ECDSA Certificate)\nDESCRIPTION: This shell session demonstrates how to use sslscan to verify the TLS configuration of a Vault instance using an ECDSA certificate. It shows the supported protocols, ciphersuites, and certificate details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/tcp-tls.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ sslscan 127.0.0.1:8200\nVersion: 2.1.3\nOpenSSL 3.2.1 30 Jan 2024\n\nConnected to 127.0.0.1\n\nTesting SSL server 127.0.0.1 on port 8200 using SNI name 127.0.0.1\n\n  SSL/TLS Protocols:\nSSLv2     disabled\nSSLv3     disabled\nTLSv1.0   disabled\nTLSv1.1   disabled\nTLSv1.2   enabled\nTLSv1.3   enabled\n\n  TLS Fallback SCSV:\nServer supports TLS Fallback SCSV\n\n  TLS renegotiation:\nSession renegotiation not supported\n\n  TLS Compression:\nCompression disabled\n\n  Heartbleed:\nTLSv1.3 not vulnerable to heartbleed\nTLSv1.2 not vulnerable to heartbleed\n\n  Supported Server Cipher(s):\nPreferred TLSv1.3  128 bits  TLS_AES_128_GCM_SHA256        Curve 25519 DHE 253\nAccepted  TLSv1.3  256 bits  TLS_AES_256_GCM_SHA384        Curve 25519 DHE 253\nAccepted  TLSv1.3  256 bits  TLS_CHACHA20_POLY1305_SHA256  Curve 25519 DHE 253\nPreferred TLSv1.2  128 bits  ECDHE-ECDSA-AES128-GCM-SHA256 Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  ECDHE-ECDSA-AES256-GCM-SHA384 Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  ECDHE-ECDSA-CHACHA20-POLY1305 Curve 25519 DHE 253\nAccepted  TLSv1.2  128 bits  ECDHE-ECDSA-AES128-SHA        Curve 25519 DHE 253\nAccepted  TLSv1.2  256 bits  ECDHE-ECDSA-AES256-SHA        Curve 25519 DHE 253\n\n  Server Key Exchange Group(s):\nTLSv1.3  128 bits  secp256r1 (NIST P-256)\nTLSv1.3  192 bits  secp384r1 (NIST P-384)\nTLSv1.3  260 bits  secp521r1 (NIST P-521)\nTLSv1.3  128 bits  x25519\nTLSv1.2  128 bits  secp256r1 (NIST P-256)\nTLSv1.2  192 bits  secp384r1 (NIST P-384)\nTLSv1.2  260 bits  secp521r1 (NIST P-521)\nTLSv1.2  128 bits  x25519\n\n  SSL Certificate:\nSignature Algorithm: ecdsa-with-SHA256\nECC Curve Name:      prime256v1\nECC Key Strength:    128\n\nSubject:  localhost\nIssuer:   localhost\n\nNot valid before: May 17 17:27:29 2024 GMT\nNot valid after:  Jun 16 17:27:29 2024 GMT\n```\n\n----------------------------------------\n\nTITLE: Restore Key Using Curl in Shell\nDESCRIPTION: This snippet provides a curl command to restore a backup to the Vault Transit Engine. It sends a POST request with a JSON payload containing the backup data. A Vault token is required for authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_69\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/restore\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Dynamic Secrets in Vault\nDESCRIPTION: YAML configuration for VaultDynamicSecret custom resource that generates AWS IAM credentials from Vault's AWS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  namespace: vso-example\n  name: vault-dynamic-secret-aws-iam\nspec:\n  vaultAuthRef: vault-auth\n  mount: aws\n  path: creds/my-iam-role\n  destination:\n    create: true\n    name: dynamic-aws-iam\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Role Rules in JSON\nDESCRIPTION: This JSON snippet defines the rules for a Kubernetes role, allowing the 'list' verb on 'pods' resources in the core API group. This configuration is used with the Vault Kubernetes secrets engine to automatically generate Kubernetes roles with specific permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"pods\"],\"verbs\":[\"list\"]}]}\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Management Secrets Engine\nDESCRIPTION: Command to enable the key management secrets engine in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault secrets enable keymgmt\n```\n\n----------------------------------------\n\nTITLE: AppRole Login Request\nDESCRIPTION: This curl command demonstrates how to login to Vault using the AppRole authentication method.  The request is sent to the `/auth/approle/login` endpoint with the role ID and secret ID in the payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/approle/login\n```\n\n----------------------------------------\n\nTITLE: Creating a Vault Token\nDESCRIPTION: This command creates a new Vault token using the `vault token create` subcommand. It requires Vault to be properly configured and authenticated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token create\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Vault Server with Audit Storage in YAML\nDESCRIPTION: This YAML configuration sets up a single server Vault cluster with auditing enabled. It configures the server, storage, and audit settings using Helm values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/standalone-audit.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  standalone:\n    enabled: true\n    config: |\n      listener \"tcp\" {\n        tls_disable = true\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n      }\n\n      storage \"file\" {\n        path = \"/vault/data\"\n      }\n\n  service:\n    enabled: true\n\n  dataStorage:\n    enabled: true\n    size: 10Gi\n    storageClass: null\n    accessMode: ReadWriteOnce\n\n  auditStorage:\n    enabled: true\n    size: 10Gi\n    storageClass: null\n    accessMode: ReadWriteOnce\n```\n\n----------------------------------------\n\nTITLE: Creating External Vault Group and Linking to AD Group\nDESCRIPTION: This series of commands creates an external group in Vault, retrieves the ADFS auth method accessor, and creates a group alias to link the Vault group with an existing AD group. It enables mapping AD group permissions to Vault policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write \\\n  -format=json \\\n  identity/group name=\"<YOUR_NEW_VAULT_GROUP_NAME>\" \\\n  policies=\"<RO_ADFS_POLICY_NAME>\" \\\n  type=\"external\" | jq -r \".data.id\" > group_id.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth list -format=json | \\\n  jq -r '.\"<YOUR_OIDC_MOUNT_PATH>/\".accessor' > \\\n  accessor_adfs.txt\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write identity/group-alias \\\n  name=\"<YOUR_EXISTING_AD_GROUP>\"  \\\n  mount_accessor=$(cat accessor_adfs.txt) \\\n  canonical_id=\"$(cat group_id.txt)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Connection - HTTP API - Shell\nDESCRIPTION: This snippet demonstrates how to configure the MongoDB Atlas connection using a POST request to the specified API endpoint, including the necessary payload containing the public and private API keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/mongodbatlas.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/mongodbatlas/config\n```\n\n----------------------------------------\n\nTITLE: Starting a Recovery Token Generation Attempt in Vault\nDESCRIPTION: This snippet shows how to initiate a new recovery token generation attempt using a POST request to the /sys/generate-recovery-token/attempt endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/generate-recovery-token/attempt\n```\n\n----------------------------------------\n\nTITLE: Configuring Swift Storage Backend using HCL\nDESCRIPTION: This HCL snippet demonstrates how to set up the Swift storage backend for Vault with necessary parameters such as auth_url, username, password, and container name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/swift.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"swift\" {\n  auth_url  = \"https://...\"\n  username  = \"admin\"\n  password  = \"secret123!\"\n  container = \"my-storage-container\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mount Configuration Response\nDESCRIPTION: JSON response showing detailed configuration and metadata for a specific mount point. Includes TTL settings, description and mount options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"config\": {\n    \"default_lease_ttl\": 0,\n    \"force_no_cache\": false,\n    \"max_lease_ttl\": 0\n  },\n  \"description\": \"per-token private secret storage\",\n  \"accessor\": \"cubbyhole_db85f061\",\n  \"external_entropy_access\": false,\n  \"options\": null,\n  \"uuid\": \"9c0e211a-904d-e41d-e1a2-7f1ff2bb8461\",\n  \"type\": \"cubbyhole\",\n  \"local\": true,\n  \"seal_wrap\": false,\n  \"request_id\": \"efdab917-ade2-1802-b8fa-fe2e6486d4e5\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"accessor\": \"cubbyhole_db85f061\",\n    \"config\": {\n      \"default_lease_ttl\": 0,\n      \"force_no_cache\": false,\n      \"max_lease_ttl\": 0\n    },\n    \"description\": \"per-token private secret storage\",\n    \"external_entropy_access\": false,\n    \"local\": true,\n    \"options\": null,\n    \"plugin_version\": \"\",\n    \"running_plugin_version\": \"v1.12.0+builtin.vault\",\n    \"running_sha256\": \"\",\n    \"seal_wrap\": false,\n    \"type\": \"cubbyhole\",\n    \"uuid\": \"9c0e211a-904d-e41d-e1a2-7f1ff2bb8461\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: SSH Key Signing API Response in Vault\nDESCRIPTION: Sample response from signing an SSH key, containing the signed certificate. The response includes the serial number of the certificate and the signed SSH key (certificate) that can be used for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"ssh/sign/example/097bf207-96dd-0041-0e83-b23bd1923993\",\n  \"renewable\": false,\n  \"lease_duration\": 21600,\n  \"data\": {\n    \"serial_number\": \"f65ed2fd21443d5c\",\n    \"signed_key\": \"ssh-rsa-cert-v01@openssh.com AAAAHHNzaC1y...\\n\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Credentials for Elasticsearch in Vault\nDESCRIPTION: This command retrieves a new set of dynamic credentials from Vault for accessing Elasticsearch with the permissions defined in the specified role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           0ZsueAP-dqCNGZo35M0n\nusername           v-vaultuser-my-role-AgIViC5TdQHBdeiCxae0-1602541724\n```\n\n----------------------------------------\n\nTITLE: Configuring Maximum Lease TTL for PKI Mount\nDESCRIPTION: Sets the maximum lease TTL for the PKI mount to 10 years (87600 hours).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-root-ca.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune -max-lease-ttl=87600h pki\n```\n\n----------------------------------------\n\nTITLE: Generating AWS Credentials in Vault\nDESCRIPTION: Read AWS credentials from a specified role using Vault, generating new access keys and secret keys for dynamic IAM user management\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read aws/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials with Auto-Managed Service Account and Role (Vault CLI)\nDESCRIPTION: This snippet demonstrates how to retrieve credentials using an automatically generated service account and role through the Vault CLI. The `kubernetes_namespace` is set to 'test'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/creds/auto-managed-sa-and-role \\\n    kubernetes_namespace=test\nKey                          Value\n--                           -----\nlease_id                     kubernetes/creds/auto-managed-sa-and-role/pehLtegoTP8vCkcaQozUqOHf\nlease_duration               768h\nlease_renewable              false\nservice_account_name         v-token-auto-man-1653002096-4imxf3ytjh5hbyro9s1oqdo3\nservice_account_namespace    test\nservice_account_token        eyJHbGci0iJSUzI1Ni...\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Root Credential Rotation Schedule\nDESCRIPTION: This snippet shows how to configure schedule-based, automatic credential rotation for root credentials in the GCP secret engine using the `rotation_schedule` field. The example sets the rotation to occur every Saturday at midnight (00:00).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write gcp/config/client \\\n  ...\n  rotation_schedule=\"0 * * * SAT\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Vault HA Node States\nDESCRIPTION: Describes the two primary states of Vault nodes in a high availability configuration: active and standby. Only one active instance processes requests at a time, with standby nodes ready to take over if the active node fails.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/high-availability.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Node States\n- Active: Processes all requests\n- Standby: Redirects requests to active server\n- Only unsealed servers can act as standby\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity Federation for AWS Auth in Vault\nDESCRIPTION: Shell command to configure the AWS auth engine to use plugin Workload Identity Federation. This sets up token-based authentication with AWS STS instead of using long-lived IAM credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/aws/config/client \\\n    identity_token_audience=\"vault.example/v1/identity/oidc/plugins\" \\\n    role_arn=\"arn:aws:iam::123456789123:role/example-web-identity-role\"\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Auth Method in Vault\nDESCRIPTION: Shell command to enable the AWS authentication method in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable aws\n```\n\n----------------------------------------\n\nTITLE: POST Request to Create or Update GCP Roleset in Vault\nDESCRIPTION: Command illustrating how to create or update a roleset in the GCP secrets engine via a POST request. It requires a payload file containing the configuration and a valid Vault token. It immediately revokes secrets when roleset bindings are updated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-token-roleset\n```\n\n----------------------------------------\n\nTITLE: Importing a Key with Vault API\nDESCRIPTION: This code snippet shows how to import a PEM-encoded private key into Vault using the PKI secrets engine. The `pem_bundle` parameter is required in the payload, along with an optional `key_name`. The API endpoint used is `/pki/keys/import`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_74\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/keys/import\n```\n\n----------------------------------------\n\nTITLE: Password Policy with Overlapping Charsets in HCL\nDESCRIPTION: This snippet shows a password policy with overlapping charsets, demonstrating how Vault handles character deduplication and minimum requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nlength = 20\nrule \"charset\" {\n  charset = \"abcde\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"01234\"\n  min-chars = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AppRole Auth Method via CLI in Vault\nDESCRIPTION: This command enables the AppRole authentication method within Vault using the command-line interface.  This step is necessary before creating roles and authenticating using AppRole. It utilizes the `vault auth enable` command with the `approle` argument.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth enable approle\n```\n\n----------------------------------------\n\nTITLE: Configuring MSSQL Connection\nDESCRIPTION: Command to configure Vault with MSSQL plugin and connection details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mssql.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/config/my-mssql-database \\\n    plugin_name=mssql-database-plugin \\\n    connection_url='sqlserver://{{username}}:{{password}}@localhost:1433' \\\n    allowed_roles=\"my-role\" \\\n    username=\"vaultuser\" \\\n    password=\"yourStrong(!)Password\"\n```\n\n----------------------------------------\n\nTITLE: Listing Secret Plugins in Vault CLI\nDESCRIPTION: This command demonstrates how to list secret plugins in Vault using the CLI, showing the name and version of each plugin. The output displays both built-in plugins and their version information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin list secret\nName                Version\n----                -------\nad                  v0.14.0+builtin\nalicloud            v0.13.0+builtin\naws                 v1.12.0+builtin.vault\n# ...\n```\n\n----------------------------------------\n\nTITLE: Get Mount Configuration Request\nDESCRIPTION: GET request to retrieve configuration details for a specific mount point. Returns mount settings and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/mounts/cubbyhole\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Auth Role\nDESCRIPTION: This command creates a named role in the Kubernetes auth method. It defines which service accounts from which namespaces can authenticate, and what policies they receive after successful authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/kubernetes/role/demo \\\n    bound_service_account_names=myapp \\\n    bound_service_account_namespaces=default \\\n    policies=default \\\n    ttl=1h\n```\n\n----------------------------------------\n\nTITLE: Rotating Root AWS Credentials in Vault\nDESCRIPTION: Rotate the credentials Vault uses to communicate with AWS, updating root IAM access keys and maintaining secure communication\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -f aws/config/rotate-root\n```\n\n----------------------------------------\n\nTITLE: AppRole Configuration with CIDR Restrictions\nDESCRIPTION: Shell command to create an AppRole with IP address restrictions, token limits, and TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/approle/role/jenkins \\\n      secret_id_bound_cidrs=\"0.0.0.0/0\",\"127.0.0.1/32\" \\\n      secret_id_ttl=60m \\\n      secret_id_num_uses=5 \\\n      enable_local_secret_ids=false \\\n      token_bound_cidrs=\"0.0.0.0/0\",\"127.0.0.1/32\" \\\n      token_num_uses=10 \\\n      token_ttl=1h \\\n      token_max_ttl=3h \\\n      token_type=default \\\n      period=\"\" \\\n      policies=\"default\",\"test\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Zookeeper Backend for Vault\nDESCRIPTION: This HCL snippet configures HashiCorp Vault to use a Zookeeper storage backend, specifying the address and path for storage with Zookeeper. The configuration supports setting the storage backend to be highly available.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/zookeeper.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"zookeeper\" {\n  address = \"localhost:2181\"\n  path    = \"vault/\"\n}\n```\n\n----------------------------------------\n\nTITLE: ACL Policy with Controlled Capabilities in Vault\nDESCRIPTION: This ACL policy grants read access to 'secret/foo' for anyone with a token with this policy. It grants write access to 'secret/foo' only after one member from the admin group authorizes the request, demonstrating how to use controlled_capabilities to restrict control group requirements to specific operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/control-groups.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n\"path \\\"secret/foo\\\" {\\n    capabilities = [\\\"write\\\",\\\"read\\\"]\\n    control_group = {\\n        factor \\\"admin\\\" {\\n            controlled_capabilities = [\\\"write\\\"]\\n            identity {\\n                group_names = [\\\"admin\\\"]\\n                approvals = 1\\n            }\\n        }\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault UI Listener in HCL\nDESCRIPTION: This code snippet shows how to enable the Vault UI in the Vault server configuration using HCL. It includes setting the `ui` option to true and configuring a `listener` stanza to determine the address on which the UI will be accessible. Key parameters include the IP address and port configuration for the listener. This setup assumes no network firewalls prevent communication with the specified endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/ui/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nui = true\nlistener \"tcp\" {\n  address = \"10.0.1.35:8200\"\n  # If bound to localhost, the Vault UI is only\n  # accessible from the local machine!\n  # address = \"127.0.0.1:8200\"\n}\n# ...\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Kubernetes Service Account in Go\nDESCRIPTION: This Go example demonstrates how to authenticate to HashiCorp Vault using a Kubernetes service account and retrieve a secret from KV v2 store. It initializes a Vault client, configures Kubernetes authentication with a service account token, logs in to Vault, and then retrieves and extracts a password value from a secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\tfmt \"fmt\"\n\t\"os\"\n\n\tvault \"github.com/hashicorp/vault/api\"\n\tauth \"github.com/hashicorp/vault/api/auth/kubernetes\"\n)\n\n// Fetches a key-value secret (kv-v2) after authenticating to Vault with a Kubernetes service account.\n// For a more in-depth setup explanation, please see the relevant readme in the hashicorp/vault-examples repo.\nfunc getSecretWithKubernetesAuth() (string, error) {\n\t// If set, the VAULT_ADDR environment variable will be the address that\n\t// your pod uses to communicate with Vault.\n\tconfig := vault.DefaultConfig() // modify for more granular configuration\n\n\tclient, err := vault.NewClient(config)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize Vault client: %w\", err)\n\t}\n\n\t// The service-account token will be read from the path where the token's\n\t// Kubernetes Secret is mounted. By default, Kubernetes will mount it to\n\t// /var/run/secrets/kubernetes.io/serviceaccount/token, but an administrator\n\t// may have configured it to be mounted elsewhere.\n\t// In that case, we'll use the option WithServiceAccountTokenPath to look\n\t// for the token there.\n\tk8sAuth, err := auth.NewKubernetesAuth(\n\t\t\"dev-role-k8s\",\n\t\tauth.WithServiceAccountTokenPath(\"path/to/service-account-token\"),\n\t)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize Kubernetes auth method: %w\", err)\n\t}\n\n\tauthInfo, err := client.Auth().Login(context.TODO(), k8sAuth)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to log in with Kubernetes auth: %w\", err)\n\t}\n\tif authInfo == nil {\n\t\treturn \"\", fmt.Errorf(\"no auth info was returned after login\")\n\t}\n\n\t// get secret from Vault, from the default mount path for KV v2 in dev mode, \"secret\"\n\tsecret, err := client.KVv2(\"secret\").Get(context.Background(), \"creds\")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read secret: %w\", err)\n\t}\n\n\t// data map can contain more than one key-value pair,\n\t// in this case we're just grabbing one of them\n\tvalue, ok := secret.Data[\"password\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"value type assertion failed: %T %#v\", secret.Data[\"password\"], secret.Data[\"password\"])\n\t}\n\n\treturn value, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Denied Parameters with Specific Values in Vault Policy (HCL)\nDESCRIPTION: This snippet shows how to deny specific parameter values in a Vault policy. It allows creating or updating token roles but denies setting 'allowed_policies' to 'admin'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\npath \"auth/token/roles/*\" {\n  capabilities = [\"create\", \"update\"]\n  denied_parameters = {\n    \"allowed_policies\" = [\"admin\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Requests and Limits for Vault in Kubernetes\nDESCRIPTION: Example YAML configuration for setting resource requests and limits on Vault pods. This defines memory requests and limits of 10Gi, which helps Kubernetes efficiently allocate compute resources to Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  requests:\n    memory: '10Gi'\n  limits:\n    memory: '10Gi'\n```\n\n----------------------------------------\n\nTITLE: POST Request to Configure Okta MFA Method\nDESCRIPTION: Shell command using curl to send a POST request that configures a new Okta MFA method. It uses a Vault token for authentication and submits the payload.json file containing the configuration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/okta.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/okta/my_okta\n```\n\n----------------------------------------\n\nTITLE: Configuring SecretProviderClass for File-Based Dynamic Database Credentials in YAML\nDESCRIPTION: This YAML snippet defines a SecretProviderClass that retrieves dynamic database credentials from Vault and mounts them as files. It specifies the provider as 'vault' and defines objects for username and password retrieval.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/examples.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets-store.csi.x-k8s.io/v1alpha1\nkind: SecretProviderClass\nmetadata:\n  name: vault-db-creds\nspec:\n  provider: vault\n  parameters:\n    roleName: 'app'\n    objects: |\n      - objectName: \"dbUsername\"\n        secretPath: \"database/creds/db-app\"\n        secretKey: \"username\"\n      - objectName: \"dbPassword\"\n        secretPath: \"database/creds/db-app\"\n        secretKey: \"password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Account with Service Account Keys - Vault - Shell\nDESCRIPTION: This snippet sets up a Vault static account intended to generate GCP service account keys. It employs the 'vault write' command, specifying service account email, key type, and resource bindings. Dependencies include a valid GCP account and appropriate IAM roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write gcp/static-account/my-key-account \\\n    service_account_email=\"account@my-project.iam.gserviceaccount.com\" \\\n    secret_type=\"service_account_key\"  \\\n    bindings=-<<EOF\n      resource \"//cloudresourcemanager.googleapis.com/projects/my-project\" {\n        roles = [\"roles/viewer\"]\n      }\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Creating Rate Limit Configuration (JSON Payload)\nDESCRIPTION: JSON payload for configuring rate limit quotas including exempt paths and logging settings. Specifies paths that are exempt from rate limiting and enables audit logging and response headers for rate limit information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/quotas-config.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"rate_limit_exempt_paths\": [\n    \"sys/internal/ui/mounts\",\n    \"sys/generate-recovery-token/attempt\",\n    \"sys/generate-recovery-token/update\",\n    \"sys/generate-root/attempt\",\n    \"sys/generate-root/update\",\n    \"sys/health\",\n    \"sys/seal-status\",\n    \"sys/unseal\"\n  ],\n  \"enable_rate_limit_audit_logging\": true,\n  \"enable_rate_limit_response_headers\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Role with Pre-existing Kubernetes Role (Vault CLI)\nDESCRIPTION: This snippet shows how to configure a Vault role to use a pre-existing Kubernetes role, automatically generating the service account and role binding. It sets the `kubernetes_role_name` parameter to \"test-role-list-pods\". This requires Vault's service account to have the necessary access to the resources being granted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/roles/auto-managed-sa-role \\\n    allowed_kubernetes_namespaces=\"test\" \\\n    kubernetes_role_name=\"test-role-list-pods\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Auth Method in Vault\nDESCRIPTION: This command configures the OIDC auth method in Vault with the client ID, client secret, and discovery URL from ForgeRock. It sets up the basic parameters required for OIDC authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/forgerock.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/config \\\n   oidc_client_id=\"your_client_id\" \\\n   oidc_client_secret=\"your_client_secret\" \\\n   default_role=\"your_default_role\" \\\n   oidc_discovery_url=\"https://openam.example.com:8443/openam/oauth2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Integration for Kerberos Authentication\nDESCRIPTION: Command to set up LDAP configuration for the Kerberos auth method, including connection details and user/group mapping parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kerberos.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/kerberos/config/ldap \\\n    binddn=vault_svc@MATRIX.LAN \\\n    bindpass=$VAULT_SVC_PASSWORD \\\n    groupattr=sAMAccountName \\\n    groupdn=\"DC=MATRIX,DC=LAN\" \\\n    groupfilter=\"(&(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\" \\\n    userdn=\"CN=Users,DC=MATRIX,DC=LAN\" \\\n    userattr=sAMAccountName \\\n    upndomain=MATRIX.LAN \\\n    url=ldaps://somewhere.foo\n```\n\n----------------------------------------\n\nTITLE: Reading a Key Using cURL in Transit Secrets Engine\nDESCRIPTION: Sample cURL command for retrieving information about a named encryption key in Vault's Transit secrets engine. Uses the GET method to access the /transit/keys/:name endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Proxy with Cache Persistence and Multiple Listeners\nDESCRIPTION: This example demonstrates a Vault Proxy configuration with a persistent cache block using Kubernetes storage type, a standard TCP listener, and a metrics-only TCP listener. The persistence configuration includes options for importing existing cache data and handling errors.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Other Vault Proxy configuration blocks\n# ...\n\ncache {\n\tpersist = {\n\t\ttype = \"kubernetes\"\n\t\tpath = \"/vault/proxy-cache/\"\n\t\tkeep_after_import = true\n\t\texit_on_err = true\n\t\tservice_account_token_file = \"/tmp/serviceaccount/token\"\n\t}\n}\n\nlistener \"tcp\" {\n    address = \"127.0.0.1:8100\"\n    tls_disable = true\n}\n\nlistener \"tcp\" {\n    address = \"127.0.0.1:3000\"\n    tls_disable = true\n    role = \"metrics_only\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Activity Counters API in Vault using cURL\nDESCRIPTION: Example of how to make a GET request to Vault's activity counters endpoint. The request requires authentication via X-Vault-Token header and returns client activity data based on specified parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/internal/counters/activity\n```\n\n----------------------------------------\n\nTITLE: Creating a Named Role - HashiCorp Vault Command\nDESCRIPTION: This command creates a role named 'payments' for the Transform secrets engine, specifying it to use 'ccn-fpe' as the transformation. This role restricts what transformations the engine can perform and is required for encoding and decoding operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transform/role/payments transformations=ccn-fpe\nSuccess! Data written to: transform/role/payments\n```\n\n----------------------------------------\n\nTITLE: ACL Policy with Controlled Capabilities and No Controlled Capabilities in Vault\nDESCRIPTION: This example shows an ACL policy that has two path stanzas for `kv/*`. The first stanza has a control group with `controlled_capabilities`, while the second has a control group without that field. This demonstrates how different operations against the same path can have different authorization requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/control-groups.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n\"path \\\"kv/*\\\" {\\n    capabilities = [\\\"create\\\", \\\"update\\\",\\\"delete\\\",\\\"list\\\",\\\"sudo\\\"]\\n    control_group = {\\n        factor \\\"admin\\\" {\\n            controlled_capabilities = [\\\"delete\\\",\\\"list\\\",\\\"sudo\\\"]\\n            identity {\\n                group_names = [\\\"admin\\\"]\\n                approvals = 1\\n            }\\n        }\\n    }\\n}\\npath \\\"kv/*\\\" {\\n    capabilities = [\\\"create\\\"]\\n    control_group = {\\n        factor \\\"superuser\\\" {\\n            identity {\\n                group_names = [\\\"superuser\\\"]\\n                approvals = 2\\n            }\\n        }\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Cloud KMS Seal in Vault HCL\nDESCRIPTION: This snippet demonstrates how to configure the GCP Cloud KMS seal in Vault's configuration file. It specifies the required parameters including credentials, project, region, key ring, and crypto key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/gcpckms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"gcpckms\" {\n  credentials = \"/usr/vault/vault-project-user-creds.json\"\n  project     = \"vault-project\"\n  region      = \"global\"\n  key_ring    = \"vault-keyring\"\n  crypto_key  = \"vault-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Certificate Signing Request for Vault\nDESCRIPTION: Defines a Kubernetes CertificateSigningRequest resource that will be submitted to the Kubernetes API. This YAML configures the request with the appropriate signer name and usage parameters needed for server authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/standalone-tls.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF >${TMPDIR}/csr.yaml\napiVersion: certificates.k8s.io/v1\nkind: CertificateSigningRequest\nmetadata:\n  name: ${CSR_NAME}\nspec:\n  signerName: kubernetes.io/kubelet-serving\n  groups:\n  - system:authenticated\n  request: $(base64 ${TMPDIR}/server.csr | tr -d '\\n')\n  signerName: kubernetes.io/kubelet-serving\n  usages:\n  - digital signature\n  - key encipherment\n  - server auth\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Full Permissions Kubernetes ClusterRole\nDESCRIPTION: YAML configuration for creating a ClusterRole with full permissions to manage tokens, service accounts, bindings, and roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: k8s-full-secrets-abilities\nrules:\n- apiGroups: [\"\"]\n  resources: [\"serviceaccounts\", \"serviceaccounts/token\"]\n  verbs: [\"create\", \"update\", \"delete\"]\n- apiGroups: [\"rbac.authorization.k8s.io\"]\n  resources: [\"rolebindings\", \"clusterrolebindings\"]\n  verbs: [\"create\", \"update\", \"delete\"]\n- apiGroups: [\"rbac.authorization.k8s.io\"]\n  resources: [\"roles\", \"clusterroles\"]\n  verbs: [\"bind\", \"escalate\", \"create\", \"update\", \"delete\"]\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT via API\nDESCRIPTION: API request to authenticate with JWT using cURL. Sends a POST request with the JWT token and role name to the JWT login endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"jwt\": \"your_jwt\", \"role\": \"demo\"}' \\\n    http://127.0.0.1:8200/v1/auth/jwt/login\n```\n\n----------------------------------------\n\nTITLE: Creating Group Alias in Vault for Azure AD Group\nDESCRIPTION: This command creates a group alias in Vault, linking an Azure AD group to a Vault external group using the AD group's object ID, OIDC accessor ID, and Vault external group ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/azuread.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault write identity/group-alias \\\n   name=\"your_ad_group_object_id\" \\\n   mount_accessor=\"vault_oidc_accessor_id\" \\\n   canonical_id=\"vault_external_group_id\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Interface in Go for Vault Plugin v5\nDESCRIPTION: This code snippet demonstrates how to implement the Database interface for a custom Vault database plugin using the v5 interface. It shows a type assertion to ensure the custom database type adheres to the dbplugin.Database interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/custom.mdx#2025-04-14_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nvar _ dbplugin.Database = (*MyDatabase)(nil)\n```\n\n----------------------------------------\n\nTITLE: Enabling Transform Secrets Engine - HashiCorp Vault Command\nDESCRIPTION: This snippet demonstrates how to enable the Transform secrets engine in HashiCorp Vault using the 'vault secrets enable' command. It sets up the secrets engine at the default path or a specified path using the '-path' argument. This is necessary to utilize the Transform features for data protection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable transform\nSuccess! Enabled the transform secrets engine at: transform/\n```\n\n----------------------------------------\n\nTITLE: Defining Password Policy with Minimum Requirements for All Character Types in HCL\nDESCRIPTION: This HCL snippet defines a password policy requiring at least one character from each character set: lowercase, uppercase, numeric, and special characters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyz\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"0123456789\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"\n  min-chars = 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Certificate Signing Request Configuration for Vault TLS\nDESCRIPTION: Generates a CSR configuration file with subject alternative names (SANs) for the Vault service. The configuration includes DNS entries for various Kubernetes service naming patterns and a localhost IP address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/standalone-tls.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF >${TMPDIR}/csr.conf\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n[req_distinguished_name]\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = serverAuth\nsubjectAltName = @alt_names\n[alt_names]\nDNS.1 = *.${SERVICE}\nDNS.2 = *.${SERVICE}.${NAMESPACE}\nDNS.3 = *.${SERVICE}.${NAMESPACE}.svc\nDNS.4 = *.${SERVICE}.${NAMESPACE}.svc.cluster.local\nIP.1 = 127.0.0.1\nEOF\n```\n\n----------------------------------------\n\nTITLE: Creating Default AD FS Role in Vault\nDESCRIPTION: Create a default role for AD FS users in Vault, specifying bound subjects, group attributes, and token policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/adfs.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write <SAML_PLUGIN_PATH>/role/<VAULT_ROLE>  \\\n    bound_subjects=\"<DOMAIN_LIST>\"                  \\\n    bound_subjects_type=\"glob\"                     \\\n    groups_attribute=<GROUP_ATTRIBUTES_REF>         \\\n    bound_attributes=groups=\"<AD_GROUP_LIST>\"       \\\n    token_policies=\"default\"                        \\\n    ttl=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault OIDC Authentication with SecureAuth Provider\nDESCRIPTION: This code configures Vault's OIDC authentication method to work with SecureAuth's identity provider. It explicitly sets the provider to 'secureauth' which enables Vault to properly parse the comma-separated groups claims string into individual groups. Required parameters include client ID, client secret, default role, and discovery URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/secureauth.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/config -<<\"EOH\"\n{\n   \"oidc_client_id\": \"your_client_id\",\n   \"oidc_client_secret\": \"your_client_secret\",\n   \"default_role\": \"your_default_role\",\n   \"oidc_discovery_url\": \"https://idp.sasp.gosecureauth.com/your_secure_auth\",\n   \"provider_config\": {\n      \"provider\": \"secureauth\"\n   }\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Generating Azure Credentials from a Role\nDESCRIPTION: Command to generate Azure service principal credentials using a configured Vault role, returning a client ID and secret for Azure authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read azure/creds/my-role\n\nKey                Value\n---                -----\nlease_id           azure/creds/sp_role/1afd0969-ad23-73e2-f974-962f7ac1c2b4\nlease_duration     60m\nlease_renewable    true\nclient_id          408bf248-dd4e-4be5-919a-7f6207a307ab\nclient_secret      ad06228a-2db9-4e0a-8a5d-e047c7f32594\n```\n\n----------------------------------------\n\nTITLE: Creating Cross-Account Static Role in Vault (Shell)\nDESCRIPTION: This command creates a static role in Vault for managing IAM user credentials across AWS accounts. It specifies the target account role to assume, session name, and rotation period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write aws/static-roles/<role-name> \\\n    username=\"<iam-user-to-manage>\" \\\n    assume_role_arn=\"arn:aws:iam::<account-id>:role/<role-name-in-target-account>\" \\\n    assume_role_session_name=\"<session-name>\" \\\n    external_id=\"<unique-id>\" \\\n    rotation_period=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Importing a New RSA Key into Vault Transit\nDESCRIPTION: This command imports a 2048-bit RSA key as a new key named 'test-key' into the Transit secret engine. It specifies the key type as 'rsa-2048' and reads the key material from a file named 'test-key'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/transit/import.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault transit import transit/keys/test-key @test-key type=rsa-2048\nRetrieving transit wrapping key.\nWrapping source key with ephemeral key.\nEncrypting ephemeral key with transit wrapping key.\nSubmitting wrapped key to Vault transit.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Google Cloud KMS Key\nDESCRIPTION: Command to encrypt plaintext data using a named KMS key. Vault automatically handles base64 encoding. The response includes the ciphertext and key version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/encrypt/my-key plaintext=\"hello world\"\nKey            Value\n---            -----\nciphertext     CiQAuMv0lTiKjrF43Lgr4...\nkey_version    1\n```\n\n----------------------------------------\n\nTITLE: Configure Vault CA for Signing Client Keys\nDESCRIPTION: This snippet illustrates how to configure Vault with a CA for signing client keys. The first example shows how to generate a new signing key, while the second demonstrates how to upload an existing keypair. These steps prepare Vault to issue signed SSH certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ssh-client-signer/config/ca generate_signing_key=true\nKey             Value\n---\\t-----  \npublic_key      ssh-rsa AAAAB3NzaC1yc2EA...\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ssh-client-signer/config/ca \\\n        private_key=\"...\" \\\n        public_key=\"...\"\n```\n\n----------------------------------------\n\nTITLE: Consul Service Registration Example\nDESCRIPTION: Simple example showing how to configure Consul as the service registration provider with a local address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {\n  address = \"127.0.0.1:8500\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Specific Policy in Vault\nDESCRIPTION: Makes a GET request to retrieve the details of a specific policy by name. The request requires an authentication token and specifies the policy name as part of the URL path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policy.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policy/my-policy\n```\n\n----------------------------------------\n\nTITLE: Removing a Key from a KMS Provider\nDESCRIPTION: This command removes a previously distributed key from the specified KMS provider. The key remains in Vault's Key Management Engine and can be redistributed to a KMS provider later if needed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault delete keymgmt/kms/example-kms/key/example-key\n```\n\n----------------------------------------\n\nTITLE: Configuring PKCS11 Seal in Vault (HCL)\nDESCRIPTION: This example shows how to configure a PKCS11 seal type in the Vault configuration file. The specific configuration options would be placed inside the stanza.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"pkcs11\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Starting a Vault Enterprise Instance with Docker\nDESCRIPTION: This shell script pulls and runs a Vault Enterprise Docker container with specific environment variables set, including the Vault license, address, and root token.  It exposes ports 5696 and 8200, adds the IPC_LOCK capability, and starts the Vault server in development mode with a root token and a listening address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker pull hashicorp/vault-enterprise &&\ndocker run --name vault \\\n  -p 5696:5696 \\\n  -p 8200:8200 \\\n  --cap-add=IPC_LOCK \\\n  -e VAULT_LICENSE=$(printenv VAULT_LICENSE) \\\n  -e VAULT_ADDR=http://127.0.0.1:8200 \\\n  -e VAULT_TOKEN=root \\\n  hashicorp/vault-enterprise \\\n  server -dev -dev-root-token-id root -dev-listen-address 0.0.0.0:8200\n```\n\n----------------------------------------\n\nTITLE: Certificate Cross-Signing Process Flow\nDESCRIPTION: This snippet illustrates the process flow of cross-signing certificates involving two certificate signing requests (CSRs) sent to different root authorities. The process results in certificates that can be validated through either trust path. This is commonly used to unify separate trust paths into a single one by cross-signing intermediates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/rotation-primitives.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n        -------------------\n       | generate key pair | -------------> ...\n        -------------------                 ...\n           |            |                   ...\n --------------        --------------       ...\n| generate CSR |      | generate CSR |      ...\n --------------        --------------       ...\n         |                   |              ...\n    -----------         -----------         ...\n   | signed by |       | signed by |        ...\n   | root A    |       | root B    |        ...\n    -----------         -----------         ...\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Auth Role in Vault\nDESCRIPTION: This command creates a role for JWT auth in Vault that can be used by the default service account from the default namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/jwt/role/my-role \\\n   role_type=\"jwt\" \\\n   bound_audiences=\"<AUDIENCE-FROM-PREVIOUS-STEP>\" \\\n   user_claim=\"sub\" \\\n   bound_subject=\"system:serviceaccount:default:default\" \\\n   policies=\"default\" \\\n   ttl=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Secret - Vault KV API - Shell\nDESCRIPTION: This curl command stores or updates a secret at the specified path in the Vault KV secrets engine. It uses the POST method and requires the `X-Vault-Token` for authentication and a JSON payload with key-value pairs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v1.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/my-secret\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Static Role in Vault\nDESCRIPTION: Makes a POST request to the Vault API to create or update a static role definition with configuration data specified in a JSON payload file. Requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/static-roles/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Importing Keys to Transit Secrets Engine in Vault\nDESCRIPTION: This example demonstrates how to import keys into a mount using the Transit BYOK (Bring Your Own Key) mechanism. The command imports an RSA-2048 key from a file named test-key into the transit/keys/test-key path in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/transit/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault transit import transit/keys/test-key @test-key type=rsa-2048\nRetrieving transit wrapping key.\nWrapping source key with ephemeral key.\nEncrypting ephemeral key with transit wrapping key.\nSubmitting wrapped key.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Certificates for Auth Method\nDESCRIPTION: This command configures the 'cert' auth method with a trusted certificate named 'web'. It associates the certificate with a display name, policies, and a TTL.  The actual certificate content is read from the `web-cert.pem` file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cert.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/cert/certs/web \\\n       display_name=web \\\n       policies=web,prod \\\n       certificate=@web-cert.pem \\\n       ttl=3600\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Vault CE Standby Node Health Check\nDESCRIPTION: This JSON snippet demonstrates the response structure for a health check on a standby node in Vault Community Edition. It includes additional fields related to standby status and replication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/health.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clock_skew_ms\": 0,\n  \"cluster_id\": \"78d0e173-090f-feae-f245-caa8f39287f6\",\n  \"cluster_name\": \"vault-cluster-0f6e3348\",\n  \"echo_duration_ms\": 1,\n  \"enterprise\": false,\n  \"ha_connection_healthy\": true,\n  \"initialized\": true,\n  \"last_request_forwarding_heartbeat_ms\": 815,\n  \"performance_standby\": false,\n  \"removed_from_cluster\": false,\n  \"replication_dr_mode\": \"disabled\",\n  \"replication_performance_mode\": \"disabled\",\n  \"replication_primary_canary_age_ms\": 0,\n  \"sealed\": false,\n  \"server_time_utc\": 1732544415,\n  \"standby\": true,\n  \"version\": \"1.19.0-beta1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: This command enables the database secrets engine in Vault at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\n```\n\n----------------------------------------\n\nTITLE: Custom Path Configuration for Etcd Storage\nDESCRIPTION: Configuration example demonstrating how to store Vault data in a custom path within Etcd.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/etcd.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"etcd\" {\n  path = \"my-vault-data/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Secrets Engine via CLI in Vault\nDESCRIPTION: This command enables the AWS secrets engine in Vault, which allows for the dynamic generation of AWS access credentials. When executed successfully, the engine will be mounted at the default path 'aws/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable aws\nSuccess! Enabled the aws secrets engine at: aws/\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Response Wrapping TTLs in Vault Policy (HCL)\nDESCRIPTION: This snippet demonstrates how to set required response wrapping TTLs in a Vault policy. It makes response wrapping mandatory for the path and sets minimum and maximum TTLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\npath \"auth/approle/role/my-role/secret-id\" {\n    capabilities = [\"create\", \"update\"]\n    min_wrapping_ttl = \"1s\"\n    max_wrapping_ttl = \"90s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Kubernetes StatefulSet\nDESCRIPTION: This YAML snippet shows how to add custom annotations to a Kubernetes StatefulSet using a Helm chart configuration for Vault. It enables administrators to pass key-value pairs as annotations that can be useful for identification and management purposes within Kubernetes. The YAML format allows for flexible configuration, either directly as mappings or as multi-line strings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  kubernetes.io/my-statefulset: foobar\n# or\nannotations: |\n  kubernetes.io/my-statefulset: foobar\n```\n\n----------------------------------------\n\nTITLE: Writing a secret using Vault API with curl\nDESCRIPTION: Shows how to write a secret to Vault using a POST request with JSON data in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -H \"X-Vault-Token: f3b09679-3001-009d-2b80-9c306ab81aa6\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"data\":{\"value\":\"bar\"}}' \\\n    http://127.0.0.1:8200/v1/secret/baz\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Auth Role API Request\nDESCRIPTION: Shell command to create a role in the Kubernetes auth method using curl with a JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Creating a SecretID via API in Vault\nDESCRIPTION: This snippet shows how to create a new SecretID for an AppRole using the Vault API. The API call is made to the `/auth/approle/role/my-role/secret-id` endpoint using the POST method.  It requires a valid Vault token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n     http://127.0.0.1:8200/v1/auth/approle/role/my-role/secret-id\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Namespace Resource in Terraform\nDESCRIPTION: Demonstrates how to define a Vault namespace resource using Terraform. This snippet shows the basic structure for creating a namespace resource.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_namespace\" \"<TERRAFORM_RESOURCE_NAME>\" {\n  path = \"<VAULT_NAMESPACE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic AWS Credentials for DynamoDB\nDESCRIPTION: This snippet shows how to read dynamic AWS credentials from Vault using the `aws-dynamodb-read` role. The output includes the `access_key`, `secret_key`, and lease information, which can be used to authenticate with AWS services.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read aws/creds/aws-dynamodb-read\nKey                Value\n---\t                -----\nlease_id           aws/creds/my-role/kbSnl9WSDzOXQerd8GiVh75N.DACNl\nlease_duration     1h\nlease_renewable    true\naccess_key         AKALMNOP123456\nsecret_key         xY4XhS3AsM3s+R33tCaybsT2XI6BVL+vF+khbbYD\nsecurity_token     <nil>\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT/OIDC Auth Method in Vault\nDESCRIPTION: JSON payload for configuring the JWT/OIDC authentication method in Vault. This example sets up an Auth0 provider by specifying the OIDC discovery URL and bound issuer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"oidc_discovery_url\": \"https://myco.auth0.com/\",\n  \"bound_issuer\": \"https://myco.auth0.com/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HCP Terraform Credentials in Vault (Shell)\nDESCRIPTION: This command generates new HCP Terraform credentials by reading from the /creds endpoint with the specified role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read terraform/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Plugin Secrets Engine in Vault\nDESCRIPTION: This command enables a custom plugin secrets engine at a specified path 'my-secrets' in Vault, after it has been registered in the plugin registry.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/enable.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=my-secrets my-plugin\n```\n\n----------------------------------------\n\nTITLE: Configure KV Engine Payload\nDESCRIPTION: This JSON payload is used to configure the KV engine settings. It sets the maximum number of versions to keep per key, whether the cas parameter is required on all write requests, and the length of time before a version is deleted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_versions\": 5,\n  \"cas_required\": false,\n  \"delete_version_after\": \"3h25m19s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the Key Management Secrets Engine in Vault\nDESCRIPTION: This command enables the key management secrets engine at the default path. The engine allows for distribution and lifecycle management of cryptographic keys across various KMS providers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable keymgmt\nSuccess! Enabled the keymgmt secrets engine at: keymgmt/\n```\n\n----------------------------------------\n\nTITLE: Issuing a Certificate with PKI in Vault - Shell\nDESCRIPTION: This snippet demonstrates how to issue a new certificate by writing to the pki backend's issue endpoint and specifying the role name. The response includes the certificate, issuing CA, and the associated private key. Users should ensure they have the necessary permissions in Vault to execute this command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-root-ca.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki/issue/example-dot-com \\\n    common_name=blah.example.com\nKey                 Value\n---                 -----\ncertificate         -----BEGIN CERTIFICATE-----\nMIIDvzCCAqegAwIBAgIUWQuvpMpA2ym36EoiYyf3Os5UeIowDQYJKoZIhvcNAQEL\nBQAwFjEUMBIGA1UEAxMLbXl2YXVsdC5jb20wHhcNMTcxMjA4MTkyNDA1WhcNMTcx\nMjExMTkyNDM1WjAbMRkwFwYDVQQDExbibGFoLmV4YW1wbGUuY29tMIIBIjANBgkq\nhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1CU93lVgcLXGPxRGTRT3GM5wqytCo7Z6\ngjfoHyKoPCAqjRdjsYgp1FMvumNQKjUat5KTtr2fypbOnAURDCh4bN/omcj7eAqt\nldJ8mf8CtKUaaJ1kp3R6RRFY/u96BnmKUG8G7oDeEDsKlXuEuRcNbGlGF8DaM/O1\nHFa57cM/8yFB26Nj5wBoG5Om6ee5+W+14Qee8AB6OJbsf883Z+zvhJTaB0QM4ZUq\nuAMoMVEutWhdI5EFm5OjtMeMu2U+iJl2XqqgQ/JmLRjRdMn1qd9TzTaVSnjoZ97s\njHK444Px1m45einLqKUJ+Ia2ljXYkkItJj9Ut6ZSAP9fHlAtX84W3QIDAQABo4H/\nMIH8MA4GA1UdDwEB/wQEAwIDqDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUH\nAwIwHQYDVR0OBBYEFH/YdObW6T94U0zuU5hBfTfU5pt1MB8GA1UdIwQYMBaAFECK\ndYM4gDbMkxRZA2wR4f/yNhQUMDsGCCsGAQUFBwEBBC8wLTArBggrBgEFBQcwAoYf\naHR0cDovLzEyNy4wLjAuMTo4MjAwL3YxL3BraS9jYTAbBgNVHREEFDASghBibGFo\nLmV4YW1wbGUuY29tMDEGA1UdHwQqMCgwJqAkoCKGIGh0dHA6Ly8xMjcuMC4wLjE6\nODIwMC92MS9wa2kvY3JsMA0GCSqGSIb3DQEBCwUAA4IBAQCDXbHV68VayweB2tkb\nKDdCaveaTULjCeJUnm9UT/6C0YqC/RxTAjdKFrilK49elOA3rAtEL6dmsDP2yH25\nptqi2iU+y99HhZgu0zkS/p8elYN3+l+0O7pOxayYXBkFf5t0TlEWSTb7cW+Etz/c\nMvSqx6vVvspSjB0PsA3eBq0caZnUJv2u/TEiUe7PPY0UmrZxp/R/P/kE54yI3nWN\n4Cwto6yUwScOPbVR1d3hE2KU2toiVkEoOk17UyXWTokbG8rG0KLj99zu7my+Fyre\nsjV5nWGDSMZODEsGxHOC+JgNAC1z3n14/InFNOsHICnA5AnJzQdSQQjvcZHN2NyW\n+t4f\n-----END CERTIFICATE-----\nissuing_ca          -----BEGIN CERTIFICATE-----\nMIIDNTCCAh2gAwIBAgIUJqrw/9EDZbp4DExaLjh0vSAHyBgwDQYJKoZIhvcNAQEL\nBQAwFjEUMBIGA1UEAxMLbXl2YXVsdC5jb20wHhcNMTcxMjA4MTkyMzIwWhcNMjcx\nMjA2MTkyMzQ5WjAWMRQwEgYDVQQDEwtteXZhdWx0LmNvbTCCASIwDQYJKoZIhvcN\nAQEBBQADggEPADCCAQoCggEBAKY/vJ6sRFym+yFYUneoVtDmOCaDKAQiGzQw0IXL\nwgMBBb82iKpYj5aQjXZGIl+VkVnCi+M2AQ/iYXWZf1kTAdle4A6OC4+VefSIa2b4\neB7R8aiGTce62jB95+s5/YgrfIqk6igfpCSXYLE8ubNDA2/+cqvjhku1UzlvKBX2\nhIlgWkKlrsnybHN+B/3Usw9Km/87rzoDR3OMxLV55YPHiq6+olIfSSwKAPjH8LZm\nuM1ITLG3WQUl8ARF17Dj+wOKqbUG38PduVwKL5+qPksrvNwlmCP7Kmjncc6xnYp6\n5lfr7V4DC/UezrJYCIb0g/SvtxoN1OuqmmvSTKiEE7hVOAcCAwEAAaN7MHkwDgYD\nVR0PAQH/BAQDAgEGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFECKdYM4gDbM\nkxRZA2wR4f/yNhQUMB8GA1UdIwQYMBaAFECKdYM4gDbMkxRZA2wR4f/yNhQUMBYG\nA1UdEQQPMA2CC215dmF1bHQuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCCJKZPcjjn\n7mvD2+sr6lx4DW/vJwVSW8eTuLtOLNu6/aFhcgTY/OOB8q4n6iHuLrEt8/RV7RJI\nobRx74SfK9BcOLt4+DHGnFXqu2FNVnhDMOKarj41yGyXlJaQRUPYf6WJJLF+ZphN\nnNsZqHJHBfZtpJpE5Vywx3pah08B5yZHk1ItRPEz7EY3uwBI/CJoBb+P5Ahk6krc\nLZ62kFwstkVuFp43o3K7cRNexCIsZGx2tsyZ0nyqDUFsBr66xwUfn3C+/1CDc9YL\nzjq+8nI2ooIrj4ZKZCOm2fKd1KeGN/CZD7Ob6uNhXrd0Tjwv00a7nffvYQkl/1V5\nBT55jevSPVVu\n-----END CERTIFICATE-----\nprivate_key         -----BEGIN RSA PRIVATE KEY-----\nMIIEpAIBAAKCAQEA1CU93lVgcLXGPxRGTRT3GM5wqytCo7Z6gjfoHyKoPCAqjRdj\nsYgp1FMvumNQKjUat5KTtr2fypbOnAURDCh4bN/omcj7eAqtldJ8mf8CtKUaaJ1k\np3R6RRFY/u96BnmKUG8G7oDeEDsKlXuEuRcNbGlGF8DaM/O1HFa57cM/8yFB26Nj\n5wBoG5Om6ee5+W+14Qee8AB6OJbsf883Z+zvhJTaB0QM4ZUquAMoMVEutWhdI5EF\nm5OjtMeMu2U+iJl2XqqgQ/JmLRjRdMn1qd9TzTaVSnjoZ97sjHK444Px1m45einL\nqKUJ+Ia2ljXYkkItJj9Ut6ZSAP9fHlAtX84W3QIDAQABAoIBAQCf5YIANfF+gkNt\n/+YM6yRi+hZJrU2I/1zPETxPW1vaFZR8y4hEoxCEDD8JCRm+9k+w1TWoorvxgkEv\nr1HuDALYbNtwLd/71nCHYCKyH1b2uQpyl07qOAyASlb9r5oVjz4E6eobkd3N9fJA\nQN0EdK+VarN968mLJsD3Hxb8chGdObBCQ+LO+zdqQLaz+JwhfnK98rm6huQtYK3w\nccd0OwoVmtZz2eJl11TJkB9fi4WqJyxl4wST7QC80LstB1deR78oDmN5WUKU12+G\n4Mrgc1hRwUSm18HTTgAhaA4A3rjPyirBohb5Sf+jJxusnnay7tvWeMnIiRI9mqCE\ndr3tLrcxAoGBAPL+jHVUF6sxBqm6RTe8Ewg/8RrGmd69oB71QlVUrLYyC96E2s56\n19dcyt5U2z+F0u9wlwR1rMb2BJIXbxlNk+i87IHmpOjCMS38SPZYWLHKj02eGfvA\nMjKKqEjNY/md9eVAVZIWSEy63c4UcBK1qUH3/5PNlyjk53gCOI/4OXX/AoGBAN+A\nAlyd6A/pyHWq8WMyAlV18LnzX8XktJ07xrNmjbPGD5sEHp+Q9V33NitOZpu3bQL+\ngCNmcrodrbr9LBV83bkAOVJrf82SPaBesV+ATY7ZiWpqvHTmcoS7nglM2XTr+uWR\nY9JGdpCE9U5QwTc6qfcn7Eqj7yNvvHMrT+1SHwsjAoGBALQyQEbhzYuOF7rV/26N\nci+z+0A39vNO++b5Se+tk0apZlPlgb2NK3LxxR+LHevFed9GRzdvbGk/F7Se3CyP\ncxgswdazC6fwGjhX1mOYsG1oIU0V6X7f0FnaqWETrwf1M9yGEO78xzDfgozIazP0\ns0fQeR9KXsZcuaotO3TIRxRRAoGAMFIDsLRvDKm1rkL0B0czm/hwwDMu/KDyr5/R\n2M2OS1TB4PjmCgeUFOmyq3A63OWuStxtJboribOK8Qd1dXvWj/3NZtVY/z/j1P1E\nCeq6We0MOZa0Ae4kyi+p/kbAKPgv+VwSoc6cKailRHZPH7quLoJSIt0IgbfRnXC6\nygtcLNMCgYBwiPw2mTYvXDrAcO17NhK/r7IL7BEdFdx/w8vNJQp+Ub4OO3Iw6ARI\nvXxu6A+Qp50jra3UUtnI+hIirMS+XEeWqJghK1js3ZR6wA/ZkYZw5X1RYuPexb/4\n6befxmnEuGSbsgvGqYYTf5Z0vgsw4tAHfNS7TqSulYH06CjeG1F8DQ==\n-----END RSA PRIVATE KEY-----\nprivate_key_type    rsa\nserial_number       59:0b:af:a4:ca:40:db:29:b7:e8:4a:22:63:27:f7:3a:ce:54:78:8a\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Vault TCP Listener\nDESCRIPTION: Example configuration for enabling a TLS listener in Vault with certificate and key file specifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_cert_file = \"/etc/certs/vault.crt\"\n  tls_key_file  = \"/etc/certs/vault.key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth with OIDC Discovery URL and Client Credentials\nDESCRIPTION: Command to configure the JWT auth method with OIDC discovery URL, client ID, and client secret. Sets up the default role for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/jwt/config \\\n    oidc_discovery_url=\"https://myco.auth0.com/\" \\\n    oidc_client_id=\"m5i8bj3iofytj\" \\\n    oidc_client_secret=\"f4ubv72nfiu23hnsj\" \\\n    default_role=\"demo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Service Registration with Raft Storage\nDESCRIPTION: Example showing how to configure Vault to use Consul for service registration while using Raft for storage backend. Demonstrates the combined usage of service_registration and storage stanzas.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {\n  address = \"127.0.0.1:8500\"\n}\nstorage \"raft\" {\n  path = \"/path/to/raft/data\"\n  node_id = \"raft_node_1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LDAP Auth Method in Vault\nDESCRIPTION: This command enables the LDAP authentication method in Vault, which is required before configuring the method or authenticating users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth enable ldap\n```\n\n----------------------------------------\n\nTITLE: Configuring TOTP MFA Method in Vault\nDESCRIPTION: This snippet shows how to configure a TOTP MFA method in Vault. It sets parameters like the issuer, period, key size, algorithm, and number of digits. Consider the algorithms supported by your authenticator app, such as Google Authenticator, when setting the algorithm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write sys/mfa/method/totp/my_totp \\\n        issuer=Vault \\\n        period=30 \\\n        key_size=30 \\\n        algorithm=SHA256 \\\n        digits=6\n```\n\n----------------------------------------\n\nTITLE: Retrieving Wrapped SecretID Using Vault CLI\nDESCRIPTION: This shell command demonstrates how to retrieve a wrapped SecretID for a specific AppRole using the Vault CLI, with a wrap TTL of 120 seconds.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -wrap-ttl=120s -f auth/approle/role/my-role/secret-id\n```\n\n----------------------------------------\n\nTITLE: Distributing a Key to a Configured KMS Provider\nDESCRIPTION: This command distributes a copy of the previously created key to the configured KMS provider. It specifies the key's purpose (encrypt/decrypt) and protection level (HSM) within the target KMS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write keymgmt/kms/example-kms/key/example-key \\\n    purpose=\"encrypt,decrypt\" \\\n    protection=\"hsm\"\n```\n\n----------------------------------------\n\nTITLE: Reading Static PostgreSQL Credentials from Vault\nDESCRIPTION: Command to read static credentials for a PostgreSQL user. Returns the username, password, and metadata about rotation period and last rotation time.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/static-creds/my-role\nKey                    Value\n---                    -----\nlast_vault_rotation    2024-09-11T14:15:13.764783-07:00\npassword               XZY42BVc-UO5bMsbgxrW\nrotation_period        1h\nttl                    59m55s\nusername               staticuser\n```\n\n----------------------------------------\n\nTITLE: OIDC Authorization URL Response\nDESCRIPTION: Sample response containing the OIDC authorization URL\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"c701169c-64f8-26cc-0315-078e8c3ce897\",\n  \"data\": {\n    \"auth_url\": \"https://myco.auth0.com/authorize?client_id=r3qXcK2bezU3Sbmh0K16fatW6&nonce=851b69a9bfa5a6a5668111314414e3687891a599&redirect_uri=https%3A%2F%2Fvault.myco.com3A8200%2Fui%2Fvault%2Fauth%2Fjwt%2Foidc%2Fcallback&response_type=code&scope=openid+email+profile&state=1011e726d24960e09cfca2e04b36b38593cb6a22\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: OIDC Login with Vault CLI - Shell Session\nDESCRIPTION: Demonstrates the procedure for logging into Vault using the OIDC method via the command-line interface. It includes configuring the CLI to interact with the OIDC provider and describes parameters that can customize the callback listener. Required dependencies include access to the Vault CLI and an OIDC provider. Key parameters are the path and role associated with the login method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault login -method=oidc port=8400 role=test\n\nComplete the login via your OIDC provider. Launching browser to:\n\n    https://myco.auth0.com/authorize?redirect_uri=http%3A%2F%2Flocalhost%3A8400%2Foidc%2Fcallback&client_id=r3qXc2bix9eF...\n```\n\n----------------------------------------\n\nTITLE: Configuring SecretProviderClass for Environment Variable Dynamic Database Credentials in YAML\nDESCRIPTION: This YAML snippet defines a SecretProviderClass that retrieves dynamic database credentials from Vault and syncs them to Kubernetes secrets. It specifies secretObjects for creating Kubernetes secrets and defines objects for username and password retrieval.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/examples.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets-store.csi.x-k8s.io/v1alpha1\nkind: SecretProviderClass\nmetadata:\n  name: vault-db-creds\nspec:\n  provider: vault\n  secretObjects:\n    - secretName: vault-db-creds-secret\n      type: Opaque\n      data:\n        - objectName: dbUsername # References dbUsername below\n          key: username # Key within k8s secret for this value\n        - objectName: dbPassword\n          key: password\n  parameters:\n    roleName: 'app'\n    objects: |\n      - objectName: \"dbUsername\"\n        secretPath: \"database/creds/db-app\"\n        secretKey: \"username\"\n      - objectName: \"dbPassword\"\n        secretPath: \"database/creds/db-app\"\n        secretKey: \"password\"\n```\n\n----------------------------------------\n\nTITLE: Granting CREATEROLE Privilege for GCP Service Account Usage\nDESCRIPTION: SQL statement to grant CREATEROLE privilege to a database user, required by Google Cloud service accounts for minimum functionality with Vault when using IAM authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable service account to create roles within DB\nALTER USER \"<YOUR DB USERNAME>\" WITH CREATEROLE;\n```\n\n----------------------------------------\n\nTITLE: Making GET Request to Vault Utilization Report Endpoint\nDESCRIPTION: Example of how to make a GET request to the /sys/utilization-report endpoint using curl. Requires a valid Vault token passed in the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/utilization-report.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/utilization-report\n```\n\n----------------------------------------\n\nTITLE: Installing Vault and Vault Agent Injector with Helm\nDESCRIPTION: This command installs a new instance of Vault and enables the Vault Agent Injector using the Hashicorp Helm chart. It sets the 'injector.enabled' value to 'true' to enable the injection feature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/installation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nhelm install vault hashicorp/vault --set=\"injector.enabled=true\"\n```\n\n----------------------------------------\n\nTITLE: Vault Operator Unseal Migration Command\nDESCRIPTION: Command to perform seal migration using the -migrate flag with the vault operator unseal command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/seal.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator unseal -migrate\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request to Configure Database Connection\nDESCRIPTION: This cURL command configures a database connection in Vault by sending a POST request to the /database/config endpoint. The request requires a Vault token for authentication and uses a JSON payload to specify configuration details. Ensure the payload is properly formatted and saved before usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/mysql\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Credentials via API\nDESCRIPTION: Sets up AWS credentials in Vault for making API calls using HTTP API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"X-Vault-Token:123\" \"http://127.0.0.1:8200/v1/auth/aws/config/client\" -d '{\"access_key\":\"VKIAJBRHKH6EVTTNXDHA\", \"secret_key\":\"vCtSM8ZUEQ3mOFVlYPBQkf2sO6F/W7a5TVzrl3Oj\"}'\n```\n\n----------------------------------------\n\nTITLE: Displaying Vault Version Using 'version' Command\nDESCRIPTION: This snippet demonstrates how to use the 'version' command to display the current version of Vault. It shows the basic output format of the command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/version.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault version\nVault v1.2.3\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: Command to enable the database secrets engine in Vault at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault secrets enable database\n```\n\n----------------------------------------\n\nTITLE: Example Bound Claims with Email List for JWT Auth\nDESCRIPTION: JSON configuration showing how to limit JWT authentication to specific email addresses using bound claims with a list of allowed values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": [\"fred@example.com\", \"julie@example.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Agent Injector Certificate Configuration\nDESCRIPTION: YAML configuration for generating a certificate for the Vault Agent Injector, specifying DNS names and renewal parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: injector-certificate\nspec:\n  secretName: injector-tls\n  duration: 24h\n  renewBefore: 144m  # roughly 10% of 24h\n  dnsNames:\n  - vault-agent-injector-svc\n  - vault-agent-injector-svc.vault\n  - vault-agent-injector-svc.vault.svc\n  issuerRef:\n    name: injector-ca-issuer\n  commonName: Agent Inject Cert\n```\n\n----------------------------------------\n\nTITLE: IAM Permissions Policy for Vault AWS Operations\nDESCRIPTION: Define an AWS IAM policy granting Vault the necessary permissions to manage dynamic IAM users and perform credential operations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:AttachUserPolicy\",\n        \"iam:CreateAccessKey\",\n        \"iam:CreateUser\"\n      ],\n      \"Resource\": [\"arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:user/vault-*\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Database Connection\nDESCRIPTION: Shell command to configure Vault with Snowflake plugin and connection details including credentials and connection URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/snowflake.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-snowflake-database \\\n    plugin_name=snowflake-database-plugin \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"{{username}}:{{password}}@ecxxxx.west-us-1.azure/db_name\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating via API - HashiCorp Vault\nDESCRIPTION: This snippet illustrates how to use a cURL command to authenticate to Vault using the Azure auth method by sending a POST request with the role and JWT in JSON format. The expected response is also included, which contains the client token for future API calls.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"role\": \"dev-role\", \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"}' \\\n    https://127.0.0.1:8200/v1/auth/azure/login\n```\n\n----------------------------------------\n\nTITLE: Deleting a Vault Role Using cURL\nDESCRIPTION: This shell-session snippet demonstrates how to send a DELETE request with cURL to remove a GCP role from Vault. It requires the role name and a valid Vault token (`X-Vault-Token`).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/gcp/role/my-role\n```\n\n----------------------------------------\n\nTITLE: Default Vault Password Policy Configuration in HCL\nDESCRIPTION: This snippet shows the default password policy shipped with Vault, requiring 20 characters with at least one uppercase, lowercase, number, and special character.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nlength = 20\n\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyz\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"0123456789\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"-\"\n  min-chars = 1\n}\n```\n\n----------------------------------------\n\nTITLE: CLI Command to Enable Versioning in kv Plugin\nDESCRIPTION: This shell command is used to upgrade a key/value plugin from version 1 to version 2 using the CLI. The command modifies the specified kv mount path to enable versioning, which is a prerequisite for using kv v2's features.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/upgrade.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv enable-versioning <kv_v1_mount_path>\n\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv enable-versioning shared/\nSuccess! Tuned the secrets engine at: shared/\n\n```\n\n----------------------------------------\n\nTITLE: Saving Random String to KV v2 via CLI\nDESCRIPTION: This shell command uses the Vault CLI to save a random string generated by a password policy to the KV v2 plugin.  It uses `vault kv put` along with `vault read` to generate a random password based on a pre-defined policy and write it to the specified secret path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/random-string.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault kv put                                    \\\n  -mount <mount_path>                             \\\n  <secret_path>                                   \\\n  <key_name>=$(                                   \\\n    vault read -field password                    \\\n    sys/policies/password/<policy_name>/generate  \\\n  )\"\n```\n\n----------------------------------------\n\nTITLE: Create/Update Secret Payload\nDESCRIPTION: This JSON payload is used to create or update a secret. It includes optional settings like 'cas' for check-and-set operations and the 'data' map containing the secret's contents.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"options\": {\n    \"cas\": 0\n  },\n  \"data\": {\n    \"foo\": \"bar\",\n    \"zip\": \"zap\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterRole with Namespace Label Permissions\nDESCRIPTION: YAML configuration for creating a ClusterRole with additional permissions to read namespace labels.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: k8s-full-secrets-abilities-with-labels\nrules:\n- apiGroups: [\"\"]\n  resources: [\"namespaces\"]\n  verbs: [\"get\"]\n- apiGroups: [\"\"]\n  resources: [\"serviceaccounts\", \"serviceaccounts/token\"]\n  verbs: [\"create\", \"update\", \"delete\"]\n- apiGroups: [\"rbac.authorization.k8s.io\"]\n  resources: [\"rolebindings\", \"clusterrolebindings\"]\n  verbs: [\"create\", \"update\", \"delete\"]\n- apiGroups: [\"rbac.authorization.k8s.io\"]\n  resources: [\"roles\", \"clusterroles\"]\n  verbs: [\"bind\", \"escalate\", \"create\", \"update\", \"delete\"]\n```\n\n----------------------------------------\n\nTITLE: Example of KV Destroy Command\nDESCRIPTION: Example showing how to destroy versions 2 and 3 of a secret at path dev/square-api in the 'shared' mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/destroy-data.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault kv destroy -mount shared -versions 2,3 dev/square-api\n```\n\n----------------------------------------\n\nTITLE: Basic CockroachDB Storage Configuration in HCL\nDESCRIPTION: Basic configuration for connecting Vault to CockroachDB storage backend using a connection URL with username and password authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/cockroachdb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"cockroachdb\" {\n  connection_url = \"postgres://user123:secret123!@localhost:5432/vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AppRole Authentication Method - Shell\nDESCRIPTION: This snippet illustrates how to enable the AppRole authentication method for machine-based clients in Vault, which is suitable for automated access management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable approle\n```\n\n----------------------------------------\n\nTITLE: Configuring CRL and Issuing Certificates URLs using Vault CLI\nDESCRIPTION: Update the CRL and issuing certificates URLs for the PKI secrets engine. Dependencies include the PKI engine being enabled and configured. Adjust URL endpoints to suit your network setup and update these settings as necessary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/setup.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write pki/config/urls \\\n    issuing_certificates=\"http://127.0.0.1:8200/v1/pki/ca\" \\\n    crl_distribution_points=\"http://127.0.0.1:8200/v1/pki/crl\"\nSuccess! Data written to: pki/config/urls\n```\n\n----------------------------------------\n\nTITLE: Certificate Type Configuration Parameters\nDESCRIPTION: Parameters defining the fundamental characteristics of certificate generation, including type, key management, and naming conventions\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\ntype: string\nissuer_name: string\nkey_name: string\nkey_ref: string\n```\n\n----------------------------------------\n\nTITLE: List All Database Connections with cURL\nDESCRIPTION: This cURL command lists all configured database connections in Vault by issuing a LIST request to the /database/config endpoint. Only connection names are returned, not detailed settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/database/config\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH Secrets Engine with Custom Path in Vault\nDESCRIPTION: This command enables the SSH secrets engine at a custom path 'ssh-prod/' in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/enable.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=ssh-prod ssh\n```\n\n----------------------------------------\n\nTITLE: Authenticating with LDAP via CLI in Vault\nDESCRIPTION: This snippet demonstrates how to authenticate to Vault using LDAP credentials via the command line interface. It shows the login command with a username parameter and prompts for a password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=ldap username=mitchellh\nPassword (will be hidden):\nSuccessfully authenticated! The policies that are associated\nwith this token are listed below:\n\nadmins\n```\n\n----------------------------------------\n\nTITLE: Rotating Vault Encryption Key Using operator rotate\nDESCRIPTION: Demonstrates how to rotate Vault's underlying encryption key. This command updates the encryption key used for securing data, showing the new key term and installation time.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator rotate\nSuccess! Rotated key\n\nKey Term        2\nInstall Time    01 Jan 07 12:30 UTC\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultDynamicSecret with Shared Transformation\nDESCRIPTION: YAML configuration for a VaultDynamicSecret that references a SecretTransformation resource for shared transformation rules. It demonstrates how to apply shared templates and filters to the destination secret data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/secret-transformation.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  namespace: example-ns\n  name: example-vds\n  annotations:\n    myapp.config/postgres-host: postgres-postgresql.postgres.svc.cluster.local:5432\nspec:\n  destination:\n    create: true\n    name: app-secret\n    transformation:\n      transformationRefs:\n        - name: vso-templates\n  path: creds/dev-postgres\n```\n\n----------------------------------------\n\nTITLE: Removing Key from KMS Provider - cURL Example\nDESCRIPTION: Sample cURL command for removing a named key from a KMS provider using the DELETE method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/keymgmt/kms/example-kms/key/example-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Volumes\nDESCRIPTION: Shows how to mount additional volumes to Vault servers, useful for adding configuration, certificates, or other external data\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nextraVolumes:\n  - type: 'secret'\n    name: 'vault-certs'\n    path: '/etc/pki'\n```\n\n----------------------------------------\n\nTITLE: Create/Update Secret Request\nDESCRIPTION: This curl command sends a POST request to create or update a secret. It includes the Vault token in the header and the secret data in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/data/my-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Secrets Engine Access (CLI)\nDESCRIPTION: Vault CLI command to configure the Azure secrets engine with the specified parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write azure/config \\\n    subscription_id=\"94ca80...\" \\\n    tenant_id=\"d0ac7e...\",\n    client_id=\"e607c4...\",\n    client_secret=\"9a6346...\",\n    environment=\"AzureGermanCloud\",\n```\n\n----------------------------------------\n\nTITLE: Reading Consul Credentials\nDESCRIPTION: Command to generate new Consul credentials from a configured role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvault read consul/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Listing Managed Keys via HTTP API\nDESCRIPTION: Lists all the Managed Keys of a specified type within a namespace. This example shows how to list PKCS#11 keys using curl. The response returns an array of key names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request LIST \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/managed-keys/pkcs11\n```\n\n----------------------------------------\n\nTITLE: Specifying Security Context for Kubernetes Pods\nDESCRIPTION: This YAML snippet configures the security context for Kubernetes pods that run the Vault server. When `global.openshift` is set to false, it specifies attributes like non-root execution, group and user IDs, and filesystem group for increased security. The settings help ensure that the pods adhere to best practices regarding container security and resource ownership. The snippet is particularly useful in non-OpenShift environments, as indicated by conditional defaults.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\nrunAsNonRoot: true\nrunAsGroup: {{ .Values.server.gid | default 1000 }}\nrunAsUser: {{ .Values.server.uid | default 100 }}\nfsGroup: {{ .Values.server.gid | default 1000 }}\n```\n\n----------------------------------------\n\nTITLE: Writing GitHub Destination Configuration to Vault\nDESCRIPTION: This snippet configures a GitHub destination in Vault using the `vault write` command.  It specifies the `installation_id`, `repository_owner`, `repository_name`, and `app_name` to establish the connection with the GitHub repository. This destination is then used to sync secrets to that specific repository.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write sys/sync/destinations/gh/<DESTINATION_NAME> \\\ninstallation_id=<INSTALLATION_ID>                         \\\nrepository_owner=<GITHUB_USER>                            \\\nrepository_name=<MY_REPO_NAME>                            \\\napp_name=<APP_NAME>\n```\n\n----------------------------------------\n\nTITLE: Response from Secure Key Export Operation\nDESCRIPTION: Example JSON response from a secure key export operation, containing the encrypted key material that can be safely transported to another Vault instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"foo\",\n    \"keys\": {\n      \"1\": \"H/0T+CKQ8I82KJWpPk ... additional response elided ...\",\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Recovery Token Generation Progress in Vault\nDESCRIPTION: This snippet demonstrates how to request the current progress of a recovery token generation attempt using a GET request to the /sys/generate-recovery-token/attempt endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/generate-recovery-token/attempt\n```\n\n----------------------------------------\n\nTITLE: Encode Data Sample Request\nDESCRIPTION: cURL command to encode data using POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_53\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/encode/example-role\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Role for Couchbase\nDESCRIPTION: Command to create a dynamic role for generating Couchbase credentials with specific permissions and TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write database/roles/my-dynamic-role \\\n    db_name=\"my-couchbase-database\" \\\n    creation_statements='{\"Roles\": [{\"role\":\"ro_admin\"}]}' \\\n    default_ttl=\"5m\" \\\n    max_ttl=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Role in Vault\nDESCRIPTION: HTTP DELETE request to remove a Kubernetes authentication role from Vault server running locally\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vault using AppRole and Reading Secrets in Go\nDESCRIPTION: Example demonstrating how to authenticate with Vault using AppRole auth method and read secrets from a KV-v2 store. The code shows token unwrapping, authentication, and secret retrieval using the Vault Go client.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n    ...snip...\n    vault \"github.com/hashicorp/vault/api\"\n)\n\n// Fetches a key-value secret (kv-v2) after authenticating via AppRole\nfunc getSecretWithAppRole() (string, error) {\n    config := vault.DefaultConfig()\n\n    client := vault.NewClient(config)\n    wrappingToken := ioutil.ReadFile(\"path/to/wrapping-token\")\n    unwrappedToken := client.Logical().Unwrap(strings.TrimSuffix(string(wrappingToken), \"\\n\"))\n\n    secretID := unwrappedToken.Data[\"secret_id\"]\n    roleID := os.Getenv(\"APPROLE_ROLE_ID\")\n\n    params := map[string]interface{}{\n        \"role_id\":   roleID,\n        \"secret_id\": secretID,\n    }\n    resp := client.Logical().Write(\"auth/approle/login\", params)\n    client.SetToken(resp.Auth.ClientToken)\n\n    secret, err := client.Logical().Read(\"kv-v2/data/creds\")\n    if err != nil {\n        return \"\", fmt.Errorf(\"unable to read secret: %w\", err)\n    }\n\n    data := secret.Data[\"data\"].(map[string]interface{})\n\n    ...snip...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Auth Role Parameters\nDESCRIPTION: Sample JSON payload demonstrating the configuration of an AWS authentication role in Vault. Includes AMI binding, instance ID constraints, and various security policy settings with TTL configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bound_ami_id\": [\"ami-fce36987\"],\n  \"bound_ec2_instance_id\": [\"i-12345678901234567\"],\n  \"role_tag\": \"\",\n  \"policies\": [\"default\", \"dev\", \"prod\"],\n  \"max_ttl\": 1800000,\n  \"disallow_reauthentication\": false,\n  \"allow_instance_migration\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with Google Cloud KMS Key\nDESCRIPTION: Command to decrypt ciphertext using a named KMS key. The response includes the plaintext. The second example shows how to extract just the plaintext for easier scripting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/decrypt/my-key ciphertext=CiQAuMv0lTiKjrF43Lgr4...\nKey          Value\n---          -----\nplaintext    hello world\n```\n\n----------------------------------------\n\nTITLE: Disabling a Secrets Engine in Vault\nDESCRIPTION: This command disables a secrets engine at the specified path. When a secrets engine is disabled, all its secrets are revoked and its data is removed. This example disables the engine at 'db-prod/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets disable db-prod/\nSuccess! Disabled the secrets engine (if it existed) at: db-prod/\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Root Credentials in Vault via CLI\nDESCRIPTION: This command configures the root credentials that Vault uses to communicate with AWS to generate IAM credentials. It requires an AWS access key, secret key, and region. These credentials must have sufficient permissions for any policies granted to IAM credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/config/root \\\n    access_key=AKIAJWVN5Z4FOFT7NLNA \\\n    secret_key=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 \\\n    region=us-east-1\n```\n\n----------------------------------------\n\nTITLE: Granting Minimum SQL Privileges for Google Cloud IAM\nDESCRIPTION: This SQL statement grants the minimum required privileges for a service account's DB user to work with Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nGRANT SELECT, CREATE, CREATE USER ON <database>.<object> TO \"test-user\"@\"%\" WITH GRANT OPTION;\n```\n\n----------------------------------------\n\nTITLE: Vault Token Lookup for Authenticated Token (Shell)\nDESCRIPTION: This command retrieves information about the locally authenticated token using the `vault token lookup` command. It leverages the `/auth/token/lookup-self` endpoint. No specific token is provided as an argument, indicating the use of the authenticated token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/lookup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token lookup\n```\n\n----------------------------------------\n\nTITLE: Reloading Vault License Configuration via HTTP POST Request\nDESCRIPTION: This code snippet demonstrates how to make a POST request to reload the Vault license configuration. It uses curl to send the request to the '/sys/config/reload/license' endpoint, including the necessary Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-reload.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  -X POST \\\n  --header \"X-Vault-Token: ...\" \\\n    'http://127.0.0.1:8200/v1/sys/config/reload/license'\n```\n\n----------------------------------------\n\nTITLE: Error Message for PKI CRL Size Limit Exceeded\nDESCRIPTION: Example error message that occurs when a PKI secrets engine Certificate Revocation List (CRL) has grown beyond the Consul key value maximum size limit of 512KB. This indicates a performance bottleneck related to certificate lifecycle management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_10\n\nLANGUAGE: plaintext\nCODE:\n```\n[ERROR] expiration: failed to revoke lease: lease_id=pki/issue/prod/7XXYS4FkmFq8PO05En6rvm6m error=\"failed to revoke entry: resp: (*logical.Response)(nil) err: error encountered during CRL building: error storing CRL: Failed request: Request body too large, max size: 524288 bytes\"\n```\n\n----------------------------------------\n\nTITLE: MongoDB Plugin Configuration API Request\nDESCRIPTION: cURL command for sending the MongoDB plugin configuration to Vault's API endpoint. It illustrates how to make a POST request with the configuration payload to set up a MongoDB connection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/mongodb\n```\n\n----------------------------------------\n\nTITLE: Registering an Enterprise Plugin in Vault\nDESCRIPTION: This example shows how to register an Enterprise plugin (Key Management secrets engine) by specifying its version rather than a SHA256 checksum.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/register.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register\n    -version=0.16.0+ent \\\n    secret \\\n    vault-plugin-secrets-keymgmt\nSuccess! Registered plugin: vault-plugin-secrets-keymgmt\n```\n\n----------------------------------------\n\nTITLE: Authenticating with LDAP in Vault\nDESCRIPTION: This command authenticates a user 'tesla' using the LDAP method and displays the associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=ldap username=tesla\nPassword (will be hidden):\nSuccessfully authenticated! The policies that are associated\nwith this token are listed below:\n\ndefault, foobar, zoobar\n```\n\n----------------------------------------\n\nTITLE: Listing Keys Using cURL in Transit Secrets Engine\nDESCRIPTION: Sample cURL command for listing all keys in Vault's Transit secrets engine. Uses the LIST HTTP method to access the /transit/keys endpoint with Vault authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/transit/keys\n```\n\n----------------------------------------\n\nTITLE: Configuring Transit Secret Engine\nDESCRIPTION: Commands to enable the transit secret engine and create an RSA-2048 encryption key\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvault secrets enable transit\nvault write -f transit/keys/ekm-encryption-key type=\"rsa-2048\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Cryptographic Key in Vault's Key Management Engine\nDESCRIPTION: This command creates a new RSA-2048 cryptographic key named 'example-key'. Keys created are considered general-purpose until distributed to a specific KMS provider.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f keymgmt/key/example-key type=\"rsa-2048\"\nSuccess! Data written to: keymgmt/key/example-key\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Go Client Library\nDESCRIPTION: This command uses the `go get` command to install the official Vault client library for Go. It fetches the library from GitHub and adds it to the project's dependencies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ go get github.com/hashicorp/vault/api\n```\n\n----------------------------------------\n\nTITLE: Listing entities in Vault using `vault list` command\nDESCRIPTION: This command lists available entities by their identifiers under the `identity/entity/id` path in Vault. It demonstrates how to use the `vault list` command to explore the structure of a secrets engine or other data storage location within Vault. The command assumes Vault is properly configured and authenticated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault list identity/entity/id\"\n```\n\n----------------------------------------\n\nTITLE: Running PKI Health Check in Vault\nDESCRIPTION: This command performs a health check on a PKI secrets engine mount. It validates the CA's validity period and other health metrics. The command outputs status information for various health check endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki health-check pki\nca_validity_period\n------------------\nstatus    endpoint                                            message\n------    --------                                            -------\nok        /pki/issuer/da41ffb1-cc6d-5a5c-f147-e4d7beeb1b73    Issuer's validity (2032-12-17) is OK\n\n... more output elided ...\n```\n\n----------------------------------------\n\nTITLE: DNS Discovery Configuration for Etcd Cluster\nDESCRIPTION: Configuration example showing how to use DNS SRV records for discovering Etcd cluster members.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/etcd.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"etcd\" {\n  discovery_srv = \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Sync Destination in Vault CLI\nDESCRIPTION: This command creates a sync destination in Vault for Azure Key Vault using service principal credentials and Key Vault URI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/azurekv.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/azure-kv/my-azure-1 \\\n    key_vault_uri=\"$KEY_VAULT_URI\" \\\n    client_id=\"$CLIENT_ID\" \\\n    client_secret=\"$CLIENT_SECRET\" \\\n    tenant_id=\"$TENANT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Fetching the RoleID via API in Vault\nDESCRIPTION: This API call retrieves the RoleID for a specific AppRole.  It requires a Vault token for authentication and makes a GET request to the `auth/approle/role/my-role/role-id` endpoint. The RoleID is used for authentication by applications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/approle/role/my-role/role-id\n```\n\n----------------------------------------\n\nTITLE: Re-encrypting Data with the Latest KMS Key Version\nDESCRIPTION: Command to re-encrypt already-encrypted ciphertext with the newest key version without revealing the plaintext data. This allows untrusted processes to re-encrypt data safely.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/reencrypt/my-key ciphertext=CiQAuMv0lTiKjrF43Lgr4...\nKey            Value\n---            -----\nciphertext     CiQAuMv0lZTTozQA/ElqM...\nkey_version    2\n```\n\n----------------------------------------\n\nTITLE: Generating RabbitMQ Credentials in Vault\nDESCRIPTION: This command generates new RabbitMQ credentials for the 'my-role' role. It returns a username, password, and lease information for the generated credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/rabbitmq.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault read rabbitmq/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Active Directory User with LDIF\nDESCRIPTION: This LDIF template demonstrates how to create a new user in Active Directory, set their password, activate the account, and add them to a group. It uses Go templating for dynamic values and includes steps for adding the user, modifying their password and account control settings, and updating group membership.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_9\n\nLANGUAGE: ldif\nCODE:\n```\ndn: CN={{.Username}},OU=HashiVault,DC=adtesting,DC=lab\nchangetype: add\nobjectClass: top\nobjectClass: person\nobjectClass: organizationalPerson\nobjectClass: user\nuserPrincipalName: {{.Username}}@adtesting.lab\nsAMAccountName: {{.Username}}\n\ndn: CN={{.Username}},OU=HashiVault,DC=adtesting,DC=lab\nchangetype: modify\nreplace: unicodePwd\nunicodePwd::{{ printf \"%q\" .Password | utf16le | base64 }}\n-\nreplace: userAccountControl\nuserAccountControl: 66048\n-\n\ndn: CN=test-group,OU=HashiVault,DC=adtesting,DC=lab\nchangetype: modify\nadd: member\nmember: CN={{.Username}},OU=HashiVault,DC=adtesting,DC=lab\n-\n```\n\n----------------------------------------\n\nTITLE: ACL Policy with Multiple Control Group Factors in Vault\nDESCRIPTION: This ACL policy grants create and update access to 'secret/foo' only after two members of the 'managers' or 'leads' group and one member of the 'superusers' group authorize the request. It shows how to define multiple factors within a single control group and how to specify the required number of approvals for each.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/control-groups.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n\"path \\\"secret/foo\\\" {\\n    capabilities = [\\\"create\\\", \\\"update\\\"]\\n    control_group = {\\n        ttl = \\\"4h\\\"\\n        factor \\\"tech leads\\\" {\\n            identity {\\n                group_names = [\\\"managers\\\", \\\"leads\\\"]\\n                approvals = 2\\n            }\\n        }\\n        factor \\\"super users\\\" {\\n            identity {\\n                group_names = [\\\"superusers\\\"]\\n                approvals = 1\\n            }\\n        }\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Credentials - Shell\nDESCRIPTION: The command configures Vault to use specific LDAP credentials for operations, including the binding DN and password. Replace $USERNAME and $PASSWORD with actual values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ldap/config \\\n    binddn=$USERNAME \\\n    bindpass=$PASSWORD \\\n    url=ldaps://138.91.247.105\n```\n\n----------------------------------------\n\nTITLE: Removing a Peer Node in a Vault Cluster\nDESCRIPTION: The shell command showcases how to remove a peer node from a Vault Raft cluster. It is used when nodes are no longer needed in the cluster. This requires knowledge of the node ID to be removed, with the expectation that the node is permanently removed and that cluster quorum is maintained. Upon execution, it outputs a success message.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator raft remove-peer node1\nPeer removed successfully!\n```\n\n----------------------------------------\n\nTITLE: Deleting Data from KV Store\nDESCRIPTION: Command to delete a specific key-value pair from the KV store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv delete kv/my-secret\n```\n\n----------------------------------------\n\nTITLE: Checking Vault Process File Limits\nDESCRIPTION: Command to inspect the current maximum open files values for the Vault process from kernel process table.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/$(pidof vault)/limits | awk 'NR==1; /Max open files/'\n```\n\n----------------------------------------\n\nTITLE: Mounting the SSH Secrets Engine in Vault\nDESCRIPTION: This code snippet demonstrates how to mount the SSH secrets engine in Vault using the `vault secrets enable` command. This step is essential before any SSH certificate operations can be performed. The path 'ssh-client-signer' is used as an example, but any valid path can be specified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=ssh-client-signer ssh\nSuccessfully mounted 'ssh' at 'ssh-client-signer'!\n```\n\n----------------------------------------\n\nTITLE: Logging into Vault with Root Token\nDESCRIPTION: This command logs into the Vault cluster using the root token on the vault-0 pod. The root token is obtained during the initialization process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-with-raft.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-0 -- vault login\n```\n\n----------------------------------------\n\nTITLE: Create Vault Admin Role in OCI Auth\nDESCRIPTION: A curl command to establish an admin role in Vault that grants permissions based on a predefined policy. It utilizes a previously prepared JSON configuration to define the role's properties and associations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl --header \"X-Vault-Token: $roottoken\" --request POST \\\n   --data @vaultadminrole.json \\\n   http://127.0.0.1:8200/v1/auth/oci/role/vaultadminrole (127.0.0.1:8200/v1/auth/oci/role/vaultadminrole)\n```\n\n----------------------------------------\n\nTITLE: LIST Request for Listing Rolesets in Vault\nDESCRIPTION: Shell command using 'curl' to list all configured rolesets in the Vault GCP backend. It requires a valid Vault token and responds with roleset names encapsulated within the 'keys' array.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/gcp/rolesets\n```\n\n----------------------------------------\n\nTITLE: Defining Vault Policy for CI Worker in HCL\nDESCRIPTION: This HCL snippet defines a Vault policy for a CI worker, allowing it to create, read, and update wrapped SecretIDs for AppRoles with specific time-to-live constraints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\npath \"auth/approle/role/+/secret*\" {\n  capabilities = [ \"create\", \"read\", \"update\" ]\n  min_wrapping_ttl = \"100s\"\n  max_wrapping_ttl = \"300s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Role for Certificate Issuance using Vault CLI\nDESCRIPTION: Define a role in Vault's PKI secrets engine that specifies how and for whom certificates are generated, allowing subdomains and setting a maximum TTL for certificates. Dependencies include a configured PKI engine. This command sets up a role to manage certificate policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/setup.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write pki/roles/example-dot-com \\\n    allowed_domains=my-website.com \\\n    allow_subdomains=true \\\n    max_ttl=72h\nSuccess! Data written to: pki/roles/example-dot-com\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent Process Supervisor with Environment Templates\nDESCRIPTION: Complete configuration example showing how to set up Vault Agent in process supervisor mode with environment templates and exec block. Demonstrates auto-auth configuration, template settings, and environment variable mapping for secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/process-supervisor.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nauto_auth {\n\n  method {\n    type = \"token_file\"\n\n    config {\n      token_file_path = \"/Users/avean/.vault-token\"\n    }\n  }\n}\n\ntemplate_config {\n  static_secret_render_interval = \"5m\"\n  exit_on_retry_failure         = true\n  max_connections_per_host      = 10\n}\n\nvault {\n  address = \"http://localhost:8200\"\n}\n\nenv_template \"FOO_PASSWORD\" {\n  contents             = \"{{ with secret \\\"secret/data/foo\\\" }}{{ .Data.data.password }}{{ end }}\"\n  error_on_missing_key = true\n}\nenv_template \"FOO_USER\" {\n  contents             = \"{{ with secret \\\"secret/data/foo\\\" }}{{ .Data.data.user }}{{ end }}\"\n  error_on_missing_key = true\n}\n\nexec {\n  command                   = [\"./my-app\", \"arg1\", \"arg2\"]\n  restart_on_secret_changes = \"always\"\n  restart_stop_signal       = \"SIGTERM\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Entity Details in Vault\nDESCRIPTION: Example of reading entity details from Vault using an entity ID\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/read.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read identity/entity/id/2f09126d-d161-abb8-2241-555886491d97\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Options for Vault Agent Injector with Helm\nDESCRIPTION: This Helm command demonstrates how to set custom TLS options for the Vault Agent Injector. It sets the minimum TLS version to 1.3 and allows for specifying custom cipher suites using environment variables.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/installation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nhelm install vault hashicorp/vault \\\n  --set=\"injector.extraEnvironmentVars.AGENT_INJECT_TLS_MIN_VERSION=tls13\" \\\n  --set=\"injector.extraEnvironmentVars.AGENT_INJECT_TLS_CIPHER_SUITES=...\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Enterprise with Raft Storage using Helm\nDESCRIPTION: This command installs Vault Enterprise using Helm, enabling high availability and Raft storage. It sets the image repository to the enterprise version and enables HA and Raft storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-with-raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install vault hashicorp/vault \\\n  --set='server.image.repository=hashicorp/vault-enterprise' \\\n  --set='server.image.tag=1.19.0-ent' \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Kubernetes Auth Method via API\nDESCRIPTION: This API call authenticates with Vault using the Kubernetes auth method. It requires posting a JSON payload with the service account JWT and role name to the login endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"jwt\": \"<your service account jwt>\", \"role\": \"demo\"}' \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/login\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM User Role in AWS Secrets Engine via CLI\nDESCRIPTION: This command creates a Vault role that maps to permissions in AWS using the iam_user credential type. When users request credentials for this role, Vault creates an IAM user with the specified EC2 permissions and returns access credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/roles/my-role \\\n    credential_type=iam_user \\\n    policy_document=-<<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": \"ec2:*\",\n      \"Resource\": \"*\"\n    }\n  ]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Sample CLI Request to Configure MySQL Database in Vault\nDESCRIPTION: This CLI command configures a MySQL database connection using the Vault CLI. It uses the 'vault write' command with database/config parameters and requires Vault CLI to be installed and authenticated with sufficient permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/mysql \\\n    plugin_name=\"mysql-database-plugin\" \\\n    allowed_roles=\"readonly\" \\\n    connection_url=\"{{username}}:{{password}}@tcp(127.0.0.1:3306)/\" \\\n    username=\"vaultuser\" \\\n    password=\"secretpassword\"\n```\n\n----------------------------------------\n\nTITLE: Mapping LDAP User to Groups and Policies\nDESCRIPTION: These commands map the LDAP group 'engineers' to the 'foobar' policy and add the LDAP user 'tesla' to the 'engineers' group with an additional 'zoobar' policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/ldap/groups/engineers policies=foobar\n$ vault write auth/ldap/users/tesla groups=engineers policies=zoobar\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets from Key/Value Store - Shell\nDESCRIPTION: This snippet shows how to retrieve stored secrets from the key/value plugin using the defined path. Successful execution retrieves the credentials stored for the user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get kv/creds\n```\n\n----------------------------------------\n\nTITLE: AppRole Authentication and Secret Retrieval in C#\nDESCRIPTION: This C# code demonstrates AppRole authentication with Vault, including response wrapping for the secret ID. It uses the VaultSharp library to initialize a Vault client, unwrap the secret ID, log in using AppRole credentials, and retrieve a key-value secret from the KV v2 secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing VaultSharp;\nusing VaultSharp.V1.AuthMethods;\nusing VaultSharp.V1.AuthMethods.AppRole;\nusing VaultSharp.V1.AuthMethods.Token;\nusing VaultSharp.V1.Commons;\n\nnamespace Examples\n{\n    public class ApproleAuthExample\n    {\n        const string DefaultTokenPath = \"../../../path/to/wrapping-token\";\n\n        /// <summary>\n        /// Fetches a key-value secret (kv-v2) after authenticating to Vault via AppRole authentication\n        /// </summary>\n        public string GetSecretWithAppRole()\n        {\n            // A combination of a Role ID and Secret ID is required to log in to Vault with an AppRole.\n\t        // The Secret ID is a value that needs to be protected, so instead of the app having knowledge of the secret ID directly,\n\t        // we have a trusted orchestrator (https://developer.hashicorp.com/vault/tutorials/app-integration/secure-introduction?in=vault%2Fapp-integration#trusted-orchestrator)\n\t        // give the app access to a short-lived response-wrapping token (https://developer.hashicorp.com/vault/docs/concepts/response-wrapping).\n\t        // Read more at: https://learn.hashicorp.com/tutorials/vault/approle-best-practices?in=vault/auth-methods#secretid-delivery-best-practices\n            var vaultAddr = Environment.GetEnvironmentVariable(\"VAULT_ADDR\");\n            if(String.IsNullOrEmpty(vaultAddr))\n            {\n                throw new System.ArgumentNullException(\"Vault Address\");\n            }\n\n            var roleId = Environment.GetEnvironmentVariable(\"APPROLE_ROLE_ID\");\n            if(String.IsNullOrEmpty(roleId))\n            {\n                throw new System.ArgumentNullException(\"AppRole Role Id\");\n            }\n            // Get the path to wrapping token or fall back on default path\n            string pathToToken = !String.IsNullOrEmpty(Environment.GetEnvironmentVariable(\"WRAPPING_TOKEN_PATH\")) ? Environment.GetEnvironmentVariable(\"WRAPPING_TOKEN_PATH\") : DefaultTokenPath;\n            string wrappingToken = File.ReadAllText(pathToToken); // placed here by a trusted orchestrator\n\n            // We need to create two VaultClient objects for authenticating via AppRole. The first is for\n            // using the unwrap utility. We need to initialize the client with the wrapping token.\n            IAuthMethodInfo wrappedTokenAuthMethod = new TokenAuthMethodInfo(wrappingToken);\n            var vaultClientSettingsForUnwrapping = new VaultClientSettings(vaultAddr, wrappedTokenAuthMethod);\n\n            IVaultClient vaultClientForUnwrapping = new VaultClient(vaultClientSettingsForUnwrapping);\n\n            // We pass null here instead of the wrapping token to avoid depleting its single usage\n            // given that we already initialized our client with the wrapping token\n            Secret<Dictionary<string, object>> secretIdData =  vaultClientForUnwrapping.V1.System\n                .UnwrapWrappedResponseDataAsync<Dictionary<string, object>>(null).Result;\n\n            var secretId = secretIdData.Data[\"secret_id\"]; // Grab the secret_id\n\n            // We create a second VaultClient and initialize it with the AppRole auth method and our new credentials.\n            IAuthMethodInfo authMethod = new AppRoleAuthMethodInfo(roleId, secretId.ToString());\n            var vaultClientSettings = new VaultClientSettings(vaultAddr, authMethod);\n\n            IVaultClient vaultClient = new VaultClient(vaultClientSettings);\n\n            // We can retrieve the secret from VaultClient\n            Secret<SecretData> kv2Secret = null;\n            kv2Secret = vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(path: \"/creds\").Result;\n\n            var password = kv2Secret.Data.Data[\"password\"];\n\n            return password.ToString();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Vault License Status\nDESCRIPTION: This bash command executes the 'vault license get' command inside the Vault pod to check the license status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -ti vault-0 -- vault license get\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Role (cURL)\nDESCRIPTION: cURL command to send a DELETE request to remove an existing role from the Azure secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/azure/roles/example-role\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using C#\nDESCRIPTION: This snippet demonstrates how to store a secret in Vault using the C# client. It creates a dictionary with the secret data and uses the WriteSecretAsync method to write the secret to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_26\n\nLANGUAGE: cs\nCODE:\n```\nvar secretData = new Dictionary<string, object> { { \"password\", \"Hashi123\" } };\nvaultClient.V1.Secrets.KeyValue.V2.WriteSecretAsync(\n    path: \"/my-secret-password\",\n    data: secretData,\n    mountPoint: \"secret\"\n).Wait();\n\nConsole.WriteLine(\"Secret written successfully.\");\n```\n\n----------------------------------------\n\nTITLE: Authenticating via CLI with AppRole in Vault\nDESCRIPTION: This snippet shows how to authenticate with Vault using the AppRole auth method via the command-line interface.  It requires a role_id and secret_id obtained from the configured AppRole. The command writes the credentials to the approle/login endpoint to retrieve a Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/approle/login \\\n    role_id=db02de05-fa39-4855-059b-67221c5c2f63 \\\n    secret_id=6a174c20-f6de-a53c-74d2-6018fcceff64\n\nKey                Value\n-- -                ----- \ntoken              65b74ffd-842c-fd43-1386-f7d7006e520a\ntoken_accessor     3c29bc22-5c72-11a6-f778-2bc8f48cea0e\ntoken_duration     20m0s\ntoken_renewable    true\ntoken_policies     [default]\n```\n\n----------------------------------------\n\nTITLE: Enabling SAML Authentication Method in Vault\nDESCRIPTION: Command to enable the SAML authentication method in Vault. This is typically performed by an operator or configuration management tool as part of the initial setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable saml\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP Key for Provider Mode\nDESCRIPTION: This command creates a named TOTP key in Vault for provider mode. It generates a new key and returns a barcode and OTP URL for user authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/totp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write totp/keys/my-user \\\n    generate=true \\\n    issuer=Vault \\\n    account_name=user@test.com\n\nKey        Value\n---        -----\nbarcode    iVBORw0KGgoAAAANSUhEUgAAAMgAAADIEAAAAADYoy0BA...\nurl        otpauth://totp/Vault:user@test.com?algorithm=SHA1&digits=6&issuer=Vault&period=30&secret=V7MBSK324I7KF6KVW34NDFH2GYHIF6JY\n```\n\n----------------------------------------\n\nTITLE: Configuring TOTP Key for Generator Mode\nDESCRIPTION: This command configures a named TOTP key in Vault for generator mode. It uses a URL that corresponds to the secret key or value from a third-party service's barcode.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/totp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault write totp/keys/my-key \\\n    url=\"otpauth://totp/Vault:test@test.com?secret=Y64VEVMBTSXCYIWRSHRNDZW62MPGVU2G&issuer=Vault\"\nSuccess! Data written to: totp/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Role Configuration Payload\nDESCRIPTION: JSON payload for configuring a new JWT authentication role with policies, claims, and mappings\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\"dev\", \"prod\"],\n  \"bound_subject\": \"sl29dlldsfj3uECzsU3Sbmh0F29Fios1@clients\",\n  \"bound_audiences\": \"https://myco.test\",\n  \"user_claim\": \"https://vault/user\",\n  \"groups_claim\": \"https://vault/groups\",\n  \"bound_claims\": {\n    \"department\": \"engineering\",\n    \"sector\": \"7g\"\n  },\n  \"claim_mappings\": {\n    \"preferred_language\": \"language\",\n    \"group\": \"group\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an OTP Role in Vault SSH Secrets Engine\nDESCRIPTION: This command creates a role named 'otp_key_role' with OTP key type, default user, and CIDR list for allowed IP ranges.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/one-time-ssh-passwords.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ssh/roles/otp_key_role \\\n    key_type=otp \\\n    default_user=username \\\n    cidr_list=x.x.x.x/y,m.m.m.m/n\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GCP via CLI Helper\nDESCRIPTION: This snippet shows how to authenticate to Vault using a CLI helper. The CLI obtains a signed JWT locally and sends the request to Vault. It includes the required parameters like role, service account, JWT expiration, and credentials. Designed for various deployment scenarios, both inside and outside Google Cloud.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=gcp \\\n    role=\\\"my-role\\\" \\\n    service_account=\\\"authenticating-account@my-project.iam.gserviceaccount.com\\\" \\\n    jwt_exp=\\\"15m\\\" \\\n    credentials=@path/to/signer/credentials.json\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=gcp role=\\\"my-role\\\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Vault's Backend Encryption Key Using the HTTP API\nDESCRIPTION: This shell command sends a POST request to Vault's `/sys/rotate` endpoint to trigger rotation of the backend encryption key. The operation requires a valid Vault token with `sudo` capability in addition to `update` permission. This is performed online with no downtime.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rotate.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/rotate\n```\n\n----------------------------------------\n\nTITLE: Creating a Transformation - HashiCorp Vault Command\nDESCRIPTION: This snippet creates a transformation under the 'fpe' type, using a previously defined template, 'ccn'. It sets the tweak source to 'internal' and limits roles to 'payments'. The transformation defines how input values are encrypted and decrypted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transform/transformations/fpe/ccn-fpe \\\n  template=ccn \\\n  tweak_source=internal \\\n  allowed_roles=payments\nSuccess! Data written to: transform/transformations/fpe/ccn-fpe\n```\n\n----------------------------------------\n\nTITLE: Dumping Raw Telemetry Data from Vault\nDESCRIPTION: This snippet demonstrates how to view raw telemetry data for debugging purposes by sending a `USR1` signal to the Vault process on Unix-like systems or a `BREAK` signal on Windows. This action dumps the telemetry data collected over the last 10 seconds to `stderr` which can then be analyzed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.expire.num_leases': 5100.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.num_goroutines': 39.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.sys_bytes': 222746880.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.malloc_count': 109189192.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.free_count': 108408240.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.heap_objects': 780953.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.total_gc_runs': 232.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.alloc_bytes': 72954392.000\n[2017-12-19 20:37:50 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.total_gc_pause_ns': 150293024.000\n[2017-12-19 20:37:50 +0000 UTC][S] 'vault.merkle.flushDirty': Count: 100 Min: 0.008 Mean: 0.027 Max: 0.183 Stddev: 0.024 Sum: 2.681 LastUpdated: 2017-12-19 20:37:59.848733035 +0000 UTC m=+10463.692105920\n[2017-12-19 20:37:50 +0000 UTC][S] 'vault.merkle.saveCheckpoint': Count: 4 Min: 0.021 Mean: 0.054 Max: 0.110 Stddev: 0.039 Sum: 0.217 LastUpdated: 2017-12-19 20:37:57.048458148 +0000 UTC m=+10460.891835029\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.alloc_bytes': 73326136.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.sys_bytes': 222746880.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.malloc_count': 109195904.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.free_count': 108409568.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.heap_objects': 786342.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.total_gc_pause_ns': 150293024.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.expire.num_leases': 5100.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.num_goroutines': 39.000\n[2017-12-19 20:38:00 +0000 UTC][G] 'vault.7f320e57f9fe.runtime.total_gc_runs': 232.000\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.route.rollback.consul-': Count: 1 Sum: 0.013 LastUpdated: 2017-12-19 20:38:01.968471579 +0000 UTC m=+10465.811842067\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.rollback.attempt.consul-': Count: 1 Sum: 0.073 LastUpdated: 2017-12-19 20:38:01.968502743 +0000 UTC m=+10465.811873131\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.rollback.attempt.pki-': Count: 1 Sum: 0.070 LastUpdated: 2017-12-19 20:38:01.96867005 +0000 UTC m=+10465.812041936\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.route.rollback.auth-app-id-': Count: 1 Sum: 0.012 LastUpdated: 2017-12-19 20:38:01.969146401 +0000 UTC m=+10465.812516689\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.rollback.attempt.identity-': Count: 1 Sum: 0.063 LastUpdated: 2017-12-19 20:38:01.968029888 +0000 UTC m=+10465.811400276\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.rollback.attempt.database-': Count: 1 Sum: 0.066 LastUpdated: 2017-12-19 20:38:01.969394215 +0000 UTC m=+10465.812764603\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.barrier.get': Count: 16 Min: 0.010 Mean: 0.015 Max: 0.031 Stddev: 0.005 Sum: 0.237 LastUpdated: 2017-12-19 20:38:01.983268118 +0000 UTC m=+10465.826637008\n[2017-12-19 20:38:00 +0000 UTC][S] 'vault.merkle.flushDirty': Count: 100 Min: 0.006 Mean: 0.024 Max: 0.098 Stddev: 0.019 Sum: 2.386 LastUpdated: 2017-12-19 20:38:09.848158309 +0000 UTC m=+10473.691527099\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Token with Specific Policies - Shell Session\nDESCRIPTION: This snippet demonstrates how to create a new token in HashiCorp Vault, associating it with specific policies. The command specifies multiple policies to control access and permissions for the created token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/create.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token create -policy=my-policy -policy=other-policy\nKey                Value\n---                -----\ntoken              95eba8ed-f6fc-958a-f490-c7fd0eda5e9e\ntoken_accessor     882d4a40-3796-d06e-c4f0-604e8503750b\ntoken_duration     768h\ntoken_renewable    true\ntoken_policies     [default my-policy other-policy]\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Plugin with x509 Authentication\nDESCRIPTION: This command configures the MySQL plugin with client x509 certificate authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mysql-database \\\n    plugin_name=mysql-database-plugin \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"user:password@tcp(localhost:3306)/test\" \\\n    tls_certificate_key=@/path/to/client.pem \\\n    tls_ca=@/path/to/client.ca\n```\n\n----------------------------------------\n\nTITLE: Writing Simple KV Secret to Vault\nDESCRIPTION: Demonstrates writing a secret with a key and value to the Vault KV secrets engine using the 'kv put' command with a mounted path\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/put.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault kv put -mount=secret creds passcode=my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Configuring Aerospike Storage Backend in HCL\nDESCRIPTION: Basic configuration block for setting up Aerospike as a storage backend in Vault. Demonstrates essential parameters including hostname, port, namespace, set, and authentication credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/aerospike.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"aerospike\" {\n  hostname = \"localhost\"\n  port = \"3000\"\n  namespace = \"test\"\n  set = \"vault\"\n  username = \"admin\"\n  password = \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Secrets Engine via CLI\nDESCRIPTION: Command to enable the Azure secrets engine at the default path using Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable azure\nSuccess! Enabled the azure secrets engine at: azure/\n```\n\n----------------------------------------\n\nTITLE: Joining Raft Peers in Primary Cluster\nDESCRIPTION: Commands to join additional pods to the primary Raft cluster and unseal them.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-perf-with-raft.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-primary-1 -- vault operator raft join http://vault-primary-0.vault-primary-internal:8200\nkubectl exec -ti vault-primary-1 -- vault operator unseal\n\nkubectl exec -ti vault-primary-2 -- vault operator raft join http://vault-primary-0.vault-primary-internal:8200\nkubectl exec -ti vault-primary-2 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Invalid Password Policy Configuration in HCL\nDESCRIPTION: This snippet demonstrates an invalid password policy configuration that will be rejected due to lack of charset specification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nlength = 20\n```\n\n----------------------------------------\n\nTITLE: AppRole Login Response\nDESCRIPTION: This JSON response is returned upon successful AppRole authentication. It provides a client token, accessor, lease duration, and other metadata for the authenticated session.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"renewable\": true,\n    \"lease_duration\": 1200,\n    \"metadata\": null,\n    \"token_policies\": [\"default\"],\n    \"accessor\": \"fd6c9a00-d2dc-3b11-0be5-af7ae0e1d374\",\n    \"client_token\": \"5b1a0318-679c-9c45-e5c6-d1b9a9035d49\"\n  },\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": null,\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cassandra Keyspace and Table Schema\nDESCRIPTION: CQL commands for creating the required keyspace and table structure in Cassandra. Creates a 'vault' keyspace with SimpleStrategy replication and an 'entries' table for storing Vault data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/cassandra.mdx#2025-04-14_snippet_1\n\nLANGUAGE: cql\nCODE:\n```\nCREATE KEYSPACE \"vault\" WITH REPLICATION = {\n    'class': 'SimpleStrategy',\n    'replication_factor': 1\n};\n\nCREATE TABLE \"vault\".\"entries\" (\n    bucket text,\n    key text,\n    value blob,\n    PRIMARY KEY (bucket, key)\n) WITH CLUSTERING ORDER BY (key ASC);\n```\n\n----------------------------------------\n\nTITLE: Generated Vault Agent Configuration File\nDESCRIPTION: Complete HCL configuration file generated by the vault agent generate-config command, including auto_auth, template_config, vault settings, environment templates, and exec configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/generate-config.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nauto_auth {\n\n  method {\n    type = \"token_file\"\n\n    config {\n      token_file_path = \"/home/<username>/.vault-token\"\n    }\n  }\n}\n\ntemplate_config {\n  static_secret_render_interval = \"5m\"\n  exit_on_retry_failure         = true\n  max_connections_per_host      = 10\n}\n\nvault {\n  address = \"http://192.168.0.1:8200\"\n}\n\nenv_template \"SQUARE_API_PROD\" {\n  contents             = \"{{ with secret \\\"shared/data/dev/square-api\\\" }}{{ .Data.data.prod }}{{ end }}\"\n  error_on_missing_key = true\n}\nenv_template \"SQUARE_API_SANDBOX\" {\n  contents             = \"{{ with secret \\\"shared/data/dev/square-api\\\" }}{{ .Data.data.sandbox }}{{ end }}\"\n  error_on_missing_key = true\n}\nenv_template \"SQUARE_API_SMOKE\" {\n  contents             = \"{{ with secret \\\"shared/data/dev/square-api\\\" }}{{ .Data.data.smoke }}{{ end }}\"\n  error_on_missing_key = true\n}\nenv_template \"SEEDS_SEED1\" {\n  contents             = \"{{ with secret \\\"shared/data/dev/seeds\\\" }}{{ .Data.data.seed1 }}{{ end }}\"\n  error_on_missing_key = true\n}\nenv_template \"SEEDS_SEED2\" {\n  contents             = \"{{ with secret \\\"shared/data/dev/seeds\\\" }}{{ .Data.data.seed2 }}{{ end }}\"\n  error_on_missing_key = true\n}\nenv_template \"DEV_POSTMAN\" {\n  contents             = \"{{ with secret \\\"private/data/ci/integration\\\" }}{{ .Data.data.postman }}{{ end }}\"\n  error_on_missing_key = true\n}\n\nexec {\n  command                   = [\"./payment-app\", \"'wf-test'\"]\n  restart_on_secret_changes = \"always\"\n  restart_stop_signal       = \"SIGTERM\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Lease Count Quota with cURL in Vault\nDESCRIPTION: Sample cURL request to create or update a global lease count quota. It sends a POST request with the JSON payload to the specified endpoint, requiring a Vault token for authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/lease-count-quotas.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/quotas/lease-count/global-lease-count-quota\n```\n\n----------------------------------------\n\nTITLE: Defining Seal Stanza in Vault Configuration (HCL)\nDESCRIPTION: This snippet demonstrates the basic structure for defining a seal stanza in the Vault configuration file. It uses a generic TYPE placeholder for the seal type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal [TYPE] {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Auth Role in Vault - Terraform Configuration\nDESCRIPTION: Terraform configuration to create a GCP authentication role in Vault with IAM type, specified policies, JWT expiration, and bound service accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/gcp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_gcp_auth_backend_role\" \"gcp_role\" {\n  backend                = \"auth/gcp\"\n  role                   = <VAULT_GCP_ROLE>\n  type                   = \"iam\"\n  token_policies         = \"default\"\n  max_jwt_exp            = 3600\n  bound_service_accounts = [\n    \"<SERVICE_ACCOUNT>@<GCP_PROJECT>.iam.gserviceaccount.com\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Role for Trust Protection Platform - Shell Script\nDESCRIPTION: This snippet configures a role in Vault that maps to a Venafi secret for certificate enrollment. The role settings include options such as allowed domains and key storage preferences.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/roles/tpp \\\n    venafi_secret=tpp \\\n    store_by=serial store_pkey=true \\\n    allowed_domains=example.com \\\n    allow_subdomains=true\n```\n\n----------------------------------------\n\nTITLE: Setting Performance Replication Paths Filter Payload\nDESCRIPTION: JSON payload structure for configuring allowed paths in performance replication filtering.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mode\": \"allow\",\n  \"paths\": [\"secret/\", \"ns1/\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Read KV Engine Configuration Request\nDESCRIPTION: This curl command sends a GET request to read the current configuration of the KV engine at the specified path. It includes the Vault token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/secret/config\n```\n\n----------------------------------------\n\nTITLE: Executing operator step-down command in Vault\nDESCRIPTION: Example of forcing a Vault server to step down as the leader using the command line. This command targets the active Vault node to relinquish leadership in an HA cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/step-down.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator step-down\nSuccess! Stepped down: http://127.0.0.1:8200\n```\n\n----------------------------------------\n\nTITLE: Creating Rate Limit Quota - CURL Request\nDESCRIPTION: CURL command to create or update a rate limit quota using the POST endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rate-limit-quotas.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/quotas/rate-limit/global-rate-limiter\n```\n\n----------------------------------------\n\nTITLE: Creating HANA Database Role in Vault\nDESCRIPTION: Command to configure a role that maps a name in Vault to SQL statements for creating database credentials with specific permissions and TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/hanadb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-hana-database \\\n    creation_statements=\"CREATE USER {{name}} PASSWORD \\\"{{password}}\\\" VALID UNTIL '{{expiration}}';\\\n        CALL GRANT_ACTIVATED_ROLE ( 'sap.hana.admin.roles::Monitoring', '{{name}}' );\" \\\n    default_ttl=\"12h\" \\\n    max_ttl=\"24h\"\nSuccess! Data written to: database/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Enabling GCP Auth Method\nDESCRIPTION: This snippet shows how to enable the Google Cloud authentication method in Vault via the CLI. It is a prerequisite step that must be completed before configuring Vault to authenticate Google Cloud entities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth enable gcp\n```\n\n----------------------------------------\n\nTITLE: Disable DR Primary Request\nDESCRIPTION: HTTP POST request to completely disable DR replication on the cluster, preventing secondary connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/primary/disable\n```\n\n----------------------------------------\n\nTITLE: Creating an AppRole via API in Vault\nDESCRIPTION: This snippet creates an AppRole with specified policies and token type via the Vault API. It sends a POST request to the `/auth/approle/role/my-role` endpoint.  The request body includes the desired policies and token type for the role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data '{\"policies\": \"dev-policy,test-policy\", \"token_type\": \"batch\"}' \\\n    http://127.0.0.1:8200/v1/auth/approle/role/my-role\n```\n\n----------------------------------------\n\nTITLE: Adding User to Okta Group and Mapping to Vault Policy\nDESCRIPTION: These CLI commands demonstrate how to add a user to an Okta group and map that group to a Vault policy, effectively granting the user the specified policy upon authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/okta/groups/engineers policies=autopilot\n$ vault write auth/okta/users/tesla groups=engineers\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT via CLI\nDESCRIPTION: Command to authenticate with JWT backend using the Vault CLI. This sends a JWT token to the specified backend path with a role parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/<path-to-jwt-backend>/login role=demo jwt=...\n```\n\n----------------------------------------\n\nTITLE: Writing Generated Password\nDESCRIPTION: Command to generate and store a password using a defined policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put kv/my-generated-secret \\\n       password=$(vault read -field password sys/policies/password/example/generate)\n```\n\n----------------------------------------\n\nTITLE: Configuring Snowflake Database Connection - JSON\nDESCRIPTION: This JSON payload configures the Snowflake database connection settings including plugin name, allowed roles, and connection details. Required parameters must be correctly specified for successful configuration of database access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/snowflake.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"snowflake-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"{{username}}:{{password}}@ecxxxx.west-us-1.azure/db_name\",\n  \"max_open_connections\": 5,\n  \"max_connection_lifetime\": \"5s\",\n  \"username\": \"username\",\n  \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault with IBM Verify as OIDC Provider\nDESCRIPTION: This snippet demonstrates how to configure Vault's OIDC authentication method to work with IBM Verify. It shows how to set the required parameters including specifying 'ibmisam' as the provider to properly parse the space-separated groups claim string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/ibmisam.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/config -<<\"EOH\"\n{\n   \"oidc_client_id\": \"your_client_id\",\n   \"oidc_client_secret\": \"your_client_secret\",\n   \"default_role\": \"your_default_role\",\n   \"oidc_discovery_url\": \"https://your.idp.host\",\n   \"provider_config\": {\n      \"provider\": \"ibmisam\"\n   }\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Creating a Key for Asymmetric Signing in Vault\nDESCRIPTION: This snippet shows how to create a key in Google Cloud KMS that is eligible for asymmetric signing using Vault. The key configuration must specify the purpose as 'asymmetric_sign' and the desired algorithm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_16\n\nLANGUAGE: text\nCODE:\n```\n$ vault write gcpkms/keys/my-key \\\n        key_ring=projects/.../my-keyring \\\n        purpose=asymmetric_sign \\\n        algorithm=ec_sign_p384_sha384\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta Auth Method in Vault\nDESCRIPTION: This CLI command configures the Okta auth method in Vault with the necessary Okta account details, including the base URL, organization name, and API token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/okta/config \\\n   base_url=\"okta.com\" \\\n   org_name=\"dev-123456\" \\\n   api_token=\"00abcxyz...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Repository Sync Destination in Vault\nDESCRIPTION: Use vault write command to set up a repository sync destination with an access token. This configures Vault to sync secrets to a specific GitHub repository.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/gh/DESTINATION_NAME \\\n    access_token=\"GITHUB_ACCESS_TOKEN\"                  \\\n    secrets_location=\"GITHUB_SECRETS_LOCATION\"          \\\n    repository_owner=\"GITHUB_OWNER_NAME\"                \\\n    repository_name=\"GITHUB_REPO_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Template with YAML Annotation\nDESCRIPTION: Demonstrates how to configure a custom template for rendering database credentials using Kubernetes annotations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvault.hashicorp.com/agent-inject-secret-foo: 'database/creds/db-app'\nvault.hashicorp.com/agent-inject-template-foo: |\n  {{- with secret \"database/creds/db-app\" -}}\n  postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/mydb?sslmode=disable\n  {{- end }}\nvault.hashicorp.com/role: 'app'\n```\n\n----------------------------------------\n\nTITLE: Viewing Linux User Limits for Vault Process\nDESCRIPTION: This shell command displays the current user limits (ulimit values) for the running Vault process. It uses pidof to dynamically get the Vault process ID and inserts it into the path to retrieve the correct values from the kernel process table.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ cat /proc/$(pidof vault)/limits\n```\n\n----------------------------------------\n\nTITLE: Applying Lease Count Quota via Vault API\nDESCRIPTION: This cURL command demonstrates how to apply a lease count quota using the Vault API. It sends a POST request to the appropriate endpoint with the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n --request POST \\\n --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n --data @payload.json \\\n ${VAULT_ADDR}/v1/sys/quotas/lease-count/webapp-tokens\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Dynamic Secrets in Vault\nDESCRIPTION: YAML configuration for VaultDynamicSecret custom resource that generates database credentials from Vault's database secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  namespace: vso-example\n  name: vault-dynamic-secret-db\nspec:\n  vaultAuthRef: vault-auth\n  mount: db\n  path: creds/my-postgresql-role\n  destination:\n    create: true\n    name: dynamic-db\n```\n\n----------------------------------------\n\nTITLE: Creating Long-Lived Kubernetes Secret Token for Vault Authentication\nDESCRIPTION: This snippet demonstrates how to create a long-lived Kubernetes secret token that can be used as the token_reviewer_jwt for Vault authentication. It requires the 'vault' service account to have the 'system:auth-delegator' ClusterRole.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -f - <<EOF\napiVersion: v1\nkind: Secret\nmetadata:\n  name: vault-k8s-auth-secret\n  annotations:\n    kubernetes.io/service-account.name: vault\ntype: kubernetes.io/service-account-token\nEOF\n```\n\n----------------------------------------\n\nTITLE: Fetching ACME EAB Token\nDESCRIPTION: This command fetches a new ACME External Account Binding token from Vault. It involves generating a key identifier and an HMAC key which are necessary for clients to authenticate via ACME EAB.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write -f /pki/acme/new-eab\n```\n\n----------------------------------------\n\nTITLE: Enabling SSH Secrets Engine in Shell\nDESCRIPTION: Enable the SSH secrets engine at a specified path using Vault CLI. This step is essential for setting up Vault to manage SSH key signings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable -path=ssh-host-signer ssh\nSuccessfully mounted 'ssh' at 'ssh-host-signer'!\n```\n\n----------------------------------------\n\nTITLE: Using vault agent generate-config Command in Shell\nDESCRIPTION: This snippet shows the basic syntax for using the vault agent generate-config command. It generates a configuration file for Vault Agent based on the specified config_file_type and options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/agent/generate-config.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault agent generate-config -type <config_file_type> [options] [<file_path>]\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Client Signer Public Key\nDESCRIPTION: These code snippets show two methods for retrieving the public key of the client signer. The first uses `curl` to fetch it from the Vault API, while the second uses the `vault read` command. This public key needs to be added to the `TrustedUserCAKeys` option in the target host's SSH configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -o /etc/ssh/trusted-user-ca-keys.pem http://127.0.0.1:8200/v1/ssh-client-signer/public_key\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read -field=public_key ssh-client-signer/config/ca > /etc/ssh/trusted-user-ca-keys.pem\n```\n\n----------------------------------------\n\nTITLE: Creating a Vault User in Elasticsearch using curl\nDESCRIPTION: This code creates a user named 'vault' in Elasticsearch with the previously created 'vault' role to be used by Vault for authentication and user management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d @data.json \\\n    http://vaultuser:$PASSWORD@localhost:9200/_xpack/security/user/vault\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Plugin Connection\nDESCRIPTION: Command to configure Vault with Cassandra plugin settings and connection information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/cassandra.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/config/my-cassandra-database \\\n    plugin_name=\"cassandra-database-plugin\" \\\n    hosts=127.0.0.1 \\\n    protocol_version=4 \\\n    username=vaultuser \\\n    password=vaultpass \\\n    allowed_roles=my-role\n```\n\n----------------------------------------\n\nTITLE: Reading Generated Password\nDESCRIPTION: Command to read the generated password from the KV store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get kv/my-generated-secret\n```\n\n----------------------------------------\n\nTITLE: Creating Templated ACL Policy in Vault\nDESCRIPTION: This shell script creates a templated ACL policy in Vault that allows applications to read their secrets from a KV v2 secret engine. It uses the Kubernetes auth method's mount accessor in the policy template.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ tee env-tmpl.hcl <<EOF\npath \"env-kv/data/{{identity.entity.aliases.auth_kubernetes_bcecb1e1.metadata.env}}\" {\n  capabilities = [ \"read\" ]\n}\nEOF\n$ vault policy write env-tmpl env-tmpl.hcl\n```\n\n----------------------------------------\n\nTITLE: Creating Duo MFA Method in Vault\nDESCRIPTION: Endpoint for configuring a new Duo Multi-Factor Authentication method with required authentication parameters and optional customization settings\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/duo.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username_format\": \"{{identity.entity.aliases.auth_userpass_1793464a.name}}\",\n  \"secret_key\": \"BIACEUEAXI20BNWTEYXT\",\n  \"integration_key\": \"8C7THtrIigh2rPZQMbguugt8IUftWhMRCOBzbuyz\",\n  \"api_hostname\": \"api-2b5c39f5.duosecurity.com\",\n  \"method_name\": \"ns1_duo\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/duo\n```\n\n----------------------------------------\n\nTITLE: Serving Multiplexed Database Plugin in Go\nDESCRIPTION: This snippet shows the updated function call required for database plugins to support multiplexing.  By using `dbplugin.ServeMultiplex()`, a single plugin process can handle multiple database connections, which improves Vault's efficiency when interacting with external databases. This call should be used in the main.go file of the database plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.10.0.mdx#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n\"dbplugin.ServeMultiplex()\"\n```\n\n----------------------------------------\n\nTITLE: Starting Consul Agent in Dev Mode\nDESCRIPTION: Command to start a Consul agent in development mode with ACL system enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nconsul agent -dev -hcl \"acl { enabled = true }\"\n```\n\n----------------------------------------\n\nTITLE: Reading a Key with Vault API\nDESCRIPTION: This code snippet illustrates how to retrieve information about an existing key from Vault using the PKI secrets engine. It uses a GET request to the `/pki/key/:key_ref` endpoint, specifying the key reference (either ID, 'default', or name).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_76\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/key/default\n```\n\n----------------------------------------\n\nTITLE: Listing Auth Methods in Vault\nDESCRIPTION: This snippet shows how to list all enabled authentication methods in Vault using the 'auth list' subcommand. It displays the path, type, and description of each auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth list\nPath         Type        Description\n----         ----        -----------\ntoken/       token       token based credentials\nuserpass/    userpass    n/a\n```\n\n----------------------------------------\n\nTITLE: Retrieving Path Help in Vault CLI\nDESCRIPTION: Demonstrates how to use the path-help command to get information about a specific Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault path-help sys/mounts\n```\n\n----------------------------------------\n\nTITLE: Azure Credentials Response Sample\nDESCRIPTION: Example JSON response containing Azure client credentials generated by Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"client_id\": \"408bf248-dd4e-4be5-919a-7f6207a307ab\",\n    \"client_secret\": \"9PfdaDP9qcf98ggw8WSttfVreFcN4q9c4m4x\",\n    \"...\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HCP Terraform User Role in Vault (Shell)\nDESCRIPTION: This command creates a role in Vault that maps to an existing HCP Terraform user, allowing generation of User API tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write terraform/role/my-role user_id=user-12345abcde\n```\n\n----------------------------------------\n\nTITLE: Reading Vault Key Configuration\nDESCRIPTION: This snippet shows how to read Vault's configuration of a Google Cloud KMS key. It includes the policy, curl command for the GET request, and the expected JSON response format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_31\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/config/my-key\" {\n  capabilities = [\"read\"]\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/config/my-key\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"my-key\",\n    \"crypto_key\": \"projects/my-project/locations/my-location/keyRings/my-keyring/cryptoKeys/my-crypto-key\",\n    \"min_version\": 10\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Syslog Audit Device with Vault CLI\nDESCRIPTION: This command enables a syslog type audit device to send log entries from Vault to a syslog server. It includes options for setting the facility and tag parameters, which define the source labels for syslog entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/enable.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable [flags] syslog [options] \\\n    [facility=<process_entry_source>]         \\\n    [tag=<program_entry_source>]\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS EC2 Authentication via CLI\nDESCRIPTION: Enables AWS authentication method in Vault using the CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable aws\n```\n\n----------------------------------------\n\nTITLE: Subscribing to KV-V2 Data Write Events via Vault CLI\nDESCRIPTION: This snippet shows how to use the Vault CLI to subscribe to KV-V2 data write events, which outputs a stream of JSON-formatted event notifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/events.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault events subscribe kv-v2/data-write\n```\n\n----------------------------------------\n\nTITLE: Defining a Specific Policy for KV Secrets Engine Event Subscription in HCL\nDESCRIPTION: This HCL snippet defines a policy that grants list and subscribe capabilities for a specific KV secrets engine path, allowing subscription to all event types for that path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/events.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/my-data\" {\n  capabilities = [\"list\", \"subscribe\"]\n  subscribe_event_types = [\"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Prometheus Telemetry - HCL\nDESCRIPTION: This snippet illustrates how to configure telemetry parameters for Prometheus in Vault's configuration file. Key parameters include prometheus_retention_time and disable_hostname. It shows how to specify telemetry settings directly in the Vault configuration to control data retention and hostname usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  prometheus_retention_time = \"30s\"\n  disable_hostname = true\n}\n```\n\n----------------------------------------\n\nTITLE: Joining a Non-Voting Node via CLI\nDESCRIPTION: The shell command illustrates how to join a non-voting node to an existing Vault cluster using the CLI, thereby adding read scalability without changing the quorum requirements. Required dependencies include a Vault environment and appropriate permissions. The command specifies the leader API address and includes the -non-voter option, catering particularly to scenarios needing enhanced read performance. The command outputs confirmation upon the node joining as a non-voter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator raft join -non-voter https://node1.vault.local:8200\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine\nDESCRIPTION: Command to enable the database secrets engine in Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mssql.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Getting Credentials with Auto-Managed Service Account (Vault CLI)\nDESCRIPTION: This snippet demonstrates how to retrieve credentials using an automatically generated service account through the Vault CLI.  The `kubernetes_namespace` is set to 'test'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/creds/auto-managed-sa-role \\\n    kubernetes_namespace=test\nKey                          Value\n--                           -----\nlease_id                     kubernetes/creds/auto-managed-sa-role/cujRLYjKZUMQk6dkHBGGWm67\nlease_duration               768h\nlease_renewable              false\nservice_account_name         v-token-auto-man-1653001548-5z6hrgsxnmzncxejztml4arz\nservice_account_namespace    test\nservice_account_token        eyJHbGci0iJSUzI1Ni...\n```\n\n----------------------------------------\n\nTITLE: Authentication Response\nDESCRIPTION: Sample response for successful authentication containing the client token and associated metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auth\":{\n        \"client_token\":\"f33f8c72-924e-11f8-cb43-ac59d697597c\",\n        \"accessor\":\"0e9e354a-520f-df04-6867-ee81cae3d42d\",\n        \"policies\":[\n            \"default\",\n            \"dev\",\n            \"prod\"\n        ],\n        \"lease_duration\":2764800,\n        \"renewable\":true\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Successful Okta Authentication in Vault\nDESCRIPTION: This JSON snippet represents the response structure from a successful Okta authentication via the Vault API. It includes the client token, associated policies, and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"abcd1234-7890...\",\n    \"policies\": [\"admins\"],\n    \"metadata\": {\n      \"username\": \"mitchellh\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Kubernetes Service Account Token from Vault\nDESCRIPTION: Shell command to generate a Kubernetes service account token using a configured role. This sends the namespace and TTL parameters to the credentials endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/kubernetes/creds/default-role\n```\n\n----------------------------------------\n\nTITLE: Setting Event Permissions in Vault Policy (HCL)\nDESCRIPTION: HCL configuration for granting necessary permissions in the VaultAuth role policy to enable event notifications. Includes read, list, and subscribe capabilities for KV secrets and event subscriptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/instant-updates.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"<kv mount>/<kv secret path>\" {\n  capabilities = [\"read\", \"list\", \"subscribe\"]\n  subscribe_event_types = [\"*\"]\n}\n\npath \"sys/events/subscribe/kv*\" {\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to Create an SSH Role in Vault\nDESCRIPTION: Example of making a cURL request to create an SSH role in Vault. The request includes authentication via the X-Vault-Token header and sends payload data from a JSON file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Reading Key Information from KMS Provider - cURL Example\nDESCRIPTION: Sample cURL command for retrieving information about a key distributed to a KMS provider using the GET method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/keymgmt/kms/example-kms/key/example-key\n```\n\n----------------------------------------\n\nTITLE: Querying Sealwrap Rewrap Status in Vault\nDESCRIPTION: GET request to check the current status of seal rewrap process. Returns information about processed, failed, and succeeded entries along with running status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/sealwrap-rewrap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/sealwrap/rewrap\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"entries\": {\n      \"failed\": 0,\n      \"processed\": 30,\n      \"succeeded\": 30\n    },\n    \"is_running\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine with Maximum TTL in Vault\nDESCRIPTION: This command enables the database secrets engine with a maximum lease TTL of 30 minutes in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/enable.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -max-lease-ttl=30m database\n```\n\n----------------------------------------\n\nTITLE: Response Sample for Static Roles Listing in Vault\nDESCRIPTION: JSON response from Vault showing an array of static role names that are available for use. Only includes the role names without any configuration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"dev-static\", \"prod-static\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultConnection Custom Resource in YAML\nDESCRIPTION: Defines the configuration for connecting to a Vault server instance, including address and optional TLS settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultConnection\nmetadata:\n  namespace: vso-example\n  name: vault-connection\nspec:\n  # required configuration\n  # address to the Vault server.\n  address: http://vault.vault.svc.cluster.local:8200\n\n  # optional configuration\n  # HTTP headers to be included in all Vault requests.\n  # headers: []\n  # TLS server name to use as the SNI host for TLS connections.\n  # tlsServerName: \"\"\n  # skip TLS verification for TLS connections to Vault.\n  # skipTLSVerify: false\n  # the trusted PEM encoded CA certificate chain stored in a Kubernetes Secret\n  # caCertSecretRef: \"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto Join in Raft Storage with HCL\nDESCRIPTION: This HCL code demonstrates configuring auto join in a Raft storage setup for a Vault node, utilizing the go-discover tool for automatic discovery. It includes specifications for cloud provider settings and customizes the join scheme and port. Dependencies are cloud-specific parameters for go-discover and a functional Vault system. Key parameters include auto_join provider details, auto_join_scheme, and auto_join_port. The configuration facilitates the automatic joining of nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path    = \"/var/raft/\"\n  node_id = \"node3\"\n\n  retry_join {\n    auto_join = \"provider=aws region=eu-west-1 tag_key=vault tag_value=... access_key_id=... secret_access_key=...\"\n  }\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path    = \"/var/raft/\"\n  node_id = \"node3\"\n\n  retry_join {\n    auto_join = \"provider=aws region=eu-west-1 tag_key=vault tag_value=... access_key_id=... secret_access_key=...\"\n    auto_join_scheme = \"http\"\n    auto_join_port = 8201\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing static curl binary in Kubernetes as non-root\nDESCRIPTION: These shell commands demonstrate how to install a static binary of `curl` into the `vault` user's home directory inside a running Kubernetes pod when running as non-root. This approach avoids requiring root privileges or privilege escalation. It depends on the `kubectl` command-line tool and `wget`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.15.x.mdx#2025-04-14_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\n\"kubectl exec -ti <NAME> -- wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent with AppRole Authentication in Kubernetes\nDESCRIPTION: This example shows a Kubernetes Deployment that uses Vault Agent with AppRole authentication to retrieve database credentials. It requires a pre-created Kubernetes secret containing the AppRole secret ID and role ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-deployment\n  labels:\n    app: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/agent-extra-secret: 'approle-example'\n        vault.hashicorp.com/auth-type: 'approle'\n        vault.hashicorp.com/auth-path: 'auth/approle'\n        vault.hashicorp.com/auth-config-role-id-file-path: '/vault/custom/role-id'\n        vault.hashicorp.com/auth-config-secret-id-file-path: '/vault/custom/secret-id'\n        vault.hashicorp.com/agent-inject-secret-db-creds: 'database/creds/db-app'\n        vault.hashicorp.com/agent-inject-template-db-creds: |\n          {{- with secret \"database/creds/db-app\" -}}\n          postgres://{{ .Data.username }}:{{ .Data.password }}@postgres.postgres.svc:5432/wizard?sslmode=disable\n          {{- end }}\n        vault.hashicorp.com/role: 'my-role'\n        vault.hashicorp.com/tls-secret: 'vault-tls'\n        vault.hashicorp.com/ca-cert: '/vault/tls/ca.crt'\n    spec:\n      serviceAccountName: web\n      containers:\n        - name: web\n          image: alpine:latest\n          args:\n            ['sh', '-c', 'source /vault/secrets/config && <entrypoint script>']\n          ports:\n            - containerPort: 9090\n```\n\n----------------------------------------\n\nTITLE: Enabling Event Notifications Experiment in Vault Server via Shell\nDESCRIPTION: This shell command demonstrates how to start a Vault server with the events.alpha1 experiment enabled, which is necessary for versions where event notifications are disabled by default.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/events.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault server -experiment events.alpha1\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KMS Seal in Vault Configuration File (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the AWS KMS seal through the Vault configuration file by providing all required values. It includes settings for region, access key, secret key, KMS key ID, and endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/awskms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"awskms\" {\n  region     = \"us-east-1\"\n  access_key = \"AKIAIOSFODNN7EXAMPLE\"\n  secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n  kms_key_id = \"19ec80b0-dfdd-4d97-8164-c6examplekey\"\n  endpoint   = \"https://vpce-0e1bb1852241f8cc6-pzi0do8n.kms.us-east-1.vpce.amazonaws.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Writing Custom Metadata using API - Vault KV V2 - Shell\nDESCRIPTION: This example provides a complete curl command to write custom metadata using the API. It demonstrates how to use a JSON file containing custom metadata to send a POST request to a specified secret path in the KV V2 plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/custom-metadata.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                       \\\n    --request POST                           \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n    --data @metadata.json                    \\\n    ${VAULT_ADDR}/v1/shared/metadata/dev/square-api\n\n`/{plugin_mount_path}/metadata/{secret_path}` does not return data on success.\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Lookup Request\nDESCRIPTION: This curl command demonstrates how to lookup a secret ID using Vault's AppRole authentication method. It sends a POST request with the secret ID to the specified endpoint, including the Vault token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/approle/role/application1/secret-id/lookup\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Role with Self-Managed Password\nDESCRIPTION: Command to configure a static role that creates a dedicated connection to an existing database user with the self_managed_password parameter and rotation period setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/static-roles/my-role \\\n  db_name=\"my-postgresql-database\" \\\n  username=\"staticuser\" \\\n  self_managed_password=\"password\" \\\n  rotation_period=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent Annotations in Kubernetes\nDESCRIPTION: These annotations can be applied to Kubernetes resources to configure various aspects of Vault Agent behavior including authentication methods, TLS settings, timeouts, and connection parameters. Each annotation controls a specific aspect of the Vault Agent's configuration and communication with Vault servers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/annotations.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvault.hashicorp.com/auth-config: \"<auth-config-value>\"\\nvault.hashicorp.com/auth-path: \"auth/kubernetes\"\\nvault.hashicorp.com/auth-type: \"kubernetes\"\\nvault.hashicorp.com/auth-min-backoff: \"<backoff-value>\"\\nvault.hashicorp.com/auth-max-backoff: \"<backoff-value>\"\\nvault.hashicorp.com/agent-auto-auth-exit-on-err: \"<true|false>\"\\nvault.hashicorp.com/ca-cert: \"<path-to-ca-cert>\"\\nvault.hashicorp.com/ca-key: \"<path-to-ca-key>\"\\nvault.hashicorp.com/client-cert: \"<path-to-client-cert>\"\\nvault.hashicorp.com/client-key: \"<path-to-client-key>\"\\nvault.hashicorp.com/client-max-retries: \"2\"\\nvault.hashicorp.com/client-timeout: \"60s\"\\nvault.hashicorp.com/log-level: \"info\"\\nvault.hashicorp.com/log-format: \"standard\"\\nvault.hashicorp.com/namespace: \"<vault-namespace>\"\\nvault.hashicorp.com/proxy-address: \"<proxy-address>\"\\nvault.hashicorp.com/role: \"<vault-role>\"\\nvault.hashicorp.com/service: \"<vault-address>\"\\nvault.hashicorp.com/tls-secret: \"<k8s-secret-name>\"\\nvault.hashicorp.com/tls-server-name: \"<vault-server-name>\"\\nvault.hashicorp.com/tls-skip-verify: \"false\"\\nvault.hashicorp.com/agent-disable-idle-connections: \"<feature-list>\"\\nvault.hashicorp.com/agent-disable-keep-alives: \"<feature-list>\"\n```\n\n----------------------------------------\n\nTITLE: Decode with Format - HashiCorp Vault Command\nDESCRIPTION: This snippet decodes an encoded value using a specific decode format, 'last-four'. It extracts specified parts of the original input during the decoding process when used with the '/decode' endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transform/decode/payments/last-four value=9300-3376-4943-8903\nKey              Value\n---              -----\ndecoded_value    4444\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Role to Automatically Create Service Account and Role (Vault CLI)\nDESCRIPTION: This snippet demonstrates how to configure a Vault role to automatically create the service account and role binding, and also the Kubernetes role itself by specifying the `generated_role_rules` parameter with JSON rules. The Vault role will manage service accounts and kubernetes roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/roles/auto-managed-sa-and-role \\\n    allowed_kubernetes_namespaces=\"test\" \\\n    generated_role_rules='{\"rules\":[{\"apiGroups\":[\"\"],\"resources\":[\"pods\"],\"verbs\":[\"list\"]}]}'\n```\n\n----------------------------------------\n\nTITLE: Generating Database Credentials - Shell\nDESCRIPTION: This snippet illustrates how to generate new credentials for a specified role using the Vault API. It provides the output format and details about the generated credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodb.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           LEm-lcDJ2k0Hi05FvizN\nusername           v-vaultuser-my-role-ItceCZHlp0YGn90Puy9Z-1602542024\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating an Alphabet with cURL in Vault Transform API\nDESCRIPTION: Makes a POST request to create or update an alphabet in the Vault Transform Secrets Engine using a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_36\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/alphabet/example-alphabet\n```\n\n----------------------------------------\n\nTITLE: Delete Entity by Name - HTTP API - Shell\nDESCRIPTION: This cURL command deletes an entity and its aliases by its name from Vault. It requires a valid Vault token for authentication and uses the DELETE method. No payload is essential in this operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/entity/name/testentityname\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Secrets Engine with WIF Authentication\nDESCRIPTION: Command to configure the Azure secrets engine with workload identity federation, specifying subscription, tenant, client IDs and identity token audience.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write azure/config \\\n    subscription_id=$AZURE_SUBSCRIPTION_ID \\\n    tenant_id=$AZURE_TENANT_ID \\\n    client_id=$AZURE_CLIENT_ID \\\n    identity_token_audience=$TOKEN_AUDIENCE\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Node Role Authentication in Vault\nDESCRIPTION: Commands to create an AWS IAM authentication role in Vault for node role authentication. Includes both CLI and Terraform approaches.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/aws/role/<VAULT_AWS_NODE_ROLE> \\\n    auth_type=\"iam\" \\\n    policies=\"default\" \\\n    bound_iam_principal_arn=\"arn:aws:iam::<ACCOUNT_ID>:role/eks-nodes-<EKS_CLUSTER_NAME>\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_aws_auth_backend_role\" \"aws_node_role\" {\n  backend                  = \"auth/aws\"\n  role                     = <VAULT_AWS_NODE_ROLE>\n  auth_type                = \"iam\"\n  token_policies           = [\"default\"]\n  bound_iam_principal_arns = [\n    \"arn:aws:iam::<ACCOUNT_ID>:role/eks-nodes-<EKS_CLUSTER_NAME>\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Runtime in Vault\nDESCRIPTION: Command example showing how to register a new container plugin runtime using runc in Vault's plugin catalog.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin runtime register -type=container -oci_runtime=runc runc\n```\n\n----------------------------------------\n\nTITLE: Activating a Gated Feature in Vault\nDESCRIPTION: This shell request demonstrates how to activate a gated feature (in this case 'secrets-sync') using an authenticated PUT request. Once activated, a feature cannot be deactivated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/activation-flags.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request PUT \\\n    --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n    http://127.0.0.1:8200/v1/sys/activation-flags/secrets-sync/activate\n```\n\n----------------------------------------\n\nTITLE: Reading Secret with MFA Requirement\nDESCRIPTION: This command attempts to read a secret in Vault, triggering an Okta push notification for MFA validation before granting access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ vault read secret/foo\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Event Check Command\nDESCRIPTION: Shell command to check for warning events related to VaultAuth resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl events --types=Warning -n admin --for vaultauths.secrets.hashicorp.com/default -o json\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Secrets Engine in Vault\nDESCRIPTION: Command to enable a version 1 KV secrets store in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -version=1 kv\n```\n\n----------------------------------------\n\nTITLE: Registering Venafi Plugin in Vault's System Catalog - Shell Script\nDESCRIPTION: This snippet registers the Venafi PKI backend plugin in Vault's system catalog, providing the necessary SHA-256 checksum and command for Vault to execute the plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write sys/plugins/catalog/secret/venafi-pki-backend \\\nsha_256=\"${SHA256}\" command=\"venafi-pki-backend\"\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy from File\nDESCRIPTION: Command to create a new policy named 'my-policy' by reading contents from a local HCL file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy write my-policy ./my-policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring Nomad Access in Vault\nDESCRIPTION: Configures connection details for Vault to interact with Nomad, including server address, authentication token, and optional TLS settings\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/nomad.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"address\": \"http://127.0.0.1:4646\",\n  \"token\": \"adha...\",\n  \"max_token_name_length\": 256\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/nomad/config/access\n```\n\n----------------------------------------\n\nTITLE: Creating a Cryptographic Key in Vault\nDESCRIPTION: API endpoint for creating a named cryptographic key with specified type and parameters. Supports various key types including RSA and ECDSA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"rsa-2048\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/keymgmt/key/example-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault EKM Provider JSON Configuration File\nDESCRIPTION: Configuration file structure for the Vault EKM Provider, stored at C:\\ProgramData\\HashiCorp\\Transit Vault EKM Provider\\config.json. Includes settings for Vault server connection, logging, namespace, and mount paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/configuration.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vaultApiBaseUrl\": \"https://vault.example.com:8200\",\n  \"enableTrace\": false,\n  \"namespace\": \"\",\n  \"appRoleMountPath\": \"approle\",\n  \"transitMountPath\": \"transit\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Auto-Auth Sinks with Wrapping (HCL)\nDESCRIPTION: Example of configuring Vault auto-auth with an AppRole method and a file sink using wrapped sinks block in HCL format. Demonstrates sink configuration with file type and path specification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nauto_auth {\n  method {\n    type = \"approle\"\n\n    config = {\n      role_id_file_path = \"/etc/vault/roleid\"\n      secret_id_file_path = \"/etc/vault/secretid\"\n    }\n  }\n\n  sinks {\n    sink {\n      type = \"file\"\n\n      config = {\n        path = \"/tmp/file-foo\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Mounted Secret Configuration\nDESCRIPTION: Helm command to install Vault with a mounted secret configuration file. This approach mounts the sensitive configuration as a volume and adds it to Vault's startup arguments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n  --set='server.volumes[0].name=userconfig-vault-storage-config' \\\n  --set='server.volumes[0].secret.defaultMode=420' \\\n  --set='server.volumes[0].secret.secretName=vault-storage-config' \\\n  --set='server.volumeMounts[0].mountPath=/vault/userconfig/vault-storage-config' \\\n  --set='server.volumeMounts[0].name=userconfig-vault-storage-config' \\\n  --set='server.volumeMounts[0].readOnly=true' \\\n  --set='server.extraArgs=-config=/vault/userconfig/vault-storage-config/config.hcl'\n```\n\n----------------------------------------\n\nTITLE: Creating Systemd Service File for Vault on Linux\nDESCRIPTION: Creates a systemd service definition for Vault that configures secure execution parameters, proper user/group permissions, and startup commands pointing to the Vault configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo tee /lib/systemd/system/vault.service <<EOF\n[Unit]\nDescription=\"HashiCorp Vault\"\nDocumentation=\"https://developer.hashicorp.com/vault/docs\"\nConditionFileNotEmpty=\"${VAULT_CONFIG}/vault.hcl\"\n\n[Service]\nUser=vault\nGroup=vault\nSecureBits=keep-caps\nAmbientCapabilities=CAP_IPC_LOCK\nCapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK\nNoNewPrivileges=yes\nExecStart=${VAULT_BINARY} server -config=${VAULT_CONFIG}/vault.hcl\nExecReload=/bin/kill --signal HUP\nKillMode=process\nKillSignal=SIGINT\n\n[Install]\nWantedBy=multi-user.target\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scraping - YAML\nDESCRIPTION: This snippet provides an example configuration for Prometheus to scrape telemetry data from Vault. It specifies the metrics path, security configurations like TLS and bearer tokens, and static targets for scraping Vault metrics. Required settings include a custom metrics path and a valid Vault bearer token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# prometheus.yml\nscrape_configs:\n  - job_name: 'vault'\n    metrics_path: \"/v1/sys/metrics\"\n    scheme: https\n    tls_config:\n      ca_file: your_ca_here.pem\n    bearer_token: \"your_vault_token_here\"\n    static_configs:\n    - targets: ['your_vault_server_here:8200']\n```\n\n----------------------------------------\n\nTITLE: Enabling a New Auth Method in Vault\nDESCRIPTION: This snippet shows how to enable a new auth method using a POST request to the `/sys/auth/:path` endpoint. It requires sudo capability and allows configuration of various parameters for the auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/auth.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"github\",\n  \"description\": \"Login with GitHub\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/auth/my-auth\n```\n\n----------------------------------------\n\nTITLE: Sending MongoDB Atlas Configuration Request via cURL\nDESCRIPTION: Shell command using cURL to send a configuration request to Vault's database secret engine. The request configures a MongoDB Atlas connection using a payload file and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodbatlas.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/mongodbatlas\n```\n\n----------------------------------------\n\nTITLE: Tuning the PKI secrets engine's TTL using Vault CLI\nDESCRIPTION: Increase the maximum lease TTL for the PKI secrets engine to one year, up from the default 30 days. Dependencies include the Vault CLI and the `pki` secrets engine already being enabled. This command sets a global maximum TTL for certificates managed by this engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/setup.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets tune -max-lease-ttl=8760h pki\nSuccess! Tuned the secrets engine at: pki/\n```\n\n----------------------------------------\n\nTITLE: Creating a GCE-Type Role\nDESCRIPTION: This command defines a GCE-type role in the Vault GCP auth method. It sets parameters for policies, project, zone, labels, and service accounts. The role can authenticate based on these configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/gcp/role/my-gce-role \\\n    type=\\\"gce\\\" \\\n    policies=\\\"dev,prod\\\" \\\n    bound_projects=\\\"my-project1,my-project2\\\" \\\n    bound_zones=\\\"us-east1-b\\\" \\\n    bound_labels=\\\"foo:bar,zip:zap\\\" \\\n    bound_service_accounts=\\\"my-service@my-project.iam.gserviceaccount.com\\\"\n```\n\n----------------------------------------\n\nTITLE: Vault Token Helper Script (Ruby)\nDESCRIPTION: This snippet provides an example token helper written in Ruby. It manages tokens in a JSON file (`.vault_tokens`) located in the user's home directory. It handles the `get`, `store`, and `erase` commands to retrieve, save, and delete tokens, similar to the Shell and Powershell examples.  It requires the `VAULT_ADDR` environment variable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token-helper.mdx#2025-04-14_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n#!/usr/bin/env ruby\n\nrequire 'json'\n\n// We index the token according to the Vault server address\n// so the VAULT_ADDR variable is required \nunless ENV['VAULT_ADDR']\n  STDERR.puts \"No VAULT_ADDR environment variable set. Set it and run me again!\"\n  exit 100\nend\n\n// If the token file does not exist, create and initialize the hashmap\nbegin\n  tokens = JSON.parse(File.read(\"#{ENV['HOME']}/.vault_tokens\"))\nrescue Errno::ENOENT => e\n  # file doesn't exist so create a blank hash for it\n  tokens = {}\nend\n\n// Get the first command line argument\ncase ARGV.first\nwhen 'get'\n  // Write the token to stdout if it exists\n  print tokens[ENV['VAULT_ADDR']] if tokens[ENV['VAULT_ADDR']]\n  exit 0\nwhen 'store'\n  // Read the token from stdin\n  tokens[ENV['VAULT_ADDR']] = STDIN.read\nwhen 'erase'\n  // Delete the token entry if it exists\n  tokens.delete!(ENV['VAULT_ADDR'])\nend\n\n\n// Update the token file\nFile.open(\"#{ENV['HOME']}/.vault_tokens\", 'w') { |file| file.write(tokens.to_json) }\n```\n\n----------------------------------------\n\nTITLE: MySQL Database Configuration API Request\nDESCRIPTION: cURL command demonstrating how to send a configuration request to the Vault API endpoint for MySQL database setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mysql-maria.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/mysql\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Field from KV Store\nDESCRIPTION: Command to read a specific field from a key/value pair at a given path. Uses the -field flag to target individual values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/read-data.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault kv get          \\\n   -mount <mount_path>  \\\n   -field <field_name>  \\\n   <secret_path>\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Storage Configuration in HCL\nDESCRIPTION: Basic configuration for using Consul as Vault's storage backend with default address and path settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request for Audit Hash Calculation in Vault\nDESCRIPTION: Shell command example showing how to make a POST request to the /sys/audit-hash endpoint using cURL. This includes the Vault token for authentication and references a payload file containing the input string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit-hash.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/audit-hash/example-audit\n```\n\n----------------------------------------\n\nTITLE: Configuring Sentinel Stanza in HCL\nDESCRIPTION: Example configuration for enabling additional Sentinel modules in Vault. This snippet demonstrates how to enable the HTTP module, which is disabled by default due to security implications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/sentinel.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsentinel {\n  additional_enabled_modules = [\"http\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Affinity and Anti-Affinity\nDESCRIPTION: Shows how to set pod anti-affinity to distribute Vault pods across different nodes for high availability\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\naffinity: |\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n      matchLabels:\n        app.kubernetes.io/name: {{ template \"vault.name\" . }}\n        app.kubernetes.io/instance: \"{{ .Release.Name }}\"\n        component: server\n      topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub using Vault CLI\nDESCRIPTION: This snippet demonstrates how to authenticate to Vault using a GitHub personal access token via the Vault CLI. It uses the `vault login` command with the `github` method and the `token` parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=github token=\"MY_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Tidy Identity Access List Entries using Vault API with curl\nDESCRIPTION: This snippet demonstrates how to tidy the identity access list based on the expiration time of entries and a safety buffer using the Vault API. It sends a POST request to the `/auth/aws/tidy/identity-accesslist` endpoint, which requires a Vault token. The `safety_buffer` parameter, defaulting to 72h, defines the extra time to wait before removing expired entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_52\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/aws/tidy/identity-accesslist\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dynamic Credentials - Bash\nDESCRIPTION: This command sets up dynamic credentials in Vault using specified LDIF files for creation, deletion, and rollback, along with TTL configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write ldap/role/dynamic-role \\\n  creation_ldif=@/path/to/creation.ldif \\\n  deletion_ldif=@/path/to/deletion.ldif \\\n  rollback_ldif=@/path/to/rollback.ldif \\\n  default_ttl=1h \\\n  max_ttl=24h\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading PingID MFA Method Configuration\nDESCRIPTION: This JSON response shows the structure of the data returned when reading a PingID MFA method configuration. It includes various settings such as URLs, mount accessor, and method type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/pingid.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"use_signature\": true,\n    \"idp_url\": \"https://idpxnyl3m.pingidentity.com/pingid\",\n    \"admin_url\": \"https://idpxnyl3m.pingidentity.com/pingid\",\n    \"authenticator_url\": \"https://authenticator.pingone.com/pingid/ppm\",\n    \"mount_accessor\": \"auth_userpass_1793464a\",\n    \"name\": \"ping\",\n    \"org_alias\": \"181459b0-9fb1-4938-8c86...\",\n    \"type\": \"pingid\",\n    \"username_format\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Migration Configuration in HCL\nDESCRIPTION: This HCL configuration file (migrate.hcl) defines the source (Consul) and destination (Raft) storage configurations for the Vault migration process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migrate-consul-storage.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nstorage_source \"consul\" {\naddress = \"127.0.0.1:8500\"\npath\t= \"vault\"\n}\n\nstorage_destination \"raft\" {\n  path = \"/vault/raft/\"\n  node_id = \"node_1\"\n}\n\ncluster_addr = \"https://10.0.101.22:8201\"\n```\n\n----------------------------------------\n\nTITLE: Reading KV Data Using Vault API\nDESCRIPTION: cURL command to read all key/value pairs from a secret path using the Vault HTTP API. Requires authentication token and proper endpoint configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/read-data.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl                                       \\\n   --request GET                             \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n   ${VAULT_ADDR}/v1/<plugin_mount_path>/data/<secret_path>\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Provider Class for Vault in Kubernetes\nDESCRIPTION: This YAML snippet defines a SecretProviderClass for the Vault CSI Provider. It specifies the provider as 'vault', sets the role name for authentication, and defines objects to retrieve secrets from Vault paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets-store.csi.x-k8s.io/v1alpha1\nkind: SecretProviderClass\nmetadata:\n  name: vault-db-creds\nspec:\n  provider: vault\n  parameters:\n    roleName: 'app'\n    objects: |\n      - objectName: \"dbUsername\"\n        secretPath: \"database/creds/db-app\"\n        secretKey: \"username\"\n      - objectName: \"dbPassword\"\n        secretPath: \"database/creds/db-app\"\n        secretKey: \"password\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Retrieved Secret in Bash\nDESCRIPTION: This snippet shows how to verify the retrieved secret in Bash by using jq to extract the data from the JSON response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_45\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cat secrets.json | jq '.data.data'\n```\n\n----------------------------------------\n\nTITLE: AWS Secrets Manager Configuration - JSON Payload\nDESCRIPTION: JSON payload for creating/updating an AWS Secrets Manager destination with access credentials and network restrictions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_key_id\": \"AKI***\",\n    \"secret_access_key\": \"ktri****\",\n    \"region\": \"us-west-1\",\n    \"allowed_ipv4_addresses\": [\n        \"10.0.100.1/24\",\n        \"10.0.200.1/16\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Auth with Identity Provider Metadata URL\nDESCRIPTION: Command to configure the SAML authentication method using an Identity Provider's metadata URL. This establishes the trust relationship between Vault and the SAML IdP.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/saml/config \\\n   default_role=\"admin\" \\\n   idp_metadata_url=\"https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml/metadata\" \\\n   entity_id=\"https://my.vault/v1/auth/saml\" \\\n   acs_urls=\"https://my.vault/v1/auth/saml/callback\"\n```\n\n----------------------------------------\n\nTITLE: Listing TOTP MFA methods using HTTP API - Shell\nDESCRIPTION: This shell command enumerates all TOTP MFA methods visible in the current namespace or parent namespaces. The 'LIST' operation is used with a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/totp\n```\n\n----------------------------------------\n\nTITLE: Creating AWS IRSA Authentication Role in Vault\nDESCRIPTION: Commands to create an AWS IAM authentication role in Vault for IRSA (IAM Roles for Service Accounts) configuration. Includes both CLI and Terraform approaches.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/aws/role/<VAULT_AWS_IRSA_ROLE> \\\n    auth_type=\"iam\" \\\n    policies=\"default\" \\\n    bound_iam_principal_arn=\"arn:aws:iam::<ACCOUNT_ID>:role/<IAM_IRSA_ROLE>\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_aws_auth_backend_role\" \"aws_irsa_role\" {\n  backend                  = \"auth/aws\"\n  role                     = <VAULT_AWS_IRSA_ROLE>\n  auth_type                = \"iam\"\n  token_policies           = [\"default\"]\n  bound_iam_principal_arns = [\n    \"arn:aws:iam::<ACCOUNT_ID>:role/<IAM_IRSA_ROLE>\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting KMIP Role in Shell\nDESCRIPTION: This shell command deletes a specific KMIP role within a scope by sending a DELETE request to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole\n```\n\n----------------------------------------\n\nTITLE: Creating KMIP Role via API in Shell\nDESCRIPTION: This shell command creates a new KMIP role within a specific scope by sending a POST request with a JSON payload to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole\n```\n\n----------------------------------------\n\nTITLE: Login to Vault Using Development Role\nDESCRIPTION: This command is used to authenticate to Vault with the development role. It utilizes instance principal credentials to perform the login through the OCI Auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=oci auth_type=instance role=devrole\n```\n\n----------------------------------------\n\nTITLE: Defining HCPAuth Resource in YAML\nDESCRIPTION: This YAML snippet defines the structure of the HCPAuth resource, which is used for configuring authentication to HCP (HashiCorp Cloud Platform). It includes specifications for organization ID, project ID, allowed namespaces, and authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: HCPAuth\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`.\nspec:\n  organizationID: string\n  projectID: string\n  allowedNamespaces:\n    - string\n  method: servicePrincipal\n  servicePrincipal:\n    secretRef: string\n```\n\n----------------------------------------\n\nTITLE: Writing Docker Config Secret to Vault using Shell\nDESCRIPTION: This snippet demonstrates how to write a Docker configuration secret to Vault using the command line. It stores the contents of the local Docker config file as a JSON string in Vault's KV store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/examples.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Write the secret to Vault:\n$ vault kv put kvv2/docker/config .dockerconfigjson=`cat ~/.docker/config.json`\n```\n\n----------------------------------------\n\nTITLE: GCP Secrets Engine Configuration Command\nDESCRIPTION: This shell command is used to configure the Google Cloud secrets engine in Vault, allowing access to GCP identities and service accounts through the plugin WIF. The command sets the identity token audience and service account email, facilitating integration with GCP services.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write gcp/config \\\n  identity_token_audience=\"//iam.googleapis.com/projects/410449834127/locations/global/workloadIdentityPools/vault-gcp-secrets-43777a63/providers/vault-gcp-secrets-wif-provider\" \\\n  service_account_email=\"vault-plugin-wif-secrets@hc-b712f250b4e04cacbadd258a90b.iam.gserviceaccount.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Readiness Probe\nDESCRIPTION: YAML configuration for setting up a HTTP readiness probe for Vault pods. This defines health check parameters including path, thresholds, and timing to determine when a Vault pod is ready to serve requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessProbe:\n  enabled: true\n  path: /v1/sys/health?standbyok=true\n  failureThreshold: 2\n  initialDelaySeconds: 5\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\n  port: 8200\n```\n\n----------------------------------------\n\nTITLE: Creating Token with Policies and Limits using Write Command\nDESCRIPTION: This example shows how to create a token with specific TTL (8 hours), use limit (3), and attached policies ('admin' and 'secops') using the general write command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/token/create policies=\"admin\" policies=\"secops\" ttl=8h num_uses=3\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Aliases Response (JSON)\nDESCRIPTION: This JSON response shows the structure returned when listing entity aliases. It provides a `key_info` object that maps alias IDs to their associated data (canonical ID, custom metadata, mount information, etc.) and a `keys` array that contains a list of all alias IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"key_info\": {\n            \"35405f3c-884a-a3ff-4176-bac57f220811\": {\n                \"canonical_id\": \"0c34f097-6313-9597-3b22-91e34072ad28\",\n                \"custom_metadata\": null,\n                \"local\": false,\n                \"mount_accessor\": \"auth_jwt_e47c5220\",\n                \"mount_path\": \"auth/tfc_jwt/\",\n                \"mount_type\": \"jwt\",\n                \"name\": \"app-alias-1\"\n            },\n            \"4065d8c7-4fa6-db9d-e190-f9644c09638a\": {\n                \"canonical_id\": \"21c6f2bf-b9b0-db44-242f-18bf76cb9ff0\",\n                \"custom_metadata\": null,\n                \"local\": false,\n                \"mount_accessor\": \"auth_ns_token_79c4d932\",\n                \"mount_path\": \"auth/token/\",\n                \"mount_type\": \"ns_token\",\n                \"name\": \"app-alias-2\"\n            }\n        },\n        \"keys\": [\n            \"35405f3c-884a-a3ff-4176-bac57f220811\",\n            \"4065d8c7-4fa6-db9d-e190-f9644c09638a\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Monitoring Migration Status in Shell\nDESCRIPTION: Sample shell command to send a GET request to the /sys/remount/status endpoint. Uses curl to retrieve the status of a specific migration using its migration_id.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/remount.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/remount/status/ef3ba21c-8be8-4e5f-8d00-cb46a532c665\n```\n\n----------------------------------------\n\nTITLE: Vault ACL Policy for Secrets Sync Feature\nDESCRIPTION: This ACL policy configures access for the Vault Secrets Sync feature. It grants full access to the sync feature, read access to a specified path, and denies access to a specific secret, demonstrating how to control access to secrets during synchronization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n\"# Allow full access to the sync feature\npath \\\"sys/sync/*\\\" {\n  capabilities = [\\\"read\\\", \\\"list\\\", \\\"create\\\", \\\"update\\\", \\\"delete\\\"]\n}\n\n# Allow read access to the secret mount path/to\npath \\\"path/to/*\\\" {\n  capabilities = [\\\"read\\\"]\n}\n\n# Deny access to a specific secret\npath \\\"path/to/data/my-secret-1\\\" {\n  capabilities = [\\\"deny\\\"]\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in Default Vault Connection\nDESCRIPTION: Example of configuring custom headers to be included in all Vault requests when using the default Vault connection, showing how to format the header configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  X-vault-something: \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Sample Role-Based ACL Policy for CMPv2\nDESCRIPTION: This snippet presents a sample role-based ACL policy allowing access to the CMP path specific to a role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cmpv2.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npath \"pki/roles/my-role-name/cmp\" {\\\n  capabilities=[\"update\", \"create\"]\\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HCP Terraform Connection in Vault (Shell)\nDESCRIPTION: This command configures Vault to connect and authenticate to HCP Terraform using an API token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write terraform/config \\\n    token=Vhz7652ba4c-0f6e-8e75-5724-5e083d72cfe4\n```\n\n----------------------------------------\n\nTITLE: SSH Configuration File Update\nDESCRIPTION: This snippet displays the modification needed in the `/etc/ssh/sshd_config` file to trust certificates signed by Vault. Adding the `TrustedUserCAKeys` option allows the SSH server to trust client certificates signed by the specified CA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n# /etc/ssh/sshd_config\n# ...\nTrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Role for Project API Key\nDESCRIPTION: This snippet demonstrates the creation of a Vault role for a Programmatic API Key at the project level. It sets the project ID and assigns the relevant roles to manage permissions effectively.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/mongodbatlas.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write mongodbatlas/roles/test \\\n    project_id=5cf5a45a9ccf6400e60981b6 \\\n    roles=GROUP_DATA_ACCESS_READ_ONLY\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Role for Redis ElastiCache\nDESCRIPTION: Command to create a static role that maps a name in Vault to an existing Redis ElastiCache user, with a specified rotation period for credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/rediselasticache.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/static-roles/my-static-role \\\n    db_name=\"my-redis-elasticache-cluster\" \\\n    username=\"my-existing-redis-user\" \\\n    rotation_period=5m\nSuccess! Data written to: database/static-roles/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Creating AWS KMS Credentials Secret\nDESCRIPTION: Command to create a Kubernetes secret containing AWS credentials for KMS auto-unseal\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl create secret generic kms-creds \\\n    --from-literal=AWS_ACCESS_KEY_ID=\"${AWS_ACCESS_KEY_ID?}\" \\\n    --from-literal=AWS_SECRET_ACCESS_KEY=\"${AWS_SECRET_ACCESS_KEY?}\"\n```\n\n----------------------------------------\n\nTITLE: Querying Vault Usage Metrics via CLI\nDESCRIPTION: This command retrieves usage metrics for the current billing period using the Vault CLI. It shows client usage metrics for each namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/client-count/usage-metrics.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator usage\n```\n\n----------------------------------------\n\nTITLE: Configuring a Role with Existing Service Principal\nDESCRIPTION: Command to configure a Vault role that uses an existing Azure service principal, with a TTL of one hour.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write azure/roles/my-role \\\n    application_object_id=<existing_app_obj_id> \\\n    ttl=1h\n```\n\n----------------------------------------\n\nTITLE: Patching KV Secret from a File\nDESCRIPTION: This command shows how to use 'vault kv patch' to update a secret's data using content from a specified file 'data.json'. The '@' prefix indicates the use of a file, which must be accessible from the command line interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/patch.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv patch -mount=secret creds @data.json\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Vault Policy in Terraform\nDESCRIPTION: Provides an example of how to define a custom Vault policy in a Terraform configuration file. This snippet shows how to create a policy for a specific secret engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_policy\" \"dev_team_policy\" {\nname = \"dev_team\"\n\npolicy = <<EOT\n path vault_mount.dev_keys_plugin.path {\n   capabilities = [\"create\", \"update\"]\n }\n EOT\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate Signing Response in JSON\nDESCRIPTION: Sample JSON response from the certificate signing API, showing the signed certificate, issuing CA, certificate chain, and serial number.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"pki/sign/test/7ad6cfa5-f04f-c62a-d477-f33210475d05\",\n  \"renewable\": false,\n  \"lease_duration\": 21600,\n  \"data\": {\n    \"expiration\": \"1654105687\",\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\",\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\"\n    ],\n    \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:58\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Userpass Auth Method in Vault\nDESCRIPTION: This snippet shows how to disable the userpass authentication method in Vault using the 'auth disable' subcommand.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth disable userpass/\nSuccess! Disabled the auth method (if it existed) at: userpass/\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault Usage Metrics via CLI\nDESCRIPTION: This command enables usage metrics tracking in Vault using the CLI. It allows setting the retention period for activity logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/client-count/usage-metrics.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/internal/counters/config enabled=enable\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/internal/counters/config \\\n    enabled=enable \\\n    retention_months=12\n```\n\n----------------------------------------\n\nTITLE: Example of a Populated Identity Token Template in Vault\nDESCRIPTION: This JSON shows how the template parameters are populated with actual entity data when a token is requested. The example includes color from metadata, username from an alias, group memberships, and a timestamp.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/identity-token.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"color\": \"green\",\n  \"userinfo\": {\n     \"username\": \"bob\",\n     \"groups\": [\"web\", \"engr\", \"default\"]\n  },\n  \"nbf\": 1561411915\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Auth Methods in Vault\nDESCRIPTION: This snippet demonstrates how to list all enabled auth methods using a GET request to the `/sys/auth` endpoint. It requires an authentication token and returns a JSON response with details of each enabled auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/auth.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/auth\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"9bc0fab8-d65c-3961-afe6-d05f50c5fd22\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"github/\": {\n      \"accessor\": \"auth_github_badd7fd0\",\n      \"config\": {\n        \"default_lease_ttl\": 0,\n        \"force_no_cache\": false,\n        \"max_lease_ttl\": 0,\n        \"token_type\": \"default-service\"\n      },\n      \"deprecation_status\": \"supported\",\n      \"description\": \"\",\n      \"external_entropy_access\": false,\n      \"local\": false,\n      \"options\": null,\n      \"plugin_version\": \"\",\n      \"running_plugin_version\": \"v1.12.0+builtin.vault\",\n      \"running_sha256\": \"\",\n      \"seal_wrap\": false,\n      \"type\": \"github\",\n      \"uuid\": \"4b42d1a4-0a0d-3c88-ae90-997e0c8b41be\"\n    },\n    \"token/\": {\n      \"accessor\": \"auth_token_bd90f507\",\n      \"config\": {\n        \"default_lease_ttl\": 0,\n        \"force_no_cache\": false,\n        \"max_lease_ttl\": 0,\n        \"token_type\": \"default-service\"\n      },\n      \"description\": \"token based credentials\",\n      \"external_entropy_access\": false,\n      \"local\": false,\n      \"options\": null,\n      \"plugin_version\": \"\",\n      \"running_plugin_version\": \"v1.12.0+builtin.vault\",\n      \"running_sha256\": \"\",\n      \"seal_wrap\": false,\n      \"type\": \"token\",\n      \"uuid\": \"e162baec-721b-7657-7913-c960df402f8a\"\n    }\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault Destination in Vault\nDESCRIPTION: A sample JSON payload for creating an Azure Key Vault destination in Vault's secrets sync system. Specifies key vault URI, tenant ID, client credentials, and allowed IPv6 addresses for secure connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"key_vault_uri\": \"https://keyvault-1234abcd.vault.azure.net\",\n    \"tenant_id\": \"uuid\",\n    \"client_id\": \"uuid\",\n    \"client_secret\": \"90y8Q***\",\n    \"allowed_ipv6_addresses\": [\n        \"fe80::0/120\",\n        \"fe80::100/120\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a RADIUS User's Properties with cURL\nDESCRIPTION: This command shows how to retrieve the properties of an existing RADIUS user, including their assigned policies, using a GET request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/radius/users/test-user\n```\n\n----------------------------------------\n\nTITLE: Write Kubernetes Configuration (Vault)\nDESCRIPTION: This code snippet demonstrates how to configure the Vault Kubernetes secrets engine using a shell command. It sends a POST request to the `/kubernetes/config` endpoint with the configuration data provided in the `payload.json` file. Requires `curl` and a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/kubernetes/config\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth2 Access Tokens from Vault - Shell\nDESCRIPTION: Command to read an OAuth2 access token from Vault for a configured roleset, static account, or impersonated account. The results include token details and time-to-live. Prerequisite: proper setup of roleset or account in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read gcp/roleset/my-token-roleset/token\n\nKey                Value\n---                -----\nexpires_at_seconds    1537402548\ntoken                 ya29.c.ElodBmNPwHUNY5gcBpnXcE4ywG4w1k...\ntoken_ttl             3599\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read gcp/static-account/my-token-account/token\n\nKey                Value\n---                -----\nexpires_at_seconds    1672231587\ntoken                 ya29.c.b0Aa9VdykAdYoW9S1ImtPZykF_oTi9...\ntoken_ttl             3599\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read gcp/impersonated-account/my-token-impersonate/token\n\nKey                Value\n---                -----\nexpires_at_seconds    1671667844\ntoken                 ya29.c.b0AT7lpjBRmO7ghBEyMV18evd016hq...\ntoken_ttl             59m59s\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl -H \"Authorization: Bearer ya29.c.ElodBmNPwHUNY5gcBpnXcE4ywG4w1k...\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Configuration for PKI Engine\nDESCRIPTION: JSON payload for configuring PKI cluster settings, including the mount path URL and AIA distribution point URL used for certificate and CRL distribution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_102\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"https://...\",\n  \"aia_path\": \"http://...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Chain Update Commands in Vault\nDESCRIPTION: This set of commands in shell scripting language updates the manual chain field for cross-signed certificate intermediates. By modifying the manual chain, it enables complete reporting of the cross-signed chain during the issuance of leaf certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/rotation-primitives.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault patch pki/issuer/intA manual_chain=self,rootA,intB,rootB\n$ vault patch pki/issuer/intB manual_chain=self,rootB,intA,rootA\n```\n\n----------------------------------------\n\nTITLE: Logging in with Kerberos Token in curl\nDESCRIPTION: This example illustrates how to log into Vault using a Kerberos SPNEGO token with curl. The token must be included in the Authorization header as a base64 encoded string. The server processes the login request and authenticates the user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \\\"Authorization: Negotiate YIIFSw...sWw\\\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/kerberos/login\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting SSH Server Logs with Shell\nDESCRIPTION: Use shell commands to filter SSH logs with grep for troubleshooting connection issues. This focuses on enhancing log visibility for SSH-specific events.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ tail -f /var/log/auth.log | grep --line-buffered \"sshd\"\n```\n\n----------------------------------------\n\nTITLE: Sending Okta Login Request via cURL\nDESCRIPTION: Shell command to authenticate a user with the Okta auth method using POST request with login credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/okta/login/fred\n```\n\n----------------------------------------\n\nTITLE: Viewing Vault Server Overload Error Response\nDESCRIPTION: An example of the 503 Service Unavailable error returned when Vault Enterprise rejects a request due to server overload. The error shows that a token creation failed because the server was overloaded and suggests trying again later.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/adaptive-overload-protection/vault-server-temporarily-overloaded.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nError authenticating: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/auth/userpass/login/foo\nCode: 503. Errors:\n\n* failed to create token: failed to persist accessor index entry: overloaded, try again later: internal error\n```\n\n----------------------------------------\n\nTITLE: Configuring HCP Vault Secrets App Sync in Kubernetes\nDESCRIPTION: Example Kubernetes configuration demonstrating how to set up HCP authentication and HCP Vault Secrets App synchronization. This configuration creates an HCPAuth resource for authentication and an HCPVaultSecretsApp resource to sync secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/hvs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: HCPAuth\nmetadata:\n  name: hcp-auth\n  namespace: vso-example-ns\nspec:\n  organizationID: xxxxxxxx-76e9-4e17-b5e9-xxxxxxxx4c33\n  projectID: xxxxxxxx-bd16-443f-a266-xxxxxxxxcb52\n  servicePrincipal:\n    secretRef: vso-app-sp\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: HCPVaultSecretsApp\nmetadata:\n  name: vso-app\n  namespace: vso-example-ns\nspec:\n  appName: vso-app\n  hcpAuthRef: hcp-auth\n  destination:\n    create: true\n    name: vso-app-secret\n```\n\n----------------------------------------\n\nTITLE: Authenticating via CLI with Okta in Vault\nDESCRIPTION: This command demonstrates how to authenticate with Vault using the Okta auth method via the command line interface. It requires the user's Okta username.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=okta username=my-username\n```\n\n----------------------------------------\n\nTITLE: Signature Response Format\nDESCRIPTION: JSON response from the Vault Transit signing API showing the generated signature in Vault's versioned format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_58\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"signature\": \"vault:v1:MEUCIQCyb869d7KWuA0hBM9b5NJrmWzMW3/pT+0XYCM9VmGR+QIgWWF6ufi4OS2xo1eS2V5IeJQfsi59qeMWtgX0LipxEHI=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to HCP interactively using vault hcp connect in Shell\nDESCRIPTION: This snippet demonstrates how to use the 'vault hcp connect' command to authenticate interactively to the HashiCorp Cloud Platform. This process initiates a login using the default web browser, requiring user interaction to complete authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/hcp/connect.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault hcp connect\nThe default web browser has been opened at <auth_url>. Please continue the login in the web browser.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device in Vault CLI\nDESCRIPTION: Shows how to enable a file audit device using the Vault CLI with inline argument passing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable file file_path=\"/var/log/vault.log\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud KMS Secrets Engine - HCL\nDESCRIPTION: This HCL policy defines the capabilities for configuring the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/config\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling the Database Secrets Engine in Vault\nDESCRIPTION: Command to enable the database secrets engine in Vault. This is a prerequisite step before configuring the MongoDB Atlas plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodbatlas.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Logging In with TLS Certificate Method\nDESCRIPTION: This snippet demonstrates how to log in to HashiCorp Vault using a TLS certificate. It includes important parameters for the request and describes the requirements for successful authentication, including certificate constraints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\ \n    --request POST \\ \n    --cacert vault-ca.pem \\ \n    --cert cert.pem \\ \n    --key key.pem \\ \n    --data @payload.json \\ \n    https://127.0.0.1:8200/v1/auth/cert/login\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"cert1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating via CLI with Metadata Retrieval - HashiCorp Vault\nDESCRIPTION: This snippet shows how to authenticate to Vault via CLI while dynamically retrieving the necessary Azure metadata for the request. It utilizes curl to fetch Azure instance metadata and jq to parse the JSON response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/azure/login role=\"dev-role\" \\\n     jwt=\"$(curl -s 'http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https%3A%2F%2Fmanagement.azure.com%2F' -H Metadata:true | jq -r '.access_token')\" \\\n     subscription_id=$(curl -s -H Metadata:true \"http://169.254.169.254/metadata/instance?api-version=2017-08-01\" | jq -r '.compute | .subscriptionId')  \\\n     resource_group_name=$(curl -s -H Metadata:true \"http://169.254.169.254/metadata/instance?api-version=2017-08-01\" | jq -r '.compute | .resourceGroupName') \\\n     vm_name=$(curl -s -H Metadata:true \"http://169.254.169.254/metadata/instance?api-version=2017-08-01\" | jq -r '.compute | .name')\n```\n\n----------------------------------------\n\nTITLE: Validating TOTP Code in Vault\nDESCRIPTION: Validates a TOTP code against a specific key. This endpoint verifies whether a provided TOTP code is valid for the current time window, taking into account the configured skew value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/totp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"123802\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/totp/code/my-key\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"valid\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Global Transit Keys Configuration\nDESCRIPTION: Shell command to update global configuration for Transit keys, applying settings that affect all keys in the Transit secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_24\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/config/keys\n```\n\n----------------------------------------\n\nTITLE: Signing a Digest with Google Cloud KMS via Vault\nDESCRIPTION: This code snippet shows how to use Vault to sign a calculated digest with a specified key version in Google Cloud KMS. The signed output will include the signature value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n$ vault write gcpkms/sign/my-key key_version=1 digest=$DIGEST\\nKey          Value\\n---          -----\\nsignature    MGYCMQDbOS2462SKMsGdh2GQ...\n```\n\n----------------------------------------\n\nTITLE: Querying Token Accessor Capabilities in Vault - JSON Payload\nDESCRIPTION: The JSON payload for the POST request to /sys/capabilities-accessor endpoint. It requires providing the token accessor and an array of paths for which to check capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities-accessor.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessor\": \"abcd1234\",\n  \"paths\": [\"secret/foo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Encryption Key using Vault Transit API - Bash\nDESCRIPTION: This command rotates the underlying encryption key associated with a named key in Vault. It generates a new encryption key and updates the internal keyring, allowing for future encryptions to use the new key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write -f transit/keys/my-key/rotate\nSuccess! Data written to: transit/keys/my-key/rotate\n```\n\n----------------------------------------\n\nTITLE: MFA and CIDR Check on Vault Login (Sentinel)\nDESCRIPTION: This Sentinel policy requires users to validate with an Okta MFA push request before authenticating with LDAP and ensures that only users on the 10.20.0.0/16 subnet can authenticate using LDAP. It utilizes the `sockaddr`, `mfa`, and `strings` imports to achieve this.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/sentinel/examples.mdx#2025-04-14_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport \"sockaddr\"\nimport \"mfa\"\nimport \"strings\"\n\n# We expect logins to come only from our private IP range\ncidrcheck = rule {\n    sockaddr.is_contained(\"10.20.0.0/16\", request.connection.remote_addr)\n}\n\n# Require ping MFA validation to succeed\nping_valid = rule {\n    mfa.methods.ping.valid\n}\n\nmain = rule when strings.has_prefix(request.path, \"auth/ldap/login\") {\n    ping_valid and cidrcheck\n}\n```\n\n----------------------------------------\n\nTITLE: Using max_mount_and_namespace_table_entry_size Parameter in Raft Storage Configuration\nDESCRIPTION: This code snippet shows the configuration parameter for safely overriding the max entry size for storage entries containing mount tables, auth tables, and namespace configuration data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.17.0.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nmax_mount_and_namespace_table_entry_size\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Connection with JSON Payload\nDESCRIPTION: JSON payload for configuring the MongoDB Atlas database plugin connection. It includes required parameters like plugin_name, allowed_roles, public_key, private_key, and project_id for MongoDB Atlas authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodbatlas.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"mongodbatlas-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"public_key\": \"aPublicKey\",\n  \"private_key\": \"aPrivateKey\",\n  \"project_id\": \"aProjectID\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Database Connections\nDESCRIPTION: This JSON response lists the names of available database connections in Vault, including keys representing connection identifiers, under the 'data' field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"db-one\", \"db-two\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-Based Root Credential Rotation in GCP Auth\nDESCRIPTION: This snippet demonstrates how to set up automatic, schedule-based root credential rotation for the GCP auth engine in Vault. It configures rotation to occur every Saturday at midnight.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/gcp/config/client \\\n  ...\n  rotation_schedule=\"0 * * * SAT\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Method Credentials\nDESCRIPTION: This snippet provides the shell command needed to configure the GCP auth method credentials, especially when Vault is not running on Google Cloud. It requires specifying the path to the credentials JSON file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/gcp/config \\\n    credentials=@/path/to/credentials.json\n```\n\n----------------------------------------\n\nTITLE: Activating Secrets Sync via CLI in Vault\nDESCRIPTION: This snippet demonstrates how to activate the secrets sync feature using the Vault CLI. It uses the 'vault write' command to trigger the activation process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f sys/activation-flags/secrets-sync/activate\n```\n\n----------------------------------------\n\nTITLE: Writing GitHub App Configuration to Vault\nDESCRIPTION: This snippet configures a GitHub application within Vault using the `vault write` command. It requires the application ID (`app_id`) and the path to the application's private key. The fingerprint is returned to verify the key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write sys/sync/github-apps/<APP_NAME> \\\n  app_id=<APP_ID> \\\n  private_key=@/path/to/private/key\n```\n\n----------------------------------------\n\nTITLE: Issuing a SecretID via CLI in Vault\nDESCRIPTION: This snippet illustrates how to issue a SecretID against a specific AppRole using the Vault CLI. The command generates a SecretID which can then be used alongside the RoleID for authentication. It also returns metadata about the SecretID, such as its TTL and number of uses.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -f auth/approle/role/my-role/secret-id\nsecret_id               6a174c20-f6de-a53c-74d2-6018fcceff64\nsecret_id_accessor      c454f7e5-996e-7230-6074-6ef26b7bcf86\nsecret_id_ttl           10m\nsecret_id_num_uses      40\n```\n\n----------------------------------------\n\nTITLE: Creating an Externally Defined Role in Vault for Elasticsearch\nDESCRIPTION: This command creates a role in Vault that maps to a pre-existing role definition in Elasticsearch, using an existing role instead of defining privileges directly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/roles/externally-defined-role \\\n      db_name=my-elasticsearch-database \\\n      creation_statements='{\"elasticsearch_roles\": [\"pre-existing-role-in-elasticsearch\"]}' \\\n      default_ttl=\"1h\" \\\n      max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Creating User for Userpass Authentication - Shell\nDESCRIPTION: This snippet demonstrates how to create a new user 'opsuser' with a specified password in the userpass authentication method. This user can then be authenticated for access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/userpass/users/opsuser \\\n    password=p@ssw0rd\n```\n\n----------------------------------------\n\nTITLE: Mapping GitHub User to Policies with JSON Payload\nDESCRIPTION: JSON payload for mapping a specific GitHub user to Vault policies. This assigns the policy to the specified user in addition to any team policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"sethvargo-policy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub using Vault API\nDESCRIPTION: This snippet demonstrates how to authenticate to Vault using a GitHub personal access token via the Vault API. It uses a `curl` command to send a POST request to the `auth/github/login` endpoint with the token in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"token\": \"MY_TOKEN\"}' \\\n    http://127.0.0.1:8200/v1/auth/github/login\n```\n\n----------------------------------------\n\nTITLE: Reading JWT Role Configuration\nDESCRIPTION: cURL command to retrieve the configuration of an existing JWT role\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/auth/jwt/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Retrieving Post-Login Messages via Vault API - Shell Request\nDESCRIPTION: Sample cURL request to fetch authenticated messages from the Vault API endpoint. This GET request targets the internal UI messages endpoint at the default Vault address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-authenticated-messages.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/internal/ui/authenticated-messages\n```\n\n----------------------------------------\n\nTITLE: Configure Oracle Connection\nDESCRIPTION: Shell command to configure Vault with Oracle plugin connection details including credentials and allowed roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-oracle-database \\\n    plugin_name=oracle-database-plugin \\\n    connection_url=\"{{username}}/{{password}}@localhost:1521/OraDoc.localhost\" \\\n    allowed_roles=\"my-role\" \\\n    username=\"VAULT_SUPER_USER\" \\\n    password=\"myreallysecurepassword\"\n```\n\n----------------------------------------\n\nTITLE: HCL Example for Defining GCP Roleset Bindings\nDESCRIPTION: Example configuration in HCL format showing how roles and bindings are defined for various GCP resources within a roleset. This setup configures access permissions using roles, such as 'viewer', at both the project and custom role levels.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"//cloudresourcemanager.googleapis.com/projects/mygcpproject\" {\n  roles = [\n    \"roles/viewer\"\n  ],\n}\n\nresource \"//bigquery.googleapis.com/projects/my-project/datasets/mydataset\" {\n  roles = [\n    \"roles/bigquery.dataViewer\"\n  ],\n}\n\nresource \"https://selflink/to/my/resource\" {\n  roles = [\n    \"project/mygcpproject/roles/projcustomrole\",\n    \"organizations/myorg/roles/orgcustomrole\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Role for Organization API Key\nDESCRIPTION: This snippet illustrates how to create a role within Vault for generating a Programmatic API Key at the organization level. It specifically sets the required organization ID and assigns roles for access management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/mongodbatlas.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write mongodbatlas/roles/test \\\n    organization_id=5b23ff2f96e82130d0aaec13 \\\n    roles=ORG_MEMBER\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimal Kubernetes ClusterRole for Token Creation\nDESCRIPTION: YAML configuration for creating a minimal ClusterRole that allows creation of service account tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: k8s-minimal-secrets-abilities\nrules:\n- apiGroups: [\"\"]\n  resources: [\"serviceaccounts/token\"]\n  verbs: [\"create\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database in Vault with GCP IAM\nDESCRIPTION: This snippet configures a PostgreSQL database connection in Vault, explicitly enabling GCP IAM authentication by utilizing Application Default Credentials. It includes parameters such as plugin name, roles allowed, connection URL, and authentication type. No private IP is used for the connection. Prerequisites include a set up Vault instance and necessary permissions in GCP IAM.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/my-postgresql-database \\\n    plugin_name=\"postgresql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"host=project:us-west1:mydb user=test-user@project.iam dbname=postgres sslmode=disable\" \\\n    use_private_ip=\"false\" \\\n    auth_type=\"gcp_iam\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Secrets Engine in Vault\nDESCRIPTION: This code snippet configures the Azure Secrets Engine in HashiCorp Vault by setting the subscription, tenant, client IDs, and identity token audience. It requires an active Vault server and a working connection to Azure. Necessary parameters include the Azure subscription ID, tenant ID, client ID, and the desired OIDC audience. The command outputs the configured Azure secrets engine and its ability to use WIF for credential management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write azure/config \\\n  subscription_id=$AZURE_SUBSCRIPTION_ID \\\n  tenant_id=$AZURE_TENANT_ID \\\n  client_id=$AZURE_CLIENT_ID \\\n  identity_token_audience=\"vault.example/v1/identity/oidc/plugins\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Sync Association in Vault\nDESCRIPTION: This command creates an association between the Vercel sync destination and a specific secret in Vault. This association triggers the synchronization process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/vercelproject.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/vercel-project/my-dest/associations/set \\\n  mount='my-kv' \\\n  secret_name='my-secret'\n```\n\n----------------------------------------\n\nTITLE: Installing Secondary Vault Cluster with Helm\nDESCRIPTION: This command installs the secondary Vault cluster using Helm, configuring it for high availability with Raft storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nhelm install vault-secondary hashicorp/vault \\\n  --set='server.image.repository=hashicorp/vault-enterprise' \\\n  --set='server.image.tag=1.19.0-ent' \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Role for Lambda IAM Authentication\nDESCRIPTION: Shell command to create a Vault role for Lambda IAM authentication, specifying the IAM principal ARN, policies, and TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/aws/role/vault-lambda-role \\\n    auth_type=iam \\\n    bound_iam_principal_arn=\"${YOUR_ARN}\" \\\n    policies=\"${YOUR_POLICY}\" \\\n    ttl=1h\n```\n\n----------------------------------------\n\nTITLE: Initializing Vault with Keybase PGP Keys\nDESCRIPTION: This command initializes Vault with 3 key shares and a threshold of 2, using Keybase PGP keys for three users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator init -key-shares=3 -key-threshold=2 \\\n    -pgp-keys=\"keybase:jefferai,keybase:vishalnayak,keybase:sethvargo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotation Window for Azure Credentials\nDESCRIPTION: Configures both rotation schedule and window duration for Azure root credentials, limiting the rotation attempt to a 1-hour window.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write azure/config \\\n    ...\n    rotation_window=\"1h\" \\\n    rotation_schedule=\"0 * * * SAT\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Moving Secrets to a Different Namespace in Vault\nDESCRIPTION: This example shows how to move existing secrets from 'team-vault' to the 'vault-edu/' namespace using the 'vault secrets move' command. It demonstrates the syntax for moving secrets to a specific namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/move.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets move team-vault \\\n    vault-edu/team-vault\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Object Storage Backend in Vault\nDESCRIPTION: This configuration block defines the OCI Object Storage backend for Vault, specifying the region, namespace, bucket names, and high availability settings. It supports using either an API key or instance principals for authentication with OCI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/oci-object-storage.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"oci\" {\n   region = \"<oci_region>\"\n   namespace_name = \"<object_storage_namespace_name>\"\n   bucket_name = \"<vault_data_bucket_name>\"\n   ha_enabled = \"<boolean true/false>\"\n   lock_bucket_name = \"<leader_lock_bucket_name>\"\n   auth_type_api_key = \"<boolean setting for using api-key instead of instance principals>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing the wrapping key in Go\nDESCRIPTION: This Go code snippet demonstrates how to parse the PEM-encoded wrapping key using the encoding/pem and crypto/x509 libraries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nkeyBlock, _ := pem.Decode([]byte(wrappingKeyString))\nparsedKey, err := x509.ParsePKIXPublicKey(keyBlock.Bytes)\nif err != nil {\n    return err\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Secrets Engine Between Namespaces in Vault\nDESCRIPTION: This example demonstrates how to move an existing secrets engine from ns1/secret/ to ns2/kv/ using the 'vault secrets move' command. It shows the basic syntax for moving secrets engines across namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/move.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets move ns1/secret/ ns2/kv/\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta MFA Method JSON Payload\nDESCRIPTION: JSON payload for configuring an Okta MFA method. Contains required parameters including mount_accessor for user mapping, org_name for the Okta organization, and api_token for authentication with Okta API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/okta.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mount_accessor\": \"auth_userpass_1793464a\",\n  \"org_name\": \"dev-262778\",\n  \"api_token\": \"0081u7KrReNkzmABZJAP2oDyIXccveqx9vIOEyCZDC\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Namespaces using CLI\nDESCRIPTION: Shows how to use the Vault CLI to list existing namespaces. This is useful for identifying unmanaged namespaces that need to be migrated to Terraform.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault namespace list\n\nKeys\n----\nadmin/\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP Code in Vault\nDESCRIPTION: This command generates a new time-based one-time password (TOTP) by reading from the '/code' endpoint with the name of the configured key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/totp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault read totp/code/my-key\nKey     Value\n---     -----\ncode    260610\n```\n\n----------------------------------------\n\nTITLE: Activating Secrets Sync via HTTP Request in Vault\nDESCRIPTION: This snippet shows how to activate the secrets sync feature using an HTTP PUT request to the Vault API. It requires an authentication token to be included in the request header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  --request PUT \\\n  --header \"X-Vault-Token: ...\" \\\n  http://127.0.0.1:8200/v1/sys/activation-flags/secrets-sync/activate\n```\n\n----------------------------------------\n\nTITLE: Reading a Vault Policy using the policy read Command\nDESCRIPTION: This example demonstrates how to read a policy named 'my-policy' using Vault's CLI. The command retrieves and displays the policy contents and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/read.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy read my-policy\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Version of a Secret in Vault KV\nDESCRIPTION: This example demonstrates how to retrieve a specific version (version 1) of a secret named 'creds' from the KV engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get -mount=secret -version=1 creds\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vault using AWS IAM in Go\nDESCRIPTION: Go code example that demonstrates how to authenticate with Vault using the AWS IAM auth method. The code initializes a Vault client, performs AWS IAM authentication, and retrieves a secret from Vault's KV v2 secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tvault \"github.com/hashicorp/vault/api\"\n\tauth \"github.com/hashicorp/vault/api/auth/aws\"\n)\n\n// Fetches a key-value secret (kv-v2) after authenticating to Vault via AWS IAM,\n// one of two auth methods used to authenticate with AWS (the other is EC2 auth).\nfunc getSecretWithAWSAuthIAM() (string, error) {\n\tconfig := vault.DefaultConfig() // modify for more granular configuration\n\n\tclient, err := vault.NewClient(config)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize Vault client: %w\", err)\n\t}\n\n\tawsAuth, err := auth.NewAWSAuth(\n\t\tauth.WithRole(\"dev-role-iam\"), // if not provided, Vault will fall back on looking for a role with the IAM role name if you're using the iam auth type, or the EC2 instance's AMI id if using the ec2 auth type\n\t)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize AWS auth method: %w\", err)\n\t}\n\n\tauthInfo, err := client.Auth().Login(context.Background(), awsAuth)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to login to AWS auth method: %w\", err)\n\t}\n\tif authInfo == nil {\n\t\treturn \"\", fmt.Errorf(\"no auth info was returned after login\")\n\t}\n\n\t// get secret from the default mount path for KV v2 in dev mode, \"secret\"\n\tsecret, err := client.KVv2(\"secret\").Get(context.Background(), \"creds\")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read secret: %w\", err)\n\t}\n\n\t// data map can contain more than one key-value pair,\n\t// in this case we're just grabbing one of them\n\tvalue, ok := secret.Data[\"password\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"value type assertion failed: %T %#v\", secret.Data[\"password\"], secret.Data[\"password\"])\n\t}\n\n\treturn value, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Parameters in Vault using HCL\nDESCRIPTION: This snippet demonstrates how to configure the replication stanza in Vault's configuration file. It includes settings for resolver discovery, log shipper buffer, forwarding options, and WAL wait duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/replication.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nreplication {\n  resolver_discover_servers = true\n  logshipper_buffer_length = 1000\n  logshipper_buffer_size = \"5gb\"\n  allow_forwarding_via_header = false\n  best_effort_wal_wait_duration = \"2s\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRL from Vault PKI Engine using cURL\nDESCRIPTION: This command retrieves the CRL for a specific issuer named 'root-x1' from the Vault PKI secrets engine using a GET request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/pki/issuer/root-x1/crl\n```\n\n----------------------------------------\n\nTITLE: Response Format for Reading Issuer Certificate in Vault PKI\nDESCRIPTION: JSON response containing a specific issuer's certificate information, including the full certificate chain in PEM format and revocation status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDFDCCAfygAwIBAgIUXgxy54mKooz5soqQoRINazH/3pQwDQYJKoZIhvcNAQEL...\",\n      \"-----BEGIN CERTIFICATE-----\\nMIIDFTCCAf2gAwIBAgIUUo/qwLm5AyqUWqFHw1MlgwUtS/kwDQYJKoZIhvcNAQEL...\"\n    ],\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nnMIIDFDCCAfygAwIBAgIUXgxy54mKooz5soqQoRINazH/3pQwDQYJKoZIhvcNAQEL...\",\n    \"revocation_time\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GET Response for LDAP Static Role Information\nDESCRIPTION: Shows the JSON response containing information about a static role, including the distinguished name (DN), last rotation timestamp, rotation period in seconds, and username.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"dn\": \"uid=hashicorp,ou=Users,dc=hashicorp,dc=com\",\n    \"last_vault_rotation\": \"2020-02-19T11:31:53.7812-05:00\",\n    \"rotation_period\": 86400,\n    \"username\": \"hashicorp\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample PKI Certificate Response Structure in JSON\nDESCRIPTION: Example response showing the structure of a PKI certificate operation response, including lease information, certificate data, CA chain, and serial number details. The response includes the main certificate, issuing CA certificate, and the complete certificate chain.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"expiration\": \"1654105687\",\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\",\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\"\n    ],\n    \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:52\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Auth Login Payload\nDESCRIPTION: JSON payload for logging in to Vault using the GitHub auth method. Requires a GitHub personal API token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"ABC123...\"\n}\n```\n\n----------------------------------------\n\nTITLE: CIEPS Webhook Protocol Overview\nDESCRIPTION: REST-based webhook that allows Vault PKI to externalize certificate request validation and templating. Supports optional mutual TLS protection and provides detailed request context for policy evaluation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cieps.mdx#2025-04-14_snippet_0\n\nLANGUAGE: REST\nCODE:\n```\nPOST /cieps-webhook\nRequest Body: {\n  \"request_id\": \"unique_identifier\",\n  \"common_name\": \"example.com\",\n  \"user_context\": {...},\n  \"vault_pki_context\": {...}\n}\n```\n\n----------------------------------------\n\nTITLE: Hash Data cURL Request\nDESCRIPTION: Shell command showing how to hash data using SHA2-512 algorithm via cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/tools.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/tools/hash/sha2-512\n```\n\n----------------------------------------\n\nTITLE: Configuring Rootless PostgreSQL Connection in Vault Enterprise\nDESCRIPTION: Command to configure a PostgreSQL connection without root credentials by enabling the self-managed workflow parameter. This is used for static roles without privileged access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-postgresql-database \\\n    plugin_name=\"postgresql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"postgresql://{{username}}:{{password}}@localhost:5432/database-name\" \\\n    self_managed=true\n```\n\n----------------------------------------\n\nTITLE: Mapping GitHub User to Vault Policy\nDESCRIPTION: This snippet demonstrates mapping a specific GitHub user to a Vault policy using the `vault write auth/github/map/users/<user>` command.  This assigns the specified policy to the user, in addition to any team policies they may inherit.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/github/map/users/sethvargo value=sethvargo-policy\n```\n\n----------------------------------------\n\nTITLE: Creating a Database Role with JSON Payload\nDESCRIPTION: Endpoint for creating a database role with specific creation statements, TTL settings, and database connection configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n    \"GRANT SELECT ON *.* TO '{{name}}'@'%'\"\n  ],\n  \"default_ttl\": \"1h\",\n  \"max_ttl\": \"24h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling a New Audit Device in Vault\nDESCRIPTION: This request shows how to enable a new audit device at a specific path using a POST request with configuration data. This operation requires sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/audit/example-audit\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Template Stanza in Vault Agent\nDESCRIPTION: A simple example showing how to configure a template stanza in Vault Agent. This configuration renders a template from a source file to a destination file with error handling enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate {\n  source      = \"/tmp/agent/template.ctmpl\"\n  destination = \"/tmp/agent/render.txt\"\n  error_on_missing_key = true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Test Service Account and Permissions\nDESCRIPTION: YAML configuration for creating a test service account, role, and role binding with basic pod listing permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: test-service-account-with-generated-token\n  namespace: test\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: Role\nmetadata:\n  name: test-role-list-pods\n  namespace: test\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"list\"]\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: RoleBinding\nmetadata:\n  name: test-role-abilities\n  namespace: test\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: Role\n  name: test-role-list-pods\nsubjects:\n- kind: ServiceAccount\n  name: test-service-account-with-generated-token\n  namespace: test\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Database Credentials\nDESCRIPTION: Endpoint for generating new dynamic credentials based on a named role, returning a unique username and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/database/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Role Settings\nDESCRIPTION: Commands for configuring Consul roles with namespace and partition settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/roles/my-role consul_roles=\"admin-management\" partition=\"admin1\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/roles/my-role consul_roles=\"namespace-management\" consul_namespace=\"ns1\"\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Table Creation with Terraform\nDESCRIPTION: Terraform configuration for creating a DynamoDB table with the required schema for Vault storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/dynamodb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: terraform\nCODE:\n```\nresource \"aws_dynamodb_table\" \"dynamodb-table\" {\n  name           = \"${var.dynamoTable}\"\n  read_capacity  = 1\n  write_capacity = 1\n  hash_key       = \"Path\"\n  range_key      = \"Key\"\n  \n  attribute {\n    name = \"Path\"\n    type = \"S\"\n  }\n\n  attribute {\n    name = \"Key\"\n    type = \"S\"\n  }\n\n  tags = {\n    Name        = \"vault-dynamodb-table\"\n    Environment = \"prod\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Duo MFA Text Command\nDESCRIPTION: This command configures Duo as an MFA provider in Vault using specific credentials like 'integration_key', 'secret_key', and 'api_hostname'. Vault should be properly installed, and the 'userpass' auth method should be enabled for this command to work.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write sys/mfa/method/duo/my_duo \\\n    mount_accessor=auth_userpass_54b8e339 \\\n    integration_key=BIACEUEAXI20BNWTEYXT \\\n    secret_key=HIGTHtrIigh2rPZQMbguugt8IUftWhMRCOBzbuyz \\\n    api_hostname=api-2b5c39f5.duosecurity.com\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 with Default KMS Encryption (HCL)\nDESCRIPTION: Example for configuring Amazon S3 as a Vault storage backend with AWS KMS encryption using the default S3 KMS key. This setup enhances security by encrypting stored data, while maintaining ease of integration with AWS services. The snippet assumes access and secret keys are properly set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/s3.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"s3\" {\n  access_key = \"abcd1234\"\n  secret_key = \"defg5678\"\n  bucket     = \"my-bucket\"\n  kms_key_id = \"alias/aws/s3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic DynamoDB Storage Configuration in HCL\nDESCRIPTION: Basic configuration for setting up DynamoDB as Vault's storage backend with high availability enabled and region specification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/dynamodb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"dynamodb\" {\n  ha_enabled = \"true\"\n  region     = \"us-west-2\"\n  table      = \"vault-data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling LDAP Secrets Engine and Configuring Connection in Vault\nDESCRIPTION: Commands to enable the LDAP secrets engine in Vault and configure the connection to an AD server. This sets up the foundation for service account management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable ldap\nSuccess! Enabled the ad secrets engine at: ldap/\n\n$ vault write ldap/config \\\n    binddn=$USERNAME \\\n    bindpass=$PASSWORD \\\n    url=ldaps://138.91.247.105 \\\n    userdn='dc=example,dc=com'\n```\n\n----------------------------------------\n\nTITLE: Generating MySQL Credentials in Vault\nDESCRIPTION: This command generates a new credential by reading from the /creds endpoint with the name of the role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Create User with Userpass Method Text Command\nDESCRIPTION: This command creates a new user under the 'userpass' auth method, assigning the 'duo-policy'. The user will be required to use MFA when accessing specified paths. Ensure Vault is running and the prior steps are completed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/userpass/users/testuser \\\n    password=testpassword \\\n    policies=duo-policy\n```\n\n----------------------------------------\n\nTITLE: Reading KV Data Using Vault CLI\nDESCRIPTION: Command to read all key/value pairs from a specified path in the KV v2 store. Requires a mount path and secret path as parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/read-data.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault kv get             \\\n   -mount <mount_path>     \\\n   <secret_path>\n```\n\n----------------------------------------\n\nTITLE: Signing KMIP Client Certificate CSR in Vault\nDESCRIPTION: Shows how to sign a Certificate Signing Request (CSR) for KMIP clients that prefer to maintain their own private keys. Returns the CA chain and signed certificate while the private key remains with the client.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write kmip/scope/my-service/role/admin/credential/sign csr=\"$(cat my-csr.pem)\"\n  Key              Value\n  ---              -----\n  ca_chain         [-----BEGIN CERTIFICATE-----\n  MIICNTCCAZigAwIBAgIUKqNFb3Zy+8ypIhTDs/2/8f/xEI8wCgYIKoZIzj0EAwIw...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Authentication Method with JSON Payload\nDESCRIPTION: JSON payload for configuring the Azure authentication method with tenant ID, resource URL, client ID, and client secret. These credentials allow Vault to query Azure APIs for virtual machine metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tenant_id\": \"kd83...\",\n  \"resource\": \"https://management.azure.com/\",\n  \"client_id\": \"12ud...\",\n  \"client_secret\": \"DUJDS3...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Reading a PKI Role\nDESCRIPTION: This code snippet showcases a sample JSON response from the Vault API when reading a specific role. The JSON object contains the various configuration settings for the role, such as allowed domains, TTL settings, and key types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allow_any_name\": false,\n    \"allow_ip_sans\": true,\n    \"allow_localhost\": true,\n    \"allow_subdomains\": false,\n    \"allowed_domains\": [\"example.com\", \"foobar.com\"],\n    \"allowed_uri_sans\": [\"example.com\", \"spiffe://*\"],\n    \"allowed_other_sans\": [\n      \"1.3.6.1.4.1.311.20.2.3;utf8:devops@example.com\",\n      \"1.3.6.1.4.1.311.20.2.4;UTF-8:*\"\n    ],\n    \"client_flag\": true,\n    \"code_signing_flag\": false,\n    \"key_bits\": 2048,\n    \"key_type\": \"rsa\",\n    \"ttl\": \"6h\",\n    \"max_ttl\": \"12h\",\n    \"server_flag\": true,\n    ... additional fields elided ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Google Cloud KMS Key in Vault\nDESCRIPTION: Command to rotate a KMS key, which generates a new crypto key version on Google Cloud KMS and sets it as the active key. Note that propagation of the new key may take time.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write -f gcpkms/keys/rotate/my-key\nWARNING! The following warnings were returned from Vault:\n\n  * The crypto key version was rotated successfully, but it can take up to 2\n  hours for the new crypto key version to become the primary. In practice, it\n  is usually much shorter. Be sure to issue a read operation and verify the\n  key version if you require new data to be encrypted with this key.\n\nKey            Value\n---            -----\nkey_version    2\n```\n\n----------------------------------------\n\nTITLE: Rewrapping Encrypted Data using Vault Transit API - Bash\nDESCRIPTION: This command rewraps previously encrypted data with the latest key in the keyring. It does not reveal the original plaintext, allowing for secure upgrades of encryption keys without exposing sensitive data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transit/rewrap/my-key ciphertext=vault:v1:8SDd3WHDOjf7mq69CyCqYjBXAiQQAVZRkFM13ok481zoCmHnSeDX9vyf7w==\n\nKey           Value\n---           -----\nciphertext    vault:v2:0VHTTBb2EyyNYHsa3XiXsvXOQSLKulH+NqS4eRZdtc2TwQCxqJ7PUipvqQ==\n```\n\n----------------------------------------\n\nTITLE: Create/Update AppRole - JSON Payload\nDESCRIPTION: Sample payload for creating or updating an AppRole with batch token type and time-based configurations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_type\": \"batch\",\n  \"token_ttl\": \"10m\",\n  \"token_max_ttl\": \"15m\",\n  \"token_policies\": [\"default\"],\n  \"period\": 0,\n  \"bind_secret_id\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Token Validation Request Using cURL (Shell Session)\nDESCRIPTION: This cURL command is used to send a POST request to validate a token in HashiCorp Vault, including the necessary headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_61\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/validate/example-role\n```\n\n----------------------------------------\n\nTITLE: Generating an Exported Intermediate CA in Vault PKI\nDESCRIPTION: This request generates an intermediate CA certificate with an exported private key. The request is sent to the PKI intermediate generation endpoint and returns the CSR, private key, and key type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_65\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/intermediate/generate/exported\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"csr\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE REQUEST-----\\n\",\n    \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\\\nMIIEpAIBAAKCAQEAwsANtGz9gS3o5SwTSlOG1l-----END RSA PRIVATE KEY-----\",\n    \"private_key_type\": \"rsa\"\n  },\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Google Cloud KMS Key Information in Vault\nDESCRIPTION: This snippet demonstrates how to read data about a Google Cloud KMS crypto key in Vault. It includes the policy, curl command for the GET request, and the expected JSON response format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_30\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/my-key\" {\n  capabilities = [\"read\"]\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/my-key\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"projects/my-project/locations/my-location/keyRings/my-keyring/cryptoKeys/my-crypto-key\",\n    \"labels\": {\n      \"foo\": \"bar\"\n    },\n    \"next_rotation_time_seconds\": 1536613424,\n    \"primary_version\": \"3\",\n    \"purpose\": \"encrypt_decrypt\",\n    \"rotation_schedule_seconds\": 259200,\n    \"state\": \"enabled\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Joining and Unsealing Additional Vault Pods\nDESCRIPTION: These commands join the remaining Vault pods (vault-1 and vault-2) to the Raft cluster and unseal them. The pods communicate using the internal service provided by the Helm chart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-with-raft.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-1 -- vault operator raft join http://vault-0.vault-internal:8200\nkubectl exec -ti vault-1 -- vault operator unseal\n\nkubectl exec -ti vault-2 -- vault operator raft join http://vault-0.vault-internal:8200\nkubectl exec -ti vault-2 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Updating Policy via CLI\nDESCRIPTION: Command to update an existing policy in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write sys/policy/my-existing-policy policy=@updated-policy.json\n```\n\n----------------------------------------\n\nTITLE: Configuring ClusterRoleBinding for Vault\nDESCRIPTION: YAML configuration for binding the ClusterRole to Vault's service account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: vault-token-creator-binding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: k8s-minimal-secrets-abilities\nsubjects:\n- kind: ServiceAccount\n  name: vault\n  namespace: vault\n```\n\n----------------------------------------\n\nTITLE: Enabling KVv2 Secrets Engine in Vault\nDESCRIPTION: Use vault secrets enable command to create a new KVv2 secrets engine mount. This is necessary if you don't already have a KVv2 secret to sync.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=my-kv kv-v2\n```\n\n----------------------------------------\n\nTITLE: Rotating Database Root Credentials in Vault\nDESCRIPTION: Command to rotate the password for the root database user configured in Vault. This enhances security by ensuring the credentials are only accessible to Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -force database/rotate-root/my-database\n```\n\n----------------------------------------\n\nTITLE: AppRole Login Payload\nDESCRIPTION: This JSON payload is used to authenticate with Vault using the AppRole method.  It requires both the `role_id` and `secret_id`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role_id\": \"59d6d1ca-47bb-4e7e-a40b-8be3bc5a0ba8\",\n  \"secret_id\": \"84896a0c-1347-aa90-a4f6-aca8b7558780\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-Based Root Credential Rotation with Window Setting in Vault\nDESCRIPTION: Command to set up scheduled rotation for root credentials with a specified rotation window. This example rotates credentials on Saturday at midnight with a 1-hour window to complete the rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mssql-database \\\n  ...\n  rotation_window=\"1h\" \\\n  rotation_schedule=\"0 * * * SAT\"\n...\n```\n\n----------------------------------------\n\nTITLE: Generating Token with Audiences (Vault CLI)\nDESCRIPTION: This snippet demonstrates how to generate a Kubernetes service account token with specified audiences using the Vault CLI. It sets the audiences for the token to \"another-custom-audience\". The namespace is set to 'test'. If the audiences are not specified, the default audiences of the role are used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/creds/my-role \\\n    kubernetes_namespace=test \\\n    audiences=\"another-custom-audience\"\n\nKey                        Value\n–--                        -----\nlease_id                   kubernetes/creds/my-role/SriWQf0bPZ...\nlease_duration             768h\nlease_renwable             false\nservice_account_name       new-service-account-with-generated-token\nservice_account_namespace  test\nservice_account_token      eyJHbGci0iJSUzI1NiIsImtpZCI6ImlrUEE...\n```\n\n----------------------------------------\n\nTITLE: Generating an SSH Keypair\nDESCRIPTION: This code snippet shows how to generate an SSH keypair using `ssh-keygen`. This is a prerequisite for the client to request a signed certificate from Vault. The generated public key will be used in the subsequent signing request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh-keygen -t rsa -C \"user@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Canceling a Recovery Token Generation Attempt in Vault\nDESCRIPTION: This snippet demonstrates how to cancel an in-progress recovery token generation attempt using a DELETE request, which is necessary to change the OTP or PGP key being used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/generate-recovery-token/attempt\n```\n\n----------------------------------------\n\nTITLE: Configuring Token File Auto-auth in Vault Agent\nDESCRIPTION: Example configuration for Vault Agent using the token_file method for auto-authentication. The configuration includes vault connection settings, auto_auth configuration with token file path, API proxy settings, TCP listener configuration, and template definitions for server key and certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/token_file.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npid_file = \"./pidfile\"\n\nvault {\n  address = \"https://127.0.0.1:8200\"\n}\n\nauto_auth {\n  method {\n    type = \"token_file\"\n\n    config = {\n      token_file_path = \"/home/username/.vault-token\"\n    }\n  }\n}\n\n\napi_proxy {\n  use_auto_auth_token = true\n}\n\nlistener \"tcp\" {\n  address = \"127.0.0.1:8100\"\n  tls_disable = true\n}\n\ntemplate {\n  source      = \"/etc/vault/server.key.ctmpl\"\n  destination = \"/etc/vault/server.key\"\n}\n\ntemplate {\n  source      = \"/etc/vault/server.crt.ctmpl\"\n  destination = \"/etc/vault/server.crt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an AWS IAM Role for DynamoDB Access\nDESCRIPTION: This snippet demonstrates how to create an AWS IAM role with the necessary permissions to access a DynamoDB table using the Vault CLI. The role is configured to allow `DescribeTable`, `GetItem`, and `GetRecords` actions on a specific DynamoDB table and `ListTables` on all resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/roles/aws-dynamodb-read \\\n        credential_type=iam_user \\\n        policy_document=-<<EOF\n{\n\t\"Version\": \"2012-10-17\",\n\t\"Statement\": [\n\t\t{\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": [\n\t\t\t\t\"dynamodb:DescribeTable\",\n\t\t\t\t\"dynamodb:GetItem\",\n\t\t\t\t\"dynamodb:GetRecords\"\n\t\t\t],\n\t\t\t\"Resource\": \"arn:aws:dynamodb:us-east-1:1234567891:table/example-table\"\n\t\t},\n\t\t{\n\t\t\t\"Effect\": \"Allow\",\n\t\t\t\"Action\": \"dynamodb:ListTables\",\n\t\t\t\"Resource\": \"*\"\n\t\t}\n\t]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Rotating AWS Root IAM Credentials\nDESCRIPTION: cURL command to rotate the AWS access key used by Vault. This operation requires that Vault's access key is the only one on the IAM user, and after rotation, Vault will be the only entity that knows the new secret key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  --header \"X-Vault-Token: ...\" \\\n  --request POST \\\n  http://127.0.0.1:8200/v1/aws/config/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Checking Control Group Request Status in Vault - Shell Request\nDESCRIPTION: Shell command using curl to make a POST request to the control group request status endpoint. It sends the payload with an accessor and includes the Vault token in the headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/control-group.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/control-group/request\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-based Root Credential Rotation in Vault AWS Auth\nDESCRIPTION: Shell command to set up automatic schedule-based credential rotation for root credentials in the AWS auth engine. This example configures rotation to occur weekly on Saturday at midnight.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/aws/config/client \\\n  ...\n  rotation_schedule=\"0 * * * SAT\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Listing Auth Methods in Vault CLI\nDESCRIPTION: This command lists all enabled auth methods in Vault, showing their paths, types, and descriptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth list\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Environment Variables in Vault Secrets Operator\nDESCRIPTION: Example of adding custom environment variables to the vault-secrets-operator manager container. This includes setting proxy configuration, output format, cache size and persistence model, and limiting concurrent reconciliations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nextraEnv:\n  - name: HTTP_PROXY\n    value: http://proxy.example.com\n  - name: VSO_OUTPUT_FORMAT\n    value: json\n  - name: VSO_CLIENT_CACHE_SIZE\n    value: \"20000\"\n  - name: VSO_CLIENT_CACHE_PERSISTENCE_MODEL\n    value: \"direct-encrypted\"\n  - name: VSO_MAX_CONCURRENT_RECONCILES\n    value: \"30\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Write Operations with X-Vault-Index Response Header\nDESCRIPTION: An HTTP response header returned after storage modification operations in Vault Enterprise 1.7+. Contains a base64-encoded value that represents the storage state after the write operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/consistency.mdx#2025-04-14_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nX-Vault-Index: <base64 value>\n```\n\n----------------------------------------\n\nTITLE: IAM Conditions for Managing Access to Secrets\nDESCRIPTION: This snippet highlights how to set IAM conditions to manage access to secrets in GCP Secret Manager. It illustrates the use of the 'startsWith' condition to specify roles based on the fully-qualified resource name of the secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/gcpsm.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nresource.name.startsWith(\"projects/<project_number>/secrets/vault\")\n```\n\nLANGUAGE: shell\nCODE:\n```\n!(resource.name.startsWith(\"projects/<project_number>/secrets/vault\"))\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultAuth Custom Resource in YAML\nDESCRIPTION: Defines authentication configuration for the Operator to authenticate with a Vault server instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  namespace: vso-example\n  name: vault-auth\nspec:\n  vaultConnectionRef: vault-connection\n  method: kubernetes\n  mount: kubernetes\n  kubernetes:\n    role: example\n    serviceAccount: default\n```\n\n----------------------------------------\n\nTITLE: Terraform Configuration for Azure Key Vault Setup\nDESCRIPTION: This Terraform configuration sets up the necessary Azure infrastructure for using Azure Key Vault with Vault's key management secrets engine. It creates an Azure AD application, service principal, resource group, and Key Vault with appropriate access policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"azuread\" {\n  version = \"=0.11.0\"\n}\n\nprovider \"azurerm\" {\n  features {\n    key_vault {\n      purge_soft_delete_on_destroy = true\n    }\n  }\n}\n\nresource \"random_id\" \"app_rg_name\" {\n  byte_length = 3\n}\n\nresource \"random_id\" \"keyvault_name\" {\n  byte_length = 3\n}\n\ndata \"azurerm_client_config\" \"current\" {}\n\nresource \"azuread_application\" \"key_vault_app\" {\n  name                       = \"app-${random_id.app_rg_name.hex}\"\n  homepage                   = \"http://homepage${random_id.app_rg_name.b64_url}\"\n  identifier_uris            = [\"http://uri${random_id.app_rg_name.b64_url}\"]\n  reply_urls                 = [\"http://replyur${random_id.app_rg_name.b64_url}\"]\n  available_to_other_tenants = false\n  oauth2_allow_implicit_flow = true\n}\n\nresource \"azuread_service_principal\" \"key_vault_sp\" {\n  application_id               = azuread_application.key_vault_app.application_id\n  app_role_assignment_required = false\n}\n\nresource \"random_password\" \"password\" {\n  length           = 24\n  special          = true\n  override_special = \"%@\"\n}\n\nresource \"azuread_service_principal_password\" \"key_vault_sp_pwd\" {\n  service_principal_id = azuread_service_principal.key_vault_sp.id\n  value                = random_password.password.result\n  end_date             = \"2099-01-01T01:02:03Z\"\n}\n\nresource \"azurerm_resource_group\" \"key_vault_rg\" {\n  name     = \"learn-rg-${random_id.app_rg_name.hex}\"\n  location = \"West US\"\n}\n\nresource \"azurerm_key_vault\" \"key_vault_kv\" {\n  name                = \"learn-keyvault-${random_id.keyvault_name.hex}\"\n  location            = azurerm_resource_group.key_vault_rg.location\n  resource_group_name = azurerm_resource_group.key_vault_rg.name\n  sku_name            = \"premium\"\n  soft_delete_enabled = true\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n    key_permissions = [\n      \"backup\",\n      \"create\",\n      \"decrypt\",\n      \"delete\",\n      \"encrypt\",\n      \"get\",\n      \"import\",\n      \"list\",\n      \"purge\",\n      \"recover\",\n      \"restore\",\n      \"sign\",\n      \"unwrapKey\",\n      \"update\",\n      \"verify\",\n      \"wrapKey\"\n    ]\n  }\n\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = azuread_service_principal.key_vault_sp.object_id\n    key_permissions = [\n      \"create\",\n      \"delete\",\n      \"get\",\n      \"import\",\n      \"update\"\n    ]\n  }\n}\n\noutput \"key_vault_1_name\" {\n  value = azurerm_key_vault.key_vault_kv.name\n}\n\noutput \"tenant_id\" {\n  value = data.azurerm_client_config.current.tenant_id\n}\n\noutput \"client_id\" {\n  value = azuread_application.key_vault_app.application_id\n}\n\noutput \"client_secret\" {\n  value = azuread_service_principal_password.key_vault_sp_pwd.value\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vault Role for Signing Client Keys\nDESCRIPTION: This code snippet demonstrates how to create a named Vault role for signing client keys. This role defines the allowed users, extensions, and other parameters for the generated certificates. The `algorithm_signer`, `allow_user_certificates`, `allowed_users`, `allowed_extensions`, `default_extensions`, `key_type`, `default_user`, and `ttl` parameters configure the role's behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ssh-client-signer/roles/my-role -<<\"EOH\"\n{\n  \"algorithm_signer\": \"rsa-sha2-256\",\n  \"allow_user_certificates\": true,\n  \"allowed_users\": \"*\",\n  \"allowed_extensions\": \"permit-pty,permit-port-forwarding\",\n  \"default_extensions\": {\n    \"permit-pty\": \"\"\n  },\n  \"key_type\": \"ca\",\n  \"default_user\": \"ubuntu\",\n  \"ttl\": \"30m0s\"\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Customizing Vault Health Check Status Code\nDESCRIPTION: This example shows how to customize the status code returned by the health check. It sets the DR secondary code to 200 using a query parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/health.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -i https://127.0.0.1:8200/v1/sys/health\\?drsecondarycode\\=200\n```\n\n----------------------------------------\n\nTITLE: Importing Keys with Transform BYOK in Vault CLI\nDESCRIPTION: This snippet demonstrates how to import keys into a mount using the Transform BYOK (Bring Your Own Key) mechanism. The command uses the 'transform import' command with a path to the transformation and a key file, specifying the key type as 'rsa-2048'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/transform/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault transform import transform/transformations/fpe/example @test-key type=rsa-2048\nRetrieving transform wrapping key.\nWrapping source key with ephemeral key.\nEncrypting ephemeral key with transform wrapping key.\nSubmitting wrapped key.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Matching Operators for Vault Filtering\nDESCRIPTION: Lists all available matching operators that can be used in Vault filter expressions, including equality, emptiness, substring matching, and regular expression operators.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/filtering.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n// Equality & Inequality checks\n<Selector> == \"<Value>\"\n<Selector> != \"<Value>\"\n\n// Emptiness checks\n<Selector> is empty\n<Selector> is not empty\n\n// Contains checks or Substring Matching\n\"<Value>\" in <Selector>\n\"<Value>\" not in <Selector>\n<Selector> contains \"<Value>\"\n<Selector> not contains \"<Value>\"\n\n// Regular Expression Matching\n<Selector> matches \"<Value>\"\n<Selector> not matches \"<Value>\"\n```\n\n----------------------------------------\n\nTITLE: Reset Database Connection with cURL\nDESCRIPTION: This cURL command resets a database connection in Vault by closing and restarting it with the current barrier configuration. It uses a POST request to the /database/reset/:name endpoint and requires a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/database/reset/mysql\n```\n\n----------------------------------------\n\nTITLE: Authenticating via CLI - HashiCorp Vault\nDESCRIPTION: This snippet demonstrates how to authenticate to Vault using the Azure auth method via the command line interface. The parameters include the role, JWT, subscription ID, and resource group name, which are necessary for successfully logging in.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/azure/login \\\n    role=\"dev-role\" \\\n    jwt=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\" \\\n    subscription_id=\"12345-...\" \\\n    resource_group_name=\"test-group\" \\\n    vm_name=\"test-vm\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Transit Seal in HCL\nDESCRIPTION: Example configuration block showing how to set up Transit seal in Vault's configuration file with all required parameters including TLS settings and key configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/transit.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"transit\" {\n  address            = \"https://vault:8200\"\n  token              = \"s.Qf1s5zigZ4OX6akYjQXJC1jY\"\n  disable_renewal    = \"false\"\n\n  // Key configuration\n  key_name           = \"transit_key_name\"\n  mount_path         = \"transit/\"\n  namespace          = \"ns1/\"\n\n  // TLS Configuration\n  tls_ca_cert        = \"/etc/vault/ca_cert.pem\"\n  tls_client_cert    = \"/etc/vault/client_cert.pem\"\n  tls_client_key     = \"/etc/vault/ca_cert.pem\"\n  tls_server_name    = \"vault\"\n  tls_skip_verify    = \"false\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for AWS Auth Method in Vault\nDESCRIPTION: A JSON policy document that specifies the recommended IAM permissions needed by the Vault AWS auth method. It includes permissions for EC2 instance validation, IAM role verification, cross-account access, and credential management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"ec2:DescribeInstances\",\n        \"iam:GetInstanceProfile\",\n        \"iam:GetUser\",\n        \"iam:GetRole\"\n      ],\n      \"Resource\": \"*\"\n    },\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"sts:AssumeRole\"],\n      \"Resource\": [\"arn:aws:iam::<AccountId>:role/<VaultRole>\"]\n    },\n    {\n      \"Sid\": \"ManageOwnAccessKeys\",\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"iam:CreateAccessKey\",\n        \"iam:DeleteAccessKey\",\n        \"iam:GetAccessKeyLastUsed\",\n        \"iam:GetUser\",\n        \"iam:ListAccessKeys\",\n        \"iam:UpdateAccessKey\"\n      ],\n      \"Resource\": \"arn:aws:iam::*:user/${aws:username}\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Go\nDESCRIPTION: This code snippet configures and initializes a Vault client in Go, setting the address to localhost:8200 and the token to 'dev-only-token'.  It uses the root token for authentication, which is only recommended for development.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nconfig := vault.DefaultConfig()\n\nconfig.Address = \"http://127.0.0.1:8200\"\n\nclient, err := vault.NewClient(config)\nif err != nil {\n    log.Fatalf(\"unable to initialize Vault client: %v\", err)\n}\n\nclient.SetToken(\"dev-only-token\")\n```\n\n----------------------------------------\n\nTITLE: Authenticating via API with Okta in Vault\nDESCRIPTION: This cURL command shows how to authenticate with Vault using the Okta auth method via the HTTP API. It sends a POST request with the user's password to the Okta login endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"password\": \"MY_PASSWORD\"}' \\\n    http://127.0.0.1:8200/v1/auth/okta/login/my-username\n```\n\n----------------------------------------\n\nTITLE: Joining Raft Peers in Primary Cluster\nDESCRIPTION: These commands join the remaining pods to the Raft cluster and unseal them using the internal service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-primary-1 -- vault operator raft join http://vault-primary-0.vault-primary-internal:8200\nkubectl exec -ti vault-primary-1 -- vault operator unseal\n\nkubectl exec -ti vault-primary-2 -- vault operator raft join http://vault-primary-0.vault-primary-internal:8200\nkubectl exec -ti vault-primary-2 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Enabling the Kubernetes Auth Method\nDESCRIPTION: This command enables the Kubernetes auth method in Vault, which is required before configuring roles or authenticating with Kubernetes service accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable kubernetes\n```\n\n----------------------------------------\n\nTITLE: GitHub Team Policy Mapping Response\nDESCRIPTION: Sample JSON response showing the policy mapping for a GitHub team, including the team name (key) and assigned policy (value).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"812229d7-a82e-0b20-c35b-81ce8c1b9fa6\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"key\": \"dev\",\n    \"value\": \"dev-policy\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for LDAP Login\nDESCRIPTION: This JSON response shows an example of a successful LDAP login, detailing the client's token, associated policies, metadata, and lease information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"auth\": {\n    \"client_token\": \"c4f280f6-fdb2-18eb-89d3-589e2e834cdb\",\n    \"policies\": [\"admins\", \"default\"],\n    \"metadata\": {\n      \"username\": \"mitchellh\"\n    },\n    \"lease_duration\": 0,\n    \"renewable\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SAML Auth with Manual Identity Provider Settings\nDESCRIPTION: Command to manually configure the SAML authentication method with specific Identity Provider details. This approach is used when the metadata URL is not available.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/saml/config \\\n   default_role=\"admin\" \\\n   idp_sso_url=\"https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml\" \\\n   idp_entity_id=\"https://www.okta.com/abc123eb9xnIfzlaf697\" \\\n   idp_cert=\"@path/to/cert.pem\" \\\n   entity_id=\"https://my.vault/v1/auth/saml\" \\\n   acs_urls=\"https://my.vault/v1/auth/saml/callback\"\n```\n\n----------------------------------------\n\nTITLE: Installing Primary Vault Enterprise Cluster with Helm\nDESCRIPTION: Helm command to install the primary Vault Enterprise cluster with HA and Raft storage enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-perf-with-raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install vault-primary hashicorp/vault \\\n  --set='server.image.repository=hashicorp/vault-enterprise' \\\n  --set='server.image.tag=1.19.0-ent' \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Authenticating with SAML via Vault CLI\nDESCRIPTION: Command for authenticating to Vault using SAML authentication method through the CLI. This launches a browser for the user to complete authentication with their SAML identity provider.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=saml role=admin\n\nComplete the login via your SAML provider. Launching browser to:\n\n    https://company.okta.com/app/vault/abc123eb9xnIfzlaf697/sso/saml?SAMLRequest=fJI9b9swEIZ3%2FwqBu0SJ%2FpBDRAZce4iBtDViN0MX40Sda...\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL with Client Certificate Authentication\nDESCRIPTION: Command to configure PostgreSQL plugin with x509 client certificate authentication by providing PEM-encoded TLS data inline from files, useful when direct access to Vault server is limited.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-postgresql-database \\\n    plugin_name=\"postgresql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"postgresql://{{username}}:{{password}}@localhost:5432/database-name?sslmode=verify-full\" \\\n    username=\"vaultuser\" \\\n    private_key=@/path/to/client.key \\\n    tls_certificate=@/path/to/client.pem \\\n    tls_ca=@/path/to/client.ca\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading a Secret in Vault KV Engine\nDESCRIPTION: This JSON snippet shows a sample response when reading a secret from Vault's KV engine. It includes subkeys and metadata about the secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subkeys\": {\n    \"foo\": null,\n    \"bar\": {\n      \"baz\": null\n    },\n    \"quux\": null\n  },\n  \"metadata\": {\n    \"created_time\": \"2021-12-14T20:28:00.773477Z\",\n    \"custom_metadata\": null,\n    \"deletion_time\": \"\",\n    \"destroyed\": false,\n    \"version\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AliCloud Role in Vault - JSON Payload\nDESCRIPTION: JSON payload for registering a new AliCloud role in Vault. Includes the role ARN and associated policies. This is used when creating or updating a role with the AliCloud auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"arn\": \"acs:ram::5138828231865461:role/dev-role\",\n  \"policies\": [\"dev\", \"prod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis ElastiCache Connection API - JSON\nDESCRIPTION: Demonstrates how to configure a connection to a Redis ElastiCache database using a JSON payload. The payload requires `url`, `access_key_id`, `secret_access_key`, and `region` parameters. The `plugin_name` must be set to `redis-elasticache-database-plugin`, and `allowed-roles` is set to `*` to allow all roles. This configuration is used to establish the primary connection endpoint for the database secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/rediselasticache.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"redis-elasticache-database-plugin\",\n  \"url\": \"primary-endpoint.my-cluster.xxx.yyy.cache.amazonaws.com:6379\",\n  \"access_key_id\": \"AKI***\",\n  \"secret_access_key\": \"ktriNYvULAWLzUmTGb***\",\n  \"region\": \"us-east-1\",\n  \"allowed-roles\": \"*\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth in Vault (In-Cluster)\nDESCRIPTION: These commands enable and configure JWT auth in Vault when Vault is running inside the Kubernetes cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-0 -- vault auth enable jwt\nkubectl exec vault-0 -- vault write auth/jwt/config \\\n   oidc_discovery_url=https://kubernetes.default.svc.cluster.local \\\n   oidc_discovery_ca_pem=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n```\n\n----------------------------------------\n\nTITLE: Rotating Azure Root Credentials\nDESCRIPTION: cURL command to generate a new client secret for the root account defined in the configuration. The newly generated secret will only be known by Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n  --header \"X-Vault-Token: ...\" \\\n  --request POST \\\n  https://127.0.0.1:8200/v1/auth/azure/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Setting Sync Destination Association in Vault (Shell)\nDESCRIPTION: cURL command to set an association between a secret and a destination in Vault using the POST method. Requires authentication token and payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm/my-store-1/associations/set\n```\n\n----------------------------------------\n\nTITLE: Generating InfluxDB Credentials\nDESCRIPTION: Command to generate new database credentials by reading from the configured role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/influxdb.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           ux-TAAKTSZex6jgXhe67\nusername           v_vaultuser_my_role_7XjvivMy80m7qQughmbk_1602541922\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating KMS Provider in GCP Cloud KMS API - Markdown\nDESCRIPTION: This section outlines the API endpoint for creating or updating a KMS provider in GCP Cloud KMS. The endpoint accepts various parameters necessary for configuring the KMS provider, such as the name, provider type, key collection ID, and credentials for access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/gcpkms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Path                 |\n| :----- | :------------------- |\n| `POST` | `/keymgmt/kms/:name` |\n```\n\nLANGUAGE: markdown\nCODE:\n```\n### Parameters\n\n- `name` `(string: <required>)` – Specifies the name of the KMS provider to create or update.\n  This is provided as part of the request URL.\n\n- `provider` `(string: <required>)` – Specifies the name of a KMS provider that's external to\n  Vault. Must be set to `gcpckms`. Cannot be changed after creation.\n\n- `key_collection` `(string: <required>)` – Refers to the\n  [resource ID](https://cloud.google.com/kms/docs/resource-hierarchy#retrieve_resource_id)\n  of an existing GCP Cloud KMS [key ring](https://cloud.google.com/kms/docs/resource-hierarchy#key_rings).\n  Cannot be changed after creation.\n\n- `credentials` `(map<string|string>: nil)` – The credentials to use for authentication with GCP\n  Cloud KMS. Supplying values for this parameter is optional, as credentials may also be specified\n  as environment variables. See the [authentication](/vault/docs/secrets/key-management/gcpkms#authentication)\n  section for details on precedence.\n\n  - `service_account_file` `(string: <required>)` - The path to a Google service account key file. The\n    key file must be readable on the host that Vault server is running on. May also be provided by the\n    `GOOGLE_CREDENTIALS` environment variable or by\n    [application default credentials](https://cloud.google.com/docs/authentication/production).\n```\n\n----------------------------------------\n\nTITLE: Starting Vault Agent Instance with CLI\nDESCRIPTION: This snippet showcases the basic use of the `vault agent` command to initialize a Vault Agent instance. It includes starting the agent using a configuration file, displaying help options, and outlining command arguments and flags. The command facilitates automatic authentication and secret fetching for client applications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/agent/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault agent -config <config_file>\n\n$ vault agent [-help | -h]\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth with Public Keys in Vault\nDESCRIPTION: This command configures the JWT auth mount in Vault with the Kubernetes public signing keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/jwt/config \\\n   jwt_validation_pubkeys=\"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9...\n-----END PUBLIC KEY-----\",\"-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9...\n-----END PUBLIC KEY-----\"\n```\n\n----------------------------------------\n\nTITLE: Defining RabbitMQ Role in Vault\nDESCRIPTION: This command creates a role named 'my-role' in Vault, mapping it to specific virtual host permissions in RabbitMQ. It grants read and write access to all resources in the root virtual host.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/rabbitmq.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write rabbitmq/roles/my-role \\\n    vhosts='{\"/\":{\"write\": \".*\", \"read\": \".*\"}}'\n```\n\n----------------------------------------\n\nTITLE: Running Vault Agent with Configuration File\nDESCRIPTION: This example demonstrates starting a Vault Agent using a single configuration file specified by its path. The configuration file often includes settings necessary for the agent's operation such as authentication methods and secret retrieval configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/agent/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault agent -config=/etc/vault/agent/config.hcl\n```\n\n----------------------------------------\n\nTITLE: Generating Programmatic API Keys from Vault\nDESCRIPTION: This snippet outlines the command to generate new Programmatic API Keys for a specified role. This is performed by reading from the `creds` endpoint of the role, which returns both the public and private keys along with their lease information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/mongodbatlas.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read mongodbatlas/creds/test\n\n    Key                Value\n    ---                -----\n    lease_id           mongodbatlas/creds/test/0fLBv1c2YDzPlJB1PwsRRKHR\n    lease_duration     2h\n    lease_renewable    true\n    description        vault-test-1563980947-1318\n    private_key        905ae89e-6ee8-40rd-ab12-613t8e3fe836\n    public_key         klpruxce\n```\n\n----------------------------------------\n\nTITLE: Storing Secrets in Key/Value Plugin - Shell\nDESCRIPTION: This snippet demonstrates how to store a user's credentials in the key/value plugin as secrets. The credentials are associated with a specified path within the Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put \\ \n  -mount shared \\ \n  kv/creds \\ \n  username=opsuser password=p@ssw0rd\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Authentication Login Payload\nDESCRIPTION: JSON payload for authenticating a Kubernetes service account with Vault, containing role name and JWT token\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"dev-role\",\n  \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Securely Exporting a Key for BYOK\nDESCRIPTION: Shell command to securely export a Transit key for Bring Your Own Key (BYOK) scenarios, using another key for wrapping during transit between Vault instances.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transit/byok-export/wrapping-key/to-be-shared-key/1\n```\n\n----------------------------------------\n\nTITLE: Sending Tokenization Check Request Using cURL (Shell Session)\nDESCRIPTION: This command shows how to perform a POST request to check the existence of a tokenized value using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_64\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/tokenized/example-role\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes Role (Vault)\nDESCRIPTION: Defines a set of Kubernetes role rules to generate tokens. It specifies allowed namespaces and a set of rules defining API groups, resources, and verbs. The rules dictate the permissions granted to the generated service account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespaces\": \"*\",\n  \"generated_role_rules\": \"rules:\\n- apiGroups: [\\\"\"]\\n  resources: [\\\"pods\\\"]\\n  verbs: [\\\"list\\\"]\\n\",\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespaces\": \"*\",\n  \"generated_role_rules\": \"'rules': [{'apiGroups': [''],'resources': ['pods'],'verbs': ['list']}]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Auth Method to a Specific Namespace in Vault\nDESCRIPTION: This example shows how to move an existing auth method 'auth/userpass' to a specific namespace 'education/certification/approle' in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/move.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth move auth/userpass education/certification/auth/userpass\n```\n\n----------------------------------------\n\nTITLE: Setting Signed Certificate for Intermediate CA in Vault\nDESCRIPTION: Configures the intermediate CA with its signed certificate obtained from the root CA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki_int/intermediate/set-signed certificate=@signed_certificate.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring KMIP Engine\nDESCRIPTION: This snippet demonstrates how to configure the KMIP secrets engine by specifying listening addresses, connection timeout, server hostnames, and TLS settings. It sets up the KMIP server to listen for requests and generate a CA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"listen_addrs\": \"127.0.0.1:5696,192.168.1.2:9000\",\n  \"connection_timeout\": \"1s\",\n  \"server_hostnames\": \"myhostname1,myhostname2\",\n  \"server_ips\": \"192.168.1.2\",\n  \"tls_ca_key_type\": \"ec\",\n  \"tls_ca_key_bits\": 521,\n  \"tls_min_version\": \"tls11\",\n  \"default_tls_client_key_type\": \"ec\",\n  \"default_tls_client_key_bits\": 224,\n  \"default_tls_client_ttl\": 86400\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting OIDC Client by Name\nDESCRIPTION: This API endpoint deletes a specified OIDC client by name. The request uses a DELETE HTTP method and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/oidc/client/test-client\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vault Using GCE Instance\nDESCRIPTION: This shell command illustrates how to authenticate to Vault from a GCE instance by leveraging the Vault's ability to auto-discover identity tokens on the instance. It specifies the authentication method and role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login \\\n  -method=gcp \\\n  role=\"my-gce-role\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Limits for Vault Agent\nDESCRIPTION: Example of setting resource requests and limits for CPU and memory for the Vault Agent sidecar container.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_51\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  requests:\n    memory: '256Mi'\n    cpu: '250m'\n  limits:\n    memory: '256Mi'\n    cpu: '250m'\n```\n\n----------------------------------------\n\nTITLE: Deploying Application with Vault CSI Provider in Kubernetes\nDESCRIPTION: This YAML snippet demonstrates how to use the Secret Provider Class in an application deployment. It creates a CSI volume that references the 'vault-db-creds' Secret Provider Class and mounts it to the container.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: demo\nspec:\n  selector:\n    matchLabels:\n      app: demo\n  replicas: 1\n  template:\n    spec:\n      serviceAccountName: app\n      containers:\n        - name: app\n          image: my-app:1.0.0\n          volumeMounts:\n            - name: 'vault-db-creds'\n              mountPath: '/mnt/secrets-store'\n              readOnly: true\n      volumes:\n        - name: vault-db-creds\n          csi:\n            driver: 'secrets-store.csi.k8s.io'\n            readOnly: true\n            volumeAttributes:\n              secretProviderClass: 'vault-db-creds'\n```\n\n----------------------------------------\n\nTITLE: Resume Vault Migration from Specific Key\nDESCRIPTION: Example showing how to resume a halted migration from a specific key prefix.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/migrate.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator migrate -config migrate.hcl -start \"data/logical/fd\"\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Looking Up Token (JSON)\nDESCRIPTION: This JSON payload is crafted to look up a token by its plaintext value and optional expiration parameters in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"1111-1111-1111-1111\",\n  \"min_expiration\": \"2022-06-06T3:14:15+00:00\",\n  \"max_expiration\": \"2022-06-07T9:26:53+00:00\",\n  \"transformation\": \"ccn-tokenization\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ADFS Role in Vault\nDESCRIPTION: CLI command to create a default role for ADFS authentication. This defines the ADFS audiences, redirect URIs, claim mapping, and token policies for ADFS users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/<YOUR_OIDC_MOUNT_PATH>/role/<ADFS_ROLE> \\\n  bound_audiences=\"<ADFS_APPLICATION_GROUP_CLIENT_ID>\" \\\n  allowed_redirect_uris=\"${VAULT_ADDR}/ui/vault/auth/<YOUR_OIDC_MOUNT_PATH>/oidc/callback\" \\\n  allowed_redirect_uris=\"http://localhost:8250/oidc/callback\" \\\n  user_claim=\"upn\" groups_claim=\"group\" token_policies=\"default\"\n```\n\n----------------------------------------\n\nTITLE: Signing Intermediate CA Certificate with Root CA in Vault\nDESCRIPTION: Uses the root CA to sign the intermediate CA's CSR, generating a signed certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki/root/sign-intermediate csr=@pki_int.csr format=pem_bundle ttl=43800h\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Organization Secrets Destination\nDESCRIPTION: A JSON configuration for synchronizing secrets to a GitHub organization with selective repository access. Specifies which repositories within the organization can access the synchronized secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"github_pat_12345\",\n    \"secrets_location\": \"organization\",\n    \"organization_name\": \"my-organization\",\n    \"organization_visibility\": \"selected\",\n    \"selected_repository_names\": \"my-repository-1,my-repository-2,my-repository-3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Vault License Status Endpoint\nDESCRIPTION: This JSON response shows the license information returned by the /sys/license/status endpoint. It includes autoloading status, license details such as expiration time, enabled features, license ID, performance standby count, and validity period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/license.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"autoloading_used\": true,\n    \"autoloaded\": {\n      \"expiration_time\": \"2022-05-17T23:59:59Z\",\n      \"features\": [\n        \"HSM\",\n        \"Performance Replication\",\n        \"DR Replication\",\n        \"MFA\",\n        \"Sentinel\",\n        \"Seal Wrapping\",\n        \"Control Groups\",\n        \"Performance Standby\",\n        \"Namespaces\",\n        \"KMIP\",\n        \"Entropy Augmentation\",\n        \"Transform Secrets Engine\",\n        \"Lease Count Quotas\",\n        \"Key Management Secrets Engine\",\n        \"Automated Snapshots\"\n      ],\n      \"license_id\": \"060d7820-fa59-f95c-832b-395db0aeb9ba\",\n      \"performance_standby_count\": 9999,\n      \"start_time\": \"2021-05-17T00:00:00Z\",\n      \"termination_time\": \"2031-05-17T23:59:59Z\"\n    },\n    \"persisted_autoload\": {\n      \"expiration_time\": \"2022-05-17T23:59:59Z\",\n      \"features\": [\n        \"HSM\",\n        \"Performance Replication\",\n        \"DR Replication\",\n        \"MFA\",\n        \"Sentinel\",\n        \"Seal Wrapping\",\n        \"Control Groups\",\n        \"Performance Standby\",\n        \"Namespaces\",\n        \"KMIP\",\n        \"Entropy Augmentation\",\n        \"Transform Secrets Engine\",\n        \"Lease Count Quotas\",\n        \"Key Management Secrets Engine\",\n        \"Automated Snapshots\"\n      ],\n      \"license_id\": \"060d7820-fa59-f95c-832b-395db0aeb9ba\",\n      \"performance_standby_count\": 9999,\n      \"start_time\": \"2021-05-17T00:00:00Z\",\n      \"termination_time\": \"2031-05-17T23:59:59Z\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Vault Policy from Standard Input\nDESCRIPTION: Shows how to pipe policy contents from a file through stdin to create a new policy named 'my-policy' using the vault policy write command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/write.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cat my-policy.hcl | vault policy write my-policy -\n```\n\n----------------------------------------\n\nTITLE: Retrieving Static Credentials from Vault\nDESCRIPTION: Makes a GET request to the Vault API to retrieve the current credentials for a static role. Returns the username, password, and information about rotation settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/database/static-creds/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Required AWS IAM Permissions for DynamoDB\nDESCRIPTION: AWS IAM policy statement showing the required permissions for Vault to interact with DynamoDB tables.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/dynamodb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"dynamodb:DescribeLimits\",\n        \"dynamodb:DescribeTimeToLive\",\n        \"dynamodb:ListTagsOfResource\",\n        \"dynamodb:DescribeReservedCapacityOfferings\",\n        \"dynamodb:DescribeReservedCapacity\",\n        \"dynamodb:ListTables\",\n        \"dynamodb:BatchGetItem\",\n        \"dynamodb:BatchWriteItem\",\n        \"dynamodb:CreateTable\",\n        \"dynamodb:DeleteItem\",\n        \"dynamodb:GetItem\",\n        \"dynamodb:GetRecords\",\n        \"dynamodb:PutItem\",\n        \"dynamodb:Query\",\n        \"dynamodb:UpdateItem\",\n        \"dynamodb:Scan\",\n        \"dynamodb:DescribeTable\",\n        \"dynamodb:UpdateTable\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": [ \"arn:aws:dynamodb:us-east-1:... dynamodb table ARN\" ]\n    },\n```\n\n----------------------------------------\n\nTITLE: Reverting Verbosity of a Single Logger (cURL Request)\nDESCRIPTION: Shell command to send a DELETE request to revert a specific logger to its configured default level. This example targets the 'core' logger to reset its log level.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/loggers/core\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Service Environment Variables in Windows\nDESCRIPTION: Configures additional environment variables for the Vault service environment, such as the VAULT_ADDR for client connectivity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_12\n\nLANGUAGE: powershell\nCODE:\n```\nnssm set MS_VAULT AppEnvironmentExtra `$env:VAULT_ADDR=https://localhost:8200\n```\n\n----------------------------------------\n\nTITLE: Creating a Group - Vault Identity API (JSON Payload)\nDESCRIPTION: This JSON payload is used to create a new group or update an existing group within Vault's Identity store. The payload defines metadata associated with the group, as well as a list of policies to be tied to the group.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"hello\": \"world\"\n  },\n  \"policies\": [\"grouppolicy1\", \"grouppolicy2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing TOTP MFA methods response - JSON\nDESCRIPTION: This JSON response provides a list of TOTP MFA method IDs accessible within a Vault namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"1f36d4cf-52c9-475d-a5cd-49c573c54e55\",\n      \"4c6b1968-b385-4c46-ac5e-9b74e7b206be\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Issuing a New Certificate in Vault PKI\nDESCRIPTION: This command issues a new issuer certificate using a parent certificate. It creates a certificate with the specified issuer name and common name, returning the CA chain and other certificate information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki issue -issuer_name=\"FirstDepartment\" /pki_root/issuer/default /pki_int/ common_name=\"first-department.example.com\"\nKey                               Value\n---                               -----\nca_chain                          [-----BEGIN CERTIFICATE-----\nMIIDsDCCApigAwIBAgIULEPuHTW7UDtAQg+qcc18osNWgZIwDQYJKoZIhvcNAQEL...\n```\n\n----------------------------------------\n\nTITLE: Rotating Root Credentials (cURL)\nDESCRIPTION: cURL command to send a POST request to generate a new client secret for the root account defined in the config.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  --header \"X-Vault-Token: ...\" \\\n  --request POST \\\n  http://127.0.0.1:8200/v1/azure/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Creating a Transform Role with JSON Payload\nDESCRIPTION: Example JSON payload for creating or updating a role in the Transform secrets engine. The payload specifies which transformations can be used with this role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"transformations\": [\"creditcard-fpe\", \"creditcard-masking\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting SSH Secrets Engine in Vault\nDESCRIPTION: This command enables the SSH secrets engine in Vault, making it available for use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/one-time-ssh-passwords.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable ssh\n```\n\n----------------------------------------\n\nTITLE: Creating Role with Service Account Name and Namespace\nDESCRIPTION: JSON payload for creating a Kubernetes auth role with service account name, namespace, policies, and maximum TTL configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bound_service_account_names\": \"vault-auth\",\n  \"bound_service_account_namespaces\": \"default\",\n  \"policies\": [\"dev\", \"prod\"],\n  \"max_ttl\": 1800000\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Vault KVv2 Destination in HCL\nDESCRIPTION: This code snippet demonstrates how to define a destination block in HCL to specify the Vault KVv2 secrets engine mount where imported secrets will be stored. It requires a name and mount path, and optionally accepts a namespace, address, and token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"destination_vault {\\n  name      = \\\"my-dest-1\\\"\\n  namespace = \\\"ns-1\\\"\\n  mount     = \\\"mount-1\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Generating Signed JWT Using curl and oauth2l\nDESCRIPTION: This shell script demonstrates how to create a signed JWT for GCP IAM using curl and the oauth2l tool. The script sets environment variables for role, service account, OAuth token, and expiration time, then crafts a JWT claim and sends it to Google API to sign.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\nROLE=\"my-role\"\nSERVICE_ACCOUNT=\"service-account@my-project.iam.gserviceaccount.com\"\nOAUTH_TOKEN=\"$(oauth2l header cloud-platform)\"\nEXPIRATION=\"<your_token_expiration>\"\nJWT_CLAIM=\"{\\\"aud\\\":\\\"vault/${ROLE}\\\", \\\"sub\\\": \\\"${SERVICE_ACCOUNT}\\\", \\\"exp\\\": ${EXPIRATION}}\"\n\n$ curl \\\n  --header \"${OAUTH_TOKEN}\" \\\n  --header \"Content-Type: application/json\" \\\n  --request POST \\\n  --data \"{\\\"payload\\\": \\\"${JWT_CLAIM}\\\"}\" \\\n  \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/${SERVICE_ACCOUNT}:signJwt\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Auth with Workload Identity Federation\nDESCRIPTION: Command to configure Azure authentication with workload identity federation, specifying tenant ID, client ID, and identity token audience.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault write azure/config \\\n    tenant_id=7cd1f227-ca67-4fc6-a1a4-9888ea7f388c \\\n    client_id=dd794de4-4c6c-40b3-a930-d84cd32e9699 \\\n    identity_token_audience=vault.example/v1/identity/oidc/plugins\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduled Root Credential Rotation in LDAP Auth Method\nDESCRIPTION: This command sets up a schedule for automatic root credential rotation in the LDAP auth engine. It rotates the credential every Saturday at midnight.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/ldap/config \\\n    ...\n    rotation_schedule=\"0 * * * SAT\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultAuthGlobal Custom Resource in YAML\nDESCRIPTION: Defines shared Vault authentication configuration that can be inherited by multiple VaultAuth resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuthGlobal\nmetadata:\n  namespace: vso-example\n  name: vault-auth-global\nspec:\n  defaultAuthMethod: kubernetes\n  kubernetes:\n    audiences:\n    - vault\n    mount: kubernetes\n    namespace: example-ns\n    role: auth-role\n    serviceAccount: default\n    tokenExpirationSeconds: 600\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  namespace: vso-example\n  name: vault-auth\nspec:\n  vaultAuthGlobalRef:\n    name: vault-auth-global\n  kubernetes:\n    role: local-role\n```\n\n----------------------------------------\n\nTITLE: AWS KMS Access Policy Configuration\nDESCRIPTION: JSON policy configuration that grants necessary KMS permissions (encrypt, decrypt, describeKey) to Vault instances for auto-unsealing using AWS KMS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/seal-best-practices.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\"kms:Encrypt\", \"kms:Decrypt\", \"kms:DescribeKey\"],\n      \"Resource\": [\"${kms_arn}\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Pinned Plugin Versions - cURL Request\nDESCRIPTION: cURL command to list all pinned plugin versions using GET request with authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-pins.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/plugins/pins\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 with Custom KMS Encryption Key (HCL)\nDESCRIPTION: Demonstrates configuring S3 storage for Vault with KMS encryption using a customer-managed KMS key. This allows for custom encryption strategies and tighter security control. Ensure AWS credentials and the KMS key ID are correctly set for successful deployment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/s3.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"s3\" {\n  access_key = \"abcd1234\"\n  secret_key = \"defg5678\"\n  bucket     = \"my-bucket\"\n  kms_key_id = \"001234ac-72d3-9902-a3fc-0123456789ab\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Storage in Vault with HCL\nDESCRIPTION: This HCL snippet configures the MySQL backend storage for Vault with specified username, password, and database. It is necessary to have a MySQL server ready, and parameters like 'username' and 'password' are required. The configuration supports features like high availability by adjusting MySQL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/mysql.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"mysql\" {\n  username = \"user1234\"\n  password = \"secret123!\"\n  database = \"vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Venafi Secret for Trust Protection Platform - Shell Script\nDESCRIPTION: This snippet writes a configuration for a Venafi secret that associates names in Vault with the appropriate connection and authentication settings for enrolling certificates via the Trust Protection Platform.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/venafi/tpp \\\n    url=\"https://tpp.venafi.example\" \\\n    access_token=\"tn1PwE1QTZorXmvnTowSyA==\" \\\n    refresh_token=\"MGxV7DzNnclQi9CkJMCXCg==\" \\\n    zone=\"DevOps\\\\HashiCorp Vault\" \\\n    trust_bundle_file=\"/path-to/bundle.pem\"\n```\n\n----------------------------------------\n\nTITLE: Confirming Key Rotation in Vault\nDESCRIPTION: This command reads the key information and extracts the latest version number to confirm successful key rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$  vault read -format=json keymgmt/key/rsa-1 | jq '.data.latest_version'\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP Method Attached to Entity in Vault\nDESCRIPTION: This command generates a TOTP configuration associated with a specific entity ID.  The output includes a barcode and URL that can be used to configure a TOTP authenticator app like Google Authenticator. This allows the user to generate time-based one-time passwords for MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ vault write sys/mfa/method/totp/my_totp/admin-generate \\\n        entity_id=307d6c16-6f5c-4ae7-46a9-2d153ffcbc63\n```\n\n----------------------------------------\n\nTITLE: Rekey Auto Unseal Vault with PGP Recovery Keys\nDESCRIPTION: Initializes a rekey operation for Auto Unseal vault with PGP-encrypted recovery keys using a single Keybase identity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey \\\n    -target=recovery \\\n    -init \\\n    -pgp-keys=keybase:grahamhashicorp\n    -key-shares=1\n    -key-threshold=1\n```\n\n----------------------------------------\n\nTITLE: Example API Response containing RoleID\nDESCRIPTION: This JSON structure represents the response returned from Vault's API when querying for a RoleID. It contains the RoleID under the `data.role_id` field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"data\": {\n       \"role_id\": \"988a9dfd-ea69-4a53-6cb6-9d6b86474bba\"\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Making Base Request to Retrieve CRLs in HashiCorp Vault\nDESCRIPTION: This code shows how to make a GET request to HashiCorp Vault to retrieve Certificate Revocation Lists (CRLs) using curl. A valid Vault token and CA certificate are required. The URL targets the specific CRL endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\ \n    --header \"X-Vault-Token: ...\" \\ \n    --cacert vault-ca.pem \\ \n    https://127.0.0.1:8200/v1/auth/cert/crls/custom-crl\n```\n\n----------------------------------------\n\nTITLE: Configuring User Lockout Policy in HCL\nDESCRIPTION: This snippet demonstrates how to configure user lockout settings in Vault using HCL. The `user_lockout` stanza accepts parameters like `lockout_duration`, `lockout_threshold`, and `disable_lockout` to control the behavior of lockout policies. Dependencies include a Vault configuration file where these settings can be applied. Expected input involves the auth method name and parameters, and the output affects user authentication behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/user-lockout.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nuser_lockout [NAME] {\n  [PARAMETERS...]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nuser_lockout \"all\" {\n  lockout_duration = \"10m\"\n  lockout_counter_reset = \"10m\"\n}\n\nuser_lockout \"userpass\" {\n  lockout_threshold = \"25\"\n  lockout_duration = \"5m\"\n}\n\nuser_lockout \"ldap\" {\n disable_lockout = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Login Payload\nDESCRIPTION: JSON payload for performing JWT login with role and token\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"dev-role\",\n  \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Static Role Definition via HTTP API in Vault\nDESCRIPTION: Makes a GET request to the Vault API to retrieve the definition of a specific static role from the database secrets engine. Requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/database/static-roles/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Configuring AliCloud Credentials in Vault\nDESCRIPTION: Command to configure the access key and secret key that Vault will use to communicate with AliCloud for generating dynamic credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault write alicloud/config \\\n    access_key=0wNEpMMlzy7szvai \\\n    secret_key=PupkTg8jdmau1cXxYacgE736PJj4cA\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultAuth for OpenShift OperatorHub\nDESCRIPTION: YAML configuration for setting up VaultAuth with storage encryption for OpenShift OperatorHub installations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/client-cache.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: operator\n  namespace: vault-secrets-operator\n  labels:\n    cacheStorageEncryption: 'true'\nspec:\n  kubernetes:\n    role: operator\n    serviceAccount: vault-secrets-operator-controller-manager\n    tokenExpirationSeconds: 600\n    audiences: [\"vault\"]\n  method: kubernetes\n  mount: <VAULT_KUBERNETES_PATH>\n  namespace: <VAULT_NAMESPACE>\n  storageEncryption:\n    keyName: vso-client-cache\n    mount: <VAULT_TRANSIT_PATH>\n  vaultConnectionRef: local-vault-server\n```\n\n----------------------------------------\n\nTITLE: Creating Okta Configuration with JSON Payload\nDESCRIPTION: JSON request payload for configuring the Okta auth method with organization name and API token parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"org_name\": \"example\",\n  \"api_token\": \"abc123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Cloud KMS Provider\nDESCRIPTION: Command to configure a KMS provider resource for GCP Cloud KMS, specifying the provider type, key collection path, and credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault write keymgmt/kms/example-kms \\\n    provider=\"gcpckms\" \\\n    key_collection=\"projects/<project-id>/locations/<location>/keyRings/<keyring>\" \\\n    credentials=service_account_file=\"/path/to/service_account/credentials.json\"\n```\n\n----------------------------------------\n\nTITLE: Creating OIDC Role in Vault for Azure AD Integration\nDESCRIPTION: This command creates an OIDC role in Vault, specifying the user claim, allowed redirect URIs, groups claim, and OIDC scopes for Azure AD integration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/azuread.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/role/your_default_role \\\n   user_claim=\"sub\" \\\n   allowed_redirect_uris=\"http://localhost:8250/oidc/callback,https://online_version_hostname:port_number/ui/vault/auth/oidc/oidc/callback\"  \\\n   groups_claim=\"groups\" \\\n   oidc_scopes=\"https://graph.microsoft.com/.default profile\" \\\n   policies=default\n```\n\n----------------------------------------\n\nTITLE: Requesting Router Root Tree in Vault\nDESCRIPTION: This request retrieves a list of router entries in the router's root tree. It requires a root token or sudo privileges and returns details about mounted backends including accessors, paths, types, and UUIDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/internal/inspect/router/root\n```\n\n----------------------------------------\n\nTITLE: Reading Specific Lease Count Quota Example via CLI in Vault\nDESCRIPTION: This example demonstrates reading the details of the 'webapp-tokens' quota using the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/quotas/lease-count/webapp-tokens\n```\n\n----------------------------------------\n\nTITLE: Soft Delete KV Data Using Vault CLI\nDESCRIPTION: Command to soft delete specific versions of key/value data using the vault CLI. Uses the kv delete command with -versions flag to mark data versions as deleted while maintaining recoverability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/delete-data.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault kv delete               \\\n   -mount <mount_path>          \\\n   -versions <target_versions>  \\\n   <secret_path>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Auth Method and Namespaces in Vault\nDESCRIPTION: This script configures the Kubernetes auth method and creates two namespaces (us-west-org and us-east-org) in Vault. It sets up authentication roles, entities, and policies for cross-namespace access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# Create new namespaces - they are peers\nvault namespace create us-west-org\nvault namespace create us-east-org\n\n#--------------------------\n# us-west-org namespace\n#--------------------------\nVAULT_NAMESPACE=us-west-org vault auth enable kubernetes\nVAULT_NAMESPACE=us-west-org vault write auth/kubernetes/config out_of=scope\nVAULT_NAMESPACE=us-west-org vault write auth/kubernetes/role/cross-namespace-demo bound_service_account_names=\"mega-app\" bound_service_account_namespaces=\"client-nicecorp\" alias_name_source=\"serviceaccount_name\"\n\n# Create an entity\nVAULT_NAMESPACE=us-west-org vault auth list -format=json | jq -r '.[\"kubernetes/\"].accessor' > accessor.txt\nVAULT_NAMESPACE=us-west-org vault write -format=json identity/entity name=\"entity-for-mega-app\" | jq -r \".data.id\" > entity_id.txt\nVAULT_NAMESPACE=us-west-org vault write identity/entity-alias name=\"client-nicecorp/mega-app\" canonical_id=$(cat entity_id.txt) mount_accessor=$(cat accessor.txt)\n\n#--------------------------\n# us-east-org namespace\n#--------------------------\nVAULT_NAMESPACE=us-east-org vault secrets enable -path=\"kv-marketing\" kv-v2\nVAULT_NAMESPACE=us-east-org vault kv put kv-marketing/campaign start_date=\"March 1, 2023\" end_date=\"March 31, 2023\" prise=\"Certification voucher\" quantity=\"100\"\n\n# Create a policy to allow read access to kv-marketing\nVAULT_NAMESPACE=us-east-org vault policy write marketing-read-only -<<EOF\npath \"kv-marketing/data/campaign\" {\n   capabilities = [\"read\"]\n}\nEOF\n\n# Create a group\nVAULT_NAMESPACE=us-east-org vault write -format=json identity/group name=\"campaign-admin\" policies=\"marketing-read-only\" member_entity_ids=$(cat entity_id.txt)\n```\n\n----------------------------------------\n\nTITLE: Performing AWS Authentication Login with Curl\nDESCRIPTION: Examples of using curl to authenticate with Vault's AWS auth method. The first example uses EC2 instance identity document authentication with PKCS7 signature, while the second uses IAM authentication with signed headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST \"http://127.0.0.1:8200/v1/auth/aws/login\" -d '{\"role\":\"dev-role\",\"pkcs7\":\"'$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/rsa2048 | tr -d '\\n')'\",\"nonce\":\"5defbf9e-a8f9-3063-bdfc-54b7a42a1f95\"}'\n\ncurl -X POST \"http://127.0.0.1:8200/v1/auth/aws/login\" -d '{\"role\":\"dev\", \"iam_http_request_method\": \"POST\", \"iam_request_url\": \"aHR0cHM6Ly9zdHMuYW1hem9uYXdzLmNvbS8=\", \"iam_request_body\": \"QWN0aW9uPUdldENhbGxlcklkZW50aXR5JlZlcnNpb249MjAxMS0wNi0xNQ==\", \"iam_request_headers\": \"eyJDb250ZW50LUxlbmd0aCI6IFsiNDMiXSwgIlVzZXItQWdlbnQiOiBbImF3cy1zZGstZ28vMS40LjEyIChnbzEuNy4xOyBsaW51eDsgYW1kNjQpIl0sICJYLVZhdWx0LUFXU0lBTS1TZXJ2ZXItSWQiOiBbInZhdWx0LmV4YW1wbGUuY29tIl0sICJYLUFtei1EYXRlIjogWyIyMDE2MDkzMFQwNDMxMjFaIl0sICJDb250ZW50LVR5cGUiOiBbImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD11dGYtOCJdLCAiQXV0aG9yaXphdGlvbiI6IFsiQVdTNC1ITUFDLVNIQTI1NiBDcmVkZW50aWFsPWZvby8yMDE2MDkzMC91cy1lYXN0LTEvc3RzL2F3czRfcmVxdWVzdCwgU2lnbmVkSGVhZGVycz1jb250ZW50LWxlbmd0aDtjb250ZW50LXR5cGU7aG9zdDt4LWFtei1kYXRlO3gtdmF1bHQtc2VydmVyLCBTaWduYXR1cmU9YTY5ZmQ3NTBhMzQ0NWM0ZTU1M2UxYjNlNzlkM2RhOTBlZWY1NDA0N2YxZWI0ZWZlOGZmYmM5YzQyOGMyNjU1YiJdfQ==\" }'\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Reading GCP Engine Config in Vault\nDESCRIPTION: A JSON response example showing a subset of current GCP configuration within Vault, particularly the 'ttl' and 'max_ttl'. This response is only partial as it omits credentials for security purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ttl\": \"1h\",\n    \"max_ttl\": \"4h\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Azure Credentials via cURL\nDESCRIPTION: API request to retrieve Azure credentials using cURL with Vault authentication token\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/azure/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Listing AppRoles - JSON Response\nDESCRIPTION: Sample response showing list of existing AppRoles\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"dev\", \"prod\", \"test\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Secrets Engine in Vault\nDESCRIPTION: This command enables the AWS secrets engine at the default path 'aws/' in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/enable.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable aws\n```\n\n----------------------------------------\n\nTITLE: Sentinel Policy with Control Group Authorization in Vault\nDESCRIPTION: This Sentinel policy rejects the request unless two members of the 'managers' group have authorized the request within the last hour.  It demonstrates how to use the `controlgroup` import in Sentinel to verify control group authorizations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/control-groups.mdx#2025-04-14_snippet_5\n\nLANGUAGE: sentinel\nCODE:\n```\n\"import \\\"time\\\"\\nimport \\\"controlgroup\\\"\\n\\ncontrol_group = func() {\\n    numAuthzs = 0\\n    for controlgroup.authorizations as authz {\\n\\t\\tif \\\"managers\\\" in authz.groups.by_name {\\n\\t\\t\\tif time.load(authz.time).unix > time.now.unix - 3600 {\\n\\t\\t\\t\\tnumAuthzs = numAuthzs + 1\\n\\t\\t\\t}\\n\\t\\t}\\n    }\\n    if numAuthzs >= 2 {\\n        return true\\n    }\\n    return false\\n}\\n\\nmain = rule {\\n    control_group()\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Integrated Storage Entry Size Limit\nDESCRIPTION: Configure maximum entry size for Vault's integrated storage backend using the `max_entry_size` parameter in the storage configuration stanza. Vault automatically chunks entries larger than 512 KiB.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/storage-entry-size.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  max_entry_size = \"2MiB\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultPKISecret in Kubernetes\nDESCRIPTION: YAML configuration for VaultPKISecret custom resource that generates TLS certificates from Vault's PKI secrets engine. Specifies settings like mount path, role, common name, and certificate format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultPKISecret\nmetadata:\n  namespace: vso-example\n  name: vault-pki\nspec:\n  vaultAuthRef: vault-auth\n  mount: pki\n  role: default\n  commonName: example.com\n  format: pem\n  expiryOffset: 1s\n  ttl: 60s\n  namespace: tenant-1\n  destination:\n    create: true\n    name: pki1\n```\n\n----------------------------------------\n\nTITLE: Listing PKI Roles with Vault API\nDESCRIPTION: This code snippet demonstrates how to list available roles within the PKI secrets engine using the Vault API. It uses a `LIST` request to the `/pki/roles` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/roles\n```\n\n----------------------------------------\n\nTITLE: Generate DR Operation Token Sample Request\nDESCRIPTION: cURL request to read the progress of a DR operation token generation attempt.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/generate-operation-token/attempt\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Labels in Go Template\nDESCRIPTION: Demonstrates how to access and include resource labels in a Go template within the Vault Secrets Operator. This example retrieves an appType value from the .Labels input member.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/secret-transformation.mdx#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n{{- printf \"appType=%s\" (get .Labels \"appType\") -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Username Template in AWS Secrets Engine\nDESCRIPTION: Example of the default username template used for generating IAM and STS usernames. The template conditionally formats usernames based on credential type, ensuring STS names are limited to 32 characters and IAM names to 64 characters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ if (eq .Type \"STS\") }}\n    {{ printf \"vault-%s-%s\" (unix_time) (random 20) | truncate 32 }}\n{{ else }}\n    {{ printf \"vault-%s-%s-%s\" (printf \"%s-%s\" (.DisplayName) (.PolicyName) | truncate 42) (unix_time) (random 20) | truncate 64 }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Database with Service Account JSON\nDESCRIPTION: This snippet demonstrates how to configure a Vault PostgreSQL database connection by directly passing service account credentials as an encoded JSON string. This involves specifying the plugin name, allowed roles, connection URL, and authentication type. Users must have credentials accessible in a JSON file. This approach is useful when users prefer not using default credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/postgresql.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/my-postgresql-database \\\n    plugin_name=\"postgresql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"host=project:region:instance user=test-user@project.iam dbname=postgres sslmode=disable\" \\\n    use_private_ip=\"false\" \\\n    auth_type=\"gcp_iam\" \\\n    service_account_json=\"@my_credentials.json\"\n```\n\n----------------------------------------\n\nTITLE: Validating TOTP Code in Vault\nDESCRIPTION: This command validates a TOTP code generated by a third-party app against the key stored in Vault. It returns whether the code is valid or not.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/totp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write totp/code/my-user code=886531\nKey      Value\n---      -----\nvalid    true\n```\n\n----------------------------------------\n\nTITLE: Setting Security Context for Containers\nDESCRIPTION: This YAML example defines the security context for container processes within a Kubernetes pod, specifically for use with Vault. It restricts containers from privilege escalation, which is a common security requirement to prevent malicious actions or accidental privilege gains. This configuration applies default security policies when `global.openshift` is false, and is formatted as YAML for integration with Helm chart deployments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\nallowPrivilegeEscalation: false\n```\n\n----------------------------------------\n\nTITLE: Generate Wrapped SecretID Command\nDESCRIPTION: Shell command demonstrating how to generate a wrapped SecretID with a 60-second TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -wrap-ttl=60s -force auth/approle/role/jenkins/secret-id\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS KMS Provider in Vault CLI\nDESCRIPTION: This snippet demonstrates how to configure the KMS provider resource for AWS KMS using the Vault CLI. It sets the provider, key collection, and credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/awskms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault write keymgmt/kms/example-kms \\\n    provider=\"awskms\" \\\n    key_collection=\"us-west-1\" \\\n    credentials=access_key=\"ASIADJO3WTX6WPLJM42V\" \\\n    credentials=secret_key=\"bCiYmNroLxLmPNQ47VIvjlm8mQu5oktZcQdq195w\"\n```\n\n----------------------------------------\n\nTITLE: Enabling KMIP Secrets Engine in Vault\nDESCRIPTION: Command to enable the KMIP secrets engine in Vault at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable kmip\n```\n\n----------------------------------------\n\nTITLE: Creating Token Role in Vault (JSON)\nDESCRIPTION: Sample payload for creating or updating a token role in Vault. It specifies allowed policies, role name, orphan status, bound CIDRs, renewability, and allowed entity aliases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_policies\": [\n    \"dev\"\n  ],\n  \"name\": \"nomad\",\n  \"orphan\": false,\n  \"bound_cidrs\": [\"127.0.0.1/32\", \"128.252.0.0/16\"],\n  \"renewable\": true,\n  \"allowed_entity_aliases\": [\"web-entity-alias\", \"app-entity-*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Credentials\nDESCRIPTION: Command to generate new dynamic credentials using a configured role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ vault read database/creds/my-dynamic-role\n```\n\n----------------------------------------\n\nTITLE: Defining Access Policy with MFA Methods in HCL\nDESCRIPTION: This snippet defines an access policy in HashiCorp Configuration Language (HCL) that specifies required MFA methods for a path. It ensures that access to 'secret/foo' is granted only if both MFA methods 'dev_team_duo' and 'sales_team_totp' are validated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/foo\" {\n  capabilities = [\"read\"]\n  mfa_methods  = [\"dev_team_duo\", \"sales_team_totp\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Role - Shell Request\nDESCRIPTION: cURL command to delete a specific role from the OCI auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/oci/role/devrole\n```\n\n----------------------------------------\n\nTITLE: Reading JWT/OIDC Configuration with cURL\nDESCRIPTION: Shell command using cURL to retrieve the current configuration of the JWT/OIDC auth method from Vault. This shows how to view the current settings for discovery URL, bound issuer, and other configuration parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/auth/jwt/config\n```\n\n----------------------------------------\n\nTITLE: Listing KMIP Scopes - Response\nDESCRIPTION: This JSON snippet shows the structure of the response received when listing KMIP scopes. The `keys` array contains the names of the existing scopes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"myscope\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS Instance Profile Authentication\nDESCRIPTION: Commands to create an AWS IAM authentication role in Vault for instance profile authentication. Includes both CLI and Terraform approaches.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/aws/role/<VAULT_AWS_INSTANCE_ROLE> \\\n    auth_type=\"iam\" \\\n    policies=\"default\" \\\n    inferred_entity_type=\"ec2_instance\" \\\n    inferred_aws_region=-\"<AWS_REGION>\" \\\n    bound_account_id=\"<ACCOUNT_ID>\" \\\n    bound_iam_principal_arn=\"arn:aws:iam::<ACCOUNT_ID>:instance-profile/eks-<INSTANCE_PROFILE_UUID>\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_aws_auth_backend_role\" \"aws_node_role\" {\n  backend                  = \"auth/aws\"\n  role                     = <VAULT_AWS_INSTANCE_ROLE>\n  auth_type                = \"iam\"\n  token_policies           = [\"default\"]\n  inferred_entity_type     = \"ec2_instance\"\n  inferred_aws_region      = \"<AWS_REGION>\"\n  bound_account_ids        = [\"<ACCOUNT_ID>\"]\n  bound_iam_principal_arns = [\n    \"arn:aws:iam::<ACCOUNT_ID>:role/eks-nodes-<EKS_CLUSTER_NAME>\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Okta MFA Method in Vault\nDESCRIPTION: This command configures an Okta multi-factor authentication method in Vault, specifying the mount accessor and parameters like organization name and API token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write sys/mfa/method/okta/my_okta \\\n    mount_accessor=auth_userpass_54b8e339 \\\n    org_name=\"dev-262775\" \\\n    api_token=\"0071u8PrReNkzmATGJAP2oDyIXwwveqx9vIOEyCZDC\"\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy Resource in Terraform\nDESCRIPTION: Demonstrates how to define a Vault policy resource using Terraform. This snippet shows the basic structure for creating a policy resource.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_policy\" \"<TERRAFORM_RESOURCE_NAME>\" {\n  name = \"<VAULT_POLICY_NAME>\"\n  policy = <<EOT\n    <VAULT_POLICY_DEFINITION>\n  EOT\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Database Role with Rotation Schedule\nDESCRIPTION: Endpoint for creating a static database role with a specific rotation schedule and window for password management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"db_name\": \"mysql\",\n  \"username\": \"static-database-user\",\n  \"rotation_statements\": [\n    \"ALTER USER \\\"{{name}}\\\" IDENTIFIED BY '{{password}}';\"\n  ],\n  \"rotation_schedule\": \"0 0 * * SAT\",\n  \"rotation_window\": \"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Plugin with Google Cloud Service Account JSON\nDESCRIPTION: This command configures the MySQL plugin with Google Cloud IAM authentication using a service account JSON file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mysql-database \\\n    plugin_name=\"mysql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"user@cloudsql-mysql(project:region:instance)/mysql\" \\\n    auth_type=\"gcp_iam\" \\\n    service_account_json=\"@my_credentials.json\"\n```\n\n----------------------------------------\n\nTITLE: Mapping LDAP Group to Vault Policies\nDESCRIPTION: This command maps the LDAP group 'scientists' to the 'foo' and 'bar' Vault policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/ldap/groups/scientists policies=foo,bar\n```\n\n----------------------------------------\n\nTITLE: Deleting PKI Role with cURL\nDESCRIPTION: Shell command using cURL to send a DELETE request to Vault's API for removing an existing PKI role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_83\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/pki/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Creating Okta MFA Method in Vault\nDESCRIPTION: This snippet demonstrates how to create a new Okta MFA method in Vault using a POST request to the '/identity/mfa/method/okta' endpoint. Prerequisites include Vault version 1.13.0 or higher. Key parameters include method_name, username_format, org_name, api_token, base_url, and primary_email. The request takes a JSON payload with details for the Okta MFA method and returns a JSON response with the method_id of the created MFA method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/okta.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"username_format\": \"{{identity.entity.aliases.auth_userpass_1793464a.name}}\", \"org_name\": \"dev-262778\", \"api_token\": \"0081u7KrReNkzmABZJAP2oDyIXccveqx9vIOEyCZDC\"}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/okta\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"method_id\": \"0888fd69-4ea2-91d7-415e-c4bba548529b\"}}\n```\n\n----------------------------------------\n\nTITLE: Basic Signature Request Payload\nDESCRIPTION: Simple JSON payload containing a base64-encoded input string for digital signature generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"adba32==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encryption API Request\nDESCRIPTION: Curl command to encrypt data using the Transit encryption endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/encrypt/my-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Programmatic API Key Network Access List\nDESCRIPTION: This snippet configures a network access list for a Programmatic API Key role, allowing specific IP addresses and CIDR blocks. It's crucial for restricting access and enhancing security of generated API keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/mongodbatlas.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write atlas/roles/test \\\n    project_id=5cf5a45a9ccf6400e60981b6 \\\n    roles=GROUP_CLUSTER_MANAGER \\\n    cidr_blocks=192.168.1.3/32 \\\n    ip_addresses=192.168.1.3\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault OIDC with Google Provider\nDESCRIPTION: This snippet demonstrates how to configure Vault's OIDC authentication method with Google as the provider. It includes settings for fetching Google Workspace groups and user information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/google.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nvault write auth/oidc/config -<<EOF\n{\n    \"oidc_discovery_url\": \"https://accounts.google.com\",\n    \"oidc_client_id\": \"your_client_id\",\n    \"oidc_client_secret\": \"your_client_secret\",\n    \"default_role\": \"your_default_role\",\n    \"provider_config\": {\n        \"provider\": \"gsuite\",\n        \"gsuite_service_account\": \"/path/to/service-account.json\",\n        \"gsuite_admin_impersonate\": \"admin@gsuitedomain.com\",\n        \"fetch_groups\": true,\n        \"fetch_user_info\": true,\n        \"groups_recurse_max_depth\": 5,\n        \"user_custom_schemas\": \"Education,Preferences\",\n        \"impersonate_principal\": \"sa@project.iam.gserviceaccount.com\"\n    }\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Scheduled Root Credential Rotation with Time Window in LDAP Auth Method\nDESCRIPTION: This command sets up a schedule for automatic root credential rotation with a specific time window. It rotates the credential every Saturday at midnight, with a 1-hour window to complete the rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/ldap/config \\\n    ...\n    rotation_window=\"1h\" \\\n    rotation_schedule=\"0 * * * SAT\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: AWS Auth Role API Request\nDESCRIPTION: Example cURL command for creating or updating an AWS authentication role in Vault via the HTTP API. Demonstrates sending a POST request with JSON payload to configure a dev-role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Role with Custom Permissions\nDESCRIPTION: Creates a Vault role with specified TTL values and Azure role assignments using JSON configuration files.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write azure/roles/my-role \\\n    ttl=1h \\\n    max_ttl=24h \\\n    azure_roles=@az_roles.json \\\n    azure_groups=@az_groups.json\n```\n\n----------------------------------------\n\nTITLE: Enable DR Primary Request\nDESCRIPTION: HTTP POST request to enable DR replication in primary mode, with optional payload for specifying cluster address configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/primary/enable\n```\n\n----------------------------------------\n\nTITLE: Configuring PKI Mount Tunable Parameters for EST\nDESCRIPTION: This shell command tunes the PKI secrets engine mount to allow specific response headers and configure delegated authentication accessors. These settings are necessary for EST to work with certain clients.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/est.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune \\\n  -allowed-response-headers=\"Content-Transfer-Encoding\" \\\n  -allowed-response-headers=\"Content-Length\" \\\n  -allowed-response-headers=\"WWW-Authenticate\" \\\n  -delegated-auth-accessors=\"auth_userpass_e2f4f6d5\" \\\n  -delegated-auth-accessors=\"auth_cert_4088ac2d\" \\\n  pki\n```\n\n----------------------------------------\n\nTITLE: Creating an Internally Defined Role in Vault for Elasticsearch\nDESCRIPTION: This command creates a role in Vault that generates Elasticsearch credentials with a role definition specified directly in Vault, providing read access to all indices.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/roles/internally-defined-role \\\n      db_name=my-elasticsearch-database \\\n      creation_statements='{\"elasticsearch_role_definition\": {\"indices\": [{\"names\":[\"*\"], \"privileges\":[\"read\"]}]}}' \\\n      default_ttl=\"1h\" \\\n      max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Response for Reading OIDC Provider Public Keys\nDESCRIPTION: The JSON response format when retrieving public keys. It returns an array of JWK (JSON Web Key) objects that contain the public key information for the OIDC provider.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"use\": \"sig\",\n      \"kty\": \"RSA\",\n      \"kid\": \"ee7c0920-fdb9-5c1a-9c69-6dab710d1a09\",\n      \"alg\": \"RS256\",\n      \"n\": \"zdFjUV9lBw5nQPvTtwH-gzKgRG7iepvYbFoc2hNB0-inJL25oh-mvNW3GS8jPY5XHLsiWa_1TKKE99JrKQgane2C96soFeOvR7SozbCeH8_FpZelH1Pym1NV038j05Vp87uB9FeKPsy1PNOLPTs_Fp42JIAenly7ojYwPp1s61p9V0U9rOhtldY7GkXHLN9s8v3aJjxqrTS3Puhs9MFS7EgRrEDAc69uiLXCoYXKygjXddvJi6j446XxnO2eTRMGl1f2t04s_vDgVnFQgjQSKYWPbOMhf2slkeR47fqE3qqUDzINxauqMbkW-PlLP9IN0crR2uC07cG2os4RxN4YHw\",\n      \"e\": \"AQAB\"\n    },\n    {\n      \"use\": \"sig\",\n      \"kty\": \"RSA\",\n      \"kid\": \"6e468221-b7c2-9d2d-744d-33b7ae0357cb\",\n      \"alg\": \"RS256\",\n      \"n\": \"rMaucILJKiFg_lkCE8ZEV_8jiYdaVDjKkc-8XPBW8S34wIRl1EbsgCYfMHtJnIJ_3eUgOVorW5KVeN9C8W16LR3lhqRWS9y4qlt0AcWpOvsmxr5q5dS_QqgCjeftCKwJzUsMi5bMW8wKjRZdd-qLz6X1rVSZWX82G0So8nRBg9d3MNJbKcdIJrRbrxWkm8U9xMqRouzbyQ2Hsp2rRVgGh7yjEA6daI5Ao8UsPdBmlCM9oKZ1_Kje5JTfZKeHlT-58vn_ylCjMVlapLuUsDN6He2kPVyOzGbie297VOfjmB7QX0ah1f7Ni1UJFJYHrVK9wMfCLTltSFZBcQ9--FlVdQ\",\n      \"e\": \"AQAB\"\n    }\n  ]}\n```\n\n----------------------------------------\n\nTITLE: Reading Password Policy Response in JSON\nDESCRIPTION: This snippet demonstrates the JSON response format when reading a specific password policy. It includes the policy definition as a string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policy\": \"length = 20\\nrule \\\"charset\\\" { ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Token Lookup Response Format\nDESCRIPTION: Sample JSON response showing wrapping token properties including creation path, time, and TTL. Contains standard Vault response fields like request_id and lease information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-lookup.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"481320f5-fdf8-885d-8050-65fa767fd19b\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"creation_path\": \"sys/wrapping/wrap\",\n    \"creation_time\": \"2016-09-28T14:16:13.07103516-04:00\",\n    \"creation_ttl\": 300\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Community or Custom Plugin in Vault\nDESCRIPTION: This example demonstrates how to register a Community or custom plugin in Vault's plugin catalog by specifying the plugin's SHA256 checksum and type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/register.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register \\\n    -sha256=d3f0a8be02f6c074cf38c9c99d4d04c9c6466249 \\\n    auth my-custom-plugin\nSuccess! Registered plugin: my-custom-plugin\n```\n\n----------------------------------------\n\nTITLE: Configuring x509 Certificate Authentication - Shell\nDESCRIPTION: This snippet configures the MongoDB database plugin to use x509 client-side certificate authentication. It incorporates necessary TLS parameters for the connection setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodb.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mongodb-database \\\n    plugin_name=mongodb-database-plugin \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"mongodb://@mongodb.acme.com:27017/admin\" \\\n    tls_certificate_key=@/path/to/client.pem \\\n    tls_ca=@/path/to/client.ca\n```\n\n----------------------------------------\n\nTITLE: Example of Updating Vault's ADFS Trust Settings\nDESCRIPTION: A concrete example of the Set-AdfsRelyingPartyTrust command using 'Vault' as the policy name. This command disables the requirement for signed SAML requests, resolving the AD FS event 320 error.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/adfs-event-320.mdx#2025-04-14_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$ Set-AdfsRelyingPartyTrust `\n    -TargetName \"Vault\"     `\n    -SignedSamlRequestsRequired $false\n```\n\n----------------------------------------\n\nTITLE: Configuring AliCloud KMS Seal in Vault (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the AliCloud KMS seal through the Vault configuration file. It includes all required parameters such as region, access key, secret key, and KMS key ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/alicloudkms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"alicloudkms\" {\n  region     = \"us-east-1\"\n  access_key = \"0wNEpMMlzy7szvai\"\n  secret_key = \"PupkTg8jdmau1cXxYacgE736PJj4cA\"\n  kms_key_id = \"08c33a6f-4e0a-4a1b-a3fa-7ddfa1d4fb73\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes for Vault CSI Provider\nDESCRIPTION: This YAML snippet configures persistent volumes for the Vault CSI Provider using Kubernetes volume specifications. By defining an emptyDir for plugins, it ensures temporary storage is available for the daemon, essential for CSI operations. The configuration should comply with standard Kubernetes volume definitions and syntax to facilitate deployment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\nvolumes:\n  - name: plugins\n    emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: Payload for Providing Key Share to Generate Recovery Token\nDESCRIPTION: This JSON payload contains a single root key share and the nonce of the current recovery token generation attempt, required when submitting to the update endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"acbd1234\",\n  \"nonce\": \"ad235\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inline IAM Policy Sample Payload\nDESCRIPTION: This snippet shows a JSON payload for creating a role with an inline IAM policy, specifying the credential type and policy document.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credential_type\": \"federation_token\",\n  \"policy_document\": \"{\\\"Version\\\": \\\"...\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Current Configuration with Vault CLI Shell-Session\nDESCRIPTION: This shell command fetches the current configuration of the secrets engine mounted at \"pki/\" path in Vault. It outputs current settings such as default and max lease TTLs, description, and caching behavior. It requires Vault CLI to be installed and configured to connect to a Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/tune.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read sys/mounts/pki/tune\nKey                             Value\n---                             -----\ndefault_lease_ttl               12h\ndescription                     Example PKI mount\nforce_no_cache                  false\nmax_lease_ttl                   24h\n```\n\n----------------------------------------\n\nTITLE: MID Server Properties Configuration for Vault Credential Resolver\nDESCRIPTION: Configuration properties for connecting MID server to Vault. Includes settings for Vault Agent address, CA certificate configuration, and TLS verification options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/servicenow/configuration.mdx#2025-04-14_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\nmid.external_credentials.vault.address=\"\"\nmid.external_credentials.vault.ca=\"\"\nmid.external_credentials.vault.tls_skip_verify=\"\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Key Management Secrets Engine in Vault\nDESCRIPTION: This command enables the key management secrets engine in Vault. It is the first step in setting up the engine for use with Azure Key Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable keymgmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry with statsd in Vault\nDESCRIPTION: This code snippet demonstrates how to configure the telemetry stanza in Vault to forward metrics data to a statsd server. It specifies the statsd address where Vault should send the metrics.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n\"telemetry {\\n  statsd_address = \\\"statsd.company.local:8125\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Key List Response in Transit Secrets Engine\nDESCRIPTION: Sample JSON response from listing keys in Vault's Transit secrets engine. Returns an array of key names within a data object, without exposing the actual key material.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"foo\", \"bar\"]\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Policies in Shell\nDESCRIPTION: Command to list all enabled policies in Vault using the policy list subcommand.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy list\n```\n\n----------------------------------------\n\nTITLE: OIDC Client: Sample Request\nDESCRIPTION: This is a sample `curl` request to create or update an OIDC client. It sends a POST request to the specified endpoint, including the Vault token and the JSON payload. Replace `...` with your Vault token and `@payload.json` with the file containing the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/oidc/client/test-client\n```\n\n----------------------------------------\n\nTITLE: Configuring SecretTransformation for Shared Transformation\nDESCRIPTION: YAML configuration for a SecretTransformation resource that defines shared transformation templates and filters. It includes templates for generating database URLs, Java properties, and JSON configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/secret-transformation.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: SecretTransformation\nmetadata:\n  name: vso-templates\n  namespace: example-vds\nspec:\n  excludes:\n    - password|username\n  templates:\n    url:\n      text: '{{- template \"dbUrl\" . -}}'\n  sourceTemplates:\n    - name: helpers\n      text: |\n        {{/*\n          create a Java props from SecretInput for this app\n        */}}\n        {{- define \"appProps\" -}}\n        {{- $host := get .Annotations \"myapp.config/postgres-host\" -}}\n        {{- printf \"db.host=%s\\n\" $host -}}\n        {{- range $k, $v := .Secrets -}}\n        {{- printf \"db.%s=%s\\n\" $k $v -}}\n        {{- end -}}\n        {{- end -}}\n        {{/*\n          create a JSON config from SecretInput for this app\n        */}}\n        {{- define \"appJson\" -}}\n        {{- $host := get .Annotations \"myapp.config/postgres-host\" -}}\n        {{- $copy := .Secrets | mustDeepCopy -}}\n        {{- $_ := set $copy \"host\" $host -}}\n        {{- mustToPrettyJson $copy -}}\n        {{- end -}}\n        {{/*\n          compose a Postgres URL from SecretInput for this app\n        */}}\n        {{- define \"dbUrl\" -}}\n        {{- $host := get .Annotations \"myapp.config/postgres-host\" -}}\n        {{- printf \"postgresql://%s:%s@%s/postgres?sslmode=disable\" (get .Secrets \"username\") (get .Secrets \"password\") $host -}}\n        {{- end -}}\n        {{/*\n          get the app name from the VSO resource's label\n        */}}\n        {{- define \"appName\" -}}\n        {{- get .Labels \"myapp/name\" -}}\n        {{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Reading GitHub Team Policy Mapping with cURL\nDESCRIPTION: Shell command using cURL to retrieve the current policy mapping for a specific GitHub team. Requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/github/map/teams/dev\n```\n\n----------------------------------------\n\nTITLE: Configuring a Role with Azure Roles for New Service Principal\nDESCRIPTION: Command to configure a Vault role that creates a new service principal with specific Azure role assignments and scopes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write azure/roles/my-role ttl=1h azure_roles=-<<EOF\n    [\n        {\n            \"role_name\": \"Contributor\",\n            \"scope\":  \"/subscriptions/<uuid>/resourceGroups/Website\"\n        }\n    ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Certificate Revocation and CRL Management in Vault\nDESCRIPTION: Commands for creating and revoking a root certificate, then examining the Certificate Revocation List (CRL). The sequence sets the Vault address, configures PKI, generates a root certificate, and demonstrates revoking it using a stored lease ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/builtin/credential/cert/test-fixtures/generate.txt#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_ADDR='http://127.0.0.1:8200'\nvault mount pki\nvault mount-tune -max-lease-ttl=438000h pki\nvault write pki/root/generate/exported common_name=myvault.com ttl=438000h ip_sans=127.0.0.1\nvi testcacert2.pem\nvi testcakey2.pem\nvi testcaserial2\nvi testcacert2leaseid\n\nvault write pki/config/urls issuing_certificates=\"http://127.0.0.1:8200/v1/pki/ca\" crl_distribution_points=\"http://127.0.0.1:8200/v1/pki/crl\"\nvault revoke $(cat testcacert2leaseid)\n\ncurl -XGET \"http://127.0.0.1:8200/v1/pki/crl/pem\" -H \"x-vault-token:123\" > cacert2crl\nopenssl crl -in cacert2crl -noout -text\n```\n\n----------------------------------------\n\nTITLE: Enabling HCP Terraform Secrets Engine in Vault (Shell)\nDESCRIPTION: This command enables the HCP Terraform secrets engine in Vault, mounting it at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable terraform\n```\n\n----------------------------------------\n\nTITLE: Signing a CSR with a Transit Key\nDESCRIPTION: Shell command to create and sign a Certificate Signing Request (CSR) using a Transit key named 'my-key', without exposing the key material outside of Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key/csr\n```\n\n----------------------------------------\n\nTITLE: Enabling Google Cloud KMS Secrets Engine in Vault\nDESCRIPTION: Command to enable the Google Cloud KMS secrets engine in Vault, which will mount the engine at the default path 'gcpkms/'. This is typically done by an operator or configuration management tool.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault secrets enable gcpkms\nSuccess! Enabled the gcpkms secrets engine at: gcpkms/\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes Role (Vault)\nDESCRIPTION: Creates a new role within the Kubernetes secrets engine. This involves sending a POST request to `/kubernetes/roles/:name`, defining allowed namespaces, service account names, and token TTLs. It is important to choose only one of `service_account_name`, `kubernetes_role_name` or `generated_role_rules`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespaces\": \"*\",\n  \"service_account_name\": \"default\",\n  \"token_max_ttl\": \"24h\"\n}\n```\n\n----------------------------------------\n\nTITLE: RSA Key Configuration Parameters for HSM\nDESCRIPTION: Specifies the PKCS#11 attributes for RSA key pair configuration in HSM. Includes separate configurations for both public and private keys, with 2048-bit key size and standard RSA parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/pkcs11.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n_Public Key_\n\n- `CKA_CLASS`: `CKO_PUBLIC_KEY` (It's a public key)\n- `CKA_KEY_TYPE`: `CKK_RSA` (Key type is RSA)\n- `CKA_LABEL`: Set to the key label set in Vault's configuration\n- `CKA_ID`: Set to a random 32-bit unsigned integer\n- `CKA_ENCRYPT`: `true` (Key can be used for encryption)\n- `CKA_WRAP`: `true` (Key can be used for wrapping)\n- `CKA_MODULUS_BITS`: `2048` (Key size is 2048 bits)\n- `CKA_PUBLIC_EXPONENT`: `0x10001` (Public exponent of 65537)\n- `CKA_TOKEN`: `true` (Key persists to the slot/token rather than being for one session only)\n\n_Private Key_\n\n- `CKA_CLASS`: `CKO_PRIVATE_KEY` (It's a private key)\n- `CKA_KEY_TYPE`: `CKK_RSA` (Key type is RSA)\n- `CKA_LABEL`: Set to the key label set in Vault's configuration\n- `CKA_ID`: Set to a random 32-bit unsigned integer\n- `CKA_DECRYPT`: `true` (Key can be used for decryption)\n- `CKA_UNWRAP`: `true` (Key can be used for unwrapping)\n- `CKA_TOKEN`: `true` (Key persists to the slot/token rather than being for one session only)\n- `CKA_EXTRACTABLE`: `false` (Key cannot be exported)\n```\n\n----------------------------------------\n\nTITLE: Enabling LDAP Secret Engine - Shell\nDESCRIPTION: This snippet demonstrates how to enable the LDAP secret engine in Vault, making it ready for use at its default path or a specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable ldap\n```\n\n----------------------------------------\n\nTITLE: Updating TOTP MFA method using HTTP API - Shell\nDESCRIPTION: This command demonstrates how to update an existing TOTP MFA method configuration in Vault. The 'method_id' parameter is required to identify the method for update. The sample demonstrates the POST request and requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/totp/1f36d4cf-52c9-475d-a5cd-49c573c54e55\n```\n\n----------------------------------------\n\nTITLE: Register Oracle Plugin\nDESCRIPTION: Shell command to register the Oracle database plugin in Vault's plugin catalog.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/plugins/catalog/database/oracle-database-plugin \\\n    sha256=\"...\" \\\n    command=vault-plugin-database-oracle\n```\n\n----------------------------------------\n\nTITLE: Subscribing to KV-V2 Data Write Events via WebSocket in Shell\nDESCRIPTION: This snippet demonstrates how to use wscat to connect to Vault's event subscription WebSocket endpoint for KV-V2 data write events, with JSON output enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/events.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ wscat -H \"X-Vault-Token: $(vault print token)\" --connect 'ws://127.0.0.1:8200/v1/sys/events/subscribe/kv-v2/data-write?json=true'\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin in Current Vault Versions\nDESCRIPTION: Example command for registering a plugin in current versions of Vault using the vault plugin register command with SHA256 verification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-architecture.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault plugin register -sha256=<SHA256 Hex value of the plugin binary> \\\n    secret \\\n    myplugin-database-plugin\n```\n\n----------------------------------------\n\nTITLE: Listing KMIP Roles in Shell\nDESCRIPTION: This shell command lists all KMIP roles within a specific scope by sending a LIST request to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Socket and TCP Listeners in Vault (HCL)\nDESCRIPTION: This example demonstrates configuring Vault to listen on both a Unix socket and a TCP localhost interface. It shows how to specify different listener types in the same configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/unix.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"unix\" {\n  address = \"/var/run/vault.sock\"\n}\n\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Configuration with RACF Schema - Bash\nDESCRIPTION: This command sets the LDAP configuration to use the RACF schema and specifies a custom password policy for compliance with RACF requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write ldap/config \\\n    binddn=$USERNAME \\\n    bindpass=$PASSWORD \\\n    url=ldaps://138.91.247.105 \\\n    schema=racf \\\n    password_policy=racf_password_policy\n```\n\n----------------------------------------\n\nTITLE: Executing Entity Merge Request with cURL in Vault\nDESCRIPTION: Sample shell command demonstrating how to execute an entity merge operation using cURL against Vault's API. The command sends a POST request with the merge payload to the identity/entity/merge endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/entity/merge\n```\n\n----------------------------------------\n\nTITLE: Configuring File Storage Backend Example\nDESCRIPTION: Example showing how to configure Vault with a file storage backend, specifying the path where Vault data should be stored.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"file\" {\n  path = \"/mnt/vault/data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Configuring Cassandra Connection\nDESCRIPTION: JSON payload example for configuring a Cassandra connection in Vault, including plugin name, allowed roles, host, username, and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/cassandra.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"cassandra-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"hosts\": \"cassandra1.local\",\n  \"username\": \"user\",\n  \"password\": \"pass\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity Alias in Vault Identity (JSON Payload)\nDESCRIPTION: This JSON payload is used to create a new entity alias in Vault's Identity store. It specifies the alias name, the canonical ID of the entity it belongs to, the mount accessor, and optional custom metadata. The alias name should be the identifier of the client in the authentication source.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"testuser\",\n  \"canonical_id\": \"404e57bc-a0b1-a80f-0a73-b6e92e8a52d3\",\n  \"mount_accessor\": \"auth_userpass_e50b1a44\",\n  \"custom_metadata\": {\n    \"contact_email\": \"james_updated@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GCP via CLI\nDESCRIPTION: This snippet shows how to authenticate to Vault using the CLI. It sends a write request to Vault with a JWT token to obtain an authentication token. The JWT needs to be generated and properly formatted before use. It provides key parameters such as the role and JWT token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -field=token auth/gcp/login \\\n    role=\\\"my-role\\\" \\\n    jwt=\\\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\\\"\n```\n\n----------------------------------------\n\nTITLE: Reading an Alphabet with cURL in Vault Transform API\nDESCRIPTION: Makes a GET request to retrieve a specific alphabet by name from the Vault Transform Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_37\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transform/alphabet/example-alphabet\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault Using Kerberos\nDESCRIPTION: Command for a client to authenticate to Vault using Kerberos with a keytab, specifying the required parameters for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kerberos.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=kerberos \\\n    username=grace \\\n    service=HTTP/my-service \\\n    realm=MATRIX.LAN \\\n    keytab_path=/etc/krb5/krb5.keytab  \\\n    krb5conf_path=/etc/krb5.conf \\\n    disable_fast_negotiation=false\n```\n\n----------------------------------------\n\nTITLE: Create STS Role Request\nDESCRIPTION: cURL command to configure an STS role for a specific AWS account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/config/sts/111122223333\n```\n\n----------------------------------------\n\nTITLE: Oracle Database Connection Configuration Payload\nDESCRIPTION: JSON payload for configuring an Oracle database connection in Vault. Specifies plugin name, allowed roles, connection URL, and various connection parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/oracle.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"oracle-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"{{username}}/{{password}}@localhost:1521/OraDoc.localhost\",\n  \"max_open_connections\": 5,\n  \"max_connection_lifetime\": \"5s\",\n  \"username\": \"system\",\n  \"password\": \"Oracle\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Policy-Based Role with Inline Policies in AliCloud\nDESCRIPTION: Command to configure a Vault role that uses dynamically created policies in AliCloud. This example creates a policy allowing read-only access to RDS resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write alicloud/role/policy-based \\\n    inline_policies=-<<EOF\n[\n    {\n      \"Statement\": [\n        {\n          \"Action\": \"rds:Describe*\",\n          \"Effect\": \"Allow\",\n          \"Resource\": \"*\"\n        }\n      ],\n      \"Version\": \"1\"\n    },\n    {...}\n]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Data Key Generation\nDESCRIPTION: Response format showing both plaintext and encrypted versions of the generated key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"plaintext\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\",\n    \"ciphertext\": \"vault:v1:abcdefgh\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for LIST Deny Listed Tags (JSON)\nDESCRIPTION: This JSON response shows the structure returned when listing all deny listed role tags. The `keys` array within the `data` object contains the list of deny listed tags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_44\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"v1:09Vp0qGuyB8=:a=ami-fce3c696:p=default,prod:d=false:t=300h0m0s:uPLKCQxqsefRhrp1qmVa1wsQVUXXJG8UZP/\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent API Proxy with HCL\nDESCRIPTION: Example configuration for setting up a Vault Agent listener with API proxy capabilities. Demonstrates forcing auto-auth token usage and consistency enforcement settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/apiproxy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\napi_proxy {\n  use_auto_auth_token = \"force\"\n  enforce_consistency = \"always\"\n}\n\nlistener \"tcp\" {\n    address = \"127.0.0.1:8100\"\n    tls_disable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Java\nDESCRIPTION: This code snippet configures a VaultTemplate in Java using Spring Vault. It sets the Vault endpoint (address and port) and uses a TokenAuthentication with the 'dev-only-token'. This setup is intended for development purposes only.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_20\n\nLANGUAGE: Java\nCODE:\n```\nVaultEndpoint vaultEndpoint = new VaultEndpoint();\n\nvaultEndpoint.setHost(\"127.0.0.1\");\nvaultEndpoint.setPort(8200);\nvaultEndpoint.setScheme(\"http\");\n\nVaultTemplate vaultTemplate = new VaultTemplate(\n    vaultEndpoint,\n    new TokenAuthentication(\"dev-only-token\")\n);\n```\n\n----------------------------------------\n\nTITLE: Auto-rotating and Dynamic Secrets Example\nDESCRIPTION: Example showing how auto-rotating and dynamic secrets are rendered in the destination Kubernetes Secret, demonstrating both nested map and flattened key-value pair formats.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/hvs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\ndata:\n  secret_name: {\"key_one\": \"value_one\", \"key_two\": \"value_two\"}\n  secret_name_key_one: \"value_one\"\n  secret_name_key_two: \"value_two\"\n...\n```\n\n----------------------------------------\n\nTITLE: Querying Entity Count in Vault using cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve the total number of entities in Vault. It uses cURL to send an authenticated request to the /sys/internal/counters/entities endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/internal/counters/entities\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Lambda Extension Environment Variables\nDESCRIPTION: Shell commands to set required environment variables for configuring the Vault Lambda Extension, including Vault address, auth provider, role, and secret path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ VAULT_ADDR=http://vault.example.com:8200\n$ VAULT_AUTH_PROVIDER=aws\n$ VAULT_AUTH_ROLE=vault-lambda-role\n$ VAULT_SECRET_PATH=secret/lambda-app/token\n```\n\n----------------------------------------\n\nTITLE: Rotating Root Database Credentials\nDESCRIPTION: Endpoint for rotating root user credentials for a database connection. Requires a Vault token and specifies the database connection name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/database/rotate-root/mysql\n```\n\n----------------------------------------\n\nTITLE: PKCS11 KMS Library Configuration Example\nDESCRIPTION: Example configuration for a PKCS#11 KMS library stanza, specifying the logical name and library path. The library path points to the PKCS#11 shared object file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/kms-library.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nkms_library \"pkcs11\" {\n  name = \"hsm1\"\n  library = \"/usr/lib/Cryptoki.so\"\n}\n```\n\n----------------------------------------\n\nTITLE: Google KMS Auto-Unseal Configuration\nDESCRIPTION: Complete Vault configuration example for Google KMS auto-unseal setup including environment variables and volume mounts\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  enabled: true\n\nserver:\n  extraEnvironmentVars:\n    GOOGLE_REGION: global\n    GOOGLE_PROJECT: <PROJECT NAME>\n    GOOGLE_APPLICATION_CREDENTIALS: /vault/userconfig/kms-creds/credentials.json\n\n  volumes:\n    - name: userconfig-kms-creds\n      secret:\n        defaultMode: 420\n        secretName: kms-creds\n\n  volumeMounts:\n    - mountPath: /vault/userconfig/kms-creds\n      name: userconfig-kms-creds\n      readOnly: true\n\n  ha:\n    enabled: true\n    replicas: 3\n\n    config: |\n      ui = true\n\n      listener \"tcp\" {\n        tls_disable = 1\n        address = \"[::]\":8200\"\n        cluster_address = \"[::]\":8201\"\n      }\n\n      seal \"gcpckms\" {\n        project     = \"<NAME OF PROJECT>\"\n        region      = \"global\"\n        key_ring    = \"<NAME OF KEYRING>\"\n        crypto_key  = \"<NAME OF KEY>\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"HOST_IP:8500\"\n      }\n```\n\n----------------------------------------\n\nTITLE: RoleID Access Policy Configuration in HCL\nDESCRIPTION: HCL configuration for granting read permission to access RoleID for a specific AppRole named 'jenkins'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Grant 'read' permission on the 'auth/approle/role/<role_name>/role-id' path\npath \"auth/approle/role/jenkins/role-id\" {\n   capabilities = [ \"read\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Policy for Secret Access - Shell\nDESCRIPTION: This snippet shows how to create a policy file in Vault to control access to specific resources. The policy permits various operations on secrets stored in the plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy write kv-access-policy - << EOF\\npath \"shared/data/kv/creds/*\" {\\n  capabilities = [\"read\", \"create\", \"update\", \"delete\"]\\n} \\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring EST in Vault PKI (JSON)\nDESCRIPTION: Sample payload for configuring Enrollment over Secure Transport (EST) in Vault's PKI secrets engine. It includes settings for enabling EST, configuring default mount, label policies, authenticators, and audit fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": true,\n  \"default_mount\": true,\n  \"label_to_path_policy\": {\n    \"test-label\": \"role:est-clients\",\n    \"sign-all\": \"sign-verbatim\"\n  },\n  \"authenticators\": {\n    \"cert\": {\n      \"accessor\": \"auth_cert_0f1df449\",\n      \"cert_role\": \"cert1\"\n    },\n    \"userpass\": {\n      \"accessor\": \"auth_userpass_b2b08fac\"\n    }\n  },\n  \"enable_sentinel_parsing\": true,\n  \"audit_fields\": [\"common_name\", \"alt_names\", \"ip_sans\", \"uri_sans\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Azure Root Credentials\nDESCRIPTION: Command to rotate the root credential keys configured in the Azure authentication mount, making the key value only accessible to Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\nvault write -f auth/azure/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication in C#\nDESCRIPTION: C# implementation showing Azure authentication with Vault including metadata retrieval and JWT token handling. Uses VaultSharp client library to interact with Vault and Azure instance metadata service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing Newtonsoft.Json;\nusing VaultSharp;\nusing VaultSharp.V1.AuthMethods;\nusing VaultSharp.V1.AuthMethods.Azure;\nusing VaultSharp.V1.Commons;\n\nnamespace Examples\n{\n    public class AzureAuthExample\n    {\n        public class InstanceMetadata\n        {\n            public string name { get; set; }\n            public string resourceGroupName { get; set; }\n            public string subscriptionId { get; set; }\n        }\n\n        const string MetadataEndPoint = \"http://169.254.169.254/metadata/instance?api-version=2017-08-01\";\n        const string AccessTokenEndPoint = \"http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://management.azure.com/\";\n\n        /// <summary>\n        /// Fetches a key-value secret (kv-v2) after authenticating to Vault via Azure authentication.\n        /// This example assumes you have a configured Azure AD Application.\n        /// </summary>\n        public string GetSecretWithAzureAuth()\n        {\n            string vaultAddr = Environment.GetEnvironmentVariable(\"VAULT_ADDR\");\n            if(String.IsNullOrEmpty(vaultAddr))\n            {\n                throw new System.ArgumentNullException(\"Vault Address\");\n            }\n\n            string roleName = Environment.GetEnvironmentVariable(\"VAULT_ROLE\");\n            if(String.IsNullOrEmpty(roleName))\n            {\n                throw new System.ArgumentNullException(\"Vault Role Name\");\n            }\n\n            string jwt = GetJWT();\n            InstanceMetadata metadata = GetMetadata();\n\n            IAuthMethodInfo authMethod = new AzureAuthMethodInfo(roleName: roleName, jwt: jwt, subscriptionId: metadata.subscriptionId, resourceGroupName: metadata.resourceGroupName, virtualMachineName: metadata.name);\n            var vaultClientSettings = new VaultClientSettings(vaultAddr, authMethod);\n\n            IVaultClient vaultClient = new VaultClient(vaultClientSettings);\n\n            // We can retrieve the secret from the VaultClient object\n            Secret<SecretData> kv2Secret = null;\n            kv2Secret = vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(path: \"/creds\").Result;\n\n            var password = kv2Secret.Data.Data[\"password\"];\n\n            return password.ToString();\n        }\n\n        /// <summary>\n        /// Query Azure Resource Manage for metadata about the Azure instance\n        /// </summary>\n        private InstanceMetadata GetMetadata()\n        {\n            HttpWebRequest metadataRequest = (HttpWebRequest)WebRequest.Create(MetadataEndPoint);\n            metadataRequest.Headers[\"Metadata\"] = \"true\";\n            metadataRequest.Method = \"GET\";\n\n            HttpWebResponse metadataResponse = (HttpWebResponse)metadataRequest.GetResponse();\n\n            StreamReader streamResponse = new StreamReader(metadataResponse.GetResponseStream());\n            string stringResponse = streamResponse.ReadToEnd();\n            var resultsDict = JsonConvert.DeserializeObject<Dictionary<string, InstanceMetadata>>(stringResponse);\n\n            return resultsDict[\"compute\"];\n        }\n\n        /// <summary>\n        /// Query Azure Resource Manager (ARM) for an access token\n        /// </summary>\n        private string GetJWT()\n        {\n            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(AccessTokenEndPoint);\n            request.Headers[\"Metadata\"] = \"true\";\n            request.Method = \"GET\";\n\n            HttpWebResponse response = (HttpWebResponse)request.GetResponse();\n\n            // Pipe response Stream to a StreamReader and extract access token\n            StreamReader streamResponse = new StreamReader(response.GetResponseStream());\n            string stringResponse = streamResponse.ReadToEnd();\n            var resultsDict = JsonConvert.DeserializeObject<Dictionary<string, string>>(stringResponse);\n\n            return resultsDict[\"access_token\"];\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pod Security Context in YAML\nDESCRIPTION: Demonstrates the default Pod security context configuration for the Vault Agent Injector. This includes settings for non-root execution and group/user IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrunAsNonRoot: true\nrunAsGroup: {{ .Values.injector.gid | default 1000 }}\nrunAsUser: {{ .Values.injector.uid | default 100 }}\nfsGroup: {{ .Values.injector.gid | default 1000 }}\n```\n\n----------------------------------------\n\nTITLE: List Stores Sample Request\nDESCRIPTION: cURL command to list all stores using LIST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_49\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/transform/store\n```\n\n----------------------------------------\n\nTITLE: Automating SSH Connection with Vault-generated OTP\nDESCRIPTION: This command uses Vault CLI to generate an OTP and automatically establish an SSH connection to the remote host.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/one-time-ssh-passwords.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault ssh -role otp_key_role -mode otp username@x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Manually Rotating Static Role Credentials in Vault\nDESCRIPTION: Makes a POST request to the Vault API to manually trigger credential rotation for a static role. This allows administrators to change the stored password and reset the TTL outside the automatic rotation schedule.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/database/rotate-role/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Renewing Token with Increment Value - Shell\nDESCRIPTION: This command renews a specified token in Vault while requesting a specific TTL increment. This can be useful for extending access time when specific durations are needed for token operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/renew.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token renew -increment=30m 96ddf4bc-d217-f3ba-f9bd-017055595017\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Pinned Plugin Version - JSON Payload\nDESCRIPTION: JSON payload structure for creating or updating a pinned plugin version, specifying the semantic version to pin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-pins.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"v1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Auth Method with Custom Path\nDESCRIPTION: This command enables the userpass authentication method in Vault but allows it to be accessed under a custom path specified by the user. This is useful for organizing multiple auth methods or for setting specific authorization schemes that differ from the default path structure.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable -path=my-login userpass\n```\n\n----------------------------------------\n\nTITLE: Configuring Duo MFA Method JSON Payload\nDESCRIPTION: JSON payload for configuring a Duo MFA method in Vault Enterprise. Specifies the mount_accessor for authentication method, secret_key, integration_key, and api_hostname for Duo integration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/duo.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mount_accessor\": \"auth_userpass_1793464a\",\n  \"secret_key\": \"BIACEUEAXI20BNWTEYXT\",\n  \"integration_key\": \"8C7THtrIigh2rPZQMbguugt8IUftWhMRCOBzbuyz\",\n  \"api_hostname\": \"api-2b5c39f5.duosecurity.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity Federation for AWS in Vault via CLI\nDESCRIPTION: This command configures Vault to use workload identity federation with AWS, specifying the identity token audience and AWS role ARN. This approach is useful when organizations require short-lived credentials or credentials tied to machine identities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/config/root \\\n    identity_token_audience=\"<TOKEN AUDIENCE>\" \\\n    role_arn=\"<AWS ROLE ARN>\"\n```\n\n----------------------------------------\n\nTITLE: Generating Password Credentials for MongoDB Atlas\nDESCRIPTION: Command to generate new password credentials by reading from the /creds endpoint with the role name. Each invocation generates a new username and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodbatlas.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/creds/my-password-role\n    Key                Value\n    ---                -----\n    lease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\n    lease_duration     1h\n    lease_renewable    true\n    password           FBYwnnh-fwc0quxtKf11\n    username           v-my-password-role-DKbQEg6uRn\n```\n\n----------------------------------------\n\nTITLE: Issuing Certificate with Vault PKI Secrets Engine in Shell\nDESCRIPTION: This code snippet demonstrates how to issue a new certificate by writing to the `issue` endpoint for a specified role in Vault. The command utilizes the `vault` CLI tool to create a certificate with a defined common name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n\"$ vault write pki_int/issue/example-dot-com \\\n    common_name=blah.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection in Vault\nDESCRIPTION: This command configures the credentials that Vault uses to communicate with RabbitMQ. It sets the connection URI, username, and password for the admin user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/rabbitmq.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault write rabbitmq/config/connection \\\n    connection_uri=\"http://localhost:15672\" \\\n    username=\"admin\" \\\n    password=\"password\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Parameters in Vault Policy (HCL)\nDESCRIPTION: This snippet demonstrates how to configure required parameters in a Vault policy. It requires the user to create 'secret/profile' with parameters 'name' and 'id' where KV v1 is enabled at 'secret/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/profile\" {\n  capabilities = [\"create\"]\n  required_parameters = [\"name\", \"id\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating AWS Root Credentials in Vault\nDESCRIPTION: Shell command to rotate Vault's AWS access key by sending a POST request to the rotate-root endpoint. This is used when Vault is configured with static credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/aws/config/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Sample request to list static roles using Curl\nDESCRIPTION: This curl request demonstrates how to list all static roles defined in the Vault's AWS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/aws/static-roles\n```\n\n----------------------------------------\n\nTITLE: Restricting zNode Access to Localhost Only\nDESCRIPTION: This code snippet demonstrates how to configure Vault to restrict access to its zNodes to localhost, using Zookeeper's IP-based ACL check mechanism.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/zookeeper.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"zookeeper\" {\n  znode_owner = \"ip:127.0.0.1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Settings for Vault Agent in HCL\nDESCRIPTION: This snippet configures the cache settings for Vault Agent. It enables caching of static secrets and sets the refresh interval for static secret token capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/static-secret-caching.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ncache {\n  cache_static_secrets = true\n  static_secret_token_capability_refresh_interval = \"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File System Storage in HCL\nDESCRIPTION: This snippet demonstrates how to configure HashiCorp Vault to use the file system as its storage backend. The 'path' parameter specifies the directory where Vault will store its data. This configuration is essential for setting up local storage for Vault instances.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/filesystem.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"file\" {\n  path = \"/mnt/vault/data\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing API Call in Shell\nDESCRIPTION: This shell command demonstrates how to delete a token using a given role name in HashiCorp Vault. The `curl` command sends a DELETE request with a JSON payload to specify the token and transformation details. The request requires an `X-Vault-Token` header for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_70\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/tokens/example-role\n```\n\n----------------------------------------\n\nTITLE: Writing KV Data via CLI Command\nDESCRIPTION: Example of using vault kv put command to write key/value pairs to a specific mount path and secret path in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/write-data.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put    \\\n  -mount shared   \\\n  dev/square-api  \\\n  sandbox=1234 prod=5679 smoke=abcd\n```\n\n----------------------------------------\n\nTITLE: Configuring HSM PKCS11 Seal in Vault HCL\nDESCRIPTION: This snippet shows how to configure the HSM PKCS11 seal in Vault's configuration file. It includes required parameters such as library path, slot number, PIN, and key labels.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/pkcs11.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"pkcs11\" {\n  lib            = \"/usr/vault/lib/libCryptoki2_64.so\"\n  slot           = \"2305843009213693953\"\n  pin            = \"AAAA-BBBB-CCCC-DDDD\"\n  key_label      = \"vault-hsm-key\"\n  hmac_key_label = \"vault-hsm-hmac-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying KV Data Using Vault CLI\nDESCRIPTION: Command to permanently delete specific versions of key/value data using the vault kv destroy command. Requires mount path, version numbers, and secret path as parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/destroy-data.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault kv destroy              \\\n   -mount <mount_path>          \\\n   -versions <target_versions>  \\\n   <secret_path>\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Secrets Engine with JSON Payload\nDESCRIPTION: Sample configuration payload for setting up LDAP secrets engine connection parameters including bind DN, password, and LDAP server URL\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"binddn\": \"cn=vault,ou=Users,dc=hashicorp,dc=com\",\n  \"bindpass\": \"pa$$w0rd\",\n  \"url\": \"ldaps://127.0.0.11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Primary DR Status Response\nDESCRIPTION: Sample JSON response showing the replication status from a primary node, including cluster ID, secondaries information, and sync status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cluster_id\": \"eef2a5ab-51e2-1c05-407c-8b4dc8d09ebf\",\n    \"corrupted_merkle_tree\": false,\n    \"known_secondaries\": [\n      \"4ca6b639-046b-5bb1-8043-6788ddf09121\"\n    ],\n    \"last_corruption_check_epoch\": \"-62135596800\",\n    \"last_dr_wal\": 223,\n    \"last_reindex_epoch\": \"0\",\n    \"last_wal\": 223,\n    \"merkle_root\": \"2494830f1a1c304829b5742a232d39b5457bce9a\",\n    \"mode\": \"primary\",\n    \"primary_cluster_addr\": \"\",\n    \"secondaries\": [\n      {\n        \"api_address\": \"https://127.0.0.1:65531\",\n        \"clock_skew_ms\": \"0\",\n        \"cluster_address\": \"https://127.0.0.1:65534\",\n        \"connection_status\": \"connected\",\n        \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n        \"last_heartbeat_duration_ms\": \"0\",\n        \"node_id\": \"4ca6b639-046b-5bb1-8043-6788ddf09121\",\n        \"replication_primary_canary_age_ms\": \"696\"\n      }\n    ],\n    \"ssct_generation_counter\": 0,\n    \"state\": \"running\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tokenization Transformation - JSON Payload\nDESCRIPTION: Sample JSON payload for creating or updating a tokenization transformation. It sets a maximum TTL of 365 days and specifies allowed roles that can use this transformation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_ttl\": \"365d\",\n  \"allowed_roles\": [\"example-role\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Event Notification in JSON Format (CloudEvents)\nDESCRIPTION: This example demonstrates the format of an event notification in JSON following the CloudEvents specification. It shows a KV v2 data-write operation event with fields including ID, source, specification version, data content, and plugin information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/events.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"a3be9fb1-b514-519f-5b25-b6f144a8c1ce\",\n  \"source\": \"vault://mycluster\",\n  \"specversion\": \"1.0\",\n  \"type\": \"*\",\n  \"data\": {\n    \"event\": {\n      \"id\": \"a3be9fb1-b514-519f-5b25-b6f144a8c1ce\",\n      \"metadata\": {\n        \"current_version\": \"1\",\n        \"data_path\": \"secret/data/foo\",\n        \"modified\": \"true\",\n        \"oldest_version\": \"0\",\n        \"operation\": \"data-write\",\n        \"path\": \"secret/data/foo\"\n      }\n    },\n    \"event_type\": \"kv-v2/data-write\",\n    \"plugin_info\": {\n      \"mount_class\": \"secret\",\n      \"mount_accessor\": \"kv_5dc4d18e\",\n      \"mount_path\": \"secret/\",\n      \"plugin\": \"kv\"\n    }\n  },\n  \"datacontentype\": \"application/cloudevents\",\n  \"time\": \"2023-09-12T15:19:49.394915-07:00\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Account with OAuth2 Access Tokens - Vault - Shell\nDESCRIPTION: This snippet demonstrates how to configure a Vault static account that generates OAuth2 access tokens for GCP. It uses the 'vault write' command with parameters for service account email, token scopes, and IAM bindings. Ensure the service account exists in GCP and have proper permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write gcp/static-account/my-token-account \\\n    service_account_email=\"account@my-project.iam.gserviceaccount.com\" \\\n    secret_type=\"access_token\"  \\\n    token_scopes=\"https://www.googleapis.com/auth/cloud-platform\" \\\n    bindings=-<<EOF\n      resource \"//cloudresourcemanager.googleapis.com/projects/my-project\" {\n        roles = [\"roles/viewer\"]\n      }\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Auth Method with WIF in Vault\nDESCRIPTION: This snippet shows how to configure the GCP auth method in Vault to use plugin Workload Identity Federation. It sets the identity token audience and service account email.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/gcp/config \\\n  identity_token_audience=\"//iam.googleapis.com/projects/410449834127/locations/global/workloadIdentityPools/vault-gcp-auth-43777a63/providers/vault-gcp-auth-wif-provider\" \\\n  service_account_email=\"vault-plugin-wif-auth@hc-b712f250b4e04cacbadd258a90b.iam.gserviceaccount.com\"\n```\n\n----------------------------------------\n\nTITLE: Read Snapshot Configuration Response\nDESCRIPTION: Sample JSON response when reading a snapshot configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"file_prefix\": \"vault-snapshot\",\n    \"interval\": 86400,\n    \"local_max_space\": 10000000,\n    \"path_prefix\": \"/opt/vault/snapshots/\",\n    \"retain\": 7,\n    \"storage_type\": \"local\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Environment Sync Destination in Vault\nDESCRIPTION: Use vault write command to set up an environment sync destination. This configures Vault to sync secrets to a specific GitHub repository environment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/gh/DESTINATION_NAME \\\n    access_token=\"GITHUB_ACCESS_TOKEN\"                  \\\n    secrets_location=\"GITHUB_SECRETS_LOCATION\"          \\\n    repository_owner=\"GITHUB_OWNER_NAME\"                \\\n    repository_name=\"GITHUB_REPO_NAME\"                  \\\n    environment_name=\"GITHUB_ENVIRONMENT_NAME\"\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating a Secret in Vault KV v2\nDESCRIPTION: This snippet demonstrates how to create or update a key named 'creds' in the KV version 2 engine mounted at 'secret' with a passcode value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -mount=secret creds passcode=my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Destroying a Specific Version of a Key in Vault KV Store\nDESCRIPTION: This command permanently removes version 11 of the key 'creds' from the 'secret' mount in Vault's KV v2 secrets engine. It demonstrates the usage of the 'kv destroy' command with the required flags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/destroy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv destroy -mount=secret -versions=11 creds\n```\n\n----------------------------------------\n\nTITLE: Rotating Static Account Key for Access Token Accounts (cURL)\nDESCRIPTION: cURL command to rotate the service account key for an existing static account. This affects only access_token type accounts and returns an empty response with 204 status code.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/gcp/static-account/my-token-account/rotate-key\n```\n\n----------------------------------------\n\nTITLE: Mapping GitHub Team to Policies with cURL\nDESCRIPTION: Shell command using cURL to map a GitHub team (dev) to a Vault policy. Requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/github/map/teams/dev\n```\n\n----------------------------------------\n\nTITLE: Retrieving Autopilot Configuration - Shell Request\nDESCRIPTION: HTTP GET request to retrieve the current configuration of the autopilot subsystem using curl. Requires Vault token authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautopilot.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/configuration\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Enabling an Audit Device\nDESCRIPTION: This JSON payload demonstrates how to configure a file-based audit device, specifying its type and file path option.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"file\",\n  \"options\": {\n    \"file_path\": \"/var/log/vault/log\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Chart for Vault Enterprise\nDESCRIPTION: This YAML configuration sets up the Helm chart for Vault Enterprise. It specifies the enterprise image repository and tag, and references the previously created license secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# config.yaml\nserver:\n  image:\n    repository: hashicorp/vault-enterprise\n    tag: 1.19.0-ent\n  enterpriseLicense:\n    secretName: vault-ent-license\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Google Cloud KMS Key in Vault\nDESCRIPTION: This snippet demonstrates how to create or update a Google Cloud KMS key in Vault. It includes the policy, request parameters, sample payload, and curl command for the POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_28\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_ring\": \"projects/my-project/locations/my-location/keyRings/my-keyring\",\n  \"labels\": {\n    \"foo\": \"bar\"\n  },\n  \"rotation_period\": \"72h\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Secrets Engine with Account Credentials\nDESCRIPTION: Command to configure the Azure secrets engine with subscription, tenant, client ID, and client secret using environment variables.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write azure/config \\\n    subscription_id=$AZURE_SUBSCRIPTION_ID \\\n    tenant_id=$AZURE_TENANT_ID \\\n    client_id=$AZURE_CLIENT_ID \\\n    client_secret=$AZURE_CLIENT_SECRET\n\nSuccess! Data written to: azure/config\n```\n\n----------------------------------------\n\nTITLE: Issuing Intermediate Certificate Using Vault PKI Command\nDESCRIPTION: Example showing how to issue an intermediate certificate using the vault pki issue command. The command creates a new issuer named 'FirstDepartment' under the /pki_int/ mount, signed by the default issuer in /pki_root/, with a common name of 'first-department.example.com'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/issue.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki issue -issuer_name=\"FirstDepartment\" /pki_root/issuer/default /pki_int/ common_name=\"first-department.example.com\"\nKey                               Value\n---                               -----\nca_chain                          [-----BEGIN CERTIFICATE-----\nMIIDsDCCApigAwIBAgIULEPuHTW7UDtAQg+qcc18osNWgZIwDQYJKoZIhvcNAQEL...\n```\n\n----------------------------------------\n\nTITLE: Sample cURL request for revoking a certificate\nDESCRIPTION: This cURL command illustrates sending a POST request to the '/pki/revoke' endpoint to revoke a certificate, including the payload from 'payload.json'. It requires an authentication token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/revoke\n```\n\n----------------------------------------\n\nTITLE: Decryption Request Payload\nDESCRIPTION: Sample JSON payload for decrypting data using Transit.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"vault:v1:XjsPWPjqPrBi1N2Ms2s1QM798YyFWnO4TR4lsFA=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using PKI Reissue Command in Vault CLI\nDESCRIPTION: This example demonstrates how to reissue a certificate with a new issuer name 'SecondDepartment'. The command uses /pki_root/issuer/default as the parent CA, /pki_int/issuer/FirstDepartment as the template, and creates the new certificate in the /pki_int_2/ mount with a specified common name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/reissue.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki reissue -issuer_name=\"SecondDepartment\" /pki_root/issuer/default /pki_int/issuer/FirstDepartment /pki_int_2/ common_name=\"second-department.example.com\"\nKey                               Value\n---                               -----\nca_chain                          [-----BEGIN CERTIFICATE-----\nMIID0DCCArigAwIBAgIUdfRe05B5eRXsg3pvsJ/g94eYuWkwDQYJKoZIhvcNAQEL\n```\n\n----------------------------------------\n\nTITLE: Streaming Logs to stdout - Shell\nDESCRIPTION: The 'vault monitor' command allows users to stream Vault server logs to stdout in real-time. It requires the VAULT_ADDR variable to specify the server address, which can be overridden using the -address flag. The log level can also be specified with -log-level.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/monitor.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault monitor [flags]\n\n$ vault monitor [-help | -h]\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault monitor -log-level=debug\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP MFA method using HTTP API - Shell\nDESCRIPTION: This command demonstrates how to create a TOTP MFA method in Vault using a POST request. A minimal payload includes the 'issuer'. The request requires authentication via Vault token. Successful execution results in the creation of a new TOTP MFA method with specified attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"vault\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/totp\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Custom Metadata using CLI - Vault KV V2 - Shell\nDESCRIPTION: This is an example of using the Vault CLI to set custom metadata fields for a specific secret path, including hard-coded values for `use` and `renew-date` under the custom metadata field. It indicates success after writing the data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/custom-metadata.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv metadata put                                              \\\n   -custom-metadata \"use=API keys for different dev environments\"   \\\n   -custom-metadata \"renew-date=2026-11-14\"                          \\\n   -mount shared                                                     \\\n   dev/square-api\n\nSuccess! Data written to: shared/metadata/dev/square-api\n```\n\n----------------------------------------\n\nTITLE: Read Entity by Name - HTTP API - Shell\nDESCRIPTION: This cURL command sends a GET request to find an entity by its name in Vault and requires a valid token for authentication. The response includes detailed information about the entity's attributes and associated metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/entity/name/testentityname\n```\n\n----------------------------------------\n\nTITLE: Creating an Alphabet - HashiCorp Vault Command\nDESCRIPTION: This command defines an alphabet of numerics '0123456789' for use in FPE transformations. Alphabets set the characters valid for input and output values during the transformation process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transform/alphabet/numerics \\\n    alphabet=\"0123456789\"\nSuccess! Data written to: transform/alphabet/numerics\n```\n\n----------------------------------------\n\nTITLE: Storing a Secret in Vault using OpenAPI Go\nDESCRIPTION: This snippet demonstrates how to store a secret in Vault using the OpenAPI Go client. It uses the KVv2Write method to write the secret to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_30\n\nLANGUAGE: go\nCODE:\n```\n_, err = client.Secrets.KVv2Write(context.Background(), \"my-secret-password\", schema.KVv2WriteRequest{\n   Data: map[string]any{\n      \"password\": \"Hashi123\",\n   },\n})\nif err != nil {\n   log.Fatal(err)\n}\n\nlog.Println(\"Secret written successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Plugin Connection\nDESCRIPTION: Command to configure Vault with Redis plugin connection details including credentials and path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redis.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-redis-database \\\n  plugin_name=\"redis-database-plugin\" \\\n  host=\"localhost\" \\\n  port=6379 \\\n  tls=true \\\n  username=\"user\" \\\n  password=\"pass\" \\\n  allowed_roles=\"my-*-role\"\n```\n\n----------------------------------------\n\nTITLE: Transit Auto-Unseal Policy Configuration in HCL\nDESCRIPTION: Vault policy configuration that grants necessary permissions for transit auto-unseal operations. The policy allows encrypt and decrypt operations on a specific transit key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/transit-best-practices.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"<mount path>/encrypt/<key_name>\" {\n  capabilities = [\"update\"]\n}\n\npath \"<mount path>/decrypt/<key_name>\" {\n  capabilities = [\"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Socket Permissions and Ownership in Vault (HCL)\nDESCRIPTION: This snippet shows how to configure access permissions and ownership of the Unix socket. It demonstrates setting the socket mode, user, and group parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/unix.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"unix\" {\n  address = \"/var/run/vault.sock\"\n  socket_mode = \"644\"\n  socket_user = \"1000\"\n  socket_group = \"1000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Key Using cURL in Transit Secrets Engine\nDESCRIPTION: Sample cURL command for importing a key into Vault's Transit secrets engine. The request uses the POST method to the /transit/keys endpoint with a JSON payload and Vault authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key/import\n```\n\n----------------------------------------\n\nTITLE: Verifying Digest - HCL\nDESCRIPTION: This HCL policy defines the capabilities for verifying a signature on a digest using a specified key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_24\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/verify/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating an Entity - HTTP API - JSON\nDESCRIPTION: This JSON payload is used to create or update an entity using the Vault HTTP API. The payload includes metadata and policies associated with the entity. Dependencies include setting up the Vault server and authentication. The required parameter is 'name', with 'id' being optional; 'metadata' and 'policies' are key-value maps and lists respectively.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"metadata\": {\"organization\": \"hashicorp\", \"team\": \"vault\"}, \"policies\": [\"eng-dev\", \"infra-dev\"]}\n```\n\n----------------------------------------\n\nTITLE: Configuring Container Security Context in YAML\nDESCRIPTION: Shows the default container security context for the Vault Agent Injector, which disables privilege escalation and drops all capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nallowPrivilegeEscalation: false\ncapabilities:\n  drop:\n    - ALL\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiseal Configuration in Vault\nDESCRIPTION: Basic configuration line required to enable Seal HA functionality in Vault 1.16 or higher.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/seal-ha.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nenable_multiseal = true\n```\n\n----------------------------------------\n\nTITLE: Configuring HCP Vault AWS IAM Role Secrets\nDESCRIPTION: YAML configuration for VaultDynamicSecret custom resource that generates AWS IAM role credentials from HCP Vault's AWS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  namespace: vso-example\n  name: vault-dynamic-secret-aws-iam-role\nspec:\n  vaultAuthRef: vault-auth\n  mount: aws\n  path: creds/my-iam-role\n  destination:\n    create: true\n    name: dynamic-aws-iam-role\n```\n\n----------------------------------------\n\nTITLE: Reading Access Configuration - HTTP API - Shell\nDESCRIPTION: This snippet shows how to read the current access configuration for Terraform Cloud by sending a GET request to the `/terraform/config` endpoint. The request includes the Vault token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/terraform/config\n```\n\n----------------------------------------\n\nTITLE: Creating a Client Certificate Role for MongoDB Atlas\nDESCRIPTION: Command to configure a role for X.509 client certificate authentication. This includes setting up the certificate authority, key configurations, and database permissions for the certificate-based user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodbatlas.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-dynamic-certificate-role \\\n  db_name=my-mongodbatlas-database \\\n  creation_statements='{\"database_name\": \"$external\", \"x509Type\": \"CUSTOMER\", \"roles\": [{\"databaseName\":\"<db_name>\",\"roleName\":\"readWrite\"}]}' \\\n  default_ttl=\"1h\" \\\n  max_ttl=\"24h\" \\\n  credential_type=\"client_certificate\" \\\n  credential_config=ca_cert=\"$(cat path/to/ca_cert.pem)\" \\\n  credential_config=ca_private_key=\"$(cat path/to/private_key.pem)\" \\\n  credential_config=key_type=\"rsa\" \\\n  credential_config=key_bits=2048 \\\n  credential_config=signature_bits=256 \\\n  credential_config=common_name_template=\"{{.DisplayName}}_{{.RoleName}}_{{unix_time}}\"\nSuccess! Data written to: database/roles/my-dynamic-certificate-role\n```\n\n----------------------------------------\n\nTITLE: Cache Clear Request Payload in JSON\nDESCRIPTION: Sample JSON payload for clearing cached entries from Vault Proxy based on token type and value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"token\",\n  \"value\": \"hvs.rlNjegSKykWcplOkwsjd8bP9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault Database Secrets Engine and Configuring\nDESCRIPTION: This snippet demonstrates how to enable the database secrets engine in Vault and configure a database connection using `vault secrets enable database` and `vault write database/config/my-db`.  The plugin_name parameter specifies which plugin to use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable database\n$ vault write database/config/my-db \\\n        plugin_name=my-db-plugin \\\n        # ...\n    Success! Data written to: database/config/my-db\n```\n\n----------------------------------------\n\nTITLE: RADIUS Login Request Payload in JSON\nDESCRIPTION: This JSON payload shows the structure for authenticating with the RADIUS method, which requires a password for the specified user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password\": \"Password!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Workload Identity Federation\nDESCRIPTION: This snippet configures the audience claim value and the service account email for the plugin workload identity federation. Useful when setting up a trust relationship between Vault and GCP, leveraging Vault's identity token provider.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/gcp/config \\\n    identity_token_audience=\\\"<TOKEN AUDIENCE>\\\" \\\n    service_account_email=\\\"<SERVICE ACCOUNT EMAIL>\\\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Primary Vault Node\nDESCRIPTION: This is a sample JSON response when checking replication status on a primary Vault node. It includes details such as cluster ID, known secondaries, merkle root, mode, and connection status of secondary nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cluster_id\": \"00616ea0-3094-5017-29f9-644f3633f0da\",\n    \"corrupted_merkle_tree\": false,\n    \"known_secondaries\": [\n      \"cd0463e0-a37f-7421-345e-aad53007479f\"\n    ],\n    \"last_corruption_check_epoch\": \"-62135596800\",\n    \"last_performance_wal\": 223,\n    \"last_reindex_epoch\": \"0\",\n    \"last_wal\": 223,\n    \"merkle_root\": \"7b75cf69bb9a862913b0de2478164e046d242e0f\",\n    \"mode\": \"primary\",\n    \"primary_cluster_addr\": \"\",\n    \"secondaries\": [\n      {\n        \"api_address\": \"https://127.0.0.1:49155\",\n        \"clock_skew_ms\": \"0\",\n        \"cluster_address\": \"https://127.0.0.1:49160\",\n        \"connection_status\": \"connected\",\n        \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n        \"last_heartbeat_duration_ms\": \"0\",\n        \"node_id\": \"cd0463e0-a37f-7421-345e-aad53007479f\",\n        \"replication_primary_canary_age_ms\": \"660\"\n      }\n    ],\n    \"ssct_generation_counter\": 0,\n    \"state\": \"running\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enable New Secrets Engine Sample Payload\nDESCRIPTION: JSON payload for enabling a new AWS secrets engine with custom configuration. Demonstrates setting force_no_cache option.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"aws\",\n  \"config\": {\n    \"force_no_cache\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lease Settings for Generated Credentials (shell-session)\nDESCRIPTION: This command configures lease settings for credentials generated by the Nomad secrets engine in Vault, specifying the time-to-live (ttl) and maximum ttl for those credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/nomad.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write nomad/config/lease ttl=3600 max_ttl=86400\nSuccess! Data written to: nomad/config/lease\n```\n\n----------------------------------------\n\nTITLE: Creating Cloud Foundry Auth Configuration in JSON\nDESCRIPTION: JSON payload example for configuring the Cloud Foundry auth method in Vault. Includes configuration for identity CA certificates, CF API address, credentials, and security settings for login validation windows.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identity_ca_certificates\": [\n    \"-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\"\n  ],\n  \"cf_api_addr\": \"https://api.sys.somewhere.cf-app.com\",\n  \"cf_username\": \"vault\",\n  \"cf_password\": \"pa55w0rd\",\n  \"cf_api_trusted_certificates\": [\n    \"-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\"\n  ],\n  \"login_max_seconds_not_before\": 5,\n  \"login_max_seconds_not_after\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GCP via API\nDESCRIPTION: This snippet demonstrates how to authenticate to Vault using a curl command to interact with the API. The POST request includes the role and JWT token in its payload. The endpoint is the GCP login path, and it requires a running Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"role\":\"my-role\", \"jwt\":\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"}' \\\n    http://127.0.0.1:8200/v1/auth/gcp/login\n```\n\n----------------------------------------\n\nTITLE: ACL Policy with Control Group for Read Access in Vault\nDESCRIPTION: This ACL policy grants read access to 'secret/foo' only after one member of the 'managers' group authorizes the request. It demonstrates the basic structure of a control group within an ACL policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/control-groups.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"path \\\"secret/foo\\\" {\\n    capabilities = [\\\"read\\\"]\\n    control_group = {\\n        factor \\\"ops_manager\\\" {\\n            identity {\\n                group_names = [\\\"managers\\\"]\\n                approvals = 1\\n            }\\n        }\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Managing Key Version Enablement in Vault\nDESCRIPTION: This command sets the minimum enabled version for a key to 2, effectively disabling all earlier versions (0 and 1) for cryptographic operations in both Vault and distributed KMS providers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write keymgmt/key/example-key min_enabled_version=2\n```\n\n----------------------------------------\n\nTITLE: Running Vault Agent with Multiple Configurations\nDESCRIPTION: The command snippet illustrates starting the Vault Agent with multiple discrete configuration files. This method allows the user to modularize specific configurations and combine them when initializing the agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/agent/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault agent                                   \\\n    -config=/etc/vault/agent/base-config.hcl    \\\n    -config=/etc/vault/agent/auto-auth-config.hcl\n```\n\n----------------------------------------\n\nTITLE: Listing Raft Peers in Shell\nDESCRIPTION: This command lists the peers in the Raft cluster after migration, showing the node, address, state, and voter status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migrate-consul-storage.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator raft list-peers\n```\n\n----------------------------------------\n\nTITLE: Retrieving CredHub Credentials\nDESCRIPTION: This snippet extracts CredHub client credentials from the PCF settings. It uses the 'jq' command-line tool to parse JSON output, which is a prerequisite.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pcf settings | jq '.products[0].director_credhub_client_credentials'\n```\n\n----------------------------------------\n\nTITLE: Destroying Secret Versions in Vault KV Engine\nDESCRIPTION: This JSON payload and cURL command show how to permanently destroy specific versions of a secret in Vault's KV engine using the PUT method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": [1, 2]\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request PUT \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/destroy/my-secret\n```\n\n----------------------------------------\n\nTITLE: Required Permissions for Google Cloud KMS in Vault\nDESCRIPTION: This snippet specifies the minimum IAM roles required for the service account used by Vault to interact with Google Cloud KMS. Different roles are provided based on functionality: admin, cryptoKeyEncrypterDecrypter, and signerVerifier.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nhttps://www.googleapis.com/auth/kms\n```\n\nLANGUAGE: text\nCODE:\n```\nroles/cloudkms.admin\n```\n\nLANGUAGE: text\nCODE:\n```\nroles/cloudkms.cryptoKeyEncrypterDecrypter\n```\n\nLANGUAGE: text\nCODE:\n```\nroles/cloudkms.signerVerifier\n```\n\n----------------------------------------\n\nTITLE: Registering Plugins with Environment Variables in Vault\nDESCRIPTION: Command to register a plugin with specific environment variables. The -env flag can be used multiple times to specify different environment variables.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register -sha256=<SHA256 Hex value of the plugin binary> \\\n    -env REGION=eu \\\n    -env TOKEN_FILE=/var/run/token \\\n    secret \\                  # type\n    passthrough-plugin\n\nSuccess! Registered plugin: passthrough-plugin\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from LDAP Authentication in Vault\nDESCRIPTION: This snippet shows the JSON response structure returned after a successful LDAP authentication. It includes the client token, policies, and metadata with the authenticated username.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"auth\": {\n    \"client_token\": \"c4f280f6-fdb2-18eb-89d3-589e2e834cdb\",\n    \"policies\": [\n      \"admins\"\n    ],\n    \"metadata\": {\n      \"username\": \"mitchellh\"\n    },\n    \"lease_duration\": 0,\n    \"renewable\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Key Version Using cURL in Transit Secrets Engine\nDESCRIPTION: Sample cURL command for importing a new version of an existing key in Vault's Transit secrets engine. Uses the POST method to the /transit/keys/:name/import_version endpoint with a JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key/import_version\n```\n\n----------------------------------------\n\nTITLE: Remove Node Sample Request\nDESCRIPTION: Shell command to remove a node from the Raft cluster\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/remove-peer\n```\n\n----------------------------------------\n\nTITLE: Creating KMIP Scope\nDESCRIPTION: Command to create a new scope in the KMIP secrets engine for organizing managed objects.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f kmip/scope/my-service\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth2 Access Token from Static Account (cURL)\nDESCRIPTION: cURL command to generate an OAuth2 access token from a static account configured in the GCP secrets engine. The generated token can be used for GCP API authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_31\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/static-account/my-token-account/token\n```\n\n----------------------------------------\n\nTITLE: Installing Primary Vault Cluster with Helm\nDESCRIPTION: This command installs the primary Vault cluster using Helm, configuring it for high availability with Raft storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm install vault-primary hashicorp/vault \\\n  --set='server.image.repository=hashicorp/vault-enterprise' \\\n  --set='server.image.tag=1.19.0-ent' \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Enabling OIDC Authentication Example\nDESCRIPTION: Example showing how to enable the OIDC authentication method at the '/adfs' path in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable -path=/adfs oidc\n```\n\n----------------------------------------\n\nTITLE: Importing a Key Version for Tokenization Transformation - cURL Request\nDESCRIPTION: Sample cURL request for importing a new key version into an existing tokenization transformation. The request targets the import_version endpoint with the transformation name specified in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/transformations/tokenization/example-transformation/import_version\n```\n\n----------------------------------------\n\nTITLE: Executing SSH Connection with CA Mode and Host Key Verification\nDESCRIPTION: Establishes an SSH connection using CA mode with additional host key verification parameters including mount point and hostname specifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/ssh.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault ssh \\\n    -mode=ca \\\n    -role=my-role \\\n    -host-key-mount-point=host-signer \\\n    -host-key-hostnames=example.com \\\n    user@example.com\n```\n\n----------------------------------------\n\nTITLE: Rotating a Transit Key\nDESCRIPTION: Shell command to rotate a Transit key named 'my-key', creating a new version that will be used for future encryption operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key/rotate\n```\n\n----------------------------------------\n\nTITLE: Pinning a Vault Plugin Version\nDESCRIPTION: This snippet demonstrates how to pin a specific version of a Vault plugin using the `vault write sys/plugins/pins` command. This ensures that all instances of the plugin use the specified version. The command requires the plugin type, name, and version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write sys/plugins/pins/secret/my-secret-plugin version=v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Generating AliCloud Access Credentials from a Policy-Based Role\nDESCRIPTION: Command to request new dynamic credentials from a configured policy-based role. The response includes an access key and secret key with a renewable lease.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault read alicloud/creds/policy-based\nKey                Value\n---                -----\nlease_id           alicloud/creds/policy-based/f3e92392-7d9c-09c8-c921-575d62fe80d8\nlease_duration     768h\nlease_renewable    true\naccess_key         0wNEpMMlzy7szvai\nsecret_key         PupkTg8jdmau1cXxYacgE736PJj4cA\n```\n\n----------------------------------------\n\nTITLE: Setting Sync Destination Association in Vault (JSON)\nDESCRIPTION: Sample payload for setting an association between a secret and a destination in Vault. Includes mount and secret name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mount\": \"my-kv\",\n    \"secret_name\": \"my-secret-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading AliCloud Role Configuration - Response\nDESCRIPTION: JSON response from retrieving an AliCloud role configuration. Shows the role ARN, associated policies, and TTL settings. This data structure represents the complete role configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"arn\": \"acs:ram::5138828231865461:role/dev-role\",\n    \"policies\": [\"default\", \"dev\", \"prod\"],\n    \"ttl\": 1800000,\n    \"max_ttl\": 1800000,\n    \"period\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Fallback Audit Device - Shell\nDESCRIPTION: The command sets up a fallback audit device to log all unfiltered audit entries. It ensures security compliance by capturing missed auditable events. The fallback audit device records logs in '/tmp/kv-audit.fallback.log'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/filtering.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\nvault audit enable                \\\n    -path=my-fallback               \\\n    -description=\\\"fallback device\\\"  \\\n    file                            \\\n    fallback=true                   \\\n    file_path=/tmp/kv-audit.fallback.log\n```\n\n----------------------------------------\n\nTITLE: Sending Curl Request to Authenticate with Vault\nDESCRIPTION: This shell session snippet illustrates sending a POST request to the Vault authentication endpoint using curl. It requires a JSON payload with authentication details to be sent to the specified URL for login purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/azure/login\n```\n\n----------------------------------------\n\nTITLE: MongoDB Atlas Database User Creation Statement\nDESCRIPTION: JSON creation statement for MongoDB Atlas database users. It specifies the authentication database, roles with their permissions, and cluster scopes. Each role can include database name, collection name, and role name parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodbatlas.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"database_name\": \"admin\",\n  \"roles\": [\n    {\n      \"databaseName\": \"admin\",\n      \"roleName\": \"atlasAdmin\"\n    },\n    {\n      \"collectionName\": \"acollection\",\n      \"roleName\": \"read\"\n    }\n  ],\n  \"scopes\": [\n    {\n      \"name\": \"a-cluster\",\n      \"type\": \"CLUSTER\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth2 Access Token from Impersonated Account (cURL)\nDESCRIPTION: cURL command to generate an OAuth2 access token from an impersonated account configured in the GCP secrets engine. The generated token can be used for GCP API authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_32\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/impersonated-account/my-token-impersonate/token\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Secrets (Detailed)\nDESCRIPTION: This snippet demonstrates how to list secrets in Vault with detailed information using the `vault secrets list -detailed` command.  This command can be used to verify the running version of the plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets list -detailed\n```\n\n----------------------------------------\n\nTITLE: Signing Data with Vault Transit API\nDESCRIPTION: Example curl command to sign data using Vault Transit API with SHA-512 algorithm and a specific key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_56\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/sign/my-key/sha2-512\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Credentials\nDESCRIPTION: Command to generate new dynamic credentials using a configured role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redis.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/creds/my-dynamic-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Secrets Engine Access (JSON)\nDESCRIPTION: JSON payload for configuring the Azure secrets engine with account credentials. Includes subscription ID, tenant ID, client ID, client secret, and other optional parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"subscription_id\": \"94ca80...\",\n  \"tenant_id\": \"d0ac7e...\",\n  \"client_id\": \"e607c4...\",\n  \"client_secret\": \"9a6346...\",\n  \"environment\": \"AzureGermanCloud\",\n  \"root_password_ttl\": \"48d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Masking Transformation with curl Request\nDESCRIPTION: Example curl command for creating or updating a masking transformation using the type-specific endpoint. Uses a JSON payload to specify transformation details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/transformations/masking/example-transformation\n```\n\n----------------------------------------\n\nTITLE: Replication Status Response for Performance and DR Primary Node\nDESCRIPTION: Sample JSON response from the replication status endpoint for a node that is both a performance primary and DR primary. Shows details about cluster IDs, known secondaries, connection status, and other replication metrics.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"dr\": {\n      \"cluster_id\": \"eef2a5ab-51e2-1c05-407c-8b4dc8d09ebf\",\n      \"corrupted_merkle_tree\": false,\n      \"known_secondaries\": [\n        \"4ca6b639-046b-5bb1-8043-6788ddf09121\"\n      ],\n      \"last_corruption_check_epoch\": \"-62135596800\",\n      \"last_dr_wal\": 223,\n      \"last_reindex_epoch\": \"0\",\n      \"last_wal\": 223,\n      \"merkle_root\": \"2494830f1a1c304829b5742a232d39b5457bce9a\",\n      \"mode\": \"primary\",\n      \"primary_cluster_addr\": \"\",\n      \"secondaries\": [\n        {\n          \"api_address\": \"https://127.0.0.1:65531\",\n          \"clock_skew_ms\": \"0\",\n          \"cluster_address\": \"https://127.0.0.1:65534\",\n          \"connection_status\": \"connected\",\n          \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n          \"last_heartbeat_duration_ms\": \"0\",\n          \"node_id\": \"4ca6b639-046b-5bb1-8043-6788ddf09121\",\n          \"replication_primary_canary_age_ms\": \"696\"\n        }\n      ],\n      \"ssct_generation_counter\": 0,\n      \"state\": \"running\"\n    },\n    \"performance\": {\n      \"cluster_id\": \"00616ea0-3094-5017-29f9-644f3633f0da\",\n      \"corrupted_merkle_tree\": false,\n      \"known_secondaries\": [\n        \"cd0463e0-a37f-7421-345e-aad53007479f\"\n      ],\n      \"last_corruption_check_epoch\": \"-62135596800\",\n      \"last_performance_wal\": 223,\n      \"last_reindex_epoch\": \"0\",\n      \"last_wal\": 223,\n      \"merkle_root\": \"7b75cf69bb9a862913b0de2478164e046d242e0f\",\n      \"mode\": \"primary\",\n      \"primary_cluster_addr\": \"\",\n      \"secondaries\": [\n        {\n          \"api_address\": \"https://127.0.0.1:49155\",\n          \"clock_skew_ms\": \"0\",\n          \"cluster_address\": \"https://127.0.0.1:49160\",\n          \"connection_status\": \"connected\",\n          \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n          \"last_heartbeat_duration_ms\": \"0\",\n          \"node_id\": \"cd0463e0-a37f-7421-345e-aad53007479f\",\n          \"replication_primary_canary_age_ms\": \"660\"\n        }\n      ],\n      \"ssct_generation_counter\": 0,\n      \"state\": \"running\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Vault Server in YAML for Helm\nDESCRIPTION: This YAML configuration enables a single development Vault server using the Helm chart. It sets the 'server.dev.enabled' flag to true, which is suitable for development environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/development.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  dev:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Delete Kubernetes Configuration (Vault)\nDESCRIPTION: Deletes the configuration previously set for the Kubernetes secrets engine. It sends a DELETE request to the `/kubernetes/config` endpoint. Requires a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE\n    http://127.0.0.1:8200/v1/kubernetes/config\n```\n\n----------------------------------------\n\nTITLE: Stepping Down Vault Leader Using operator step-down\nDESCRIPTION: Shows how to force a Vault server to resign its leadership position in a cluster. This is useful for maintenance or testing failover scenarios.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator step-down\nSuccess! Stepped down: https://127.0.0.1:8200\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Auth Method\nDESCRIPTION: CLI command to configure the OIDC authentication method with ADFS-specific parameters. This sets up the connection between Vault and ADFS using the client ID and secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/<YOUR_OIDC_MOUNT_PATH>/config \\\n  oidc_discovery_url=\"<ADFS_URL>\" \\\n  oidc_client_id=\"<ADFS_APPLICATION_GROUP_CLIENT_ID>\" \\\n  oidc_client_secret=\"<ADFS_APPLICATION_GROUP_SECRET>\" \\\n  default_role=\"<ADFS_ROLE>\" \n```\n\n----------------------------------------\n\nTITLE: Certificate Key and Algorithm Configuration\nDESCRIPTION: Parameters controlling key generation, type, size, and cryptographic properties\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_58\n\nLANGUAGE: yaml\nCODE:\n```\nkey_type: string\nkey_bits: integer\nkey_usage: [string]\nsignature_bits: integer\nuse_pss: boolean\n```\n\n----------------------------------------\n\nTITLE: Request Payload for Vault Token Rewrap\nDESCRIPTION: JSON payload structure for rewrapping a token, requiring the original wrapping token ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-rewrap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"abcd1234...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OIDC Client Application\nDESCRIPTION: Command to create a client application for OIDC authentication with redirect URI and assignments configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/oidc-provider.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write identity/oidc/client/my-webapp \\\n  redirect_uris=\"https://localhost:9702/auth/oidc-callback\" \\\n  assignments=\"allow_all\"\n```\n\n----------------------------------------\n\nTITLE: Sample Curl Request for MFA in Shell\nDESCRIPTION: This shell command illustrates how to use curl to make an API request, including the MFA token in the HTTP headers. It retrieves a secret from the Vault by specifying the MFA method and the corresponding code.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --header \"X-Vault-MFA:my_totp:695452\" \\\n    http://127.0.0.1:8200/v1/secret/foo\n```\n\n----------------------------------------\n\nTITLE: Critical Vault UI Policy Paths\nDESCRIPTION: Core UI policy paths that cannot be modified after enabling the Vault UI. These paths control mount visibility and ACL information for the UI interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/ui/policy-requirements.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nui/mounts\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nui/resultant-acl\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n/sys/internal/ui/mounts\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n/sys/internal/ui/resultant-acl\n```\n\n----------------------------------------\n\nTITLE: Non-Interactive MFA Validation Using Vault CLI\nDESCRIPTION: This command demonstrates how to perform a non-interactive MFA validation using the Vault CLI, which disables the interactive login experience.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -non-interactive sys/mfa/validate -format=json @payload.json\n```\n\n----------------------------------------\n\nTITLE: Executing MFA Validation Request in Shell\nDESCRIPTION: This curl command demonstrates how to send an MFA validation request to Vault, including the necessary headers and payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mfa/validate\n```\n\n----------------------------------------\n\nTITLE: Checking Service Account Status in Vault\nDESCRIPTION: Command to view the status of service accounts in a library, showing whether they are available or checked out.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read ldap/library/accounting-team/status\nKey                 Value\n---                 -----\nbuzz@example.com    map[available:true]\nfizz@example.com    map[available:true]\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Roles (CLI)\nDESCRIPTION: Vault CLI command to list all registered roles in the Azure secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vault list azure/roles\n```\n\n----------------------------------------\n\nTITLE: Signing SSH Key Request Payload in Vault\nDESCRIPTION: JSON payload for requesting Vault to sign an SSH public key. The payload requires the public key to be signed, and the API endpoint requires specifying the role name in the URL path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"public_key\": \"ssh-rsa ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP Key Using External URL in Vault\nDESCRIPTION: Creates a TOTP key in Vault using an external URL. This endpoint accepts a JSON payload with the 'url' parameter containing the TOTP key URL string, which defines the secret and configuration parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/totp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"otpauth://totp/Google:test@gmail.com?secret=Y64VEVMBTSXCYIWRSHRNDZW62MPGVU2G&issuer=Google\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/totp/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Workload Identity Federation\nDESCRIPTION: Set up Vault AWS secrets engine to use plugin workload identity federation for secure, token-based credential exchange\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/config/root \\\n    identity_token_audience=\"vault.example/v1/identity/oidc/plugins\" \\\n    role_arn=\"arn:aws:iam::123456789123:role/example-web-identity-role\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Permanent Deletion for Azure Objects\nDESCRIPTION: Sets up a Vault role with permanent deletion enabled for Azure applications and service principals upon lease expiration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write azure/roles/my-role permanently_delete=true ttl=1h azure_roles=-<<EOF\n    [\n        {\n            \"role_name\": \"Contributor\",\n            \"scope\":  \"/subscriptions/<uuid>/resourceGroups/Website\"\n        }\n    ]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Authentication in Vault via CLI\nDESCRIPTION: Command to enable the Azure authentication method in Vault using the CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth enable azure\n```\n\n----------------------------------------\n\nTITLE: Requesting Prometheus-formatted Metrics from Vault API\nDESCRIPTION: This curl command sends a GET request to the Vault API's /sys/metrics endpoint, requesting metrics in Prometheus format. It includes an authentication token in the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/metrics.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  --header \"X-Vault-Token: ...\" \\\n    'http://127.0.0.1:8200/v1/sys/metrics?format=prometheus'\n```\n\n----------------------------------------\n\nTITLE: Vault Recovery Key Verification Payload\nDESCRIPTION: This JSON payload contains the 'key' and 'nonce' parameters required to verify a recovery key in Vault. The 'key' parameter represents a single recovery share key from the new set, while the 'nonce' parameter corresponds to the rekey verification operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"A58d...\",\n  \"nonce\": \"5a27bbc1...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Policy for EST Role-Based Path\nDESCRIPTION: This HCL snippet defines an ACL policy for a role-based path policy in EST. It grants update and create capabilities for simpleenroll and simplereenroll endpoints under a specific role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/est.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npath \"pki/roles/my-role-name/est/simpleenroll\" {\n  capabilities=[\"update\", \"create\"]\n}\npath \"pki/roles/my-role-name/est/simplereenroll\" {\n  capabilities=[\"update\", \"create\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent with AppRole Authentication\nDESCRIPTION: HCL configuration file for Vault Agent that sets up a TCP listener, enables token caching, configures the Vault server address, and establishes AppRole authentication with the role ID and secret ID files.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/servicenow/installation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_disable = false\n  tls_cert_file = \"/path/to/cert.pem\"\n  tls_key_file = \"/path/to/key.pem\"\n}\n\ncache {\n  use_auto_auth_token = true\n}\n\nvault {\n  address = \"http://vault.example.com:8200\"\n}\n\nauto_auth {\n    method {\n        type = \"approle\"\n        config = {\n            role_id_file_path = \"/path/to/roleID\"\n            secret_id_file_path = \"/path/to/secretID\"\n            remove_secret_id_file_after_reading = false\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Template - HashiCorp Vault Command\nDESCRIPTION: This snippet shows how to create a template that uses regex to encode and decode credit card numbers in a specific format. The 'pattern' specifies the grouping of digits, while 'encode_format' and 'decode_formats' define how these groups are assembled in encoded/decoded output.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transform/template/ccn \\\n  type=regex \\\n  pattern='(\\d{4})[- ](\\d{4})[- ](\\d{4})[- ](\\d{4})' \\\n  encode_format='$1-$2-$3-$4' \\\n  decode_formats=last-four='$4' \\\n  alphabet=numerics\nSuccess! Data written to: transform/template/ccn\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes OpenID Configuration Issuer\nDESCRIPTION: This command retrieves the issuer information from the Kubernetes cluster's OpenID Configuration endpoint. This is an alternative method to find the required issuer value for Vault's Kubernetes auth configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get --raw /.well-known/openid-configuration | jq -r .issuer\n```\n\n----------------------------------------\n\nTITLE: Enabling Disaster Recovery Replication on Primary\nDESCRIPTION: These commands enable disaster recovery replication on the primary cluster and generate a token for the secondary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-primary-0 -- vault write -f sys/replication/dr/primary/enable primary_cluster_addr=https://vault-primary-active:8201\nkubectl exec -ti vault-primary-0 -- vault write sys/replication/dr/primary/secondary-token id=secondary\n```\n\n----------------------------------------\n\nTITLE: Rotating Root Password - Shell\nDESCRIPTION: This command triggers the rotation of the root password for the LDAP secret engine, ensuring that only Vault knows the new credentials after rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f ldap/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Querying Token Capabilities with JSON Payload in Vault API\nDESCRIPTION: This JSON payload is used to query the capabilities of a specified token on a given path. It requires two parameters: 'token' containing the token string to check, and 'paths' containing an array of path strings for which capabilities should be verified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"abcd1234\",\n  \"paths\": [\"secret/foo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an FPE Transformation with JSON Payload (Type-Specific)\nDESCRIPTION: Example JSON payload for creating or updating an FPE transformation using the type-specific endpoint. Specifies template, tweak source, and allowed roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": \"builtin/creditcardnumber\",\n  \"tweak_source\": \"internal\",\n  \"allowed_roles\": [\"example-role\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Join Raft Cluster Sample Request\nDESCRIPTION: Shell command to join a new node to the Raft cluster using cURL\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/join\n```\n\n----------------------------------------\n\nTITLE: Creating Static Account via API Request (cURL)\nDESCRIPTION: Sample cURL command for creating a new static account in the GCP secrets engine by sending a POST request with JSON payload to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcp/static-account/my-token-account\n```\n\n----------------------------------------\n\nTITLE: Setting Allowed Parameters with Any Value in Vault Policy (HCL)\nDESCRIPTION: This snippet shows how to allow a parameter to contain any value in a Vault policy. It allows updating the 'password' parameter for userpass auth users, but restricts updating other parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\npath \"auth/userpass/users/*\" {\n  capabilities = [\"update\"]\n  allowed_parameters = {\n    \"password\" = []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Group Policy Application Mode with curl in Vault API\nDESCRIPTION: This snippet demonstrates how to use curl to send a POST request to set the group policy application mode in Vault. The request requires a Vault token and includes a JSON payload specifying the desired mode.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-group-policy-application.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  --request POST \\\n  --header \"X-Vault-Token: ...\" \\\n  --data @payload.json \\\n  'http://127.0.0.1:8200/v1/sys/config/group-policy-application'\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Alert Rules\nDESCRIPTION: Example of defining Prometheus alert rules for monitoring Vault response times with different severity levels.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n  - alert: vault-HighResponseTime\n    annotations:\n      message: The response time of Vault is over 500ms on average over the last 5 minutes.\n    expr: vault_core_handle_request{quantile=\"0.5\", namespace=\"mynamespace\"} > 500\n    for: 5m\n    labels:\n      severity: warning\n  - alert: vault-HighResponseTime\n    annotations:\n      message: The response time of Vault is over 1s on average over the last 5 minutes.\n    expr: vault_core_handle_request{quantile=\"0.5\", namespace=\"mynamespace\"} > 1000\n    for: 5m\n    labels:\n      severity: critical\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Auth Role via CLI\nDESCRIPTION: Command to create an Azure authentication role that associates specific Azure resources with Vault policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/azure/role/dev-role \\\n    policies=\"prod,dev\" \\\n    bound_subscription_ids=6a1d5988-5917-4221-b224-904cd7e24a25 \\\n    bound_resource_groups=vault\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Values File Override\nDESCRIPTION: Installing Vault using a YAML file for configuration overrides, showing both the values file and install command\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  ha:\n    enabled: true\n    replicas: 5\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n    --values override-values.yml\n```\n\n----------------------------------------\n\nTITLE: cURL Request for Vault Unseal API\nDESCRIPTION: Example of how to make an HTTP POST request to the Vault unseal endpoint using cURL, submitting the unseal key payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/unseal.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/unseal\n```\n\n----------------------------------------\n\nTITLE: Updating Mount Configuration - JSON Payload\nDESCRIPTION: Sample JSON payload for updating mount configuration parameters, specifically lease TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default_lease_ttl\": 1800,\n  \"max_lease_ttl\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Operator Base Command Usage\nDESCRIPTION: Shows the main usage syntax and subcommands for the vault operator raft command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault operator raft <subcommand> [options] [args]\n\n This command groups subcommands for operators interacting with the Vault\n integrated Raft storage backend. Most users will not need to interact with these\n commands. Here are a few examples of the Raft operator commands:\n\nSubcommands:\n    join           Joins a node to the Raft cluster\n    list-peers     Returns the Raft peer set\n    remove-peer    Removes a node from the Raft cluster\n    snapshot       Restores and saves snapshots from the Raft cluster\n```\n\n----------------------------------------\n\nTITLE: Fetching Auth Method Mount Accessor in Vault\nDESCRIPTION: This command retrieves detailed information about enabled auth methods, including their mount accessors. The mount accessor is a unique identifier required when configuring MFA methods for specific auth methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth list -detailed\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration POST Request with cURL\nDESCRIPTION: Sample cURL command to send LDAP configuration payload to Vault API endpoint\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ldap/config\n```\n\n----------------------------------------\n\nTITLE: Importing a Key Version for Tokenization Transformation - JSON Payload\nDESCRIPTION: Sample JSON payload for importing new key material into an existing tokenization transformation that was created with an imported key. It contains only the ciphertext parameter with the encrypted key material.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"...\",\n}\n```\n\n----------------------------------------\n\nTITLE: Setting mlock Capability for Vault on Linux\nDESCRIPTION: Command to give Vault executable the ability to use the mlock syscall without running as root.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsudo setcap cap_ipc_lock=+ep $(readlink -f $(which vault))\n```\n\n----------------------------------------\n\nTITLE: Authenticating with GitHub using Vault CLI with environment variable\nDESCRIPTION: This snippet showcases authenticating to Vault using a GitHub personal access token stored in the `VAULT_AUTH_GITHUB_TOKEN` environment variable.  It shows exporting the token and then using `vault login` with the `github` method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export VAULT_AUTH_GITHUB_TOKEN=\"MY_TOKEN\"\n$ vault login -method=github\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Organization in Vault\nDESCRIPTION: This snippet demonstrates how to configure the GitHub organization in Vault using the `vault write auth/github/config` command. This allows Vault to communicate with GitHub and verify user membership in the specified organization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/github/config organization=hashicorp\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Client Credentials with JSON Payload\nDESCRIPTION: Sample JSON payload for configuring AWS access credentials in the Vault AWS auth method. This configuration provides the AWS access key and secret key needed to make AWS API calls.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_key\": \"VKIAJBRHKH6EVTTNXDHA\",\n  \"secret_key\": \"vCtSM8ZUEQ3mOFVlYPBQkf2sO6F/W7a5TVzrl3Oj\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Agent Injector with Custom TLS Configuration\nDESCRIPTION: Uses Helm to install the Vault Agent Injector with custom TLS settings, specifying the secret name for the certificate and the base64-encoded CA bundle.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n  --namespace=vault \\\n  --set=\"injector.certs.secretName=injector-tls\" \\\n  --set=\"injector.certs.caBundle=${CA_BUNDLE?}\"\n```\n\n----------------------------------------\n\nTITLE: Auth object structure in JSON\nDESCRIPTION: This snippet details the structure of the auth object used in audit entries, including various fields such as accessor, client token, policies, and metadata, which are crucial for access management and auditing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessor\": \"\",\n  \"client_token\": \"\",\n  \"display_name\": \"\",\n  \"entity_created\": \"\",\n  \"entity_id\": \"\",\n  \"external_namespace_policies\": {\n    \"allowed\": true,\n    \"granting_policies\": [\n      {\n        \"name\": \"\",\n        \"namespace_id\": \"\",\n        \"namespace_path\": \"\",\n        \"type\": \"\"\n      }\n    ]\n  },\n  \"identity_policies\": [\n    \"\"\n  ],\n  \"metadata\": {},\n  \"no_default_policy\": false,\n  \"num_uses\": 10,\n  \"policies\": [\n    \"\"\n  ],\n  \"policy_results\": {\n    \"allowed\": true,\n    \"granting_policies\": [\n      {\n        \"name\": \"\",\n        \"namespace_id\": \"\",\n        \"namespace_path\": \"\",\n        \"type\": \"\"\n      }\n    ]\n  },\n  \"remaining_uses\": 5,\n  \"token_policies\": [\n    \"\"\n  ],\n  \"token_issue_time\": \"\",\n  \"token_ttl\": 3600,\n  \"token_type\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating an Entity Alias by ID (JSON Payload)\nDESCRIPTION: This JSON payload is used to update an existing entity alias in Vault's Identity store. It includes the alias name, canonical ID, mount accessor, and custom metadata. The alias is identified by its ID in the API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"testuser\",\n  \"canonical_id\": \"404e57bc-a0b1-a80f-0a73-b6e92e8a52d3\",\n  \"mount_accessor\": \"auth_userpass_e50b1a44\"\n   \"custom_metadata\": {\n    \"contact_email\": \"james@example.com\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Helm Values for Vault with TLS on Kubernetes\nDESCRIPTION: A custom Helm values configuration for deploying Vault with TLS on Kubernetes. It defines volume mounts for certificates, disables TLS on the global level, and configures a standalone Vault server with TCP listener using the provided TLS certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/standalone-tls.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\n  enabled: true\n  tlsDisable: false\n\nserver:\n  extraEnvironmentVars:\n    VAULT_CACERT: /vault/userconfig/vault-server-tls/vault.ca\n\n  volumes:\n    - name: userconfig-vault-server-tls\n      secret:\n        defaultMode: 420\n        secretName: vault-server-tls # Matches the ${SECRET_NAME} from above\n\n  volumeMounts:\n    - mountPath: /vault/userconfig/vault-server-tls\n      name: userconfig-vault-server-tls\n      readOnly: true\n\n  standalone:\n    enabled: true\n    config: |\n      listener \"tcp\" {\n        address = \"[::]8200\"\n        cluster_address = \"[::]8201\"\n        tls_cert_file = \"/vault/userconfig/vault-server-tls/vault.crt\"\n        tls_key_file  = \"/vault/userconfig/vault-server-tls/vault.key\"\n        tls_client_ca_file = \"/vault/userconfig/vault-server-tls/vault.ca\"\n      }\n\n      storage \"file\" {\n        path = \"/vault/data\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining Password Policy with No Minimum Characters in HCL\nDESCRIPTION: This HCL snippet defines a password policy with no minimum character requirements. It includes rules for lowercase, uppercase, numeric, and special characters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyz\"\n}\nrule \"charset\" {\n  charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n}\nrule \"charset\" {\n  charset = \"0123456789\"\n}\nrule \"charset\" {\n  charset = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a User in Vault Userpass\nDESCRIPTION: Command to create a new end-user with password authentication in Vault's userpass system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/oidc-provider.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/userpass/users/end-user password=\"securepassword\"\n```\n\n----------------------------------------\n\nTITLE: Example CLI Restoration Output\nDESCRIPTION: Example showing successful restoration of versions 1 and 4 of a secret at the shared mount path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/undelete-data.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault kv undelete -mount shared -versions 1,4 dev/square-api\n\nSuccess! Data deleted (if it existed) at: shared/data/dev/square-api\n```\n\n----------------------------------------\n\nTITLE: Registering an Enterprise Plugin with Custom Arguments\nDESCRIPTION: This example shows how to register an Enterprise plugin with custom arguments by specifying both the version and additional runtime parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/register.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register\n    -version=0.16.0+ent \\\n    -args=--with-glibc,--with-curl-bindings \\\n    secret \\\n    vault-plugin-secrets-keymgmt\n```\n\n----------------------------------------\n\nTITLE: Sample Shell Request for Setting Default PKI Key\nDESCRIPTION: cURL command for sending a POST request to set the default key in the PKI configuration. This demonstrates how to submit the key configuration payload to Vault's API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_99\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/keys\n```\n\n----------------------------------------\n\nTITLE: Configuring Couchbase Plugin Connection\nDESCRIPTION: Command to configure Vault with Couchbase plugin connection details including TLS and authentication credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write database/config/my-couchbase-database \\\n    plugin_name=\"couchbase-database-plugin\" \\\n    hosts=\"couchbase://127.0.0.1\" \\\n    tls=true \\\n    base64pem=\"${BASE64PEM}\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass\" \\\n    allowed_roles=\"my-*-role\"\n```\n\n----------------------------------------\n\nTITLE: Connecting to HCP using Vault CLI\nDESCRIPTION: This command initiates a connection to HCP using the Vault CLI. It opens the default web browser for authentication and completes the login process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/hcp/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault hcp connect\nThe default web browser has been opened at <auth_url>. Please continue the login in the web browser.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Updating Issuer Chain in Vault\nDESCRIPTION: This snippet demonstrates how to manually update the issuer chain in Vault when encountering storage write errors during issuer migration. The content type is set to merge-patch, and a valid Vault token is required for authentication. The patch requests update the issuer's manual chain to a self-reference before reverting to automatic chain building.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/considerations.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH -H \"Content-Type: application/merge-patch+json\" -H \"X-Vault-Request: true\" -H \"X-Vault-Token: $(vault print token)\" -d '{\"manual_chain\":\"self\"}' https://.../issuer/default\n```\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PATCH -H \"Content-Type: application/merge-patch+json\" -H \"X-Vault-Request: true\" -H \"X-Vault-Token: $(vault print token)\" -d '{\"manual_chain\":\"\"}' https://.../issuer/default\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault read pki/issuer/default\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vault using AWS IAM in C#\nDESCRIPTION: C# code example that demonstrates how to authenticate with Vault using the AWS IAM auth method. The example constructs an AWS IAM request, signs it, and uses the credentials to authenticate with Vault before retrieving a secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\nusing System.Text;\nusing Amazon.Runtime;\nusing Amazon.Runtime.Internal;\nusing Amazon.Runtime.Internal.Auth;\nusing Amazon.Runtime.Internal.Util;\nusing Amazon.SecurityToken;\nusing Amazon.SecurityToken.Model;\nusing Amazon.SecurityToken.Model.Internal.MarshallTransformations;\nusing Newtonsoft.Json;\nusing VaultSharp;\nusing VaultSharp.V1.AuthMethods;\nusing VaultSharp.V1.AuthMethods.AWS;\nusing VaultSharp.V1.Commons;\nusing VaultSharp.V1.SecretsEngines.AWS;\n\nnamespace Examples\n{\n    public class AwsAuthExample\n    {\n        /// <summary>\n        /// Fetches a key-value secret (kv-v2) after authenticating to Vault via AWS IAM,\n        /// one of two auth methods used to authenticate with AWS (the other is EC2 auth).\n        /// </summary>\n        public string GetSecretAWSAuthIAM()\n        {\n            var vaultAddr = Environment.GetEnvironmentVariable(\"VAULT_ADDR\");\n            if(String.IsNullOrEmpty(vaultAddr))\n            {\n                throw new System.ArgumentNullException(\"Vault Address\");\n            }\n\n            var roleName = Environment.GetEnvironmentVariable(\"VAULT_ROLE\");\n            if(String.IsNullOrEmpty(roleName))\n            {\n                throw new System.ArgumentNullException(\"Vault Role Name\");\n            }\n\n            var amazonSecurityTokenServiceConfig = new AmazonSecurityTokenServiceConfig();\n\n            // Initialize BasicAWS Credentials w/ an accessKey and secretKey\n            Amazon.Runtime.AWSCredentials awsCredentials = new BasicAWSCredentials(accessKey: Environment.GetEnvironmentVariable(\"AWS_ACCESS_KEY_ID\"),\n                                                                secretKey: Environment.GetEnvironmentVariable(\"AWS_SECRET_ACCESS_KEY\"));\n\n            // Construct the IAM Request and add necessary headers\n            var iamRequest = GetCallerIdentityRequestMarshaller.Instance.Marshall(new GetCallerIdentityRequest());\n\n            iamRequest.Endpoint = new Uri(amazonSecurityTokenServiceConfig.DetermineServiceURL());\n            iamRequest.ResourcePath = \"/\";\n\n            iamRequest.Headers.Add(\"User-Agent\", \"some-agent\");\n            iamRequest.Headers.Add(\"X-Amz-Security-Token\", awsCredentials.GetCredentials().Token);\n            iamRequest.Headers.Add(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n\n            new AWS4Signer().Sign(iamRequest, amazonSecurityTokenServiceConfig, new RequestMetrics(), awsCredentials.GetCredentials().AccessKey, awsCredentials.GetCredentials().SecretKey);\n            var iamSTSRequestHeaders = iamRequest.Headers;\n\n            // Convert headers to Base64 encoded version\n            var base64EncodedIamRequestHeaders = Convert.ToBase64String(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(iamSTSRequestHeaders)));\n\n            IAuthMethodInfo authMethod = new IAMAWSAuthMethodInfo(roleName: roleName, requestHeaders: base64EncodedIamRequestHeaders);\n            var vaultClientSettings = new VaultClientSettings(vaultAddr, authMethod);\n\n            IVaultClient vaultClient = new VaultClient(vaultClientSettings);\n\n            // We can retrieve the secret from the VaultClient object\n            Secret<SecretData> kv2Secret = null;\n            kv2Secret = vaultClient.V1.Secrets.KeyValue.V2.ReadSecretAsync(path: \"/creds\").Result;\n\n            var password = kv2Secret.Data.Data[\"password\"];\n\n            return password.ToString();\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Deny-All RGP in HCL\nDESCRIPTION: This snippet demonstrates a denial RGP configured in HCL using Sentinel. It checks the entity's metadata for an 'org_id' and denies requests with the specified ID due to a hard-mandatory enforcement level. No path is specified as RGPs are for tokens and identities rather than paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/sentinel/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nprecond = rule {\n   identity.entity.metadata.org_id is \"A012345X\"\n}\n\nmain = rule when precond {\n   false\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Token Audiences in Vault Role (Vault CLI)\nDESCRIPTION: This snippet demonstrates how to set the default audiences for tokens when creating or tuning a Vault role using the Vault CLI. It sets `token_default_audiences` to \"custom-audience\". The role is configured to allow access to all Kubernetes namespaces and associates with 'new-service-account-with-generated-token'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/roles/my-role \\\n    allowed_kubernetes_namespaces=\"*\" \\\n    service_account_name=\"new-service-account-with-generated-token\" \\\n    token_default_audiences=\"custom-audience\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Cache in Vault Proxy using HCL\nDESCRIPTION: Example configuration block demonstrating how to set up persistent caching in Vault Proxy. The configuration specifies the cache type as 'kubernetes' and defines the cache storage path. This requires auto-auth to be configured and is currently only supported in Kubernetes environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/persistent-caches/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncache {\n  persist \"kubernetes\" {\n    path = \"/vault/proxy-cache\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Saving the Signed Public Key to Disk\nDESCRIPTION: This code snippet shows how to save the resulting signed public key to disk using `vault write -field`. The file is named `signed-cert.pub` and is stored beside the original keypair.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -field=signed_key ssh-client-signer/sign/my-role \\\n        public_key=@$HOME/.ssh/id_rsa.pub > signed-cert.pub\n```\n\n----------------------------------------\n\nTITLE: Custom Consul Address Configuration\nDESCRIPTION: Configuration example with custom Consul address and ACL token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"consul\" {\n  address = \"10.5.7.92:8194\"\n  token   = \"abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Secondary Vault Enterprise Cluster\nDESCRIPTION: Helm command to install the secondary Vault Enterprise cluster with HA and Raft storage enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-perf-with-raft.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nhelm install vault-secondary hashicorp/vault \\\n  --set='server.image.repository=hashicorp/vault-enterprise' \\\n  --set='server.image.tag=1.19.0-ent' \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Setting ACME Configuration in Vault PKI (Shell)\nDESCRIPTION: This snippet demonstrates how to set the ACME server configuration using a POST request with a JSON payload to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/acme\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Authentication Login via CLI\nDESCRIPTION: Various methods of performing login using IAM authentication, including default credentials and explicit credential passing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=aws header_value=vault.example.com role=dev-role-iam\n\n$ vault login -method=aws header_value=vault.example.com role=dev-role-iam \\\n        aws_access_key_id=<access_key> \\\n        aws_secret_access_key=<secret_key> \\\n        aws_security_token=<security_token>\n\n$ vault login -method=aws region=us-west-2 role=dev-role-iam\n```\n\n----------------------------------------\n\nTITLE: Configuring Role for Redshift Database in Vault\nDESCRIPTION: This command configures a role that maps a name in Vault to SQL statements for creating database credentials. It specifies the database name, creation statements, and TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redshift.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-redshift-database \\\n    creation_statements=\"CREATE USER \\\"{{name}}\\\" WITH PASSWORD '{{password}}' VALID UNTIL '{{expiration}}'; \\\n        GRANT SELECT ON ALL TABLES IN SCHEMA public TO \\\"{{name}}\\\";\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Final Identity Token with Standard OIDC Claims in Vault\nDESCRIPTION: This example shows the complete JWT payload after the template is merged with the standard OIDC claims. It includes issuer URL, subject (entity ID), audience, issuance and expiration times, along with the custom fields from the template.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/identity-token.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iss\": \"https://10.1.1.45:8200/v1/identity/oidc\",\n  \"sub\": \"a2cd63d3-5364-406f-980e-8d71bb0692f5\",\n  \"aud\": \"SxSouteCYPBoaTFy94hFghmekos\",\n  \"iat\": 1561411915,\n  \"exp\": 1561412215,\n  \"color\": \"green\",\n  \"userinfo\": {\n    \"username\": \"bob\",\n    \"groups\": [\"web\", \"engr\", \"default\"]\n  },\n  \"nbf\": 1561411915\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to Create a Transit Key in Vault\nDESCRIPTION: Shell command using curl to create a new encryption key in Vault's Transit secrets engine. The request uses a JSON payload and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Setting Custom HTTP Header in Vault CLI\nDESCRIPTION: Demonstrates how to set a custom HTTP header using the -header flag in Vault CLI commands. The header must be formatted as 'key=value' and cannot start with 'X-Vault-'. Multiple headers can be set by repeating the flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/flags/header.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n-header \"Cache-Control=max-age=0\"\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault after Migration\nDESCRIPTION: This command unseals the Vault instance after the migration. It provides information about the seal status, storage type, and cluster details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl exec -it vault-0 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Configuring Access for Terraform Cloud - HTTP API - Shell\nDESCRIPTION: This snippet demonstrates how to configure the access information for Terraform Cloud. A POST request is sent to the `/terraform/config` endpoint with the necessary parameters including the address and authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/terraform/config\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultAuth for GCP Authentication\nDESCRIPTION: YAML configuration for creating a VaultAuth object to enable GCP authentication in Vault Secrets Operator, specifying the authentication method, role, and workload identity service account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/gcp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: vaultauth-gcp-example\n  namespace: <K8S_NAMESPACE>\nspec:\n  vaultConnectionRef: <VAULT_CONNECTION_NAME>\n  mount: gcp\n  method: gcp\n  gcp:\n    role: <VAULT_GCP_ROLE>\n    workloadIdentityServiceAccount: <K8S_SERVICE_ACCOUNT>\n```\n\n----------------------------------------\n\nTITLE: Revoking a Service Account Lease in Vault\nDESCRIPTION: Command to forcibly check in a service account by revoking its lease.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ vault lease revoke ldap/library/accounting-team/check-out/PvBVG0m7pEg2940Cb3Jw3KpJ\nAll revocation operations queued successfully!\n```\n\n----------------------------------------\n\nTITLE: Registering Google Cloud KMS Key in Vault\nDESCRIPTION: This snippet demonstrates how to register an existing Google Cloud KMS crypto key in Vault. It includes the policy, request parameters, sample payload, and curl command for the POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_34\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/register/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crypto_key\": \"projects/my-project/locations/my-location/keyRings/my-keyring/cryptoKeys/my-crypto-key\",\n  \"verify\": true\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/register/my-key\n```\n\n----------------------------------------\n\nTITLE: Basic Storage Migration Configuration\nDESCRIPTION: HCL configuration example showing how to specify source and destination storage backends for migration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/migrate.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage_source \"mysql\" {\n  username = \"user1234\"\n  password = \"secret123!\"\n  database = \"vault\"\n}\n\nstorage_destination \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Group by ID - Vault Identity API (JSON Response)\nDESCRIPTION: This JSON response represents the data returned when querying a group by its ID in Vault's Identity store. The response contains details about the group including aliases, creation/update timestamps, member entities/groups, metadata, modify index, name, policies, and type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"alias\": {},\n    \"creation_time\": \"2017-11-13T19:36:47.102945Z\",\n    \"id\": \"363926d8-dd8b-c9f0-21f8-7b248be80ce1\",\n    \"last_update_time\": \"2017-11-13T19:36:47.102945Z\",\n    \"member_entity_ids\": [],\n    \"member_group_ids\": null,\n    \"metadata\": {\n      \"hello\": \"world\"\n    },\n    \"modify_index\": 1,\n    \"name\": \"group_ab813d63\",\n    \"policies\": [\"grouppolicy1\", \"grouppolicy2\"],\n    \"type\": \"internal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Policies via CLI\nDESCRIPTION: Command to list all registered policies in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read sys/policy\n```\n\n----------------------------------------\n\nTITLE: Creating peers.json for Manual Raft Recovery in Vault\nDESCRIPTION: This JSON snippet demonstrates the structure of a peers.json file used for manual recovery of a Vault cluster using Raft storage. It specifies the node ID, address:port, and voting status for each Vault server in the cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"node1\",\n    \"address\": \"node1.vault.local:8201\",\n    \"non_voter\": false\n  },\n  {\n    \"id\": \"node2\",\n    \"address\": \"node2.vault.local:8201\",\n    \"non_voter\": false\n  },\n  {\n    \"id\": \"node3\",\n    \"address\": \"node3.vault.local:8201\",\n    \"non_voter\": false\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager with Global KMS Key\nDESCRIPTION: A JSON payload for creating a GCP Secret Manager destination that uses a customer-managed global KMS key for encryption at rest. Includes service account credentials and the KMS key resource identifier.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"credentials\": \"<private key string>\",\n    \"global_kms_key\": \"projects/my-project/locations/global/keyRings/my-global-keyring/cryptoKeys/my-global-key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Snapshot Configuration Request\nDESCRIPTION: cURL command to create or update a snapshot configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot-auto/config/config1\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Restricting Access to Vault-Synced Secrets\nDESCRIPTION: This JSON snippet defines an IAM policy that allows access to secrets in AWS Secrets Manager only if they have a specific tag. It's used to restrict access to secrets synced from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/awssm.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"secretsmanager:*\",\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"secretsmanager:ResourceTag/hashicorp:vault\": \"\" # This tag is automatically added by Vault on every synced secrets\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Encryption - JSON\nDESCRIPTION: This JSON object is a sample payload for encrypting plaintext using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plaintext\": \"hello world\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Reading OIDC Provider Configuration\nDESCRIPTION: The JSON response format when retrieving OpenID Connect metadata. It includes information about the issuer, endpoints, supported algorithms, and other OIDC capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider\",\n  \"jwks_uri\": \"http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/.well-known/keys\",\n  \"authorization_endpoint\": \"http://127.0.0.1:8200/ui/vault/identity/oidc/provider/test-provider/authorize\",\n  \"token_endpoint\": \"http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/token\",\n  \"userinfo_endpoint\": \"http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/userinfo\",\n  \"request_parameter_supported\": false,\n  \"request_uri_parameter_supported\": false,\n  \"id_token_signing_alg_values_supported\": [\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\",\n    \"EdDSA\"\n  ],\n  \"response_types_supported\": [\n    \"code\"\n  ],\n  \"scopes_supported\": [\n    \"openid\"\n  ],\n  \"subject_types_supported\": [\n    \"public\"\n  ],\n  \"grant_types_supported\": [\n    \"authorization_code\"\n  ],\n  \"token_endpoint_auth_methods_supported\": [\n    \"client_secret_basic\",\n    \"client_secret_post\",\n    \"none\"\n  ],\n  \"code_challenge_methods_supported\": [\n    \"plain\",\n    \"S256\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Roles - Shell Request\nDESCRIPTION: cURL command to list all registered roles in the OCI auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/oci/role\n```\n\n----------------------------------------\n\nTITLE: VaultPKISecret Resource Definition\nDESCRIPTION: Complete resource definition for VaultPKISecret including API version, kind, metadata and spec fields. Used for managing PKI certificates through Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultPKISecret\nmetadata:\n  # Standard Kubernetes metadata\nspec:\n  # VaultPKISecretSpec fields\n```\n\n----------------------------------------\n\nTITLE: Login Token Creation via API Text Command\nDESCRIPTION: This command logs in a user via the Vault API to return a token without authenticating the CLI. The token is associated with the specified user and policy. Vault must be operational with userpass configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/userpass/login/testuser \\\n    password=testpassword\n```\n\n----------------------------------------\n\nTITLE: Restoring KV Data Using Vault CLI\nDESCRIPTION: Command to restore soft deleted versions of key/value data using the vault kv undelete command. Requires specifying the mount path, versions to restore, and secret path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/undelete-data.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault kv undelete             \\\n   -mount <mount_path>          \\\n   -versions <target_versions>  \\\n   <secret_path>\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with OpenAPI Go\nDESCRIPTION: This code snippet shows how to authenticate to Vault using the OpenAPI-based Go client. It creates a new client, sets the address, request timeout, and the token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_22\n\nLANGUAGE: go\nCODE:\n```\nclient, err := vault.New(\n   vault.WithAddress(\"http://127.0.0.1:8200\"),\n   vault.WithRequestTimeout(30*time.Second),\n)\nif err != nil {\n   log.Fatal(err)\n}\n\nif err := client.SetToken(\"dev-only-token\"); err != nil {\n   log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Sending AWS Root Credentials Configuration Request\nDESCRIPTION: cURL command to configure the root AWS credentials in Vault by posting the credentials payload to the configuration endpoint. Requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/aws/config/root\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Okta TOTP MFA in Vault CLI\nDESCRIPTION: This command demonstrates how to authenticate with Vault using Okta credentials and a TOTP (Time-based One-Time Password) for multi-factor authentication via the CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=okta username=my-username totp=123456\n```\n\n----------------------------------------\n\nTITLE: Setting Autopilot Configuration in Vault\nDESCRIPTION: Command usage for modifying the configuration of the Autopilot subsystem in Vault's integrated storage, with an example of setting the server stabilization time parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault operator raft autopilot set-config [options]\n\n  Modify the configuration of the autopilot subsystem under integrated storage.\n\n\t  $ vault operator raft autopilot set-config -server-stabilization-time 10s\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Proxy API with Auto-Auth Token\nDESCRIPTION: Example configuration for Vault Proxy showing API proxy settings with forced auto-auth token usage and consistency enforcement. Includes listener configuration for Unix socket communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/apiproxy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\napi_proxy {\n  use_auto_auth_token = \"force\"\n  enforce_consistency = \"always\"\n}\n\nlistener \"unix\" {\n    address = \"/var/run/vault-proxy.sock\n}\n```\n\n----------------------------------------\n\nTITLE: Executing SSH Connection with CA Mode in Vault\nDESCRIPTION: Establishes an SSH connection using Certificate Authority (CA) mode authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/ssh.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault ssh -mode=ca -role=my-role user@1.2.3.4\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Injection with YAML Annotations\nDESCRIPTION: Example showing how to configure secret injection using Kubernetes annotations to specify paths and roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nvault.hashicorp.com/agent-inject-secret-foo: database/roles/app\nvault.hashicorp.com/agent-inject-secret-bar: consul/creds/app\nvault.hashicorp.com/role: 'app'\n```\n\n----------------------------------------\n\nTITLE: Response Format for Azure Auth Roles List\nDESCRIPTION: JSON response format showing the list of available roles registered with the Azure auth method plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"dev-role\",\n      \"prod-role\"\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom HTTP Response Headers Configuration\nDESCRIPTION: Configuration for setting custom HTTP response headers in Vault for different status codes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  custom_response_headers {\n    \"default\" = {\n      \"Strict-Transport-Security\" = [\"max-age=31536000\",\"includeSubDomains\"],\n      \"Content-Security-Policy\" = [\"connect-src https://clusterA.vault.external/\"],\n      \"X-Custom-Header\" = [\"Custom Header Default Value\"],\n    },\n    \"2xx\" = {\n      \"Content-Security-Policy\" = [\"connect-src https://clusterB.vault.external/\"],\n      \"X-Custom-Header\" = [\"Custom Header Value 1\", \"Custom Header Value 2\"],\n    },\n    \"301\" = {\n      \"Strict-Transport-Security\" = [\"max-age=31536000\"],\n      \"Content-Security-Policy\" = [\"connect-src https://clusterC.vault.external/\"],\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Filter Expression Example in Vault\nDESCRIPTION: Demonstrates a simple filter expression format with a matching operator, selector, and selector value. This example filters for products with the name 'Vault'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/filtering.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproduct/name == \"Vault\"\n```\n\n----------------------------------------\n\nTITLE: Revoking a Token by Accessor - Shell\nDESCRIPTION: In this snippet, the command revokes a token by specifying its accessor instead of the token itself. The accessor allows for revocation without needing the actual token value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/revoke.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token revoke -accessor 9793c9b3-e04a-46f3-e7b8-748d7da248da\nSuccess! Revoked token (if it existed)\n```\n\n----------------------------------------\n\nTITLE: Reading Okta Configuration via cURL\nDESCRIPTION: Shell command to retrieve the current Okta configuration settings using GET request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/okta/config\n```\n\n----------------------------------------\n\nTITLE: Reading OIDC Provider OpenID Configuration\nDESCRIPTION: This API endpoint retrieves the OpenID Connect metadata for a specified OIDC provider. The request uses a GET HTTP method and does not require authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_28\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Response for Reading an Entity by Name - JSON\nDESCRIPTION: The JSON response from querying an entity by name provides comprehensive attributes of the entity. It covers metadata, policies, and structural information relevant to the entity queried in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"aliases\": [], \"creation_time\": \"2018-09-19T17:20:27.705389973Z\", \"direct_group_ids\": [], \"disabled\": false, \"group_ids\": [], \"id\": \"0826be06-577c-a076-3942-2f92da0310ce\", \"inherited_group_ids\": [], \"last_update_time\": \"2018-09-19T17:20:27.705389973Z\", \"merged_entity_ids\": null, \"metadata\": {\"organization\": \"hashicorp\", \"team\": \"nomad\"}, \"name\": \"testentityname\", \"policies\": [\"eng-developers\", \"infra-developers\"]}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Multiple Plugin Instances with Different Configurations\nDESCRIPTION: Commands to enable multiple instances of plugins with different configurations. This demonstrates enabling two JWT auth methods and one secrets engine, each with their own separate proxy settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable jwt-eu\nSuccess! Enabled the jwt-eu auth method at: auth/jwt-eu/\n\n$ vault auth enable jwt-us\nSuccess! Enabled the jwt-us auth method at: auth/jwt-us/\n\n$ vault secrets enable vault-plugin-secrets-keymgmt\nSuccess! Enabled the vault-plugin-secrets-keymgmt secrets engine at: vault-plugin-secrets-keymgmt/\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for PKI Certificate Signing\nDESCRIPTION: Example JSON payload showing the minimum required parameters (CSR and common name) for signing an intermediate certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"csr\": \"...\",\n  \"common_name\": \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Credential Rotation with Time Window in Vault AWS Auth\nDESCRIPTION: Shell command to configure scheduled root credential rotation with a specific rotation window. This example sets rotation for Saturday midnight with a one-hour window for the operation to complete.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/aws/config/client \\\n  ...\n  rotation_window=\"1h\" \\\n  rotation_schedule=\"0 * * * SAT\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Creating an ECDSA-P256 Key with Derivation in Vault Transit Engine\nDESCRIPTION: JSON payload for creating a new ECDSA-P256 encryption key with derivation enabled in Vault's Transit secrets engine. The derived parameter enables key derivation using context in encrypt/decrypt operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"ecdsa-p256\",\n  \"derived\": true\n}\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Storage with SSL Verification in HCL\nDESCRIPTION: Configuration example showing connection to CockroachDB cluster with full SSL verification and high availability enabled, recommended for production deployments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/cockroachdb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"cockroachdb\" {\n  connection_url = \"postgres://user:pass@localhost:26257/database?sslmode=verify-full\"\n  ha_enabled     = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secrets Engine Lease Settings Request\nDESCRIPTION: cURL command to configure the lease settings for AWS credentials managed by Vault, defining how long generated credentials will be valid.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/aws/config/lease\n```\n\n----------------------------------------\n\nTITLE: Configuring Role for Venafi Cloud - Shell Script\nDESCRIPTION: This snippet configures a role in Vault that maps to a Venafi secret for certificate enrollment via Venafi Cloud. It includes settings for domain allowances and key storage preferences.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/roles/cloud \\\n    venafi_secret=cloud \\\n    store_by=serial store_pkey=true \\\n    allowed_domains=example.com \\\n    allow_subdomains=true\n```\n\n----------------------------------------\n\nTITLE: Requesting Log Stream from Vault Server via /sys/monitor API\nDESCRIPTION: This curl command demonstrates how to make a GET request to the /sys/monitor endpoint with a debug log level. The request requires a Vault token for authentication and returns streaming logs in the configured log format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/monitor.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    'http://127.0.0.1:8200/v1/sys/monitor?log_level=debug'\n```\n\n----------------------------------------\n\nTITLE: Sample Response Structure for Certificate Signing in Vault PKI\nDESCRIPTION: Example JSON response structure when signing a certificate with Vault's PKI secrets engine. The response includes certificate data, CA chain information, and other metadata like serial number and expiration date.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"expiration\": \"1654105687\",\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\",\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\"\n    ],\n    \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:58\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Read Certificate Request\nDESCRIPTION: Request to retrieve a specific certificate by serial number\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    http://127.0.0.1:8200/v1/pki/cert/67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72\n```\n\n----------------------------------------\n\nTITLE: Generating MFA-enabled Session Token Credentials (Shell)\nDESCRIPTION: This command generates a new set of STS session token credentials for the mfa_user role, requiring an MFA code to be provided.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read aws/creds/mfa_user mfa_code=123456\n```\n\n----------------------------------------\n\nTITLE: Configuring Influxdb Connection - HTTP API - JSON\nDESCRIPTION: This snippet demonstrates the JSON payload required to configure the Influxdb connection through the Vault API. It specifies the plugin name, allowed roles, host, username, and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/influxdb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"influxdb-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"host\": \"influxdb1.local\",\n  \"username\": \"user\",\n  \"password\": \"pass\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response from CA Certificate Import in Vault PKI\nDESCRIPTION: This response shows the result of a successful CA certificate and key import operation, including the IDs of imported issuers and keys, and their mapping relationships.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_67\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"imported_issuers\": [\"1ae8ce9d-2f70-0761-a465-8c9840a247a2\"],\n    \"imported_keys\": [\"97be2525-717a-e2f7-88da-0a20e11aad88\"],\n    \"mapping\": {\n      \"1ae8ce9d-2f70-0761-a465-8c9840a247a2\": \"97be2525-717a-e2f7-88da-0a20e11aad88\"\n    },\n    \"existing_issuers\": [],\n    \"existing_keys\": []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Request Retry with State Consistency in Vault Go API\nDESCRIPTION: Example of using Vault Go API's client helpers to ensure consistency between write and read operations. The code demonstrates how to record state from a write operation and require that state to be visible in a subsequent read operation, implementing automatic retries for consistency.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/consistency.mdx#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nclient := api.NewClient(api.DefaultConfig)\nvar state string\n_, err := client.WithResponseCallbacks(api.RecordState(&state)).Write(path, data)\nsecret, err := client.WithRequestCallbacks(api.RequireState(state)).Read(path)\n```\n\n----------------------------------------\n\nTITLE: Deleting an LDAP User using cURL\nDESCRIPTION: This snippet shows how to delete a specific LDAP user by sending a DELETE request to the user's endpoint. The operation requires the username as a parameter and the X-Vault-Token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/ldap/users/mitchellh\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Vault Enterprise Active Node Health Check\nDESCRIPTION: This JSON snippet illustrates the response structure for a health check on an active node in Vault Enterprise Edition. It includes additional fields such as license information and enterprise-specific attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/health.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clock_skew_ms\": 0,\n  \"cluster_id\": \"e278ff10-60da-4248-0b0a-dd174d22172d\",\n  \"cluster_name\": \"vault-cluster-88b4e092\",\n  \"echo_duration_ms\": 0,\n  \"enterprise\": true,\n  \"initialized\": true,\n  \"last_wal\": 362,\n  \"license\": {\n    \"expiry_time\": \"2024-08-03T23:59:59Z\",\n    \"state\": \"autoloaded\",\n    \"terminated\": false\n  },\n  \"performance_standby\": false,\n  \"replication_dr_mode\": \"disabled\",\n  \"replication_performance_mode\": \"disabled\",\n  \"replication_primary_canary_age_ms\": 0,\n  \"sealed\": false,\n  \"server_time_utc\": 1709558830,\n  \"standby\": false,\n  \"version\": \"1.17.0-beta1+ent\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Vault Version Using '--version' Flag\nDESCRIPTION: This snippet shows an alternative method to display the Vault version using the '--version' or '-v' flag with the main 'vault' command. It provides more detailed version information, including the build date.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/version.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault -v\nVault v1.2.3, built 2022-05-03T08:34:11Z\n```\n\n----------------------------------------\n\nTITLE: Querying Vault License Status with cURL\nDESCRIPTION: This shell command demonstrates how to make a GET request to the /sys/license/status endpoint using cURL to retrieve the current license information. The request requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/license.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/license/status\n```\n\n----------------------------------------\n\nTITLE: Reading Vault Database Configuration\nDESCRIPTION: This snippet demonstrates how to read the configuration of a database connection using `vault read database/config/my-db`.  This is useful for verifying the current version of the running plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read database/config/my-db\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Role in Vault\nDESCRIPTION: This command configures a role that maps a name in Vault to an SQL statement for creating database credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-mysql-database \\\n    creation_statements=\"CREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}';GRANT SELECT ON *.* TO '{{name}}'@'%';\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Listing All Plugins with GET Request in Vault\nDESCRIPTION: This snippet demonstrates how to list all plugins in the Vault catalog using a GET request to the /sys/plugins/catalog endpoint. The response includes plugins organized by type (auth, database, secret) with detailed information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-catalog.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/plugins/catalog\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"auth\": [\n            \"aws\",\n            \"azure\",\n            \"custom-auth-plugin\",\n            \"gcp\",\n            \"ldap\"\n        ],\n        \"database\": [\n            \"cassandra-database-plugin\",\n            \"mssql-database-plugin\",\n            \"mysql-database-plugin\",\n            \"postgresql-database-plugin\"\n        ],\n        \"detailed\": [\n            {\n                \"builtin\": true,\n                \"deprecation_status\": \"supported\",\n                \"name\": \"aws\",\n                \"type\": \"auth\",\n                \"version\": \"v1.12.0+builtin.vault\"\n            },\n            ...\n            {\n                \"builtin\": true,\n                \"deprecation_status\": \"supported\",\n                \"name\": \"cassandra-database-plugin\",\n                \"type\": \"database\",\n                \"version\": \"v1.12.0+builtin.vault\"\n            },\n            ...\n            {\n                \"builtin\": true,\n                \"deprecation_status\": \"supported\",\n                \"name\": \"aws\",\n                \"type\": \"secret\",\n                \"version\": \"v1.12.0+builtin.vault\"\n            },\n            ...\n            {\n                \"builtin\": false,\n                \"name\": \"example-plugin\",\n                \"type\": \"secret\",\n                \"oci_image\": \"example-secret-plugin-oci-image\",\n                \"runtime\": \"example-runtime\",\n                \"version\": \"v1.0.0\"\n            },\n            ...\n        ],\n        \"secret\": [\n            \"ad\",\n            \"aws\",\n            \"azure\",\n            \"gcp\",\n            \"transit\",\n            \"example-plugin\",\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Role via CLI\nDESCRIPTION: This CLI command creates or updates a RabbitMQ role by specifying the role name, tags, vhosts, and vhost topics.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write rabbitmq/roles/my-role \\\n    tags=\"tag1,tag2\" \\\n    vhosts=\"...\" \\\n    vhost_topics=\"...\"\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for GCP Service Account Key Generation\nDESCRIPTION: This JSON payload demonstrates the structure for specifying key generation parameters. It includes the key algorithm and key type for generating a GCP service account key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_algorithm\": \"KEY_ALG_RSA_2048\",\n  \"key_type\": \"TYPE_GOOGLE_CREDENTIALS_FILE\"\n}\n```\n\n----------------------------------------\n\nTITLE: Allow Specific Identity Entities or Groups (Sentinel)\nDESCRIPTION: This Sentinel policy allows access based on the identity entity name, ID, group names, or group IDs. It demonstrates how to access Identity properties to make access control decisions, using either names or IDs for reference.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/sentinel/examples.mdx#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmain = rule {\n    identity.entity.name is \"jeff\" or\n    identity.entity.id is \"fe2a5bfd-c483-9263-b0d4-f9d345efdf9f\" or\n    \"sysops\" in identity.groups.names or\n    \"14c0940a-5c07-4b97-81ec-0d423accb8e0\" in keys(identity.groups.by_id)\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a New Vault Plugin Version\nDESCRIPTION: This snippet demonstrates how to register a new version of a Vault plugin using the `vault plugin register` command.  It includes the SHA256 hash, command, and version for the new plugin. Crucially, the plugin type and name must match the existing plugin being upgraded.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin register \\\n        -sha256=<SHA256 Hex value of the plugin binary> \\\n        -command=my-secret-plugin-1.0.1 \\\n        -version=v1.0.1 \\\n        secret \\\n        my-secret-plugin\n    Success! Registered plugin: my-secret-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating a Symmetric Encryption/Decryption KMS Key\nDESCRIPTION: Command to create a KMS key specifically for symmetric encryption and decryption operations, specifying the key ring, purpose, and algorithm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/keys/my-key \\\n    key_ring=projects/.../my-keyring \\\n    purpose=encrypt_decrypt \\\n    algorithm=symmetric_encryption\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Token Renewal\nDESCRIPTION: This snippet shows how to make a CURL request to renew a token using its associated token. The request sends a POST to the appropriate Vault endpoint with a payload that specifies the data being sent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/renew\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Role Tags - JSON Response\nDESCRIPTION: Sample JSON response showing the created role tag value and key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"tag_value\": \"v1:09Vp0qGuyB8=:r=dev-role:p=default,dev-api:d=false:t=300h0m0s:uPLKCQxqsefRhrp1qmVa1wsQVUXXJG8UZP/pJIdVyOI=\",\n    \"tag_key\": \"VaultRole\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: CLI command to enable the database secrets engine in Vault at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redis.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\n```\n\n----------------------------------------\n\nTITLE: Re-Encrypting Existing Ciphertext - HCL\nDESCRIPTION: This HCL policy defines the capabilities for re-encrypting existing ciphertext using a specified key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_16\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/reencrypt/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Read RGP Policy Response\nDESCRIPTION: Sample JSON response containing RGP policy details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"webapp\",\n  \"policy\": \"rule main = {...\",\n  \"enforcement_level\": \"soft-mandatory\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an IAM Role in JSON\nDESCRIPTION: This JSON snippet defines an IAM role configuration for HashiCorp Vault. It includes parameters such as `project_id`, `policies`, and `max_jwt_exp`, which are essential for setting up an IAM role for JWT authentication. Prerequisites include Vault setup with GCP authentication configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"iam\",\n  \"project_id\": \"project-123456\",\n  \"policies\": [\"prod\"],\n  \"ttl\": \"30m\",\n  \"max_ttl\": \"24h\",\n  \"max_jwt_exp\": \"5m\",\n  \"bound_service_accounts\": [\"dev-1@project-123456.iam.gserviceaccount.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Debug Logs in Vault\nDESCRIPTION: This shell command streams debug-level logs directly to the terminal in Vault. This is useful for real-time monitoring of SAML-related issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault monitor -log-level=debug\n```\n\n----------------------------------------\n\nTITLE: Renewing Currently Authenticated Token - Shell\nDESCRIPTION: This snippet shows how to renew the token that is currently authenticated in HashiCorp Vault. By not providing a specific token ID, this command uses the token associated with the current session for renewal.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/renew.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token renew\n```\n\n----------------------------------------\n\nTITLE: Configuring PKI URLs for CRL and CA Certificate\nDESCRIPTION: Sets the URLs for the Certificate Revocation List (CRL) and the CA certificate in the PKI configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-root-ca.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki/config/urls issuing_certificates=\"http://vault.example.com:8200/v1/pki/ca\" crl_distribution_points=\"http://vault.example.com:8200/v1/pki/crl\"\n```\n\n----------------------------------------\n\nTITLE: Join Raft Cluster Sample Payload\nDESCRIPTION: JSON payload for joining a new server node to the Raft cluster, including leader API address and TLS certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"leader_api_addr\": \"https://127.0.0.1:8200\",\n  \"leader_ca_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDKTCCAhGgAwIBAgIUcd+Uyk1Tz+FhcbYP0zmynlkARoEwDQYJKoZIhvcNAQEL\\nBQAwFDESMBAGA1UEAxMJbG9jYWxob3N0MB4XDTE5MDYyNDIyMjgzNVoXDTE5MDYy\\nNzIyMjkwNVowADCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKdYr6rU\\n21vYf7q/cpPigtBchqHvGZvpbA9DZucuUdQ0g4oAXRyShQ8omzmZOmO4A1GI3gqz\\nHBePSYl+1IZCwgbPBk2CH7MhlMMINdwoEH6IxFgHNBkNK6GbwnGLyKL0Sym88ly1\\n+sPP6+llS8uWNKu5GcObHLysD3Ce6QTt3usDPiw0cxp/KL1EkMi2dT7PvxTsX137\\nsEsuQcylltGEtRb67xvFBP8XhQZAEGw+u4S3EmtwWMwZixB45WQhj2Ncz5U0+w8V\\ncp9DSqB1QheoGPBBI62jHle05kzG85ZKmLBgHE6HEGS8biIHpannM7dgI0cRH6i2\\nF69N0rcbzK+NInUCAwEAAaOBhjCBgzAOBgNVHQ8BAf8EBAMCA6gwHQYDVR0lBBYw\\nFAYIKwYBBQUHAwEGCCsGAQUFBwMCMB0GA1UdDgQWBBQelJT5fthHdbCyD5zaI4tw\\n7mfp8zAfBgNVHSMEGDAWgBSuG6hyoOWoiGvSA3kqwo9DirS+pzASBgNVHREBAf8E\\nCDAGhwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQCmetSH5w835RbbyHZD8e3ClHzi\\n210SrvzWkx3N0JcBOjs47jlLuqVTl0HRr2xMoIkErFbhPDBXARYV8eezhQ6G5M60\\n8AwVsG56rCa1l0weK2JfnEWgkwXZ/zbpZ2yNkWatWNSHdlJwGp99JTSriQYNOnMG\\nWvBDA8ukoOkIJd/a8+aXZBdUiAcFvlLWmX73pYGTlnQDiIqJvhrlkgCKPvzZqvV+\\njtz7kCt9EfT6sN6Xcny7GusRBSs+XfEe8u10+mbud+ufE/QSJ2D3tTYrS6eGqpVD\\nrezD8jS9PfZgQfHXVaphMADyw4flaSVxfJ/ZRFxXql3oJSuj02+VX6QsXex+\\n-----END CERTIFICATE-----\",\n  \"leader_client_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIDNTCCAh2gAwIBAgIULkPFG+qu7tGv21Plc1sg4eGbMPkwDQYJKoZIhvcNAQEL\\nBQAwFDESMBAGA1UEAxMJbG9jYWxob3N0MB4XDTE5MDYyNDIyMjgwNVoXDTI5MDYy\\nMTIyMjgzNVowFDESMBAGA1UEAxMJbG9jYWxob3N0MIIBIjANBgkqhkiG9w0BAQEF\\nAAOCAQ8AMIIBCgKCAQEAwszD+A5vWD8S1N632ElHA5Px2dk97wJBKNYc/7RPNptn\\n+EOmMTXPfuA3LB92FoSMCR7ye3wvSTzyK9nqafS7U2tlOF4PJrJoNZyzrVwBVLXg\\n7Pd8qQxnxbonc3bscWZuEfbFsugkPHgBtnSkyCffXKhhwM5LbJqmK5cfJRZZ0eRy\\nwmOCQCJ8ZmN2KfjHiGSEw9v19CNtvFNLyfiTZZLO9M5n4dgainZZCs+vdKD7tSJf\\nycwWiZ4ezOwLMIgxdbLYKVglbZsPcMVVPLTskmY8WiHUM6sy3HAbFQn20Rj7JGE6\\nldR3NX80YtCMt8/d+xzBfxu4x8juxHCgZFGt3nUS0wIDAQABo38wfTAOBgNVHQ8B\\nAf8EBAMCAQYwDwYDVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUrhuocqDlqIhr0gN5\\nKsKPQ4q0vqcwHwYDVR0jBBgwFoAUrhuocqDlqIhr0gN5KsKPQ4q0vqcwGgYDVR0R\\nBBMwEYIJbG9jYWxob3N0hwR/AAABMA0GCSqGSIb3DQEBCwUAA4IBAQBRno9NOaat\\n8g1ma/6OxP1JUt1VRao4+t2GQTCJ697d2SmpHr8CYanMPog+QhDj/lderA/oS0V3\\n2jruH9CyH0smFMIsLBZpnRIwdhTISbIXdU3Uvcd6nne/f7LiUUmqf8YS9SHxWPFq\\nI72QvtPrsjYKCZwJsHZe071lYScjrjGnlUhhbrug2g6/ZMHJ7mndGE022zMn/XD/\\njrrKE6fCDCjJ4PRrta7+G7BvsFHqMSQ+2/947TGohxW69cbNyDeiQVDQ5mpJUy2b\\nnOCVVnq0nafSuvBTHCCLxjd7f+9TiB/B3qT8GA9V6LANDSdQ15MRIhpup/yosmqX\\nl5goCY/j3bDh\\n-----END CERTIFICATE-----\",\n  \"leader_client_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpAIBAAKCAQEAp1ivqtTbW9h/ur9yk+KC0FyGoe8Zm+lsD0Nm5y5R1DSDigBd\\nHJKFDyibOZk6Y7gDUYjeCrMcF49JiX7UhkLCBs8GTYIfsyGUwwg13CgQfojEWAc0\\nGQ0roZvCcYvIovRLKbzyXLX6w8/r6WVLy5Y0q7kZw5scvKwPcJ7pBO3e6wM+LDRz\\nGn8ovUSQyLZ1Ps+/FOxfXfuwSy5BzKWW0YS1FvrvG8UE/xeFBkAQbD67hLcSa3BY\\nzBmLEHjlZCGPY1zPlTT7DxVyn0NKoHVCF6gY8EEjraMeV7TmTMbzlkqYsGAcTocQ\\nZLxuIgelqeczt2AjRxEfqLYXr03StxvMr40idQIDAQABAoIBAHCOhhkw8hnklITX\\nIAm34KSklylz2JW1eqkJfL0huogwigjYFciSBE0d0sn69fr8Wb8Nf8tSjSKLjbqd\\nQ/TKEhbiSCr5yriBbb2AWDmr+OwisW1D6xaudRpN2Yrlqh1wkt2P6LPS8sehodtp\\n9oEIloSqC1o1ii6czAXD3JckJzuJ66yoVyCo2oVC3NETujjJRhdRcNY0dYUGx47M\\n+hQo7b4s79wlMFmccrgyJcKI7Ra3DtMrBIaVXm4WcjX2x4DduZX6L4mfG83uLWng\\nhbvcEPKGamUErjPGYixKE5XOwgJT6Nzq/ZZJZpok6DbHBCtqvwwByWlfLzh8lc4o\\nz+Pl5EECgYEA3pJXRM+SdVUCnWIpMFOAiNstOwz3nm0/c8GDdYYNq0ere1tKCVV0\\nii+ujMQY8vEdRrp7fbqJEPJANyI6sM4Jc2nxMveFuBoEsEClZuE4KBFquW8CQU4R\\nGNkzKF1W0GaTI5O4QDUag+lFG6TPCwZiejTIkt65o5bnSzGLgdC546sCgYEAwHr9\\nlq9HytWkV9OLz0zbcAUEIrFAljnC32Mybsj8LzdSKIZ3wErf9Txh8zqZqMyhedxL\\nOn17cpJAq5Vi71uXOaxnhkf7TPuRs8nBRRJfgyNHPXuXLkuWeuvXEe/PIC+nvOIX\\nas0Ab0Pvx0fRGl4EkZ2pV9oDAEUezbVVZCoO8l8CgYEAp4p3YNfzwpj0d+5tXPBu\\ngBakzJ+tQjewnP1dbLk1TuqLXjdQ2wfVyzOrbFEtCquPwy8bSICDLxt8VURR88eU\\n+6kTJK+InBYR029GUtRUhmzd7qpugyQ14IOXa9ofQI8GUbCf8M1IoWWWXQHJzN3I\\ngX98QHqiOU+d2k94WYb6dzMCgYA3E7p2oMdZShLRss3hzqtH/Zd2WeQSWIrjox3u\\nR4Kp/Bl9UST5GDPHl7SrhcwsWgmmthusq/VkDmeE8aUyurGmJigla3mESMQjfwrX\\nue8sti6PcEsNS0HPAKc1EbriCeDkkomC3RBPxk/ZZTp3YgnKpSOs6MxNCnpLAKVj\\nmQlX3wKBgQCFYyYJdCKMoaoMrNjMM34sAfTqmZT4Hbxg9KM4OMDSxyvIi0ZaVcnB\\nkzssvt0FOMucp4o7h8Iujt8xsgnBHwg81IV7WOw+ZwpUDAzgVc7+kCU6CLd2Q40j\\n5uFnuRgiWeGm1aT4arNLWlJrDLSGbyrf59SlGJV1hmu/7SMaYIZHSQ==\\n-----END RSA PRIVATE KEY-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TOTP MFA Method in Vault\nDESCRIPTION: This JSON payload configures a TOTP MFA method with the issuer set to 'vault'. It's used in a POST request to create or update a TOTP method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer\": \"vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Field from KV Secrets Engine in Vault (Shell)\nDESCRIPTION: This snippet demonstrates how to retrieve a specific field from a secret in Vault's KV secrets engine. It uses the '-field' option to return only the value of the 'passcode' field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/get.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get -mount=secret -field=passcode creds\nmy-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Sample Shell Request for Reading Cluster Configuration\nDESCRIPTION: cURL command for retrieving the current cluster configuration from the PKI secrets engine. This returns the mount path URLs used for this PKI mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_100\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/cluster\n```\n\n----------------------------------------\n\nTITLE: Patch Secret Payload\nDESCRIPTION: This JSON payload is used to patch an existing secret using JSON merge patch. It includes optional settings like 'cas' for check-and-set operations and the 'data' map containing the partial update.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"options\": {\n    \"cas\": 1\n  },\n  \"data\": {\n    \"foo\": \"a\",\n    \"bar\": {\n      \"baz\": \"b\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Auth Method Tuning in Vault\nDESCRIPTION: This snippet demonstrates how to read the tuning configuration of an auth method at a given path using a GET request to the `/sys/auth/:path/tune` endpoint. It requires sudo capability and returns the current tuning parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/auth.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/auth/my-auth/tune\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default_lease_ttl\": 2764800,\n  \"description\": \"\",\n  \"force_no_cache\": false,\n  \"max_lease_ttl\": 2764800,\n  \"token_type\": \"default-service\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Identity Access List Tidy Request\nDESCRIPTION: cURL command to set identity access list tidying configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/config/tidy/identity-accesslist\n```\n\n----------------------------------------\n\nTITLE: OIDC Scope: List Response\nDESCRIPTION: This is a sample JSON response from listing OIDC scopes. It includes a list of keys, where each key represents the name of a configured scope.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n      \"keys\":[\n         \"test-scope\"\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Azure Authentication in Go\nDESCRIPTION: Go implementation demonstrating how to authenticate with Vault using Azure credentials and retrieve a secret from KV v2 store. Uses the official Vault API client and Azure auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\n\tvault \"github.com/hashicorp/vault/api\"\n\tauth \"github.com/hashicorp/vault/api/auth/azure\"\n)\n\n// Fetches a key-value secret (kv-v2) after authenticating to Vault via Azure authentication.\n// This example assumes you have a configured Azure AD Application.\nfunc getSecretWithAzureAuth() (string, error) {\n\tconfig := vault.DefaultConfig() // modify for more granular configuration\n\n\tclient, err := vault.NewClient(config)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize Vault client: %w\", err)\n\t}\n\n\tazureAuth, err := auth.NewAzureAuth(\n\t\t\"dev-role-azure\",\n\t)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize Azure auth method: %w\", err)\n\t}\n\n\tauthInfo, err := client.Auth().Login(context.Background(), azureAuth)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to login to Azure auth method: %w\", err)\n\t}\n\tif authInfo == nil {\n\t\treturn \"\", fmt.Errorf(\"no auth info was returned after login\")\n\t}\n\n\t// get secret from the default mount path for KV v2 in dev mode, \"secret\"\n\tsecret, err := client.KVv2(\"secret\").Get(context.Background(), \"creds\")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read secret: %w\", err)\n\t}\n\n\t// data map can contain more than one key-value pair,\n\t// in this case we're just grabbing one of them\n\tvalue, ok := secret.Data[\"password\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"value type assertion failed: %T %#v\", secret.Data[\"password\"], secret.Data[\"password\"])\n\t}\n\n\treturn value, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HANA Database Connection in Vault\nDESCRIPTION: Command to configure Vault with HANA database plugin and connection details including URL, allowed roles, and credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/hanadb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/config/my-hana-database \\\n    plugin_name=hana-database-plugin \\\n    connection_url=\"hdb://{{username}}:{{password}}@localhost:1433\" \\\n    allowed_roles=\"my-role\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Auth Login Response\nDESCRIPTION: Sample JSON response after successful authentication using the GitHub auth method, containing the Vault client token, accessor, policies, and metadata about the GitHub user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"warnings\": null,\n  \"auth\": {\n    \"client_token\": \"64d2a8f2-2a2f-5688-102b-e6088b76e344\",\n    \"accessor\": \"18bb8f89-826a-56ee-c65b-1736dc5ea27d\",\n    \"policies\": [\"default\"],\n    \"metadata\": {\n      \"username\": \"fred\",\n      \"org\": \"acme-org\"\n    },\n  },\n  \"lease_duration\": 7200,\n  \"renewable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: IAM Policy Configuration for Service Account\nDESCRIPTION: Sample Google Cloud IAM policy that grants storage.objectAdmin role to a service account for managing Vault data in GCS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-storage.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bindings\": [\n    {\n      \"role\": \"roles/storage.objectAdmin\",\n      \"members\": [\"serviceAccount:my-vault@gserviceaccount.com\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Performance Secondary\nDESCRIPTION: JSON payload and cURL command to enable performance replication on a secondary node using an activation token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"...\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/secondary/enable\n```\n\n----------------------------------------\n\nTITLE: Creating an Association for Azure Key Vault Sync in Vault CLI\nDESCRIPTION: This command creates an association between the Azure Key Vault destination and a secret in Vault for synchronization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/azurekv.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/azure-kv/my-azure-1/associations/set \\\n    mount='my-kv' \\\n    secret_name='my-secret'\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Vault's /sys/leader Endpoint\nDESCRIPTION: This JSON object represents a typical response from the `/sys/leader` endpoint. It includes information such as whether HA is enabled, if the responding instance is the leader, the active time, leader addresses, and various Raft-related indices.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/leader.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ha_enabled\": true,\n  \"is_self\": false,\n  \"active_time\": \"2024-01-09T00:11:46.439409062Z\",\n  \"leader_address\": \"https://127.0.0.1:8200/\",\n  \"leader_cluster_address\": \"https://127.0.0.1:8201/\",\n  \"performance_standby\": false,\n  \"performance_standby_last_remote_wal\": 0,\n  \"last_wal\": 0,\n  \"raft_committed_index\": 0,\n  \"raft_applied_index\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Role List Response in JSON Format\nDESCRIPTION: Example JSON response showing a list of available SSH roles with their names and role types. The response includes the keys array with role names and key_info with additional role information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"dev\", \"prod\"],\n    \"key_info\": {\n      \"dev\": {\n        \"key_type\": \"ca\"\n      }\n    }\n  },\n  \"lease_duration\": 2764800,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Duo MFA Methods\nDESCRIPTION: Endpoint for retrieving a list of all Duo MFA method IDs visible in the current and parent namespaces\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/duo.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/duo\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Path for PKI in Vault\nDESCRIPTION: Sets the cluster path configuration for the PKI secrets engine in Vault. This is necessary to resolve ACME feature errors related to cluster 'path' field configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/troubleshooting-acme.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write pki/config/cluster path=https://cluster-b.vault.example.com/v1/pki\n```\n\n----------------------------------------\n\nTITLE: Enabling the Vault Certificate Auth Method\nDESCRIPTION: This command enables the 'cert' authentication method in Vault.  This is a prerequisite for configuring and using the certificate authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cert.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth enable cert\n```\n\n----------------------------------------\n\nTITLE: Generate Random Bytes Response\nDESCRIPTION: Sample JSON response containing the generated random bytes in base64 format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/tools.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"random_bytes\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Request Logging in Vault HCL Configuration\nDESCRIPTION: Configuration example showing how to enable request logging in Vault by setting log_requests_level and log_level to debug. This allows completed requests to be logged at the specified level.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/log-requests-level.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlog_requests_level = \"debug\"\nlog_level = \"debug\"\n\nlistener \"tcp\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Consul ACL Policy (Version 1.4+)\nDESCRIPTION: Updated ACL policy configuration for Consul 1.4+ with revised ACL language.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_prefix\": {\n    \"vault/\": {\n      \"policy\": \"write\"\n    }\n  },\n  \"service\": {\n    \"vault\": {\n      \"policy\": \"write\"\n    }\n  },\n  \"agent_prefix\": {\n    \"\": {\n      \"policy\": \"read\"\n    }\n  },\n  \"session_prefix\": {\n    \"\": {\n      \"policy\": \"write\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading a Transform Role\nDESCRIPTION: Example JSON response when reading a role from the Transform secrets engine, showing the transformations associated with the role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"transformations\": [\"creditcard-fpe\", \"creditcard-masking\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Batch HMAC Response Format\nDESCRIPTION: JSON response for batch HMAC operations showing successful results and error handling for invalid inputs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"batch_results\": [\n      {\n        \"hmac\": \"vault:v1:1jFhRYWHiddSKgEFyVRpX8ieX7UU+748NBwHKecXE3hnGBoAxrfgoD5U0yAvji7b5X6V1fP\"\n      },\n      {\n        \"hmac\": \"vault:v1:1jFhRYWHiddSKgEFyVRpX8ieX7UU+748NBwHKecXE3hnGBoAxrfgoD5U0yAvji7b5X6V1fP\"\n      },\n      {\n        \"error\": \"missing input for HMAC\"\n      },\n      {\n        \"hmac\": \"vault:v1:/wsSP6iQ9ECO9RRkefKLXey9sDntzSjoiW0vBrWfUsYB0ISroyC6plUt/jN7gcOv9O+Ecow\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Path-Specific Help in Vault\nDESCRIPTION: Example demonstrating how to get detailed help for a specific secret path using the path-help command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/path-help.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault path-help secret/password\nRequest:        password\nMatching Route: ^.*$\n\nPass-through secret storage to the storage backend, allowing you to\nread/write arbitrary data into secret storage.\n\n## PARAMETERS\n\n    lease (string)\n        Lease time for this key when read. Ex: 1h\n\n## DESCRIPTION\n\nThe pass-through backend reads and writes arbitrary data into secret storage,\nencrypting it along the way.\n\nA lease can be specified when writing with the \"lease\" field. If given, then\nwhen the secret is read, Vault will report a lease with that duration. It\nis expected that the consumer of this backend properly writes renewed keys\nbefore the lease is up. In addition, revocation must be handled by the\nuser of this backend.\n```\n\n----------------------------------------\n\nTITLE: Fetching Token Metadata in Vault\nDESCRIPTION: This command looks up the metadata of a specific token, detailing its properties like entity ID, creation time, and associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault token lookup 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Secrets Engine Access (cURL)\nDESCRIPTION: cURL command to send a POST request to configure the Azure secrets engine with the provided JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/azure/config\n```\n\n----------------------------------------\n\nTITLE: Listing Templates with cURL in Vault Transform API\nDESCRIPTION: Makes a LIST request to retrieve all templates from the Vault Transform Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_32\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/transform/template\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Metadata Using Shell\nDESCRIPTION: This shell command uses `curl` to send a POST request to retrieve metadata associated with a token in Vault. It specifies the role and transformation as part of the payload, and includes the `X-Vault-Token` header for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_72\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/encode/example-role\n```\n\n----------------------------------------\n\nTITLE: Configuring EST in Vault's PKI Secrets Engine\nDESCRIPTION: This shell command sets up the EST configuration in Vault's PKI secrets engine. It enables EST, sets the default mount, configures path policies for different labels, and specifies authentication methods with their respective accessors.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/est.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvault write pki/config/est -<<EOC\n{\n  \"enabled\": true,\n  \"default_mount\": true,\n  \"default_path_policy\": \"sign-verbatim\",\n  \"label_to_path_policy\": {\n    \"test-label\": \"role:est-clients\",\n    \"sign-all\": \"sign-verbatim\"\n  },\n  \"authenticators\": {\n    \"cert\": {\n      \"accessor\": \"auth_cert_4088ac2d\"\n    },\n    \"userpass\": {\n      \"accessor\": \"auth_userpass_e2f4f6d5\"\n    }\n  }\n}\nEOC\n```\n\n----------------------------------------\n\nTITLE: Setting Default PKI Key Configuration in Vault\nDESCRIPTION: JSON payload for setting the default key in the PKI secrets engine configuration. This defines which key (identified by UUID) will be used by default for PKI operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_97\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": \"baadd98d-ec5a-66ac-06b7-dfc91c02c9cf\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Admin Role with Federation Token (Shell)\nDESCRIPTION: This command creates an ec2_admin role in Vault using the federation_token credential type. It references an external policy file for permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write aws/roles/ec2_admin \\\n    credential_type=federation_token \\\n    policy_document=@policy.json\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Settings with cURL in Vault API\nDESCRIPTION: This request sets CORS configuration on a Vault server using POST. It submits a JSON payload defining allowed origins and headers, requiring an authentication token with sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-cors.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/config/cors\n```\n\n----------------------------------------\n\nTITLE: Vault Recovery Key Verification Request\nDESCRIPTION: This shell command demonstrates how to send a POST request to the Vault server to verify a recovery key. It includes the Vault token in the header and the JSON payload from the payload.json file in the request body.  The request is sent to the `/v1/sys/rekey-recovery-key/verify` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/rekey-recovery-key/verify\n```\n\n----------------------------------------\n\nTITLE: Initializing MSSQL Storage Backend in Vault (HCL)\nDESCRIPTION: This snippet demonstrates the basic configuration for initializing the MSSQL storage backend in Vault. It specifies the fundamental parameters required to connect to a Microsoft SQL Server database, including the server address, port, credentials, and logging settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/mssql.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"mssql\" {\n  server = \"localhost\"\n  port = 1433\n  username = \"user1234\"\n  password = \"secret123!\"\n  database = \"vault\"\n  table = \"vault\"\n  appname = \"vault\"\n  schema = \"dbo\"\n  connectionTimeout = 30\n  logLevel = 0\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Plaintext Directly from Decryption\nDESCRIPTION: Command to extract only the plaintext field when decrypting data, useful for scripting purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write -field=plaintext gcpkms/decrypt/my-key ciphertext=CiQAuMv0lTiKjrF43Lgr4...\nhello world\n```\n\n----------------------------------------\n\nTITLE: Reloading Vault License Configuration\nDESCRIPTION: These bash commands demonstrate two methods to reload the Vault license configuration: using the sys/config/reload/license API endpoint or sending an HUP signal to the Vault process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-0 -- vault write -f sys/config/reload/license\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-0 -- pkill -HUP vault\n```\n\n----------------------------------------\n\nTITLE: Debugging SAML User Context and Role Validation in Vault\nDESCRIPTION: A JSON debug log showing the mismatch between the Vault role configuration and the actual SAML response attributes. The problem is that the Vault role expects 'groups' attribute but the SAML response uses 'http://schemas.xmlsoap.org/claims/Group'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[DEBUG] auth.saml.auth_saml_1d2227e7: validating user context for role: api=callback role_name=default-saml\nrole=\"{\n  \"token_bound_cidrs\":null,\n  \"token_explicit_max_ttl\":0,\n  \"token_max_ttl\":0,\n  \"token_no_default_policy\":false,\n  \"token_num_uses\":0,\n  \"token_period\":0,\n  \"token_policies\":[\"default\"],\n  \"token_type\":0,\n  \"token_ttl\":0,\n  \"BoundSubjects\":[\"*@example.com\",\"*@ext.example.com\"],\n  \"BoundSubjectsType\":\"glob\",\n  \"BoundAttributes\":{\"http://schemas.xmlsoap.org/claims/Group\":[\"VaultAdmin\",\"VaultUser\"]},\n  \"BoundAttributesType\":\"string\",\n  \"GroupsAttribute\":\"groups\"\n  }\"\nuser context=\"{\n  \"attributes\":\n  {\n    \"http://schemas.xmlsoap.org/claims/Group\":[\"Domain Users\",\"VaultAdmin\"],\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\":[\"rs@example.com\"]\n  },\n  \"subject\":\"rs@example.com\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Setting Log Verbosity Level for a Single Logger (JSON Payload)\nDESCRIPTION: JSON payload for setting the verbosity level for a specific named logger. This example sets the log level to 'debug' for the specified logger.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"debug\",\n}\n```\n\n----------------------------------------\n\nTITLE: Required Oracle Database Privileges\nDESCRIPTION: SQL statements showing the minimum required privileges that need to be granted to the Vault user for basic functionality of the Oracle database plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nGRANT CREATE USER to vault WITH ADMIN OPTION;\nGRANT ALTER USER to vault WITH ADMIN OPTION;\nGRANT DROP USER to vault WITH ADMIN OPTION;\nGRANT CONNECT to vault WITH ADMIN OPTION;\nGRANT CREATE SESSION to vault WITH ADMIN OPTION;\nGRANT SELECT on gv_$session to vault;\nGRANT SELECT on v_$sql to vault;\nGRANT ALTER SYSTEM to vault WITH ADMIN OPTION;\n```\n\n----------------------------------------\n\nTITLE: List RGP Policies Request\nDESCRIPTION: Lists all configured Role Governing Policies\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -X LIST --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/rgp\n```\n\n----------------------------------------\n\nTITLE: Configuring HA Vault with Raft using YAML\nDESCRIPTION: This YAML configuration enables HA Vault with integrated Raft storage. It can be used as a values file for Helm or incorporated into a Terraform configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  ha:\n    enabled: true\n    raft:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultDynamicSecret with Local Transformation\nDESCRIPTION: YAML configuration for a VaultDynamicSecret that syncs Postgres database credentials from Vault to a Kubernetes secret. It includes local transformation rules to create a custom URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/secret-transformation.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  namespace: example-ns\n  name: example-vds\n  annotations:\n    myapp.config/postgres-host: postgres-postgresql.postgres.svc.cluster.local:5432\nspec:\n  destination:\n    create: true\n    name: app-secret\n    transformation:\n      excludes:\n       - .*\n      templates:\n        url:\n          text: |\n            {{- $host := get .Annotations \"myapp.config/postgres-host\" -}}\n            {{- printf \"postgresql://%s:%s@%s/postgres?sslmode=disable\" (get .Secrets \"username\") (get .Secrets \"password\") $host -}}\n  path: creds/dev-postgres\n```\n\n----------------------------------------\n\nTITLE: Generating Cassandra Credentials Sample Response\nDESCRIPTION: JSON response containing the dynamically generated Cassandra username and password that can be used to authenticate with Cassandra.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"username\": \"vault-root-1430158508-126\",\n    \"password\": \"132ae3ef-5a64-7499-351e-bfe59f3a2a21\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SSH CA Public Key in Shell\nDESCRIPTION: Retrieve the SSH CA public key from Vault using both curl and Vault CLI. This key is used to verify the authenticity of the host's SSH certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl http://127.0.0.1:8200/v1/ssh-host-signer/public_key\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read -field=public_key ssh-host-signer/config/ca\n```\n\n----------------------------------------\n\nTITLE: Logging In with a Token in Vault\nDESCRIPTION: This command logs in to Vault using the specified token. After logging in, subsequent Vault commands will be authenticated with this token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ vault login 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Plugin Reload Request\nDESCRIPTION: JSON response returned after initiating a plugin reload operation. The response includes a unique 'reload_id' that can be used to track the reload operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-reload.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"reload_id\": \"bdddb8df-ccb6-1b09-670d-efa9d3f2c11b\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Labels to Server Pods\nDESCRIPTION: Demonstrates how to add custom labels to Vault server pods for identification and organization\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\nextraLabels:\n  'sample/label1': 'foo'\n  'sample/label2': 'bar'\n```\n\n----------------------------------------\n\nTITLE: Setting TTL and Max TTL for Vault Role\nDESCRIPTION: This snippet sets the time-to-live (TTL) and maximum time-to-live (Max TTL) for a Programmatic API Key role within Vault. This ensures that keys are automatically revoked after a certain period, enhancing security.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/mongodbatlas.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write mongodbatlas/roles/test \\\n    project_id=5cf5a45a9ccf6400e60981b6 \\\n    roles=GROUP_DATA_ACCESS_READ_ONLY \\\n    ttl=2h \\\n    max_ttl=5h\n```\n\n----------------------------------------\n\nTITLE: Reading Audited Request Headers in Vault\nDESCRIPTION: A shell request to retrieve all request headers configured for auditing in Vault. Requires a token with sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-auditing.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/auditing/request-headers\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager Sync Destination in Vault\nDESCRIPTION: This command creates a sync destination in Vault using GCP Service Account credentials and specifies replication locations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/gcpsm.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/gcp-sm/my-dest \\\n    credentials='@path/to/credentials.json'\n    replication_locations='us-east1,us-west1'\n```\n\n----------------------------------------\n\nTITLE: Sample Okta Login Response with Token\nDESCRIPTION: JSON response showing a successful authentication via the Okta auth method, including client token and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"warnings\": null,\n  \"auth\": {\n    \"client_token\": \"64d2a8f2-2a2f-5688-102b-e6088b76e344\",\n    \"accessor\": \"18bb8f89-826a-56ee-c65b-1736dc5ea27d\",\n    \"policies\": [\"default\"],\n    \"metadata\": {\n      \"username\": \"fred\",\n      \"policies\": \"default\"\n    },\n    \"lease_duration\": 7200,\n    \"renewable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MFA Validation Payload with Method Name\nDESCRIPTION: Example JSON payload for MFA validation using a method name as the identifier, introduced in Vault 1.13.0. Shows the optional 'passcode=' prefix format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/validate.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mfa_request_id\": \"5879c74a-1418-1948-7be9-97b209d693a7\",\n  \"mfa_payload\": {\n      \"sample_mfa_method_name\": [\"passcode=910201\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Managed Key - Shell Request\nDESCRIPTION: HTTP DELETE request to remove a managed key from Vault. The key must not be listed in any mount point's allowed_managed_keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/managed-keys/pkcs11/hsm-key1\n```\n\n----------------------------------------\n\nTITLE: Enabling Kerberos Authentication in Vault\nDESCRIPTION: Command to enable the Kerberos authentication method in Vault with required header configurations for the authentication process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kerberos.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth enable \\\n    -passthrough-request-headers=Authorization \\\n    -allowed-response-headers=www-authenticate \\\n    kerberos\n```\n\n----------------------------------------\n\nTITLE: Updating an Existing Transform Key with a New Version\nDESCRIPTION: Example of using the 'transform import-version' command to update an existing key with new key material. This imports a new version of key material from the file 'test-key-updated' for an existing key called 'test-key'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/transform/import.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault transform import-version transform/keys/test-key @test-key-updated\nRetrieving transform wrapping key.\nWrapping source key with ephemeral key.\nEncrypting ephemeral key with transform wrapping key.\nSubmitting wrapped key to Vault transform.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: AliCloud Role POST Payload for Policy-Based Configuration\nDESCRIPTION: JSON payload for creating a role with both remote policies (referencing existing AliCloud policies) and inline policies (directly defined JSON policies).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"remote_policies\": [\n    \"name:AliyunOSSReadOnlyAccess,type:System\",\n    \"name:AliyunRDSReadOnlyAccess,type:System\"\n  ],\n  \"inline_policies\": \"[{\\\"Statement\\\": [{\\\"Action\\\": [\\\"ram:Get*\\\",\\\"ram:List*\\\"],\\\"Effect\\\": \\\"Allow\\\",\\\"Resource\\\": \\\"*\\\"}],\\\"Version\\\": \\\"1\\\"}]\"\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a New Version of an Existing Transit Key\nDESCRIPTION: This command imports updated key material as a new version of an existing key named 'test-key' in the Transit secret engine. It reads the updated key material from a file named 'test-key-updated'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/transit/import.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault transit import-version transit/keys/test-key @test-key-updated\nRetrieving transit wrapping key.\nWrapping source key with ephemeral key.\nEncrypting ephemeral key with transit wrapping key.\nSubmitting wrapped key to Vault transit.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Create Custom AppRole Secret ID Response\nDESCRIPTION: This JSON response shows the data returned after successfully creating a custom secret ID. It includes the secret ID, its accessor, TTL, and number of uses.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"secret_id\": \"testsecretid\",\n    \"secret_id_accessor\": \"84896a0c-1347-aa90-a4f6-aca8b7558780\",\n    \"secret_id_ttl\": 600,\n    \"secret_id_num_uses\": 50\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with RADIUS via API in Vault\nDESCRIPTION: This curl command shows how to authenticate with Vault using the RADIUS auth method through the API. It sends a POST request with the password to the RADIUS login endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/radius.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"password\": \"...\"}' \\\n    http://127.0.0.1:8200/v1/auth/radius/login/sethvargo\n```\n\n----------------------------------------\n\nTITLE: Configuring TNS Names for Oracle in Vault\nDESCRIPTION: The TNS names configuration is detailed using a `tnsnames.ora` file, which provides Oracle connection strings for HashiCorp Vault. Ensure the file is available on each Vault server. TNS_ADMIN must point to the directory hosting the `tnsnames.ora` file, and aliases are used in the database configuration URLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\nAWSEAST=\n(DESCRIPTION =\n  (ADDRESS = (PROTOCOL = TCPS)(HOST = hashicorp.us-east-1.rds.amazonaws.com)(PORT = 1523))\n  (CONNECT_DATA =\n    (SERVER = DEDICATED)\n    (SID = ORCL)\n  )\n  (SECURITY =\n      (SSL_SERVER_CERT_DN = \"CN=hashicorp.rds.amazonaws.com/OU=RDS/O=Amazon.com/L=Seattle/ST=Washington/C=US\")\n      (MY_WALLET_DIRECTORY = /etc/oracle/wallet/east)\n  )\n)\n\nAWSWEST=\n(DESCRIPTION =\n  (ADDRESS = (PROTOCOL = TCPS)(HOST = hashicorp.us-west-1.rds.amazonaws.com)(PORT = 1523))\n  (CONNECT_DATA =\n    (SERVER = DEDICATED)\n    (SID = ORCL)\n  )\n  (SECURITY =\n      (SSL_SERVER_CERT_DN = \"CN=hashicorp.rds.amazonaws.com/OU=RDS/O=Amazon.com/L=Seattle/ST=Washington/C=US\")\n      (MY_WALLET_DIRECTORY = /etc/oracle/wallet/west)\n  )\n)\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nTNS_ADMIN=/path/to/tnsnames/directory\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nvault write database/config/oracle-east \\\n    plugin_name=vault-plugin-database-oracle \\\n    connection_url=\"{{username}}/{{password}}@AWSEAST\" \\\n    allowed_roles=\"my-role\" \\\n    username=\"VAULT_SUPER_USER\" \\\n    password=\"myreallysecurepassword\"\n\nvault write database/config/oracle-west \\\n    plugin_name=vault-plugin-database-oracle \\\n    connection_url=\"{{username}}/{{password}}@AWSWEST\" \\\n    allowed_roles=\"my-role\" \\\n    username=\"VAULT_SUPER_USER\" \\\n    password=\"myreallysecurepassword\"\n```\n\n----------------------------------------\n\nTITLE: Downloading and Installing Venafi Plugin - Shell Script\nDESCRIPTION: This snippet downloads the Venafi PKI backend plugin, unzips it, and moves it to the specified plugin directory, ensuring that Vault can use it for secrets management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ wget https://github.com/Venafi/vault-pki-backend-venafi/releases/download/v0.12.0/venafi-pki-backend_v0.12.0_darwin.zip\n$ unzip venafi-pki-backend_v0.12.0_darwin.zip\n$ mv venafi-pki-backend /etc/vault/vault_plugins\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Accessor Token Renewal\nDESCRIPTION: This snippet demonstrates a CURL command that renews a token using its accessor, including the necessary HTTP headers and data payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/renew-accessor\n```\n\n----------------------------------------\n\nTITLE: Creating a KVv2 Secret in Vault\nDESCRIPTION: This command creates a new secret in the KVv2 secrets engine. The secret will be synced with the Vercel project.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/vercelproject.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -mount='my-kv' my-secret key1='val1'\n```\n\n----------------------------------------\n\nTITLE: Starting Rekey Operation - JSON Payload\nDESCRIPTION: Example payload for initiating a new rekey operation with custom share and threshold settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_shares\": 10,\n  \"secret_threshold\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Key Pair Role\nDESCRIPTION: Configuration of a dynamic role that creates Snowflake users with RSA key pair credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/snowflake.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-keypair-role \\\n    db_name=my-snowflake-database \\\n    creation_statements=\"CREATE USER {{name}} RSA_PUBLIC_KEY='{{public_key}}' \\\n      DAYS_TO_EXPIRY = {{expiration}} DEFAULT_ROLE=myrole; \\\n      GRANT ROLE myrole TO USER {{name}};\" \\\n    credential_type=\"rsa_private_key\" \\\n    credential_config=key_bits=2048 \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Auto-auth Parameters\nDESCRIPTION: Configuration options for Kubernetes auto-authentication method in Vault. Specifies required role parameter and optional token_path for custom JWT token location.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrole: (string: required) # The role to authenticate against on Vault\ntoken_path: (string: optional) # The file path to a custom JWT token\n```\n\n----------------------------------------\n\nTITLE: Response Format for Audited Request Headers in Vault\nDESCRIPTION: JSON response showing the headers configured for auditing, including whether each header is configured for HMAC protection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-auditing.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"headers\": {\n    \"X-Forwarded-For\": {\n      \"hmac\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Intermediate CA Certificate Signing Request in Vault\nDESCRIPTION: Creates a Certificate Signing Request (CSR) for the intermediate CA with a common name and TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki_int/intermediate/generate/internal common_name=\"myvault.com Intermediate Authority\" ttl=43800h\n```\n\n----------------------------------------\n\nTITLE: Generating PKI Certificate Bundle with Consul Template\nDESCRIPTION: Template example that issues a PKI certificate and creates a bundle with key, certificate, and CA from Vault's PKI secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{ with pkiCert \"pki/issue/my-domain-dot-com\" \"common_name=foo.example.com\" }}\n{{ .Data.Key }}\n{{ .Data.Cert }}\n{{ .Data.CA }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Root Credential Rotation Schedule with Window\nDESCRIPTION: This snippet demonstrates configuring a `rotation_window` along with the `rotation_schedule` for root credential rotation in the GCP secret engine. Vault will attempt the rotation within the specified window and stop retrying after the window expires.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write gcp/config/client \\\n  ...\n  rotation_window=\"1h\" \\\n  rotation_schedule=\"0 * * * SAT\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Vault Ingress\nDESCRIPTION: YAML configuration for setting up TLS on the Vault Ingress resource. This example defines multiple hosts that will use the same TLS certificate stored in a Kubernetes secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ntls:\n  - hosts:\n      - sslexample.foo.com\n      - sslexample.bar.com\n    secretName: testsecret-tls\n```\n\n----------------------------------------\n\nTITLE: Creating KVv2 Secrets in Vault\nDESCRIPTION: Use vault kv put command to create secrets in the KVv2 secrets engine. These secrets will be synced to the target GitHub repository for Actions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -mount='my-kv' my-secret key1='val1' key2='val2'\n```\n\n----------------------------------------\n\nTITLE: Generating Token with TTL (Vault CLI)\nDESCRIPTION: This snippet demonstrates how to generate a Kubernetes service account token with a specified TTL using the Vault CLI. It sets the TTL for the token to 20 minutes. The namespace is set to 'test'. If the TTL is not specified, the default TTL of the role is used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/creds/my-role \\\n    kubernetes_namespace=test \\\n    ttl=20m\n\nKey                        Value\n–--                        -----\nlease_id                   kubernetes/creds/my-role/31d771a6-...\nlease_duration             20m0s\nlease_renwable             false\nservice_account_name       new-service-account-with-generated-token\nservice_account_namespace  test\nservice_account_token      eyJHbGci0iJSUzI1NiIsImtpZCI6ImlrUEE...\n```\n\n----------------------------------------\n\nTITLE: Sending AWS Client Configuration Request to Vault API\nDESCRIPTION: Shell command showing how to configure AWS credentials by sending a POST request to the Vault API with the JSON payload containing access and secret keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/config/client\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Couchbase Connection Configuration\nDESCRIPTION: Example JSON payload for configuring a connection to a Couchbase server in Vault. Specifies the plugin name, host address, credentials, and allowed roles pattern.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/couchbase.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"couchbase-database-plugin\",\n  \"hosts\": \"couchbase://127.0.0.1\",\n  \"username\": \"user\",\n  \"password\": \"pass\",\n  \"allowed-roles\": \"my-*-role\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redshift Connection - JSON\nDESCRIPTION: This snippet provides a sample JSON payload for configuring the Redshift database plugin within Vault, demonstrating the parameters required such as plugin name, allowed roles, connection URL, and connection limits.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/redshift.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"redshift-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"postgresql://{{username}}:{{password}}@localhost:5432/dev\",\n  \"max_open_connections\": 5,\n  \"max_connection_lifetime\": \"5s\",\n  \"username\": \"username\",\n  \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Audit Log Telemetry Metrics\nDESCRIPTION: Configuration and reference for audit log telemetry metrics, including request and response logging, sink success/failure, and fallback mechanisms\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/audit.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/log_request_failure.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/log_request.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/log_response_failure.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/log_response.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/sink_success.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/sink_failure.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/fallback_success.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/fallback_miss.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/device-intro.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/device/log_request.mdx'\n```\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/device/log_response.mdx'\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Vault's /sys/leader Endpoint\nDESCRIPTION: This shell command demonstrates how to send a GET request to the `/sys/leader` endpoint of Vault using curl. It retrieves the high availability status and current leader information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/leader.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/leader\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Roles\nDESCRIPTION: Various commands for configuring Consul roles in Vault with different identity types and policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/roles/my-role \\\n    node_identities=\"server-1:dc1\" \\\n    node_identities=\"server-2:dc1\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/roles/my-role consul_roles=\"api-server\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/roles/my-role \\\n    service_identities=\"myservice-1:dc1,dc2\" \\\n    service_identities=\"myservice-2:dc1\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/roles/my-role consul_policies=\"readonly\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/roles/my-role policy=\"$(echo 'key \"\" { policy = \"read\" }' | base64)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling External Plugins in Vault\nDESCRIPTION: Command to enable a registered plugin at a specific path. This example enables the passthrough-plugin at the path 'my-secrets'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=my-secrets passthrough-plugin\nSuccess! Enabled the passthrough-plugin secrets engine at: my-secrets/\n```\n\n----------------------------------------\n\nTITLE: Vault Import Configuration File\nDESCRIPTION: HCL configuration file that specifies the source (GCP), destination (Vault), and mapping rules for the import operation. Includes credentials, addresses, and namespace configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/import.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nsource_gcp {\n  name        = \"my-gcp-source-1\"\n  credentials = \"@/path/to/service-account-key.json\"\n}\n\ndestination_vault {\n  name      = \"my-dest-1\"\n  address   = \"http://127.0.0.1:8200/\"\n  token     = \"root\"\n  namespace = \"ns-1\"\n  mount     = \"mount-1\"\n}\n\nmapping_passthrough {\n  name        = \"my-map-1\"\n  source      = \"my-gcp-1\"\n  destination = \"my-dest-1\"\n  priority    = 1\n}\n```\n\n----------------------------------------\n\nTITLE: OIDC Scope: Sample Payload\nDESCRIPTION: This is a sample JSON payload for creating or updating an OIDC scope. It includes a template and a description for the scope. The template is a JSON string that can include Vault identity information for dynamic scope generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"template\":\"{ \\\"groups\\\": {{identity.entity.groups.names}} }\",\n   \"description\":\"A simple scope example.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Vault Server with Load Balanced UI in YAML\nDESCRIPTION: This YAML configuration sets up a standalone Vault server with UI enabled, TCP listener without TLS, file storage, and a LoadBalancer service for the UI. It also configures data storage with a 10Gi volume.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/standalone-load-balanced-ui.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  standalone:\n    enabled: true\n    config: |\n      ui = true\n\n      listener \"tcp\" {\n        tls_disable = 1\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n      }\n      storage \"file\" {\n        path = \"/vault/data\"\n      }\n\n  service:\n    enabled: true\n\n  dataStorage:\n    enabled: true\n    size: 10Gi\n    storageClass: null\n    accessMode: ReadWriteOnce\n\nui:\n  enabled: true\n  serviceType: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Signing SSH Key API Request in Vault\nDESCRIPTION: This request signs an SSH public key using Vault's SSH CA. It requires authentication via a Vault token and submits the JSON payload containing the public key to be signed to the specified role endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_31\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/sign/my-key\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled Audit Devices with Vault API\nDESCRIPTION: This snippet demonstrates how to list enabled audit devices in Vault using a GET request to the /sys/audit endpoint. This operation requires sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/audit\n```\n\n----------------------------------------\n\nTITLE: Patching KV with Output Policy\nDESCRIPTION: Utilize the Vault CLI to execute a `kv patch` command that generates a minimal policy output for a specified path, aiding the creation of policy files.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/setup.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv patch                  \\\n    -output-policy                \\\n    -mount <existing_mount_path>  \\\n    test-path                     \\\n    test=test\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv patch      \\\n    -output-policy    \\\n    -mount private    \\\n    test-path         \\\n    test=test\n\npath \"private/data/test-path\" {\n  capabilities = [\"patch\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP Code with Vault\nDESCRIPTION: Generates a time-based one-time password for a specific TOTP key. This endpoint allows Vault to create the same code that would be generated by a TOTP authenticator app.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/totp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/totp/code/my-key\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"code\": \"810920\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Vault Service in Linux\nDESCRIPTION: Starts the Vault service using systemd after configuring the service file and reloading the daemon.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo systemctl start vault.service\n```\n\n----------------------------------------\n\nTITLE: Creating Rate Limit Quota - JSON Payload\nDESCRIPTION: Sample JSON payload for creating or updating a rate limit quota. Demonstrates setting path, rate, interval and block_interval parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rate-limit-quotas.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"\",\n  \"rate\": 897.3,\n  \"interval\": \"2m\",\n  \"block_interval\": \"5m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Vault (non-Docker)\nDESCRIPTION: This command starts a Vault server in development mode without Docker. It uses the `-dev` flag for development mode and sets the root token ID to 'dev-only-token'. This is for development purposes only and not suitable for production.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault server -dev -dev-root-token-id=\"dev-only-token\"\n```\n\n----------------------------------------\n\nTITLE: Sending GCP Config Request\nDESCRIPTION: cURL command to configure Google Cloud authentication by sending credentials to Vault's API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/gcp/config\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Pinned Plugin Version - cURL Request\nDESCRIPTION: cURL command to create or update a pinned plugin version using POST request with authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-pins.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/plugins/pins/auth/github\n```\n\n----------------------------------------\n\nTITLE: Sample Response Keys\nDESCRIPTION: Example response showing list of certificates keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"cert1\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up AppRole authentication in Vault\nDESCRIPTION: Commands to enable AppRole authentication, create a demo policy with read access to secret paths, create a role with the policy attached, and retrieve the necessary role ID and secret ID files.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/servicenow/installation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault auth enable approle\nvault policy write demo - <<EOF\npath \"secret/*\" {\n  capabilities = [\"read\"]\n}\nEOF\nvault write auth/approle/role/role1 bind_secret_id=true token_policies=demo\n```\n\nLANGUAGE: bash\nCODE:\n```\necho -n $(vault read -format json auth/approle/role/role1/role-id | jq -r '.data.role_id') > /path/to/roleID\necho -n $(vault write -format json -f auth/approle/role/role1/secret-id | jq -r '.data.secret_id') > /path/to/secretID\n```\n\n----------------------------------------\n\nTITLE: Setting Vault CLI Output Format\nDESCRIPTION: Shows how to set the output format for Vault CLI using either a command line flag or environment variable. The format can be set to table (default), json, yaml, or jsonx for XML output.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/format.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-format json\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_FORMAT=json\n```\n\n----------------------------------------\n\nTITLE: Encryption Request Payload\nDESCRIPTION: Sample JSON payload for encrypting data using Transit, containing base64 encoded plaintext.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plaintext\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Manually Rotating LDAP Static Role Password with POST Request\nDESCRIPTION: Demonstrates how to trigger a manual password rotation for a static role using a POST request to the /ldap/rotate-role endpoint. This immediately generates a new password for the specified role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/ldap/rotate-role/:role_name\n```\n\n----------------------------------------\n\nTITLE: Configuring PostgreSQL Storage Backend in Vault\nDESCRIPTION: Basic configuration for connecting Vault to a PostgreSQL database using a connection URL with authentication credentials\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/postgresql.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"postgresql\" {\n  connection_url = \"postgres://user123:secret123!@localhost:5432/vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Root Token Generation in Vault\nDESCRIPTION: Command to start the root token generation process in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/generate-root.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator generate-root -init\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager with Location-Specific KMS Keys\nDESCRIPTION: A JSON configuration for a GCP Secret Manager destination with region-specific customer-managed encryption keys. Maps specific regions to their corresponding KMS key resource identifiers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"credentials\": \"<private key string>\",\n    \"replication_locations\": [\n        \"us-east1\",\n        \"us-west1\"\n    ],\n    \"locational_kms_keys\": {\n        \"us-east1\": \"projects/my-project/locations/us-east1/keyRings/my-east-keyring/cryptoKeys/my-east-key\",\n        \"us-west1\": \"projects/my-project/locations/us-west1/keyRings/my-west-keyring/cryptoKeys/my-west-key\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using mount Flag with vault kv put Command\nDESCRIPTION: Alternative syntax for storing secrets using the -mount flag to avoid explicitly specifying the /data/ path component in the command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -mount=secret web-app api-token=\"WEOIRJ13895130WENJWEFN\"\n```\n\n----------------------------------------\n\nTITLE: Listing Entities by ID - HTTP API - Shell\nDESCRIPTION: This cURL command sends a LIST request to retrieve all entity IDs from Vault. It requires authentication via a valid Vault token in the request header. The endpoint `/identity/entity/id` is used, and the response lists entity IDs in JSON format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/entity/id\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Configure PingID MFA Method\nDESCRIPTION: This curl command demonstrates how to send a POST request to configure a PingID MFA method. It includes the necessary headers and references a payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/pingid.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/pingid/ping\n```\n\n----------------------------------------\n\nTITLE: Library Set Status Response\nDESCRIPTION: JSON response showing the check-out status of service accounts in the library set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"9e44c8b5-d142-5867-2a11-49f3ba71215a\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"buzz@example.com\": {\n      \"available\": true\n    },\n    \"fizz@example.com\": {\n      \"available\": false,\n      \"borrower_client_token\": \"4c653e473bf7e27c6759fccc3def20c44d776279\",\n      \"borrower_entity_id\": \"631256b1-8523-9838-5501-d0a1e2cdad9c\"\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Signing Request for Vault Agent Injector\nDESCRIPTION: Generates a Certificate Signing Request (CSR) for the Vault Agent Injector certificate using the previously created private key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl req \\\n   -new \\\n   -key tls.key \\\n   -out tls.csr \\\n   -subj \"/C=US/ST=CA/L=San Francisco/O=HashiCorp/CN=vault-agent-injector-svc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring PingID MFA Method with JSON Payload\nDESCRIPTION: This snippet shows the JSON payload structure for configuring a PingID MFA method. It includes the mount_accessor and a base64-encoded settings file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/pingid.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mount_accessor\": \"auth_userpass_1793464a\",\n  \"settings_file_base64\": \"AA8owj3...\"\n}\n```\n\n----------------------------------------\n\nTITLE: HCL Auto-Auth Method Configuration Block\nDESCRIPTION: Configuration block for Vault auto-authentication method showing common parameters including type, mount path, namespace settings, wrap TTL, backoff settings, and error handling options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmethod {\n  type = \"<method-type>\"\n  mount_path = \"auth/<method-type>\"\n  namespace = \"optional-namespace\"\n  wrap_ttl = \"duration\"\n  min_backoff = \"1s\"\n  max_backoff = \"5m\"\n  exit_on_err = false\n  config = {\n    // method-specific configuration\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Storage Backend with Environment Variables\nDESCRIPTION: Adds support for retrieving MySQL backend username and password from environment variables, providing more flexible credential management for Vault storage configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30136.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_MYSQL_USERNAME=your_username\nexport VAULT_MYSQL_PASSWORD=your_password\n```\n\n----------------------------------------\n\nTITLE: Tuning PKI Mount for CMPv2 Authentication\nDESCRIPTION: This snippet tunes the PKI mount to allow specific response headers and sets the delegated authentication accessors based on requirements for CMPv2 clients.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cmpv2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune \\\n  -allowed-response-headers=\"Content-Transfer-Encoding\" \\\n  -allowed-response-headers=\"Content-Length\" \\\n  -allowed-response-headers=\"WWW-Authenticate\" \\\n  -delegated-auth-accessors=\"auth_cert_4088ac2d\" \\\n  -trim-request-trailing-slashes=\"true\" \\\n  pki\n```\n\n----------------------------------------\n\nTITLE: Deleting a Policy in Vault\nDESCRIPTION: Makes a DELETE request to remove a policy by name. The request requires an authentication token and specifies the policy name to delete as part of the URL path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policy.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/policy/my-policy\n```\n\n----------------------------------------\n\nTITLE: Create Kubernetes Role (Vault)\nDESCRIPTION: This payload defines a Kubernetes role configuration where a pre-existing ClusterRole will be used.  It specifies allowed namespaces, the Kubernetes role type, and the Kubernetes role name.  The `kubernetes_role_type` can be set to `Role` to define a secrets role of type `Role` but use a `ClusterRole` as reference.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespaces\": \"*\",\n  \"kubernetes_role_type\": \"ClusterRole\",\n  \"kubernetes_role_name\": \"vault-k8s-secrets-role\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespaces\": \"default\",\n  \"kubernetes_role_type\": \"Role\",\n  \"kubernetes_role_ref_type\": \"ClusterRole\",\n  \"kubernetes_role_name\": \"vault-k8s-secrets-role\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling KVv2 Secrets Engine in Vault CLI\nDESCRIPTION: This command enables a new KVv2 secrets engine at the specified path in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/azurekv.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path='my-kv' kv-v2\n```\n\n----------------------------------------\n\nTITLE: Encryption Response\nDESCRIPTION: JSON response from the encryption operation containing the encrypted ciphertext.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ciphertext\": \"vault:v1:XjsPWPjqPrBi1N2Ms2s1QM798YyFWnO4TR4lsFA=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Authentication Method in HashiCorp Vault (Shell)\nDESCRIPTION: This command disables the 'userpass' authentication method in HashiCorp Vault. It demonstrates how to use the 'auth disable' command to remove an authentication method from a specific path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/disable.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth disable userpass/\nSuccess! Disabled the auth method (if it existed) at: userpass/\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate via Trust Protection Platform - Shell Script\nDESCRIPTION: This snippet demonstrates how to generate a certificate by writing to the `/issue` endpoint using the name of the role associated with Trust Protection Platform settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/issue/tpp common_name=\"common-name.example.com\" \\\n    alt_names=\"dns-san-1.example.com,dns-san-2.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Defining Resource Limits for Vault CSI Containers\nDESCRIPTION: This YAML example sets resource requests and limits for containers in the Vault CSI Provider, leveraging Kubernetes resource management capabilities. By specifying 10Gi of memory for both requests and limits, it ensures containers have reserved resources while limiting maximum usage. Configuring resources is crucial for efficient operation and reliability in clustered environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  requests:\n    memory: '10Gi'\n  limits:\n    memory: '10Gi'\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Parameters with Specific Values in Vault Policy (HCL)\nDESCRIPTION: This snippet demonstrates how to set allowed parameters with specific values in a Vault policy. It allows creating or updating transit encryption keys with specific auto-rotation periods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\npath \"transit/keys/*\" {\n  capabilities = [\"create\", \"update\"]\n  allowed_parameters = {\n    \"auto_rotate_period\" = [\"8h\", \"24h\", \"5d\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tidy Endpoint Payload Example\nDESCRIPTION: This JSON payload demonstrates how to configure the `safety_buffer` parameter for the `/pki/tidy` endpoint. The `safety_buffer` specifies a duration that certificates are kept to avoid premature expunging from the CRL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_118\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safety_buffer\": \"24h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Control Group Request Status in Vault - JSON Response\nDESCRIPTION: JSON response from the control group request status endpoint. It shows detailed information including approval status, request path, requesting entity, and required authorizations from other entities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/control-group.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"approved\": false,\n    \"request_path\": \"secret/foo\",\n    \"request_entity\": {\n      \"id\": \"c8b6e404-de4b-50a4-2917-715ff8beec8e\",\n      \"name\": \"Bob\"\n    },\n    \"authorizations\": [\n      {\n        \"entity_id\": \"6544a3ec-d3cd-443b-b87b-4fd2e889e0b7\",\n        \"entity_name\": \"Abby Jones\"\n      },\n      {\n        \"entity_id\": \"919084a4-417e-42ee-9d78-87fa2843af37\",\n        \"entity_name\": \"James Franklin\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Auth Method with JSON Payload\nDESCRIPTION: JSON payload for configuring the Kubernetes auth method with required host, CA certificate, and PEM keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes_host\": \"https://192.168.99.100:8443\",\n  \"kubernetes_ca_cert\": \"-----BEGIN CERTIFICATE-----\\n.....\\n-----END CERTIFICATE-----\",\n  \"pem_keys\": \"-----BEGIN CERTIFICATE-----\\n.....\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Vault Unseal Request\nDESCRIPTION: Sample JSON payload for submitting an unseal key share to the Vault unseal API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/unseal.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"abcd1234...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Issuing CertBot with EAB Token\nDESCRIPTION: This certbot command initiates certificate issuance while including EAB token authentication. It includes the EAB kid and hmac key that were previously fetched from Vault, essential for ACME client registration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ certbot certonly --server https://localhost:8200/v1/pki/acme/directory \\\n                   --eab-kid <id> --eab-hmac-key <hmac-key>\n```\n\n----------------------------------------\n\nTITLE: Key Rotation API Request\nDESCRIPTION: cURL command to rotate a GCP KMS key via Vault's HTTP API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_36\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/rotate/my-key\n```\n\n----------------------------------------\n\nTITLE: Writing KV Secret from Standard Input\nDESCRIPTION: Demonstrates writing a secret to Vault by piping data through standard input using the '-' symbol\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/put.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\necho \"abcd1234\" | vault kv put -mount=secret foo bar=-\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Account Library in Vault\nDESCRIPTION: Command to create a library of service accounts for check-out. This defines the accounts, TTL, max TTL, and check-in enforcement policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ldap/library/accounting-team \\\n    service_account_names=fizz@example.com,buzz@example.com \\\n    ttl=10h \\\n    max_ttl=20h \\\n    disable_check_in_enforcement=false\n```\n\n----------------------------------------\n\nTITLE: Retrieving the Wrapping Key - cURL Request\nDESCRIPTION: Sample cURL request for retrieving the RSA public wrapping key used for importing key material into transformations. This key is used to encrypt the material before sending it to Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/transform/wrapping_key\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Okta Google TOTP MFA in Vault CLI\nDESCRIPTION: This command shows how to authenticate with Vault using Okta credentials, specifying Google as the TOTP provider for multi-factor authentication via the CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=okta username=my-username totp=123456 provider=GOOGLE\n```\n\n----------------------------------------\n\nTITLE: Creating User Role for HCP Terraform in Vault (Shell)\nDESCRIPTION: This command creates a Vault role to manage User API tokens for an existing HCP Terraform user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write terraform/role/user-testing user_id=\"${TF_USER_ID}\"\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Payload for Vault Authentication\nDESCRIPTION: This JSON payload is structured for authenticating with HashiCorp Vault, including a role, instance certificate, signing time, and signature. It is intended to be passed to the Vault API for login purposes. Proper formatting of the certificate, including newlines, is crucial for parsing and usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"test-role\",\n  \"cf_instance_cert\": \"-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\",\n  \"signing_time\": \"2006-01-02T15:04:05Z\",\n  \"signature\": \"MmyUjQ1OqxQmF0W6raVQDL-hlqqe1oG-7abA6Oi3NHwT-9lMfrYxsCwMnd2HKGMly2tCgetcoA2orfquoe6MkMuksx_KGH_KLObcAykt53z4rHceHKGvm7eGj60cjWFYtiNPic-lzUGERLbUeKLMi6NlThm9ueb7hhpyTUpEYtphV3gorbVxvlkrnuYSbgy2NGpOUY1N8dRzcxmHkYjh12XoWEw4Is5aFr6eFKbZ0vmLWBzhJ7_w20CFyTpRYB-6heGz1iR9qEG8mZk3_x4rZpT5mejJ5zmH2xlUjBJMndfcz47btEi2BO9pFVxK2wK-tKeUUFgx6RcomAopTskkmg==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Organization Sync Destination in Vault\nDESCRIPTION: Use vault write command to set up an organization sync destination. This configures Vault to sync secrets to a GitHub organization, with options for visibility and repository access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/gh/DESTINATION_NAME \\\n    access_token=\"GITHUB_ACCESS_TOKEN\"                  \\\n    secrets_location=\"GITHUB_SECRETS_LOCATION\"          \\\n    organization_name=\"ORGANIZATION_NAME\"               \\\n    organization_visibility=\"ORGANIZATION_VISIBILITY\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secrets Engine with Credentials\nDESCRIPTION: Command to configure the GCP secrets engine with service account credentials from a JSON file\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write gcp/config credentials=@my-credentials.json\nSuccess! Data written to: gcp/config\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Metadata using CLI - Vault KV V2 - Shell\nDESCRIPTION: This snippet demonstrates how to use the Vault CLI to set custom metadata fields for a KV V2 secret path. The command requires the correct mount path and secret path. Make sure you have the necessary permissions to use the command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/custom-metadata.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv metadata put                \\\n   -custom-metadata <key_value_pair>   \\\n   -mount <mount_path>                 \\\n   <secret_path>\n```\n\n----------------------------------------\n\nTITLE: Create Policy for Duo MFA Text Command\nDESCRIPTION: This command creates a Vault policy that specifies the paths and capabilities associated with the 'my_duo' MFA method. Vault must be configured and running to apply this policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault policy write duo-policy -<<EOF\npath \"secret/foo\" {\n  capabilities = [\"read\"]\n  mfa_methods  = [\"my_duo\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring a Redis connection via HTTP API (JSON)\nDESCRIPTION: This JSON payload is used when configuring a Redis connection through Vault's database secrets engine. It specifies the plugin, host, username, password, and allowed roles. This allows Vault to connect to the Redis instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/redis.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"redis-database-plugin\",\n  \"host\": \"localhost://127.0.0.1\",\n  \"username\": \"user\",\n  \"password\": \"pass\",\n  \"allowed-roles\": \"my-*-role\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS STS Client for Regional Endpoints\nDESCRIPTION: Demonstrates how to configure Vault's AWS authentication to use regional STS endpoints using the vault write command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/aws/config/client \\\n     sts_endpoint=\"https://sts.eu-west-1.amazonaws.com\" \\\n     sts_region=\"eu-west-1\"\n```\n\n----------------------------------------\n\nTITLE: Update Tokenization Key Config - Request Payload\nDESCRIPTION: JSON payload for updating tokenization key configuration, including minimum decryption version and auto-rotation period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"min_decryption_version\": 1,\n    \"auto_rotate_period\": \"4320h\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Importing Nested Vault Resources into Terraform\nDESCRIPTION: Shows how to import Vault resources that belong to a namespace. This requires setting an environment variable before importing to specify the namespace context.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ export TERRAFORM_VAULT_NAMESPACE_IMPORT=\"admin\"\n\n$ terraform import vault_mount.admin_keys_plugin admin_keys\n\nvault_mount.admin_keys_plugin: Importing from ID \"admin_keys\"...\nvault_mount.admin_keys_plugin: Import prepared!\n  Prepared vault_mount for import\nvault_mount.admin_keys_plugin: Refreshing state... [id=admin_keys]\n\nImport successful!\n\nThe resources that were imported are shown above. These resources are now in\nyour Terraform state and will henceforth be managed by Terraform.\n\n$ unset TERRAFORM_VAULT_NAMESPACE_IMPORT\n```\n\n----------------------------------------\n\nTITLE: PGP-Encrypted Vault Initialization\nDESCRIPTION: Initialize Vault with PGP-encrypted unseal keys, specifying 3 key shares with a threshold of 2 keys required for unsealing\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/init.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault operator init \\\n    -key-shares=3 \\\n    -key-threshold=2 \\\n    -pgp-keys=\"keybase:hashicorp,keybase:jefferai,keybase:sethvargo\"\n```\n\n----------------------------------------\n\nTITLE: Reading Cassandra Role Sample Response\nDESCRIPTION: JSON response showing the details of a Cassandra role, including the creation CQL, rollback CQL, lease duration, and consistency level.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"creation_cql\": \"CREATE USER...\",\n    \"rollback_cql\": \"DROP USER...\",\n    \"lease\": \"12h\",\n    \"consistency\": \"Quorum\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a CA Certificate Role in Vault\nDESCRIPTION: This snippet demonstrates how to create a CA certificate role using the Vault API. It includes parameters for the certificate, allowed names, and token settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\",\n  \"display_name\": \"test\",\n  \"bound_cidrs\": [\"127.0.0.1/32\", \"128.252.0.0/16\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Consul Snapshot in Shell\nDESCRIPTION: This command inspects the contents of the Consul snapshot file 'backup.snap', displaying information such as ID, size, index, term, and version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migrate-consul-storage.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ consul snapshot inspect backup.snap\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Role Configuration Response Format\nDESCRIPTION: Sample JSON response when retrieving a Kubernetes role configuration. This shows the structure and typical fields returned when reading a role, including namespace permissions and token TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"additional_metadata\": {},\n    \"allowed_kubernetes_namespaces\": [\n      \"*\"\n    ],\n    \"generated_role_rules\": \"\",\n    \"kubernetes_role_name\": \"\",\n    \"kubernetes_role_type\": \"Role\",\n    \"kubernetes_role_ref_type\": \"Role\",\n    \"name\": \"default-role\",\n    \"name_template\": \"\",\n    \"service_account_name\": \"default\",\n    \"token_default_ttl\": 0,\n    \"token_max_ttl\": 86400\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Passthrough Mapping in Vault HCL\nDESCRIPTION: Configures a passthrough mapping that imports all secrets from a source to a destination with a specified priority. Useful as a base case for imported secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/mappings.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nmapping_passthrough {\n  name        = \"my-map-1\"\n  source      = \"my-gcp-source-1\"\n  destination = \"my-dest-1\"\n  priority    = 1\n}\n```\n\n----------------------------------------\n\nTITLE: VaultDynamicSecretSpec Definition\nDESCRIPTION: Specification schema for VaultDynamicSecret CRD that defines how to configure dynamic secret management with Vault. Includes fields for authentication, mounting, path configuration, renewal settings and destination details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nvaultAuthRef: string\nnamespace: string\nmount: string\nrequestHTTPMethod: string\npath: string\nparams: object\nrenewalPercent: integer\nrevoke: boolean\nallowStaticCreds: boolean\nrolloutRestartTargets: array\ndestination: object\nrefreshAfter: string\n```\n\n----------------------------------------\n\nTITLE: Reading Kubernetes Auth Configuration Response\nDESCRIPTION: Sample JSON response when reading the Kubernetes auth method configuration, showing host, CA certificate, and other settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"kubernetes_host\": \"https://192.168.99.100:8443\",\n    \"kubernetes_ca_cert\": \"-----BEGIN CERTIFICATE-----.....-----END CERTIFICATE-----\",\n    \"pem_keys\": [\"-----BEGIN CERTIFICATE-----.....\", .....],\n    \"disable_local_ca_jwt\": false,\n    \"token_reviewer_jwt_set\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start DR Token Generation in Vault\nDESCRIPTION: cURL command to initiate a new DR operation token generation attempt using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/generate-operation-token/attempt\n```\n\n----------------------------------------\n\nTITLE: Constructing Entity Merge Payload in JSON for Vault API\nDESCRIPTION: Sample JSON payload for merging multiple entities in Vault's identity system. This example shows how to specify the destination entity ID and the list of entity IDs to be merged into it.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"to_entity_id\": \"f2cdefbe-f510-a226-77fa-989a48ba6abc\",\n  \"from_entity_ids\": [\n    \"1ade80ec-ba5c-8eed-91e2-b9dcd41d6fff\",\n    \"270976d0-9bab-14a5-4b92-3861805ef73d\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Lookup Payload\nDESCRIPTION: This JSON payload is used to specify the secret ID when looking up AppRole details. The `secret_id` parameter is required and should be a valid UUID representing the secret ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_id\": \"84896a0c-1347-aa90-a4f6-aca8b7558780\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Secrets Operator Defaults in YAML\nDESCRIPTION: This snippet illustrates the default configuration for deploying Vault Secrets Operator with TLS disabled. It enables the default Vault connection and the default authentication method, expecting a local Vault installation accessible at the specified URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n\"# config.yaml\\n\\ndefaultVaultConnection:\\n  enabled: true\\ndefaultAuthMethod:\\n  enabled: true\\n\"\n```\n\n----------------------------------------\n\nTITLE: Obtaining JWT from GCE Instance Metadata\nDESCRIPTION: This curl command obtains a JWT token from the GCE instance's metadata server. It uses the Google-specific 'Metadata-Flavor' request header and URL encodes the audience and format parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\nROLE=\"my-gce-role\"\n\n$ curl \\\n  --header \"Metadata-Flavor: Google\" \\\n  --get \\\n  --data-urlencode \"audience=http://vault/${ROLE}\" \\\n  --data-urlencode \"format=full\" \\\n  \"http://metadata/computeMetadata/v1/instance/service-accounts/default/identity\"\n```\n\n----------------------------------------\n\nTITLE: Enabling CMPv2 in Vault PKI\nDESCRIPTION: This snippet enables CMPv2 functionality by writing configuration to the corresponding endpoint, including setting the default path policy and authenticators.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cmpv2.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault write pki/config/cmp -<<EOC\\\n{\\\n  \"enabled\": true,\\\n  \"default_path_policy\": \"role:example-role\",\\\n  \"disabled_validations\": [],\\\n  \"authenticators\": {\\\n    \"cert\": {\\\n      \"accessor\": \"auth_cert_4088ac2d\"\\\n    }\\\n  },\\\n  \"audit_fields\": [\"common_name\", \"alt_names\", \"ip_sans\", \"uri_sans\"]\\\n}\\\nEOC\n```\n\n----------------------------------------\n\nTITLE: Listing TOTP Keys in Vault\nDESCRIPTION: Lists all TOTP keys stored in Vault. This endpoint returns only the names of available TOTP keys, not their values or configuration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/totp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/totp/keys\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"my-key\"]\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Configuration Payload - JSON\nDESCRIPTION: This JSON object is a sample payload for configuring the Google Cloud KMS secrets engine with credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": \"< JSON credentials... >\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AppRole - Shell\nDESCRIPTION: This snippet demonstrates how to create a demo role named 'my-app-role' using the approle authentication method, including setting multiple time-to-live parameters for token management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/approle/role/my-app-role \\\n    secret_id_ttl=10m \\\n    token_ttl=20m \\\n    token_max_ttl=30m\n```\n\n----------------------------------------\n\nTITLE: Authenticating as User with Policy - Shell\nDESCRIPTION: This snippet demonstrates how to authenticate to Vault using the created user with its password. The user retrieves specific credentials based on assigned policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=userpass username=opsuser\n```\n\n----------------------------------------\n\nTITLE: Decoding PGP-Encrypted Root Token using GPG\nDESCRIPTION: This command decrypts the PGP-encrypted root token using the GPG tool. It requires the encoded token to be base64 decoded before decryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/generate-root-token.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ echo ${ENCODED_TOKEN} | base64 --decode | gpg --decrypt\n```\n\n----------------------------------------\n\nTITLE: Creating OAuth Token Roleset\nDESCRIPTION: Command to create a roleset that generates OAuth2 access tokens with viewer role binding\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write gcp/roleset/my-token-roleset \\\n    project=\"my-project-id\" \\\n    secret_type=\"access_token\"  \\\n    token_scopes=\"https://www.googleapis.com/auth/cloud-platform\" \\\n    bindings=-<<EOF\n      resource \"//cloudresourcemanager.googleapis.com/projects/my-project-id\" {\n        roles = [\"roles/viewer\"]\n      }\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Generating KMIP Client Certificate in Vault\nDESCRIPTION: Demonstrates generating a new client certificate including CA chain, certificate, and private key using Vault's KMIP secrets engine. The generated certificate includes embedded scope and role identifiers for permission evaluation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write -f kmip/scope/my-service/role/admin/credential/generate\n  Key              Value\n  ---              -----\n  ca_chain         [-----BEGIN CERTIFICATE-----\n  MIICNTCCAZigAwIBAgIUKqNFb3Zy+8ypIhTDs/2/8f/xEI8wCgYIKoZIzj0EAwIw\n  HTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MB4XDTE5MDYyNDE4MjQyN1oX\n  DTI5MDYyMTE4MjQ1N1owKjEoMCYGA1UEAxMfdmF1bHQta21pcC1kZWZhdWx0LWlu\n  dGVybWVkaWF0ZTCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAbniGNXHOiPvSb0I\n  fbc1B9QkOmdT2Ecx2WaQPLISplmO0Jm0u0z11CGuf3Igby7unnCNvCuCXrKJFCsQ\n  8JGhwknNAG3eesSZxG4tklA6FMZjE9ETUtYfjH7Z4vuJSw/fxOeey7fhrqAzhV3P\n  GRkvA9EQUHJOeV4rEpiINP/fneHNfsn1o2YwZDAOBgNVHQ8BAf8EBAMCAQYwEgYD\n  VR0TAQH/BAgwBgEB/wIBCTAdBgNVHQ4EFgQUR0o0v4rPiBU9RwQfEUucx3JwbPAw\n  HwYDVR0jBBgwFoAUMhORultSN+ABogxQdkt7KChD0wQwCgYIKoZIzj0EAwIDgYoA\n  MIGGAkF1IvkIaXNkVfe+q0V78CnX0XIJuvmPpgjN8AQzqLci8txikd9gF1zt8fFQ\n  gIKERm2QPrshSV9srHDB0YnThRKuiQJBNcDjCfYOzqKlBHifT4WT4OX1U6nP/Y2b\n  imGaLJK9VIwfcJOpVCFGp7Xi8QGV6rJIFiQAqzqCy69vcU6nVMsvens=\n  -----END CERTIFICATE----- -----BEGIN CERTIFICATE-----...]\n```\n\n----------------------------------------\n\nTITLE: PKCS#11 Provider Configuration (HCL)\nDESCRIPTION: This HCL configuration file defines a single slot for the PKCS#11 provider. It specifies the Vault server address, paths to the TLS certificate and CA bundle for KMIP authentication, and the KMIP scope to use. This configuration is essential for the PKCS#11 provider to connect to Vault's KMIP secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nslot {\n  server = \"127.0.0.1:5696\"\n  tls_cert_path = \"cert.pem\"\n  ca_path = \"ca.pem\"\n  scope = \"my-service\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Okta Configuration Response\nDESCRIPTION: JSON response showing the complete Okta configuration including base URL, MFA settings, organization name, and token parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"812229d7-a82e-0b20-c35b-81ce8c1b9fa6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"base_url\": \"okta.com\",\n    \"bypass_okta_mfa\": false,\n    \"org_name\": \"example\",\n    \"token_bound_cidrs\": [],\n    \"token_explicit_max_ttl\": 0,\n    \"token_max_ttl\": 0,\n    \"token_no_default_policy\": false,\n    \"token_num_uses\": 0,\n    \"token_period\": 0,\n    \"token_policies\": [],\n    \"token_ttl\": 0,\n    \"token_type\": \"default\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret in Vault KVv2 Engine\nDESCRIPTION: This shell command creates a new secret in the KVv2 secrets engine. It sets a key-value pair in the specified secret path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/awssm.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -mount=my-kv my-secret foo='bar'\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Secrets Operator with Helm\nDESCRIPTION: Command to install the Vault Secrets Operator using Helm, specifying the namespace, version and values file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/openshift.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault-secrets-operator hashicorp/vault-secrets-operator \\\n  --create-namespace \\\n  --namespace vault-secrets-operator \\\n  --version 0.10.0 \\\n  --values values.yaml\n```\n\n----------------------------------------\n\nTITLE: AWS EC2 Authentication Login via CLI\nDESCRIPTION: Performs login using EC2 authentication method by fetching PKCS#7 signature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ SIGNATURE=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/rsa2048 | tr -d '\\n')\n\n$ vault write auth/aws/login role=dev-role \\\n  pkcs7=$SIGNATURE\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Role via cURL\nDESCRIPTION: Illustrates how to query a RabbitMQ role using cURL, requiring a Vault token and role name in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/rabbitmq/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Static Role POST Request with cURL\nDESCRIPTION: Sample cURL command to create a static role in LDAP secrets engine\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ldap/static-role/hashicorp\n```\n\n----------------------------------------\n\nTITLE: Writing a secret using KVv2 engine with Vault API\nDESCRIPTION: Demonstrates how to write a secret using the KVv2 secrets engine, which requires the 'data/' path in the URI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -H \"X-Vault-Token: f3b09679-3001-009d-2b80-9c306ab81aa6\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"data\":{\"value\":\"bar\"}}' \\\n    http://127.0.0.1:8200/v1/secret/data/baz\n```\n\n----------------------------------------\n\nTITLE: Promote DR Secondary Sample Request\nDESCRIPTION: cURL request to promote a DR secondary to primary status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/promote\n```\n\n----------------------------------------\n\nTITLE: Listing Keys - JSON Response Example\nDESCRIPTION: Sample JSON response when listing keys in a KMS provider, showing an array of key names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"example-key\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Root Credentials for Azure Secrets Engine\nDESCRIPTION: Command to rotate the root credentials used by the Azure secrets engine, generating a new key that's only accessible to Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\nvault write -f azure/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Plugin in Vault\nDESCRIPTION: This command configures Vault with the Elasticsearch plugin and connection information, including authentication credentials and TLS certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/my-elasticsearch-database \\\n    plugin_name=\"elasticsearch-database-plugin\" \\\n    allowed_roles=\"internally-defined-role,externally-defined-role\" \\\n    username=vault \\\n    password=myPa55word \\\n    url=http://localhost:9200 \\\n    ca_cert=/usr/share/ca-certificates/extra/elastic-stack-ca.crt.pem \\\n    client_cert=$ES_HOME/config/certs/elastic-certificates.crt.pem \\\n    client_key=$ES_HOME/config/certs/elastic-certificates.key.pem\n```\n\n----------------------------------------\n\nTITLE: Defining Vault Password Policy with HCL\nDESCRIPTION: This HCL snippet defines a password policy for Vault. It specifies that the password must be 20 characters long and include at least one lowercase letter, one uppercase letter, one number, and two special characters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/random-string.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"length=20\n\nrule \\\"charset\\\" {\n  charset = \\\"abcdefghijklmnopqrstuvwxyz\\\"\n  min-chars = 1\n}\n\nrule \\\"charset\\\" {\n  charset = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\\\"\n  min-chars = 1\n}\n\nrule \\\"charset\\\" {\n  charset = \\\"0123456789\\\"\n  min-chars = 1\n}\n\nrule \\\"charset\\\" {\n  charset = \\\"!@#$%^&*STUVWXYZ\\\"\n  min-chars = 2\n}\"\n```\n\n----------------------------------------\n\nTITLE: Basic GCS Storage Configuration in HCL\nDESCRIPTION: Basic configuration block for setting up Google Cloud Storage as Vault's storage backend. Requires specifying a storage bucket name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-storage.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"gcs\" {\n  bucket = \"my-storage-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Credentials - HTTP API - Shell\nDESCRIPTION: This snippet demonstrates how to generate a Terraform Cloud token based on an existing role by sending a GET request to the `/terraform/creds/:name` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/terraform/creds/example\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Token Role\nDESCRIPTION: This JSON snippet represents a typical response from the Vault API when fetching a token role, containing details about allowed policies and role configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"075a19cd-4e56-a3ca-d956-7609819831ec\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"allowed_entity_aliases\": [\n      \"my-entity-alias\"\n    ],\n    \"allowed_policies\": [],\n    \"disallowed_policies\": [],\n    \"allowed_policies_glob\": [],\n    \"disallowed_policies_glob\": [],\n    \"explicit_max_ttl\": 0,\n    \"name\": \"nomad\",\n    \"orphan\": false,\n    \"path_suffix\": \"\",\n    \"period\": 0,\n    \"renewable\": true,\n    \"token_explicit_max_ttl\": 0,\n    \"token_no_default_policy\": false,\n    \"token_period\": 0,\n    \"token_type\": \"default-service\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HANA Database Connection in Vault\nDESCRIPTION: This JSON payload demonstrates how to configure a connection to a HANA database using Vault's database secrets engine. It includes settings for the plugin name, allowed roles, connection URL, and various connection parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/hanadb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"hana-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"hdb://{{username}}:{{password}}@localhost:1433\",\n  \"max_open_connections\": 5,\n  \"max_connection_lifetime\": \"5s\",\n  \"username\": \"username\",\n  \"password\": \"password\"\n}\n```\n\n----------------------------------------\n\nTITLE: OIDC Callback Request\nDESCRIPTION: cURL command to exchange an authorization code for an OIDC ID Token\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    https://127.0.0.1:8200/v1/auth/jwt/oidc/callback?state=n2kfh3nsl&code=mn2ldl2nv98h2jl&nonce=ni42i2idj2jj\n```\n\n----------------------------------------\n\nTITLE: Administrative TOTP MFA Secret Generation Payload\nDESCRIPTION: This JSON payload specifies the entity ID for which to generate a TOTP MFA secret administratively.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity_id\": \"4746fb81-028c-cd4e-026b-7dd18fe4c2f4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning GCP Service Account for Vault Secrets Sync\nDESCRIPTION: This Terraform configuration creates a GCP Service Account with necessary permissions for Vault Secrets Sync feature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/gcpsm.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nprovider \"google\" {\n    // See https://registry.terraform.io/providers/hashicorp/google/latest/docs#authentication-and-configuration to setup the Google Provider\n    // for options on how to configure this provider. The following parameters or environment\n    // variables are typically used.\n\n    // Parameters\n    // region = \"\" (Optional)\n    // project = \"\"\n    // credentials = \"\"\n\n    // Environment Variables\n    // GOOGLE_REGION (optional)\n    // GOOGLE_PROJECT\n    // GOOGLE_CREDENTIALS (The path to a service account key file with the\n    //                    \"Service Account Admin\", \"Service Account Key Admin\",\n    //                    \"Secret Manager Admin\", and \"Project IAM Admin\" roles\n    //                    attached)\n}\n\ndata \"google_client_config\" \"config\" {}\n\nresource \"google_service_account\" \"vault_secrets_sync_account\" {\n  account_id  = \"gcp-sm-vault-secrets-sync\"\n  description = \"service account for Vault Secrets Sync feature\"\n}\n\n// Production environments should use a more restricted role.\n// The built-in secret manager admin role is used as an example for simplicity.\ndata \"google_iam_policy\" \"vault_secrets_sync_iam_policy\" {\n  binding {\n    role = \"roles/secretmanager.admin\"\n    members = [\n      google_service_account.vault_secrets_sync_account.email,\n    ]\n  }\n}\n\nresource \"google_project_iam_member\" \"vault_secrets_sync_iam_member\" {\n  project = data.google_client_config.config.project\n  role    = \"roles/secretmanager.admin\"\n  member  = google_service_account.vault_secrets_sync_account.member\n}\n\nresource \"google_service_account_key\" \"vault_secrets_sync_account_key\" {\n  service_account_id = google_service_account.vault_secrets_sync_account.name\n  public_key_type    = \"TYPE_X509_PEM_FILE\"\n}\n\nresource \"local_file\" \"vault_secrets_sync_credentials_file\" {\n  content  = base64decode(google_service_account_key.vault_secrets_sync_account_key.private_key)\n  filename = \"gcp-sm-sync-service-account-credentials.json\"\n}\n\noutput \"vault_secrets_sync_credentials_file_path\" {\n  value = abspath(\"${path.module}/${local_file.sync_service_account_credentials_file.filename}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Vault Password Policy using CLI\nDESCRIPTION: This shell command uses the Vault CLI to write a password policy to Vault. The `vault write` command is used to save the policy defined in the specified HCL file to the `sys/policies/password/<policy_name>` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/random-string.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault write sys/policies/password/<policy_name> policy=@<policy_file>\"\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device - Default Path\nDESCRIPTION: Command to enable the file audit device at the default path, specifying a log file location.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/file.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable file file_path=/var/log/vault_audit.log\n```\n\n----------------------------------------\n\nTITLE: Tuning a Secrets Engine Configuration in Vault\nDESCRIPTION: This command modifies the configuration of an existing secrets engine. In this example, the maximum lease TTL (time-to-live) for the db-prod engine is set to 30 minutes, which affects how long generated credentials remain valid.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets tune -max-lease-ttl=30m db-prod/\nSuccess! Tuned the secrets engine at: db-prod/\n```\n\n----------------------------------------\n\nTITLE: Enable Database Secrets Engine\nDESCRIPTION: Shell command to enable the database secrets engine in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Retrieving OIDC Discovery Configuration\nDESCRIPTION: curl command to fetch the OIDC provider's discovery configuration containing endpoints and supported features.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/oidc-provider.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl -s http://127.0.0.1:8200/v1/identity/oidc/provider/default/.well-known/openid-configuration\n```\n\n----------------------------------------\n\nTITLE: Updating an Entity by ID - HTTP API - JSON\nDESCRIPTION: This JSON payload is used to update an existing entity in Vault by its ID. Key attributes include 'name', 'metadata', and 'policies', which customize the entity's details. Dependencies require prior existence of the entity and access to Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\"name\": \"updatedEntityName\", \"metadata\": {\"organization\": \"hashicorp\", \"team\": \"nomad\"}, \"policies\": [\"eng-developers\", \"infra-developers\"]}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kerberos Keytab Using ktutil\nDESCRIPTION: Commands to create a keytab file for the Vault server using ktutil and then base64 encode it for use in Vault configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kerberos.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ ktutil\nktutil:  addent -password -p your_service_account@REALM.COM -e aes256-cts -k 1\nPassword for your_service_account@REALM.COM:\nktutil:  list -e\nslot KVNO Principal\n---- ---- ---------------------------------------------------------------------\n  1    1            your_service_account@REALM.COM (aes256-cts-hmac-sha1-96)\nktutil:  wkt vault.keytab\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ base64 vault.keytab > vault.keytab.base64\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes and VolumeMounts in Terraform\nDESCRIPTION: This Terraform configuration shows how to set up volumes and volume mounts for Vault using the Helm provider, specifically for mounting a secret containing GCP IAM credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"helm_release\" \"vault\" {\n  name       = \"vault\"\n  repository = \"https://helm.releases.hashicorp.com\"\n  chart      = \"vault\"\n\n  set {\n    name  = \"server.volumes[0].name\"\n    value = \"userconfig-my-gcp-iam\"\n  }\n  set {\n    name  = \"server.volumes[0].secret.defaultMode\"\n    value = \"420\"\n  }\n  set {\n    name  = \"server.volumes[0].secret.secretName\"\n    value = \"my-gcp-iam\"\n  }\n\n  set {\n    name  = \"server.volumeMounts[0].mountPath\"\n    value = \"/vault/userconfig/my-gcp-iam\"\n  }\n  set {\n    name  = \"server.volumeMounts[0].name\"\n    value = \"userconfig-my-gcp-iam\"\n  }\n  set {\n    name  = \"server.volumeMounts[0].readOnly\"\n    value = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Seal Stanza with HA Fields\nDESCRIPTION: Template for configuring a seal stanza with HA-specific fields including name and priority settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/seal-ha.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nseal [TYPE] {\n  name = \"seal_name\"\n  priority = \"1\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MFA-enabled User Role with Session Token (Shell)\nDESCRIPTION: This command creates an mfa_user role in Vault using the session_token credential type with an MFA device configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write aws/roles/mfa_user \\\n    credential_type=session_token \\\n    mfa_serial_number=\"arn:aws:iam::ACCOUNT-ID-WITHOUT-HYPHENS:mfa/device-name\"\n```\n\n----------------------------------------\n\nTITLE: Creating PKI Role with JSON Payload\nDESCRIPTION: Example of creating a PKI role in Vault using a JSON payload to specify allowed domains and subdomain permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_81\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_domains\": [\"example.com\"],\n  \"allow_subdomains\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Reading AWS Root Configuration Response\nDESCRIPTION: Sample JSON response when reading the AWS root configuration, showing access key, region, endpoints, and retry settings. Note that the secret key is never returned in the response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"access_key\": \"AKIAEXAMPLE\",\n    \"region\": \"us-west-2\",\n    \"iam_endpoint\": \"https://iam.amazonaws.com\",\n    \"sts_endpoint\": \"https://sts.us-west-2.amazonaws.com\",\n    \"max_retries\": -1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting mlock Capability on Linux\nDESCRIPTION: This snippet ensures the Vault binary can use mlock() for secure memory locking as a non-root user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo setcap cap_ipc_lock=+ep $(readlink -f $(which vault))\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin Using OCI Image in Vault\nDESCRIPTION: This snippet demonstrates registering a plugin using an OCI container image, specifying the SHA256 checksum, image name, and runtime environment. This approach allows plugins to run in containerized environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-catalog.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sha256\": \"d150b9a0fbfddef9709d8ff92e5e6053ccd246b78632fc03b8548457026961a9\",\n  \"oci_image\": \"example-secret-plugin-oci-image\",\n  \"runtime\": \"example-runtime\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful MFA Validation Response\nDESCRIPTION: Example JSON response for a successful MFA validation, including the client token, accessor, and associated metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/validate.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"7e7dec1d-311a-ecbd-4dd0-ff12a5e38959\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": null,\n  \"warnings\": null,\n  \"auth\": {\n    \"client_token\": \"hvs.CAESIKZJNqQbG9E9cQGPXh68NWxi3xp7yPa1Z1RWv1P9UyHVGh4KHGh2cy5GUmYzTzdJOWhIZGFNSm5jdTBsSVNFSTk\",\n    \"accessor\": \"3fBgbEmHyA5IWABmVEjqManI\",\n    \"policies\": [\n      \"default\"\n    ],\n    \"token_policies\": [\n      \"default\"\n    ],\n    \"identity_policies\": null,\n    \"metadata\": {\n      \"username\": \"alice\"\n    },\n    \"orphan\": true,\n    \"entity_id\": \"caeac75b-dbfe-58be-e3fc-957549b7292e\",\n    \"lease_duration\": 2764800,\n    \"renewable\": true,\n    \"mfa_requirement\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request for Administrative TOTP MFA Secret Generation\nDESCRIPTION: This curl command sends a POST request to administratively generate a TOTP MFA secret for the 'my_totp' method and a specific entity ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/mfa/method/totp/my_totp/admin-generate\n```\n\n----------------------------------------\n\nTITLE: Generating RabbitMQ Credentials via cURL\nDESCRIPTION: Illustrates the process of generating new dynamic RabbitMQ credentials using cURL, specifying the role name for which credentials are generated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/rabbitmq/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Azure Role (cURL)\nDESCRIPTION: cURL command to send a POST request to create or update a Vault role with the provided JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/azure/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Configuring PingID MFA Method in Vault\nDESCRIPTION: Command to create a PingID MFA method in Vault using the mount accessor from the userpass auth method and a base64-encoded settings file containing PingID configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write sys/mfa/method/pingid/ping \\\n    mount_accessor=auth_userpass_54b8e339 \\\n    settings_file_base64=\"AABDwWaR...\"\n```\n\n----------------------------------------\n\nTITLE: Vault Plugin Version Selection\nDESCRIPTION: This note indicates an improvement in HashiCorp Vault. It introduces the ability to select built-in plugins using their semantic version. The version format is either `vX.Y.Z+builtin` or `vX.Y.Z+builtin.vault`, enabling administrators to specify plugin versions explicitly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17289.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`plugins: Allow selecting builtin plugins by their reported semantic version of the form `vX.Y.Z+builtin` or `vX.Y.Z+builtin.vault`.\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Namespace-Specific Plugin Reload\nDESCRIPTION: JSON payload for reloading a specific plugin named 'mock-plugin' with global scope within a namespace. This targets all mounted paths using the specified plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-reload.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin\": \"mock-plugin\",\n  \"scope\": \"global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the KMIP Secrets Engine in Vault\nDESCRIPTION: These Vault CLI commands enable the KMIP secrets engine, configure a listener address, create a KMIP scope, define a role with full permissions, and generate credentials for that role. The credentials, including the certificate, key, and CA chain, are then saved to a JSON file using the `tee` command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault secrets enable kmip\nvault write kmip/config listen_addrs=0.0.0.0:5696\nvault write -f kmip/scope/my-service\nvault write kmip/scope/my-service/role/admin operation_all=true\nvault write -f -format=json kmip/scope/my-service/role/admin/credential/generate | tee kmip.json\n```\n\n----------------------------------------\n\nTITLE: Fetching KV Secret with Consul Template\nDESCRIPTION: Template example that retrieves a generic secret from Vault's KV store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ with secret \"secret/my-secret\" }}\n{{ .Data.data.foo }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Kubernetes Role Configuration from Vault\nDESCRIPTION: Shell command to retrieve the configuration of an existing Kubernetes role from Vault. This sends a GET request to the role-specific endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/kubernetes/role/default-role\n```\n\n----------------------------------------\n\nTITLE: Vault Utilization Report Response Structure\nDESCRIPTION: Sample JSON response from the utilization report endpoint showing cluster statistics including auth methods, secrets, lease quotas, PKI details, and replication status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/utilization-report.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"8fb6005c-74cc-a4ec-6c3c-e396eb11c7ed\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"auth_methods\": {\n      \"cert\": 1,\n      \"token\": 2,\n      \"userpass\": 1\n    },\n    \"kvv1_secrets\": 0,\n    \"kvv2_secrets\": 23,\n    \"lease_count_quotas\": {\n      \"global_lease_count_quota\": {\n        \"capacity\": 300000,\n        \"count\": 1542,\n        \"name\": \"default\"\n      },\n      \"total_lease_count_quotas\": 1\n    },\n    \"leases_by_auth_method\": {\n      \"cert\": 0,\n      \"token\": 1500,\n      \"userpass\": 42\n    },\n    \"namespaces\": 2,\n    \"pki\": {\n      \"total_issuers\": 2,\n      \"total_roles\": 3\n    },\n    \"replication_status\": {\n      \"dr_primary\": false,\n      \"dr_state\": \"disabled\",\n      \"pr_primary\": false,\n      \"pr_state\": \"disabled\"\n    },\n    \"secret_engines\": {\n      \"cubbyhole\": 1,\n      \"identity\": 1,\n      \"kv\": 1,\n      \"pki\": 2,\n      \"system\": 1\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null,\n  \"mount_type\": \"system\"\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Auth Login Request with cURL\nDESCRIPTION: Shell command using cURL to authenticate to Vault using the GitHub auth method by sending a login request with a GitHub token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/github/login\n```\n\n----------------------------------------\n\nTITLE: Response Format for Capabilities Check in Vault API\nDESCRIPTION: This JSON response shows the capabilities of the provided token on the requested paths. It includes both an array of capabilities for each specific path and, for backward compatibility when a single path is requested, a 'capabilities' field with the same information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": [\"delete\", \"list\", \"read\", \"update\"],\n  \"secret/foo\": [\"delete\", \"list\", \"read\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Secrets Operator with Helm\nDESCRIPTION: Installs the Vault Secrets Operator using Helm, creating a new namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install --version 0.10.0 --create-namespace --namespace vault-secrets-operator vault-secrets-operator hashicorp/vault-secrets-operator\n```\n\n----------------------------------------\n\nTITLE: Restore Tokenization State - Request Payload\nDESCRIPTION: JSON payload example for restoring tokenization state values. Contains an array of previously snapshotted tokenization state values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\n    \"CiDiVGJaXlcS0ky4mRVvfLdxk7FWh8ATcFMSbQRtWCs/HxJ8CAESIGQH2oukpwPAFoK2SaKUcYAxrnxtvJn7n5d3dWx2eCLcIkZ3FXcQKu5+Bnl4NzOSL2ZkU5t9OOpQOMg0lwsMkq0Vm98ANGC9RabaP2ePddzTkD58GBvsVetYVnqHQFZufQ2pw/EXkFIWMg4I4KvX4vf/////ARCgHw==\",\n    \"CiADFWL7/equiN83oWl/MvYWRYQLvjUxDVvoxK1Ghw4drBJ8CAESIOWPEUBUq4ATLY83P3vLknmWlKYjKVwTgB1z7hYGdyHPIka2nyOX1z3D4pMsZWwMFJlNBiT1Lb4MMZ6CUbclykLw/LBG5GTWQbOXx/3Vd54RAA82382mUem8Lu8BCMJYAa6vj/6aS9CLMg4I4KvX4vf/////ARCIJw==\",\n    \"CiBf2+RqeiXmIHIh2fytEKOesTZ5U31D4BZ5xyhpuj3UfRJ8CAESIOWPEUBUq4ATLY83P3vLknmWlKYjKVwTgB1z7hYGdyHPIkbbU3ho25Om5AsuLUdsAPiEnyRGbtUUDxrvSoz5T1OVY363dN08cN8diJJro+AE/Zv4QMnq9Vbu8FD237YkLV1bnX/t29ZMMg4I4KvX4vf/////ARDwLg==\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a New RSA Key into Transform\nDESCRIPTION: Example of using the 'transform import' command to import a 2048-bit RSA key as a new key in the Transform secrets engine. The command reads the key material from a file called 'test-key' and specifies the RSA-2048 key type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/transform/import.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault transform import transform/keys/test-key @test-key type=rsa-2048\nRetrieving transform wrapping key.\nWrapping source key with ephemeral key.\nEncrypting ephemeral key with transform wrapping key.\nSubmitting wrapped key to Vault transform.\nSuccess!\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate Authority Configuration\nDESCRIPTION: YAML configuration for creating a self-signed certificate authority using cert-manager, including Issuer, Certificate, and CA Issuer definitions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: selfsigned\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: injector-selfsigned-ca\nspec:\n  isCA: true\n  commonName: Agent Inject CA\n  secretName: injector-ca-secret\n  duration: 87660h  # 10 years\n  privateKey:\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: selfsigned\n    kind: Issuer\n    group: cert-manager.io\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: injector-ca-issuer\nspec:\n  ca:\n    secretName: injector-ca-secret\n```\n\n----------------------------------------\n\nTITLE: PGP-Encrypted Root Token Initialization\nDESCRIPTION: Initialize Vault with a PGP-encrypted initial root token\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/init.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvault operator init -root-token-pgp-key=\"keybase:hashicorp\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Azure Auth Roles\nDESCRIPTION: cURL command to list all roles that are registered with the Azure auth method plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/auth/azure/role\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets Engines with Detailed Information\nDESCRIPTION: This command lists all enabled secrets engines with detailed output, including default TTL, max TTL, replication status, and deprecation status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/list.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets list -detailed\nPath           Plugin        Accessor               Default TTL    Max TTL    Force No Cache    Replication    Seal Wrap    External Entropy Access    Options    Description                                                UUID                                  Version    Running Version          Running SHA256    Deprecation Status\n----           ------        --------               -----------    -------    --------------    -----------    ---------    -----------------------    -------    -----------                                                ----                                  -------    ---------------          --------------    ------------------\ncubbyhole/     cubbyhole     cubbyhole_b16d1bc0     n/a            n/a        false             local          false        false                      map[]      per-token private secret storage                           8c64d56b-9d46-d667-1155-a8c1a83a5d01  n/a        v1.12.0+builtin.vault    n/a               n/a\nidentity/      identity      identity_3d67c936      system         system     false             replicated     false        false                      map[]      identity store                                             5aa1e59c-33b5-9dec-05d6-c80c9a800557  n/a        v1.12.0+builtin.vault    n/a               n/a\npostgresql/    postgresql    postgresql_f0a54308    system         system     false             replicated     false        false                      map[]      n/a                                                        8cdc1d2d-0713-eaa6-17e3-49790a60650b  n/a        v1.12.0+builtin.vault    n/a               deprecated\nsys/           system        system_c86bd362        n/a            n/a        false             replicated     true         false                      map[]      system endpoints used for control, policy and debugging    e3193999-0875-d38d-3458-21d9f2762c80  n/a        v1.12.0+builtin.vault    n/a               n/a\n```\n\n----------------------------------------\n\nTITLE: Revoking a Specific Vault Lease\nDESCRIPTION: This snippet demonstrates how to revoke a specific lease using the `vault lease revoke` command.  The command takes the lease ID as an argument and invalidates the underlying secret associated with that lease. This will make the secret unusable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/revoke.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault lease revoke database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nSuccess! Revoked lease: database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\n```\n\n----------------------------------------\n\nTITLE: Connecting to Custom Key Store in AWS CLI\nDESCRIPTION: This command initiates a connection to the previously created custom key store using its ID. It's a necessary step before using the key store for cryptographic operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws kms connect-custom-key-store --custom-key-store-id cks-d7a55fe93d63191d6\n```\n\n----------------------------------------\n\nTITLE: Listing Cross-Cluster Revocations with cURL in Vault PKI\nDESCRIPTION: Makes a LIST request to retrieve certificates that have been revoked across multiple clusters, showing which clusters have a copy of each revoked certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/certs/unified-revoked\n```\n\n----------------------------------------\n\nTITLE: Defining Pod Security Policy Annotations in YAML\nDESCRIPTION: Shows how to set Pod Security Policy annotations in the Helm chart. Two formats are provided: a YAML dictionary and a multi-line templated string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default\n  apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default\n  seccomp.security.alpha.kubernetes.io/defaultProfileName:  runtime/default\n  apparmor.security.beta.kubernetes.io/defaultProfileName:  runtime/default\n# or\nannotations: |\n  seccomp.security.alpha.kubernetes.io/allowedProfileNames: docker/default,runtime/default\n  apparmor.security.beta.kubernetes.io/allowedProfileNames: runtime/default\n  seccomp.security.alpha.kubernetes.io/defaultProfileName:  runtime/default\n  apparmor.security.beta.kubernetes.io/defaultProfileName:  runtime/default\n```\n\n----------------------------------------\n\nTITLE: Creating JSON Payload for Vault License\nDESCRIPTION: This JSON snippet shows the structure of the payload file used to apply a Vault Enterprise license for versions prior to 1.8.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"text\": \"01ABCDEFG...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Account Token Path in HCL\nDESCRIPTION: Configuration block for specifying the location of the Kubernetes service account token file used for persistent cache encryption and decryption. The token file path defaults to the standard Kubernetes service account token mount location.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/caching/persistent-caches/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nservice_account_token_file = \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n```\n\n----------------------------------------\n\nTITLE: POST Request to Rotate GCP Service Account Credentials in Vault\nDESCRIPTION: Shell command illustrating a POST request to rotate the root credentials for a GCP service account in HashiCorp Vault. It replaces existing credentials with a newly generated key. The Vault token must be included in the header. Successful execution rotates the credentials without creating a new service account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/gcp/config/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Example of Checking Vault's ADFS Trust Settings\nDESCRIPTION: A concrete example of the Get-AdfsRelyingPartyTrust command using 'Vault' as the policy name. This retrieves the current configuration for the Vault relying party trust to check its signature requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/adfs-event-320.mdx#2025-04-14_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdfsRelyingPartyTrust -Name \"Vault\"\n```\n\n----------------------------------------\n\nTITLE: Transformation List Response in Vault API\nDESCRIPTION: JSON response structure returned when listing transformations, showing an array of transformation names under the data.keys field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"example-transformation\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Secondary Token Generation\nDESCRIPTION: This JSON response contains the wrapped token needed to set up a secondary Vault node for performance replication. The token is wrapped and has a limited TTL for security purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": null,\n  \"warnings\": null,\n  \"wrap_info\": {\n    \"token\": \"fb79b9d3-d94e-9eb6-4919-c559311133d6\",\n    \"ttl\": 300,\n    \"creation_time\": \"2016-09-28T14:41:00.56961496-04:00\",\n    \"wrapped_accessor\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GCP Service Account Key Generation Request using cURL\nDESCRIPTION: These shell commands demonstrate how to make GET and POST requests to generate a GCP service account key using cURL. The requests include the Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-key-roleset/key\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-key-roleset/key\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault with Multi-line String in Terraform\nDESCRIPTION: This Terraform configuration shows how to set up Vault with a multi-line string for advanced configuration, including HA settings, listener configuration, storage, and AWS KMS seal using the Helm provider.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"helm_release\" \"vault\" {\n  name       = \"vault\"\n  repository = \"https://helm.releases.hashicorp.com\"\n  chart      = \"vault\"\n\n  set {\n    name  = \"server.ha.enabled\"\n    value = \"true\"\n  }\n  set {\n    name  = \"server.ha.raft.enabled\"\n    value = \"true\"\n  }\n  set {\n    name  = \"server.ha.raft.setNodeId\"\n    value = \"true\"\n  }\n  set {\n    name  = \"server.ha.raft.config\"\n    value = <<EOT\nui = false\n\nlistener \"tcp\" {\n  tls_disable = 1\n  address = \"[::]:8200\"\n  cluster_address = \"[::]:8201\"\n}\n\nstorage \"raft\" {\n  path    = \"/vault/data\"\n}\n\nservice_registration \"kubernetes\" {}\n\nseal \"awskms\" {\n  region     = \"us-west-2\"\n  kms_key_id = \"alias/my-kms-key\"\n}\nEOT\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unix Socket Configuration\nDESCRIPTION: Configuration for communicating with Consul over a local unix socket.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {\n  address = \"unix:///tmp/.consul.http.sock\"\n}\n```\n\n----------------------------------------\n\nTITLE: External Policy Certificate Generation Payload\nDESCRIPTION: JSON payload for requesting a certificate using external policy with specified key parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"common_name\": \"example.com\",\n  \"key_type\": \"rsa\",\n  \"key_bits\": 2048\n}\n```\n\n----------------------------------------\n\nTITLE: Create/Update ACL Policy Request\nDESCRIPTION: Creates or updates an ACL policy using POST method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/policies/acl/my-policy\n```\n\n----------------------------------------\n\nTITLE: Enabling Auto-Tidy in Vault PKI\nDESCRIPTION: Command to enable and configure auto-tidy functionality for PKI certificates with recommended default settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write <mount>/config/auto-tidy \\\n    enabled=true \\\n    tidy_cert_store=true \\\n    tidy_revoked_certs=true \\\n    tidy_acme=true \\\n    tidy_revocation_queue=true \\\n    tidy_cross_cluster_revoked_certs=true \\\n    tidy_revoked_cert_issuer_associations=true\n```\n\n----------------------------------------\n\nTITLE: Vault Auth Command Usage\nDESCRIPTION: This snippet provides the general usage syntax for the 'vault auth' command and lists its available subcommands, including disable, enable, help, list, and tune.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault auth <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    disable    Disables an auth method\n    enable     Enables a new auth method\n    help       Prints usage for an auth method\n    list       Lists enabled auth methods\n    tune       Tunes an auth method configuration\n```\n\n----------------------------------------\n\nTITLE: Renewing a Vault Token\nDESCRIPTION: This command renews a Vault token lease using the `vault token renew` subcommand. It requires the token ID to be renewed and Vault to be properly configured and authenticated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token renew 96ddf4bc-d217-f3ba-f9bd-017055595017\n```\n\n----------------------------------------\n\nTITLE: Checking Plugin Version Compatibility\nDESCRIPTION: These commands check configuration details to assess compatibility during an upgrade from Vault 1.12.0 to 1.12.1. They identify if specific plugin versions could cause startup failures due to version constraints. It's essential to make sure the plugin version is compatible before proceeding with the upgrade.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.12.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read sys/auth/approle/tune\nKey                  Value\n---                  -----\n...\nplugin_version       v1.12.0+builtin.vault\n\n$ vault read database/config/snowflake\nKey                                   Value\n---                                   -----\n...\nplugin_name                           snowflake-database-plugin\nplugin_version                        v0.6.0+builtin\n\n$ vault read sys/auth/kubernetes/tune\nKey                  Value\n---                  -----\n...\nplugin_version       v0.14.0+builtin\n```\n\n----------------------------------------\n\nTITLE: Creating a User with Policies in Vault\nDESCRIPTION: This command creates a user named `testuser` within the `userpass` auth method, setting the password to `testpassword` and associating the `totp-policy`. This ensures that the user has the defined policies and is subject to MFA requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/userpass/users/testuser \\\n        password=testpassword \\\n        policies=totp-policy\n```\n\n----------------------------------------\n\nTITLE: Creating KMIP Admin Role\nDESCRIPTION: Command to create an admin role within a KMIP scope with full operational permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write kmip/scope/my-service/role/admin operation_all=true\n```\n\n----------------------------------------\n\nTITLE: Building Vault with FoundationDB Support\nDESCRIPTION: Command to build a development version of Vault with FoundationDB support enabled. The FDB_ENABLED=1 flag is required to include the FoundationDB backend in the build.\nSOURCE: https://github.com/hashicorp/vault/blob/main/physical/foundationdb/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ make dev FDB_ENABLED=1\n```\n\n----------------------------------------\n\nTITLE: Creating Organization Role for HCP Terraform in Vault (Shell)\nDESCRIPTION: This command creates a Vault role to manage an Organization API token for HCP Terraform.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write terraform/role/testing organization=\"${TF_ORGANIZATION}\"\n```\n\n----------------------------------------\n\nTITLE: Setting PKI CRL and Revocation Configuration\nDESCRIPTION: JSON payload for configuring CRL (Certificate Revocation List) and OCSP settings, including expiry times, auto-rebuild options, and enterprise features like unified CRLs and cross-cluster revocation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_106\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expiry\": \"48h\",\n  \"disable\": \"false\",\n  \"ocsp_disable\": \"false\",\n  \"ocsp_expiry\": \"12h\",\n  \"auto_rebuild\": \"true\",\n  \"auto_rebuild_grace_period\": \"8h\",\n  \"enable_delta\": \"true\",\n  \"delta_rebuild_interval\": \"10m\",\n  \"cross_cluster_revocation\": true,\n  \"unified_crl\": true,\n  \"unified_crl_on_existing_paths\": true,\n  \"max_crl_entries\": 100000\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Volume Mounts\nDESCRIPTION: Demonstrates how to mount volumes to containers within the Vault pod configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /usr/local/libexec/vault\n    name: plugins\n    readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Rotating Couchbase Root Credentials\nDESCRIPTION: Command to rotate the admin password for the Couchbase connection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvault write -force database/rotate-root/my-couchbase-database\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Azure Role (JSON)\nDESCRIPTION: JSON payload for creating or updating a Vault role with Azure roles, TTL, and other parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"azure_roles\": \"[\n    {\n      \\\"role_name\\\": \\\"Contributor\\\",\n      \\\"scope\\\":  \\\"/subscriptions/<uuid>/resourceGroups/Website\\\"\n    },\n    {\n      \\\"role_id\\\": \\\"/subscriptions/<uuid>/providers/Microsoft.Authorization/roleDefinitions/<uuid>\\\",\n      \\\"scope\\\":  \\\"/subscriptions/<uuid>\\\"\n    }\n  ]\",\n  \"ttl\": 3600,\n  \"max_ttl\": \"24h\",\n  \"sign_in_audience\": \"AzureADMyOrg\",\n  \"tags\": \"team:engineering, environment:development\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Primary Cluster Merkle Tree Corruption via API (Shell)\nDESCRIPTION: This command sends a GET request to the Vault API endpoint to check for Merkle tree corruption in the primary cluster. It returns a detailed corruption report in JSON format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl $VAULT_ADDR/v1/sys/replication/merkle-check\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Role for Terraform Cloud - HTTP API - Shell\nDESCRIPTION: This snippet outlines how to create or update a role definition for Terraform Cloud in Vault. A POST request is made to the `/terraform/role/:name` endpoint with a JSON payload specifying the role attributes such as user ID, TTL, and max TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/terraform/role/tfuser\n```\n\n----------------------------------------\n\nTITLE: Logging in with LDAP User using cURL\nDESCRIPTION: This script logs in with LDAP credentials by sending a POST request, including the user's password in a JSON payload, to the login endpoint. Authentication details can be supplied via environment variables as well.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/ldap/login/mitchellh\n```\n\n----------------------------------------\n\nTITLE: Tuning Userpass Auth Method in Vault\nDESCRIPTION: This snippet demonstrates how to tune the configuration of the userpass authentication method in Vault using the 'auth tune' subcommand. It sets the maximum lease TTL to 30 minutes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth tune -max-lease-ttl=30m userpass/\nSuccess! Tuned the auth method at: userpass/\n```\n\n----------------------------------------\n\nTITLE: Consul Service Discovery Endpoints\nDESCRIPTION: DNS endpoints for accessing Vault instances through Consul service discovery.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nactive.vault.service.consul\n```\n\nLANGUAGE: text\nCODE:\n```\nstandby.vault.service.consul\n```\n\nLANGUAGE: text\nCODE:\n```\nvault.service.consul\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Recovery Token Generation Progress\nDESCRIPTION: This JSON response shows the status of an in-progress recovery token generation attempt, including the nonce, progress count, required threshold, and completion status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"progress\": 1,\n  \"required\": 3,\n  \"encoded_token\": \"\",\n  \"pgp_fingerprint\": \"\",\n  \"otp_length\": 24,\n  \"complete\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud Spanner Storage Backend in Vault\nDESCRIPTION: Basic configuration for setting up Google Cloud Spanner as a storage backend in Vault. Requires specifying the database path that includes project ID, instance name, and database name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-spanner.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"spanner\" {\n  database = \"projects/my-project/instances/my-instance/databases/my-database\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading AWS IAM Policy from a File with Vault CLI\nDESCRIPTION: This example demonstrates how to upload an AWS IAM policy from a file on disk. The '@' symbol indicates that the content should be loaded from the specified file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/roles/ops policy=@policy.json\n```\n\n----------------------------------------\n\nTITLE: Deleting CF Auth Configuration with cURL\nDESCRIPTION: Shell command showing how to delete the current Cloud Foundry authentication method configuration from Vault using a DELETE request. Requires a valid Vault token for authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/cf/config\n```\n\n----------------------------------------\n\nTITLE: Logging into Vault with JWT for GCP Authentication in JSON\nDESCRIPTION: This JSON snippet illustrates the payload structure for logging into Vault using a JWT for GCP role authentication. It includes `role` for the role name and `jwt` for the signed token. Ensure JWT compatibility with Vault's authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"my-role\",\n  \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Detailed Audit Device Listing in Vault CLI\nDESCRIPTION: Command to retrieve comprehensive information about active audit devices, including replication status and configuration options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/list.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit list -detailed\n```\n\n----------------------------------------\n\nTITLE: Retrieving CF Auth Configuration with cURL\nDESCRIPTION: Shell command example for retrieving the current Cloud Foundry auth method configuration from Vault using a GET request to the config endpoint. Requires a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/cf/config\n```\n\n----------------------------------------\n\nTITLE: Completing the Cluster Upgrade in Vault HA\nDESCRIPTION: This snippet details the steps to complete the upgrade of the active node in a Vault HA cluster. It emphasizes the importance of properly shutting down the active node to allow standby nodes to take over and ensuring that the upgrade process is not interrupted. It also covers the verification of node status and logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/vault-ha-upgrade.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Properly shut down the remaining (active) node via `SIGINT` or `SIGTERM`\n\n   <Warning title=\"Important\">\n   DO NOT attempt to issue a [step-down](/vault/docs/commands/operator/step-down) operation at any time during the upgrade process. \n   </Warning>\n\n   <Note>\n   It is important that you shut the node down properly.\n   This will release the current leadership and the HA lock, allowing a standby node to take over with a very short delay.\n   If you kill Vault without letting it release the lock, a standby node will not be able to take over until the lock's timeout period has expired. This is backend-specific but could be ten seconds or more.\n   </Note>\n\n2. Replace the Vault binary with the new version; ensure that `mlock()` capability is added to the new binary with [setcap](/vault/docs/configuration#disable_mlock)\n3. Start the node\n4. Unseal the node\n5. Verify `vault status` shows correct Version and HA Mode is `standby`\n6. Review the node's logs to ensure successful startup and unseal\n```\n\n----------------------------------------\n\nTITLE: Specifying Resource Requests and Limits in YAML\nDESCRIPTION: Illustrates how to set resource requests and limits for CPU and memory in the Helm chart configuration. This is recommended for efficient resource utilization in Kubernetes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nresources:\n  requests:\n    memory: '256Mi'\n    cpu: '250m'\n  limits:\n    memory: '256Mi'\n    cpu: '250m'\n```\n\n----------------------------------------\n\nTITLE: Logging into Vault using Root Token\nDESCRIPTION: This command logs into the Vault cluster using the root token on the vault-0 pod. This step is necessary before performing administrative tasks like listing Raft peers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-with-raft.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-0 -- vault login\n```\n\n----------------------------------------\n\nTITLE: Listing Policies in Vault via API\nDESCRIPTION: Makes a GET request to the /sys/policy endpoint to retrieve all configured policies. The request requires an authentication token provided in the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policy\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Template with JSON Payload in Vault Transform API\nDESCRIPTION: JSON payload for creating or updating a template in the Vault Transform Secrets Engine, defining a regex pattern with formatting options for encoding and decoding.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"regex\",\n  \"alphabet\": \"builtin/numeric\",\n  \"pattern\": \"(\\\\d{3})[-/](\\\\d{2})[-/](\\\\d{4})\",\n  \"encode_format\": \"$1-$2-$3\",\n  \"decode_formats\": {\n    \"first-three\": \"$1\",\n    \"last-four\": \"$3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Read KV Engine Configuration Response\nDESCRIPTION: This JSON response shows the structure of the data returned when reading the KV engine configuration. It includes settings like cas_required, delete_version_after, and max_versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cas_required\": false,\n    \"delete_version_after\": \"3h25m19s\",\n    \"max_versions\": 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PingID MFA method using Vault HTTP API\nDESCRIPTION: This snippet shows how to add a new PingID MFA method to Vault using the HTTP API. A custom username format and a required base64-encoded settings file from PingID are included in the payload. Ensure you have Vault version 1.13.0 or later for this operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username_format\": \"{{identity.entity.aliases.auth_userpass_1793464a.name}}\",\n  \"settings_file_base64\": \"AA8owj3...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Helm Values for Final Raft Configuration\nDESCRIPTION: This YAML configuration defines the Helm values for the final Raft storage configuration. It includes settings for multiple replicas and the Raft storage setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ cat > vault-raft-values.yml <<EOF\nglobal:\n  enabled: false\nserver:\n  enabled: true\n  image:\n    repository: hashicorp/vault-enterprise\n    tag: 1.14.8-ent\n  enterpriseLicense:\n    secretName: vault-license\n    secretKey: vault.hclic\n  dataStorage:\n    enabled: true\n    size: \"1Gi\"\n  ha:\n    enabled: true\n    replicas: 5\n    raft:\n      enabled: true\n      config: |\n        ui = true\n        service_registration \"kubernetes\" {}\n\n        listener \"tcp\" {\n          address = \":8200\"\n          cluster_address = \":8201\"\n          tls_disable = 1\n        }\n\n        storage \"raft\" {\n          path = \"/vault/data\"\n          retry_join {\n            auto_join_scheme = \"http\"\n            auto_join = \"provider=k8s\"\n          }\n        }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI Tenancy for Vault\nDESCRIPTION: This section provides commands to configure the OCI tenancy by adding policies that allow a dynamic group to call specific OCI Identity APIs. These settings are necessary for enabling the Vault server to make API calls to OCI Identity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nallow dynamic-group VaultDynamicGroup to {AUTHENTICATION_INSPECT} in tenancy\nallow dynamic-group VaultDynamicGroup to {GROUP_MEMBERSHIP_INSPECT} in tenancy\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating RabbitMQ Role via JSON\nDESCRIPTION: Demonstrates JSON payload for creating or updating a RabbitMQ role definition via the Vault API. The payload includes tags, vhosts, and vhost topic permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": \"tag1,tag2\",\n  \"vhosts\": \"{\\\"/\\\": {\\\"configure\\\":\\\".*\\\", \\\"write\\\":\\\".*\\\", \\\"read\\\": \\\".*\\\"}}\",\n  \"vhost_topics\": \"{\\\"/\\\": {\\\"amq.topic\\\": {\\\"write\\\":\\\".*\\\", \\\"read\\\": \\\".*\\\"}}}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Join Command Usage\nDESCRIPTION: Demonstrates how to join a node to the Raft cluster using a leader API address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault operator raft join [options] <leader-api-addr>\n\n  Join the current node as a peer to the Raft cluster by providing the address\n  of the Raft leader node.\n\n\t  $ vault operator raft join \"http://127.0.0.2:8200\"\n```\n\n----------------------------------------\n\nTITLE: List Keys Request\nDESCRIPTION: Authenticated request to list all PKI keys in the mount\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_51\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/keys\n```\n\n----------------------------------------\n\nTITLE: Registering a Community or Custom Plugin with Custom Arguments\nDESCRIPTION: This example demonstrates registering a Community or custom plugin with custom arguments using the -args flag to specify additional runtime parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/register.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register \\\n    -sha256=d3f0a8be02f6c074cf38c9c99d4d04c9c6466249 \\\n    -args=--with-glibc,--with-curl-bindings \\\n    auth my-custom-plugin\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for STS Federation Token (JSON)\nDESCRIPTION: This IAM policy grants permissions for creating STS federation tokens with ec2:* permissions. It's applied to the aws/config/root credentials in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Action\": [\n      \"ec2:*\",\n      \"sts:GetFederationToken\"\n    ],\n    \"Resource\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Connection (Shell)\nDESCRIPTION: This shell command configures a Redis connection in Vault's database secrets engine using the `curl` command.  It sends a POST request to the `/database/config/redis` endpoint with the connection details stored in `payload.json`.  The `X-Vault-Token` header provides authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/redis.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/redis\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Accessor Lookup Request\nDESCRIPTION: This curl command demonstrates how to lookup a secret ID's properties by its accessor using Vault's AppRole authentication method. A Vault token is required in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/approle/role/application1/secret-id-accessor/lookup\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Key Vault Destination with cURL\nDESCRIPTION: A shell command example showing how to use cURL to create a new AWS Secrets Manager destination in Vault. The command sends a POST request with authentication and a JSON payload to the sync destinations endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm/my-store-1\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS STS Dynamic Secrets in Vault\nDESCRIPTION: YAML configuration for VaultDynamicSecret custom resource that generates AWS STS credentials from Vault's AWS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultDynamicSecret\nmetadata:\n  namespace: vso-example\n  name: vault-dynamic-secret-aws-sts\nspec:\n  vaultAuthRef: vault-auth\n  mount: aws\n  path: sts/my-sts-role\n  destination:\n    create: true\n    name: dynamic-aws-sts\n```\n\n----------------------------------------\n\nTITLE: Configuring MongoDB Atlas Programmatic API Key\nDESCRIPTION: This snippet shows the configuration of Vault to use a MongoDB Atlas Programmatic API Key pair. The command writes the public and private keys to Vault's configuration, allowing internal connections to MongoDB Atlas using these credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/mongodbatlas.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write mongodbatlas/config \\\n    public_key=yhltsvan \\\n    private_key=2c130c23-e6b6-4da8-a93f-a8bf33218830\n```\n\n----------------------------------------\n\nTITLE: Reading Secret from Another Namespace in Vault\nDESCRIPTION: This command reads a secret from the `us-east-org` namespace using the Vault token obtained from the `us-west-org` namespace. This demonstrates cross-namespace access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ VAULT_NAMESPACE=us-east-org VAULT_TOKEN=$(cat token.txt) vault kv get kv-marketing/campaign\n```\n\n----------------------------------------\n\nTITLE: Querying Token Self-Capabilities Sample Payload in JSON\nDESCRIPTION: This JSON payload example shows how to format the request to the `/sys/capabilities-self` endpoint, specifying the paths on which capabilities are being queried.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities-self.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"paths\": [\"secret/foo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Snapshot Inspect Example\nDESCRIPTION: Shows how to inspect a Raft snapshot file using the command line.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator raft snapshot inspect raft.snap\n```\n\n----------------------------------------\n\nTITLE: Retrieving HCP Terraform User Credentials from Vault (Shell)\nDESCRIPTION: This command retrieves a User API token for the specified HCP Terraform role from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read terraform/creds/user-testing\n```\n\n----------------------------------------\n\nTITLE: Masking Synced Secret Values in GitHub Actions\nDESCRIPTION: Use this GitHub Actions workflow snippet to mask individual values for each sub-key when using secret-path granularity. This prevents unintended disclosure of secrets in GitHub Action outputs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n  name: Mask synced secret values\n\n  on:\n    workflow_dispatch\n\n  jobs:\n    synced-secret-examples:\n      runs-on: ubuntu-latest\n      steps:\n        - name: ✓ Mask synced secret values\n          run: |\n            for v in $(echo '${{ secrets.VAULT_KV_1234_MY_SECRET }}' | jq -r '.[]'); do\n              echo \"::add-mask::$v\"\n            done\n```\n\n----------------------------------------\n\nTITLE: Sample payload for Create/Update Static Role\nDESCRIPTION: This JSON payload is structured for creating or updating a static role in Vault, specifying the IAM username and the desired rotation period for access keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"username\": \"example-user\",\\n  \"rotation_period\": \"11h30m\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Enable OCI Auth Method in Vault\nDESCRIPTION: This command enables the OCI Auth method in Vault, which is required to authenticate users and instances using OCI credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth enable oci\n```\n\n----------------------------------------\n\nTITLE: Configuring a Role-Based STS Credential Generation in AliCloud\nDESCRIPTION: Command to configure a Vault role that generates STS credentials by assuming a specified RAM role in AliCloud. This requires the role to have the Vault user as a trusted actor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write alibaba/role/role-based \\\n      role_arn='acs:ram::5138828231865461:role/hastrustedactors'\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultStaticSecret for KV-v1 in YAML\nDESCRIPTION: Defines configuration for synchronizing a KV version 1 secret from Vault to a Kubernetes Secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  namespace: vso-example\n  name: vault-static-secret-v1\nspec:\n  vaultAuthRef: vault-auth\n  mount: kvv1\n  type: kv-v1\n  path: eng/apikey/google\n  refreshAfter: 60s\n  destination:\n    create: true\n    name: static-secret1\n```\n\n----------------------------------------\n\nTITLE: Executing Wrapping Token Lookup API Call\nDESCRIPTION: cURL command demonstrating how to make a POST request to the wrapping lookup endpoint with authentication and payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-lookup.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/wrapping/lookup\n```\n\n----------------------------------------\n\nTITLE: Mount UUID Cache Response in Vault\nDESCRIPTION: The JSON response from the UUID cache endpoint lists all mount entries, providing details such as accessor IDs, namespaces, mount paths, types, and UUIDs for each mounted backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"71512d6c-bb77-2e05-c24e-07c964139fdb\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"uuid\": [\n      {\n        \"accessor\": \"auth_token_d5fcf970\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"token/\",\n        \"mount_type\": \"token\",\n        \"uuid\": \"de61dd8c-a181-ccc2-457d-908e417d10b0\"\n      },\n      {\n        \"accessor\": \"cubbyhole_58b6727b\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"cubbyhole/\",\n        \"mount_type\": \"cubbyhole\",\n        \"uuid\": \"496bc2e4-b641-2561-1829-f6557bf1fedc\"\n      },\n      {\n        \"accessor\": \"system_0157e00a\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"sys/\",\n        \"mount_type\": \"system\",\n        \"uuid\": \"8ac2615e-8a73-fe66-52a6-a422f7e3273f\"\n      },\n      {\n        \"accessor\": \"identity_2ccfb6ab\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"identity/\",\n        \"mount_type\": \"identity\",\n        \"uuid\": \"b15e93e0-5bf1-07b0-86d3-563f9c77eef1\"\n      }\n    ]\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Signature Between Issuer Certificates in Vault\nDESCRIPTION: This command verifies the signature between parent and child issuer certificates. It checks subject matches, path matches, trust relationships, key ID matches, and signature validation between the certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki verify-sign pki_root/issuer/root pki_int/issuer/FirstDepartment\nissuer:pki_root/issuer/root\nissued:pki_int/issuer/FirstDepartment\n\nfield              value\n-----              -----\nsubject_match      true\npath_match         true\ntrust_match        true\nkey_id_match       true\nsignature_match    true\n```\n\n----------------------------------------\n\nTITLE: Updating Group by ID - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to update an existing group in Vault's Identity store using its ID.  It sends a POST request to the `/identity/group/id/:id` endpoint, replacing `:id` with the actual group ID, including a Vault token and the JSON payload with updated group details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/group/id/363926d8-dd8b-c9f0-21f8-7b248be80ce1\n```\n\n----------------------------------------\n\nTITLE: Response Sample for Static Role with Rotation Schedule in Vault\nDESCRIPTION: JSON response from Vault showing a static role configured with a weekly rotation schedule (Saturdays) instead of a rotation period. Includes the same credential type and database configuration as the period-based example.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"credential_type\": \"password\",\n    \"db_name\": \"mysql\",\n    \"username\": \"static-user\",\n    \"rotation_statements\": [\n      \"ALTER USER \\\"{{name}}\\\" IDENTIFIED BY '{{password}}';\"\n    ],\n    \"rotation_schedule\": \"0 0 * * SAT\",\n    \"rotation_window\": 3600,\n    \"skip_import_rotation\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Issuer Certificate with Vault API\nDESCRIPTION: This code snippet demonstrates how to revoke an issuer certificate using the Vault PKI secrets engine API. It uses a POST request to the `/pki/issuer/:issuer_ref/revoke` endpoint, requiring a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_72\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/pki/issuer/old-intermediate/revoke\n```\n\n----------------------------------------\n\nTITLE: Renewing a Service Account Check-Out in Vault\nDESCRIPTION: Command to extend the duration of a service account check-out by renewing its lease.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ vault lease renew ldap/library/accounting-team/check-out/0C2wmeaDmsToVFc0zDiX9cMq\nKey                Value\n---                -----\nlease_id           ldap/library/accounting-team/check-out/0C2wmeaDmsToVFc0zDiX9cMq\nlease_duration     10h\nlease_renewable    true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Runtime Information\nDESCRIPTION: Command example showing how to get detailed information about a specific plugin runtime from the Vault catalog.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin runtime info -type=container runc\n```\n\n----------------------------------------\n\nTITLE: Enabling Disaster Recovery Replication on Secondary\nDESCRIPTION: This command enables disaster recovery replication on the secondary cluster using the token from the primary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-secondary-0 -- vault write sys/replication/dr/secondary/enable token=<TOKEN FROM PRIMARY>\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading a CA Certificate Role\nDESCRIPTION: This JSON response contains information about a CA certificate role, including the certificate, display name, and various settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\",\n    \"display_name\": \"test\",\n    \"policies\": \"\",\n    \"allowed_names\": \"\",\n    \"required_extensions\": \"\",\n    \"ttl\": 2764800,\n    \"max_ttl\": 2764800,\n    \"period\": 0\n  },\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Password Policy using cURL\nDESCRIPTION: This snippet shows how to read a specific password policy using a cURL request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/password/my-policy\n```\n\n----------------------------------------\n\nTITLE: Backup Keys Response Example\nDESCRIPTION: JSON response containing PGP-encrypted backup recovery key shares\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"keys\": {\n    \"abcd1234\": \"...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH CA in Vault\nDESCRIPTION: Example of submitting CA information for the SSH secrets engine using a POST request. The request includes a JSON payload to configure the CA with Vault-generated keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/config/ca\n```\n\n----------------------------------------\n\nTITLE: Reading AWS Secrets Engine Lease Settings\nDESCRIPTION: cURL command to retrieve the current lease settings for the AWS secrets engine, showing how long generated credentials will be valid by default.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/aws/config/lease\n```\n\n----------------------------------------\n\nTITLE: Sample response for AssumeRole request\nDESCRIPTION: This JSON object represents the expected response from the assume role request, containing the access key, secret key, and optional session token along with the ARN of the assumed role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"data\": {\\n    \"access_key\": \"AKIA...\",\\n    \"secret_key\": \"xlCs...\",\\n    \"session_token\": null,\\n    \"arn\": \"arn:aws:sts::123456789012:assumed-role/DeveloperRole/some-user-supplied-role-session-name\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Policy via API\nDESCRIPTION: API request to create a new policy using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_24\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n  --request POST \\\n  --header \"X-Vault-Token: ...\" \\\n  --data '{\"policy\":\"path \\\"...\\\" {...} \"}' \\\n  https://vault.hashicorp.rocks/v1/sys/policy/policy-name\n```\n\n----------------------------------------\n\nTITLE: Creating Login MFA Enforcement\nDESCRIPTION: Applies MFA enforcement to a specific authentication method using method and accessor IDs\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nVAULT_TOKEN=root vault write \\/identity\\/mfa\\/login-enforcement\\/adtotp \\n    mfa_method_ids=$TOTP_METHOD_ID \\n    auth_method_accessors=$ACCESSOR\n```\n\n----------------------------------------\n\nTITLE: LDAP Login with TOTP MFA\nDESCRIPTION: Example of logging in via LDAP with multi-factor authentication, prompting for TOTP passcode\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nvault login -method=ldap username=alice password=\\'password!\\'\nEnter the passphrase for methodID \"01194a79-e2d9-c038-029d-79b0091cafd0\" of type \"totp\":\n```\n\n----------------------------------------\n\nTITLE: Listing Key Names in Vault KV Secrets Engine using Shell\nDESCRIPTION: This example demonstrates how to use the 'vault kv list' command to list key names under a specific path in Vault's KV secrets engine. It shows the command syntax and example output.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv list -mount=secret my-app/\nKeys\n----\nadmin_creds\ndomain\neng_creds\nqa_creds\nrelease\n```\n\n----------------------------------------\n\nTITLE: Reading a Transformation - cURL Request\nDESCRIPTION: Sample cURL request for reading details about an existing transformation. This GET request fetches all configuration information for the specified transformation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transform/transformation/example-transformation\n```\n\n----------------------------------------\n\nTITLE: Disable Vault Audit Device\nDESCRIPTION: This command disables an audit device in Vault. It deactivates the audit device specified by the `device_path` without destroying the data it has already logged. The operation is idempotent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/disable.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit disable [flags] <device_path>\n\n$ vault audit disable [-help | -h]\n```\n\n----------------------------------------\n\nTITLE: Generate Random Bytes cURL Request\nDESCRIPTION: Shell command demonstrating how to request 164 random bytes using cURL with a JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/tools.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/tools/random/164\n```\n\n----------------------------------------\n\nTITLE: Replacing KV Secret with kv put Command\nDESCRIPTION: This shell command utilizes the 'vault kv put' command to replace an existing secret with a new set of key-value pairs. The operation requires both the existing and new data to form the updated secret. Ensure the Vault CLI is installed and properly configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/patch.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv put -mount=secret creds ttl=48h passcode=my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Policies\nDESCRIPTION: JSON response from the list policies endpoint showing all configured policies in the Vault instance. The response contains an array of policy names under the 'policies' key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policy.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\"root\", \"deploy\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Affinity for Vault Agent Injector\nDESCRIPTION: This YAML snippet defines affinity rules for Vault Agent Injector pods. It uses pod anti-affinity to ensure only one pod runs per node, which minimizes cluster failure risk if a node is lost.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n# Recommended default server affinity:\naffinity: |\n  podAntiAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n    - labelSelector:\n        matchLabels:\n          app.kubernetes.io/name: {{ template \"vault.name\" . }}-agent-injector\n          app.kubernetes.io/instance: \"{{ .Release.Name }}\"\n          component: webhook\n      topologyKey: kubernetes.io/hostname\n```\n\n----------------------------------------\n\nTITLE: SSH Certificate and Key Generation API Response in Vault\nDESCRIPTION: Sample response from generating SSH credentials, containing the private key, signed certificate, and related metadata. The response includes both the private key (which must be securely stored) and the signed certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"94fd1102-08a1-c207-0e3e-657e8f80c09e\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"serial_number\": \"1e965817eb12a511\",\n    \"signed_key\": \"ssh-rsa-cert-v01@openssh.com AAAAHHN...\\n\",\n    \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQIBAAKCAQEAwer03vkQrPV+wWpbisJJv2CKqHmMz+Ej0ctLbhpOmR2CY9S9\\n...\\nQN351pgTphi6nlCkGPzkDuwvtxSxiCWXQcaxrHAL7MiJpPzkIBq1\\n-----END RSA PRIVATE KEY-----\\n\",\n    \"private_key_type\": \"rsa\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Extension File for Certificate Signing\nDESCRIPTION: Creates a configuration file specifying additional parameters for signing the Vault Agent Injector certificate, including Subject Alternative Names (SANs) for Kubernetes service discovery.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cat <<EOF >csr.conf\nauthorityKeyIdentifier=keyid,issuer\nbasicConstraints=CA:FALSE\nkeyUsage = digitalSignature, nonRepudiation, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[alt_names]\nDNS.1 = vault-agent-injector-svc\nDNS.2 = vault-agent-injector-svc.vault\nDNS.3 = vault-agent-injector-svc.vault.svc\nDNS.4 = vault-agent-injector-svc.vault.svc.cluster.local\nEOF\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reindex Operation\nDESCRIPTION: JSON response showing the result of a reindex operation, including any warnings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": [\"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Secrets with Namespace Filter\nDESCRIPTION: Command to list Vault secrets in the admin namespace while filtering out system paths. Shows how to verify the accessor value matches the Terraform state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nvault secrets list -namespace=\"admin\" | grep -vEw '(cubbyhole|identity|sys)'\n```\n\n----------------------------------------\n\nTITLE: Listing Keys in KMS Provider - cURL Example\nDESCRIPTION: Sample cURL command for listing all keys that have been distributed to a specific KMS provider using the LIST method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/keymgmt/kms/example-kms/key\n```\n\n----------------------------------------\n\nTITLE: Response Format for Listing Issuers in Vault PKI\nDESCRIPTION: JSON response showing available issuers in the PKI mount point, including both their UUIDs and friendly names that can be used for future references.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"1ae8ce9d-2f70-0761-a465-8c9840a247a2\": {\n        \"issuer_name\": \"imported-root\"\n      },\n      \"3dc79a5a-7a6c-70e2-1123-94b88557ba12\": {\n        \"issuer_name\": \"root-x1\"\n      }\n    },\n    \"keys\": [\n      \"1ae8ce9d-2f70-0761-a465-8c9840a247a2\",\n      \"3dc79a5a-7a6c-70e2-1123-94b88557ba12\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improving PKCS7 Signatures in AWS Authentication Release Note\nDESCRIPTION: This release note documents the change of default hashing algorithm for PKCS7 signatures to SHA256, which enhances security and aligns with Go version 1.18 specifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16455.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nauth/aws: PKCS7 signatures will now use SHA256 by default in prep for Go 1.18\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Ports for Vault Sync\nDESCRIPTION: Specifies a list of port numbers that sync clients are permitted to connect to. This restricts network access to specific ports, enhancing security by limiting potential connection endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/sync-ssrf-fields.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nallowed_ports = [80, 443, 8080]\n```\n\n----------------------------------------\n\nTITLE: Listing Mounted Secrets Engines in Vault\nDESCRIPTION: GET request to list all mounted secrets engines in Vault. Requires Vault token for authentication. Returns details about each mount including type, configuration and description.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/mounts\n```\n\n----------------------------------------\n\nTITLE: Configuring Authorization for Prometheus ServiceMonitor\nDESCRIPTION: Example of authorization configuration for Prometheus metrics scraping using credentials from secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_55\n\nLANGUAGE: yaml\nCODE:\n```\nauthorization:\n  credentials:\n    name: vault-metrics-client\n    key: token\n```\n\n----------------------------------------\n\nTITLE: Response from Key Export Operation\nDESCRIPTION: Example JSON response from a key export operation, showing multiple versions of the exported key in base64-encoded format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"foo\",\n    \"keys\": {\n      \"1\": \"eyXYGHbTmugUJn6EtYD/yVEoF6pCxm4R/cMEutUm3MY=\",\n      \"2\": \"Euzymqx6iXjS3/NuGKDCiM2Ev6wdhnU+rBiKnJ7YpHE=\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Ports for Vault Server\nDESCRIPTION: Shows how to add additional ports to the Vault server StatefulSet for monitoring or other purposes\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nextraPorts:\n  - containerPort: 8300\n    name: http-monitoring\n```\n\n----------------------------------------\n\nTITLE: Generating OAuth2 Access Token from Roleset (cURL)\nDESCRIPTION: cURL command to generate an OAuth2 access token from a roleset configured in the GCP secrets engine. The generated token can be used for GCP API authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-token-roleset/token\n```\n\n----------------------------------------\n\nTITLE: Verifying Vault Service Configuration in Windows\nDESCRIPTION: Displays the complete configuration for the Vault Windows service to verify all settings before starting the service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\nnssm dump MS_VAULT | Foreach {$_ -replace '.+nssm\\.exe ',''}\n```\n\n----------------------------------------\n\nTITLE: Reissuing a Certificate in Vault PKI\nDESCRIPTION: This command reissues an issuer certificate using an existing template and parent certificate. It creates a new certificate with the same field structure but potentially different values, such as issuer name and common name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki reissue -issuer_name=\"SecondDepartment\" /pki_root/issuer/default /pki_int/issuer/FirstDepartment /pki_int_2/ common_name=\"second-department.example.com\"\nKey                               Value\n---                               -----\nca_chain                          [-----BEGIN CERTIFICATE-----\nMIID0DCCArigAwIBAgIUdfRe05B5eRXsg3pvsJ/g94eYuWkwDQYJKoZIhvcNAQEL\n```\n\n----------------------------------------\n\nTITLE: Creating an Entity Alias in Vault Identity (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to create a new entity alias in Vault using the Identity store API. It sends a POST request to the `/identity/entity-alias` endpoint with the JSON payload specified in the `@payload.json` file. A valid Vault token is required in the `X-Vault-Token` header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/entity-alias\n```\n\n----------------------------------------\n\nTITLE: Creating a Role via Vault CLI Command\nDESCRIPTION: This Bash snippet demonstrates how to create an AWS role using the Vault CLI, providing the credential type and IAM tags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nvault write aws/roles/example-role \\\n    credential_type=iam_user \\\n    iam_tags=\"first_key=first_value\" \\\n    iam_tags=\"second_key=second_value\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault write aws/roles/example-role \\\n    credential_type=iam_user \\\n    iam_tags=@test.json\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault TCP Listener with Telemetry\nDESCRIPTION: Configuration for enabling unauthenticated metrics access in Vault's TCP listener configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_52\n\nLANGUAGE: yaml\nCODE:\n```\nlistener \"tcp\" {\n  tls_disable = 1\n  address     = \"0.0.0.0:8200\"\n\n  telemetry {\n    unauthenticated_metrics_access = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Sealwrap Rewrap Process in Vault\nDESCRIPTION: POST request to start a new seal rewrap process. The operation runs in the background and returns different status codes based on whether a process is already running (200) or was successfully started (204).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/sealwrap-rewrap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/sealwrap/rewrap\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Token Revocation\nDESCRIPTION: This snippet shows the CURL command to revoke a token by specifying the token ID in the data payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/revoke\n```\n\n----------------------------------------\n\nTITLE: Generating Root Token Nonce with OTP in Vault CLI\nDESCRIPTION: This command initializes the root token generation process using a one-time password (OTP). It returns a nonce and OTP that are crucial for the subsequent steps.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/generate-root-token.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator generate-root -init\n```\n\n----------------------------------------\n\nTITLE: Trim Key Versions Using Curl in Shell\nDESCRIPTION: This curl command demonstrates how to trim older key versions in the Vault Transit Engine. This process permanently deletes versions prior to the specified minimum available version. A valid Vault token and JSON payload are required.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_71\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key/trim\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Agent Address via CLI and Environment Variable\nDESCRIPTION: Demonstrates two methods to specify the Vault Agent address: using a CLI flag or setting an environment variable. The address parameter accepts a URL string pointing to the Vault Agent endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/agent-address.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-agent-address \"https://mydomain/vault-agent:8200\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_AGENT_ADDR=\"https://mydomain/vault-agent:8200\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Source in HCL\nDESCRIPTION: This HCL snippet defines a GCP source configuration used to import secrets from GCP Secret Manager into Vault. It specifies the name of the source, the Vault mount path, role name, and namespace required for dynamic credential generation. Ensure that the GCP secrets engine is preconfigured in Vault with the same names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/gcpsm.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsource_gcp {\n  name             = \"my-gcp-source-1\"\n  vault_mount_path = \"gcp\"\n  vault_role_name  = \"my-gcp-role-1\"\n  vault_namespace  = \"ns-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting PKI Secrets Engine for Intermediate CA in Vault\nDESCRIPTION: Mounts a new PKI secrets engine at the path 'pki_int' to be used as an intermediate certificate authority.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=pki_int pki\n```\n\n----------------------------------------\n\nTITLE: Creating a Vault Namespace via CLI\nDESCRIPTION: This snippet demonstrates how to create a new namespace in Vault using the `vault namespace create` command. Replace `YOUR_NAMESPACE_NAME` with the desired name for the new namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace create YOUR_NAMESPACE_NAME\n```\n\n----------------------------------------\n\nTITLE: Executing KV Undelete Command in Shell\nDESCRIPTION: This shell command restores the deleted data for a specific version of a key in the key-value store. It requires the version number to be specified and optionally, the mount path if the default is not being used. The command outputs a success message upon completion.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/undelete.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv undelete -mount=secret -versions=3 creds\\nSuccess! Data written to: secret/undelete/creds\n```\n\n----------------------------------------\n\nTITLE: Retrieve Cache Configurations Using Curl in Shell\nDESCRIPTION: The curl command retrieves the current cache configuration for the Vault Transit Secrets Engine. Authorization with a valid Vault token is required, and the operation returns the current cache size settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_75\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/transit/cache-config\n```\n\n----------------------------------------\n\nTITLE: Exporting Vault Address - Shell\nDESCRIPTION: This snippet shows how to set the VAULT_ADDR environment variable to specify the address of the Vault server. This variable must be set for subsequent interactions with the Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_ADDR='http://127.0.0.1:8200'\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Role Tags - Shell Request and Payload\nDESCRIPTION: HTTP POST request to create role tags with specific policies and parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\"default\", \"dev-api\"]\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/role/dev-api-and-web-role/tag\n```\n\n----------------------------------------\n\nTITLE: Impersonated Account Configuration Response (JSON)\nDESCRIPTION: Sample JSON response from reading an impersonated account configuration, showing the service account details, token scopes, and TTL for generated tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"service_account_email\": \"projectOwner@my-project.iam.gserviceaccount.com\",\n    \"service_account_project\": \"my-project\",\n    \"token_scopes\": [\n      \"https://www.googleapis.com/auth/cloud-platform\",\n      \"https://www.googleapis.com/auth/bigquery\"\n    ],\n    \"ttl\": 7200\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Base64-Encoded Digest of a File\nDESCRIPTION: This snippet demonstrates how to calculate a base64-encoded binary digest of a file using OpenSSL. The digest is generated using the SHA-384 hashing algorithm, which corresponds to the selected key type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n$ export DIGEST=$(openssl dgst -sha384 -binary /my/file | base64)\n```\n\n----------------------------------------\n\nTITLE: Read Secret Version Response\nDESCRIPTION: This JSON response represents the structure of the data returned when reading a secret version.  It includes the secret data and metadata such as creation time, custom metadata, deletion time, destroyed status, and version number.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"data\": {\n      \"foo\": \"bar\"\n    },\n    \"metadata\": {\n      \"created_time\": \"2018-03-22T02:24:06.945319214Z\",\n      \"custom_metadata\": {\n        \"owner\": \"jdoe\",\n        \"mission_critical\": \"false\"\n      },\n      \"deletion_time\": \"\",\n      \"destroyed\": false,\n      \"version\": 2\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending SAML Config Request with cURL\nDESCRIPTION: This cURL command sends a PUT request to configure the SAML auth method using the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request PUT \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/saml/config\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Signing - JSON\nDESCRIPTION: This JSON object shows the expected response when signing a digest using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"signature\": \"MGYCMQCOfWMc21jBevoRRo4zGjYsCXer8s...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Library Set Status Request\nDESCRIPTION: Shell command to check the status of service accounts in a library set using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/ldap/library/accounting-team/status\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Auth Method via CLI\nDESCRIPTION: Command to configure the Azure authentication method in Vault by providing tenant ID, resource URL, client ID, and client secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/azure/config \\\n    tenant_id=7cd1f227-ca67-4fc6-a1a4-9888ea7f388c \\\n    resource=https://management.azure.com/ \\\n    client_id=dd794de4-4c6c-40b3-a930-d84cd32e9699 \\\n    client_secret=IT3B2XfZvWnfB98s1cie8EMe7zWg483Xy8zY004=\n```\n\n----------------------------------------\n\nTITLE: Disabling an Auth Method in Vault\nDESCRIPTION: This snippet shows how to disable an auth method at a given path using a DELETE request to the `/sys/auth/:path` endpoint. It requires sudo capability and removes the specified auth method from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/auth.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/auth/my-auth\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS Role - Shell Request\nDESCRIPTION: HTTP DELETE request to remove a registered AWS role from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/aws/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Obtain Vault Token - Shell\nDESCRIPTION: This shell command illustrates how to make a POST request to the endpoint responsible for obtaining a Vault token, providing the necessary headers and data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/saml/token\n```\n\n----------------------------------------\n\nTITLE: Creating a GCP Secret Manager Destination with cURL\nDESCRIPTION: A shell command example showing how to use cURL to create a new GCP Secret Manager destination in Vault. The command sends a POST request with authentication and a JSON payload to the sync destinations endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/sync/destinations/gcp-sm/my-store-1\n```\n\n----------------------------------------\n\nTITLE: Writing Cassandra Configuration to Vault using CLI\nDESCRIPTION: Shell command demonstrating how to write a Cassandra configuration to Vault using the CLI, referencing a JSON file for PEM data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/cassandra.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault write database/config/cassandra-example <...other fields> pem_json=@/path/to/file.json\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Response for SAML SSO Service - JSON\nDESCRIPTION: This JSON snippet represents a sample response from the Vault SAML SSO service URL, providing the SSO service URL and a token polling ID for subsequent requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sso_service_url\": \"https://example.okta.com/app/abc123eb9xnIfzlaf697/id/sso/saml?RelayState=...&SAMLRequest=...\",\n  \"token_poll_id\": \"ee442348-159b-df10-4c59-63050069df4d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating an Audit Request Header in Vault\nDESCRIPTION: Shell request to configure a specific header for auditing. Requires a token with sudo capability and a JSON payload specifying the header configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-auditing.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/config/auditing/request-headers/my-header\n```\n\n----------------------------------------\n\nTITLE: Creating a Group - Vault Identity API (JSON Response)\nDESCRIPTION: This JSON response shows the data returned after successfully creating a group in Vault. The response includes the generated ID and the name of the created group.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"363926d8-dd8b-c9f0-21f8-7b248be80ce1\",\n    \"name\": \"group_ab813d63\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding Example\nDESCRIPTION: Shell command demonstrating how to base64 encode plaintext data before encryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\necho \"the quick brown fox\" | base64\n```\n\n----------------------------------------\n\nTITLE: Reading Key Information - JSON Response Example\nDESCRIPTION: Sample JSON response when retrieving information about a key, showing name, protection level, purpose, and multiple versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"example-key-<unix_timestamp>\",\n    \"protection\": \"hsm\",\n    \"purpose\": \"encrypt,decrypt\",\n    \"versions\": {\n      \"1\": \"c96a8956194f4632bc3837b64a1b45b1\",\n      \"2\": \"01ce657d33f64eb38f9432be543f3f52\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: API Response for Successful Userpass Authentication in Vault\nDESCRIPTION: This JSON snippet represents the response from a successful authentication request using the userpass method. It includes the client token, associated policies, and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/userpass.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"auth\": {\n    \"client_token\": \"c4f280f6-fdb2-18eb-89d3-589e2e834cdb\",\n    \"policies\": [\"admins\"],\n    \"metadata\": {\n      \"username\": \"mitchellh\"\n    },\n    \"lease_duration\": 0,\n    \"renewable\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Client Timeout for Large Raft Snapshots\nDESCRIPTION: Allows extending the default timeout for taking or restoring Raft snapshots in Vault by setting the VAULT_CLIENT_TIMEOUT environment variable. This helps manage large snapshot operations that may exceed standard timeout limits.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/raft-large-snapshots.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_CLIENT_TIMEOUT=<desired_timeout_value>\n```\n\n----------------------------------------\n\nTITLE: Basic Vault Listener Stanza Reference\nDESCRIPTION: The listener stanza is a core configuration block in Vault that defines how the server accepts network connections. It supports two types of listeners: TCP for network connections and Unix Domain Sockets for local inter-process communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlistener\n```\n\n----------------------------------------\n\nTITLE: Listing All Enabled Secrets Engines in Vault\nDESCRIPTION: This command lists all currently enabled secrets engines in the Vault instance, displaying their path, type, and description. The output includes built-in engines like cubbyhole, system, and any user-enabled engines.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets list\nPath          Type         Description\n----          ----         -----------\ncubbyhole/    cubbyhole    per-token private secret storage\ndatabase/     database     n/a\nsecret/       kv           key/value secret storage\nsys/          system       system endpoints used for control, policy and debugging\n```\n\n----------------------------------------\n\nTITLE: Checking System Health and HA Status Endpoints\nDESCRIPTION: These code snippets show the system endpoints that can be used to display lags in performance secondaries and performance standby nodes for clock skew and replication lag detection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.17.0.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nsys/health\n```\n\nLANGUAGE: markdown\nCODE:\n```\nsys/ha-status\n```\n\n----------------------------------------\n\nTITLE: SAML Config Response in JSON\nDESCRIPTION: This JSON response contains the current SAML auth method configuration, including ACS URLs, entity ID, and metadata URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"09c907d2-2dbe-8a5c-ca97-fad83195738b\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"acs_urls\": [\n      \"https://my.vault/v1/auth/saml/callback\"\n    ],\n    \"default_role\": \"admin\",\n    \"entity_id\": \"https://my.vault/v1/auth/saml\",\n    \"idp_metadata_url\": \"https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml/metadata\"\n    \"validate_assertion_signature\" : false,\n    \"validate_response_signature\" : false\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Subtree Root Corruption via CLI (Shell)\nDESCRIPTION: This Vault CLI command checks if any subtree root is corrupted. It uses jq to parse the JSON output and filter for corrupted subtree roots.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/replication/merkle-check -format=json \\\n    | jq -r '.data.merkle_corruption_report.corrupted_tree_map[] | select(.corrupted_subtree_root==true)'\n```\n\n----------------------------------------\n\nTITLE: Looking Up Namespace Information - Vault CLI - Shell\nDESCRIPTION: Retrieve detailed information about a specific namespace by its path in Vault. Requires appropriate access permissions and a valid namespace path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/namespace.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace lookup ns1/\n```\n\n----------------------------------------\n\nTITLE: Vault HA Status Response Format\nDESCRIPTION: This JSON response shows the structure of data returned by the /sys/ha-status endpoint. It contains an array of nodes in the cluster, with details about each node including active status, addresses, and various metrics related to cluster health and communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/ha-status.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Nodes\": [\n    {\n      \"active_node\": true,\n      \"api_address\": \"http://10.0.0.2:8200\",\n      \"clock_skew_ms\": 0,\n      \"cluster_address\": \"https://10.0.0.2:8201\",\n      \"echo_duration_ms\": 0,\n      \"hostname\": \"node1\",\n      \"last_echo\": null,\n      \"replication_primary_canary_age_ms\": 0,\n      \"version\": \"1.17.0\",\n      \"upgrade_version\": \"1.17.0\",\n      \"redundancy_zone\": \"a\"\n    },\n    {\n      \"active_node\": false,\n      \"api_address\": \"http://10.0.0.3:8200\",\n      \"clock_skew_ms\": 0,\n      \"cluster_address\": \"https://10.0.0.3:8201\",\n      \"echo_duration_ms\": 20,\n      \"hostname\": \"node2\",\n      \"last_echo\": \"2024-03-04T08:05:48.403148-05:00\",\n      \"replication_primary_canary_age_ms\": 72,\n      \"version\": \"1.17.0\",\n      \"upgrade_version\": \"1.17.0\",\n      \"redundancy_zone\": \"a\"\n    },\n    {\n      \"active_node\": false,\n      \"api_address\": \"http://10.0.0.4:8200\",\n      \"clock_skew_ms\": -1,\n      \"cluster_address\": \"https://10.0.0.4:8201\",\n      \"echo_duration_ms\": 17,\n      \"hostname\": \"node3\",\n      \"last_echo\": \"2024-03-04T08:05:48.657318-05:00\",\n      \"replication_primary_canary_age_ms\": 950,\n      \"version\": \"1.17.0\",\n      \"upgrade_version\": \"1.17.0\",\n      \"redundancy_zone\": \"a\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing IAM and EC2 Authentication Methods\nDESCRIPTION: In-depth comparison of IAM and EC2 authentication methods in Vault, covering authentication entities, mechanisms, security characteristics, and specific use cases\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## Comparison of the IAM and EC2 methods\n```\n\n----------------------------------------\n\nTITLE: Deleting Raw Storage Values in Vault with cURL\nDESCRIPTION: Makes a DELETE request to remove raw data from Vault's storage backend at a specified path. Requires an authentication token and permanently removes the specified storage entry.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/raw.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/raw/secret/foo\n```\n\n----------------------------------------\n\nTITLE: Adding Permit-Pty Extension in Signing\nDESCRIPTION: Add the permit-pty extension during the signing operation itself for roles in Vault, facilitating terminal interaction capabilities for SSH connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh-client-signer/sign/my-role -<<\"EOH\"\n{\n  \"extensions\": {\n    \"permit-pty\": \"\"\n  }\n  // ...\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Scheduling Root Credential Rotation\nDESCRIPTION: Configure automatic root credential rotation with a specific schedule and optional rotation window in Vault AWS secrets engine\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write aws/config/root \\\n  rotation_schedule=\"0 * * * SAT\"\n```\n\n----------------------------------------\n\nTITLE: Reading Azure Secrets Engine Configuration (cURL)\nDESCRIPTION: cURL command to send a GET request to retrieve the stored Azure secrets engine configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/azure/config\n```\n\n----------------------------------------\n\nTITLE: Token-Based Update Primary cURL Request in Vault Replication API\nDESCRIPTION: cURL command to update the primary server in a Vault performance replication secondary setup using a token. The request sends a JSON payload to the performance replication secondary update-primary endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/secondary/update-primary\n```\n\n----------------------------------------\n\nTITLE: Advanced Azure Storage Configuration with Parallel Connections\nDESCRIPTION: Extended configuration example showing how to customize the maximum number of parallel connections to Azure storage using the max_parallel parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/azure.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"azure\" {\n  accountName  = \"my-storage-account\"\n  accountKey   = \"abcd1234\"\n  container    = \"container-efgh5678\"\n  max_parallel = 512\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Policy for ADFS KV Mount in Vault\nDESCRIPTION: This snippet creates a read-only policy for the ADFS KV mount. It grants read and list capabilities to the specified path, allowing controlled access to ADFS-related secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy write <RO_ADFS_POLICY_NAME> - << EOF\n# Read and list policy for the ADFS KV mount\npath \"<ADFS_KV_PLUGIN_PATH>/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy write read-adfs-test - << EOF\n# Read and list policy for the ADFS KV mount\npath \"adfs-kv/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-Based Root Credential Rotation\nDESCRIPTION: Command to set up automatic, scheduled rotation of root credentials for the Azure authentication method in Vault Enterprise.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/azure/config \\\n    ...\n    rotation_schedule=\"0 * * * SAT\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Auth Role via API\nDESCRIPTION: cURL command to create an Azure authentication role in Vault using the REST API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data '{\"policies\": [\"dev\", \"prod\"], ...}' \\\n    https://127.0.0.1:8200/v1/auth/azure/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Authentication via API\nDESCRIPTION: cURL command to enable the Azure authentication method in Vault using the REST API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data '{\"type\": \"azure\"}' \\\n    https://127.0.0.1:8200/v1/sys/auth/azure\n```\n\n----------------------------------------\n\nTITLE: Creating Sensitive Vault Storage Configuration\nDESCRIPTION: A MySQL storage backend configuration for Vault containing sensitive credentials. This is used to demonstrate how to protect sensitive configuration data at rest.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_13\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"mysql\" {\nusername = \"user1234\"\npassword = \"secret123!\"\ndatabase = \"vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Read Raft Configuration Sample Request\nDESCRIPTION: Shell command to retrieve current Raft cluster configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/configuration\n```\n\n----------------------------------------\n\nTITLE: Updating OIDC Role in Vault for Azure AD with Additional Scopes\nDESCRIPTION: This command updates the OIDC role in Vault to include the 'profile' scope, necessary for retrieving the user's ID in the JWT for Azure AD integration with many groups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/azuread.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/role/your_default_role \\\n user_claim=\"sub\" \\\n allowed_redirect_uris=\"http://localhost:8250/oidc/callback,https://online_version_hostname:port_number/ui/vault/auth/oidc/oidc/callback\"  \\\n groups_claim=\"groups\" \\\n oidc_scopes=\"profile\" \\\n policies=\"default\"\n```\n\n----------------------------------------\n\nTITLE: LDAP Dynamic Role JSON Configuration Payload\nDESCRIPTION: Example JSON payload for configuring a dynamic role, containing LDIF templates for user creation and deletion, username templating, and TTL settings for credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"creation_ldif\": \"...\",\n  \"deletion_ldif\": \"...\",\n  \"rollback_ldif\": \"...\",\n  \"username_template\": \"...\",\n  \"default_ttl\": \"1h\",\n  \"max_ttl\": \"24h\"\n}\n```\n\n----------------------------------------\n\nTITLE: KV Data JSON Structure for API\nDESCRIPTION: JSON structure for creating or updating secrets via the Vault API, including options for compare-and-swap (cas) and the actual key/value data pairs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/write-data.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"options\": {\n    \"cas\": 4\n  },\n  \"data\": {\n    \"sandbox\": \"1234\",\n    \"prod\": \"5679\",\n    \"smoke\": \"abcd\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vault Role for CF\nDESCRIPTION: Sets up a role in Vault for CF integrations, with specific bound application, space, and organization IDs. Requires that these IDs are known and accessible.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/cf/roles/my-role \\\n    bound_application_ids=2d3e834a-3a25-4591-974c-fa5626d5d0a1 \\\n    bound_space_ids=3d2eba6b-ef19-44d5-91dd-1975b0db5cc9 \\\n    bound_organization_ids=34a878d0-c2f9-4521-ba73-a9f664e82c7bf \\\n    policies=my-policy\n```\n\n----------------------------------------\n\nTITLE: Custom MySQL Database and Table Configuration in Vault\nDESCRIPTION: This HCL example demonstrates setting up Vault to use a custom database and table name for its backend storage in MySQL. Dependencies include the database being accessible and permissions set for the specified username and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/mysql.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"mysql\" {\n  database = \"my-vault\"\n  table    = \"vault-data\"\n  username = \"user1234\"\n  password = \"pass5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault KMIP Secrets Engine\nDESCRIPTION: This snippet demonstrates how to enable the KMIP Secrets Engine in Vault and configure it to listen on a specified address. This setup is necessary for managing cryptographic keys and must be executed on the Vault server. Ensure that the Vault server has the KMIP Secrets Engine available and TCP port 5696 open.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvault secrets enable kmip\nvault write kmip/config listen_addrs=0.0.0.0:5696\n```\n\n----------------------------------------\n\nTITLE: Implementing the PluginVersioner Interface for Database Plugins in Go\nDESCRIPTION: This code snippet shows how to implement the PluginVersioner interface, which allows database plugins to provide version information to Vault. This is useful for tracking plugin versions and compatibility.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/custom.mdx#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// PluginVersioner is an optional interface to return version info.\ntype PluginVersioner interface {\n\t// PluginVersion returns the version for the backend\n\tPluginVersion() PluginVersion\n}\n\ntype PluginVersion struct {\n\tVersion string\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Raft Peer Quorum\nDESCRIPTION: This command lists the Raft peers and their status, confirming that the Raft cluster has formed a quorum with the expected number of nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl exec -it vault-0 -- vault operator raft list-peers\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Template with cURL in Vault Transform API\nDESCRIPTION: Makes a POST request to create or update a template in the Vault Transform Secrets Engine using a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/template/example-template\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Enable CIEPS - Shell\nDESCRIPTION: This shell command illustrates how to make a POST request to the Vault API to enable the Certificate Issuance External Policy Service with the specified payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_87\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/external-policy\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Redirect Address Environment Variable in Bash\nDESCRIPTION: Example of setting the VAULT_CLUSTER_ADDR environment variable to specify the local node address for redirected client communication in Vault's high-availability mode.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/redirect_addr.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_CLUSTER_ADDR=\"https://127.0.0.1:8201\"\n```\n\n----------------------------------------\n\nTITLE: Executing SSH Connection with OTP Mode in Vault\nDESCRIPTION: Establishes an SSH connection using OTP mode authentication. Requires sshpass to be installed locally for full automation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/ssh.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault ssh -mode=otp -role=my-role user@1.2.3.4\n```\n\n----------------------------------------\n\nTITLE: Creating a Nomad Role with Custom Policy\nDESCRIPTION: Defines a Nomad role in Vault with specific policies and token type, enabling controlled token generation\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/nomad.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": \"readonly\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/nomad/role/monitoring\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Helm Repository\nDESCRIPTION: Adds the HashiCorp Helm repository to access the Vault Secrets Operator chart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm repo add hashicorp https://helm.releases.hashicorp.com\n```\n\n----------------------------------------\n\nTITLE: Deleting Programmatic API Key Role - HTTP API - Shell\nDESCRIPTION: This snippet outlines the method for deleting a programmatic API key role through a DELETE request to the specified API endpoint, including the required parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/mongodbatlas.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/mongodbatlas/roles/test-programmatic-key\n```\n\n----------------------------------------\n\nTITLE: Implementing Regex Mapping in Vault HCL\nDESCRIPTION: Defines a regex mapping filter to import secrets whose names match a specific regular expression pattern from an external source to a Vault destination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/mappings.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nmapping_regex {\n  name        = \"my-map-1\"\n  source      = \"my-gcp-source-1\"\n  destination = \"my-dest-1\"\n  priority    = 1\n  expression  = \"^database/.*$\"\n}\n```\n\n----------------------------------------\n\nTITLE: MFA Validation API Request\nDESCRIPTION: Example curl command demonstrating how to make an HTTP POST request to the MFA validation endpoint using a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/validate.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mfa/validate\n```\n\n----------------------------------------\n\nTITLE: Reading Role - JSON Response\nDESCRIPTION: Sample JSON response showing a role's configuration including OCIDs and token settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ocid_list\": [\n      \"ocid1.group.oc1..aaaaaaaaiqnblimpvmegkqh3bxilrdvjobr7qd223g275idcqhexamplefq\",\n      \"ocid1.dynamicgroup.oc1..aaaaaaaa5hmfyrdaxvmt52ekju5n7ffamn2pdvxaq6esb2vzzoduexamplea\"\n    ],\n    \"token_ttl\": 1800,\n    \"token_policies\": [\"dev\", \"prod\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Backend Within Namespace in JSON\nDESCRIPTION: Sample payload for moving a backend within the same namespace using the /sys/remount endpoint. Specifies the 'from' and 'to' paths for the remount operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/remount.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": \"secret\",\n  \"to\": \"new-secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Audit Non-HMAC Keys with Vault CLI\nDESCRIPTION: This command specifies multiple non-HMAC'd request keys for the secrets engine mounted at \"pki/\" by repeating the flag for each key. This is useful for selectively excluding certain request components from HMAC in audit logging. Requires Vault CLI and access to a Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/tune.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets tune -audit-non-hmac-request-keys=common_name -audit-non-hmac-request-keys=ttl pki/\n```\n\n----------------------------------------\n\nTITLE: Reading Subkeys Using Vault CLI\nDESCRIPTION: Use the vault read command with the /subkeys path to retrieve a list of secret data subkeys at the given path. This command replaces non-map keys and leaf keys with nil.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/read-subkey.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read <mount_path>/subkeys/<secret_path>\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read shared/subkeys/dev/square-api\n\nKey         Value\n---         -----\nmetadata    map[created_time:2024-11-20T20:00:13.385182722Z custom_metadata:<nil> deletion_time: destroyed:false version:1]\nsubkeys     map[prod:<nil> sandbox:<nil> smoke:<nil>]\n```\n\n----------------------------------------\n\nTITLE: Reading TOTP MFA method response - JSON\nDESCRIPTION: This JSON snippet is a sample response from reading a TOTP MFA method's configuration. It includes the method's 'algorithm', 'digits', 'issuer', and other important attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"algorithm\": \"SHA1\",\n    \"digits\": 6,\n    \"id\": \"4c6b1968-b385-4c46-ac5e-9b74e7b206be\",\n    \"issuer\": \"vault\",\n    \"key_size\": 20,\n    \"period\": 30,\n    \"qr_size\": 200,\n    \"skew\": 1,\n    \"type\": \"totp\",\n    \"namespace\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Auth Role with cURL\nDESCRIPTION: cURL command to create or update a role in the Azure auth method with specified permissions and constraints. This registers a new authentication role named 'dev-role'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/azure/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating an Alphabet with JSON Payload in Vault Transform API\nDESCRIPTION: JSON payload for creating or updating an alphabet in the Vault Transform Secrets Engine, defining the set of characters to use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"alphabet\": \"abc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing AppRoles - Shell Request\nDESCRIPTION: HTTP request to list existing AppRoles in the authentication method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/approle/role\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a KMS Provider in Vault\nDESCRIPTION: API endpoint for registering or updating an external Key Management Service (KMS) provider with authentication credentials and configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": [\n    \"client_id=example-client-id\",\n    \"client_secret=example-client-secret\",\n    \"tenant_id=example-tenant-id\"\n  ],\n  \"key_collection\": \"example-keyvault-name\",\n  \"provider\": \"azurekeyvault\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/keymgmt/kms/example-kms\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating an Entity by Name - HTTP API - JSON\nDESCRIPTION: This JSON payload facilitates creating or updating an entity by its name in Vault. It includes metadata and policies associated with the entity, which must be provided in the correct object structure.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\"metadata\": {\"organization\": \"hashicorp\", \"team\": \"nomad\"}, \"policies\": [\"eng-developers\", \"infra-developers\"]}\n```\n\n----------------------------------------\n\nTITLE: Importing a Key for FPE Transformation - JSON Payload\nDESCRIPTION: Sample JSON payload for importing an existing AES-256 key into a new FPE transformation. It includes the ciphertext containing the encrypted key material, template specifications, tweak source configuration, and allowed roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"...\",\n  \"template\": \"builtin/creditcardnumber\",\n  \"tweak_source\": \"internal\",\n  \"allowed_roles\": [\"example-role\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Access to KV Secret\nDESCRIPTION: Command to verify that an AD user who belongs to the mapped AD group can access secrets in the KV secrets engine as expected.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get adfs-kv/test\n```\n\n----------------------------------------\n\nTITLE: Reading SSH CA Public Key in Vault\nDESCRIPTION: This endpoint reads the configured/generated public key for the SSH certificate authority. It requires authentication via a Vault token provided in the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_28\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/ssh/config/ca\n```\n\n----------------------------------------\n\nTITLE: Login to Vault via CF Authentication\nDESCRIPTION: Logs into Vault using the CF authentication method and requires a created CF role. Assumes all previous steps for setup have been completed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=cf role=test-role\n```\n\n----------------------------------------\n\nTITLE: Sample response for static role creation/update\nDESCRIPTION: This JSON object shows the expected response after creating or updating a static role, including properties such as the role's name, username, and associated rotation period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"data\": {\\n    \"assume_role_arn\": \"\",\\n    \"assume_role_session_name\": \"\",\\n    \"external_id\": \"\",\\n    \"id\": \"AIDA...\",\\n    \"name\": \"my-static-role\",\\n    \"rotation_period\": 41400,\\n    \"username\": \"example-user\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Reading SAML Role Configuration in Vault\nDESCRIPTION: A shell session showing how to review the current SAML role configuration using 'vault read'. The output highlights the mismatch between 'bound_attributes' using 'http://schemas.xmlsoap.org/claims/Group' and 'groups_attribute' set to 'groups'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read auth/<SAML_PLUGIN_PATH>/role/<ADFS_ROLE>\n\nKey                        Value\n---                        -----\nbound_attributes           map[http://schemas.xmlsoap.org/claims/Group:[VaultAdmin VaultUser]]\nbound_attributes_type      string\nbound_subjects             [*@example.com *@ext.example.com]\nbound_subjects_type        glob\ngroups_attribute           groups\ntoken_bound_cidrs          []\ntoken_explicit_max_ttl     0s\ntoken_max_ttl              0s\ntoken_no_default_policy    false\ntoken_num_uses             0\ntoken_period               0s\ntoken_policies             [default]\ntoken_ttl                  0s\ntoken_type                 default\n```\n\n----------------------------------------\n\nTITLE: Sample Response for PKI CRL Configuration\nDESCRIPTION: JSON response showing the CRL configuration including expiry times, OCSP settings, auto-rebuild settings, and cross-cluster functionality that control the behavior of certificate revocation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_105\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"disable\": false,\n    \"expiry\": \"72h\",\n    \"ocsp_disable\": false,\n    \"ocsp_expiry\": \"12h\",\n    \"auto_rebuild\": false,\n    \"auto_rebuild_grace_period\": \"12h\",\n    \"enable_delta\": false,\n    \"delta_rebuild_interval\": \"15m\",\n    \"cross_cluster_revocation\": true,\n    \"unified_crl\": true,\n    \"unified_crl_on_existing_paths\": true,\n    \"max_crl_entries\": 100000\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: PKI Health Check with Config File\nDESCRIPTION: Executes health check using a custom configuration file specified with -health-config flag\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki health-check -health-config=mycorp-root.json pki-root/\n```\n\n----------------------------------------\n\nTITLE: Configuring ACL Policy for EST Sign-Verbatim Path\nDESCRIPTION: This HCL snippet defines an ACL policy that allows authenticated clients to access the required PKI EST paths using the sign-verbatim path policy. It grants update and create capabilities for simpleenroll and simplereenroll endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/est.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"pki/est/simpleenroll\" {\n  capabilities=[\"update\", \"create\"]\n}\npath \"pki/est/simplereenroll\" {\n  capabilities=[\"update\", \"create\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Vault Role in Elasticsearch using curl\nDESCRIPTION: This code creates a new role in Elasticsearch with the 'manage_security' cluster privilege, which will be used by Vault to administer users and passwords.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -d '{\"cluster\": [\"manage_security\"]}' \\\n    http://vaultuser:$PASSWORD@localhost:9200/_xpack/security/role/vault\n```\n\n----------------------------------------\n\nTITLE: Generating Credentials Based on Named Role\nDESCRIPTION: This section details the API endpoints for generating credentials based on a named role. The roles must be created before calling these endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_21\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Path               |\n| :----- | :----------------- |\n| `GET`  | `/aws/creds/:name` |\n| `POST` | `/aws/sts/:name`   |\n```\n\n----------------------------------------\n\nTITLE: Configure KV Engine Request\nDESCRIPTION: This curl command sends a POST request to configure the KV engine. It includes the Vault token in the header and the configuration data in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/config\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Vault Key Status Endpoint\nDESCRIPTION: Example JSON response from the `/sys/key-status` endpoint. It returns the term (sequential key number), install time (when the key was installed), and the estimated number of encryptions made by the key across the cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/key-status.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"term\": 3,\n  \"install_time\": \"2015-05-29T14:50:46.223692553-07:00\",\n  \"encryptions\": 74718331\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Redshift Database Credentials in Vault\nDESCRIPTION: This command generates new credentials by reading from the '/creds' endpoint with the name of the configured role. It returns a username and password for database access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redshift.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault read database/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Installing Vault on OpenShift with Custom Configuration\nDESCRIPTION: This example demonstrates how to install Vault on OpenShift using a custom configuration file. It overrides default values with those specified in the override-values.yml file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/openshift.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cat override-values.yml\nglobal:\n  openshift: true\n\nserver:\n  ha:\n    enabled: true\n    replicas: 5\n##\n$ helm install vault hashicorp/vault \\\n    --values override-values.yml\n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Mounts Operation\nDESCRIPTION: JSON response showing mounted secrets engines including their configurations, types and metadata. Includes system defaults for lease TTLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"48d2c601-97a0-3904-f549-4fcbc740d718\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"cubbyhole/\": {\n      \"accessor\": \"cubbyhole_eb4503de\",\n      \"config\": {\n        \"default_lease_ttl\": 0,\n        \"force_no_cache\": false,\n        \"max_lease_ttl\": 0\n      },\n      \"description\": \"per-token private secret storage\",\n      \"external_entropy_access\": false,\n      \"local\": true,\n      \"options\": null,\n      \"plugin_version\": \"\",\n      \"running_plugin_version\": \"v1.12.0+builtin.vault\",\n      \"running_sha256\": \"\",\n      \"seal_wrap\": false,\n      \"type\": \"cubbyhole\",\n      \"uuid\": \"79ddaa52-fa07-6f19-653a-f0777f6439fd\"\n    },\n    \"identity/\": {\n      \"accessor\": \"identity_68a03448\",\n      \"config\": {\n        \"default_lease_ttl\": 0,\n        \"force_no_cache\": false,\n        \"max_lease_ttl\": 0\n      },\n      \"description\": \"identity store\",\n      \"external_entropy_access\": false,\n      \"local\": false,\n      \"options\": null,\n      \"plugin_version\": \"\",\n      \"running_plugin_version\": \"v1.12.0+builtin.vault\",\n      \"running_sha256\": \"\",\n      \"seal_wrap\": false,\n      \"type\": \"identity\",\n      \"uuid\": \"45f79a67-58f7-3f87-892c-9032084e7801\"\n    },\n    \"secret/\": {\n      \"accessor\": \"kv_aedd93c1\",\n      \"config\": {\n        \"default_lease_ttl\": 0,\n        \"force_no_cache\": false,\n        \"max_lease_ttl\": 0\n      },\n      \"deprecation_status\": \"supported\",\n      \"description\": \"key/value secret storage\",\n      \"external_entropy_access\": false,\n      \"local\": false,\n      \"options\": {\n        \"version\": \"2\"\n      },\n      \"plugin_version\": \"\",\n      \"running_plugin_version\": \"v0.13.0+builtin\",\n      \"running_sha256\": \"\",\n      \"seal_wrap\": false,\n      \"type\": \"kv\",\n      \"uuid\": \"8074a73f-6921-c0cd-589a-016405dc46ec\"\n    },\n    \"sys/\": {\n      \"accessor\": \"system_f8df2902\",\n      \"config\": {\n        \"default_lease_ttl\": 0,\n        \"force_no_cache\": false,\n        \"max_lease_ttl\": 0,\n        \"passthrough_request_headers\": [\"Accept\"]\n      },\n      \"description\": \"system endpoints used for control, policy and debugging\",\n      \"external_entropy_access\": false,\n      \"local\": false,\n      \"options\": null,\n      \"plugin_version\": \"\",\n      \"running_plugin_version\": \"v1.12.0+builtin.vault\",\n      \"running_sha256\": \"\",\n      \"seal_wrap\": false,\n      \"type\": \"system\",\n      \"uuid\": \"c79f4f66-4cfa-4521-9d31-b1238b0a6800\"\n    }\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Resealing Secondary Cluster Pods\nDESCRIPTION: These commands delete and reseal the remaining secondary pods using the primary unseal token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl delete pod vault-secondary-1\nkubectl exec -ti vault-secondary-1 -- vault operator unseal <PRIMARY UNSEAL TOKEN>\n\nkubectl delete pod vault-secondary-2\nkubectl exec -ti vault-secondary-2 -- vault operator unseal <PRIMARY UNSEAL TOKEN>\n```\n\n----------------------------------------\n\nTITLE: Using Sentinel to Validate MFA Methods in Python\nDESCRIPTION: This Python code snippet demonstrates the use of Sentinel policies to validate multiple MFA methods. It checks if either of the two specified MFA methods (duons1 or duons2) are valid before granting access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport \"mfa\"\n\nhas_mfa = rule {\n    mfa.methods.duons1.valid\n}\n\nhas_mfa2 = rule {\n    mfa.methods.duons2.valid\n}\n\nmain = rule {\n    has_mfa or has_mfa2\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Containers to Vault Server Pods\nDESCRIPTION: Demonstrates how to add additional containers to the Vault server pod configuration with custom image and environment settings\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nextraContainers:\n  - name: mycontainer\n    image: 'app:0.0.0'\n    env: ...\n```\n\n----------------------------------------\n\nTITLE: Provide Key Share for DR Token Generation\nDESCRIPTION: JSON payload for providing a single root key share to progress the DR operation token generation attempt.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"acbd1234\",\n  \"nonce\": \"ad235\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Single Vault Auto-Auth Sink (JSON)\nDESCRIPTION: Example of configuring Vault auto-auth with a single file sink using JSON format. Demonstrates the required sinks array structure for JSON configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  \"auto_auth\" : {\n    \"method\" : [\n      {\n        type = \"approle\"\n\n        config = {\n          role_id_file_path = \"/etc/vault/roleid\"\n          secret_id_file_path = \"/etc/vault/secretid\"\n        }\n      }\n    ],\n    \"sinks\" : [\n      {\n        \"sink\" : {\n          type = \"file\"\n\n          config = {\n            path = \"/tmp/file-foo\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Configuration Example\nDESCRIPTION: Example of a Kubernetes service configuration using Vault service registration labels for pod selection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/kubernetes.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/instance: vault\n    app.kubernetes.io/name: vault\n    helm.sh/chart: vault-0.30.0\n  name: vault-active-us-east\n  namespace: default\nspec:\n  clusterIP: 10.7.254.51\n  ports:\n  - name: http\n    port: 8200\n    protocol: TCP\n    targetPort: 8200\n  - name: internal\n    port: 8201\n    protocol: TCP\n    targetPort: 8201\n  publishNotReadyAddresses: false\n  selector:\n    app.kubernetes.io/instance: vault\n    app.kubernetes.io/name: vault\n    component: server\n    vault-active: \"true\"\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Automating SSH Connection with Vault OTP and Disabling Host Key Checking\nDESCRIPTION: This command demonstrates how to use Vault CLI to generate an OTP, establish an SSH connection, and disable strict host key checking for automated logins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/one-time-ssh-passwords.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault ssh -role otp_key_role -mode otp -strict-host-key-checking=no username@x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: Deleting an SSH Role from Vault\nDESCRIPTION: Example of deleting a named SSH role using a DELETE request. The request authenticates with the X-Vault-Token header and includes JSON payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Socket Write Timeout in Vault\nDESCRIPTION: Demonstrates how to configure the write_timeout parameter for socket-based audit logging in Vault. The write_timeout parameter controls how long Vault will wait for a write operation to complete over the socket, with a default of 2 seconds. Setting it to 0 disables the timeout completely.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/socket/write_timeout.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nwrite_timeout=0\n```\n\n----------------------------------------\n\nTITLE: Authorizing Control Group Request in Vault - JSON Response\nDESCRIPTION: JSON response from the control group authorize endpoint showing the approval status. This example shows the request has not been approved yet.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/control-group.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"approved\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault CLI Login with TLS Certificate\nDESCRIPTION: This command authenticates against the 'web' cert role by presenting a certificate (cert.pem) and key (key.pem) signed by the CA associated with that role. It specifies the Vault TLS Listener CA certificate using `-ca-cert`. If the Vault server certificate is trusted by the system, `-ca-cert` can be omitted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cert.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login \\\n    -method=cert \\\n    -ca-cert=vault-ca.pem \\\n    -client-cert=cert.pem \\\n    -client-key=key.pem \\\n    name=web\n```\n\n----------------------------------------\n\nTITLE: Creating SAML Role with cURL\nDESCRIPTION: This cURL command sends a PUT request to create or update a SAML role using the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request PUT \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/saml/role/admin\n```\n\n----------------------------------------\n\nTITLE: Generating Password from Policy using cURL\nDESCRIPTION: This snippet demonstrates how to generate a password from a specific password policy using a cURL GET request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/password/my-policy/generate\n```\n\n----------------------------------------\n\nTITLE: Systemd Memory Lock Configuration\nDESCRIPTION: Systemd service configuration directive to set unlimited memory lock limits.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\nLimitMEMLOCK=infinity\n```\n\n----------------------------------------\n\nTITLE: Verifying a Signature with Google Cloud KMS via Vault\nDESCRIPTION: This snippet illustrates how to verify the signature of a digest by using Vault. It checks the validity of the signature against the specified digest and key version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n$ vault write gcpkms/verify/my-key key_version=1 digest=$DIGEST signature=$SIGNATURE\\nKey      Value\\n---      -----\\nvalid    true\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Database Connection\nDESCRIPTION: This JSON response contains the configuration settings of a specified database connection, detailing roles, connection details, plugin information, and rotation statements. Sensitive fields like passwords are not returned by Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allowed_roles\": [\"readonly\"],\n    \"connection_details\": {\n      \"connection_url\": \"{{username}}:{{password}}@tcp(127.0.0.1:3306)/\",\n      \"username\": \"vaultuser\"\n    },\n    \"password_policy\": \"\",\n    \"plugin_name\": \"mysql-database-plugin\",\n    \"plugin_version\": \"\",\n    \"root_credentials_rotate_statements\": []\n    \"skip_static_role_import_rotation\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the wrapped key from AWS CloudHSM into Vault\nDESCRIPTION: These shell commands base64 encode the wrapped key from AWS CloudHSM and import it into Vault's transit secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ export CIPHERTEXT=$(base64 ciphertext.key)\n$ vault write transit/keys/test-key/import ciphertext=$CIPHERTEXT hash_function=SHA256 type=$KEY_TYPE\n```\n\n----------------------------------------\n\nTITLE: Example: Enable File Audit Device at Default Path\nDESCRIPTION: An example command to enable a file type audit device at the default path, 'file/', in a Vault setup. It specifies the log file path parameter. This operation requires access rights to the specified file path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/enable.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable file file_path=/tmp/my-file.txt\nSuccess! Enabled the file audit device at: file/\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Authentication via API\nDESCRIPTION: Enables AWS authentication method in Vault using the HTTP API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"X-Vault-Token:123\" \"http://127.0.0.1:8200/v1/sys/auth/aws\" -d '{\"type\":\"aws\"}'\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Secrets Destination with cURL\nDESCRIPTION: A shell command example showing how to use cURL to create a new GitHub secrets destination in Vault. The command sends a POST request with authentication and a JSON payload to the sync destinations endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/sync/destinations/gh/my-store-1\n```\n\n----------------------------------------\n\nTITLE: Creating a GCE Role in JSON\nDESCRIPTION: This JSON snippet sets up a GCE role configuration in HashiCorp Vault. It specifies attributes like `project_id`, `policies`, and `bound_zones` required for GCE instance authentication. Ensure Vault is configured for GCP authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"gce\",\n  \"project_id\": \"project-123456\",\n  \"policies\": [\"prod\"],\n  \"bound_zones\": [\"us-east1-b\", \"eu-west2-a\"],\n  \"ttl\": \"30m\",\n  \"max_ttl\": \"24h\",\n  \"bound_service_accounts\": [\"dev-1@project-123456.iam.gserviceaccount.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Create/Update LDAP Group Request\nDESCRIPTION: This curl command creates or updates an LDAP group in Vault, associating it with specific policies defined in the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/ldap/groups/admins\n```\n\n----------------------------------------\n\nTITLE: Defining a Blanket Policy for Event Subscription in HCL\nDESCRIPTION: This HCL snippet defines a policy that grants read capability to all event subscriptions, allowing blanket access to event notifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/events.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\npath \"sys/events/subscribe/*\" {\n    capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing All RADIUS Users with cURL\nDESCRIPTION: This cURL command shows how to list all users registered with the RADIUS authentication method using a LIST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/radius/users\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Login Enforcement Curl Request\nDESCRIPTION: Example curl command for creating a login enforcement configuration in Vault with authentication token\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/login-enforcement.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/login-enforcement/foo\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Vault Data Using a Specific Token\nDESCRIPTION: This example demonstrates how to unwrap data stored in the cubbyhole secrets engine using a specific token. The token is provided as an argument to the unwrap command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/unwrap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault unwrap 3de9ece1-b347-e143-29b0-dc2dc31caafd\n```\n\n----------------------------------------\n\nTITLE: Executing Plugin Reload Request with cURL\nDESCRIPTION: Shell command using cURL to send a POST request to reload an auth plugin named 'mock-plugin'. The request includes an authentication token and references a payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-reload.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/plugins/reload/auth/mock-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating a Template for Identity Token Contents in Vault\nDESCRIPTION: This template demonstrates how to structure JSON with replaceable parameters that will be populated with entity information when a token is requested. It shows how to include metadata, username from an alias, and group information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/identity-token.mdx#2025-04-14_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  \"color\": {{identity.entity.metadata.color}},\n  \"userinfo\": {\n     \"username\": {{identity.entity.aliases.usermap_123.metadata.username}},\n     \"groups\": {{identity.entity.groups.names}}\n  },\n  \"nbf\": {{time.now}}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating SAML Signature in AD FS with PowerShell\nDESCRIPTION: Use PowerShell to set the SAML signature requirement to false for the specified relying party trust in AD FS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/adfs.mdx#2025-04-14_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nSet-ADFSRelyingPartyTrust `\n -TargetName \"<RELYING_PARTY_TRUST_IDENTIFIER>\" `\n -SignedSamlRequestsRequired $false\n```\n\n----------------------------------------\n\nTITLE: GitHub User Policy Mapping Response\nDESCRIPTION: Sample JSON response showing the policy mapping for a GitHub user, including the username (key) and assigned policy (value).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"764b6f88-efba-51bd-ed62-cf1c9e80e37a\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"key\": \"sethvargo\",\n    \"value\": \"sethvargo-policy\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: EC2 Admin Policy for Federation Token (JSON)\nDESCRIPTION: This policy grants ec2:* permissions for the federation token. It's referenced in the Vault role configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": {\n    \"Effect\": \"Allow\",\n    \"Action\": \"ec2:*\",\n    \"Resource\": \"*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling LDAP Paged Searching - Shell\nDESCRIPTION: This shell command disables paged searching for an LDAP auth configuration in Vault, which is a workaround for regression issues related to LDAP maximum page sizes that were introduced in version 1.13.2. It is a critical command for maintaining functionality during upgrades involving LDAP configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.13.x.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/ldap/config max_page_size=-1\n```\n\n----------------------------------------\n\nTITLE: Reading Mount Configuration - Shell Request\nDESCRIPTION: Example of making a GET request to read the current mount configuration using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/mounts/my-mount/tune\n```\n\n----------------------------------------\n\nTITLE: Tuning Auth Method Lease Duration in Vault CLI\nDESCRIPTION: This snippet shows how to modify the default lease duration for an auth method (github) using the Vault CLI, changing it from 768 hours to 72 hours.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth tune -default-lease-ttl=72h github/\nSuccess! Tuned the auth method at: github/\n```\n\n----------------------------------------\n\nTITLE: Defining VaultStaticSecretSpec Schema in YAML\nDESCRIPTION: Details the specification for a VaultStaticSecret, including authentication, path, version, type, and various configuration options for secret management and synchronization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nvaultAuthRef: string\nnamespace: string\nmount: string\npath: string\nversion: integer\ntype: string\nrefreshAfter: string\nhmacSecretData: boolean\nrolloutRestartTargets:\n  # Array of RolloutRestartTarget\ndestination:\n  # Destination configuration\nsyncConfig:\n  # SyncConfig configuration\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Backend Plugin Reload\nDESCRIPTION: JSON response returned after initiating a backend plugin reload operation. The response includes a unique 'reload_id' field for tracking the operation progress.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-reload.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"reload_id\": \"bdddb8df-ccb6-1b09-670d-efa9d3f2c11b\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sending cURL Request for Vault Login\nDESCRIPTION: This cURL command is used to send a POST request to the Vault API to authenticate using the payload defined previously. It includes a header for the Vault token, which is required for authorization, and specifies the endpoint for the login action.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/cf/login\n```\n\n----------------------------------------\n\nTITLE: Payload Format for Creating/Updating an Audit Request Header in Vault\nDESCRIPTION: JSON payload format used to configure a request header for auditing, specifying whether its value should be HMAC'd in audit logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-auditing.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hmac\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating Role - JSON Payload Example\nDESCRIPTION: This code snippet provides a sample JSON payload for the API endpoint that creates or updates a named role in the Vault SSH secrets engine. The required parameter is `key_type`, which determines the type of credentials generated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_type\": \"otp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Token Renewal\nDESCRIPTION: This snippet represents the JSON response from a successful token renewal request, containing details about the new token, policies, metadata, and lease duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"ABCD\",\n    \"policies\": [\"web\", \"stage\"],\n    \"metadata\": {\n      \"user\": \"armon\"\n    },\n    \"lease_duration\": 3600,\n    \"renewable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Key for Tokenization Transformation - JSON Payload\nDESCRIPTION: Sample JSON payload for importing an existing AES-256 key into a new tokenization transformation. It includes the ciphertext containing the encrypted key material, maximum TTL, and allowed roles configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"...\",\n  \"max_ttl\": \"365d\",\n  \"allowed_roles\": [\"example-role\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Role Configuration Response\nDESCRIPTION: Sample JSON response when reading a Kubernetes auth role configuration, displaying service account constraints, TTL settings, and policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"bound_service_account_names\": \"vault-auth\",\n    \"bound_service_account_namespaces\": \"default\",\n    \"max_ttl\": 1800000,\n    \"ttl\": 0,\n    \"period\": 0,\n    \"policies\": [\"dev\", \"prod\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Client Count Calculation Formula in Vault\nDESCRIPTION: Formula showing how Vault calculates the total client count per cluster by summing unique standard entities, constructed entities, certificate entities, and synced secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/client-count/counting.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nCLIENT_COUNT_PER_CLUSTER = UNIQUE_STANDARD_ENTITIES +\n                           UNIQUE_CONSTRUCTED_ENTITIES +\n                           UNIQUE_CERTIFICATE_ENTITIES +\n                           UNIQUE_SYNCED_SECRETS\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Roles with Hierarchical Paths in Vault LDAP Secrets Engine\nDESCRIPTION: Creates two static roles with hierarchical path names 'org/secure' and 'org/platform/dev'. Each role is configured with a username and rotation period of 1 hour.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ldap/static-role/org/secure \\\n    username=\"user1\" \\\n    rotation_period=\"1h\"\nSuccess! Data written to: ldap/static-role/org/secure\n\n$ vault write ldap/static-role/org/platform/dev \\\n    username=\"user2\" \\\n    rotation_period=\"1h\"\nSuccess! Data written to: ldap/static-role/org/platform/dev\n```\n\n----------------------------------------\n\nTITLE: Current Month Activity Information in JSON\nDESCRIPTION: This snippet shows the structure of activity information for the current month, including exact counts and estimated new client counts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"months\":[\n      {\n         \"timestamp\":\"current_month_timestamp\",\n         \"counts\":{\n            \"entity_clients\":\"exact int value\",\n            \"non_entity_clients\":\"exact int value\",\n            \"secret_syncs\":\"exact int value\",\n            \"acme_clients\":\"exact int value\",\n            \"clients\":\"exact int value\"\n         },\n         \"namespaces\": [\n               {\n                  \"namespace_id\":\"root\",\n                  \"namespace_path\":\"path\",\n                  \"counts\":{\n                     \"entity_clients\":\"exact int value\",\n                     \"non_entity_clients\":\"exact int value\",\n                     \"secret_syncs\":\"exact int value\",\n                     \"acme_clients\":\"exact int value\",\n                     \"clients\":\"exact int value\"\n                  },\n                  \"mounts\":[\n                     {\n                        \"path\":\"auth/up2/\",\n                        \"counts\":{\n                           \"entity_clients\":\"exact int value\",\n                           \"non_entity_clients\":\"exact int value\",\n                           \"secret_syncs\":\"exact int value\",\n                           \"acme_clients\":\"exact int value\",\n                           \"clients\":\"exact int value\"\n                        },\n                     },\n                  ]\n               },\n         ],\n         \"new_clients\":{\n            \"counts\":{\n               \"entity_clients\":\"approx int value\",\n               \"non_entity_clients\":\"approx int value\",\n               \"secret_syncs\":\"approx int value\",\n               \"acme_clients\":\"approx int value\",\n               \"clients\":\"approx int value\"\n            },\n            \"namespaces\":[\n               {\n                  \"namespace_id\":\"root\",\n                  \"namespace_path\":\"\",\n                  \"counts\":{},\n                  \"mounts\":[\n                     {\n                        \"path\":\"auth/up2/\",\n                        \"counts\":{\n                          \"entity_clients\":\"approx int value\",\n                          \"non_entity_clients\":\"approx int value\",\n                          \"secret_syncs\":\"approx int value\",\n                          \"acme_clients\":\"approx int value\",\n                          \"clients\":\"approx int value\"\n                         },\n                     },\n                     {\n                        \"path\":\"auth/up1/\",\n                        \"counts\":{\n                          \"entity_clients\":\"approx int value\",\n                          \"non_entity_clients\":\"approx int value\",\n                          \"secret_syncs\":\"approx int value\",\n                          \"acme_clients\":\"approx int value\",\n                          \"clients\":\"approx int value\"\n                        }\n                     }\n                  ]\n               }\n            ]\n         }\n      }\n   ],\n}\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Preventing Out-of-Band Overwrites\nDESCRIPTION: This JSON snippet defines an IAM policy that denies access to secrets in AWS Secrets Manager if they don't have a specific tag. It's used to prevent modifications to Vault-synced secrets outside of Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/awssm.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Deny\",\n      \"Action\": [\n        \"secretsmanager:*\"\n      ],\n      \"Resource\": \"*\",\n      \"Condition\": {\n        \"StringNotEquals\": {\n          \"secretsmanager:ResourceTag/hashicorp:vault\": \"\" # This tag is automatically added by Vault on every synced secrets\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Enable CRL Auto-rebuild Configuration\nDESCRIPTION: Command to enable automatic rebuilding of Certificate Revocation Lists (CRL)\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write <mount>/config/crl auto_rebuild=true\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Vault CE Active Node Health Check\nDESCRIPTION: This JSON snippet shows the response structure for a health check on an active node in Vault Community Edition. It includes various status indicators and version information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/health.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"clock_skew_ms\": 0,\n  \"cluster_id\": \"995f749a-9bc3-fbe0-a185-ccba6999fc73\",\n  \"cluster_name\": \"vault-cluster-e65c0563\",\n  \"echo_duration_ms\": 0,\n  \"enterprise\": false,\n  \"initialized\": true,\n  \"performance_standby\": false,\n  \"replication_dr_mode\": \"disabled\",\n  \"replication_performance_mode\": \"disabled\",\n  \"sealed\": false,\n  \"server_time_utc\": 1709559327,\n  \"standby\": false,\n  \"version\": \"1.16.0-rc2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Mounting Volumes for Vault CSI Provider\nDESCRIPTION: This YAML snippet configures volume mounts for the Vault CSI Provider container. By mounting a plugin directory in the container's filesystem, it permits plugin execution and utilizes volume details defined earlier in the configuration. The setup requires proper volume definitions and must be individually mapped using Kubernetes volume mount standards.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_47\n\nLANGUAGE: yaml\nCODE:\n```\nvolumeMounts:\n  - mountPath: /usr/local/libexec/vault\n    name: plugins\n    readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Enabling TOTP Secrets Engine in Vault\nDESCRIPTION: This command enables the TOTP secrets engine in Vault. It mounts the engine at the default path 'totp/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/totp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable totp\nSuccess! Enabled the totp secrets engine at: totp/\n```\n\n----------------------------------------\n\nTITLE: Response for Reading OIDC Assignment\nDESCRIPTION: The JSON response format when reading an OIDC assignment. It returns the entity IDs and group IDs associated with the assignment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n      \"entity_ids\":[\n         \"b6094ac6-baf4-6520-b05a-2bd9f07c66da\"\n      ],\n      \"group_ids\":[\n         \"262ca5b9-7b69-0a84-446a-303dc7d778af\"\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading LDAP Configuration for Kerberos\nDESCRIPTION: Example request to retrieve the current LDAP configuration used by the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/kerberos/config/ldap\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Secrets Engine Configuration (cURL)\nDESCRIPTION: cURL command to send a DELETE request to remove the stored Azure secrets engine configuration and credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/azure/config\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Secrets Engine for AD FS via CLI\nDESCRIPTION: Command to enable a version 2 KV secrets engine under a custom path for use with AD FS. This creates a dedicated space to store secrets for AD FS clients.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=<ADFS_KV_PLUGIN_PATH> kv-v2\n```\n\n----------------------------------------\n\nTITLE: Importing CA Certificates and Keys into Vault PKI\nDESCRIPTION: This request imports CA certificates and private keys into Vault's PKI secrets engine. The data must be properly JSON-formatted with newlines replaced by \\n.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_66\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data \"@payload.json\" \\\n    http://127.0.0.1:8200/v1/pki/config/ca\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pem_bundle\": \"-----BEGIN RSA PRIVATE KEY-----\\n...\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AliCloud Secrets Engine with POST Request\nDESCRIPTION: This snippet demonstrates how to configure the AliCloud secrets engine by sending a POST request to the '/alicloud/config' endpoint with access credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/alicloud/config\n```\n\n----------------------------------------\n\nTITLE: Mapping Okta Group to Vault Policy\nDESCRIPTION: This CLI command maps an Okta group to a Vault policy, allowing members of the specified Okta group to receive the associated Vault policy upon successful authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/okta/groups/scientists policies=nuclear-reactor\n```\n\n----------------------------------------\n\nTITLE: Creating a Login Token in Vault\nDESCRIPTION: This snippet creates a login token for the user `testuser` with the provided password.  The command authenticates against the userpass auth method and retrieves a token that can be used for subsequent requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/userpass/login/testuser \\\n        password=testpassword\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy with MFA Requirements\nDESCRIPTION: Command to create a Vault policy that requires PingID MFA method to access a specific secret path. The policy grants read capabilities only after MFA validation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ vault policy write ping-policy -<<EOF\npath \"secret/foo\" {\n  capabilities = [\"read\"]\n  mfa_methods  = [\"ping\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Reading Managed Key Configuration - JSON Response\nDESCRIPTION: JSON response containing the configuration details of a PKCS11 managed key, including UUID, key properties, and HSM-specific settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"UUID\": \"af0a688e-d2c1-fc07-b365-40325674114d\",\n  \"allow_generate_key\": true,\n  \"allow_replace_key\": false,\n  \"allow_store_key\": false,\n  \"any_mount\": false,\n  \"curve\": \"\",\n  \"force_rw_session\": false,\n  \"key_bits\": 0,\n  \"key_label\": \"test-kms-root\",\n  \"library\": \"softhsm\",\n  \"mechanism\": 1,\n  \"name\": \"hsm-key1\",\n  \"pin\": \"redacted\",\n  \"slot\": 1,\n  \"token_label\": \"\",\n  \"type\": \"pkcs11\"\n}\n```\n\n----------------------------------------\n\nTITLE: Transit Seal Authentication Policy in HCL\nDESCRIPTION: Required HCL policy configuration showing the minimum permissions needed for the Vault token used in Transit seal authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/transit.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npath \"<mount path>/encrypt/<key name>\" {\n  capabilities = [\"update\"]\n}\n\npath \"<mount path>/decrypt/<key name>\" {\n  capabilities = [\"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Okta MFA Method in Vault\nDESCRIPTION: This snippet shows how to query the configuration of an Okta MFA method using a GET request along with the method's UUID sent to the '/identity/mfa/method/okta/:method_id' endpoint. The response provides various details about the MFA method, such as api_token, id, name, org_name, type, and username_format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/okta.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/okta/1db034b5-81f1-4a2b-8c2b-0f51ed0bd9fc\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"api_token\": \"0081u7KrReNkzmABZJAP2oDyIXccveqx9vIOEyCZDC\", \"id\": \"1db034b5-81f1-4a2b-8c2b-0f51ed0bd9fc\", \"name\": \"my_okta\", \"org_name\": \"dev-262778\", \"type\": \"okta\", \"username_format\": \"{{identity.entity.aliases.auth_userpass_1793464a.name}}\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault PKCS#11 HCL file\nDESCRIPTION: This HCL configuration file sets up the Vault PKCS#11 provider for communication with the KMIP server. It specifies server details, TLS certificate paths, and the scope name. This file must be placed in a location accessible to the PKCS#11 library.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nslot {\n  server = \"VAULT_ADDRESS:5696\"\n  tls_cert_path = \"/etc/kmip/cert.pem\"\n  ca_path = \"/etc/kmip/ca.pem\"\n  scope = \"my-service\"\n}\n```\n\n----------------------------------------\n\nTITLE: Write Kubernetes Configuration (Vault)\nDESCRIPTION: Configures the Kubernetes secrets engine plugin with details for connecting to the Kubernetes API. It uses parameters like kubernetes_host, kubernetes_ca_cert, and service_account_jwt for authentication. It supports disabling the local CA certificate and JWT.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes_host\": \"https://192.168.99.100:8443\",\n  \"kubernetes_ca_cert\": \"-----BEGIN CERTIFICATE-----\\n.....\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking KMIP Credential in Shell\nDESCRIPTION: cURL command to revoke a KMIP credential by its serial number using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole/credential/revoke\n```\n\n----------------------------------------\n\nTITLE: Performing Entity Lookup with cURL\nDESCRIPTION: This shell command illustrates how to execute an entity lookup request using cURL by sending a POST request with a properly structured JSON payload. Dependencies include cURL installed and a valid Vault token. The request is sent to the identity lookup endpoint, and the server's JSON response contains entity details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/lookup.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/lookup/entity\n```\n\n----------------------------------------\n\nTITLE: Analyzing SAML Response in Vault Logs\nDESCRIPTION: This JSON snippet shows an example of a debug log entry for SAML authentication in Vault. It includes role configuration details and user context information, which are crucial for troubleshooting SAML-related issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\nDEBUG] auth.saml.auth_saml_1d2227e7: validating user context for role: api=callback role_name=default-saml\nrole=\"{\n  \"token_bound_cidrs\":null,\n  \"token_explicit_max_ttl\":0,\n  \"token_max_ttl\":0,\n  \"token_no_default_policy\":false,\n  \"token_num_uses\":0,\n  \"token_period\":0,\n  \"token_policies\":[\"default\"],\n  \"token_type\":0,\n  \"token_ttl\":0,\n  \"BoundSubjects\":[\"*@example.com\",\"*@ext.example.com\"],\n  \"BoundSubjectsType\":\"glob\",\n  \"BoundAttributes\":{\"groups\":[\"VaultAdmin\",\"VaultUser\"]},\n  \"BoundAttributesType\":\"string\",\n  \"GroupsAttribute\":\"groups\"\n}\"\nuser context=\"{\n  \"attributes\":\n  {\n    \"groups\":[\"Domain Users\",\"VaultAdmin\"],\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\":[\"rs@example.com\"]\n  },\n  \"subject\":\"rs@example.com\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Sending Okta Configuration Request via cURL\nDESCRIPTION: Shell command using cURL to send the configuration payload to the Okta auth endpoint with proper authentication headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/okta/config\n```\n\n----------------------------------------\n\nTITLE: Setting Max Versions for KV Metadata in Vault\nDESCRIPTION: This command sets the maximum number of versions to keep for a specified key in Vault's KV v2 secrets engine. This configuration helps manage the number of versions stored for a secret, deleting the oldest versions once the limit is reached.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/metadata.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv metadata put -mount=secret -max-versions=5 creds\nSuccess! Data written to: secret/metadata/creds\n```\n\n----------------------------------------\n\nTITLE: Deleting Destination - Shell Request\nDESCRIPTION: cURL command to delete a specific destination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm/my-store-1\n```\n\n----------------------------------------\n\nTITLE: Sample API Request for Influxdb Connection - HTTP API - Shell\nDESCRIPTION: This snippet shows an example of how to make a POST request to the Vault API to configure a connection to Influxdb. It uses curl with a header for authentication and data payload specified from a file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/influxdb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/influxdb/config/connection\n```\n\n----------------------------------------\n\nTITLE: Configuring CouchDB Storage in HashiCorp Vault using HCL\nDESCRIPTION: This snippet demonstrates how to configure HashiCorp Vault to use CouchDB as its backend storage using HCL syntax. Depend on the CouchDB database, the necessary parameters include the endpoint, username, and password. These can alternatively be set via specific environment variables. The example highlights authentication details and the endpoint setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/couchdb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"couchdb\" {\n  endpoint = \"https://my-couchdb-dns.tld:5984/my-database\"\n  username = \"admin\"\n  password = \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Accessor Lookup Response\nDESCRIPTION: This JSON response contains the details of the secret ID that corresponds to the given accessor. The response includes metadata, creation time, and other attributes related to the secret ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"72836cd1-139c-fe66-1402-8bb5ca4044b8\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"cidr_list\": [],\n    \"creation_time\": \"2023-02-10T18:17:27.089757383Z\",\n    \"expiration_time\": \"0001-01-01T00:00:00Z\",\n    \"last_updated_time\": \"2023-02-10T18:17:27.089757383Z\",\n    \"metadata\": {\n      \"tag1\": \"production\"\n    },\n    \"secret_id_accessor\": \"2be760a4-86bb-2fa9-1637-1b7fa9ba2896\",\n    \"secret_id_num_uses\": 0,\n    \"secret_id_ttl\": 0,\n    \"token_bound_cidrs\": []\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: HMAC Key Configuration Parameters for HSM\nDESCRIPTION: Details the PKCS#11 attributes for configuring an HMAC key in HSM. Specifies a 256-bit generic secret key that supports signing and verification operations while maintaining security through non-extractability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/pkcs11.mdx#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- `CKA_CLASS`: `CKO_SECRET_KEY` (It's a secret key)\n- `CKA_KEY_TYPE`: `CKK_GENERIC_SECRET_KEY` (Key type is a generic secret key)\n- `CKA_VALUE_LEN`: `32` (Key size is 256 bits)\n- `CKA_LABEL`: Set to the HMAC key label set in Vault's configuration\n- `CKA_ID`: Set to a random 32-bit unsigned integer\n- `CKA_PRIVATE`: `true` (Key is private to this slot/token)\n- `CKA_TOKEN`: `true` (Key persists to the slot/token rather than being for one session only)\n- `CKA_SENSITIVE`: `true` (Key is a sensitive value)\n- `CKA_SIGN`: `true` (Key can be used for signing)\n- `CKA_VERIFY`: `true` (Key can be used for verifying)\n- `CKA_EXTRACTABLE`: `false` (Key cannot be exported)\n```\n\n----------------------------------------\n\nTITLE: Listing LDAP Users using cURL\nDESCRIPTION: This snippet demonstrates how to list LDAP users by sending a LIST request to Vault's respective endpoint. The request is authenticated using an X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/ldap/users\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Token Count in Vault\nDESCRIPTION: This JSON snippet shows the structure of the response returned when querying the token count. It includes a 'data' object with a nested 'counters' object containing the total number of service tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"75cbaa46-e741-3eba-2be2-325b1ba8f03f\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"counters\": {\n      \"service_tokens\": {\n        \"total\": 1\n      }\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Socket Audit Device with Vault CLI\nDESCRIPTION: This snippet provides the command to enable a socket type audit device for Vault. Key parameters include server address, socket protocol type, and an optional write timeout. Ensure the server is reachable and configured to accept connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/enable.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable [flags] socket [options] \\\n    [address=<server_address>]                \\\n    [socket_type=<protocol>]                  \\\n    [write_timeout=<wait_time>]\n```\n\n----------------------------------------\n\nTITLE: Vault Capabilities Accessor API Response - JSON\nDESCRIPTION: The JSON response from the Vault capabilities-accessor endpoint. It shows both a 'capabilities' field (for backward compatibility with single path queries) and path-specific capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities-accessor.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"capabilities\": [\"delete\", \"list\", \"read\", \"update\"],\n  \"secret/foo\": [\"delete\", \"list\", \"read\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Okta Groups via cURL\nDESCRIPTION: Shell command to list all groups configured in the Okta auth method using LIST request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/okta/groups\n```\n\n----------------------------------------\n\nTITLE: Configuring URLs for Intermediate CA in Vault\nDESCRIPTION: Sets the URLs for the issuing certificate and CRL (Certificate Revocation List) distribution points.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki_int/config/urls issuing_certificates=\"http://127.0.0.1:8200/v1/pki_int/ca\" crl_distribution_points=\"http://127.0.0.1:8200/v1/pki_int/crl\"\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Roles - Shell Request\nDESCRIPTION: HTTP LIST request to retrieve all registered AWS roles from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/aws/roles\n```\n\n----------------------------------------\n\nTITLE: Authenticated Etcd Connection Configuration\nDESCRIPTION: Example showing how to configure Etcd storage with username and password authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/etcd.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"etcd\" {\n  username = \"user1234\"\n  password = \"pass5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Reading an Entity by ID - JSON\nDESCRIPTION: This JSON response is returned from Vault when querying an entity by its ID. It contains detailed information about the entity, such as metadata, creation time, policies, and more. The structure reflects the entity's attributes stored in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"bucket_key_hash\": \"177553e4c58987f4cc5d7e530136c642\", \"creation_time\": \"2017-07-25T20:29:22.614756844Z\", \"disabled\": false, \"id\": \"8d6a45e5-572f-8f13-d226-cd0d1ec57297\", \"last_update_time\": \"2017-07-25T20:29:22.614756844Z\", \"metadata\": {\"organization\": \"hashicorp\", \"team\": \"vault\"}, \"name\": \"entity-c323de27-2ad2-5ded-dbf3-0c7ef98bc613\", \"aliases\": [], \"policies\": [\"eng-dev\", \"infra-dev\"]}}\n```\n\n----------------------------------------\n\nTITLE: Creating Cassandra Role Sample Payload\nDESCRIPTION: JSON payload for creating a role definition with custom CQL statements to create and configure new users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"creation_cql\": \"CREATE USER ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading OIDC Provider Public Keys\nDESCRIPTION: This API endpoint retrieves the public keys for a specified OIDC provider. These keys can be used by clients to validate the authenticity of identity tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/.well-known/keys\n```\n\n----------------------------------------\n\nTITLE: Reading Raw Storage Values in Vault with cURL\nDESCRIPTION: Makes a GET request to retrieve raw data from Vault's storage backend at a specified path. Requires an authentication token and returns the raw value stored at that location.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/raw.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/raw/secret/foo\n```\n\n----------------------------------------\n\nTITLE: Read Tokenization Key Config - Response\nDESCRIPTION: Response showing current configuration of a tokenization key including versions and rotation settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"latest_version\": 1,\n    \"min_available_version\": 0,\n    \"min_decryption_version\": 1,\n    \"auto_rotate_period\": \"4320h\",\n    \"name\": \"transform_name\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration Response\nDESCRIPTION: This JSON response shows the complete configuration of an LDAP authentication method in Vault, including connection settings, group parameters, and user attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"binddn\": \"cn=vault,ou=Users,dc=example,dc=com\",\n    \"bindpass\": \"\",\n    \"certificate\": \"\",\n    \"deny_null_bind\": true,\n    \"discoverdn\": false,\n    \"groupattr\": \"cn\",\n    \"groupdn\": \"ou=Groups,dc=example,dc=com\",\n    \"groupfilter\": \"(\\u0026(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\",\n    \"insecure_tls\": false,\n    \"starttls\": false,\n    \"tls_max_version\": \"tls12\",\n    \"tls_min_version\": \"tls12\",\n    \"upndomain\": \"\",\n    \"url\": \"ldaps://ldap.myorg.com:636\",\n    \"username_as_alias\": false,\n    \"userattr\": \"samaccountname\",\n    \"userdn\": \"ou=Users,dc=example,dc=com\"\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Certificate Roles\nDESCRIPTION: This JSON response contains a list of configured certificate names in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"cert1\", \"cert2\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Describing Current License in Vault CLI\nDESCRIPTION: This shell session snippet demonstrates how to utilize the 'vault license get' command to obtain details about the current license being used in HashiCorp Vault. It outputs various key-value pairs indicating properties like expiration time, features enabled, and more. Ensure the Vault CLI is installed and configured properly before executing this command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/license/get.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault license get\nKey                          Value\n---                          -----\nexpiration_time              2022-05-17T23:59:59Z\nfeatures                     [HSM Performance Replication DR Replication MFA Sentinel Seal Wrapping Control Groups Performance Standby Namespaces KMIP Entropy Augmentation Transform Secrets Engine Lease Count Quotas Key Management Secrets Engine Automated Snapshots]\nlicense_id                   060d7820-fa59-f95c-832b-395db0aeb9ba\nperformance_standby_count    9999\nstart_time                   2021-05-17T00:00:00Z\ntermination_time             2031-05-17T23:59:59Z\n```\n\n----------------------------------------\n\nTITLE: Enabling GCP Secrets Engine via CLI\nDESCRIPTION: Command to enable the Google Cloud secrets engine at the default path using Vault CLI\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable gcp\nSuccess! Enabled the gcp secrets engine at: gcp/\n```\n\n----------------------------------------\n\nTITLE: Read Identity Access List Tidy Settings Response\nDESCRIPTION: JSON response showing current identity access list tidy settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"safety_buffer\": 600,\n    \"disable_periodic_tidy\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Credential Type in AWS Credentials Form - Release Note\nDESCRIPTION: This release note describes an enhancement made to the AWS credentials form within the Vault UI. The change allows the form to automatically set the credential_type based on the user's backing role, improving user experience and reducing manual input errors.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27405.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\nui: AWS credentials form sets credential_type from backing role\"\n```\n\n----------------------------------------\n\nTITLE: Querying Vault Encryption Key Status with cURL\nDESCRIPTION: A shell command demonstrating how to query the `/sys/key-status` endpoint using cURL. This request requires authentication via a Vault token provided in the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/key-status.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/key-status\n\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Completed DR Token Generation\nDESCRIPTION: JSON response showing the completed status of a DR operation token generation attempt, including the encoded token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"progress\": 3,\n  \"required\": 3,\n  \"pgp_fingerprint\": \"\",\n  \"complete\": true,\n  \"encoded_token\": \"FPzkNBvwNDeFh4SmGA8c+w==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Locked Users - Sample Response\nDESCRIPTION: Example JSON response showing locked users grouped by namespace, including user counts and mount accessor information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/user-lockout.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"request_id\":\"26be5ab9-dcac-9237-ec12-269a8ca647d5\",\n   \"lease_id\":\"\",\n   \"renewable\":false,\n   \"lease_duration\":0,\n   \"data\":{\n      \"by_namespace\":[\n         {\n            \"namespace_id\":\"BzIex\",\n            \"namespace_path\":\"ns1/\",\n            \"counts\": 3,\n            \"mount_accessors\":[\n               {\n                  \"mount_accessor\":\"auth_userpass_79e2fe02\",\n                  \"counts\":3,\n                  \"alias_identifiers\":[\n                      {\"user3\"},\n                      {\"user4\"},\n                      {\"user5\"},\n                  ]\n               },\n            ]\n         },\n         {\n            \"namespace_id\":\"root\",\n            \"namespace_path\":\"\",\n            \"counts\":2,\n            \"mount_accessors\":[\n               {\n                  \"mount_accessor\":\"auth_userpass_837f35fc\",\n                  \"counts\":2,\n                  \"alias_identifiers\":[\n                      {\"user1\"},\n                      {\"user2\"}\n                  ]\n               },\n            ]\n         },\n          {\n            \"namespace_id\":\"v1lb9\",\n            \"namespace_path\":\"ns1/ns2/\",\n            \"counts\":1,\n            \"mount_accessors\":[\n               {\n                  \"mount_accessor\":\"auth_userpass_af8d1d32\",\n                  \"counts\":1,\n                  \"alias_identifiers\":[\n                      {\"user6\"}\n                  ]\n               },\n            ]\n         }\n      ],\n      \"total\":6\n   },\n   \"wrap_info\":null,\n   \"warnings\":null,\n   \"auth\":null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Enterprise with Helm\nDESCRIPTION: This bash command installs Vault Enterprise using Helm with the configuration specified in the config.yaml file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhelm install hashicorp hashicorp/vault -f config.yaml\n```\n\n----------------------------------------\n\nTITLE: Remove Node Sample Payload\nDESCRIPTION: JSON payload for removing a node from the Raft cluster\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"server_id\": \"raft1\",\n  \"dr_operation_token\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault to Opt Out of Automated Reporting Using HCL\nDESCRIPTION: HCL configuration snippet to disable automated license utilization reporting in Vault Enterprise. This method is recommended as it doesn't require system restart, and should be added to the Vault server configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nreporting {\n\tlicense {\n\t\tenabled = false\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling KVv2 Secrets Engine in Vault\nDESCRIPTION: This command enables a new KVv2 secrets engine at the specified path in Vault. It's a prerequisite for storing secrets to be synced with Vercel.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/vercelproject.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path='my-kv' kv-v2\n```\n\n----------------------------------------\n\nTITLE: Viewing Vault Logs After Opting Out via Environment Variable\nDESCRIPTION: Example of Vault server logs showing confirmation that automated license utilization reporting has been disabled via an environment variable. The logs indicate that the system recognizes the opt-out configuration from the environment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-14_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n[INFO]  core: automated reporting disabled via environment variable: env=OPTOUT_LICENSE_REPORTING\n[INFO]  core: opting out of automated reporting\n[DEBUG] activity: there is no reporting agent configured, skipping counts reporting\n```\n\n----------------------------------------\n\nTITLE: Annotating Kubernetes Service Account for Vault Alias Metadata\nDESCRIPTION: This YAML snippet shows how to annotate a Kubernetes Service Account with metadata that can be used by Vault for alias creation. This is useful when working with templated policies in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: app\n  namespace: demo\n  annotations:\n    vault.hashicorp.com/alias-metadata-env: demo/app\n```\n\n----------------------------------------\n\nTITLE: Enabling AliCloud Auth in Vault\nDESCRIPTION: Command to enable the AliCloud authentication method in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/alicloud.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable alicloud\n```\n\n----------------------------------------\n\nTITLE: Reading AWS Role Configuration - JSON Response\nDESCRIPTION: Sample JSON response showing the role configuration including bound AMI ID, policies, TTL settings, and authentication parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"bound_ami_id\": [\"ami-fce36987\"],\n    \"role_tag\": \"\",\n    \"policies\": [\"default\", \"dev\", \"prod\"],\n    \"max_ttl\": 1800000,\n    \"disallow_reauthentication\": false,\n    \"allow_instance_migration\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Latest Version of Key in Vault KV Store\nDESCRIPTION: This command deletes the latest version of the key 'creds' from the 'secret' mount in Vault's key/value store. It works for both KV version 1 and 2.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/delete.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv delete -mount=secret creds\n```\n\n----------------------------------------\n\nTITLE: Authenticating with JWT via CLI (Default Path)\nDESCRIPTION: Command to authenticate using the JWT backend at the default path (/jwt) with the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/jwt/login role=demo jwt=...\n```\n\n----------------------------------------\n\nTITLE: Setting Log Verbosity Level for All Loggers (cURL Request)\nDESCRIPTION: Shell command to send a POST request to the /sys/loggers endpoint using cURL. This command uses the payload to modify the log level for all Vault loggers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/loggers\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Resource with Roles\nDESCRIPTION: This snippet illustrates how to define a Google Cloud resource along with associated IAM roles using HCL. It requires a valid resource path for the Google Cloud Platform and must be integrated into a larger configuration file for successful execution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"//cloudresourcemanager.googleapis.com/folders/123456\" {\n  roles = [\n    \"roles/compute.viewer\",\n    \"roles/deploymentmanager.viewer\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Vault Helm Upgrade with Dry Run\nDESCRIPTION: Command to perform a dry run of the Vault Helm upgrade to verify changes before applying them to the Kubernetes cluster. This specifies the chart version and the new image settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ helm upgrade vault hashicorp/vault --version=0.30.0 \\\n    --set='server.image.repository=vault' \\\n    --set='server.image.tag=123.456' \\\n    --dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Secrets Engine Lease Settings Payload\nDESCRIPTION: JSON payload for configuring lease settings for AWS credentials, specifying the default lease duration and maximum lease duration using time suffix notation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease\": \"30m\",\n  \"lease_max\": \"12h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping the target key in AWS CloudHSM\nDESCRIPTION: This command wraps the target key using the imported wrapping key in AWS CloudHSM, specifying the key IDs, wrapping mechanism, and hash function.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ wrapKey -noheader -k 1 -w 2 -t 3 -m 7 -out ciphertext.key\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device with Filter - Shell\nDESCRIPTION: This snippet enables a 'file' audit device with a filter to capture audit entries of a specific 'mount_type'. It requires a Vault setup with audit logging capabilities. The filter is set to 'mount_type == \"kv\"' to log events related to key/value operations in 'kv-audit.log'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/filtering.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\nvault audit enable                \\\n    -path kv-only                   \\\n    file                            \\\n    filter=\\\"mount_type == \\\"kv\\\"\\\"   \\\n    file_path=/logs/kv-audit.log\n```\n\n----------------------------------------\n\nTITLE: Adding Secrets Store CSI Driver to Privileged SCC in OpenShift\nDESCRIPTION: This command adds the service account for the Secrets Store CSI driver to the privileged security context constraint in OpenShift.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/installation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ oc adm policy add-scc-to-user privileged system:serviceaccount:${KUBERNETES_VAULT_NAMESPACE}:secrets-store-csi-driver\n```\n\n----------------------------------------\n\nTITLE: Login to Vault via CLI with API Key\nDESCRIPTION: Shell command to log in to Vault with user credentials configured in the SDK. It requires that the specified user is part of an authorized group for the Vault role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=oci auth_type=apikey role=devrole\n```\n\n----------------------------------------\n\nTITLE: Enabling Okta Auth Method in Vault\nDESCRIPTION: This CLI command enables the Okta auth method in Vault, allowing it to accept Okta credentials for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/okta.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable okta\n```\n\n----------------------------------------\n\nTITLE: Renewing a Lease - Shell\nDESCRIPTION: This command allows users to renew an existing lease in HashiCorp Vault, extending its validity period. It provides details about the lease ID and the new lease duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault lease renew database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nKey                Value\n---                -----\nlease_id           database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nlease_duration     5m\nlease_renewable    true\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL 5.6 Root Rotation\nDESCRIPTION: This command configures root rotation for MySQL 5.6 using the SET PASSWORD syntax.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mysql-database \\\n    plugin_name=mysql-database-plugin \\\n    connection_url=\"{{username}}:{{password}}@tcp(127.0.0.1:3306)/\" \\\n    root_rotation_statements=\"SET PASSWORD = PASSWORD('{{password}}')\" \\\n    allowed_roles=\"my-role\" \\\n    username=\"root\" \\\n    password=\"mysql\"\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Bindings Using HCL\nDESCRIPTION: This snippet provides the format for specifying IAM roles and resources using HCL. Rolesets or static accounts require bindings formatted as shown to define resources and related roles. It's critical to correctly format roles and resource paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_14\n\nLANGUAGE: hcl\nCODE:\n```\nresource NAME {\n  roles = [ROLE, [ROLE...]]\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"buckets/my-bucket\" {\n  roles = [\n    \"roles/storage.objectAdmin\",\n    \"roles/storage.legacyBucketReader\",\n  ]\n}\n\n# At instance level, using self-link\nresource \"https://www.googleapis.com/compute/v1/projects/my-project/zone/my-zone/instances/my-instance\" {\n  roles = [\n    \"roles/compute.instanceAdmin.v1\"\n  ]\n}\n\n# At project level\nresource \"//cloudresourcemanager.googleapis.com/projects/my-project\" {\n  roles = [\n    \"roles/compute.instanceAdmin.v1\",\n    \"roles/iam.serviceAccountUser\",  # required if managing instances that run as service accounts\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Home Tenancy in Vault\nDESCRIPTION: This process configures the home tenancy in Vault, allowing authentication only from specified tenants. It involves creating a configuration file with the tenancy OCID and sending the data to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{ \"home_tenancy_id\": \"your tenancy ocid here\" }\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl --header \"X-Vault-Token: $roottoken\" --request POST \\\n   --data @hometenancyid.json \\\n   http://127.0.0.1:8200/v1/auth/oci/config (127.0.0.1:8200/v1/auth/oci/config)\n```\n\n----------------------------------------\n\nTITLE: SSH Credential Generation Payload in JSON\nDESCRIPTION: Sample JSON payload for generating SSH credentials. The payload specifies the IP address of the remote host to connect to.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ip\": \"1.2.3.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Plugin Runtime Details\nDESCRIPTION: JSON response format when reading a specific plugin runtime's configuration. The response includes complete runtime details including resource limits and container configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-runtimes-catalog.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"example-plugin-runtime\",\n    \"type\": \"container\",\n    \"oci_runtime\": \"example-oci-runtime\",\n    \"cgroup_parent\": \"/examplelimit/\",\n    \"cpu_nanos\": 1000,\n    \"memory_bytes\": 10000000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Minimum Key Version for KMS Key\nDESCRIPTION: Command to set a minimum key version for a KMS key, which is used for trimming older key versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/keys/config/my-key min_version=10\n```\n\n----------------------------------------\n\nTITLE: Reindexing Vault Replication Data with cURL\nDESCRIPTION: This snippet shows how to trigger a reindexing of local data storage in the replication system. Reindexing can be a time-consuming operation depending on the size of the data store and requires sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/reindex\n```\n\n----------------------------------------\n\nTITLE: Performing Group Lookup with cURL\nDESCRIPTION: This shell command demonstrates executing a group lookup using cURL by making a POST request with an attached JSON payload. It requires cURL and a valid Vault token for authentication. Sent to a specific endpoint, this request returns JSON containing group details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/lookup.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/lookup/group\n```\n\n----------------------------------------\n\nTITLE: SSH into Ops Manager VM\nDESCRIPTION: The command logs into the Ops Manager VM using SSH. It requires a properly configured SSH key and address of the Ops Manager VM, replacing $OPS_MGR_URL appropriately.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ ssh -i ops_mgr.pem ubuntu@$OPS_MGR_URL\n```\n\n----------------------------------------\n\nTITLE: Revoking KMIP Credential Payload in JSON\nDESCRIPTION: JSON payload for revoking a KMIP credential by its serial number.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serial_number\": \"728181095563584845125173905844944137943705466376\"\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Vault Leases by Prefix\nDESCRIPTION: This snippet shows how to revoke multiple leases using the `-prefix` flag with the `vault lease revoke` command.  Instead of specifying an exact lease ID, a prefix is provided, and all leases starting with that prefix are revoked.  This is useful for revoking all leases associated with a particular secret or set of secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/revoke.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault lease revoke -prefix database/creds\nSuccess! Revoked any leases with prefix: database/creds\n```\n\n----------------------------------------\n\nTITLE: Checking In Service Accounts in Vault\nDESCRIPTION: Commands to check in service accounts, including options for specifying multiple accounts and forced check-ins by privileged users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f ldap/library/accounting-team/check-in\nKey          Value\n---          -----\ncheck_ins    [fizz@example.com]\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ldap/library/accounting-team/check-in service_account_names=fizz@example.com\nKey          Value\n---          -----\ncheck_ins    [fizz@example.com]\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f ldap/library/manage/accounting-team/check-in\nKey          Value\n---          -----\ncheck_ins    [fizz@example.com]\n```\n\n----------------------------------------\n\nTITLE: Joining Raft Cluster in Shell\nDESCRIPTION: This command adds a new node to the Raft cluster by joining it to the leader node's API address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migrate-consul-storage.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator raft join https://13.57.14.206:8200\n```\n\n----------------------------------------\n\nTITLE: Configuring Object Selector for Vault Agent Injector in Kubernetes\nDESCRIPTION: This YAML snippet configures the objectSelector for the admission webhook controller to limit which objects can be affected by mutation. It uses matchLabels to only enable injection for objects with the 'sidecar-injector: enabled' label.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nobjectSelector:\n  matchLabels:\n    sidecar-injector: enabled\n```\n\n----------------------------------------\n\nTITLE: IAM Groups Example Payload\nDESCRIPTION: This JSON snippet provides an example of how to specify IAM groups in a payload when creating a role with the assumed_role credential type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credential_type\": \"assumed_role\",\n  \"iam_groups\": [\"group1\", \"group2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration GET Request with cURL\nDESCRIPTION: Sample cURL command to retrieve current LDAP configuration from Vault API\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/ldap/config\n```\n\n----------------------------------------\n\nTITLE: Reading Programmatic API Key Role - HTTP API - Shell\nDESCRIPTION: This snippet shows how to read a programmatic API key role using a GET request to the designated API endpoint, with an expected response structure detailing the role attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/mongodbatlas.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/mongodbatlas/roles/test-programmatic-key\n```\n\n----------------------------------------\n\nTITLE: Custom Address and Token Configuration\nDESCRIPTION: Configuration with custom Consul address and ACL token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {\n  address = \"10.5.7.92:8194\"\n  token   = \"abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Patch for Vault Agent Injection\nDESCRIPTION: This bash snippet creates a YAML patch file to add Vault Agent Injector annotations to existing pods. It includes annotations for injecting secrets, specifying templates, and configuring TLS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncat <<EOF >> ./patch.yaml\nspec:\n  template:\n    metadata:\n      annotations:\n        vault.hashicorp.com/agent-inject: \"true\"\n        vault.hashicorp.com/agent-inject-status: \"update\"\n        vault.hashicorp.com/agent-inject-secret-db-creds: \"database/creds/db-app\"\n        vault.hashicorp.com/agent-inject-template-db-creds: |\n          {{- with secret \"database/creds/db-app\" -}}\n          postgres://{{ .Data.username }}:{{ .Data.password }}@postgres:5432/appdb?sslmode=disable\n          {{- end }}\n        vault.hashicorp.com/role: \"db-app\"\n        vault.hashicorp.com/ca-cert: \"/vault/tls/ca.crt\"\n        vault.hashicorp.com/client-cert: \"/vault/tls/client.crt\"\n        vault.hashicorp.com/client-key: \"/vault/tls/client.key\"\n        vault.hashicorp.com/tls-secret: \"vault-tls-client\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Create/Update AppRole - Shell Request\nDESCRIPTION: HTTP request to create or update an AppRole named 'application1'\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/approle/role/application1\n```\n\n----------------------------------------\n\nTITLE: MongoDB Plugin Configuration JSON Payload\nDESCRIPTION: Sample payload for configuring a MongoDB connection in Vault's database secrets engine. It specifies connection parameters including URL template, write concern settings, and authentication credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"mongodb-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"mongodb://{{username}}:{{password}}@mongodb.acme.com:27017/admin?ssl=true\",\n  \"write_concern\": \"{ \\\"wmode\\\": \\\"majority\\\", \\\"wtimeout\\\": 5000 }\",\n  \"username\": \"admin\",\n  \"password\": \"Password!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Request Payload in Vault API\nDESCRIPTION: JSON payload structure for unwrapping a token using the Vault API. Requires the wrapping token ID as a parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-unwrap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"abcd1234...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating Policy Assignments Using CLI - Bash\nDESCRIPTION: This snippet retrieves the existing policy assignments for each entity and appends a new policy using the CLI. It reads the current policies, adds the new one, and writes the updated policies back to Vault. Requires valid Vault access and jq tool for JSON manipulation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/acl-policy-templates.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npolicy_name=\"<policy_name>\"\nwhile read entity_name; do\n\n  if [[ \"\" = \"${entity_name}\" ]] ; then continue ; fi\n  \n  # Create a payload file with new policy added to any existing policy\n  # assignments\n  vault read                              \\\n    -field policies                       \\\n    -format json                          \\\n    /identity/entity/name/${entity_name}  \\\n    | jq  \". + [\\\"${policy_name}\\\"] | {policies: .}\" > policy_update.json\n\n  # Update the policy assignment for the entity\n  vault write /identity/entity/name/${entity_name} @policy_update.json\n\ndone < rename-targets.txt\n```\n\n----------------------------------------\n\nTITLE: Creating Static Role for Couchbase\nDESCRIPTION: Command to create a static role that maps to an existing Couchbase user with rotation settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write database/static-roles/my-static-role \\\n    db_name=\"my-couchbase-database\" \\\n    username=\"my-existing-couchbase-user\" \\\n    rotation_period=5m\n```\n\n----------------------------------------\n\nTITLE: Decoding Tokens with Vault's /sys/decode-token API Endpoint (JSON Response)\nDESCRIPTION: Sample response from the `/sys/decode-token` endpoint showing a successful token decoding operation. The response includes request metadata and the decoded token value in the data field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/decode-token.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"9bc0fab8-d65c-3961-afe6-d05f50c5fd22\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"token\": \"4RUmoevJ3lsLni9sTXcNnRE1\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Auth Method with Keytab\nDESCRIPTION: Command to configure the Kerberos authentication method in Vault with the keytab file and service account that will verify login requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kerberos.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/kerberos/config \\\n    keytab=@vault.keytab.base64 \\\n    service_account=\"vault_svc\"\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration JSON Payload\nDESCRIPTION: Example JSON payload containing LDAP server connection details, search parameters, and group filters for integration with Kerberos authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"binddn\": \"cn=vault,ou=Users,dc=example,dc=com\",\n  \"deny_null_bind\": true,\n  \"discoverdn\": false,\n  \"groupattr\": \"cn\",\n  \"groupdn\": \"ou=Groups,dc=example,dc=com\",\n  \"groupfilter\": \"(\\u0026(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\",\n  \"insecure_tls\": false,\n  \"starttls\": false,\n  \"tls_max_version\": \"tls12\",\n  \"tls_min_version\": \"tls12\",\n  \"url\": \"ldaps://ldap.myorg.com:636\",\n  \"userattr\": \"samaccountname\",\n  \"userdn\": \"ou=Users,dc=example,dc=com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example RAM Policy for Vault in AliCloud\nDESCRIPTION: JSON policy that grants Vault the necessary permissions to create and manage dynamic credentials in AliCloud. This policy includes permissions for all role configuration types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"ram:CreateAccessKey\",\n        \"ram:DeleteAccessKey\",\n        \"ram:CreatePolicy\",\n        \"ram:DeletePolicy\",\n        \"ram:AttachPolicyToUser\",\n        \"ram:DetachPolicyFromUser\",\n        \"ram:CreateUser\",\n        \"ram:DeleteUser\",\n        \"sts:AssumeRole\"\n      ],\n      \"Effect\": \"Allow\",\n      \"Resource\": \"*\"\n    }\n  ],\n  \"Version\": \"1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Oracle TDE Configuration Parameters\nDESCRIPTION: Use SQL commands to configure Oracle TDE with necessary parameters including wallet root and TDE configuration for HSM integration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nSQL> alter system set wallet_root='/opt/oracle/admin/ORCLCDB/wallet' scope=spfile;\nSQL> shutdown immediate;\nSQL> startup;\nSQL> alter system set TDE_CONFIGURATION=\"KEYSTORE_CONFIGURATION=HSM\" SCOPE=both;\n```\n\n----------------------------------------\n\nTITLE: Deleting Duplicate Entity Alias Using Vault CLI\nDESCRIPTION: This snippet demonstrates how to use the Vault CLI to delete a duplicate entity alias. The command requires the specific alias ID from the system logs, allowing administrators to resolve duplicates efficiently.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/different-case.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault delete /identity/entity-alias/id/<id>\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault delete /identity/entity-alias/id/df3568a4-3b65-4104-9481-1129ecbed72f\n\nSuccess! Data deleted (if it existed) at: identity/entity-alias/id/df3568a4-3b65-4104-9481-1129ecbed72f\n```\n\n----------------------------------------\n\nTITLE: Declaring a Group Lookup via HTTP API\nDESCRIPTION: This snippet shows a JSON payload used to lookup a group's identity using criteria like 'id'. It assumes the availability of the identity backend service and a valid credential. The JSON object comprises the request body in HTTP POST requests, and it expects a response containing group details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/lookup.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"70a4bdef-9da3-4460-b524-bb08542eef25\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Regex Mapping in HCL\nDESCRIPTION: This code snippet demonstrates how to define a regex mapping block in HCL, connecting a source and destination, and applying a regular expression filter to the imported data.  It specifies the source and destination names, the execution priority, and the regular expression used for filtering.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n\"mapping_regex {\\n  name        = \\\"my-map-1\\\"\\n  source      = \\\"my-gcp-source-1\\\"\\n  destination = \\\"my-dest-1\\\"\\n  priority    = 1\\n  expression  = \\\"^database/.*$\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Registering Enterprise Plugins in Vault\nDESCRIPTION: Command for registering an enterprise plugin in Vault. Unlike community plugins, enterprise plugins require specifying the version and must use the exact name from the HashiCorp releases page.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register \n    -version=<version of the plugin> # version must match the plugin version on the releases page\n    secret \\                         # type\n    vault-plugin-secrets-keymgmt     # name must match the plugin name on the releases page\n\nSuccess! Registered plugin: vault-plugin-secrets-keymgmt\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Tenancy - Shell Request\nDESCRIPTION: cURL command to configure the home tenancy using the OCI auth method API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/oci/config\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection via cURL\nDESCRIPTION: This snippet details how to configure a RabbitMQ connection using cURL by sending a JSON payload to the Vault API endpoint. It requires the Vault token and payload with connection details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/rabbitmq/config/connection\n```\n\n----------------------------------------\n\nTITLE: Deleting a Static Role in Vault\nDESCRIPTION: Makes a DELETE request to the Vault API to remove a static role definition. This only removes the role from Vault; the actual database user must be cleaned up manually since it was defined externally.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/database/static-roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Registering an Okta User with Policies\nDESCRIPTION: JSON payload for registering a new user with associated policies in the Okta auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\"dev\", \"prod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultStaticSecret for KV-v2 in YAML\nDESCRIPTION: Defines configuration for synchronizing a KV version 2 secret from Vault to a Kubernetes Secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  namespace: vso-example\n  name: vault-static-secret-v2\nspec:\n  vaultAuthRef: vault-auth\n  mount: kvv2\n  type: kv-v2\n  path: eng/apikey/google\n  version: 2\n  refreshAfter: 60s\n  destination:\n    create: true\n    name: static-secret2\n```\n\n----------------------------------------\n\nTITLE: Take Snapshot Sample Request\nDESCRIPTION: Shell command to take a snapshot of the Raft cluster state\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot > raft.snap\n```\n\n----------------------------------------\n\nTITLE: Decrypting Vault Unseal Key with Keybase\nDESCRIPTION: This command decrypts a Vault unseal key that was encrypted with a Keybase PGP key. It uses base64 decoding and the Keybase CLI tool.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"wcBMA37...\" | base64 --decode | keybase pgp decrypt\n```\n\n----------------------------------------\n\nTITLE: Updating a Key with Vault API\nDESCRIPTION: This code snippet demonstrates how to update the name of an existing key in Vault using the PKI secrets engine. It involves a POST request to the `/pki/key/:key_ref` endpoint with a JSON payload containing the new `key_name`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_77\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/key/default\n```\n\n----------------------------------------\n\nTITLE: Equivalent cURL API Call for Vault Patch\nDESCRIPTION: Shows the equivalent cURL command for performing a patch operation, including creating a JSON payload file and making the API request with proper headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/patch.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ tee request_payload.json -<<EOF\n{\n   \"organization\": \"hashicorp\"\n}\nEOF\n\n$ curl --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n    --request PATCH \\\n    --header 'Content-Type: application/merge-patch+json'\n    --data @request_payload.json \\\n    $VAULT_ADDR/v1/pki/roles/example\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Stackdriver Telemetry - HCL\nDESCRIPTION: This snippet demonstrates setting up telemetry parameters for Stackdriver Monitoring in Vault's configuration file. It involves specifying project ID, location, namespace, and hostname settings for the Google Cloud environment. Dependencies include Google Cloud authentication with appropriate IAM roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  stackdriver_project_id = \"my-test-project\"\n  stackdriver_location = \"us-east1-a\"\n  stackdriver_namespace = \"vault-cluster-a\"\n  disable_hostname = true\n  enable_hostname_label = true\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Lease Count Quotas with cURL in Vault\nDESCRIPTION: Sample cURL request to list all lease count quotas across all namespaces. This sends a LIST request to the quota endpoint requiring a Vault token for authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/lease-count-quotas.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request LIST \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/quotas/lease-count\n```\n\n----------------------------------------\n\nTITLE: List RGP Policies Response\nDESCRIPTION: Sample JSON response showing available RGP policy names\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\"webapp\", \"database\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Directory Permissions on Linux\nDESCRIPTION: This snippet updates the permissions on the Vault data directory to grant the vault user necessary access while restricting others.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo chmod -R 750 ${VAULT_DATA}\n```\n\n----------------------------------------\n\nTITLE: Creating Automatic Key Rotation Configuration in JSON\nDESCRIPTION: JSON payload for configuring automatic key rotation with a custom maximum operation count of 2 billion and a time-based interval of 4320 hours (180 days).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rotate-config.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_operations\": 2000000000,\n  \"interval\": \"4320h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Distributing Key to Cloud KMS\nDESCRIPTION: Command to distribute the created key to GCP Cloud KMS with specified purpose and protection level.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nvault write keymgmt/kms/example-kms/key/aes256-gcm96 \\\n    purpose=\"encrypt,decrypt\" \\\n    protection=\"hsm\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Volumes and VolumeMounts in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up volumes and volume mounts for Vault, specifically for mounting a secret containing GCP IAM credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  volumes:\n    - name: userconfig-my-gcp-iam\n      secret:\n        defaultMode: 420\n        secretName: my-gcp-iam\n\n  volumeMounts:\n    - mountPath: /vault/userconfig/my-gcp-iam\n      name: userconfig-my-gcp-iam\n      readOnly: true\n```\n\n----------------------------------------\n\nTITLE: Updating ACL Rules for kv v2\nDESCRIPTION: This HCL snippet demonstrates how to update ACL policies from kv v1 to kv v2 by changing the path prefixes from v1 to v2. Ensure to include `data/` in the updated paths to maintain access control capabilities for create, update, and read.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/upgrade.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"shared/dev/square-api/*\" {\n  capabilities = [\"create\", \"update\", \"read\"]\n}\n\n```\n\nLANGUAGE: hcl\nCODE:\n```\npath \"shared/data/dev/square-api/*\" {\n  capabilities = [\"create\", \"update\", \"read\"]\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Paths for Vault\nDESCRIPTION: YAML configuration for defining the URL paths that will be routed to the Vault service through Kubernetes Ingress. This example routes both the root path and /vault path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\npaths:\n  - /\n  - /vault\n```\n\n----------------------------------------\n\nTITLE: Checking Secrets Tune Parameters - Shell Session\nDESCRIPTION: This command lists all the parameters available for tuning in a secrets engine, helping administrators optimize and define the configuration settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets tune -h\n```\n\n----------------------------------------\n\nTITLE: Writing Secrets to GCP Sync Destination using Vault\nDESCRIPTION: This snippet demonstrates how to configure Vault to sync secrets with a specific GCP project by overriding the default project ID using the 'project_id' parameter. The command requires a valid Vault setup and necessary permissions in the target GCP project.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/gcpsm.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/gcp-sm/my-dest \\\n    project_id='target-project-id'\n```\n\n----------------------------------------\n\nTITLE: Successful Entity Alias Update Response (JSON)\nDESCRIPTION: This JSON response shows the structure of a successful entity alias update. It returns the canonical ID of the associated entity and the ID of the updated alias, confirming the update was successfully applied to the specified alias within the Identity store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"canonical_id\": \"404e57bc-a0b1-a80f-0a73-b6e92e8a52d3\",\n    \"id\": \"34982d3d-e3ce-5d8b-6e5f-b9bb34246c31\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Token Example\nDESCRIPTION: Example showing how to set the VAULT_TOKEN environment variable with a specific UUID token value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_TOKEN=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Revoking a Vault Token\nDESCRIPTION: This command revokes a Vault token using the `vault token revoke` subcommand. It requires the token ID to be revoked and Vault to be properly configured and authenticated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token revoke 96ddf4bc-d217-f3ba-f9bd-017055595017\n```\n\n----------------------------------------\n\nTITLE: Signing SSH Host Public Key in Shell\nDESCRIPTION: Use Vault to sign the SSH public key for a host, generating a certificate. The output is necessary for SSH configuration to enable secure connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh-host-signer/sign/hostrole \\\n    cert_type=host \\\n    public_key=@/etc/ssh/ssh_host_rsa_key.pub\nKey             Value\n---             -----\nserial_number   3746eb17371540d9\nsigned_key      ssh-rsa-cert-v01@openssh.com AAAAHHNzaC1y...\n```\n\n----------------------------------------\n\nTITLE: Deleting TOTP Key from Vault\nDESCRIPTION: Deletes a TOTP key and its configuration from Vault. This operation cannot be undone, and any applications using this key for authentication will need to be reconfigured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/totp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/totp/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Reload Plugin for All Connections with cURL\nDESCRIPTION: This cURL command triggers a reload for all connections referencing a specified plugin name in Vault. By sending a POST request to the /database/reload/:plugin_name endpoint, all related connections are reset, making it useful for applying plugin updates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/database/reload/postgresql-database-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace - Vault CLI - Shell\nDESCRIPTION: This command creates a new namespace at a specified path in Vault. It accepts an optional \"-custom-metadata\" parameter to add key-value pairs as metadata. Requires Vault CLI and proper permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/namespace.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace create ns1/\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace create -custom-metadata=foo=abc -custom-metadata=bar=123 ns1/\n```\n\n----------------------------------------\n\nTITLE: Submit Key Share for DR Token Generation\nDESCRIPTION: cURL command to submit a key share for progressing the DR operation token generation using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/generate-operation-token/update\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets - Vault KV API - Shell\nDESCRIPTION: This curl command lists the keys at a specified secret location in the Vault KV secrets engine. The `X-Vault-Token` header is required for authentication, and the LIST method is used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v1.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/secret/my-secret\n```\n\n----------------------------------------\n\nTITLE: Mount Accessor Cache Response in Vault\nDESCRIPTION: The JSON response from the accessor cache endpoint lists all mount entries, providing details such as accessor IDs, namespaces, mount paths, types, and UUIDs for each mounted backend, indexed by accessor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"4b7de90d-75e0-978f-bc23-23c23b19a604\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"accessor\": [\n      {\n        \"accessor\": \"auth_token_d5fcf970\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"token/\",\n        \"mount_type\": \"token\",\n        \"uuid\": \"de61dd8c-a181-ccc2-457d-908e417d10b0\"\n      },\n      {\n        \"accessor\": \"cubbyhole_58b6727b\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"cubbyhole/\",\n        \"mount_type\": \"cubbyhole\",\n        \"uuid\": \"496bc2e4-b641-2561-1829-f6557bf1fedc\"\n      },\n      {\n        \"accessor\": \"identity_2ccfb6ab\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"identity/\",\n        \"mount_type\": \"identity\",\n        \"uuid\": \"b15e93e0-5bf1-07b0-86d3-563f9c77eef1\"\n      },\n      {\n        \"accessor\": \"system_0157e00a\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"sys/\",\n        \"mount_type\": \"system\",\n        \"uuid\": \"8ac2615e-8a73-fe66-52a6-a422f7e3273f\"\n      }\n    ]\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Store Encrypted PGP Keys in Vault Core\nDESCRIPTION: Initializes a rekey operation with PGP encryption and backs up the encrypted keys in Vault's core.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey \\\n    -init \\\n    -pgp-keys=\"...\" \\\n    -backup\n```\n\n----------------------------------------\n\nTITLE: Rotating CRL - GET Request\nDESCRIPTION: Example of sending a GET request to rotate the CRL using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_108\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/crl/rotate\n```\n\n----------------------------------------\n\nTITLE: Reading CA Issuer Details in Vault PKI\nDESCRIPTION: This request retrieves detailed information about a specific CA issuer in Vault's PKI secrets engine, including its certificate, chain, ID, and configuration settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_68\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/issuer/default\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDFDCCAfygAwIBAgIUXgxy54mKooz5soqQoRINazH/3pQwDQYJKoZIhvcNAQEL\\n...\",\n      \"-----BEGIN CERTIFICATE-----\\nMIIDFTCCAf2gAwIBAgIUUo/qwLm5AyqUWqFHw1MlgwUtS/kwDQYJKoZIhvcNAQEL\\n...\"\n    ],\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDFDCCAfygAwIBAgIUXgxy54mKooz5soqQoRINazH/3pQwDQYJKoZIhvcNAQEL\\n...\",\n    \"issuer_id\": \"7545992c-1910-0898-9e64-d575549fbe9c\",\n    \"issuer_name\": \"root-x1\",\n    \"key_id\": \"baadd98d-ec5a-66ac-06b7-dfc91c02c9cf\",\n    \"leaf_not_after_behavior\": \"truncate\",\n    \"manual_chain\": null,\n    \"usage\": \"read-only,issuing-certificates,crl-signing,ocsp-signing\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS IAM Server ID Header via CLI\nDESCRIPTION: Sets a required X-Vault-AWS-IAM-Server-ID header for additional security.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/aws/config/client iam_server_id_header_value=vault.example.com\n```\n\n----------------------------------------\n\nTITLE: Basic Manta Storage Configuration in HCL\nDESCRIPTION: Basic configuration for Vault backend storage using Manta. Demonstrates required parameters including directory path, user authentication, and SSH key ID for API access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/manta.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"manta\" {\n  directory   = \"manta-directory\"\n  user = \"myuser\"\n  key_id = \"40:9d:d3:f9:0b:86:62:48:f4:2e:a5:8e:43:00:2a:9b\"\n}\n```\n\n----------------------------------------\n\nTITLE: CockroachDB Storage without SSL Verification in HCL\nDESCRIPTION: Configuration example showing connection to CockroachDB cluster with SSL verification disabled (not recommended for production) and high availability enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/cockroachdb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"cockroachdb\" {\n  connection_url = \"postgres://user:pass@localhost:26257/database?sslmode=disable\"\n  ha_enabled     = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for a CA Role\nDESCRIPTION: Example JSON response when reading an SSH role of type CA. Shows various certificate configuration options including allowed domains, certificates, extensions, and TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allow_bare_domains\": false,\n  \"allow_host_certificates\": true,\n  \"allow_subdomains\": false,\n  \"allow_user_key_ids\": false,\n  \"allow_user_certificates\": true,\n  \"allowed_critical_options\": \"\",\n  \"allowed_extensions\": \"\",\n  \"default_critical_options\": {},\n  \"default_extensions\": {},\n  \"max_ttl\": \"768h\",\n  \"ttl\": \"4h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Read LDAP Configuration Request\nDESCRIPTION: This curl command retrieves the current LDAP authentication configuration from Vault using a GET request with appropriate authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/ldap/config\n```\n\n----------------------------------------\n\nTITLE: Creating a Group Alias - HTTP API\nDESCRIPTION: This snippet shows how to create or update a group alias by sending a POST request to the specified endpoint with the required parameters in the payload. The `name`, `id`, `mount_accessor`, and `canonical_id` parameters are essential for identifying and managing the group alias.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/group-alias\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Rewrap Operation\nDESCRIPTION: Example payload for re-encrypting ciphertext using the Transit engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"vault:v1:XjsPWPjqPrBi1N2Ms2s1QM798YyFWnO4TR4lsFA=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create/Update Group by Name - Vault Identity API (JSON Payload)\nDESCRIPTION: This JSON payload is used for creating or updating a group by name in Vault's Identity store. It specifies the metadata and policies associated with the group.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"metadata\": {\n    \"hello\": \"everyone\"\n  },\n  \"policies\": [\"grouppolicy2\", \"grouppolicy3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Service Registration Configuration\nDESCRIPTION: Basic syntax for configuring service registration in Vault's configuration file using the service_registration stanza with parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration [NAME] {\n  [PARAMETERS...]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Role with JSON-formatted Label Selector\nDESCRIPTION: Alternative JSON payload for configuring a Kubernetes role with a label selector expressed in JSON format instead of YAML, targeting the same production namespaces with a vault generator label.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespace_selector\": \"'{'matchLabels':{'stage':'prod','sa-generator':'vault'}}\",\n  \"service_account_name\": \"default\",\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response After Rotating AWS Root Credentials\nDESCRIPTION: JSON response from the Vault API after rotating AWS root credentials, containing the new access key that Vault will use for AWS operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"access_key\": \"AKIA...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Looking up a Lease - Shell Command in Vault\nDESCRIPTION: This command retrieves detailed information about a secret's lease in HashiCorp Vault using the lease ID. It does not require additional flags. The output includes details such as expire time, lease ID, and whether the lease is renewable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/lookup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault lease lookup database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nKey             Value\n---             -----\nexpire_time     2021-03-17T11:55:50.755313-05:00\nid              database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nissue_time      2021-03-17T11:45:50.755312-05:00\nlast_renewal    <nil>\nrenewable       true\nttl             9m52s\n```\n\n----------------------------------------\n\nTITLE: MFA Validation Using Vault CLI\nDESCRIPTION: This command shows how to use the Vault CLI to validate an MFA login request, specifying the payload file and output format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/mfa/validate -format=json @payload.json\n```\n\n----------------------------------------\n\nTITLE: Reading OIDC Assignment by Name\nDESCRIPTION: This API endpoint retrieves information about a specific OIDC assignment by name. The request uses a GET HTTP method and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/oidc/assignment/test-assignment\n```\n\n----------------------------------------\n\nTITLE: Reloading Vault EKM Provider DLL in SQL Server\nDESCRIPTION: SQL command to reload the provider DLL from the installed location after updating to the latest version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/upgrading.mdx#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nALTER CRYPTOGRAPHIC PROVIDER TransitVaultProvider\n    FROM FILE = 'C:\\Program Files\\HashiCorp\\Transit Vault EKM Provider\\TransitVaultEKM.dll';\n```\n\n----------------------------------------\n\nTITLE: GET Request to Read Okta MFA Method Configuration\nDESCRIPTION: Shell command using curl to send a GET request that retrieves the configuration of an existing Okta MFA method. It uses a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/okta.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/okta/my_okta\n```\n\n----------------------------------------\n\nTITLE: OIDC Provider: Sample Payload\nDESCRIPTION: This is a sample JSON payload for creating or updating an OIDC provider. It configures allowed client IDs and supported scopes. The `allowed_client_ids` field specifies which clients are permitted to use the provider, and the `scopes_supported` field defines the available scopes for requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_client_ids\": [\"*\"],\n  \"scopes_supported\": [\"test-scope\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lease Count Quota Payload in JSON for Vault API\nDESCRIPTION: This JSON payload defines the settings for a lease count quota, including the quota name, path, role, and maximum number of leases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"<QUOTA_NAME>\",\n  \"path\": \"<PLUGIN_MOUNT_PATH>\",\n  \"role\": \"<OPTIONAL_AUTHN_ROLE>\",\n  \"max_leases\": <LEASE_LIMIT>,\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Kubernetes Authentication Response\nDESCRIPTION: Sample JSON response from successful Kubernetes authentication, including client token, policies, and metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"62b858f9-529c-6b26-e0b8-0457b6aacdb4\",\n    \"accessor\": \"afa306d0-be3d-c8d2-b0d7-2676e1c0d9b4\",\n    \"policies\": [\"default\"],\n    \"metadata\": {\n      \"role\": \"test\",\n      \"service_account_name\": \"vault-auth\",\n      \"service_account_namespace\": \"default\",\n      \"service_account_secret_name\": \"vault-auth-token-pd21c\",\n      \"service_account_uid\": \"aa9aa8ff-98d0-11e7-9bb7-0800276d99bf\"\n    },\n    \"lease_duration\": 2764800,\n    \"renewable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing cert-manager with Helm\nDESCRIPTION: Commands to add the cert-manager Helm repository and install cert-manager in the Kubernetes cluster with CRDs enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm repo add jetstack https://charts.jetstack.io\n$ helm repo update\n$ helm install cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --set installCRDs=true\n```\n\n----------------------------------------\n\nTITLE: Documenting Plugin Versioning Feature in Vault Release Notes\nDESCRIPTION: A release note entry for HashiCorp Vault describing the new plugin versioning feature. This feature allows users to register, manage, and run plugins with semantic version specifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/plugin-versioning.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Plugin Versioning**: Vault supports registering, managing, and running plugins with semantic versions specified.\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling EKM Provider in SQL Server\nDESCRIPTION: SQL commands to enable advanced options and configure the EKM provider\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\n-- Enable advanced options\nUSE master;\nGO\n\nEXEC sp_configure 'show advanced options', 1;\nGO\n\nRECONFIGURE;\nGO\n\n-- Enable EKM provider\nEXEC sp_configure 'EKM provider enabled', 1;\nGO\n\nRECONFIGURE;\nGO\n\nCREATE CRYPTOGRAPHIC PROVIDER TransitVaultProvider\nFROM FILE = 'C:\\Program Files\\HashiCorp\\Transit Vault EKM Provider\\TransitVaultEKM.dll'\nGO\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Importing Key\nDESCRIPTION: This JSON payload provides an example for importing a key into Vault's PKI secrets engine. It includes the `key_name` and the `pem_bundle` (containing the private key in PEM format).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_name\": \"my-imported-key\",\n  \"pem_bundle\": \"-----BEGIN RSA PRIVATE KEY-----\\n...\\n-----END CERTIFICATE-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading Vault Secrets Operator with Helm\nDESCRIPTION: Upgrades an existing Vault Secrets Operator installation using Helm. Replace <TARGET_VSO_VERSION> with the desired version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ helm upgrade --version <TARGET_VSO_VERSION> --namespace vault-secrets-operator vault-secrets-operator hashicorp/vault-secrets-operator\n```\n\n----------------------------------------\n\nTITLE: Request object structure in JSON\nDESCRIPTION: This snippet describes the structure of the request object in audit entries. It encompasses various fields pertaining to client information, request details, and operational parameters that aid in comprehensive logging.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_certificate_serial_number\": \"\",\n  \"client_id\": \"\",\n  \"client_token\": \"\",\n  \"client_token_accessor\": \"\",\n  \"data\": {},\n  \"id\": \"\",\n  \"headers\": {},\n  \"mount_accessor\": \"\",\n  \"mount_class\": \"\",\n  \"mount_point\": \"\",\n  \"mount_type\": \"\",\n  \"mount_running_version\": \"\",\n  \"mount_running_sha256\": \"\",\n  \"mount_is_external_plugin\": \"\",\n  \"namespace\": {\n    \"id\": \"\",\n    \"path\": \"\"\n  },\n  \"operation\": \"\",\n  \"path\": \"\",\n  \"policy_override\": true,\n  \"remote_address\": \"\",\n  \"remote_port\": 1234,\n  \"replication_cluster\": \"\",\n  \"request_uri\": \"\",\n  \"wrap_ttl\": 60\n}\n```\n\n----------------------------------------\n\nTITLE: Response from CSR Signing Operation\nDESCRIPTION: Example JSON response from a CSR signing operation, containing the name, version, and PEM-encoded CSR signed by the Transit key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"name\": \"my-key\",\n    \"version\": 1,\n    \"csr\": \"-----BEGIN ...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Connection Sample Request\nDESCRIPTION: cURL request to configure the Cassandra connection settings using the provided JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/cassandra/config/connection\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Resource Bindings with HCL for Static Accounts\nDESCRIPTION: HCL configuration for defining GCP resource bindings that specify what permissions the static account has. Includes examples of binding to projects, specific resources, and using custom roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_15\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"//cloudresourcemanager.googleapis.com/projects/mygcpproject\" {\n  roles = [\n    \"roles/viewer\"\n  ],\n}\n\nresource \"//bigquery.googleapis.com/projects/my-project/datasets/mydataset\" {\n  roles = [\n    \"roles/bigquery.dataViewer\"\n  ],\n}\n\nresource \"https://selflink/to/my/resource\" {\n  roles = [\n    \"project/mygcpproject/roles/projcustomrole\",\n    \"organizations/myorg/roles/orgcustomrole\"\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Lease Count Quota Example via CLI in Vault\nDESCRIPTION: This example shows how to create a targeted quota limit called 'webapp-tokens' on the 'webapp' role for the 'approle' plugin at the default mount path, with a maximum of 100 leases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write                            \\\n    sys/quotas/lease-count/webapp-tokens \\\n    name=\"webapp-tokens\"                 \\\n    path=\"auth/approle\"                  \\\n    role=\"webapp\"                        \\\n    max_leases=100\n```\n\n----------------------------------------\n\nTITLE: Deleting an Alphabet with cURL in Vault Transform API\nDESCRIPTION: Makes a DELETE request to remove a specific alphabet by name from the Vault Transform Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_41\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/transform/alphabet/example-alphabet\n```\n\n----------------------------------------\n\nTITLE: Creating SSH Host Role in Shell\nDESCRIPTION: Create a role in Vault for signing SSH host keys, specifying allowed domains and cryptographic settings. This defines which hosts can be signed by the CA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh-host-signer/roles/hostrole \\\n    key_type=ca \\\n    algorithm_signer=rsa-sha2-256 \\\n    ttl=87600h \\\n    allow_host_certificates=true \\\n    allowed_domains=\"localdomain,example.com\" \\\n    allow_subdomains=true\n```\n\n----------------------------------------\n\nTITLE: Locking a Namespace API - Vault CLI - Shell\nDESCRIPTION: This command locks the API for the current or a specified descendant namespace, preventing unauthorized access. Requires a valid Vault setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/namespace.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace lock\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace lock ns1/\n```\n\n----------------------------------------\n\nTITLE: Creating SecurityContextConstraint for Application in OpenShift\nDESCRIPTION: This command creates a YAML file defining a SecurityContextConstraint for the application using the Vault CSI provider in OpenShift. It allows necessary permissions for the application's service account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/installation.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ cat > application-scc.yaml << EOF\napiVersion: security.openshift.io/v1\nkind: SecurityContextConstraints\nmetadata:\n  name: vault-csi-provider\nallowPrivilegedContainer: false\nallowHostDirVolumePlugin: true\nallowHostNetwork: true\nallowHostPorts: true\nallowHostIPC: false\nallowHostPID: false\nreadOnlyRootFilesystem: false\ndefaultAddCapabilities:\n- SYS_ADMIN\nrunAsUser:\n  type: RunAsAny\nseLinuxContext:\n  type: RunAsAny\nfsGroup:\n  type: RunAsAny\nusers:\n- system:serviceaccount:${KUBERNETES_APPLICATION_NAMESPACE}:${APPLICATION_SERVICE_ACCOUNT}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Decrypting Asymmetrically Encrypted Data with KMS Key\nDESCRIPTION: Command to decrypt ciphertext that was encrypted with a public key, specifying the key version. Only Cloud KMS has the private key needed for this operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/decrypt/my-key key_version=1 ciphertext=CiQAuMv0lTiKjrF43Lgr4...\nKey          Value\n---          -----\nplaintext    hello world\n```\n\n----------------------------------------\n\nTITLE: Sample cURL request for revoking a certificate with private key\nDESCRIPTION: This cURL command demonstrates the process of sending a POST request to the '/pki/revoke-with-key' endpoint, which includes the private key, to revoke a certificate. The request includes the payload stored in 'payload.json' and requires an authentication token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/revoke-with-key\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Auto-Join Configuration Usage\nDESCRIPTION: Shows how to use cloud auto-join configuration for joining Raft cluster nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault operator raft join [options] <auto-join-configuration>\n  Join the current node as a peer to the Raft cluster by providing cloud auto-join\n  metadata configuration.\n    $ vault operator raft join \"provider=aws region=eu-west-1 ...\"\n```\n\n----------------------------------------\n\nTITLE: Enabling User Lockout for Userpass Auth Method in Vault CLI\nDESCRIPTION: This snippet demonstrates how to enable user lockout for the userpass auth method, setting a threshold of 10 failed attempts within 10 minutes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth tune -user-lockout-threshold=10  -user-lockout-duration=10m userpass/\nSuccess! Tuned the auth method at: userpass/\n```\n\n----------------------------------------\n\nTITLE: Reading Verification Progress Request\nDESCRIPTION: HTTP GET request to check status of rekey verification\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/rekey-recovery-key/verify\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Rewrap Operation\nDESCRIPTION: cURL command to re-encrypt data using the Transit engine's rewrap endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_38\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/rewrap/my-key\n```\n\n----------------------------------------\n\nTITLE: Decrypting Data with XKS Key in AWS CLI\nDESCRIPTION: This command decrypts the previously encrypted ciphertext using the same KMS key. It shows how to perform decryption operations with an XKS-backed key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws kms decrypt --ciphertext-blob somerandomciphertextblob=\n{\n    \"KeyId\": \"arn:aws:kms:us-east-2:111111111111:key/a93f205a-2a37-4338-aa64-92b4a4b0b67d\",\n    \"Plaintext\": \"YWJjMTIzCg==\",\n    \"EncryptionAlgorithm\": \"SYMMETRIC_DEFAULT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Read PingID MFA Method Configuration\nDESCRIPTION: This curl command shows how to send a GET request to read the configuration of a PingID MFA method. It includes the necessary headers and the method name in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/pingid.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/pingid/ping\n```\n\n----------------------------------------\n\nTITLE: Read Secret with Duo Push MFA Text Command\nDESCRIPTION: This command reads a secret, triggering a Duo push notification. The call blocks until the MFA validation is completed. Ensure the Duo integration is properly configured and the user is authenticated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ vault read secret/foo\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to SAML Callback - Shell\nDESCRIPTION: This shell command shows how to send a POST request to the SAML callback endpoint using curl, including the required headers and payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/saml/callback\n```\n\n----------------------------------------\n\nTITLE: Response for Listing Entities by ID - JSON\nDESCRIPTION: The JSON response received from a LIST request for entity IDs contains a collection of available entity identifiers within Vault. This is useful for keeping track of entities stored in the system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"keys\": [\"02fe5a88-912b-6794-62ed-db873ef86a95\", \"3bf81bc9-44df-8138-57f9-724a9ae36d04\", \"627fba68-98c9-c012-71ba-bfb349585ce1\", \"6c4c805b-b384-3d0e-4d51-44d349887b96\", \"70a72feb-35d1-c775-0813-8efaa8b4b9b5\", \"f1092a67-ce34-48fd-161d-c13a367bc1cd\", \"faedd89a-0d82-c197-c8f9-93a3e6cf0cd0\"]}}\n```\n\n----------------------------------------\n\nTITLE: Reading Secret with MFA in Vault\nDESCRIPTION: This command reads the secret located at `secret/data/foo`, requiring MFA validation using the `my_totp` method with the provided passcode. This ensures that access to the secret is protected by multi-factor authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n$ vault read -mfa my_totp:146378 secret/data/foo\n```\n\n----------------------------------------\n\nTITLE: GitHub App Configuration Response\nDESCRIPTION: JSON response structure showing the configured GitHub app details, including app_id, fingerprint, and masked private key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request_id\": \"uuid\",\n    \"data\": {\n        \"app_id\": 123456,\n        \"fingerprint\": \"<fingerprint>\",\n        \"name\": \"my-custom-app\",\n        \"private_key\": \"*****\"\n    },\n    \"mount_type\": \"system\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Path Configuration\nDESCRIPTION: Configuration example specifying a custom path in Consul's key-value store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"consul\" {\n  path = \"vault/\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Update: GET /sys/auth\nDESCRIPTION: The `GET /sys/auth` API endpoint has been updated to include a `deprecation_status` field in the response data for built-in authentication methods. This allows users to easily determine the deprecation status of built-in authentication plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16849.txt#2025-04-14_snippet_0\n\nLANGUAGE: none\nCODE:\n```\nauth: `GET /sys/auth` endpoint now returns an additional `deprecation_status` field in the response data for builtins.\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment for File-Based Dynamic Database Credentials in YAML\nDESCRIPTION: This YAML snippet defines a Deployment that uses the SecretProviderClass to mount dynamic database credentials as files. It specifies a CSI volume with the 'vault-db-creds' SecretProviderClass and mounts it to '/mnt/secrets-store'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/examples.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: demo\nspec:\n  selector:\n    matchLabels:\n      app: demo\n  replicas: 1\n  template:\n    metadata:\n      annotations:\n      labels:\n        app: demo\n    spec:\n      serviceAccountName: app\n      containers:\n        - name: app\n          image: my-app:1.0.0\n          volumeMounts:\n            - name: 'vault-db-creds'\n              mountPath: '/mnt/secrets-store'\n              readOnly: true\n      volumes:\n        - name: vault-db-creds\n          csi:\n            driver: 'secrets-store.csi.k8s.io'\n            readOnly: true\n            volumeAttributes:\n              secretProviderClass: 'vault-db-creds'\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Vault EKM Provider in SQL Server\nDESCRIPTION: SQL commands to re-enable the cryptographic provider and verify its enabled status and version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/upgrading.mdx#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nALTER CRYPTOGRAPHIC PROVIDER TransitVaultProvider ENABLE;\nSELECT * FROM sys.cryptographic_providers;\n```\n\n----------------------------------------\n\nTITLE: Verifying Secrets Mount TTL - Shell Session\nDESCRIPTION: The snippet displays the output of the current tuning configuration for a secrets mount, showcasing the default and modified max lease TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read sys/mounts/mongodb/tune\n\nKey                  Value\n---                  -----\ndefault_lease_ttl    768h\ndescription          n/a\nforce_no_cache       false\nmax_lease_ttl        2880h\n```\n\n----------------------------------------\n\nTITLE: Listing Open Files for Vault Process\nDESCRIPTION: Command to get detailed output of all open files and connections for the Vault process using lsof.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo lsof -p $(pidof vault)\n```\n\n----------------------------------------\n\nTITLE: POST Request for Writing Configuration to GCP Secrets Engine\nDESCRIPTION: Shell command demonstrating how to use 'curl' to send a POST request to the Vault API to configure the GCP secrets engine. Required dependency is a valid Vault token in the header, and the 'payload.json' file. The response should confirm the configuration update.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcp/config\n```\n\n----------------------------------------\n\nTITLE: Listing All Roles with cURL\nDESCRIPTION: This snippet demonstrates how to list all existing roles in the AWS secrets engine using a LIST request via cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/aws/roles\n```\n\n----------------------------------------\n\nTITLE: DELETE Request to Remove Okta MFA Method\nDESCRIPTION: Shell command using curl to send a DELETE request that removes an existing Okta MFA method. It uses a Vault token for authentication and specifies the method name in the URL path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/okta.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/okta/my_okta\n```\n\n----------------------------------------\n\nTITLE: Vault Operator Diagnose Output Prefixes\nDESCRIPTION: The different status prefixes used in the command output to indicate the result of diagnostic checks\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/diagnose.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n[ success ] # Check was successful\n[ warning ] # Check passed with potential issues\n[ failure ] # Check has failed critically\n```\n\n----------------------------------------\n\nTITLE: Custom SSL Verification for PostgreSQL Connection\nDESCRIPTION: Example configurations for PostgreSQL connection with full SSL verification and SSL verification disabled\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/postgresql.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"postgresql\" {\n  connection_url = \"postgres://user:pass@localhost:5432/database?sslmode=verify-full\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"postgresql\" {\n  connection_url = \"postgres://user:pass@localhost:5432/database?sslmode=disable\"\n}\n```\n\n----------------------------------------\n\nTITLE: List EGP Policies Request\nDESCRIPTION: Lists all configured Endpoint Governing Policies\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -X LIST --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/egp\n```\n\n----------------------------------------\n\nTITLE: Reading an Existing Role with cURL\nDESCRIPTION: This snippet shows how to use cURL to send a GET request to read an existing AWS role by name, which requires the Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/aws/roles/example-role\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Encryption - JSON\nDESCRIPTION: This JSON object shows the expected response when encrypting plaintext using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ciphertext\": \"CiQAuMv0...\",\n    \"key_version\": \"1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MSSQL Configuration API Request\nDESCRIPTION: cURL command example for sending configuration request to the Vault API endpoint for MSSQL database setup\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mssql.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/mssql\n```\n\n----------------------------------------\n\nTITLE: Plugin Build and Registration Commands\nDESCRIPTION: Series of shell commands for building, registering, and testing a containerized Vault plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/containerized-plugins/add-a-containerized-plugin.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/hashicorp/vault-plugin-secrets-kv.git\ncd vault-plugin-secrets-kv ; CGO_ENABLED=0 GOOS=linux \\\ngo build -o kv cmd/vault-plugin-secrets-kv/main.go\ntouch Dockerfile\ndocker build -t hashicorp/vault-plugin-secrets-kv:1.0.0 .\nexport SHA256=$(docker images \\\n    --no-trunc \\\n    --format=\"{{ .ID }}\" \\\n    hashicorp/vault-plugin-secrets-kv:1.0.0 | cut -d: -f2)\nvault plugin register \\\n    -sha256=\"${SHA256}\" \\\n    -oci_image=hashicorp/vault-plugin-secrets-kv:1.0.0 \\\n    secret my-kv-container\nvault secrets enable my-kv-container\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Agent Injector with TLS Configuration\nDESCRIPTION: Helm command to install Vault Agent Injector with custom values for TLS configuration and multiple replicas.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n  --namespace=vault \\\n  --set injector.replicas=2 \\\n  --set injector.leaderElector.enabled=false \\\n  --set injector.certs.secretName=injector-tls \\\n  --set injector.webhook.annotations=\"cert-manager.io/inject-ca-from: {{ .Release.Namespace }}/injector-certificate\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Sealed Vault Status\nDESCRIPTION: Sample JSON response from the unseal API when Vault remains sealed, showing progress towards the unseal threshold.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/unseal.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sealed\": true,\n  \"t\": 3,\n  \"n\": 5,\n  \"progress\": 2,\n  \"version\": \"0.6.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device in Vault\nDESCRIPTION: Example command showing how to enable a file audit device in Vault, specifying the path where audit logs will be written.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable file file_path=/var/log/vault_audit.log\n```\n\n----------------------------------------\n\nTITLE: Writing Policy Using CLI - Shell Session\nDESCRIPTION: This snippet shows how to write a new ACL policy to Vault using the CLI with the 'vault policy write' command. It takes the policy name and file path as parameters and saves the defined policy in Vault. Prerequisites include existing policies and proper Vault setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/acl-policy-templates.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy write <policy_name> <path_to_policy_file>\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Helm Repository\nDESCRIPTION: This command adds the HashiCorp Helm repository to install the Vault CSI Provider. It's a prerequisite step before installing the Helm chart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/installation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault --set=\"csi.enabled=true\"\n```\n\n----------------------------------------\n\nTITLE: Reinstalling Vault with Consul Storage Configuration\nDESCRIPTION: This command reinstalls Vault using Helm with the original Consul storage configuration as part of the rollback procedure.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ `helm install vault hashicorp/vault -f vault-consul-values.yml\n```\n\n----------------------------------------\n\nTITLE: Set Automatic Tidy Configuration Payload Example\nDESCRIPTION: This JSON payload demonstrates how to configure the `/pki/config/auto-tidy` endpoint to enable automatic tidy operations. The payload includes parameters such as `enabled`, `tidy_revoked_cert_issuer_associations`, and `safety_buffer`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_122\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": true,\n  \"tidy_revoked_cert_issuer_associations\": true,\n  \"safety_buffer\": \"24h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Role - Shell Request\nDESCRIPTION: cURL command to create or update a role in the OCI auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/oci/role/devrole\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC in Vault for Azure AD with Provider-Specific Settings\nDESCRIPTION: This command configures the OIDC auth method in Vault with Azure-specific provider settings, useful for handling users with more than 200 groups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/azuread.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/config -<<\"EOH\"\n{\n  \"oidc_client_id\": \"your_client_id\",\n  \"oidc_client_secret\": \"your_client_secret\",\n  \"default_role\": \"your_default_role\",\n  \"oidc_discovery_url\": \"https://login.microsoftonline.com/tenant_id/v2.0\",\n  \"provider_config\": {\n     \"provider\": \"azure\"\n  }\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Sending a Sample POST Request with cURL\nDESCRIPTION: This shell-session snippet demonstrates how to use cURL to send a POST request to Vault to create or update a GCP role. It requires a payload JSON file and an active Vault token (`X-Vault-Token`).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/gcp/role/my-role\n```\n\n----------------------------------------\n\nTITLE: Generate DR Secondary Public Key\nDESCRIPTION: HTTP POST request to generate a public key for encrypting secondary credentials during activation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/generate-public-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Arguments for Vault Requests\nDESCRIPTION: Example of how to set additional arguments for Vault requests in the SecretProviderClass configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/configurations.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsecretArgs:\n  common_name: 'test.example.com'\n  ttl: '24h'\n```\n\n----------------------------------------\n\nTITLE: Revoking a Token and Its Children - Shell\nDESCRIPTION: This snippet demonstrates how to revoke a specific token and all its child tokens using the 'vault token revoke' command. The command requires the token to be specified. The expected output confirms the revocation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/revoke.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token revoke 96ddf4bc-d217-f3ba-f9bd-017055595017\nSuccess! Revoked token (if it existed)\n```\n\n----------------------------------------\n\nTITLE: Azure Key Vault Key Purpose Compatibility Table in Markdown\nDESCRIPTION: This table defines which key purposes can be used for each key type supported by Azure Key Vault KMS. It lists RSA key sizes and their compatibility with all key management purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Key Type       | Purpose                                                 |\n| -------------- | ------------------------------------------------------- |\n| `rsa-2048`     | [All purposes](/vault/api-docs/secret/key-management#purpose) |\n| `rsa-3072`     | [All purposes](/vault/api-docs/secret/key-management#purpose) |\n| `rsa-4096`     | [All purposes](/vault/api-docs/secret/key-management#purpose) |\n```\n\n----------------------------------------\n\nTITLE: TOTP MFA Method Configuration Response\nDESCRIPTION: This JSON response shows the configuration details of a TOTP MFA method, including algorithm, digits, issuer, and other parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"algorithm\": \"SHA1\",\n    \"digits\": 6,\n    \"id\": \"865587ba-6229-7f2a-6da0-609d5370af70\",\n    \"issuer\": \"vault\",\n    \"key_size\": 20,\n    \"name\": \"my_totp\",\n    \"period\": 30,\n    \"qr_size\": 200,\n    \"skew\": 1,\n    \"type\": \"totp\"\n    \"max_validation_attempts\": 5\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Static Accounts (cURL)\nDESCRIPTION: cURL command to list all static accounts configured in the GCP secrets engine using the LIST HTTP method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/gcp/static-accounts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Read Secret - Vault KV API - JSON\nDESCRIPTION: This JSON sample response represents the data returned from the read secret API call. It includes authorization information, the secret data, lease duration, and renewal flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v1.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"foo\": \"bar\",\n    \"ttl\": \"1h\"\n  },\n  \"lease_duration\": 3600,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Sync Destination for AWS Secrets Manager\nDESCRIPTION: This shell command configures a sync destination in Vault using AWS IAM credentials. It specifies the access key ID, secret access key, and AWS region for the sync destination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/awssm.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/aws-sm/my-awssm-1 \\\n\t  access_key_id=\"$ACCESS_KEY_ID\" \\\n\t  secret_access_key=\"$SECRET_ACCESS_KEY\" \\\n\t  region='us-east-1'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Liveness Probe for Vault\nDESCRIPTION: YAML configuration for setting up a HTTP-based liveness probe for Vault pods. This defines parameters for checking if Vault is alive and functioning correctly using its health endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nlivenessProbe:\n  enabled: true\n  path: /v1/sys/health?standbyok=true\n  initialDelaySeconds: 60\n  failureThreshold: 2\n  periodSeconds: 5\n  successThreshold: 1\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Vault Agent Injector\nDESCRIPTION: This YAML snippet shows how to set extra environment variables for the Vault Agent Injector deployment. The example demonstrates configuring TLS options like minimum version and cipher suites.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n# Example setting injector TLS options in a deployment:\nextraEnvironmentVars:\n  AGENT_INJECT_TLS_MIN_VERSION: tls13\n  AGENT_INJECT_TLS_CIPHER_SUITES: ...\n```\n\n----------------------------------------\n\nTITLE: Creating Sync Association in Vault\nDESCRIPTION: Use vault write command to create an association between the destination and a secret to synchronize. This links the Vault secret to the GitHub sync destination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/github.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/gh/my-dest/associations/set \\\n    mount='my-kv' \\\n    secret_name='my-secret'\n```\n\n----------------------------------------\n\nTITLE: Sending Backup Request using Curl in Shell\nDESCRIPTION: This code snippet demonstrates how to send a backup request to the Vault Transit Secrets Engine using a curl command. It requires a valid Vault token for authorization and interacts with the specified endpoint to retrieve key backup details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_67\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transit/backup/aes\n```\n\n----------------------------------------\n\nTITLE: Sending Event Notifications in Go-based Vault Plugin\nDESCRIPTION: Demonstrates how to send event notifications within a Vault plugin using the logical.SendEvent function. The function takes a context, backend interface, event type, and metadata pairs as parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-development-event-notifications.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nerr := logical.SendEvent(ctx, b, eventType, metadata...)\n```\n\n----------------------------------------\n\nTITLE: Creating a CRL in Vault\nDESCRIPTION: This JSON payload demonstrates how to create a Certificate Revocation List (CRL) in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crl\": \"-----BEGIN X509 CRL-----\\n...\\n-----END X509 CRL-----\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Managed Key Signing - Shell Request\nDESCRIPTION: HTTP POST request to test a managed key's signing capability. Validates the key configuration by signing and verifying random data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/managed-keys/pkcs11/hsm-key1/test/sign\n```\n\n----------------------------------------\n\nTITLE: Configuring Persistent Cache in Vault Agent HCL\nDESCRIPTION: Example configuration block for setting up persistent caching in Vault Agent using the Kubernetes cache type. The configuration specifies the cache path where the BoltDB file will be stored.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/caching/persistent-caches/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ncache {\n  persist \"kubernetes\" {\n    path = \"/vault/agent-cache\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd Configuration in Linux\nDESCRIPTION: Reloads the systemd daemon configuration to recognize the newly created Vault service definition file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Restarting Vault Service\nDESCRIPTION: Command to restart the Vault service to apply new configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl restart vault\n```\n\n----------------------------------------\n\nTITLE: Creating Vercel Sync Destination in Vault (Shell)\nDESCRIPTION: cURL command to create a Vercel sync destination in Vault using the POST method. Requires authentication token and payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/sync/destinations/vercel-project/my-store-1\n```\n\n----------------------------------------\n\nTITLE: Performing Login Operation\nDESCRIPTION: Command to perform login using AliCloud authentication with role and identity request parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/alicloud.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/alicloud/login \\\n        role=dev-role \\\n        identity_request_url=$IDENTITY_REQUEST_URL_BASE_64 \\\n        identity_request_headers=$IDENTITY_REQUEST_HEADERS_BASE_64\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading a Secret from Cubbyhole (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a response when reading a secret from the Cubbyhole. It includes the secret data, lease information, and authentication details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cubbyhole.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"foo\": \"bar\"\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Audit List Command Syntax\nDESCRIPTION: Command-line syntax for the Vault audit list command, showing usage patterns and available help options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/list.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit list [flags]\n\n$ vault audit list [-help | -h]\n```\n\n----------------------------------------\n\nTITLE: Creating RSA-2048 Key Pair in Vault\nDESCRIPTION: This command creates a new RSA-2048 key pair in Vault's key management secrets engine. The key is stored at the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write keymgmt/key/rsa-1 type=\"rsa-2048\"\n```\n\n----------------------------------------\n\nTITLE: Reading CIEPS Configuration with cURL\nDESCRIPTION: Shell command using cURL to send a GET request to Vault's API for retrieving the current CIEPS configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_84\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/external-policy\n```\n\n----------------------------------------\n\nTITLE: Curl Request for PKI Certificate Signing\nDESCRIPTION: Example curl command demonstrating how to make a POST request to Vault's PKI endpoint for signing an intermediate certificate. Includes authentication token and payload reference.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/root/sign-intermediate\n```\n\n----------------------------------------\n\nTITLE: Starting Vault Service in Windows\nDESCRIPTION: Starts the Vault service in Windows using PowerShell's service management cmdlets after configuring the service with NSSM.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_17\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Service -Name MS_VAULT\n```\n\n----------------------------------------\n\nTITLE: Static Role Configuration Payload\nDESCRIPTION: Sample JSON payload for creating a static role in LDAP secrets engine with username, DN, and rotation period\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dn\": \"cn=hashicorp,ou=Users,dc=hashicorp,dc=com\",\n  \"rotation_period\": \"24h\",\n  \"username\": \"hashicorp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending PKI Role Creation Request with cURL\nDESCRIPTION: Shell command using cURL to send a POST request to Vault's API for creating a new PKI role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_82\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Updating a Group Alias by ID - HTTP API\nDESCRIPTION: This snippet describes the method to update an existing group alias by ID. It allows the user to modify the group's properties by sending a POST request to the corresponding endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/group-alias/id/ca726050-d8ac-6f1f-4210-3b5c5b613824\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Response for Obtaining Vault Token - JSON\nDESCRIPTION: This JSON snippet depicts the response format when obtaining a Vault token, detailing request ID, lease information, and the authenticated token with its associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"b16f7cf9-0970-2e64-69d6-f00d055e93c4\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": null,\n  \"warnings\": null,\n  \"auth\": {\n    \"client_token\": \"hvs.CAES...\",\n    \"accessor\": \"Rl4gU4amxzBFpFBJixv8xJBK\",\n    \"policies\": [\n      \"default\",\n      \"writer\"\n    ],\n    \"token_policies\": [\n      \"default\",\n      \"writer\"\n    ],\n    \"identity_policies\": null,\n    \"metadata\": {\n      \"role\": \"admin\"\n    },\n    \"orphan\": true,\n    \"entity_id\": \"afd74442-6c48-3d2f-9449-689ce050ba88\",\n    \"lease_duration\": 3600,\n    \"renewable\": true,\n    \"mfa_requirement\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating InfluxDB Role Configuration\nDESCRIPTION: Command to create a role that defines the SQL statements for credential creation and sets TTL values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/influxdb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-influxdb-database \\\n    creation_statements=\"CREATE USER \\\"{{username}}\\\" WITH PASSWORD '{{password}}'; \\\n          GRANT ALL ON \\\"vault\\\" TO \\\"{{username}}\\\";\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\nSuccess! Data written to: database/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Sample cURL Request for Configuring Couchbase Connection\nDESCRIPTION: Example cURL command to configure a Couchbase connection in Vault. The request sends a JSON payload to the database configuration endpoint with the necessary Vault authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/couchbase.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/couchbase\n```\n\n----------------------------------------\n\nTITLE: Enabling KVv2 Secrets Engine in Vault\nDESCRIPTION: This command enables a new KVv2 secrets engine at the specified path in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/gcpsm.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=my-kv kv-v2\n```\n\n----------------------------------------\n\nTITLE: Making a cURL Request to Configure Elasticsearch in Vault\nDESCRIPTION: Shell command using cURL to send a configuration request to the Vault API for setting up an Elasticsearch database connection. The request uses a payload file and authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/elasticdb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/my-elasticsearch-database\n```\n\n----------------------------------------\n\nTITLE: Replication Reindexing for Primary Nodes\nDESCRIPTION: Performs a reindex operation on the primary Vault node using the sys/replication/reindex endpoint. This is required for upgrading to Vault 0.8.0 and ensures proper replication index configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.8.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write sys/replication/reindex\n```\n\n----------------------------------------\n\nTITLE: Example of KV Destroy API Call\nDESCRIPTION: Example cURL command showing how to destroy versions 4 and 7 of a secret using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/destroy-data.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl                                       \\\n    --request POST                           \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n    --data '{\"versions\":[4,7]}'              \\\n    ${VAULT_ADDR}/v1/shared/destroy/dev/square-api | jq\n```\n\n----------------------------------------\n\nTITLE: Sample Request Payload for Certificate Signing in Vault PKI\nDESCRIPTION: Example JSON payload for requesting certificate signing with Vault's PKI secrets engine. This minimal example shows how to pass a CSR (Certificate Signing Request) to the API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"csr\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting License with Default Environment Variable - Shell Script\nDESCRIPTION: This command inspects the license using default environment variables, either from `VAULT_LICENSE` or a license file at `VAULT_LICENSE_PATH`. It outputs various license details, including the license ID and validity times.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/license/inspect.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault license inspect\nSource: /Users/ncc/vaults/license\nProduct: vault\nLicense ID: 060d7820-fa59-f95c-832b-395db0aeb9ba\nCustomer ID: 5401ae3b-136b-3e47-3b43-432927fa03e7\nInstallation ID: *\nIssue Time: 2021-05-17 19:33:47.93981585 +0000 UTC\nStart Time: 2021-05-17 00:00:00 +0000 UTC\nExpiration Time: 2022-05-17 23:59:59.999 +0000 UTC\nTermination Time: 2031-05-17 23:59:59.999 +0000 UTC\n{\"license_id\":\"060d7820-fa59-f95c-832b-395db0aeb9ba\",\"customer_id\":\"5401ae3b-136b-3e47-3b43-432927fa03e7\",\"installation_id\":\"*\",\"issue_time\":\"2021-05-17T19:33:47.93981585Z\",\"start_time\":\"2021-05-17T00:00:00Z\",\"expiration_time\":\"2022-05-17T23:59:59.999Z\",\"flags\":{\"modules\":[\"multi-dc-scale\",\"governance-policy\",\"advanced-data-protection\"]},\"features\":[\"HSM\",\"Performance Replication\",\"DR Replication\",\"MFA\",\"Sentinel\",\"Seal Wrapping\",\"Control Groups\",\"Performance Standby\",\"Namespaces\",\"KMIP\",\"Entropy Augmentation\",\"Transform Secrets Engine\",\"Lease Count Quotas\",\"Key Management Secrets Engine\",\"Automated Snapshots\"],\"performance_standby_count\":9999}\n\nLicense is valid\n```\n\n----------------------------------------\n\nTITLE: Reading Verbosity Level of All Loggers (cURL Request)\nDESCRIPTION: Shell command to send a GET request to retrieve the current log levels for all loggers in Vault. This command requires authentication via the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/sys/loggers\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Vault's UI Namespaces Endpoint\nDESCRIPTION: Example of how to make a GET request to the Vault /sys/internal/ui/namespaces endpoint using curl. This unauthenticated endpoint allows retrieving namespace information for UI display purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-namespaces.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/internal/ui/namespaces\n```\n\n----------------------------------------\n\nTITLE: Creating Role with Namespace Selector\nDESCRIPTION: JSON payload for creating a Kubernetes auth role using a namespace selector with label matching instead of specific namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bound_service_account_names\": \"vault-auth\",\n  \"bound_service_account_namespace_selector\": \"\\\"{\\\"matchLabels\\\":{\\\"stage\\\":\\\"dev\\\",\\\"vault-role\\\":\\\"dev-role\\\"}}\",\n  \"policies\": [\"dev\", \"prod\"],\n  \"max_ttl\": 1800000\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Role for LDAP - Shell\nDESCRIPTION: This snippet defines a static role in Vault that maps to a specific LDAP entry. The role manages password rotation settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ldap/static-role/hashicorp \\\n    dn='uid=hashicorp,ou=users,dc=hashicorp,dc=com' \\\n    username='hashicorp' \\\n    rotation_period=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Enabling TDE Encryption\nDESCRIPTION: SQL commands to create a test database and enable TDE encryption\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE TestTDE\nGO\n\nUSE TestTDE;\nGO\n\nCREATE DATABASE ENCRYPTION KEY\nWITH ALGORITHM = AES_256\nENCRYPTION BY SERVER ASYMMETRIC KEY TransitVaultAsymmetric;\nGO\n\nALTER DATABASE TestTDE\nSET ENCRYPTION ON;\nGO\n```\n\n----------------------------------------\n\nTITLE: Promote DR Secondary Sample Payload\nDESCRIPTION: JSON payload for promoting a DR secondary to primary using a DR operation token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dr_operation_token\": \"ijH8tphEHaBtgx+IvPfxDsSi2LV4j9k+Lad6eqT5cJw=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Go Client Library\nDESCRIPTION: This command installs the OpenAPI-based Go client library for Vault. It uses `go get` to fetch and install the library from GitHub.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ go get github.com/hashicorp/vault-client-go\n```\n\n----------------------------------------\n\nTITLE: Sample payload for revoking a certificate with private key\nDESCRIPTION: This JSON payload outlines the required inputs to revoke a certificate using its private key, including the certificate's serial number and the private key in PEM format. It is sent to the '/pki/revoke-with-key' endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serial_number\": \"39:dd:2e...\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\n...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Static Credentials Setup Commands\nDESCRIPTION: Shell commands for setting up static credentials in Vault's LDAP secrets engine including enabling the engine, configuring it, and creating a static role\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/db2.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault secrets enable ldap\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write ldap/config \\\n    binddn=\"cn=admin,dc=example,dc=com\" \\\n    bindpass=\"LDAPAdminPassword\" \\\n    url=\"ldap://127.0.0.1:389\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write ldap/static-role/static \\\n     username='staticuser' \\\n     dn='uid=staticuser,ou=users,dc=example,dc=com' \\\n     rotation_period=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Default Username Template Configuration for Oracle Database\nDESCRIPTION: Template string used to generate dynamic usernames for Oracle database access. The template combines display name, role name, random string and unix timestamp.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/oracle.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n{{ printf \"V_%s_%s_%s_%s\" (.DisplayName | truncate 8) (.RoleName | truncate 8) (random 20) (unix_time) | truncate 30 | uppercase | replace \"-\" \"_\" | replace \".\" \"_\" }}\n```\n\n----------------------------------------\n\nTITLE: Login to Vault Using Instance Principals\nDESCRIPTION: Command to authenticate a user with Vault using instance principal credentials. The command specifies the method, authentication type, and role to be used for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=oci auth_type=instance role=vaultadminrole\n```\n\n----------------------------------------\n\nTITLE: Login to Vault via CLI with Compute Instance\nDESCRIPTION: Command for authenticating a Vault user via the command line using compute instance credentials with a specified Vault role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=oci auth_type=instance role=devrole\n```\n\n----------------------------------------\n\nTITLE: View CF API Endpoint\nDESCRIPTION: Sets CF CLI to target the CF API endpoint using the 'metadata' file from previous authentication steps. It requires a correctly configured 'metadata' file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pcf target\n$ cf api\n```\n\n----------------------------------------\n\nTITLE: Allowing Vault to Modify DynamoDB Settings\nDESCRIPTION: This release note details an enhancement that permits Vault to modify its DynamoDB table configurations, specifically to enable the use of per-request billing mode. This adjustment aims to improve billing efficiency and potentially reduce costs associated with data storage and retrieval in DynamoDB.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29371.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nphysical/dynamodb: Allow Vault to modify its DynamoDB table and use per-per-request billing mode.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Metadata Mapping in Vault HCL\nDESCRIPTION: Creates a metadata mapping filter that imports secrets with specific tag key-value pairs from an external secret management system. Allows precise secret selection based on metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/mappings.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmapping_metadata {\n  name        = \"my-map-1\"\n  source      = \"my-gcp-source-1\"\n  destination = \"my-dest-1\"\n  priority    = 1\n\n  tags = {\n    \"importable\" = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lease Settings via CLI\nDESCRIPTION: Illustrates how to configure lease settings using Vault CLI by specifying TTL values directly in the command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write rabbitmq/config/lease \\\n    ttl=1800 \\\n    max_ttl=3600\n```\n\n----------------------------------------\n\nTITLE: Setting a Certificate Chain for a Transit Key\nDESCRIPTION: Shell command to set a certificate chain for a Transit key named 'my-key', allowing certificates to be tracked alongside the key material.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key/set-certificate\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Environment Secrets Destination\nDESCRIPTION: A JSON configuration for synchronizing secrets to a specific environment within a GitHub repository. Includes access token, repository details, and the target environment name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"github_pat_12345\",\n    \"secrets_location\": \"repository\",\n    \"repository_owner\": \"my-organization-or-username\",\n    \"repository_name\": \"my-repository\",\n    \"environment_name\": \"my-environment\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device with Partial stdin in Vault CLI\nDESCRIPTION: Shows how to enable a file audit device using the Vault CLI with partial input from stdin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo -n \"/var/log/vault.log\" | vault audit enable file file_path=-\n```\n\n----------------------------------------\n\nTITLE: Adding Event Subscription Plugin Support - Release Note\nDESCRIPTION: This snippet documents the improvement made to HashiCorp Vault, which adds support for event subscription plugins including SQS. It outlines the purpose of allowing further integrations with external messaging services to enhance event handling capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24352.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nevents: Add support for event subscription plugins, including SQS\"\n```\n\n----------------------------------------\n\nTITLE: Terraform Plan for New Vault Resources\nDESCRIPTION: Shows the Terraform plan output for creating new Vault resources including a KV mount, namespace, and policy. Demonstrates the expected changes and resource configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nterraform plan\n```\n\n----------------------------------------\n\nTITLE: Retrieving KV Metadata in Vault\nDESCRIPTION: This command retrieves the metadata of the versioned secrets at the given key name using the Vault CLI. It requires the `vault` CLI to be configured and connected to a Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/metadata.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv metadata get -mount=secret creds\n=== Metadata Path ===\nsecret/metadata/creds\n\n========== Metadata ==========\nKey                     Value\n--                     -----\ncas_required            false\ncreated_time            2019-06-28T15:53:30.395814Z\ncurrent_version         5\ndelete_version_after    0s\nmax_versions            0\noldest_version          0\nupdated_time            2019-06-28T16:01:47.40064Z\n\n====== Version 1 ======\nKey              Value\n--              -----\ncreated_time     2019-06-28T15:53:30.395814Z\ndeletion_time    n/a\ndestroyed        false\n\n====== Version 2 ======\nKey              Value\n--              -----\ncreated_time     2019-06-28T16:01:36.676912Z\ndeletion_time    n/a\ndestroyed        false\n\n...\n```\n\n----------------------------------------\n\nTITLE: Generating Nomad Credentials via Vault\nDESCRIPTION: Dynamically generates a Nomad token based on a predefined role, providing secure, short-lived access credentials\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/nomad.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/nomad/creds/example\n```\n\n----------------------------------------\n\nTITLE: Running OSS Docker Test with Custom Binary in Bash\nDESCRIPTION: This bash snippet shows how to compile a custom Vault binary for Linux and use it in a specific Docker-based test. It demonstrates setting the VAULT_BINARY environment variable to point to the custom binary before running the test.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ GOOS=linux make dev\n$ VAULT_BINARY=$(pwd)/bin/vault go test -run 'TestRaft_Configuration_Docker' ./vault/external_tests/raft/raft_binary\nok      github.com/hashicorp/vault/vault/external_tests/raft/raft_binary        20.960s\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Policy\nDESCRIPTION: Command to create a policy with minimum required permissions for the EKM provider\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvault policy write tde-policy -<<EOF\npath \"transit/keys/ekm-encryption-key\" {\n    capabilities = [\"create\", \"read\", \"update\", \"delete\"]\n}\n\npath \"transit/keys\" {\n    capabilities = [\"list\"]\n}\n\npath \"transit/encrypt/ekm-encryption-key\" {\n    capabilities = [\"update\"]\n}\n\npath \"transit/decrypt/ekm-encryption-key\" {\n    capabilities = [\"update\"]\n}\n\npath \"sys/license/status\" {\n    capabilities = [\"read\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Listing OIDC Clients in Vault\nDESCRIPTION: This API endpoint lists all configured OIDC clients in HashiCorp Vault. The request is made using a LIST HTTP method and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/oidc/client\n```\n\n----------------------------------------\n\nTITLE: Creating Token Using Dedicated Token Create Command\nDESCRIPTION: This example demonstrates using the specialized 'token create' command with command-line options to achieve the same result as the previous examples but with simpler syntax.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token create -policy=admin -policy=secops -ttl=8h -use-limit=3\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis ElastiCache Plugin in Vault\nDESCRIPTION: Command to configure Vault with the Redis ElastiCache plugin, including connection parameters and AWS credentials for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/rediselasticache.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/my-redis-elasticache-cluster \\\n  plugin_name=\"redis-elasticache-database-plugin\" \\\n  url=\"primary-endpoint.my-cluster.xxx.yyy.cache.amazonaws.com:6379\" \\\n  access_key_id=\"AKI***\" \\\n  secret_access_key=\"ktriNYvULzUmTGb***\" \\\n  region=us-east-1 \\\n  allowed_roles=\"*\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Vault Server Log Stream\nDESCRIPTION: This is an example of the log output returned from the /sys/monitor endpoint. The logs show various Vault operations including mounting and unmounting storage paths, with timestamps and log levels prefixed to each line.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/monitor.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2020-09-15T11:28:09.188-0700 [INFO]  core: successful mount: namespace= path=foo/ type=kv\n2020-09-15T11:28:18.265-0700 [DEBUG] core.secrets.deletion: clearing view: namespace=root path=foo/ total_keys=0\n2020-09-15T11:28:18.265-0700 [DEBUG] core.secrets.deletion: view cleared: namespace=root path=foo/\n2020-09-15T11:28:18.265-0700 [INFO]  core: successfully unmounted: path=foo/ namespace=\n```\n\n----------------------------------------\n\nTITLE: Updating Group by ID - Vault Identity API (JSON Payload)\nDESCRIPTION: This JSON payload provides the data for updating an existing group in Vault's Identity store, accessible via ID. The payload includes fields such as name, metadata, and associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"testgroupname\",\n  \"metadata\": {\n    \"hello\": \"everyone\"\n  },\n  \"policies\": [\"grouppolicy2\", \"grouppolicy3\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Secrets Engine Deprecation Warning\nDESCRIPTION: Introduces a warning response for deprecated secrets engines when interacting with the system secrets mount endpoint\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17058.txt#2025-04-14_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST /sys/mounts/:type\n```\n\n----------------------------------------\n\nTITLE: Configuring Deployment for Environment Variable Dynamic Database Credentials in YAML\nDESCRIPTION: This YAML snippet defines a Deployment that uses the SecretProviderClass to set dynamic database credentials as environment variables. It specifies a CSI volume with the 'vault-db-creds' SecretProviderClass and sets environment variables using secretKeyRef.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/examples.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: app\n  labels:\n    app: demo\nspec:\n  selector:\n    matchLabels:\n      app: demo\n  replicas: 1\n  template:\n    metadata:\n      annotations:\n      labels:\n        app: demo\n    spec:\n      serviceAccountName: app\n      containers:\n        - name: app\n          image: my-app:1.0.0\n          env:\n            - name: DB_USERNAME\n              valueFrom:\n                secretKeyRef:\n                  name: vault-db-creds-secret\n                  key: username\n            - name: DB_PASSWORD\n              valueFrom:\n                secretKeyRef:\n                  name: vault-db-creds-secret\n                  key: password\n          volumeMounts:\n            - name: 'vault-db-creds'\n              mountPath: '/mnt/secrets-store'\n              readOnly: true\n      volumes:\n        - name: vault-db-creds\n          csi:\n            driver: 'secrets-store.csi.k8s.io'\n            readOnly: true\n            volumeAttributes:\n              secretProviderClass: 'vault-db-creds'\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration\nDESCRIPTION: Configuration for secure TLS communication with Consul using custom certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {\n  scheme        = \"https\"\n  tls_ca_file   = \"/etc/pem/vault.ca\"\n  tls_cert_file = \"/etc/pem/vault.cert\"\n  tls_key_file  = \"/etc/pem/vault.key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting a Signed Public Key from Vault\nDESCRIPTION: These code snippets demonstrate how to request a signed public key from Vault. The first example uses the `vault write` command with the public key provided as a file. The second example customizes the signing options by using a JSON payload to specify principals, key ID, and extensions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ssh-client-signer/sign/my-role \\\n        public_key=@$HOME/.ssh/id_rsa.pub\n\nKey             Value\n---\\t-----\nserial_number   c73f26d2340276aa\nsigned_key      ssh-rsa-cert-v01@openssh.com AAAAHHNzaC1...\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ssh-client-signer/sign/my-role -<<\"EOH\"\n{\n  \"public_key\": \"ssh-rsa AAA...\",\n  \"valid_principals\": \"my-user\",\n  \"key_id\": \"custom-prefix\",\n  \"extensions\": {\n    \"permit-pty\": \"\",\n    \"permit-port-forwarding\": \"\"\n  }\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Replication Settings in HCL\nDESCRIPTION: Example configuration for the 'replication' stanza to control log shipper buffer settings. This configuration adjusts buffer length and size parameters to optimize replication performance, particularly useful when replicating large numbers of namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_9\n\nLANGUAGE: hcl\nCODE:\n```\nreplication {\n  resolver_discover_servers = true\n  logshipper_buffer_length  = 1000\n  logshipper_buffer_size    = \"5gb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MFA Login Enforcement in Vault API\nDESCRIPTION: Endpoint for specifying MFA methods required during login with configurable authentication method and identity restrictions\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/login-enforcement.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mfa_method_ids\": [\"134f7ce9-feae-4c6c-9ed7-ab3e413dbfce\"],\n  \"auth_method_accessors\": [\"auth_userpass_337fdb6a\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Random Bytes Generation\nDESCRIPTION: Example payload for generating random bytes with hex format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"hex\"\n}\n```\n\n----------------------------------------\n\nTITLE: Demoting Performance Primary\nDESCRIPTION: This API call demotes a performance primary cluster to a performance secondary. The secondary will maintain its cluster ID but won't connect to a primary until explicitly updated. Requires root token authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/demote\n```\n\n----------------------------------------\n\nTITLE: Setting Issuers Configuration in Vault API - JSON\nDESCRIPTION: This JSON payload specifies how to set the default issuer for the Vault PKI, either by reference name or ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_94\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default\": \"root-x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Truncated Username Template with Random Characters in Go\nDESCRIPTION: A template that combines truncation, random character generation, and unix timestamp to create a username within a specific length limit.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/username-templating.mdx#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{printf \"v_%s_%s_%s_%s\" (.DisplayName | truncate 8) (.RoleName | truncate 8) (random 20) (unix_time) | truncate 45}}\n```\n\n----------------------------------------\n\nTITLE: Default Auth Method Parameter Configuration in YAML\nDESCRIPTION: Example configuration showing the structure of parameters for the default auth method. Demonstrates parameter and header configuration format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  param-something1: \"foo\"\n\nheaders:\n  X-vault-something1: \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS 1.3 for Vault TCP Listener\nDESCRIPTION: This snippet demonstrates how to configure a TCP listener to only accept TLS 1.3 connections. It sets the minimum TLS version to 1.3 using the tls_min_version parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/tcp-tls.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_cert_file = \"cert.pem\"\n  tls_key_file  = \"key.pem\"\n  tls_min_version = \"tls13\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reloading Plugin Connections\nDESCRIPTION: This JSON response provides information on the plugin reload operation, including the count and identifiers of the connections affected by the reload process associated with a plugin upgrade.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"connections\": [\"pg1\", \"pg2\"],\n    \"count\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MFA Validation Payload in JSON\nDESCRIPTION: This JSON payload is used to validate an MFA-restricted login request, containing the MFA request ID and MFA payload with method IDs and associated credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mfa_request_id\": \"5879c74a-1418-1948-7be9-97b209d693a7\",\n  \"mfa_payload\": {\n    \"d16fd3c2-50de-0b9b-eed3-0301dadeca10\": [\"910201\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Root Token via CLI\nDESCRIPTION: Command to revoke a root token in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token revoke \"<token>\"\n```\n\n----------------------------------------\n\nTITLE: Vault Token Helper Script (Shell)\nDESCRIPTION: This is an example token helper script written in bash. It manages Vault tokens in a JSON file (`.vault_token`) in the user's home directory, indexed by the Vault server address (VAULT_ADDR). The script handles `get`, `store`, and `erase` commands to retrieve, save, and delete tokens respectively. It relies on `jq` for JSON manipulation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token-helper.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n#!/bin/bash\n\nfunction write_error(){ >&2 echo $@; }\n\n# Customize the hash key for tokens. Currently, we remove the strings\n# 'https://', '.', and ':' from the passed address (Vault address environment\n# by default) because jq has trouble with special characeters in JSON field\n# names\nfunction createHashKey {\n  \n  local key=\"\"\n\n  if [[ -z \"${1}\" ]] ; then key=\"${VAULT_ADDR}\" \n  else                      key=\"${1}\"\n  fi\n  \n  # We index the token according to the Vault server address by default so\n  # return an error if the address is empty\n  if [[ -z \"${key}\" ]] ; then\n    write_error \"Error: VAULT_ADDR environment variable unset.\"\n    exit 100\n  fi\n\n  key=${key//\"http://\"/\"\"}\n  key=${key//\".\"/\"_\"}\n  key=${key//\":\"/\"_\"}\n\n  echo \"addr-${key}\"\n}\n\nTOKEN_FILE=\"${HOME}/.vault_token\"\nKEY=$(createHashKey)\nTOKEN=\"null\"\n\n# If the token file does not exist, create it\nif [ ! -f ${TOKEN_FILE} ] ; then\n   echo \"{}\" > ${TOKEN_FILE}\nfi\n\ncase \"${1}\" in\n    \"get\")\n\n      # Read the current JSON data and pull the token associated with ${KEY}\n      TOKEN=$(cat ${TOKEN_FILE} | jq --arg key \"${KEY}\" -r '.[$key]')\n      \n      # If the token != to the string \"null\", print the token to stdout \n      # jq returns \"null\" if the key was not found in the JSON data\n      if [ ! \"${TOKEN}\" == \"null\" ] ; then\n        echo \"${TOKEN}\"\n      fi\n      exit 0\n    ;;\n\n    \"store\")\n      \n      # Get the token from stdin\n      read TOKEN\n\n      # Read the current JSON data and add a new entry\n      JSON=(\n        jq                      \\\n        --arg key \"${KEY}\"      \\\n        --arg token \"${TOKEN}\"  \\\n        '.[$key] = $token' ${TOKEN_FILE}\n      )\n      \n    ;;\n\n    \"erase\")\n      # Read the current JSON data and remove the entry if it exists\n      JSON=(\n        jq                      \\\n        --arg key \"${KEY}\"      \\\n        --arg token \"${TOKEN}\"  \\\n        'del(.[$key])' ${TOKEN_FILE}\n      )\n    \n    ;;\n\n    *)\n      # change to stderr for real code\n      write_error \"Error: Provide a valid command: get, store, or erase.\"\n      exit 101\nesac\n\n# Update the JSON file and return success\necho $JSON | jq \".\" > ${TOKEN_FILE}\nexit 0\n```\n\n----------------------------------------\n\nTITLE: Configuring Replication Forwarding in Vault\nDESCRIPTION: This HCL snippet demonstrates how to configure replication in Vault to allow forwarding requests via tokens, ensuring consistency even if performance standbys don't have the latest WAL index. This approach helps in maintaining consistency but may increase load on the active node. Ensure that your Vault cluster supports this feature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/faq/ssct.mdx#2025-04-14_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nreplication {\n  allow_forwarding_via_token = \"new_token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Issuer URL\nDESCRIPTION: This command retrieves the OIDC issuer URL from the Kubernetes cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nISSUER=\"$(kubectl get --raw /.well-known/openid-configuration | jq -r '.issuer')\"\n```\n\n----------------------------------------\n\nTITLE: Batch Input Format for Re-encryption\nDESCRIPTION: JSON structure for batch re-encryption of multiple ciphertexts with their corresponding contexts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"context\": \"c2FtcGxlY29udGV4dA==\",\n    \"ciphertext\": \"vault:v1:/DupSiSbX/ATkGmKAmhqD0tvukByrx6gmps7dVI=\"\n  },\n  {\n    \"context\": \"YW5vdGhlcnNhbXBsZWNvbnRleHQ=\",\n    \"ciphertext\": \"vault:v1:XjsPWPjqPrBi1N2Ms2s1QM798YyFWnO4TR4lsFA=\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Example: Enable File Audit Device at Custom Path\nDESCRIPTION: This example demonstrates enabling a file type audit device at a custom path, 'audit/file'. The command uses the -path flag to specify the custom location and requires file creation permissions at the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/enable.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable -path=audit/file file file_path=/tmp/my-file.txt\nSuccess! Enabled the file audit device at: audit/file/\n```\n\n----------------------------------------\n\nTITLE: List Auth Methods Text Command\nDESCRIPTION: This command fetches the mount accessor details for all enabled auth methods. It is particularly useful to obtain the accessor ID required for configuring the Duo MFA. Ensure Vault is running and authenticated to use this command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth list -detailed\n```\n\n----------------------------------------\n\nTITLE: Validating BoringCrypto Integration with Symbol Dump in Vault\nDESCRIPTION: Shows how to use the Go tool nm command to verify that FIPS 140-2 BoringCrypto is correctly integrated into the Vault binary by checking for goboringcrypto symbols in the output.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/fips/fips1402.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ go tool nm vault | grep -i goboringcrypto\n  4014d0 T _cgo_6880f0fbb71e_Cfunc__goboringcrypto_AES_cbc_encrypt\n  4014f0 T _cgo_6880f0fbb71e_Cfunc__goboringcrypto_AES_ctr128_encrypt\n  401520 T _cgo_6880f0fbb71e_Cfunc__goboringcrypto_AES_decrypt\n  401540 T _cgo_6880f0fbb71e_Cfunc__goboringcrypto_AES_encrypt\n  401560 T _cgo_6880f0fbb71e_Cfunc__goboringcrypto_AES_set_decrypt_key\n...additional lines elided...\n```\n\n----------------------------------------\n\nTITLE: Generating New ACME External Account Binding in Vault\nDESCRIPTION: Creates a new external account binding (EAB) token for ACME in Vault. This is necessary when the server requires EAB for account registration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/troubleshooting-acme.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write -f pki/roles/my-role-name/acme/new-eab\n```\n\n----------------------------------------\n\nTITLE: Listing Detailed Auth Method Information in Vault CLI\nDESCRIPTION: This command provides detailed information about enabled auth methods, including plugin details, TTLs, token types, and other configuration options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/list.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth list -detailed\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Credentials in Vault\nDESCRIPTION: Example of generating SSH credentials for a specific role using a POST request. The request includes a JSON payload with the IP address of the remote host.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Reading Transit Keys Configuration Request\nDESCRIPTION: Makes a GET request to read the global configuration for all Transit keys, which controls capabilities like key upsert behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transit/config/keys\n```\n\n----------------------------------------\n\nTITLE: Starting Rekey Operation - Shell Request\nDESCRIPTION: Sends a POST request to initialize a new rekey operation with specified parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/rekey/init\n```\n\n----------------------------------------\n\nTITLE: Sending Config Request to Azure Auth Method\nDESCRIPTION: cURL command to submit configuration parameters to the Azure auth method endpoint. This request sets up the authentication method with the provided credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/azure/config\n```\n\n----------------------------------------\n\nTITLE: Creating Encryption Key in Transit Secrets Engine with Force Flag\nDESCRIPTION: This example shows how to create a new encryption key in the transit secrets engine using the -force flag, which allows the write operation without input data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -force transit/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Role with Both Explicit Namespaces and Label Selector\nDESCRIPTION: JSON payload that combines both explicit namespace specification and label-based namespace selection. This allows token generation in either explicitly named namespaces or those matching the label criteria.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespaces\": \"vault-system,testing\",\n  \"allowed_kubernetes_namespace_selector\": \"'{'matchLabels':{'stage':'prod','sa-generator':'vault'}}\",\n  \"service_account_name\": \"default\",\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an FPE Transformation with JSON Payload\nDESCRIPTION: Example JSON payload for creating or updating an FPE (Format Preserving Encryption) transformation. Configures template, tweak source, and allowed roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"fpe\",\n  \"template\": \"builtin/creditcardnumber\",\n  \"tweak_source\": \"internal\",\n  \"allowed_roles\": [\"example-role\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configure LDAP Auth Method Request\nDESCRIPTION: This code shows how to send a POST request to configure the LDAP authentication method in Vault using curl, referencing a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/ldap/config\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Re-Encryption - JSON\nDESCRIPTION: This JSON object is a sample payload for re-encrypting existing ciphertext using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"CiQAuMv0...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Auth Method Configuration in Vault\nDESCRIPTION: This snippet demonstrates how to read the configuration of an auth method at a given path using a GET request to the `/sys/auth/:path` endpoint. It requires sudo capability and returns detailed configuration information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/auth.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/auth/my-auth\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"8d2a1e33-4c00-46a5-f50d-4dc5f5d96f12\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"accessor\": \"auth_github_badd7fd0\",\n    \"config\": {\n      \"default_lease_ttl\": 0,\n      \"force_no_cache\": false,\n      \"max_lease_ttl\": 0,\n      \"token_type\": \"default-service\"\n    },\n    \"deprecation_status\": \"supported\",\n    \"description\": \"\",\n    \"external_entropy_access\": false,\n    \"local\": false,\n    \"options\": null,\n    \"plugin_version\": \"\",\n    \"running_plugin_version\": \"v1.12.0+builtin.vault\",\n    \"running_sha256\": \"\",\n    \"seal_wrap\": false,\n    \"type\": \"github\",\n    \"uuid\": \"4b42d1a4-0a0d-3c88-ae90-997e0c8b41be\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: GET Deny Listed Role Tag Info using Vault API with curl\nDESCRIPTION: This snippet illustrates how to retrieve information about a deny-listed role tag from the Vault API. It makes a GET request to the `/auth/aws/roletag-denylist/:role_tag` endpoint, authenticated with a Vault token. The `role_tag` parameter, representing the tag to look up, is mandatory and can be supplied as-is or base64 encoded.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_41\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/aws/roletag-denylist/djE6MDlWcDBxR3V5Qjg9OmE9YW1pLWZjZTNjNjk2OnA9ZGVmYXVsdCxwcm9kOmQ9ZmFsc2U6dD0zMDBoMG0wczp1UExLQ1F4cXNlZlJocnAxcW1WYTF3c1FWVVhYSkc4VVpQLwo=\n```\n\n----------------------------------------\n\nTITLE: Defining GCP Source in HCL\nDESCRIPTION: This code snippet shows how to define a GCP source block in HCL for importing secrets from Google Cloud Secret Manager. It requires a name and credentials path, and defines the connection information needed to read data from the external system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n\"source_gcp {\\n  name        = \\\"my-gcp-source-1\\\"\\n  credentials = \\\"@/path/to/service-account-key.json\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Raft Cluster State - Shell Request\nDESCRIPTION: HTTP GET request to retrieve the current state of the raft cluster using curl. Requires Vault token authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautopilot.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/state\n```\n\n----------------------------------------\n\nTITLE: Executing a Token Self-Capabilities Request using cURL\nDESCRIPTION: This shell command demonstrates how to make a POST request to the `/sys/capabilities-self` endpoint using cURL, providing the Vault token in the X-Vault-Token header and referencing a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities-self.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/capabilities-self\n```\n\n----------------------------------------\n\nTITLE: Enabling Syslog Audit Device in Vault\nDESCRIPTION: Basic command to enable the syslog audit device in HashiCorp Vault without any custom configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/syslog.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable syslog\n```\n\n----------------------------------------\n\nTITLE: Authenticated Unwrapping Request in Vault API\nDESCRIPTION: Shell command for unwrapping a response using authentication with a separate token. Uses POST request with a JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-unwrap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/wrapping/unwrap\n```\n\n----------------------------------------\n\nTITLE: Example Claim Mappings Configuration for JWT Auth\nDESCRIPTION: JSON configuration showing how to map JWT claims to metadata in the resulting auth token. This maps the division claim to organization metadata and preserves the department claim name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"division\": \"organization\",\n  \"department\": \"department\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OTP Credential for SSH Access\nDESCRIPTION: This command creates a one-time password credential for a specific IP address associated with the 'otp_key_role'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/one-time-ssh-passwords.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ssh/creds/otp_key_role ip=x.x.x.x\n```\n\n----------------------------------------\n\nTITLE: LDAP Group Details Response\nDESCRIPTION: This JSON response shows the policies associated with a specific LDAP group in the Vault authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"policies\": [\n      \"admin\",\n      \"default\"\n    ]\n  },\n  \"renewable\": false,\n  \"lease_id\": \"\"\n  \"lease_duration\": 0,\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device with Vault CLI\nDESCRIPTION: This code demonstrates how to enable a file type audit device in Vault. The command requires specifying the file path where logs will be stored and optionally the file permissions mode. Dependencies include a valid file path accessible by Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/enable.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable [flags] file [options] \\\n    file_path=<path/to/log/file>            \\\n    [mode=<file_permissions>]\n```\n\n----------------------------------------\n\nTITLE: Setting ACLs for zNodes in Zookeeper\nDESCRIPTION: This example configures Vault to only allow access to its zNodes by a specific user. The ACL is defined by the `znode_owner` parameter, which corresponds to the Zookeeper ACL model.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/zookeeper.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"zookeeper\" {\n  znode_owner = \"digest:vaultUser:raxgVAfnDRljZDAcJFxznkZsExs=\"\n  auth_info   = \"digest:vaultUser:abc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Component with Multiple Models in Handlebars\nDESCRIPTION: Example showing how to properly pass multiple model data to a page component from a route's template. The route's model hook returns two different data models that are passed as separate arguments to the Page component.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/building-components.md#2025-04-14_snippet_0\n\nLANGUAGE: handlebars\nCODE:\n```\n<Page::CreateFoo @config={{this.model.config}} @foo={{this.model.foo}} />\n```\n\n----------------------------------------\n\nTITLE: Sample Role Configuration Payload in JSON\nDESCRIPTION: This JSON payload defines the operations that a KMIP role is authorized to perform. It includes various operations like encrypt, decrypt, create, and more.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"operation_activate\": true,\n  \"operation_add_attribute\": true,\n  \"operation_create\": true,\n  \"operation_decrypt\": true,\n  \"operation_destroy\": true,\n  \"operation_discover_versions\": true,\n  \"operation_encrypt\": true,\n  \"operation_get\": true,\n  \"operation_get_attribute_list\": true,\n  \"operation_get_attributes\": true,\n  \"operation_import\": true,\n  \"operation_locate\": true,\n  \"operation_query\": true,\n  \"operation_register\": true,\n  \"operation_rekey\": true,\n  \"operation_revoke\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Root Credential Rotation with Window\nDESCRIPTION: Command to configure both a rotation schedule and a rotation window for Azure root credentials in Vault Enterprise.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/azure/config \\\n    ...\n    rotation_window=\"1h\" \\\n    rotation_schedule=\"0 * * * SAT\"\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Telemetry Settings\nDESCRIPTION: Basic telemetry configuration for Vault including Prometheus retention time and hostname settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_53\n\nLANGUAGE: yaml\nCODE:\n```\ntelemetry {\n  prometheus_retention_time = \"30s\",\n  disable_hostname = true\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Configure TOTP MFA Method\nDESCRIPTION: This curl command sends a POST request to configure a TOTP MFA method named 'my_totp' using the payload from a JSON file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/totp/my_totp\n```\n\n----------------------------------------\n\nTITLE: Disabling Vault Usage Reporting via HCL Configuration\nDESCRIPTION: This snippet shows how to disable Vault's product usage reporting by adding a `reporting` block to the Vault server configuration file. This is the recommended method as it doesn't require a system restart. Ensuring consistent configuration across all nodes in a cluster is crucial to maintain a unified opt-out status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/product-usage-reporting.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"reporting {\\n  disable_product_usage_reporting = true\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Vault API Response after GitHub Authentication\nDESCRIPTION: This JSON snippet represents the response from the Vault API after a successful GitHub authentication. It contains the client token, lease duration, metadata (username, org), policies, and other information related to the authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/github.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"renewable\": true,\n    \"lease_duration\": 2764800,\n    \"metadata\": {\n      \"username\": \"my-user\",\n      \"org\": \"my-org\"\n    },\n    \"policies\": [\"default\", \"dev-policy\"],\n    \"accessor\": \"f93c4b2d-18b6-2b50-7a32-0fecf88237b8\",\n    \"client_token\": \"1977fceb-3bfa-6c71-4d1f-b64af98ac018\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling an Audit Device in Vault\nDESCRIPTION: This request demonstrates how to disable an audit device at a specific path using a DELETE request. This operation requires sudo capability and will prevent future HMAC validation against existing logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/audit/example-audit\n```\n\n----------------------------------------\n\nTITLE: Vault Seal Status Response - Unsealed State\nDESCRIPTION: JSON response showing the seal status when Vault is in an unsealed state. Includes additional cluster information and seal configuration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/seal-status.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build_date\": \"2024-11-14T18:11:15Z\",\n  \"cluster_id\": \"ebdd80fb-0c7f-bce9-f9b9-a0fa86aa3249\",\n  \"cluster_name\": \"vault-cluster-f090409a\",\n  \"initialized\": true,\n  \"migration\": false,\n  \"n\": 3,\n  \"nonce\": \"\",\n  \"progress\": 0,\n  \"recovery_seal\": false,\n  \"removed_from_cluster\": false,\n  \"sealed\": false,\n  \"storage_type\": \"raft\",\n  \"t\": 2,\n  \"type\": \"shamir\",\n  \"version\": \"1.19.0-beta1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Duo MFA Method Configuration with cURL\nDESCRIPTION: Shell command to retrieve the configuration details of an existing Duo MFA method named 'my_duo'. Uses a GET request with authentication token to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/duo.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/duo/my_duo\n\n```\n\n----------------------------------------\n\nTITLE: Creating Read-Only Policy for AD FS KV Mount\nDESCRIPTION: Command to create a policy that grants read and list capabilities to the AD FS KV mount path. Uses a heredoc to define the policy inline.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy write <RO_ADFS_POLICY_NAME> - << EOF\n# Read and list policy for the AD FS KV mount\npath \"<ADFS_KV_PLUGIN_PATH>/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Create Hashicorp Source Directory (Linux)\nDESCRIPTION: Creates the necessary directory structure under the GOPATH for cloning the Vault repository. The `mkdir -p` command creates parent directories as needed, and `cd $_` changes the current directory to the newly created directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"mkdir -p ${GOPATH}/src/hashicorp && cd $_\"\n```\n\n----------------------------------------\n\nTITLE: GET Response for LDAP Static Credentials\nDESCRIPTION: Shows the JSON response containing full credential information for a static role, including the distinguished name, rotation details, current and previous passwords, and remaining TTL in seconds.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dn\": \"uid=hashicorp,ou=Users,dc=hashicorp,dc=com\",\n  \"last_vault_rotation\": \"2020-02-19T11:31:53.7812-05:00\",\n  \"password\": \"LTNfyn7pS7XEZIxEYQ2sEAWic02PEP7zSvIs0xMqIjaU0ORzLhKOKVmYLxL1Xkyv\",\n  \"last_password\": \"?@09AZSen9TzUwK7ZhafS7B0GuWGraQjfWEna5SwnmF/tVaKFqjXhhGV/Z0v/pBJ\",\n  \"rotation_period\": 86400,\n  \"ttl\": 86072,\n  \"username\": \"hashicorp\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with Public Key using OpenSSL\nDESCRIPTION: Example of using OpenSSL to encrypt data with the retrieved public key. This encryption happens offline, and only Cloud KMS has the corresponding private key for decryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ openssl pkeyutl -in ~/my-secret-file \\\n    -encrypt -pubin \\\n    -inkey ~/mykey.pub \\\n    -pkeyopt rsa_padding_mode:oaep \\\n    -pkeyopt rsa_oaep_md:sha256 \\\n    -pkeyopt rsa_mgf1_md:sha256\n```\n\n----------------------------------------\n\nTITLE: Default Vault Secrets Operator Configuration\nDESCRIPTION: YAML configuration for default operator image deployment with memory resource limits and requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/openshift.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ncontroller:\n  manager:\n    resources:\n      limits:\n        memory: 256Mi\n      requests:\n        memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Creating a Group - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to create a group in Vault's Identity store using the API. It sends a POST request to the `/identity/group` endpoint, including a Vault token for authentication and a JSON payload containing the group's details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/group\n```\n\n----------------------------------------\n\nTITLE: JWT Login Request\nDESCRIPTION: cURL command to perform JWT login\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/jwt/login\n```\n\n----------------------------------------\n\nTITLE: Creating Library Set - Shell Request\nDESCRIPTION: Example POST request to create or update an LDAP service account library set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ldap/library/accounting-team\n```\n\n----------------------------------------\n\nTITLE: Configuring Redshift Database Plugin in Vault\nDESCRIPTION: This command configures Vault with the Redshift database plugin and connection information. It specifies the plugin name, allowed roles, connection URL, username, and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redshift.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/config/my-redshift-database \\\n    plugin_name=redshift-database-plugin \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"postgresql://{{username}}:{{password}}@localhost:5432/<optional: db-name>\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for AWS Client Configuration\nDESCRIPTION: JSON response from the Vault API when retrieving AWS client configuration, showing the configured access key and endpoint settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"access_key\": \"VKIAJBRHKH6EVTTNXDHA\",\n    \"endpoint\": \"\",\n    \"iam_endpoint\": \"\",\n    \"sts_endpoint\": \"\",\n    \"sts_region\": \"\",\n    \"use_sts_region_from_client\": false,\n    \"iam_server_id_header_value\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Accessor Destroy Payload\nDESCRIPTION: This JSON payload specifies the `secret_id_accessor` to be destroyed.  It is used in the request to destroy a secret ID by its accessor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_id_accessor\": \"84896a0c-1347-aa90-a4f6-aca8b7558780\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Structure of Cache Configuration in JSON\nDESCRIPTION: The JSON snippet demonstrates the structure of the response returned when retrieving the cache configuration of the Vault Transit Secrets Engine, indicating the current cache size value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n\"data\": {\n  \"size\": 0\n},\n```\n\n----------------------------------------\n\nTITLE: Read ACL Policy Request\nDESCRIPTION: Retrieves information about a specific named ACL policy\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/acl/my-policy\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure SQL Database Connection\nDESCRIPTION: Command to configure Vault connection for Azure SQL Database\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mssql.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write azuresql/config/testvault \\\n    plugin_name=mssql-database-plugin \\\n    connection_url='server=hashisqlserver.database.windows.net;port=1433;user id=admin;password=pAssw0rd;database=test-vault;app name=vault;' \\\n    contained_db=true \\\n    allowed_roles=\"test\"\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Vault-0 Pod\nDESCRIPTION: These commands initialize and unseal the first Vault pod (vault-0) in the cluster. Initialization is required to set up the initial root token and unseal keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-with-raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-0 -- vault operator init\nkubectl exec -ti vault-0 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Login to Vault Using API Key\nDESCRIPTION: Command to log in to Vault using an OCI API key. Users must have previously configured their OCI API key and be part of a valid group added to Vault's admin role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login -method=oci auth_type=apikey role=vaultadminrole\n```\n\n----------------------------------------\n\nTITLE: Reading AWS Client Configuration from Vault API\nDESCRIPTION: Shell command to retrieve the previously configured AWS access credentials by sending a GET request to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/aws/config/client\n```\n\n----------------------------------------\n\nTITLE: High Availability GCS Configuration\nDESCRIPTION: Configuration example showing how to enable high availability mode with Google Cloud Storage backend, including API address setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-storage.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\napi_addr = \"https://vault-leader.my-company.internal\"\n\nstorage \"gcs\" {\n  bucket        = \"mycompany-vault-data\"\n  ha_enabled    = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Auth Method Configuration\nDESCRIPTION: cURL command to retrieve the previously configured Azure authentication settings. This returns the tenant ID, resource URL, and credentials currently in use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/auth/azure/config\n```\n\n----------------------------------------\n\nTITLE: Reading Performance Replication Paths Filter\nDESCRIPTION: cURL command to read the current paths filter configuration for a secondary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/paths-filter/mySecondaryID\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Connection Sample Payload\nDESCRIPTION: JSON payload for configuring the connection to a Cassandra database, specifying the host, username, and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosts\": \"cassandra1.local\",\n  \"username\": \"user\",\n  \"password\": \"pass\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Vault Policy\nDESCRIPTION: This command deletes a policy with the name \"my-policy\" from the Vault server. This will affect all tokens associated with the deleted policy. Requires Vault CLI to be configured and authenticated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/delete.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"$ vault policy delete my-policy\"\n```\n\n----------------------------------------\n\nTITLE: POST Role Tag to Deny List using Vault API with curl\nDESCRIPTION: This snippet demonstrates how to add a role tag to the deny list using the Vault API. It utilizes a POST request to the `/auth/aws/roletag-denylist/:role_tag` endpoint, requiring a Vault token for authentication. The `role_tag` parameter is required and can be base64 encoded to avoid encoding issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_40\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/aws/roletag-denylist/djE6MDlWcDBxR3V5Qjg9OmE9YW1pLWZjZTNjNjk2OnA9ZGVmYXVsdCxwcm9kOmQ9ZmFsc2U6dD0zMDBoMG0wczp1UExLQ1F4cXNlZlJocnAxcW1WYTF3c1FWVVhYSkc4VVpQLwo=\n```\n\n----------------------------------------\n\nTITLE: Running UI Tests Manually with Enos\nDESCRIPTION: Series of commands to run the UI tests manually using Enos. This includes launching the scenario, exporting necessary environment variables, running the tests, and destroying the infrastructure.\nSOURCE: https://github.com/hashicorp/vault/blob/main/enos/README.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport ENOS_VAR_ui_test_filter=\"some filter\" # <-- optional\nexport ENOS_VAR_ui_run_tests=false\ncd enos\nenos scenario ui launch edition:oss\n# once complete the scenario will output a set of environment variables that must be exported. The \n# output will look as follows:\nexport TEST_FILTER='some filter>' \\\nexport VAULT_ADDR='http://<some ip address>:8200' \\\nexport VAULT_TOKEN='<some token>' \\\nexport VAULT_UNSEAL_KEYS='[\"<some key>\",\"<some key>\",\"<some key>\"]'\n# copy and paste the above into the terminal to export the values\ncd ../ui\nyarn test:enos # run headless\n# or\nyarn test:enos -s # run manually in a web browser \n# once testing is complete\ncd ../enos\nenos scenario ui destroy edition:oss\n```\n\n----------------------------------------\n\nTITLE: Configuring Transit Key and Policy with Shell Commands\nDESCRIPTION: Shell commands to create a transit key for VSO client cache and define encryption/decryption policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/client-cache.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_NAMESPACE=<VAULT_NAMESPACE>\nexport VAULT_TRANSIT_PATH=<VAULT_TRANSIT_PATH>\n\nvault write -f ${VAULT_TRANSIT_PATH}/keys/vso-client-cache\n\nvault policy write operator - <<EOH\npath \"${VAULT_TRANSIT_PATH}/encrypt/vso-client-cache\" {\n  capabilities = [\"create\", \"update\"]\n}\npath \"${VAULT_TRANSIT_PATH}/decrypt/vso-client-cache\" {\n  capabilities = [\"create\", \"update\"]\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: VaultAuth Status Check Command\nDESCRIPTION: Shell command to check the status of a VaultAuth resource.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get vaultauths.secrets.hashicorp.com -n admin default -o jsonpath='{.status}'\n```\n\n----------------------------------------\n\nTITLE: Adding Kubernetes Secrets Check Endpoint\nDESCRIPTION: Introduces a new endpoint to validate the presence of Kubernetes-related environment variables in the Vault secrets engine\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19084.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/kubernetes: add /check endpoint to determine if environment variables are set\n```\n\n----------------------------------------\n\nTITLE: Creating Specific Lease Count Quota Payload Example in JSON for Vault API\nDESCRIPTION: This example JSON payload creates a targeted quota limit called 'webapp-tokens' on the 'webapp' role for the 'approle' plugin at the default mount path, with a maximum of 100 leases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"webapp-tokens\",\n  \"path\": \"auth/approle\",\n  \"role\": \"webapp\",\n  \"max_leases\": 100,\n}\n```\n\n----------------------------------------\n\nTITLE: Moving a Secrets Engine to a New Path in Vault\nDESCRIPTION: This command moves an existing secrets engine from one path to another. In this example, the database engine is moved from 'database/' to 'db-prod/', which is useful for reorganizing or renaming engine instances.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets move database/ db-prod/\nSuccess! Moved secrets engine database/ to: db-prod/\n```\n\n----------------------------------------\n\nTITLE: GCP Authentication Improvement\nDESCRIPTION: This release note indicates the addition of support for Google Compute Engine (GCE) regional instance groups in the Vault GCP authentication method. This allows Vault to authenticate clients running within regional instance groups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16435.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:improvement\nauth/gcp: Add support for GCE regional instance groups`\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync System - Shell Request\nDESCRIPTION: cURL command to configure the sync system parameters using PATCH request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request PATCH \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/sync/config\n```\n\n----------------------------------------\n\nTITLE: Signing Digest - HCL\nDESCRIPTION: This HCL policy defines the capabilities for signing a digest using a specified key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_20\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/sign/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting SAML Role with cURL\nDESCRIPTION: This cURL command sends a DELETE request to remove a specific SAML role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/saml/role/admin\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to SAML SSO Service URL - Shell\nDESCRIPTION: This shell command demonstrates how to use curl to send a POST request to the SAML SSO service URL endpoint with the necessary headers and data payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/saml/sso_service_url\n```\n\n----------------------------------------\n\nTITLE: Payload for Generating Kubernetes Service Account Token\nDESCRIPTION: JSON payload for requesting a Kubernetes service account token. This specifies the namespace and a time-to-live (TTL) value for the generated token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kubernetes_namespace\": \"default\",\n  \"ttl\": \"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Secret Manager Destination without SSRF Protection\nDESCRIPTION: A JSON configuration for setting up a GCP Secret Manager destination with replication across multiple regions and disabled strict networking. Requires GCP service account credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"credentials\": \"<private key string>\",\n    \"replication_locations\": [\n        \"us-east1\",\n        \"us-west1\"\n    ],\n    \"disable_strict_networking\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault with Multi-line String in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up Vault with a multi-line string for advanced configuration, including HA settings, listener configuration, storage, and AWS KMS seal.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  ha:\n    enabled: true\n    raft:\n      enabled: true\n      setNodeId: true\n      config: |\n        ui = false\n\n        listener \"tcp\" {\n          tls_disable = 1\n          address = \"[::]:8200\"\n          cluster_address = \"[::]:8201\"\n        }\n\n        storage \"raft\" {\n          path    = \"/vault/data\"\n        }\n\n        service_registration \"kubernetes\" {}\n\n        seal \"awskms\" {\n          region     = \"us-west-2\"\n          kms_key_id = \"alias/my-kms-key\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Querying Sync Associations in Vault\nDESCRIPTION: GET request to retrieve sync associations for a specific secret in Vault. Shows two variations of the endpoint - one for direct lookup and another using query parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/sync/associations/my-kv-1/my-secret-1\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/sync/associations/destinations?mount=my-kv-1&secret_name=my-secret-1\n```\n\n----------------------------------------\n\nTITLE: Enabling Nomad Secrets Engine in Vault (shell-session)\nDESCRIPTION: The command enables the Nomad secrets engine in HashiCorp Vault, mounting it at the 'nomad' path. This is the first step needed before configuring or generating tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/nomad.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable nomad\nSuccessfully mounted 'nomad' at 'nomad'!\n```\n\n----------------------------------------\n\nTITLE: Adding Consul Identity Support Release Note\nDESCRIPTION: Release note entry documenting the addition of support for Consul node-identities and service-identities in the Consul secrets engine of HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15295.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsecrets/consul: Add support for Consul node-identities and service-identities\n```\n\n----------------------------------------\n\nTITLE: Generating Cassandra Credentials\nDESCRIPTION: Command to generate new credentials by reading from the /creds endpoint with the role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/cassandra.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           7iO-FxlVCdj8szsgGgsL\nusername           v_vaultuser_my_role_6zjahr4mjn5c9prgucy1_1602541475\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to /sys/experiments Endpoint in Vault\nDESCRIPTION: This shell command demonstrates how to make a GET request to the `/sys/experiments` endpoint of a Vault server running on localhost. It retrieves information about available and enabled experiments on the Vault node.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/experiments.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/experiments\n```\n\n----------------------------------------\n\nTITLE: Creating a Password Role for MongoDB Atlas\nDESCRIPTION: Command to configure a role in Vault that maps to a MongoDB Atlas command for creating database user credentials with password authentication. This example creates a role with atlasAdmin permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodbatlas.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-password-role \\\n    db_name=my-mongodbatlas-database \\\n    creation_statements='{\"database_name\": \"admin\",\"roles\": [{\"databaseName\":\"admin\",\"roleName\":\"atlasAdmin\"}]}' \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\nSuccess! Data written to: database/roles/my-password-role\n```\n\n----------------------------------------\n\nTITLE: Querying Vault Client Usage Metrics for a Time Frame using CLI\nDESCRIPTION: This snippet demonstrates how to use the Vault CLI to query client usage metrics for a specific time period. It uses the 'vault operator usage' command with start and end time parameters in RFC3339 format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/client-count/usage-metrics.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator usage \\\n     -start-time=2024-06-01T00:00:00Z \\\n     -end-time=2024-06-30T23:59:59Z\n```\n\n----------------------------------------\n\nTITLE: Executing Wrapping Request with cURL\nDESCRIPTION: Shell command demonstrating how to make a POST request to the wrapping endpoint using cURL, including necessary headers and data payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-wrap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --header \"X-Vault-Wrap-TTL: 60\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/wrapping/wrap\n```\n\n----------------------------------------\n\nTITLE: Setting SSH Host Certificate in Shell\nDESCRIPTION: Set the signed SSL certificate in the SSH configuration of the host machine, ensuring that Vault-signed keys are recognized and authenticated by SSH.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -field=signed_key ssh-host-signer/sign/hostrole \\\n    cert_type=host \\\n    public_key=@/etc/ssh/ssh_host_rsa_key.pub > /etc/ssh/ssh_host_rsa_key-cert.pub\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ chmod 0640 /etc/ssh/ssh_host_rsa_key-cert.pub\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n# /etc/ssh/sshd_config\n# ...\n\n# For client keys\nTrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem\n\n# For host keys\nHostKey /etc/ssh/ssh_host_rsa_key\nHostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub\n```\n\n----------------------------------------\n\nTITLE: Signing a CSR with Trust Protection Platform - Shell Script\nDESCRIPTION: This snippet demonstrates how to sign a Certificate Signing Request (CSR) from a file by making a call to the `/sign` endpoint using the associated role for Trust Protection Platform.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/sign/tpp csr=@example.req\n```\n\n----------------------------------------\n\nTITLE: Router Root Tree Response in Vault\nDESCRIPTION: The JSON response from the root tree endpoint provides details about mounted authentication methods and secrets engines. It includes information such as accessor IDs, mount paths, types, storage prefixes, and UUIDs for each mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"819de627-d3bc-27f4-0e3c-5c5fb0b204ee\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"root\": [\n      {\n        \"accessor\": \"auth_token_d5fcf970\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"token/\",\n        \"mount_type\": \"token\",\n        \"storage_prefix\": \"sys/token/\",\n        \"tainted\": false,\n        \"uuid\": \"de61dd8c-a181-ccc2-457d-908e417d10b0\"\n      },\n      {\n        \"accessor\": \"cubbyhole_58b6727b\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"cubbyhole/\",\n        \"mount_type\": \"cubbyhole\",\n        \"storage_prefix\": \"logical/496bc2e4-b641-2561-1829-f6557bf1fedc/\",\n        \"tainted\": false,\n        \"uuid\": \"496bc2e4-b641-2561-1829-f6557bf1fedc\"\n      },\n      {\n        \"accessor\": \"identity_2ccfb6ab\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"identity/\",\n        \"mount_type\": \"identity\",\n        \"storage_prefix\": \"logical/b15e93e0-5bf1-07b0-86d3-563f9c77eef1/\",\n        \"tainted\": false,\n        \"uuid\": \"b15e93e0-5bf1-07b0-86d3-563f9c77eef1\"\n      },\n      {\n        \"accessor\": \"system_0157e00a\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"sys/\",\n        \"mount_type\": \"system\",\n        \"storage_prefix\": \"sys/\",\n        \"tainted\": false,\n        \"uuid\": \"8ac2615e-8a73-fe66-52a6-a422f7e3273f\"\n      }\n    ]\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Token TTL (Shell Script)\nDESCRIPTION: This snippet demonstrates how to verify the TTL of a Kubernetes service account token by decoding the JWT using `cut`, `base64`, and `jq`. It extracts the `iat` (issued at) and `exp` (expiration time) claims from the decoded JWT and converts them to human-readable dates. Requires `jq` to be installed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo 'eyJhbGc...' | cut -d'.' -f2 | base64 -d  | jq -r '.iat,.exp|todate'\n2022-05-20T17:14:50Z\n2022-05-20T17:34:50Z\n```\n\n----------------------------------------\n\nTITLE: Documenting Memory Optimization for Leases in HashiCorp Vault\nDESCRIPTION: This release note entry indicates an improvement in Vault's core functionality that reduces the memory footprint of lease management. Leases in Vault are used to manage the lifecycle of dynamic secrets and tokens, and this optimization likely improves scalability for systems with many active leases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10726.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: reduce memory used by leases\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Raft Cluster Initialization\nDESCRIPTION: These commands verify the successful initialization of the Raft cluster by logging in and listing all Raft peers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/openshift.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ oc exec -ti vault-0 -- vault login\n$ oc exec -ti vault-0 -- vault operator raft list-peers\n```\n\n----------------------------------------\n\nTITLE: API Call to Upgrade kv Plugin Version\nDESCRIPTION: This shell command makes a POST request to Vault's API to upgrade the kv plugin version to v2. It includes the necessary auth token and data payload specifying the version to be updated, and it targets the appropriate API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/upgrade.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                            \\\n    --header \"X-Vault-Token: ...\"                 \\\n    --request POST                                \\\n    --data '{\\\"options\\\": {\\\"version\\\": \\\"2\\\"}}'  \\\n    http://${VAULT_ADDR}/v1/sys/mounts/${KV_MOUNT_PATH}/tune\n\n```\n\n----------------------------------------\n\nTITLE: Listing Distributed Keys in Azure Key Vault\nDESCRIPTION: This command lists the keys that have been distributed to the Azure Key Vault instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault list keymgmt/kms/keyvault/key/\n```\n\n----------------------------------------\n\nTITLE: Writing a Vault Policy for TOTP MFA\nDESCRIPTION: This snippet creates a Vault policy named `totp-policy` that grants read access to the `secret/foo` path and requires MFA using the `my_totp` method. This policy ensures that access to the specified secret is protected by MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault policy write totp-policy -<<EOF\npath \"secret/foo\" {\n  capabilities = [\"read\"]\n  mfa_methods  = [\"my_totp\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring RADIUS Connection Parameters Sample Payload in JSON\nDESCRIPTION: This snippet shows the JSON payload structure for configuring the RADIUS connection parameters including host, port, and shared secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"host\": \"radius.myorg.com\",\n  \"port\": 1812,\n  \"secret\": \"mySecret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Cluster Members Using operator members Command\nDESCRIPTION: Example showing how to use the 'vault operator members' command to display information about cluster nodes including host names, API addresses, cluster addresses, active status, versions, and last echo timestamps. The output includes Enterprise-only fields like Upgrade Version and Redundancy Zone.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/members.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator members\nHost Name            API Address              Cluster Address           Active Node    Version    Upgrade Version    Redundancy Zone    Last Echo\n---------            -----------              ---------------           -----------    -------    ---------------    ---------------    ---------\njosh-C02ZT9DYMD6R    http://127.0.0.1:8200    https://127.0.0.1:8201    true           1.11.0     1.11.0             a                  n/a\njosh-C02ZT9DYMD6R    http://127.0.0.2:8200    https://127.0.0.2:8201    false          1.11.0     1.11.0             a                  2022-05-23T15:51:19-07:00\njosh-C02ZT9DYMD6R    http://127.0.0.3:8200    https://127.0.0.3:8201    false          1.11.0     1.11.0             b                  2022-05-23T15:51:19-07:00\njosh-C02ZT9DYMD6R    http://127.0.0.4:8200    https://127.0.0.4:8201    false          1.11.0     1.11.0             b                  2022-05-23T15:51:22-07:00\njosh-C02ZT9DYMD6R    http://127.0.0.5:8200    https://127.0.0.5:8201    false          1.11.0     1.12.0             a                  2022-05-23T15:51:20-07:00\n~\n```\n\n----------------------------------------\n\nTITLE: PKI Issuer Configuration API Request\nDESCRIPTION: Example cURL command to configure a PKI issuer via Vault's HTTP API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_70\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/issuer/default\n```\n\n----------------------------------------\n\nTITLE: HMAC Response Format\nDESCRIPTION: JSON response from the Vault Transit HMAC API showing the generated HMAC digest in base64 encoding.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"hmac\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KV Events Policy in Vault HCL\nDESCRIPTION: HCL policy configuration that grants permissions to subscribe to KV events and access the events notification system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/static-secret-caching.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"sys/events/subscribe/kv*\" {\n  capabilities = [\"read\"]\n}\n\npath \"*\" {\n  capabilities = [\"list\", \"subscribe\"]\n  subscribe_event_types = [\"kv*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token Role in Vault (cURL)\nDESCRIPTION: Sample cURL request for creating or updating a token role in Vault. It sends a POST request with the role payload to the specified endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST\n    --data @payload.json\n    http://127.0.0.1:8200/v1/auth/token/roles/nomad\n```\n\n----------------------------------------\n\nTITLE: Creating LDAP Group in Vault CLI\nDESCRIPTION: Illustrates how to create a new LDAP group using the Vault CLI by calling the UpsertLDAPGroup API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write /auth/ldap/groups/admin policies=\"admin,default\"\n```\n\n----------------------------------------\n\nTITLE: Deleting TOTP MFA method using HTTP API - Shell\nDESCRIPTION: This shell command deletes a specific TOTP MFA method from Vault using its 'method_id'. The DELETE method is employed in this request. Methods in use by login enforcement cannot be deleted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/totp/4c6b1968-b385-4c46-ac5e-9b74e7b206be\n```\n\n----------------------------------------\n\nTITLE: Updating an Entity Alias by ID (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to update an existing entity alias in Vault using the Identity store API. It sends a POST request to the `/identity/entity-alias/id/:id` endpoint with the JSON payload specified in the `@payload.json` file.  A valid Vault token is required in the `X-Vault-Token` header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/entity-alias/id/34982d3d-e3ce-5d8b-6e5f-b9bb34246c31\n```\n\n----------------------------------------\n\nTITLE: Reading Group by Name - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command shows how to read a group's details from Vault's Identity store using its name.  It sends a GET request to the `/identity/group/name/:name` endpoint, replacing `:name` with the actual group name and including a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/group/name/testgroupname\n```\n\n----------------------------------------\n\nTITLE: Create Custom AppRole Secret ID Payload\nDESCRIPTION: This JSON payload defines the custom secret ID to be created.  It includes properties like `secret_id`, `ttl`, and `num_uses` to customize the secret ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_id\": \"testsecretid\",\n  \"ttl\": 600,\n  \"num_uses\": 50\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP for Kerberos Authentication\nDESCRIPTION: Example request for configuring LDAP settings used by the Kerberos auth method for user and group resolution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/kerberos/config/ldap\n```\n\n----------------------------------------\n\nTITLE: Writing Data to Cubbyhole Secret Storage\nDESCRIPTION: Demonstrates how to write arbitrary secret data to the Cubbyhole secrets engine using the Vault CLI. The command writes a key-value pair to a specific path in the token's cubbyhole.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/cubbyhole.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault write cubbyhole/my-secret my-value=s3cr3t\nSuccess! Data written to: cubbyhole/my-secret\n```\n\n----------------------------------------\n\nTITLE: Decoding Root Token with OTP in Vault CLI\nDESCRIPTION: This command decodes the newly generated root token using the encoded token and the OTP value from the initial nonce generation step.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/generate-root-token.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator generate-root \\\n   -decode=${ENCODED_TOKEN}    \\\n   -otp=${NONCE_OTP}\n```\n\n----------------------------------------\n\nTITLE: Sample Request to Configure - Shell\nDESCRIPTION: This shell command demonstrates how to make a POST request to configure the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/config\n```\n\n----------------------------------------\n\nTITLE: Reading UI Header Configuration via GET Request\nDESCRIPTION: Makes a GET request to retrieve the configuration for a specific UI header. Requires X-Vault-Token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/ui/headers/X-Custom-Header\n```\n\n----------------------------------------\n\nTITLE: Reading Issuer Certificate with cURL in Vault PKI\nDESCRIPTION: Makes an unauthenticated GET request to retrieve a specific issuer's certificate information from the Vault PKI secrets engine, including its certificate chain.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/pki/issuer/root-x1/json\n```\n\n----------------------------------------\n\nTITLE: List EGP Policies Response\nDESCRIPTION: Sample JSON response showing available EGP policy names\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\"breakglass\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a CA Certificate Role from Vault\nDESCRIPTION: This curl command sends a GET request to read information about a specific CA certificate role from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --cacert vault-ca.pem \\\n    https://127.0.0.1:8200/v1/auth/cert/certs/test-ca\n```\n\n----------------------------------------\n\nTITLE: Delete ACL Policy Request\nDESCRIPTION: Deletes an ACL policy using DELETE method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/policies/acl/my-policy\n```\n\n----------------------------------------\n\nTITLE: Oracle Database Configuration API Request\nDESCRIPTION: cURL command example showing how to make an HTTP POST request to configure an Oracle database connection in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/oracle.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/oracle\n```\n\n----------------------------------------\n\nTITLE: Accessing Secret Metadata in Go Template\nDESCRIPTION: Shows how to access and include secret metadata in a Go template within the Vault Secrets Operator. This example retrieves a secretGroup value from the .Metadata input member.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/secret-transformation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n{{- printf \"secretGroup=%s\" (get .Metadata \"secretGroup\") -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Standalone Mode with Extra Configuration\nDESCRIPTION: Shows how to provide additional Vault configuration in standalone mode using a multi-line string or Helm set command\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nconfig: |\n  api_addr = \"http://POD_IP:8200\"\n\n  listener \"tcp\" {\n    tls_disable = 1\n    address     = \"0.0.0.0:8200\"\n  }\n\n  storage \"file\" {\n    path = \"/vault/data\"\n  }\n```\n\nLANGUAGE: shell\nCODE:\n```\n--set server.standalone.config='{ listener \"tcp\" { address = \"0.0.0.0:8200\" }'\n```\n\n----------------------------------------\n\nTITLE: Read Secret Subkeys Request\nDESCRIPTION: This curl command sends a GET request to retrieve the subkeys within a secret entry. It includes the Vault token in the header and specifies the secret path and version number in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/secret/subkeys/my-secret?version=1\n```\n\n----------------------------------------\n\nTITLE: Listing Transform Roles with curl Request\nDESCRIPTION: Example curl command for listing all existing roles in the Transform secrets engine using the LIST HTTP method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/transform/role\n```\n\n----------------------------------------\n\nTITLE: Creating Vercel Sync Destination in Vault (JSON)\nDESCRIPTION: Sample payload for creating a Vercel sync destination in Vault. Includes access token, project ID, and deployment environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"<token>>\",\n    \"project_id\": \"prj_12345\",\n    \"deployment_environments\": [\"development\", \"preview\", \"production\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Accessor Token Renewal\nDESCRIPTION: This snippet provides an example of the JSON payload that specifies the accessor associated with the token to be renewed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessor\": \"7JFKXuXKXa2D44YfDiovZ9aq\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Audit Device with Parameters\nDESCRIPTION: Command to enable syslog audit device with custom tag and facility parameters. Sets the syslog tag to 'vault' and facility to 'AUTH'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/syslog.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable syslog tag=\"vault\" facility=\"AUTH\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Transit Key with JSON Payload\nDESCRIPTION: Example JSON payload for updating a Transit key's configuration, specifically enabling key deletion.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"deletion_allowed\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Access Policy for Okta MFA\nDESCRIPTION: This command creates a policy in Vault that grants access to a specific secret, requiring Okta MFA for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault policy write okta-policy -<<EOF\\npath \"secret/foo\" {\\n  capabilities = [\"read\"]\\n  mfa_methods  = [\"my_okta\"]\\n} \\nEOF\n```\n\n----------------------------------------\n\nTITLE: Reading an SSH Role from Vault\nDESCRIPTION: Example of retrieving a named SSH role from Vault using a GET request. The request authenticates with an X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/ssh/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: LIST Identity Access List Entries using Vault API with curl\nDESCRIPTION: This snippet demonstrates how to list all instance IDs present in the identity access list using the Vault API. It sends a LIST request to the `/auth/aws/identity-accesslist` endpoint, authenticated with a Vault token. The response provides an array of keys, each representing an instance ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_49\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/aws/identity-accesslist\n```\n\n----------------------------------------\n\nTITLE: Configuring UI Headers via POST Request\nDESCRIPTION: Makes a POST request to configure values for a specific UI header. Requires X-Vault-Token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/config/ui/headers/X-Custom-Header\n```\n\n----------------------------------------\n\nTITLE: Release Note for Cassandra Username Customization Feature\nDESCRIPTION: A release note documenting the addition of a feature that allows customization of dynamically generated usernames in the Cassandra database secrets engine within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10906.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\nsecrets/database/cassandra: Add ability to customize dynamic usernames\n```\n\n----------------------------------------\n\nTITLE: Rotating a Key in Vault's Key Management Engine\nDESCRIPTION: This command rotates the specified key by creating a new version with fresh key material. The rotation affects both the key in Vault and any KMS providers it has been distributed to.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f keymgmt/key/example-key/rotate\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Tuning Vault Auth Methods\nDESCRIPTION: JSON payload example for tuning a Vault authentication method. This shows how to configure default and maximum lease TTLs, specify non-HMAC audit keys, and set up user lockout parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/auth.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default_lease_ttl\": 1800,\n  \"max_lease_ttl\": 86400,\n  \"audit_non_hmac_request_keys\": [\"client_nonce\"],\n  \"user_lockout_config\":{\n    \"lockout_threshold\":\"20\",\n    \"lockout_duration\":\"5m\",\n    \"lockout_counter_reset\":\"5m\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Rotation Window for GCP Auth Root Credential Rotation\nDESCRIPTION: This snippet shows how to configure a rotation window for scheduled root credential rotation in the GCP auth engine. It sets the rotation to occur on Saturday at midnight with a 1-hour window.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/gcp/config/client \\\n  ...\n  rotation_window=\"1h\" \\\n  rotation_schedule=\"0 * * * SAT\"\n...\n```\n\n----------------------------------------\n\nTITLE: Revoke DR Secondary Token\nDESCRIPTION: HTTP POST request to revoke a DR secondary's connection privileges using its identifier.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"us-east\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/primary/revoke-secondary\n```\n\n----------------------------------------\n\nTITLE: Decoding PGP-Encrypted Root Token using Keybase\nDESCRIPTION: This command decrypts the PGP-encrypted root token using the Keybase tool. It requires the encoded token to be base64 decoded before decryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/generate-root-token.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ echo ${ENCODED_TOKEN} | base64 --decode | keybase pgp decrypt\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for an OTP Role\nDESCRIPTION: Example JSON response when reading an SSH role of type OTP. Shows the CIDR list, default user, key type, and port configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cidr_list\": \"x.x.x.x/y\",\n  \"default_user\": \"username\",\n  \"key_type\": \"otp\",\n  \"port\": 22\n}\n```\n\n----------------------------------------\n\nTITLE: AWS KMS Seal Configuration Example\nDESCRIPTION: Complete example of configuring an AWS KMS seal with HA support, including region, access credentials, and KMS key settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/seal-ha.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"awskms\" {\n  name       = \"aws_east\"\n  priority   = \"1\"\n\n  region     = \"us-east-1\"\n  access_key = \"AKIAIOSFODNN7EXAMPLE\"\n  secret_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n  kms_key_id = \"19ec80b0-dfdd-4d97-8164-c6examplekey\"\n}\n```\n\n----------------------------------------\n\nTITLE: Signing CSR for KMIP Credentials in Shell\nDESCRIPTION: This shell command signs a Certificate Signing Request (CSR) to create client credentials for a specific KMIP role and scope by sending a POST request with the CSR to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data '{\"csr\": \"-----BEGIN CERTIFICATE REQUEST-----\\nMIIC5DCCAcwCAQIwaTEMMAoGA1UEAwwDRUtNMQ8wDQYDVQQKDAZOZXRBcHAxEjAQ\\nBgNVBAsMCVNvbGlkRmlyZTESMBAGA1UEBwwJU3Vubnl2YWxlMRMwEQYDVQQIDApD\\nYWxpZm9ybmlhMQswCQYDVQQGEwJVUzCCASIwDQYJKoZIhvcNAQEBBQADggEPADCC\\nAQoCggEBALFjeR5ZeKlTSLNKLr0Gl4DEH1oICDZj3oMYAEGMO/uW/4YleFmYSkPc\\nxqqT/i6nlys+ZvLMtFdTr4lZBVsVD/AhjDVVBKuxaHIbolZFBjVxY3J2MuCWS2hB\\nN2pRmGgnlpPwiu0VpA1bNJ/Shw3Zol9OnYliZAzc6U/hMxDUP7yQHSU5Q9T3vHV2\\n3xR38PmeXKqdG+S68/cuhEHtUPa1mTagntkYU5BDOKpcmPenEam7itR+Tp1yZupp\\n5sdfI/5trO4YI6jtUmMsA5PaNlKMDqzwjkiI8+kd+aDgIJa5c9VeEXC/PkjXRJ9G\\nC/mSQOhM84EaYAU6zDw9B78j5ca2izsCAwEAAaA2MDQGCSqGSIb3DQEJDjEnMCUw\\nDgYDVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMCMA0GCSqGSIb3DQEB\\nCwUAA4IBAQBXW2nA4EsNYDLo8gzBqsM3AFYTdYTO+Q2wu0fUZp3cX3AOIYFstW6/\\nrCpdU3/z5ICS9i4ZHfJOAeKtBeOE+VCt7xI/+ZH1D7I9mNWZ7wp+ZXWImzRtEmBZ\\nSj6wVa2Igmtiqr2UQegWnp5MG5Ds37DvmBoFDvcGMKy3tVJamSXFhqtdY2QSzYMM\\nCjuqNUjll4RUUurjKmET8ZVHjLXGI3MxGVVg6aC3TtYuK12DFEFSy8LlfVn6kXS4\\nPTe4Y6ffW5JykdW85xMq5RM6rpwsrVaKvVFOwn9O7lGZLeq4HFPcjY2SXZxAT+bi\\nb/t+UQOjhlb0X2YdjPGHjFd+spZQ6u0a\\n-----END CERTIFICATE REQUEST-----\"}'\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole/credential/sign\n```\n\n----------------------------------------\n\nTITLE: Adding SSH CA Public Key to Known Hosts\nDESCRIPTION: Add the SSH CA public key to the known_hosts file with cert-authority to enable secure SSH connections to hosts within managed domains.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n# ~/.ssh/known_hosts\n@cert-authority *.example.com ssh-rsa AAAAB3NzaC1yc2EAAA...\n```\n\n----------------------------------------\n\nTITLE: Basic Audit Device Listing in Vault CLI\nDESCRIPTION: Command to display basic information about all active audit devices in Vault. Shows minimal details including path, type, and description.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit list\n```\n\n----------------------------------------\n\nTITLE: Sample SSH Public Key Response in Text Format\nDESCRIPTION: Example raw text response when retrieving the SSH public key. The response is the actual public key in OpenSSH format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_27\n\nLANGUAGE: text\nCODE:\n```\n    ssh-rsa AAAAHHNzaC1y...\n```\n\n----------------------------------------\n\nTITLE: Read ACL Policy Response\nDESCRIPTION: Sample JSON response containing ACL policy details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"deploy\",\n  \"policy\": \"path \\\"secret/foo\\\" {...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Transform Role with curl Request\nDESCRIPTION: Example curl command for retrieving information about an existing role in the Transform secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transform/role/example-role\n```\n\n----------------------------------------\n\nTITLE: Consul ACL Policy Configuration\nDESCRIPTION: JSON configuration for Consul ACL policy to grant write permissions for the Vault service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service\": {\n    \"vault\": {\n      \"policy\": \"write\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AliCloud Role in Vault - HTTP Request\nDESCRIPTION: HTTP POST request to create or update an AliCloud role in Vault. This request uses the role name in the URL path and includes the role configuration payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/alicloud/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Batch Deleting Entities - HTTP API - JSON\nDESCRIPTION: This JSON payload specifies a list of entity IDs to be deleted in a batch operation. This request requires a POST to the `/identity/entity/batch-delete` endpoint. Dependencies include having a list of valid and existing entity IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\"entity_ids\": [\"02fe5a88-912b-6794-62ed-db873ef86a95\", \"3bf81bc9-44df-8138-57f9-724a9ae36d04\", \"627fba68-98c9-c012-71ba-bfb349585ce1\", \"6c4c805b-b384-3d0e-4d51-44d349887b96\", \"70a72feb-35d1-c775-0813-8efaa8b4b9b5\", \"f1092a67-ce34-48fd-161d-c13a367bc1cd\", \"faedd89a-0d82-c197-c8f9-93a3e6cf0cd0\"]}\n```\n\n----------------------------------------\n\nTITLE: Export Decoded Tokenization State - Request Payload\nDESCRIPTION: JSON payload for exporting decoded tokenization state with pagination parameters including limit and continuation token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"limit\": 3,\n  \"continuation\": \"2F1nUpUKMZUBnwQ77qByt1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Auth Method with JSON Payload\nDESCRIPTION: JSON payload for configuring the GitHub auth method with an organization parameter. This is sent to the /auth/github/config endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"organization\": \"acme-org\"\n}\n```\n\n----------------------------------------\n\nTITLE: SSH CA Public Key API Response in Vault\nDESCRIPTION: Sample response from retrieving the SSH CA public key, containing the public key data. The response includes the actual public key in the data field that can be used for verification purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"public_key\": \"ssh-rsa AAAAHHNzaC1y...\\n\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Alternative Login Method\nDESCRIPTION: Command to login using AliCloud credentials directly with the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/alicloud.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=alicloud access_key=... secret_key=... security_token=... region=...\n```\n\n----------------------------------------\n\nTITLE: Rotating GCP Root Credentials\nDESCRIPTION: cURL command to trigger rotation of GCP service account credentials used by Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/auth/gcp/config/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: Shell command to enable the database secrets engine in Vault at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/snowflake.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable database\n```\n\n----------------------------------------\n\nTITLE: Sending Configuration Request to Redis ElastiCache - Shell\nDESCRIPTION: Illustrates using a shell session to send a POST request via curl to configure a Redis ElastiCache database connection. The request includes the Vault token in the header and a JSON payload from `payload.json`, demonstrating how to interface with the Vault API at the specified endpoint. This is critical for establishing and testing the connection configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/rediselasticache.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/my-redis-cluster\n```\n\n----------------------------------------\n\nTITLE: Allow Override of gRPC Connect Timeout via Environment Variable\nDESCRIPTION: This note explains the introduction of an environment variable, VAULT_GRPC_MIN_CONNECT_TIMEOUT, to allow overriding the default gRPC connect timeout setting in Hashicorp Vault. It is designed as a fallback option for users who may encounter replication issues. As such, it does not require a specific configuration setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19676.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore: Allow overriding gRPC connect timeout via VAULT_GRPC_MIN_CONNECT_TIMEOUT. This is an env var rather than a config setting because we don't expect this to ever be needed.  It's being added as a last-ditch\\noption in case all else fails for some replication issues we may not have fully reproduced.\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for DR Token Generation Initiation\nDESCRIPTION: JSON response showing the initial status of a DR operation token generation attempt, including OTP details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"progress\": 1,\n  \"required\": 3,\n  \"encoded_token\": \"\",\n  \"otp\": \"2vPFYG8gUSW9npwzyvxXMug0\",\n  \"otp_length\": 24,\n  \"complete\": false\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request for Rate Limit Configuration\nDESCRIPTION: Shell command to retrieve current rate limit quota configuration using curl. Requires authentication via X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/quotas-config.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request GET \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/quotas/config\n```\n\n----------------------------------------\n\nTITLE: DELETE Deny Listed Role Tag using Vault API with curl\nDESCRIPTION: This snippet shows how to delete a deny-listed role tag using the Vault API. It sends a DELETE request to the `/auth/aws/roletag-denylist/:role_tag` endpoint, requiring a Vault token. The `role_tag` parameter, identifying the tag to be removed, is mandatory and can be either the tag itself or its base64 encoded representation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_45\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/aws/roletag-denylist/djE6MDlWcDBxR3V5Qjg9OmE9YW1pLWZjZTNjNjk2OnA9ZGVmYXVsdCxwcm9kOmQ9ZmFsc2U6dD0zMDBoMG0wczp1UExLQ1F4cXNlZlJocnAxcW1WYTF3c1FWVVhYSkc4VVpQLwo=\n```\n\n----------------------------------------\n\nTITLE: Generating OTP Code for Root Token in Vault\nDESCRIPTION: Command to generate a one-time-password code that will be used for the final root token generation process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/generate-root.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator generate-root -generate-otp\n```\n\n----------------------------------------\n\nTITLE: Configure User Attribute for LDAP Auth in Vault\nDESCRIPTION: This configuration snippet adjusts the entity alias for LDAP auth via the `userattr`. It helps maintain the expected user token policies in systems upgraded to Vault 1.16.x. Ensure LDAP is correctly configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.16.x.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nuserattr=\"userprincipalname\"\n```\n\n----------------------------------------\n\nTITLE: Reading Destination - Shell Request\nDESCRIPTION: cURL command to retrieve information about a specific destination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm/my-store-1\n```\n\n----------------------------------------\n\nTITLE: Adding Vault Agent Authentication Metric\nDESCRIPTION: This code snippet describes the addition of a new metric, `vault.agent.authenticated`, to the Vault Agent. This metric tracks whether the agent has a valid token (1) or not (0). This allows operators to easily monitor the authentication status of the agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26570.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"agent: Add metric (vault.agent.authenticated) that is set to 1 when vault agent has a valid token and zero if it does not.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Roleset with Bindings File\nDESCRIPTION: Command to create a roleset using bindings defined in an external HCL file\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write gcp/roleset/my-roleset\n    bindings=@mybindings.hcl\n    ...\n```\n\n----------------------------------------\n\nTITLE: Documenting Consul Template Upgrade in Release Notes\nDESCRIPTION: Release note markup indicating an improvement to Vault agent's consul-template version, adding support for sprig template functions and enhancing the writeTo function\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15092.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nagent: Upgrade hashicorp/consul-template version for sprig template functions and improved writeTo function\n```\n\n----------------------------------------\n\nTITLE: Reading Role - Shell Request\nDESCRIPTION: cURL command to retrieve a specific role's configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/oci/role/devrole\n```\n\n----------------------------------------\n\nTITLE: Listing Existing Roles - HTTP API - Shell\nDESCRIPTION: This snippet shows how to list all existing roles in the backend by sending a LIST request to the `/terraform/role` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/terraform/role\n```\n\n----------------------------------------\n\nTITLE: Listing JWT Roles\nDESCRIPTION: cURL command to list all registered JWT roles\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/auth/jwt/role\n```\n\n----------------------------------------\n\nTITLE: Registering a User with RADIUS Sample cURL Request\nDESCRIPTION: This cURL command demonstrates how to register a new RADIUS user by sending a POST request with policy assignments to the appropriate endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/radius/users/test-user\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Payload for Obtaining Vault Token - JSON\nDESCRIPTION: This JSON snippet constitutes the payload needed to obtain a Vault token, including the client verifier and token poll ID that were retrieved during the initial authentication process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"client_verifier\": \"59634224-5869-6002-e0b1-35370b8f6b82\",\n  \"token_poll_id\": \"ee442348-159b-df10-4c59-63050069df4d\"\n}\n```\n\n----------------------------------------\n\nTITLE: MySQL Grant Statement with Wildcards\nDESCRIPTION: This SQL statement demonstrates using wildcards in MySQL grant statements for broader database access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nCREATE USER '{{name}}'@'%' IDENTIFIED BY '{{password}}'; GRANT SELECT ON `fooapp\\_%`.* TO '{{name}}'@'%';\n```\n\n----------------------------------------\n\nTITLE: Generating HANA Database Credentials\nDESCRIPTION: Command to generate new database credentials by reading from the /creds endpoint with the configured role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/hanadb.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault read database/creds/my-role\nKey                Value\n---                -----\nlease_id           database/creds/my-role/2f6a614c-4aa2-7b19-24b9-ad944a8d4de6\nlease_duration     1h\nlease_renewable    true\npassword           sU4zWnITaABEP-Zwy4sF\nusername           v_vaultuser_my_role_jQbCLE6P2VtgsqPBXK0m_1602541873\n```\n\n----------------------------------------\n\nTITLE: Create/Update EGP Policy Payload\nDESCRIPTION: JSON payload for creating or updating an EGP policy\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policy\": \"rule main = {...\",\n  \"paths\": [\"*\", \"secret/*\", \"transit/keys/*\"],\n  \"enforcement_level\": \"soft-mandatory\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading OIDC Client Credentials\nDESCRIPTION: Command to retrieve client application credentials and configuration including client_id and client_secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/oidc-provider.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read identity/oidc/client/my-webapp\n```\n\n----------------------------------------\n\nTITLE: Plugin API Update for Context\nDESCRIPTION: The Plugin API has been updated to use golang's `context.Context` package. This involves modifying function signatures to accept a context object as the first parameter. Existing plugins need to be updated with the latest Vault code and adapt their function signatures to use context and the new gRPC transport.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.10.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nN/A\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection via CLI\nDESCRIPTION: This snippet provides a Vault CLI command example for configuring a RabbitMQ connection. It requires connection URI, username, password, and optional policy parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write rabbitmq/config/connection \\\n    connection_uri=\"http://localhost:8080\" \\\n    username=\"user\" \\\n    password=\"password\" \\\n    password_policy=\"rabbitmq_policy\"\n```\n\n----------------------------------------\n\nTITLE: Downloading and Extracting VSO Release for Kustomize\nDESCRIPTION: Downloads and extracts the latest Vault Secrets Operator release for installation using Kustomize.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ wget -q https://github.com/hashicorp/vault-secrets-operator/archive/refs/tags/v0.10.0.tar.gz\n$ tar -zxf v0.10.0.tar.gz\n$ cd vault-secrets-operator-0.10.0/\n```\n\n----------------------------------------\n\nTITLE: Managing SSH Role with Default User\nDESCRIPTION: Set the default user for an SSH role in Vault to mitigate OpenSSH user principal issues. This ensures consistent authentication for specific user roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh/roles/my-role -<<\"EOH\"\n{\n  \"default_user\": \"YOUR_USER\",\n  // ...\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Listing OIDC Assignments\nDESCRIPTION: This API endpoint lists all configured OIDC assignments. The request uses a LIST HTTP method and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/oidc/assignment\n```\n\n----------------------------------------\n\nTITLE: AliCloud Credentials Response for Policy-Based Roles\nDESCRIPTION: Sample response when generating credentials for a policy-based role, including access_key and secret_key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_key\": \"0wNEpMMlzy7szvai\",\n  \"secret_key\": \"PupkTg8jdmau1cXxYacgE736PJj4cA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Basic Plugin Information in Vault\nDESCRIPTION: Examples showing basic plugin listing functionality in Vault. Shows both a full list of plugins and filtering by database type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin list\nName                                 Type        Version\n----                                 ----        -------\nalicloud                             auth        v0.13.0+builtin\n# ...\n\n$ vault plugin list database\nName                                 Version\n----                                 -------\ncassandra-database-plugin            v1.13.0+builtin.vault\n# ...\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Self Token Renewal\nDESCRIPTION: This snippet illustrates how to renew a token for the user making the request by sending a POST request with an optional increment duration to the Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/renew-self\n```\n\n----------------------------------------\n\nTITLE: Signing Certificate Response in JSON\nDESCRIPTION: Sample JSON response from the certificate signing API, showing the signed certificate, issuing CA, and certificate chain.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"expiration\": \"1654105687\",\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\",\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\"\n    ],\n    \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:52\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Userpass via API in Vault\nDESCRIPTION: This snippet shows how to authenticate with Vault using the userpass method via the HTTP API. It sends a POST request to the login endpoint with the password in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/userpass.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data '{\"password\": \"foo\"}' \\\n    http://127.0.0.1:8200/v1/auth/userpass/login/mitchellh\n```\n\n----------------------------------------\n\nTITLE: Create/Update Group by Name - Vault Identity API (JSON Response)\nDESCRIPTION: This JSON response shows the data returned after successfully creating or updating a group by its name in Vault's Identity store. The response includes request metadata, lease information (if applicable), and the ID and name of the group.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"b98b4a3d-a9f1-e151-11e1-ad91cfb08351\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"id\": \"5a3a04a0-0c3a-a4c3-74e8-26b1adbeaece\",\n    \"name\": \"testgroupname\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Autopilot Configuration Response\nDESCRIPTION: JSON response showing the current autopilot configuration settings including cleanup policies, thresholds and server stabilization parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautopilot.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cleanup_dead_servers\": false,\n  \"dead_server_last_contact_threshold\": \"24h0m0s\",\n  \"last_contact_threshold\": \"10s\",\n  \"max_trailing_logs\": 1000,\n  \"min_quorum\": 0,\n  \"server_stabilization_time\": \"10s\",\n  \"disable_upgrade_migration\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Interactive CLI for MFA Login\nDESCRIPTION: This snippet provides a release note detailing an improvement to the CLI for HashiCorp Vault, specifically focusing on the interactive elements of MFA login. The change enhances user experience during authentication by allowing more intuitive interactions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14131.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\ncli: interactive CLI for login mfa\"\n```\n\n----------------------------------------\n\nTITLE: Using Vault PKI Secret Engine with Kubernetes\nDESCRIPTION: This example shows how to use the pkiCert and writeToFile functions from consul-template to create certificate and key files from Vault's PKI Secrets Engine. It generates a certificate for test.example.com with a 2-hour TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: web-deployment\n  labels:\n    app: web\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: web\n  template:\n    metadata:\n      labels:\n        app: web\n      annotations:\n        vault.hashicorp.com/agent-inject: 'true'\n        vault.hashicorp.com/role: 'web'\n        vault.hashicorp.com/agent-inject-secret-certs: 'pki/issue/cert'\n        vault.hashicorp.com/agent-inject-template-certs: |\n          {{- with pkiCert \"pki/issue/cert\" \"common_name=test.example.com\" \"ttl=2h\" -}}\n          {{ .Cert }}{{ .CA }}{{ .Key }}\n          {{ .Key | writeToFile \"/vault/secrets/cert.key\" \"vault\" \"vault\" \"0644\" }}\n          {{ .CA | writeToFile \"/vault/secrets/cert.pem\" \"vault\" \"vault\" \"0644\" }}\n          {{ .Cert | writeToFile \"/vault/secrets/cert.pem\" \"vault\" \"vault\" \"0644\" \"append\" }}\n          {{- end -}}\n    spec:\n      serviceAccountName: web\n      containers:\n        - name: web\n          image: nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation Duration in Vault\nDESCRIPTION: This configuration option sets the duration after which Vault log files must rotate. It accepts a string value in the format '<number>[s|m|h|d]', where s, m, h, and d represent seconds, minutes, hours, and days respectively. The default value is 24 hours.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/shared/flags/log-rotate-duration.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-log-rotate-duration \"24h\"\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n-log-rotate-duration \"2h\"\n```\n\n----------------------------------------\n\nTITLE: Generating Terraform Policy Resources from Existing Vault Policies\nDESCRIPTION: Provides a bash script to automatically generate Terraform resource definitions for existing Vault policies. This script reads all non-root policies and creates corresponding Terraform resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nfor vpolicy in $(vault policy list | grep -vw root) ; do\n  echo \"resource \\\"vault_policy\\\" \\\"vault_$vpolicy\\\" {\"\n  echo \"  name = \\\"$vpolicy\\\"\"\n  echo \"  policy = <<EOT\"\n  vault policy read $vpolicy\n  echo \"EOT\"\n  echo \"}\"\n  echo \"\"\ndone > vault_policies.tf\n```\n\n----------------------------------------\n\nTITLE: Viewing Rendered Secret Output\nDESCRIPTION: Shows the rendered output of a Vault secret in the container's filesystem.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cat /vault/secrets/foo\npostgres://v-kubernet-pg-app-q0Z7WPfVN:A1a-BUEuQR52oAqPrP1J@postgres:5432/mydb?sslmode=disable\n```\n\n----------------------------------------\n\nTITLE: Register and Deregister Vault Plugins\nDESCRIPTION: This example demonstrates how to register and deregister the 'app-id' plugin using the Vault CLI. It highlights the procedure to handle deprecated plugins which could lead to core shutdown if attempted to be used after deregistration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.12.x.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin register -sha256=c805cf3b69f704dfcd5176ef1c7599f88adbfd7374e9c76da7f24a32a97abfe1 auth app-id\nSuccess! Registered plugin: app-id\n$ vault auth enable -plugin-name=app-id plugin\nSuccess! Enabled app-id auth method at: app-id/\n$ vault auth list -detailed\napp-id/    app-id    auth_app-id_3a8f2e24    system         system     default-service    replicated     false        false                      map[]      n/a                        0018263c-0d64-7a70-fd5c-50e05c5f5dc3    n/a        n/a                      c805cf3b69f704dfcd5176ef1c7599f88adbfd7374e9c76da7f24a32a97abfe1    n/a\n$ vault plugin deregister auth app-id\nSuccess! Deregistered plugin (if it was registered): app-id\n$ vault plugin list -detailed | grep \"app-id\"\napp-id                               auth        v1.12.0+builtin.vault                                 pending removal\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Service Account in Vault\nDESCRIPTION: Commands to check out an available service account, including options for specifying a custom TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f ldap/library/accounting-team/check-out\nKey                     Value\n---                     -----\nlease_id                ldap/library/accounting-team/check-out/EpuS8cX7uEsDzOwW9kkKOyGW\nlease_duration          10h\nlease_renewable         true\npassword                ?@09AZKh03hBORZPJcTDgLfntlHqxLy29tcQjPVThzuwWAx/Twx4a2ZcRQRqrZ1w\nservice_account_name    fizz@example.com\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write ldap/library/accounting-team/check-out ttl=30m\nKey                     Value\n---                     -----\nlease_id                ldap/library/accounting-team/check-out/gMonJ2jB6kYs6d3Vw37WFDCY\nlease_duration          30m\nlease_renewable         true\npassword                ?@09AZerLLuJfEMbRqP+3yfQYDSq6laP48TCJRBJaJu/kDKLsq9WxL9szVAvL/E1\nservice_account_name    buzz@example.com\n```\n\n----------------------------------------\n\nTITLE: Requesting Mount Accessor Cache in Vault\nDESCRIPTION: This request retrieves a list of mount entries in the router's mount accessor cache. It requires a root token or sudo privileges and returns information about mounted backends indexed by their accessor IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/internal/inspect/router/accessor\n```\n\n----------------------------------------\n\nTITLE: SSH OTP Verification Payload in JSON\nDESCRIPTION: Sample JSON payload for verifying an SSH One-Time Password (OTP). The payload contains the OTP to validate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"otp\": \"bad2b3-...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Writing ACL Policy via CLI\nDESCRIPTION: Leverage the `vault policy write` CLI command to input an HCL policy file, assigning a policy name to store the policy within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/setup.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy write <name> <path_to_policy_file>\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy write \"KV-access-policy\" ./kv-policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Requesting Azure Credentials via Vault CLI\nDESCRIPTION: Command-line interface method to retrieve Azure credentials using Vault CLI\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read azure/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Sample Request to Sign - Shell\nDESCRIPTION: This shell command demonstrates how to make a POST request to sign a digest using a specific key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/sign/my-key\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Activating a Feature\nDESCRIPTION: This JSON response shows the result of activating a feature. It returns the updated lists of activated and unactivated features, with 'secrets-sync' now showing in the activated list.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/activation-flags.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request_id\": \"7636e655-e11d-e2aa-8286-bd38c1d9c600\",\n    \"lease_id\": \"\",\n    \"lease_duration\": 0,\n    \"renewable\": false,\n    \"data\": {\n        \"activated\": [\n            \"secrets-sync\"\n        ],\n        \"unactivated\": []\n    },\n    \"warnings\": null,\n    \"mount_type\": \"system\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Example for Listing Managed Keys\nDESCRIPTION: Example JSON response when listing managed keys. The response contains a keys array with the names of the managed keys in the specified namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    \"hsm-key1\",\n    \"hsm-key2\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate Reissuance Process Flow\nDESCRIPTION: This snippet outlines the process of certifying reissuance, highlighting the use of the same key material to generate new certificates. The process involves generating a CSR from the same key material and signing it at multiple times while preserving critical certificate fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/rotation-primitives.mdx#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n          -------------------\n         | generate key pair | ---------------> ...\n          -------------------                   ...\n           |              |                     ...\n --------------           --------------        ...\n| generate CSR |   <->   | generate CSR |       ...\n --------------           --------------        ...\n         |                    |                 ...\n ------------------      ------------------     ...\n| signed by issuer | -> | signed by issuer | -> ...\n ------------------      ------------------     ...\n```\n\n----------------------------------------\n\nTITLE: cURL Request for Creating or Updating an Entity by Name - Shell\nDESCRIPTION: This cURL command sends a POST request to create or update an entity using its name. With appropriate metadata and policies, this request needs a valid Vault token and the endpoint path contains the placeholder for the entity's name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/entity/name/testentityname\n```\n\n----------------------------------------\n\nTITLE: Sealing Vault Using HTTP API - Shell\nDESCRIPTION: Demonstrates how to make a POST request to seal the Vault system using curl. The request requires a valid Vault token with root policy or sudo capability on the path. In HA mode, this operation only works on active nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/seal.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/seal\n```\n\n----------------------------------------\n\nTITLE: Revoking a Lease - Shell\nDESCRIPTION: This command is used to revoke a specific lease in HashiCorp Vault by its lease ID. It confirms the successful revocation of the lease.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault lease revoke database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nSuccess! Revoked lease: database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\n```\n\n----------------------------------------\n\nTITLE: KV Rollback Example\nDESCRIPTION: This example demonstrates how to use the `vault kv rollback` command to restore version 2 of the data at the key 'creds' in a KV version 2 secrets engine mounted at 'secret'. The output shows metadata about the restored version, including its creation time, deletion time, destruction status, and new version number.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/rollback.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv rollback -mount=secret -version=2 creds\nKey              Value\n-- -              -----\ncreated_time     2019-06-06T17:07:19.299831Z\ndeletion_time    n/a\ndestroyed        false\nversion          6\n```\n\n----------------------------------------\n\nTITLE: Creating KV ACL Policy\nDESCRIPTION: Develop an HCL file defining ACL policies for accessing paths in the KV plugin. This example grants permissions to read and patch API keys stored under a specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/setup.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# Grants permission to read and patch the latest version of API keys\npath \"shared/data/dev/square-api/*\" {\n\n  capabilities = [\"read\", \"patch\"]\n}\n\n# Grants permission to read metadata for any version of the API keys\npath \"shared/metadata/dev/square-api/\" {\n\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Static Credentials\nDESCRIPTION: Command to retrieve credentials for a configured static role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ vault read database/static-creds/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Auth Method with Bind Account (Scenario 2)\nDESCRIPTION: This configuration sets up LDAP authentication using a bind account for searching, sAMAccountName for user identification, and resolves group membership via the memberOf attribute of user objects.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/ldap.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/ldap/config \\\n    url=\"ldap://ldap.example.com\" \\\n    userattr=sAMAccountName \\\n    userdn=\"ou=Users,dc=example,dc=com\" \\\n    groupdn=\"ou=Users,dc=example,dc=com\" \\\n    groupfilter=\"(&(objectClass=person)(uid={{.Username}}))\" \\\n    groupattr=\"memberOf\" \\\n    binddn=\"cn=vault,ou=users,dc=example,dc=com\" \\\n    bindpass='My$ecrt3tP4ss' \\\n    certificate=@ldap_ca_cert.pem \\\n    insecure_tls=false \\\n    starttls=true\n...\n```\n\n----------------------------------------\n\nTITLE: Getting Group Policy Application Mode with curl in Vault API\nDESCRIPTION: This snippet demonstrates how to use curl to send a GET request to retrieve the current group policy application mode from Vault. The request requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-group-policy-application.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  --header \"X-Vault-Token: ...\" \\\n    'http://127.0.0.1:8200/v1/sys/config/group-policy-application'\n```\n\n----------------------------------------\n\nTITLE: Reading Issuers Configuration from Vault API - Shell\nDESCRIPTION: This shell command is used to retrieve the configuration of default issuers from the Vault PKI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_92\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/issuers\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Issuers Configuration - JSON\nDESCRIPTION: This JSON response shows the structure of the issuer data returned when querying the PKI issuer configuration, including the default issuer information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_93\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"default\": \"3dc79a5a-7a6c-70e2-1123-94b88557ba12\",\n    \"default_follows_latest_issuer\": \"false\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling MongoDB Atlas Secrets Engine in Vault\nDESCRIPTION: This snippet demonstrates how to enable the MongoDB Atlas secrets engine in Vault, integrating it at a specified path. The command ensures that the secrets engine is active and ready for further configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/mongodbatlas.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable mongodbatlas\nSuccess! Enabled the mongodbatlas secrets engine at: mongodbatlas/\n```\n\n----------------------------------------\n\nTITLE: Disable Secrets Engine Request\nDESCRIPTION: DELETE request to disable a secrets engine at a specified mount path. Requires Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/mounts/my-mount\n```\n\n----------------------------------------\n\nTITLE: Reading Complete GCP Config\nDESCRIPTION: cURL command and response for reading the complete GCP configuration including service account details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/gcp/config\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"client_email\": \"service-account@project-123456.iam.gserviceaccount.com\",\n    \"client_id\": \"123456789101112131415\",\n    \"private_key_id\": \"97fd7ba59a96e1f3830296aedb4f50879e4d5382\",\n    \"project_id\": \"project-123456\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request audit entry structure in JSON\nDESCRIPTION: This snippet defines the structure of a request audit entry in JSON format. It includes fields related to authentication, errors, requests, and timestamps, which are essential for tracking and auditing API calls.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": <auth>,\n  \"error\": \"\",\n  \"forwarded_from\": \"\",\n  \"request\": <request>,\n  \"time\": \"\",\n  \"type\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tuning Max Lease TTL on Auth Mount - Shell Session\nDESCRIPTION: This shell session command demonstrates how to adjust the max lease TTL for an auth mount in Vault, allowing the issuance of tokens with longer expiry durations when necessary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth tune -max-lease-ttl=120d approle\n```\n\n----------------------------------------\n\nTITLE: Creating Service Account Key Roleset\nDESCRIPTION: Command to create a roleset that generates GCP Service Account keys with viewer role binding\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write gcp/roleset/my-key-roleset \\\n    project=\"my-project\" \\\n    secret_type=\"service_account_key\"  \\\n    bindings=-<<EOF\n      resource \"//cloudresourcemanager.googleapis.com/projects/my-project\" {\n        roles = [\"roles/viewer\"]\n      }\n    EOF\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultStaticSecret with Instant Updates (YAML)\nDESCRIPTION: YAML configuration for VaultStaticSecret that enables instant updates through event notifications. Includes specifications for vault authentication, KV mount settings, and sync configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/instant-updates.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  namespace: vso-example\n  name: vault-static-secret-v2\nspec:\n  vaultAuthRef: vault-auth\n  mount: <kv mount>\n  type: kv-v2\n  path: <kv secret path>\n  version: 2\n  refreshAfter: 1h\n  destination:\n    create: true\n    name: static-secret2\n  syncConfig:\n    instantUpdates: true\n```\n\n----------------------------------------\n\nTITLE: Comparing Consul and Integrated Storage Features\nDESCRIPTION: This markdown table summarizes the differences between Consul and Integrated Storage, including system requirements, data snapshot practices, automation features, data inspection methods, and autopilot support.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migration-checklist.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Consideration       | Consul as storage backend                                                  | Vault Integrated Storage                                                                     |\n| ------------------- | -------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| System requirement  | Memory optimized machine                                                   | Storage optimized high IOPS machine                                                          |\n| Data snapshot       | Frequent snapshots                                                         | Normal data backup strategy                                                                  |\n| Snapshot automation | Snapshot agent (**Consul Enterprise only**)                                | Automatic snapshot (**Vault Enterprise v1.6.0 and later**)                                   |\n| Data inspection     | [Online, use `consul kv` command](/vault/tutorials/monitoring/inspecting-data-consul) | [Offline, requires using recovery mode](/vault/tutorials/monitoring/inspect-data-integrated-storage) |\n| Autopilot           | Supported                                                                  | Supported (**Vault 1.7.0 and later**)                                  |\n```\n\n----------------------------------------\n\nTITLE: Decrypting Vault Unseal Key with GnuPG\nDESCRIPTION: This command decrypts a Vault unseal key that was encrypted with a GnuPG PGP key. It uses base64 decoding and GnuPG for decryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ echo \"wcBMA37...\" | base64 --decode | gpg -dq\n```\n\n----------------------------------------\n\nTITLE: Delete Backed-up Unseal Keys\nDESCRIPTION: Removes previously backed-up unseal keys from Vault's storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey -backup-delete\n```\n\n----------------------------------------\n\nTITLE: Key Information Response in Transit Secrets Engine\nDESCRIPTION: Sample JSON response from reading a key's information in Vault's Transit secrets engine. Contains metadata including key type, capabilities, version information, and various configuration settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"aes256-gcm96\",\n    \"deletion_allowed\": false,\n    \"derived\": false,\n    \"exportable\": false,\n    \"allow_plaintext_backup\": false,\n    \"keys\": {\n      \"1\": 1442851412\n    },\n    \"min_decryption_version\": 1,\n    \"min_encryption_version\": 0,\n    \"name\": \"foo\",\n    \"supports_encryption\": true,\n    \"supports_decryption\": true,\n    \"supports_derivation\": true,\n    \"supports_signing\": false,\n    \"imported\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Encryption Operations\nDESCRIPTION: Command to configure the maximum number of encryption operations allowed per key before rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rotate.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/rotate/config max_operations=123456789\nSuccess! Data written to: sys/rotate/config\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Updating Key\nDESCRIPTION: This JSON payload shows an example for updating a key's name in Vault. It sets the `key_name` to \"key-root-x1\". This payload would be used with the update key Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_78\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_name\": \"key-root-x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating STS Session Token Credentials (Shell)\nDESCRIPTION: This command generates a new set of STS session token credentials for the temp_user role with a TTL of 60 minutes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read aws/sts/temp_user ttl=60m\n```\n\n----------------------------------------\n\nTITLE: Deleting Google Cloud KMS Configuration - HCL\nDESCRIPTION: This HCL policy defines the capabilities for deleting the configuration of the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/config\" {\n  capabilities = [\"delete\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Kubernetes Auth Role API Request\nDESCRIPTION: Shell command to read a specific role configuration from the Kubernetes auth method using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Sync System Parameters - JSON Payload\nDESCRIPTION: JSON payload for configuring global sync system parameters including disabled state and queue capacity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"disabled\": \"true\",\n    \"queue_capacity\": 1000000\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Default Policy in Vault\nDESCRIPTION: Command to view all permissions granted by the default policy in a Vault installation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read sys/policy/default\n```\n\n----------------------------------------\n\nTITLE: Reading KV Secrets Using Curl\nDESCRIPTION: Example of reading secrets using curl with Vault's HTTP API\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/read.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --request GET --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n    $VAULT_ADDR/v1/secret/data/customers\n```\n\n----------------------------------------\n\nTITLE: Adding Automated Root Rotation Feature to GCP Auth Plugin\nDESCRIPTION: This snippet describes the addition of Automated Root Rotation capabilities to the GCP Auth plugin. This feature allows for the automation of root credential rotations based on user-defined schedules and is available only for enterprise users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29591.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"release-note:feature\\n **Automated Root Rotation**: Adds Automated Root Rotation capabilities to the GCP Auth plugin.\\n This allows plugin users to automate their root credential rotations based on configurable\\n schedules/periods via the Rotation Manager. Note: Enterprise only.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Creating GCP Auth Role in Vault - Shell Command\nDESCRIPTION: Shell command to create a GCP authentication role in Vault with IAM type, specified policies, JWT expiration, and bound service accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/gcp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/gcp/role/<VAULT_GCP_ROLE> \\\n    type=\"iam\" \\\n    policies=\"default\" \\\n    max_jwt_exp=3600 \\\n    bound_service_accounts=\"<SERVICE_ACCOUNT>@<GCP_PROJECT>.iam.gserviceaccount.com\"\n```\n\n----------------------------------------\n\nTITLE: Vault Plugin Command Usage\nDESCRIPTION: Details the complete usage syntax for the vault plugin command including all available subcommands and their purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault plugin <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    deregister       Deregister an existing plugin in the catalog\n    info             Read information about a plugin in the catalog\n    list             Lists available plugins\n    register         Registers a new plugin in the catalog\n    reload           Reload mounted plugin backend\n    reload-status    Get the status of an active or recently completed global plugin reload\n```\n\n----------------------------------------\n\nTITLE: Creating SAML Auth Configuration in JSON\nDESCRIPTION: This JSON payload configures the SAML auth method with identity provider details, entity ID, and ACS URLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"acs_urls\": \"https://my.vault/v1/auth/saml/callback\",\n  \"default_role\": \"admin\",\n  \"entity_id\": \"https://my.vault/v1/auth/saml\",\n  \"idp_metadata_url\": \"https://company.okta.com/app/abc123eb9xnIfzlaf697/sso/saml/metadata\"\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Backend Across Namespaces in JSON\nDESCRIPTION: Sample payload for moving a secret backend across namespaces using the /sys/remount endpoint. Specifies the 'from' and 'to' paths for the remount operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/remount.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": \"ns1/ns2/secret\",\n  \"to\": \"ns1/ns3/new-secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving KMIP Credential Information in JSON\nDESCRIPTION: Sample JSON response when retrieving KMIP credential information, including CA chain, certificate, and serial number.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIICNzCCAZigAwIBAgIUKOGtsdXdMjjGni52EsaMQ7ozhCEwCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MB4XDTE5MDYyNDE4NTgyMVoX\\nDTI5MDYyMTE4NTg1MVowKjEoMCYGA1UEAxMfdmF1bHQta21pcC1kZWZhdWx0LWlu\\ndGVybWVkaWF0ZTCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEATHNhNvU0GMtzl6A\\nPbNaCoF0jV3z09RCfLKEqMl/MXv/AlPcfiqCQeOWBwWHv76epPWkCCo+IlNq8ldQ\\neVe52p6mABMvRjE6BZ/eLea27zImI6waK7nZ2hqx0npb8ivdbwmrgp0NQnv0sJ+o\\nPeLa2vh9wDK1NJebmOv0yRAbCw2CH7Rbo2YwZDAOBgNVHQ8BAf8EBAMCAQYwEgYD\\nVR0TAQH/BAgwBgEB/wIBCTAdBgNVHQ4EFgQU2naFRym+xfFvZm2TNRBXNf3MJSsw\\nHwYDVR0jBBgwFoAUFrA/R807R0BnIt395KzaXdP4n00wCgYIKoZIzj0EAwIDgYwA\\nMIGIAkIAkb8EdHCXgPpQsKYedMz4X2j5CFSVdZTWsPVw1XuSXIsIsc6018V4z9Kp\\nkPacsHZTBR636y2toqRPDG4y9MLqFFkCQgCV1jEkiNhhKc+ZWuDjerdqNvLnCbe+\\n7t4fiG9zQgWwh6IxL11cNyGVz9gS9af32DtuYf0xwFLOwLgn1RadC9Pd7Q==\\n-----END CERTIFICATE-----\",\n      \"-----BEGIN CERTIFICATE-----\\nMIICKTCCAYugAwIBAgIUOcs4pXlp+UgGiUKfKlcxIE/woPEwCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MB4XDTE5MDYyNDE4NTgyMVoX\\nDTI5MDYyMTE4NTg1MVowHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MIGb\\nMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAcst7uNwu77WtLDkbz4ILYDiQ3BgS++qU\\nOoNKcKyvNe8YX6PtrdQWPTaxT4MZNHZvTv+BAQTQqGLKrstpkjXPh+sBn7V4trkT\\nMCtxUjIGneURUXS4IC/KJEA60P7ep7MrGnJfG/N4m+Q/a6BuxKhdEavXtepniCMz\\npHw4DCpW/9m2t16jZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/\\nAgEKMB0GA1UdDgQWBBQWsD9HzTtHQGci3f3krNpd0/ifTTAfBgNVHSMEGDAWgBQW\\nsD9HzTtHQGci3f3krNpd0/ifTTAKBggqhkjOPQQDAgOBiwAwgYcCQR7iNoA4nBV3\\ndSn8nfafklFvHZxoKR1j3nn+56z4JHD6TNr//GNqQiqnM3P//Tce+E4KzEax4xRg\\nhaLURgPLNBjOAkIAqW+1/+v9D0vXOU1WPc+/oFvhSjYnr5qqcTL7by5fsmMXzAIe\\nLODXiODxdppXXnMZPCPZh6MGgUwEGYeCnaXopWc=\\n-----END CERTIFICATE-----\"\n    ],\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIICOzCCAZygAwIBAgIUeOkn0HAdoh31nGkVKdafpCNuhFEwCgYIKoZIzj0EAwIw\\nKjEoMCYGA1UEAxMfdmF1bHQta21pcC1kZWZhdWx0LWludGVybWVkaWF0ZTAeFw0x\\nOTA2MjQxOTAwMDlaFw0xOTA2MjUxOTAwMzlaMCAxDjAMBgNVBAsTBWlsVjYzMQ4w\\nDAYDVQQDEwUyRnlWTjCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAA0rIy0h2DL3\\nzmTXVj2v22Kz0N1EUUATlRgBj1XBsBA1Pdd7CSZoefmh/u6Z8TjtRX9Z1aj9Bb/d\\nJxS3zB4mguULAF4k7bLH1gKXMVC6NYjjk3mfxH5jG4QY8S8n6uyqzNgI5KRJ2Hyj\\nm8549Nvq3rvs8yOVXPSOGzkJ5KdUmSvXicMQo2cwZTAOBgNVHQ8BAf8EBAMCA6gw\\nEwYDVR0lBAwwCgYIKwYBBQUHAwIwHQYDVR0OBBYEFEuzruLILCil5Fp32ZjE4AhD\\nU268MB8GA1UdIwQYMBaAFNp2hUcpvsXxb2ZtkzUQVzX9zCUrMAoGCCqGSM49BAMC\\nA4GMADCBiAJCAeeuaIsgO9ro7opzZ9y9hSHkKB5WA5Qc7ePoSiKHNNbVvIJMkjRQ\\nC9YtUMQNnQ8wE6D/9xvR+9OBIi7t16iHGPGbAkIA6WIG6HHRNUXnHPIiW8iy/04O\\nfVqZgJHJEeyGQbwdaehs+Z5xOz6TA4Z3uZOAMnPcb+KDwchnQ8CJnmT/KnnT5D8=\\n-----END CERTIFICATE-----\",\n    \"serial_number\": \"728181095563584845125173905844944137943705466376\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Impersonated Account (cURL)\nDESCRIPTION: cURL command to create a new impersonated account in the GCP secrets engine by sending a POST request with configuration payload to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_24\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcp/impersonated-account/my-token-impersonate\n```\n\n----------------------------------------\n\nTITLE: Registering and Deregistering a Plugin in Vault - Shell\nDESCRIPTION: This shell snippet demonstrates how to register and deregister an auth plugin in HashiCorp Vault. The plugin registration is done using the SHA256 hash, and the plugin can subsequently be enabled or deregistered. Successful registration and deregistration commands are logged for verification. Ensure that you have the correct token and permissions for plugin operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.13.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register -sha256=c805cf3b69f704dfcd5176ef1c7599f88adbfd7374e9c76da7f24a32a97abfe1 auth app-id\nSuccess! Registered plugin: app-id\n$ vault auth enable -plugin-name=app-id plugin\nSuccess! Enabled app-id auth method at: app-id/\n$ vault auth list -detailed | grep \"app-id\"\napp-id/    app-id    auth_app-id_3a8f2e24    system         system     default-service    replicated     false        false                      map[]      n/a                        0018263c-0d64-7a70-fd5c-50e05c5f5dc3    n/a        n/a                      c805cf3b69f704dfcd5176ef1c7599f88adbfd7374e9c76da7f24a32a97abfe1    n/a\n$ vault plugin deregister auth app-id\nSuccess! Deregistered plugin (if it was registered): app-id\n$ vault plugin list -detailed | grep \"app-id\"\napp-id                               auth        v1.13.0+builtin.vault                                 removed\n$ curl --header \"X-Vault-Token: $VAULT_TOKEN\" --request POST http://127.0.0.2:8200/v1/sys/seal\n$ vault operator unseal <key1>\n...\n$ vault operator unseal <key2>\n...\n$ vault operator unseal <key3>\n...\n$ grep \"app-id\" /path/to/vault.log\n[ERROR] core: skipping deprecated auth entry: name=app-id path=app-id/ error=\"mount entry associated with removed builtin\"\n[ERROR] core: skipping initialization for nil auth backend: path=app-id/ type=app-id version=\"v1.13.0+builtin.vault\"\n```\n\n----------------------------------------\n\nTITLE: Initialize Rekey for Auto Unseal Vault Cluster\nDESCRIPTION: Initializes a rekey operation for a Vault cluster using Auto Unseal, targeting recovery keys with 15 shares and 9 threshold.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey \\\n    -target=recovery \\\n    -init \\\n    -key-shares=15 \\\n    -key-threshold=9\n```\n\n----------------------------------------\n\nTITLE: Sending Token Transformation Request Using cURL (Shell Session)\nDESCRIPTION: This shell command demonstrates how to send a POST request using cURL to the HashiCorp Vault API to decode a transformation request, including the needed header for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_58\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/decode/example-role\n```\n\n----------------------------------------\n\nTITLE: Searching for Available Vault Helm Chart Versions\nDESCRIPTION: Command to search for available Vault Helm chart versions in the configured Helm repository. This helps identify which version to target during an upgrade.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ helm search repo hashicorp/vault\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\nhashicorp/vault\t0.30.0       \t1.19.0     \tOfficial HashiCorp Vault Chart\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Directories on Linux\nDESCRIPTION: This snippet creates the data and configuration directories for Vault on a Linux system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo mkdir -p ${VAULT_DATA}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo mkdir -p ${VAULT_CONFIG}\n```\n\n----------------------------------------\n\nTITLE: Reading Plugin Information in Vault\nDESCRIPTION: This snippet shows how to retrieve configuration details for a specific plugin by sending a GET request. The example retrieves information about 'example-plugin' of type 'secret' with a specific version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-catalog.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/plugins/catalog/secret/example-plugin?version=v1.0.0\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"args\": [],\n    \"builtin\": false,\n    \"runtime\": \"example-runtime\",\n    \"oci_image\": \"example-secret-plugin-oci-image\",\n    \"command\": \"/example-secret-plugin\",\n    \"name\": \"example-plugin\",\n    \"sha256\": \"0TC5oPv93vlwnY/5Ll5gU8zSRreGMvwDuFSEVwJpYek=\",\n    \"version\": \"v1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Read Certificate Metadata Response\nDESCRIPTION: JSON response containing certificate metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_47\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"issuer_id\": \"e27bf456-51e1-d937-0001-4a609184fd9b\",\n    \"expiration\": \"2022-11-02T14:41:47.327515Z\",\n    \"cert_metadata\": \"dXNlci1wcm92aWRlZC1tZXRhZGF0YQ==\",\n    \"role\": \"role-name\",\n    \"serial_number\": \"67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Key Vault KMS Provider in Vault\nDESCRIPTION: This command configures a KMS provider resource for Azure Key Vault. It specifies the provider type, key vault name, and necessary Azure credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write keymgmt/kms/example-kms \\\n    provider=\"azurekeyvault\" \\\n    key_collection=\"keyvault-name\" \\\n    credentials=client_id=\"a0454cd1-e28e-405e-bc50-7477fa8a00b7\" \\\n    credentials=client_secret=\"eR%HizuCVEpAKgeaUEx\" \\\n    credentials=tenant_id=\"cd4bf224-d114-4f96-9bbc-b8f45751c43f\"\n```\n\n----------------------------------------\n\nTITLE: Enabling KMIP Secrets Engine and Listener in Vault\nDESCRIPTION: Initialize and configure the KMIP Secrets Engine in Vault required for managing cryptographic keys for Oracle TDE. Ensure Vault server has the correct access configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvault secrets enable kmip\nvault write kmip/config listen_addrs=0.0.0.0:5696\n```\n\n----------------------------------------\n\nTITLE: Create/Update RGP Policy Request\nDESCRIPTION: Creates or updates an RGP policy using POST method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/policies/rgp/webapp\n```\n\n----------------------------------------\n\nTITLE: Reading PingID MFA method configuration using Vault HTTP API\nDESCRIPTION: This snippet provides an example of executing a GET request to retrieve PingID MFA method details using its unique identifier. Ensure you have valid Vault access to use this endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/pingid/f8381105-67f0-4105-8662-4b07ae5c1233\n```\n\n----------------------------------------\n\nTITLE: Defining Vault Policy for Runner in HCL\nDESCRIPTION: This HCL snippet defines a Vault policy for a runner, granting read-only access to specific secrets within a key-value store path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/approle-pattern.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\npath \"kv/my-role_secrets/*\" {\n  capabilities = [ \"read\" ]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a local Vault policy file using policy fmt command\nDESCRIPTION: This example demonstrates how to format a local policy file named \"my-policy.hcl\" using Vault's policy fmt command. The command will reformat the file contents according to Vault policy specifications and overwrite the original file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/fmt.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy fmt my-policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Correcting SAML Role Configuration in Vault\nDESCRIPTION: This shell command demonstrates how to update the SAML role in Vault to correct the BoundSubjects configuration. It uses the 'vault write' command to modify the role settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/boundsubjects.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/<SAML_PLUGIN_PATH>/role/<ADFS_ROLE> \\\nbound_subjects=\"<CORRECTED_DOMAIN_LIST>\"\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Secret in Cubbyhole (Shell)\nDESCRIPTION: This shell command shows how to create or update a secret in the Cubbyhole using a POST request. It requires a Vault token and sends the secret data in the request payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cubbyhole.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/cubbyhole/my-secret\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device - Custom Path\nDESCRIPTION: Command to enable multiple instances of the file audit device using a custom path designation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/file.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable -path=\"vault_audit_1\" file file_path=/home/user/vault_audit.log\n```\n\n----------------------------------------\n\nTITLE: Updating Client Count Configuration in JSON (Vault)\nDESCRIPTION: This JSON snippet demonstrates a sample payload for updating the client count configuration in Vault. It enables client counting and sets the retention period to 54 months.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": \"enable\",\n  \"retention_months\": 54\n}\n```\n\n----------------------------------------\n\nTITLE: Sample SSH CA Configuration Response in JSON\nDESCRIPTION: Example JSON response when configuring the SSH CA with Vault-generated keys. The response includes the generated public key that can be added to SSH configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"public_key\": \"ssh-rsa AAAAHHNzaC1y...\\n\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for GET Role Tag Deny List Info (JSON)\nDESCRIPTION: This JSON response shows the structure of the data returned when querying a deny-listed role tag. It includes `expiration_time` and `creation_time` of the entry.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"expiration_time\": \"2016-04-25T10:35:20.127058773-04:00\",\n    \"creation_time\": \"2016-04-12T22:35:01.178348124-04:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Secret to KV Store Using vault kv put Command\nDESCRIPTION: Example showing how to store an API token in the KV secrets engine using the vault kv put command. The output displays the secret path and metadata for KV v2.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put secret/web-app api-token=\"WEOIRJ13895130WENJWEFN\"\n\n=== Secret Path ===\nsecret/data/web-app\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2024-07-02T00:34:58.074825Z\ncustom_metadata    <nil>\ndeletion_time      n/a\ndestroyed          false\nversion            1\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Impersonated Account Payload (JSON)\nDESCRIPTION: Sample JSON payload for creating or updating an impersonated account in the GCP secrets engine, specifying the service account to impersonate, token scopes, and TTL for generated tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service_account_email\": \"projectOwner@my-project.iam.gserviceaccount.com\",\n  \"token_scopes\": [\n    \"https://www.googleapis.com/auth/cloud-platform\",\n    \"https://www.googleapis.com/auth/bigquery\"\n  ],\n  \"ttl\": \"2h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Random Bytes Request Payload in JSON\nDESCRIPTION: Sample JSON payload for requesting random bytes with hex format output.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/tools.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"format\": \"hex\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Asymmetric Key\nDESCRIPTION: SQL command to create an asymmetric key using the transit key\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nCREATE ASYMMETRIC KEY TransitVaultAsymmetric\nFROM PROVIDER TransitVaultProvider\nWITH\nCREATION_DISPOSITION = OPEN_EXISTING,\nPROVIDER_KEY_NAME = 'ekm-encryption-key';\n```\n\n----------------------------------------\n\nTITLE: Reading Lease Count Quota via CLI in Vault\nDESCRIPTION: This command uses the vault read command to display the details of a specific lease count quota.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/quotas/lease-count/<QUOTA_NAME>\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Certificate Configuration Request\nDESCRIPTION: Sample curl command for registering an AWS public certificate with Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/config/certificate/test-cert\n```\n\n----------------------------------------\n\nTITLE: Read Snapshot Configuration Request\nDESCRIPTION: cURL command to read a specific snapshot configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot-auto/config/config1\n```\n\n----------------------------------------\n\nTITLE: Making a JWT/OIDC Config Request with cURL\nDESCRIPTION: Shell command using cURL to send the configuration payload to Vault's JWT authentication endpoint. This creates or updates the global configuration for the JWT/OIDC auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/jwt/config\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Vault MSSQL Testing\nDESCRIPTION: Export commands for the environment variables required to run Vault MSSQL tests. VAULT_ACC=1 enables acceptance tests and MSSQL_URL provides the percent-encoded connection string to the MSSQL server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/plugins/database/mssql/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_ACC=1\nexport MSSQL_URL=\"sqlserver://SA:%3CYourStrong%21Passw0rd%3E@localhost:1433\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Message\nDESCRIPTION: Removes a specific custom message from Vault using its unique ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-custom-messages.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/ui/custom-messages/01234567-89ab-cdef-0123-456789abcdef\n```\n\n----------------------------------------\n\nTITLE: Adding Database Secrets Engine UI Support for MongoDB in Vault\nDESCRIPTION: This release note indicates the addition of UI support for the database secrets engine in Vault, with initial support limited to MongoDB. This feature enhances the user interface for managing database secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10655.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nui: Database secrets engine, supporting MongoDB only\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Locked Users with Mount Accessor - Request Payload\nDESCRIPTION: JSON payload for filtering locked users by specific mount accessor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/user-lockout.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mount_accessor\": \"auth_userpass_af8d1d32\"\n}\n```\n\n----------------------------------------\n\nTITLE: New Re-Authentication Option for Vault Auto-Auth\nDESCRIPTION: Addition of a new configuration option `enable_reauth_on_new_credentials` for auto-auth methods. This option enables automatic re-authentication when new credentials are detected on supported auto-auth types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28126.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauto-auth: support new config option `enable_reauth_on_new_credentials`, supporting re-authentication when receiving new credential on certain auto-auth types\n```\n```\n\n----------------------------------------\n\nTITLE: Logging into Vault with cURL\nDESCRIPTION: This shell-session snippet shows how to log into Vault using a POST request to authenticate with a JWT under a specific role. It requires a payload JSON file containing the JWT and role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/gcp/login\n```\n\n----------------------------------------\n\nTITLE: Listing Token Capabilities using Vault CLI in Shell\nDESCRIPTION: This shell command lists the capabilities of a token at the specified path using HashiCorp Vault CLI. If no token is explicitly provided, it defaults to using the local authentication token. The command relies on the \"/sys/capabilities\" endpoint to fetch permission details. The example demonstrates how a read permission is checked for a local token at \"secret/foo\" and a deny permission for a specified token on \"cubbyhole/foo\" path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/capabilities.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token capabilities secret/foo\nread\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault token capabilities hvs.CAESI...WtiSW5mWUY database/creds/readonly\ndeny\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entity Alias by ID (cURL Request)\nDESCRIPTION: This cURL command deletes an entity alias from Vault using its ID. It sends a DELETE request to the `/identity/entity-alias/id/:id` endpoint, replacing `:id` with the actual alias ID. A valid Vault token is required in the `X-Vault-Token` header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/entity-alias/id/34982d3d-e3ce-5d8b-6e5f-b9bb34246c31\n```\n\n----------------------------------------\n\nTITLE: Sample CURL Request for Redshift Configuration - Shell\nDESCRIPTION: This snippet illustrates how to make a POST request using curl to configure the Redshift database plugin, using a specified payload file and including an authorization token in the request header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/redshift.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/redshift\n```\n\n----------------------------------------\n\nTITLE: List Entities by Name - HTTP API - Shell\nDESCRIPTION: The cURL command sends a LIST request to gain a list of all entity names available in Vault. It requires the Vault token for authentication and interacts with the `/name` endpoint to retrieve a JSON response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/entity/name\n```\n\n----------------------------------------\n\nTITLE: Retrieving Authentication Mount Accessor in Vault CLI\nDESCRIPTION: This shell command retrieves the accessor field of a userpass authentication mount using the Vault CLI. The accessor is needed for configuring delegated authentication in EST.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/est.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read -field=accessor sys/auth/auth/userpass\n```\n\n----------------------------------------\n\nTITLE: Serving a Database Plugin Without Multiplexing in Go\nDESCRIPTION: This code snippet demonstrates how to implement the Run function for a database plugin without multiplexing. This approach is simpler but less efficient for handling multiple database connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/custom.mdx#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc Run() error {\n\tdbType, err := New()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tdbplugin.Serve(dbType.(dbplugin.Database))\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Lease Count Quotas List Response JSON in Vault\nDESCRIPTION: Sample JSON response when listing all lease count quotas. The response includes an array of quota names under the 'keys' property in the data object.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/lease-count-quotas.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"global-lease-count-quota\"]\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"request_id\": \"ab633ee1-a692-ba03-083b-f1bd91c51c28\",\n  \"warnings\": null,\n  \"wrap_info\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Role\nDESCRIPTION: Command to configure a role that maps a name in Vault to Cassandra user creation statements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/cassandra.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-cassandra-database \\\n    creation_statements=\"CREATE USER '{{username}}' WITH PASSWORD '{{password}}' NOSUPERUSER; \\\n          GRANT SELECT ON ALL KEYSPACES TO {{username}};\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\nSuccess! Data written to: database/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Adding Client Port to Vault Audit Logs\nDESCRIPTION: This release note indicates an improvement in Vault's audit logging system. The audit logs will now include the port used by the client, providing more detailed connection information for auditing purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12790.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\naudit: The audit logs now contain the port used by the client\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Storage Migration ConfigMap in YAML\nDESCRIPTION: This YAML configuration creates a ConfigMap containing the storage migration configuration. It defines the source storage as Consul and the destination storage as Raft, along with the necessary paths and addresses.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cat > vault-storage-migration-configmap.yml <<EOF\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  labels:\n    app.kubernetes.io/instance: vault\n    app.kubernetes.io/name: vault\n  name: storage-migration\n  namespace: default\ndata:\n  migrate.hcl: |-\n    storage_source \"consul\" {\n      address = \"http://consul-server.default.svc.cluster.local:8500\"\n      path = \"vault/\"\n    }\n\n    storage_destination \"raft\" {\n      path = \"/vault/data\"\n    }\n\n    cluster_addr = \"https://vault-0.vault-internal:8201\" \nEOF\n```\n\n----------------------------------------\n\nTITLE: AWS Authentication Login - Shell Request and Payload\nDESCRIPTION: HTTP POST request for AWS authentication login with IAM credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iam_http_request_method\": \"POST\",\n  \"iam_request_body\": \"QWN0aW9uPUdldENhbG...\",\n  \"iam_request_headers\": \"eyJBdXRob3JpemF0aW9uIj...\",\n  \"iam_request_url\": \"aHR0cHM6L...\",\n  \"role\": \"dev-role\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/login\n```\n\n----------------------------------------\n\nTITLE: Setting Up FoundationDB Client with RPATH\nDESCRIPTION: Shell commands for building and configuring Vault with RPATH for FoundationDB client libraries, necessary when using mlock capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/foundationdb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n# setcap cap_ipc_lock=+ep /path/to/bin/vault\n$ getcap /path/to/bin/vault\n/path/to/bin/vault = cap_ipc_lock+ep\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ make dev FDB_ENABLED=1 LD_FLAGS=\"-r /dest/dir/for/primary \"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ readelf -d /path/to/bin/vault | grep RPATH\n 0x000000000000000f (RPATH)              Library rpath: [/dest/dir/for/primary]\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ ldd /path/to/bin/vault\n...\n    libfdb_c.so => /dest/dir/for/primary/libfdb_c.so (0x00007f270ad05000)\n...\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ export FDB_NETWORK_OPTION_EXTERNAL_CLIENT_DIRECTORY=/dest/dir/for/secondary\n$ /path/to/bin/vault ...\n```\n\n----------------------------------------\n\nTITLE: Reading Group Policy Application Configuration in Vault\nDESCRIPTION: This command retrieves the current setting for `group_policy_application_mode` in Vault. This setting determines whether group policies apply only within the namespace hierarchy or across all namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read sys/config/group-policy-application\nKey                              Value\n--                              -----\ngroup_policy_application_mode    within_namespace_hierarchy\n```\n\n----------------------------------------\n\nTITLE: CMAC Generation API Request\nDESCRIPTION: Example cURL command for generating a CMAC using the Transit secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_65\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/cmac/my-key\n```\n\n----------------------------------------\n\nTITLE: Delete Snapshot Configuration Request\nDESCRIPTION: cURL command to delete a snapshot configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot-auto/config/config1\n```\n\n----------------------------------------\n\nTITLE: Generating Root Token Nonce with PGP in Vault CLI\nDESCRIPTION: This command initializes the root token generation process using PGP encryption. It requires a PGP public key or Keybase username and returns a nonce and PGP fingerprint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/generate-root-token.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator generate-root -init -pgp-key=keybase:sethvargo\n```\n\n----------------------------------------\n\nTITLE: Reading SAML Config with cURL\nDESCRIPTION: This cURL command sends a GET request to read the current SAML auth method configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/saml/config\n```\n\n----------------------------------------\n\nTITLE: Deleting an Issuer with Vault API\nDESCRIPTION: This code snippet demonstrates how to delete a specific issuer using the Vault PKI secrets engine API. A DELETE request is sent to the `/pki/issuer/:issuer_ref` endpoint, requiring a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_73\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/pki/issuer/root-x1\n```\n\n----------------------------------------\n\nTITLE: Vault TCP Listener Accept Failure Backoff\nDESCRIPTION: This release note describes an improvement to the Vault core. Specifically, it mentions adding a small (<1s) exponential backoff to failed TCP listener Accept failures. This likely addresses a potential denial-of-service scenario where repeated Accept failures could consume excessive resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11588.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncore: Add a small (<1s) exponential backoff to failed TCP listener Accept failures.\n```\n\n----------------------------------------\n\nTITLE: Sample Response for CF Auth Role\nDESCRIPTION: JSON response showing the configuration of a Cloud Foundry auth role, including bound identifiers for applications, spaces, organizations, instances, CIDR restrictions, and token parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bound_application_ids\": [\"09d7eb6a-afc2-49a0-bb32-858c22f2b346\"],\n  \"bound_space_ids\": [\"21005ebb-8943-433e-84e6-d9d9d7338853\"],\n  \"bound_organization_ids\": [\"9785a884-5e93-49bd-97ee-57bf7c2b20e0\"],\n  \"bound_instance_ids\": [\"f3e0f176-3f83-4efb-5842-2ff4\"],\n  \"bound_cidrs\": [\"127.0.0.1/32\", \"128.252.0.0/16\"],\n  \"policies\": [\"default\"],\n  \"ttl\": 2764790,\n  \"max_ttl\": 2764790,\n  \"period\": 2764790\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Enterprise License via Environment Variable\nDESCRIPTION: Demonstrates how to set the VAULT_LICENSE environment variable to configure a Vault Enterprise license. This method takes precedence over both VAULT_LICENSE_PATH and the license_path configuration parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/license.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_LICENSE=\"02MV4UU43BK5...\"\n```\n\n----------------------------------------\n\nTITLE: Certificate Signing Request Payload in JSON\nDESCRIPTION: Sample JSON payload for the certificate signing API, including the CSR and common name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"csr\": \"...\",\n  \"common_name\": \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using withConfig Decorator in a Configuration Display Route\nDESCRIPTION: Example showing how to use the withConfig decorator in a route that displays configuration details, passing both the model and any potential errors to the template.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/fetch-secrets-engine-config.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n@withConfig('foo/config')\nexport default class FooConfigurationRoute extends Route {\n  @service store;\n  @service secretMountPath;\n\n  model() {\n    // the error could also be thrown to display the error template\n    // in this example a component is used to display the error\n    return {\n      configModel: this.configModel,\n      configError: this.configError,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Vault Enterprise License\nDESCRIPTION: This bash snippet creates a Kubernetes secret containing the Vault Enterprise license. It reads the license file and stores its content in a secret named 'vault-ent-license' with the key 'license'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsecret=$(cat 1931d1f4-bdfd-6881-f3f5-19349374841f.hclic)\nkubectl create secret generic vault-ent-license --from-literal=\"license=${secret}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring RabbitMQ Connection String via HTTP API\nDESCRIPTION: This snippet demonstrates how to configure the connection string used to communicate with RabbitMQ through the Vault API. The configuration includes essential parameters like connection URI, username, and password. Verification and password policies can also be set. A valid JSON payload with these parameters must be sent to the endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"connection_uri\": \"https://...\",\n  \"username\": \"user\",\n  \"password\": \"password\",\n  \"password_policy\": \"rabbitmq_policy\"\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Groups List Response\nDESCRIPTION: This JSON response shows the list of LDAP groups configured in the Vault authentication method, returning the group names as keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"scientists\", \"engineers\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking ADFS Relying Party Trust Settings with PowerShell\nDESCRIPTION: PowerShell command to verify the current configuration of the Vault relying party trust in AD FS. This retrieves all settings for the specified trust policy, allowing you to check if SignedSamlRequestsRequired is set to true.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/adfs-event-320.mdx#2025-04-14_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nGet-AdfsRelyingPartyTrust -Name \"<ADFS_VAULT_POLICY_NAME>\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault Usage Metrics via API\nDESCRIPTION: This cURL command enables usage metrics tracking in Vault using the API. It demonstrates how to set the retention period for activity logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/client-count/usage-metrics.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Token: <TOKEN>\" \\\n    --request POST \\\n    --data '{\"enabled\": \"enable\"}' \\\n    $VAULT_ADDR/v1/sys/internal/counters/config\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Token: <TOKEN>\" \\\n    --request POST \\\n    --data '{\"enabled\": \"enable\", \"retention_months\": 12}' \\\n    $VAULT_ADDR/v1/sys/internal/counters/config\n```\n\n----------------------------------------\n\nTITLE: Restoring KV Data Using Vault API\nDESCRIPTION: cURL command template for restoring soft deleted versions via the Vault HTTP API. Requires authentication token and specific version numbers to restore.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/undelete-data.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl                                       \\\n   --request POST                            \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n   --data '{\"versions\":[<target_versions>]}  \\\n   ${VAULT_ADDR}/v1/<plugin_mount_path>/undelete/<secret_path>\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault Database Secrets Engine\nDESCRIPTION: This command enables the database secrets engine in Vault, which is necessary before configuring the Elasticsearch plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Updating Duo MFA Method Configuration\nDESCRIPTION: Endpoint for modifying an existing Duo MFA method using its unique method ID, allowing updates to authentication and configuration parameters\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/duo.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/duo/4194659f-139b-400b-b5dd-86bfb726759d\n```\n\n----------------------------------------\n\nTITLE: Listing Secret Plugins in Vault Catalog\nDESCRIPTION: Shows how to list all available secret plugins in the Vault plugin catalog using the vault plugin list command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin list secret\n\nName            Version\n----            -------\nad              v0.14.0+builtin\nalicloud        v0.13.0+builtin\n...\n```\n\n----------------------------------------\n\nTITLE: Reading Login Enforcement Configuration\nDESCRIPTION: Sample curl request to retrieve login enforcement details from Vault API\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/login-enforcement.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/identity/mfa/login-enforcement/foo\n```\n\n----------------------------------------\n\nTITLE: Tuning Max Lease TTL on Secrets Mount - Shell Session\nDESCRIPTION: To facilitate long-lived database connections, this command adjusts the max lease TTL for a secrets mount, allowing database roles to be configured with extended lifecycle durations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets tune -max-lease-ttl=120d mongodb\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Enterprise License Secret\nDESCRIPTION: This bash script updates the Kubernetes secret containing the Vault Enterprise license. It reads a new license file, encodes it, and patches the existing secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnew_secret=$(base64 < ./new-license.hclic | tr -d '\\n')\n\ncat > patch-license.yaml <<EOF\ndata:\n  license: ${new_secret}\nEOF\n\nkubectl patch secret vault-ent-license --patch \"$(cat patch-license.yaml)\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Local Secrets Engine in Vault\nDESCRIPTION: This command enables a secrets engine on a secondary Vault cluster with the `-local` flag. This prevents the secrets engine from being replicated or removed by replication, ensuring that the data remains local to the secondary cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -local -path=us_west_data kv-v2\n```\n\n----------------------------------------\n\nTITLE: Undeleting Secret Versions in Vault KV Engine\nDESCRIPTION: This JSON payload and cURL command demonstrate how to undelete specific versions of a secret in Vault's KV engine using the POST method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"versions\": [1, 2]\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/undelete/my-secret\n```\n\n----------------------------------------\n\nTITLE: Sending Token Lookup Request Using cURL (Shell Session)\nDESCRIPTION: This command sends a POST request to the endpoint designed to retrieve tokens based on plaintext input and optional expiration settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_67\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/tokens/example-role\n```\n\n----------------------------------------\n\nTITLE: Writing AppRole with Token TTL and Max TTL - Shell Session\nDESCRIPTION: This snippet demonstrates how to configure an AppRole in Vault with specific token policies, token TTL, and maximum TTL. It highlights the importance of understanding the mount's maximum TTL constraints and adjusting the configuration accordingly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/approle/role/read-only token_policies=\"read-only\" \\\n    token_ttl=90d token_max_ttl=120d\n```\n\n----------------------------------------\n\nTITLE: Enabling RADIUS Auth Method in Vault via CLI\nDESCRIPTION: This command enables the RADIUS auth method in Vault using the command line interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/radius.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable radius\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Role VaultAuth Profile\nDESCRIPTION: YAML configuration for setting up a VaultAuth profile in VSO for node role authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: vaultauth-aws-node-example\n  namespace: <K8S_NAMESPACE>\nspec:\n  vaultConnectionRef: <VAULT_CONNECTION_NAME>\n  mount: aws\n  method: aws\n  aws:\n    role: <VAULT_AWS_NODE_ROLE>\n    region: <AWS_REGION>\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Setting Group Policy Application Mode in Vault\nDESCRIPTION: This JSON payload is used when modifying the group policy application mode. In this example, the mode is being set to 'any', which allows policies to apply across namespaces without hierarchy restrictions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-group-policy-application.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"group_policy_application_mode\": \"any\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Secret from Cubbyhole in Vault (Shell)\nDESCRIPTION: This snippet demonstrates how to read a secret from the Cubbyhole secrets engine using a curl command. It requires a Vault token for authentication and specifies the path of the secret to be read.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cubbyhole.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/cubbyhole/my-secret\n```\n\n----------------------------------------\n\nTITLE: Creating Helm Values for Vault Migration\nDESCRIPTION: This YAML configuration defines the Helm values for deploying Vault with the migration setup. It includes settings for the Vault image, enterprise license, storage migration init container, and Raft storage configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ cat > vault-migration-values.yml <<EOF\nglobal:\n  enabled: false\n\nserver:\n  enabled: true\n  image:\n    repository: hashicorp/vault-enterprise\n    tag: 1.14.8-ent\n  enterpriseLicense:\n    secretName: vault-license\n    secretKey: vault.hclic\n  extraInitContainers:\n    - name: vault-storage-migration\n      image: hashicorp/vault-enterprise:1.14.8-ent\n      command:\n        - \"/bin/sh\"\n        - \"-ec\"\n      args:\n        - \"/bin/vault operator migrate -config /vault/storage-migration/migrate.hcl\"\n      volumeMounts:\n        - name: storage-migration\n          mountPath: \"/vault/storage-migration\"\n        - name: data\n          mountPath: \"/vault/data\"\n  volumeMounts:\n    - name: storage-migration\n      mountPath: \"/vault/storage-migration\"\n  volumes:\n    - name: storage-migration\n      configMap:\n        name: storage-migration\n  dataStorage:\n    enabled: true\n    size: \"1Gi\"\n  ha:\n    enabled: true\n    replicas: 1\n    raft:\n      enabled: true\n      config: |\n        ui = true\n        service_registration \"kubernetes\" {}\n\n        listener \"tcp\" {\n          address = \":8200\"\n          cluster_address = \":8201\"\n          tls_disable = 1\n        }\n\n        storage \"raft\" {\n          path = \"/vault/data\"\n          retry_join {\n            auto_join_scheme = \"http\"\n            auto_join = \"provider=k8s\"\n          }\n        }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Sample Request to Encrypt - Shell\nDESCRIPTION: This shell command demonstrates how to make a POST request to encrypt plaintext using a specific key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/encrypt/my-key\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Certificate Configuration\nDESCRIPTION: Registers an AWS public key for verifying EC2 instance identity documents with configurable signature types\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"aws_public_cert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM3VENDQXEwQ0NRQ1d1a2paNVY0YVp6QUpCZ2NxaGtqT09BUURNRnd4Q3pBSkJnTlZCQVlUQWxWVE1Sa3cKRndZRFZRUUlFeEJYWVhOb2FXNW5kRzl1SUZOMFlYUmxNUkF3RGdZRFZRUUhFd2RUWldGMGRHeGxNU0F3SGdZRApWUVFLRXhkQmJXRjZiMjRnVjJWaUlGTmxjblpwWTJWeklFeE1RekFlRncweE1qQXhNRFV4TWpVMk1USmFGdzB6Ck9EQXhNRFV4TWpVMk1USmFNRnd4Q3pBSkJnTlZCQVlUQWxWVE1Sa3dGd1lEVlFRSUV4QlhZWE5vYVc1bmRHOXUKSUZOMFlYUmxNUkF3RGdZRFZRUUhFd2RUWldGMGRHeGxNU0F3SGdZRFZRUUtFeGRCYldGNmIyNGdWMlZpSUZObApjblpwWTJWeklFeE1RekNDQWJjd2dnRXNCZ2NxaGtqT09BUUJNSUlCSHdLQmdRQ2prdmNTMmJiMVZRNHl0LzVlCmloNU9PNmtLL24xTHpsbHI3RDhad3RRUDhmT0VwcDVFMm5nK0Q2VWQxWjFnWWlwcjU4S2ozbnNzU05wSTZiWDMKVnlJUXpLN3dMY2xuZC9Zb3pxTk5tZ0l5WmVjTjdFZ2xLOUlUSEpMUCt4OEZ0VXB0M1FieVlYSmRtVk1lZ042UApodmlZdDVKSC9uWWw0aGgzUGExSEpkc2tnUUlWQUxWSjNFUjExK0tvNHRQNm53dkh3aDYrRVJZUkFvR0JBSTFqCmsrdGtxTVZIdUFGY3ZBR0tvY1Rnc2pKZW02LzVxb216SnVLRG1iSk51OVF4dzNyQW90WGF1OFFlK01CY0psL1UKaGh5MUtIVnBDR2w5ZnVlUTJzNklMMENhTy9idXljVTFDaVlRazQwS05IQ2NIZk5pWmJkbHgxRTlycFVwN2JuRgpsUmEydjFudE1YM2NhUlZEZGJ0UEVXbWR4U0NZc1lGRGs0bVpyT0xCQTRHRUFBS0JnRWJtZXZlNWY4TElFL0dmCk1ObVA5Q001ZW92UU9HeDVobzhXcUQrYVRlYnMrazJ0bjkyQkJQcWVacXBXUmE1UC8ranJkS21sMXF4NGxsSFcKTVhyczNJZ0liNitoVUlCK1M4ZHo4L21tTzBicHI3NlJvWlZDWFlhYjJDWmVkRnV0N3FjM1dVSDkrRVVBSDVtdwp2U2VEQ09VTVlRUjdSOUxJTll3b3VISXppcVFZTUFrR0J5cUdTTTQ0QkFNREx3QXdMQUlVV1hCbGs0MHhUd1N3CjdIWDMyTXhYWXJ1c2U5QUNGQk5HbWRYMlpCclZOR3JOOU4yZjZST2swazlLCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Vault Admin Role Configuration\nDESCRIPTION: A JSON configuration to set up an admin role in Vault is provided, which includes specification of groups or dynamic groups that permit users or instances to assume the admin role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"token_policies\": \"vaultadminpolicy\",\n   \"token_ttl\": \"1800\",\n   \"ocid_list\": \"ocid1.group.oc1..aaaaaaaaiqnblimpvmegkqh3bxilrdvjobr7qd223g275idcqhexamplefq,ocid1.dynamicgroup.oc1..aaaaaaaa5hmfyrdaxvmt52ekju5n7ffamn2pdvxaq6esb2vzzoduexamplea\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Configuring Control Group Settings\nDESCRIPTION: This JSON snippet demonstrates the structure of the payload used to configure Control Group settings, specifically setting the max_ttl parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-control-group.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_ttl\": \"4h\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Authentication Login - JSON Response\nDESCRIPTION: Sample JSON response showing the authentication result including token and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"renewable\": true,\n    \"lease_duration\": 1800000,\n    \"metadata\": {\n      \"role_tag_max_ttl\": \"0\",\n      \"instance_id\": \"i-de0f1344\",\n      \"ami_id\": \"ami-fce36983\",\n      \"role\": \"dev-role\",\n      \"auth_type\": \"ec2\"\n    },\n    \"policies\": [\"default\", \"dev\"],\n    \"accessor\": \"20b89871-e6f2-1160-fb29-31c2f6d4645e\",\n    \"client_token\": \"c9368254-3f21-aded-8a6f-7c818e81b17a\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Generating Credentials\nDESCRIPTION: Provides a sample JSON response format when generating new dynamic credentials for a RabbitMQ role, showing the generated username and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"username\": \"root-4b95bf47-281d-dcb5-8a60-9594f8056092\",\n    \"password\": \"e1b6c159-ca63-4c6a-3886-6639eae06c30\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create Store Schema Sample Payload\nDESCRIPTION: JSON payload for creating or updating a store schema with credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"username\": \"ddl_user\",\n  \"password\": \"very_secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Decryption - JSON\nDESCRIPTION: This JSON object is a sample payload for decrypting ciphertext using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"CiQAuMv0...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Okta User Properties via cURL\nDESCRIPTION: Shell command to retrieve the properties of an existing Okta user using GET request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/okta/users/test-user\n```\n\n----------------------------------------\n\nTITLE: Starting Vault with v1 KV Secret Engine\nDESCRIPTION: Command to start a Vault dev server with v1 KV secret engine instead of the default v2 engine. Useful when experimenting with the older version of the Key-Value store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/dev-server.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n-dev-kv-v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Service Registration in HCL\nDESCRIPTION: Basic configuration block for Kubernetes service registration in Vault, specifying namespace and pod name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"kubernetes\" {\n  namespace      = \"my-namespace\"\n  pod_name       = \"my-pod-name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Okta Group via cURL\nDESCRIPTION: Shell command to delete an existing group from the Okta auth method using DELETE request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/okta/users/test-user\n```\n\n----------------------------------------\n\nTITLE: Fixing Login with MFA for SAML\nDESCRIPTION: This snippet addresses a bug fix related to the web UI login process when MFA is enabled for SAML authentication methods. The fix aims to provide a secure and reliable login experience for users utilizing SAML with MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28873.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"ui (enterprise): Fixes login to web UI when MFA is enabled for SAML auth methods\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Policy Mapping for Kerberos Authentication\nDESCRIPTION: Command to map LDAP groups to Vault policies for users authenticating via Kerberos, granting appropriate permissions based on group membership.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kerberos.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/kerberos/groups/engineering-team \\\n    policies=engineers\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Account Extra Labels\nDESCRIPTION: Shows how to add additional labels to the Vault server service account using a YAML dictionary\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nextraLabels:\n  'sample/label1': 'foo'\n  'sample/label2': 'bar'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for TLS Certificate Login\nDESCRIPTION: This JSON snippet represents a typical response from Vault after a successful TLS certificate login, including the issued client token, associated policies, lease duration, and whether the token is renewable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"cf95f87d-f95b-47ff-b1f5-ba7bff850425\",\n    \"policies\": [\"web\", \"stage\"],\n    \"lease_duration\": 3600,\n    \"renewable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Read EGP Policy Response\nDESCRIPTION: Sample JSON response containing EGP policy details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enforcement_level\": \"soft-mandatory\",\n  \"name\": \"breakglass\",\n  \"paths\": [\"*\"],\n  \"policy\": \"rule main = {...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Group Lookup Response Example\nDESCRIPTION: This is an example of a JSON response from a group lookup request containing fields such as 'id', 'name', 'type', and timestamps. No additional configurations are necessary beyond those specified in the API. Optional null fields may appear in the response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/lookup.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"alias\": {},\n    \"creation_time\": \"2017-11-13T21:06:44.475587Z\",\n    \"id\": \"70a4bdef-9da3-4460-b524-bb08542eef25\",\n    \"last_update_time\": \"2017-11-13T21:06:44.475587Z\",\n    \"member_entity_ids\": [],\n    \"member_group_ids\": null,\n    \"metadata\": null,\n    \"modify_index\": 1,\n    \"name\": \"group_eaf2aab1\",\n    \"policies\": null,\n    \"type\": \"internal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a MySQL Tokenization Store with JSON Payload\nDESCRIPTION: JSON payload for creating or updating a MySQL tokenization store in the Vault Transform Secrets Engine with connection details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"sql\",\n  \"driver\": \"mysql\"\n  \"connection_string\": \"{{username}}:{{password}}@tcp(mydb.conhugeco.com:3306)/tokens\",\n  \"username\": \"vault_user\",\n  \"password\": \"very_secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Adaptive Overload Protection in Vault HCL\nDESCRIPTION: This HCL snippet demonstrates how to configure the adaptive_overload_protection stanza in Vault. It shows the option to disable the write controller, which is enabled by default. This configuration is crucial for managing resource overloads in Vault Enterprise servers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/adaptive-overload-protection.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nadaptive_overload_protection {\n  disable_write_controller = false\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Validating a Token (JSON)\nDESCRIPTION: This JSON payload represents the request body for validating a token, specifying the required transformation type and token value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"CAESLAoYChAhsIt7Urh6GmN2VnxAeuLGENuF8fkFEhBYz7wwdFyJPrhyDmvZg7L0\",\n  \"transformation\": \"ccn-tokenization\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Test Vault Namespace via CLI\nDESCRIPTION: This snippet provides the command to create a test namespace named `ns_test` using the Vault CLI. This namespace is used to verify the permissions of the administrative namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n    $ vault namespace create ns_test\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Template for OIDC Scope in Vault\nDESCRIPTION: This JSON template demonstrates how to map individual claims to Vault identity information when configuring an OIDC scope. It includes user attributes like username, email, phone number, and group memberships.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/oidc-provider.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"username\": {{identity.entity.aliases.$MOUNT_ACCESSOR.name}},\n    \"contact\": {\n        \"email\": {{identity.entity.metadata.email}},\n        \"phone_number\": {{identity.entity.metadata.phone_number}}\n    },\n    \"groups\": {{identity.entity.groups.names}}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Reading Token Role\nDESCRIPTION: This CURL command is for retrieving the configuration of a specific token role based on the provided role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/token/roles/nomad\n```\n\n----------------------------------------\n\nTITLE: OIDC Authorization URL Request Payload\nDESCRIPTION: JSON payload for requesting an OIDC authorization URL\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"dev-role\",\n  \"redirect_uri\": \"https://vault.myco.com:8200/ui/vault/auth/jwt/oidc/callback\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Creating a Group Alias - JSON\nDESCRIPTION: This JSON snippet shows the expected payload structure when creating or updating a group alias. It includes the `canonical_id`, `mount_accessor`, and `name` fields to properly define the group alias.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"canonical_id\": \"b86920ea-2831-00ff-15c5-a3f923f1ee3b\",\n  \"mount_accessor\": \"auth_github_232a90dc\",\n  \"name\": \"dev-team\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Vault in HA Raft Mode\nDESCRIPTION: These commands initialize and unseal the vault-0 pod in a Vault HA Raft cluster on OpenShift.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/openshift.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ oc exec -ti vault-0 -- vault operator init\n$ oc exec -ti vault-0 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Read LDAP Group Request\nDESCRIPTION: This curl command retrieves the details of a specific LDAP group from Vault, including its associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/ldap/groups/admins\n```\n\n----------------------------------------\n\nTITLE: Generating Certificate via Venafi Cloud - Shell Script\nDESCRIPTION: This snippet shows how to generate a certificate by writing to the `/issue` endpoint using the name of the role for Venafi Cloud configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/issue/cloud common_name=\"common-name.example.com\" \\\n    alt_names=\"dns-san-1.example.com,dns-san-2.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Unlocking a Namespace API - Vault CLI - Shell\nDESCRIPTION: Unlock the API for a namespace using a valid unlock key. This operation requires the unlock key and sufficient permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/namespace.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace unlock -unlock-key <unlock key>\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace unlock -unlock-key <unlock key> ns1/\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Auth Method Configuration\nDESCRIPTION: cURL command to delete the previously configured Azure authentication settings and credentials from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/auth/azure/config\n```\n\n----------------------------------------\n\nTITLE: Enabling the AliCloud Secrets Engine in Vault\nDESCRIPTION: Command to enable the AliCloud secrets engine in Vault. This is typically the first step in the setup process and mounts the engine at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable alicloud\nSuccess! Enabled the alicloud secrets engine at: alicloud/\n```\n\n----------------------------------------\n\nTITLE: Listing CF Auth Roles with cURL\nDESCRIPTION: Shell command for listing all Cloud Foundry authentication roles configured in Vault using a LIST request to the roles endpoint. Requires a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST\n    http://127.0.0.1:8200/v1/auth/cf/roles\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Update Client Count Configuration (Shell)\nDESCRIPTION: This shell command sends a POST request to update the client count configuration in Vault using curl. It includes the necessary headers and payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/internal/counters/config\n```\n\n----------------------------------------\n\nTITLE: Decryption Response\nDESCRIPTION: JSON response from the decryption operation containing the decrypted plaintext in base64 format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"plaintext\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Masking Transformation with JSON Payload\nDESCRIPTION: Example JSON payload for creating or updating a masking transformation. Specifies template, masking character, and allowed roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"template\": \"builtin/creditcardnumber\",\n  \"masking_character\": \"X\",\n  \"allowed_roles\": [\"example-role\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Role Tag Deny List Tidy Settings Request\nDESCRIPTION: cURL command to remove role tag deny list tidy configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_28\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/aws/config/tidy/roletag-denylist\n```\n\n----------------------------------------\n\nTITLE: OIDC Scope: Sample Request\nDESCRIPTION: This is a sample `curl` request to create or update an OIDC scope. It sends a POST request to the specified endpoint, including the Vault token and the JSON payload. Replace `...` with your Vault token and `@payload.json` with the file containing the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/oidc/scope/test-scope\n```\n\n----------------------------------------\n\nTITLE: Starting Rekey Operation Payload\nDESCRIPTION: JSON payload for initializing a new rekey operation with share and threshold parameters\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_shares\": 10,\n  \"secret_threshold\": 5\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default VaultAuthGlobal Resource\nDESCRIPTION: Example of creating a default VaultAuthGlobal resource in the admin namespace that defines common authentication configuration for multiple applications using Kubernetes auth backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuthGlobal\nmetadata:\n  name: default\n  namespace: admin\nspec:\n  allowedNamespaces:\n    - apps\n  defaultAuthMethod: kubernetes\n  kubernetes:\n    audiences:\n    - vault\n    mount: kubernetes\n    role: default\n    serviceAccount: default\n    tokenExpirationSeconds: 600\n```\n\n----------------------------------------\n\nTITLE: Creating an Azure Auth Role with JSON Payload\nDESCRIPTION: JSON payload for creating a role in the Azure auth method. This specifies token policies, TTL settings, and Azure resource groups that can use this role for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token_policies\": [\"default\", \"dev\", \"prod\"],\n  \"max_ttl\": 1800000,\n  \"max_jwt_exp\": 10000,\n  \"bound_resource_groups\": [\"vault-dev\", \"vault-staging\", \"vault-prod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Auth Error Handling Update Note\nDESCRIPTION: Bug fix modification that changes the HTTP response code from 500 to 403 when attempting to make wrapping requests without providing a token. This change improves error handling by returning a more semantically correct Forbidden status instead of an Internal Server Error.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18859.txt#2025-04-14_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\nrelease-note:bug\ncore/auth: Return a 403 instead of a 500 for wrapping requests when token is not provided\n```\n\n----------------------------------------\n\nTITLE: Starting Vault UI with Mirage Mock Backend\nDESCRIPTION: Command to start the Vault UI application with a Mirage mock backend handler for testing without a real Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MIRAGE_DEV_HANDLER=<handler> && yarn start\n```\n\n----------------------------------------\n\nTITLE: Response for Token Lookup Request (JSON)\nDESCRIPTION: This response contains the token(s) found based on the plaintext input provided in the lookup request, demonstrating successful retrieval.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"tokens\": [\n      \"AHLdmFvTRknMBgrNSy6Ba7xJxG28KkZeHKqxGJ7e45G3V9UbcUr6gdv83ozwRRQwLfJgyHZvfa9rh7kU9xJXVdY\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Socket Audit Device - Custom Configuration\nDESCRIPTION: Command to enable the socket audit device with custom configuration parameters, specifying the address and socket type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/socket.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable socket address=127.0.0.1:9090 socket_type=tcp\n```\n\n----------------------------------------\n\nTITLE: Delete Identity Access List Tidy Settings Request\nDESCRIPTION: cURL command to remove identity access list tidy configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/aws/config/tidy/identity-accesslist\n```\n\n----------------------------------------\n\nTITLE: Documenting Go Version Update in Vault Core\nDESCRIPTION: A release note entry specifying that the Go version used by the Vault core component has been upgraded to version 1.23.7. This is likely part of regular maintenance to keep dependencies up to date.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_go-ver-1200.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ncore: Bump Go version to 1.23.7.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Warning Message for Root Token Namespace Picker - Release Note\nDESCRIPTION: Release note documenting an improvement to the Vault UI that adds a warning message to the namespace picker to inform users about behavior when logging in with a root token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23277.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Add warning message to the namespace picker warning users about the behavior when logging in with a root token.\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Auth Method in Vault\nDESCRIPTION: This snippet demonstrates how to enable the userpass authentication method in Vault using the 'auth enable' subcommand.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable userpass\nSuccess! Enabled userpass auth method at: userpass/\n```\n\n----------------------------------------\n\nTITLE: Configuring RADIUS User Policies in Vault via CLI\nDESCRIPTION: This command creates a new mapping for the user \"mitchellh\" and associates it with the \"admins\" policy using the RADIUS auth method in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/radius.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/radius/users/mitchellh policies=admins\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role - HTTP API - Shell\nDESCRIPTION: This snippet illustrates how to delete a Terraform Cloud role by sending a DELETE request to the `/terraform/role/:name` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/terraform/role/tfuser\n```\n\n----------------------------------------\n\nTITLE: cURL Request for Updating an Entity by ID - Shell\nDESCRIPTION: This command uses cURL to send a POST request to update an entity based on its ID in Vault. It requires the Vault token for authentication and includes the updated entity details within a JSON file provided with the request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/entity/id/8d6a45e5-572f-8f13-d226-cd0d1ec57297\n```\n\n----------------------------------------\n\nTITLE: Listing Impersonated Accounts (cURL)\nDESCRIPTION: cURL command to list all impersonated accounts configured in the GCP secrets engine using the LIST HTTP method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_27\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/gcp/impersonated-accounts\n```\n\n----------------------------------------\n\nTITLE: Establishing SSH Session with OTP\nDESCRIPTION: This command demonstrates how to connect to a remote host using SSH with the generated one-time password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/one-time-ssh-passwords.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh username@x.x.x.x\nPassword: <Enter OTP>\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Data Key Generation\nDESCRIPTION: cURL command to generate a new data key using the Transit engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_41\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/datakey/plaintext/my-key\n```\n\n----------------------------------------\n\nTITLE: Listing Namespaces - Vault CLI - Shell\nDESCRIPTION: This shell session command lists all namespaces in Vault. It requires the Vault CLI to be installed and authenticated with the appropriate permissions. The command outputs a list of namespace names. An additional \"-detailed\" option provides extended details like namespace ID and custom metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/namespace.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace list\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace list -detailed\n```\n\n----------------------------------------\n\nTITLE: Adding pprof Dumping to Proxy\nDESCRIPTION: This snippet describes the improvement made to the proxy component, enabling it to dump pprof data to the filesystem as well upon receiving the SIGUSR2 signal, aiding performance analysis.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27510.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nproxy: Add the ability to dump pprof to the filesystem using SIGUSR2\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Key\nDESCRIPTION: Commands to rotate the key and verify the new version number.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvault write -f keymgmt/key/aes256-gcm96/rotate\nvault read -format=json keymgmt/key/aes256-gcm96 | jq '.data.latest_version'\n```\n\n----------------------------------------\n\nTITLE: Defining HCPVaultSecretsApp Resource in YAML\nDESCRIPTION: This YAML snippet outlines the structure of the HCPVaultSecretsApp resource, which is used to configure syncing of HCP Vault Secrets Application to Kubernetes. It includes specifications for app name, HCP authentication reference, refresh interval, and destination configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: HCPVaultSecretsApp\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`.\nspec:\n  appName: string\n  hcpAuthRef: string\n  refreshAfter: string\n  rolloutRestartTargets:\n    - # RolloutRestartTarget\n  destination:\n    # Destination configuration\n  syncConfig:\n    # HVSSyncConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Auth Method API Request\nDESCRIPTION: Shell command to configure the Kubernetes auth method with a JSON payload using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/config\n```\n\n----------------------------------------\n\nTITLE: Reading AWS Role Configuration - Shell Request\nDESCRIPTION: HTTP GET request to retrieve a previously registered AWS role configuration from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/aws/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Retrieving CF Auth Role with cURL\nDESCRIPTION: Shell command for retrieving the configuration of a specific Cloud Foundry authentication role from Vault using a GET request. Requires a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/cf/roles/:role\n```\n\n----------------------------------------\n\nTITLE: Reading Credentials for Database Role - Shell Session\nDESCRIPTION: When fetching credentials for a database role with a max lease TTL exceeding constraints, this shell snippet showcases Vault's warning and the resultant lease duration. It also provides the credentials for accessing the database.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read mongodb/creds/tester\n\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"2880h\" exceeded the effective max_ttl of \"768h\"; TTL value is\n  capped accordingly\n\nKey                Value\n---                -----\nlease_id           mongodb/creds/tester/fVPt15506k3UW9n4pq0kIpBH\nlease_duration     768h\nlease_renewable    true\npassword           Eskkx6yRhAN4--H9WL7B\nusername           v-token-tester-6BtY903qOZBpzYa4yQs8-1724715513\n```\n\n----------------------------------------\n\nTITLE: Reading Control Group Settings via GET Request in Shell\nDESCRIPTION: This snippet demonstrates how to retrieve the current Control Group configuration using a GET request to the /sys/config/control-group endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-control-group.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/control-group\n```\n\n----------------------------------------\n\nTITLE: Checking Page or Subpage Corruption via CLI (Shell)\nDESCRIPTION: This Vault CLI command checks if any page or subpage is corrupted. It uses jq to parse the JSON output and filter for non-null corrupted index tuples maps.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/replication/merkle-check -format=json \\\n    | jq -r '.data.merkle_corruption_report.corrupted_tree_map[] | select(.corrupted_index_tuples_map!=null)'\n```\n\n----------------------------------------\n\nTITLE: Custom Role Definition for Azure Key Vault Access\nDESCRIPTION: This JSON defines a custom role in Azure with permissions for reading and writing secrets in Azure Key Vault. It includes necessary actions and data actions for managing secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/azurekv.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"properties\": {\n    \"roleName\": \"Key Vault Secrets Reader Writer\",\n    \"description\": \"Custom role for reading and updating Azure Key Vault secrets.\",\n    \"permissions\": [\n      {\n        \"actions\": [\n          \"Microsoft.KeyVault/vaults/secrets/read\",\n          \"Microsoft.KeyVault/vaults/secrets/write\"\n        ],\n        \"notActions\": [],\n        \"dataActions\": [\n          \"Microsoft.KeyVault/vaults/secrets/delete\",\n          \"Microsoft.KeyVault/vaults/secrets/backup/action\",\n          \"Microsoft.KeyVault/vaults/secrets/purge/action\",\n          \"Microsoft.KeyVault/vaults/secrets/recover/action\",\n          \"Microsoft.KeyVault/vaults/secrets/restore/action\",\n          \"Microsoft.KeyVault/vaults/secrets/readMetadata/action\",\n          \"Microsoft.KeyVault/vaults/secrets/getSecret/action\",\n          \"Microsoft.KeyVault/vaults/secrets/setSecret/action\"\n        ],\n        \"notDataActions\": []\n      }\n    ],\n    \"assignableScopes\": [\n      \"/subscriptions/{subscriptionId}/\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating STS Federation Token Credentials (Shell)\nDESCRIPTION: This command generates a new set of STS federation token credentials for the ec2_admin role with a TTL of 60 minutes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/aws.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write aws/sts/ec2_admin ttl=60m\n```\n\n----------------------------------------\n\nTITLE: Reading CMPv2 Configuration (cURL)\nDESCRIPTION: Sample cURL request for fetching the current CMPv2 configuration from Vault's PKI secrets engine. It sends a GET request to the CMPv2 configuration endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/cmp\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version in Vault to 1.16.6\nDESCRIPTION: This release note indicates that the Go programming language version used in Vault has been updated to version 1.16.6. This represents a maintenance update to keep Vault's codebase on a supported and secure version of Go.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12245.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ngo: Update go version to 1.16.6\n```\n```\n\n----------------------------------------\n\nTITLE: Raft Configuration with Load Balancer\nDESCRIPTION: Configuration example showing how to set up Raft storage using a load balancer address for the leader API, simplifying the configuration to a single retry_join stanza.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-tls.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path = \"/vault/data\"\n\n  retry_join {\n    leader_api_addr = \"https://vault-active:8200\"\n    leader_client_cert_file = \"/vault/tls/vault.crt\"\n    leader_client_key_file = \"/vault/tls/vault.key\"\n    leader_ca_cert_file = \"/vault/tls/vault.ca\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Static Account Configuration Response Example (JSON)\nDESCRIPTION: Sample JSON response from reading a static account configuration, showing the account's secret type, service account details, bindings to GCP resources, and configured token scopes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"secret_type\": \"access_token\",\n    \"service_account_email\": \"example@mygcpproject.iam.gserviceaccount.com\",\n    \"service_account_project\": \"mygcpproject\",\n    \"bindings\": {\n      \"project/mygcpproject\": [\"roles/viewer\"],\n      \"https://selflink/to/my/resource\": [\n        \"project/mygcpproject/roles/projcustomrole\",\n        \"organizations/myorg/roles/orgcustomrole\"\n      ]\n    },\n    \"token_scopes\": [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching for Vault Chart in HashiCorp Repository\nDESCRIPTION: Command to search for the Vault chart in the HashiCorp repository, displaying available versions and basic information about the chart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/helm/repo.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ helm search repo hashicorp/vault\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\nhashicorp/vault\t0.30.0       \t1.19.0     \tOfficial HashiCorp Vault Chart\n```\n\n----------------------------------------\n\nTITLE: Adding Policy to Vault Namespace (Shell)\nDESCRIPTION: This command creates a new policy named 'group_policy' in the 'ns1' namespace of Vault, granting create and update capabilities on the 'secret/data/*' path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/internal-error-namespace-missing-policy.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy write -namespace=ns1 group_policy - << EOF\n    path \"secret/data/*\" {\n\t    capabilities = [\"create\", \"update\"]\n    }\nEOF\n```\n\n----------------------------------------\n\nTITLE: Reading Duo MFA Method Details\nDESCRIPTION: Endpoint for retrieving the configuration details of a specific Duo MFA method using its unique method ID\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/duo.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/duo/4194659f-139b-400b-b5dd-86bfb726759d\n```\n\n----------------------------------------\n\nTITLE: Enabling Audit Device in Vault\nDESCRIPTION: Enables auditing on a device using the Vault CLI to collect audit-related metrics. Requires Vault to be installed and running. Key parameters include the audit device type (e.g., 'file') and the log file path. Outputs audit logs for further processing. Limitations may include performance impact if not configured locally.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/enable-telemetry.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable file file_path=/var/log/vault_audit.log\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit enable file -local file_path=/var/log/vault_audit.log\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration Response\nDESCRIPTION: Example JSON response showing the current LDAP configuration settings used by the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"binddn\": \"cn=vault,ou=Users,dc=example,dc=com\",\n    \"bindpass\": \"\",\n    \"certificate\": \"\",\n    \"deny_null_bind\": true,\n    \"discoverdn\": false,\n    \"groupattr\": \"cn\",\n    \"groupdn\": \"ou=Groups,dc=example,dc=com\",\n    \"groupfilter\": \"(\\u0026(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\",\n    \"insecure_tls\": false,\n    \"starttls\": false,\n    \"tls_max_version\": \"tls12\",\n    \"tls_min_version\": \"tls12\",\n    \"upndomain\": \"\",\n    \"url\": \"ldaps://ldap.myorg.com:636\",\n    \"userattr\": \"samaccountname\",\n    \"userdn\": \"ou=Users,dc=example,dc=com\"\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Random Bytes Generation\nDESCRIPTION: Response format showing the generated random bytes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"random_bytes\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: List STS Roles Request\nDESCRIPTION: cURL command to list all configured AWS account IDs with STS roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/aws/config/sts\n```\n\n----------------------------------------\n\nTITLE: Reading a Secret Protected by MFA\nDESCRIPTION: Command to read a secret that requires MFA validation. This operation will trigger a PingID push notification and block until the MFA is approved or declined.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ vault read secret/foo\n```\n\n----------------------------------------\n\nTITLE: Generating AliCloud STS Credentials from a Role-Based Configuration\nDESCRIPTION: Command to request STS credentials from a configured role-based setup. The response includes temporary credentials with a security token and expiration time, which are non-renewable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ vault read alicloud/creds/role-based\nKey                Value\n---                -----\nlease_id           alicloud/creds/role-based/f3e92392-7d9c-09c8-c921-575d62fe80d9\nlease_duration     59m59s\nlease_renewable    false\naccess_key         STS.L4aBSCSJVMuKg5U1vFDw\nsecret_key         wyLTSmsyPGP1ohvvw8xYgB29dlGI8KMiH2pKCNZ9\nsecurity_token     CAESrAIIARKAAShQquMnLIlbvEcIxO6wCoqJufs8sWwieUxu45hS9AvKNEte8KRUWiJWJ6Y+YHAPgNwi7yfRecMFydL2uPOgBI7LDio0RkbYLmJfIxHM2nGBPdml7kYEOXmJp2aDhbvvwVYIyt/8iES/R6N208wQh0Pk2bu+/9dvalp6wOHF4gkFGhhTVFMuTDRhQlNDU0pWTXVLZzVVMXZGRHciBTQzMjc0KgVhbGljZTCpnJjwySk6BlJzYU1ENUJuCgExGmkKBUFsbG93Eh8KDEFjdGlvbkVxdWFscxIGQWN0aW9uGgcKBW9zczoqEj8KDlJlc291cmNlRXF1YWxzEghSZXNvdXJjZRojCiFhY3M6b3NzOio6NDMyNzQ6c2FtcGxlYm94L2FsaWNlLyo=\nexpiration         2018-08-15T21:58:00Z\n```\n\n----------------------------------------\n\nTITLE: Sample Self-Issued Certificate Signing Request Payload\nDESCRIPTION: Example JSON payload for signing a self-issued certificate with Vault's PKI secrets engine. This shows how to pass the certificate to be signed to the API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"certificate\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lease Settings for RabbitMQ\nDESCRIPTION: This snippet shows how to configure lease settings for generated RabbitMQ credentials via the Vault API. The TTL and maximum TTL in seconds are specified in a JSON payload and sent to the API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ttl\": 1800,\n  \"max_ttl\": 3600\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Role VaultAuthGlobal Configuration\nDESCRIPTION: Example of VaultAuthGlobal configuration for multiple applications sharing a single role and service account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuthGlobal\nmetadata:\n  name: default\n  namespace: apps\nspec:\n  defaultAuthMethod: kubernetes\n  kubernetes:\n    audiences:\n    - vault\n    mount: kubernetes\n    role: apps\n    serviceAccount: apps\n    tokenExpirationSeconds: 600\n```\n\n----------------------------------------\n\nTITLE: Editing Service Accounts for IAM Roles in JSON\nDESCRIPTION: This JSON snippet demonstrates how to modify the service accounts bound to an IAM role in Vault. Parameters include `add` for adding service accounts and `remove` for removing them, which are submitted via an HTTP POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add\": [\"dev-1@project-123456.iam.gserviceaccount.com\", \"123456789\"],\n  \"remove\": [\"dev-2@project-123456.iam.gserviceaccount.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key from Google Cloud KMS\nDESCRIPTION: Command using gcloud CLI to retrieve the public key from Cloud KMS for a specific crypto key version. The public key is saved to a file for offline encryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ gcloud kms keys versions get-public-key <crypto-key-version> \\\n    --location <location> \\\n    --keyring <key-ring> \\\n    --key <key> \\\n    --output-file ~/mykey.pub\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault for Kubernetes Integration\nDESCRIPTION: This HCL configuration sets up Vault with in-memory storage and Kubernetes service registration. It enables the UI, sets the API address, and configures debug logging.\nSOURCE: https://github.com/hashicorp/vault/blob/main/serviceregistration/kubernetes/testing/README.md#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"inmem\" {}\nservice_registration \"kubernetes\" {}\ndisable_mlock = true\nui = true\napi_addr = \"http://127.0.0.1:8200\"\nlog_level = \"debug\"\n```\n\n----------------------------------------\n\nTITLE: Setting VAULT_SKIP_VERIFY Environment Variable in Bash\nDESCRIPTION: Sets the VAULT_SKIP_VERIFY environment variable to skip SSL certificate verification when communicating with Vault server. This is a boolean flag defaulting to false and should not be used in production as it compromises security.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/skip_verify.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_SKIP_VERIFY=1\n```\n\n----------------------------------------\n\nTITLE: Executing Backend Plugin Reload Request with cURL\nDESCRIPTION: Shell command using cURL to send a POST request to reload backend plugins. The request targets the backend reload endpoint and includes authentication and payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-reload.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/plugins/reload/backend\n```\n\n----------------------------------------\n\nTITLE: Service Account Check-In Request\nDESCRIPTION: Shell command to check in a service account back to the library set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ldap/library/accounting-team/check-in\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Information for GCP Secrets Engine in Vault\nDESCRIPTION: This snippet showcases a JSON payload used to configure shared information, along with credentials for the Google Cloud secrets engine in Vault. It includes key parameters like 'credentials', 'ttl', and 'max_ttl'. Dependencies include possession of valid JSON credentials, and it requires 'ttl' and 'max_ttl' to be specified as strings or integers representing duration. The expected output is a configuration update within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": \"<JSON string>\",\n  \"ttl\": 3600,\n  \"max_ttl\": 14400\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying an SSH OTP in Vault\nDESCRIPTION: Example of verifying an SSH One-Time Password using a POST request. The request includes a JSON payload with the OTP to validate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/verify\n```\n\n----------------------------------------\n\nTITLE: Reading Managed Key Configuration - Shell Request\nDESCRIPTION: HTTP GET request to retrieve the configuration of a managed key from Vault. Requires authentication via X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/managed-keys/pkcs11/hsm-key1\n```\n\n----------------------------------------\n\nTITLE: Getting Autopilot Configuration in Vault\nDESCRIPTION: Command usage for retrieving the current configuration of the Autopilot subsystem in Vault's integrated storage. This command displays the settings that control Autopilot's behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault operator raft autopilot get-config\n\n  Returns the configuration of the autopilot subsystem under integrated storage.\n\n    $ vault operator raft autopilot get-config\n```\n\n----------------------------------------\n\nTITLE: Parsing Vault Client Activity Counter JSON Response\nDESCRIPTION: This JSON structure represents the response from Vault's client activity counter endpoints. It provides detailed breakdown of client activity across namespaces and mount points, including counts of different client types (entity, non-entity, secret sync, and ACME clients).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"wrap_info\":null,\n   \"warnings\":null,\n   \"auth\":null,\n   \"data\":{\n      \"months\":[\n         {\n            \"timestamp\":\"2021-01-01T00:00:00Z\",\n            \"counts\":{\n               \"entity_clients\":10,\n               \"non_entity_clients\":10,\n               \"secret_syncs\":0,\n               \"acme_clients\":0,\n               \"clients\":20\n            },\n            \"namespaces\":[\n               {\n                  \"namespace_id\":\"root\",\n                  \"namespace_path\":\"\",\n                  \"counts\":{\n                     \"entity_clients\":5,\n                     \"non_entity_clients\":5,\n                     \"secret_syncs\":0,\n                     \"acme_clients\":0,\n                     \"clients\":10\n                  },\n                  \"mounts\":[\n                     {\n                        \"mount_path\":\"auth/up1/\",\n                        \"mount_type\":\"userpass/\",\n                        \"counts\":{\n                           \"entity_clients\":0,\n                           \"non_entity_clients\":5,\n                           \"secret_syncs\":0,\n                           \"acme_clients\":0,\n                           \"clients\":5\n                        }\n                     },\n                     {\n                        \"mount_path\":\"auth/up2/\",\n                        \"mount_type\":\"userpass/\",\n                        \"counts\":{\n                           \"entity_clients\":5,\n                           \"non_entity_clients\":0,\n                           \"secret_syncs\":0,\n                           \"acme_clients\":0,\n                           \"clients\":5\n                        }\n                     }\n                  ]\n               },\n               {\n                  \"namespace_id\":\"s07UR\",\n                  \"namespace_path\":\"ns1/\",\n                  \"counts\":{\n                     \"entity_clients\":5,\n                     \"non_entity_clients\":5,\n                     \"secret_syncs\":0,\n                     \"acme_clients\":0,\n                     \"clients\":10\n                  },\n                  \"mounts\":[\n                     {\n                        \"mount_path\":\"auth/up1/\",\n                        \"mount_type\":\"userpass/\",\n                        \"counts\":{\n                           \"entity_clients\":0,\n                           \"non_entity_clients\":5,\n                           \"secret_syncs\":0,\n                           \"acme_clients\":0,\n                           \"clients\":5\n                        }\n                     },\n                     {\n                        \"mount_path\":\"auth/up2/\",\n                        \"mount_type\":\"userpass/\",\n                        \"counts\":{\n                           \"entity_clients\":5,\n                           \"non_entity_clients\":0,\n                           \"secret_syncs\":0,\n                           \"acme_clients\":0,\n                           \"clients\":5\n                        }\n                     }\n                  ]\n               }\n            ],\n            \"new_clients\":{\n               \"counts\":{\n                  \"entity_clients\":10,\n                  \"non_entity_clients\":10,\n                  \"secret_syncs\":0,\n                  \"acme_clients\":0,\n                  \"clients\":20\n               },\n               \"namespaces\":[\n                  {\n                     \"namespace_id\":\"root\",\n                     \"namespace_path\":\"\",\n                     \"counts\":{\n                        \"entity_clients\":5,\n                        \"non_entity_clients\":5,\n                        \"secret_syncs\":0,\n                        \"acme_clients\":0,\n                        \"clients\":10\n                     },\n                     \"mounts\":[\n                        {\n                           \"mount_path\":\"auth/up1/\",\n                           \"mount_type\":\"userpass/\",\n                           \"counts\":{\n                              \"entity_clients\":0,\n                              \"non_entity_clients\":5,\n                              \"secret_syncs\":0,\n                              \"acme_clients\":0,\n                              \"clients\":5\n                           }\n                        },\n                        {\n                           \"mount_path\":\"auth/up2/\",\n                           \"mount_type\":\"userpass/\",\n                           \"counts\":{\n                              \"entity_clients\":5,\n                              \"non_entity_clients\":0,\n                              \"secret_syncs\":0,\n                              \"acme_clients\":0,\n                              \"clients\":5\n                           }\n                        }\n                     ]\n                  },\n                  {\n                     \"namespace_id\":\"s07UR\",\n                     \"namespace_path\":\"ns1/\",\n                     \"counts\":{\n                        \"entity_clients\":5,\n                        \"non_entity_clients\":5,\n                        \"secret_syncs\":0,\n                        \"acme_clients\":0,\n                        \"clients\":10\n                     },\n                     \"mounts\":[\n                        {\n                           \"mount_path\":\"auth/up1/\",\n                           \"mount_type\":\"userpass/\",\n                           \"counts\":{\n                              \"entity_clients\":0,\n                              \"non_entity_clients\":5,\n                              \"secret_syncs\":0,\n                              \"acme_clients\":0,\n                              \"clients\":5\n                           }\n                        },\n                        {\n                           \"mount_path\":\"auth/up2/\",\n                           \"mount_type\":\"userpass/\",\n                           \"counts\":{\n                              \"entity_clients\":5,\n                              \"non_entity_clients\":0,\n                              \"secret_syncs\":0,\n                              \"acme_clients\":0,\n                              \"clients\":5\n                           }\n                        }\n                     ]\n                  }\n               ]\n            }\n         },\n         {\n            \"timestamp\":\"2021-04-01T00:00:00Z\",\n            \"counts\":{\n               \"entity_clients\":5,\n               \"non_entity_clients\":5,\n               \"secret_syncs\":3,\n               \"acme_clients\":1,\n               \"clients\":14\n            },\n            \"namespaces\":[\n               {\n                  \"namespace_id\":\"root\",\n                  \"namespace_path\":\"\",\n                  \"counts\":{\n                     \"entity_clients\":5,\n                     \"non_entity_clients\":5,\n                     \"secret_syncs\":0,\n                     \"acme_clients\":0,\n                     \"clients\":10\n                  },\n                  \"mounts\":[\n                     {\n                        \"mount_path\":\"auth/up1/\",\n                        \"mount_type\":\"userpass/\",\n                        \"counts\":{\n                           \"entity_clients\":0,\n                           \"non_entity_clients\":5,\n                           \"secret_syncs\":0,\n                           \"acme_clients\":0,\n                           \"clients\":5\n                        }\n                     },\n                     {\n                        \"mount_path\":\"auth/up2/\",\n                        \"mount_type\":\"userpass/\",\n                        \"counts\":{\n                           \"entity_clients\":5,\n                           \"non_entity_clients\":0,\n                           \"secret_syncs\":0,\n                           \"acme_clients\":0,\n                           \"clients\":5\n                        }\n                     }\n                  ]\n               }\n            ],\n            \"new_clients\":{\n               \"counts\":{\n                  \"entity_clients\":5,\n                  \"non_entity_clients\":5,\n                  \"secret_syncs\":3,\n                  \"acme_clients\":1,\n                  \"clients\":14\n               },\n               \"namespaces\":[\n                  {\n                     \"namespace_id\":\"root\",\n                     \"namespace_path\":\"\",\n                     \"counts\":{\n                        \"entity_clients\":5,\n                        \"non_entity_clients\":5,\n                        \"secret_syncs\":3,\n                        \"acme_clients\":1,\n                        \"clients\":14\n                     },\n                     \"mounts\":[\n                        {\n                           \"mount_path\":\"auth/up1/\",\n                           \"mount_type\":\"userpass/\",\n                           \"counts\":{\n                              \"entity_clients\":0,\n                              \"non_entity_clients\":5,\n                              \"secret_syncs\":0,\n                              \"acme_clients\":0,\n                              \"clients\":5\n                           }\n                        },\n                        {\n                           \"mount_path\":\"auth/up2/\",\n                           \"mount_type\":\"userpass/\",\n                           \"counts\":{\n                              \"entity_clients\":5,\n                              \"non_entity_clients\":0,\n                              \"secret_syncs\":0,\n                              \"acme_clients\":0,\n                              \"clients\":5\n                           }\n                        },\n                        {\n                           \"mount_path\":\"secrets/kv1/\",\n                           \"mount_type\":\"kv/\",\n                           \"counts\":{\n                              \"entity_clients\":0,\n                              \"non_entity_clients\":0,\n                              \"secret_syncs\":2,\n                              \"acme_clients\":0,\n                              \"clients\":2\n                           }\n                        },\n                        {\n                           \"mount_path\":\"secrets/kv2/\",\n                           \"mount_type\":\"kv/\",\n                           \"counts\":{\n                              \"entity_clients\":0,\n                              \"non_entity_clients\":0,\n                              \"secret_syncs\":1,\n                              \"acme_clients\":0,\n                              \"clients\":1\n                           }\n                        },\n                        {\n                           \"mount_path\":\"secrets/pki/\",\n                           \"mount_type\":\"pki/\",\n                           \"counts\":{\n                              \"entity_clients\":0,\n                              \"non_entity_clients\":0,\n                              \"secret_syncs\":0,\n                              \"acme_clients\":1,\n                              \"clients\":1\n                           }\n                        }\n                     ]\n                  }\n               ]\n            }\n         }\n      ],\n      \"start_time\":\"2021-01-01T00:00:00Z\",\n      \"total\":{\n         \"entity_clients\":20,\n         \"non_entity_clients\":20,\n         \"secret_syncs\":5,\n         \"acme_clients\":3,\n         \"clients\":48\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting ACME EAB in Vault PKI (Shell)\nDESCRIPTION: This snippet demonstrates how to delete an ACME External Account Binding (EAB) using a cURL request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/pki/eab/bc8088d9-3816-5177-ae8e-d8393265f7dd\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress Annotations for Vault\nDESCRIPTION: Example YAML configuration for setting Ingress annotations when exposing Vault through Kubernetes Ingress. Shows two equivalent ways to define annotations for nginx ingress controller with TLS enablement.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  kubernetes.io/ingress.class: nginx\n  kubernetes.io/tls-acme: \"true\"\n# or\nannotations: |\n  kubernetes.io/ingress.class: nginx\n  kubernetes.io/tls-acme: \"true\"\n```\n\n----------------------------------------\n\nTITLE: Configure Cache Using Curl in Shell\nDESCRIPTION: The curl command configures the Transit Secrets Engine cache in Vault by setting the cache size. Requires a valid Vault token and JSON payload specifying the cache size, and must be followed by a reload command for changes to take effect.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_73\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\"\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/cache-config\n```\n\n----------------------------------------\n\nTITLE: Read Connection Configuration with cURL\nDESCRIPTION: This cURL command retrieves the configuration settings for a specific database connection from Vault, using a GET request to the /database/config/:name endpoint. Requires a valid Vault token for execution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/database/config/mysql\n```\n\n----------------------------------------\n\nTITLE: Create/Update ACL Policy Payload\nDESCRIPTION: JSON payload for creating or updating an ACL policy\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policy\": \"path \\\"secret/foo\\\" {...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Tokenization Transformation - cURL Request\nDESCRIPTION: Sample cURL request for creating or updating a tokenization transformation. The request sends a POST to the transformation endpoint with the JSON payload containing configuration parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/transformations/tokenization/example-transformation\n```\n\n----------------------------------------\n\nTITLE: Listing Locked Users - HTTP GET Request\nDESCRIPTION: Makes a GET request to retrieve information about all locked users across namespaces in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/user-lockout.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/locked-users\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Service Account Token Generation Response\nDESCRIPTION: Sample JSON response when generating a Kubernetes service account token. Contains the generated token and metadata including lease information and service account details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"58fefc6c-5195-c17a-94f2-8f889f3df57c\",\n  \"lease_id\": \"kubernetes/creds/default-role/aWczfcfJ7NKUdiirJrPXIs38\",\n  \"renewable\": false,\n  \"lease_duration\": 3600,\n  \"data\": {\n    \"service_account_name\": \"default\",\n    \"service_account_namespace\": \"default\",\n    \"service_account_token\": \"eyJhbG...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Token by Role Using Shell\nDESCRIPTION: A shell command to delete tokens based on their plaintext. This is accomplished by sending a DELETE request using `curl`, where `role_name` is part of the URL, identifying which role's tokens should be removed. Authentication requires the `X-Vault-Token` header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_71\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transform/tokenized/example-role\n```\n\n----------------------------------------\n\nTITLE: Retrieving EST Configuration in Vault PKI Enterprise (Shell)\nDESCRIPTION: This snippet demonstrates how to fetch the current EST (Enrollment over Secure Transport) configuration using a GET request to the Vault API in Enterprise edition.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/est\n```\n\n----------------------------------------\n\nTITLE: Retrieving Dynamic Role Credentials - Shell Request\nDESCRIPTION: Example GET request to retrieve credentials for a dynamic LDAP role from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/ldap/creds/dynamic-role\n```\n\n----------------------------------------\n\nTITLE: Creating AES-256-GCM96 Key\nDESCRIPTION: Command to create a new AES-256-GCM96 key in the key management system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault write keymgmt/key/aes256-gcm96 type=\"aes256-gcm96\"\n```\n\n----------------------------------------\n\nTITLE: Encoding Input Value - HashiCorp Vault Command\nDESCRIPTION: This snippet encodes a credit card number using the 'transform/encode' endpoint with a named role 'payments'. Encoded values are transformed using specified transformation methods, maintaining the format and structure.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transform/encode/payments value=1111-2222-3333-4444\nKey              Value\n---              -----\nencoded_value    9300-3376-4943-8903\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Authentication in Vault\nDESCRIPTION: Command to enable the userpass authentication method in Vault for user management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/identity/oidc-provider.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable userpass\n```\n\n----------------------------------------\n\nTITLE: GET Request to Read Details of a Specific Roleset\nDESCRIPTION: Shell command to retrieve the details of a specified roleset from Vault. The operation requires the roleset's name and a Vault token for authorization. The response provides comprehensive data about the roleset such as secret type, service account email, and bindings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-token-roleset\n```\n\n----------------------------------------\n\nTITLE: Trimming Old KMS Key Versions\nDESCRIPTION: Command to delete all KMS crypto key versions that are older than the configured minimum version. This makes it impossible to use older keys for encryption, decryption, or signing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write -f gcpkms/keys/trim/my-key\n```\n\n----------------------------------------\n\nTITLE: OIDC Scope: Sample Response\nDESCRIPTION: This is a sample JSON response from reading an OIDC scope. It includes the description and template of the scope. The template can contain dynamic Vault identity information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n      \"description\":\"A simple scope example.\",\n      \"template\":\"{ \\\"groups\\\": {{identity.entity.groups.names}} }\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading GitHub Auth Configuration with cURL\nDESCRIPTION: Shell command using cURL to retrieve the current GitHub auth method configuration. Requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/github/config\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP MFA Secret\nDESCRIPTION: This curl command sends a GET request to generate a TOTP MFA secret for the 'my_totp' method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/totp/my_totp/generate\n```\n\n----------------------------------------\n\nTITLE: MongoDB Revocation Statement JSON Format\nDESCRIPTION: Sample revocation statement for MongoDB user deletion. This simple JSON structure specifies which database the revocation operation should target.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodb.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"db\": \"vault-db\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making POST Requests with curl in Shell\nDESCRIPTION: This snippet shows how to use curl to send a POST request with a JSON payload to create a Kerberos group in Vault. It requires a Vault token for authentication and the payload JSON file containing the request data. The expected output is the HTTP response from the Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \\\"X-Vault-Token: ...\\\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/kerberos/groups/admins\n```\n\n----------------------------------------\n\nTITLE: Retrieving Azure Auth Role Configuration\nDESCRIPTION: cURL command to retrieve the configuration details of a previously registered role in the Azure auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/auth/azure/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Reading a Roleset's Config in Vault\nDESCRIPTION: JSON response showcasing the attributes of a specified roleset in Vault. It includes secret types, service account email, and defined OAuth token scopes and bindings. Such data help in managing and auditing rolesets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"secret_type\": \"access_token\",\n    \"service_account_email\": \"vault-myroleset-XXXXXXXXXX@myproject.gserviceaccounts.com\",\n    \"service_account_project\": \"service-account-project\",\n    \"bindings\": {\n      \"project/mygcpproject\": [\"roles/viewer\"],\n      \"https://selflink/to/my/resource\": [\n        \"project/mygcpproject/roles/projcustomrole\",\n        \"organizations/myorg/roles/orgcustomrole\"\n      ]\n    },\n    \"token_scopes\": [\"https://www.googleapis.com/auth/cloud-platform\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Vault Authentication\nDESCRIPTION: This JSON response sample demonstrates a successful authentication attempt with HashiCorp Vault. It provides an 'auth' object with details such as the client token, token policies, lease duration, and renewal status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"auth\":{\n        \"client_token\":\"f33f8c72-924e-11f8-cb43-ac59d697597c\",\n        \"accessor\":\"0e9e354a-520f-df04-6867-ee81cae3d42d\",\n        \"token_policies\":[\n            \"default\",\n            \"dev\",\n            \"prod\"\n        ],\n        \"lease_duration\":2764800,\n        \"renewable\":true\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Data Key Generation\nDESCRIPTION: Example payload for generating a new data key with context.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"context\": \"Ab3==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log File Size Before Rotation in Vault CLI\nDESCRIPTION: This command line flag sets the maximum size of log files in bytes before Vault rotates them. When a log file reaches this size, Vault will create a new log file and continue logging. The example shows setting the log rotation size to 1 million bytes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/shared/flags/log-rotate-bytes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-log-rotate-bytes 1000000\n```\n\n----------------------------------------\n\nTITLE: OIDC Provider: Delete Request\nDESCRIPTION: This is a sample `curl` request to delete an OIDC provider by name. It sends a DELETE request to the specified endpoint, including the Vault token. Replace `...` with your Vault token and `test-provider` with the name of the provider to delete.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider\n```\n\n----------------------------------------\n\nTITLE: Create Store Schema Sample Request\nDESCRIPTION: cURL command to create/update a store schema using POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_46\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/stores/example-store/schema\n```\n\n----------------------------------------\n\nTITLE: Successful Event Subscription Example (Shell)\nDESCRIPTION: Shell command output showing successful subscription to Vault event notifications, including events for secret syncing and event watcher initialization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/instant-updates.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl describe vaultstaticsecret vault-static-secret-v2 -n vso-example\n...\nEvents:\n  Type    Reason               Age              From               Message\n  ----    ------               ----             ----               -------\n  Normal  SecretSynced         2s               VaultStaticSecret  Secret synced\n  Normal  EventWatcherStarted  2s (x2 over 2s)  VaultStaticSecret  Started watching events\n  Normal  SecretRotated        2s               VaultStaticSecret  Secret synced\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul kv_max_value_size in JSON\nDESCRIPTION: Example Consul server configuration snippet that increases the kv_max_value_size to 1024KB (1024000 bytes). This parameter controls the maximum size of data Vault can write as a value to one key in the Consul key/value store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_13\n\nLANGUAGE: plaintext\nCODE:\n```\n \"limits\": {\n     \"kv_max_value_size\": 1024000\n }\n```\n\n----------------------------------------\n\nTITLE: Checking Performance Replication Status using Shell\nDESCRIPTION: This snippet shows how to query the status of Performance Replication in Vault. This is an unauthenticated endpoint that returns information about replication mode, sync progress, and related details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/status\n```\n\n----------------------------------------\n\nTITLE: Sample Shell Request for Reading CRL Configuration\nDESCRIPTION: cURL command for retrieving the current CRL (Certificate Revocation List) configuration from the PKI secrets engine. This returns settings like expiry times and auto-rebuild options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_104\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/crl\n```\n\n----------------------------------------\n\nTITLE: Reading Group by Name - Vault Identity API (JSON Response)\nDESCRIPTION: This JSON response represents the data returned when querying a group by its name in Vault's Identity store. The data includes the group's ID, metadata, policies and other details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"alias\": {},\n    \"creation_time\": \"2018-09-19T22:02:04.395128091Z\",\n    \"id\": \"5a3a04a0-0c3a-a4c3-74e8-26b1adbeaece\",\n    \"last_update_time\": \"2018-09-19T22:02:04.395128091Z\",\n    \"member_entity_ids\": [],\n    \"member_group_ids\": null,\n    \"metadata\": {\n      \"foo\": \"bar\"\n    },\n    \"modify_index\": 1,\n    \"name\": \"testgroupname\",\n    \"parent_group_ids\": null,\n    \"policies\": [\"grouppolicy1\", \"grouppolicy2\"],\n    \"type\": \"internal\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sync Association between Vault and AWS Secrets Manager\nDESCRIPTION: This shell command creates an association between a Vault secret and an AWS Secrets Manager destination. It specifies the mount path and secret name to be synced.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/awssm.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/aws-sm/my-awssm-1/associations/set \\\n\tmount='my-kv' \\\n\tsecret_name='my-secret'\n```\n\n----------------------------------------\n\nTITLE: Reading GitHub User Policy Mapping with cURL\nDESCRIPTION: Shell command using cURL to retrieve the current policy mapping for a specific GitHub user. Requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/github/map/users/sethvargo\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Connection with PEM JSON in Vault\nDESCRIPTION: Example JSON structure for configuring a Cassandra connection using PEM data. This includes client certificate, private key, and CA chain information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/cassandra.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"certificate\": \"<client certificate as a PEM>\",\n  \"private_key\": \"<private key as a PEM>\",\n  \"ca_chain\": [\"<CA as a PEM>\", \"<Additional PEM for the CA chain if needed\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Cassandra Role Sample Request\nDESCRIPTION: cURL request to create or update a role definition for Cassandra credentials using the provided JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/cassandra/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Creating KMS Key with XKS in AWS CLI\nDESCRIPTION: This command creates a new KMS key associated with the XKS key ID in the custom key store. It specifies the origin as EXTERNAL_KEY_STORE and returns detailed metadata about the created key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws kms create-key --custom-key-store-id cks-d7a55fe93d63191d6 \\\n    --xks-key-id abc123 --origin EXTERNAL_KEY_STORE\n{\n    \"KeyMetadata\": {\n        \"AWSAccountId\": \"111111111111\",\n        \"KeyId\": \"a93f205a-2a37-4338-aa64-92b4a4b0b67d\",\n        \"Arn\": \"arn:aws:kms:us-east-2:111111111111:key/a93f205a-2a37-4338-aa64-92b4a4b0b67d\",\n        \"CreationDate\": \"2022-12-22T11:03:23.695000-08:00\",\n        \"Enabled\": true,\n        \"Description\": \"\",\n        \"KeyUsage\": \"ENCRYPT_DECRYPT\",\n        \"KeyState\": \"Enabled\",\n        \"Origin\": \"EXTERNAL_KEY_STORE\",\n        \"CustomKeyStoreId\": \"cks-16460f66b34705025\",\n        \"KeyManager\": \"CUSTOMER\",\n        \"CustomerMasterKeySpec\": \"SYMMETRIC_DEFAULT\",\n        \"KeySpec\": \"SYMMETRIC_DEFAULT\",\n        \"EncryptionAlgorithms\": [\n            \"SYMMETRIC_DEFAULT\"\n        ],\n        \"MultiRegion\": false,\n        \"XksKeyConfiguration\": {\n            \"Id\": \"abc123\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verify Generated Nomad ACL Token Info (shell-session)\nDESCRIPTION: Verifies the generated Nomad ACL token by checking its properties in Nomad using the accessor ID. This step ensures the token from Vault is valid and correctly configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/nomad.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl token info a715994d-f5fd-1194-73df-ae9dad616307\nAccessor ID  = a715994d-f5fd-1194-73df-ae9dad616307\nSecret ID    = b31fb56c-0936-5428-8c5f-ed010431aba9\nName         = Vault example root 1505945527022465593\nType         = client\nGlobal       = false\nPolicies     = [readonly]\nCreate Time  = 2017-09-20 22:12:07.023455379 +0000 UTC\nCreate Index = 138\nModify Index = 138\n```\n\n----------------------------------------\n\nTITLE: Deregistering a Plugin in Vault\nDESCRIPTION: Example of deregistering an authentication plugin named 'my-custom-plugin' from Vault's plugin catalog using the 'plugin deregister' command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/deregister.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin deregister auth my-custom-plugin\nSuccess! Deregistered plugin (if it was registered): my-custom-plugin\n```\n\n----------------------------------------\n\nTITLE: Disable File Audit Device\nDESCRIPTION: This example demonstrates how to disable a file-type audit device located at the default path, `file/`.  The command disables the audit device, preventing further logging to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/disable.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit disable file/\nSuccess! Disabled audit device (if it was enabled) at: file/\n```\n\n----------------------------------------\n\nTITLE: Configuring TOTP MFA Method in Vault\nDESCRIPTION: Sets up a TOTP method with specific configuration parameters like issuer, period, key size, algorithm, and digits\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault write identity\\/mfa\\/method\\/totp \\n   generate=true \\n   issuer=Vault \\n   period=30 \\n   key_size=30 \\n   algorithm=SHA256 \\n   digits=6\n```\n\n----------------------------------------\n\nTITLE: Generating AliCloud Credentials with GET Request\nDESCRIPTION: Example of how to generate dynamic RAM credentials for a specific role by sending a GET request to the credentials endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/alicloud/creds/example-role\n```\n\n----------------------------------------\n\nTITLE: Listing Transformations with cURL in Vault Transform API\nDESCRIPTION: Makes a LIST request to retrieve all transformations from the Vault Transform Secrets Engine using cURL with an authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/transform/transformation\n```\n\n----------------------------------------\n\nTITLE: Deleting a Transform Role with curl Request\nDESCRIPTION: Example curl command for deleting an existing role in the Transform secrets engine using the DELETE HTTP method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/transform/role/example-role\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response Format for Vault Client Activity\nDESCRIPTION: Example JSON response showing client activity records with entity details, authentication information, and metadata. Each record contains information about the client, namespace, mount points, policies and various metadata fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity_name\": \"admin\",\n  \"entity_alias_name\": \"admin\",\n  \"local_entity_alias\": false,\n  \"client_id\": \"3f210722-7210-98e8-1f0d-e6a39ffb29c6\",\n  \"client_type\": \"entity\",\n  \"namespace_id\": \"root\",\n  \"namespace_path\": \"\",\n  \"mount_accessor\": \"auth_userpass_a005db73\",\n  \"mount_type\": \"userpass\",\n  \"mount_path\": \"auth/userpass/\",\n  \"timestamp\": \"2024-07-10T09:33:51Z\",\n  \"policies\": [\n    \"secret-read\",\n    \"secret-list\",\n    \"secret-write\",\n    \"secret-delete\"\n  ],\n  \"entity_metadata\": {\n    \"email_address\": \"admin@example.com\"\n  },\n  \"entity_alias_metadata\": {},\n  \"entity_alias_custom_metadata\": {\n    \"region\": \"west\",\n    \"group\": \"san_francisco\",\n    \"contact_email\": \"admin@example.com\"\n  },\n  \"entity_group_ids\": [\n    \"746fbaf9-ffeb-62b9-7f0b-42d79ca0883f\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sealing Vault Server Using Operator Command\nDESCRIPTION: Example command demonstrating how to seal a Vault server using the operator seal command. When executed successfully, it returns a confirmation message indicating the Vault is sealed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/seal.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator seal\nSuccess! Vault is sealed.\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Strategy for Vault Agent Injector\nDESCRIPTION: This YAML snippet configures the update strategy for the Vault Agent Injector deployment. It shows both YAML map and multi-line string formats for a RollingUpdate strategy with 25% maxSurge and maxUnavailable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy:\n  rollingUpdate:\n    maxSurge: 25%\n    maxUnavailable: 25%\n  type: RollingUpdate\n# or\nstrategy: |\n  rollingUpdate:\n    maxSurge: 25%\n    maxUnavailable: 25%\n  type: RollingUpdate\n```\n\n----------------------------------------\n\nTITLE: Rekey with PGP Encryption\nDESCRIPTION: Initializes a rekey operation with PGP encryption for the unseal keys using Keybase identities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey \\\n    -init \\\n    -key-shares=3 \\\n    -key-threshold=2 \\\n    -pgp-keys=\"keybase:hashicorp,keybase:jefferai,keybase:sethvargo\"\n```\n\n----------------------------------------\n\nTITLE: Reading KMIP Engine Configuration - Response\nDESCRIPTION: This JSON snippet shows the structure of the response received when reading the KMIP engine configuration. It includes parameters such as listen addresses, connection timeout, server hostnames, and TLS settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"listen_addrs\": [\"127.0.0.1:5696\", \"192.168.1.2:9000\"],\n    \"connection_timeout\": \"1s\",\n    \"server_hostnames\": [\"myhostname1\", \"myhostname2\"],\n    \"server_ips\": [\"192.168.1.2\"],\n    \"tls_ca_key_type\": \"ec\",\n    \"tls_ca_key_bits\": 521,\n    \"tls_min_version\": \"tls11\",\n    \"default_tls_client_key_type\": \"ec\",\n    \"default_tls_client_key_bits\": 224,\n    \"default_tls_client_ttl\": 86400\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Specific LDAP Group in Kerberos Auth\nDESCRIPTION: Example request to retrieve the policies associated with a specific LDAP group in the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/kerberos/groups/admins\n```\n\n----------------------------------------\n\nTITLE: Raw Storage Update Request Payload in Vault\nDESCRIPTION: Shows the JSON payload structure for updating raw storage data in Vault. The payload requires a 'value' field containing the data to be stored.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/raw.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"{\\\"foo\\\": \\\"bar\\\"}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Secondary Vault\nDESCRIPTION: These commands initialize and unseal the first pod of the secondary Vault cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-secondary-0 -- vault operator init\nkubectl exec -ti vault-secondary-0 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Generating Core Engine Component in Ember\nDESCRIPTION: Command to generate a template-only component in the core engine for reusable components.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nember g component foo -ir core\n```\n\n----------------------------------------\n\nTITLE: Response for Listing OIDC Clients\nDESCRIPTION: The JSON response format when listing OIDC clients. It returns key information about each client including access token TTL, assignments, client ID, client type, ID token TTL, key, and redirect URIs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"my-app\": {\n        \"access_token_ttl\": 86400,\n        \"assignments\": [\n          \"allow_all\"\n        ],\n        \"client_id\": \"wGr981oYLJbcr4zrUriYxjxSc80JL7HW\",\n        \"client_type\": \"confidential\",\n        \"id_token_ttl\": 86400,\n        \"key\": \"default\",\n        \"redirect_uris\": [\n          \"http://localhost:5555/callback\"\n        ]\n      }\n    },\n    \"keys\": [\n      \"my-app\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Transit Secret Engine: Add Associated Data Parameter\nDESCRIPTION: This release note documents the addition of the `associated_data` parameter for the Vault Transit Secret Engine. This parameter allows users to include additional authenticated data (AAD) when using Authenticated Encryption with Associated Data (AEAD) ciphers, improving security by providing integrity checks during encryption and decryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17638.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/transit: Add associated_data parameter for additional authenticated data in AEAD ciphers\n```\n\n----------------------------------------\n\nTITLE: Requesting Storage Prefix Tree in Vault\nDESCRIPTION: This request retrieves a list of mount entries in the router's storage prefix tree. It requires a root token or sudo privileges and returns information about mounted backends organized by their storage prefixes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/internal/inspect/router/storage\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace Selector for Vault Agent Injector in Kubernetes\nDESCRIPTION: This YAML snippet configures the namespaceSelector for the admission webhook controller to limit which namespaces are eligible for Vault Agent injection. It uses matchLabels to only enable injection in namespaces with the 'sidecar-injector: enabled' label.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nnamespaceSelector:\n  matchLabels:\n    sidecar-injector: enabled\n```\n\n----------------------------------------\n\nTITLE: Configure Vault CF API Access\nDESCRIPTION: Enables and configures CF authentication method in Vault, requiring CA certificates, CF API address, and credentials. Assumes Vault CLI is installed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth enable cf\n\n$ vault write auth/cf/config \\\n      identity_ca_certificates=@ca.crt \\\n      cf_api_addr=https://api.dev.cfdev.sh \\\n      cf_username=vault \\\n      cf_password=pa55w0rd \\\n      cf_api_trusted_certificates=@cfapi.crt\n```\n\n----------------------------------------\n\nTITLE: Templated Policy for Kubernetes Service Account Namespace in HCL\nDESCRIPTION: This policy snippet allows reading paths associated with the Kubernetes service account namespace of the identity. It uses the mount accessor to access metadata from the Kubernetes authentication plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/data/{{identity.entity.aliases.auth_kubernetes_xxxx.metadata.service_account_namespace}}/*\" {\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting CORS Settings with cURL in Vault API\nDESCRIPTION: This request removes any existing CORS configuration from a Vault server using the DELETE method. It requires an authentication token with sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-cors.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/config/cors\n```\n\n----------------------------------------\n\nTITLE: Wrapping Key Response - JSON\nDESCRIPTION: Sample JSON response when retrieving the wrapping key. The response provides a public_key field containing the 4096-bit RSA public key that should be used for encrypting key material for import.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"public_key\": \"...\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Static Account (cURL)\nDESCRIPTION: cURL command to delete an existing static account from the GCP secrets engine by sending a DELETE request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/gcp/static-account/my-token-account\n```\n\n----------------------------------------\n\nTITLE: Combining CRLs - Request Payload\nDESCRIPTION: JSON payload for combining multiple CRLs from the same issuer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_112\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crl_number\": \"10\",\n  \"next_update\": \"24h\",\n  \"crls\": [\"<PEM crl 1>\", \"<PEM crl 2>\"],\n  \"format\": \"pem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Hash Operation\nDESCRIPTION: Response format showing the hashed data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sum\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Key Encryption Key (KEK) in Vault Transit\nDESCRIPTION: Shell command to rotate the asymmetric key in Vault's Transit secret engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/rotation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f transit/keys/ekm-encryption-key/rotate\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Static Role Information with GET Request\nDESCRIPTION: Demonstrates how to retrieve information about a static role named 'hashicorp' from the LDAP secrets engine using a GET request to the /ldap/static-role endpoint. Requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/ldap/static-role/hashicorp\n```\n\n----------------------------------------\n\nTITLE: Creating Password Policy\nDESCRIPTION: Example of creating a password policy with specific character requirements and length.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/policies/password/example policy=-<<EOF\n\n     length=20\n\n     rule \"charset\" {\n       charset = \"abcdefghij0123456789\"\n       min-chars = 1\n     }\n\n     rule \"charset\" {\n       charset = \"!@#$%^&*STUVWXYZ\"\n       min-chars = 1\n     }\n\n   EOF\n```\n\n----------------------------------------\n\nTITLE: Complex Filter Expression Example in Vault\nDESCRIPTION: Shows how to combine multiple filter expressions using Boolean logic and parentheses to create complex filtering rules.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/filtering.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n(product/name == \"Vault\") and (timestamp < \"2024-02-01\")\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate Path via Environment Variable\nDESCRIPTION: Example showing how to set the path to a PEM-encoded CA certificate file using an environment variable for Vault client authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/client-cert.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_CLIENT_CERT=\"/path/to/certs/mycert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Vault Core and Replication Metrics\nDESCRIPTION: Comprehensive metrics for Vault core operations, including leadership, replication status, performance standbys, and seal/unseal events\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/all.mdx#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/core/active.mdx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Password Policy in Vault\nDESCRIPTION: HCL configuration for a password policy that mirrors the behavior of the deprecated 'length' field in the LDAP secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_17\n\nLANGUAGE: hcl\nCODE:\n```\nlength=<length>\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering the Engine in app.js\nDESCRIPTION: App.js configuration required to register the new engine with the main Vault application, defining dependencies, service aliases, and external route mappings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/ember-engines.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: BUSL-1.1\n */\n\nimport Application from '@ember/application';\nimport Resolver from 'ember-resolver';\nimport loadInitializers from 'ember-load-initializers';\nimport config from 'vault/config/environment';\n\nexport default class App extends Application {\n\t...\n  engines = {\n    <engine-name>: {\n      dependencies: {\n        services: [{ 'app-router': 'router' }, 'store', 'secret-mount-path', 'flash-messages', <any-other-dependencies-you-have>],\n        externalRoutes: {\n          secrets: 'vault.cluster.secrets.backends',\n        },\n      },\n    },\n  };\n}\n\nloadInitializers(App, config.modulePrefix);\n```\n\n----------------------------------------\n\nTITLE: Reading Subkeys Using Vault API\nDESCRIPTION: Call the /{plugin_mount_path}/subkeys/{secret_path} endpoint to fetch a list of available subkeys on the given path. This method replaces non-map keys and leaf keys with null.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/read-subkey.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                       \\\n   --request GET                             \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n   ${VAULT_ADDR}/v1/<plugin_mount_path>/subkeys/<secret_path>\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                       \\\n   --request GET                             \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n   ${VAULT_ADDR}/v1/shared/subkeys/dev/square-api | jq\n\n{\n  \"request_id\": \"bfeac3c5-f4dc-37b2-8909-3b15121cfd20\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"metadata\": {\n      \"created_time\": \"2024-11-20T20:00:13.385182722Z\",\n      \"custom_metadata\": null,\n      \"deletion_time\": \"\",\n      \"destroyed\": false,\n      \"version\": 11\n    },\n    \"subkeys\": {\n      \"prod\": null,\n      \"sandbox\": null,\n      \"smoke\": null\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null,\n  \"mount_type\": \"kv\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Token Audiences (Shell Script)\nDESCRIPTION: This snippet demonstrates how to verify the audiences of a Kubernetes service account token by decoding the JWT using `cut` and `base64`. It extracts the \"aud\" (audience) claim from the decoded JWT. The full output is truncated with '...'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo 'eyJhbGc...' | cut -d'.' -f2 | base64 -d\n{\"aud\":[\"another-custom-audience\"]...\n```\n\n----------------------------------------\n\nTITLE: Vault Core Bug Fix - Entity Alias Case Sensitivity\nDESCRIPTION: Release note entry documenting a change to disable case sensitivity checking when validating allowed entity aliases during token creation operations. This change helps prevent validation issues caused by case mismatches.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10743.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: Turn off case sensitivity for allowed entity alias check during token create operation.\n```\n\n----------------------------------------\n\nTITLE: Reloading a Vault Plugin\nDESCRIPTION: This snippet demonstrates how to reload a Vault plugin using the `vault plugin reload` command. This forces Vault to restart all instances of the plugin, using the pinned version. The command requires the plugin type, name, and scope (global).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin reload -type=secret -plugin=my-secret-plugin -scope=global\n    Success! Reloading plugin: my-secret-plugin, reload_id: 98b1e875-4217-745d-07f2-93d14219fb3c\n```\n\n----------------------------------------\n\nTITLE: Distributing a Key to KMS Provider - cURL Example\nDESCRIPTION: Sample cURL command for distributing a key to a KMS provider using the POST method with a payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/keymgmt/kms/example-kms/key/example-key\n```\n\n----------------------------------------\n\nTITLE: Basic HMAC Request Payload\nDESCRIPTION: Simple JSON payload containing a base64-encoded input string for HMAC generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_51\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"adba32==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Creating Read-Only Policy with Specific Names\nDESCRIPTION: Example showing how to create a read-only policy named 'ro-saml-adfs' for the 'adfs-kv' path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy write ro-saml-adfs - << EOF\n# Read and list policy for the AD FS KV mount\npath \"adfs-kv/*\" {\n  capabilities = [\"read\", \"list\"]\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Template Read Response in Vault Transform API\nDESCRIPTION: JSON response structure returned when reading a template configuration, showing all template properties including pattern, alphabet, and formatting options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"alphabet\": \"builtin/numeric\",\n    \"decode_formats\": {\n      \"first-three\": \"$1\",\n      \"last-four\": \"$3\"\n    },\n    \"encode_format\": \"$1-$2-$3\",\n    \"pattern\": \"(\\\\d{3})[-/](\\\\d{2})[-/](\\\\d{4})\",\n    \"type\": \"regex\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Read Kubernetes Configuration Response (Vault)\nDESCRIPTION: This is a sample response showing the data returned when reading the Kubernetes configuration. The response includes the `kubernetes_host`, `kubernetes_ca_cert`, and `disable_local_ca_jwt` settings. Sensitive information like credentials are not included in the response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"kubernetes_host\": \"https://192.168.99.100:8443\",\n    \"kubernetes_ca_cert\": \"-----BEGIN CERTIFICATE-----.....-----END CERTIFICATE-----\",\n    \"disable_local_ca_jwt\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Vault HA Status with curl\nDESCRIPTION: This shell command demonstrates how to make a GET request to the /sys/ha-status endpoint in Vault's HTTP API. It requires an authentication token specified in the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/ha-status.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/ha-status\n```\n\n----------------------------------------\n\nTITLE: Displaying Raft Autopilot Status Output in Vault Enterprise Edition\nDESCRIPTION: Example output of the Vault Enterprise Raft Autopilot status command showing additional enterprise features like redundancy zones and upgrade information across multiple nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nRedundancy Zones:\n   a\n      Servers: vault_1, vault_2, vault_5\n      Voters: vault_1\n      Failure Tolerance: 2\n   b\n      Servers: vault_3, vault_4\n      Voters: vault_3\n      Failure Tolerance: 1\nUpgrade Info:\n   Status: await-new-voters\n   Target Version: 1.17.5\n   Target Version Voters:\n   Target Version Non-Voters: vault_5\n   Other Version Voters: vault_1, vault_3\n   Other Version Non-Voters: vault_2, vault_4\n   Redundancy Zones:\n      a\n         Target Version Voters:\n         Target Version Non-Voters: vault_5\n         Other Version Voters: vault_1\n         Other Version Non-Voters: vault_2\n      b\n         Target Version Voters:\n         Target Version Non-Voters:\n         Other Version Voters: vault_3\n         Other Version Non-Voters: vault_4\n```\n\n----------------------------------------\n\nTITLE: Example API Restoration Command\nDESCRIPTION: Example API call showing how to restore versions 5 and 8 of a secret using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/undelete-data.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl                                       \\\n    --request POST                           \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n    --data '{\"versions\":[5,8]}'              \\\n    ${VAULT_ADDR}/v1/shared/undelete/dev/square-api | jq\n```\n\n----------------------------------------\n\nTITLE: Vault Recovery Key Verification Response\nDESCRIPTION: This JSON response shows the output from the Vault server after verifying a recovery key.  The 'nonce' field confirms the nonce used in the operation, and the 'complete' field indicates whether the rekey operation is complete. A 'true' value signifies that the rekeying process has finished.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nonce\": \"5827bbc1-0110-5725-cc21-beddc129d942\",\n  \"complete\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SHA-256 Checksum of Plugin - Shell Script\nDESCRIPTION: This snippet computes the SHA-256 checksum of the installed Venafi backend plugin binary, which is required for registering the plugin in Vault's system catalog.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ SHA256=$(sha256sum /etc/vault/vault_plugins/venafi-pki-backend| cut -d' ' -f1)\n```\n\n----------------------------------------\n\nTITLE: ACL Policy with Multiple Factors and Controlled Capabilities in Vault\nDESCRIPTION: This policy demonstrates how multiple factors and `controlled_capabilities` work together. `read` operations require one admin approval, `create` operations require one superuser approval and one admin approval, and `list` requires no extra approvals.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/control-groups.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n\"path \\\"kv/*\\\" {\\n    capabilities = [\\\"read\\\", \\\"list\\\", \\\"create\\\"]\\n    control_group = {\\n        controlled_capabilities = [\\\"read\\\"]\\n        factor \\\"admin\\\" {\\n            identity {\\n                group_names = [\\\"admin\\\"]\\n                approvals = 1\\n            }\\n        }\\n        factor \\\"superuser\\\" {\\n            controlled_capabilities = [\\\"create\\\"]\\n            identity {\\n                group_names = [\\\"superuser\\\"]\\n                approvals = 1\\n            }\\n        }\\n    }\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Certificate Validity and Constraint Parameters\nDESCRIPTION: Parameters defining certificate validity period, name constraints, and subject field configurations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_59\n\nLANGUAGE: yaml\nCODE:\n```\nttl: string\nformat: string\nnot_before_duration: duration\nnot_after: string\npermitted_dns_domains: string\nexcluded_dns_domains: string\n```\n\n----------------------------------------\n\nTITLE: Defining ACL Policy Template for Identity Management in Vault - HCL\nDESCRIPTION: This snippet demonstrates the definition of ACL policies using Vault's policy language (HCL). The templated values within paths dynamically resolve based on the requester's entity token metadata, allowing for a flexible policy architecture. It showcases how to utilize entity metadata and aliases effectively for access control.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/namespace-structure.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n\"path \\\"kvv1-{{identity.entity.metadata.team_name}}/*\\\" {\\n   capabilities = [ \\\"create\\\", \\\"read\\\", \\\"update\\\", \\\"delete\\\", \\\"list\\\" ]\\n}\\n\\npath \\\"transit/encrypt/{{identity.entity.aliases.auth_approle_b2560218.name}}\\\" {\\n   capabilities = [ \\\"update\\\" ]\\n}\\n\"\n```\n\n----------------------------------------\n\nTITLE: Sample payload for certificate signing\nDESCRIPTION: This JSON payload is used to request a certificate using a Certificate Signing Request (CSR). The 'csr' field must contain the base64 PEM-encoded CSR. This request is sent to the '/pki/sign-verbatim' endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"csr\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Token Identity Information\nDESCRIPTION: Command to examine the token and retrieve its entity_id, which represents the identity that will be used for MFA validation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ vault token lookup 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: Retrieving Key Rotation Configuration from Vault\nDESCRIPTION: Shell command using curl to send a GET request to retrieve the current automatic key rotation configuration from Vault. Requires authentication via a Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rotate-config.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request GET \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/rotate/config\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Root Certificate Generation in Vault PKI\nDESCRIPTION: This JSON response shows the structure of data returned when generating a root certificate. It includes the certificate, issuing CA, serial number, and other relevant details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"expiration\": \"1654105687\",\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:58\",\n    \"issuer_id\": \"7b493f17-6c08-ff73-cf1a-99bfcc448a73\",\n    \"issuer_name\": \"\",\n    \"key_id\": \"22b82e37-529d-7251-7d78-3862bfd069ac\",\n    \"key_name\": \"\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: HA Mode Consul Service Registration Configuration\nDESCRIPTION: Configuration for Vault in HA mode, specifying the HTTP protocol in the address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {\n  address      = \"http://127.0.0.1:8500\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Certificate URLs Configuration - Shell\nDESCRIPTION: This shell command is used to fetch the currently configured URLs for certificates from the Vault PKI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_88\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/urls\n```\n\n----------------------------------------\n\nTITLE: Deleting CF Auth Role with cURL\nDESCRIPTION: Shell command for deleting a Cloud Foundry authentication role from Vault using a DELETE request. Requires a valid Vault token for authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/cf/roles/:role\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vault License from Existing Cluster\nDESCRIPTION: Command to extract the signed license from a running Vault cluster during migration to auto-loaded license process\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/faq.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault license get -signed\n```\n\n----------------------------------------\n\nTITLE: Reading Config - Shell Request\nDESCRIPTION: cURL command to retrieve the current OCI auth method configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/oci/config\n```\n\n----------------------------------------\n\nTITLE: Reading Static Account Configuration (cURL)\nDESCRIPTION: cURL command to retrieve the configuration details of an existing static account, including secret type, service account details, bindings, and token scopes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/static-account/my-token-account\n```\n\n----------------------------------------\n\nTITLE: Configuring GCP Auth with Service Account Credentials\nDESCRIPTION: JSON payload for configuring Google Cloud authentication with service account credentials. This specifies the service account details used by Vault to authenticate with GCP.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credentials\": \"{ \\\"type\\\": \\\"service_account\\\", \\\"project_id\\\": \\\"project-123456\\\", ...}\"\n}\n```\n\n----------------------------------------\n\nTITLE: GET Request for Reading GCP Engine Config in Vault\nDESCRIPTION: Command to read the current configuration of the GCP secrets engine in Vault via a GET request. The Vault token must be present in the header. The response provides configuration details without including sensitive credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/config\n```\n\n----------------------------------------\n\nTITLE: Listing Azure Roles (cURL)\nDESCRIPTION: cURL command to send a LIST request to retrieve all registered roles in the Azure secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/azure/roles\n```\n\n----------------------------------------\n\nTITLE: Installing Specific Version of Vault Helm Chart\nDESCRIPTION: This snippet shows how to install a specific version of the Vault Helm chart. It's useful when you need to deploy a particular version of Vault in your Kubernetes cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n@include 'helm/install.mdx'\n```\n\n----------------------------------------\n\nTITLE: List ACL Policies Request\nDESCRIPTION: Lists all configured ACL policies using the LIST HTTP method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -X LIST --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/acl\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ Role via cURL\nDESCRIPTION: Outlines how to delete a RabbitMQ role using cURL, requiring the Vault token and role name in the request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/rabbitmq/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Submit Verification Key - JSON Payload\nDESCRIPTION: Payload for submitting a verification key during rekey verification process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"A58d...\",\n  \"nonce\": \"5a27bbc1...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Vault Service Status in Linux\nDESCRIPTION: Verifies the Vault service status using systemctl to confirm it's running properly with the correct configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ systemctl status vault.service\n\nvault.service - \"HashiCorp Vault\"\n   Loaded: loaded (/lib/systemd/system/vault.service; disabled; vendor preset: enabled)\n   Active: active (running) since Thu 2024-09-05 13:58:45 UTC; 4s ago\n      Docs: https://developer.hashicorp.com/vault/docs\n   Main PID: 3145 (vault)\n      Tasks: 8 (limit: 2241)\n   Memory: 23.6M\n      CPU: 200ms\n   CGroup: /system.slice/vault.service\n            └─3145 /usr/bin/vault server -config=/etc/vault.d/vault.hcl\n```\n\n----------------------------------------\n\nTITLE: Creating a User in the Userpass Auth Method\nDESCRIPTION: This command creates a user in the userpass authentication method, associating the user with an access policy that includes Okta MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/userpass/users/testuser \\\n    password=testpassword \\\n    policies=okta-policy\n```\n\n----------------------------------------\n\nTITLE: Accessing Secret Data in Go Template\nDESCRIPTION: Demonstrates how to access and include secret data in a Go template within the Vault Secrets Operator. This example shows how to retrieve a password from the .Secrets input member.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/secret-transformation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{- printf \"password=%s\" (get .Secrets \"password\") -}}\n```\n\n----------------------------------------\n\nTITLE: Reading AliCloud Role Configuration - HTTP Request\nDESCRIPTION: HTTP GET request to retrieve the configuration of an existing AliCloud role from Vault. Requires a Vault token and the role name in the URL path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/alicloud/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Verifying Vault Service Status in Windows\nDESCRIPTION: Checks the status of the Vault service in Windows to confirm it's running properly after starting it with PowerShell.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_18\n\nLANGUAGE: powershell\nCODE:\n```\nGet-Service -Name MS_VAULT\n\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  MS_VAULT           Vault Service\n```\n\n----------------------------------------\n\nTITLE: Sample response for reading static role\nDESCRIPTION: This JSON object shows the data returned when querying a static role, which includes the role's name, username, and rotation period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"name\": \"my-static-role\",\\n  \"username\": \"example-user\",\\n  \"rotation_period\": \"11h30m\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Auth Backend Across Namespaces in JSON\nDESCRIPTION: Sample payload for moving an auth backend across namespaces using the /sys/remount endpoint. Specifies the 'from' and 'to' paths for the remount operation of an approle auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/remount.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"from\": \"ns1/ns2/auth/approle\",\n  \"to\": \"ns1/ns3/auth/new-approle\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Selector in Vault Secrets Operator\nDESCRIPTION: Example configuration for node selection in the operator pod.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  beta.kubernetes.io/arch: amd64\n```\n\n----------------------------------------\n\nTITLE: POST Request to Rotate Roleset Account Key in Vault\nDESCRIPTION: Command to rotate a service account key for an 'access_token' roleset in Vault using a POST request. This process invalidates the old key without modifying the roleset service account itself.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-token-roleset/rotate-key\n```\n\n----------------------------------------\n\nTITLE: AliCloud Roles LIST Response\nDESCRIPTION: Sample response when listing all roles in the AliCloud secrets engine, showing role names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n[\"policy-based\", \"role-based\"]\n```\n\n----------------------------------------\n\nTITLE: Registering an Okta Group with Policies\nDESCRIPTION: JSON payload for registering a new group with associated policies in the Okta auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": [\"dev\", \"prod\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Create CF User for Vault\nDESCRIPTION: Creates a new user 'vault' with Org Manager role in Cloud Foundry. Requires CF CLI and sufficient privileges to create users and assign roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cf create-user vault pa55w0rd\n$ cf orgs\n$ cf org-users my-example-org\n$ cf set-org-role vault my-example-org OrgManager\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Unlock Key Parameter\nDESCRIPTION: Example showing how to specify the unlock-key parameter value to unlock a Vault namespace API endpoint. The key must be provided as a plaintext string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/flags/unlock-key.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-unlock-key \"7oXtdlmvRQ\"\n```\n\n----------------------------------------\n\nTITLE: Secondary DR Status Response\nDESCRIPTION: Sample JSON response showing the replication status from a secondary node, including connection state and primary cluster information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cluster_id\": \"eef2a5ab-51e2-1c05-407c-8b4dc8d09ebf\",\n    \"connection_state\": \"ready\",\n    \"corrupted_merkle_tree\": false,\n    \"known_primary_cluster_addrs\": [\n      \"https://127.0.0.1:65524\",\n      \"https://127.0.0.1:65525\",\n      \"https://127.0.0.1:65526\"\n    ],\n    \"last_corruption_check_epoch\": \"-62135596800\",\n    \"last_reindex_epoch\": \"1709564746\",\n    \"last_remote_wal\": 223,\n    \"last_start\": \"2024-03-04T10:05:46-05:00\",\n    \"merkle_root\": \"2494830f1a1c304829b5742a232d39b5457bce9a\",\n    \"mode\": \"secondary\",\n    \"primaries\": [\n      {\n        \"api_address\": \"https://127.0.0.1:65521\",\n        \"clock_skew_ms\": \"0\",\n        \"cluster_address\": \"https://127.0.0.1:65524\",\n        \"connection_status\": \"connected\",\n        \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n        \"last_heartbeat_duration_ms\": \"0\",\n        \"replication_primary_canary_age_ms\": \"697\"\n      }\n    ],\n    \"primary_cluster_addr\": \"https://127.0.0.1:65524\",\n    \"secondary_id\": \"4ca6b639-046b-5bb1-8043-6788ddf09121\",\n    \"ssct_generation_counter\": 0,\n    \"state\": \"stream-wals\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Kubernetes Service Account Signing Public Key\nDESCRIPTION: This command retrieves the service account signing public key from the Kubernetes cluster's JWKS URI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl get --raw \"$(kubectl get --raw /.well-known/openid-configuration | jq -r '.jwks_uri' | sed -r 's/.*\\.[^/]+(.*)//1/')\"\n```\n\n----------------------------------------\n\nTITLE: Creating Lease Count Quota via CLI in Vault\nDESCRIPTION: This snippet demonstrates how to use the vault write command to create a new lease count quota. It specifies the quota name, path, role, and maximum number of leases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write                           \\\n    sys/quotas/lease-count/<QUOTA_NAME> \\\n    name=\"<QUOTA_NAME>\"                 \\\n    path=\"<PLUGIN_MOUNT_PATH>\"          \\\n    role=\"<OPTIONAL_AUTHN_ROLE>\"        \\\n    max_leases=<LEASE_LIMIT>\n```\n\n----------------------------------------\n\nTITLE: Reading Group by ID - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to read a group's details from Vault's Identity store using its ID. It sends a GET request to the `/identity/group/id/:id` endpoint, replacing `:id` with the actual group ID and including a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/group/id/363926d8-dd8b-c9f0-21f8-7b248be80ce1\n```\n\n----------------------------------------\n\nTITLE: KMIP Role Response Format in JSON\nDESCRIPTION: This JSON response shows the configuration of a KMIP role, detailing all the operations that the role is authorized to perform within its scope.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"operation_activate\": true,\n    \"operation_add_attribute\": true,\n    \"operation_create\": true,\n    \"operation_decrypt\": true,\n    \"operation_destroy\": true,\n    \"operation_discover_versions\": true,\n    \"operation_encrypt\": true,\n    \"operation_get\": true,\n    \"operation_get_attribute_list\": true,\n    \"operation_get_attributes\": true,\n    \"operation_import\": true,\n    \"operation_locate\": true,\n    \"operation_query\": true,\n    \"operation_register\": true,\n    \"operation_rekey\": true,\n    \"operation_revoke\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Read Automatic Tidy Configuration Request Example\nDESCRIPTION: This curl command retrieves the current automatic tidy configuration from the `/pki/config/auto-tidy` endpoint. It uses the `X-Vault-Token` header for authentication and sends a GET request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_120\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/auto-tidy\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Debug Logs for Vault\nDESCRIPTION: Sets the environment variable AZURE_SDK_GO_LOGGING to enable verbose debug logging for the Azure SDK used by HashiCorp Vault. This is useful for capturing detailed operational logs and is required to be executed on the Vault server where the Azure plugin is running. No inputs or outputs are expected beyond enabling logging by setting the environment variable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/azure.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nAZURE_SDK_GO_LOGGING=all\n```\n\n----------------------------------------\n\nTITLE: OIDC Provider: Read Request\nDESCRIPTION: This is a sample `curl` request to read an OIDC provider by name. It sends a GET request to the specified endpoint, including the Vault token. Replace `...` with your Vault token and `test-provider` with the name of the provider to retrieve.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider\n```\n\n----------------------------------------\n\nTITLE: Batch Signature Response with Public Keys\nDESCRIPTION: JSON response for batch signing operations with Ed25519 derived keys, showing signatures, derived public keys, and error handling.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"batch_results\": [\n      {\n        \"signature\": \"vault:v1:+R3cxAy6j4KriYzAyExU6p1glnyT/eLDSaUZO7gr8a8kgi/zSynNbOBSDJcGaAfLD1OF2hGupYBYTjmZMNoVAA==\",\n        \"publickey\": \"2fQIaaem7+EhSGs3jUebAS/8qP2+sUrmxOmgqZIZc0c=\"\n      },\n      {\n        \"signature\": \"vault:v1:3hBwA88lnuAVJqb5rCCEstzKYaBTeSdejk356BTCE/nKwySOhzQH3mWCvJZwbRptNGa7ia5ykosYYdJz+aIKDA==\",\n        \"publickey\": \"goDXuePo7L9z6HOw+a54O4HeV189BLECK9nAUudwp4Y=\"\n      },\n      {\n        \"error\": \"missing input\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Kerberos Configuration with GET Request\nDESCRIPTION: Example of retrieving the current Kerberos configuration using a GET request to the API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/kerberos/config\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit Parameters in Vault PKI Mount\nDESCRIPTION: Shell commands to configure audit parameters for a PKI mount using vault secrets tune. Sets various non-HMAC request and response keys for better audit visibility.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune \\\n  -audit-non-hmac-response-keys=certificate \\\n  -audit-non-hmac-response-keys=issuing_ca \\\n  -audit-non-hmac-response-keys=serial_number \\\n  -audit-non-hmac-response-keys=error \\\n  -audit-non-hmac-response-keys=ca_chain \\\n  -audit-non-hmac-request-keys=certificate \\\n  -audit-non-hmac-request-keys=issuer_ref \\\n  -audit-non-hmac-request-keys=common_name \\\n  -audit-non-hmac-request-keys=alt_names \\\n  -audit-non-hmac-request-keys=other_sans \\\n  -audit-non-hmac-request-keys=ip_sans \\\n  -audit-non-hmac-request-keys=uri_sans \\\n  -audit-non-hmac-request-keys=ttl \\\n  -audit-non-hmac-request-keys=not_after \\\n  -audit-non-hmac-request-keys=serial_number \\\n  -audit-non-hmac-request-keys=key_type \\\n  -audit-non-hmac-request-keys=private_key_format \\\n  -audit-non-hmac-request-keys=managed_key_name \\\n  -audit-non-hmac-request-keys=managed_key_id \\\n  -audit-non-hmac-request-keys=ou \\\n  -audit-non-hmac-request-keys=organization \\\n  -audit-non-hmac-request-keys=country \\\n  -audit-non-hmac-request-keys=locality \\\n  -audit-non-hmac-request-keys=province \\\n  -audit-non-hmac-request-keys=street_address \\\n  -audit-non-hmac-request-keys=postal_code \\\n  -audit-non-hmac-request-keys=permitted_dns_domains \\\n  -audit-non-hmac-request-keys=permitted_email_addresses \\\n  -audit-non-hmac-request-keys=permitted_ip_ranges \\\n  -audit-non-hmac-request-keys=permitted_uri_domains \\\n  -audit-non-hmac-request-keys=excluded_dns_domains \\\n  -audit-non-hmac-request-keys=excluded_email_addresses \\\n  -audit-non-hmac-request-keys=excluded_ip_ranges \\\n  -audit-non-hmac-request-keys=excluded_uri_domains \\\n  -audit-non-hmac-request-keys=policy_identifiers \\\n  -audit-non-hmac-request-keys=ext_key_usage_oids \\\n  -audit-non-hmac-request-keys=csr \\\n   <mount>\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Password Policy in JSON\nDESCRIPTION: This snippet shows the JSON payload for creating or updating a password policy. The policy is defined as a string within the JSON object.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policy\": \"length = 20\\nrule \\\"charset\\\" { ...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Configuration Type for Vault Agent\nDESCRIPTION: The '-type' flag is a required enum parameter that determines the type of configuration file entry to create. Currently, it supports 'env-template' for creating environment variable templates from JSON keys in 'kv' plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/agent/flags/type.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n-type env-template\n```\n\n----------------------------------------\n\nTITLE: Deleting PingID MFA method using Vault HTTP API\nDESCRIPTION: Illustrates the use of a DELETE request to remove a PingID MFA method by its UUID using the Vault API endpoint. Make sure the method isn't in use by a login enforcement before deletion.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/pingid/f8381105-67f0-4105-8662-4b07ae5c1233\n```\n\n----------------------------------------\n\nTITLE: Sample payload for revoking a certificate\nDESCRIPTION: This JSON payload specifies the serial number of the certificate to revoke, in hyphen-separated or colon-separated hexadecimal format. It is sent to the '/pki/revoke' endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"serial_number\": \"39:dd:2e...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Token Count in Vault using cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to retrieve the total number of tokens in Vault. It uses cURL to send an authenticated request to the /sys/internal/counters/tokens endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/internal/counters/tokens\n```\n\n----------------------------------------\n\nTITLE: Enabling RabbitMQ Secrets Engine in Vault\nDESCRIPTION: This command enables the RabbitMQ secrets engine in Vault. It mounts the engine at the default path 'rabbitmq/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/rabbitmq.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable rabbitmq\n```\n\n----------------------------------------\n\nTITLE: Failed Event Subscription Example (Shell)\nDESCRIPTION: Shell command output demonstrating error messages when event subscription fails due to insufficient permissions in the VaultAuth role policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/instant-updates.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl describe vaultstaticsecret vault-static-secret-v2 -n vso-example\n...\nEvents:\n  Type     Reason             Age   From               Message\n  ----     ------             ----  ----               -------\n  Normal   SecretSynced       2s    VaultStaticSecret  Secret synced\n  Warning  EventWatcherError  2s    VaultStaticSecret  Error while watching events: \n   failed to connect to vault websocket: error returned when opening event stream\n   web socket to wss://vault.vault.svc.cluster.local:8200/v1/sys/events/subscribe/kv%2A?json=true, \n   ensure VaultAuth role has correct permissions and Vault is Enterprise version \n   1.16 or above: {\"errors\":[\"1 error occurred:\\n\\t* permission denied\\n\\n\"]}\n  Normal   SecretRotated      2s    VaultStaticSecret  Secret synced\n```\n\n----------------------------------------\n\nTITLE: Configuring Pod Disruption Budget for Vault Agent Injector\nDESCRIPTION: This YAML snippet shows how to set up a Pod Disruption Budget for the Vault Agent Injector. It limits the number of pods that can be down simultaneously during voluntary disruptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\npodDisruptionBudget:\n  maxUnavailable: 1\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Vault Host Information API\nDESCRIPTION: An example JSON response from the /sys/host-info endpoint showing structured data about the host, including CPU information, CPU times, disk usage, host details, and memory statistics. The response includes a timestamp of when the information was collected.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/host-info.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cpu\": [\n      {\n        \"cpu\": 0,\n        \"vendorId\": \"GenuineIntel\",\n        \"family\": \"6\",\n        \"model\": \"78\",\n        ...\n      },\n      ...\n    ],\n    \"cpu_times\": [\n      {\n        \"cpu\": \"cpu\",\n        \"user\": 7491,\n        \"system\": 16833,\n        \"idle\": 5726276,\n        ...\n      },\n      ...\n    ],\n    \"disk\": [\n      {\n        \"path\": \"/\",\n        \"fstype\": \"ext4\",\n        \"total\": 410352476160,\n        \"free\": 102141169664,\n        \"used\": 306428051456,\n        ...\n      },\n      ...\n    ],\n    \"host\": {\n      \"hostname\": \"vault-server-1\",\n      \"uptime\": 28618,\n      \"bootTime\": 1570114491,\n      \"procs\": 439,\n      ...\n    },\n    \"memory\": {\n      \"total\": 17179869184,\n      \"available\": 6203424768,\n      \"used\": 10976444416,\n      ...\n    },\n    \"timestamp\": \"2019-10-03T22:51:49.715927Z\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Certificate and Key API Request in Vault\nDESCRIPTION: This request generates a new SSH key pair and certificate using Vault's SSH CA. It requires authentication via a Vault token and submits configuration parameters that specify the key type and bit length.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_34\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/issue/my-role\n```\n\n----------------------------------------\n\nTITLE: Handling ACME Header Error Responses\nDESCRIPTION: Modification to prevent unnecessary key subproblems in ACME error responses when no subproblems exist\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30168.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/pki: acme header error response no longer includes key subproblems if no subproblems exist.\n```\n\n----------------------------------------\n\nTITLE: Implementing Lazy Paginated Query in JavaScript\nDESCRIPTION: This snippet shows how to use the new pagination.lazyPaginatedQuery method to fetch data with pagination support. It includes additional parameters like page, pageFilter, and size for controlling the pagination behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/client-pagination.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class ExampleRoute extends Route {\n  @service pagination;\n\n  model(params) {\n    const { page, pageFilter, secret } = params;\n    const { backend } = this.paramsFor('vault.cluster.secrets.backend');\n    return this.pagination.lazyPaginatedQuery('secret', {\n      backend,\n      id: secret,\n      size,\n      page,\n      responsePath,\n      pageFilter\n    })\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Transformation with curl Request (Deprecated)\nDESCRIPTION: Example curl command for creating or updating a transformation using the deprecated endpoint. Uses a JSON payload to configure the transformation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/transformation/example-transformation\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Vault Feature Flags API\nDESCRIPTION: This JSON snippet shows the expected response format from the feature flags endpoint. The response contains a 'feature-flags' array that lists all enabled feature flags for the UI. In this example, the array is empty, indicating no feature flags are currently enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-feature.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"feature-flags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Tokenization Store with cURL in Vault Transform API\nDESCRIPTION: Makes a POST request to create or update a tokenization store in the Vault Transform Secrets Engine using a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_44\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/stores/example-store\n```\n\n----------------------------------------\n\nTITLE: Installing VSO with Kustomize\nDESCRIPTION: Installs the Vault Secrets Operator using Kustomize by building and applying the configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ kustomize build config/default | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Example of Enabling KV Secrets Engine with Specific Path\nDESCRIPTION: Example showing how to enable a KV version 2 secrets engine with the path 'adfs-kv'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=adfs-kv kv-v2\n```\n\n----------------------------------------\n\nTITLE: Configuring InfluxDB Plugin in Vault\nDESCRIPTION: Command to configure Vault with InfluxDB plugin settings including connection details and allowed roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/influxdb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault write database/config/my-influxdb-database \\\n    plugin_name=\"influxdb-database-plugin\" \\\n    host=127.0.0.1 \\\n    username=vaultuser \\\n    password=vaultpass \\\n    allowed_roles=my-role\n```\n\n----------------------------------------\n\nTITLE: Deleting Static Secrets in Vault (Shell)\nDESCRIPTION: This command removes data stored in the static secrets engine of Vault. It demonstrates how to delete a secret at a specific path using the 'delete' command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/delete.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault delete secret/my-secret\n```\n\n----------------------------------------\n\nTITLE: Deleting a Key Using cURL in Transit Secrets Engine\nDESCRIPTION: Sample cURL command for deleting a named encryption key in Vault's Transit secrets engine. Uses the DELETE method to the /transit/keys/:name endpoint with Vault authentication. Requires deletion_allowed to be set to true.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: PKI Issuer Configuration Response\nDESCRIPTION: Sample response showing the complete issuer configuration including CA chain, certificate details, and endpoint URLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_71\n\nLANGUAGE: text\nCODE:\n```\n{\n  \"data\": {\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDFDCCAfygAwIBAgIUXgxy54mKooz5soqQoRINazH/3pQwDQYJKoZIhvcNAQEL\\n...\",\n      \"-----BEGIN CERTIFICATE-----\\nMIIDFTCCAf2gAwIBAgIUUo/qwLm5AyqUWqFHw1MlgwUtS/kwDQYJKoZIhvcNAQEL\\n...\"\n    ],\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDFDCCAfygAwIBAgIUXgxy54mKooz5soqQoRINazH/3pQwDQYJKoZIhvcNAQEL\\n...\",\n    \"issuer_id\": \"7545992c-1910-0898-9e64-d575549fbe9c\",\n    \"issuer_name\": \"root-x1\",\n    \"key_id\": \"baadd98d-ec5a-66ac-06b7-dfc91c02c9cf\",\n    \"leaf_not_after_behavior\": \"truncate\",\n    \"manual_chain\": null,\n    \"usage\": \"read-only,issuing-certificates,crl-signing,ocsp-signing\",\n    \"revocation_signature_algorithm\": \"\",\n    \"issuing_certificates\": [\"<url1>\", \"<url2>\"],\n    \"crl_distribution_points\": [\"<url1>\", \"<url2>\"],\n    \"ocsp_servers\": [\"<url1>\", \"<url2>\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Okta Users via cURL\nDESCRIPTION: Shell command to list all users configured in the Okta auth method using LIST request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/okta/users\n```\n\n----------------------------------------\n\nTITLE: Configuring EST in Vault PKI (cURL)\nDESCRIPTION: Sample cURL request for configuring Enrollment over Secure Transport (EST) in Vault's PKI secrets engine. It sends a POST request to the EST configuration endpoint with the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/est\n```\n\n----------------------------------------\n\nTITLE: Checking Vault Version and License\nDESCRIPTION: Commands to verify Vault version and check if the license includes Key Management TDE feature\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault status\nvault license get -format=json\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Vault Data Using the Active Token\nDESCRIPTION: This example shows how to log in with a token and then unwrap data associated with that active token. When no token is provided to the unwrap command, it uses the currently authenticated token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/unwrap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault login 848f9ccf-7176-098c-5e2b-75a0689d41cd\n$ vault unwrap # unwraps 848f9ccf...\n```\n\n----------------------------------------\n\nTITLE: Publishing Lambda Layer\nDESCRIPTION: AWS CLI commands to set the region and publish the Vault Lambda Extension as a Lambda layer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ export REGION=\"YOUR REGION HERE\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ aws lambda publish-layer-version \\\n     --layer-name vault-lambda-extension \\\n     --zip-file  \"fileb://vault-lambda-extension.zip\" \\\n     --region \"${REGION}\"\n```\n\n----------------------------------------\n\nTITLE: Replication Status Response for Performance Secondary & DR Primary Node\nDESCRIPTION: Sample JSON response from the replication status endpoint for a node that is both a performance secondary and DR primary. Shows details about connection state, cluster addresses, and replication metrics for both roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"dr\": {\n      \"cluster_id\": \"8cfe8fd1-c7b7-c301-5aa8-3131d66d53ea\",\n      \"corrupted_merkle_tree\": false,\n      \"known_secondaries\": [\n        \"79f5e0b2-6420-fdcd-5f53-3a1745f3d979\"\n      ],\n      \"last_corruption_check_epoch\": \"-62135596800\",\n      \"last_dr_wal\": 145,\n      \"last_reindex_epoch\": \"0\",\n      \"last_wal\": 145,\n      \"merkle_root\": \"29a9794b2e7f1d39cb4ef3976566c02e740b72c2\",\n      \"mode\": \"primary\",\n      \"primary_cluster_addr\": \"\",\n      \"secondaries\": [\n        {\n          \"api_address\": \"https://127.0.0.1:49167\",\n          \"clock_skew_ms\": \"-1\",\n          \"cluster_address\": \"https://127.0.0.1:49170\",\n          \"connection_status\": \"connected\",\n          \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n          \"last_heartbeat_duration_ms\": \"2\",\n          \"node_id\": \"79f5e0b2-6420-fdcd-5f53-3a1745f3d979\",\n          \"replication_primary_canary_age_ms\": \"454\"\n        }\n      ],\n      \"ssct_generation_counter\": 0,\n      \"state\": \"running\"\n    },\n    \"performance\": {\n      \"cluster_id\": \"00616ea0-3094-5017-29f9-644f3633f0da\",\n      \"connection_state\": \"ready\",\n      \"corrupted_merkle_tree\": false,\n      \"known_primary_cluster_addrs\": [\n        \"https://127.0.0.1:65524\",\n        \"https://127.0.0.1:65525\",\n        \"https://127.0.0.1:65526\"\n      ],\n      \"last_corruption_check_epoch\": \"-62135596800\",\n      \"last_reindex_epoch\": \"1709564740\",\n      \"last_remote_wal\": 223,\n      \"last_start\": \"2024-03-04T10:05:48-05:00\",\n      \"merkle_root\": \"7b75cf69bb9a862913b0de2478164e046d242e0f\",\n      \"mode\": \"secondary\",\n      \"primaries\": [\n        {\n          \"api_address\": \"https://127.0.0.1:65521\",\n          \"clock_skew_ms\": \"0\",\n          \"cluster_address\": \"https://127.0.0.1:65524\",\n          \"connection_status\": \"connected\",\n          \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n          \"last_heartbeat_duration_ms\": \"0\",\n          \"replication_primary_canary_age_ms\": \"660\"\n        }\n      ],\n      \"primary_cluster_addr\": \"https://127.0.0.1:65524\",\n      \"secondary_id\": \"cd0463e0-a37f-7421-345e-aad53007479f\",\n      \"ssct_generation_counter\": 0,\n      \"state\": \"stream-wals\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Userpass Auth Method Configuration with User Lockout in Vault CLI\nDESCRIPTION: This snippet shows how to view the configuration of the userpass auth method after enabling user lockout, displaying the new lockout settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/auth/userpass/tune\n\nKey                  Value\n---                  -----\ndefault_lease_ttl    768h\ndescription          n/a\nforce_no_cache       false\nmax_lease_ttl        768h\ntoken_type           default-service\nuser_lockout_counter_reset_duration    0s\nuser_lockout_disable                   false\nuser_lockout_duration                  10m\nuser_lockout_threshold                 10\n```\n\n----------------------------------------\n\nTITLE: Login Request - Shell Command\nDESCRIPTION: cURL command to authenticate and receive a token using the OCI auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/oci/login/devrole\n```\n\n----------------------------------------\n\nTITLE: IAM Tags for User Creation Payloads\nDESCRIPTION: This JSON snippet shows how to specify IAM tags for users created by a Vault role. It demonstrates both a list and an object format for the tags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credential_type\": \"iam_user\",\n  \"iam_tags\": [\n    \"first_key=first_value\",\n    \"second_key=second_value\"\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credential_type\": \"iam_user\",\n  \"iam_tags\": {\n    \"first_key\": \"first_value\",\n    \"second_key\": \"second_value\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Requiring CAS for KV Metadata in Vault\nDESCRIPTION: This command enables Check-and-Set (CAS) requirement for the specified key in Vault's KV v2 secrets engine. When CAS is required, all write requests to this key must include the `cas` parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/metadata.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv metadata put -mount=secret -cas-required creds\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Service Display Properties in Windows\nDESCRIPTION: Configures the display name and description for the Vault service that will appear in the Windows Services management console.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\nnssm set MS_VAULT DisplayName \"Vault Service\" ; `\nnssm set MS_VAULT Description \"Vault server running as a service\"\n```\n\n----------------------------------------\n\nTITLE: Configure Identity Access List Tidy Payload\nDESCRIPTION: JSON payload for configuring identity access list cleanup settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safety_buffer\": \"48h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Create Vault user\nDESCRIPTION: This command creates a new user named \"sethvargo\" within the \"userpass\" authentication method. The user is assigned the password \"secret\". This is a specific configuration step after enabling the auth method and is part of setting up user authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/enable.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/userpass/users/sethvargo password=secret\nSuccess! Data written to: auth/userpass/users/sethvargo\n```\n\n----------------------------------------\n\nTITLE: Listing Namespaced Secret Engines in Vault\nDESCRIPTION: Demonstrates how to list secret engines within a specific namespace using the Vault CLI. This is useful for identifying secret engines in nested namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets list -namespace=admin | grep -vEw '(cubbyhole|identity|sys)'\n\nPath           Type            Accessor                 Description\n----           ----            --------                 -----------\nadmin_keys/    kv              kv_87edfc65              n/a\n```\n\n----------------------------------------\n\nTITLE: Adding HTTP Header Option to Vault CLI - Release Note\nDESCRIPTION: Release note entry documenting the addition of a -header option to the Vault CLI, enabling users to send custom HTTP headers with CLI commands. This improvement enhances the flexibility of CLI interactions with Vault servers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12508.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncli: add new http option : -header which enable sending arbitrary headers with the cli\n```\n\n----------------------------------------\n\nTITLE: Configuring Standalone Vault instance with OCI Object Storage\nDESCRIPTION: This example demonstrates configuring Vault to use OCI Object Storage as its backend in a standalone instance. It specifies the namespace and bucket where Vault data will be stored.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/oci-object-storage.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"oci\" {\n    namespace_name = \"MyNamespace\"\n    bucket_name = \"DataBucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Role in Vault via API\nDESCRIPTION: Shell command to create a new Kubernetes role in Vault using the HTTP API. This sends a POST request with a JSON payload to configure role parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/kubernetes/roles/default-role\n```\n\n----------------------------------------\n\nTITLE: UI Header Configuration Payload\nDESCRIPTION: JSON payload for configuring multiple values for a UI header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\"custom value 1\", \"custom value 2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the TLS Certificate Method in Vault\nDESCRIPTION: This example shows how to configure the TLS certificate authentication method in HashiCorp Vault using a POST request. The snippet outlines the expected parameters and their meanings, along with a sample payload for configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\ \n    --header \"X-Vault-Token: ...\" \\ \n    --request POST \\ \n    --cacert vault-ca.pem \\ \n    --data @payload.json \\ \n    https://127.0.0.1:8200/v1/auth/cert/config\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disable_binding\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Access to Consul\nDESCRIPTION: Commands for configuring Vault's connection to Consul, both with and without pre-existing ACL bootstrap.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/config/access \\\n    address=\"127.0.0.1:8500\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nCONSUL_HTTP_TOKEN=\"<bootstrap-token>\" consul acl token create -policy-name=\"global-management\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write consul/config/access \\\n    address=\"127.0.0.1:8500\" \\\n    token=\"ef35f0f1-885b-0cab-573c-7c91b65a7a7e\"\n```\n\n----------------------------------------\n\nTITLE: Login Enforcements List Response\nDESCRIPTION: Sample response showing list of login enforcement configuration names\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/login-enforcement.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"foo\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AliCloud Login - Response\nDESCRIPTION: JSON response from a successful AliCloud authentication. Contains the auth object with client token, metadata about the authenticated entity, and assigned policies. This token is used for subsequent Vault operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"renewable\": true,\n    \"lease_duration\": 1800000,\n    \"metadata\": {\n      \"role_tag_max_ttl\": \"0\",\n      \"instance_id\": \"i-de0f1344\",\n      \"ami_id\": \"ami-fce36983\",\n      \"role\": \"dev-role\",\n      \"auth_type\": \"ec2\",\n      \"account_id\": \"5138828231865461\",\n      \"user_id\": \"216959339000654321\",\n      \"role_id\": \"4657-abcd\",\n      \"arn\": \"acs:ram::5138828231865461:assumed-role/dev-role/vm-ram-i-rj978rorvlg76urhqh7q\",\n      \"identity_type\": \"assumed-role\",\n      \"principal_id\": \"vm-ram-i-rj978rorvlg76urhqh7q\",\n      \"request_id\": \"D6E46F10-F26C-4AA0-BB69-FE2743D9AE62\",\n      \"role_name\": \"dev-role\"\n    },\n    \"policies\": [\"default\", \"dev\"],\n    \"accessor\": \"20b89871-e6f2-1160-fb29-31c2f6d4645e\",\n    \"client_token\": \"d9368254-3f21-aded-8a6f-7c818e81b17a\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Joining Raft Peers in Secondary Cluster\nDESCRIPTION: These commands join the remaining pods to the Raft cluster and unseal them using the internal service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-secondary-1 -- vault operator raft join http://vault-secondary-0.vault-secondary-internal:8200\nkubectl exec -ti vault-secondary-1 -- vault operator unseal\n\nkubectl exec -ti vault-secondary-2 -- vault operator raft join http://vault-secondary-0.vault-secondary-internal:8200\nkubectl exec -ti vault-secondary-2 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: UI Headers List Response\nDESCRIPTION: Sample JSON response showing a list of configured UI header keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"X-Custom...\", \"X-Header...\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Signing SSH Key with Valid Principals\nDESCRIPTION: Include valid principals during SSH key signing in Vault to support multiple user authentications. This configures role settings dynamically for various users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh-client-signer/sign/my-role -<<\"EOH\"\n{\n  \"valid_principals\": \"my-user\"\n  // ...\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Renewing Lease with Vault Command - Shell\nDESCRIPTION: This snippet demonstrates how to renew a lease on a secret in Hashicorp Vault using the 'lease renew' command. The primary dependency is the installed Vault CLI. The command requires the lease ID of the secret. It extends the lease duration before the secret is revoked. The output displays the lease ID, new duration, and renewability status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/renew.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault lease renew database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nKey                Value\n---                -----\nlease_id           database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nlease_duration     5m\nlease_renewable    true\n```\n\n----------------------------------------\n\nTITLE: Reading Credentials from a Role with Hierarchical Path in Vault LDAP Secrets Engine\nDESCRIPTION: Reads credentials from the 'org/platform/dev' static role, displaying details including username, password, rotation period, and TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read ldap/static-cred/org/platform/dev\nKey                    Value\n---                    -----\ndn                     n/a\nlast_password          a3sQ6OkmXKt2dtx22kAt36YLkkxLsg4RmhMZCLYCBCbvvv67ILROaOokdCaGPEAE\nlast_vault_rotation    2024-05-03T16:39:27.174164-05:00\npassword               ECf7ZoxfDxGuJEYZrzgzTffSIDI4tx5TojBR9wuEGp8bqUXbl4Kr9eAgPjmizcvg\nrotation_period        5m\nttl                    4m58s\nusername               user2\n```\n\n----------------------------------------\n\nTITLE: Deleting LDAP Group with curl in Shell\nDESCRIPTION: This snippet demonstrates using curl to send a DELETE request to remove an LDAP group from Kerberos in Vault. It requires the name of the LDAP group as part of the URL path and uses a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \\\"X-Vault-Token: ...\\\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/kerberos/groups/admins\n```\n\n----------------------------------------\n\nTITLE: Setting Audit Log Format in Vault\nDESCRIPTION: Example of how to specify the format for Vault audit logs. The format parameter accepts either 'json' (for JSON structured data) or 'jsonx' (for XML structured data), with json being the default.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/format.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nformat=jsonx\n```\n\n----------------------------------------\n\nTITLE: Using Certbot with ACME EAB Token\nDESCRIPTION: Demonstrates how to use the ACME EAB token with Certbot, an ACME client. This includes specifying the ACME directory URL, EAB key ID, and HMAC key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/troubleshooting-acme.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ certbot [... additional parameters ...] \\\n    --server https://cluster-b.vault.example.com/v1/pki/roles/my-role-name/acme/directory \\\n    --eab-kid bc8088d9-3816-5177-ae8e-d8393265f7dd \\\n    --eab-hmac-key MHcCAQE... additional data elided ...\n```\n\n----------------------------------------\n\nTITLE: Generating Vault Utilization Data Bundle - Shell Command\nDESCRIPTION: CLI command to generate a license utilization data bundle with optional message and output path parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/manual-reporting.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator utilization -message=\"Change Control 654987\" \\\n        -output=\"/utilization/reports/latest.json\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Period Client Counts in Vault\nDESCRIPTION: Example showing how to retrieve client count metrics for the default reporting period using the vault operator usage command. Displays counts for distinct entities, non-entity tokens, secret syncs, and ACME clients across namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/usage.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator usage\nPeriod start: 2019-11-01T00:00:00Z\nPeriod end: 2020-10-31T23:59:59Z\n\nNamespace path   Distinct entities   Non-Entity tokens   Secret syncs   ACME clients   Active clients\n--------------   -----------------   -----------------   ------------   ------------   --------------\n[root]           1541                332                 40             60             1973\n\nTotal            1541                332                 40             60             1973\n```\n\n----------------------------------------\n\nTITLE: Sample CSV Response Format for Vault Client Activity\nDESCRIPTION: Example CSV output format showing flattened client activity records. Demonstrates how nested JSON fields are converted to individual columns with dotted notation for arrays and key-value pairs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nentity_name,entity_alias_name,client_id,client_type,local_entity_alias,namespace_id,namespace_path,mount_accessor,mount_path,mount_type,timestamp,entity_alias_custom_metadata.contact_email,entity_alias_custom_metadata.group,entity_alias_custom_metadata.region,entity_metadata.email_address,entity_group_ids.0,policies.0,policies.1,policies.2,policies.4\nadmin,admin,3f210722-7210-98e8-1f0d-e6a39ffb29c6,entity,false,root,,auth_userpass_a005db73,auth/userpass/,userpass,2024-07-10T09:33:51Z,admin@example.com,san_francisco,west,admin@example.com,746fbaf9-ffeb-62b9-7f0b-42d79ca0883f,secret-read,secret-list,secret-write,secret-delete\n,,590198f7-9178-57d6-c345-48746bb438d8,non-entity-token,false,YWZzu,ns1/a/,auth_ns_token_e3119312,auth/token/,ns_token,2024-07-08T11:35:23Z,,,,,,,,,\njdoe,jdoe,665a54bf-8652-c0c5-8121-40adf0d9786a,entity,false,wOsmr,ns1/a,auth_ldap_a005db73,auth/ldap/,ldap,2024-07-08T11:47:57Z,jdoe@example.com,new_york,east,,9f18cd4a-4e64-a2b2-b001-7b6b0dfb1270,secret-read,,,\njdoe,jdoe,0640a8f0-b315-cc8a-c0c2-713f663774df,entity,false,oIiGy,ns1/b,auth_userpass_01a6ea85,auth/userpass/,userpass,2024-07-21T14:51:36Z,,new_york,east,,76a374a1-72fd-30ca-2455-f51dfeaa805e,secret-read,,,\n```\n\n----------------------------------------\n\nTITLE: Sample Certificate Generation Request Payload\nDESCRIPTION: JSON payload for requesting a certificate with a common name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"common_name\": \"www.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unix Socket Configuration\nDESCRIPTION: Configuration example for communicating with Consul over a local unix socket.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"consul\" {\n  address = \"unix:///tmp/.consul.http.sock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Curl at Runtime in Vault Container\nDESCRIPTION: These shell commands install curl dynamically in running Vault containers. Options exist for both root and non-root installations. Ensure network access for downloading and permissions for command execution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.16.x.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\ndocker exec <CONTAINER-ID> apk add curl\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nkubectl exec -ti <NAME> -- apk add curl\n```\n\nLANGUAGE: shell-session\nCODE:\n```\ndocker exec <CONTAINER-ID> wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nkubectl exec -ti <NAME> -- wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\n```\n\n----------------------------------------\n\nTITLE: Tuning Host Key Certificate TTL in Shell\nDESCRIPTION: Extend the TTL for host key certificates using the Vault CLI to ensure they remain valid for extended periods, minimizing the frequency of key regeneration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets tune -max-lease-ttl=87600h ssh-host-signer\n```\n\n----------------------------------------\n\nTITLE: Importing OpenAPI .NET Client Library\nDESCRIPTION: This code snippet shows how to import the OpenAPI-based .NET client library in a C# program. It imports the `Vault` and `Vault.Client` namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_15\n\nLANGUAGE: cs\nCODE:\n```\nusing Vault;\nusing Vault.Client;\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Configure Key Rotation in Vault\nDESCRIPTION: Shell command using curl to send a POST request with a JSON payload to configure automatic key rotation in Vault. Requires authentication via a Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rotate-config.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/rotate/config\n```\n\n----------------------------------------\n\nTITLE: Registering a User with RADIUS Sample Payload in JSON\nDESCRIPTION: This JSON payload shows how to specify policies when registering a new RADIUS user. The policies determine what resources the user can access in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": \"dev,prod\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Impersonated Account for OAuth2 Tokens - Vault - Shell\nDESCRIPTION: This snippet configures a Vault role to impersonate a Google Cloud Project administrator, generating OAuth2 tokens with specified scopes. Requires configuration of the service account and the desired scopes based on project requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write gcp/impersonated-account/my-token-impersonate \\\n    service_account_email=\"projectAdmin@my-project.iam.gserviceaccount.com\" \\\n    token_scopes=\"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/compute\" \\\n    ttl=\"6h\"\n```\n\n----------------------------------------\n\nTITLE: Mounting PKI Secrets Engine in Vault\nDESCRIPTION: Enables the PKI secrets engine at the 'pki' path in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-root-ca.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable pki\n```\n\n----------------------------------------\n\nTITLE: Generating Private Key for Vault Agent Injector Certificate\nDESCRIPTION: Creates a 2048-bit RSA private key for the Vault Agent Injector certificate using OpenSSL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl genrsa -out tls.key 2048\n```\n\n----------------------------------------\n\nTITLE: Enabling Consul Secrets Engine\nDESCRIPTION: Command to enable the Consul secrets engine in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault secrets enable consul\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Generate Root Certificate in Vault PKI\nDESCRIPTION: This curl command demonstrates how to send a POST request to Vault's API endpoint for generating a root certificate. It includes the necessary headers and references a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_62\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/root/generate/internal\n```\n\n----------------------------------------\n\nTITLE: List STS Roles Response\nDESCRIPTION: JSON response showing all AWS account IDs with configured STS roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"111122223333\", \"999988887777\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying HA Vault with Raft using Helm CLI\nDESCRIPTION: This snippet shows how to use the Helm CLI to deploy HA Vault with integrated Raft storage. It sets the necessary configuration options using command-line flags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Deleting UI Header Configuration\nDESCRIPTION: Makes a DELETE request to remove a specific UI header configuration. Requires X-Vault-Token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/config/ui/headers/X-Custom-Header\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Configuration State API\nDESCRIPTION: This shows the typical JSON response from the /sys/config/state/sanitized endpoint, containing Vault's configuration details. Sensitive fields from Storage.Config, HAStorage.Config, Seals.Config, and Telemetry.CirconusAPIToken are excluded from the response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-state.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"api_addr\": \"http://127.0.0.1:8200\",\n  \"cache_size\": 0,\n  \"cluster_addr\": \"\",\n  \"cluster_cipher_suites\": \"\",\n  \"cluster_name\": \"\",\n  \"default_lease_ttl\": 0,\n  \"default_max_request_duration\": 0,\n  \"disable_cache\": false,\n  \"disable_clustering\": false,\n  \"disable_indexing\": false,\n  \"disable_mlock\": false,\n  \"disable_performance_standby\": false,\n  \"disable_printable_check\": false,\n  \"disable_sealwrap\": false,\n  \"enable_ui\": true,\n  \"listeners\": [\n    {\n      \"config\": {\n        \"address\": \"127.0.0.1:8200\",\n        \"tls_disable\": 1\n      },\n      \"type\": \"tcp\"\n    }\n  ],\n  \"log_format\": \"\",\n  \"log_level\": \"\",\n  \"max_lease_ttl\": 0,\n  \"pid_file\": \"\",\n  \"plugin_directory\": \"/opt/vault/plugins\",\n  \"raw_storage_endpoint\": false,\n  \"seals\": [\n    {\n      \"disabled\": false,\n      \"type\": \"shamir\"\n    }\n  ],\n  \"storage\": {\n    \"cluster_addr\": \"\",\n    \"disable_clustering\": false,\n    \"redirect_addr\": \"http://127.0.0.1:8200\",\n    \"type\": \"inmem\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Auth Role with Terraform\nDESCRIPTION: Terraform configuration to set up Kubernetes authentication backend and create role for VSO.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/client-cache.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ndata \"vault_auth_backend\" \"kubernetes\" {\n  namespace = \"<VAULT_NAMESPACE>\"\n  path      = \"<VAULT_KUBERNETES_PATH>\"\n}\n\nresource \"vault_kubernetes_auth_backend_config\" \"local\" {\n  namespace       = data.vault_auth_backend.kubernetes.namespace\n  backend         = data.vault_auth_backend.kubernetes.path\n  kubernetes_host = \"https://kubernetes.default.svc\"\n}\n\nresource \"vault_kubernetes_auth_backend_role\" \"operator\" {\n  namespace                        = data.vault_auth_backend.kubernetes.namespace\n  backend                          = vault_kubernetes_auth_backend_config.local.backend\n  role_name                        = \"operator\"\n  bound_service_account_names      = [\"vault-secrets-operator-controller-manager\"]\n  bound_service_account_namespaces = [\"vault-secrets-operator\"]\n  token_period                     = 120\n  token_policies = [\n    vault_policy.operator.name,\n  ]\n  audience = \"vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Tidy Deny Listed Role Tags using Vault API with curl\nDESCRIPTION: This snippet demonstrates how to tidy the deny-listed role tags based on their expiration time and a safety buffer using the Vault API. It makes a POST request to the `/auth/aws/tidy/roletag-denylist` endpoint, which requires a Vault token. The `safety_buffer` parameter, defaulting to 72h, defines the extra time to wait before removing expired entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_46\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/aws/tidy/roletag-denylist\n```\n\n----------------------------------------\n\nTITLE: Auto Unseal Configuration with Recovery Keys\nDESCRIPTION: Initialize Vault with Auto Unseal feature, configuring 7 recovery key shares with a threshold of 4, encrypted with PGP keys\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/init.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault operator init \\\n    -recovery-shares=7 \\\n    -recovery-threshold=4 \\\n    -recovery-pgp-keys=\"keybase:jeff,keybase:chris,keybase:brian,keybase:calvin,keybase:matthew,keybase:vishal,keybase:nick\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vaultgo Go Client\nDESCRIPTION: Command to install the community Vaultgo Go client library using Go's package manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ go get github.com/mittwald/vaultgo\n```\n\n----------------------------------------\n\nTITLE: Importing a Key for FPE Transformation - cURL Request\nDESCRIPTION: Sample cURL request for importing an existing key into a new FPE transformation. The request sends the payload to the import endpoint with the transformation name specified in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/transformations/fpe/example-transformation/import\n```\n\n----------------------------------------\n\nTITLE: Registering Initial Vault Database Plugin\nDESCRIPTION: This snippet demonstrates how to register the initial version of a Vault database plugin using the `vault plugin register` command. It requires the SHA256 hash of the plugin binary, the plugin type (database) and name. This step is skipped if the plugin is built-in or already registered.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin register\n        -sha256=<SHA256 Hex value of the plugin binary> \\\n        database \\\n        my-db-plugin\n    Success! Registered plugin: my-db-plugin\n```\n\n----------------------------------------\n\nTITLE: Template Config with Error Handling Configuration\nDESCRIPTION: Extended HCL configuration example showing template_config with error handling settings and template stanza configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate_config {\n  exit_on_retry_failure = true\n  static_secret_render_interval = \"10m\"\n  max_connections_per_host = 20\n}\n\ntemplate {\n  source      = \"/tmp/agent/template.ctmpl\"\n  destination = \"/tmp/agent/render.txt\"\n  error_on_missing_key = true\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: Command to enable the database secrets engine in Vault at the default path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/hanadb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kubernetes Role from Vault\nDESCRIPTION: Shell command to delete an existing Kubernetes role from Vault. This uses the DELETE HTTP method on the role-specific endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/kubernetes/role/default-role\n```\n\n----------------------------------------\n\nTITLE: Clone Vault Repository (Linux)\nDESCRIPTION: Clones the official Vault repository from GitHub into the created directory. This provides the source code needed to build Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"git clone https://github.com/hashicorp/vault.git\"\n```\n\n----------------------------------------\n\nTITLE: Collecting Database Operation Metrics in Vault\nDESCRIPTION: Includes metrics for database operations like close, create user, initialize, renew, and revoke across different database systems\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/all.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/database/close.mdx'\n```\n\n----------------------------------------\n\nTITLE: Enabling Permit-Pty Extension in SSH Roles\nDESCRIPTION: Add the permit-pty extension to SSH roles in Vault to ensure that authenticated users are provided with a pseudo-terminal interface upon login.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write ssh-client-signer/roles/my-role -<<\"EOH\"\n{\n  \"default_extensions\": {\n    \"permit-pty\": \"\"\n  }\n  // ...\n}\nEOH\n```\n\n----------------------------------------\n\nTITLE: Authenticating with RADIUS via CLI in Vault\nDESCRIPTION: This command demonstrates how to authenticate with Vault using the RADIUS auth method through the command line interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/radius.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=radius username=sethvargo\n```\n\n----------------------------------------\n\nTITLE: Reading Impersonated Account Configuration (cURL)\nDESCRIPTION: cURL command to retrieve the configuration details of an existing impersonated account from the GCP secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcp/impersonated-account/my-token-impersonate\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Role to Use Group Attribute from ADFS\nDESCRIPTION: A shell command to update the Vault SAML role to use the 'http://schemas.xmlsoap.org/claims/Group' attribute that is actually provided in the SAML response from AD FS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/<SAML_PLUGIN_PATH>/role/<ADFS_ROLE> \\\n    groups_attribute=http://schemas.xmlsoap.org/claims/Group\n```\n\n----------------------------------------\n\nTITLE: Complex Expression Operators in Vault Filtering\nDESCRIPTION: Demonstrates the logical operators and grouping syntax used to build complex filter expressions with multiple conditions in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/filtering.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n// Logical Or - evaluates to true if either sub-expression does\n<Expression 1> or <Expression 2>\n\n// Logical And - evaluates to true if both sub-expressions do\n<Expression 1 > and <Expression 2>\n\n// Logical Not - evaluates to true if the sub-expression does not\nnot <Expression 1>\n\n// Grouping - Overrides normal precedence rules\n( <Expression 1> )\n\n// Inspects data to check for a match\n<Matching Expression 1>\n```\n\n----------------------------------------\n\nTITLE: Force Restoring Raft Snapshot in Vault using cURL\nDESCRIPTION: This snippet demonstrates how to force restore a Raft snapshot in Vault using a POST request to the /sys/storage/raft/snapshot-force endpoint. It bypasses consistency checks and requires an authentication token and the snapshot file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data-binary @raft.snap \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot-force\n```\n\n----------------------------------------\n\nTITLE: Extracting Certificate and CA Chain from JSON using jq\nDESCRIPTION: These commands use `jq` to extract the CA chain and certificate from the `kmip.json` file generated earlier. The CA chain is saved to `ca.pem`, and the certificate (which also contains the key) is saved to `cert.pem`.  The `--raw-output` flag ensures that `jq` outputs the raw string content without additional formatting, and `--exit-status` makes `jq` return an error code if it fails.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njq --raw-output --exit-status '.data.ca_chain[]' kmip.json > ca.pem\njq --raw-output --exit-status '.data.certificate' kmip.json > cert.pem\n```\n\n----------------------------------------\n\nTITLE: Signing Vault Agent Injector Certificate with CA\nDESCRIPTION: Signs the Vault Agent Injector certificate using the CA certificate and key, with a validity of 1825 days and additional parameters from the extension file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl x509 \\\n  -req \\\n  -in tls.csr \\\n  -CA injector-ca.crt \\\n  -CAkey injector-ca.key \\\n  -CAcreateserial \\\n  -out tls.crt \\\n  -days 1825 \\\n  -sha256 \\\n  -extfile csr.conf\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Snapshot Command Usage\nDESCRIPTION: Details the usage of snapshot-related commands for saving and restoring Raft cluster state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault operator raft snapshot <subcommand> [options] [args]\n\n  This command groups subcommands for operators interacting with the snapshot\n  functionality of the integrated Raft storage backend.\n\nSubcommands:\n    restore    Installs the provided snapshot, returning the cluster to the state defined in it\n    save       Saves a snapshot of the current state of the Raft cluster into a file\n```\n\n----------------------------------------\n\nTITLE: Deleting a Certificate Role from Vault\nDESCRIPTION: This curl command sends a DELETE request to remove a specific certificate role from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    --cacert vault-ca.pem \\\n    https://127.0.0.1:8200/v1/auth/cert/certs/cert1\n```\n\n----------------------------------------\n\nTITLE: Address-Based Update Primary JSON Payload in Vault Replication API\nDESCRIPTION: JSON payload for updating the primary server in a Vault performance replication secondary setup using addresses. This payload is used when you want to specify potential primary cluster addresses rather than using a token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"update_primary_addrs\": [\"10.0.0.2:8201\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Group Alias by ID - HTTP API\nDESCRIPTION: This snippet outlines the process for deleting a group alias by its ID using a DELETE request. It is essential to provide the correct ID of the group alias to be removed from the identity store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/group-alias/id/ca726050-d8ac-6f1f-4210-3b5c5b613824\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Client Cache Settings\nDESCRIPTION: Configuration for the client cache used to store and manage Vault tokens. Includes persistence model, cache size, and lock settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nclientCache:\n  persistenceModel: \"none\"\n  cacheSize: 10000\n  numLocks: 100\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Connection with Sample Payload in JSON\nDESCRIPTION: JSON payload for configuring an Elasticsearch connection in Vault's database secrets engine. Includes connection parameters like URL, authentication credentials, and TLS configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/elasticdb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"elasticsearch-database-plugin\",\n  \"allowed_roles\": \"internally-defined-role,externally-defined-role\",\n  \"url\": \"http://localhost:9200\",\n  \"username\": \"vault\",\n  \"password\": \"myPa55word\",\n  \"ca_cert\": \"/usr/share/ca-certificates/extra/elastic-stack-ca.crt.pem\",\n  \"client_cert\": \"$ES_HOME/config/certs/elastic-certificates.crt.pem\",\n  \"client_key\": \"$ES_HOME/config/certs/elastic-certificates.key.pem\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Root IAM Credential Rotation Response\nDESCRIPTION: Sample JSON response after successfully rotating AWS root credentials, returning the new access key that Vault will use for future AWS operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"access_key\": \"AKIA...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Looking up KMIP Credential by Serial Number in Shell\nDESCRIPTION: cURL command to look up a KMIP credential by its serial number using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole/credential/lookup?serial_number=728181095563584845125173905844944137943705466376\n```\n\n----------------------------------------\n\nTITLE: Delete a Database Connection with cURL\nDESCRIPTION: This cURL command deletes a specific database connection from Vault by sending a DELETE request to the /database/config/:name endpoint. It requires appropriate permissions and a valid Vault token for success.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/database/config/mysql\n```\n\n----------------------------------------\n\nTITLE: Listing Password Policies using cURL\nDESCRIPTION: This snippet demonstrates how to list password policies using a cURL request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/policies/password\n```\n\n----------------------------------------\n\nTITLE: List Kubernetes Roles Response Format\nDESCRIPTION: Sample JSON response when listing Kubernetes roles. The response contains an array of role names under the \"keys\" property.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"default-role\", \"prod-role\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an Okta User via cURL\nDESCRIPTION: Shell command to delete an existing user from the Okta auth method using DELETE request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/okta/users/test-user\n```\n\n----------------------------------------\n\nTITLE: AliCloud Role POST Payload for Assume-Role Configuration\nDESCRIPTION: JSON payload for creating a role that uses AliCloud's Assume-Role functionality by specifying a role ARN.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role_arn\": \"acs:ram::5138828231865461:role/hastrustedactors\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Permissive GCP Roleset Policy (Not Recommended)\nDESCRIPTION: Example of an overly permissive HCL policy that grants read access to all roleset paths\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\n# DO NOT USE\npath \"/gcp/roleset/*\" {\n    capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Group Alias to Link Vault Group with AD Group\nDESCRIPTION: Command to create a group alias that links the external Vault group with an existing Active Directory group. Uses the previously saved group ID and mount accessor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write identity/group-alias         \\\n  name=\"<YOUR_EXISTING_AD_GROUP>\"          \\\n  mount_accessor=$(cat accessor_adfs.txt)  \\\n  canonical_id=\"$(cat group_id.txt)\"\n```\n\n----------------------------------------\n\nTITLE: Registering Basic Plugin Runtime in Vault\nDESCRIPTION: Demonstrates how to register a basic container plugin runtime using runc as the OCI runtime.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/register.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin runtime register -type=container -oci_runtime=runc runc\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Destroy Payload\nDESCRIPTION: This JSON payload specifies the `secret_id` to be destroyed. It is sent as the data for the destroy secret ID request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_id\": \"84896a0c-1347-aa90-a4f6-aca8b7558780\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Vault with GnuPG PGP Keys\nDESCRIPTION: This command initializes Vault with 3 key shares and a threshold of 2, using GnuPG PGP keys stored in files for three users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator init -key-shares=3 -key-threshold=2 \\\n    -pgp-keys=\"jeff.asc,vishal.asc,seth.asc\"\n```\n\n----------------------------------------\n\nTITLE: Listing Available Vault Policies\nDESCRIPTION: This snippet shows how to list the available policies on the Vault server using the `vault policy list` command. It requires Vault to be installed and configured correctly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault policy list\ndefault\nroot\"\n```\n\n----------------------------------------\n\nTITLE: Adding Hashicorp Helm Repository\nDESCRIPTION: This snippet shows how to add the Hashicorp Helm repository and verify access to the Vault chart. It's a prerequisite step before installing Vault using Helm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n@include 'helm/repo.mdx'\n```\n\n----------------------------------------\n\nTITLE: Autopilot Configuration Update Payload\nDESCRIPTION: JSON payload for updating autopilot configuration settings including cleanup policies, contact thresholds, and server stabilization parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautopilot.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"cleanup_dead_servers\": true,\n  \"last_contact_threshold\": \"10s\",\n  \"dead_server_last_contact_threshold\": \"24h\",\n  \"max_trailing_logs\": \"1000\",\n  \"min_quorum\": \"3\",\n  \"server_stabilization_time\": \"10s\",\n  \"disable_upgrade_migration\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Autopilot Configuration - Shell Request\nDESCRIPTION: HTTP POST request to modify the autopilot configuration using curl with a JSON payload. Requires Vault token authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautopilot.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/autopilot/configuration\n```\n\n----------------------------------------\n\nTITLE: Reviewing Migration Logs\nDESCRIPTION: This command retrieves and displays the logs from the migration init container, allowing you to review the migration process and check for any issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl logs vault-0 -c vault-server-migration\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Auth Role with Shell Commands\nDESCRIPTION: Shell commands to create a Kubernetes authentication role for VSO with appropriate permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/client-cache.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_NAMESPACE=<VAULT_NAMESPACE>\n\nvault write auth/<VAULT_KUBERNETES_PATH>/role/operator \\\n  bound_service_account_names=vault-secrets-operator-controller-manager \\\n  bound_service_account_namespaces=vault-secrets-operator \\\n  token_period=\"24h\" \\\n  token_policies=operator \\\n  audience=\"vault\"\n```\n\n----------------------------------------\n\nTITLE: Reading and Updating Policy Assignments Using API - Bash\nDESCRIPTION: This snippet retrieves the existing policy assignments for entities using a GET request and updates them with a new policy. It constructs a payload with updated policies and sends a POST request back to Vault to save the changes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/acl-policy-templates.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npolicy_name=\"<policy_name>\"\nwhile read entity_name; do\n\n  if [[ \"\" = \"${entity_name}\" ]] ; then continue ; fi\n\n  # Create a payload file with new policy added to any existing policy assignments\n  curl \\\n    --request GET                            \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n    ${VAULT_ADDR}/v1/${VAULT_NAMESPACE}/identity/entity/name/${entity_name} \\\n    | jq  \".data.policies + [\\\"${policy_name}\\\"] | {policies: .}\" > policy_update.json\n\n  # Update the policy assignment for the entity\n  curl                                        \\\n    --request POST                            \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n    --data @policy_update.json                \\\n    ${VAULT_ADDR}/v1/${VAULT_NAMESPACE}/identity/entity/name/${entity_name}\n  \ndone < rename-targets.txt\n```\n\n----------------------------------------\n\nTITLE: OIDC Authorization URL Request\nDESCRIPTION: cURL command to request an OIDC authorization URL\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/jwt/oidc/auth_url\n```\n\n----------------------------------------\n\nTITLE: Export Decoded Tokenization State - Response\nDESCRIPTION: Sample response showing exported tokenization values with their plaintext and token pairs, including optional expiration times.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"continuation\": \"4hELrrmGAwhHFjmMFny\",\n    \"values\": [\n      {\n        \"plaintext\": \"dmFsdWUtMA==\",\n        \"token\": \"Q4tYgFXHxUaPhDdV9rx2CduZGPxjYpAp1K523AUsNM5A2Z6DrXj3zz\"\n      },\n      {\n        \"plaintext\": \"dmFsdWUtMg==\",\n        \"token\": \"Q4tYgFXHxUNyMfqRW6fA82DYvMigwdf6JjATauyVzqx2SsmUShMhN5\",\n        \"expiration_time\": \"2021-03-15T00:31:10Z\"\n      },\n      {\n        \"plaintext\": \"dmFsdWUtMQ==\",\n        \"token\": \"Q4tYgFXHxUNtW27owABRv5GjuxjXTCGebPr7xkqRAY18YVmfZsk2MV\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Vault Seal Status via HTTP GET\nDESCRIPTION: Example of making an HTTP GET request to check the seal status of a Vault instance. This is an unauthenticated endpoint that returns the current seal state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/seal-status.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/seal-status\n```\n\n----------------------------------------\n\nTITLE: Deleting KV Metadata in Vault\nDESCRIPTION: This command deletes all versions and metadata associated with the specified key in the Vault KV store. It requires the `vault` CLI and appropriate permissions to access the specified path in the KV secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/metadata.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv metadata delete -mount=secret creds\nSuccess! Data deleted (if it existed) at: secret/metadata/creds\n```\n\n----------------------------------------\n\nTITLE: Updating ACME Account Status in Vault PKI (Shell)\nDESCRIPTION: This snippet shows how to update the status of an ACME account (e.g., revoke or re-enable) using a POST request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/acme/mgmt/account/keyid/2ea9859a-eba8-ff24-cd03-2a51639fc7d5\n```\n\n----------------------------------------\n\nTITLE: List Certificate Metadata Response\nDESCRIPTION: JSON response containing list of certificate serial numbers with metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"38:1f:29:ad:99:e8:c9:ae:7b:33:4d:b2:a5:c8:30:7c:71:93:77:ee\", \"67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72\"]\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Aliases by ID (cURL Request)\nDESCRIPTION: This cURL command lists available entity aliases from Vault. It sends a LIST request (or GET with `list=true`) to the `/identity/entity-alias/id` endpoint. A valid Vault token is required in the `X-Vault-Token` header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/entity-alias/id\n```\n\n----------------------------------------\n\nTITLE: Sample Response for PKI Cluster Configuration\nDESCRIPTION: JSON response showing the cluster configuration with path and AIA path URLs that are used for certificate distribution and templating.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"path\": \"<url>\",\n    \"aia_path\": \"<url>\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra Storage Backend in HCL\nDESCRIPTION: Basic HCL configuration block for setting up Cassandra as Vault's storage backend. Defines core connection parameters including host, consistency level, and protocol version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/cassandra.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"cassandra\" {\n  hosts            = \"localhost\"\n  consistency      = \"LOCAL_QUORUM\"\n  protocol_version = 3\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Okta MFA Method in Vault\nDESCRIPTION: This snippet illustrates how to update an existing Okta MFA method by sending a POST request to the '/identity/mfa/method/okta/:method_id' endpoint. It requires the UUID of the existing MFA method and the parameters documented in the 'Create' endpoint. The sample request demonstrates using curl to send the update.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/okta.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/okta/1db034b5-81f1-4a2b-8c2b-0f51ed0bd9fc\n```\n\n----------------------------------------\n\nTITLE: Deleting a KMIP Scope\nDESCRIPTION: This snippet shows how to delete a scope within the KMIP secrets engine by sending a DELETE request to the `/kmip/scope/:scope` endpoint. It also demonstrates how to use the `force` query parameter to force the deletion, even if KMIP managed objects exist within the scope.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope?force=false\n```\n\n----------------------------------------\n\nTITLE: Release Notes Table Structure in Markdown\nDESCRIPTION: Markdown table structure defining important changes and their descriptions for Vault 1.18.0 release\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.18.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Change                      | Description                                                                                                          |\n|-----------------------------|----------------------------------------------------------------------------------------------------------------------|\n```\n\n----------------------------------------\n\nTITLE: Creating AliCloud Role with POST Request\nDESCRIPTION: Example of how to create a role in the AliCloud secrets engine by sending a POST request to the role endpoint with a role configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/alicloud/role/my-application\n```\n\n----------------------------------------\n\nTITLE: Recommended GCP Roleset Policy\nDESCRIPTION: Example of a properly restricted HCL policy for roleset read access\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\npath \"/gcp/roleset/+\" {\n    capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transform Role with curl Request\nDESCRIPTION: Example curl command for creating or updating a role in the Transform secrets engine using a JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/role/example-role\n```\n\n----------------------------------------\n\nTITLE: Reading Cassandra Role Sample Request\nDESCRIPTION: cURL request to retrieve the definition of an existing Cassandra role from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/cassandra/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Specifying Multiple Audit Non-HMAC Request Keys in Vault CLI\nDESCRIPTION: This snippet shows how to specify multiple audit non-hmac request keys when tuning an auth method using the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth tune -audit-non-hmac-request-keys=value1 -audit-non-hmac-request-keys=value2 github/\nSuccess! Tuned the auth method at: github/\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Policies using CLI\nDESCRIPTION: Shows how to use the Vault CLI to list existing policies. This command filters out the root policy to focus on user-defined policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy list | grep -vEw 'root'\n\ndefault\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to DR Operation Token Fix Pull Request\nDESCRIPTION: Reference to a GitHub pull request that fixes an issue where generating a disaster recovery operation token would not output the token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_16\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4328](https://github.com/hashicorp/vault/pull/4328)]\n```\n\n----------------------------------------\n\nTITLE: Upgrading Vault Deployment with Final Raft Configuration\nDESCRIPTION: This command upgrades the Vault deployment using Helm with the final Raft storage configuration. It applies the settings for multiple replicas and removes the migration-specific configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ helm upgrade vault hashicorp/vault -f vault-raft-values.yml\n```\n\n----------------------------------------\n\nTITLE: UserInfo Endpoint Request using cURL\nDESCRIPTION: Example of making a GET request to the OIDC UserInfo endpoint using Bearer token authentication to retrieve user claims.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -X GET \\\n    --header \"Authorization: Bearer $ACCESS_TOKEN\" \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/userinfo\n```\n\n----------------------------------------\n\nTITLE: Adding Version Access Rule to Default Policy in HCL\nDESCRIPTION: This HCL snippet shows the policy rule that needs to be added to the default policy to allow reading the Vault version. It grants read capabilities to the 'sys/internal/ui/version' path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_16-default-policy-needs-to-be-updated.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Allow a token to look up the Vault version. This path is not subject to\n# redaction like the unauthenticated endpoints that provide the Vault version.\npath \"sys/internal/ui/version\" {\n    capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Tokenization\nDESCRIPTION: This is a sample JSON payload used to delete a token by specifying a plaintext value, transformation, and expiration constraints. It is utilized in API calls for deleting tokenized values under specific conditions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_75\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"1111-1111-1111-1111\",\n  \"min_expiration\": \"2022-06-06T3:14:15+00:00\",\n  \"min_expiration\": \"2022-06-07T9:26:53+00:00\",\n  \"transformation\": \"ccn-tokenization\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Elide List Responses Option in Vault Audit Logs\nDESCRIPTION: An example of how to configure the elide_list_responses option in Vault's audit configuration. When set to true, this replaces detailed list response data with just the count of entries, reducing audit log size.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/elide_list_responses.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nelide_list_responses=true\n```\n\n----------------------------------------\n\nTITLE: Listing Groups by Name - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command shows how to list available groups by their names in Vault's Identity store.  It sends a LIST request to the `/identity/group/name` endpoint and includes a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/group/name\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating KMS Provider - HTTP API - Markdown\nDESCRIPTION: This code block specifies the HTTP method and path for creating or updating a KMS provider in Azure Key Vault. The method is a POST request and the required path includes the provider's name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/azurekeyvault.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Path                 |\n| :----- | :------------------- |\n| `POST` | `/keymgmt/kms/:name` |\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Failed Login in Vault (Shell)\nDESCRIPTION: This snippet shows a failed login attempt using the userpass auth method in Vault, resulting in an internal error due to a missing policy in the namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/internal-error-namespace-missing-policy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=userpass username=user1 password=123\nError authenticating: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/auth/userpass/login/user1\nCode: 500. Errors:\n\n* internal error\n```\n\n----------------------------------------\n\nTITLE: Deactivating Request Logging in Vault HCL Configuration\nDESCRIPTION: Configuration example demonstrating how to disable request logging in Vault by setting log_requests_level to off while maintaining the general log_level setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/log-requests-level.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlog_requests_level = \"off\"\nlog_level = \"debug\"\n\nlistener \"tcp\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing FoundationDB Go Bindings Using Installation Script\nDESCRIPTION: Command to install the FoundationDB Go bindings using the provided installation script. The --fdbver parameter allows specifying the desired FoundationDB version, defaulting to 5.2.4 if not specified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/physical/foundationdb/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ physical/foundationdb/fdb-go-install.sh install --fdbver x.y.z\n```\n\n----------------------------------------\n\nTITLE: Delete STS Role Request\nDESCRIPTION: cURL command to remove STS role configuration for an AWS account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/aws/config/sts/111122223333\n```\n\n----------------------------------------\n\nTITLE: Verifying New Vault Mount Resource State\nDESCRIPTION: Shows how to verify a newly created Vault mount resource using terraform state show command. Displays the full configuration of the dev_keys plugin mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nterraform state show vault_mount.dev_keys_plugin\n```\n\n----------------------------------------\n\nTITLE: Excluding response data field from audit entries\nDESCRIPTION: This snippet shows how to configure the audit log to exclude the 'data' field from any response audit entries that contain it. This aids in cleaning up logs by not recording specific sensitive information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"fields\": [ \"/response/data\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting up XKS Configuration in TOML\nDESCRIPTION: This snippet is a configuration file for setting up XKS in conjunction with Vault using a TOML format. Key components include server details, security settings, and PKCS#11 module path configuration. Adjust parameters based on deployment specifics like region, service, and authentication keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[server]\nip = \"0.0.0.0\"\nport = 8000\nregion = \"us-east-2\"\nservice = \"kms-xks-proxy\"\n\n[server.tcp_keepalive]\ntcp_keepalive_secs = 60\ntcp_keepalive_retries = 3\ntcp_keepalive_interval_secs = 1\n\n[tracing]\nis_stdout_writer_enabled = true\nis_file_writer_enabled = true\nlevel = \"DEBUG\"\ndirectory = \"/var/local/xks-proxy/logs\"\nfile_prefix = \"xks-proxy.log\"\nrotation_kind = \"HOURLY\"\n\n[security]\nis_sigv4_auth_enabled = true\nis_tls_enabled = true\nis_mtls_enabled = false\n\n[tls]\ntls_cert_pem = \"tls/server_cert.pem\"\ntls_key_pem = \"tls/server_key.pem\"\nmtls_client_ca_pem = \"tls/client_ca.pem\"\nmtls_client_dns_name = \"us-east-2.alpha.cks.kms.aws.internal.amazonaws.com\"\n\n[[external_key_stores]]\nuri_path_prefix = \"/xyz\"\nsigv4_access_key_id = \"AKIA4GBY3I6JCE5M2HPM\"\nsigv4_secret_access_key = \"1234567890123456789012345678901234567890123=\"\nxks_key_id_set = [\"abc123\"]\n\n[pkcs11]\nsession_pool_max_size = 30\nsession_pool_timeout_milli = 0\nsession_eager_close = false\nuser_pin = \"\"\nPKCS11_HSM_MODULE = \"/usr/local/lib/libvault-pkcs11.so\"\ncontext_read_timeout_milli = 100\n\n[limits]\nmax_plaintext_in_base64 = 8192\nmax_aad_in_base64 = 16384\n\n[hsm_capabilities]\ncan_generate_iv = false\nis_zero_iv_required = false\n```\n\n----------------------------------------\n\nTITLE: Sending a GET Request to Read Role Configuration\nDESCRIPTION: This shell-session snippet shows how to use cURL to send a GET request to retrieve the configuration of a specific Vault role. It requires an active Vault token (`X-Vault-Token`).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/gcp/role/my-role\n```\n\n----------------------------------------\n\nTITLE: Submit Key Update - JSON Payload\nDESCRIPTION: Payload for submitting a single key share during rekey operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"AB32...\",\n  \"nonce\": \"abcd1234...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting an LDAP Group using cURL\nDESCRIPTION: This snippet shows how to delete a specific LDAP group by sending a DELETE request to the respective endpoint. The operation requires the group's name as a parameter and the X-Vault-Token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/ldap/groups/admins\n```\n\n----------------------------------------\n\nTITLE: Response Format for Listing Revocation Queue in Vault PKI\nDESCRIPTION: JSON response showing certificate serial numbers in the revocation queue, including which cluster requested the revocation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"3d:80:91:c3:c2:34:3b:81:69:3d:92:a3:80:69:db:53:04:26:ab:b4\": {\n        \"requesting_cluster\": \"48327b28-8325-6d79-6a0b-4cbaa6f27b4a\"\n      }\n    },\n    \"keys\": [\n      \"3d:80:91:c3:c2:34:3b:81:69:3d:92:a3:80:69:db:53:04:26:ab:b4\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Remount Response in JSON\nDESCRIPTION: Sample response from the /sys/remount endpoint after a successful remount operation. Returns a migration_id that can be used to monitor the status of the migration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/remount.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"migration_id\": \"ef3ba21c-8be8-4e5f-8d00-cb46a532c665\"\n}\n```\n\n----------------------------------------\n\nTITLE: AliCloud Login - JSON Payload\nDESCRIPTION: JSON payload for authenticating with Vault using the AliCloud auth method. Contains the role name and base64-encoded request details required to verify the AliCloud identity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"dev-role\",\n  \"identity_request_url\": \"aWRlbnRpdHlabrVxdWVzdF91cmw=\",\n  \"identity_request_headers\": \"aWRlimRpdHlfcmVxdWVzdF9oZWFkZXJz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Authority Certificate with OpenSSL\nDESCRIPTION: Creates a self-signed X.509 certificate for the CA using the previously generated private key. The certificate is valid for 1825 days and uses SHA256 for signing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl req \\\n   -x509 \\\n   -new \\\n   -nodes \\\n   -key injector-ca.key \\\n   -sha256 \\\n   -days 1825 \\\n   -out injector-ca.crt \\\n   -subj \"/C=US/ST=CA/L=San Francisco/O=HashiCorp/CN=vault-agent-injector-svc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Annotations in Kubernetes\nDESCRIPTION: Demonstrates how to add custom annotations to Kubernetes services using YAML or multi-line template string formats\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n# or\nannotations: |\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Creating CF Auth Role with cURL\nDESCRIPTION: Shell command for creating or updating a Cloud Foundry authentication role in Vault using a POST request with JSON payload. The role controls access privileges for CF instances.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/cf/roles/:role\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing LDAP Users\nDESCRIPTION: This JSON response provides a sample output when listing LDAP users. It includes metadata such as keys for the user names and additional lease information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"mitchellh\", \"armon\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Secret Metadata in Vault KV Engine\nDESCRIPTION: This JSON payload and cURL command demonstrate how to create or update the metadata of a secret in Vault's KV engine using the POST method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_versions\": 5,\n  \"cas_required\": false,\n  \"delete_version_after\": \"3h25m19s\",\n  \"custom_metadata\": {\n    \"foo\": \"abc\",\n    \"bar\": \"123\",\n    \"baz\": \"5c07d823-3810-48f6-a147-4c06b5219e84\"\n  }\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/metadata/my-secret\n```\n\n----------------------------------------\n\nTITLE: Mount Configuration Response Format\nDESCRIPTION: JSON response format showing the current mount configuration settings including default and max lease TTLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"default_lease_ttl\": 3600,\n  \"max_lease_ttl\": 7200,\n  \"force_no_cache\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Vault Access to Nomad (shell-session)\nDESCRIPTION: This command configures Vault to connect to a Nomad server using an ACL token and the server's default address. It sets up access details in the Vault secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/nomad.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write nomad/config/access \\\n    address=http://127.0.0.1:4646 \\\n    token=adf4238a-882b-9ddc-4a9d-5b6758e4159e\nSuccess! Data written to: nomad/config/access\n```\n\n----------------------------------------\n\nTITLE: Fetching Auth Method Details in Vault\nDESCRIPTION: This command retrieves a detailed list of enabled authentication methods in Vault, including their paths, types, and accessors.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth list -detailed\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Rewrap Operation\nDESCRIPTION: Response format showing the re-encrypted ciphertext.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_39\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ciphertext\": \"vault:v2:abcdefgh\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing AWS Roles - JSON Response\nDESCRIPTION: Sample JSON response showing the list of registered role names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"dev-role\", \"prod-role\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: IP Address Lookup Payload in JSON\nDESCRIPTION: Sample JSON payload for looking up roles associated with an IP address. The payload specifies the IP address to search for.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ip\": \"1.2.3.4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating RabbitMQ Credentials via CLI\nDESCRIPTION: Details the command for generating dynamic RabbitMQ credentials using Vault CLI, by specifying the named role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read rabbitmq/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Basic Consul Service Registration Configuration in HCL\nDESCRIPTION: Basic configuration for registering Vault as a service in Consul using the default local address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {\n  address      = \"127.0.0.1:8500\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Database Secrets Engine in Vault\nDESCRIPTION: This command enables the database secrets engine in Vault. It can be enabled at a custom path using the '-path' argument.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redshift.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault secrets enable database\n```\n\n----------------------------------------\n\nTITLE: Configuring Client Cache with Helm Values\nDESCRIPTION: Helm values configuration for enabling encrypted client cache storage in VSO.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/client-cache.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncontroller:\n  manager:\n    clientCache:\n      persistenceModel: direct-encrypted\n      storageEncryption:\n        enabled: true\n        vaultConnectionRef: local-vault-server\n        keyName: vso-client-cache\n        transitMount: <VAULT_TRANSIT_PATH>\n        namespace: <VAULT_NAMESPACE>\n        method: kubernetes\n        mount: <VAULT_KUBERNETES_PATH>\n        kubernetes:\n          role: operator\n          serviceAccount: vault-secrets-operator-controller-manager\n          tokenAudiences: [\"vault\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Plugin with Google Cloud IAM Authentication\nDESCRIPTION: This command configures the MySQL plugin with Google Cloud IAM authentication using Application Default Credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mysql-database \\\n    plugin_name=\"mysql-database-plugin\" \\\n    allowed_roles=\"my-role\" \\\n    connection_url=\"user@cloudsql-mysql(project:region:instance)/mysql\" \\\n    auth_type=\"gcp_iam\"\n```\n\n----------------------------------------\n\nTITLE: Batch HMAC Request Payload\nDESCRIPTION: JSON payload for batch HMAC operations containing multiple input items, including empty entries to demonstrate error handling.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batch_input\": [\n    {\n      \"input\": \"adba32==\"\n    },\n    {\n      \"input\": \"adba32==\"\n    },\n    {},\n    {\n      \"input\": \"\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata for a Secret in Vault KV\nDESCRIPTION: This snippet illustrates how to get metadata for a key named 'creds' in the KV engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv metadata get -mount=secret creds\n```\n\n----------------------------------------\n\nTITLE: Enhancing Persistence in AWS Secrets Engine\nDESCRIPTION: This release note details the improvements made to the AWS Secrets engine that allow it to persist entries to storage between writes, minimizing the need for users to supply all required fields with each update and enabling targeted updates. Users must now explicitly set a field to its zero value to clear previously configured values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29497.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nsecrets/aws: The AWS Secrets engine now persists entries to storage between writes. This enables users\\nto not have to pass every required field on each write and to make individual updates as necessary.\\nNote: in order to zero out a value that is previously configured, users must now explicitly set the\\nfield to its zero value on an update.\"\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Role - JSON Request\nDESCRIPTION: JSON payload for creating or updating a role with specified OCIDs and token configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ocid_list\": \"ocid1.group.oc1..aaaaaaaaiqnblimpvmegkqh3bxilrdvjobr7qd223g275idcqhexamplefq,ocid1.dynamicgroup.oc1..aaaaaaaa5hmfyrdaxvmt52ekju5n7ffamn2pdvxaq6esb2vzzoduexamplea\",\n  \"token_policies\": [\"dev\", \"prod\"],\n  \"token_ttl\": 1800\n}\n```\n\n----------------------------------------\n\nTITLE: Sample MFA Validation Payload with UUID\nDESCRIPTION: Example JSON payload for MFA validation using a UUID as the method identifier. The payload includes an MFA request ID and a map of MFA method IDs to passcode credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/validate.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"mfa_request_id\": \"5879c74a-1418-1948-7be9-97b209d693a7\",\n  \"mfa_payload\": {\n      \"d16fd3c2-50de-0b9b-eed3-0301dadeca10\": [\"910201\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to Create a CA Certificate Role\nDESCRIPTION: This curl command sends a POST request to create a CA certificate role in Vault. It includes the necessary headers, request method, and data payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --cacert vault-ca.pem \\\n    --data @payload.json\n    https://127.0.0.1:8200/v1/auth/cert/certs/test-ca\n```\n\n----------------------------------------\n\nTITLE: Generating a Login Token for User\nDESCRIPTION: This command logs in a user and generates a login token, which includes the associated policies and user information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/userpass/login/testuser password=testpassword\n```\n\n----------------------------------------\n\nTITLE: Passing Context to AWS SDK Calls in DynamoDB Storage\nDESCRIPTION: Improvement to the DynamoDB storage backend that now passes context to AWS SDK calls. This enhancement enables better request lifecycle management, timeout handling, and cancellation support.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27927.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nstorage/dynamodb: Pass context to AWS SDK calls\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Global Plugin Reload\nDESCRIPTION: JSON payload example for reloading a plugin globally across all Vault instances in a cluster. The 'scope' parameter is set to 'global' to apply the reload operation across the entire cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-reload.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scope\": \"global\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request OCSP Status with OpenSSL\nDESCRIPTION: Makes an OCSP request to check certificate revocation status using OpenSSL CLI\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_41\n\nLANGUAGE: shell\nCODE:\n```\nopenssl ocsp -no_nonce -issuer issuer.pem -CAfile ca_chain.pem -cert cert-to-revoke.pem -text -url $VAULT_ADDR/v1/pki/ocsp\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up XKS Resources in AWS CLI\nDESCRIPTION: These commands demonstrate how to clean up the created resources. They include disabling the key, disconnecting the custom key store, and deleting the custom key store. Note that key deletion requires all associated keys to be disabled and deleted first.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws kms disable-key --key-id a93f205a-2a37-4338-aa64-92b4a4b0b67d\n$ aws kms disconnect-custom-key-store --custom-key-store-id cks-16460f66b34705025\n$ aws kms delete-custom-key-store --custom-key-store-id cks-16460f66b34705025\n```\n\n----------------------------------------\n\nTITLE: License Utilization Data Format - JSON Structure\nDESCRIPTION: Example JSON structure showing the format of license utilization data, including metrics, version information, and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/manual-reporting.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"snapshot_version\": 2,\n  \"id\": \"0001JWAY00BRF8TEXC9CVRHBAC\",\n  \"timestamp\": \"2024-02-08T16:55:28.085215-08:00\",\n  \"schema_version\": \"2.0.0\",\n  \"product\": \"vault\",\n  \"process_id\": \"01HP5NJS21HN50FY0CBS0SYGCH\",\n  \"metrics\": {\n    \"clientcount.current_month_estimate.type.acme_client\": {\n      \"key\": \"clientcount.current_month_estimate.type.acme_client\",\n      \"value\": 0,\n      \"mode\": \"write\"\n    },\n    \"clientcount.current_month_estimate.type.entity\": {\n      \"key\": \"clientcount.current_month_estimate.type.entity\",\n      \"value\": 20,\n      \"mode\": \"write\"\n    },\n    \"clientcount.current_month_estimate.type.nonentity\": {\n      \"key\": \"clientcount.current_month_estimate.type.nonentity\",\n      \"value\": 11,\n      \"mode\": \"write\"\n    },\n    \"clientcount.current_month_estimate.type.secret_sync\": {\n      \"key\": \"clientcount.current_month_estimate.type.secret_sync\",\n      \"value\": 0,\n      \"mode\": \"write\"\n    },\n    \"clientcount.previous_month_complete.type.acme_client\": {\n      \"key\": \"clientcount.previous_month_complete.type.acme_client\",\n      \"value\": 0,\n      \"mode\": \"write\"\n    },\n    \"clientcount.previous_month_complete.type.entity\": {\n      \"key\": \"clientcount.previous_month_complete.type.entity\",\n      \"value\": 0,\n      \"mode\": \"write\"\n    },\n    \"clientcount.previous_month_complete.type.nonentity\": {\n      \"key\": \"clientcount.previous_month_complete.type.nonentity\",\n      \"value\": 0,\n      \"mode\": \"write\"\n    },\n    \"clientcount.previous_month_complete.type.secret_sync\": {\n      \"key\": \"clientcount.previous_month_complete.type.secret_sync\",\n      \"value\": 0,\n      \"mode\": \"write\"\n    }\n  },\n  \"product_version\": \"1.16.0+ent\",\n  \"license_id\": \"7d68b16a-74fe-3b9f-a1a7-08cf461fff1c\",\n  \"checksum\": 6861637915450723051,\n  \"metadata\": {\n    \"billing_start\": \"2023-05-04T00:00:00Z\",\n    \"cluster_id\": \"16d0ff5b-9d40-d7a7-384c-c9b95320c60e\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Viewing Automatic Rotation Policy\nDESCRIPTION: Command to view the current automatic key rotation configuration settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rotate.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/rotate/config\n```\n\n----------------------------------------\n\nTITLE: SAML Role Response in JSON\nDESCRIPTION: This JSON response contains the configuration of a SAML role, including bound attributes, subjects, and token policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"3148ca9a-286e-a0a4-5a4b-31b6abb63d37\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"bound_attributes\": {\n      \"group\": [\n        \"admin\"\n      ]\n    },\n    \"bound_attributes_type\": \"string\",\n    \"bound_subjects\": [\n      \"*@hashicorp.com\"\n    ],\n    \"bound_subjects_type\": \"glob\",\n    \"groups_attribute\": \"\",\n    \"token_bound_cidrs\": [],\n    \"token_explicit_max_ttl\": 0,\n    \"token_max_ttl\": 0,\n    \"token_no_default_policy\": false,\n    \"token_num_uses\": 0,\n    \"token_period\": 0,\n    \"token_policies\": [\n      \"writer\"\n    ],\n    \"token_ttl\": 0,\n    \"token_type\": \"default\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting TLS and CA Certificates from JSON\nDESCRIPTION: Extract TLS client key, certificate, and CA bundle from JSON response to file system for use in Oracle TDE.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\njq --raw-output --exit-status '.data.ca_chain[]' kmip.json > ca.pem\njq --raw-output --exit-status '.data.certificate' kmip.json > cert.pem\n```\n\n----------------------------------------\n\nTITLE: Deleting an Entity by ID - HTTP API - Shell\nDESCRIPTION: This cURL command sends a DELETE request to remove an entity and its aliases from Vault using the specified entity ID. A valid Vault token must be passed via the request header, and no JSON payload is required.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/entity/id/8d6a45e5-572f-8f13-d226-cd0d1ec57297\n```\n\n----------------------------------------\n\nTITLE: Creating Consul Management Token via API\nDESCRIPTION: Example of creating a Consul management token using the Consul HTTP API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Consul-Token: my-management-token\" \\\n    --request PUT \\\n    --data '{\"Name\": \"sample\", \"Type\": \"management\"}' \\\n    https://consul.rocks/v1/acl/create\n```\n\n----------------------------------------\n\nTITLE: Reading Dynamic Filter from Primary\nDESCRIPTION: cURL command to read dynamically filtered paths and namespaces from the primary node.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/dynamic-filter/mySecondaryID\n```\n\n----------------------------------------\n\nTITLE: Response from Azure Auth Method - HashiCorp Vault\nDESCRIPTION: This JSON snippet shows the expected response from the authentication API call, containing vital tokens and metadata for access management in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"f33f8c72-924e-11f8-cb43-ac59d697597c\",\n    \"accessor\": \"0e9e354a-520f-df04-6867-ee81cae3d42d\",\n    \"policies\": [\"default\", \"dev\", \"prod\"],\n    \"lease_duration\": 2764800,\n    \"renewable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AliCloud Role GET Response for Policy-Based Configuration\nDESCRIPTION: Sample response when retrieving a role configured with policies, showing both the inline policies and references to remote policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inline_policies\": [\n    {\n      \"hash\": \"49796debb24d39b7a61485f9b0c97e04\",\n      \"policy_document\": {\n        \"Statement\": [\n          {\n            \"Action\": [\"ram:Get*\", \"ram:List*\"],\n            \"Effect\": \"Allow\",\n            \"Resource\": \"*\"\n          }\n        ],\n        \"Version\": \"1\"\n      }\n    }\n  ],\n  \"max_ttl\": 0,\n  \"remote_policies\": [\n    {\n      \"name\": \"AliyunOSSReadOnlyAccess\",\n      \"type\": \"System\"\n    },\n    {\n      \"name\": \"AliyunRDSReadOnlyAccess\",\n      \"type\": \"System\"\n    }\n  ],\n  \"role_arn\": \"\",\n  \"ttl\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Sample request to create/update static role using Curl\nDESCRIPTION: This snippet shows how to send a POST request to the Vault API with a payload to create or update a static role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/aws/static-roles/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Verifying VSO Installation\nDESCRIPTION: Checks the status of the Vault Secrets Operator pods after installation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl get pods -n vault-secrets-operator-system\n```\n\n----------------------------------------\n\nTITLE: Reading Activation Flags Status in Vault\nDESCRIPTION: This shell request demonstrates how to query the activation status of gated features in Vault. The unauthenticated GET request returns lists of activated and unactivated features.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/activation-flags.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/activation-flags\n```\n\n----------------------------------------\n\nTITLE: Listing Direct Children Under a Hierarchical Path in Vault LDAP Secrets Engine\nDESCRIPTION: Lists all direct children under the 'org/' path in the LDAP secrets engine. The output shows both 'platform/' (indicating a sub-path) and 'secure' (indicating an endpoint).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault list ldap/static-role/org/\nKeys\n----\nplatform/\nsecure\n```\n\n----------------------------------------\n\nTITLE: Reading KV Secrets Using Direct Path\nDESCRIPTION: Example of reading secrets from KV version 2 store using the direct path method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/read.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read secret/data/customers\n```\n\n----------------------------------------\n\nTITLE: Reading Credential - HTTP API - Shell\nDESCRIPTION: This snippet explains how to read a credential using a GET request to the endpoint for credentials, which returns details about the generated credential including lease duration, public key, and private key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/mongodbatlas.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/mongodbatlas/creds/0fLBv1c2YDzPlJB1PwsRRKHR\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Userpass Auth Method\nDESCRIPTION: This command authenticates to the `us-west-org` Vault namespace using the userpass authentication method and stores the resulting token in a file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ VAULT_NAMESPACE=us-west-org vault login -field=token -method=userpass \\\nusername=tam-user password=\"my-long-password\" > token.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Vault Auto-Auth Sinks (JSON)\nDESCRIPTION: Example of configuring multiple file sinks in Vault auto-auth using JSON format. Shows how to specify multiple sink configurations within the sinks array.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n{\n  \"auto_auth\" : {\n    \"method\" : [\n      {\n        type = \"approle\"\n\n        config = {\n          role_id_file_path = \"/etc/vault/roleid\"\n          secret_id_file_path = \"/etc/vault/secretid\"\n        }\n      }\n    ],\n    \"sinks\" : [\n      {\n        \"sink\" : {\n          type = \"file\"\n\n          config = {\n            path = \"/tmp/file-foo\"\n          }\n        }\n      },\n      {\n        \"sink\" : {\n          type = \"file\"\n\n          config = {\n            path = \"/tmp/file-bar\"\n          }\n        }\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Default Policy Configuration in Vault\nDESCRIPTION: Boolean setting to control whether the default policy is automatically attached to generated tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/tokenstorefields.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ntoken_no_default_policy = false\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Vault Helm Chart\nDESCRIPTION: This command installs the latest release of the Vault Helm chart with pods prefixed with the name 'vault'. It demonstrates the basic usage of the helm install command for Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secrets in YAML\nDESCRIPTION: Demonstrates how to specify image pull secrets for private registries in the Helm chart configuration. Two formats are shown: an array of name map entries and an array of names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - name: image-pull-secret\n# or\nimagePullSecrets:\n  - image-pull-secret\n```\n\n----------------------------------------\n\nTITLE: Vault Database User Revocation Metric Definition\nDESCRIPTION: Performance metric capturing the time taken to revoke a user in a named database secrets engine, measured in milliseconds\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/database/name/revokeuser.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### database.{NAME}.RevokeUser ((#database-name-revokeuser))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to revoke a user for the named database secrets engine\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret for Injector TLS\nDESCRIPTION: Creates a Kubernetes secret in the 'vault' namespace containing the signed certificate and private key for the Vault Agent Injector.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl create secret generic injector-tls \\\n    --from-file tls.crt \\\n    --from-file tls.key \\\n    --namespace=vault\n```\n\n----------------------------------------\n\nTITLE: Vault Token Usage\nDESCRIPTION: This section displays the general usage pattern for the `vault token` command, listing available subcommands like `capabilities`, `create`, `lookup`, `renew`, and `revoke`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault token <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    capabilities    Print capabilities of a token on a path\n    create          Create a new token\n    lookup          Display information about a token\n    renew           Renew a token lease\n    revoke          Revoke a token and its children\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Response Wrap TTL via Environment Variable\nDESCRIPTION: Sets a 5-minute time-to-live duration for wrapped responses using an environment variable\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/wrap-ttl.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_WRAP_TTL=\"5m\"\n```\n\n----------------------------------------\n\nTITLE: Successful Entity Alias Creation Response (JSON)\nDESCRIPTION: This JSON response shows the structure of a successful entity alias creation.  It returns the canonical ID of the associated entity and the generated ID of the new alias, confirming the alias was successfully created and linked to the specified entity within the Identity store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"canonical_id\": \"404e57bc-a0b1-a80f-0a73-b6e92e8a52d3\",\n    \"id\": \"34982d3d-e3ce-5d8b-6e5f-b9bb34246c31\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetch New ACME EAB Binding Token via CURL\nDESCRIPTION: This CURL command posts a request to the Vault API to obtain a new ACME EAB binding token. The token is specific to an ACME directory and generates an ID and HMAC key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/pki/acme/new-eab\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sanitized Configuration with cURL in Shell\nDESCRIPTION: This shell command demonstrates how to make a GET request to the /sys/config/state/sanitized endpoint using cURL. The request includes the necessary X-Vault-Token header for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-state.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n  --header \"X-Vault-Token: ...\" \\\n    'http://127.0.0.1:8200/v1/sys/config/state/sanitized'\n```\n\n----------------------------------------\n\nTITLE: Key Trimming API Request\nDESCRIPTION: cURL command to trim old versions of a GCP KMS key via Vault's HTTP API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_39\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/trim/my-key\n```\n\n----------------------------------------\n\nTITLE: Library Set Response - JSON Response\nDESCRIPTION: Sample response showing the configuration of an LDAP service account library set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service_account_names\": [\"fizz@example.com\", \"buzz@example.com\"],\n  \"ttl\": \"10h\",\n  \"max_ttl\": \"20h\",\n  \"disable_check_in_enforcement\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Group Aliases by ID - HTTP API\nDESCRIPTION: This snippet shows how to retrieve a list of available group aliases by sending a LIST request. This can be helpful for inventory purposes, allowing the user to see all group aliases managed in the identity store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/group-alias/id\n```\n\n----------------------------------------\n\nTITLE: Response from PKI Key Generation API Call\nDESCRIPTION: JSON response from the key generation endpoint showing the successful creation of an EC key named 'root-key-2022' with its generated key_id.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"8ad22b2f-7d14-f2cd-a10a-d1abc33676ab\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"key_id\": \"adda2443-a8aa-d181-9d07-07c7be6a76ab\",\n    \"key_name\": \"root-key-2022\",\n    \"key_type\": \"ec\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed Parameters with Wildcard in Vault Policy (HCL)\nDESCRIPTION: This snippet shows how to use a wildcard to allow all other parameters while restricting specific ones in a Vault policy. It allows creating 'secret/foo' with specific values for 'bar' and any values for other parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\npath \"secret/foo\" {\n  capabilities = [\"create\"]\n  allowed_parameters = {\n    \"bar\" = [\"zip\", \"zap\"]\n    \"*\"   = []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Custom Message Details\nDESCRIPTION: Retrieves the complete details of a specific custom message using its unique ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-custom-messages.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/ui/custom-messages/01234567-89ab-cdef-0123-456789abcdef\n```\n\n----------------------------------------\n\nTITLE: Distributing Key to Azure Key Vault\nDESCRIPTION: This command distributes a key from Vault to Azure Key Vault. It specifies the key's purpose and protection type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write keymgmt/kms/example-kms/key/rsa-1 \\\n    purpose=\"encrypt,decrypt\" \\\n    protection=\"hsm\"\n```\n\n----------------------------------------\n\nTITLE: Token Endpoint Response\nDESCRIPTION: Sample JSON response from the Token endpoint containing access_token, id_token, and related metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_token\": \"b.AAAAAQJEH5VXjfjUESCwySTKk2MS1MGVNc9oU-N2EyoLKVo9SYa-NnOWAXloYfrlO45UWC3R1PC5ZShl3JdmRJ0264julNnlBduSNXJkYjgCQsFQwXTKHcjhqdNsmJNMWiPaHPn5NLSpNQVtzAxfHADt4r9rmX-UEG5seOWbmK_Z5WwS_4a8-wcVPB7FpOGzfBydP7yMxHu-3H1TWyQvYVr28XUfYxcBbdlzxhJn0yqkWItgmZ25xEOp7SW7Pg4tYB7AXfk\",\n  \"expires_in\": 3600,\n  \"id_token\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImEzMjk5ZWVmLTllNDEtOGNiYS1kNWExLTZmZWM2NjIyODRjYyJ9.eyJhdF9oYXNoIjoiMUdlQlEzUFdtUjJ2ajZVU2swSW42USIsImF1ZCI6InpTSktMVmk0R1BYS1o3TTZzUUEwY3FNc05VaHNPYkVTIiwiY19oYXNoIjoiN09SOUszNmhNdllENzJkUkFLUHhNdyIsImNvbnRhY3QiOnsiZW1haWwiOiJ2YXVsdEBoYXNoaWNvcnAuY29tIiwicGhvbmVfbnVtYmVyIjoiMTIzLTQ1Ni03ODkwIn0sImV4cCI6MTYzMzEwNjI5NCwiZ3JvdXBzIjpbImVuZ2luZWVyaW5nIl0sImlhdCI6MTYzMzEwNDQ5NCwiaXNzIjoiaHR0cDovLzEyNy4wLjAuMTo4MjAwL3YxL2lkZW50aXR5L29pZGMvcHJvdmlkZXIvbXktcHJvdmlkZXIiLCJuYW1lc3BhY2UiOiJyb290Iiwibm9uY2UiOiJhYmNkZWZnaGlqayIsInN1YiI6IjUwMDA3OTZlLTM2ZGYtMGQ4Yy02NDYwLTgxODUzZDliMjY2NyIsInVzZXJuYW1lIjoiZW5kLXVzZXIifQ.ehdLj6jnrJvltar1kkVSyNK48w2M5vkh5DTFJFZDqatnDWhQbbKGLZnVgd3wD6KPboXRaUwhGe4jDiTIiSoJaovOhsia77NKukym_ROLvGZw-LG7xaYkzJLnmEfeQhelLxWe0DHPROB7VXcFqBx8vX5hkuoVyqrB87vwiobK42pDPZ9MRsmbM2yzBC3wrnT7RQFtT4q2Bbyt9YIAHUaq9rU0PwJRoNISw6of1uQHo3_UzLdpwth7PEOEcI47OBGFA5vR_Gw3ocREfSrUWfCWOInAKCT43cImvg4Bts6qiZYfv9n-iNBq4AihGqq_VEF-hB1Hrprn7VgnEZ1VjUHaQQ\",\n  \"token_type\": \"Bearer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a Template with cURL in Vault Transform API\nDESCRIPTION: Makes a GET request to retrieve a specific template by name from the Vault Transform Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transform/template/example-template\n```\n\n----------------------------------------\n\nTITLE: Multi-value UI Header Response\nDESCRIPTION: Sample JSON response showing multiple header values in an array.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"values\": [\"custom-value-1\", \"custom-value-2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Azure Secrets Engine Configuration (CLI)\nDESCRIPTION: Vault CLI command to delete the stored Azure secrets engine configuration and credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault delete azure/config\n```\n\n----------------------------------------\n\nTITLE: Consul API Response\nDESCRIPTION: Example JSON response from Consul API when creating a management token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/consul.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n\"ID\": \"7652ba4c-0f6e-8e75-5724-5e083d72cfe4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Asymmetric Decryption KMS Key\nDESCRIPTION: Command to create a KMS key for asymmetric decryption, specifying the key ring, purpose, and a specific RSA algorithm with 4096-bit key size and SHA-256 hash.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/keys/my-key \\\n    key_ring=projects/.../my-keyring \\\n    purpose=asymmetric_decrypt \\\n    algorithm=rsa_decrypt_oaep_4096_sha256\n```\n\n----------------------------------------\n\nTITLE: Building Vault Lambda Extension from Source\nDESCRIPTION: Shell command to build the Vault Lambda Extension binary from source for Linux AMD64 architecture.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ GOOS=linux GOARCH=amd64 go build -o vault-lambda-extension main.go\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Userpass Auth Method in Vault\nDESCRIPTION: This snippet demonstrates how to get help information for the userpass authentication method using the 'auth help' subcommand. It provides usage instructions for authenticating with the userpass method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth help userpass/\nUsage: vault login -method=userpass [CONFIG K=V...]\n# ...\n```\n\n----------------------------------------\n\nTITLE: Deleting a Lease Count Quota with cURL in Vault\nDESCRIPTION: Sample cURL request to delete an existing lease count quota by name. This sends a DELETE request to the specific quota endpoint requiring a Vault token for authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/lease-count-quotas.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/quotas/lease-count/global-lease-count-quota\n```\n\n----------------------------------------\n\nTITLE: Vault: Gox Removal Release Note\nDESCRIPTION: This snippet represents a release note indicating the removal of the `gox` tool from the Vault project's core.  `gox` is a tool for cross-compiling Go applications.  Removing it likely means a change in the build process or dependency management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16353.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\ncore: remove gox\n```\n```\n\n----------------------------------------\n\nTITLE: Rebuilding a Certificate Using OpenSSL in Vault Project\nDESCRIPTION: These commands regenerate a certificate by first creating a CSR from an existing cert.pem, then signing it with a root CA. The resulting certificate includes a subject alternative name for 'cert.example.com' and IP '127.0.0.1' and is valid for approximately 25 years.\nSOURCE: https://github.com/hashicorp/vault/blob/main/builtin/credential/cert/test-fixtures/keys/rebuild-cert.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl x509 -in cert.pem -signkey key.pem -x509toreq -out cert.csr\n$ openssl x509 -req -in cert.csr -CA ../root/rootcacert.pem -CAkey ../root/rootcakey.pem -CAcreateserial -out cert.pem -days 9132 -sha256 -extensions v3_req -extfile <(echo \"[v3_req]\\nsubjectAltName=DNS:cert.example.com,IP:127.0.0.1\")\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Secret Metadata in Vault KV Engine\nDESCRIPTION: This JSON snippet shows a sample response when reading the metadata of a secret in Vault's KV engine, including version information and custom metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cas_required\": false,\n    \"created_time\": \"2018-03-22T02:24:06.945319214Z\",\n    \"current_version\": 3,\n    \"delete_version_after\": \"3h25m19s\",\n    \"max_versions\": 0,\n    \"oldest_version\": 0,\n    \"updated_time\": \"2018-03-22T02:36:43.986212308Z\",\n    \"custom_metadata\": {\n      \"foo\": \"abc\",\n      \"bar\": \"123\",\n      \"baz\": \"5c07d823-3810-48f6-a147-4c06b5219e84\"\n    },\n    \"versions\": {\n      \"1\": {\n        \"created_time\": \"2018-03-22T02:24:06.945319214Z\",\n        \"deletion_time\": \"\",\n        \"destroyed\": false\n      },\n      \"2\": {\n        \"created_time\": \"2018-03-22T02:36:33.954880664Z\",\n        \"deletion_time\": \"\",\n        \"destroyed\": false\n      },\n      \"3\": {\n        \"created_time\": \"2018-03-22T02:36:43.986212308Z\",\n        \"deletion_time\": \"\",\n        \"destroyed\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Allowing Cloning of API Client HTTP Headers in Vault\nDESCRIPTION: This snippet outlines the enhancement of the `api.Client` functionality to support cloning HTTP headers. It provides a method for users to clone headers either via `api.Config.CloneHeaders` or by utilizing the `api.Client.SetCloneHeaders` method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12117.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\napi: Allow cloning `api.Client` HTTP headers via `api.Config.CloneHeaders` or `api.Client.SetCloneHeaders`.\"\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Orphan Token Revocation\nDESCRIPTION: This snippet provides the required JSON payload for revoking a token while leaving its children intact.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"ClientToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Request for Creating or Updating an Entity - Shell\nDESCRIPTION: This cURL command sends a POST request to create or update an entity in Vault. It uses the JSON payload data from a file and requires a valid Vault token. The endpoint `/identity/entity` is used, with the request header specifying the Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/entity\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Create/Update Secret - Vault KV API - JSON\nDESCRIPTION: This JSON sample payload demonstrates the structure of the data sent in the body when creating or updating a secret in the Vault KV API. It includes key-value pairs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v1.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": \"bar\",\n  \"zip\": \"zap\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom DynamoDB Configuration with Capacity Settings\nDESCRIPTION: Example showing DynamoDB configuration with custom table name and read/write capacity settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/dynamodb.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"dynamodb\" {\n  table = \"my-vault-data\"\n\n  read_capacity  = 10\n  write_capacity = 15\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Revoked Certificates with cURL in Vault PKI Engine\nDESCRIPTION: Makes a LIST request to retrieve revoked certificates from the Vault PKI secrets engine. Requires authentication via X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/certs/revoked\n```\n\n----------------------------------------\n\nTITLE: Verify Rekey Operation\nDESCRIPTION: Performs verification of a rekey operation using a specific nonce value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey -verify -nonce=\"...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotations in YAML for Vault CSI Provider\nDESCRIPTION: Example showing two ways to define annotations for the Vault CSI Provider - either as a YAML dictionary or as a multi-line templated string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_49\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  foo: bar\n# or\nannotations: |\n  foo: bar\n```\n\n----------------------------------------\n\nTITLE: Setting up AppRole Authentication\nDESCRIPTION: Commands to enable AppRole authentication and create a role for EKM encryption with specific token parameters\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault auth enable approle\nvault write auth/approle/role/ekm-encryption-key-role \\\n    token_ttl=20m \\\n    max_token_ttl=30m \\\n    token_policies=tde-policy\n```\n\n----------------------------------------\n\nTITLE: Saving Vault Password Policy via API (jq and curl)\nDESCRIPTION: This shell script uses `jq` and `curl` to save a Vault password policy via the API. It reads the policy file, escapes special characters, and makes a POST request to the `/sys/policies/password/{policy_name}` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/random-string.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ jq -Rs '{ \\\"policy\\\": . | gsub(\"[\\\\r\\\\n\\\\t]\"; \\\"\\\") }' <path_to_policy_file> |\n  curl                                        \\\n    --request POST                            \\\n    --header \\\"X-Vault-Token: ${VAULT_TOKEN}\\\"  \\\n    \\\"$(</dev/stdin)\\\"                          \\\n    ${VAULT_ADDR}/v1/sys/policies/password/<policy_name>\"\n```\n\n----------------------------------------\n\nTITLE: Setting mlock Capability for Plugin Binary\nDESCRIPTION: Command to set the required mlock capability on a plugin binary when Vault is configured with mlock enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-architecture.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsudo setcap cap_ipc_lock=+ep <plugin-binary>\n```\n\n----------------------------------------\n\nTITLE: Response Sample for Static Role with Rotation Period in Vault\nDESCRIPTION: JSON response from Vault showing a static role configuration with password credential type, MySQL database, and hourly rotation period. Contains configuration details including username and rotation statements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"credential_type\": \"password\",\n    \"db_name\": \"mysql\",\n    \"username\": \"static-user\",\n    \"rotation_statements\": [\n      \"ALTER USER \\\"{{name}}\\\" IDENTIFIED BY '{{password}}';\"\n    ],\n    \"rotation_period\": 3600,\n    \"skip_import_rotation\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring CIEPS to Vault JSON Response in PKI Secrets Engine\nDESCRIPTION: Defines the JSON structure for responses sent from CIEPS to Vault, including the request UUID, optional error message, warnings, certificate, issuer reference, and storage preferences.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cieps.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_uuid\": \"string\",\n  \"error\": \"string\",\n  \"warnings\": [],\n  \"certificate\": \"string\",\n  \"issuer_ref\": \"string\",\n  \"store_certificate\": false,\n  \"generate_lease\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI KMS Seal in Vault (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the OCI KMS seal through the Vault configuration file by providing all the required values. It includes the key_id, crypto_endpoint, management_endpoint, and auth_type_api_key parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/ocikms.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"ocikms\" {\n    key_id               = \"ocid1.key.oc1.iad.afnxza26aag4s.abzwkljsbapzb2nrha5nt3s7s7p42ctcrcj72vn3kq5qx\"\n    crypto_endpoint      = \"https://afnxza26aag4s-crypto.kms.us-ashburn-1.oraclecloud.com\"\n    management_endpoint  = \"https://afnxza26aag4s-management.kms.us-ashburn-1.oraclecloud.com\"\n    auth_type_api_key    = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for CRL Retrieval in Vault\nDESCRIPTION: This is an example of the JSON response returned when retrieving a CRL from Vault's PKI secrets engine. The response includes a 'data' object containing the PEM-encoded CRL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"crl\": \"-----BEGIN X509 CRL-----\\nMIIBizB1AgEBMA0GCSqGSIb3DQEBCwUAMBIxEDAOBgNVBAMTB3Jvb3QgeDEXDTIy\\n...\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HMAC for Correlation ID Header\nDESCRIPTION: cURL command to enable HMAC encryption for the correlation-id header in audit logs using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/auditing/request-headers/correlation-id \\\n    --data '{ \"hmac\": true }'\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Auth Identity Metadata in Vault\nDESCRIPTION: This snippet demonstrates how to configure AWS Auth identity metadata in Vault to address token renewal issues that may arise after upgrading to Vault 1.3.5. It explicitly defines the metadata fields to be included for both EC2 and IAM roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.3.5.mdx#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nvault write auth/aws/config/identity \\\n  ec2_metadata=account_id,auth_type,instance_id,region \\\n  iam_metadata=account_id,auth_type,client_user_id,canonical_arn,inferred_entity_id,inferred_aws_region\n```\n\n----------------------------------------\n\nTITLE: List Certificate Metadata Request\nDESCRIPTION: Authenticated request to list all certificate metadata entries\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_49\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/cert-metadata\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Forwarding with X-Vault-Index and X-Vault-Inconsistent Headers\nDESCRIPTION: HTTP request headers that ensure read-after-write consistency by conditionally forwarding requests to the active node if a performance standby doesn't have the latest state. Requires the X-Vault-Index value from a previous write operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/consistency.mdx#2025-04-14_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nX-Vault-Index: <base64 value taken from previous response>\nX-Vault-Inconsistent: forward-active-node\n```\n\n----------------------------------------\n\nTITLE: Reading Okta Group Properties via cURL\nDESCRIPTION: Shell command to retrieve the properties of an existing Okta group using GET request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/okta/groups/admins\n```\n\n----------------------------------------\n\nTITLE: AES Key Generation using pkcs11-tool\nDESCRIPTION: This snippet utilizes pkcs11-tool to generate an AES-256 key within KMIP. The tool requires OpenSC to be installed. The command specifies a module to use and defines key attributes like length, label, and usage rights.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nVAULT_LOG_FILE=/dev/null pkcs11-tool --module ./libvault-pkcs11.so --keygen -a abc123 --key-type AES:32 \\\n    --extractable --allow-sw\nKey generated:\nSecret Key Object; AES length 32\nVALUE:\nlabel:      abc123\nUsage:      encrypt, decrypt, wrap, unwrap\nAccess:     none\n```\n\n----------------------------------------\n\nTITLE: Disabling External Plugins in Vault\nDESCRIPTION: Command to disable a plugin-based secrets engine. The process is identical to disabling a built-in plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets disable my-secrets\n```\n\n----------------------------------------\n\nTITLE: CMPv2 Configuration Response (JSON)\nDESCRIPTION: Sample response from the CMPv2 configuration endpoint. It includes the configured settings for CMPv2, such as audit fields, default path policy, authenticators, and the last update timestamp.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"audit_fields\": [\"common_name\", \"alt_names\", \"ip_sans\", \"uri_sans\"],\n    \"default_path_policy\": \"role:example-role\",\n    \"disabled_validations\": [],\n    \"authenticators\": {\n      \"cert\": {\n        \"accessor\": \"auth_cert_7fe0c1cc\",\n        \"cert_role\": \"cmp-ca\"\n      }\n    },\n    \"enable_sentinel_parsing\": true,\n    \"enabled\": true,\n    \"last_updated\": \"2024-01-31T10:45:22-05:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Nested Library Sets - Shell Request\nDESCRIPTION: Example LIST request to retrieve LDAP service account library set names at a specific path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/ldap/library/dev\n```\n\n----------------------------------------\n\nTITLE: Read Secret Version Request\nDESCRIPTION: This curl command sends a GET request to retrieve a specific version of a secret. It includes the Vault token in the header and specifies the secret path and version number in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/secret/data/my-secret?version=2\n```\n\n----------------------------------------\n\nTITLE: Disabling Performance Primary\nDESCRIPTION: This API call completely disables Performance Replication on the cluster. Connected secondaries will no longer be able to connect. Re-enabling as primary or secondary will change the cluster ID, potentially requiring storage wipes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/disable\n```\n\n----------------------------------------\n\nTITLE: AWS Secrets Manager Configuration - Shell Request\nDESCRIPTION: cURL command to create/update an AWS Secrets Manager destination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm/my-store-1\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Helm Chart Values\nDESCRIPTION: Defines the Helm chart values for deploying Vault with Consul storage in a Kubernetes environment. Includes settings for HA mode, enterprise licensing, and Consul storage configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nglobal:\n  enabled: false\n\nserver:\n  enabled: true\n  image:\n    repository: hashicorp/vault-enterprise\n    tag: 1.14.8-ent\n  enterpriseLicense:\n    secretName: vault-license\n    secretKey: vault.hclic\n  ha:\n    enabled: true\n    replicas: 3\n    config: |\n      ui = true\n      service_registration \"kubernetes\" {}\n\n      listener \"tcp\" {\n        address = \":8200\"\n        cluster_address = \":8201\"\n        tls_disable = 1\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"http://HOST_IP:8500\"\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Policies\nDESCRIPTION: Command to configure policies for a dev-role in the AliCloud auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/alicloud.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/alicloud/role/dev-role arn='acs:ram::5138828231865461:role/dev-role'\n```\n\n----------------------------------------\n\nTITLE: Vault API Login with TLS Certificate (curl)\nDESCRIPTION: This command authenticates against Vault using a TLS certificate and key via the API endpoint `/login`. It specifies the Vault TLS Listener CA certificate using `--cacert`.  It also allows specifying a single certificate role name via the `--data` parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cert.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --cacert vault-ca.pem \\\n    --cert cert.pem \\\n    --key key.pem \\\n    --data '{\"name\": \"web\"}' \\\n    https://127.0.0.1:8200/v1/auth/cert/login\n```\n\n----------------------------------------\n\nTITLE: Reading a Transformation - JSON Response\nDESCRIPTION: Sample JSON response when reading a transformation's details. It includes configuration information such as allowed roles, templates, tweak source, and transformation type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allowed_roles\": [\"example-role\"],\n    \"templates\": [\"builtin/creditcardnumber\"],\n    \"tweak_source\": \"internal\",\n    \"type\": \"fpe\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Messages via Vault API\nDESCRIPTION: Makes a LIST request to retrieve all custom messages with optional filtering by active status, authentication requirement, and message type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-custom-messages.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/config/ui/custom-messages?active=true&authenticated=false&type=modal\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"01234567-89ab-cdef-0123-456789abcdef\": {\n        \"title\": \"Post-login Advisory\",\n        \"type\": \"modal\",\n        \"authenticated\": false,\n        \"start_time\": \"2024-01-01T00:00:00.000000000Z\",\n        \"end_time\": null\n      }\n    },\n    \"keys\": [\n      \"01234567-89ab-cdef-0123-456789abcdef\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Builtin Database Plugin Information in Vault\nDESCRIPTION: Example demonstrating how to display information about a builtin database plugin (PostgreSQL). Shows plugin metadata including builtin status, deprecation status, and other attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/info.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin info database postgresql-database-plugin\nKey                   Value\n---                   -----\nargs                  []\nbuiltin               true\ncommand               n/a\ndeprecation_status    supported\nname                  postgresql-database-plugin\noci_image             n/a\nruntime               n/a\nsha256                n/a\nversion               n/a\n```\n\n----------------------------------------\n\nTITLE: Sample request to get static credentials using Curl\nDESCRIPTION: This curl command demonstrates how to retrieve the current credentials for a static role defined in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/aws/static-creds/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Schedule-Based Root Credential Rotation with MSSQL Database in Vault\nDESCRIPTION: Command to set up scheduled rotation for root credentials in the DB Secrets engine. This example configures rotation to occur every Saturday at midnight (00:00).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mssql-database \\\n  ...\n  rotation_schedule=\"0 * * * SAT\"\n  ...\n```\n\n----------------------------------------\n\nTITLE: Using X-Vault-Request header with Vault API\nDESCRIPTION: Example of including the X-Vault-Request header when sending a request to a Vault Proxy configured with the require_request_header option.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -H \"X-Vault-Token: f3b09679-3001-009d-2b80-9c306ab81aa6\" \\\n    -H \"X-Vault-Request: true\" \\\n    -H \"Content-Type: application/json\" \\\n    -X POST \\\n    -d '{\"value\":\"bar\"}' \\\n    http://127.0.0.1:8200/v1/secret/baz\n```\n\n----------------------------------------\n\nTITLE: Serving a Database Plugin with Multiplexing in Go\nDESCRIPTION: This example shows how to implement a database plugin that supports multiplexing, which allows a single plugin process to handle multiple database connections. It includes the main function, initialization, and error handling patterns.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/custom.mdx#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\tgithub.com/hashicorp/vault/api\n\tdbplugin \"github.com/hashicorp/vault/sdk/database/dbplugin/v5\"\n)\n\nfunc main() {\n\tapiClientMeta := &api.PluginAPIClientMeta{}\n\tflags := apiClientMeta.FlagSet()\n\tflags.Parse(os.Args[1:])\n\n\terr := Run()\n\tif err != nil {\n\t\tlog.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n\nfunc Run() error {\n\tdbplugin.ServeMultiplex(dbType.(dbplugin.New))\n\n\treturn nil\n}\n\nfunc New() (interface{}, error) {\n\tdb, err := newDatabase()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// This middleware isn't strictly required, but highly recommended to prevent accidentally exposing\n\t// values such as passwords in error messages. An example of this is included below\n\tdb = dbplugin.NewDatabaseErrorSanitizerMiddleware(db, db.secretValues)\n\treturn db, nil\n}\n\ntype MyDatabase struct {\n\t// Variables for the database\n\tpassword string\n}\n\nfunc newDatabase() (MyDatabase, error) {\n\t// ...\n\tdb := &MyDatabase{\n\t\t// ...\n\t}\n\treturn db, nil\n}\n\nfunc (db *MyDatabase) secretValues() map[string]string {\n\treturn map[string]string{\n\t\tdb.password: \"[password]\",\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Vault Policy from Local File\nDESCRIPTION: Demonstrates how to upload a policy named 'my-policy' from a local file path '/tmp/policy.hcl' using the vault policy write command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/write.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy write my-policy /tmp/policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Secrets in Cubbyhole (JSON)\nDESCRIPTION: This JSON snippet illustrates the response structure when listing secrets in the Cubbyhole. It shows the keys of secrets and folders at the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cubbyhole.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"foo\", \"foo/\"]\n  },\n  \"lease_duration\": 2764800,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Extra Environment Variables\nDESCRIPTION: Shows how to define additional environment variables for the Vault server, useful for cloud provider configurations and credentials\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nextraEnvironmentVars:\n  GOOGLE_REGION: global\n  GOOGLE_PROJECT: myproject\n  GOOGLE_APPLICATION_CREDENTIALS: /vault/userconfig/myproject/myproject-creds.json\n```\n\n----------------------------------------\n\nTITLE: Entering Unseal Key for Root Token Generation\nDESCRIPTION: Command to progress root token generation by entering an unseal key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/generate-root.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator generate-root\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Orphan Token Revocation\nDESCRIPTION: This CURL command demonstrates how to revoke a token while preserving its child tokens, thus rendering them orphaned.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/revoke-orphan\n```\n\n----------------------------------------\n\nTITLE: Batch Encryption Input Format\nDESCRIPTION: JSON structure for batch encryption requests showing the format for encrypting multiple items in a single call.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"context\": \"c2FtcGxlY29udGV4dA==\",\n    \"plaintext\": \"dGhlIHF1aWNrIGJyb3duIGZveA==\"\n  },\n  {\n    \"context\": \"YW5vdGhlcnNhbXBsZWNvbnRleHQ=\",\n    \"plaintext\": \"dGhlIHF1aWNrIGJyb3duIGZveA==\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Defining VaultStaticSecret Schema in YAML\nDESCRIPTION: Defines the schema for a VaultStaticSecret resource, including its API version, kind, metadata, and spec fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`.\nspec:\n  # VaultStaticSecretSpec fields\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Namespace Example\nDESCRIPTION: Example showing how to set the VAULT_NAMESPACE environment variable with a specific namespace for OIDC.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_NAMESPACE=\"oidc-ns\"\n```\n\n----------------------------------------\n\nTITLE: Wrapping Key Response in Transit Secrets Engine\nDESCRIPTION: Sample JSON response from retrieving the wrapping key in Vault's Transit secrets engine. Returns a data object containing the 4096-bit RSA public key used for encrypting imported key material.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"public_key\": \"...\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Output when Monitoring with Admin Permissions\nDESCRIPTION: This snippet shows the expected output when successfully accessing a restricted endpoint from the administrative namespace.  Log data from the Vault instance is streamed to the terminal, confirming the elevated permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ env VAULT_NAMESPACE=\"ns_admin\" vault monitor –log-level=debug\n\n2023-08-31T11:54:41.846+0200 [DEBUG] replication.index.perf: saved checkpoint: num_dirty=0\n2023-08-31T11:54:41.961+0200 [DEBUG] replication.index.local: saved checkpoint: num_dirty=0\n```\n\n----------------------------------------\n\nTITLE: Reindex Replication in Vault\nDESCRIPTION: cURL command to initiate a reindex operation on a DR secondary cluster using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/reindex\n```\n\n----------------------------------------\n\nTITLE: Updating PingID MFA method using Vault HTTP API\nDESCRIPTION: Demonstrates updating an existing PingID MFA method by sending a POST request to the relevant Vault API endpoint. It requires the method's UUID along with the same parameters as the create endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/pingid/f8381105-67f0-4105-8662-4b07ae5c1233\n```\n\n----------------------------------------\n\nTITLE: Raft Storage Migration Configuration\nDESCRIPTION: Configuration for migrating from Consul to integrated raft storage, including node identification and cluster address settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/migrate.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nstorage_source \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault\"\n}\n\nstorage_destination \"raft\" {\n  path = \"/path/to/raft/data\"\n  node_id = \"raft_node_1\"\n}\ncluster_addr = \"http://127.0.0.1:8201\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI .NET Client Library\nDESCRIPTION: These commands install the OpenAPI-based .NET client library for Vault using either `nuget` or `dotnet add package`.  The commands specify the version of the package to install.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nuget install HashiCorp.Vault -Version \"0.1.0-beta\"\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ dotnet add package Hashicorp.Vault -version \"0.1.0-beta\"\n```\n\n----------------------------------------\n\nTITLE: JSON Patch Example for Agent Container Modification\nDESCRIPTION: Example JSON patch to modify the name of the injected Vault agent container. This can be used with the vault.hashicorp.com/agent-json-patch annotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/annotations.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[{\"op\": \"replace\", \"path\": \"/name\", \"value\": \"different-name\"}]\n```\n\n----------------------------------------\n\nTITLE: Usage Information for Lease Command - Text\nDESCRIPTION: This section outlines the usage pattern for the 'lease' command, including available subcommands (lookup, renew, revoke) and expected options. It serves as a guide for users to understand how to interact with the lease management system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault lease <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    lookup    Lookup lease information by lease id\n    renew     Renews the lease of a secret\n    revoke    Revokes leases and secrets\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Self Token Revocation\nDESCRIPTION: This CURL command revokes the token used to make the request, effectively securing the operation against potential misuse.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/token/revoke-self\n```\n\n----------------------------------------\n\nTITLE: Installing Autocomplete for Vault CLI\nDESCRIPTION: Shows the command to install autocomplete functionality for the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault -autocomplete-install\n```\n\n----------------------------------------\n\nTITLE: Reading a Group Alias by ID - HTTP API\nDESCRIPTION: This snippet demonstrates how to query a group alias by its ID using a GET request. The response includes detailed information about the group alias such as its `canonical_id`, `creation_time`, and `name`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/group-alias/id/ca726050-d8ac-6f1f-4210-3b5c5b613824\n```\n\n----------------------------------------\n\nTITLE: Deleting Performance Replication Paths Filter\nDESCRIPTION: cURL command to delete the paths filter configuration for a secondary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/paths-filter/mySecondaryID\n```\n\n----------------------------------------\n\nTITLE: Lease Count Quota Response JSON in Vault\nDESCRIPTION: Sample JSON response when retrieving a lease count quota. The response includes details like the maximum number of leases allowed, the quota name, path, role, and quota type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/lease-count-quotas.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"21514bc6-2c19-42b9-a8a7-cab27aff5815\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"max_leases\": 1000,\n    \"name\": \"global-lease-count-quota\",\n    \"path\": \"\",\n    \"role\": \"\",\n    \"type\": \"lease-count\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Programmatic API Key Role - HTTP API - Shell\nDESCRIPTION: This snippet illustrates how to create or update a programmatic API key role using a POST request to the specified API endpoint, providing details like project_id, roles, and CIDR blocks in the payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/mongodbatlas.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/mongodbatlas/roles/test-programmatic-key\n```\n\n----------------------------------------\n\nTITLE: Listing Current Cluster Peers with Vault CLI\nDESCRIPTION: The shell command demonstrates listing peer nodes in a Vault cluster, which is essential for monitoring cluster health and membership. Dependencies include a running Vault cluster and node connectivity. The command lists the nodes with details such as address, state, and voter status. The output shows all current peers contributing to quorum maintenance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator raft list-peers\nNode     Address                   State       Voter\n----     -------                   -----       -----\nnode1    node1.vault.local:8201    follower    true\nnode2    node2.vault.local:8201    follower    true\nnode3    node3.vault.local:8201    leader      true\n```\n\n----------------------------------------\n\nTITLE: Retrieving AppRole Credentials\nDESCRIPTION: Commands to get the AppRole ID and generate a secret ID for SQL Server configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvault read auth/approle/role/ekm-encryption-key-role/role-id\nvault write -f auth/approle/role/ekm-encryption-key-role/secret-id\n```\n\n----------------------------------------\n\nTITLE: Encrypting Plaintext - HCL\nDESCRIPTION: This HCL policy defines the capabilities for encrypting plaintext using a specified key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_12\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/encrypt/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Path for Vault Audit Device\nDESCRIPTION: Example showing how to set the file_path parameter for a Vault audit device. The file_path parameter specifies where audit logs should be written, which in this case directs logs to a file in the /logs directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/file/file_path.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfile_path='/logs/kv-audit.log'\n```\n\n----------------------------------------\n\nTITLE: Read EGP Policy Request\nDESCRIPTION: Retrieves information about a specific EGP policy\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/egp/breakglass\n```\n\n----------------------------------------\n\nTITLE: Listing Issuers with cURL in Vault PKI Engine\nDESCRIPTION: Makes an unauthenticated LIST request to retrieve all issuers configured in the Vault PKI mount point. Returns both issuer identifiers and their names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/issuers\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP MFA secret using HTTP API - Shell\nDESCRIPTION: This command generates a new TOTP MFA secret using a given 'method_id'. A POST request is sent, and the secret is created under the entity of the calling token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method_id\": \"1f36d4cf-52c9-475d-a5cd-49c573c54e55\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/totp/generate\n```\n\n----------------------------------------\n\nTITLE: Deregistering Google Cloud KMS Key from Vault\nDESCRIPTION: This snippet shows how to deregister a Google Cloud KMS key reference from Vault. It includes the necessary policy and curl command for the POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_33\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/deregister/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/deregister/my-key\n```\n\n----------------------------------------\n\nTITLE: Deleting AWS Client Configuration from Vault API\nDESCRIPTION: Shell command to delete the previously configured AWS access credentials by sending a DELETE request to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/aws/config/client\n```\n\n----------------------------------------\n\nTITLE: Logging in via SAML Authentication\nDESCRIPTION: Command to authenticate to Vault using the SAML method. This is used to verify that the AD group to Vault policy mapping works correctly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method saml -path <SAML_PLUGIN_PATH>\n```\n\n----------------------------------------\n\nTITLE: Reading Verbosity Level of a Single Logger (JSON Response)\nDESCRIPTION: Example JSON response showing the current log level for a specific logger. This shows that the 'core' logger is set to the 'info' level.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"core\": \"info\"\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Labels for GCE Roles in JSON\nDESCRIPTION: The JSON snippet provides a structure for modifying labels associated with a GCE role in Vault. The parameters include `add` for adding new labels and `remove` for removing existing ones, managed through an HTTP POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add\": [\"foo:bar\", \"env:dev\", \"key:value\"],\n  \"remove\": [\"key1\", \"key2\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Transformation with cURL in Vault Transform API\nDESCRIPTION: Makes a DELETE request to remove a specific transformation by name from the Vault Transform Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_27\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/transform/transformation/example-transformation\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault Auditing via Shell Command\nDESCRIPTION: This shell command enables auditing on a deployed Vault server by executing a command against the Vault pod. It configures file-based auditing with a specified log file path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/standalone-audit.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl exec -ti <POD NAME> --  vault audit enable file file_path=/vault/audit/vault_audit.log\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Raw Storage Read in Vault\nDESCRIPTION: Shows the JSON response format when reading raw storage data from Vault. The response contains a 'value' field with the content of the requested storage entry.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/raw.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"{'foo':'bar'}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring KMIP Engine with Vault API\nDESCRIPTION: This snippet shows how to send a POST request to the `/kmip/config` endpoint to configure the KMIP secrets engine using the Vault API. It includes setting the Vault token and providing the configuration data in JSON format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/kmip/config\n```\n\n----------------------------------------\n\nTITLE: Displaying Unaffected Sublogger Levels in Vault after Configuration Change\nDESCRIPTION: This code snippet shows log output demonstrating that certain subloggers (resolver.watcher, replication.index.*) retain their previous log levels after a configuration change and reload, while the main log level has been changed from 'trace' to 'info'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/sublogger-levels-unchanged-on-reload.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[TRACE] resolver.watcher: dr mode doesn't have failover support, returning\n...\n[DEBUG] replication.index.perf: saved checkpoint: num_dirty=5\n[DEBUG] replication.index.local: saved checkpoint: num_dirty=0\n[DEBUG] replication.index.periodic: starting WAL GC: from=2531280 to=2531280 last=2531536\n```\n\n----------------------------------------\n\nTITLE: Okta MFA Method Configuration Response\nDESCRIPTION: JSON response returned when reading an Okta MFA method configuration. Contains all the configured parameters including ID, mount_accessor, name, org_name, API token, and type information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/okta.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"api_token\": \"0081u7KrReNkzmABZJAP2oDyIXccveqx9vIOEyCZDC\",\n    \"id\": \"e39f08a1-a42d-143d-5b87-15c61d89c15a\",\n    \"mount_accessor\": \"auth_userpass_1793464a\",\n    \"name\": \"my_okta\",\n    \"org_name\": \"dev-262778\",\n    \"production\": true,\n    \"type\": \"okta\",\n    \"username_format\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Method Restrictions in Vault\nDESCRIPTION: Details the limitations of mixing authentication methods in Vault, specifically the constraints on using ec2 and iam authentication types simultaneously\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## Mixing authentication types\n```\n\n----------------------------------------\n\nTITLE: Auth Methods List Output\nDESCRIPTION: Example output of the auth list command showing the mount accessors for enabled authentication methods. The userpass accessor will be used in PingID configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nPath         Type        Accessor                  Plugin    Default TTL    Max TTL    Replication    Description\n----         ----        --------                  ------    -----------    -------    -----------    -----------\ntoken/       token       auth_token_289703e9       n/a       system         system     replicated     token based credentials\nuserpass/    userpass    auth_userpass_54b8e339    n/a       system         system     replicated     n/a\n```\n\n----------------------------------------\n\nTITLE: Library Set Configuration - JSON Payload\nDESCRIPTION: Sample payload for configuring an LDAP service account library set with TTL and enforcement settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service_account_names\": [\"fizz@example.com\", \"buzz@example.com\"],\n  \"ttl\": \"10h\",\n  \"max_ttl\": \"20h\",\n  \"disable_check_in_enforcement\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Activating Vault GUI Configuration\nDESCRIPTION: Enables the Vault web interface by setting the `ui` configuration option to true in the server configuration. This option is not enabled by default and must be explicitly set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/ui.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nui = true\n\nlistener \"tcp\" {\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Single Mount Details in Vault API (Shell)\nDESCRIPTION: This snippet shows how to make an authenticated GET request to the `/sys/internal/ui/mounts/:path` endpoint to retrieve details for a specific mount path in Vault. It uses curl and includes an `X-Vault-Token` header for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-mounts.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/internal/ui/mounts/cubbyhole\n```\n\n----------------------------------------\n\nTITLE: Configuring CRL - POST Request\nDESCRIPTION: Example of sending a POST request to configure CRL settings using curl with a payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_107\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/crl\n```\n\n----------------------------------------\n\nTITLE: VaultAuth Valid Status Output\nDESCRIPTION: JSON output showing a successful status condition after VaultAuthGlobal merge.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2024-07-17T13:46:43Z\",\n      \"message\": \"VaultAuthGlobal successfully merged, key=admin/default, uid=6aeb3559-8f42-48bf-b16a-2305bc9a9bed, generation=7\",\n      \"observedGeneration\": 1,\n      \"reason\": \"VaultAuthGlobalRef\",\n      \"status\": \"True\",\n      \"type\": \"Available\"\n    }\n  ],\n  \"specHash\": \"5cbe5544d0557926e00002514871b95c49903a9d4496ef9b794c84f1e54db1a0\",\n  \"valid\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample CLI Request with ADO-style Connection String\nDESCRIPTION: This CLI command configures an MS SQL database connection with an ADO-style connection string in Vault. It demonstrates setting the disable_escaping parameter to true, intended for connections that require special character handling in the connection string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/mssql \\\n    plugin_name=\"mssql-database-plugin\" \\\n    connection_url='server=localhost;port=1433;user id={{username}};password={{password}};database=mssql;' \\\n    username=\"vaultuser\" \\\n    password='your#StrongPassword%' \\\n    disable_escaping=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Sample Certificate Generation Response\nDESCRIPTION: Example JSON response containing the generated certificate, private key, and related data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"pki/issue/test/7ad6cfa5-f04f-c62a-d477-f33210475d05\",\n  \"renewable\": false,\n  \"lease_duration\": 21600,\n  \"data\": {\n    \"expiration\": \"1654105687\",\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\",\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\"\n    ],\n    \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEowIBAAKCAQEAnVHfwoKsUG1GDVyWB1AFroaKl2ImMBO8EnvGLRrmobIkQvh+\\n...\\nQN351pgTphi6nlCkGPzkDuwvtxSxiCWXQcaxrHAL7MiJpPzkIBq1\\n-----END RSA PRIVATE KEY-----\\n\",\n    \"private_key_type\": \"rsa\",\n    \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:58\"\n  },\n  \"warnings\": \"\",\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Authentication Response JSON\nDESCRIPTION: Example JSON response from a successful JWT authentication request. Contains the client token, accessor, policies, metadata, and lease information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"38fe9691-e623-7238-f618-c94d4e7bc674\",\n    \"accessor\": \"78e87a38-84ed-2692-538f-ca8b9f400ab3\",\n    \"policies\": [\"default\"],\n    \"metadata\": {\n      \"role\": \"demo\"\n    },\n    \"lease_duration\": 2764800,\n    \"renewable\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to GitHub Pull Request for Cassandra Storage Fix\nDESCRIPTION: Reference to a GitHub pull request that updates Cassandra storage delete functionality to avoid batch operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4054](https://github.com/hashicorp/vault/pull/4054)]\n```\n\n----------------------------------------\n\nTITLE: Creating Token with Equivalent cURL Command to Vault API\nDESCRIPTION: This example shows the equivalent cURL command for creating a token with the same parameters as the previous example, demonstrating the API approach versus the CLI command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ tee request_payload.json -<<EOF\n{\n   \"policies\": [\"admin\", \"secops\"],\n   \"ttl\": \"8h\",\n   \"num_uses\": 3\n}\nEOF\n\n$ curl --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n    --request POST \\\n    --data @request_payload.json \\\n    $VAULT_ADDR/v1/auth/token/create\n```\n\n----------------------------------------\n\nTITLE: Batch Encode Sample Payload\nDESCRIPTION: JSON payload for batch encoding multiple values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_55\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batch_input\": [\n    {\n      \"transformation\": \"ccn-fpe\",\n      \"value\": \"1111-2222-3333-4444\"\n    },\n    {\n      \"transformation\": \"ccn-tokenization\",\n      \"value\": \"1111-2222-3333-4444\",\n      \"reference\": \"order#1234\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Submitting Key Share Payload\nDESCRIPTION: JSON payload for submitting a single recovery key share during rekey\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": \"AB32...\",\n  \"nonce\": \"abcd1234...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample cURL request for certificate signing\nDESCRIPTION: This cURL command demonstrates how to send a POST request to the '/pki/sign-verbatim' endpoint to obtain a signed certificate using the payload stored in 'payload.json'. It requires an authentication token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/sign-verbatim\n```\n\n----------------------------------------\n\nTITLE: Response from Global Keys Configuration Update\nDESCRIPTION: Example JSON response confirming the update to global Transit key configuration, showing the current state of the disable_upsert setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"disable_upsert\": true,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Capabilities Policy in Vault HCL\nDESCRIPTION: HCL policy configuration that grants update access to the capabilities-self endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/static-secret-caching.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npath \"sys/capabilities-self\" {\n  capabilities = [\"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing well-known labels - HTTP API - shell\nDESCRIPTION: This snippet demonstrates how to list all registered labels using the GET method on the `/sys/well-known` endpoint. It uses the curl command to make the HTTP request with the authentication token included in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/well-known.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/well-known\n```\n\n----------------------------------------\n\nTITLE: Listing Plugin Runtimes in Vault\nDESCRIPTION: Command example demonstrating how to list all available plugin runtimes in the Vault catalog, showing details like runtime type, OCI runtime, and resource limits.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin runtime list\n```\n\n----------------------------------------\n\nTITLE: Promoting Performance Secondary\nDESCRIPTION: cURL command and empty JSON payload to promote a performance secondary to primary status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/secondary/promote\n```\n\n----------------------------------------\n\nTITLE: Unzipping Vault Lambda Extension Binary\nDESCRIPTION: Shell command to unzip the downloaded Vault Lambda Extension binary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ unzip vault-lambda-extension.zip\n```\n\n----------------------------------------\n\nTITLE: Deleting Latest Version of a Secret in Vault KV Engine\nDESCRIPTION: This cURL command demonstrates how to delete the latest version of a secret at a specified path in Vault's KV engine using the DELETE HTTP method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/secret/data/my-secret\n```\n\n----------------------------------------\n\nTITLE: Deleting Control Group Settings via DELETE Request in Shell\nDESCRIPTION: This snippet shows how to remove any existing Control Group configuration by sending a DELETE request to the /sys/config/control-group endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-control-group.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/config/control-group\n```\n\n----------------------------------------\n\nTITLE: Rekey Progress Response Example\nDESCRIPTION: JSON response showing the current status of a rekey operation including progress, thresholds and verification details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"t\": 3,\n  \"n\": 5,\n  \"progress\": 1,\n  \"required\": 3,\n  \"pgp_fingerprints\": [\"abcd1234\"],\n  \"backup\": true,\n  \"verification_required\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Reading GCP Config (Without Credentials)\nDESCRIPTION: cURL command to read the current GCP authentication configuration, excluding sensitive credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/auth/gcp/config\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ttl\": \"1h\",\n    \"max_ttl\": \"4h\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Vault API Response Object\nDESCRIPTION: This JSON schema describes the structure and constraints for a Vault API response, including properties related to authentication, request, and response metadata. It specifies types for each property and disallows additional properties.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/audit/response-entry-json-schema.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"auth\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"accessor\": {\n          \"type\": \"string\"\n        },\n        \"client_token\": {\n          \"type\": \"string\"\n        },\n        \"display_name\": {\n          \"type\": \"string\"\n        },\n        \"entity_created\": {\n          \"type\": \"boolean\"\n        },\n        \"entity_id\": {\n          \"type\": \"string\"\n        },\n        \"external_namespace_policies\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"identity_policies\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"metadata\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          }\n        },\n        \"no_default_policy\": {\n          \"type\": \"boolean\"\n        },\n        \"num_uses\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"policies\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"policy_results\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"allowed\": {\n              \"type\": \"boolean\"\n            },\n            \"granting_policies\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"namespace_id\": {\n                    \"type\": \"string\"\n                  },\n                  \"namespace_path\": {\n                    \"type\": \"string\"\n                  },\n                  \"type\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"additionalProperties\": false,\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            }\n          },\n          \"additionalProperties\": false,\n          \"required\": [\n            \"allowed\"\n          ]\n        },\n        \"remaining_uses\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"token_issue_time\": {\n          \"type\": \"string\"\n        },\n        \"token_policies\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"token_ttl\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"token_type\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"forwarded\": {\n      \"type\": \"boolean\"\n    },\n    \"request\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"client_certificate_serial_number\": {\n          \"type\": \"string\"\n        },\n        \"client_id\": {\n          \"type\": \"string\"\n        },\n        \"client_token\": {\n          \"type\": \"string\"\n        },\n        \"client_token_accessor\": {\n          \"type\": \"string\"\n        },\n        \"data\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {}\n        },\n        \"headers\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"id\": {\n          \"type\": \"string\"\n        },\n        \"mount_accessor\": {\n          \"type\": \"string\"\n        },\n        \"mount_class\": {\n          \"type\": \"string\"\n        },\n        \"mount_is_external_plugin\": {\n          \"type\": \"boolean\"\n        },\n        \"mount_point\": {\n          \"type\": \"string\"\n        },\n        \"mount_running_sha256\": {\n          \"type\": \"string\"\n        },\n        \"mount_running_version\": {\n          \"type\": \"string\"\n        },\n        \"mount_type\": {\n          \"type\": \"string\"\n        },\n        \"namespace\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"string\"\n            },\n            \"path\": {\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        },\n        \"operation\": {\n          \"type\": \"string\"\n        },\n        \"path\": {\n          \"type\": \"string\"\n        },\n        \"policy_override\": {\n          \"type\": \"boolean\"\n        },\n        \"remote_address\": {\n          \"type\": \"string\"\n        },\n        \"remote_port\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"replication_cluster\": {\n          \"type\": \"string\"\n        },\n        \"request_uri\": {\n          \"type\": \"string\"\n        },\n        \"wrap_ttl\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"response\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"auth\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"accessor\": {\n              \"type\": \"string\"\n            },\n            \"client_token\": {\n              \"type\": \"string\"\n            },\n            \"display_name\": {\n              \"type\": \"string\"\n            },\n            \"entity_created\": {\n              \"type\": \"boolean\"\n            },\n            \"entity_id\": {\n              \"type\": \"string\"\n            },\n            \"external_namespace_policies\": {\n              \"type\": \"object\",\n              \"additionalProperties\": {\n                \"type\": \"array\",\n                \"items\": {\n                  \"type\": \"string\"\n                }\n              }\n            },\n            \"identity_policies\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"metadata\": {\n              \"type\": \"object\",\n              \"additionalProperties\": {\n                \"type\": \"string\"\n              }\n            },\n            \"no_default_policy\": {\n              \"type\": \"boolean\"\n            },\n            \"num_uses\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"policies\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"policy_results\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"allowed\": {\n                  \"type\": \"boolean\"\n                },\n                \"granting_policies\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                      \"name\": {\n                        \"type\": \"string\"\n                      },\n                      \"namespace_id\": {\n                        \"type\": \"string\"\n                      },\n                      \"namespace_path\": {\n                        \"type\": \"string\"\n                      },\n                      \"type\": {\n                        \"type\": \"string\"\n                      }\n                    },\n                    \"additionalProperties\": false,\n                    \"required\": [\n                      \"type\"\n                    ]\n                  }\n                }\n              },\n              \"additionalProperties\": false,\n              \"required\": [\n                \"allowed\"\n              ]\n            },\n            \"remaining_uses\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"token_issue_time\": {\n              \"type\": \"string\"\n            },\n            \"token_policies\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"string\"\n              }\n            },\n            \"token_ttl\": {\n              \"type\": \"integer\",\n              \"format\": \"int64\"\n            },\n            \"token_type\": {\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        },\n        \"data\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {}\n        },\n        \"headers\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"mount_accessor\": {\n          \"type\": \"string\"\n        },\n        \"mount_class\": {\n          \"type\": \"string\"\n        },\n        \"mount_is_external_plugin\": {\n          \"type\": \"boolean\"\n        },\n        \"mount_point\": {\n          \"type\": \"string\"\n        },\n        \"mount_running_plugin_version\": {\n          \"type\": \"string\"\n        },\n        \"mount_running_sha256\": {\n          \"type\": \"string\"\n        },\n        \"mount_type\": {\n          \"type\": \"string\"\n        },\n        \"redirect\": {\n          \"type\": \"string\"\n        },\n        \"secret\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"lease_id\": {\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        },\n        \"warnings\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"wrap_info\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"accessor\": {\n              \"type\": \"string\"\n            },\n            \"creation_path\": {\n              \"type\": \"string\"\n            },\n            \"creation_time\": {\n              \"type\": \"string\"\n            },\n            \"token\": {\n              \"type\": \"string\"\n            },\n            \"ttl\": {\n              \"type\": \"integer\",\n              \"format\": \"int32\"\n            },\n            \"wrapped_accessor\": {\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"time\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: High Availability DynamoDB Configuration\nDESCRIPTION: Configuration example for enabling high availability with DynamoDB storage backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/dynamodb.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\napi_addr = \"https://vault-leader.my-company.internal\"\n\nstorage \"dynamodb\" {\n  ha_enabled    = \"true\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Pinning a Vault Database Plugin Version\nDESCRIPTION: This snippet demonstrates how to pin a specific version of a Vault database plugin using the `vault write sys/plugins/pins` command. This ensures that all instances of the plugin use the specified version. The command requires the plugin type (database), name, and version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write sys/plugins/pins/database/my-db-plugin version=v1.0.1\n```\n\n----------------------------------------\n\nTITLE: Updating Custom Message Configuration\nDESCRIPTION: Updates an existing custom message with new parameters while maintaining its unique ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-custom-messages.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Pre-login Advisory\",\n  \"authenticated\": false,\n  \"type\": \"modal\",\n  \"message\": \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VyYWJpdHVyIG51bGxhIGF1Z3VlLCBwbGFjZXJhdCBxdWlzIHJpc3VzIGJsYW5kaXQsIG1vbGVzdGllIGltcGVyZGlldCBtYXNzYS4gU2VkIGJsYW5kaXQgcnV0cnVtIG9kaW8gcXVpcyB2YXJpdXMuIEZ1c2NlIHB1cnVzIG9yY2ksIG1heGltdXMgYWMgbGliZXJvLgo=\",\n  \"start_time\": \"2024-01-01T00:00:00.000Z\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/config/ui/custom-messages/01234567-89ab-cdef-0123-456789abcdef\n```\n\n----------------------------------------\n\nTITLE: Patch Secret Response\nDESCRIPTION: This JSON response shows the structure of the data returned after patching a secret. It includes the creation time, custom metadata, deletion time, destroyed status, and the version number of the updated secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"created_time\": \"2021-09-10T15:26:08.684999Z\",\n    \"custom_metadata\": {\n      \"owner\": \"jdoe\",\n      \"mission_critical\": \"false\"\n    },\n    \"deletion_time\": \"\",\n    \"destroyed\": false,\n    \"version\": 2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Template Secret Output\nDESCRIPTION: Demonstrates the output format when using the default template for rendering secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ cat /vault/secrets/foo\npassword: A1a-BUEuQR52oAqPrP1J\nusername: v-kubernet-pg-app-q0Z7WPfVNqqTJuoDqCTY-1576529094\n```\n\n----------------------------------------\n\nTITLE: Encrypting Data with XKS Key in AWS CLI\nDESCRIPTION: This command encrypts a plaintext message using the previously created KMS key. It demonstrates how to use the XKS-backed key for encryption operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws kms encrypt --key-id a93f205a-2a37-4338-aa64-92b4a4b0b67d --plaintext YWJjMTIzCg==\n{\n    \"CiphertextBlob\": \"somerandomciphertextblob=\",\n    \"KeyId\": \"arn:aws:kms:us-east-2:111111111111:key/a93f205a-2a37-4338-aa64-92b4a4b0b67d\",\n    \"EncryptionAlgorithm\": \"SYMMETRIC_DEFAULT\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating PKI Role Parameter with Vault Patch\nDESCRIPTION: Demonstrates how to update a single parameter (allow_localhost) in a PKI role using the Vault patch command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/patch.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault patch pki/roles/example allow_localhost=false\n```\n\n----------------------------------------\n\nTITLE: Reading Dynamic Filter from Secondary\nDESCRIPTION: cURL command to read dynamically filtered paths and namespaces from the secondary node.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/secondary/dynamic-filter/mySecondaryID\n```\n\n----------------------------------------\n\nTITLE: CRL Rotation Response\nDESCRIPTION: JSON response indicating successful CRL rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_109\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"success\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request to Read Client Count Configuration (Shell)\nDESCRIPTION: This shell command sends a GET request to read the current client count configuration in Vault using curl. It includes the necessary headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request GET\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/internal/counters/config\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault Pod After Upgrade\nDESCRIPTION: Command to unseal a Vault pod after it has been recreated during the upgrade process. This is necessary when auto-unseal is not configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl exec -ti <name of pod> -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Enabling CIEPS Configuration in Vault API - JSON\nDESCRIPTION: This JSON payload is used to enable or disable the Certificate Issuance External Policy Service (CIEPS) and configure the necessary parameters such as external service URL and trusted certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_86\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": true,\n  \"external_service_url\": \"https://cieps.dadgarcorp.internal\",\n  \"trusted_ca\": \"-----BEGIN CERTIFICATE-----....\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Enterprise Docker Test Cluster for Vault in Go\nDESCRIPTION: This snippet shows how to set up a Docker test cluster for Vault Enterprise. It includes specifying the enterprise image and providing a license string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"testing\"\n  \"github.com/hashicorp/vault/sdk/helper/testcluster/docker\"\n)\n\nfunc Test_Something_With_Docker(t *testing.T) {\n  opts := &docker.DockerClusterOptions{\n    ImageRepo: \"hashicorp/vault-enterprise\",\n    ImageTag:  \"latest\",\n\tVaultLicense: licenseString, // not a path, the actual license bytes\n  }\n  cluster := docker.NewTestDockerCluster(t, opts)\n  defer cluster.Cleanup()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating HMAC using Vault Transit API with curl\nDESCRIPTION: Example of making a request to the Vault Transit API to generate an HMAC using SHA-512 algorithm with a specific key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_50\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/hmac/my-key/sha2-512\n```\n\n----------------------------------------\n\nTITLE: Reading KMIP CA Certificate - Response\nDESCRIPTION: This JSON snippet shows the structure of the response received when reading the KMIP CA certificate. The `ca_pem` field contains the CA certificates in PEM format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ca_pem\": \"-----BEGIN CERTIFICATE-----\\nMIICNzCCAZigAwIBAgIUApNsRil/dzQy3XT+yjZQEpcA49kwCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MB4XDTE5MDYyNDE4MzIzM1oX\\nDTI5MDYyMTE4MzMwM1owKjEoMCYGA1UEAxMfdmF1bHQta21pcC1kZWZhdWx0LWlu\\ndGVybWVkaWF0ZTCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAGWJGwPjGGoXivBv\\nLJwR+fIG3z6Ei06bhZgTaRW/U3eA5oivxubxOVZPe1BJGWCsIVNjxMZAN4Pswki7\\nAHme9bdJAUbQw33tC1iAb0wjzIpoPv1+pdSk6wYZTCKzOYWCbsTb3SOIetpk7sQw\\niM17agwIRK9qGvX3Q4PBfEKEpstAjoaJo2YwZDAOBgNVHQ8BAf8EBAMCAQYwEgYD\\nVR0TAQH/BAgwBgEB/wIBCTAdBgNVHQ4EFgQUKMwPpRxU2Uzydv21bc8ePfUpGFEw\\nHwYDVR0jBBgwFoAUwrPrJc9EsU6kTWJ5hXkJV4PEq9swCgYIKoZIzj0EAwIDgYwA\\nMIGIAkIBRCarRMer42Ni/fKQBTi+uFk+2sPyCxCYDWTfMFAusC51dC2F91mUL77R\\nkHxauSkh5gcZVAch/dg/L0ewP0AZUBUCQgE1VqoBN9klFky7LHfl62p6PgprH7d1\\nYCvYVbWdBNnEdrL2P9aKsuCewdqycZVJLmM36cHnOAEGg1yea8soQL0Ylw==\\n-----END CERTIFICATE-----\\n-----BEGIN CERTIFICATE-----\\nMIICKTCCAYugAwIBAgIUOBgW1GCH+n5gC6m8Ff5jq+5DmO8wCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MB4XDTE5MDYyNDE4MzIzM1oX\\nDTI5MDYyMTE4MzMwM1owHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MIGb\\nMBAGByqGSM49AgEGBSuBBAAjA4GGAAQA7vkbmKJR+SVBTJjAFnma0ynTIi64doZA\\n5oOXIAExvOyyI2KBNfqXxgzt/51u9vvixQf3VX/1Jph+0fkIcIYUEmIBFAH7Th1X\\n0EOOdmMHfN0YkXDEUUdKIZyQxgA7o3DF+JAVg1cdBV7S8jZyXik7pL+IFnlYdfvN\\nUZcArUkMfKo1cZajZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/\\nAgEKMB0GA1UdDgQWBBTCs+slz0SxTqRNYnmFeQlXg8Sr2zAfBgNVHSMEGDAWgBTC\\ns+slz0SxTqRNYnmFeQlXg8Sr2zAKBggqhkjOPQQDAgOBiwAwgYcCQgGjKAC371/5\\npxgYdLVBmVC6Aa+oOvwGfnich2YLSLbThySED7+fXl1BY43VU703ad6M34fStf6z\\nwFZvVZVK188DCQJBJcSZ7YA3PjOre+epJHtAba+1CkAdbSAeGhBDgHdIEP1/FDvx\\n+U2QYeVZ7kAVnkzPxa17V0yqjxDtQDTiOw/ZV5c=\\n-----END CERTIFICATE-----\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Development Cluster JSON Output\nDESCRIPTION: New CLI option (-dev-cluster-json) to write cluster configuration details to a JSON file when running Vault in development mode, enabling easier cluster inspection and configuration tracking\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20224.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault server -dev -dev-cluster-json=/path/to/cluster.json\n```\n\n----------------------------------------\n\nTITLE: Creating Database Roles in Vault\nDESCRIPTION: This snippet creates a role in Vault that maps to a set of SQL commands for creating Oracle database users. It demonstrates using the `creation_statements` parameter to define SQL commands within the Vault database role configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-oracle-database \\\n    creation_statements='CREATE USER {{username}} IDENTIFIED BY \"{{password}}\"; GRANT CONNECT TO {{username}}; GRANT CREATE SESSION TO {{username}};' \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/roles/my-role \\\n    creation_statements=@creation_statements.sql \\\n    ...\n```\n\n----------------------------------------\n\nTITLE: Key Rotation API Response\nDESCRIPTION: JSON response showing the new key version after successful rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_version\": \"3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rekey Progress Response - JSON\nDESCRIPTION: Example response showing the current status of a rekey operation including progress, thresholds, and verification settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"t\": 3,\n  \"n\": 5,\n  \"progress\": 1,\n  \"required\": 3,\n  \"pgp_fingerprints\": [\"abcd1234\"],\n  \"backup\": true,\n  \"verification_required\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Enable DR Secondary Sample Request\nDESCRIPTION: cURL request to enable DR secondary replication using the token payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/enable\n```\n\n----------------------------------------\n\nTITLE: Rotating Delta CRL - GET Request\nDESCRIPTION: Example of sending a GET request to rotate delta CRLs using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_110\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/crl/rotate\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Auth Method via API\nDESCRIPTION: cURL command to configure the Azure authentication method in Vault using the REST API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data '{\"tenant_id\": \"...\", \"resource\": \"...\"}' \\\n    https://127.0.0.1:8200/v1/auth/azure/config\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Service Runtime Parameters in Windows\nDESCRIPTION: Sets the application directory and command-line parameters for the Vault service, including the path to the configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\nnssm set MS_VAULT AppDirectory \"${env:VAULT_HOME}\" ; `\nnssm set MS_VAULT AppParameters \"server -config Config\\vault.hcl\"\n```\n\n----------------------------------------\n\nTITLE: Creating KMIP Role in Vault\nDESCRIPTION: Configure a KMIP role in Vault with complete access to a defined scope to manage encryption keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvault write kmip/scope/my-service/role/admin operation_all=true\n```\n\n----------------------------------------\n\nTITLE: Reading a Single Audit Request Header in Vault\nDESCRIPTION: Shell request to fetch information about a specific audited request header. Requires a token with sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-auditing.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/auditing/request-headers/my-header\n```\n\n----------------------------------------\n\nTITLE: Listing Available Plugin Runtimes with Vault CLI\nDESCRIPTION: Example of using the 'vault plugin runtime list' command to display all available plugin runtimes in the catalog. The output shows runtime details including name, type, OCI runtime, parent cgroup, CPU nanos, and memory bytes information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin runtime list\n\nName    Type         OCI Runtime    Parent Cgroup    CPU Nanos    Memory Bytes\n----    ----         -----------    -------------    ---------    ------------\nrunc    container    runc           n/a              0            0\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP POST request to create PingID MFA method in Vault\nDESCRIPTION: Uses a `curl` command to send a POST request to the Vault API for creating a PingID MFA method. The payload is passed from a local JSON file. You need an active Vault token and the Vault server should be running.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/pingid\n```\n\n----------------------------------------\n\nTITLE: Configuring ACME Response Headers in Vault PKI (Shell)\nDESCRIPTION: This command uses 'vault secrets tune' to add the required response headers for ACME functionality. It adds 'Last-Modified', 'Replay-Nonce', 'Link', and 'Location' to the allowed response headers for a specified mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune \\\n  -allowed-response-headers=\"Last-Modified\" \\\n  -allowed-response-headers=\"Replay-Nonce\" \\\n  -allowed-response-headers=\"Link\" \\\n  -allowed-response-headers=\"Location\" \\\n  <mount>\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating LDAP Dynamic Role with POST Request\nDESCRIPTION: Demonstrates how to create or update a dynamic role configuration named 'dynamic-role' using a POST request with a JSON payload. This request configures how Vault will create and manage LDAP user accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ldap/role/dynamic-role\n```\n\n----------------------------------------\n\nTITLE: Retrieving Static Credentials for Elasticsearch from Vault\nDESCRIPTION: This command retrieves the current static credentials from Vault for accessing Elasticsearch, including username, password, and information about credential rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read database/static-creds/my-static-role\nKey                    Value\n---                    -----\nlast_vault_rotation    2023-09-14T08:24:39.650491913-04:00\npassword               current-password\nrotation_period        24h\nttl                    23h59m59s\nusername               my-existing-elasticsearch-uername\n```\n\n----------------------------------------\n\nTITLE: Restoring ES384 JWT Signature Algorithm Support\nDESCRIPTION: Bug fix to restore support for the ES384 JWT signature algorithm in the Kubernetes authentication method. Resolves GitHub issue 160 in the Vault Kubernetes authentication plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17161.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nauth/kubernetes: Restore support for JWT signature algorithm ES384 [[GH-160](https://github.com/hashicorp/vault-plugin-auth-kubernetes/pull/160)]\n```\n\n----------------------------------------\n\nTITLE: Advanced Username Template with Custom Functions in Go\nDESCRIPTION: An advanced example using custom functions like replace, uppercase, and timestamp to generate a more complex username pattern.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/username-templating.mdx#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nFOO_{{.DisplayName | replace \"-\" \"_\" | uppercase}}_{{.RoleName | replace \"-\" \"_\" | uppercase}}_{{timestamp \"2006_01_02T15_04_05Z\" | replace \"-\" \"_\"}}\n```\n\n----------------------------------------\n\nTITLE: Sample Batch Input for HMAC Operation\nDESCRIPTION: JSON structure for batch HMAC generation of multiple inputs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_49\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batch_input\": [\n    {\n      \"input\": \"adba32==\"\n    },\n    {\n      \"input\": \"aGVsbG8gd29ybGQuCg==\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for List Secrets - Vault KV API - JSON\nDESCRIPTION: This JSON sample response illustrates the keys returned when listing secrets at a specified path in the Vault KV API. The keys include both standard keys and folder indicators with a trailing slash.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v1.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"foo\", \"foo/\"]\n  },\n  \"lease_duration\": 2764800,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Vault CLI: Attempting to Sync a Denied Secret\nDESCRIPTION: This command demonstrates attempting to sync a secret using the Vault CLI when the user lacks read access to the secret. This operation will result in a permission denied error, preventing unauthorized synchronization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault write sys/sync/destinations/$TYPE/$NAME/associations/set \\\n    mount=\\\"path/to\\\" \\\n    secret_name=\\\"my-secret-1\\\" \n\nError writing data to sys/sync/destinations/$TYPE/$NAME/associations/set: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/sys/sync/destinations/$TYPE/$NAME/associations/set\nCode: 403. Errors:\n\n* permission denied to read the content of the secret my-secret-1 in mount path/to\"\n```\n\n----------------------------------------\n\nTITLE: Sample Shell Request for Setting Cluster Configuration\nDESCRIPTION: cURL command for sending a POST request to configure the cluster settings for the PKI secrets engine. This sets the URLs used for certificate distribution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_103\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/cluster\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret in Vault's KVv2 Engine\nDESCRIPTION: This command creates a new secret in the KVv2 secrets engine in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/gcpsm.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -mount=my-kv my-secret foo='bar'\n```\n\n----------------------------------------\n\nTITLE: Disable DR Secondary Sample Payload\nDESCRIPTION: JSON payload for disabling DR secondary replication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dr_operation_token\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin Runtime with curl\nDESCRIPTION: Sample request to delete a plugin runtime from the Vault catalog. This DELETE request requires sudo capability and will fail if any plugins reference the runtime.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-runtimes-catalog.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/plugins/runtimes/catalog/container/example-plugin-runtime\n```\n\n----------------------------------------\n\nTITLE: Get CF Diego Instance Root CA\nDESCRIPTION: The command fetches the root CA certificate used by CF to issue instance identity certificates. It presumes a CredHub session is active.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ credhub get -n /cf/diego-instance-identity-root-ca\n```\n\n----------------------------------------\n\nTITLE: Configuring Highly Available Vault Cluster with Consul and GCP KMS in YAML\nDESCRIPTION: This YAML configuration sets up a five-server Vault cluster using Consul as a highly available storage backend and Google Cloud KMS for Auto Unseal. It includes environment variables, volume mounts, affinity rules, and Vault server configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-with-consul.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  extraEnvironmentVars:\n    GOOGLE_REGION: global\n    GOOGLE_PROJECT: myproject\n    GOOGLE_APPLICATION_CREDENTIALS: /vault/userconfig/my-gcp-iam/myproject-creds.json\n\n  volumes:\n    - name: userconfig-my-gcp-iam\n      secret:\n        defaultMode: 420\n        secretName: my-gcp-iam\n\n  volumeMounts:\n    - mountPath: /vault/userconfig/my-gcp-iam\n      name: userconfig-my-gcp-iam\n      readOnly: true\n\n  affinity: |\n    podAntiAffinity:\n      requiredDuringSchedulingIgnoredDuringExecution:\n        - labelSelector:\n            matchLabels:\n              app: {{ template \"vault.name\" . }}\n              release: \"{{ .Release.Name }}\"\n              component: server\n          topologyKey: kubernetes.io/hostname\n\n  service:\n    enabled: true\n\n  ha:\n    enabled: true\n    replicas: 5\n\n    config: |\n      ui = true\n\n      listener \"tcp\" {\n        tls_disable = 1\n        address = \"[::]:8200\"\n        cluster_address = \"[::]:8201\"\n      }\n\n      storage \"consul\" {\n        path = \"vault\"\n        address = \"HOST_IP:8500\"\n      }\n\n      seal \"gcpckms\" {\n         project     = \"myproject\"\n         region      = \"global\"\n         key_ring    = \"vault-unseal-kr\"\n         crypto_key  = \"vault-unseal-key\"\n      }\n\n      service_registration \"kubernetes\" {}\n```\n\n----------------------------------------\n\nTITLE: Listing Raft Peers in Vault Cluster\nDESCRIPTION: This command lists all the Raft peers in the Vault cluster, showing their node IDs, addresses, states, and voter status. It helps verify the successful initialization of the Raft cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-with-raft.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-0 -- vault operator raft list-peers\n```\n\n----------------------------------------\n\nTITLE: Listing KMIP Credential Serial Numbers in Shell\nDESCRIPTION: cURL command to list all KMIP credential serial numbers for a specific role using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole/credential\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Log Level via CLI\nDESCRIPTION: Demonstrates how to set the Vault server log level using a command line flag\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/log-level.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-log-level debug\n```\n\n----------------------------------------\n\nTITLE: Reading Azure Secrets Engine Configuration (CLI)\nDESCRIPTION: Vault CLI command to read the stored Azure secrets engine configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/azure.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read azure/config\n```\n\n----------------------------------------\n\nTITLE: Disabling LDAP Paged Searching - Shell\nDESCRIPTION: This code snippet provides a command to disable paged searching in LDAP to prevent issues during the upgrade to Vault 1.11.10. It sets the max_page_size to -1. Users experiencing errors related to LDAP pagination should execute this command as a workaround.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.11.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/ldap/config max_page_size=-1\n```\n\n----------------------------------------\n\nTITLE: Querying Resultant ACL for UI in Vault API\nDESCRIPTION: This snippet demonstrates how to make a GET request to the `/sys/internal/ui/resultant-acl` endpoint using curl. It retrieves the resultant ACL relevant to the UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-resultant-acl.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/internal/ui/resultant-acl\n```\n\n----------------------------------------\n\nTITLE: Batch Input JSON Structure\nDESCRIPTION: Example JSON structure for batch HMAC verification requests showing multiple inputs with their corresponding HMACs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batch_input\": [\n    {\n      \"input\": \"adba32==\",\n      \"hmac\": \"vault:v1:1jFhRYWHiddSKgEFyVRpX8ieX7UU+748NBwHKecXE3hnGBoAxrfgoD5U0yAvji7b5X6V1fP\"\n    },\n    {\n      \"input\": \"aGVsbG8gd29ybGQuCg==\",\n      \"hmac\": \"vault:v1:/wsSP6iQ9ECO9RRkefKLXey9sDntzSjoiW0vBrWfUsYB0ISroyC6plUt/jN7gcOv9O+Ecow\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Project Sync Destination in Vault\nDESCRIPTION: This command creates a sync destination in Vault for a Vercel project. It requires an access token, project ID, and specifies deployment environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/vercelproject.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/vercel-project/my-dest \\\n    access_token=\"$TOKEN\" \\\n    project_id=\"$PROJECT_ID\" \\\n    deployment_environments=development \\\n    deployment_environments=preview \\\n    deployment_environments=production\n```\n\n----------------------------------------\n\nTITLE: Policy Configuration for Key Trimming\nDESCRIPTION: HCL policy configuration allowing create and update capabilities for trimming old versions of a specific GCP KMS key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_38\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/trim/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: List Plugins When Audit Logging Enabled\nDESCRIPTION: This shell error occurs due to audit logging interference with plugin catalog listing, resulting in a server error message. It's a known issue with versions 1.12.0, 1.12.1, and 1.12.2, where enabling audit logging causes 'vault plugin list' to fail.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.12.x.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin list\nError listing available plugins: data from server response is empty\n```\n\n----------------------------------------\n\nTITLE: Inspecting Updated Vault License\nDESCRIPTION: This bash command executes the 'vault license inspect' command inside the Vault pod to verify that the updated license has been propagated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-0 -- vault license inspect\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request for Activity Export (Shell)\nDESCRIPTION: This shell command sends a GET request to export activity data from Vault using curl. It includes the necessary headers and demonstrates how to query the activity export endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/internal/counters/activity/export\n```\n\n----------------------------------------\n\nTITLE: Create Custom AppRole Secret ID Request\nDESCRIPTION: This curl command demonstrates how to create a custom secret ID for an AppRole in Vault.  It sends a POST request to the `/auth/approle/role/:role_name/custom-secret-id` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/approle/role/application1/custom-secret-id\n```\n\n----------------------------------------\n\nTITLE: Shutting Down and Upgrading Standby Nodes in Vault\nDESCRIPTION: This snippet outlines the step-by-step procedure to upgrade standby nodes in a Vault HA setup. It includes commands for shutting down Vault, replacing the binary, starting the node, and verifying its status using `vault status`. It aims to ensure that standby nodes are correctly upgraded to minimize downtime.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/vault-ha-upgrade.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n1. Properly shut down Vault on the standby node via `SIGINT` or `SIGTERM`\n2. Replace the Vault binary with the new version; ensure that `mlock()` capability is added to the new binary with [setcap](/vault/docs/configuration#disable_mlock)\n3. Start the standby node\n4. Unseal the standby node\n5. Verify `vault status` shows correct Version and HA Mode is `standby`\n6. Review the node's logs to ensure successful startup and unseal\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a PKCS#11 Managed Key\nDESCRIPTION: JSON payload for creating or updating a PKCS#11 managed key. This example includes the required configuration parameters for a PKCS#11 backend including library, slot, pin, key label, and mechanism.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/managed-keys.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"library\": \"softhsm\",\n  \"slot\": \"693149389\",\n  \"pin\": \"12345\",\n  \"key_label\": \"hsm-key1\",\n  \"mechanism\": \"0x0001\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Rekey Operation Request\nDESCRIPTION: HTTP POST request to initiate a new rekey operation\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/rekey-recovery-key/init\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Configuration - JSON\nDESCRIPTION: This JSON object shows the expected response when reading the configuration of the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"scopes\": [\"https://www.googleapis.com/auth/cloudkms\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Static Credentials Authentication in Vault\nDESCRIPTION: Commands to create an AWS IAM authentication role in Vault for static credentials authentication. Includes both CLI and Terraform approaches.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/aws/role/<VAULT_AWS_STATIC_ROLE> \\\n    auth_type=\"iam\" \\\n    policies=\"default\" \\\n    bound_iam_principal_arn=\"arn:aws:iam::<ACCOUNT_ID>:role/<IAM_ROLE>\"\n```\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_aws_auth_backend_role\" \"aws_static_role\" {\n  backend                  = \"auth/aws\"\n  role                     = <VAULT_AWS_STATIC_ROLE>\n  auth_type                = \"iam\"\n  token_policies           = [\"default\"]\n  bound_iam_principal_arns = [\n    \"arn:aws:iam::<ACCOUNT_ID>:role/<IAM_ROLE>\",\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Read Snapshot Status Response\nDESCRIPTION: Sample JSON response when reading snapshot status\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"last_snapshot_end\": \"2020-10-28T11:17:21-04:00\",\n    \"last_snapshot_error\": \"\",\n    \"last_snapshot_start\": \"2020-10-28T11:17:21-04:00\",\n    \"last_snapshot_url\": \"file:///opt/vault/snapshots/vault-snapshot-1603898241699731000.snap\",\n    \"snapshot_start\": \"2020-10-28T11:17:21-04:00\",\n    \"snapshot_url\": \"file:///opt/vault/snapshots/vault-snapshot-1603898241699731000.snap\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Including Total Snapshot Size Metric\nDESCRIPTION: This snippet includes the metric for the total size of all automated snapshots. It is critical for overall storage management related to snapshotting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/autosnap.mdx#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/autosnapshots/total/snapshot/size.mdx'\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Kubernetes Auth Method\nDESCRIPTION: This command authenticates to the `us-west-org` Vault namespace using the Kubernetes auth method. It uses a JWT to obtain a client token for subsequent operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ VAULT_NAMESPACE=us-west-org vault write -format=json auth/kubernetes/login role=cross-namespace-demo jwt=$(cat jwt.txt) | jq -r .auth.client_token > token.txt\n```\n\n----------------------------------------\n\nTITLE: JWT Role Configuration Response\nDESCRIPTION: Sample response showing the configuration details of a JWT role\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"bound_subject\": \"sl29dlldsfj3uECzsU3Sbmh0F29Fios1@clients\",\n    \"bound_audiences\": [\n      \"https://myco.test\"\n    ],\n    \"bound_cidrs\": [],\n    \"user_claim\": \"https://vault/user\",\n    \"groups_claim\": \"https://vault/groups\",\n    \"policies\": [\n      \"dev\",\n      \"prod\"\n    ],\n    \"period\": 0,\n    \"ttl\": 0,\n    \"num_uses\": 0,\n    \"max_ttl\": 0\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Non-Resolving Merkle Synchronization\nDESCRIPTION: This snippet presents a log example indicating a non-resolving merkle-sync scenario where conflicting data prevents successful synchronization between clusters. It outlines the transitions through various states and the errors that arise when attempting to sync data after a diff operation reveals conflicts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nvault [INFO]  perf-sec.core0.core: non-matching guard, exiting\nvault [TRACE] perf-sec.core0.core: finished client WAL streaming\nvault [INFO]  perf-sec.core0.replication: no matching WALs available\nvault [TRACE] perf-sec.core0.core: wal context done\nvault [DEBUG] perf-sec.core0.replication: transitioning state: state=merkle-diff\nvault [DEBUG] perf-sec.core0.replication: starting merkle diff\nvault [TRACE] perf-sec.core0.core: checking conflicting pages\nvault [TRACE] perf-pri.core0.core: serving conflicting pages\nvault [DEBUG] perf-pri.core0.replication.index.perf: creating merkle state snapshot: generation=3\nvault [TRACE] perf-sec.core0.core: fetching subpage hashes\nvault [TRACE] perf-pri.core0.core: serving subpage hashes\nvault [DEBUG] perf-pri.core0.replication.index.perf: removing state snapshot from cache: generation=3\nvault [DEBUG] perf-sec.core0.replication: transitioning state: state=merkle-sync\nvault [DEBUG] perf-sec.core0.replication: waiting for operations to complete before merkle sync\nvault [DEBUG] perf-sec.core0.replication: starting merkle sync: num_conflict_keys=4\nvault [DEBUG] perf-sec.core0.replication: merkle sync debug info: local_keys=[] remote_keys=[] conflicting_keys=[\"logical/67bf7b33-734e-f909-86e5-a7e69af0979f/junk9\", \"logical/67bf7b33-734e-f909-86e5-a7e69af0979f/junk7\", \"logical/67bf7b33-734e-f909-86e5-a7e69af0979f/junk8\", \"logical/67bf7b33-734e-f909-86e5-a7e69af0979f/junk6\"]\nvault [DEBUG] perf-sec.core0.replication: transitioning state: state=stream-wals\nvault [INFO]  perf-sec.core0.replication: requesting WAL stream: guard=0c556858\nvault [TRACE] perf-sec.core0.core: starting client WAL streaming\nvault [TRACE] perf-sec.core0.core: receiving WALs\nvault [TRACE] perf-pri.core0.core: starting serving WALs: clientID=6afbce30-67c5-bb15-6eda-001140d33275\nvault [TRACE] perf-pri.core0.core: streaming from log shipper done: clientID=6afbce30-67c5-bb15-6eda-001140d33275\nvault [TRACE] perf-pri.core0.core: internal wal stream stop channel fired: clientID=6afbce30-67c5-bb15-6eda-001140d33275\nvault [TRACE] perf-pri.core0.core: stopping serving WALs: clientID=6afbce30-67c5-bb15-6eda-001140d33275\nvault [INFO]  perf-sec.core0.core: non-matching guard, exiting\nvault [TRACE] perf-sec.core0.core: finished client WAL streaming\nvault [INFO]  perf-sec.core0.replication: no matching WALs available\nvault [DEBUG] perf-sec.core0.replication: transitioning state: state=merkle-diff\nvault [DEBUG] perf-sec.core0.replication: starting merkle diff\nvault [TRACE] perf-sec.core0.core: wal context done\nvault [TRACE] perf-sec.core0.core: checking conflicting pages\nvault [TRACE] perf-pri.core0.core: serving conflicting pages\n```\n\n----------------------------------------\n\nTITLE: Create Development Role Configuration\nDESCRIPTION: JSON configuration for creating a development role in Vault, describing the policies and groups or dynamic groups associated with the role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n\"token_policies\": \"devpolicy\",\n\"token_ttl\": \"1500\",\n\"ocid_list\": \"ocid1.group.oc1..aaaaaaaaiqnblimpvmgrouplrdvjobr7qd223g275idcqhexamplefq,ocid1.dynamicgroup.oc1..aaaaaaaa5hmfyrdaxvmdg2u5n7ffamn2pdvxaq6esb2vzzoduexamplea\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request to Remove PingID MFA Method\nDESCRIPTION: This curl command illustrates how to send a DELETE request to remove a PingID MFA method. It includes the necessary headers and the method name in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/pingid.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/pingid/ping\n```\n\n----------------------------------------\n\nTITLE: Deleting All Issuers and Keys with Vault API\nDESCRIPTION: This code snippet demonstrates how to delete all issuers and keys within a PKI mount using the Vault API. This operation requires sudo/root privileges and is done via a DELETE request to `/pki/root`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_80\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/pki/root\n```\n\n----------------------------------------\n\nTITLE: Application 1 Kubernetes Auth Configuration\nDESCRIPTION: YAML configuration for Application 1 using Kubernetes authentication method with VaultAuth and VaultStaticSecret resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: apps-default\n  namespace: apps\nspec:\n  vaultAuthGlobalRef:\n    allowDefault: true\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  name: app1-secret\n  namespace: apps\nspec:\n  destination:\n    create: true\n    name: app1-secret\n  hmacSecretData: true\n  mount: apps\n  path: app1\n  type: kv-v2\n  vaultAuthRef: apps-default\n```\n\n----------------------------------------\n\nTITLE: Minimal Consul Storage Configuration\nDESCRIPTION: Minimal configuration example using default settings with local Consul agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"consul\" {}\n```\n\n----------------------------------------\n\nTITLE: Distributing a Key to KMS Provider - JSON Payload Example\nDESCRIPTION: Sample JSON payload for distributing a key to a KMS provider, specifying HSM protection and encrypt/decrypt purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protection\": \"hsm\",\n  \"purpose\": \"encrypt,decrypt\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Plugin Runtime with curl\nDESCRIPTION: Sample request to register a plugin runtime in the Vault catalog. This POST request requires sudo capability and submits configuration parameters for the runtime.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-runtimes-catalog.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/plugins/runtimes/catalog/container/example-plugin-runtime\n```\n\n----------------------------------------\n\nTITLE: Update DR Secondary Primary Sample Payloads\nDESCRIPTION: JSON payloads for updating the primary cluster assignment of a DR secondary using either token or cluster addresses.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dr_operation_token\": \"...\",\n  \"token\": \"...\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dr_operation_token\": \"...\",\n  \"update_primary_addrs\": [\"10.0.0.2:8201\"]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure from AWS Auth Login\nDESCRIPTION: Example of the JSON response structure returned by a successful AWS authentication request to Vault. The response includes authentication metadata such as token, policies, and instance information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"auth\": {\n    \"renewable\": true,\n    \"lease_duration\": 72000,\n    \"metadata\": {\n      \"role_tag_max_ttl\": \"0s\",\n      \"role\": \"ami-f083709d\",\n      \"region\": \"us-east-1\",\n      \"nonce\": \"5defbf9e-a8f9-3063-bdfc-54b7a42a1f95\",\n      \"instance_id\": \"i-a832f734\",\n      \"ami_id\": \"ami-f083709d\"\n    },\n    \"policies\": [\n      \"default\",\n      \"dev\",\n      \"prod\"\n    ],\n    \"accessor\": \"5cd96cd1-58b7-2904-5519-75ddf957ec06\",\n    \"client_token\": \"150fc858-2402-49c9-56a5-f4b57f2c8ff1\"\n  },\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": null,\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\",\n  \"request_id\": \"d7d50c06-56b8-37f4-606c-ccdc87a1ee4c\"\n}\n```\n\n----------------------------------------\n\nTITLE: UserInfo Endpoint Response\nDESCRIPTION: Sample JSON response from the UserInfo endpoint containing authenticated user claims including contact information, groups, and identifiers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"contact\": {\n    \"email\": \"vault@hashicorp.com\",\n    \"phone_number\": \"123-456-7890\"\n  },\n  \"groups\": [\n    \"engineering\"\n  ],\n  \"sub\": \"5000796e-36df-0d8c-6460-81853d9b2667\",\n  \"username\": \"end-user\"}\n```\n\n----------------------------------------\n\nTITLE: Response Structure of the Backup Key in JSON\nDESCRIPTION: The JSON snippet shows the structure of the response from a successful backup request to the Transit Secrets Engine. It includes key policy details such as the name, creation time, and other metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_68\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"backup\": \"eyJwb2xpY3kiOnsibmFtZSI6ImFlcyIsImtleXMiOnsiMSI6eyJrZXkiOiJXK3k4Z0dOMHdiTDJLOU95NXFPN1laMGtjdzMvR0ZiNWM4STBzdlNMMnFNPSIsImhtYWNfa2V5IjoiUDBTcjh1YTJaZERNUTdPd2h4RGp1Z0U5d0JSR3Q2QXl6K0t4TzN5Z2M5ST0iLCJ0aW1lIjoiMjAxNy0xMi0wOFQxMTo1MDowOC42MTM4MzctMDU6MDAiLCJlY194IjpudWxsLCJlY195IjpudWxsLCJlY19kIjpudWxsLCJyc2Ffa2V5IjpudWxsLCJwdWJsaWNfa2V5IjoiIiwiY3JlYXRpb25fdGltZSI6MTUxMjc1MTgwOH19LCJkZXJpdmVkIjpmYWxzZSwia2RmIjowLCJjb252ZXJnZW50X2VuY3J5cHRpb24iOmZhbHNlLCJleHBvcnRhYmxlIjpmYWxzZSwibWluX2RlY3J5cHRpb25fdmVyc2lvbiI6MSwibWluX2VuY3J5cHRpb25fdmVyc2lvbiI6MCwibGF0ZXN0X3ZlcnNpb24iOjEsImFyY2hpdmVfdmVyc2lvbiI6MSwiZGVsZXRpb25fYWxsb3dlZCI6ZmFsc2UsImNvbnZlcmdlbnRfdmVyc2lvbiI6MCwidHlwZSI6MCwiYmFja3VwX2luZm8iOnsidGltZSI6IjIwMTctMTItMDhUMTE6NTA6MjkuMjI4MTU3LTA1OjAwIiwidmVyc2lvbiI6MX0sInJlc3RvcmVfaW5mbyI6bnVsbH0sImFyY2hpdmVkX2tleXMiOnsia2V5cyI6W3sia2V5IjpudWxsLCJobWFjX2tleSI6bnVsbCwidGltZSI6IjAwMDEtMDEtMDFUMDA6MDA6MDBaIiwiZWNfeCI6bnVsbCwiZWNfeSI6bnVsbCwiZWNfZCI6bnVsbCwicnNhX2tleSI6bnVsbCwicHVibGljX2tleSI6IiIsImNyZWF0aW9uX3RpbWUiOjB9LHsia2V5IjoiVyt5OGdHTjB3YkwySzlPeTVxTzdZWjBrY3czL0dGYjVjOEkwc3ZTTDJxTT0iLCJobWFjX2tleSI6IlAwU3I4dWEyWmRETVE3T3doeERqdWdFOXdCUkd0NkF5eitLeE8zeWdjOUk9IiwidGltZSI6IjIwMTctMTItMDhUMTE6NTA6MDguNjEzODM3LTA1OjAwIiwiZWNfeCI6bnVsbCwiZWNfeSI6bnVsbCwiZWNfZCI6bnVsbCwicnNhX2tleSI6bnVsbCwicHVibGljX2tleSI6IiIsImNyZWF0aW9uX3RpbWUiOjE1MTI3NTE4MDh9XX19Cg==\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rotation Time Interval\nDESCRIPTION: Command to set an automatic key rotation interval of 2160 hours (90 days).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rotate.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/rotate/config interval=2160h\nSuccess! Data written to: sys/rotate/config\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Fetching Certificate URLs - JSON\nDESCRIPTION: This JSON response demonstrates the structure of the data returned when fetching the URLs configured for the PKI, including issuing certificates and CRL distribution points.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_89\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"issuing_certificates\": [\"<url1>\", \"<url2>\"],\n    \"crl_distribution_points\": [\"<url1>\", \"<url2>\"],\n    \"ocsp_servers\": [\"<url1>\", \"<url2>\"]\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Login as User Text Command\nDESCRIPTION: This command authenticates the CLI session using a specific user token. Vault must be properly set up with the user and token generated in previous steps.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ vault login 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Storage Encryption Settings\nDESCRIPTION: Storage encryption configuration using Vault Transit Engine, including authentication methods and connection settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nstorageEncryption:\n  enabled: false\n  vaultConnectionRef: default\n  keyName: \"\"\n  transitMount: \"\"\n  namespace: \"\"\n  method: kubernetes\n  mount: kubernetes\n```\n\n----------------------------------------\n\nTITLE: New Clients Attribution Breakdown in JSON\nDESCRIPTION: This snippet illustrates the structure of new clients attribution within the monthly breakdown, including namespace and mount-level details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"months\":[\n      {\n         \"new_clients\":{\n            \"counts\":{},\n            \"namespaces\":[\n               {\n                  \"namespace_id\":\"root\",\n                  \"namespace_path\":\"\",\n                  \"counts\":{},\n                  \"mounts\":[\n                     {\n                        \"path\":\"auth/up2/\",\n                        \"counts\":{}\n                     },\n                     {\n                        \"path\":\"auth/up1/\",\n                        \"counts\":{}\n                     }\n                  ]\n               }\n            ]\n         }\n      }\n   ],\n}\n```\n\n----------------------------------------\n\nTITLE: Build Vault (Linux)\nDESCRIPTION: Builds the Vault binary for the current system using the `make dev` command. The resulting binary is placed in the `bin` directory within the Vault project.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n\"make dev\"\n```\n\n----------------------------------------\n\nTITLE: Read Snapshot Status Request\nDESCRIPTION: cURL command to read the status of a snapshot configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot-auto/status/config1\n```\n\n----------------------------------------\n\nTITLE: Setting Command Line Arguments in Helm Chart\nDESCRIPTION: Example of how to set command line arguments when installing the Vault CSI provider via Helm chart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/configurations.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n--set \"csi.extraArgs={-debug=true}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Root AWS Credentials Sample Payload\nDESCRIPTION: JSON payload for configuring root AWS credentials by specifying an access key, secret key, and AWS region. These credentials are used by Vault to communicate with AWS services.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_key\": \"AKIA...\",\n  \"secret_key\": \"2J+...\",\n  \"region\": \"us-east-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Read STS Role Request\nDESCRIPTION: cURL command to retrieve STS role configuration for an AWS account.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/aws/config/sts/111122223333\n```\n\n----------------------------------------\n\nTITLE: Transit Keys Configuration Response\nDESCRIPTION: JSON response showing the global configuration state for Transit keys, including the upsert capability setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"disable_upsert\": false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Daemon for runsc Runtime\nDESCRIPTION: Configuration JSON for Docker daemon to enable runsc runtime with host Unix Domain Socket support.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/containerized-plugins/add-a-containerized-plugin.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n{\n  \"runtimes\": {\n    \"runsc\": {\n      \"path\": \"PATH_TO_RUNSC_INSTALLATION\",\n      \"runtimeArgs\": [\n        \"--host-uds=all\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Agent Log File Path Examples\nDESCRIPTION: Example table showing how log file paths and rotation patterns work in Vault Agent configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nlog-file | Full log file | Rotated log file\n---------- | ------------- | ----------------\n`/var/log` | `/var/log/agent.log` | `/var/log/agent-{timestamp}.log`\n`/var/log/my-diary` | `/var/log/my-diary.log` | `/var/log/my-diary-{timestamp}.log`\n`/var/log/my-diary.txt` | `/var/log/my-diary.txt` | `/var/log/my-diary-{timestamp}.txt`\n```\n\n----------------------------------------\n\nTITLE: Multi-Seal HA Configuration Example\nDESCRIPTION: Example configuration showing how to set up multiple seals (AWS KMS and Azure Key Vault) with different priorities in HA mode.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/seal-ha.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"awskms\" {\n  name = \"AWS\"\n  priority = \"1\"\n  # ...\n}\n\nseal \"azurekeyvault\" {\n  name = \"Azure\"\n  priority = \"2\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling KVv2 Secrets Engine in Vault\nDESCRIPTION: This shell command enables a new KVv2 secrets engine in Vault at the specified path. It's a prerequisite for creating secrets to sync with AWS Secrets Manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/awssm.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets enable -path=my-kv kv-v2\n```\n\n----------------------------------------\n\nTITLE: Creating External Vault Group with Policy Assignment\nDESCRIPTION: Command to create an external Vault identity group named 'SamlVaultReader' with the 'ro-adfs-test' policy attached. The command saves the group ID to a file for later use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write                            \\\n  -format=json                           \\\n  identity/group name=\"SamlVaultReader\"  \\\n  policies=\"ro-adfs-test\"                \\\n  type=\"external\" | jq -r \".data.id\" > group_id.txt\n```\n\n----------------------------------------\n\nTITLE: Decoding Input Value - HashiCorp Vault Command\nDESCRIPTION: This command decodes an encoded credit card number using the 'transform/decode' endpoint with a named role 'payments'. It reverts the transformation applied to the input, restoring its original format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transform/decode/payments value=9300-3376-4943-8903\nKey              Value\n---              -----\ndecoded_value    1111-2222-3333-4444\n```\n\n----------------------------------------\n\nTITLE: Listing LDAP Groups in Kerberos Auth Method\nDESCRIPTION: Example request to list all LDAP groups that have been configured in the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/kerberos/groups\n```\n\n----------------------------------------\n\nTITLE: Listing Certificate Roles in Vault\nDESCRIPTION: This curl command sends a LIST request to retrieve all configured certificate names in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    --cacert vault-ca.pem \\\n    https://127.0.0.1:8200/v1/auth/cert/certs\n```\n\n----------------------------------------\n\nTITLE: Deleting IAM Role in Vault (Shell)\nDESCRIPTION: This command demonstrates how to delete an IAM role from Vault's AWS secrets engine. It uses the 'delete' command to remove a role named 'ops' from the AWS roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/delete.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault delete aws/roles/ops\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Role with Namespace Label Selector\nDESCRIPTION: JSON payload for configuring a Kubernetes role that generates tokens in namespaces matching specified labels. This uses a YAML-formatted label selector to target production namespaces with a specific generator label.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_kubernetes_namespace_selector\": \"matchLabels:\\n  stage: prod\\n  sa-generator: vault\",\n  \"service_account_name\": \"default\",\n}\n```\n\n----------------------------------------\n\nTITLE: Merkle Check Response from Vault Replication API\nDESCRIPTION: Sample JSON response from the merkle-check endpoint. It provides detailed information about the health of the Merkle composite tree, including any corruption in the root and subtrees, for both replicated and local trees.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"d4b2ad1a-6e5f-7f9e-edfe-558eb89a40e6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"merkle_corruption_report\": {\n      \"corrupted_root\": false,\n      \"corrupted_tree_map\": {\n        \"1\": {\n          \"corrupted_index_tuples_map\": {\n            \"5\": {\n              \"corrupted\": false,\n              \"subpages\": [\n                28\n              ]\n            }\n          },\n          \"corrupted_subtree_root\": false,\n          \"root_hash\": \"DyGc6rQTV9XgyNSff3zimhi3FJM=\",\n          \"tree_type\": \"replicated\"\n        },\n        \"2\": {\n          \"corrupted_index_tuples_map\": null,\n          \"corrupted_subtree_root\": false,\n          \"root_hash\": \"EXmRTdfYCZTm5i9wLef9RQqyLCw=\",\n          \"tree_type\": \"local\"\n        }\n      },\n      \"last_corruption_check_epoch\": \"2023-09-11T11:25:59.44956-07:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting the ephemeral AES key with the wrapping key in Go\nDESCRIPTION: This Go code snippet encrypts the ephemeral AES key using the transit wrapping key with OAEP padding and SHA256 hashing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nwrappedAESKey, err := rsa.EncryptOAEP(\n        sha256.New(),\n        rand.Reader,\n        wrappingKey,\n        ephemeralAESKey,\n        []byte{},\n)\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Oracle Role\nDESCRIPTION: Shell command to configure a Vault role that maps to SQL statements for creating database credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/oracle.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=my-oracle-database \\\n    creation_statements='CREATE USER {{username}} IDENTIFIED BY \"{{password}}\"; GRANT CONNECT TO {{username}}; GRANT CREATE SESSION TO {{username}};' \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Instance Metadata\nDESCRIPTION: Command to retrieve AliCloud credentials from instance metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/alicloud.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl 'http://100.100.100.200/latest/meta-data/ram/security-credentials/$ROLE_NAME'\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Automated Reporting Using Environment Variable\nDESCRIPTION: Shell command to set an environment variable that disables automated license utilization reporting in Vault Enterprise. This method requires a system restart to take effect.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ export OPTOUT_LICENSE_REPORTING=true\n```\n\n----------------------------------------\n\nTITLE: Denying SHA-1 Verification Policy in HCL\nDESCRIPTION: HCL policy configuration to block signature verification using the SHA-1 algorithm for a named key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_61\n\nLANGUAGE: hcl\nCODE:\n```\npath \"/transit/verify/:name/sha1\" {\n  capabilities = [\"deny\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Login Enforcements\nDESCRIPTION: Curl request to list available login enforcement configurations in current namespace\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/login-enforcement.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/mfa/login-enforcement\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vault API using curl\nDESCRIPTION: Example of how to send an authenticated GET request to the Vault API using a client token in the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -H \"X-Vault-Token: f3b09679-3001-009d-2b80-9c306ab81aa6\" \\\n    -X GET \\\n    http://127.0.0.1:8200/v1/secret/foo\n```\n\n----------------------------------------\n\nTITLE: Retrieving Default Audiences from Kubernetes Token\nDESCRIPTION: These commands demonstrate how to extract the default audiences from a Kubernetes service account token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create token default | cut -f2 -d. | base64 --decode\n```\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec my-pod -- cat /var/run/secrets/kubernetes.io/serviceaccount/token | cut -f2 -d. | base64 --decode\n```\n\n----------------------------------------\n\nTITLE: Verifying Installation on PowerShell\nDESCRIPTION: This snippet provides commands to verify the installation of the Vault CLI and to start the Vault server in development mode on a Windows system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_15\n\nLANGUAGE: powershell\nCODE:\n```\nvault -h\n```\n\nLANGUAGE: powershell\nCODE:\n```\nvault server -dev -config ${env:VAULT_HOME}\\Config\\vault.hcl\n```\n\n----------------------------------------\n\nTITLE: Listing SAML Roles with cURL\nDESCRIPTION: This cURL command sends a GET request to list all configured SAML roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/auth/saml/role?list=true\n```\n\n----------------------------------------\n\nTITLE: Creating Token with Policies - Shell Command\nDESCRIPTION: This snippet demonstrates how to create a new token in HashiCorp Vault with specific policies assigned to it. The command allows the user to define up to two policies at the time of token creation. The root user has the authority to assign any policies regardless of the current token's policy restrictions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token create -policy=dev-readonly -policy=logs\n```\n\n----------------------------------------\n\nTITLE: Unlocking User - HTTP POST Request\nDESCRIPTION: Makes a POST request to unlock a specific user identified by mount accessor and alias identifier.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/user-lockout.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/locked-users/auth_userpass_af8d1d32/unlock/bsmith\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration Response Sample\nDESCRIPTION: Example JSON response containing LDAP configuration details from Vault API\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"binddn\": \"cn=admin,dc=hashicorp,dc=com\",\n    \"case_sensitive_names\": false,\n    \"certificate\": \"\",\n    \"insecure_tls\": false,\n    \"length\": 64,\n    \"schema\": \"openldap\",\n    \"starttls\": false,\n    \"tls_max_version\": \"tls12\",\n    \"tls_min_version\": \"tls12\",\n    \"url\": \"ldap://127.0.0.1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Revocation List - Request Payload\nDESCRIPTION: JSON payload for signing a custom revocation list with specific certificate entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_115\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"crl_number\": \"10\",\n  \"next_update\": \"24h\",\n  \"format\": \"pem\",\n  \"revoked_certs\": [\n    {\n      \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:58\",\n      \"revocation_time\": \"2009-11-10T23:00:00Z\"\n    },\n    {\n      \"serial_number\": \"40:33:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:58\",\n      \"revocation_time\": \"1257894000\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Non-Disruptive Certificate Rotation Feature in Vault PKI Mount (Markdown)\nDESCRIPTION: This release note describes a new feature in Vault that allows for non-disruptive rotation of intermediate and root certificates within a PKI mount. It enables import, generation, and configuration of multiple keys and issuers without impacting existing client configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15277.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Non-Disruptive Intermediate/Root Certificate Rotation**: This allows\nimport, generation and configuration of any number of keys and/or issuers\nwithin a PKI mount, providing operators the ability to rotate certificates\nin place without affecting existing client configurations.\n```\n```\n\n----------------------------------------\n\nTITLE: Generating KMIP Role TLS Credentials\nDESCRIPTION: Generate TLS credentials for the KMIP role in Vault. These certificates establish secure connections between the Oracle database and Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nvault write -f -format=json kmip/scope/my-service/role/admin/credential/generate | tee kmip.json\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Specific KV Write Event Notifications\nDESCRIPTION: This command subscribes to all 'kv-v2/data-write' event notifications in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/events.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault events subscribe kv-v2/data-write\n```\n\n----------------------------------------\n\nTITLE: Policy Configuration for Key Rotation\nDESCRIPTION: HCL policy configuration allowing create and update capabilities for rotating a specific GCP KMS key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_35\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/rotate/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CMPv2 Configuration Update Response (JSON)\nDESCRIPTION: Sample response from updating the CMPv2 configuration. It includes the updated settings for CMPv2, such as audit fields, authenticators, default path policy, and the new last update timestamp.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"audit_fields\": [\"common_name\", \"alt_names\", \"ip_sans\", \"uri_sans\"],\n    \"authenticators\": {\n      \"cert\": {\n        \"accessor\": \"auth_cert_0f1df449\",\n        \"cert_role\": \"cert1\"\n      }\n    },\n    \"default_path_policy\": \"sign-verbatim\",\n    \"disabled_validations\": [\"DisableMatchingKeyIdValidation\"],\n    \"enabled\": true,\n    \"enable_sentinel_parsing\": true,\n    \"last_updated\": \"2024-02-02T10:49:20-05:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ACME Configuration Response in Vault PKI (JSON)\nDESCRIPTION: This snippet displays a sample JSON response when retrieving the ACME configuration, showing various settings such as allowed issuers, roles, and policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"allowed_issuers\": [\n      \"*\"\n    ],\n    \"allowed_roles\": [\n      \"*\"\n    ],\n    \"default_directory_policy\": \"sign-verbatim\",\n    \"dns_resolver\": \"\",\n    \"eab_policy\": \"not-required\",\n    \"enabled\": true,\n    \"max_ttl\": 776000\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Elasticsearch Role Definition Creation Statement in JSON\nDESCRIPTION: Sample JSON for creating an Elasticsearch role definition in Vault. This creation statement defines indices and privileges that will be applied when generating new database credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/elasticdb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elasticsearch_role_definition\": {\n    \"indices\": [\n      {\n        \"names\": [\"*\"],\n        \"privileges\": [\"read\"]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample request to read static role using Curl\nDESCRIPTION: This curl command is used to issue a GET request to retrieve the definition of a specific static role defined in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/aws/static-roles/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Vault Secrets Command Usage Syntax\nDESCRIPTION: This text displays the basic usage syntax for the 'vault secrets' command, including the available subcommands: disable, enable, list, move, and tune. Each subcommand provides different functionality for managing secrets engines.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault secrets <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    disable    Disable a secrets engine\n    enable     Enable a secrets engine\n    list       List enabled secrets engines\n    move       Move a secrets engine to a new path\n    tune       Tune a secrets engine configuration\n```\n\n----------------------------------------\n\nTITLE: Check-Out Request Payload\nDESCRIPTION: JSON payload for service account check-out request specifying TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ttl\": \"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Google Service Account JSON Configuration\nDESCRIPTION: Example of the Google service account key JSON structure required for GCS authentication\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"service_account\",\n  \"project_id\": \"project-id\",\n  \"private_key_id\": \"key-id\",\n  \"private_key\": \"-----BEGIN RSA PRIVATE KEY-----\\nMIIEpQ ... /WZs=\\n-----END RSA PRIVATE KEY-----\\n\",\n  \"client_email\": \"service-account-email\",\n  \"client_id\": \"client-id\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://accounts.google.com/o/oauth2/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/service-account-email\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Vault Version History via HTTP API\nDESCRIPTION: Example of making a LIST request to the /sys/version-history endpoint to retrieve version history information. Requires authentication via X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/version-history.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    -X LIST --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/version-history\n```\n\n----------------------------------------\n\nTITLE: Release Note - Azure Seal Client Secret Bug\nDESCRIPTION: This release note highlights a bug in the core/seal component related to Azure seals, which incorrectly required a client_secret. This requirement prevented the use of managed service identities and user-assigned identities for authentication. The fix removes this unnecessary requirement, allowing these identity types to be used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29499.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\ncore/seal: Azure seals required client_secret, preventing use of managed service identities and user assigned identities.\n`\n```\n\n----------------------------------------\n\nTITLE: Create Hashicorp Source Directory (Powershell)\nDESCRIPTION: Creates the necessary directory structure under the GOPATH for cloning the Vault repository. `New-Item` creates the directory and `Set-Location` changes the current location.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n\"New-Item -ItemType Directory -Force -Path \\\"${env:GOPATH}/src/hashicorp\\\" | Set-Location\"\n```\n\n----------------------------------------\n\nTITLE: Feature Release Note: Azure Key Vault Key Management\nDESCRIPTION: This release note indicates the general availability of the feature for distributing and managing keys in Azure Key Vault. This signifies that the feature has moved out of beta and is now considered stable for production use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1739.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/keymgmt (enterprise): Adds general availability for distributing and managing keys in Azure Key Vault.\n```\n\n----------------------------------------\n\nTITLE: Creating a Secret in Vault KVv2 Engine\nDESCRIPTION: This command creates a new secret in the KVv2 secrets engine at the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/azurekv.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -mount='my-kv' my-secret foo='bar'\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Signing - JSON\nDESCRIPTION: This JSON object is a sample payload for signing a digest using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_version\": \"1\",\n  \"digest\": \"LoM6lxd8YS+hUynZwrlCG20ViUUqqbNNNmh7HCtOkSc=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating SSH Certificate and Key Request Payload in Vault\nDESCRIPTION: JSON payload for requesting Vault to generate new SSH credentials. This example specifies an RSA key type with 2048 bits. The API will generate both a private key and a certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_type\": \"rsa\",\n  \"key_bits\":  2048\n}\n```\n\n----------------------------------------\n\nTITLE: Setting LDAP Configuration with AD Schema - Bash\nDESCRIPTION: This command sets the LDAP configuration to use the Active Directory schema. Replace $USERNAME and $PASSWORD with actual values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write ldap/config \\\n    binddn=$USERNAME \\\n    bindpass=$PASSWORD \\\n    url=ldaps://138.91.247.105 \\\n    schema=ad\n```\n\n----------------------------------------\n\nTITLE: Reading Sync Destination Associations in Vault (Shell)\nDESCRIPTION: cURL command to retrieve all existing associations for a given destination using the GET method. Requires authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm/my-store-1/associations\n```\n\n----------------------------------------\n\nTITLE: Creating a Vault Docker Image with curl\nDESCRIPTION: The Dockerfile snippet demonstrates how to use the HashiCorp Vault image as a base to create a new image with `curl` installed using the `apk add` command. This is necessary because `curl` is not included in the official Vault Docker images.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.18.x.mdx#2025-04-14_snippet_1\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM hashicorp/vault-enterprise\nRUN apk add curl\n```\n\n----------------------------------------\n\nTITLE: Setting Annotations as YAML Map\nDESCRIPTION: This YAML configuration shows how to set annotations for Vault ingress as a YAML map, specifically for Azure load balancer settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  ingress:\n    annotations:\n      service.beta.kubernetes.io/azure-load-balancer-internal: true\n      service.beta.kubernetes.io/azure-load-balancer-internal-subnet: apps-subnet\n```\n\n----------------------------------------\n\nTITLE: Renewing Vault Token\nDESCRIPTION: Extends the TTL of a token to prevent expiration. Only possible for tokens with an associated lease.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"ClientToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit Device Prefix in Vault\nDESCRIPTION: Demonstrates how to set the prefix option for a Vault audit device. This configuration prepends the specified string to each log entry written to the audit device, which can be useful for filtering or identifying specific types of log entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/prefix.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nprefix=\"KV Request :: \"\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Role for Redis\nDESCRIPTION: Configuration of a dynamic role that specifies Redis permissions and TTL settings for generated credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redis.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-dynamic-role \\\n    db_name=\"my-redis-database\" \\\n    creation_statements='[\"+@admin\"]' \\\n    default_ttl=\"5m\" \\\n    max_ttl=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Discovering Kubernetes Service Account Issuer\nDESCRIPTION: This shell command retrieves the service account issuer from a Kubernetes cluster. It's useful for configuring the 'issuer' parameter in Vault's Kubernetes auth method for clusters version 1.21+.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/kubernetes.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ echo '{\"apiVersion\": \"authentication.k8s.io/v1\", \"kind\": \"TokenRequest\"}' \\\n  | kubectl create -f- --raw /api/v1/namespaces/default/serviceaccounts/default/token \\\n  | jq -r '.status.token' \\\n  | cut -d . -f2 \\\n  | base64 -d\n```\n\n----------------------------------------\n\nTITLE: Sample SSH OTP Verification Response in JSON\nDESCRIPTION: Example JSON response when verifying an SSH One-Time Password. Upon successful verification, the response includes the IP address and username associated with the OTP.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"ip\": \"127.0.0.1\",\n    \"username\": \"rajanadar\"\n  },\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Group by ID - Vault Identity API (JSON Response)\nDESCRIPTION: This JSON response shows the data returned after successfully updating a group in Vault using its ID. It contains the ID and the updated name of the group.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"id\": \"363926d8-dd8b-c9f0-21f8-7b248be80ce1\",\n    \"name\": \"testgroupname\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing GCP Roles with cURL\nDESCRIPTION: This shell-session snippet uses cURL to list all registered GCP roles in Vault via an HTTP LIST request. An active Vault token (`X-Vault-Token`) is necessary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/gcp.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/gcp/roles\n```\n\n----------------------------------------\n\nTITLE: Listing AliCloud Roles - HTTP Request\nDESCRIPTION: HTTP LIST request to enumerate all roles registered with the AliCloud auth method. Requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/alicloud/roles\n```\n\n----------------------------------------\n\nTITLE: Deleting OIDC Assignment by Name\nDESCRIPTION: This API endpoint deletes a specified OIDC assignment by name. The request uses a DELETE HTTP method and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_27\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/oidc/assignment/test-assignment\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Secret in Cubbyhole (JSON)\nDESCRIPTION: This JSON payload demonstrates the structure for creating or updating a secret in the Cubbyhole. It includes key-value pairs to be stored at the specified location.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cubbyhole.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": \"bar\",\n  \"zip\": \"zap\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Policy via API - Shell Session\nDESCRIPTION: This snippet describes how to escape a policy file and POST it to the Vault to create a new policy. It utilizes 'jq' for processing the policy file into JSON format before sending the request. Requires proper Vault token and API setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/acl-policy-templates.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ jq -Rs '{ \"policy\": . | gsub(\"[\\r\\n\\t]\"; \"\") }' <path_to_policy_file> |\n  curl                                        \\\n    --request POST                            \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n    \"$(</dev/stdin)\"                          \\\n    ${VAULT_ADDR}/v1/${VAULT_NAMESPACE}/sys/policy/<policy_name>\n```\n\n----------------------------------------\n\nTITLE: Applying CA Configuration and Verifying Status\nDESCRIPTION: Commands to apply the CA configuration and verify the status of the created resources in Kubernetes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -n vault -f ca-issuer.yaml\nissuer.cert-manager.io/selfsigned created\ncertificate.cert-manager.io/injector-selfsigned-ca created\nissuer.cert-manager.io/injector-ca-issuer created\n\n$ kubectl -n vault get issuers -o wide\nNAME                 READY   STATUS                AGE\ninjector-ca-issuer   True    Signing CA verified   7s\nselfsigned           True                          7s\n\n$ kubectl -n vault get certificates injector-selfsigned-ca -o wide\nNAME                     READY   SECRET               ISSUER       STATUS                                          AGE\ninjector-selfsigned-ca   True    injector-ca-secret   selfsigned   Certificate is up to date and has not expired   32s\n```\n\n----------------------------------------\n\nTITLE: Token Period Configuration in Vault\nDESCRIPTION: Setting for defining the maximum allowed period value for periodic tokens requested from this role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/tokenstorefields.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\ntoken_period = 0\n```\n\n----------------------------------------\n\nTITLE: Configuring gRPC Connect Timeout in Vault\nDESCRIPTION: Enables overriding the gRPC connect timeout using an environment variable. This is intended as a last-resort option for addressing replication issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v1.10-v1.15.md#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nVAULT_GRPC_MIN_CONNECT_TIMEOUT: <timeout_value>\n```\n\n----------------------------------------\n\nTITLE: Reading SSH Public Key from Vault (Unauthenticated)\nDESCRIPTION: Example of retrieving the configured/generated public key from the SSH secrets engine. This is an unauthenticated endpoint that returns the raw public key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl http://127.0.0.1:8200/v1/ssh/public_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Kerberos Auth Method with POST Request\nDESCRIPTION: Example of sending a POST request to configure the Kerberos auth method with keytab data and service account information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/kerberos/config\n```\n\n----------------------------------------\n\nTITLE: Create Snapshot Configuration Payload\nDESCRIPTION: Sample JSON payload for creating a local storage snapshot configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"interval\": \"24h\",\n  \"retain\": 7,\n  \"path_prefix\": \"/opt/vault/snapshots/\",\n  \"storage_type\": \"local\",\n  \"local_max_space\": 10000000\n}\n```\n\n----------------------------------------\n\nTITLE: Adding exit_after_auth to Vault Agent\nDESCRIPTION: The Vault Agent now supports an 'exit_after_auth' option to allow it to exit after a single authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nagent: Add `exit_after_auth` to be able to use the Agent for a single\nauthentication [[GH-5013](https://github.com/hashicorp/vault/pull/5013)]\n```\n\n----------------------------------------\n\nTITLE: Update DR Secondary Primary Sample Requests\nDESCRIPTION: cURL requests to update the primary cluster assignment of a DR secondary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/update-primary\n```\n\n----------------------------------------\n\nTITLE: Deleting GitHub App Configuration\nDESCRIPTION: DELETE request to remove a GitHub app configuration from Vault. Cannot be performed if the app has active authentication destination references.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_31\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/sync/github-apps/my-custom-app\n```\n\n----------------------------------------\n\nTITLE: Sending Delete Token Request Using cURL (Shell Session)\nDESCRIPTION: This cURL command illustrates how to delete a token from storage in HashiCorp Vault using the DELETE method with the token identifier.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_69\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/transform/tokens/example-role\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS for Prometheus ServiceMonitor\nDESCRIPTION: Example of TLS configuration for Prometheus metrics scraping using secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_54\n\nLANGUAGE: yaml\nCODE:\n```\ntlsConfig:\n  ca:\n    secret:\n      name: vault-metrics-client\n      key: ca.crt\n```\n\n----------------------------------------\n\nTITLE: Verifying Vault Status after Rollback\nDESCRIPTION: This command checks the status of Vault after rolling back to Consul storage. It confirms that the storage type has reverted to Consul and displays other relevant information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl exec -it vault-0 -- vault status\n```\n\n----------------------------------------\n\nTITLE: Applying Vault License via API (Pre-1.8)\nDESCRIPTION: This bash command uses curl to apply the Vault Enterprise license through the Vault API for versions prior to 1.8. It sends a POST request with the license payload to the sys/license endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --header \"X-Vault-Token: VAULT_LOGIN_TOKEN_HERE\" \\\n  --request POST \\\n  --data @payload.json \\\n  http://127.0.0.1:8200/v1/sys/license\n```\n\n----------------------------------------\n\nTITLE: Creating an FPE Transformation with curl Request (Type-Specific)\nDESCRIPTION: Example curl command for creating or updating an FPE transformation using the type-specific endpoint. Uses a JSON payload to specify transformation details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/transformations/fpe/example-transformation\n```\n\n----------------------------------------\n\nTITLE: Implementing Copyable KV v2 Paths in UI\nDESCRIPTION: Enables users to easily copy KV v2 secret paths for CLI or API usage, improving user experience and workflow efficiency\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22551.txt#2025-04-14_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Comparing Machine Sizes for Vault with Consul Backend\nDESCRIPTION: This markdown table compares small and large machine sizes for Vault using Consul as its storage backend, including CPU, memory, disk, and typical cloud instance types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migration-checklist.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Size  | CPU      | Memory       | Disk  | Typical Cloud Instance Types              |\n| ----- | -------- | ------------ | ----- | ----------------------------------------- |\n| Small | 2 core   | 4-8 GB RAM   | 25 GB | **AWS:** m5.large                         |\n|       |          |              |       | **Azure:** Standard_D2_v3                 |\n|       |          |              |       | **GCE:** n1-standard-2, n1-standard-4     |\n| Large | 4-8 core | 16-32 GB RAM | 50 GB | **AWS:** m5.xlarge, m5.2xlarge            |\n|       |          |              |       | **Azure:** Standard_D4_v3, Standard_D8_v3 |\n|       |          |              |       | **GCE:** n1-standard-8, n1-standard-16    |\n```\n\n----------------------------------------\n\nTITLE: Improving PostgreSQL Database UI Parameters Release Note\nDESCRIPTION: Release note entry indicating enhancement to the Vault UI for editing PostgreSQL database connection parameters through the web browser interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29200.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:improvement\nui: Adds params to postgresql database to improve editing a connection in the web browser.\n```\n\n----------------------------------------\n\nTITLE: Deleting Group by Name - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to delete a group in Vault's Identity store using its name.  It sends a DELETE request to the `/identity/group/name/:name` endpoint, replacing `:name` with the group name to be deleted and includes a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/group/name/testgroupname\n```\n\n----------------------------------------\n\nTITLE: Token-Based Update Primary JSON Payload in Vault Replication API\nDESCRIPTION: JSON payload for updating the primary server in a Vault performance replication secondary setup using a token. This payload is used when you want to provide a secondary activation token obtained from the primary Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Unsealing Primary Vault\nDESCRIPTION: These commands initialize and unseal the first pod of the primary Vault cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-dr-with-raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-primary-0 -- vault operator init\nkubectl exec -ti vault-primary-0 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Namespace Attribution Breakdown in JSON\nDESCRIPTION: This snippet demonstrates the structure of namespace attributions, including mount-level breakdowns within each namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"by_namespace\":[\n      {\n         \"namespace_id\":\"root\",\n         \"namespace_path\":\"\",\n         \"counts\":{},\n         \"mounts\":[\n            {\n               \"path\":\"auth/up1/\",\n               \"counts\":{}\n            },\n            {\n               \"path\":\"auth/up2/\",\n               \"counts\":{}\n            }\n         ]\n      }\n   ]\n}\n```\n\n----------------------------------------\n\nTITLE: Sample response for revoking a certificate\nDESCRIPTION: This JSON response shows the result of a successful revoke request, providing the time at which the revocation occurred.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"revocation_time\": 1433269787\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying ConfigMap to Kubernetes\nDESCRIPTION: This command applies the previously created ConfigMap to the Kubernetes cluster, making it available for use in the migration process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl create -f vault-storage-migration-configmap.yml\n```\n\n----------------------------------------\n\nTITLE: Viewing Vault Reporting Debug Logs for Failed Reporting\nDESCRIPTION: Example of Vault server logs showing a failed attempt to send an automated license utilization report, indicated by a 403 status code. This typically occurs when network egress is not properly configured.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-14_snippet_1\n\nLANGUAGE: log\nCODE:\n```\n[DEBUG] core.reporting: beginning snapshot export\n[DEBUG] core.reporting: creating payload\n[DEBUG] core.reporting: marshalling payload to json\n[DEBUG] core.reporting: generating authentication headers\n[DEBUG] core.reporting: creating request\n[DEBUG] core.reporting: sending request\n[DEBUG] core.reporting: performing request: method=POST url=https://reporting.hashicorp.services\n[DEBUG] core.reporting: error status code received: statusCode=403\n```\n\n----------------------------------------\n\nTITLE: OIDC Provider: Sample Response\nDESCRIPTION: This is a sample JSON response from reading an OIDC provider.  It includes the allowed client IDs, issuer, and supported scopes. The `issuer` field may be empty if not explicitly set, defaulting to a Vault-generated URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n      \"allowed_client_ids\":[\"*\"],\n      \"issuer\":\"\",\n      \"scopes_supported\":[\"test-scope\"]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Local Agent Configuration\nDESCRIPTION: Minimal configuration for communicating with a local Consul agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"consul\" {}\n```\n\n----------------------------------------\n\nTITLE: Configuring Wait Time Based on Testing Environment in auth-jwt Component\nDESCRIPTION: Sets a wait time constant that is 0 when in testing mode and 500ms in normal operation. Also defines an error message for when a provider window is closed prematurely during authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/* eslint-disable ember/no-ember-testing-in-module-scope */\nconst WAIT_TIME = Ember.testing ? 0 : 500;\nconst ERROR_WINDOW_CLOSED =\n  'The provider window was closed before authentication was complete.  Please click Sign In to try again.';\n```\n\n----------------------------------------\n\nTITLE: Wrapping Request Payload Format in JSON\nDESCRIPTION: Example JSON payload structure for the wrapping request showing key-value pairs to be wrapped.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-wrap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": \"bar\",\n  \"zip\": \"zap\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rotate Root Password cURL Request\nDESCRIPTION: Sample cURL command to initiate root password rotation in LDAP secrets engine\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/ldap/rotate-root\n```\n\n----------------------------------------\n\nTITLE: Updating Cassandra Client in Vault (Markdown)\nDESCRIPTION: This release note indicates a bug fix for the Cassandra integration in HashiCorp Vault. The gocql Cassandra client has been updated to resolve an error where no hosts were available in the connection pool.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14973.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncassandra: Update gocql Cassandra client to fix \"no hosts available in the pool\" error\n```\n```\n\n----------------------------------------\n\nTITLE: Sign Revocation List Response\nDESCRIPTION: JSON response containing the signed PEM-encoded CRL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_117\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"crl\": \"<PEM encoded crl>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cancelling Tidy Operation with Vault API\nDESCRIPTION: This is a sample request to the `/pki/tidy-cancel` endpoint to cancel a running tidy operation. It uses curl to send a POST request with the Vault token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_126\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/pki/tidy-cancel\n```\n\n----------------------------------------\n\nTITLE: Running Vault tests using Make\nDESCRIPTION: This snippet shows how to run tests for Vault, including specifying tests for a particular package.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n$ make test\n...\n$ make test TEST=./vault\n...\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Vault via Helm\nDESCRIPTION: This command uninstalls the Vault deployment using Helm. It's necessary to replace the entire StatefulSet deployment due to certain attributes that cannot be modified after initial deployment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ helm uninstall vault\n```\n\n----------------------------------------\n\nTITLE: Installing static curl binary in Docker as non-root\nDESCRIPTION: These shell commands demonstrate how to install a static binary of `curl` into the `vault` user's home directory inside a running Docker container when running as non-root. This approach avoids requiring root privileges or privilege escalation. It depends on the `docker` command-line tool and `wget`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.15.x.mdx#2025-04-14_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n\"docker exec <CONTAINER-ID> wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of Vault Client Usage Metrics Query\nDESCRIPTION: This snippet shows the example output of the Vault client usage metrics query. It displays client counts across different namespaces, including entity clients, non-entity clients, secret syncs, ACME clients, and active clients.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/client-count/usage-metrics.mdx#2025-04-14_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nPeriod start: 2024-06-01T00:00:00Z\nPeriod end: 2024-06-30T23:59:59Z\n\nNamespace path                                        Entity Clients   Non-Entity clients   Secret syncs   ACME clients   Active clients\n--------------                                        --------------   ------------------   ------------   ------------   --------------\n[root]                                                10               16                   0              0              26\neducation/                                            7                1                    0              0              8\neducation/certification/                              2                4                    0              0              6\neducation/training/                                   37               30                   0              0              67\nfinance/                                              3                6                    0              0              9\nmarketing/                                            2                2                    0              0              4\ntest-ns-1-with-namespace-length-over-18-characters/   6                9                    0              0              15\ntest-ns-1/                                            9                12                   0              0              21\ntest-ns-2-with-namespace-length-over-18-characters/   5                5                    0              0              10\ntest-ns-2/                                            9                7                    0              0              16\n\nTotal                                                 90               92                   0              0              182\n```\n\n----------------------------------------\n\nTITLE: Raft Cluster State Response - Enterprise Edition\nDESCRIPTION: Extended JSON response for Enterprise edition showing additional information about redundancy zones, upgrade status and optimistic failure tolerance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautopilot.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"failure_tolerance\": 0,\n  \"healthy\": true,\n  \"leader\": \"vault_1\",\n  \"optimistic_failure_tolerance\": 3,\n  \"redundancy_zones\": {\n    \"a\": {\n      \"servers\": [\n        \"vault_1\",\n        \"vault_2\",\n        \"vault_5\"\n      ],\n      \"voters\": [\n        \"vault_1\"\n      ],\n      \"failure_tolerance\": 2\n    },\n    \"b\": {\n      \"servers\": [\n        \"vault_3\",\n        \"vault_4\"\n      ],\n      \"voters\": [\n        \"vault_3\"\n      ],\n      \"failure_tolerance\": 1\n    }\n  },\n  \"upgrade_info\": {\n    \"other_version_non_voters\": [\n      \"vault_2\",\n      \"vault_4\"\n    ],\n    \"other_version_voters\": [\n      \"vault_1\",\n      \"vault_3\"\n    ],\n    \"redundancy_zones\": {\n      \"a\": {\n        \"target_version_non_voters\": [\n          \"vault_5\"\n        ],\n        \"other_version_voters\": [\n          \"vault_1\"\n        ],\n        \"other_version_non_voters\": [\n          \"vault_2\"\n        ]\n      },\n      \"b\": {\n        \"other_version_voters\": [\n          \"vault_3\"\n        ],\n        \"other_version_non_voters\": [\n          \"vault_4\"\n        ]\n      }\n    },\n    \"status\": \"await-new-voters\",\n    \"target_version\": \"1.17.5\",\n    \"target_version_non_voters\": [\n      \"vault_5\"\n    ]\n  },\n  \"voters\": [\n    \"vault_1\",\n    \"vault_3\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Check-In Request Payload\nDESCRIPTION: JSON payload specifying service account names to be checked in.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"service_account_names\": [\"fizz@example.com\"]\n}\n```\n\n----------------------------------------\n\nTITLE: PKI Secrets Tidy Metrics Includes\nDESCRIPTION: Includes various telemetry metrics related to PKI secrets engine tidy operations, tracking certificate store and revoked certificate processing\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/secrets.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/secrets/pki/tidy/cert_store_current_entry.mdx'\n@include 'telemetry-metrics/secrets/pki/tidy/cert_store_deleted_count.mdx'\n@include 'telemetry-metrics/secrets/pki/tidy/cert_store_total_entries_remaining.mdx'\n```\n\n----------------------------------------\n\nTITLE: Listing Groups by ID - Vault Identity API (JSON Response)\nDESCRIPTION: This JSON response presents the list of group IDs returned by Vault's Identity store.  The response includes a \"keys\" array containing the identifiers of available groups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"052567cf-1580-6f20-50c8-d38bc46dae6e\",\n      \"26da8035-6691-b89e-67ac-ebf9ea7f9893\",\n      \"363926d8-dd8b-c9f0-21f8-7b248be80ce1\",\n      \"5c4a5720-7408-c113-1dcc-9ede725d0ac8\",\n      \"d55e0f34-5c16-38ae-87af-324c9b656c43\",\n      \"e4e56e04-0dec-9b68-9b20-a450975d898e\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP Password Policy\nDESCRIPTION: LDAP configuration for implementing a password policy (ppolicy) to enforce password hashing on the LDAP server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_18\n\nLANGUAGE: ldif\nCODE:\n```\ndn: cn=module{0},cn=config\nchangetype: modify\nadd: olcModuleLoad\nolcModuleLoad: ppolicy\n\ndn: olcOverlay={2}ppolicy,olcDatabase={1}mdb,cn=config\nchangetype: add\nobjectClass: olcPPolicyConfig\nobjectClass: olcOverlayConfig\nolcOverlay: {2}ppolicy\nolcPPolicyDefault: cn=default,ou=pwpolicies,dc=hashicorp,dc=com\nolcPPolicyForwardUpdates: FALSE\nolcPPolicyHashCleartext: TRUE\nolcPPolicyUseLockout: TRUE\n```\n\n----------------------------------------\n\nTITLE: Deleting a Template with cURL in Vault Transform API\nDESCRIPTION: Makes a DELETE request to remove a specific template by name from the Vault Transform Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_34\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/transform/template/example-template\n```\n\n----------------------------------------\n\nTITLE: Configuring Entropy Augmentation with PKCS11 HSM Seal in Vault (HCL)\nDESCRIPTION: This snippet demonstrates how to configure entropy augmentation using a PKCS11 HSM seal in Vault's configuration file. It includes the seal configuration and the entropy stanza.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/entropy-augmentation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"pkcs11\" {\n    ...\n}\n\nentropy \"seal\" {\n    mode = \"augmentation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listing and Installing HashiCorp Vault Helm Chart\nDESCRIPTION: Shows how to list available Vault Helm chart versions and install version 0.30.0. The first command searches the Helm repository for available Vault releases, displaying version information. The second command installs Vault version 0.30.0 using Helm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/helm/install.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# List the available releases\n$ helm search repo hashicorp/vault -l\nNAME           \tCHART VERSION\tAPP VERSION\tDESCRIPTION\nhashicorp/vault 0.30.0       \t1.19.0     \tOfficial HashiCorp Vault Chart\nhashicorp/vault\t0.29.1       \t1.18.1     \tOfficial HashiCorp Vault Chart\nhashicorp/vault\t0.29.0       \t1.18.1     \tOfficial HashiCorp Vault Chart\nhashicorp/vault\t0.28.1       \t1.17.2     \tOfficial HashiCorp Vault Chart\nhashicorp/vault\t0.28.0       \t1.16.1     \tOfficial HashiCorp Vault Chart\nhashicorp/vault\t0.27.0       \t1.15.2     \tOfficial HashiCorp Vault Chart\nhashicorp/vault\t0.26.1       \t1.15.1     \tOfficial HashiCorp Vault Chart\nhashicorp/vault\t0.26.0       \t1.15.1     \tOfficial HashiCorp Vault Chart\n...\n\n# Install version 0.30.0\n$ helm install vault hashicorp/vault --version 0.30.0\n```\n\n----------------------------------------\n\nTITLE: Generating TOTP MFA secret response - JSON\nDESCRIPTION: This JSON structure is a sample response that includes the barcode image data and the 'otpauth' URL for the generated TOTP secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"barcode\": \"iVBORw0KGgoAAAANSUhEUgAAAMgAAADIEAAAAADYoy0BAAAGc0lEQVR4nOyd244bOQxEZxbz/7+cRQI4sLWiyCLlTU1wzkMAu1uXTIGSxUv3148fH2DEP396AvDK189/Pj97jR/W9Wi/fs7uz/pZya5H92dk40fzjeY1+XtiIWYgiBkIYsbX84dba7O6B0z3hmgPqO5Z6/WsH3VvynjuDwsxA0HMQBAzvnZfZueI6Pvs93r2+z6ax7qWZ+2zPSP7PutfPW8of08sxAwEMQNBzNjuISqRLyc7X6jnkex8UPVBqXtJxk2PORZiBoKYgSBmXNlDsriIeq6J+umeG1RfVjav7L4JWIgZCGIGgpix3UO6a6MaU4/OD9Fnda2P2qnxl2ge1fbKOFiIGQhiBoKY8bKHdH052V5Q3VPUz9n42XhR++zzStWXVgELMQNBzEAQM37tIbd9MtX4Qvc8EI13q32210Sfb8wHCzEDQcxAEDM+f6532e/86nmiPYk31X2sZP1Pz0PVGP+pPRZiBoKYgSBmbPeQ/9xUvP6geg7p9leNj3RrH7v1K+reRm7vNwBBzEAQM471IVmt3oN31V9E93Xr3KNx1BrD7t+jMl8sxAwEMQNBzDjm9lZj5d04gZoLHPX3rjjFu3J5T/8/LMQMBDEDQcyQ6kPUHNsH1TU+Gi/qr+rLmo6zfq6eTzr9YiFmIIgZCGLG5/M69y5fzfr9Ol613bQ/NaYe9bui5gKczmNYiBkIYgaCmHF85mK01t2KO2Q1h9l43dzgbhxG7b+zZ2EhZiCIGQhiRuvZ77dygNVY+3q9es5Qv1+vT2sIlb0OCzEDQcxAEDMkX1bXN7S2z8brxl2q40b3rXR9bxn4sr4RCGIGgpjxUh8S0a2feFdNYrd/Ndad9Xsrpv/cHgsxA0HMQBAzPk/reXdN7fqA3ln/PZnndE9SxsFCzEAQMxDEjJd4iJqrqtYiPlBr9qZE81znk7V/F8TUjUEQMxDEjO1ze9U1PqtFzO5X87VW1H6i+XXqyneQl/UXgSBmIIgZpdzebgxdPWdMfVnr/dHn23XsWb18VpP4DBZiBoKYgSBmbPOyukzr2Lvnlu781FzkaF7deezAQsxAEDMQxIzgNzTc1IlToKFmIIgZCGLGlT3kwS1fUbcGsVq3HvUXnY/U+ ExEZW/DQsxAEDMQxIzS+0Mybq3REd1c3ur5qBs7z/a4zjNWsBAzEMQMBDHjZQ+Z+oAeqGv42o9aq5j1m5HN51ZdfWX+WIgZCGIGgpixfX8I/DmwEDP+DQAA//9kwGH4xZewMgAAAABJRU5ErkJggg==\",\n    \"url\": \"otpauth://totp/vault:4746fb81-028c-cd4e-026b-7dd18fe4c2f4?algorithm=SHA1&digits=6&issuer=vault&period=30&secret=XVE7TOZWJVEWQOATOD7U53IEAJG72Z2I\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Vault Authentication\nDESCRIPTION: This JSON structure represents the response from Vault after a successful authentication. It includes details such as whether the token is renewable, the lease duration, applicable policies, an accessor ID, and the client token issued for further API interactions. These details are crucial for clients to manage session and authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"renewable\": true,\n    \"lease_duration\": 1800000,\n    \"policies\": [\"default\", \"dev\"],\n    \"accessor\": \"20b89871-e6f2-1160-fb29-31c2f6d4645e\",\n    \"client_token\": \"c9368254-3f21-aded-8a6f-7c818e81b17a\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring autopilot_redundancy_zone in Vault\nDESCRIPTION: This snippet shows how to configure the `autopilot_redundancy_zone` in Vault's `storage` configuration. The value assigned to this key is a string representing the availability zone for the particular node.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/redundancy-zones.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"storage\" configuration stanza: `autopilot_redundancy_zone`\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Tenancy - JSON Request\nDESCRIPTION: JSON payload for configuring the home tenancy ID in the OCI auth method. This defines which tenancy's users and instances can authenticate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"home_tenancy_id\": \"ocid1.tenancy.oc1..aaaaaaaah7zkvaffv26pzyauoe2zbnionqvhvsexamplee557wakiofi4ysgqq\"\n}\n```\n\n----------------------------------------\n\nTITLE: Library Sets List - JSON Response\nDESCRIPTION: Sample response showing the list of configured LDAP service account library set names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n[\"accounting-team\", \"dev/\"]\n```\n\n----------------------------------------\n\nTITLE: Reading ACME Configuration in Vault\nDESCRIPTION: Reads the ACME configuration from the PKI secrets engine in Vault. This is used to verify that the configuration is correct and no warnings are present.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/troubleshooting-acme.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault read pki/config/acme\n```\n\n----------------------------------------\n\nTITLE: Reading well-known label information - HTTP API - shell\nDESCRIPTION: This snippet illustrates how to retrieve information for a specified well-known label using the GET method on the `/sys/well-known/:label` endpoint. The label is passed as a URL parameter in the request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/well-known.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/well-known/est/cacerts\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading Role\nDESCRIPTION: Provides a sample JSON response when querying a RabbitMQ role definition showing tags, vhosts, and vhost topics.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"tags\": \"\",\n    \"vhosts\": \"{\\\"/\\\": {\\\"configure\\\":\\\".*\\\", \\\"write\\\":\\\".*\\\", \\\"read\\\": \\\".*\\\"}}\",\n    \"vhost_topics\": \"{\\\"/\\\": {\\\"amq.topic\\\": {\\\"write\\\":\\\".*\\\", \\\"read\\\": \\\".*\\\"}}}\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Client in Vault\nDESCRIPTION: Shell command to configure the AWS client in Vault with default options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -force auth/aws/config/client\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Trim Key Versions\nDESCRIPTION: This JSON payload specifies the minimum available key version for trimming older key versions in the Vault Transit Engine. This action ensures that only the necessary key versions are retained.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min_available_version\": 2\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parameter Support to Vault Read Operations\nDESCRIPTION: The Vault CLI now supports passing parameters to 'vault read' operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\ncli: Add support for passing parameters to `vault read` operations [[GH-5093](https://github.com/hashicorp/vault/pull/5093)]\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Role via cURL\nDESCRIPTION: Details how to create or update a RabbitMQ role using cURL and JSON payload, with cURL headers and data required.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/rabbitmq/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: OIDC Scope: Read Request\nDESCRIPTION: This is a sample `curl` request to read an OIDC scope by name. It sends a GET request to the specified endpoint, including the Vault token. Replace `...` with your Vault token and `test-scope` with the name of the scope to retrieve.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/oidc/scope/test-scope\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Auth with AppRole for Vault Agent in HCL\nDESCRIPTION: This configuration block sets up auto-auth for Vault Agent using the AppRole method. It specifies the paths for role_id and secret_id files, and configures the behavior for secret_id file handling.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/static-secret-caching.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nauto_auth {\n  method {\n    type = \"approle\"\n    config = {\n      role_id_file_path = \"roleid\"\n      secret_id_file_path = \"secretid\"\n      remove_secret_id_file_after_reading = false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variable Templates with Process Supervisor Mode\nDESCRIPTION: Example showing how to set up environment variable templates using env_template blocks with Vault Agent's Process Supervisor Mode, including both inline content and source file approaches.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\n# Other Vault Agent configuration blocks\n# ...\n\ntemplate_config {\n  static_secret_render_interval = \"10m\"\n  exit_on_retry_failure = true\n  max_connections_per_host = 20\n}\n\nenv_template \"MY_ENV_VAR\" {\n  contents = \"{{ with secret \\\"secret/my-secret\\\" }}{{ .Data.data.foo }}{{ end }}\"\n}\n\nenv_template \"ENV_VAR_FROM_FILE\" {\n  source = \"/tmp/agent/template.ctmpl\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Vault Pod for Upgrade\nDESCRIPTION: Command to delete a Vault pod during the upgrade process. This is necessary because the StatefulSet uses the OnDelete update strategy, requiring manual pod deletion to apply updates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl delete pod <name of Vault pod>\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Context Timeout for Audit Logging in Vault\nDESCRIPTION: This snippet informs the behavior of audit logging in Vault, ensuring that any requests/responses are logged with a minimum context timeout of 5 seconds. If the existing context deadline exceeds this, it will be respected; otherwise, a new context will be initiated. This change enhances the reliability of logging by adhering to a set minimum duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26616.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\ncore/audit: Audit logging a Vault request/response will now use a minimum 5 second context timeout. \\nIf the existing context deadline occurs later than 5s in the future, it will be used, otherwise a \\nnew context, separate from the original will be used.\"\n```\n\n----------------------------------------\n\nTITLE: Set Automatic Tidy Configuration Request Example\nDESCRIPTION: This curl command demonstrates how to send a POST request to the `/pki/config/auto-tidy` endpoint to set the automatic tidy configuration. The command uses the `X-Vault-Token` header for authentication and includes a JSON payload specifying the desired configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_123\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/auto-tidy\n```\n\n----------------------------------------\n\nTITLE: Configuring CMPv2 in Vault PKI (cURL)\nDESCRIPTION: Sample cURL request for configuring Certificate Management Protocol v2 (CMPv2) in Vault's PKI secrets engine. It sends a POST request to the CMPv2 configuration endpoint with the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/cmp\n```\n\n----------------------------------------\n\nTITLE: Adding Support for 'add_before_duration' in SSH Secrets Engine\nDESCRIPTION: This release note indicates an improvement to the SSH secrets engine in HashiCorp Vault. It introduces support for the 'add_before_duration' feature, which likely allows for more flexible timing control in SSH certificate issuance or key rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15250.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nsecrets/ssh: Support for `add_before_duration` in SSH\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Audit Log Enhancement\nDESCRIPTION: This release note indicates that a new boolean field, `entity_created`, has been added to Vault's audit log. This field is set to true when a login operation leads to the creation of a new entity. This provides enhanced auditing capabilities for tracking entity creation events.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15487.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\naudit: added entity_created boolean to audit log, set when login operations create an entity\n```\n```\n\n----------------------------------------\n\nTITLE: Including Last Success Time Metric\nDESCRIPTION: This snippet includes the metric for the last successful automated snapshot time. It retrieves the relevant telemetry data necessary for monitoring success times of automated snapshots.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/autosnap.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/autosnapshots/last/success/time.mdx'\n```\n\n----------------------------------------\n\nTITLE: EST Configuration Response (JSON)\nDESCRIPTION: Sample response from the EST configuration endpoint. It includes the configured settings for EST, such as authenticators, default mount, path policies, and the last update timestamp.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"authenticators\": {\n      \"cert\": {\n        \"accessor\": \"auth_cert_0f1df449\",\n        \"cert_role\": \"cert1\"\n      },\n      \"userpass\": {\n        \"accessor\": \"auth_userpass_b2b08fac\"\n      }\n    },\n    \"default_mount\": true,\n    \"default_path_policy\": \"sign-verbatim\",\n    \"enabled\": true,\n    \"label_to_path_policy\": {\n      \"sign-all\": \"sign-verbatim\",\n      \"test-label\": \"role:est-clients\"\n    },\n    \"last_updated\": \"2024-02-02T10:49:20-05:00\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Accessor Destroy Request\nDESCRIPTION: This curl command demonstrates how to destroy a secret ID by its accessor using Vault's AppRole authentication method.  A valid Vault token is required.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/approle/role/application1/secret-id-accessor/destroy\n```\n\n----------------------------------------\n\nTITLE: Listing Available Vault Plugin Versions\nDESCRIPTION: This snippet uses `vault plugin list secret` to display a list of available plugin versions. This command is useful for identifying versions that can be downgraded to.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin list secret\nName                Version\n----\t                -------\nad                  v0.14.0+builtin\nalicloud            v0.13.0+builtin\naws                 v1.12.0+builtin.vault\nazure               v0.14.0+builtin\ncassandra           v1.12.0+builtin.vault\nconsul              v1.12.0+builtin.vault\n...\n```\n\n----------------------------------------\n\nTITLE: AliCloud Config POST Payload Example\nDESCRIPTION: JSON payload example for configuring AliCloud secrets engine with access_key and secret_key credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_key\": \"0wNEpMMlzy7szvai\",\n  \"secret_key\": \"PupkTg8jdmau1cXxYacgE736PJj4cA\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Random Bytes Generation\nDESCRIPTION: cURL command to generate random bytes using the Transit engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_44\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/random/164\n```\n\n----------------------------------------\n\nTITLE: Updating CLI Command Requirements for Vault Plugin Management\nDESCRIPTION: This snippet documents the change in argument requirements for the `vault plugin info` and `vault plugin deregister` commands, which now require exactly 2 positional arguments instead of allowing either 1 or 2. This change is aimed at improving the usability and consistency of the CLI commands.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24250.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\ncli: `vault plugin info` and `vault plugin deregister` now require 2 positional arguments instead of accepting either 1 or 2.\"\n```\n\n----------------------------------------\n\nTITLE: Generating cURL Command from Vault CLI\nDESCRIPTION: Shows how to use the -output-curl-string flag to generate an equivalent cURL command for a Vault CLI operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -output-curl-string  auth/userpass/users/bob password=\"long-password\"\n\ncurl -X PUT -H \"X-Vault-Request: true\" -H \"X-Vault-Token: $(vault print token)\" -d '{\"password\":\"long-password\"}' http://127.0.0.1:8200/v1/auth/userpass/users/bob\n```\n\n----------------------------------------\n\nTITLE: OIDC Scope: Delete Request\nDESCRIPTION: This is a sample `curl` request to delete an OIDC scope by name. It sends a DELETE request to the specified endpoint, including the Vault token. Replace `...` with your Vault token and `test-scope` with the name of the scope to delete.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/oidc/scope/test-scope\n```\n\n----------------------------------------\n\nTITLE: Batch Input Sample JSON Payload\nDESCRIPTION: This JSON payload describes a batch input for token operations, specifying a token and transformation. It can be utilized for batch decoding operations where the token is analyzed using the specified transformation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n[\n    {\n      \"token\": \"AHLdmFvTRknMBgrNSy6Ba7xJxG28KkZeHKqxGJ7e45G3V9UbcUr6gdv83ozwRRQwLfJgyHZvfa9rh7kU9xJXVdY\",\n      \"transformation\": \"ccn-tokenization\"\n    }\n  ]\n```\n\n----------------------------------------\n\nTITLE: Creating Required Schema for Google Cloud Spanner Vault Storage\nDESCRIPTION: SQL statements for creating the required tables in Google Cloud Spanner for Vault storage. Includes a 'Vault' table for storing key-value data and a 'VaultHA' table for high availability functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-spanner.mdx#2025-04-14_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Vault (\n  Key       STRING(MAX) NOT NULL,\n  Value     BYTES(MAX),\n) PRIMARY KEY (Key);\n\nCREATE TABLE VaultHA (\n  Key           STRING(MAX) NOT NULL,\n  Value         STRING(MAX),\n  Identity      STRING(36) NOT NULL,\n  Timestamp     TIMESTAMP NOT NULL,\n) PRIMARY KEY (Key);\n```\n\n----------------------------------------\n\nTITLE: Warning on Exceeding Mount's Max TTL - Plaintext\nDESCRIPTION: This plaintext warning illustrates the response from Vault when the specified token_max_ttl exceeds the backend mount's maximum TTL value. Vault will truncate the TTL value to adhere to the mount's constraints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nWARNING! The following warnings were returned from Vault:\n\n  * token_max_ttl is greater than the backend mount's maximum TTL value;\n  issued tokens' max TTL value will be truncated\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Set Issuers Configuration - Shell\nDESCRIPTION: This shell command illustrates how to make a POST request to set the default issuer in the Vault PKI using the specified payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/issuers\n```\n\n----------------------------------------\n\nTITLE: Sending Okta User Registration Request via cURL\nDESCRIPTION: Shell command to register a new user with the specified payload using POST request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/okta/users/fred\n```\n\n----------------------------------------\n\nTITLE: Configuring User Lockout in Vault Configuration File\nDESCRIPTION: This snippet refers to the configuration of user lockout in the Vault configuration file. It mentions the 'disable_lockout' parameter within the 'user_lockout' stanza, which can be used to disable lockout for all or specific supported auth methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/user-lockout.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nuser_lockout {\n  disable_lockout = <boolean>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Annotations for Vault Agent Injector Service\nDESCRIPTION: This YAML snippet demonstrates how to add annotations to the Vault Agent Injector Kubernetes service. It shows both YAML map and multi-line templated string formats.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n# or\nannotations: |\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom File Permissions for Vault Audit Logs\nDESCRIPTION: Example of configuring custom chmod-style octal permissions for a Vault audit log file. The mode parameter accepts a string with octal permissions, defaulting to \"0600\" if not specified. Setting mode to \"0000\" prevents Vault from modifying the file mode.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/file/mode.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmode=\"0755\"\n```\n\n----------------------------------------\n\nTITLE: Verifying FIPS Mode in Vault Server Logs\nDESCRIPTION: Example log output showing that FIPS mode is enabled in Vault Enterprise. The log entry confirms that FIPS 140-2 is enabled and shows the BoringCrypto version being used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/fips/fips1402.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n                    Fips: FIPS 140-2 Enabled, BoringCrypto version 7\n```\n\n----------------------------------------\n\nTITLE: Authenticating with AppRole - Shell Session\nDESCRIPTION: This snippet shows how to authenticate using an AppRole in Vault, emphasizing the impact of exceeding the effective max_ttl. Upon login, Vault warns if the TTL is capped and provides details about the obtained token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/approle/login role_id=<ROLE_ID> secret_id=<SECRET_ID>\n\nWARNING! The following warnings were returned from Vault:\n\n  * TTL of \"2880h\" exceeded the effective max_ttl of \"768h\"; TTL value is\n  capped accordingly\n\nKey                     Value\n---                     -----\ntoken                   hvs.CAESIJeVezY3UObHXTvzpI722q0MmaARB1692fT-MmdzcryvGh4KHGh2cy43czViYXVZS3FnSzltWmdVZ3Q0MmFTdkc\ntoken_accessor          wXTOvz5xxBi2vvUpTBhemUXr\ntoken_duration          768h\ntoken_renewable         true\ntoken_policies          [\"default\" \"read-only\"]\nidentity_policies       []\npolicies                [\"default\" \"read-only\"]\ntoken_meta_role_name    read-only\n```\n\n----------------------------------------\n\nTITLE: Setting TTL Values for a Userpass User with Vault CLI\nDESCRIPTION: This example demonstrates setting role-level TTL values for a user named 'alice' with default TTL of 8 hours and maximum TTL of 12 hours, while explicitly specifying the Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ VAULT_TOKEN=$VAULT_TOKEN vault write /auth/userpass/users/alice \\\n    token_ttl=\"8h\" token_max_ttl=\"12h\"\n```\n\n----------------------------------------\n\nTITLE: Applying and Verifying Injector Certificate\nDESCRIPTION: Commands to apply the injector certificate configuration and verify its creation in Kubernetes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls-cert-manager.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl -n vault apply -f injector-certificate.yaml\ncertificate.cert-manager.io/injector-certificate created\n\n$ kubectl -n vault get certificates injector-certificate -o wide\nNAME                   READY   SECRET         ISSUER               STATUS                                          AGE\ninjector-certificate   True    injector-tls   injector-ca-issuer   Certificate is up to date and has not expired   41s\n\n$ kubectl -n vault get secret injector-tls\nNAME           TYPE                DATA   AGE\ninjector-tls   kubernetes.io/tls   3      6m59s\n```\n\n----------------------------------------\n\nTITLE: List Snapshot Configurations Request\nDESCRIPTION: cURL command to list all snapshot configurations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot-auto/config\n```\n\n----------------------------------------\n\nTITLE: Listing AliCloud Roles - Response\nDESCRIPTION: JSON response showing all role names registered with the AliCloud auth method. The response contains an array of role names under the 'keys' property.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"dev-role\", \"prod-role\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Okta Users\nDESCRIPTION: JSON response showing the list of users configured in the Okta auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"fred\", \"jane\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading a Policy\nDESCRIPTION: JSON response from the read policy endpoint showing the policy name and rules. The rules field contains the policy document defining the permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policy.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-policy\",\n  \"rules\": \"path \\\"secret/*\\\"...\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Vault Utilization Data Payload in JSON\nDESCRIPTION: This code snippet demonstrates the structure of a Vault utilization data payload. It includes metadata about the product, license, and export details, as well as snapshot information containing client count metrics for both entity and non-entity tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"payload_version\": \"1\",\n  \"license_id\": \"97afe7b4-b9c8-bf19-bf35-b89b5cc0efea\",\n  \"product\": \"vault\",\n  \"product_version\": \"1.14.0-rc1+ent\",\n  \"export_timestamp\": \"2023-06-01T11:39:00.76643-04:00\",\n  \"snapshots\": [\n    {\n      \"snapshot_version\": 1,\n      \"snapshot_id\": \"0001J7HEWM1PEHPMF5YZT8EV65\",\n      \"process_id\": \"01H1VSQMNYAP77R566F1Y03GE6\",\n      \"timestamp\": \"2023-06-01T11:39:00.766099-04:00\",\n      \"schema_version\": \"1.0.0\",\n      \"service\": \"vault\",\n      \"metrics\": {\n        \"clientcount.current_month_estimate\": {\n          \"key\": \"clientcount.current_month_estimate\",\n          \"kind\": \"sum\",\n          \"mode\": \"write\",\n          \"labels\": {\n            \"type\": {\n              \"entity\": 20,\n              \"nonentity\": 11\n            }\n          }\n        },\n        \"clientcount.previous_month_complete\": {\n          \"key\": \"clientcount.previous_month_complete\",\n          \"kind\": \"sum\",\n          \"mode\": \"write\",\n          \"labels\": {\n            \"type\": {\n              \"entity\": 10,\n              \"nonentity\": 11\n            }\n          }\n        }\n      }\n    }\n  ],\n  \"metadata\": {\n    \"vault\": {\n      \"billing_start\": \"2023-03-01T00:00:00Z\",\n      \"cluster_id\": \"a8d95acc-ec0a-6087-d7f6-4f054ab2e7fd\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Context to AWS SDK Calls in S3 Storage\nDESCRIPTION: Improvement to the S3 storage backend that now passes context to AWS SDK calls. This enhancement likely provides better request lifecycle management, timeout handling, and cancellation support.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27927.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nstorage/s3: Pass context to AWS SDK calls\n```\n```\n\n----------------------------------------\n\nTITLE: Check-In Response\nDESCRIPTION: JSON response confirming successful check-in of service accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_31\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"db45c714-3f68-b748-95bc-8f7467637a52\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"check_ins\": [\"fizz@example.com\"]\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting SSH CA Configuration in Vault\nDESCRIPTION: Example of deleting the CA information for the SSH secrets engine using a DELETE request. This removes all CA configuration data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/ssh/config/ca\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for Patching KV Secret Metadata in Vault\nDESCRIPTION: A sample JSON payload for the PATCH metadata endpoint that shows how to set max_versions and custom_metadata for a secret. This payload would be used to update metadata properties of a secret in Vault's KV store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_versions\": 5,\n  \"custom_metadata\": {\n    \"bar\": \"123\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Read Store Sample Request\nDESCRIPTION: cURL command to read store information using GET request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_47\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transform/stores/example-store\n```\n\n----------------------------------------\n\nTITLE: Testing Disaster Recovery Replication with Docker Clusters in Go\nDESCRIPTION: This snippet demonstrates setting up and testing disaster recovery replication between two 3-node Vault clusters using Docker. It uses the NewReplicationSetDocker function and tests if replication becomes healthy within a specified timeout.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc TestStandardDRReplication_Docker(t *testing.T) {\n  opts := docker.DefaultOptions(t)\n  r, err := docker.NewReplicationSetDocker(t, opts)\n  if err != nil {\n    t.Fatal(err)\n  }\n  defer r.Cleanup()\n\n  ctx, cancel := context.WithTimeout(context.Background(), time.Minute)\n  defer cancel()\n  err = r.StandardDRReplication(ctx)\n  if err != nil {\n    t.Fatal(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Introducing Deprecated Builtin Mount Handling\nDESCRIPTION: Adds core functionality to handle and log deprecated builtin mounts. Introduces a configuration option to override default shutdown and error behavior for Pending Removal builtin plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17005.txt#2025-04-14_snippet_2\n\nLANGUAGE: release-note\nCODE:\n```\ncore: Handle and log deprecated builtin mounts. Introduces `VAULT_ALLOW_PENDING_REMOVAL_MOUNTS` to override shutdown and error when attempting to mount `Pending Removal` builtin plugins.\n```\n\n----------------------------------------\n\nTITLE: Read RGP Policy Request\nDESCRIPTION: Retrieves information about a specific RGP policy\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/policies/rgp/webapp\n```\n\n----------------------------------------\n\nTITLE: Counting Revoked Certificate Deletions in Vault PKI\nDESCRIPTION: A performance metric that tracks the number of revoked certificates removed during the tidying process in the PKI secrets engine. This helps administrators monitor certificate cleanup operations and maintain a clean certificate store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/secrets/pki/tidy/revoked_cert_deleted_count.mdx#2025-04-14_snippet_0\n\nLANGUAGE: metrics\nCODE:\n```\nsecrets.pki.tidy.revoked_cert_deleted_count\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Storage Types\nDESCRIPTION: Overview of snapshot storage configurations in Vault Enterprise, supporting local and cloud object storage options like AWS S3\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/automated-integrated-storage-snapshots.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nStorage type can either be `local` (meaning the snapshots will be stored in the same filesystem that the Vault servers see) or a cloud object storage service such as AWS S3.\n```\n\n----------------------------------------\n\nTITLE: Revoking Performance Secondary Token\nDESCRIPTION: This API call revokes a secondary's ability to connect to the primary cluster. The secondary will be immediately disconnected and cannot reconnect without a new activation token. Requires root token authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"us-east\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/revoke-secondary\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Authentication Plugin Version\nDESCRIPTION: Release note indicating an update to the GCP authentication plugin to version 0.20.1\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29736.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/gcp: Update plugin to v0.20.1\n```\n\n----------------------------------------\n\nTITLE: VaultPKISecretSpec Fields\nDESCRIPTION: Detailed specification for VaultPKISecret resources including fields for PKI configuration, certificate parameters, format settings and destination details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nvaultAuthRef: string\nnamespace: string\nmount: string\nrole: string\nrevoke: boolean\nclear: boolean\nexpiryOffset: string\nissuerRef: string\nrolloutRestartTargets: array\ndestination: object\ncommonName: string\naltNames: array\nipSans: array\nuriSans: array\notherSans: array\nuserIDs: array\nttl: string\nformat: string\nprivateKeyFormat: string\nnotAfter: string\nexcludeCNFromSans: boolean\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Server Image for Helm Upgrade\nDESCRIPTION: YAML configuration for specifying the Vault server image repository and tag during a Helm upgrade. This is used as part of the upgrade process to update Vault to a new version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  image:\n    repository: 'vault'\n    tag: '123.456'\n```\n\n----------------------------------------\n\nTITLE: Documenting Removal of Deprecated Fields in Vault Enterprise Activity Log\nDESCRIPTION: This release note documents the removal of two deprecated fields, 'distinct_entities' and 'non_entity_tokens', from the activity feature in Vault Enterprise. This change affects how activity data is structured and may impact existing integrations or reports that rely on these fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27830.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nactivity (enterprise): remove deprecated fields distinct_entities and non_entity_tokens\n```\n```\n\n----------------------------------------\n\nTITLE: Patching a Namespace - Vault CLI - Shell\nDESCRIPTION: Use this command to modify existing namespaces by adding or removing metadata keys. Successful execution depends on having appropriate access permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/namespace.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace patch -custom-metadata=bar=123 -remove-custom-metadata=foo ns1/\n```\n\n----------------------------------------\n\nTITLE: Creating a Lease Count Quota with JSON Payload in Vault\nDESCRIPTION: Sample JSON payload for creating a global lease count quota with a maximum of 1000 leases. This configures a quota that applies globally since the path parameter is empty.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/lease-count-quotas.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"path\": \"\",\n  \"max_leases\": 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Hash Operation\nDESCRIPTION: cURL command to hash data using the Transit engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_47\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/hash/sha2-512\n```\n\n----------------------------------------\n\nTITLE: Alphabet List Response in Vault Transform API\nDESCRIPTION: JSON response structure returned when listing alphabets, showing an array of alphabet names under the data.keys field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_40\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"example-alphabet\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying SecurityContextConstraint for Application in OpenShift\nDESCRIPTION: This command applies the SecurityContextConstraint YAML file created for the application using the Vault CSI provider in OpenShift.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/installation.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl apply -f application-scc.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Root Certificate with JSON Payload in Vault PKI\nDESCRIPTION: This snippet shows the JSON payload for generating a root certificate using Vault's PKI secret engine. It specifies the common name for the certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"common_name\": \"example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Login Enforcement Configuration Response\nDESCRIPTION: Example response payload showing login enforcement configuration details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/login-enforcement.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"auth_method_accessors\": [\n      \"auth_userpass_337fdb6a\"\n    ],\n    \"auth_method_types\": [],\n    \"id\": \"24167a6c-759a-c596-6d48-391c89c4befc\",\n    \"identity_entity_ids\": [],\n    \"identity_group_ids\": [],\n    \"mfa_method_ids\": [\n      \"c1372abf-bf64-1f26-c2a4-cbcfa135b775\"\n    ],\n    \"name\": \"foo\",\n    \"namespace_id\": \"root\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OCI Identity Policy for Cross-Tenant KMS Access\nDESCRIPTION: This snippet shows an example of an OCI Identity Policy that allows a dynamic group from one tenant to use KMS keys in another tenant. It defines the tenants and grants the necessary permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/ocikms.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ndefine tenancy tenantB as <tenantB-ocid>\n\nendorse dynamic-group <dynamic-group-name> to use keys in tenancy tenantB\n```\n\n----------------------------------------\n\nTITLE: Deleting Token Role in Vault (cURL)\nDESCRIPTION: Sample cURL request for deleting a token role in Vault. It sends a DELETE request to the specified endpoint with the role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/token/roles/admins\n```\n\n----------------------------------------\n\nTITLE: Listing Google Cloud KMS Keys in Vault\nDESCRIPTION: This snippet shows how to list available Google Cloud KMS keys in Vault using a LIST request. It includes the necessary policy, curl command, and the expected JSON response format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_27\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys\" {\n  capabilities = [\"list\"]\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/gcpkms/keys\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"my-key\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Endpoint Request using cURL\nDESCRIPTION: Example of making a POST request to the OIDC Token endpoint using basic authentication and form-encoded parameters to exchange an authorization code for tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\n$ BASIC_AUTH_CREDS=$(printf \"%s:%s\" \"$CLIENT_ID\" \"$CLIENT_SECRET\" | base64)\n$ curl \\\n    --request POST \\\n    --header \"Authorization: Basic $BASIC_AUTH_CREDS\" \\\n    -H 'Content-Type: application/x-www-form-urlencoded' \\\n    -d \"code=4RL50r78p8HsNJY0GVUNGfjLHnpkRf3N\" \\\n    -d \"grant_type=authorization_code\" \\\n    -d \"redirect_uri=http://127.0.0.1:8251/callback\" \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/token\n```\n\n----------------------------------------\n\nTITLE: Listing Okta MFA Methods in Vault\nDESCRIPTION: This snippet demonstrates how to list all Okta MFA methods visible in the current namespace or its parent namespaces with a LIST request to the '/identity/mfa/method/okta' endpoint. The response contains keys representing the UUIDs of available MFA methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/okta.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/okta\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"keys\": [\"1db034b5-81f1-4a2b-8c2b-0f51ed0bd9fc\"]}}\n```\n\n----------------------------------------\n\nTITLE: Login Response - JSON\nDESCRIPTION: Sample JSON response containing the authentication token and its properties.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"token\": \"62b8ssf9-529c-6b26-e0b8-045fcdb4\",\n    \"token_accessor\": \"afaff6d0-be3d-c8d2-b0d7-2676sss0d9b4\",\n    \"token_policies\": [\"dev\"],\n    \"token_duration\": 1800\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: KMIP Credential Generation Response in JSON\nDESCRIPTION: This JSON response contains generated credentials including a CA chain, certificate, and private key in PEM format for use with KMIP clients.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIICNzCCAZigAwIBAgIUKOGtsdXdMjjGni52EsaMQ7ozhCEwCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MB4XDTE5MDYyNDE4NTgyMVoX\\nDTI5MDYyMTE4NTg1MVowKjEoMCYGA1UEAxMfdmF1bHQta21pcC1kZWZhdWx0LWlu\\ndGVybWVkaWF0ZTCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEATHNhNvU0GMtzl6A\\nPbNaCoF0jV3z09RCfLKEqMl/MXv/AlPcfiqCQeOWBwWHv76epPWkCCo+IlNq8ldQ\\neVe52p6mABMvRjE6BZ/eLea27zImI6waK7nZ2hqx0npb8ivdbwmrgp0NQnv0sJ+o\\nPeLa2vh9wDK1NJebmOv0yRAbCw2CH7Rbo2YwZDAOBgNVHQ8BAf8EBAMCAQYwEgYD\\nVR0TAQH/BAgwBgEB/wIBCTAdBgNVHQ4EFgQU2naFRym+xfFvZm2TNRBXNf3MJSsw\\nHwYDVR0jBBgwFoAUFrA/R807R0BnIt395KzaXdP4n00wCgYIKoZIzj0EAwIDgYwA\\nMIGIAkIAkb8EdHCXgPpQsKYedMz4X2j5CFSVdZTWsPVw1XuSXIsIsc6018V4z9Kp\\nkPacsHZTBR636y2toqRPDG4y9MLqFFkCQgCV1jEkiNhhKc+ZWuDjerdqNvLnCbe+\\n7t4fiG9zQgWwh6IxL11cNyGVz9gS9af32DtuYf0xwFLOwLgn1RadC9Pd7Q==\\n-----END CERTIFICATE-----\",\n      \"-----BEGIN CERTIFICATE-----\\nMIICKTCCAYugAwIBAgIUOcs4pXlp+UgGiUKfKlcxIE/woPEwCgYIKoZIzj0EAwIw\\nHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MB4XDTE5MDYyNDE4NTgyMVoX\\nDTI5MDYyMTE4NTg1MVowHTEbMBkGA1UEAxMSdmF1bHQta21pcC1kZWZhdWx0MIGb\\nMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAcst7uNwu77WtLDkbz4ILYDiQ3BgS++qU\\nOoNKcKyvNe8YX6PtrdQWPTaxT4MZNHZvTv+BAQTQqGLKrstpkjXPh+sBn7V4trkT\\nMCtxUjIGneURUXS4IC/KJEA60P7ep7MrGnJfG/N4m+Q/a6BuxKhdEavXtepniCMz\\npHw4DCpW/9m2t16jZjBkMA4GA1UdDwEB/wQEAwIBBjASBgNVHRMBAf8ECDAGAQH/\\nAgEKMB0GA1UdDgQWBBQWsD9HzTtHQGci3f3krNpd0/ifTTAfBgNVHSMEGDAWgBQW\\nsD9HzTtHQGci3f3krNpd0/ifTTAKBggqhkjOPQQDAgOBiwAwgYcCQR7iNoA4nBV3\\ndSn8nfafklFvHZxoKR1j3nn+56z4JHD6TNr//GNqQiqnM3P//Tce+E4KzEax4xRg\\nhaLURgPLNBjOAkIAqW+1/+v9D0vXOU1WPc+/oFvhSjYnr5qqcTL7by5fsmMXzAIe\\nLODXiODxdppXXnMZPCPZh6MGgUwEGYeCnaXopWc=\\n-----END CERTIFICATE-----\"\n    ],\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIICOzCCAZygAwIBAgIUeOkn0HAdoh31nGkVKdafpCNuhFEwCgYIKoZIzj0EAwIw\\nKjEoMCYGA1UEAxMfdmF1bHQta21pcC1kZWZhdWx0LWludGVybWVkaWF0ZTAeFw0x\\nOTA2MjQxOTAwMDlaFw0xOTA2MjUxOTAwMzlaMCAxDjAMBgNVBAsTBWlsVjYzMQ4w\\nDAYDVQQDEwUyRnlWTjCBmzAQBgcqhkjOPQIBBgUrgQQAIwOBhgAEAA0rIy0h2DL3\\nzmTXVj2v22Kz0N1EUUATlRgBj1XBsBA1Pdd7CSZoefmh/u6Z8TjtRX9Z1aj9Bb/d\\nJxS3zB4mguULAF4k7bLH1gKXMVC6NYjjk3mfxH5jG4QY8S8n6uyqzNgI5KRJ2Hyj\\nm8549Nvq3rvs8yOVXPSOGzkJ5KdUmSvXicMQo2cwZTAOBgNVHQ8BAf8EBAMCA6gw\\nEwYDVR0lBAwwCgYIKwYBBQUHAwIwHQYDVR0OBBYEFEuzruLILCil5Fp32ZjE4AhD\\nU268MB8GA1UdIwQYMBaAFNp2hUcpvsXxb2ZtkzUQVzX9zCUrMAoGCCqGSM49BAMC\\nA4GMADCBiAJCAeeuaIsgO9ro7opzZ9y9hSHkKB5WA5Qc7ePoSiKHNNbVvIJMkjRQ\\nC9YtUMQNnQ8wE6D/9xvR+9OBIi7t16iHGPGbAkIA6WIG6HHRNUXnHPIiW8iy/04O\\nfVqZgJHJEeyGQbwdaehs+Z5xOz6TA4Z3uZOAMnPcb+KDwchnQ8CJnmT/KnnT5D8=\\n-----END CERTIFICATE-----\",\n    \"private_key\": \"-----BEGIN EC PRIVATE KEY-----\\nMIHcAgEBBEIBB4xDj9SUtb6Z466lVQIf3ucy21q5S2Fp9bzTQ0Ch5Vg2+DhUZUa1\\nDjKvDdICY6hLPBFAwcOUFdDXr4kH/i8wuRWgBwYFK4EEACOhgYkDgYYABAANKyMt\\nIdgy985k11Y9r9tis9DdRFFAE5UYAY9VwbAQNT3XewkmaHn5of7umfE47UV/WdWo\\n/QW/3ScUt8weJoLlCwBeJO2yx9YClzFQujWI45N5n8R+YxuEGPEvJ+rsqszYCOSk\\nSdh8o5vOePTb6t677PMjlVz0jhs5CeSnVJkr14nDEA==\\n-----END EC PRIVATE KEY-----\",\n    \"serial_number\": \"728181095563584845125173905844944137943705466376\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response After Successfully Generating Recovery Token\nDESCRIPTION: This JSON response shows a completed recovery token generation attempt where the threshold of key shares has been met, containing the encoded recovery token in the response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"progress\": 3,\n  \"required\": 3,\n  \"pgp_fingerprint\": \"\",\n  \"complete\": true,\n  \"encoded_token\": \"FPzkNBvwNDeFh4SmGA8c+w==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Oracle TDE Parameter Settings\nDESCRIPTION: Retrieve and verify the configured Oracle TDE parameters to ensure they are set correctly, indicating wallet root and HSM configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nSQL> SELECT name, value from V$PARAMETER WHERE NAME IN ('wallet_root','tde_configuration');\n\nNAME                           VALUE\n------------------------------ --------------------------------------------------\nwallet_root                    /opt/oracle/admin/ORCLCDB/wallet\ntde_configuration              KEYSTORE_CONFIGURATION=HSM\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Key Configuration\nDESCRIPTION: This snippet demonstrates how to update Vault's information about an existing Google Cloud KMS key. It includes the policy, request parameters, sample payload, and curl command for the POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_32\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min_version\": 10\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/config/my-key\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Vault for Rollback\nDESCRIPTION: This command uninstalls the Vault deployment using Helm as part of the rollback procedure to revert to the original Consul storage configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ helm uninstall vault\n```\n\n----------------------------------------\n\nTITLE: Vault Activity Metrics Response JSON Structure\nDESCRIPTION: Comprehensive JSON response showing Vault activity metrics including client counts across different namespaces and mount points. The response includes total counts, namespace-specific metrics, mount point details, and new client statistics with timestamps.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"request_id\":\"26be5ab9-dcac-9237-ec12-269a8ca647d5\",\n   \"lease_id\":\"\",\n   \"renewable\":false,\n   \"lease_duration\":0,\n   \"data\":{\n      \"by_namespace\":[\n         {\n            \"namespace_id\":\"root\",\n            \"namespace_path\":\"\",\n            \"counts\":{\n               \"entity_clients\":20,\n               \"non_entity_clients\":10,\n               \"secret_syncs\": 5,\n               \"acme_clients\": 3,\n               \"clients\":38\n            },\n            \"mounts\":[\n               {\n                  \"mount_path\":\"auth/up1/\",\n                  \"mount_type\":\"userpass/\",\n                  \"counts\":{\n                     \"entity_clients\":10,\n                     \"non_entity_clients\":10,\n                     \"secret_syncs\": 0,\n                     \"acme_clients\": 0,\n                     \"clients\":20\n                  }\n               },\n               {\n                  \"mount_path\":\"auth/up2/\",\n                  \"mount_type\":\"userpass/\",\n                  \"counts\":{\n                     \"entity_clients\":5,\n                     \"non_entity_clients\":5,\n                     \"secret_syncs\": 0,\n                     \"acme_clients\": 0,\n                     \"clients\":10\n                  }\n               },\n               {\n                  \"mount_path\":\"secrets/kv1/\",\n                  \"mount_type\":\"kv/\",\n                  \"counts\":{\n                     \"entity_clients\":0,\n                     \"non_entity_clients\":0,\n                     \"secret_syncs\":3,\n                     \"acme_clients\": 0,\n                     \"clients\":3\n                  }\n               },\n               {\n                  \"mount_path\":\"secrets/kv2/\",\n                  \"mount_type\":\"kv/\",\n                  \"counts\":{\n                     \"entity_clients\":0,\n                     \"non_entity_clients\":0,\n                     \"secret_syncs\":0,\n                     \"acme_clients\": 0,\n                     \"clients\":2\n                  }\n               },\n               {\n                  \"mount_path\":\"secrets/pki/\",\n                  \"mount_type\":\"pki/\",\n                  \"counts\":{\n                     \"entity_clients\":0,\n                     \"non_entity_clients\":0,\n                     \"secret_syncs\":0,\n                     \"acme_clients\": 3,\n                     \"clients\":3\n                  }\n               }\n            ]\n         }]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Put Function for Key-Value Storage (Pre-9.5)\nDESCRIPTION: Custom PostgreSQL function to handle concurrent key-value insertion and updates with upsert-like behavior for versions prior to 9.5\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/postgresql.mdx#2025-04-14_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nCREATE FUNCTION vault_kv_put(_parent_path TEXT, _path TEXT, _key TEXT, _value BYTEA) RETURNS VOID AS\n$$\nBEGIN\n    LOOP\n        UPDATE vault_kv_store\n          SET (parent_path, path, key, value) = (_parent_path, _path, _key, _value)\n          WHERE _path = path AND key = _key;\n        IF found THEN\n            RETURN;\n        END IF;\n        BEGIN\n            INSERT INTO vault_kv_store (parent_path, path, key, value)\n              VALUES (_parent_path, _path, _key, _value);\n            RETURN;\n        EXCEPTION WHEN unique_violation THEN\n        END;\n    END LOOP;\nEND;\n$$\nLANGUAGE plpgsql;\n```\n\n----------------------------------------\n\nTITLE: Sample CIEPS Configuration Response\nDESCRIPTION: Example JSON response from Vault when querying the CIEPS configuration, showing various settings and status information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_85\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"enabled\": false,\n    \"external_service_last_updated\": \"0001-01-01T00:00:00Z\",\n    \"external_service_url\": \"\",\n    \"external_service_validated\": false,\n    \"last_successful_request\": \"\",\n    \"timeout\": 15000000000,\n    \"trusted_ca\": \"\",\n    \"trusted_leaf_certificate_bundle\": \"\",\n    \"vault_client_cert_bundle\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Raft Storage Dependencies in Vault\nDESCRIPTION: Release note entry describing the upgrade of bbolt dependency to version 1.3.8 and additional performance optimization for scanning large freelist maps in the raft storage implementation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24010.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nstorage/raft: Upgrade to bbolt 1.3.8, along with an extra patch to reduce time scanning large freelist maps.\n```\n\n----------------------------------------\n\nTITLE: LDAP Groups List Response\nDESCRIPTION: Example JSON response showing the list of LDAP groups that have been configured in the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"scientists\", \"engineers\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample ACL Policy for CMPv2 Path\nDESCRIPTION: This snippet provides an example ACL policy for allowing authenticated clients to access the required PKI CMP path within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cmpv2.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npath \"pki/cmp\" {\\\n  capabilities=[\"update\", \"create\"]\\\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Kubernetes Auth Configuration API Request\nDESCRIPTION: Shell command to read the current Kubernetes auth method configuration using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/config\n```\n\n----------------------------------------\n\nTITLE: Defining Password Policy with Minimum Character Requirements in HCL\nDESCRIPTION: This HCL snippet defines a password policy requiring at least one uppercase, one lowercase, and one numeric character. It also includes a rule for special characters without a minimum requirement.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyz\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"0123456789\"\n  min-chars = 1\n}\nrule \"charset\" {\n  charset = \"!\\\"#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin Runtime with Resource Limits\nDESCRIPTION: Shows how to register a container plugin runtime with CPU resource limitations specified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/register.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault plugin runtime register \\\n    -type=container \\\n    -cpu_nanos=100000000 \\\n  runsc\n```\n\n----------------------------------------\n\nTITLE: Querying License in Vault Shell Session\nDESCRIPTION: This shell session code snippet demonstrates how to query the current license in use by a Vault node using the \"vault license get\" command. This command outputs information such as expiration time, features, and license ID. No additional dependencies are required beyond Vault being installed and running.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/license/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault license get\nKey                          Value\n---                          -----\nexpiration_time              2022-05-17T23:59:59.999Z\nfeatures                     [HSM Performance Replication DR Replication MFA Sentinel Seal Wrapping Control Groups Performance Standby Namespaces KMIP Entropy Augmentation Transform Secrets Engine Lease Count Quotas Key Management Secrets Engine Automated Snapshots]\nlicense_id                   060d7820-fa59-f95c-832b-395db0aeb9ba\nperformance_standby_count    9999\nstart_time                   2021-05-17T00:00:00Z\n\n```\n\n----------------------------------------\n\nTITLE: POST Request for Rate Limit Configuration\nDESCRIPTION: Shell command to send a POST request to configure rate limit quotas using curl. Requires authentication via X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/quotas-config.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/quotas/config\n```\n\n----------------------------------------\n\nTITLE: AES Key Configuration Parameters for HSM\nDESCRIPTION: Defines the PKCS#11 attributes for configuring an AES key in HSM with 256-bit length. The key is configured as a non-extractable secret key that supports encryption, decryption, wrapping, and unwrapping operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/pkcs11.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- `CKA_CLASS`: `CKO_SECRET_KEY` (It's a secret key)\n- `CKA_KEY_TYPE`: `CKK_AES` (Key type is AES)\n- `CKA_VALUE_LEN`: `32` (Key size is 256 bits)\n- `CKA_LABEL`: Set to the key label set in Vault's configuration\n- `CKA_ID`: Set to a random 32-bit unsigned integer\n- `CKA_PRIVATE`: `true` (Key is private to this slot/token)\n- `CKA_TOKEN`: `true` (Key persists to the slot/token rather than being for one session only)\n- `CKA_SENSITIVE`: `true` (Key is a sensitive value)\n- `CKA_ENCRYPT`: `true` (Key can be used for encryption)\n- `CKA_DECRYPT`: `true` (Key can be used for decryption)\n- `CKA_WRAP`: `true` (Key can be used for wrapping)\n- `CKA_UNWRAP`: `true` (Key can be used for unwrapping)\n- `CKA_EXTRACTABLE`: `false` (Key cannot be exported)\n```\n\n----------------------------------------\n\nTITLE: Add Development Role to OCI Auth Method\nDESCRIPTION: This shell command registers a development role in the OCI Auth method in Vault. It sends the role configuration, which details policies and access permissions, to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl --header \"X-Vault-Token: $token\" --request POST \\\n   --data @devrole.json \\\n   http://127.0.0.1:8200/v1/auth/oci/role/devrole (127.0.0.1:8200/v1/auth/oci/role/devrole)\n```\n\n----------------------------------------\n\nTITLE: Mapping GitHub User to Policies with cURL\nDESCRIPTION: Shell command using cURL to map a specific GitHub user (sethvargo) to a Vault policy. Requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/github/map/users/sethvargo\n```\n\n----------------------------------------\n\nTITLE: Example Response from Vault Key Rotation Configuration API\nDESCRIPTION: JSON response returned when retrieving the key rotation configuration, showing the maximum operations, interval, and enabled status along with request metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rotate-config.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"f3d91b4a-69bf-4aaf-b928-df7a5486c130\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"max_operations\": 2000000000,\n    \"interval\": \"4320h\",\n    \"enabled\": true\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding request data field for transit mounts\nDESCRIPTION: This snippet specifies how to exclude the 'data' field from request audit entries when the mount type is 'transit'. This is useful for ensuring that sensitive data is not logged for certain types of requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"condition\": \"\\\"/request/mount_type\\\" == transit\",\n    \"fields\": [ \"/request/data\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Patching KV Secret Metadata in Vault\nDESCRIPTION: A sample curl request demonstrating how to use the PATCH endpoint to update metadata for a key-value secret. It includes the necessary headers, including the Content-Type header set to 'application/merge-patch+json' and the Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --header \"Content-Type: application/merge-patch+json\"\n    --request PATCH \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/metadata/my-secret\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Quota Details - JSON Response\nDESCRIPTION: Sample JSON response when retrieving rate limit quota details, showing quota configuration and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rate-limit-quotas.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"d0870811-455d-3dfd-459f-aee016e6fb68\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"block_interval\": 300,\n    \"interval\": 2,\n    \"name\": \"global-rate-limiter\",\n    \"path\": \"\",\n    \"rate\": 897.3,\n    \"role\": \"\",\n    \"type\": \"rate-limit\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Enabled Audit Devices - Shell\nDESCRIPTION: This command retrieves a detailed list of all enabled audit devices in Vault. Ensure Vault is properly initialized and unsealed before executing this command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/filtering.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\nvault audit list --detailed\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Go Project (Linux)\nDESCRIPTION: Bootstraps the Go project, downloading and compiling the libraries and tools needed to build Vault. This step is necessary to prepare the environment for building.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"make bootstrap\"\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Auth Roles API Request\nDESCRIPTION: Shell command to list all roles registered with the Kubernetes auth method using curl.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/role\n```\n\n----------------------------------------\n\nTITLE: Requesting Mount UUID Cache in Vault\nDESCRIPTION: This request retrieves a list of mount entries in the router's mount UUID cache. It requires a root token or sudo privileges and returns information about mounted backends indexed by their UUIDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/internal/inspect/router/uuid\n```\n\n----------------------------------------\n\nTITLE: Administrative TOTP MFA Secret Generation Response\nDESCRIPTION: This JSON response contains the administratively generated TOTP MFA secret, including a barcode image and a URL for configuring the TOTP authenticator.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"barcode\": \"iVBORw0KGgoAAAANSUhEUgAAAMgAAADIEAAAAADYoy0BAAAGZElEQVR4nOyd7W4jNwxFkyLv/8pbpMAAHnUo8pJyc1Oc82OB2KOP9QVFSyTlrz9/PsCIv356AnDn6/ufz89e48i6ov6u59f319ezfqtWnf2/snHX19XnVL7bYyFmIIgZCGLG5/e61V2b37WWXkRr9+lxonEvqv1XfeHK6/NYiBkIYgaCmPH19GK2j4ieX9/P9h0R2T6l+pzqYzKfmM0zQvk8sRAzEMQMBDHj0YdMqa6Z1TOvyDdF/VTPnqLnVzIfePLEHAsxA0HMQBAz3uJDqvuVbO1Vv/934yzReNV4ykmwEDMQxAwEMePRh5xeG6fxjNXnVM+Y1HHVM7Tq56R8nliIGQhiBoKYcfMhp2LT6hp7UY2hV8dTY/KZT1N9SufzxELMQBAzEMSMf3zI6X2HembUXbuz8dT9g+qLIiafJxZiBoKYgSBm3OpDunlMartTubrdeEUWI1dzAqa5wK9gIWYgiBkIYsaReIi6P1jbqd/7qznDqm9SfcKJs6sVLMQMBDEDQcz43K3z3fqLaf336fiFymQf8dRe8aVYiBkIYgaCmHHzIdW8pGo8QT1rOuULTvkc9a6TqD+lTgULMQNBzEAQMx7jIRdqjV7ULvpbrReJxl/nodYodseLxu/GWz6wED8QxAwEMeN2X9ZK9/4neRLDNfrUc919yPp8t/8PLMQPBDEDQcyQ6tTVO0JWqvGT6PWu75jub6L+T/kg4iHGIIgZCGLGKB5yKn5SpVuDWKXrI0/4jgssxAwEMQNBzNieZWV0v/erZ0Knxp3OYxoXqoyPhZiBIGYgiBmPub1q7m7G6fiB2n+3niSbZwT7kP8RCGIGgpjxeF9W5iPU8/+ofUY1r6q6ZkfzmtbJV2skozw04iHGIIgZCGKGlJeVvZ61V+MX07OiqJ9oftE41fGm9TD4EEMQxAwEMaN010lW1zGNoVfX+OrZl/rcfx0P2c0XCzEDQcxAEDMe87K68YBubH7tdxonmcb0q+2qZ2DK/gkLMQNBzEAQM2516lXUs6GIbA3v+qruPinrX/Ud0Xx288JCzEAQMxDEjG2NYXf/odztsXuuEoOu9BO93933RONm86n0h4WYgSBmIIgZt9+gqtaDq7m3K2rObnc+UT/Z36f2MZ28MCzEDAQxA0HMaJ1lTevBo/5OxRsysv1O9Fx1nO4Z3QcW4geCmIEgZki/H1Klu+Z369PVeVXHexfEQ34RCGIGgpjxWGN40c1VXdtXaxW79SLTOvqonVpDqdavkNv7C0AQMxDEjNK9vdP4gFq3ntV1Z+NEf099ZEZ1vrv+sBAzEMQMBDFjW2PYjT9U4xqqT1D7/ak4j5rn9QoWYgaCmIEgZpTu7e2u5Vk/4aQO3XFSHUc9s1rnNfVdr/1hIWYgiBkIYsZtH6LGA9Z20d8Z3fuq1HyqUznC1fZVX0c8xBgEMQNBzNje2xvxrlzYan1K1H82fjXOUfU12XzW5yufBxZiBoKYgSBmSL+FezE9s1lR9yHq2VvUT7fefOpjd58fFmIGgpiBIGZId52sr6u5u9M7RtTn1Hmr8ZzqnSvK2R4WYgaCmIEgZmzjIdHr3Rzfi278I3pdvStFrWVUfU52d8quPRZiBoKYgSBmbOvU//Xwobr1U7FpNV8qatetm4+onvU9jYuFmIEgZiCIGbf7srLv1d01vLsWqzmzapymeyaWfQ5qXtsrWIgZCGIGgphR+g2q9f0V9Y6SartsXtP8qOmZWDTe5AwMCzEDQcxAEDMeY+rVfUj0fLddN9Y+3feodfPd+pnKvLAQMxDEDAQxY1unPo11q+2i8adxCXV+an/qfHbzwELMQBAzEMQMKaYediL6FDVmruaBTWsU1bMwdT67/zcWYgaCmIEgZrR+g+piPata18Tu9/Zurq5aTxLNV833qs6nMg8sxAwEMQNBzHisD8lQ6y3W/qt3kpyuS8/ez3xiNL/qfMjL+oUgiBkIYkYppn7R9THd56s5tBGn60myfcSJ3GMsxAwEMQNBzGjdlxXRja1068mj9tla3c3DysaLxon+fgILMQNBzEAQM476kG5c5aJ7BnS6bqX6+jS/jLysXwCCmIEgZmx/x7DK6btCurF31WdMawPfkXOMhZiBIGYgiBmPvx+iUo2RV/vp3llSpZuXpfqgbNwnsBAzEMQMBDHjSH0InAMLMePvAAAA//8x2VnbmmL6HQAAAABJRU5ErkJggg==\",\n    \"url\": \"otpauth://totp/vault:4746fb81-028c-cd4e-026b-7dd18fe4c2f4?algorithm=SHA1&digits=6&issuer=vault&period=30&secret=6HQ4RZ7GM6MMLRKVDCI23LXNZF7UDZ2U\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault in HA Raft Mode on OpenShift\nDESCRIPTION: This command installs Vault in High Availability Raft mode on OpenShift. It enables the HA and Raft features while setting the OpenShift flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/openshift.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n  --set='global.openshift=true' \\\n  --set='server.ha.enabled=true' \\\n  --set='server.ha.raft.enabled=true'\n```\n\n----------------------------------------\n\nTITLE: Configuring Autopilot Upgrade Version in Vault\nDESCRIPTION: Demonstrates how to explicitly set the target upgrade version to ensure all nodes are properly updated during an autopilot upgrade process\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/autopilot-upgrade-upgrade-version.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  autopilot_upgrade_version = \"<version string>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for DR Token Generation Status\nDESCRIPTION: JSON response showing the status of a DR operation token generation attempt, including progress, requirements, and completion status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"progress\": 1,\n  \"required\": 3,\n  \"encoded_token\": \"\",\n  \"pgp_fingerprint\": \"\",\n  \"complete\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Attempting to Access Unauthorized Path - Shell\nDESCRIPTION: This snippet demonstrates trying to access a secret path that the user does not have permissions for. It tests the policy restrictions applied to the user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get kv/api-keys\n```\n\n----------------------------------------\n\nTITLE: Updating CF Auth Plugin Version in Vault Release Notes\nDESCRIPTION: Release note entry documenting the version update of the Cloud Foundry authentication plugin to v0.19.1 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29295.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/cf: Update plugin to v0.19.1\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Tidy Status\nDESCRIPTION: This JSON response shows the format of the data returned by the `/pki/tidy-status` endpoint, including fields such as safety_buffer, tidy_cert_store, tidy_revoked_certs, error, message, and state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_125\n\nLANGUAGE: json\nCODE:\n```\n  \"data\": {\n    \"safety_buffer\": 60,\n    \"tidy_cert_store\": true,\n    \"tidy_revoked_certs\": true,\n    \"error\": null,\n    \"message\": \"Tidying certificate store: checking entry 234 of 488\",\n    \"revoked_cert_deleted_count\": 0,\n    \"cert_store_deleted_count\": 2,\n    \"state\": \"Running\",\n    \"time_started\": \"2021-10-20T14:52:13.510161-04:00\",\n    \"time_finished\": null\n  }\n```\n\n----------------------------------------\n\nTITLE: Sample response for static credentials request\nDESCRIPTION: This JSON object contains the current credentials returned for the static role, including access key, expiration time, and secret key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_35\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"access_key\": \"AKIA...\",\\n  \"expiration\": \"2024-10-25T15:02:10Z\",\\n  \"secret_key\": \"...\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Auth Improvement for Login MFA in Vault\nDESCRIPTION: This release note indicates an improvement to Vault's authentication system. It introduces globally scoped Get and List endpoints for Login MFA methods, enhancing the flexibility and management of multi-factor authentication in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15248.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth: Globally scoped Login MFA method Get/List endpoints\n```\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Spec with Custom Service Account Token\nDESCRIPTION: This YAML defines a Kubernetes Pod spec that mounts a custom service account token with specified TTL and audience.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx\nspec:\n  automountServiceAccountToken: false\n  containers:\n    - name: nginx\n      image: nginx\n      volumeMounts:\n      - name: custom-token\n        mountPath: /var/run/secrets/kubernetes.io/serviceaccount\n  volumes:\n  - name: custom-token\n    projected:\n      defaultMode: 420\n      sources:\n      - serviceAccountToken:\n          path: token\n          expirationSeconds: 600 # 10 minutes is the minimum TTL\n          audience: vault        # Must match your JWT role's `bound_audiences`\n      - configMap:\n          name: kube-root-ca.crt\n          items:\n          - key: ca.crt\n            path: ca.crt\n      - downwardAPI:\n          items:\n          - fieldRef:\n              apiVersion: v1\n              fieldPath: metadata.namespace\n            path: namespace\n```\n\n----------------------------------------\n\nTITLE: Debug Command Log Format Improvement\nDESCRIPTION: This release note describes an improvement to the Vault debug command by adding the `log_format` flag. This enables logs generated during debugging sessions to be emitted in JSON format, providing a structured and easily parsable output for troubleshooting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15536.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\ncommand/debug: Add log_format flag to allow for logs to be emitted in JSON format\n```\n```\n\n----------------------------------------\n\nTITLE: Reading KMIP CA Certificate\nDESCRIPTION: This snippet demonstrates how to retrieve the CA certificate used by the KMIP secrets engine using a GET request to the `/kmip/ca` endpoint. It shows the shell command used to make the request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/kmip/ca\n```\n\n----------------------------------------\n\nTITLE: KMIP Objects Support Table\nDESCRIPTION: Markdown table showing supported KMIP objects in Vault's implementation including Attributes, Credentials, Key Blocks, and other core components.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip-profiles.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Object                                                                  | Supported |\n| ----------------------------------------------------------------------- | :-------: |\n| Attribute [KMIP-SPEC 2.1.1][kmip-spec-2.1.1]                            | ✅        |\n| Credential [KMIP-SPEC 2.1.2][kmip-spec-2.1.2]                           | ✅        |\n| Key Block [KMIP-SPEC 2.1.3][kmip-spec-2.1.3]                            | ✅        |\n| Key Value [KMIP-SPEC 2.1.4][kmip-spec-2.1.4]                            | ✅        |\n| Template-Attribute Structure [KMIP-SPEC 2.1.8][kmip-spec-2.1.8]         | ✅        |\n| Extension Information [KMIP-SPEC 2.1.9][kmip-spec-2.1.9]                | ✅        |\n| Profile Information [KMIP-SPEC 2.1.19][kmip-spec-2.1.19]                | ✅        |\n| Validation Information [KMIP-SPEC 2.1.20][kmip-spec-2.1.20]             | ✅        |\n| Capability Information [KMIP-SPEC 2.1.21][kmip-spec-2.1.21]             | ✅        |\n```\n\n----------------------------------------\n\nTITLE: Disabling Performance Secondary\nDESCRIPTION: cURL command to disable performance replication on a secondary node.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/secondary/disable\n```\n\n----------------------------------------\n\nTITLE: Retrieving HCP Terraform Organization Credentials from Vault (Shell)\nDESCRIPTION: This command retrieves the Organization API token for the specified HCP Terraform role from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read terraform/creds/testing\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Re-Encryption - JSON\nDESCRIPTION: This JSON object shows the expected response when re-encrypting existing ciphertext using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"ciphertext\": \"0lX848IG...\",\n    \"key_version\": \"3\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a PostgreSQL Tokenization Store with JSON Payload\nDESCRIPTION: JSON payload for creating or updating a PostgreSQL tokenization store in the Vault Transform Secrets Engine with connection details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"sql\",\n  \"driver\": \"postgres\",\n  \"connection_string\": \"postgresql://{{username}}:{{password}}@mydb.conhugeco.com/tokens\",\n  \"username\": \"vault_user\",\n  \"password\": \"very_secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Command-Specific Parameter Template in Markdown\nDESCRIPTION: Template for documenting command-specific arguments, flags, or options in the Vault CLI documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<a id=\"COMMAND_ROOT-[arg | option | flag]-NAME\" />\n\n**`NAME (TYPE : DEFAULT)`**\n\nDESCRIPTION\n\n**Example**: `EXAMPLE_OF_VALID_USE`\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Help in Vault\nDESCRIPTION: Example of how to retrieve help documentation for a Vault API endpoint by appending ?help=1 to the URL. The request requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -H \"X-Vault-Token: f3b09679-3001-009d-2b80-9c306ab81aa6\" \\\n    http://127.0.0.1:8200/v1/secret?help=1\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Unsealed Vault Status\nDESCRIPTION: Sample JSON response from the unseal API when Vault has been successfully unsealed, including cluster information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/unseal.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sealed\": false,\n  \"t\": 3,\n  \"n\": 5,\n  \"progress\": 0,\n  \"version\": \"0.6.2\",\n  \"cluster_name\": \"vault-cluster-d6ec3c7f\",\n  \"cluster_id\": \"3e8b3fec-3749-e056-ba41-b62a63b997e8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Seal Configuration Reload Feature in Vault (Markdown)\nDESCRIPTION: This code snippet is a release note documenting a new feature in HashiCorp's Vault. The feature allows reloading of seal configuration when the SIGHUP signal is received, enabling configuration changes without shutting down Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23571.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Reload seal configuration on SIGHUP**: Seal configuration is reloaded on SIGHUP so that seal configuration can\nbe changed without shutting down vault\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Kerberos Configuration\nDESCRIPTION: Example JSON response showing the Kerberos configuration details, excluding sensitive information like the keytab.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"add_group_aliases\": false,\n    \"remove_instance_name\": false,\n    \"service_account\": \"vault_svc\"\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Service Account Email in Vault CLI for GCP\nDESCRIPTION: This snippet outlines an improvement in the Vault CLI which allows it to automatically infer the service account email when it is running on Google Cloud. This feature simplifies user operations by reducing the need for manual input of the service account email. No additional dependencies are mentioned for this functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15592.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nauth/gcp: Vault CLI now infers the service account email when running on Google Cloud \\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Listing Programmatic API Key Roles - HTTP API - Shell\nDESCRIPTION: This snippet demonstrates how to list all programmatic API key roles via a GET request to the corresponding API endpoint, alongside the expected response format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/mongodbatlas.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/mongodbatlas/roles\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Hash Operation\nDESCRIPTION: Example payload for hashing input data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_46\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"adba32==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting TDE Master Key in Oracle\nDESCRIPTION: Create and set the TDE master encryption key using Oracle's KEY MANAGEMENT SQL commands. The password is used for TLS key decryption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nADMINISTER KEY MANAGEMENT SET ENCRYPTION KEY USING TAG 'default' IDENTIFIED BY \"1234\" CONTAINER = ALL;\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Patch for Vault Agent Injection\nDESCRIPTION: This bash command applies the previously created patch to a Kubernetes deployment, enabling Vault Agent injection for existing pods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/injector/examples.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl patch deployment <MY DEPLOYMENT> --patch \"$(cat patch.yaml)\"\n```\n\n----------------------------------------\n\nTITLE: Listing Rate Limit Quotas - CURL Request\nDESCRIPTION: CURL command to list all rate limit quotas using the LIST endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rate-limit-quotas.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request LIST \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/quotas/rate-limit\n```\n\n----------------------------------------\n\nTITLE: Setting Log Verbosity Level for a Single Logger (cURL Request)\nDESCRIPTION: Shell command to send a POST request to the /sys/loggers/:name endpoint using cURL. This example targets the 'core' logger specifically to modify its log level.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/loggers/core\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Storage Put Metric Definition\nDESCRIPTION: Defines a timer metric that measures the duration in milliseconds for inserting a log entry into the raft storage persist path. This metric is important for monitoring storage performance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/raft-storage/put.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value | Description\n----------- | ----- | -----------\ntimer       | ms    | Time required to insert a log entry to the persist path\n```\n\n----------------------------------------\n\nTITLE: Using OIDC Authorization Endpoint\nDESCRIPTION: This API endpoint implements the Authorization Endpoint for an OIDC provider. It supports the Authorization Code Flow and requires various parameters like client_id, scope, response_type, and redirect_uri.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_32\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request GET \\\n    --header \"X-Vault-Token: ...\" \\\n    -G \\\n    -d \"response_type=code\" \\\n    -d \"client_id=$CLIENT_ID\" \\\n    -d \"state=af0ifjsldkj\" \\\n    -d \"nonce=abcdefghijk\" \\\n    --data-urlencode \"scope=openid\" \\\n    --data-urlencode \"redirect_uri=http://127.0.0.1:8251/callback\" \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider/authorize\n```\n\n----------------------------------------\n\nTITLE: Unsealing Multiple Vault Replicas\nDESCRIPTION: This command unseals multiple Vault replicas in a loop. It's necessary to unseal each replica individually after increasing the number of replicas.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ for i in {1..4} ; do kubectl exec -it vault-0 -- vault operator unseal ; done\n```\n\n----------------------------------------\n\nTITLE: Viewing AD FS Event 320 Error in Shell\nDESCRIPTION: This error log shows the SAML message signature verification failure. The error indicates that while the relying party trust 'MyVaultIdentifier' is configured to expect signed authentication requests, no signature is present in the messages from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/adfs-event-320.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\nThe verification of the SAML message signature failed.\nMessage issuer: MyVaultIdentifier\nException details:\nMSIS7086: The relying party trust 'MyVaultIdentifier' indicates that authentication requests sent by this relying party will be signed but no signature is present.\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Response Wrap TTL via CLI\nDESCRIPTION: Sets a 5-minute time-to-live duration for wrapped responses using the CLI flag\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/wrap-ttl.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-wrap-ttl \"5m\"\n```\n\n----------------------------------------\n\nTITLE: Setting up API Proxy for Vault Agent in HCL\nDESCRIPTION: This configuration block sets up the API proxy for Vault Agent. It forces the use of the auto-auth token for API requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/static-secret-caching.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\napi_proxy {\n  use_auto_auth_token = \"force\"\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Auth Tune Parameters - Shell Session\nDESCRIPTION: This command provides information about all available parameters that can be tuned for the auth method in Vault, facilitating comprehensive configuration management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault auth tune -h\n```\n\n----------------------------------------\n\nTITLE: Configuring Consul Access with Token from Standard Input\nDESCRIPTION: This example shows how to configure access to Consul by providing an access token from standard input. The dash symbol (-) after 'token=' indicates Vault should read the value from stdin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/write.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo $MY_TOKEN | vault write consul/config/access token=-\n```\n\n----------------------------------------\n\nTITLE: PKCS#11 Provider Configuration (HCL) Example\nDESCRIPTION: This HCL block provides an example of how to configure a PKCS#11 slot to connect to Vault. The `server` parameter specifies the Vault server address, `tls_cert_path` points to the client TLS certificate, `ca_path` specifies the CA bundle, and `scope` indicates the KMIP scope to use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/index.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nslot {\n    server = \"127.0.0.1:5696\"\n    tls_cert_path = \"cert.pem\"\n    ca_path = \"ca.pem\"\n    scope = \"my-service\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bootstrap a Nomad ACL Token (shell-session)\nDESCRIPTION: The command outputs a sample output of the Nomad ACL bootstrap process, which generates an initial secret ID for bootstrapping.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/nomad.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ nomad acl bootstrap\nAccessor ID  = 95a0ee55-eaa6-2c0a-a900-ed94c156754e\nSecret ID    = c25b6ca0-ea4e-000f-807a-fd03fcab6e3c\nName         = Bootstrap Token\nType         = management\nGlobal       = true\nPolicies     = n/a\nCreate Time  = 2017-09-20 19:40:36.527512364 +0000 UTC\nCreate Index = 7\nModify Index = 7\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Listing PKI Roles\nDESCRIPTION: This code snippet showcases a sample JSON response from the Vault API when listing PKI roles.  The `keys` array within the `data` object contains the names of the available roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"dev\", \"prod\"]\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Response for Token Validation Request (JSON)\nDESCRIPTION: This JSON response indicates the validity of the token being validated, returning a boolean value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_62\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"valid\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WIF Settings for GCP Secrets Engine\nDESCRIPTION: Command to configure Workload Identity Federation settings with audience claim and service account email\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write gcp/config \\\n    identity_token_audience=<TOKEN_AUDIENCE> \\\n    service_account_email=<SERVICE_ACCOUNT_EMAIL>\n```\n\n----------------------------------------\n\nTITLE: Updating a Key's Configuration in Vault\nDESCRIPTION: API endpoint for updating a named key's minimum enabled version and deletion permissions. Allows configuring key lifecycle and access controls.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/key-management/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min_enabled_version\": 0,\n  \"deletion_allowed\": true\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/keymgmt/key/example-key\n```\n\n----------------------------------------\n\nTITLE: Reading AWS Identity Configuration in Vault CLI\nDESCRIPTION: Command to read the identity configuration for the AWS auth engine to determine potential performance impacts from token metadata in Vault 1.3.2.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/aws-auth-metadata-issue.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault read auth/aws/config/identity\n```\n\n----------------------------------------\n\nTITLE: Secrets Engine Mount Error Handling Update\nDESCRIPTION: Modifies secrets engine enabling to return an error for Pending Removal engines. Impacts both CLI and API endpoints for secrets management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17005.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets: `secrets enable` returns an error and `POST /sys/mount/:type` endpoint reports an error for `Pending Removal` secrets engines.\n```\n\n----------------------------------------\n\nTITLE: Configuring CRL Entry Limit in Vault PKI\nDESCRIPTION: Adds a new configuration parameter max_crl_entries to limit the number of certificate revocation entries, helping prevent performance issues from runaway revocations\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28654.txt#2025-04-14_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nmax_crl_entries = 10000\n```\n\n----------------------------------------\n\nTITLE: Disable Socket Audit Device\nDESCRIPTION: This example demonstrates how to disable a socket audit device located at the path `audit/kv-socket/`. The command disables the audit device, preventing further logging to the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/audit/disable.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault audit disable audit/kv-socket/\nSuccess! Disabled audit device (if it was enabled) at: audit/kv-socket/\n```\n\n----------------------------------------\n\nTITLE: Sample Session Token request using Curl\nDESCRIPTION: This curl command demonstrates how to use the Vault API to request AWS session tokens with MFA authentication, specified via `mfa_code` as a query parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/aws/creds/example-role?mfa_code=123456\n```\n\n----------------------------------------\n\nTITLE: Listing Destinations by Type - Shell Request\nDESCRIPTION: cURL command to list sync destinations for a specific type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm\n```\n\n----------------------------------------\n\nTITLE: Zero-Address Configuration Payload in JSON\nDESCRIPTION: Sample JSON payload for configuring zero-address roles. The payload specifies a list of role names that will allow credentials for any IP address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"roles\": [\"otp_key_role\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Requesting Static Credentials for LDAP - Shell\nDESCRIPTION: This command fetches static credentials associated with the defined 'hashicorp' role in the LDAP configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read ldap/static-cred/hashicorp\n```\n\n----------------------------------------\n\nTITLE: Creating KMIP Scope in Vault\nDESCRIPTION: This command creates a KMIP scope in Vault, which functions as an isolated namespace for storing TDE keys and associated objects.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nvault write -f kmip/scope/my-service\n```\n\n----------------------------------------\n\nTITLE: Deleting Duo MFA Method with cURL\nDESCRIPTION: Shell command to delete an existing Duo MFA method named 'my_duo'. Uses a DELETE request with authentication token to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/duo.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/duo/my_duo\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Transit Keys Settings\nDESCRIPTION: Example JSON payload for updating global Transit key settings, specifically disabling automatic creation of keys during encryption operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"disable_upsert\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auth for Token Validation without Client Credentials\nDESCRIPTION: Command to configure JWT auth with just the OIDC discovery URL, leaving client ID and secret blank for pure JWT token validation scenarios.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n$ vault write auth/jwt/config \\\n   oidc_discovery_url=\"https://MYDOMAIN.eu.auth0.com/\" \\\n   oidc_client_id=\"\" \\\n   oidc_client_secret=\"\" \n```\n\n----------------------------------------\n\nTITLE: Configuring Vault PKCS#11 HCL File\nDESCRIPTION: Create an HCL configuration file for the Vault PKCS#11 provider. It specifies details like server address, TLS certificate paths, and scopes for PKCS#11 operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nslot {\n  server = \"VAULT_ADDRESS:5696\"\n  tls_cert_path = \"/etc/cert.pem\"\n  ca_path = \"/etc/ca.pem\"\n  scope = \"my-service\"\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Single-line JSDoc Example Format\nDESCRIPTION: Example of correct single-line JSDoc formatting that will properly render a component example in the documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/how-to-docfy.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n✅ this will render\n* @example\n* <Block @title=\"Example\" description=\"My component\" />\n```\n\n----------------------------------------\n\nTITLE: Deleting Vault Policy\nDESCRIPTION: Command to delete an existing policy named 'my-policy' from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault policy delete my-policy\n```\n\n----------------------------------------\n\nTITLE: Modifying Authentication Method Mount Error Handling\nDESCRIPTION: Changes the behavior of auth method enabling to return an error for Pending Removal methods. Affects the auth enable CLI command and REST API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17005.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth: `auth enable` returns an error and `POST /sys/auth/:type` endpoint reports an error for `Pending Removal` auth methods.\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP Request for Snowflake Configuration - Shell\nDESCRIPTION: This shell command demonstrates how to send a POST request to configure the Snowflake database using cURL. It includes the necessary headers and data payload from the previous JSON configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/snowflake.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/snowflake\n```\n\n----------------------------------------\n\nTITLE: Release Note - UI Bug Fix for Okta Number Challenge\nDESCRIPTION: Release note indicating a bug fix for a regression that impacted the oktaNumberChallenge functionality in the Vault UI interface. The fix restores proper functionality to the Okta number challenge feature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23565.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: Fix regression that broke the oktaNumberChallenge on the ui.\n```\n\n----------------------------------------\n\nTITLE: Disabling Vault EKM Provider in SQL Server\nDESCRIPTION: SQL commands to disable the existing cryptographic provider and verify its disabled status in the system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/upgrading.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nALTER CRYPTOGRAPHIC PROVIDER TransitVaultProvider DISABLE;\nSELECT * FROM sys.cryptographic_providers;\n```\n\n----------------------------------------\n\nTITLE: Verifying Reset Auth Method Configuration in Vault CLI\nDESCRIPTION: This snippet demonstrates how to verify the auth method configuration after resetting the default lease duration to the system default.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/auth/github/tune\nKey                  Value\n---                  -----\ndefault_lease_ttl    768h\ndescription          n/a\nforce_no_cache       false\nmax_lease_ttl        768h\ntoken_type           default-service\n```\n\n----------------------------------------\n\nTITLE: High Availability Etcd Configuration\nDESCRIPTION: Configuration example showing how to enable high availability for Etcd storage backend with API address specification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/etcd.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\napi_addr = \"https://vault-leader.my-company.internal\"\n\nstorage \"etcd\" {\n  ha_enabled    = \"true\"\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing ACME Account Keys in Vault PKI (Shell)\nDESCRIPTION: This snippet shows how to list ACME account key identifiers using a LIST request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/acme/mgmt/account/keyid\n```\n\n----------------------------------------\n\nTITLE: Read User Response Example in JSON\nDESCRIPTION: This JSON response shows the structure of data returned when reading a RADIUS user's properties, including their assigned policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"812229d7-a82e-0b20-c35b-81ce8c1b9fa6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"policies\": \"default,dev\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Installing VaultSharp C# Package\nDESCRIPTION: Command to install VaultSharp C# client library using NuGet Package Manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ Install-Package VaultSharp\n```\n\n----------------------------------------\n\nTITLE: Sending Transit Key Configuration Request\nDESCRIPTION: Shell command to update key configuration for a Transit key named 'my-key', using curl to send a POST request to Vault's API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/keys/my-key/config\n```\n\n----------------------------------------\n\nTITLE: Declaring an Entity Lookup via HTTP API\nDESCRIPTION: This snippet provides a sample JSON payload used to lookup an entity's identity based on specified criteria such as 'id'. It primarily depends on having access to the identity backend service and a valid credential to perform the lookup. This JSON object is used in the body of an HTTP request, and the expected response is a JSON object containing entity details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/lookup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"043fedec-967d-b2c9-d3af-0c467b04e1fd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cassandra User Permissions\nDESCRIPTION: Required Cassandra permissions that need to be granted to the Vault user for managing roles and credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/cassandra.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nGRANT CREATE ON ALL ROLES to '<YOUR USER>';\nGRANT ALTER ON ALL ROLES to '<YOUR USER>';\nGRANT DROP ON ALL ROLES to '<YOUR USER>';\nGRANT AUTHORIZE ON ALL ROLES to '<YOUR USER>';\n```\n\n----------------------------------------\n\nTITLE: Create/Update Secret Response\nDESCRIPTION: This JSON response shows the structure of the data returned after creating or updating a secret. It includes the creation time, custom metadata, deletion time, destroyed status, and the version number of the new secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"created_time\": \"2018-03-22T02:36:43.986212308Z\",\n    \"custom_metadata\": {\n      \"owner\": \"jdoe\",\n      \"mission_critical\": \"false\"\n    },\n    \"deletion_time\": \"\",\n    \"destroyed\": false,\n    \"version\": 1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Secret from Another Namespace with Userpass Token\nDESCRIPTION: This command retrieves a secret from the `us-east-org` namespace using a token obtained via the userpass authentication method in the `us-west-org` namespace, demonstrating cross-namespace secret access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ VAULT_NAMESPACE=us-east-org VAULT_TOKEN=$(cat token.txt) \\\nvault kv get kv-marketing/campaign\n```\n\n----------------------------------------\n\nTITLE: VMSS Flex Authentication Feature\nDESCRIPTION: This feature adds support for Virtual Machine Scale Set Flex Authentication. This allows for more flexible and scalable authentication of VMs within a Virtual Machine Scale Set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19077.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\n**VMSS Flex Authentication**: Adds support for Virtual Machine Scale Set Flex Authentication\n```\n```\n\n----------------------------------------\n\nTITLE: Batch Encode Sample Response\nDESCRIPTION: JSON response containing batch encoding results.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"batch_results\": [\n      {\n        \"encoded_value\": \"5682-4613-6822-8064\"\n      },\n      {\n        \"encoded_value\": \"Q4tYgFXHxURXf9MLekG82L51vSAQrDnpAiaB37J4VPRxoQEB3fRpwR\",\n        \"reference\": \"order#1234\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the transit wrapping key into AWS CloudHSM\nDESCRIPTION: This command imports the transit wrapping key into AWS CloudHSM using the key_mgmt_util tool.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ importPubKey -f wrapping_key.pem -l \"vault-transit-wrapping-key\"\n```\n\n----------------------------------------\n\nTITLE: Adding Vault CSI Provider to Privileged SCC in OpenShift\nDESCRIPTION: This command adds the service account for the Vault CSI provider to the privileged security context constraint in OpenShift.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/installation.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ oc adm policy add-scc-to-user privileged system:serviceaccount:${KUBERNETES_VAULT_NAMESPACE}:vault-csi-provider\n```\n\n----------------------------------------\n\nTITLE: AliCloud Credentials Response for Assume-Role Based Roles\nDESCRIPTION: Sample response when generating credentials for an Assume-Role based role, including access_key, secret_key, expiration, and security_token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_key\": \"STS.L4aBSCSJVMuKg5U1vFDw\",\n  \"expiration\": \"2018-08-15T22:04:07Z\",\n  \"secret_key\": \"wyLTSmsyPGP1ohvvw8xYgB29dlGI8KMiH2pKCNZ9\",\n  \"security_token\": \"CAESrAIIARKAAShQquMnLIlbvEcIxO6wCoqJufs8sWwieUxu45hS9AvKNEte8KRUWiJWJ6Y+YHAPgNwi7yfRecMFydL2uPOgBI7LDio0RkbYLmJfIxHM2nGBPdml7kYEOXmJp2aDhbvvwVYIyt/8iES/R6N208wQh0Pk2bu+/9dvalp6wOHF4gkFGhhTVFMuTDRhQlNDU0pWTXVLZzVVMXZGRHciBTQzMjc0KgVhbGljZTCpnJjwySk6BlJzYU1ENUJuCgExGmkKBUFsbG93Eh8KDEFjdGlvbkVxdWFscxIGQWN0aW9uGgcKBW9zczoqEj8KDlJlc291cmNlRXF1YWxzEghSZXNvdXJjZRojCiFhY3M6b3NzOio6NDMyNzQ6c2FtcGxlYm94L2FsaWNlLyo=\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Controller Manager Error Backoff Settings\nDESCRIPTION: Settings to control retry behavior and backoff intervals for secret source errors. Includes maximum interval, elapsed time, randomization factor, and multiplier settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmaxInterval: 60s\nmaxElapsedTime: 0s\nrandomizationFactor: 0.5\nmultiplier: 1.5\n```\n\n----------------------------------------\n\nTITLE: Go CIEPS Structs Reference Location\nDESCRIPTION: Official Go structs for CIEPS protocol implementation located in Vault SDK, providing developers with standardized request and response structures\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cieps.mdx#2025-04-14_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// CIEPS structs location\ngithub.com/hashicorp/vault/sdk/helper/certutil/cieps.go\n```\n\n----------------------------------------\n\nTITLE: Consul ACL Policy (Version 0.8)\nDESCRIPTION: ACL policy configuration for Consul 0.8 defining required permissions for Vault integration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key\": {\n    \"vault/\": {\n      \"policy\": \"write\"\n    }\n  },\n  \"service\": {\n    \"vault\": {\n      \"policy\": \"write\"\n    }\n  },\n  \"agent\": {\n    \"\": {\n      \"policy\": \"read\"\n    }\n  },\n  \"session\": {\n    \"\": {\n      \"policy\": \"write\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reindex Replication Payload\nDESCRIPTION: JSON payload for initiating a reindex operation on a DR secondary cluster in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dr_operation_token\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: LIST Deny Listed Role Tags using Vault API with curl\nDESCRIPTION: This snippet demonstrates how to list all deny-listed role tags using the Vault API. It sends a LIST request to the `/auth/aws/roletag-denylist` endpoint, authenticated with a Vault token. The response provides a list of keys representing the deny-listed role tags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_43\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/aws/roletag-denylist\n```\n\n----------------------------------------\n\nTITLE: Example of Corrupted Page/Subpage Report (JSON)\nDESCRIPTION: This JSON structure shows an example of a corrupted page/subpage report. It indicates that subpage 234 of page 23 is corrupted in the replicated tree.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"corrupted_index_tuples_map\": {\n    \"23\": {\n      \"corrupted\": false,\n      \"subpages\": [\n        234\n      ]\n    }\n  },\n  \"corrupted_subtree_root\": false,\n  \"root_hash\": \"A5uW54VXDM4jUryDkxN8Vauk8kE=\",\n  \"tree_type\": \"replicated\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Ruby Client Library\nDESCRIPTION: This command uses the `gem install` command to install the official Vault client library for Ruby. It downloads and installs the library from RubyGems.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ gem install vault\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Lambda Extension for Zip Packaged Functions\nDESCRIPTION: ARN for adding the Vault Lambda Extension as a layer to Lambda functions packaged as zip archives.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_5\n\nLANGUAGE: text\nCODE:\n```\narn:aws:lambda:<your-region>:634166935893:layer:vault-lambda-extension:11\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent Listeners and Cache in HCL\nDESCRIPTION: Example configuration showing Vault agent cache persistence settings and multiple TCP listeners. Demonstrates setting up a regular listener and a metrics-only listener with their respective configurations and TLS settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/caching/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\n# Other Vault agent configuration blocks\n# ...\n\ncache {\n\tpersist = {\n\t\ttype = \"kubernetes\"\n\t\tpath = \"/vault/agent-cache/\"\n\t\tkeep_after_import = true\n\t\texit_on_err = true\n\t\tservice_account_token_file = \"/tmp/serviceaccount/token\"\n\t}\n}\n\nlistener \"tcp\" {\n    address = \"127.0.0.1:8100\"\n    tls_disable = true\n}\n\nlistener \"tcp\" {\n    address = \"127.0.0.1:3000\"\n    tls_disable = true\n    role = \"metrics_only\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Self Token Renewal\nDESCRIPTION: This snippet shows the JSON payload that can be sent with the self-token renewal request, which includes an optional time increment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"increment\": \"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: FIPS Integrity Test Failure Example in Vault\nDESCRIPTION: Shows the expected output when a FIPS integrity test fails after GDB modifies the binary, demonstrating the HMAC verification that occurs during Vault Enterprise startup with BoringCrypto.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/fips/fips1402.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nContinuing.\nFIPS integrity test failed.\nExpected: 18d35ae031f649825a4269d68d2e62583d060a31d359690f97b9c8bf8120cdf75b405f74be7018094da7eb5261f2f86d0f481cc3b5a9c7c432268d94bf91aad9\nCalculated: 111502a3201de3b23f54b29d79ca6a1a754f94ecfc57a379444aac0d3ada68bf3c06834e6d84e68599bdf763e28e2c994fcdaeac84adabd180b59cad5fc980bb\n\nThread 1 \"vault\" received signal SIGABRT, Aborted.\n```\n\n----------------------------------------\n\nTITLE: Hash Data Request Payload\nDESCRIPTION: Sample JSON payload for hashing data with base64 encoded input.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/tools.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"adba32==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI KMS Seal with User Principal (HCL)\nDESCRIPTION: This snippet demonstrates how to configure the OCI KMS seal using User Principal authentication. It includes the auth_type_api_key, crypto_endpoint, management_endpoint, and key_id parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/ocikms.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"ocikms\" {\n    auth_type_api_key   = true\n    crypto_endpoint     = \"<kms-crypto-endpoint>\"\n    management_endpoint = \"<kms-management-endpoint>\"\n    key_id              = \"<kms-key-id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Okta Group Properties\nDESCRIPTION: JSON response showing the properties of an Okta group, including assigned policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"812229d7-a82e-0b20-c35b-81ce8c1b9fa6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"policies\": [\"default\", \"admin\"]\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Read AppRole - Shell Request\nDESCRIPTION: HTTP request to read properties of an existing AppRole\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/approle/role/application1\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging for SAML Plugin in Vault\nDESCRIPTION: This shell command enables verbose logging for the SAML plugin in Vault. It sets the default role and turns on verbose logging, which is useful for debugging but should not be left on in production.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/<SAML_PLUGIN_PATH>/config \\\n   default_role=\"<ADFS_ROLE>\"                \\\n   verbose_logging=true\n```\n\n----------------------------------------\n\nTITLE: Reading GitHub App Configuration\nDESCRIPTION: GET request to retrieve details of a configured GitHub app in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_30\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/sync/github-apps/my-custom-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault CLI Redirect Behavior\nDESCRIPTION: Examples showing how to disable redirect behavior in Vault CLI using either a command line flag or environment variable. This setting prevents the CLI from following the full HTTP redirect chain and instead honors only the first redirect response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/disable-redirects.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-disable-redirects\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_DISABLE_REDIRECTS=1\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Configuration File on PowerShell\nDESCRIPTION: This snippet creates a vault.hcl configuration file with essential settings for Vault on a Windows system, ensuring proper path formatting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_13\n\nLANGUAGE: powershell\nCODE:\n```\n@\"\nui            = true\ncluster_addr  = \"http://127.0.0.1:8201\"\napi_addr      = \"https://127.0.0.1:8200\"\ndisable_mlock = true\n\nstorage \"raft\" {\n  path    = \"$(${env:VAULT_HOME}.Replace('\\','\\\\'))\\Data\"\n  node_id = \"127.0.0.1\"\n}\n\nlistener \"tcp\" {\n  address       = \"0.0.0.0:8200\"\n  cluster_address = \"0.0.0.0:8201\"\n  tls_disable = 1\n}\n\"@ | Out-File -FilePath ${env:VAULT_HOME}/Config/vault.hcl -Encoding ascii\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Kerberos Configuration\nDESCRIPTION: Example JSON payload containing the base64-encoded keytab, service account name, and configuration flags for the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"add_group_aliases\": false,\n  \"keytab\": \"BQIAAAA6AAEACk1BVFJJWC5MQU4ACXZhdWx0X3N2YwAAAAFdzZSjAgAXABDwhEyRR9nRqkpP8KTn2A83AAAAAg==\",\n  \"remove_instance_name\": false,\n  \"service_account\": \"vault_svc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Configuration Override\nDESCRIPTION: Example of installing Vault with a custom configuration value override\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n    --set \"server.dev.enabled=true\"\n```\n\n----------------------------------------\n\nTITLE: LIST Response for LDAP Static Roles\nDESCRIPTION: Shows the JSON response when listing available static roles in the LDAP secrets engine, returning an array of role names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n[\"hashicorp\", \"bob\"]\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Server Name in Vault\nDESCRIPTION: Demonstrates two methods for configuring the TLS server name in Vault: using a CLI flag and setting an environment variable. The TLS server name is used for SNI host resolution during TLS handshake with Vault servers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/tls-server-name.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-tls-server-name \"hostname.domain\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_TLS_SERVER_NAME=\"hostname.domain\"\n```\n\n----------------------------------------\n\nTITLE: Build Vault (Powershell)\nDESCRIPTION: Builds the Vault binary for the current system using the `make dev` command. The resulting binary is placed in the `bin` directory within the Vault project.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_9\n\nLANGUAGE: powershell\nCODE:\n```\n\".\\\\make dev\"\n```\n\n----------------------------------------\n\nTITLE: Adding Static Account Support for GCP Secrets Engine in Vault\nDESCRIPTION: This feature allows the use of existing service accounts for generating service account keys and access tokens in the GCP Secrets Engine of HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12023.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**GCP Secrets Engine Static Accounts**: Adds ability to use existing service accounts for generation\nof service account keys and access tokens.\n```\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Upgrade Commands\nDESCRIPTION: Shell commands for orchestrating Vault upgrades using pod labels.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/kubernetes.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade vault --set='server.image.tag=1.19.0'\n\nkubectl delete pod --selector=vault-active=false \\\n    --selector=vault-version=1.2.3\n\nkubectl delete pod --selector=vault-active=true \\\n    --selector=vault-version=1.2.3\n```\n\n----------------------------------------\n\nTITLE: Docker Container Image Wrapper Creation with Curl\nDESCRIPTION: Demonstrates how to create a custom Docker image based on HashiCorp Vault Enterprise with curl installed using Alpine package manager\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.17.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM hashicorp/vault-enterprise\nRUN apk add curl\n```\n\n----------------------------------------\n\nTITLE: Curl Request for MFA Method Destruction\nDESCRIPTION: Example curl command to remove an MFA method from a specific entity using the Vault API, demonstrating authentication and endpoint usage\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\\\n    http://127.0.0.1:8200/v1/sys/mfa/method/totp/my_totp/admin-destroy\n```\n\n----------------------------------------\n\nTITLE: Creating High Availability Locks Table in PostgreSQL\nDESCRIPTION: SQL schema definition for creating a table to manage high availability locks with key, identity, value, and expiration tracking\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/postgresql.mdx#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE vault_ha_locks (\n  ha_key                                      TEXT COLLATE \"C\" NOT NULL,\n  ha_identity                                 TEXT COLLATE \"C\" NOT NULL,\n  ha_value                                    TEXT COLLATE \"C\",\n  valid_until                                 TIMESTAMP WITH TIME ZONE NOT NULL,\n  CONSTRAINT ha_key PRIMARY KEY (ha_key)\n);\n```\n\n----------------------------------------\n\nTITLE: KV Helper Methods Release Note\nDESCRIPTION: Release note entry documenting the addition of helper methods in Vault's API for simplifying common operations with Key-Value secrets, specifically reading and writing KV secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15305.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\napi: KV helper methods to simplify the common use case of reading and writing KV secrets\n```\n\n----------------------------------------\n\nTITLE: Customizing Google Service Endpoints in Vault CLI for GCP\nDESCRIPTION: This snippet describes an enhancement that allows users to customize the Google service endpoints used by the underlying client in the Vault CLI. This functionality offers greater flexibility and control over the network endpoints, which can be crucial for configurations in specific environments. No additional dependencies are specified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15592.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nauth/gcp: Enable the Google service endpoints used by the underlying client to be customized \\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Auth Identity in Vault\nDESCRIPTION: This snippet demonstrates how to configure the AWS Auth identity in Vault to explicitly specify the required metadata fields. This is necessary to address a known issue preventing token renewal in Vault 1.4.1 when using AWS Auth. It sets `ec2_metadata` and `iam_metadata` to include specific fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.4.1.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/aws/config/identity \\\n  ec2_metadata=account_id,auth_type,instance_id,region \\\n  iam_metadata=account_id,auth_type,client_user_id,canonical_arn,inferred_entity_id,inferred_aws_region\n```\n\n----------------------------------------\n\nTITLE: Installing Vault in External Mode on OpenShift\nDESCRIPTION: This command installs Vault in external mode on OpenShift, relying on an existing external Vault server. It sets the OpenShift flag and specifies the external Vault address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/openshift.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n    --set \"global.openshift=true\" \\\n    --set \"injector.externalVaultAddr=http://external-vault:8200\"\n```\n\n----------------------------------------\n\nTITLE: Read AppRole - JSON Response\nDESCRIPTION: Sample response showing AppRole configuration details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"token_ttl\": 1200,\n    \"token_max_ttl\": 1800,\n    \"secret_id_ttl\": 600,\n    \"secret_id_num_uses\": 40,\n    \"token_policies\": [\"default\"],\n    \"period\": 0,\n    \"bind_secret_id\": true,\n    \"secret_id_bound_cidrs\": []\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading a PKI Role Definition\nDESCRIPTION: This code snippet demonstrates how to read the definition of a specific role in the PKI secrets engine using the Vault API. It involves using a `GET` request to the `/pki/roles/:name` endpoint, where `:name` should be replaced with the name of the role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform with Vault\nDESCRIPTION: This snippet shows how to configure Terraform to use the HashiCorp Vault provider. It defines two Vault entities with case-sensitive names, demonstrating a potential issue with Vault's deduplication process. The configuration requires the HashiCorp Vault provider and expects identities to be recognized without case sensitivity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/terraform-refs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    vault = {\n      source = \"hashicorp/vault\"\n    }\n  }\n}\n\nprovider \"vault\" {}\n\nresource \"vault_identity_entity\" \"BOB\" {\n  name      = \"BOB\"\n  policies  = [\"TEST\"]\n}\n\nresource \"vault_identity_entity\" \"bob\" {\n    name      = \"bob\"\n    policies  = [\"test\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Cloud Foundry Auth Role in JSON\nDESCRIPTION: JSON payload for creating a role in the Cloud Foundry auth method, specifying bound application IDs, space IDs, organization IDs, instance IDs, CIDR restrictions, and token parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bound_application_ids\": [\"09d7eb6a-afc2-49a0-bb32-858c22f2b346\"],\n  \"bound_space_ids\": [\"21005ebb-8943-433e-84e6-d9d9d7338853\"],\n  \"bound_organization_ids\": [\"9785a884-5e93-49bd-97ee-57bf7c2b20e0\"],\n  \"bound_instance_ids\": [\"f3e0f176-3f83-4efb-5842-2ff4\"],\n  \"bound_cidrs\": [\"127.0.0.1/32\", \"128.252.0.0/16\"],\n  \"policies\": [\"default\"],\n  \"ttl\": \"1h\",\n  \"max_ttl\": \"1h\",\n  \"period\": \"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting KV Secrets Engine Plugin Update in Vault\nDESCRIPTION: This markdown release note indicates that the Key-Value secrets engine plugin in HashiCorp Vault has been updated to version 0.16.2. This is a change-type release note that documents a version upgrade for an existing component.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22790.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/kv: Update plugin to v0.16.2\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Affinity in Vault Secrets Operator\nDESCRIPTION: Example configuration for pod affinity settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\naffinity:\n  nodeAffinity:\n    requiredDuringSchedulingIgnoredDuringExecution:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: topology.kubernetes.io/zone\n          operator: In\n          values:\n          - antarctica-east1\n          - antarctica-west1\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy via CLI\nDESCRIPTION: Command to delete a policy in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_27\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault delete sys/policy/policy-name\n```\n\n----------------------------------------\n\nTITLE: Hash Data Response\nDESCRIPTION: Sample JSON response containing the computed hash in base64 format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/tools.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sum\": \"dGhlIHF1aWNrIGJyb3duIGZveAo=\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Instance Profile VaultAuth\nDESCRIPTION: YAML configuration for setting up a VaultAuth profile in VSO for instance profile authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: vaultauth-aws-instance-example\n  namespace: <K8S_NAMESPACE>\nspec:\n  vaultConnectionRef: <VAULT_CONNECTION_NAME>\n  mount: aws\n  method: aws\n  aws:\n    role: <VAULT_AWS_INSTANCE_ROLE>\n    region: <AWS_REGION>\n```\n\n----------------------------------------\n\nTITLE: Configuring allowed headers for AWS IAM authentication in Vault\nDESCRIPTION: This command sets the allowed header values for AWS IAM authentication, providing a workaround for the authentication issues in affected Vault versions. It explicitly allows commonly needed headers including X-Amz-Security-Token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/aws-invalid-header.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault write auth/aws/config/client \\\n   allowed_sts_header_values=\"Content-Type\" \\\n   allowed_sts_header_values=\"Content-Length\" \\\n   allowed_sts_header_values=\"User-Agent\" \\\n   allowed_sts_header_values=\"X-Amz-Date\" \\\n   allowed_sts_header_values=\"Authorization\" \\\n   allowed_sts_header_values=\"X-Amz-Security-Token\" \\\n   allowed_sts_header_values=\"Host\" \\\n   allowed_sts_header_values=\"X-Vault-Aws-Iam-Server-Id\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vault License Path Environment Variable in Shell\nDESCRIPTION: Demonstrates how to set the VAULT_LICENSE_PATH environment variable to specify the location of a Vault Enterprise license file. This variable takes precedence over the license_path configuration parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/license_path.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_LICENSE_PATH=/local/path/to/vault.hclic\n```\n\n----------------------------------------\n\nTITLE: Unauthenticated Metrics Access Configuration\nDESCRIPTION: Configuration to enable unauthenticated access to Vault's metrics endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  telemetry {\n    unauthenticated_metrics_access = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Replication RPC Client Forward Metric in Markdown\nDESCRIPTION: A markdown table defining the vault.replication.rpc.client.forward metric. This metric is a summary type that measures the time in milliseconds required to complete a forward request for the replication RPC client.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/replication/rpc/client/forward.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.replication.rpc.client.forward ((#vault-replication-rpc-client-forward))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a forward request for the client\n```\n\n----------------------------------------\n\nTITLE: Filtering Vault Usage Metrics by Namespace\nDESCRIPTION: This command narrows the scope of usage metrics to a specific namespace (education) and its child namespaces using the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/client-count/usage-metrics.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator usage -namespace education\n```\n\n----------------------------------------\n\nTITLE: Configuring MSSQL with Custom Database and Table (HCL)\nDESCRIPTION: This snippet showcases a customized setup for the MSSQL storage backend in Vault, allowing the use of a specific database name, table, and schema. This flexibility is crucial for tailored deployments in various environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/mssql.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"mssql\" {\n  database = \"my-vault\"\n  table    = \"vault-data\"\n  schema   = \"vlt\"\n  username = \"user1234\"\n  password = \"pass5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Verify CA Certificate Format with OpenSSL\nDESCRIPTION: The command checks the formatting and content of a CA certificate, using OpenSSL for validation. The input file should be a valid certificate in 'ca.crt'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ openssl x509 -in ca.crt -text -noout\n```\n\n----------------------------------------\n\nTITLE: Rechecking Authenticated Token Duration - Shell Session\nDESCRIPTION: After updating the max lease TTL, this snippet validates the successful authentication via the AppRole and confirms the new token duration complying with the updated constraints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/approle/login role_id=<ROLE_ID> secret_id=<SECRET_ID>\n\nKey                     Value\n---                     -----\ntoken                   hvs.CAESIOzTpLX4naKw-epzhcb3DneZ9ZuRTx4tKh5mTT1CajLQGh4KHGh2cy5TUFFhY3QzVzdmSTFwQUduOWlrMVRWaUE\ntoken_accessor          blc2MGA4EmmqEROzqlotFbqr\ntoken_duration          2880h\ntoken_renewable         true\ntoken_policies          [\"default\" \"jenkins\"]\nidentity_policies       []\npolicies                [\"default\" \"jenkins\"]\ntoken_meta_role_name    jenkins\n```\n\n----------------------------------------\n\nTITLE: Looking up a Token in Vault\nDESCRIPTION: This command retrieves information about a specific token, including its accessor, creation time, entity ID, and associated policies. The entity ID is used to associate the token with the user's identity, which is necessary for MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault token lookup 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: Vault CLI Command Basic Usage\nDESCRIPTION: Shows the basic command syntax and help option usage for a Vault CLI command\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/templates/cli-page.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault COMMAND_NAME SYNTAX_STRING\n\n$ vault COMMAND_NAME [-help | -h]\n```\n\n----------------------------------------\n\nTITLE: Example of Correcting SAML Role for ADFS in Vault\nDESCRIPTION: This shell command provides a specific example of how to correct the BoundSubjects configuration for an ADFS role in Vault. It sets the bound_subjects to include multiple domains separated by commas.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/boundsubjects.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/saml/role/adfs-default \\\nbound_subjects=\"*@example.com, *@ext.example.com\"\n```\n\n----------------------------------------\n\nTITLE: Querying Available Visible Mounts in Vault API (Shell)\nDESCRIPTION: This snippet demonstrates how to make a GET request to the `/sys/internal/ui/mounts` endpoint to list all enabled auth methods in Vault. It uses curl to send an unauthenticated HTTP request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-mounts.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/internal/ui/mounts\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Storage Get Metric Definition\nDESCRIPTION: Defines the timer metric for measuring retrieval time from Vault's Raft storage backend. The metric measures milliseconds required to get a value for a given path from the finite state machine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/raft-storage/get.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value | Description\n----------- | ----- | -----------\ntimer       | ms    | Time required to retrieve a value for the given path from the finite state machine\n```\n\n----------------------------------------\n\nTITLE: Confirming New Vault Resources in Dev Namespace\nDESCRIPTION: Command to list and verify the newly created Vault secrets in the dev namespace while filtering out system paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nvault secrets list -namespace=\"dev\" | grep -vEw '(cubbyhole|identity|sys)'\n```\n\n----------------------------------------\n\nTITLE: Obtaining CA Certificate Using BOSH\nDESCRIPTION: This command retrieves the CA certificate for Diego instance identity from BOSH in a CF Dev environment. It requires BOSH CLI to access the credentials file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ bosh int --path /diego_instance_identity_ca ~/.cfdev/state/bosh/creds.yml\n```\n\n----------------------------------------\n\nTITLE: Disabling SSH Command Warning Flags in Vault CLI\nDESCRIPTION: Implements a bug fix to suppress unnecessary flag warning messages when using the SSH command in HashiCorp Vault's command-line interface\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20502.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncli: disable printing flags warnings messages for the ssh command\n```\n\n----------------------------------------\n\nTITLE: Enabling CF Roles with Vault's Role Based Quotas\nDESCRIPTION: This release note signifies an improvement to Vault's Cloud Foundry (CF) authentication method.  CF roles are now compatible with Vault's role-based quotas, providing a more integrated approach to managing resources and permissions within Vault. No specific code is provided in the snippet, but the note suggests changes within the Vault codebase to enable this compatibility.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17196.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"auth/cf: Enables CF roles to be compatible with Vault's role based quotas.\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Vault Agent Configuration File with -config Flag\nDESCRIPTION: This example demonstrates how to use the -config flag to specify the path to a Vault Agent configuration file. The flag is required and can be repeated to specify multiple configuration files or directories.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/agent/flags/config.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n-config /path/to/file.hcl\n```\n\n----------------------------------------\n\nTITLE: Multiple JSON objects for exclusions\nDESCRIPTION: This snippet illustrates how to use multiple JSON objects for excluding fields from audit logs, combining multiple conditions to handle various scenarios and ensuring comprehensive data protection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"condition\": \"\\\"/request/mount_type\\\" == transit\",\n    \"fields\": [ \"/request/data\", \"/response/data\" ]\n  },\n  {\n    \"condition\":  \"\\\"/auth/client_token\\\" matches \\\"hmac.+\\\"\",\n    \"fields\": [ \"/auth/entity_id\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Specific IPv6 Address Configuration\nDESCRIPTION: Configuration for Vault to listen on a specific IPv6 address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  address         = \"[2001:1c04:90d:1c00:a00:27ff:fefa:58ec]:8200\"\n  cluster_address = \"[2001:1c04:90d:1c00:a00:27ff:fefa:58ec]:8201\"\n}\n\n# Advertise the non-loopback interface\napi_addr = \"https://[2001:1c04:90d:1c00:a00:27ff:fefa:58ec]:8200\"\ncluster_addr = \"https://[2001:1c04:90d:1c00:a00:27ff:fefa:58ec]:8201\"\n```\n\n----------------------------------------\n\nTITLE: Identity Management Metrics\nDESCRIPTION: Metrics tracking entity creation, active entities, alias counts, and monthly active usage\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/all.mdx#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/identity/entity/active/monthly.mdx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Unix Socket Listener in Vault (HCL)\nDESCRIPTION: This snippet demonstrates how to configure Vault to listen on a Unix domain socket. It specifies the address parameter, which is required and defaults to '/run/vault.sock'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/unix.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"unix\" {\n  address = \"/run/vault.sock\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enable DR Secondary Sample Payload\nDESCRIPTION: JSON payload for enabling DR secondary replication with a token parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS EKS S3 Snapshot Authentication Constraint\nDESCRIPTION: Specific authentication requirement for saving automated integrated storage snapshots to Amazon S3 buckets when using AWS EKS\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/automated-integrated-storage-snapshots.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nVault cannot use AWS IAM roles with EKS service accounts for authentication to save automated integrated storage snapshots to Amazon S3 buckets. You must set the `aws_access_key_id` and `aws_secret_access_key` parameters.\n```\n\n----------------------------------------\n\nTITLE: Enable Auth Method Text Command\nDESCRIPTION: This command enables the 'userpass' authentication method in Vault, which is necessary to configure Duo for MFA. You must have Vault installed and running to execute this command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth enable userpass\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Arguments to Vault Server Startup\nDESCRIPTION: Demonstrates how to pass additional command-line arguments to the Vault server during startup\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nextraArgs: '-config=/path/to/extra/config.hcl -log-format=json'\n```\n\n----------------------------------------\n\nTITLE: Improving LDAP Token Group Search Speed\nDESCRIPTION: This note describes the performance improvement made to the LDAP authentication method in HashiCorp Vault by adding concurrency to the token group searches. This enhancement aims to decrease the login time, resulting in faster authentication processes for users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22659.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nauth/ldap: improved login speed by adding concurrency to LDAP token group searches\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Updating Active Directory Secrets Plugin in Vault\nDESCRIPTION: A release note indicating that the Active Directory secrets plugin for HashiCorp Vault has been updated to version 0.16.1.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22856.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/ad: Update plugin to v0.16.1\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Decryption - JSON\nDESCRIPTION: This JSON object shows the expected response when decrypting ciphertext using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"plaintext\": \"hello world\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Test Redirect Handling in OIDC Consent Block\nDESCRIPTION: In testing mode, calls a special test redirect function with the built URL instead of actually redirecting, allowing tests to verify the redirect URL without navigating away.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlet { redirect, ...params } = this.args;\nlet redirectUrl = this.buildUrl(redirect, params);\nif (Ember.testing) {\n  this.args.testRedirect(redirectUrl.toString());\n} else {\n```\n\n----------------------------------------\n\nTITLE: Running Manual Tidy Operation in Vault PKI\nDESCRIPTION: Commands to manually run and verify tidy operations for PKI certificate management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write <mount>/tidy \\\n    tidy_cert_store=true \\\n    tidy_revoked_certs=true \\\n    tidy_acme=true \\\n    tidy_revocation_queue=true \\\n    tidy_cross_cluster_revoked_certs=true \\\n    tidy_revoked_cert_issuer_associations=true\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read <mount>/tidy-status\n```\n\n----------------------------------------\n\nTITLE: Handling Key Comments with SSH Key Generation\nDESCRIPTION: Use ssh-keygen with comments for SSH key generation, and manage key parameters for processing by HashiCorp Vault CLI and API. This involves adapting key contextual information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-extension\nCODE:\n```\nssh-keygen -C \"...Comments\" -N \"\" -t rsa -b 4096 -f host-ca\n```\n\nLANGUAGE: shell-extension\nCODE:\n```\n# Using CLI:\nvault secrets enable -path=hosts-ca ssh\nKEY_PRI=$(cat ~/.ssh/id_rsa | sed -z 's/\\n/\\\\n/g')\nKEY_PUB=$(cat ~/.ssh/id_rsa.pub | sed -z 's/\\n/\\\\n/g')\n# Create / update keypair in Vault\nvault write ssh-client-signer/config/ca \\\n  generate_signing_key=false \\\n  private_key=\"${KEY_PRI}\" \\\n  public_key=\"${KEY_PUB}\"\n```\n\nLANGUAGE: shell-extension\nCODE:\n```\n# Using API:\ncurl -X POST -H \"X-Vault-Token: ...\" -d '{\"type\":\"ssh\"}' http://127.0.0.1:8200/v1/sys/mounts/hosts-ca\nKEY_PRI=$(cat ~/.ssh/id_rsa | sed -z 's/\\n/\\\\n/g')\nKEY_PUB=$(cat ~/.ssh/id_rsa.pub | sed -z 's/\\n/\\\\n/g')\ntee payload.json <<EOF\n{\n  \"generate_signing_key\" : false,\n  \"private_key\"          : \"${KEY_PRI}\",\n  \"public_key\"           : \"${KEY_PUB}\"\n}\nEOF\n# Create / update keypair in Vault\ncurl -X POST -H \"X-Vault-Token: ...\" -d @payload.json http://127.0.0.1:8200/v1/hosts-ca/config/ca\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Reading Activation Flags\nDESCRIPTION: This JSON response shows the result of querying activation flags. It includes two lists: 'activated' (empty in this example) and 'unactivated' (containing the 'secrets-sync' feature).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/activation-flags.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request_id\": \"9f70548c-a039-24a6-147d-7fa43698e044\",\n    \"lease_id\": \"\",\n    \"lease_duration\": 0,\n    \"renewable\": false,\n    \"data\": {\n        \"activated\": [],\n        \"unactivated\": [\n            \"secrets-sync\"\n        ]\n    },\n    \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a RADIUS User with cURL\nDESCRIPTION: This cURL command demonstrates how to delete an existing RADIUS user from the authentication method using a DELETE request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/radius/users/test-user\n```\n\n----------------------------------------\n\nTITLE: Installing Vault C# Client Library\nDESCRIPTION: This command uses the `dotnet add package` command to install the VaultSharp client library for C#.  It adds the VaultSharp package to the project's dependencies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ dotnet add package VaultSharp\n```\n\n----------------------------------------\n\nTITLE: Output for Auth Mount Configuration - Plaintext\nDESCRIPTION: The output of reading the auth mount configuration illustrates the current state of the mount settings, including default and max lease TTLs, enabling administrators to make informed adjustments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nKey                  Value\n---                  -----\ndefault_lease_ttl    768h\ndescription          n/a\nforce_no_cache       false\nmax_lease_ttl        768h\ntoken_type           default-service\n```\n\n----------------------------------------\n\nTITLE: Default Username Template for MySQL Aurora/RDS/Legacy Plugins\nDESCRIPTION: Template string used to generate dynamic usernames for MySQL Aurora, RDS and Legacy database plugins. Combines role name and random string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mysql-maria.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n{{ printf \"v-%s-%s-%s\" (.RoleName | truncate 4) (random 20) | truncate 16 }}\n```\n\n----------------------------------------\n\nTITLE: Generate DR Secondary Token\nDESCRIPTION: HTTP POST request to generate an activation token for a DR secondary with specified identifier and optional TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"us-east-1\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/primary/secondary-token\n```\n\n----------------------------------------\n\nTITLE: Reading an Entity Alias Response (JSON)\nDESCRIPTION: This JSON response shows the structure returned when querying an entity alias by its ID. It provides details such as the creation time, canonical ID, custom metadata, the ID of the alias, last update time, local flag, metadata, mount accessor, mount path, mount type, and the name of the alias.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"creation_time\": \"2017-07-25T21:41:09.820717636Z\",\n    \"canonical_id\": \"404e57bc-a0b1-a80f-0a73-b6e92e8a52d3\",\n    \"custom_metadata\": {\n      \"contact_email\":\"james@example.com\"\n    },\n    \"id\": \"34982d3d-e3ce-5d8b-6e5f-b9bb34246c31\",\n    \"last_update_time\": \"2017-07-25T21:41:09.820717636Z\",\n    \"local\": false,\n    \"metadata\": {\n      \"group\": \"san_francisco\",\n      \"region\": \"west\"\n    },\n    \"mount_accessor\": \"auth_userpass_e50b1a44\",\n    \"mount_path\": \"userpass/\",\n    \"mount_type\": \"userpass\",\n    \"name\": \"testuser\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rotating Role Credentials - HTTP API - Shell\nDESCRIPTION: This snippet provides the command to rotate the credentials for a role that manages an Organization or Team by sending a POST request to the `/terraform/rotate-role/:name` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/terraform/rotate-role/testing\n```\n\n----------------------------------------\n\nTITLE: Vault Seal Status Response - Sealed State\nDESCRIPTION: JSON response showing the seal status when Vault is in a sealed state. Includes information about initialization status, shares configuration, and seal type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/seal-status.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"build_date\": \"2024-11-15T14:17:42Z\",\n  \"initialized\": true,\n  \"migration\": false,\n  \"n\": 3,\n  \"nonce\": \"\",\n  \"progress\": 1,\n  \"recovery_seal\": false,\n  \"removed_from_cluster\": false,\n  \"sealed\": true,\n  \"storage_type\": \"raft\",\n  \"t\": 2,\n  \"type\": \"shamir\",\n  \"version\": \"1.19.0-beta1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Using Exit After Auth Flag in Vault Agent\nDESCRIPTION: Command line flag that causes the Vault agent to exit with code 0 after successfully authenticating and writing the token to the configured sink. This is useful for one-time authentication scenarios.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/agent/flags/exit-after-auth.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-exit-after-auth\n```\n\n----------------------------------------\n\nTITLE: Demote DR Primary Request\nDESCRIPTION: HTTP POST request to demote a DR primary cluster to a secondary state while maintaining cluster identity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/primary/demote\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Deleting KV Secret Metadata in Vault\nDESCRIPTION: A sample curl request demonstrating how to use the DELETE endpoint to permanently remove a key's metadata and all version data. This operation cannot be undone and will remove all version history for the specified key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/secret/metadata/my-secret\n```\n\n----------------------------------------\n\nTITLE: Response for Tokenization Check Request (JSON)\nDESCRIPTION: This JSON response confirms whether a tokenized value exists for the provided plaintext input.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_65\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"tokenized\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for CRL Retrieval\nDESCRIPTION: This JSON snippet represents a typical response from the Vault when requesting CRLs. It includes fields for authentication, data, lease duration, and warnings, providing insight into the retrieved information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"serials\": {\n      \"13\": {}\n    }\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Azure Auth Role\nDESCRIPTION: JSON response format showing the configuration of an Azure auth role, including token policies, max TTL, JWT expiration limit, and bound resource groups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"token_policies\": [\n        \"default\",\n        \"dev\",\n        \"prod\"\n    ],\n    \"max_ttl\": 1800000,\n    \"max_jwt_exp\": 10000,\n    \"bound_resource_groups\": [\n        \"vault-dev\",\n        \"vault-staging\",\n        \"vault-prod\"\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: SSH into the Host Machine Using the Signed Key\nDESCRIPTION: This code snippet demonstrates how to SSH into the host machine using the signed key. Both the signed public key and the corresponding private key must be supplied as authentication.  The `-i` flag specifies the identity file for both the private key and signed certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ssh/signed-ssh-certificates.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ ssh -i signed-cert.pub -i ~/.ssh/id_rsa username@10.0.23.5\n```\n\n----------------------------------------\n\nTITLE: Serving Database Plugin with Multiplexing in Go\nDESCRIPTION: This snippet demonstrates how to update a database plugin's main.go file to utilize plugin multiplexing. It involves replacing `dbplugin.Serve()` with `dbplugin.ServeMultiplex()` to allow a single plugin process to manage multiple database connections. This enables Vault to efficiently manage external database plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.10.0.mdx#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n\"dbplugin.Serve()\"\n```\n\n----------------------------------------\n\nTITLE: Improving Transit Encryption Batch Resilience\nDESCRIPTION: Modifies transit secrets engine to continue processing remaining items in a batch even if one item fails during encryption or decryption operations\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13111.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/transit: Don't abort transit encrypt or decrypt batches on single item failure.\n```\n\n----------------------------------------\n\nTITLE: Create/Update RGP Policy Payload\nDESCRIPTION: JSON payload for creating or updating an RGP policy\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policy\": \"rule main = {...\",\n  \"enforcement_level\": \"soft-mandatory\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Lease Count Quota with cURL in Vault\nDESCRIPTION: Sample cURL request to get details of a specific lease count quota by name. This sends a GET request to the quota endpoint requiring a Vault token for authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/lease-count-quotas.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request GET \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/quotas/lease-count/global-lease-count-quota\n```\n\n----------------------------------------\n\nTITLE: Configuring High Availability with Google Cloud Spanner in Vault\nDESCRIPTION: Configuration example for enabling high availability with Google Cloud Spanner storage backend in Vault. Requires setting the api_addr for leader election and enabling high availability via the ha_enabled parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-spanner.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\napi_addr = \"https://vault-leader.my-company.internal\"\n\nstorage \"spanner\" {\n  database   = \"projects/demo/instances/abc123/databases/vault-data\"\n  ha_enabled = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: Register Vault Agent Service using sc.exe\nDESCRIPTION: Creates a Windows service for Vault Agent using sc.exe command with automatic startup. The command specifies the service name, binary path, display name and startup type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/winsvc.mdx#2025-04-14_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nsc.exe create VaultAgent binPath=\"C:\\vault\\vault.exe agent -config=C:\\vault\\agent-config.hcl\" displayName=\"Vault Agent\" start=auto\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Old and New URL Patterns for KV v2 Secrets Engine in Vault UI\nDESCRIPTION: This snippet shows the old and new URL patterns for accessing KV v2 secrets in the Vault UI. The change affects versions 1.15.0 and later, causing 404 errors for older URLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/kv2-url-change.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Old URL pattern:\nui/vault/secrets/hma/show/${secretPath}\n\n# New URL pattern:\nui/vault/secrets/hma/kv/${encodedUriComponent(secretPath)}/details\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Role Policies via CLI\nDESCRIPTION: Creates roles with policies for both EC2 and IAM authentication methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/aws/role/dev-role auth_type=ec2 bound_ami_id=ami-fce3c696 policies=prod,dev max_ttl=500h\n\n$ vault write auth/aws/role/dev-role-iam auth_type=iam \\\n              bound_iam_principal_arn=arn:aws:iam::123456789012:role/MyRole policies=prod,dev max_ttl=500h\n```\n\n----------------------------------------\n\nTITLE: Updating Retention Months Configuration in Vault\nDESCRIPTION: This shell command demonstrates how to update the 'retention_months' value to 48 using the Vault CLI, which serves as a workaround for the Performance Standby issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/perf-standbys-revert-to-standby.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/internal/counters/config retention_months=48\n```\n\n----------------------------------------\n\nTITLE: Verification Progress Response\nDESCRIPTION: JSON response showing current progress of rekey verification\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nonce\": \"8b112c9e-2738-929d-bcc2-19aff249ff10\",\n  \"t\": 3,\n  \"n\": 5,\n  \"progress\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SAML Role in JSON\nDESCRIPTION: This JSON payload defines a SAML role with bound subjects, attributes, and token policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"bound_attributes\": \"group=admin\",\n  \"bound_subjects\": \"*@hashicorp.com\",\n  \"bound_subjects_type\": \"glob\",\n  \"token_policies\": \"writer\",\n  \"ttl\": \"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring FoundationDB Storage Backend in HCL\nDESCRIPTION: HCL configuration block for setting up FoundationDB as Vault's storage backend. Includes TLS security settings, API version specification, and high availability configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/foundationdb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"foundationdb\" {\n  api_version      = 520\n  cluster_file     = \"/path/to/fdb.cluster\"\n\n  tls_verify_peers = \"I.CN=MyTrustedIssuer,I.O=MyCompany\\, Inc.,I.OU=Certification Authority\"\n  tls_ca_file      = \"/path/to/ca_bundle.pem\"\n  tls_cert_file    = \"/path/to/cert.pem\"\n  tls_key_file     = \"/path/to/key.pem\"\n  tls_password     = \"PrivateKeyPassword\"\n\n  path             = \"vault-top-level-directory\"\n  ha_enabled       = \"true\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Users Response Example in JSON\nDESCRIPTION: This JSON response shows the format of data returned when listing all RADIUS users, providing an array of usernames under the 'keys' field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"devuser\", \"produser\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Cancel DR Token Generation in Vault\nDESCRIPTION: cURL command to cancel an in-progress DR operation token generation attempt using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/generate-operation-token/attempt\n```\n\n----------------------------------------\n\nTITLE: Creating a Wrapper Container Image with Curl\nDESCRIPTION: This Dockerfile adds curl to a Vault Enterprise container image by using the HashiCorp image as a base. This method requires rebuilding images and managing your registry. Ensure Docker and APK package manager are accessible.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.16.x.mdx#2025-04-14_snippet_2\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM hashicorp/vault-enterprise\nRUN apk add curl\n```\n\n----------------------------------------\n\nTITLE: Response from OIDC Authorization Endpoint\nDESCRIPTION: The JSON response format from the Authorization Endpoint. It returns an authorization code and the state value that was provided in the request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": \"BDSc9kVYljxND93YpveBuJtSvguM3AWe\",\n  \"state\": \"af0ifjsldkj\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Single Mount Details in Vault API (JSON)\nDESCRIPTION: This JSON snippet demonstrates a sample response from the `/sys/internal/ui/mounts/:path` endpoint. It includes detailed information about a specific mount, such as its accessor, configuration, description, and type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-mounts.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessor\": \"cubbyhole_50fbe8d2\",\n  \"config\": {\n    \"default_lease_ttl\": 0,\n    \"force_no_cache\": false,\n    \"max_lease_ttl\": 0\n  },\n  \"description\": \"per-token private secret storage\",\n  \"external_entropy_access\": false,\n  \"local\": true,\n  \"options\": null,\n  \"path\": \"cubbyhole/\",\n  \"seal_wrap\": false,\n  \"type\": \"cubbyhole\",\n  \"uuid\": \"4bb40403-d9ba-d2ee-087a-4c6d371db5f2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling OIDC Authentication in Vault\nDESCRIPTION: CLI command to enable the OIDC authentication method at a specific path in Vault. This is required before configuring OIDC authentication with ADFS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth enable -path=<YOUR_OIDC_MOUNT_PATH> oidc\n```\n\n----------------------------------------\n\nTITLE: Deleting RabbitMQ Role via CLI\nDESCRIPTION: Shows how to delete a RabbitMQ role using Vault CLI by specifying the role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\nvault delete rabbitmq/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Authentication Token in Environment\nDESCRIPTION: Example showing how to set the VAULT_TOKEN environment variable for authenticating to HashiCorp Vault. The token is a Vault-issued service token that provides authentication for CLI operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/token.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_TOKEN=\"hvs.CvmS4c0DPTvHv5eJgXWMJg9r\"\n```\n\n----------------------------------------\n\nTITLE: Reading the Authentication Mount Accessor for CMPv2\nDESCRIPTION: This snippet retrieves the accessor field of the CMPv2 authentication mount using the Vault CLI, necessary for further PKI configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cmpv2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read -field=accessor sys/auth/auth/cert\n```\n\n----------------------------------------\n\nTITLE: Querying Client Activity Data in JSON (Vault)\nDESCRIPTION: This JSON snippet shows a sample response from querying client activity data in Vault. It includes detailed counts of clients, entities, and secret syncs across different namespaces and mounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"d0d37f90-96ec-28c7-b59c-b53612cbbcad\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"acme_clients\": 0,\n    \"by_namespace\": [\n      {\n        \"counts\": {\n          \"acme_clients\": 0,\n          \"clients\": 1,\n          \"entity_clients\": 0,\n          \"non_entity_clients\": 1,\n          \"secret_syncs\": 0\n        },\n        \"mounts\": [\n          {\n            \"counts\": {\n              \"acme_clients\": 0,\n              \"clients\": 1,\n              \"entity_clients\": 0,\n              \"non_entity_clients\": 1,\n              \"secret_syncs\": 0\n            },\n            \"mount_path\": \"auth_token_0747d59c\"\n            \"mount_type\":\"token/\",\n          }\n        ],\n        \"namespace_id\": \"root\",\n        \"namespace_path\": \"\"\n      }\n    ],\n    \"clients\": 1,\n    \"entity_clients\": 0,\n    \"months\": [\n      {\n        \"counts\": {\n          \"acme_clients\": 0,\n          \"clients\": 1,\n          \"entity_clients\": 0,\n          \"non_entity_clients\": 1,\n          \"secret_syncs\": 0\n        },\n        \"namespaces\": [\n          {\n            \"counts\": {\n              \"acme_clients\": 0,\n              \"clients\": 1,\n              \"entity_clients\": 0,\n              \"non_entity_clients\": 1,\n              \"secret_syncs\": 0\n            },\n            \"mounts\": [\n              {\n                \"counts\": {\n                  \"acme_clients\": 0,\n                  \"clients\": 1,\n                  \"entity_clients\": 0,\n                  \"non_entity_clients\": 1,\n                  \"secret_syncs\": 0\n                },\n                \"mount_path\": \"auth_token_0747d59c\"\n                \"mount_type\":\"token/\",\n              }\n            ],\n            \"namespace_id\": \"root\",\n            \"namespace_path\": \"\"\n          }\n        ],\n        \"new_clients\": {\n          \"counts\": {\n            \"acme_clients\": 0,\n            \"clients\": 1,\n            \"entity_clients\": 0,\n            \"non_entity_clients\": 1,\n            \"secret_syncs\": 0\n          },\n          \"namespaces\": [\n            {\n              \"counts\": {\n                \"acme_clients\": 0,\n                \"clients\": 1,\n                \"entity_clients\": 0,\n                \"non_entity_clients\": 1,\n                \"secret_syncs\": 0\n              },\n              \"mounts\": [\n                {\n                  \"counts\": {\n                    \"acme_clients\": 0,\n                    \"clients\": 1,\n                    \"entity_clients\": 0,\n                    \"non_entity_clients\": 1,\n                    \"secret_syncs\": 0\n                  },\n                  \"mount_path\": \"auth_token_0747d59c\"\n                  \"mount_type\":\"token/\",\n                }\n              ],\n              \"namespace_id\": \"root\",\n              \"namespace_path\": \"\"\n            }\n          ]\n        },\n        \"timestamp\": \"2022-04-01T04:00:00Z\"\n      }\n    ],\n    \"non_entity_clients\": 1,\n    \"secret_syncs\": 0\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Reading KV Secrets Using KV Command\nDESCRIPTION: Example of reading secrets using the dedicated KV command with mount point specification\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/read.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get -mount=secret customers\n```\n\n----------------------------------------\n\nTITLE: MSSQL Connection Configuration Payload\nDESCRIPTION: JSON payload for configuring MSSQL database connection settings including plugin name, roles, connection URL, and credentials\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mssql.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"plugin_name\": \"mssql-database-plugin\",\n  \"allowed_roles\": \"readonly\",\n  \"connection_url\": \"sqlserver://{{username}}:{{password}}@localhost:1433\",\n  \"max_open_connections\": 5,\n  \"max_connection_lifetime\": \"5s\",\n  \"username\": \"sa\",\n  \"password\": \"yourStrong(!)Password\"\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for CF Auto-auth Documentation\nDESCRIPTION: YAML front matter block defining the documentation page metadata including title and description for Cloud Foundry auto-authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/cf.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: Auto-auth with Cloud Foundry\ndescription: >\n  Use Cloud Foundry (CF) for auto-authentication with Vault Agent or Vault Proxy.\n---\n```\n\n----------------------------------------\n\nTITLE: LDAP Group Read Response\nDESCRIPTION: Example JSON response showing the policies associated with a specific LDAP group in the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"policies\": [\"admin\", \"default\"]\n  },\n  \"renewable\": false,\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Minimum Backoff Configuration for Vault Agent Auto-Auth\nDESCRIPTION: This release note describes the addition of a 'min_backoff' option to the method stanza in Vault Agent's auto-auth configuration. This new option allows users to configure the initial backoff duration for the auto-auth process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15204.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nagent/auto-auth: Add `min_backoff` to the method stanza for configuring initial backoff duration.\n```\n```\n\n----------------------------------------\n\nTITLE: Register Vault Agent Service with Spaces in Path\nDESCRIPTION: Example of registering Vault Agent service using New-Service when the installation path contains spaces. Shows proper path escaping.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/winsvc.mdx#2025-04-14_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Service -Name \"VaultAgent\" -BinaryPathName '\"C:\\my dir\\vault.exe\" agent -config=\"C:\\my dir\\agent-config.hcl\"' -DisplayName \"Vault Agent\" -StartupType \"Automatic\"\n```\n\n----------------------------------------\n\nTITLE: Using pkcs11-tool to List Slots and Generate Keys\nDESCRIPTION: These shell commands demonstrate how to use `pkcs11-tool` from the OpenSC project to interact with the Vault PKCS#11 provider. The first command lists the available slots, and the second generates an AES key using the specified parameters. `VAULT_LOG_FILE=/dev/null` suppresses log output to stdout.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ VAULT_LOG_FILE=/dev/null pkcs11-tool --module ./libvault-pkcs11.so -L\nAvailable slots:\nSlot 0 (0x0): Vault slot 0\ntoken label        : Token 0\ntoken manufacturer : HashiCorp\ntoken model        : Vault Enterprise\ntoken flags        : token initialized, PIN initialized, other flags=0x60\nhardware version   : 1.12\nfirmware version   : 1.12\nserial num         : 1234\npin min/max        : 0/255\n\n$ VAULT_LOG_FILE=/dev/null pkcs11-tool --module ./libvault-pkcs11.so --keygen -a abc123 --key-type AES:32 \\\n--extractable --allow-sw 2>/dev/null\nKey generated:\nSecret Key Object; AES length 32\nVALUE:\nlabel:      abc123\nUsage:      encrypt, decrypt, wrap, unwrap\nAccess:     none\n```\n\n----------------------------------------\n\nTITLE: KMIP Roles List Response in JSON\nDESCRIPTION: This JSON response shows the list of KMIP roles available within a specific scope, returned as an array of role names under the 'keys' property.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"myrole\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading CORS Settings with cURL in Vault API\nDESCRIPTION: This request retrieves the current CORS configuration from a Vault server. It requires an authentication token passed via the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-cors.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/cors\n```\n\n----------------------------------------\n\nTITLE: Supporting Configuration Reloading via SIGHUP in Vault\nDESCRIPTION: This snippet outlines an improvement in Vault (enterprise) to support reloading its configuration through a SIGHUP signal, which automates reporting updates. The functionality enhances operational efficiency by allowing on-the-fly configuration changes without a full restart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20680.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore (enterprise): support reloading configuration for automated reporting via SIGHUP\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Signature with Google Cloud KMS Key in Vault\nDESCRIPTION: This snippet demonstrates how to send a POST request to verify a signature using a Google Cloud KMS key integrated with Vault. It includes the curl command and the expected JSON response format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/verify/my-key\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"valid\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Suppressing Log Warnings in Vault\nDESCRIPTION: This snippet describes the improvement made to suppress log warnings when the events system is not enabled. It enhances user experience by reducing unnecessary log clutter during normal operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19593.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nevents: Suppress log warnings triggered when events are sent but the events system is not enabled.\"\n```\n\n----------------------------------------\n\nTITLE: Dynamic Role Credentials - JSON Response\nDESCRIPTION: Sample response showing the distinguished names, password and username for a dynamic LDAP role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"distinguished_names\": [\n    \"cn=v_token-dispname_testrole_jmZMnjS42a_1680580467,ou=users,dc=hashicorp,dc=com\"\n  ],\n  \"password\": \"OWexB3OzYYLFiotWxUS2EheGpriwR20fa2yA7JGTsnBREcxyqpwf73htofMihxcC\",\n  \"username\": \"v_token-dispname_testrole_jmZMnjS42a_1680580467\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Listing Revoked Certificates in Vault PKI\nDESCRIPTION: JSON response showing a list of revoked certificate serial numbers returned from the Vault PKI revoked certificates endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"3d:80:91:c3:c2:34:3b:81:69:3d:92:a3:80:69:db:53:04:26:ab:b4\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Secret Environment Variables\nDESCRIPTION: Demonstrates how to populate environment variables from Kubernetes secrets, useful for sensitive credentials\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nextraSecretEnvironmentVars:\n  - envName: AWS_SECRET_ACCESS_KEY\n    secretName: vault\n    secretKey: AWS_SECRET_ACCESS_KEY\n```\n\n----------------------------------------\n\nTITLE: Authorizing Control Group Request in Vault - JSON Payload\nDESCRIPTION: JSON payload for authorizing a control group request. It requires an accessor parameter which is the token accessor of the control group wrapping token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/control-group.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessor\": \"0ad21b78-e9bb-64fa-88b8-1e38db217bde\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Lookup Response\nDESCRIPTION: Example output of the token lookup command showing detailed information about the token, including its entity_id, policies, and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nKey                 Value\n---                 -----\naccessor            a91d97f4-1c7d-6af3-e4bf-971f74f9fab9\ncreation_time       1502245243\ncreation_ttl        2764800\ndisplay_name        userpass-testuser\nentity_id           307d6c16-6f5c-4ae7-46a9-2d153ffcbc63\nexpire_time         2017-09-09T22:20:43.448543132-04:00\nexplicit_max_ttl    0\nid                  70f97438-e174-c03c-40fe-6bcdc1028d6c\nissue_time          2017-08-08T22:20:43.448543003-04:00\nmeta                map[username:testuser]\nnum_uses            0\norphan              true\npath                auth/userpass/login/testuser\npolicies            [default ping-policy]\nrenewable           true\nttl                 2764623\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Wrapping Key Using cURL in Transit Secrets Engine\nDESCRIPTION: Sample cURL command for retrieving the RSA public wrapping key used for importing encrypted key material. Uses the GET method to access the /transit/wrapping_key endpoint with Vault authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/transit/wrapping_key\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Timeout in Vault\nDESCRIPTION: A new default request timeout of 90 seconds is enforced. This can be overwritten in the config file if longer request times are anticipated.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nRequest Timeouts: A default request timeout of 90s is now enforced. This\nsetting can be overwritten in the config file. If you anticipate requests\ntaking longer than 90s this setting should be updated before upgrading.\n```\n\n----------------------------------------\n\nTITLE: Deleting Duplicate Entity Alias Using Vault API\nDESCRIPTION: This snippet illustrates how to use the Vault API to delete a duplicate entity alias. It requires the `X-Vault-Token` for authentication and the specific alias ID. This method provides programmatic control for managing duplicates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/different-case.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                      \\\n   --request DELETE                         \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n   ${VAULT_ADDR}/v1/identity/entity-alias/id/<id>\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                      \\\n   --request DELETE                         \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n   ${VAULT_ADDR}/v1/identity/entity-alias/id/df3568a4-3b65-4104-9481-1129ecbed72f | jq\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from HCP Vault Dedicated Cluster using Shell Command\nDESCRIPTION: This snippet demonstrates how to use the 'hcp disconnect' command in Vault to invalidate live sessions to an HCP Vault Dedicated cluster. It's a simple shell command that requires no additional parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/hcp/disconnect.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault hcp disconnect\n```\n\n----------------------------------------\n\nTITLE: Disabling Performance Standbys in Vault Enterprise\nDESCRIPTION: Performance Standbys are now enabled by default in supported Vault Enterprise versions. They can be disabled per-node using a configuration flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nPerformance Standbys On By Default: If you flavor/license of Vault\nEnterprise supports Performance Standbys, they are on by default. You can\ndisable this behavior per-node with the `disable_performance_standby`\nconfiguration flag.\n```\n\n----------------------------------------\n\nTITLE: List Stores Sample Response\nDESCRIPTION: JSON response containing list of store names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"example-store\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Auth Method Configuration in Vault CLI\nDESCRIPTION: This snippet demonstrates how to view the current configuration of an auth method (github in this case) using the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/auth/github/tune\nKey                  Value\n---                  -----\ndefault_lease_ttl    768h\ndescription          n/a\nforce_no_cache       false\nmax_lease_ttl        768h\ntoken_type           default-service\n```\n\n----------------------------------------\n\nTITLE: Reading KMIP Role Configuration in Shell\nDESCRIPTION: This shell command retrieves the configuration of a specific KMIP role within a scope by sending a GET request to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for LDAP User's Policies\nDESCRIPTION: This JSON provides a sample response for fetching LDAP user policies, showing the associated policies and groups for the user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"policies\": [\n      \"admin\",\n      \"default\"\n    ],\n    \"groups\": \"\"\n  },\n  \"renewable\": false,\n  \"lease_id\": \"\"\n  \"lease_duration\": 0,\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Vault GUI URL Examples\nDESCRIPTION: Illustrates the URL formats for accessing the Vault web interface, including direct IP access and DNS resolution via Consul service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/ui.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nhttps://10.0.1.35:8200/ui/\n\nhttps://vault.service.consul:8200/ui/\n```\n\n----------------------------------------\n\nTITLE: OIDC Client: Sample Response\nDESCRIPTION: This is a sample JSON response from reading an OIDC client. It includes the access token TTL, assignments, client ID, client secret, client type, ID token TTL, key, and redirect URIs. The client ID and client secret are automatically generated by Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n      \"access_token_ttl\":1800,\n      \"assignments\":[],\n      \"client_id\":\"014zXvcvbvIZWwD5NfD1Uzmv7c5JBRMb\",\n      \"client_secret\":\"hvo_secret_bZtgQPBZaJXK7F5vOI7JlvEuLOfOUS7DmwynFjE3xKcsen7TyowqPFfYFXG2tbWM\",\n      \"client_type\": \"confidential\",\n      \"id_token_ttl\":3600,\n      \"key\":\"test-key\",\n      \"redirect_uris\":[]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Measuring DynamoDB List Operation Time in Vault\nDESCRIPTION: A metric that tracks the time required to complete a LIST operation in the DynamoDB storage backend. Measured in milliseconds, this metric helps monitor the performance of listing operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/dynamodb/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.dynamodb.list ((#vault-dynamodb-list))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `LIST` operation against the DynamoDB storage backend\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault In-Memory Storage (HCL)\nDESCRIPTION: This code snippet demonstrates how to configure Vault to use the in-memory storage backend. It's a simple configuration block with no parameters.  This configuration is not suitable for production environments as all data is lost upon restart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/in-memory.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"inmem\" {}\n```\n\n----------------------------------------\n\nTITLE: Defining vault.raft.peers Metric in Markdown Table\nDESCRIPTION: This snippet defines the vault.raft.peers metric using a markdown table. It specifies the metric type as a gauge, the value as a number, and provides a description of what the metric represents.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/raft/peers.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value   | Description\n----------- | ------- | -----------\nguage       | number  | The number of peers in the raft cluster configuration\n```\n\n----------------------------------------\n\nTITLE: Generating Vault Policy from CLI Command\nDESCRIPTION: Illustrates how to use the -output-policy flag to generate a Vault policy for a specific CLI command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put -output-policy kv/secret value=itsasecret\n\npath \"kv/data/secret\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading TOTP Key Configuration in Vault\nDESCRIPTION: Retrieves the configuration of a TOTP key. This endpoint returns parameters like account_name, algorithm, digits, issuer, and period, but not the secret itself for security reasons.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/totp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/totp/keys/my-key\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"account_name\": \"test@gmail.com\",\n    \"algorithm\": \"SHA1\",\n    \"digits\": 6,\n    \"issuer\": \"Google\",\n    \"period\": 30\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking a Token Leaving Its Children - Shell\nDESCRIPTION: This snippet illustrates revoking a token using the 'orphan' mode, such that the token is revoked but its children remain intact. This behavior is controlled by the '-mode=orphan' flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/revoke.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token revoke -mode=orphan 96ddf4bc-d217-f3ba-f9bd-017055595017\nSuccess! Revoked token (if it existed)\n```\n\n----------------------------------------\n\nTITLE: Reloading Multiple Auth Plugin Mounts in Vault\nDESCRIPTION: Example demonstrating how to reload multiple authentication plugin mounts simultaneously.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/reload.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin reload \\\n  -mounts auth/my-custom-plugin-1 \\\n  -mounts auth/my-custom-plugin-2\n```\n\n----------------------------------------\n\nTITLE: Deleting Password Policy using cURL\nDESCRIPTION: This snippet shows how to delete a password policy using a cURL DELETE request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE\n    http://127.0.0.1:8200/v1/sys/policies/password/my-policy\n```\n\n----------------------------------------\n\nTITLE: Tracking WAL Streaming Initialization Metric\nDESCRIPTION: A counter metric that records the occurrences of successfully finding a starting point in the merkle tree during WAL streaming process in Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/logshipper/streamwals/guard_found.mdx#2025-04-14_snippet_0\n\nLANGUAGE: metrics\nCODE:\n```\nvault.logshipper.streamWALs.guard_found\n```\n\n----------------------------------------\n\nTITLE: Reloading Systemd Configuration\nDESCRIPTION: Command to reload systemd daemon after configuration changes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsudo systemctl daemon-reload\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Merkle Tree Corruption Check\nDESCRIPTION: JSON response showing the corruption status of the Merkle tree on a DR secondary cluster, including details about corrupted subtrees and pages.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"d4b2ad1a-6e5f-7f9e-edfe-558eb89a40e6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"merkle_corruption_report\": {\n      \"corrupted_root\": false,\n      \"corrupted_tree_map\": {\n        \"1\": {\n          \"corrupted_index_tuples_map\": {\n            \"5\": {\n              \"corrupted\": false,\n              \"subpages\": [\n                28\n              ]\n            }\n          },\n          \"corrupted_subtree_root\": false,\n          \"root_hash\": \"DyGc6rQTV9XgyNSff3zimhi3FJM=\",\n          \"tree_type\": \"replicated\"\n        },\n        \"2\": {\n          \"corrupted_index_tuples_map\": null,\n          \"corrupted_subtree_root\": false,\n          \"root_hash\": \"EXmRTdfYCZTm5i9wLef9RQqyLCw=\",\n          \"tree_type\": \"local\"\n        }\n      },\n      \"last_corruption_check_epoch\": \"2023-09-11T11:25:59.44956-07:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving LDAP Static Credentials with GET Request\nDESCRIPTION: Demonstrates how to retrieve the actual credentials (including password) for a static role named 'hashicorp' using a GET request to the /ldap/static-cred endpoint. Requires a valid Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/ldap/static-cred/hashicorp\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy for Community Plugins in Vault\nDESCRIPTION: Commands to register two instances of the same plugin with different HTTP proxy settings. This allows routing plugin traffic through different proxies based on region or other requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register -sha256=<SHA256 Hex value of the plugin binary> \\\n    -env HTTP_PROXY=eu.example.com \\\n    auth \\\n    jwt-eu\n\nSuccess! Registered plugin: jwt-eu\n\n$ vault plugin register -sha256=<SHA256 Hex value of the plugin binary> \\\n    -env HTTP_PROXY=us.example.com \\\n    auth \\\n    jwt-us\n\nSuccess! Registered plugin: jwt-us\n```\n\n----------------------------------------\n\nTITLE: Tidy AppRole Secret IDs Request\nDESCRIPTION: This curl command triggers a maintenance task to clean up invalid entries in the token store related to AppRole secret IDs. This operation should be used sparingly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/approle/tidy/secret-id\n```\n\n----------------------------------------\n\nTITLE: User JSON Configuration for Elasticsearch\nDESCRIPTION: This JSON defines the configuration for a Vault user in Elasticsearch, including password, roles, full name, and metadata about the Vault plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n \"password\" : \"myPa55word\",\n \"roles\" : [ \"vault\" ],\n \"full_name\" : \"Hashicorp Vault\",\n \"metadata\" : {\n   \"plugin_name\": \"Vault Plugin Database Elasticsearch\",\n   \"plugin_url\": \"https://github.com/hashicorp/vault-plugin-database-elasticsearch\"\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding support for dumping pprof files\nDESCRIPTION: This improvement allows the Vault server to dump pprof files to the filesystem when the environment variable `VAULT_PPROF_WRITE_TO_FILE=true` is set. This feature is triggered by sending the SIGUSR2 signal to the server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20609.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncommand/server: Add support for dumping pprof files to the filesystem via SIGUSR2 when \\n`VAULT_PPROF_WRITE_TO_FILE=true` is set on the server.\"\n```\n\n----------------------------------------\n\nTITLE: Azure Auth Rotate Root Feature\nDESCRIPTION: This feature adds support for root rotation in the Azure Auth engine. This allows for more secure and automated management of the root credentials used by the Azure Auth engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19077.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\n**Azure Auth Rotate Root**: Add support for rotate root in Azure Auth engine\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Token Helper (Linux shell)\nDESCRIPTION: This snippet demonstrates how to configure a custom token helper within the Vault CLI configuration file on a Linux system. The `token_helper` parameter is set to the fully qualified path of the helper script. The configuration file is typically located under the user's home directory as `.vault`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token-helper.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\necho 'token_helper = \"/path/to/token/helper.sh\"' >> ${HOME}/.vault\n```\n\n----------------------------------------\n\nTITLE: Implementing Enterprise Alert Component in MDX\nDESCRIPTION: Examples of using the Enterprise Alert component in both standalone and inline contexts within markdown files. Supports custom HTML content but not markdown in custom messages.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n# Page Headline\n\n<EnterpriseAlert />\n\nContinued markdown content...\n```\n\nLANGUAGE: mdx\nCODE:\n```\n# Page Headline\n\n<EnterpriseAlert>\n  My custom text here, and <a href=\"#\">a link</a>!\n</EnterpriseAlert>\n\nContinued markdown content...\n```\n\nLANGUAGE: mdx\nCODE:\n```\n### Some Enterprise Feature <EnterpriseAlert inline />\n\nContinued markdown content...\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Role with Base64 Encoded Creation Statement\nDESCRIPTION: This command configures a role using a Base64 encoded creation statement to handle special characters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/roles/my-role \\\n    db_name=mysql \\\n    creation_statements=\"Q1JFQVRFIFVTRVIgJ3t7bmFtZX19J0AnJScgSURFTlRJRklFRCBCWSAne3twYXNzd29yZH19JzsgR1JBTlQgU0VMRUNUIE9OIGBmb29hcHBcXyVgLiogVE8gJ3t7bmFtZX19J0AnJSc7\" \\\n    default_ttl=\"1h\" \\\n    max_ttl=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Venafi Secret for Venafi Cloud - Shell Script\nDESCRIPTION: This snippet writes a configuration for a Venafi secret that associates names in Vault with the appropriate authentication settings for enrolling certificates via Venafi Cloud.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/venafi/cloud \\\n    apikey=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\" \\\n    zone=\"zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz\"\n```\n\n----------------------------------------\n\nTITLE: Setting the Fallback Audit Device in Vault Enterprise\nDESCRIPTION: Shows how to configure an audit device as the fallback for filtering purposes. Vault Enterprise only supports one fallback audit device at a time, which is used when other audit devices don't match filtering criteria.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/fallback.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfallback=true\n```\n\n----------------------------------------\n\nTITLE: Importing Vault Ruby Client Library\nDESCRIPTION: This code snippet shows how to import the Vault client library in a Ruby program. It uses the `require` keyword to load the library.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"vault\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Legacy Couchbase Connection\nDESCRIPTION: Command to configure Vault with Couchbase plugin for clusters prior to version 6.5.0, including bucket name specification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/couchbase.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write database/config/my-couchbase-database \\\n    plugin_name=\"couchbase-database-plugin\" \\\n    hosts=\"couchbase://127.0.0.1\" \\\n    tls=true \\\n    base64pem=\"${BASE64PEM}\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass\" \\\n    allowed_roles=\"my-*-role\" \\\n    bucket_name=\"travel-sample\"\n```\n\n----------------------------------------\n\nTITLE: Application 1 VaultAuth Configuration\nDESCRIPTION: Configuration for the first application showing VaultAuth and VaultStaticSecret resources using the global authentication settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: app1\n  namespace: apps\nspec:\n  kubernetes:\n    role: app1\n    serviceAccount: app1\n  vaultAuthGlobalRef:\n    allowDefault: true\n    namespace: admin\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  name: app1-secret\n  namespace: apps\nspec:\n  destination:\n    create: true\n    name: app1-secret\n  hmacSecretData: true\n  mount: apps\n  path: app1\n  type: kv-v2\n  vaultAuthRef: app1\n```\n\n----------------------------------------\n\nTITLE: Custom Chunk Size Configuration\nDESCRIPTION: Configuration example demonstrating how to set a custom chunk size for uploads to optimize memory usage and request frequency.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-storage.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"gcs\" {\n  bucket     = \"mycompany-vault-data\"\n  chunk_size = \"512\"\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering License Updates Reload in Vault\nDESCRIPTION: This snippet documents an improvement in Vault (enterprise) where license updates now trigger a reload of the reporting configuration and the activity log. This ensures that any changes in licensing are immediately reflected in operational metrics, enhancing real-time reporting capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20680.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore (enterprise): license updates trigger a reload of reporting and the activity log\"\n```\n\n----------------------------------------\n\nTITLE: Enabling userpass Auth Method in Vault\nDESCRIPTION: This snippet demonstrates how to enable the userpass authentication method in Vault. Enabling this method is a prerequisite for creating users and logging in with usernames and passwords.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-totp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth enable userpass\n```\n\n----------------------------------------\n\nTITLE: Preventing Cross Role Secret ID Deletion in AppRole\nDESCRIPTION: Adds a nil check for secret ID entries during deletion to prevent unauthorized cross-role secret ID removal, enhancing security in the AppRole authentication method\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19186.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth/approle: Add nil check for the secret ID entry when deleting via secret id accessor preventing cross role secret id deletion\n```\n\n----------------------------------------\n\nTITLE: Early Return from TTL Form Handler in Testing Environment\nDESCRIPTION: Returns early from a function when in testing mode to avoid unnecessary operations during automated tests, after setting time value and handling changes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nthis.set('time', parsedTime);\nthis.handleChange();\nif (Ember.testing) {\n  return;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Transform Secrets Engine to UI Features List in Vault\nDESCRIPTION: This release note indicates an improvement to the Vault UI where the transform secrets engine has been added to the features list, making it more visible to users in the interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12003.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: add transform secrets engine to features list\n```\n```\n\n----------------------------------------\n\nTITLE: Mapping GitHub Team to Policies with JSON Payload\nDESCRIPTION: JSON payload for mapping a GitHub team to Vault policies. This assigns the specified policy to members of the team.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"dev-policy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Editing Vault Service Configuration\nDESCRIPTION: Command to edit the Vault systemd service unit file to modify process properties.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nsudo $EDITOR /etc/systemd/system/vault.service\n```\n\n----------------------------------------\n\nTITLE: Sync Associations Response Format\nDESCRIPTION: JSON response structure showing associated destinations for a secret, including sync status and timestamps for different destination types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request_id\": \"uuid\",\n    \"lease_id\": \"\",\n    \"renewable\": false,\n    \"lease_duration\": 0,\n    \"data\": {\n        \"associated_destinations\": {\n            \"aws-sm/my-dest-1\": {\n                \"type\": \"aws-sm\",\n                \"name\": \"my-dest-1\",\n                \"sync_status\": \"UNSYNCED\",\n                \"updated_at\": \"2023-11-02T14:24:24.07391144-04:00\"\n            },\n            \"gh/my-dest-1\": {\n                \"type\": \"gh\",\n                \"name\": \"my-dest-1\",\n                \"sync_status\": \"SYNCED\",\n                \"updated_at\": \"2023-11-02T14:24:28.719833506-04:00\"\n            }\n        }\n    },\n    \"wrap_info\": null,\n    \"warnings\": null,\n    \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Get Enabled Feature Flags from Vault API using cURL\nDESCRIPTION: This snippet demonstrates how to make a GET request to the /sys/internal/ui/feature-flags endpoint using cURL. This unauthenticated endpoint returns a list of enabled feature flags that are relevant to the Vault UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-feature.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/internal/ui/feature-flags\n```\n\n----------------------------------------\n\nTITLE: Decrypting Ciphertext - HCL\nDESCRIPTION: This HCL policy defines the capabilities for decrypting ciphertext using a specified key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/decrypt/my-key\" {\n  capabilities = [\"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking Root Token via API\nDESCRIPTION: API request to revoke a root token using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n  --request POST \\\n  --header \"X-Vault-Token: ...\" \\\n  --data '{\"token\": \"<token>\"}' \\\n  https://vault.hashicorp.rocks/v1/auth/token/revoke\n```\n\n----------------------------------------\n\nTITLE: Setting Log Verbosity Level for All Loggers (JSON Payload)\nDESCRIPTION: JSON payload for setting the verbosity level for all loggers. This example sets the log level to 'debug' for all components in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"debug\",\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB Creation Statement JSON Format\nDESCRIPTION: Sample creation statement for MongoDB user creation. This JSON structure defines the database and roles to assign when creating a new database user, specifying read access to the 'foo' database.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodb.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"db\": \"admin\",\n  \"roles\": [\n    {\n      \"role\": \"read\",\n      \"db\": \"foo\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Providing Key Share to Generate Recovery Token in Vault\nDESCRIPTION: This snippet shows how to submit a root key share to progress a recovery token generation attempt using a POST request with the key and nonce in the payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/generate-recovery-token/update\n```\n\n----------------------------------------\n\nTITLE: Sample Two-Phase Login MFA Response in JSON\nDESCRIPTION: This JSON response shows the structure of a two-phase login MFA response, including MFA requirements and constraints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"1044c151-13ea-1cf5-f6ed-000c42efd477\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": null,\n  \"warnings\": [\n    \"A login request was issued that is subject to MFA validation. Please make sure to validate the login by sending another request to mfa/validate endpoint.\"\n  ],\n  \"auth\": {\n    \"client_token\": \"\",\n    \"accessor\": \"\",\n    \"policies\": null,\n    \"token_policies\": null,\n    \"identity_policies\": null,\n    \"metadata\": null,\n    \"orphan\": false,\n    \"entity_id\": \"\",\n    \"lease_duration\": 0,\n    \"renewable\": false,\n    \"mfa_requirement\": {\n      \"mfa_request_id\": \"d0c9eec7-6921-8cc0-be62-202b289ef163\",\n      \"mfa_constraints\": {\n        \"enforcementConfigUserpass\": {\n          \"any\": [\n            {\n              \"type\": \"totp\",\n              \"id\": \"820997b3-110e-c251-7e8b-ff4aa428a6e1\",\n              \"uses_passcode\": true,\n              \"name\": \"sample_mfa_method_name\"\n            }\n          ]\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Policy Command Usage\nDESCRIPTION: Complete usage syntax for the vault policy command showing available subcommands including delete, list, read, and write operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/policy/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault policy <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    delete    Deletes a policy by name\n    list      Lists the installed policies\n    read      Prints the contents of a policy\n    write     Uploads a named policy from a file\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Atlas Secrets Engine Plugin in Vault\nDESCRIPTION: Release note detailing the update of the MongoDB Atlas secrets engine plugin to version 0.10.1 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22748.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/mongodbatlas: Update plugin to v0.10.1\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Creating a Policy\nDESCRIPTION: JSON payload for creating or updating a policy. The payload contains the policy document which defines access rules and permissions for paths in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policy.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policy\": \"path \\\"secret/foo\\\" {...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Vault Import Plan Command\nDESCRIPTION: Example of using the vault operator import command to generate a new import plan from a configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/import.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator import -config import.hcl plan\n```\n\n----------------------------------------\n\nTITLE: Adding PKCSv1_5_NoOID RSA Signature Support in Vault\nDESCRIPTION: Introduces a new signature method for RSA cryptographic operations without object identifier (OID) in HashiCorp Vault's transit secrets engine. This improvement provides additional flexibility for signature generation and verification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17636.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/transit: Add support for PKCSv1_5_NoOID RSA signatures\n```\n\n----------------------------------------\n\nTITLE: TOTP MFA Secret Generation Response\nDESCRIPTION: This JSON response contains the generated TOTP MFA secret, including a barcode image and a URL for configuring the TOTP authenticator.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"barcode\": \"iVBORw0KGgoAAAANSUhEUgAAAMgAAADIEAAAAADYoy0BAAAGc0lEQVR4nOyd244bOQxEZxbz/7+cRQI4sLWiyCLlTU1wzkMAu1uXTIGSxUv3148fH2DEP396AvDK189/Pj97jR/W9Wi/fs7uz/pZya5H92dk40fzjeY1+XtiIWYgiBkIYsbX84dba7O6B0z3hmgPqO5Z6/WsH3VvynjuDwsxA0HMQBAzvnZfZueI6Pvs93r2+z6ax7qWZ+2zPSP7PutfPW8of08sxAwEMQNBzNjuISqRLyc7X6jnkex8UPVBqXtJxk2PORZiBoKYgSBmXNlDsriIeq6J+umeG1RfVjav7L4JWIgZCGIGgpix3UO6a6MaU4/OD9Fnda2P2qnxl2ge1fbKOFiIGQhiBoKY8bKHdH052V5Q3VPUz9n42XhR++zzStWXVgELMQNBzEAQM37tIbd9MtX4Qvc8EI13q32210Sfb8wHCzEDQcxAEDM+f6532e/86nmiPYk31X2sZP1Pz0PVGP+pPRZiBoKYgSBmbPeQ/9xUvP6geg7p9leNj3RrH7v1K+reRm7vNwBBzEAQM471IVmt3oN31V9E93Xr3KNx1BrD7t+jMl8sxAwEMQNBzDjm9lZj5d04gZoLHPX3rjjFu3J5T/8/LMQMBDEDQcyQ6kPUHNsH1TU+Gi/qr+rLmo6zfq6eTzr9YiFmIIgZCGLG5/M69y5fzfr9Ol613bQ/NaYe9bui5gKczmNYiBkIYgaCmHF85mK01t2KO2Q1h9l43dzgbhxG7b+zZ2EhZiCIGQhiRuvZ77dygNVY+3q9es5Qv1+vT2sIlb0OCzEDQcxAEDMkX1bXN7S2z8brxl2q40b3rXR9bxn4sr4RCGIGgpjxUh8S0a2feFdNYrd/Ndad9Xsrpv/cHgsxA0HMQBAzPk/reXdN7fqA3ln/PZnndE9SxsFCzEAQMxDEjJd4iJqrqtYiPlBr9qZE81znk7V/F8TUjUEQMxDEjO1ze9U1PqtFzO5X87VW1H6i+XXqyneQl/UXgSBmIIgZpdzebgxdPWdMfVnr/dHn23XsWb18VpP4DBZiBoKYgSBmbPOyukzr2Lvnlu781FzkaF7deezAQsxAEDMQxIxjTP33TcN8JpXqOOp9qg8tm586n8qehYWYgSBmIIgZrfcYZvGPW2tztZ0aj8nGzb7Prnfr5z+wED8QxAwEMaP0PvVpzV63zru6pld//6t7SvRZzXmO5rPrBwsxA0HMQBAzpGeddH08WT/VNTv6vZ/NJxp/Wh8S9ZvN5/T/x0LMQBAzEMSMY0y9mpdV3YPU+pNsnGm+1v9dyxhBjaExCGIGgpixPYdUzwUdf/8JNV+qu3dE/aj9Z/Un0XzWcTiHGIMgZiCIGaX3qf+++fLe0f0dP83FVfO0VNS9jXOIMQhiBoKY8esc0vUBqb4ttY49Q13js/uzPKsuSr4XFmIGgpiBIGaM8rKmz0bJxo36nZ5Xov6zcbvnFqWWEQsxA0HMQBAzSs9cXKneH8ULpnUV0/lle0Y3DqOOv2uPhZiBIGYgiBnbOvVunfdKNyf2to9L9UV1Y/Tr/ep5iXiIIQhiBoKYcczLys4P1b2lGwNf23dr99Q8rqnvrOvr+sBC/EAQMxDEjG1M/UHXFxWhxAUq31evd5nmjWU+MvKyvgEIYgaCmLF9F+7Ul7TSrbdQzw/qeOv9K7f+v0o7LMQMBDEDQcw4vj8kYlpf3vUFZe2jeVbbVX1Y1fE6eyAWYgaCmIEgZmyfdVL9XT7NAb5F9xyh7n3Tc1IlToKFmIEgZiCIGaV3UHXrv6P23fyubj1K1l80zwg17yq6vhsfCzE DQcxAEDOOz+2troUZau1hNP40lr/eP61TicbP5nO6joWYgSBmIIgZx7ysiNu+ruj6dB5q7D4ii5Oo82EP+UYgiBkIYob0/pCV2/Uda7/TunX1PJHNq9qvGvN/HgcLMQNBzEAQM1p5WdM6kI mv5zReNo9uvtet+WTz+sBC/EAQMxDEjO0zF99dA9it+6jOM7qe+dKqde7V/qP5nP5eWIgZCGIGgpix3UNUbsXkq/Xd2Thd35zqE5v66Hb9YCFmIIgZCGLGlT3kwS1fUbcGsVq3HvUXnY/U+ ExEZW/DQsxAEDMQxIzS+0Mybq3REd1c3ur5qBs7z/a4zjNWsBAzEMQMBDHjZQ+Z+oAeqGv42o9aq5j1m5HN51ZdfWX+WIgZCGIGgpixfX8I/DmwEDP+DQAA//9kwGH4xZewMgAAAABJRU5E rkJggg==\",\n    \"url\": \"otpauth://totp/vault:4746fb81-028c-cd4e-026b-7dd18fe4c2f4?algorithm=SHA1&digits=6&issuer=vault&period=30&secret=XVE7TOZWJVEWQOATOD7 U53IEAJG72Z2I\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Monthly Client Count Calculation Table\nDESCRIPTION: A markdown table showing how to calculate monthly client counts for Vault versions 1.8-1.10 using billing period updates and manual calculations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/faq/client-count/computing-clients.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMonth     | Billing period in UI     | Result       | Computation\n--------- | ------------------------ | ------------ | -----------\nJanuary   | January                  | `JAN`        | None\nFebruary  | January &nbsp; February  | `JAN_FEB`    | `FEB = JAN_FEB - JAN` \nMarch     | January &nbsp; February  | `JAN_MAR`    | `MAR = JAN_MAR - JAN_FEB` \nApril     | January &nbsp; February  | `JAN_APR`    | `APR = JAN_APR - JAN_MAR` \nMay       | January &nbsp; February  | `JAN_MAY`    | `MAY = JAN_MAY - JAN_APR` \nJune      | January &nbsp; February  | `JAN_JUN`    | `JUN = JAN_JUN - JAN_MAY` \nJuly      | January &nbsp; February  | `JAN_JUL`    | `JUL = JAN_JUL - JAN_JUN` \nAugust    | January &nbsp; February  | `JAN_AUG`    | `AUG = JAN_AUG - JAN_JUL` \nSeptember | January &nbsp; September | `JAN_SEP`    | `SEP = JAN_SEP - JAN_AUG` \nOctober   | January &nbsp; February  | `JAN_OCT`    | `OCT = JAN_OCT - JAN_SEP` \nNovember  | January &nbsp; February  | `JAN_NOV`    | `NOV = JAN_NOV - JAN_OCT` \nDecember  | January &nbsp; February  | `JAN_DEV`    | `DEC = JAN_DEC - JAN_NOV` \n```\n\n----------------------------------------\n\nTITLE: Encode Data Sample Payload\nDESCRIPTION: JSON payload for encoding data with specified transformation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"1111-2222-3333-4444\",\n  \"transformation\": \"ccn-fpe\"\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note - Vault API Certificate Enhancement\nDESCRIPTION: Documents an improvement to the Vault API client that adds support for passing certificates directly as PEM bytes rather than requiring file paths. This enhancement provides more flexibility in certificate handling for API authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14753.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\napi: Add ability to pass certificate as PEM bytes to api.Client.\n```\n\n----------------------------------------\n\nTITLE: Sample Response for CF Auth Role Listing\nDESCRIPTION: JSON response example showing a list of all configured Cloud Foundry authentication roles in Vault. The response contains role names in an array under the 'keys' property.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"role1\", \"role2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TLS Verification Warning Message\nDESCRIPTION: Example of the warning message that appears during cluster initialization when TLS verification fails due to certificate name mismatch.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-tls.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncore: join attempt failed: error=\"error during raft bootstrap init call: Put \\\"https://vault-${N}.${SERVICE}:8200/v1/sys/storage/raft/bootstrap/challenge\\\": x509: certificate is valid for ${SERVICE}, ${SERVICE}.${NAMESPACE}, ${SERVICE}.${NAMESPACE}.svc, ${SERVICE}.${NAMESPACE}.svc.cluster.local, not vault-${N}.${SERVICE}\"\n```\n\n----------------------------------------\n\nTITLE: Configuring High Availability with OCI Object Storage\nDESCRIPTION: This example configures Vault for high availability using the OCI Object Storage backend. It defines the namespace, data bucket, and lock bucket names, and explicitly enables high availability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/oci-object-storage.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"oci\" {\n   namespace_name = \"MyNamespace\"\n   bucket_name = \"DataBucket\"\n   ha_enabled = \"true\"\n   lock_bucket_name = \"LockBucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating SQL Credentials for EKM\nDESCRIPTION: SQL commands to create credentials using AppRole authentication details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nCREATE CREDENTIAL TransitVaultCredentials\n    WITH IDENTITY = '<approle-role-id>',\n    SECRET = '<approle-secret-id>'\nFOR CRYPTOGRAPHIC PROVIDER TransitVaultProvider;\nGO\n\n-- Replace <domain>\\<login> with the SQL Server administrator's login\nALTER LOGIN \"<domain>\\<login>\" ADD CREDENTIAL TransitVaultCredentials;\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Lambda Extension for ARM64 Architecture\nDESCRIPTION: ARN for including the Vault Lambda Extension as a layer in your Lambda function for ARM64 architecture.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\narn:aws:lambda:<your-region>:634166935893:layer:vault-lambda-extension-arm64:6\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Bound Attributes for ADFS Groups\nDESCRIPTION: A concrete example showing how to update a specific SAML role named 'default-adfs' with specific AD groups 'VaultAdmin' and 'VaultUser' for bound attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/saml/role/default-adfs \\\n    bound_attributes=groups=\"VaultAdmin,VaultUser\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Handling for Testing with waitForError Helper\nDESCRIPTION: Helper function for testing that captures errors by temporarily replacing Ember.onerror with a custom handler, then restores the original handler after the test completes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nexport default function waitForError(opts) {\n  const orig = Ember.onerror;\n\n  let error = null;\n  Ember.onerror = err => {\n    error = err;\n  };\n\n  return waitUntil(() => error, opts).finally(() => {\n    Ember.onerror = orig;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: SHA-1 Policy Restriction with HCL\nDESCRIPTION: HCL policy snippet to block the use of the SHA-1 algorithm for signing operations with a named key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_55\n\nLANGUAGE: hcl\nCODE:\n```\npath \"/transit/sign/:name/sha1\" {\n  capabilities = [\"deny\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Vault with Migration Configuration via Helm\nDESCRIPTION: This command installs Vault using Helm with the migration configuration values. It applies the settings for the storage migration and Raft setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault -f vault-migration-values.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Alicloud OSS Storage Backend in HCL\nDESCRIPTION: Basic configuration for setting up Alicloud OSS as a storage backend for Vault. Includes essential parameters for authentication and bucket configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/alicloudoss.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"alicloudoss\" {\n  access_key = \"abcd1234\"\n  secret_key = \"defg5678\"\n  endpoint   = \"oss-us-west-1.aliyuncs.com\"\n  bucket     = \"my-bucket\"\n}\n```\n\n----------------------------------------\n\nTITLE: DELETE Identity Access List Entry using Vault API with curl\nDESCRIPTION: This snippet shows how to delete a specific entry from the identity access list using the Vault API. It sends a DELETE request to the `/auth/aws/identity-accesslist/:instance_id` endpoint, requiring a Vault token. The `instance_id` parameter, specifying the EC2 instance ID to be removed, is mandatory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_51\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/aws/identity-accesslist/i-aab47d37\n```\n\n----------------------------------------\n\nTITLE: Importing OpenAPI Go Client Library\nDESCRIPTION: This code snippet shows how to import the OpenAPI-based Go client library in a Go program. It imports the core client and the schema package.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"github.com/hashicorp/vault-client-go\"\n\t\"github.com/hashicorp/vault-client-go/schema\"\n)\n```\n\n----------------------------------------\n\nTITLE: List Keys Response\nDESCRIPTION: JSON response containing list of PKI keys and their names\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_52\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"f9244f54-adc7-4a5c-6b08-6ca3a3325620\": {\n        \"key_name\": \"imported-root-key\"\n      }\n    },\n    \"keys\": [\n      \"f9244f54-adc7-4a5c-6b08-6ca3a3325620\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Secondary Token Response\nDESCRIPTION: Sample JSON response containing the wrapped secondary activation token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": null,\n  \"warnings\": null,\n  \"wrap_info\": {\n    \"token\": \"fb79b9d3-d94e-9eb6-4919-c559311133d6\",\n    \"ttl\": 300,\n    \"creation_time\": \"2016-09-28T14:41:00.56961496-04:00\",\n    \"wrapped_accessor\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Secrets Operator Error Log\nDESCRIPTION: JSON error log showing a sync failure when VaultAuthGlobal resource is not found.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"error\",\n  \"ts\": \"2024-07-16T17:35:20Z\",\n  \"logger\": \"cachingClientFactory\",\n  \"msg\": \"Failed to get cacheKey from obj\",\n  \"controller\": \"vaultstaticsecret\",\n  \"controllerGroup\": \"secrets.hashicorp.com\",\n  \"controllerKind\": \"VaultStaticSecret\",\n  \"VaultStaticSecret\": {\n    \"name\": \"app1\",\n    \"namespace\": \"apps\"\n  },\n  \"namespace\": \"apps\",\n  \"name\": \"app1\",\n  \"reconcileID\": \"5201f597-6c5d-4d07-ae8f-30a39c80dc54\",\n  \"error\": \"failed getting admin/default, err=VaultAuthGlobal.secrets.hashicorp.com \\\"default\\\" not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Enos Scenarios\nDESCRIPTION: Various commands for executing Enos scenarios, including listing available scenarios, running specific scenarios with different configurations, launching scenarios, validating scenarios, and destroying infrastructure.\nSOURCE: https://github.com/hashicorp/vault/blob/main/enos/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# List all available scenarios\nenos scenario list\n# Run the smoke or upgrade scenario with an artifact that is built locally. Make sure\n# the local machine has been configured as detailed in the requirements\n# section. This will execute the scenario and clean up any resources if successful.\nenos scenario run smoke artifact_source:local\nenos scenario run upgrade artifact_source:local\n# To run the same scenario variants that are run in CI, refer to the scenarios listed\n# in json files under .github/enos-run-matrices directory,\n# adding `artifact_source:local` to run locally.\nenos scenario run smoke backend:consul consul_version:1.12.3 distro:ubuntu seal:awskms artifact_source:local arch:amd64 edition:oss\n# Launch an individual scenario but leave infrastructure up after execution\nenos scenario launch smoke artifact_source:local\n# Check an individual scenario for validity. This is useful during scenario\n# authoring and debugging.\nenos scenario validate smoke artifact_source:local\n# If you've run the tests and desire to see the outputs, such as the URL or\n# credentials, you can run the output command to see them. Please note that\n# after \"run\" or destroy there will be no \"outputs\" as the infrastructure\n# will have been destroyed and state cleared.\nenos scenario output smoke artifact_source:local\n# Explicitly destroy all existing infrastructure\nenos scenario destroy smoke artifact_source:local\n```\n\n----------------------------------------\n\nTITLE: Deleting Rate Limit Quota - CURL Request\nDESCRIPTION: CURL command to delete a rate limit quota by name using the DELETE endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rate-limit-quotas.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request DELETE \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/quotas/rate-limit/global-rate-limiter\n```\n\n----------------------------------------\n\nTITLE: Creating a SAML Authentication Role in Vault\nDESCRIPTION: Command to create a named role for SAML authentication with specific authorization policies. This role defines who can authenticate and what permissions they receive.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write auth/saml/role/admin \\\n    bound_subjects=\"*@hashicorp.com\" \\\n    bound_subjects_type=\"glob\" \\\n    token_policies=\"writer\" \\\n    bound_attributes=group=\"admin\" \\\n    ttl=\"1h\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for PKI Keys Configuration\nDESCRIPTION: JSON response structure returned after configuring PKI keys, showing the default key identifier that has been set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_98\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"default\": \"baadd98d-ec5a-66ac-06b7-dfc91c02c9cf\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MFA-Protected Secret Response\nDESCRIPTION: Example output after successfully completing the PingID MFA validation to access the protected secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nKey                 Value\n---                 -----\nrefresh_interval    768h\ndata                which can only be read after MFA validation\n```\n\n----------------------------------------\n\nTITLE: Enabling Socket Audit Device - Basic Configuration\nDESCRIPTION: Command to enable the socket audit device at the default path in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/socket.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable socket\n```\n\n----------------------------------------\n\nTITLE: Deregistering a Container Plugin Runtime in Vault\nDESCRIPTION: Example showing how to use the 'plugin runtime deregister' command to remove a plugin runtime named 'my-plugin-runtime' of type 'container' from Vault's plugin runtime catalog.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/deregister.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin runtime deregister -type=container my-plugin-runtime\nSuccess! Deregistered plugin runtime: my-plugin-runtime\n```\n\n----------------------------------------\n\nTITLE: Moving Vault Binary on PowerShell\nDESCRIPTION: This snippet moves the Vault binary to the designated Vault home directory on a Windows system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nMove-Item                      `\n  -Path <PATH/TO/VAULT/BINARY> `\n  -Destination ${env:VAULT_HOME}\\vault.exe\n```\n\n----------------------------------------\n\nTITLE: Listing Token Accessors in Vault\nDESCRIPTION: Makes a LIST request to retrieve token accessors. Requires sudo capability and returns a list of accessor IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/token/accessors\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\n      \"476ea048-ded5-4d07-eeea-938c6b4e43ec\",\n      \"bb00c093-b7d3-b0e9-69cc-c4d85081165b\"\n    ]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Signature Verification Payload\nDESCRIPTION: Sample JSON payload for signature verification request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"abcd13==\",\n  \"signature\": \"vault:v1:MEUCIQCyb869d7KWuA...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding List-Intermediates Functionality to Vault PKI Client (Markdown)\nDESCRIPTION: Release note documenting the improvement to the PKI client CLI by adding the capability to list intermediate certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18463.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncli/pki: Add List-Intermediates functionality to pki client.\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fix for Segment Fragment Loss in Vault Core Activity\nDESCRIPTION: This release note documents a bug fix in Vault's core/activity module. The fix addresses an issue where segments fragments were being lost due to exceeding the entry record size limit.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23781.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore/activity: Fixes segments fragment loss due to exceeding entry record size limit \n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Lease Settings via cURL\nDESCRIPTION: This snippet explains how to configure lease settings for RabbitMQ using cURL, requiring a Vault token and TTL-related payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/rabbitmq/config/lease\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Vault UI Service\nDESCRIPTION: This YAML code adds custom annotations to the Vault UI service. Providing options for customizing Kubernetes service objects, these annotations allow administrators flexibility in service configuration and metadata assignment. Both direct key-value pairs and multi-line string representations are supported, offering a versatile approach to service customization in Helm-based deployments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_45\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n# or\nannotations: |\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Vault API Response Format - JSON Response\nDESCRIPTION: Sample JSON response showing the structure of retrieved authenticated messages. Contains message details including title, content, type, timing parameters, and optional link information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-authenticated-messages.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"01234567-89ab-cdef-0123-456789abcdef\": {\n        \"title\": \"Post-login Advisory\",\n        \"message\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla augue, placerat quis risus blandit, molestie imperdiet massa. Sed blandit rutrum odio quis varius. Fusce purus orci, maximus ac libero.\",\n        \"type\": \"modal\",\n        \"authenticated\": true,\n        \"start_time\": \"2024-01-01T00:00:00.000000000Z\",\n        \"end_time\": null,\n        \"options\": null,\n        \"link\": {\n          \"Details\": \"https://www.example.org/details\"\n        }\n      }\n    },\n    \"keys\": [\n      \"01234567-89ab-cdef-0123-456789abcdef\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Cache Deletion Metric Description\nDESCRIPTION: A counter metric that tracks the number of delete operations performed on the Vault LRU cache. This provides insights into cache management and eviction patterns.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/cache/delete.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.cache.delete ((#vault-cache-delete))\n\nMetric type | Value   | Description\n----------- | ------- | -----------\ncounter     | number  | Number of deletes from the LRU cache\n```\n\n----------------------------------------\n\nTITLE: Sample SSH Credentials Response for OTP Role in JSON\nDESCRIPTION: Example JSON response when generating SSH credentials for an OTP role. Shows the one-time password, IP address, username, and other connection details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"sshs/creds/c3c2e60c-5a48-415a-9d5a-a41e0e6cdec5/3ee6ad28-383f-d482-2427-70498eba4d96\",\n  \"renewable\": false,\n  \"lease_duration\": 2764800,\n  \"data\": {\n    \"ip\": \"127.0.0.1\",\n    \"key\": \"6d6411fd-f622-ea0a-7e2c-989a745cbbb2\",\n    \"key_type\": \"otp\",\n    \"port\": 22,\n    \"username\": \"rajanadar\"\n  },\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource Annotations in Go Template\nDESCRIPTION: Illustrates how to access and include resource annotations in a Go template within the Vault Secrets Operator. This example retrieves a host value from the .Annotations input member.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/secret-transformation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{- printf \"host=%s\" (get .Annotations \"myapp.config/host\") -}}\n```\n\n----------------------------------------\n\nTITLE: Measuring Vault Lease Expiration Queue Time\nDESCRIPTION: A metric that captures the time (in milliseconds) a lease spends waiting in the revoke queue before being processed. This helps in understanding queue latency and potential bottlenecks in lease management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/expire/lease_expiration/time_in_queue.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.expire.lease_expiration.time_in_queue\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time taken for a lease to get to the front of the revoke queue\n```\n\n----------------------------------------\n\nTITLE: Policy configuration for operator step-down in Vault\nDESCRIPTION: HCL configuration for the required policy permissions to use the operator step-down command. The policy must have 'update' and 'sudo' capabilities on the 'sys/step-down' path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/step-down.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npath \"sys/step-down\" {\n  capabilities = [\"update\", \"sudo\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Building Vault Client TypeScript Package\nDESCRIPTION: Commands to build and compile the TypeScript sources to JavaScript. This process installs dependencies and runs the build script.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/api-client/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Vault Error Message for Exceeding Maximum Value Size\nDESCRIPTION: Error message returned by Vault when a client attempts to exceed the maximum value size set in Consul. This error occurs when trying to write data that is too large to a key/value pair.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\nError writing data to kv/data/foo: Error making API request.\n\nURL: PUT http://127.0.0.1:8200/v1/kv/data/foo\nCode: 413. Errors:\n\n* failed to parse JSON input: http: request body too large\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Self-Issued Certificate Signing\nDESCRIPTION: Example JSON response after signing a self-issued certificate with Vault's PKI secrets engine. The response includes the signed certificate and the issuing CA certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: LDAP Group Policy Assignment Payload\nDESCRIPTION: Example JSON payload for creating or updating policies associated with an LDAP group in the Kerberos auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kerberos.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": \"admin,default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Vault CLI Usage Command with Warning for Estimated Client Counts\nDESCRIPTION: This improvement adds a warning to the 'vault operator usage' CLI command. The warning is displayed when the specified usage period contains estimated client counts, providing users with more accurate information about the data they are viewing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28068.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncli: `vault operator usage` will now include a warning if the specified usage period contains estimated client counts.\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Log Level via Environment Variable\nDESCRIPTION: Shows how to configure the Vault server log level using an environment variable\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/log-level.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_LOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Database Close Error Metric Definition\nDESCRIPTION: A counter metric tracking the number of errors encountered when closing database connections in Vault's database secrets engines. This helps operators identify potential connection management issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/database/close/error.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### database.Close.error ((#database-close-error))\n\nMetric type | Value   | Description\n----------- | ------- | -----------\ncounter     | number  | Number of errors encountered across all database secrets engines while closing database connections\n```\n\n----------------------------------------\n\nTITLE: Running Vault Agent with Configuration Directory\nDESCRIPTION: Start the Vault Agent with a collection of configuration files located in a specified directory. This setup is beneficial in scenarios where configurations are organized in multiple files under a single directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/agent/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault agent -config=/etc/vault/agent/config-files/\n```\n\n----------------------------------------\n\nTITLE: Rotating HCP Terraform Organization Token in Vault (Shell)\nDESCRIPTION: This command rotates the Organization API token for the specified HCP Terraform role in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/terraform.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f terraform/rotate-role/testing\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device via stdin in Vault CLI\nDESCRIPTION: Demonstrates enabling a file audit device using the Vault CLI with input piped from stdin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo -n '{\"file_path\":\"/var/log/vault.log\"}' | vault audit enable file -\n```\n\n----------------------------------------\n\nTITLE: Specifying Load Balancer Source Ranges for Vault UI\nDESCRIPTION: This YAML segment sets source IP ranges for a load balancer when using `serviceType: LoadBalancer` with the Vault UI. It allows only specific CIDRs to access the service, enhancing network security by restricting inbound traffic to trusted sources. The configuration is useful in environments where access control needs enforcement at the network ingress point.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\nloadBalancerSourceRanges:\n  - 10.0.0.0/16\n  - 120.78.23.3/32\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Filtered KV Event Notifications Across Namespaces\nDESCRIPTION: This command subscribes to KV event notifications in the current and 'ns1' namespaces for a specific secret, excluding write operations. It demonstrates the use of namespaces and complex filtering.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/events.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault events subscribe -namespaces=ns1 -filter='data_path == secret/data/foo and operation != \"data-write\"' 'kv*'\n```\n\n----------------------------------------\n\nTITLE: Example CLI Soft Delete Output\nDESCRIPTION: Example output showing successful soft deletion of versions 1 and 4 of a secret at the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/delete-data.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault kv delete -mount shared -versions 1,4 dev/square-api\n\nSuccess! Data deleted (if it existed) at: shared/data/dev/square-api\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for Azure AD Claims with Many Groups\nDESCRIPTION: This JSON snippet demonstrates the structure of claims returned by Azure AD when a user is a member of more than 200 groups, including '_claim_names' and '_claim_sources' fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/azuread.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"_claim_names\": {\n    \"groups\": \"src1\"\n  },\n  \"_claim_sources\": {\n    \"src1\": {\n      \"endpoint\": \"https://graph.windows.net....\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Data from KV Store\nDESCRIPTION: Command to read stored data from a specific path in the KV store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get kv/my-secret\n```\n\n----------------------------------------\n\nTITLE: Installing CSharpRU's Vault PHP Library\nDESCRIPTION: Command to install CSharpRU's Vault PHP client library using Composer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ composer require csharpru/vault-php\n```\n\n----------------------------------------\n\nTITLE: Listing KMIP Scopes\nDESCRIPTION: This snippet demonstrates how to list the existing scopes within the KMIP secrets engine using a LIST request to the `/kmip/scope` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/kmip/scope\n```\n\n----------------------------------------\n\nTITLE: Enabling Vault Secrets Engine\nDESCRIPTION: This snippet demonstrates how to enable a secrets engine in Vault using the `vault secrets enable` command. The command takes the name of the plugin as an argument. This step is skipped if the plugin is already mounted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable my-secret-plugin\n    Success! Enabled the my-secret-plugin secrets engine at: my-secret-plugin/\n```\n\n----------------------------------------\n\nTITLE: Skipping Auth Renewal Check in Testing Environment\nDESCRIPTION: A task that checks if renewal should occur but returns early when in testing mode to prevent the task from running during automated tests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ncheckShouldRenew: task(function*() {\n  while (true) {\n    if (Ember.testing) {\n      return;\n    }\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault with Prompted Key Input\nDESCRIPTION: Recommended method for unsealing Vault where the key is entered securely via prompt, hiding the input from command history and screen display.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/unseal.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator unseal\nKey (will be hidden): IXyR0OJnSFobekZMMCKCoVEpT7wI6l+USMzE3IcyDyo=\n```\n\n----------------------------------------\n\nTITLE: Configuring Listener-Level Request Duration in Vault\nDESCRIPTION: Example configuration demonstrating how to set the max_request_duration parameter at the TCP listener level, which overrides the global default setting. Includes basic server configuration with Consul storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\napi_addr = \"https://127.0.0.8200\"\n\nlistener \"tcp\" {\n  address              = \"127.0.0.1:8200\"\n  tls_cert_file        = \"/etc/pki/vault-server.crt\"\n  tls_key_file         = \"/etc/pki/vault-server.key\"\n  max_request_duration = \"15s\"\n}\n\nstorage \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting CA Certificate Path in Vault CLI\nDESCRIPTION: Example showing how to specify the CA certificate path using the -ca-cert command line flag. The path should point to a PEM-encoded certificate file used for SSL verification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/ca-cert.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-ca-cert \"/path/to/certs/mycert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Static Credentials for Redis ElastiCache\nDESCRIPTION: Command to retrieve the generated credentials from the static role, which includes the username, password, and metadata about rotation timing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/rediselasticache.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read database/static-creds/my-static-role\nKey                    Value\n---                    -----\nlast_vault_rotation    2022-09-14T11:45:57.24715105-04:00\npassword               GKdS6qY-UtVAMpcD9iuu\nrotation_period        5m\nttl                    4m48s\nusername               my-existing-redis-user\n```\n\n----------------------------------------\n\nTITLE: Documenting Go Version Update in Vault Core Release Note\nDESCRIPTION: A release note entry that documents a change in the Go programming language version used in Hashicorp Vault's core components, updating it to version 1.17.9.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/go-ver-1110.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ncore: Bump Go version to 1.17.9.\n```\n```\n\n----------------------------------------\n\nTITLE: Delete DR Operation Token in Vault\nDESCRIPTION: cURL command to delete a DR operation token using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_28\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/operation-token/delete\n```\n\n----------------------------------------\n\nTITLE: Listing Vault Secret Engines using CLI\nDESCRIPTION: Shows how to use the Vault CLI to list existing secret engines. This command filters out system paths to focus on user-defined secret engines.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets list | grep -vEw '(cubbyhole|identity|sys)'\n\nPath          Type         Accessor              Description\n----          ----         --------              -----------\ntransit/      transit      transit_8291b949      n/a\n```\n\n----------------------------------------\n\nTITLE: Configure Role Tag Deny List Tidy Request\nDESCRIPTION: cURL command to set role tag deny list tidying configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/config/tidy/roletag-denylist\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Table Names for Google Cloud Spanner in Vault\nDESCRIPTION: Configuration example for specifying custom table names for data storage and high availability functionality when using Google Cloud Spanner storage backend in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-spanner.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"spanner\" {\n  database = \"projects/demo/instances/abc123/databases/vault-data\"\n  table    = \"VaultData\"\n  ha_table = \"VaultLeader\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Raw Storage Values in Vault with cURL\nDESCRIPTION: Makes a POST request to create or update raw data in Vault's storage backend at a specified path. Requires an authentication token and a JSON payload containing the value to store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/raw.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/raw/secret/foo\n```\n\n----------------------------------------\n\nTITLE: Updating KV Secrets Plugin to v0.21.0\nDESCRIPTION: Indicates a version change for the Key-Value secrets plugin in HashiCorp Vault. This release note documents the update from a previous version to v0.21.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29614.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/kv: Update plugin to v0.21.0\n```\n\n----------------------------------------\n\nTITLE: Creating GCS Bucket Using gsutil\nDESCRIPTION: Command to create a new Google Cloud Storage bucket using the gsutil command-line tool. The bucket name must be globally unique across Google Cloud.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/google-cloud-storage.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ gsutil mb gs://mycompany-vault-data\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Text Improvement in Release Notes\nDESCRIPTION: Release note entry specifying an improvement to clarify the language displayed on the usage metrics page when in an empty state. Uses the release-note:improvement annotation to categorize the change type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10951.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:improvement\nui: Clarify language on usage metrics page empty state\n```\n\n----------------------------------------\n\nTITLE: Inspecting Vault License String Shell Session\nDESCRIPTION: This shell session code snippet shows how to inspect a Vault license string with the \"vault license inspect\" command, providing detailed information such as source, product, license ID, customer ID, installation ID, issue time, start time, expiration time, features, and performance standby count. This requires Vault to be installed and a valid license file path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/license/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault license inspect ~/vaults/license\nSource: /Users/ncc/vaults/license\nProduct: vault\nLicense ID: 060d7820-fa59-f95c-832b-395db0aeb9ba\nCustomer ID: 5401ae3b-136b-3e47-3b43-432927fa03e7\nInstallation ID: *\nIssue Time: 2021-05-17 19:33:47.93981585 +0000 UTC\nStart Time: 2021-05-17 00:00:00 +0000 UTC\nExpiration Time: 2022-05-17 23:59:59.999 +0000 UTC\n{\"license_id\":\"060d7820-fa59-f95c-832b-395db0aeb9ba\",\"customer_id\":\"5401ae3b-136b-3e47-3b43-432927fa03e7\",\"installation_id\":\"*\",\"issue_time\":\"2021-05-17T19:33:47.93981585Z\",\"start_time\":\"2021-05-17T00:00:00Z\",\"expiration_time\":\"2022-05-17T23:59:59.999Z\",\"flags\":{\"modules\":[\"multi-dc-scale\",\"governance-policy\",\"advanced-data-protection\"]},\"features\":[\"HSM\",\"Performance Replication\",\"DR Replication\",\"MFA\",\"Sentinel\",\"Seal Wrapping\",\"Control Groups\",\"Performance Standby\",\"Namespaces\",\"KMIP\",\"Entropy Augmentation\",\"Transform Secrets Engine\",\"Lease Count Quotas\",\"Key Management Secrets Engine\",\"Automated Snapshots\"],\"performance_standby_count\":9999}\n\nLicense is valid\n\n```\n\n----------------------------------------\n\nTITLE: Raft Configuration with Auto-join and TLS Server Name\nDESCRIPTION: Configuration example showing how to set up Raft storage with auto-join functionality and proper TLS server name specification for multiple nodes in the cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/ha-tls.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  path = \"/vault/data\"\n\n  retry_join {\n    leader_api_addr = \"https://vault-0.${SERVICE}:8200\"\n    leader_tls_servername = \"${CN}\"\n    leader_client_cert_file = \"/vault/tls/vault.crt\"\n    leader_client_key_file = \"/vault/tls/vault.key\"\n    leader_ca_cert_file = \"/vault/tls/vault.ca\"\n  }\n\n  retry_join {\n    leader_api_addr = \"https://vault-1.${SERVICE}:8200\"\n    leader_tls_servername = \"${CN}\"\n    leader_client_cert_file = \"/vault/tls/vault.crt\"\n    leader_client_key_file = \"/vault/tls/vault.key\"\n    leader_ca_cert_file = \"/vault/tls/vault.ca\"\n  }\n\n  retry_join {\n    leader_api_addr = \"https://vault-2.${SERVICE}:8200\"\n    leader_tls_servername = \"${CN}\"\n    leader_client_cert_file = \"/vault/tls/vault.crt\"\n    leader_client_key_file = \"/vault/tls/vault.key\"\n    leader_ca_cert_file = \"/vault/tls/vault.ca\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Roles Response\nDESCRIPTION: Sample JSON response when listing all roles registered with the Kubernetes auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"dev-role\", \"prod-role\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Okta Groups\nDESCRIPTION: JSON response showing the list of groups configured in the Okta auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"warnings\": null,\n  \"wrap_info\": null,\n  \"data\": {\n    \"keys\": [\"admins\", \"dev-users\"]\n  },\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"lease_id\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Verbosity of All Loggers (cURL Request)\nDESCRIPTION: Shell command to send a DELETE request to revert all loggers to their configured default levels. This reverts any runtime changes made through the API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/loggers\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Address Example\nDESCRIPTION: Example showing how to set the VAULT_ADDR environment variable with a specific URL for a Vault installation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_ADDR=\"https://myvault.example.com:8200\"\n```\n\n----------------------------------------\n\nTITLE: Running Filtered Tests in Vault UI\nDESCRIPTION: Command to run tests in the browser with filtering by test name, which helps in debugging specific tests without splitting test runs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn test:filter -f='<test name>'\n```\n\n----------------------------------------\n\nTITLE: Sample request to delete static role using Curl\nDESCRIPTION: This curl command sends a DELETE request to remove a specific static role from Vault's configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/aws/static-roles/my-static-role\n```\n\n----------------------------------------\n\nTITLE: POST Request to Rotate Roleset Service Account in Vault\nDESCRIPTION: Shell script for performing a service account rotation within a roleset in Vault via a POST request. The Vault token must be used in the header. The operation is designed to invalidate all previous secret generations or correct issues when keys were managed outside Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-token-roleset/rotate\n```\n\n----------------------------------------\n\nTITLE: Configuring Reporting Stanza in Vault HCL\nDESCRIPTION: This snippet demonstrates how to configure the 'reporting' stanza in Vault's configuration. It includes settings for snapshot retention time, product usage reporting, and license configuration. The configuration allows customization of reporting behavior for tuning and licensing purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/reporting.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nreporting {\n  snapshot_retention_time = 9600\n  disable_product_usage_reporting = false\n  license {\n    enabled = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a Capabilities Request with cURL in Vault API\nDESCRIPTION: This cURL command sends a POST request to the Vault API's /sys/capabilities endpoint. It includes the authentication token in the X-Vault-Token header and submits the payload from a local JSON file to check token capabilities on specified paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/capabilities\n```\n\n----------------------------------------\n\nTITLE: Sample CORS Settings Response from Vault API\nDESCRIPTION: This is a sample JSON response showing CORS configuration with enabled status, allowed origins, and allowed headers. The configuration shows a specific origin is allowed and lists the permitted headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-cors.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": true,\n  \"allowed_origins\": [\"http://www.example.com\"],\n  \"allowed_headers\": [\n    \"Content-Type\",\n    \"X-Requested-With\",\n    \"X-Vault-AWS-IAM-Server-ID\",\n    \"X-Vault-No-Request-Forwarding\",\n    \"X-Vault-Token\",\n    \"Authorization\",\n    \"X-Vault-Wrap-Format\",\n    \"X-Vault-Wrap-TTL\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fix for IP Address Disclosure in Vault Core\nDESCRIPTION: This release note describes a bug fix in Vault's core functionality. The fix prevents the disclosure of IP addresses in error messages for unauthenticated requests, enhancing security and privacy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10579.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore: Avoid disclosing IP addresses in the errors of unauthenticated requests\n```\n```\n\n----------------------------------------\n\nTITLE: List Certificates Response\nDESCRIPTION: JSON response showing certificate serial numbers\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"17:67:16:b0:b9:45:58:c0:3a:29:e3:cb:d6:98:33:7a:a6:3b:66:c1\",\n      \"26:0f:76:93:73:cb:3f:a0:7a:ff:97:85:42:48:3a:aa:e5:96:03:21\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Lookup Response\nDESCRIPTION: This JSON response shows the data returned after a successful secret ID lookup. It includes details such as creation time, expiration time, metadata, secret ID accessor, and usage information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"74752925-f309-6859-3d2d-0fcded95150e\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"cidr_list\": [],\n    \"creation_time\": \"2023-02-10T18:17:27.089757383Z\",\n    \"expiration_time\": \"0001-01-01T00:00:00Z\",\n    \"last_updated_time\": \"2023-02-10T18:17:27.089757383Z\",\n    \"metadata\": {\n      \"tag1\": \"production\"\n    },\n    \"secret_id_accessor\": \"2be760a4-86bb-2fa9-1637-1b7fa9ba2896\",\n    \"secret_id_num_uses\": 0,\n    \"secret_id_ttl\": 0,\n    \"token_bound_cidrs\": []\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Store Sample Request\nDESCRIPTION: cURL command to delete a store using DELETE request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_51\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/transform/stores/example-store\n```\n\n----------------------------------------\n\nTITLE: Enhancing Plugin Data in GET Requests - Markdown\nDESCRIPTION: This snippet documents the enhancement of the GET requests for the `/sys/auth`, `/sys/auth/:path`, `/sys/mounts`, and `/sys/mounts/:path` paths, which now include additional fields: `plugin_version`, `running_plugin_version`, and `running_sha256`. This change improves the insight into the current plugin status for each mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17167.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:change\\nplugins: `GET` for `/sys/auth`, `/sys/auth/:path`, `/sys/mounts`, and `/sys/mounts/:path` paths now return additional `plugin_version`, `running_plugin_version` and `running_sha256` fields in the response data for each mount.\"\n```\n\n----------------------------------------\n\nTITLE: Checking Control Group Request Status in Vault - JSON Payload\nDESCRIPTION: JSON payload for checking the status of a control group request. It requires an accessor parameter which is the token accessor of the control group wrapping token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/control-group.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessor\": \"0ad21b78-e9bb-64fa-88b8-1e38db217bde\"\n}\n```\n\n----------------------------------------\n\nTITLE: Batch Signature Request with Context\nDESCRIPTION: JSON payload for batch signature operations using Ed25519 keys with derived keys, including context parameters for key derivation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"batch_input\": [\n    {\n      \"input\": \"adba32==\",\n      \"context\": \"efgh\"\n    },\n    {\n      \"input\": \"adba32==\",\n      \"context\": \"abcd\"\n    },\n    {}\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Consul Context Canceled Error Messages\nDESCRIPTION: These plaintext log entries represent common errors encountered when Consul server's IOPS are reduced, leading to context canceled errors in Vault operations. Such errors indicate the need to increase IOPS to improve availability and performance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\n[ERROR] core: failed to create token: error=\"failed to persist entry: context canceled\"\n\n[ERROR] core: failed to register token lease: request_path=auth/approle/login error=\"failed to persist lease entry: context canceled\"\n\n[ERROR] core: failed to create token: error=\"failed to persist accessor index entry: context canceled\"\n```\n\n----------------------------------------\n\nTITLE: Enterprise Updates Table Structure in Markdown\nDESCRIPTION: HTML table structure defining enterprise updates including release information, update type, and descriptions\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.18.0.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th style={{verticalAlign: 'middle'}}>Release</th>\n      <th style={{verticalAlign: 'middle'}}>Update</th>\n      <th style={{verticalAlign: 'middle'}}>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Authorizing Control Group Request in Vault - Shell Request\nDESCRIPTION: Shell command using curl to make a POST request to the control group authorize endpoint. It sends the payload with an accessor and includes the Vault token in the headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/control-group.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/control-group/authorize\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Group Aliases - JSON\nDESCRIPTION: This JSON snippet illustrates the expected output of a successful list request for group aliases. It shows an array of identifier keys for all group aliases available in the identity store.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"ca726050-d8ac-6f1f-4210-3b5c5b613824\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Destinations - Shell Request\nDESCRIPTION: cURL command to list all configured sync destinations grouped by type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/sync/destinations\n```\n\n----------------------------------------\n\nTITLE: Identifying Entity and Group IDs in Vault (Shell)\nDESCRIPTION: This command reads the entity information for 'user1' and extracts the entity ID and group IDs using jq.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/internal-error-namespace-missing-policy.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read -format=json identity/entity/name/user1 | \\\n  jq '{\"entity_id\": .data.id, \"group_ids\": .data.group_ids} '\n{\n  \"entity_id\": \"420c82de-57c3-df2e-2ef6-0690073b1636\",\n  \"group_ids\": [\n    \"6cb152b7-955d-272b-4dcf-a2ed668ca1ea\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault with Direct Key Input\nDESCRIPTION: Example of unsealing Vault by directly providing the unseal key as a command argument. This method is not recommended for security reasons as the key will be visible in command history.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/unseal.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator unseal IXyR0OJnSFobekZMMCKCoVEpT7wI6l+USMzE3IcyDyo=\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed IPv6 Addresses for Vault Sync\nDESCRIPTION: Defines a list of permitted IPv6 addresses in CIDR notation that sync clients can connect to. This allows precise network access control for IPv6 networks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/sync-ssrf-fields.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nallowed_ipv6_addresses = [\"2001:db8::/32\"]\n```\n\n----------------------------------------\n\nTITLE: Vault Token Helper Script (Powershell)\nDESCRIPTION: This is an example token helper script written in Powershell. Similar to the shell script, it manages tokens in a JSON file (`.vault_token`) indexed by the Vault server address. It defines functions for creating the hash key, getting the token cache, and updating the cache. It handles `get`, `store`, and `erase` actions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token-helper.mdx#2025-04-14_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n<#\n.Synopsis\n  Vault token helper script\n.INPUTS\n  Positional/command line argument: get, store, erase\n.OUTPUTS\n  get: prints a cached authentication token to stdin (if it exists)\n  store: no output, updates the token cache\n  erase: no output, updates the token cache\n#>\n\n<#\n.Synopsis\n  CreateHashKey\n.DESCRIPTION\n  Customize the hash key for tokens. Currently, we remove the strings\n  'https://', '.', and ':' from the passed address (Vault address environment by\n  default) variable to simplify the hash key string\n#>\nfunction CreateHashKey {\n\n  Param($address = \"${env:VAULT_ADDR}\")\n  \n  # We index the token according to the Vault server address by default so\n  # return an error if the address is empty\n  if ( -not $address) {\n    Write-Error \"[Missing value] env:VAULT_ADDR currently unset.\"\n    exit 101\n  }\n\n  $key = ${address}.Replace(\"/\",\"\").Replace(\".\",\"_\").Replace(\":\",\"_\")\n  return ${key}.Replace(\"http_\", \"addr-\")\n}\n\n<#\n.Synopsis\n  GetTokenCache\n.DESCRIPTION\n  Read in or create a new token cache and initialize the hash \n#>\nfunction GetTokenCache {\n\n  Param($filename)\n\n  # Read the JSON file (token cache) and initialize the hash data or create an\n  # empty hash if the file does not exist yet\n  if ( Get-Item -Path \"./${filename}\" -ErrorAction SilentlyContinue ) {\n    $fileData = (Get-Content \"${filename}\" -Raw | ConvertFrom-Json -AsHashtable)\n  } else {\n    $fileData = (Write-Output \"{}\" | ConvertFrom-Json -AsHashtable)\n  } \n\n  return $fileData\n}\n\n<#\n.Synopsis\n  UpdateTokenCache\n.DESCRIPTION\n  Write the token hash out to the cache \n#>\nfunction UpdateTokenCache {\n\n  Param($filename, $fileData)\n  $jsonData = ($fileData | ConvertTo-Json) \n\n  # Convert the hash to JSON and update the token cache\n  $jsonData | Out-File -Encoding ascii \"${filename}\"\n\n  return\n}\n\n$tokenFile = \"${env:USERPROFILE}/.vault_token\"\n$hashData  = (GetTokenCache \"${tokenFile}\")\n$key       = (CreateHashKey)\n$token     = $null\n\nswitch -Exact -CaseSensitive (${args}[0]) {\n\n  \"get\" {\n    # Print the token to stdin and return success\n    Write-Output ${hashData}.${key}\n    exit 0\n  }\n\n  \"store\" {\n    $token = Read-Host\n    # Add the new token to the hash\n    $hashData[\"${key}\"] = \"${token}\" \n  }\n\n  \"erase\" {\n    # Erase the token entry if it exists\n    if ($hashData.ContainsKey(\"${key}\") ) {\n      $hashData.Remove(\"${key}\")\n    }\n  }\n\n  Default {\n    # The argument was invalid so return an error\n    Write-Error \"[Invalid argument] Command must be: get, store, or erase.\"\n    exit 102\n  }\n\n}\n\n# Update the token cache and return success\nUpdateTokenCache ${tokenFile} ${hashData}\n\nexit 0\n```\n\n----------------------------------------\n\nTITLE: Generating OCI Signing String for Vault Authentication\nDESCRIPTION: Example of the signing string generated when making an OCI authentication request to Vault. This string includes the date, request target, and host headers that will be signed with OCI credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ndate: Fri, 22 Aug 2019 21:02:19 GMT\n(request-target): get /v1/auth/oci/login/devrole\nhost: 127.0.0.1\n```\n\n----------------------------------------\n\nTITLE: JWT Roles List Response\nDESCRIPTION: Sample response showing the list of registered JWT roles\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"dev-role\",\n      \"prod-role\"\n    ]\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Enabled Audit Devices\nDESCRIPTION: This shows the JSON response format when listing enabled audit devices, which includes device type, description, and configuration options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit.mdx#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"file\": {\n    \"type\": \"file\",\n    \"description\": \"Store logs in a file\",\n    \"options\": {\n      \"file_path\": \"/var/log/vault.log\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storage Prefix Tree Response in Vault\nDESCRIPTION: The JSON response from the storage prefix tree endpoint lists all mount entries, providing details such as accessor IDs, namespaces, mount paths, types, storage prefixes, and UUIDs for each mounted backend, indexed by storage path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/router.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"ff94bb22-3d4d-8199-6882-f0e4188e10bd\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"storage\": [\n      {\n        \"accessor\": \"identity_2ccfb6ab\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"identity/\",\n        \"mount_type\": \"identity\",\n        \"storage_prefix\": \"logical/b15e93e0-5bf1-07b0-86d3-563f9c77eef1/\",\n        \"tainted\": false,\n        \"uuid\": \"b15e93e0-5bf1-07b0-86d3-563f9c77eef1\"\n      },\n      {\n        \"accessor\": \"system_0157e00a\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"sys/\",\n        \"mount_type\": \"system\",\n        \"storage_prefix\": \"sys/\",\n        \"tainted\": false,\n        \"uuid\": \"8ac2615e-8a73-fe66-52a6-a422f7e3273f\"\n      },\n      {\n        \"accessor\": \"auth_token_d5fcf970\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"token/\",\n        \"mount_type\": \"token\",\n        \"storage_prefix\": \"sys/token/\",\n        \"tainted\": false,\n        \"uuid\": \"de61dd8c-a181-ccc2-457d-908e417d10b0\"\n      },\n      {\n        \"accessor\": \"cubbyhole_58b6727b\",\n        \"mount_namespace\": \"\",\n        \"mount_path\": \"cubbyhole/\",\n        \"mount_type\": \"cubbyhole\",\n        \"storage_prefix\": \"logical/496bc2e4-b641-2561-1829-f6557bf1fedc/\",\n        \"tainted\": false,\n        \"uuid\": \"496bc2e4-b641-2561-1829-f6557bf1fedc\"\n      }\n    ]\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Version History API Response Format\nDESCRIPTION: Example response showing the structure of version history data, including installed versions, build dates, previous versions, and installation timestamps. The keys array shows chronological version order while key_info provides detailed information for each version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/version-history.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\"1.9.0\", \"1.9.1\", \"1.9.2\", \"1.11.0\"],\n  \"key_info\": {\n    \"1.9.0\": {\n      \"build_date\": null,\n      \"previous_version\": null,\n      \"timestamp_installed\": \"2021-11-18T10:23:16Z\"\n    },\n    \"1.9.1\": {\n      \"build_date\": null,\n      \"previous_version\": \"1.9.0\",\n      \"timestamp_installed\": \"2021-12-13T11:09:52Z\"\n    },\n    \"1.9.2\": {\n      \"build_date\": null,\n      \"previous_version\": \"1.9.1\",\n      \"timestamp_installed\": \"2021-12-23T10:56:37Z\"\n    },\n    \"1.11.0\": {\n      \"build_date\": \"2022-05-03T08:34:11Z\",\n      \"previous_version\": null,\n      \"timestamp_installed\": \"2022-05-03T13:16:04Z\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Cancel Tidy\nDESCRIPTION: This JSON response shows the format of the data returned by the `/pki/tidy-cancel` endpoint, which is the same as the `/pki/tidy-status` endpoint. The state field indicates the operation is being cancelled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_127\n\nLANGUAGE: json\nCODE:\n```\n  \"data\": {\n    \"safety_buffer\": 60,\n    \"tidy_cert_store\": true,\n    \"tidy_revoked_certs\": true,\n    \"error\": null,\n    \"message\": \"Tidying certificate store: checking entry 234 of 488\",\n    \"revoked_cert_deleted_count\": 0,\n    \"cert_store_deleted_count\": 2,\n    \"state\": \"Cancelling\",\n    \"time_started\": \"2021-10-20T14:52:13.510161-04:00\",\n    \"time_finished\": null\n  }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from KV Secrets Engine in Vault (Shell)\nDESCRIPTION: This snippet demonstrates how to retrieve data from the KV secrets engine in Vault using the 'kv get' command. It shows the output format for both KV v2 and KV v1, including metadata and actual secret data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/get.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get -mount=secret creds\n== Secret Path ==\nsecret/data/creds\n\n======= Metadata =======\nKey                Value\n---                -----\ncreated_time       2022-06-15T20:23:40.067093Z\ncustom_metadata    <nil>\ndeletion_time      n/a\ndestroyed          false\nversion            1\n\n====== Data ======\nKey         Value\n---         -----\npasscode    my-long-passcode\n```\n\n----------------------------------------\n\nTITLE: Vault CLI: Attempting to Read a Denied Secret\nDESCRIPTION: This command demonstrates attempting to read a secret using the Vault CLI, which results in a permission denied error because the user lacks the necessary read access, illustrating the security measures in place.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault kv get -mount=path/to my-secret-1\n\nError reading path/to/data/my-secret-1: Error making API request.\n\nURL: GET http://127.0.0.1:8200/v1/path/to/data/my-secret-1\nCode: 403. Errors:\n\n* 1 error occurred:\n  * permission denied\"\n```\n\n----------------------------------------\n\nTITLE: Installing LoopBack 4 Vault Extension\nDESCRIPTION: Command to install the LoopBack 4 extension for Vault using npm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ npm i @sourceloop/vault\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Control Group Settings\nDESCRIPTION: This JSON snippet shows the structure of the response when reading the Control Group configuration, including the max_ttl setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-control-group.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_ttl\": \"4h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Consul Service Discovery Endpoints\nDESCRIPTION: DNS endpoints for accessing different Vault instances through Consul service discovery.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/consul.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nactive.vault.service.consul\n```\n\nLANGUAGE: text\nCODE:\n```\nstandby.vault.service.consul\n```\n\nLANGUAGE: text\nCODE:\n```\nvault.service.consul\n```\n\n----------------------------------------\n\nTITLE: Defining Release Note Modes for Changelog\nDESCRIPTION: This snippet describes the structure of a release note, outlining valid modes like 'bug', 'change', 'deprecation', 'feature', and 'improvement' along with their implications for documenting changes in the product.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\n\nValid modes are:\n\n - `bug` - Any sort of non-security defect fix.\n - `change` - A change in the product that may require action or\n   review by the operator. Examples would be any kind of API change\n   (as opposed to backwards compatible addition), a notable behavior\n   change, or anything that might require attention before updating. Go\n   version changes are also listed here since they can potentially have\n   large, sometimes unknown impacts. (Go updates are a special case, and\n   dep updates in general aren't a `change`). Discussion of any potential\n   `change` items in the pull request to see what other communication\n   might be warranted.\n - `deprecation` - Announcement of a planned future removal of a\n   feature. Only use this if a deprecation notice also exists [in the\n   docs](https://developer.hashicorp.com/vault/docs/deprecation).\n - `feature` - Large topical additions for a major release. These are\n   rarely in minor releases. Formatting for `feature` entries differs\n   from normal changelog formatting - see the [new features\n   instructions](#new-and-major-features).\n - `improvement` - Most updates to the product that aren’t `bug`s, but\n   aren't big enough to be a `feature`, will be an `improvement`.\n```\n```\n\n----------------------------------------\n\nTITLE: KMIP Message Contents Support Table\nDESCRIPTION: Markdown table showing supported message contents in the KMIP implementation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip-profiles.mdx#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Message Content                                                  | Supported |\n| -----------------------------------------------------------------| :--------:|\n| Protocol Version [KMIP-SPEC 6.1][kmip-spec-6.1]                  | ✅        |\n| Operation [KMIP-SPEC 6.2][kmip-spec-6.2]                         | ✅        |\n```\n\n----------------------------------------\n\nTITLE: Sample response for listing well-known labels - JSON\nDESCRIPTION: This snippet provides a sample JSON response structure for the request made to list well-known labels. It outlines the key information returned by the endpoint, including label names and associated metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/well-known.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"key_info\": {\\n    \"est/cacerts\": {\\n      \"mount_path\": \"ns1/pki_int/\",\\n      \"mount_uuid\": \"fc9d3ee4-ae92-4e3e-c0e1-a1fdb3e3b8cf\",\\n      \"prefix\": \"est/cacerts\"\\n    }\\n  },\\n  \"keys\": [\\n    \"est/cacerts\"\\n  ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting VAULT_CLI_NO_COLOR Environment Variable in Bash\nDESCRIPTION: Sets an environment variable to control whether ANSI color escape sequences are included in Vault CLI output. When set to 0, color output is enabled; when true, color output is disabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/cli_no_color.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_CLI_NO_COLOR=0\n```\n\n----------------------------------------\n\nTITLE: Vault Auto-auth Configuration Parameters\nDESCRIPTION: YAML configuration options for TLS certificate-based auto-authentication, including certificate paths, reload settings, and certificate role name configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/cert.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: \"string\"  # optional trusted certificate role\nca_cert: \"string\"  # path to CA certificate\nclient_cert: \"string\"  # path to client certificate\nclient_key: \"string\"  # path to private key\nreload: false  # enable certificate reloading\nreload_period: \"1m\"  # certificate check interval\n```\n\n----------------------------------------\n\nTITLE: Deleting Pinned Plugin Version - cURL Request\nDESCRIPTION: cURL command to delete a pinned plugin version using DELETE request with authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-pins.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/plugins/pins/auth/github\n```\n\n----------------------------------------\n\nTITLE: Deleting a Secret from Cubbyhole (Shell)\nDESCRIPTION: This shell command demonstrates how to delete a secret from the Cubbyhole using a DELETE request. It requires a Vault token and specifies the path of the secret to be deleted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cubbyhole.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/cubbyhole/my-secret\n```\n\n----------------------------------------\n\nTITLE: Making an Authenticated POST Request to Vault using OCI Credentials\nDESCRIPTION: Complete example of a POST request to the OCI auth endpoint in Vault. This request includes all the signed headers in the request_headers field that Vault requires to verify the OCI identity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nPOST http://127.0.0.1/v1/auth/oci/login/devrole\n   \"request_headers\": {\n      \"date\": [\"Fri, 22 Aug 2019 21:02:19 GMT\"],\n      \"(request-target)\": [\"get /v1/auth/oci/login/devrole\"],\n      \"host\": [\"127.0.0.1\"],\n      \"content-type\": [\"application/json\"],\n      \"authorization\": [\"Signature algorithm=\\\"rsa-sha256\\\",headers=\\\"date (request-target) host\\\",keyId=\\\"ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f15p2b2m2yt2j6rx32uzr4h25vqstifsfdsq/ocid1.user.oc1..aaaaaaaat5nvwcna5j6aqzjcaty5eqbb6qt2jvpkanghtgdaqedqw3rynjq/73:61:a2:21:67:e0:df:be:7e:4b:93:1e:15:98:a5:b7\\\",signature=\\\"GBas7grhyrhSKHP6AVIj/h5/Vp8bd/peM79H9Wv8kjoaCivujVXlpbKLjMPeDUhxkFIWtTtLBj3sUzaFj34XE6YZAHc9r2DmE4pMwOAy/kiITcZxa1oHPOeRheC0jP2dqbTll8fmTZVwKZOKHYPtrLJIJQHJjNvxFWeHQjMaR7M=\\\",version=\\\"1\\\"\"]\n   }\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Core Config Bug Fix for Network Interface Queries\nDESCRIPTION: This release note describes a bug fix in Vault's core configuration module. The fix optimizes system queries for network interfaces, only performing them when address configurations contain templates in the format {{ ... }}.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15224.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore/config: Only ask the system about network interfaces when address configs contain a template having the format: {{ ... }}\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Data from Cubbyhole Secret Storage\nDESCRIPTION: Shows how to read previously stored secret data from the Cubbyhole secrets engine using the Vault CLI. The command retrieves the value associated with a specific path in the token's cubbyhole.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/cubbyhole.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ vault read cubbyhole/my-secret\nKey         Value\n---         -----\nmy-value    s3cr3t\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Atlas Secrets Plugin Version in Vault\nDESCRIPTION: Release note indicating the update of the MongoDB Atlas secrets engine plugin to version 0.10.2 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23849.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/mongodbatlas: Update plugin to v0.10.2\n```\n\n----------------------------------------\n\nTITLE: Creating a Periodic Token - Shell Session\nDESCRIPTION: This snippet shows how to create a periodic token in HashiCorp Vault with a specified duration. The token will automatically renew at specified intervals without expiring unless explicitly limited.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/create.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token create -period=30m\nKey                Value\n---                -----\ntoken              fdb90d58-af87-024f-fdcd-9f95039e353a\ntoken_accessor     4cd9177c-034b-a004-c62d-54bc56c0e9bd\ntoken_duration     30m\ntoken_renewable    true\ntoken_policies     [my-policy]\n```\n\n----------------------------------------\n\nTITLE: Default Username Template for Couchbase Database Credentials\nDESCRIPTION: The default template used to generate dynamic usernames for Couchbase database credentials. The template combines display name, role name, random characters, and Unix timestamp to create unique usernames.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/couchbase.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nV_{{.DisplayName | uppercase | truncate 64}}_{{.RoleName | uppercase | truncate 64}}_{{random 20 | uppercase}}_{{unix_time}}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes RBAC Role Configuration\nDESCRIPTION: RBAC role configuration required for Vault pods to update their pod specifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/kubernetes.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: mynamespace\n  name: vault-service-account\nrules:\n- apiGroups: [\"\"]\n  resources: [\"pods\"]\n  verbs: [\"get\", \"update\", \"patch\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring Control Group Settings via POST Request in Shell\nDESCRIPTION: This snippet illustrates how to configure Control Group settings by sending a POST request with a JSON payload to the /sys/config/control-group endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-control-group.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/config/control-group\n```\n\n----------------------------------------\n\nTITLE: List Certificates Request\nDESCRIPTION: Authenticated request to list all certificates by serial number\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_42\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/certs\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration Payload for Vault API\nDESCRIPTION: This JSON payload demonstrates how to configure CORS settings. The example uses a wildcard for allowed origins, permitting any origin to access the API, and adds a custom header to the allowed headers list.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-cors.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"allowed_origins\": \"*\",\n  \"allowed_headers\": \"X-Custom-Header\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response object structure in JSON\nDESCRIPTION: This snippet outlines the structure of the response object used in audit entries, detailing fields for authentication, additional data, headers, and warnings, essential for understanding the response behavior in logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": <auth>,\n  \"data\": {},\n  \"headers\": {},\n  \"mount_accessor\": \"\",\n  \"mount_class\": \"\",\n  \"mount_is_external_plugin\": false,\n  \"mount_point\": \"\",\n  \"mount_running_sha256\": \"\",\n  \"mount_running_plugin_version\": \"\",\n  \"mount_type\": \"\",\n  \"redirect\": \"\",\n  \"secret\": {\n    \"lease_id\": \"\"\n  },\n  \"wrap_info\": {\n    \"accessor\": \"\",\n    \"creation_path\": \"\",\n    \"creation_time\": \"\",\n    \"token\": \"\",\n    \"ttl\": 60,\n    \"wrapped_accessor\": \"\"\n  },\n  \"warnings\": [\n    \"\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Facility Parameter for Vault Audit Logging\nDESCRIPTION: This example demonstrates how to configure the 'facility' parameter for syslog audit logging in HashiCorp Vault. The facility parameter specifies the process that generated the syslog entry. The default value is 'AUTH', but this can be customized as shown in the example.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/syslog/facility.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfacility=\"AUTO-AUTH\"\n```\n\n----------------------------------------\n\nTITLE: cURL Request for Batch Deleting Entities - Shell\nDESCRIPTION: This cURL command sends a POST request to delete multiple entities in Vault based on their IDs provided in a JSON payload file. The operation requires a valid Vault token for authentication and interacts with the `/batch-delete` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/entity/batch-delete\n```\n\n----------------------------------------\n\nTITLE: Error message for AWS IAM authentication failure in Vault\nDESCRIPTION: This error occurs when attempting to login using AWS IAM authentication in affected Vault versions (1.5.1-1.5.2, 1.4.4-1.4.5, 1.3.8-1.3.9, 1.2.5-1.2.6) due to missing allowed headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/aws-invalid-header.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCannot login using AWS-IAM: invalid request header: X-Amz-Security-Token\n```\n\n----------------------------------------\n\nTITLE: Vault Policy Get Performance Metric\nDESCRIPTION: Tracks the time taken to retrieve a policy from HashiCorp Vault, measured in milliseconds. Useful for monitoring policy access performance and identifying potential bottlenecks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/policy/get_policy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.policy.get_policy ((#vault-policy-get_policy))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to read a policy\n```\n\n----------------------------------------\n\nTITLE: Setting Default Value for Key Type - Release Note\nDESCRIPTION: This release note explains the modification made to the key management UI in the Vault project to ensure that a default value is assigned for the 'type' field when a new key is created. This change aims to improve usability and minimize errors during key creation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17407.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\nui/keymgmt: Sets the defaultValue for type when creating a key.\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Creating/Updating LDAP User\nDESCRIPTION: This JSON payload is used for creating or updating an LDAP user and includes a comma-separated list of policies and groups for the user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": \"admin,default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Namespace Structure\nDESCRIPTION: This snippet visually represents the hierarchy of namespaces in Vault. It is used to demonstrate how messages can inherit from parent namespaces to child namespaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/ui/custom-messages.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n─ admin\n    ├── finance\n    └── marketing\n        ├── digital-marketing\n        └── events\n```\n\n----------------------------------------\n\nTITLE: Encrypting ECDSA Key with OpenSSL/Sh\nDESCRIPTION: This shell command uses OpenSSL to encrypt an ECDSA key with AES-256-CBC. To perform this encryption, you must have OpenSSL installed. The command requires an existing ECDSA key file and outputs an encrypted key file. Inputs include the ECDSA key file name and the desired output file name. The encryption passphrase will be prompted during execution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nopenssl ec -in cert.key -out encrypted.key -aes-256-cbc\n```\n\n----------------------------------------\n\nTITLE: Extended PKI Certificate Management with Vault\nDESCRIPTION: Commands for advanced PKI management in Vault, including setting up roles, issuing certificates, and working with certificate files. The sequence includes creating a root certificate, configuring URL endpoints, defining roles with domain restrictions, and issuing multiple certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/builtin/credential/cert/test-fixtures/generate.txt#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvault mount pki\nvault mount-tune -max-lease-ttl=438000h pki\nvault write pki/root/generate/exported common_name=myvault.com ttl=438000h max_ttl=438000h ip_sans=127.0.0.1\nvi testcacert1.pem\nvi testcakey1.pem\nvi testcaserial1\n\nvault write pki/config/urls issuing_certificates=\"http://127.0.0.1:8200/v1/pki/ca\" crl_distribution_points=\"http://127.0.0.1:8200/v1/pki/crl\"\nvault write pki/roles/myvault-dot-com allowed_domains=myvault.com allow_subdomains=true ttl=437999h max_ttl=438000h allow_ip_sans=true\n\nvault write pki/issue/myvault-dot-com common_name=cert.myvault.com format=pem ip_sans=127.0.0.1\nvi testissuedserial1\n\nvault write pki/issue/myvault-dot-com common_name=cert.myvault.com format=pem ip_sans=127.0.0.1\nvi testissuedcert2.pem\nvi testissuedkey2.pem\nvi testissuedserial2\n\nvault write pki/issue/myvault-dot-com common_name=cert.myvault.com format=pem ip_sans=127.0.0.1\nvi testissuedserial3\n\nvault write pki/issue/myvault-dot-com common_name=cert.myvault.com format=pem ip_sans=127.0.0.1\nvi testissuedcert4.pem\nvi testissuedkey4.pem\nvi testissuedserial4\n\nvault write pki/issue/myvault-dot-com common_name=cert.myvault.com format=pem ip_sans=127.0.0.1\nvi testissuedserial5\n\nvault write pki/revoke serial_number=$(cat testissuedserial2)\nvault write pki/revoke serial_number=$(cat testissuedserial4)\ncurl -XGET \"http://127.0.0.1:8200/v1/pki/crl/pem\" -H \"x-vault-token:123\" > issuedcertcrl\nopenssl crl -in issuedcertcrl -noout -text\n```\n\n----------------------------------------\n\nTITLE: Error Log for Performance Standby Post-Unseal Setup Failure\nDESCRIPTION: This snippet shows the error message logged when a Performance Standby node fails to set up after unseal due to a read-only storage error.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/perf-standbys-revert-to-standby.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[ERROR] core: performance standby post-unseal setup failed: error=\"cannot write to readonly storage\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vault MFA Credentials via CLI\nDESCRIPTION: Example showing how to provide MFA credentials using the command line flag format. The credential is specified in the format mfa_method_name[:key[=value]].\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/mfa.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-mfa \"totp:password=12345\"\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Vault Authentication and Request\nDESCRIPTION: This JSON schema outlines the structure for both authentication and requests within HashiCorp Vault. It specifies the properties, types, and formats for various elements such as 'auth', 'error', 'forwarded_from', 'request', and 'time'. Key properties include 'auth' for access control details and 'request' for capturing request parameters. Each property has constraints on datatype and optional sub-properties to maintain data consistency and integrity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/audit/request-entry-json-schema.mdx#2025-04-14_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"auth\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"accessor\": {\n          \"type\": \"string\"\n        },\n        \"client_token\": {\n          \"type\": \"string\"\n        },\n        \"display_name\": {\n          \"type\": \"string\"\n        },\n        \"entity_created\": {\n          \"type\": \"boolean\"\n        },\n        \"entity_id\": {\n          \"type\": \"string\"\n        },\n        \"external_namespace_policies\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"identity_policies\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"metadata\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          }\n        },\n        \"no_default_policy\": {\n          \"type\": \"boolean\"\n        },\n        \"num_uses\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"policies\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"policy_results\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"allowed\": {\n              \"type\": \"boolean\"\n            },\n            \"granting_policies\": {\n              \"type\": \"array\",\n              \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"type\": \"string\"\n                  },\n                  \"namespace_id\": {\n                    \"type\": \"string\"\n                  },\n                  \"namespace_path\": {\n                    \"type\": \"string\"\n                  },\n                  \"type\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"additionalProperties\": false,\n                \"required\": [\n                  \"type\"\n                ]\n              }\n            }\n          },\n          \"additionalProperties\": false,\n          \"required\": [\n            \"allowed\"\n          ]\n        },\n        \"remaining_uses\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"token_issue_time\": {\n          \"type\": \"string\"\n        },\n        \"token_policies\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        },\n        \"token_ttl\": {\n          \"type\": \"integer\",\n          \"format\": \"int64\"\n        },\n        \"token_type\": {\n          \"type\": \"string\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"error\": {\n      \"type\": \"string\"\n    },\n    \"forwarded_from\": {\n      \"type\": \"string\"\n    },\n    \"request\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"client_certificate_serial_number\": {\n          \"type\": \"string\"\n        },\n        \"client_id\": {\n          \"type\": \"string\"\n        },\n        \"client_token\": {\n          \"type\": \"string\"\n        },\n        \"client_token_accessor\": {\n          \"type\": \"string\"\n        },\n        \"data\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {}\n        },\n        \"headers\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"type\": \"array\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"id\": {\n          \"type\": \"string\"\n        },\n        \"mount_accessor\": {\n          \"type\": \"string\"\n        },\n        \"mount_class\": {\n          \"type\": \"string\"\n        },\n        \"mount_is_external_plugin\": {\n          \"type\": \"boolean\"\n        },\n        \"mount_point\": {\n          \"type\": \"string\"\n        },\n        \"mount_running_sha256\": {\n          \"type\": \"string\"\n        },\n        \"mount_running_version\": {\n          \"type\": \"string\"\n        },\n        \"mount_type\": {\n          \"type\": \"string\"\n        },\n        \"namespace\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"id\": {\n              \"type\": \"string\"\n            },\n            \"path\": {\n              \"type\": \"string\"\n            }\n          },\n          \"additionalProperties\": false\n        },\n        \"operation\": {\n          \"type\": \"string\"\n        },\n        \"path\": {\n          \"type\": \"string\"\n        },\n        \"policy_override\": {\n          \"type\": \"boolean\"\n        },\n        \"remote_address\": {\n          \"type\": \"string\"\n        },\n        \"remote_port\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        },\n        \"replication_cluster\": {\n          \"type\": \"string\"\n        },\n        \"request_uri\": {\n          \"type\": \"string\"\n        },\n        \"wrap_ttl\": {\n          \"type\": \"integer\",\n          \"format\": \"int32\"\n        }\n      },\n      \"additionalProperties\": false\n    },\n    \"time\": {\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"type\": \"string\"\n    }\n  },\n  \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Application 2 JWT Auth Configuration\nDESCRIPTION: YAML configuration for Application 2 using JWT authentication method with VaultAuth and VaultStaticSecret resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: apps-jwt\n  namespace: apps\nspec:\n  method: jwt\n  vaultAuthGlobalRef:\n    allowDefault: true\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  name: app2-secret\n  namespace: apps\nspec:\n  destination:\n    create: true\n    name: app2-secret\n  hmacSecretData: true\n  mount: apps\n  path: app2\n  type: kv-v2\n  vaultAuthRef: apps-jwt\n```\n\n----------------------------------------\n\nTITLE: Including AWS Invalid Header - Markdown\nDESCRIPTION: This snippet includes external documentation regarding known issues with AWS headers in Vault. The included file is expected to provide details on specific problems when using AWS with the current version of Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.4.5.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{@include 'aws-invalid-header.mdx'}\n```\n\n----------------------------------------\n\nTITLE: Enable Mutual TLS for CF API\nDESCRIPTION: Configures the CF API to require mutual TLS with clients in Vault, necessitating mutual TLS certificates for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/cf/config \\\n      identity_ca_certificates=@ca.crt \\\n      cf_api_addr=https://api.dev.cfdev.sh \\\n      cf_username=vault \\\n      cf_password=pa55w0rd \\\n      cf_api_trusted_certificates=@cfapi.crt \\\n      cf_api_mutual_tls_certificate=@cfmutualtls.crt \\\n      cf_api_mutual_tls_key=@cfmutualtls.key\n```\n\n----------------------------------------\n\nTITLE: UBI-based Vault Secrets Operator Configuration\nDESCRIPTION: YAML configuration for UBI-based images from Red Hat's certified container registry, including proxy settings and resource configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/openshift.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ncontroller:\n  kubeRbacProxy:\n    image:\n      repository: registry.redhat.io/openshift4/ose-kube-rbac-proxy\n      tag: v4.13.0\n  manager:\n    image:\n      repository: registry.connect.redhat.com/hashicorp/vault-secrets-operator\n      tag: 0.10.0-ubi\n    resources:\n      limits:\n        memory: 256Mi\n      requests:\n        memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Setting Token TTL in Vault Role (Vault CLI)\nDESCRIPTION: This snippet demonstrates how to set the default and maximum TTL (time-to-live) for tokens when creating or tuning a Vault role using the Vault CLI. It sets `token_default_ttl` to 10 minutes and `token_max_ttl` to 2 hours. The role is configured to allow access to all Kubernetes namespaces and associates with 'new-service-account-with-generated-token'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kubernetes.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write kubernetes/roles/my-role \\\n    allowed_kubernetes_namespaces=\"*\" \\\n    service_account_name=\"new-service-account-with-generated-token\" \\\n    token_default_ttl=\"10m\" \\\n    token_max_ttl=\"2h\"\n```\n\n----------------------------------------\n\nTITLE: Plugin Runtime Command Usage Syntax\nDESCRIPTION: Shows the general syntax and available subcommands for the Vault plugin runtime command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault plugin runtime <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    deregister    Deregister an existing plugin runtime in the catalog\n    info          Read information about a plugin runtime in the catalog\n    list          Lists available plugin runtimes\n    register      Registers a new plugin runtime in the catalog\n```\n\n----------------------------------------\n\nTITLE: Make expiration timestamps human readable\nDESCRIPTION: This release note addresses an issue where expiration timestamps were not human-readable within the Transform Secrets Engine. The fix enhances the readability of expiration timestamps, making it easier for users to understand when secrets will expire.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1622.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\ntransform (enterprise): Make expiration timestamps human readable\n```\n\n----------------------------------------\n\nTITLE: Response audit entry structure in JSON\nDESCRIPTION: This snippet outlines the structure of a response audit entry in JSON format. It includes fields for authentication, errors, requests, responses, timestamps, and entry types, providing a comprehensive auditing trail.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": <auth>,\n  \"error\": \"\",\n  \"forwarded_from\": \"\",\n  \"request\": <request>,\n  \"response\": <response>,\n  \"time\": \"\",\n  \"type\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Vault acceptance tests\nDESCRIPTION: This command demonstrates how to run acceptance tests for Vault, which create and modify real resources to verify functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ make testacc TEST=./builtin/logical/consul\n...\n```\n\n----------------------------------------\n\nTITLE: Basic Etcd Storage Configuration in HCL\nDESCRIPTION: Basic configuration for Vault to use Etcd v3 as storage backend with default connection settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/etcd.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"etcd\" {\n  address  = \"http://localhost:2379\"\n  etcd_api = \"v3\"\n}\n```\n\n----------------------------------------\n\nTITLE: Entity Lookup Response Example\nDESCRIPTION: This JSON object exemplifies the response format for an entity lookup request, including fields such as 'id', 'name', and timestamps. It requires no additional libraries as input beyond what is described in the API. There are optional null fields like 'policies', demonstrating possible response variations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/lookup.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"aliases\": [],\n    \"creation_time\": \"2017-11-13T21:01:33.543497Z\",\n    \"direct_group_ids\": [],\n    \"group_ids\": [],\n    \"id\": \"043fedec-967d-b2c9-d3af-0c467b04e1fd\",\n    \"inherited_group_ids\": [],\n    \"last_update_time\": \"2017-11-13T21:01:33.543497Z\",\n    \"merged_entity_ids\": null,\n    \"metadata\": null,\n    \"name\": \"entity_43cc451b\",\n    \"policies\": null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JWT/OIDC Configuration Response from Vault\nDESCRIPTION: Sample JSON response when reading the JWT/OIDC configuration from Vault. This shows the configured OIDC discovery URL, CA certificates, bound issuer, and public keys used for JWT validation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"oidc_discovery_url\": \"https://myco.auth0.com/\",\n    \"oidc_discovery_ca_pem\": [],\n    \"bound_issuer\": \"https://myco.auth0.com/\",\n    \"jwt_validation_pubkeys\": []\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Vault Server Shutdown in Shell Script\nDESCRIPTION: This snippet describes an improvement to the shutdown process of the Vault server by ensuring it consistently stops when executing the gen_openapi.sh script. This is important to avoid any potential data loss or service disruption during server exit.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19252.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"release-note:improvement\\nopenapi: Consistently stop Vault server on exit in gen_openapi.sh\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Docker wrapper image with curl\nDESCRIPTION: This Dockerfile extends the HashiCorp Vault Enterprise image and adds the `curl` package using `apk`. This allows users to continue using `curl` within the Vault container after it was removed from the base image. It requires Docker and the `apk` package manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.15.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: Dockerfile\nCODE:\n```\n\"FROM hashicorp/vault-enterprise\nRUN apk add curl\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for GCP Service Account Key Generation\nDESCRIPTION: This JSON snippet shows the structure of a sample response when generating a GCP service account key. It includes a token, expiration time, and token TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"<uuid>\",\n  \"data\": {\n    \"token\": \"ya29.c.Elp5Be3ga87...\",\n    \"expires_at_seconds\": 1537400046,\n    \"token_ttl\": 3599\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Terraform Service User IAM Setup\nDESCRIPTION: Commands to initialize and apply the Terraform configuration for setting up the CI service user IAM role and service quotas. Requires Terraform Cloud token and repository name as environment variables.\nSOURCE: https://github.com/hashicorp/vault/blob/main/enos/README.md#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n> cd ./enos/ci/service-user-iam\n> export TF_WORKSPACE=<repo name>-ci-enos-service-user-iam\n> export TF_TOKEN_app_terraform_io=<Terraform Cloud Token>\n> export TF_VAR_repository=<repository name>\n> terraform init\n> terraform plan\n> terraform apply -auto-approve\n```\n\n----------------------------------------\n\nTITLE: Configuring Syslog Tag Parameter in Vault\nDESCRIPTION: Example of configuring the tag parameter for a syslog audit device in HashiCorp Vault. The tag parameter specifies the program name that generated the syslog entry, with 'vault' being the default value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/syslog/tag.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntag=\"vault-agent\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating with Vault using Google Cloud IAM in Go\nDESCRIPTION: This Go code example demonstrates how to authenticate with HashiCorp Vault using Google Cloud IAM and retrieve a key-value secret. It configures a Vault client, sets up GCP IAM authentication, logs in to Vault, and retrieves a secret from the KV v2 secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\n\tvault \"github.com/hashicorp/vault/api\"\n\tauth \"github.com/hashicorp/vault/api/auth/gcp\"\n)\n\n// Fetches a key-value secret (kv-v2) after authenticating to Vault\n// via GCP IAM, one of two auth methods used to authenticate with\n// GCP (the other is GCE auth).\nfunc getSecretWithGCPAuthIAM() (string, error) {\n\tconfig := vault.DefaultConfig() // modify for more granular configuration\n\n\tclient, err := vault.NewClient(config)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize Vault client: %w\", err)\n\t}\n\n\t// For IAM-style auth, the environment variable GOOGLE_APPLICATION_CREDENTIALS\n\t// must be set with the path to a valid credentials JSON file, otherwise\n\t// Vault will fall back to Google's default instance credentials.\n\t// Learn about authenticating to GCS with service account credentials at https://cloud.google.com/docs/authentication/production\n\tif pathToCreds := os.Getenv(\"GOOGLE_APPLICATION_CREDENTIALS\"); pathToCreds == \"\" {\n\t\tfmt.Printf(\"WARNING: Environment variable GOOGLE_APPLICATION_CREDENTIALS was not set. IAM client for JWT signing and Vault server IAM client will both fall back to default instance credentials.\\n\")\n\t}\n\n\tsvcAccountEmail := fmt.Sprintf(\"%s@%s.iam.gserviceaccount.com\", os.Getenv(\"GCP_SERVICE_ACCOUNT_NAME\"), os.Getenv(\"GOOGLE_CLOUD_PROJECT\"))\n\n\t// We pass the auth.WithIAMAuth option to use the IAM-style authentication\n\t// of the GCP auth backend. Otherwise, we default to using GCE-style\n\t// authentication, which gets its credentials from the metadata server.\n\tgcpAuth, err := auth.NewGCPAuth(\n\t\t\"dev-role-iam\",\n\t\tauth.WithIAMAuth(svcAccountEmail),\n\t)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to initialize GCP auth method: %w\", err)\n\t}\n\n\tauthInfo, err := client.Auth().Login(context.TODO(), gcpAuth)\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to login to GCP auth method: %w\", err)\n\t}\n\tif authInfo == nil {\n\t\treturn \"\", fmt.Errorf(\"login response did not return client token\")\n\t}\n\n\t// get secret from the default mount path for KV v2 in dev mode, \"secret\"\n\tsecret, err := client.KVv2(\"secret\").Get(context.Background(), \"creds\")\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"unable to read secret: %w\", err)\n\t}\n\n\t// data map can contain more than one key-value pair,\n\t// in this case we're just grabbing one of them\n\tvalue, ok := secret.Data[\"password\"].(string)\n\tif !ok {\n\t\treturn \"\", fmt.Errorf(\"value type assertion failed: %T %#v\", secret.Data[\"password\"], secret.Data[\"password\"])\n\t}\n\n\treturn value, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Create STS Role Payload\nDESCRIPTION: JSON payload for creating an STS role with AWS ARN specification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sts_role\": \"arn:aws:iam:111122223333:role/myRole\"\n}\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Auth ARN Prefix Matching Configuration\nDESCRIPTION: New configuration requirement for prefix-matching IAM role and instance profile ARNs in AWS auth backend, requiring explicit opt-in by adding `*` to ARN end\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.9.6.mdx#2025-04-14_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Deleting JWT Role\nDESCRIPTION: cURL command to delete an existing JWT role\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/auth/jwt/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Reading TOTP MFA Method Configuration\nDESCRIPTION: This curl command sends a GET request to read the configuration of a TOTP MFA method named 'my_totp'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/totp/my_totp\n```\n\n----------------------------------------\n\nTITLE: Updating CF Identity CA Certificates in Vault\nDESCRIPTION: This snippet demonstrates how to update the CF identity CA certificates in Vault when they are about to expire. It shows how to add both the current and future CA certificates to maintain continuity of authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ CURRENT=$(cat /path/to/current-ca.crt)\n$ FUTURE=$(cat /path/to/future-ca.crt)\n$ vault write auth/vault-plugin-auth-cf/config identity_ca_certificates=\"$CURRENT\" identity_ca_certificates=\"$FUTURE\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Vault Reporting Debug Logs for Successful Reporting\nDESCRIPTION: Example of Vault server logs showing a successful automated license utilization report being sent to HashiCorp. The logs show the process of creating, marshalling, and sending the payload, along with recording an audit record.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-14_snippet_0\n\nLANGUAGE: log\nCODE:\n```\n[DEBUG] core.reporting: beginning snapshot export\n[DEBUG] core.reporting: creating payload\n[DEBUG] core.reporting: marshalling payload to json\n[DEBUG] core.reporting: generating authentication headers\n[DEBUG] core.reporting: creating request\n[DEBUG] core.reporting: sending request\n[DEBUG] core.reporting: performing request: method=POST url=https://reporting.hashicorp.services\n[DEBUG] core.reporting: recording audit record\n[INFO]  core.reporting: Report sent: auditRecord=\"{\\\"payload\\\":{\\\"payload_version\\\":\\\"1\\\",\\\"license_id\\\":\\\"97afe7b4-b9c8-bf19-bf35-b89b5cc0efea\\\",\\\"product\\\":\\\"vault\\\",\\\"product_version\\\":\\\"1.14.0-rc1+ent\\\",\\\"export_timestamp\\\":\\\"2023-06-01T09:34:44.215133-04:00\\\",\\\"snapshots\\\":[{\\\"snapshot_version\\\":1,\\\"snapshot_id\\\":\\\"0001J7H7KMEDRXKM5C1QJGBXV3\\\",\\\"process_id\\\":\\\"01H1T45CZK2GN9WR22863W2K32\\\",\\\"timestamp\\\":\\\"2023-06-01T09:34:44.215001-04:00\\\",\\\"schema_version\\\":\\\"1.0.0\\\",\\\"service\\\":\\\"vault\\\",\\\"metrics\\\":{\\\"clientcount.current_month_estimate\\\":{\\\"key\\\":\\\"clientcount.current_month_estimate\\\",\\\"kind\\\":\\\"sum\\\",\\\"mode\\\":\\\"write\\\",\\\"labels\\\":{\\\"type\\\":{\\\"entity\\\":20,\\\"nonentity\\\":11}}},\\\"clientcount.previous_month_complete\\\":{\\\"key\\\":\\\"clientcount.previous_month_complete\\\",\\\"kind\\\":\\\"sum\\\",\\\"mode\\\":\\\"write\\\",\\\"labels\\\":{\\\"type\\\":{\\\"entity\\\":10,\\\"nonentity\\\":11}}}}}],\\\"metadata\\\":{\\\"vault\\\":{\\\"billing_start\\\":\\\"2023-03-01T00:00:00Z\\\",\\\"cluster_id\\\":\\\"a8d95acc-ec0a-6087-d7f6-4f054ab2e7fd\\\"}}}}\"\n[DEBUG] core.reporting: completed recording audit record\n[DEBUG] core.reporting: export finished successfully\n```\n\n----------------------------------------\n\nTITLE: Retrieving KV Secrets Engine Help in Vault\nDESCRIPTION: Example showing how to get help documentation for the KV secrets engine using the path-help command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/path-help.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault path-help secret\n## DESCRIPTION\n\nThe KV backend reads and writes arbitrary secrets to the backend.\nThe secrets are encrypted/decrypted by Vault: they are never stored\nunencrypted in the backend and the backend never has an opportunity to\nsee the unencrypted value.\n\nLeases can be set on a per-secret basis. These leases will be sent down\nwhen that secret is read, and it is assumed that some outside process will\nrevoke and/or replace the secret at that path.\n\n## PATHS\n\nThe following paths are supported by this backend. To view help for\nany of the paths below, use the help command with any route matching\nthe path pattern. Note that depending on the policy of your auth token,\nyou may or may not be able to access certain paths.\n\n    ^.*$\n        Pass-through secret storage to the storage backend, allowing you to\n        read/write arbitrary data into secret storage.\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Raft HA Node in Vault using cURL\nDESCRIPTION: This snippet shows how to bootstrap a Raft HA node in Vault using a POST request to the /sys/storage/raft/bootstrap endpoint. This operation is used to activate Raft for ha_storage and requires an authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/bootstrap\n```\n\n----------------------------------------\n\nTITLE: Adding Heartbeat Status to Health Check\nDESCRIPTION: Enhances sys/health endpoint to report heartbeat status between standby and active nodes, including time since last heartbeat in milliseconds. Returns HTTP code 474 by default when heartbeats fail, or a custom code specified via haunhealthycode parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28991.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nrelease-note:change\napi: Add to sys/health whether the standby node has been able to successfully send heartbeats to the active node and the time in milliseconds since the last heartbeat. If the standby has been unable to send a heartbeat, return code 474 by default or the value of the `haunhealthycode` query parameter.\n```\n\n----------------------------------------\n\nTITLE: Downloading Vault Lambda Extension Binary\nDESCRIPTION: Shell command to download the Vault Lambda Extension binary using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --silent https://releases.hashicorp.com/vault-lambda-extension/0.5.0/vault-lambda-extension_0.5.0_linux_amd64.zip \\\n  --output vault-lambda-extension.zip\n```\n\n----------------------------------------\n\nTITLE: GCP Secrets Plugin Token Scopes Update Fix\nDESCRIPTION: Addresses a problem where updates were not being applied to token_scopes in GCP roleset configurations\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-pre-v1.10.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n* secrets/gcp: Fix issue were updates were not being applied to the `token_scopes` of a roleset. [[GH-90](https://github.com/hashicorp/vault-plugin-secrets-gcp/pull/90)]\n```\n\n----------------------------------------\n\nTITLE: Advanced Manta Storage Configuration with Parallel Connections\nDESCRIPTION: Extended configuration example showing how to customize the maximum number of parallel connections to the Manta storage backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/manta.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"manta\" {\n  directory    = \"vault-storage-directory\"\n  max_parallel = 512\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Annotations in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to set annotations for Vault ingress using the Helm provider, specifically for Azure load balancer settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\n  set {\n    name = \"server.ingress.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/azure-load-balancer-internal\"\n    value = \"true\"\n  }\n\n  set {\n    name = \"server.ingress.annotations.service\\\\.beta\\\\.kubernetes\\\\.io/azure-load-balancer-internal-subnet\"\n    value = \"apps-subnet\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Listing Roles - JSON Response\nDESCRIPTION: Sample JSON response showing all available roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"devrole\", \"prodrole\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Proxy Kubernetes Configuration Option\nDESCRIPTION: Configuration parameter for specifying the Kubernetes service account token file path in Vault Proxy. The token is used for encryption and decryption of the persistent cache as an integrity check.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/persistent-caches/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nservice_account_token_file = \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Tolerations\nDESCRIPTION: Demonstrates how to define tolerations for Vault server pods to control scheduling on tainted nodes\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations: |\n  - key: 'node.kubernetes.io/unreachable'\n    operator: 'Exists'\n    effect: 'NoExecute'\n    tolerationSeconds: 6000\n```\n\n----------------------------------------\n\nTITLE: Canceling Verification Request\nDESCRIPTION: HTTP DELETE request to cancel an in-progress rekey verification\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/rekey-recovery-key/verify\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Token Roles\nDESCRIPTION: The JSON array here is an example of the response returned when listing token roles, providing the available role keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"role1\", \"role2\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Migration Status Response in JSON\nDESCRIPTION: Sample response from the /sys/remount/status endpoint. Provides information about the migration, including the source and target mounts, and the current status of the migration process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/remount.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"migration_id\": \"ef3ba21c-8be8-4e5f-8d00-cb46a532c665\",\n  \"migration_info\": {\n    \"source_mount\": \"ns1/ns2/secret\",\n    \"target_mount\": \"ns1/ns3/new-secret\",\n    \"status\": \"in-progress\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subject and Alternative Name Configuration\nDESCRIPTION: Parameters for specifying certificate subject details, common names, and alternative name identifiers\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_57\n\nLANGUAGE: yaml\nCODE:\n```\ncommon_name: string\nalt_names: string\nip_sans: string\nuri_sans: string\nother_sans: string\n```\n\n----------------------------------------\n\nTITLE: JSON Authentication Payload Example\nDESCRIPTION: This JSON snippet represents a basic payload required for authenticating against HashiCorp Vault using Azure. It contains the 'role' and 'jwt' fields crucial for accessing Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"role\": \"dev-role\",\n  \"jwt\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Secondary Vault Node\nDESCRIPTION: This is a sample JSON response when checking replication status on a secondary Vault node. It includes details about the connection state, primary cluster addresses, and replication state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"cluster_id\": \"00616ea0-3094-5017-29f9-644f3633f0da\",\n    \"connection_state\": \"ready\",\n    \"corrupted_merkle_tree\": false,\n    \"known_primary_cluster_addrs\": [\n      \"https://127.0.0.1:65524\",\n      \"https://127.0.0.1:65525\",\n      \"https://127.0.0.1:65526\"\n    ],\n    \"last_corruption_check_epoch\": \"-62135596800\",\n    \"last_reindex_epoch\": \"1709564740\",\n    \"last_remote_wal\": 223,\n    \"last_start\": \"2024-03-04T10:05:48-05:00\",\n    \"merkle_root\": \"7b75cf69bb9a862913b0de2478164e046d242e0f\",\n    \"mode\": \"secondary\",\n    \"primaries\": [\n      {\n        \"api_address\": \"https://127.0.0.1:65521\",\n        \"clock_skew_ms\": \"0\",\n        \"cluster_address\": \"https://127.0.0.1:65524\",\n        \"connection_status\": \"connected\",\n        \"last_heartbeat\": \"2024-03-04T10:05:56-05:00\",\n        \"last_heartbeat_duration_ms\": \"0\",\n        \"replication_primary_canary_age_ms\": \"660\"\n      }\n    ],\n    \"primary_cluster_addr\": \"https://127.0.0.1:65524\",\n    \"secondary_id\": \"cd0463e0-a37f-7421-345e-aad53007479f\",\n    \"ssct_generation_counter\": 0,\n    \"state\": \"stream-wals\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Okta Login Payload with Password\nDESCRIPTION: JSON payload for authenticating a user via the Okta auth method, containing the password parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password\": \"Password!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Cache Write Metric\nDESCRIPTION: Details the metric for tracking the number of write operations performed on the Vault's Least Recently Used (LRU) cache. Provides a structured representation of cache write count.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/cache/write.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.cache.write ((#vault-cache-write))\n\nMetric type | Value   | Description\n----------- | ------- | -----------\ncounter     | number  | Number of writes to the LRU cache\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - Audit Device File Path Fix\nDESCRIPTION: Release note documenting a bug fix that prevents users from configuring multiple file-type audit devices that write to the same file path. This prevents potential conflicts and data corruption in audit logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28751.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\naudit: Prevent users from enabling multiple audit devices of file type with the same file_path to write to.\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Secrets in Vault KV Engine\nDESCRIPTION: This JSON snippet shows a sample response when listing secrets in Vault's KV engine, displaying the keys at the specified path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"foo\", \"foo/\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CMAC Generation Payload\nDESCRIPTION: Sample JSON payload for CMAC generation request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_66\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"adba32==\"\n}\n```\n\n----------------------------------------\n\nTITLE: API cURL Command Example\nDESCRIPTION: Example cURL command for updating metadata with version limits via the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/max-versions.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                       \\\n    --request POST                           \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n    --data @metadata.json                    \\\n    ${VAULT_ADDR}/v1/shared/metadata/dev/square-api\n```\n\n----------------------------------------\n\nTITLE: Documenting cURL Options - Vault\nDESCRIPTION: This snippet highlights a bug fix concerning the '-output-curl-string' command-line option in the Vault project, ensuring proper configuration of cURL options for client and CA certificates. This change is crucial for users relying on these cURL outputs for secure communications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13660.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\ncore: `-output-curl-string` now properly sets cURL options for client and CA certificates.\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Okta MFA Method in Vault\nDESCRIPTION: This snippet explains how to delete an Okta MFA method from Vault using a DELETE request. The request must include the UUID of the MFA method to be deleted and can only be successful if the method is not in use by a login enforcement.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/okta.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/okta/1db034b5-81f1-4a2b-8c2b-0f51ed0bd9fc\n```\n\n----------------------------------------\n\nTITLE: Vault Identity Group Policy Deduplication Release Note\nDESCRIPTION: Release note documenting a fix for duplicate policies in Vault identity groups during creation and update operations. The fix ensures policies are properly deduplicated when managing identity group configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15055.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nidentity: deduplicate policies when creating/updating identity groups\n```\n\n----------------------------------------\n\nTITLE: Adding UserID Field Support in PKI Secrets Engine\nDESCRIPTION: Release note for PKI secrets engine improvement that enables setting RFC 1274 UserID Field on certificates when allowed by role configuration. This enhancement provides more flexibility in certificate customization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18397.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsecrets/pki: Allow UserID Field (https://www.rfc-editor.org/rfc/rfc1274#section-9.3.1) to be set on Certificates when\nallowed by role\n```\n\n----------------------------------------\n\nTITLE: Configuring Snapshot Retention - HCL Configuration\nDESCRIPTION: HCL configuration block for setting the snapshot retention period in the reporting system. Defines how long utilization snapshots are stored.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/manual-reporting.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nreporting {\n    snapshot_retention_time = \"2400h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading an Entity Alias by ID (cURL Request)\nDESCRIPTION: This cURL command retrieves an entity alias from Vault using its ID. It sends a GET request to the `/identity/entity-alias/id/:id` endpoint, replacing `:id` with the actual alias ID.  A valid Vault token is required in the `X-Vault-Token` header to authorize the request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity-alias.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/entity-alias/id/34982d3d-e3ce-5d8b-6e5f-b9bb34246c31\n```\n\n----------------------------------------\n\nTITLE: Updating Default Policy Using Vault CLI in Shell\nDESCRIPTION: This shell script demonstrates how to update the default policy in Vault using the CLI. It reads the current default policy, appends the new rule, and writes it back to Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_16-default-policy-needs-to-be-updated.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy read default | cat - <<< '\n# Allow a token to look up the Vault version. This path is not subject to\n# redaction like the unauthenticated endpoints that provide the Vault version.\npath \"sys/internal/ui/version\" {\n    capabilities = [\"read\"]\n}\n' > default-policy.hcl\n$ vault policy write default ./default-policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent Path with Wildcard\nDESCRIPTION: Example showing how to use the -path flag to specify a KV secrets path with a wildcard (*) to include all secrets under that path. The flag can be repeated multiple times to specify different paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/agent/flags/path.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-path secret/kv/agent-keys/*\n```\n\n----------------------------------------\n\nTITLE: Constant-Time Cryptographic Operations in Shamir Algorithm\nDESCRIPTION: Modifies multiplication and division implementations to prevent timing attacks by ensuring constant execution time regardless of input values\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19495.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nshamir: change mul and div implementations to be constant-time\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Configuration File on Linux\nDESCRIPTION: This snippet creates a basic configuration file named vault.hcl for Vault, specifying the necessary parameters for running the service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo tee ${VAULT_CONFIG}/vault.hcl <<EOF\n   ui            = true\n   cluster_addr  = \"http://127.0.0.1:8201\"\n   api_addr      = \"https://127.0.0.1:8200\"\n   disable_mlock = true\n\n   storage \"raft\" {\n     path    = \"${VAULT_DATA}\"\n     node_id = \"127.0.0.1\"\n   }\n\n   listener \"tcp\" {\n     address       = \"0.0.0.0:8200\"\n     cluster_address = \"0.0.0.0:8201\"\n     tls_disable = 1\n   }\n   EOF\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo chown vault:vault \"${VAULT_CONFIG}/vault.hcl\" && \\\n     sudo chmod 640 \"${VAULT_CONFIG}/vault.hcl\"\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Authority Private Key with OpenSSL\nDESCRIPTION: Generates a 2048-bit RSA private key for the custom Certificate Authority (CA) using OpenSSL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl genrsa -out injector-ca.key 2048\n```\n\n----------------------------------------\n\nTITLE: Response from Vault Token Rewrap\nDESCRIPTION: Sample JSON response showing the newly created wrapping token details including token ID, TTL, and creation information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-rewrap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": null,\n  \"warnings\": null,\n  \"wrap_info\": {\n    \"token\": \"3b6f1193-0707-ac17-284d-e41032e74d1f\",\n    \"ttl\": 300,\n    \"creation_time\": \"2016-09-28T14:22:26.486186607-04:00\",\n    \"creation_path\": \"sys/wrapping/wrap\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Duo MFA Method\nDESCRIPTION: Endpoint for removing a Duo MFA method from Vault, with the restriction that the method cannot be in use by a login enforcement configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/duo.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/duo/4194659f-139b-400b-b5dd-86bfb726759d\n```\n\n----------------------------------------\n\nTITLE: Initializing Primary Vault Cluster\nDESCRIPTION: Commands to initialize and unseal the primary Vault cluster's first pod.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/enterprise-perf-with-raft.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec -ti vault-primary-0 -- vault operator init\nkubectl exec -ti vault-primary-0 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Plugin Runtime Registration Payload in JSON\nDESCRIPTION: Sample JSON payload for registering a new plugin runtime or updating an existing one. The payload defines resource constraints and runtime configuration parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-runtimes-catalog.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"oci_runtime\": \"example-oci-runtime\",\n  \"cgroup_parent\": \"/examplelimit/\",\n  \"cpu_nanos\": 1000,\n  \"memory_bytes\": 10000000\n}\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from HCP using Vault CLI\nDESCRIPTION: This command terminates the connection to HCP using the Vault CLI, effectively ending the current authentication session.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/hcp/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault hcp disconnect\n```\n\n----------------------------------------\n\nTITLE: Setting CA Certificate Path in Vault\nDESCRIPTION: Examples showing how to specify the CA certificates directory path using both CLI flag and environment variable. The path should point to a directory containing PEM-encoded CA certificate files used for SSL verification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/ca-path.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-ca-path \"/path/to/certs/dir\"\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_CAPATH=\"/path/to/certs/dir\"\n```\n\n----------------------------------------\n\nTITLE: Vault Audit Logging Metrics\nDESCRIPTION: Metrics for tracking audit device logging, request and response logging, and sink success/failure events\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/all.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/audit/device/log_request.mdx'\n```\n\n----------------------------------------\n\nTITLE: Vault HSM Documentation Frontmatter\nDESCRIPTION: YAML frontmatter defining the documentation page metadata for HSM security details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/hsm/security.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: HSM security details\ndescription: >\n  Understand how to ensure the security of a Vault Enterprise HSM deployment.\n---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Catalog with Deprecation Status\nDESCRIPTION: Enhanced GET endpoint for plugin catalog that now includes deprecation status for both specific and detailed plugin listings\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17077.txt#2025-04-14_snippet_0\n\nLANGUAGE: api\nCODE:\n```\nGET /sys/plugins/catalog/:type/:name\n```\n\nLANGUAGE: api\nCODE:\n```\nGET /sys/plugins/catalog/\n```\n\n----------------------------------------\n\nTITLE: SQL Statement for Rotating Cassandra Root User Password\nDESCRIPTION: SQL statement template for rotating the root user's password in Cassandra, allowing for usernames with special characters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/cassandra.mdx#2025-04-14_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nALTER USER '{{username}}' WITH PASSWORD '{{password}}';\n```\n\n----------------------------------------\n\nTITLE: Defining vault.swift.get Metric in Markdown Table\nDESCRIPTION: This snippet defines the vault.swift.get metric using a markdown table. It specifies the metric type, value unit, and provides a description of what the metric measures.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/swift/get.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `GET` operation against the OpenStack Swift backend\n```\n\n----------------------------------------\n\nTITLE: Sealing configuration parsing fix - HCL\nDESCRIPTION: This snippet shows the required format for defining non-string values in the Seal configuration to prevent startup issues due to parse errors.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.5.0.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmechanism = \"0x1082\"\n\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Metadata Using CLI - Bash\nDESCRIPTION: This snippet updates entity metadata in Vault by setting an 'old_name' field for entities listed in 'rename-targets.txt'. It reads each entity name, creates a JSON payload, and writes it back to Vault. Dependencies include a valid Vault installation and access to the entity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/acl-policy-templates.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwhile read entity_name; do\n\n  if [[ \"\" = \"${entity_name}\" ]] ; then continue ; fi\n\n  # Create a payload file with the new metadata field\n  echo -n '{\"metadata\": { \"old_name\": \"'${entity_name}'\"}}' > ./metadata.json\n      \n  # Save the metadata to the entity\n  vault write /identity/entity/name/${entity_name} @metadata.json\n\ndone < rename-targets.txt\n```\n\n----------------------------------------\n\nTITLE: Reading Multi-value UI Header Configuration Response\nDESCRIPTION: Sample JSON response showing a single header value configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"custom-value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Backup Keys Request\nDESCRIPTION: HTTP GET request to retrieve PGP-encrypted backup recovery key shares\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/rekey/recovery-key-backup\n```\n\n----------------------------------------\n\nTITLE: External Policy Certificate Signing Request Payload in JSON\nDESCRIPTION: Sample JSON payload for the external policy certificate signing API, including the CSR, common name, and key attestation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"csr\": \"...\",\n  \"common_name\": \"example.com\",\n  \"key_attestation\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note: Azure Secrets Plugin Rotate Root Support\nDESCRIPTION: This release note indicates that the Azure secrets plugin now supports the `rotate-root` functionality. The improvement is associated with pull request #70.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13034.txt#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n```release-note:improvement\nsecrets/azure: Adds support for rotate-root. [#70](https://github.com/hashicorp/vault-plugin-secrets-azure/pull/70)\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note: UI Font Size Enhancement in Vault\nDESCRIPTION: Updates the UI typography by increasing the base font size from 14px to 16px and standardizes the use of rem units versus pixels for size variables throughout the interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23994.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Increase base font-size from 14px to 16px and update use of rem vs pixels for size variables\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Server Address via CLI Flag in Bash\nDESCRIPTION: Demonstrates how to set the Vault server address using a CLI flag. This method is typically used when running Vault commands directly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/address.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-address \"https://mydomain/vault:8200\"\n```\n\n----------------------------------------\n\nTITLE: Installing Vault-tool Haskell Package\nDESCRIPTION: Command to install vault-tool Haskell client library using Cabal package manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ cabal install vault-tool\n```\n\n----------------------------------------\n\nTITLE: Encode Data Sample Response\nDESCRIPTION: JSON response containing encoded value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_54\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"encoded_value\": \"5682-4613-6822-8064\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Static Role in Vault for Elasticsearch\nDESCRIPTION: This command creates a static role in Vault that maps to a pre-existing user in Elasticsearch, with credentials that are rotated periodically but remain the same between requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/elasticdb.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/static-roles/my-static-role\\\n      db_name=my-elasticsearch-database \\\n      username=my-existing-elasticsearch-uername \\\n      rotation_period=\"24h\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring a Restricted Endpoint in Admin Namespace\nDESCRIPTION: This snippet demonstrates how to use the `monitor` command to call the `sys/monitor` endpoint from the administrative namespace (`ns_admin`). The `VAULT_NAMESPACE` environment variable specifies the namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n    $ env VAULT_NAMESPACE=\"ns_admin\" vault monitor –log-level=debug\n```\n\n----------------------------------------\n\nTITLE: Measuring Google Cloud Storage Delete Operation Time\nDESCRIPTION: A metric that captures the time required to complete a delete operation in Vault's GCS backend, measured in milliseconds\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/gcs/delete.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.gcs.delete ((#vault-gcs-delete))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `DELETE` operation against the Google Cloud Storage backend\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Database Secret Engine in Markdown\nDESCRIPTION: This code snippet is a release note in Markdown format. It documents a bug fix for Vault's user interface, addressing an issue where database secret engines with custom names were unable to delete connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11127.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fix bug where database secret engines with custom names cannot delete connections\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Merkle Tree Page Flush Gauge\nDESCRIPTION: A gauge metric that tracks the number of pages flushed during Merkle tree dirty page management in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/merkle/flushdirty/num_pages.mdx#2025-04-14_snippet_0\n\nLANGUAGE: metrics\nCODE:\n```\nvault.merkle.flushDirty.num_pages\n```\n\n----------------------------------------\n\nTITLE: Updating Auth Plugin for Kubernetes\nDESCRIPTION: This snippet states the update of the Kubernetes auth plugin to version 0.16.0. This change is critical for users who need the latest enhancements or security updates provided in this release.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20802.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nauth/kubernetes: Update plugin to v0.16.0\"\n```\n\n----------------------------------------\n\nTITLE: Disable LDAP Paged Searching\nDESCRIPTION: This command configures the LDAP auth method in Vault to disable paged searching, which is necessary to work around a regression issue introduced in Vault 1.12.6 that affects existing LDAP configurations. By setting 'max_page_size' to -1, paged searching is disabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.12.x.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\nvault write auth/ldap/config max_page_size=-1\n```\n\n----------------------------------------\n\nTITLE: PKI Backend Duration Return Type Changes\nDESCRIPTION: The PKI backend now returns duration values as integer seconds instead of Go-style duration strings, which affects how role duration is represented and retrieved.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.10.2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// Before: Duration returned as string (e.g. \"72h\")\n// After: Duration returned as integer seconds (e.g. 259200)\n```\n\n----------------------------------------\n\nTITLE: Fixing Seal Configuration Key ID Parameter\nDESCRIPTION: Resolves a regression issue with key_id parameter handling in Vault's core seal configuration. The fix ensures proper processing of the key_id parameter in HCL configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17612.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Release note indicating a bug fix for seal configuration\n```\n\n----------------------------------------\n\nTITLE: Adding DynamoDB Permit Pool Metrics\nDESCRIPTION: Introduces three new metrics for tracking DynamoDB storage backend permit pool characteristics: pending permits, active permits, and total pool size\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21742.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nstorage/dynamodb: Added three permit pool metrics: `pending_permits`, `active_permits`, and `pool_size`\n```\n\n----------------------------------------\n\nTITLE: Measuring Vault Identity Entity Upsert Transaction Performance\nDESCRIPTION: A metric that captures the time taken to upsert an entity across in-memory and persistent storage systems in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/identity/upsert_entity_txn.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.identity.upsert_entity_txn ((#vault-identity-upsert_entity_txn))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to upsert an entity to the in-memory database and, on the active node, persist the data to storage\n```\n\n----------------------------------------\n\nTITLE: Combining and encoding the wrapped keys in Go\nDESCRIPTION: This Go code snippet combines the wrapped AES key and wrapped target key into a single byte string, then base64 encodes the result for import into Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_6\n\nLANGUAGE: go\nCODE:\n```\ncombinedCiphertext := append(wrappedAESKey, wrappedTargetKey...)\nbase64Ciphertext := base64.StdEncoding.EncodeToString(combinedCiphertext)\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault with Chroot Namespace in HCL\nDESCRIPTION: This configuration example demonstrates how to set up a Vault server with a chroot namespace. It includes standard configuration for UI, clustering, and storage, plus a second TCP listener with a chroot_namespace that sets an alternate top-level namespace for that listener.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/namespace-structure.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nui            = true\ncluster_addr  = \"https://127.0.0.1:8201\"\napi_addr      = \"https://127.0.0.1:8200\"\ndisable_mlock = true\n\nstorage \"raft\" {\n  path = \"/path/to/raft/data\"\n  node_id = \"raft_node_1\"\n}\n\nlistener \"tcp\" {\n  address       = \"127.0.0.1:8200\"\n  tls_cert_file = \"/path/to/full-chain.pem\"\n  tls_key_file  = \"/path/to/private-key.pem\"\n}\n\nlistener \"tcp\" {\n   address          = \"127.0.0.1:8300\"\n   chroot_namespace = \"usa-hq\"\n   tls_cert_file = \"/path/to/full-chain.pem\"\n   tls_key_file  = \"/path/to/private-key.pem\"\n   telemetry {\n      unauthenticated_metrics_access = true\n  }\n}\n\ntelemetry {\n  statsite_address = \"127.0.0.1:8125\"\n  disable_hostname = true\n}\n```\n\n----------------------------------------\n\nTITLE: Error Output when Monitoring Restricted Endpoint\nDESCRIPTION: This snippet shows the expected error output when attempting to access a restricted endpoint ( `/sys/monitor`) from a non-administrative namespace. The error indicates an unsupported path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ env VAULT_NAMESPACE=\"ns_test\" vault monitor –log-level=debug\n\nError starting monitor: Error making API request.\nNamespace: ns_test/\nURL: GET http://127.0.0.1:8400/v1/sys/monitor?log_format=standard&log_level=debug\nCode: 404. Errors:\n* 1 error occurred:\n  * unsupported path\n```\n\n----------------------------------------\n\nTITLE: Cache Clear Request Payload in JSON\nDESCRIPTION: Example JSON payload for the cache clear API endpoint that specifies the type and value of cache entries to evict.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/caching/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"token\",\n  \"value\": \"hvs.rlNjegSKykWcplOkwsjd8bP9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing NSSM Service Wrapper for Windows\nDESCRIPTION: Installs the NSSM (Non-Sucking Service Manager) package using Chocolatey to enable Windows service functionality for Vault, which doesn't natively support Windows Service Application API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nchoco install nssm\n```\n\n----------------------------------------\n\nTITLE: Default Swift Configuration Example\nDESCRIPTION: This HCL snippet provides a default example for configuring the Swift backend storage for Vault, specifying required parameters such as auth_url, container, username, and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/swift.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"swift\" {\n  auth_url  = \"https://os.internal/v1/auth\"\n  container = \"container-239\"\n\n  username  = \"user1234\"\n  password  = \"pass5678\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting PostgreSQL Revocation Statement Improvement in Vault\nDESCRIPTION: This release note describes an enhancement to Vault's PostgreSQL database integration. It now supports multiline strings for revocation statements, allowing for more complex and flexible database management operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18632.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ndatabase/postgres: Support multiline strings for revocation statements.\n```\n```\n\n----------------------------------------\n\nTITLE: Delta CRL Rotation Response\nDESCRIPTION: JSON response indicating successful delta CRL rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"success\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running ember-template-recast for handlebars templates in Vault UI\nDESCRIPTION: This command uses ember-template-recast to run a transform on all .hbs files within the UI directory. It processes all handlebars templates in both the app and all addons.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/scripts/codemods/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx ember-template-recast \"**/*.hbs\" -t ./path/to/transform-file.js\n```\n\n----------------------------------------\n\nTITLE: Measuring Vault Lease Renewal Performance\nDESCRIPTION: Provides a metric for tracking the time taken to renew a lease in milliseconds. This metric helps monitor the performance of lease renewal operations in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/expire/renew.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.expire.renew ((#vault-expire-renew))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time taken to renew a lease\n```\n\n----------------------------------------\n\nTITLE: Reloading Multiple Secrets Plugin Mounts in Vault\nDESCRIPTION: Example showing how to reload multiple secrets plugin mounts simultaneously.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/reload.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin reload \\\n  -mounts my-custom-plugin-1 \\\n  -mounts my-custom-plugin-2\n```\n\n----------------------------------------\n\nTITLE: Release Note for Lease Expiration Bug Fix\nDESCRIPTION: Documents a bug fix preventing panics in Vault performance standbys when irrevocable leases are deleted. This fix improves stability of lease management in distributed Vault deployments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18401.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nexpiration: Prevent panics on perf standbys when an irrevocable lease gets deleted.\n```\n\n----------------------------------------\n\nTITLE: Using json.Number for Decoding in Go\nDESCRIPTION: Explains how the Go API now uses `json.Number` for decoding numbers to prevent issues with number representation, such as scientific notation when using `float64`. It allows converting numbers to `int64`, `float64`, or `string` with error checking.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.6.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\ndecoder.UseNumber()\n```\n\n----------------------------------------\n\nTITLE: Generating Environment Variable Template Configuration for Multiple Plugins\nDESCRIPTION: This example shows how to generate an environment variable template configuration for multiple secrets plugins. It specifies multiple paths to different secrets, including a wildcard path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/agent/generate-config.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault agent generate-config -type=\"env-template\" \\\n    -exec=\"./my-app arg1 arg2\" \\\n    -path=\"secret/foo\" \\\n    -path=\"secret/bar\" \\\n    -path=\"secret/my-app/*\"\n```\n\n----------------------------------------\n\nTITLE: Generating Enos Scenario Outlines\nDESCRIPTION: Commands to generate outlines of Enos scenarios. The first command generates an outline for the 'smoke' scenario, while the second generates HTML format outlines for all scenarios.\nSOURCE: https://github.com/hashicorp/vault/blob/main/enos/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nenos scenario outline smoke\n```\n\nLANGUAGE: bash\nCODE:\n```\nenos scenario outline --format html > index.html\nopen index.html\n```\n\n----------------------------------------\n\nTITLE: Checking for Out of Memory Conditions in Consul Logs\nDESCRIPTION: This shell session command searches for 'Out of Memory' errors in the system's kernel ring buffer log file at /var/log/messages. This is a common diagnostic step when troubleshooting performance issues related to memory shortages in systems where Consul is used for storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ grep 'Out of memory' /var/log/messages\n```\n\n----------------------------------------\n\nTITLE: Creating Duo MFA Method with cURL\nDESCRIPTION: Shell command to create a new Duo MFA method named 'my_duo' using cURL. The command sends a POST request with authentication token and JSON payload to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/duo.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/duo/my_duo\n```\n\n----------------------------------------\n\nTITLE: Requiring Role Field in AliCloud Auth Login\nDESCRIPTION: Modifies AliCloud authentication to make the 'role' field mandatory during login operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19005.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:change\nauth/alicloud: require the `role` field on login\n```\n\n----------------------------------------\n\nTITLE: Docker Pull Command for Vault Images\nDESCRIPTION: Example commands showing the old and new way to pull Vault Docker images. Users should now use the hashicorp/vault image instead of the deprecated vault image.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/deprecation/duplicative-docker-images.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull hashicorp/vault:<version>\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull vault:version\n```\n\n----------------------------------------\n\nTITLE: Importing an Existing PGP Key with GnuPG\nDESCRIPTION: This command imports an existing PGP key from a file named 'key.asc' using GnuPG.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --import key.asc\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Service File Permissions in Linux\nDESCRIPTION: Sets the appropriate permissions (644) on the Vault systemd service file to ensure proper security and access control.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo chmod 644 /lib/systemd/system/vault.service\n```\n\n----------------------------------------\n\nTITLE: Disabling AWS Secrets Engine in Vault\nDESCRIPTION: Example command showing how to disable a secrets engine mounted at the aws/ path in Vault. This will revoke all secrets and remove associated Vault data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/disable.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets disable aws/\n```\n\n----------------------------------------\n\nTITLE: Vault Activity Mount Counts Bug Fix Release Note\nDESCRIPTION: Release note describing a fix for the core activity tracking system to properly include mount counts when removing duplicate entries between current and historical month data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18598.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore/activity: include mount counts when de-duplicating current and historical month data\n```\n\n----------------------------------------\n\nTITLE: Certificate Hierarchy Flow\nDESCRIPTION: This snippet demonstrates a certificate hierarchy example, showcasing the relationship between root and intermediate certificates. It describes how the same key material is used across intermediates resulting in similar leaf certificates, allowing validation through different trust paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/rotation-primitives.mdx#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n --------                                            --------\n| root A |                                          | root B |\n --------                                            --------\n   |                                                      |\n ----------------                            ----------------\n| intermediate C |  <- same key material -> | intermediate D |\n ----------------              |             ----------------\n                               |\n                      -------------------\n                     | leaf certificates |\n                      -------------------\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Logout Bugfix in Vault Release Notes\nDESCRIPTION: Release note entry documenting a fix for an issue in the Vault UI where logout functionality was affected by the presence of wrapped token query parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14329.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: Fixes issue logging out with wrapped token query parameter\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry with statsite in Vault\nDESCRIPTION: This code snippet demonstrates how to configure the telemetry stanza in Vault to forward metrics data to a statsite server. It specifies the statsite address where Vault should send the metrics.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"telemetry {\\n  statsite_address = \\\"statsite.company.local:8125\\\"\\n}\"\n```\n\n----------------------------------------\n\nTITLE: Reading Max Lease TTL on Auth Mount - Shell Session\nDESCRIPTION: This snippet involves reading the current configuration of an auth mount in Vault to determine the default and max lease TTL settings. It is crucial for verifying the current TTL constraints applied to roles within the mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/tune-lease-ttl.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read sys/auth/approle/tune\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Vault Auto-Auth Sinks (HCL)\nDESCRIPTION: Example of configuring multiple file sinks in Vault auto-auth without a wrapping sinks block, using HCL format. Shows how to specify multiple sink configurations directly in the auto_auth block.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nauto_auth {\n  method {\n    type = \"approle\"\n\n    config = {\n      role_id_file_path = \"/etc/vault/roleid\"\n      secret_id_file_path = \"/etc/vault/secretid\"\n    }\n  }\n\n  sink {\n    type = \"file\"\n\n    config = {\n      path = \"/tmp/file-foo\"\n    }\n  }\n\n  sink {\n    type = \"file\"\n\n    config = {\n      path = \"/tmp/file-bar\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining exclusion objects for audit logs in JSON\nDESCRIPTION: This snippet demonstrates how to define exclusion objects for audit logs using a parsable JSON array. Each object specifies conditions under which certain fields will be excluded from entries written to the audit log.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/exclusion.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"condition\": \"\",\n    \"fields\": [ \"\" ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Token CIDR Binding Configuration in Vault\nDESCRIPTION: Configuration parameter for specifying allowed CIDR blocks for token authentication and binding the token to those IP ranges.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/tokenstorefields.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntoken_bound_cidrs = []\n```\n\n----------------------------------------\n\nTITLE: Verifying Okta Number Challenge via cURL\nDESCRIPTION: Shell command to verify a number challenge from an Okta Verify Push challenge using GET request with a nonce.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/auth/okta/verify/nonce/BCR66Ru6oJKPtC00PxJJ\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Authentication in Vault\nDESCRIPTION: Command to enable the userpass authentication method in Vault, which will be used with PingID MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault auth enable userpass\n```\n\n----------------------------------------\n\nTITLE: Setting Certificate URLs in Vault API - JSON\nDESCRIPTION: This JSON payload is used to set the issuing certificate endpoints, CRL distribution points, and OCSP server endpoints for generated certificates in Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_90\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuing_certificates\": [\"{{cluster_aia_path}}/issuer/{{issuer_id}}/der\"],\n  \"crl_distribution_points\": [\"{{cluster_aia_path}}/issuer/{{issuer_id}}/crl/der\"],\n  \"ocsp_servers\": [\"{{cluster_aia_path}}/ocsp\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Curl Request for Vault Token Rewrap\nDESCRIPTION: Shell command demonstrating how to make a POST request to the rewrap endpoint with authentication and payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-rewrap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/wrapping/rewrap\n```\n\n----------------------------------------\n\nTITLE: PKI Issuer Configuration Payload Example\nDESCRIPTION: Sample JSON payload for configuring a PKI issuer with a custom name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_69\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"issuer_name\": \"root-x1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unsealing Vault\nDESCRIPTION: This command starts the process of unsealing Vault. It will prompt for the unseal key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Allowing Arbitrary Length Stack Traces in Vault - Release Note\nDESCRIPTION: This release note documents the change in the Vault core which allows an arbitrary length for stack traces when the SIGUSR2 signal is received. Previously, the maximum stack trace length was limited to 32MB. This enhancement enables better error diagnostics and debugging in the application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11364.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore: allow arbitrary length stack traces upon receiving SIGUSR2 (was 32MB)\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Okta User Properties\nDESCRIPTION: JSON response showing the properties of an Okta user, including assigned policies and groups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"812229d7-a82e-0b20-c35b-81ce8c1b9fa6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"policies\": [\"default\", \"dev\"],\n    \"groups\": []\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Navigation Sidebar Configuration in JSON\nDESCRIPTION: JSON configuration for structuring documentation navigation sidebars. Demonstrates nested routes and various page types including index pages.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"title\": \"Directory\",\n    \"routes\": [\n      {\n        \"title\": \"Overview\",\n        \"path\": \"directory\"\n      },\n      {\n        \"title\": \"File\",\n        \"path\": \"directory/file\"\n      },\n      {\n        \"title\": \"Another File\",\n        \"path\": \"directory/another-file\"\n      },\n      {\n        \"title\": \"Nested Directory\",\n        \"routes\": [\n          {\n            \"title\": \"Overview\",\n            \"path\": \"directory/nested-directory\"\n          },\n          {\n            \"title\": \"Nested File\",\n            \"path\": \"directory/nested-directory/nested-file\"\n          }\n        ]\n      }\n    ]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Updating CF Auth Method Plugin Version in Release Note\nDESCRIPTION: Release note indicating that the Cloud Foundry authentication method plugin for HashiCorp Vault has been updated to version 0.15.1.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22758.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/cf: Update plugin to v0.15.1\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Annotations to Vault Agent Injector Pods\nDESCRIPTION: This YAML snippet shows two equivalent ways to add annotations to Vault Agent Injector pods. It can be defined as a YAML map or as a multi-line templated string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n# or\nannotations: |\n  \"sample/annotation1\": \"foo\"\n  \"sample/annotation2\": \"bar\"\n```\n\n----------------------------------------\n\nTITLE: Subject Distinguished Name Parameters\nDESCRIPTION: Parameters for configuring detailed subject information in certificate's distinguished name\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_60\n\nLANGUAGE: yaml\nCODE:\n```\nou: string\norganization: string\ncountry: string\nlocality: string\nprovince: string\nstreet_address: string\npostal_code: string\n```\n\n----------------------------------------\n\nTITLE: Namespace and Month Attribution Structure in JSON\nDESCRIPTION: This snippet shows the basic structure of the response JSON, containing attributions by namespace and month.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"by_namespace\":[],\n   \"months\":[]\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Group Policy Capability Enhancement\nDESCRIPTION: This release note indicates a feature addition to the core Vault functionality.  It introduces controlled capabilities for managing group policy stanzas, enhancing security and access control. This allows for more granular control over policies applied to groups within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1819.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\ncore: Add controlled capabilities to control group policy stanza\n```\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Audit Hash Calculation in Vault\nDESCRIPTION: JSON payload example for sending to the /sys/audit-hash endpoint. This request requires an 'input' parameter containing the string to hash.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit-hash.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"input\": \"my-secret-vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running UI Tests Fully Automated with Enos\nDESCRIPTION: Commands to run the UI tests in a fully automated manner using Enos. This deploys the cluster, runs the tests, and tears down the cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/enos/README.md#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport ENOS_VAR_ui_test_filter=\"some filter\" # <-- optional\ncd enos\nenos scenario ui run edition:oss\n```\n\n----------------------------------------\n\nTITLE: Special Handling for Mount Backend Form in Test Environment\nDESCRIPTION: Provides special error handling for testing the mount-backend-form component. When in testing mode, it saves the mount model instead of handling the error differently.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ncapabilities = yield this.store.findRecord('capabilities', `${path}/config`);\n} catch (err) {\n  if (Ember.testing) {\n    //captures mount-backend-form component test\n    yield mountModel.save();\n```\n\n----------------------------------------\n\nTITLE: Tracking Identity Entity Metric in Vault\nDESCRIPTION: A gauge metric that represents the total count of identity entity aliases stored in HashiCorp Vault, spanning all namespaces and providing insight into identity management scale.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/identity/entity/count.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.identity.entity.count ((#vault-identity-entity-count))\n\n| Metric type | Value    | Description                                                                              |\n|-------------|----------|-------------------------------------------------------------------------------------------|\n| gauge       | entities | The number of identity entity aliases (across all namespaces) currently stored in Vault. |\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for Userpass Auth Method in Vault CLI\nDESCRIPTION: This snippet demonstrates how to use the 'auth help' command to get usage instructions for the userpass authentication method in Vault. It shows the expected output format, including usage syntax and a brief description of the auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/help.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth help userpass\nUsage: vault login -method=userpass [CONFIG K=V...]\n\n  The userpass auth method allows users to authenticate using Vault's\n  internal user database.\n\n# ...\n```\n\n----------------------------------------\n\nTITLE: Filtering Vault Pods by Leader Status\nDESCRIPTION: Commands to filter Kubernetes pods based on Vault's leader status labels. These commands help identify which pods are standby nodes versus the active primary during the upgrade process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/run.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl get pods -l vault-active=false\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ kubectl get pods -l vault-active=true\n```\n\n----------------------------------------\n\nTITLE: MySQL GET Operation Performance Metric\nDESCRIPTION: A performance metric measuring the time taken to execute GET operations in the MySQL storage backend of HashiCorp Vault. Measured in milliseconds to provide precise performance insights.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/mysql/get.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.mysql.get ((#vault-mysql-get))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `GET` operation against the MySQL storage backend\n```\n\n----------------------------------------\n\nTITLE: Updating Auth CF Plugin Version in Vault Release Notes (Markdown)\nDESCRIPTION: This code snippet is a release note in Markdown format, indicating an update to the Cloud Foundry (CF) authentication plugin for HashiCorp Vault. The plugin has been updated to version 0.18.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27724.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/cf: Update plugin to v0.18.0\n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Version History in Vault CLI\nDESCRIPTION: Example output of the version-history command showing the historical list of installed Vault versions with their installation times and build dates. Note that version tracking was added in 1.9.0 and build dates are only available for versions 1.11.0 or greater.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/version-history.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\nNote: Version tracking was added in 1.9.0. Earlier versions have not been tracked.\n      The Build Date will only be available for versions 1.11.0 or greater.\n\nVersion  Installation Time     Build Date\n-------  -----------------     ----------\n1.9.0    2021-11-18T10:23:16Z\n1.9.1    2022-12-13T11:09:52Z\n1.9.2    2021-12-23T10:56:37Z\n1.11.0   2022-05-03T13:16:04Z  2022-05-03T08:34:11Z\n```\n\n----------------------------------------\n\nTITLE: JSON Response Example for Listing Rolesets in Vault\nDESCRIPTION: The JSON response returned by the Vault GCP backend when listing all configured rolesets, primarily identifying them by their keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"my-token-roleset\", \"my-sakey-roleset\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Pre-login Custom Messages in Vault\nDESCRIPTION: Sample JSON response showing the structure of pre-login custom messages. The response includes message details such as title, content, type, authentication status, time settings, and optional links.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-unauthenticated-messages.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"01234567-89ab-cdef-0123-456789abcdef\": {\n        \"title\": \"Pre-login Warning\",\n        \"message\": \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur nulla augue, placerat quis risus blandit, molestie imperdiet massa. Sed blandit rutrum odio quis varius. Fusce purus orci, maximus ac libero.\",\n        \"type\": \"modal\",\n        \"authenticated\": false,\n        \"start_time\": \"2024-01-01T00:00:00.000000000Z\",\n        \"end_time\": null,\n        \"options\": null,\n        \"link\": {\n          \"Details\": \"https://www.example.org/details\"\n        }\n      }\n    },\n    \"keys\": [\n      \"01234567-89ab-cdef-0123-456789abcdef\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Request to Re-Encrypt - Shell\nDESCRIPTION: This shell command demonstrates how to make a POST request to re-encrypt existing ciphertext using a specific key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/reencrypt/my-key\n```\n\n----------------------------------------\n\nTITLE: Installing Gothic Haskell Package\nDESCRIPTION: Command to install Gothic Haskell client library using Stack package manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ stack install gothic\n```\n\n----------------------------------------\n\nTITLE: Verifying Updated Vault License\nDESCRIPTION: This bash command executes the 'vault license get' command inside the Vault pod to verify that the updated license is now active.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec vault-0 -- vault license get\n```\n\n----------------------------------------\n\nTITLE: Decryption API Request\nDESCRIPTION: Curl command to decrypt data using the Transit decryption endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/decrypt/my-key\n```\n\n----------------------------------------\n\nTITLE: Manually Rotating Role Password Using Hierarchical Path in Vault LDAP Secrets Engine\nDESCRIPTION: Manually triggers password rotation for the 'org/platform/dev' static role using the force flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_23\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write -f ldap/rotate-role/org/platform/dev\n```\n\n----------------------------------------\n\nTITLE: Installing Node-vault for Node.js\nDESCRIPTION: Command to install the node-vault Node.js client library using npm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ npm install node-vault\n```\n\n----------------------------------------\n\nTITLE: Setting CA Certificate Path via Environment Variable\nDESCRIPTION: Example showing how to specify the CA certificate path using the VAULT_CACERT environment variable. This method can be used as an alternative to the command line flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/ca-cert.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_CACERT=\"/path/to/certs/mycert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Vault Usage Reporting via Environment Variable\nDESCRIPTION: This snippet demonstrates how to disable Vault's product usage reporting using an environment variable. Setting the `OPTOUT_PRODUCT_USAGE_REPORTING` environment variable to `true` opts out of data collection. Note that this method requires a system restart for the changes to take effect.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/product-usage-reporting.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"$ export OPTOUT_PRODUCT_USAGE_REPORTING=true\"\n```\n\n----------------------------------------\n\nTITLE: Release Note - Fix for /sys/monitor Endpoint\nDESCRIPTION: This release note indicates a bug fix for the /sys/monitor endpoint in HashiCorp Vault. The endpoint was incorrectly reporting that streaming was not supported, and this note signifies that the issue has been resolved.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13200.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nhttp:Fix /sys/monitor endpoint returning streaming not supported`\n```\n\n----------------------------------------\n\nTITLE: Documenting Seal Status Improvement in Vault (Markdown)\nDESCRIPTION: This release note details an improvement to Vault's seal status reporting. The update enhances the sys/seal-status endpoint and the 'vault status' CLI command to provide more comprehensive information about the seal type when unsealed, as well as the recovery seal type for auto-seal configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23022.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: update sys/seal-status (and CLI vault status) to report the type of\nthe seal when unsealed, as well as the type of the recovery seal if an\nauto-seal.\n```\n```\n\n----------------------------------------\n\nTITLE: Improving Auto Auth Mechanism - Release Note\nDESCRIPTION: This release note details improvements to the Vault agent's auto authentication feature, which will now trigger re-authentication if the token used for rendering templates is revoked, has a limited number of uses, or is invalid. It is aimed at enhancing the reliability of leveraging tokens within the Vault agent's functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26172.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"agent: Agent will re-trigger auto auth if token used for rendering templates has been revoked, has exceeded the number of uses, or is a bogus value.\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Database Initialization Errors in Vault\nDESCRIPTION: Provides a counter metric to monitor and track the number of errors encountered when initializing database secrets engines across the Vault system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/database/initialize/error.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### database.Initialize.error ((#database-initialize-error))\n\nMetric type | Value   | Description\n----------- | ------- | -----------\ncounter     | number  | Number of errors encountered across all database secrets engines while initializing the database\n```\n\n----------------------------------------\n\nTITLE: Verifying Installation on Linux\nDESCRIPTION: This snippet provides command line instructions to verify that the Vault CLI is functioning properly and that the Vault server can be started in development mode.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ vault -h\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault server -dev -config ${VAULT_CONFIG}/vault.hcl\n```\n\n----------------------------------------\n\nTITLE: Opening HSM Wallet in Oracle TDE\nDESCRIPTION: Open the HSM wallet in Oracle TDE using a specified password. This command is essential for accessing encrypted keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/oracle-tde.mdx#2025-04-14_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nADMINISTER KEY MANAGEMENT SET KEYSTORE OPEN IDENTIFIED BY \"1234\" CONTAINER = ALL;\n```\n\n----------------------------------------\n\nTITLE: Getting the Signed License String in Vault CLI\nDESCRIPTION: This command utilizes the '-signed' flag with 'vault license get' to retrieve the actual signed license string when a stored license is available within HashiCorp Vault. This requires that the license is not autoloaded. The user must ensure the license is properly stored to successfully view the signed string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/license/get.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault license get -signed\n02MV4UU43BK5H...\n```\n\n----------------------------------------\n\nTITLE: Reading Pinned Plugin Version - cURL Request\nDESCRIPTION: cURL command to read a specific pinned plugin version using GET request with authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-pins.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/plugins/pins/auth/github\n```\n\n----------------------------------------\n\nTITLE: GET Identity Access List Entry using Vault API with curl\nDESCRIPTION: This snippet shows how to retrieve a specific entry from the identity access list using the Vault API. It sends a GET request to the `/auth/aws/identity-accesslist/:instance_id` endpoint, authenticated with a Vault token.  The `instance_id` parameter, specifying the EC2 instance ID, is mandatory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_47\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/aws/identity-accesslist/i-aab47d37\n```\n\n----------------------------------------\n\nTITLE: Reading Key Information from Vault\nDESCRIPTION: This command reads the information of a specific key from Vault and formats the output as JSON, which is then piped to jq for better readability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read -format=json keymgmt/key/rsa-1 | jq\n```\n\n----------------------------------------\n\nTITLE: Creating a PKI Key with JSON Payload\nDESCRIPTION: JSON payload example for generating a new EC private key with 256 bits named 'root-key-2022' in Vault's PKI mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_53\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_type\": \"ec\",\n  \"key_bits\": \"256\",\n  \"key_name\": \"root-key-2022\"\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Timeout in Vault Initialization\nDESCRIPTION: This release note describes a bug fix for a timeout issue that occurs when initializing the Vault. The fix involves limiting the timeout during the process of persisting barrier keyring encryption counts, which improves the efficiency of the initialization phase.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24336.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\ncore: Fix a timeout initializing Vault by only using a short timeout persisting barrier keyring encryption counts.\"\n```\n\n----------------------------------------\n\nTITLE: Snapshot API Response Example\nDESCRIPTION: This JSON response format displays the continuation token and values returned by Vault after a snapshot operation. It includes an array of tokenized values and a continuation field to resume snapshotting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_77\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"continuation\": \"2F1nUpUKMZUBnwQ77qBt4D\",\n    \"values\": [\n      \"CiDiVGJaXlcS0ky4mRVvfLdxk7FWh8ATcFMSbQRtWCs/HxJ8CAESIGQH2oukpwPAFoK2SaKUcYAxrnxtvJn7n5d3dWx2eCLcIkZ3FXcQKu5+Bnl4NzOSL2ZkU5t9OOpQOMg0lwsMkq0Vm98ANGC9RabaP2ePddzTkD58GBvsVetYVnqHQFZufQ2pw/EXkFIWMg4I4KvX4vf/////ARCgHw==\",\n      \"CiADFWL7/equiN83oWl/MvYWRYQLvjUxDVvoxK1Ghw4drBJ8CAESIOWPEUBUq4ATLY83P3vLknmWlKYjKVwTgB1z7hYGdyHPIka2nyOX1z3D4pMsZWwMFJlNBiT1Lb4MMZ6CUbclykLw/LBG5GTWQbOXx/3Vd54RAA82382mUem8Lu8BCMJYAa6vj/6aS9CLMg4I4KvX4vf/////ARCIJw==\",\n      \"CiBf2+RqeiXmIHIh2fytEKOesTZ5U31D4BZ5xyhpuj3UfRJ8CAESIOWPEUBUq4ATLY83P3vLknmWlKYjKVwTgB1z7hYGdyHPIkbbU3ho25Om5AsuLUdsAPiEnyRGbtUUDxrvSoz5T1OVY363dN08cN8diJJro+AE/Zv4QMnq9Vbu8FD237YkLV1bnX/t29ZMMg4I4KvX4vf/////ARDwLg==\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Log Format via CLI Flag\nDESCRIPTION: Example of configuring JSON log format using command-line flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/log-format.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-log-format json\n```\n\n----------------------------------------\n\nTITLE: Register Vault Agent Service using New-Service\nDESCRIPTION: Creates a Windows service for Vault Agent using PowerShell's New-Service cmdlet with automatic startup. This method is preferred when paths contain spaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/winsvc.mdx#2025-04-14_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Service -Name \"VaultAgent\" -BinaryPathName \"C:\\vault\\vault.exe agent -config=C:\\vault\\agent-config.hcl\" -DisplayName \"Vault Agent\" -StartupType \"Automatic\"\n```\n\n----------------------------------------\n\nTITLE: Reading AWS Root Configuration\nDESCRIPTION: cURL command to retrieve the current AWS root configuration from Vault. This endpoint returns non-sensitive configuration values but never exposes the secret key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/aws/config/root\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping the target key using Google's tink library in Go\nDESCRIPTION: This Go code snippet uses Google's tink library to perform the key wrap operation on the target key using the ephemeral AES key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nwrapKWP, err := subtle.NewKWP(aesKey)\nif err != nil {\n        return err\n}\nwrappedTargetKey, err := wrapKWP.Wrap(key)\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Auth Configuration Response\nDESCRIPTION: Sample JSON response when retrieving GitHub auth configuration, showing organization, base_url, and TTL settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"812229d7-a82e-0b20-c35b-81ce8c1b9fa6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"organization\": \"acme-org\",\n    \"base_url\": \"\",\n    \"ttl\": \"\",\n    \"max_ttl\": \"\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Engine's environment.js in Vault\nDESCRIPTION: Configuration file for the engine's environment that defines modulePrefix and environment settings to integrate with the main Vault application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/ember-engines.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: BUSL-1.1\n */\n\n// config/environment.js\n\n'use strict';\n\nmodule.exports = function (environment) {\n  const ENV = {\n    modulePrefix: '<engine-name>',\n    environment: environment,\n  };\n\n  return ENV;\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Machine Sizes for Vault with Integrated Storage\nDESCRIPTION: This markdown table compares small and large machine sizes for Vault using Integrated Storage, including CPU, memory, disk, and typical cloud instance types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migration-checklist.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Size  | CPU      | Memory       | Disk   | Typical Cloud Instance Types               |\n| ----- | -------- | ------------ | ------ | ------------------------------------------ |\n| Small | 2 core   | 8-16 GB RAM  | 100 GB | **AWS:** m5.large, m5.xlarge               |\n|       |          |              |        | **Azure:** Standard_D2_v3, Standard_D4_v3  |\n|       |          |              |        | **GCE:** n2-standard-2, n2-standard-4      |\n| Large | 4-8 core | 32-64 GB RAM | 200 GB | **AWS:** m5.2xlarge, m5.4xlarge            |\n|       |          |              |        | **Azure:** Standard_D8_v3, Standard_D16_v3 |\n|       |          |              |        | **GCE:** n2-standard-8, n2-standard-16     |\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Headers in Vault Authentication Parameters\nDESCRIPTION: Example of configuring custom headers to be included in Vault requests when performing authentication, showing how to set a custom X-vault header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nheaders:\n  X-vault-something1: \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Release Note: LDAP Authentication Bug Fix\nDESCRIPTION: Addresses a panic in the LDAP authentication method when a performance standby node attempts to write or update configurations. This bug fix prevents unexpected crashes in Vault's LDAP authentication functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30039.txt#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nauth/ldap: fix a panic when a performance standby node attempts to write/update config.\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Unlocked Mounts Metrics in Vault Core\nDESCRIPTION: Release note documenting a bug fix for the metrics system in Vault core, specifically addressing issues with unlocked mounts read functionality for usage reporting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29091.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore/metrics: Fix unlocked mounts read for usage reporting.\n```\n\n----------------------------------------\n\nTITLE: Defining Vault Swift List Metric in Markdown\nDESCRIPTION: This snippet defines the 'vault.swift.list' metric using a markdown table. It specifies the metric type, value, and provides a description of what the metric measures.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/swift/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.swift.list ((#vault-swift-list))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `LIST` operation against the OpenStack Swift backend\n```\n\n----------------------------------------\n\nTITLE: Bumping Version of Go Plugin\nDESCRIPTION: This snippet documents the change in version for the Go Plugin dependency, upgrading from v1.4.9 to v1.4.10. The upgrade may include important bug fixes or enhancements that improve functionality or performance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20966.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nBump github.com/hashicorp/go-plugin version v1.4.9 -> v1.4.10\"\n```\n\n----------------------------------------\n\nTITLE: Clone Vault Repository (Powershell)\nDESCRIPTION: Clones the official Vault repository from GitHub into the created directory. This provides the source code needed to build Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\n\"git clone https://github.com/hashicorp/vault.git\"\n```\n\n----------------------------------------\n\nTITLE: Allow Environment Variable Setting for Docker Clusters\nDESCRIPTION: This snippet highlights an improvement in the SDK helper of the Vault project, which now allows the setting of environment variables when using the NewTestDockerCluster function. This improvement is aimed at better test management and flexibility. No additional dependencies were introduced with this change.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27457.txt#2025-04-14_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nsdk/helper: Allow setting environment variables when using NewTestDockerCluster\n```\n\n----------------------------------------\n\nTITLE: Configuring an Audit Device Path in Vault\nDESCRIPTION: This example demonstrates the usage of the -path flag to set a custom internal path for a Vault audit device. The path parameter specifies where Vault will access the audit device, and must be unique across all audit devices.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/flags/path.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-path \"/audit/kv-file\"\n```\n\n----------------------------------------\n\nTITLE: Adding Version Mismatch Logging to Vault Agent\nDESCRIPTION: Release note enhancement that adds a new log entry when Vault Agent starts to indicate if its version differs from the connected Vault Server. This improves version compatibility monitoring and troubleshooting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18684.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nagent: Add note in logs when starting Vault Agent indicating if the version differs to the Vault Server.\n```\n\n----------------------------------------\n\nTITLE: Deprecated API Endpoints in Vault 1.8.x\nDESCRIPTION: Overview of API endpoints that have been deprecated and their recommended replacements\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.8.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* `sys/license` to manage licenses in storage; recommended to use License Autoloading\n* `/gcp/token/:roleset` and `/gcp/key/:roleset` paths for generating secrets in GCP Secrets; use `/gcp/roleset/:roleset/token` and `/gcp/roleset/:roleset/key` instead\n```\n\n----------------------------------------\n\nTITLE: Installing Ansible Modules for HashiVault\nDESCRIPTION: Command to install Ansible modules for HashiVault using pip.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pip install ansible-modules-hashivault\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Auth CF Plugin Update\nDESCRIPTION: A markdown-formatted release note indicating that the Cloud Foundry authentication plugin for HashiCorp Vault has been updated to version 0.19.0. This note is categorized as a 'change' type release note.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28266.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/cf: Update plugin to v0.19.0\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Transit Key and Policy with Terraform\nDESCRIPTION: Terraform configuration to set up transit secret cache, create encryption key, and define access policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/client-cache.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nlocals {\n  transit_path      = \"<VAULT_TRANSIT_PATH>\"\n  transit_namespace = \"<VAULT_NAMESPACE>\"\n}\n\nresource \"vault_transit_secret_cache_config\" \"cache\" {\n  namespace = local.transit_namespace\n  backend   = local.transit_path\n  size      = 500\n}\n\nresource \"vault_transit_secret_backend_key\" \"cache\" {\n  namespace        = local.transit_namespace\n  backend          = local.transit_path\n  name             = \"vso-client-cache\"\n  deletion_allowed = true\n}\n\ndata \"vault_policy_document\" \"operator_transit\" {\n  rule {\n    path         = \"${local.transit_path}/encrypt/${vault_transit_secret_backend_key.cache.name}\"\n    capabilities = [\"create\", \"update\"]\n    description  = \"encrypt\"\n  }\n  rule {\n    path         = \"${local.transit_path}/decrypt/${vault_transit_secret_backend_key.cache.name}\"\n    capabilities = [\"create\", \"update\"]\n    description  = \"decrypt\"\n  }\n}\n\nresource \"vault_policy\" \"operator\" {\n  namespace = vault_transit_secret_backend_key.cache.namespace\n  name      = \"operator\"\n  policy    = data.vault_policy_document.operator_transit.hcl\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Home Directory in Windows\nDESCRIPTION: Sets an environment variable for the Vault home directory in Windows, which will be used for service configuration and file paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$env:VAULT_HOME = \"${env:ProgramFiles}\\Vault\"\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Service Working Directory in Windows\nDESCRIPTION: Configures the working directory for the Vault Windows service to ensure proper file path resolution during operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\nnssm set MS_VAULT AppDirectory \"${env:VAULT_HOME}\" ; `\nnssm set MS_VAULT AppParameters \"server -config Config\\vault.hcl\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Panic in Storage/Raft for Vault\nDESCRIPTION: This snippet documents a bug fix for a panic that occurs when attempting to store a key larger than 32KB in a transaction within the storage/raft module of HashiCorp Vault. It addresses stability issues when handling large keys, ensuring that transactions can be executed without crashing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13286.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:bug\\nstorage/raft: Fix a panic when trying to store a key > 32KB in a transaction.\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for LIST Identity Access List Entries (JSON)\nDESCRIPTION: This JSON response shows the structure returned when listing all entries in the identity access list.  The `keys` array within the `data` object contains the list of instance IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_50\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"i-aab47d37\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: High Availability Peer Tracking Enhancement\nDESCRIPTION: Adds a new mechanism to track and view peers communicating with the active Vault node, improving cluster visibility and monitoring capabilities\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13292.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrelease-note:improvement\ncore/ha: Add new mechanism for keeping track of peers talking to active node, and new 'operator members' command to view them.\n```\n\n----------------------------------------\n\nTITLE: Defining PreStop Lifecycle Hook in Kubernetes\nDESCRIPTION: Configures the PreStop hook to gracefully terminate a Vault pod by sleeping and sending a SIGTERM signal\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\npreStop:\n  - /bin/sh\n  - -c\n  - sleep {{ .Values.server.preStopSleepSeconds }} && kill -SIGTERM $(pidof vault)\n```\n\n----------------------------------------\n\nTITLE: Updating Mount Configuration - Shell Request\nDESCRIPTION: Example of making a POST request to update mount configuration using curl with a JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mounts.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/mounts/my-mount/tune\n```\n\n----------------------------------------\n\nTITLE: Customizing Vault with Zookeeper Address and Path\nDESCRIPTION: This snippet provides an example of configuring Vault to connect with a Zookeeper instance using a custom port and specifies a custom storage path. It highlights flexibility in setting network endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/zookeeper.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"zookeeper\" {\n  address = \"localhost:3253\"\n  path    = \"my-vault-data/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maximum Length for AppRole Role Names - Release Note\nDESCRIPTION: This release note details the enhancement of the AppRole authentication method by establishing a maximum length of 4096 characters for role names. This change aims to ensure compatibility with HMAC calculations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17768.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nauth/approle: Add maximum length of 4096 for approle role_names, as this value results in HMAC calculation\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Role for Issuing Certificates in Vault\nDESCRIPTION: Configures a role named 'example-dot-com' with specific parameters for issuing certificates under the example.com domain.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/quick-start-intermediate-ca.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write pki_int/roles/example-dot-com \\\n    allowed_domains=example.com \\\n    allow_subdomains=true max_ttl=72h\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating KV Metadata in Vault\nDESCRIPTION: This command creates a new key or updates the configuration settings for an existing key in the KV v2 secrets engine within Vault. It requires the `vault` CLI and appropriate permissions to write to the specified key path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/metadata.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv metadata put -mount=secret creds\nSuccess! Data written to: secret/metadata/creds\n```\n\n----------------------------------------\n\nTITLE: Running FoundationDB Backend Tests\nDESCRIPTION: Command to run the FoundationDB backend tests. The FDB_ENABLED=1 flag is required to enable FoundationDB support, and TEST parameter specifies which tests to run.\nSOURCE: https://github.com/hashicorp/vault/blob/main/physical/foundationdb/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ make test TEST=./physical/foundationdb FDB_ENABLED=1\n```\n\n----------------------------------------\n\nTITLE: Improving Kubernetes Role Resolution in Vault Auth\nDESCRIPTION: Enhancement to the Kubernetes authentication method for more flexible role resolution mechanism. Addresses GitHub issue 156 in the Vault Kubernetes authentication plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17161.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nauth/kubernetes: Role resolution for K8S Auth [[GH-156](https://github.com/hashicorp/vault-plugin-auth-kubernetes/pull/156)]\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Configuration Method in Vault API - Plaintext\nDESCRIPTION: This snippet documents the addition of the Config.TLSConfig method, which enables the fetching of TLS configuration from a client's configuration settings. This enhancement improves the way clients can manage secure connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20265.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\n* api: Add Config.TLSConfig method to fetch the TLS configuration from a client config.\"\n```\n\n----------------------------------------\n\nTITLE: Sample Request to Decrypt - Shell\nDESCRIPTION: This shell command demonstrates how to make a POST request to decrypt ciphertext using a specific key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/gcpkms/decrypt/my-key\n```\n\n----------------------------------------\n\nTITLE: Sample Response for CF Auth Configuration\nDESCRIPTION: JSON response example showing the current Cloud Foundry auth method configuration in Vault, including identity CA certificates, API address, credentials, and login validation parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identity_ca_certificates\": [\n    \"-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\"\n  ],\n  \"cf_api_addr\": \"https://api.sys.somewhere.cf-app.com\",\n  \"cf_username\": \"vault\",\n  \"cf_api_trusted_certificates\": [\n    \"-----BEGIN CERTIFICATE-----\\nMIIEtzCCA5+.......ZRtAfQ6r\\nwlW975rYa1ZqEdA=\\n-----END CERTIFICATE-----\"\n  ],\n  \"login_max_seconds_not_before\": 5,\n  \"login_max_seconds_not_after\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note: Bug Fix for OCSP Caching in Vault\nDESCRIPTION: This release note addresses a bug where OCSP query responses were not being cached in the `auth/cert` component of Vault. This issue could lead to increased load on OCSP servers and potentially slower certificate validation.  The fix ensures that OCSP responses are properly cached, improving performance and reducing external dependencies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25986.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"release-note:bug\nauth/cert: Address an issue in which OCSP query responses were not cached\"\n```\n\n----------------------------------------\n\nTITLE: Configuring a Policy-Based Role with Remote Policies in AliCloud\nDESCRIPTION: Command to configure a Vault role that generates access tokens using existing policies in AliCloud. This example uses system policies for OSS and RDS read-only access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/alicloud.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n$ vault write alicloud/role/policy-based \\\n    remote_policies='name:AliyunOSSReadOnlyAccess,type:System' \\\n    remote_policies='name:AliyunRDSReadOnlyAccess,type:System'\n```\n\n----------------------------------------\n\nTITLE: Tracking PKI Certificate Store Total Entries\nDESCRIPTION: A gauge metric that captures the total number of certificate store entries to be processed during a tidy operation in HashiCorp Vault's PKI secrets engine\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/secrets/pki/tidy/cert_store_total_entries.mdx#2025-04-14_snippet_0\n\nLANGUAGE: metrics\nCODE:\n```\nsecrets.pki.tidy.cert_store_total_entries\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vault Authentication Method List\nDESCRIPTION: Retrieves detailed authentication method list in JSON format for identifying method accessors\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nvault auth list -format=json --detailed\n```\n\n----------------------------------------\n\nTITLE: Generating Performance Secondary Token\nDESCRIPTION: This API call generates an activation token for connecting a secondary to the primary cluster. The token is uniquely identified by the provided ID parameter, which can later be used to revoke access. Requires sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"us-east-1\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/secondary-token\n```\n\n----------------------------------------\n\nTITLE: Reading Secret Metadata in Vault KV Engine\nDESCRIPTION: This cURL command demonstrates how to read the metadata of a secret at a specified path in Vault's KV engine using the GET method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/secret/metadata/my-secret\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Plugin Containers Feature\nDESCRIPTION: This markdown snippet documents a new feature in HashiCorp Vault that allows registering, managing, and running plugins inside containers on Linux systems.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22712.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Plugin Containers**: Vault supports registering, managing, and running plugins inside a container on Linux.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Documentation Link - Release Note Entry\nDESCRIPTION: A release note in markdown format indicating an improvement to Vault's documentation by adding a link to an Enigma secret plugin on the website.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14389.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nwebsite/docs: added a link to an Enigma secret plugin.\n```\n\n----------------------------------------\n\nTITLE: Enabling TLS for Zookeeper Connections\nDESCRIPTION: This example configures Vault to connect to Zookeeper using TLS. It specifies multiple parameters for secure communication, including certificate and private key files, and sets the minimum TLS version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/zookeeper.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"zookeeper\" {\n  address = \"host1.com:5200,host2.com:5200,host3.com:5200\"\n  path = \"vault_path_on_zk/\"\n  znode_owner = \"digest:vault_user:digestvalueforpassword=\"\n  auth_info = \"digest:vault_user:thisisthepassword\"\n  redirect_addr = \"http://localhost:8200\"\n  tls_verify_ip = \"true\"\n  tls_enabled= \"true\"\n  tls_min_version= \"tls12\"\n  tls_cert_file = \"/path/to/the/cert/file/zkcert.pem\"\n  tls_key_file = \"/path/to/the/key/file/zkkey.pem\"\n  tls_skip_verify= \"false\"\n  tls_ca_file= \"/path/to/the/ca/file/ca.pem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Raft Autopilot Status Output in Vault Community Edition\nDESCRIPTION: Example output of the Vault Raft Autopilot status command showing the health of a three-node cluster. The output includes information about cluster health, failure tolerance, server roles, and connection status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nHealthy:                         true\nFailure Tolerance:               1\nLeader:                          vault_1\nVoters:\n   vault_1\n   vault_2\n   vault_3\nServers:\n   vault_1\n      Name:              vault_1\n      Address:           127.0.0.1:8201\n      Status:            leader\n      Node Status:       alive\n      Healthy:           true\n      Last Contact:      0s\n      Last Term:         3\n      Last Index:        61\n      Version:           1.17.3\n      Node Type:         voter\n   vault_2\n      Name:              vault_2\n      Address:           127.0.0.1:8203\n      Status:            voter\n      Node Status:       alive\n      Healthy:           true\n      Last Contact:      564.765375ms\n      Last Term:         3\n      Last Index:        61\n      Version:           1.17.3\n      Node Type:         voter\n   vault_3\n      Name:              vault_3\n      Address:           127.0.0.1:8205\n      Status:            voter\n      Node Status:       alive\n      Healthy:           true\n      Last Contact:      3.814017875s\n      Last Term:         3\n      Last Index:        61\n      Version:           1.17.3\n      Node Type:         voter\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration\nDESCRIPTION: Configuration example with custom TLS settings for secure Consul communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/consul.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"consul\" {\n  scheme        = \"https\"\n  tls_ca_file   = \"/etc/pem/vault.ca\"\n  tls_cert_file = \"/etc/pem/vault.cert\"\n  tls_key_file  = \"/etc/pem/vault.key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Agent HTTP API Endpoint Definition\nDESCRIPTION: API endpoint specification for triggering agent shutdown via POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Method | Path             |\n| :----- | :--------------- |\n| `POST` | `/agent/v1/quit` |\n```\n\n----------------------------------------\n\nTITLE: Vault Logging for Disabled Reporting (Environment Variable)\nDESCRIPTION: This snippet shows the log entry that appears in the Vault server logs when product usage reporting is disabled using the environment variable. This confirms that the environment variable has been read and Vault is no longer collecting product usage data. If both the HCL config and environment variable are set, the environment variable takes precedence.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/product-usage-reporting.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n\"[DEBUG] core: product usage reporting disabled\"\n```\n\n----------------------------------------\n\nTITLE: Response example for listing PingID MFA methods\nDESCRIPTION: An example JSON response listing the keys of available PingID MFA methods. Each key corresponds to a unique PingID MFA configuration in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"f8381105-67f0-4105-8662-4b07ae5c1233\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Create/Update LDAP Group Payload\nDESCRIPTION: This JSON payload defines the policies to associate with an LDAP group in Vault. The policies are specified as a comma-separated string.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"policies\": \"admin,default\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Userpass Auth Method in Vault\nDESCRIPTION: This command enables the userpass authentication method in Vault, allowing users to log in with a username and password.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n$ vault auth enable userpass\n```\n\n----------------------------------------\n\nTITLE: Printing Usage for Custom Path Auth Method in Vault CLI\nDESCRIPTION: This example shows how to use the 'auth help' command to print usage information for an authentication method enabled at a custom path ('my-method/'). The actual output is not shown in the snippet, but it would contain specific help information for the auth method at that path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/help.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth help my-method/\n# ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Vault Status Output\nDESCRIPTION: Shows the current status of a Vault cluster using Consul storage, including seal type, initialization status, version, and HA configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/consul-to-raft.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nKey             Value\n---             -----\nSeal Type       shamir\nInitialized     true\nSealed          false\nTotal Shares    1\nThreshold       1\nVersion         1.14.8+ent\nBuild Date      2023-12-05T01:49:39Z\nStorage Type    consul\nCluster Name    vault-cluster-68870bf8\nCluster ID      cd18c692-f2e3-77a5-fba3-28f06f41f375\nHA Enabled      true\nHA Cluster      https://vault-0.vault-internal:8201\nHA Mode         active\nActive Since    2024-04-10T02:45:33.367042122Z\nLast WAL        52\n```\n\n----------------------------------------\n\nTITLE: Using the -output-policy Flag with Vault CLI Commands\nDESCRIPTION: The -output-policy is a global CLI flag that can be added to any Vault command to print the minimum required policy HCL for that operation. The output includes whether the given path requires the \"sudo\" capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14899.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n-output-policy\n```\n\n----------------------------------------\n\nTITLE: Configuring RADIUS Connection Sample Request with cURL\nDESCRIPTION: This snippet demonstrates how to make a POST request to configure the RADIUS authentication method using cURL with a JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/radius/config\n```\n\n----------------------------------------\n\nTITLE: File Structure Example for CRUD Routes in Vault UI\nDESCRIPTION: Demonstrates the recommended folder structure for organizing route files in a hierarchical manner, particularly for CRUD operations. This structure allows parent routes to automatically pass their models to child routes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/routing.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n├── routes/vault/cluster/access\n│   ├── parent/\n│   │   ├── index.js\n│   │   ├── resource-foos /\n│   │   │   ├── resource-foo.js\n│   │   │   ├── create.js\n│   │   │   ├── index.js\n│   │   │   ├── resource-foo/\n│   │   │   │   ├── details.js\n│   │   │   │   ├── edit.js\n```\n\n----------------------------------------\n\nTITLE: Allow Patching Issuer to Set Empty Issuer Name\nDESCRIPTION: This snippet documents a release note that indicates the ability to patch a PKI issuer to provide an empty issuer name. This change is relevant for users who need to manage issuer identities more flexibly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18466.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:bug\\nsecrets/pki: Allow patching issuer to set an empty issuer name.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Example of running a no-quoteless-attributes codemod in Vault UI\nDESCRIPTION: A specific example showing how to run the no-quoteless-attributes codemod against all handlebars templates in the Vault UI. This codemod likely ensures all HTML attributes have proper quotes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/scripts/codemods/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx ember-template-recast \"**/*.hbs\" -t ./scripts/codemods/no-quoteless-attributes.js\n```\n\n----------------------------------------\n\nTITLE: Documenting Improvement for Okta Push Factor\nDESCRIPTION: This release note details an enhancement for the Okta authentication method within Vault, specifically the inclusion of the 'x-forwarded-for' header in requests. This change aims to improve tracking and logging of user authentication requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12320.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nauth/okta: Send x-forwarded-for in Okta Push Factor request\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy in Vault Secrets Operator\nDESCRIPTION: Example configuration for rolling update strategy in a multi-replica deployment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstrategy: {}\n  rollingUpdate:\n    maxSurge: 1\n    maxUnavailable: 0\n  type: RollingUpdate\n```\n\n----------------------------------------\n\nTITLE: Updating Redis-Elasticache Plugin Version in Vault\nDESCRIPTION: This release note indicates that the Vault database Redis-Elasticache plugin has been updated to version v0.4.0. This likely includes bug fixes, new features, or performance improvements related to the integration of Vault with Redis-Elasticache.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27139.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\ndatabase/redis-elasticache: Update plugin to v0.4.0\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Revoking a Token by Accessor\nDESCRIPTION: This snippet includes the JSON payload required for revoking a token using its accessor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"accessor\": \"2c84f488-2133-4ced-87b0-570f93a76830\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PKI Health Check Subcommand in Vault CLI\nDESCRIPTION: Adds a new subcommand to the Vault CLI for performing health checks on PKI instances, allowing administrators to quickly assess the operational status and configuration of their PKI setup\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17750.txt#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault pki health-check\n```\n\n----------------------------------------\n\nTITLE: Removing Deprecated UI Parameter\nDESCRIPTION: Enhancement to remove the deprecated `current_billing_period` parameter from dashboard activity log request, improving UI data retrieval efficiency\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27559.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Remove deprecated `current_billing_period` from dashboard activity log request\n```\n\n----------------------------------------\n\nTITLE: Vault Request Limiter Configuration Warnings\nDESCRIPTION: The snippets showcase warnings output by Vault when a deprecated `request_limiter` configuration is detected. Vault automatically disables the unsupported configuration and issues both UI warnings and log entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.18.x.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nWARNING: Request Limiter configuration is no longer supported; overriding server configuration to disable\n```\n\nLANGUAGE: text\nCODE:\n```\n... [WARN]  unknown or unsupported field request_limiter found in configuration at config.hcl:22:1\n```\n\n----------------------------------------\n\nTITLE: Including Save Errors Metric\nDESCRIPTION: This snippet includes the metric for any errors encountered during the saving of automated snapshots. Monitoring this helps in identifying problems in snapshotting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/autosnap.mdx#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/autosnapshots/save/errors.mdx'\n```\n\n----------------------------------------\n\nTITLE: Installing Vault on OpenShift using Helm\nDESCRIPTION: This command installs the latest release of the Vault Helm chart on OpenShift. It sets the global.openshift value to true, which is required for all OpenShift deployments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/openshift.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm install vault hashicorp/vault \\\n    --set \"global.openshift=true\" \\\n    --set \"server.dev.enabled=true\"\n```\n\n----------------------------------------\n\nTITLE: Adding Sudo ACL Requirement for Vault Activity Export API\nDESCRIPTION: This change notes that the activity export API now requires the 'sudo' ACL capability. This modification enhances security by restricting access to sensitive activity data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27846.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nactivity: The [activity export API](https://developer.hashicorp.com/vault/api-docs/system/internal-counters#activity-export) now requires the `sudo` ACL capability.\n```\n```\n\n----------------------------------------\n\nTITLE: Stopping Mirage Mock Backend\nDESCRIPTION: Commands to stop using the Mirage handler by killing the yarn process and unsetting the environment variable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nunset MIRAGE_DEV_HANDLER\n```\n\n----------------------------------------\n\nTITLE: Setting Annotations as Multi-line String in Terraform\nDESCRIPTION: This Terraform configuration demonstrates how to set annotations for Vault ingress as a multi-line string using the Helm provider and yamlencode function, specifically for Azure load balancer settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_10\n\nLANGUAGE: hcl\nCODE:\n```\n  set {\n    name = \"server.ingress.annotations\"\n    value = yamlencode({\n      \"service.beta.kubernetes.io/azure-load-balancer-internal\": \"true\"\n      \"service.beta.kubernetes.io/azure-load-balancer-internal-subnet\": \"apps-subnet\"\n    })\n    type = \"auto\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Output Policy Flag in Vault CLI\nDESCRIPTION: Demonstrates the usage of the -output-policy flag which is a boolean parameter defaulting to false. When enabled, it prints the required Vault policy in HCL format and exits without executing the command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/flags/output-policy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-output-policy\n```\n\n----------------------------------------\n\nTITLE: Create/Update EGP Policy Request\nDESCRIPTION: Creates or updates an EGP policy using POST method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/policies/egp/breakglass\n```\n\n----------------------------------------\n\nTITLE: Querying RabbitMQ Role via CLI\nDESCRIPTION: Shows how to query a RabbitMQ role definition using Vault CLI by specifying the role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/rabbitmq.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read rabbitmq/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Enabling KV Secrets Engine - Shell\nDESCRIPTION: The command enables a new key/value secrets engine at the specified path 'my-kv'. This is necessary to facilitate secret management through Vault's kv-v2 engine with associated audit logging.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/filtering.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\nvault secrets enable -path my-kv kv-v2\n```\n\n----------------------------------------\n\nTITLE: Attempting Recovery in Vault Replication with cURL\nDESCRIPTION: This snippet demonstrates how to call the replication recovery endpoint using cURL. This endpoint attempts to recover replication when it's in an adverse state, such as when it has stopped syncing due to an error.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/recover\n```\n\n----------------------------------------\n\nTITLE: Installing Vault.NET C# Package\nDESCRIPTION: Command to install Vault.NET C# client library using NuGet Package Manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ Install-Package Vault\n```\n\n----------------------------------------\n\nTITLE: Setting Client Certificate Path in Vault CLI\nDESCRIPTION: Example showing how to set the path to a PEM-encoded CA certificate file using the command-line flag for Vault client authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/client-cert.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-client-cert \"/path/to/certs/mycert.pem\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Aliases in Vault Secrets Operator\nDESCRIPTION: Example configuration for setting up host aliases in the operator pod.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nhostAliases:\n  - ip: 192.168.1.100\n    hostnames:\n    - vault.example.com\n```\n\n----------------------------------------\n\nTITLE: Go Version Update in Vault\nDESCRIPTION: This snippet represents a release note indicating the update of the Go programming language version used within the Vault project.  It signifies a transition to Go version 1.16.5.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11802.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n```release-note:change\ngo: Update to Go 1.16.5\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Plugin Multiplexing\nDESCRIPTION: Enables plugin multiplexing for secrets and auth plugins when running as external plugins in Vault versions above 1.12. This feature improves plugin management and resource efficiency.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19215.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Secrets/Auth Plugin Multiplexing**: The plugin will be multiplexed when run\nas an external plugin by vault versions that support secrets/auth plugin\nmultiplexing (> 1.12)\n```\n\n----------------------------------------\n\nTITLE: Documenting Consul Storage Bug Fix in Release Notes\nDESCRIPTION: Release note detailing a critical bug fix for Vault's Consul storage backend where network partitioned nodes could cause data corruption by continuing to write after leadership changes. For Enterprise clusters, this issue could corrupt merkle trees requiring full re-indexing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23013.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nstorage/consul: fix a bug where an active node in a specific sort of network\npartition could continue to write data to Consul after a new leader is elected\npotentially causing data loss or corruption for keys with many concurrent\nwriters. For Enterprise clusters this could cause corruption of the merkle trees\nleading to failure to complete merkle sync without a full re-index.\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Audit Socket Address\nDESCRIPTION: Example of how to specify the address parameter for a Vault audit device. The address can be configured as a local path to the socket file where audit logs will be written.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/socket/address.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naddress=\"/tmp/audit.sock\"\n```\n\n----------------------------------------\n\nTITLE: Updating GCP KMS Secrets Plugin Version in Vault Release Note\nDESCRIPTION: This release note snippet documents a change in the Vault project, specifically updating the GCP KMS secrets plugin to version 0.18.0. This update likely includes new features, improvements, or bug fixes for the GCP KMS integration in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28300.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/gcpkms: Update plugin to v0.18.0\n```\n```\n\n----------------------------------------\n\nTITLE: Updating SQL Server to Use New KEK\nDESCRIPTION: SQL commands to create a new asymmetric key, setup credentials and login, and update the database encryption key to use the new Transit key version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/rotation.mdx#2025-04-14_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nuse master;\nGO\n\nCREATE ASYMMETRIC KEY TransitVaultAsymmetricV2\nFROM PROVIDER TransitVaultProvider\nWITH CREATION_DISPOSITION = OPEN_EXISTING,\nPROVIDER_KEY_NAME = 'ekm-encryption-key';\n\n\nCREATE CREDENTIAL TransitVaultTDECredentialsV2\n    WITH IDENTITY = '<approle-role-id>',\n    SECRET = '<approle-secret-id>'\nFOR CRYPTOGRAPHIC PROVIDER TransitVaultProvider;\nGO\n\nCREATE LOGIN TransitVaultTDELoginV2 FROM ASYMMETRIC KEY TransitVaultAsymmetricV2;\n\nuse TestTDE;\ngo\n\nALTER DATABASE ENCRYPTION KEY ENCRYPTION BY SERVER ASYMMETRIC KEY TransitVaultAsymmetricV2;\n```\n\n----------------------------------------\n\nTITLE: Cache Clear API Request using cURL\nDESCRIPTION: Shell command demonstrating how to call the cache clear API endpoint using cURL with a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:1234/proxy/v1/cache-clear\n```\n\n----------------------------------------\n\nTITLE: Combined CRL Response\nDESCRIPTION: JSON response containing the combined PEM-encoded CRL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_114\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"crl\": \"<PEM encoded crl>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Role Tag Deny List Tidy Payload\nDESCRIPTION: JSON payload for configuring role tag deny list cleanup settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"safety_buffer\": \"48h\"\n}\n```\n\n----------------------------------------\n\nTITLE: List Available PKI Health Checks\nDESCRIPTION: Shows the list of available health checks and their default configuration values for a specific mount\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki health-check -list pki-root/\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fixes for LDAP Roles - Markdown\nDESCRIPTION: This snippet provides a release note documenting bug fixes for rendering issues associated with LDAP dynamic and static roles that share the same name. This fix aims to enhance the stability and usability of the UI when managing LDAP roles. No additional dependencies are noted for this fix.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28824.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:bug\\nui: Fixes rendering issues of LDAP dynamic and static roles with the same name\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Using Output Curl String Flag in Vault CLI\nDESCRIPTION: Demonstrates the usage of the -output-curl-string flag which is a boolean parameter defaulting to false. When enabled, it prints the equivalent cURL API call(s) for a Vault CLI command without executing the actual command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/flags/output-curl-string.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n-output-curl-string (bool : false)\n```\n\n----------------------------------------\n\nTITLE: Example Syslog Error Message\nDESCRIPTION: Example of error messages that appear when audit logs exceed the syslog host's maximum socket send buffer size.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/syslog.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] audit: backend failed to log response:  backend=syslog/ error=write unixgram ->/var/run/log: write: message too long\n[ERROR] core: failed to audit response: request_path=pki/certs/ error=1 error occurred:\n* no audit backend succeeded in logging the response\n```\n\n----------------------------------------\n\nTITLE: Measuring Consul Storage Backend GET Operation Duration\nDESCRIPTION: A metric that captures the time required to execute a GET operation in the Consul storage backend for HashiCorp Vault, measured in milliseconds\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/consul/get.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.consul.get ((#vault-consul-get))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `GET` operation against the Consul storage backend\n```\n\n----------------------------------------\n\nTITLE: Adding Full Secret Path to KV Table-Formatted Responses in Vault\nDESCRIPTION: Release note indicating an improvement to the Key-Value secrets engine in HashiCorp Vault where the full secret path is now included in table-formatted responses, enhancing visibility and traceability of secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14301.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nsecrets/kv: add full secret path output to table-formatted responses\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Information from Vault\nDESCRIPTION: Shows how to get detailed information about a specific plugin in the Vault catalog including its properties and configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin info secret my-custom-plugin\nKey                   Value\n---                   -----\nargs                  []\nbuiltin               false\ncommand               my-custom-plugin\ndeprecation_status    n/a\nname                  my-custom-plugin\noci_image             n/a\nruntime               n/a\nsha256                33e72f3d30ff2acdbf3cf3c8fa1c8945b60dab876c4226ab25617a63c9f16cc5\nversion               n/a\n```\n\n----------------------------------------\n\nTITLE: Default Secrets Metrics Includes\nDESCRIPTION: Includes telemetry metrics for key-value (KV) secrets and lease creation operations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/secrets.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/secret/kv/count.mdx'\n@include 'telemetry-metrics/vault/secret/lease/creation.mdx'\n```\n\n----------------------------------------\n\nTITLE: Updating JWT Authentication Plugin\nDESCRIPTION: Release note documenting the upgrade of the JWT authentication plugin to version 0.20.0 in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25326.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\\nauth\\/jwt: Update plugin to v0.20.0\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Log Format via Environment Variable\nDESCRIPTION: Example of configuring JSON log format using environment variable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/log-format.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_LOG_FORMAT=json\n```\n\n----------------------------------------\n\nTITLE: Release Note: UI Bar Chart Update Bug Fix\nDESCRIPTION: This release note indicates that a bug fix has been implemented for the UI to ensure that bar charts are updated correctly when the underlying data model changes. This ensures that the UI reflects accurate data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12622.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nui: update bar chart when model changes\n`\n```\n\n----------------------------------------\n\nTITLE: Adding New Method to System View\nDESCRIPTION: This snippet documents the improvement made to the SDK that adds a new method in the system view. This functionality enables plugins to request identity tokens, thus enhancing their integration capabilities with Vault. No specific dependencies are mentioned, but it is implied that the SDK is required for this feature to work effectively.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24929.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nsdk: adds new method to system view to allow plugins to request identity tokens\"\n```\n\n----------------------------------------\n\nTITLE: Change to Vault Directory (Powershell)\nDESCRIPTION: Changes the current directory to the cloned Vault directory. This is necessary to run the build commands from within the project directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_7\n\nLANGUAGE: powershell\nCODE:\n```\n\"Set-Location vault\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic AWS STS Region Selection\nDESCRIPTION: Allows using STS region dynamically based on the Authorization header during AWS IAM authentication. This provides more flexible regional endpoint handling for AWS authentication in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21960.txt#2025-04-14_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nuse_sts_region_from_client = true\n```\n\n----------------------------------------\n\nTITLE: Fixing Erroneous Success Message for MFA Login\nDESCRIPTION: This snippet addresses a bug where an incorrect success message was shown during the vault login process when two-phase MFA is used. The fix ensures that users are provided with the correct feedback during the login process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15428.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"auth: Fixed erroneous success message when using vault login in case of two-phase MFA\"\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Microsoft US Gov L4 in Azure Provider\nDESCRIPTION: This improvement note details the addition of support for Microsoft US Gov L4 within the Azure provider for groups fetching in the JWT authentication method. This allows for better compliance and integration capabilities for users in US government contexts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16525.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"auth/jwt: Adds support for Microsoft US Gov L4 to the Azure provider for groups fetching.\"\n```\n\n----------------------------------------\n\nTITLE: Sample response for revoking a certificate with private key\nDESCRIPTION: This JSON response provides the revocation time for a certificate that has been successfully revoked using its private key, indicating when the revocation took place.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"revocation_time\": 1433269787\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending PKI Certificate Signing SAN Options\nDESCRIPTION: Improvement to the PKI secrets engine that allows additional Subject Alternative Names (SANs) during certificate signing for intermediate and verbatim certificate generation\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13958.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrelease-note:improvement\nsecrets/pki: Allow other_sans in sign-intermediate and sign-verbatim\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dynamic Usernames for InfluxDB\nDESCRIPTION: This snippet details the addition of a feature that allows users to customize dynamic usernames when accessing the InfluxDB secret backend in HashiCorp Vault. The update improves the flexibility and security of database access for users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11796.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:feature\\nsecrets/database/influxdb: Add ability to customize dynamic usernames\"\n```\n\n----------------------------------------\n\nTITLE: Adding HashiCorp Helm Repository\nDESCRIPTION: Command to add the official HashiCorp Helm repository to the local Helm installation. This makes HashiCorp charts available for installation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/helm/repo.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ helm repo add hashicorp https://helm.releases.hashicorp.com\n\"hashicorp\" has been added to your repositories\n```\n\n----------------------------------------\n\nTITLE: Updating Permissions on VAULT_HOME on PowerShell\nDESCRIPTION: This snippet updates the Access Control List (ACL) for the VAULT_HOME directory to include necessary access rules.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\n$ACLObject = Get-ACL ${env:VAULT_HOME} ;       `\n$ACLObject.AddAccessRule($AdminAccessRule) ;   `\n$ACLObject.AddAccessRule($SystemAccessRule) ;  `\nSet-Acl ${env:VAULT_HOME} $ACLObject\n```\n\n----------------------------------------\n\nTITLE: Updating UI Asset Packaging in Vault (Markdown)\nDESCRIPTION: This release note indicates that Vault has replaced the use of elazarl/go-bindata-assetfs library with Go's native Embed package for building the UI. This change likely improves the build process and reduces external dependencies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11208.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nui: replaces Vault's use of elazarl/go-bindata-assetfs in building the UI with Go's native Embed package\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling Character Escaping in MSSQL Connection Strings in Vault\nDESCRIPTION: This snippet demonstrates how to prevent Vault from escaping special characters in MSSQL connection strings by setting `disable_escaping` to `true`. Prerequisite: Vault version 1.10 or later with the database secrets engine enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/index.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write database/config/my-mssql-database \\\nplugin_name=\\\"mssql-database-plugin\\\" \\\nconnection_url='server=localhost;port=1433;user id={{username}};password={{password}};database=mydb;' \\\nusername=\\\"root\\\" \\\npassword='your#StrongPassword%' \\\ndisable_escaping=\\\"true\\\"\n```\n\n----------------------------------------\n\nTITLE: Release Note: Raft cluster address bug fix\nDESCRIPTION: This release note documents a bug fix within the storage/raft module of HashiCorp Vault. The fix addresses the issue of cluster address changes not being properly supported for nodes in a cluster managed by Autopilot. This enhancement ensures that address changes can be seamlessly handled without disrupting cluster operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11247.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"release-note:bug\nstorage/raft: Support cluster address change for nodes in a cluster managed by autopilot\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Venafi Secrets Engine - Shell Script\nDESCRIPTION: This snippet enables the Venafi secrets engine in Vault, allowing it to manage secrets related to certificate issuance via the specified plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable -path=venafi-pki -plugin-name=venafi-pki-backend plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Initial MMap Size for Raft Storage\nDESCRIPTION: This code snippet represents a release note indicating a change in the Raft storage configuration. It sets the InitialMmapSize to 100GB on 64-bit architectures. This likely improves performance by pre-allocating a larger memory region for Raft log operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13178.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:improvement\nstorage/raft: Set InitialMmapSize to 100GB on 64bit architectures\n`\n```\n\n----------------------------------------\n\nTITLE: Preventing Unauthenticated UI Requests\nDESCRIPTION: This release note indicates an improvement to the Vault UI. It prevents unauthenticated requests from being made to the `/sys/internal/ui/resultant-acl` endpoint, enhancing security by restricting access to this endpoint to authenticated users only.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17139.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\nui: Prevents requests to /sys/internal/ui/resultant-acl endpoint when unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Vault Replication Total Keys Metric\nDESCRIPTION: Defines a gauge metric tracking the total number of keys required for building a new replication tree in HashiCorp Vault. Provides insight into the scale and complexity of replication operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/core/replication/build_total.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.core.replication.build_total ((#vault-core-replication-build_total))\n\nMetric type | Value   | Description\n----------- | ------- | -----------\ngauge       | keys    | Total number of keys that have to be inserted into the new tree\n```\n\n----------------------------------------\n\nTITLE: Fixing KV Command Execution Issue in Vault CLI\nDESCRIPTION: This snippet describes a fix for the issue where kv commands fail to execute properly if the mount path and secret key path are identical.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17679.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\ncli: Fix issue preventing kv commands from executing properly when the mount path provided by `-mount` flag and secret key path are the same.\"\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Windows Service with NSSM\nDESCRIPTION: Creates a new Windows service named MS_VAULT that points to the Vault executable using the NSSM service wrapper.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_6\n\nLANGUAGE: powershell\nCODE:\n```\nnssm install MS_VAULT \"${env:VAULT_HOME}\\vault.exe\"\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Auth Plugin Version in Vault Release Notes\nDESCRIPTION: This snippet documents a change in the Vault release notes, specifically updating the GCP authentication plugin to version 0.19.0. It's formatted as a release note for change documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28366.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/gcp: Update plugin to v0.19.0\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note: Bug Fix\nDESCRIPTION: This release note indicates a bug fix in the Vault server command. Specifically, it addresses a panic that occurred when the server was running in recovery mode. This prevents unexpected crashes during recovery operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20418.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\ncommand/server: fixes panic in Vault server command when running in recovery mode`\n```\n\n----------------------------------------\n\nTITLE: Decode Certificate Metadata\nDESCRIPTION: Command to decode base64 encoded certificate metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nbase64 --decode <<< $(vault read --field=cert_metadata pki/cert-metadata/67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72 )\n```\n\n----------------------------------------\n\nTITLE: Adding Extra Labels to Vault Agent Injector Pods\nDESCRIPTION: This YAML snippet adds additional labels to the Vault Agent Injector pods. It defines two sample labels with their corresponding values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nextraLabels:\n  'sample/label1': 'foo'\n  'sample/label2': 'bar'\n```\n\n----------------------------------------\n\nTITLE: Updating Snowflake Plugin Version to v0.9.0\nDESCRIPTION: This release note describes the update of the Snowflake plugin to version 0.9.0, part of the HashiCorp Vault project. It provides key context on the changes made in this version update.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22516.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:change\\ndatabase/snowflake: Update plugin to v0.9.0\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Tidying SSH Host Keys API Request in Vault\nDESCRIPTION: This request removes all existing host keys from Vault that were used with the now-deprecated Dynamic Keys functionality. This is a maintenance operation that helps clean up unused keys from the Vault storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_36\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/ssh/issue/my-role\n```\n\n----------------------------------------\n\nTITLE: Expected SAML User Context Format\nDESCRIPTION: A text example showing the expected format for the SAML user context with 'groups' attribute that Vault is configured to use, which contrasts with the actual format received where 'http://schemas.xmlsoap.org/claims/Group' is used instead.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nuser context=\"{\n  \"attributes\":\n  {\n    \"groups\":[<LIST_OF_BOUND_GROUPS>]\",\n    ...\n  }\n}\"\n```\n\n----------------------------------------\n\nTITLE: Azure Secrets Plugin Version Update Release Note\nDESCRIPTION: Release note indicating that the Azure secrets plugin for HashiCorp Vault has been updated to version 0.16.3.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22824.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/azure: Update plugin to v0.16.3\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Events by Default in Vault\nDESCRIPTION: A release note entry indicating that the events system in Vault has been enabled by default. This change is categorized as an improvement to the platform.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22815.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nevents: Enabled by default\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note Bug Fix Description\nDESCRIPTION: This release note documents a bug fix in Vault related to the transit encrypt batch operation. The issue occurred when a specific key version was used, preventing the batch encryption from functioning correctly. This fix resolves that issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11628.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nsecret: fix the bug where transit encrypt batch doesn't work with key_version\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring If-Modified-Since Headers in Vault\nDESCRIPTION: Commands to configure If-Modified-Since request headers and Last-Modified response headers for PKI mounts, including ACME-specific headers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/health-check.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune \\\n    -passthrough-request-headers=\"If-Modified-Since\" \\\n    -allowed-response-headers=\"Last-Modified\" \\\n    <mount>\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets tune \\\n    -passthrough-request-headers=\"If-Modified-Since\" \\\n    -allowed-response-headers=\"Last-Modified\" \\\n    -allowed-response-headers=\"Replay-Nonce\" \\\n    -allowed-response-headers=\"Link\" \\\n    -allowed-response-headers=\"Location\" \\\n    <mount>\n```\n\n----------------------------------------\n\nTITLE: Elided List Response Example\nDESCRIPTION: Example of an audit record showing elided list response data where keys and key_info have been replaced with count integers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"response\",\n  \"request\": {\n    \"operation\": \"list\"\n  },\n  \"response\": {\n    \"data\": {\n      \"key_info\": 4,\n      \"keys\": 4\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Sample for Vault Selector Targeting\nDESCRIPTION: Provides a JSON example to demonstrate how selectors target specific values in a JSON structure, showing how to use JSON pointers to navigate to nested values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/filtering.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{ \"product\":\n  {\n    \"name\": \"Vault\",\n    \"version\": \"1.16.0\"\n  },\n  {\n    \"name\": \"Boundary\",\n    \"version\": \"0.15.0\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Service Output Logging in Windows\nDESCRIPTION: Sets up logging for the Vault service by redirecting stdout and stderr to log files in the specified logging directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_11\n\nLANGUAGE: powershell\nCODE:\n```\nnssm set MS_VAULT AppStdout \"${env:VAULT_HOME}\\Logs\\vault-stdout.log\" ; `\nnssm set MS_VAULT AppStderr \"${env:VAULT_HOME}\\Logs\\vault-error.log\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Integer Overflow in Vault Barrier Key Counter\nDESCRIPTION: Release note entry documenting a security fix that prevents integer overflows when the barrier key counter is incremented during key rotation operations in Vault's core system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29176.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: Prevent integer overflows of the barrier key counter on key rotation requests\n```\n\n----------------------------------------\n\nTITLE: Writing Secret to KV Engine - Shell\nDESCRIPTION: This snippet writes secret data to the enabled 'my-kv' key/value secrets engine. The secret stored is 'my_secret' with a value of 'always_angry'. Ensure the 'my-kv' secrets engine is enabled and properly configured before writing data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/audit/filtering.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\nvault kv put -mount=my-kv my_secret the_value=always_angry\n```\n\n----------------------------------------\n\nTITLE: Configuring Log File Path for Vault and Vault Agent\nDESCRIPTION: The -log-file flag specifies the absolute path where Vault Agent saves logging data. It supports various path formats, including default file names, custom names, and extensions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/shared/flags/log-file.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**`-log-file (string : \"./<service>.log\")`**\n\nAbsolute path where Vault Agent saves logging data.\n\n- Paths ending with `/` use the default file name `<service>.log`. For example,\n  `vault.log` for Vault and `agent.log` for Vault Agent.\n- Paths ending with a name but not an extension use the `.log` extension.\n- Paths ending with a name and extension use the provided file name.\n\n**Example**: `-log-file \"/var/log/vault-logs/\"`\n```\n\n----------------------------------------\n\nTITLE: Setting VAULT_ROLLBACK_WORKERS Environment Variable in Shell\nDESCRIPTION: This snippet demonstrates how to set the VAULT_ROLLBACK_WORKERS environment variable to a value larger than the number of mounts in the Vault cluster. This is a workaround to prevent the deadlock issue in performance secondary clusters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/perf-secondary-many-mounts-deadlock.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_ROLLBACK_WORKERS=1000\n```\n\n----------------------------------------\n\nTITLE: Disallow Previously-Generated Tokens (Sentinel)\nDESCRIPTION: This Sentinel policy blocks access using tokens created before a specific time. It utilizes the `time` import and the `token.creation_time` property to restrict access based on token creation time, addressing break-glass scenarios involving compromised tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/sentinel/examples.mdx#2025-04-14_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport \"time\"\n\nmain = rule when not request.unauthenticated {\n    time.load(token.creation_time).unix >\n      time.load(\"2017-09-17T13:25:29Z\").unix\n}\n```\n\n----------------------------------------\n\nTITLE: Creating CF Auth Configuration with cURL\nDESCRIPTION: Shell command using cURL to configure the Cloud Foundry auth method in Vault by posting a JSON payload to the configuration endpoint. Requires a valid Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/cf/config\n```\n\n----------------------------------------\n\nTITLE: Listing Available Static Roles in Vault\nDESCRIPTION: Makes a LIST request to the Vault API to retrieve all available static role names. Returns only the names of the roles, not their configuration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/database/static-roles\n```\n\n----------------------------------------\n\nTITLE: Basic Vault Migration Shell Command\nDESCRIPTION: Example of using the vault operator migrate command to copy all keys between storage backends using a configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/migrate.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator migrate -config migrate.hcl\n\n2018-09-20T14:23:23.656-0700 [INFO ] copied key: data/core/seal-config\n2018-09-20T14:23:23.657-0700 [INFO ] copied key: data/core/wrapping/jwtkey\n2018-09-20T14:23:23.658-0700 [INFO ] copied key: data/logical/fd1bed89-ffc4-d631-00dd-0696c9f930c6/31c8e6d9-2a17-d98f-bdf1-aa868afa1291/archive/metadata\n2018-09-20T14:23:23.660-0700 [INFO ] copied key: data/logical/fd1bed89-ffc4-d631-00dd-0696c9f930c6/31c8e6d9-2a17-d98f-bdf1-aa868afa1291/metadata/5kKFZ4YnzgNfy9UcWOzxxzOMpqlp61rYuq6laqpLQDnB3RawKpqi7yBTrawj1P\n...\n```\n\n----------------------------------------\n\nTITLE: Alphabet Read Response in Vault Transform API\nDESCRIPTION: JSON response structure returned when reading an alphabet configuration, showing the set of characters defined.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_38\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"alphabet\": \"abc\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Delete DR Operation Token Payload\nDESCRIPTION: JSON payload for deleting a DR operation token in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dr_operation_token\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing curl at runtime in Docker container\nDESCRIPTION: These shell commands demonstrate how to install `curl` inside a running Docker container using `apk`.  This is useful when running the image as root. It depends on the `docker` command-line tool and the availability of `apk` within the container.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.15.x.mdx#2025-04-14_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n\"docker exec <CONTAINER-ID> apk add curl\"\n```\n\n----------------------------------------\n\nTITLE: Release Note: Bug Fix\nDESCRIPTION: This release note documents a bug fix related to a goroutine leak in the core functionality of Vault. Specifically, the leak occurred when updating the rate limit quota. This note is intended for inclusion in Vault release documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11371.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`core: Fix goroutine leak when updating rate limit quota`\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Authentication Plugin Version\nDESCRIPTION: This snippet documents the update of the GCP authentication plugin from version v0.15.0 to v0.16.0. It serves as part of the release notes, notifying users of version changes and improvements included in the new version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20725.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nauth/gcp: Updated plugin from v0.15.0 to v0.16.0\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Login Error for Group Search Anonymous Bind\nDESCRIPTION: This snippet outlines a fix for a bug that caused login errors during group searches when using anonymous bind in LDAP authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26200.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"auth/ldap: Fix login error for group search anonymous bind.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Tolerations in Vault Secrets Operator\nDESCRIPTION: Example configuration for pod tolerations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntolerations:\n - key: \"key1\"\n   operator: \"Equal\"\n   value: \"value1\"\n   effect: \"NoSchedule\"\n```\n\n----------------------------------------\n\nTITLE: Documentation Update for UI Resultant ACL\nDESCRIPTION: This release note indicates an update to the Vault documentation. It removes mentions of unauthenticated access from the internal UI resultant-acl documentation, aligning the documentation with the implemented security improvement.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17139.txt#2025-04-14_snippet_1\n\nLANGUAGE: Text\nCODE:\n```\nwebsite/docs: Removes mentions of unauthenticated from internal ui resultant-acl doc\n```\n\n----------------------------------------\n\nTITLE: Registering a Community Plugin in Vault\nDESCRIPTION: This snippet demonstrates how to register a community plugin in Vault by sending a POST request with plugin details including SHA256 checksum and command parameters. This example registers a MySQL database plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-catalog.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sha256\": \"d130b9a0fbfddef9709d8ff92e5e6053ccd246b78632fc03b8548457026961e9\",\n  \"command\": \"mysql-database-plugin\",\n  \"type\": \"database\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/plugins/catalog/secret/example-plugin\n```\n\n----------------------------------------\n\nTITLE: Listing Library Sets - Shell Request\nDESCRIPTION: Example LIST request to retrieve all LDAP service account library set names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/ldap/library\n```\n\n----------------------------------------\n\nTITLE: Displaying SSRF Protection Error Message in Vault Secrets Sync\nDESCRIPTION: This snippet shows an example error message that occurs when Secrets Sync operations attempt to access private IP ranges. The error indicates that the IP address is prohibited due to SSRF protection measures.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_17_secrets-sync-ssrf-private-endpoints.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\ncouldn't sync secret with store: failed to publish event: dial tcp [IP]: prohibited IP address: [IP] is not a permitted destination (denied by: 10.0.0.0/8)\n```\n\n----------------------------------------\n\nTITLE: Reindexing Response from Vault Replication API\nDESCRIPTION: Sample JSON response from the replication reindexing endpoint. The response includes a warnings array that contains any relevant warning messages about the reindexing operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": [\"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Update: GET /sys/mounts\nDESCRIPTION: The `GET /sys/mounts` API endpoint has been updated to include a `deprecation_status` field in the response data for built-in secrets engines.  This enhancement enables users to determine the deprecation status of built-in secrets engine plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16849.txt#2025-04-14_snippet_2\n\nLANGUAGE: none\nCODE:\n```\nsecrets: `GET /sys/mounts` endpoint now returns an additional `deprecation_status` field in the response data for builtins.\n```\n\n----------------------------------------\n\nTITLE: EST Path Configuration with Role Reference\nDESCRIPTION: Configures EST paths using a specific role reference for issuer and policy management in Vault PKI system\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/pki-est-default-policy.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n/pki/roles/:role/est/{cacerts, simpleenroll, simplereenroll}\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS Request Cancellation Enhancement - Auth Module\nDESCRIPTION: This snippet provides a release note that details the enhancement of supporting request cancellation for AWS authentication requests in HashiCorp Vault. It serves to inform developers and users about this new feature, which can improve user experience when interacting with AWS services.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19365.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note: enhancement\\nauth/aws: Support request cancellation with AWS requests\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding RabbitMQ Dynamic Username Customization Feature in Vault\nDESCRIPTION: Release note indicating a new feature that allows customization of dynamically generated usernames in Vault's RabbitMQ secret engine. This enhancement provides more flexibility in how credentials are created.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11899.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nsecret/rabbitmq: Add ability to customize dynamic usernames\n```\n```\n\n----------------------------------------\n\nTITLE: Debugging SAML Authentication in Vault\nDESCRIPTION: This JSON snippet shows debugging data for a SAML authentication attempt in Vault. It includes role configuration and user context information, highlighting an issue with the BoundSubjects configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/boundsubjects.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\nDEBUG] auth.saml.auth_saml_b1886dfe: validating user context for role: api=callback role_name=default-saml\nrole=\"{\n  \"token_bound_cidrs\":null,\n  \"token_explicit_max_ttl\":0,\n  \"token_max_ttl\":0,\n  \"token_no_default_policy\":false,\n  \"token_num_uses\":0,\n  \"token_period\":0,\n  \"token_policies\":[\"default\"],\n  \"token_type\":0,\n  \"token_ttl\":0,\n  \"BoundSubjects\":[\"*@example.com *@ext.example.com\"],\n  \"BoundSubjectsType\":\"glob\",\n  \"BoundAttributes\":{\"groups\":[\"VaultAdmin\",\"VaultUser\"]},\n  \"BoundAttributesType\":\"string\",\n  \"GroupsAttribute\":\"groups\"\n}\"\nuser context=\"{\n  \"attributes\":\n  {\n    \"groups\":[\"Domain Users\",\"VaultAdmin\"],\n    \"http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\":[\"rs@example.com\"]\n  },\n  \"subject\":\"rs@example.com\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Tracking Vault Merkle Tree Dirty Pages\nDESCRIPTION: Measures the number of uncommitted/dirty pages in the Merkle tree storage system, indicating pending data synchronization and potential performance bottlenecks\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/merkle/flushdirty/outstanding_pages.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.merkle.flushDirty.outstanding_pages\n\nMetric type | Value | Description\n----------- | ----- | -----------\ngauge       | pages | Number of dirty pages waiting to be flushed\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Vault CLI\nDESCRIPTION: Set the VAULT_ADDR and VAULT_TOKEN environment variables for Vault CLI configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/adfs.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_ADDR=\"https://myvault.example.com:8200\"\n$ export VAULT_TOKEN=\"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Migration Improvement for Vault Operator in Markdown\nDESCRIPTION: This release note describes an improvement to the 'vault operator migrate' command. The enhancement allows for parallelization of key migration, which is intended to speed up the overall migration process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18817.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nmigration: allow parallelization of key migration for `vault operator migrate` in order to speed up a migration.\n```\n```\n\n----------------------------------------\n\nTITLE: AWS Authentication Configuration Request Example\nDESCRIPTION: Sample curl command for configuring AWS authentication identity settings with token authentication\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    -- header \"X-Vault-Token:...\" \\\n    --request POST\\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/aws/config/identity\n```\n\n----------------------------------------\n\nTITLE: Adding Engine Path to Main app's package.json\nDESCRIPTION: Update to the main application's package.json to include the new engine in the ember-addon paths, which enables the engine to be loaded by the application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/ember-engines.md#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n  \"ember-addon\": {\n    \"paths\": [\n      \"lib/core\",\n      \"lib/your-new-engine\"\n    ]\n  },\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All Vault Event Notifications\nDESCRIPTION: This command subscribes to all event notifications in Vault using a wildcard pattern.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/events.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault events subscribe '*'\n```\n\n----------------------------------------\n\nTITLE: Taking a Snapshot Using Shell\nDESCRIPTION: Use this shell command to begin or continue a snapshot of a tokenization transformation's state in Vault. The `curl` command sends a POST request, with optional continuation data, allowing retrieval of tokenization state across multiple calls.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_73\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1//transform/transformations/tokenization/snapshot/sample-transform\n```\n\n----------------------------------------\n\nTITLE: Change to Vault Directory (Linux)\nDESCRIPTION: Changes the current directory to the cloned Vault directory. This is necessary to run the build commands from within the project directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"cd vault\"\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding CA Certificate for Kubernetes\nDESCRIPTION: Encodes the CA certificate in base64 format for use in Kubernetes configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/injector-tls.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ export CA_BUNDLE=$(cat injector-ca.crt | base64)\n```\n\n----------------------------------------\n\nTITLE: Release Note for PKI Secrets CRL Rebuild\nDESCRIPTION: Describes a bug fix where Certificate Revocation Lists (CRLs) are now automatically rebuilt when issuer lists change in performance secondary clusters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15179.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrelease-note:bug\nsecrets/pki: CRLs on performance secondary clusters are now automatically\nrebuilt upon changes to the list of issuers.\n```\n\n----------------------------------------\n\nTITLE: Release Note for Database Role UI Language Update in Vault\nDESCRIPTION: A release note describing an improvement to the Vault UI where the terminology for database roles has been updated to use 'Connection name' for better clarity. This change is tracked in GitHub issue #18261.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18350.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: Update language on database role to \"Connection name\" [[GH-18261](https://github.com/hashicorp/vault/issues/18261)]\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Proxy Auto Auth Re-trigger on Invalid Token\nDESCRIPTION: The proxy functionality in Vault is improved to re-trigger auto auth if the token used for requests has been revoked, exceeded its use count, or is invalid for another reason. This enhancement ensures that the proxy can recover from token invalidation and continue to authenticate requests automatically.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26307.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nproxy: Proxy will re-trigger auto auth if the token used for requests has been revoked, has exceeded the number of uses,\nor is an otherwise invalid value.\n```\n\n----------------------------------------\n\nTITLE: Documenting Race Condition Fix in Vault Core Metrics\nDESCRIPTION: Release note entry describing a bug fix that addresses a rare panic scenario caused by a race condition in Vault's metrics collection system during the seal operation. The fix improves stability of the metrics collection process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23906.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: fix rare panic due to a race condition with metrics collection during seal\n```\n\n----------------------------------------\n\nTITLE: Adding Warning for Reloading Plugins in HashiCorp Vault\nDESCRIPTION: This snippet outlines the addition of a warning message that will be returned when the sys/plugins/reload/backend API is called and no plugins have been reloaded. This change helps clarify the response for users interacting with the API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24512.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nplugins: Add a warning to the response from sys/plugins/reload/backend if no plugins were reloaded.\"\n```\n\n----------------------------------------\n\nTITLE: Finding Vault Binary Path in Linux\nDESCRIPTION: Locates the installed Vault binary path and stores it in the VAULT_BINARY environment variable for use in service configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ VAULT_BINARY=$(which vault)\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Role Policies via API\nDESCRIPTION: Creates roles with policies for both EC2 and IAM authentication methods using HTTP API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST -H \"X-Vault-Token:123\" \"http://127.0.0.1:8200/v1/auth/aws/role/dev-role\" -d '{\"bound_ami_id\":\"ami-fce3c696\",\"policies\":\"prod,dev\",\"max_ttl\":\"500h\"}'\n\ncurl -X POST -H \"X-Vault-Token:123\" \"http://127.0.0.1:8200/v1/auth/aws/role/dev-role-iam\" -d '{\"auth_type\":\"iam\",\"policies\":\"prod,dev\",\"max_ttl\":\"500h\",\"bound_iam_principal_arn\":\"arn:aws:iam::123456789012:role/MyRole\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Collection in Vault\nDESCRIPTION: Configures telemetry collection in Vault by updating the telemetry stanza in the Vault configuration file. Requires Vault configuration access. Key parameters include telemetry preferences and the aggregation agent's address. Outputs telemetry data for aggregation agents. Constraints include potential cost implications based on metric quantity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/enable-telemetry.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  usage_gauge_period = \"10m\"\n  maximum_gauge_cardinality = 500\n  disable_hostname = false\n  enable_hostname_label = false\n  lease_metrics_epsilon = \"1h\"\n  num_lease_metrics_buckets = 168\n  add_lease_metrics_namespace_labels = false\n  filter_default = true\n\n  statsite_address = \"mycompany.statsite:8125\"\n}\n```\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  filter_default = false\n  prefix_filter = [\"+vault.token\", \"-vault.expire\", \"+vault.expire.num_leases\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Sign Revocation List - POST Request\nDESCRIPTION: Example of sending a POST request to sign a custom revocation list using curl with a payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_116\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    -request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/issuer/default/sign-revocation-list\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Authentication Login Request\nDESCRIPTION: cURL command to perform Kubernetes authentication login to Vault server using payload file\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/kubernetes.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/kubernetes/login\n```\n\n----------------------------------------\n\nTITLE: Reading KMIP Engine Configuration\nDESCRIPTION: This snippet demonstrates how to retrieve the current configuration of the KMIP secrets engine using a GET request to the `/kmip/config` endpoint.  It shows the expected JSON response format, including details like listen addresses and TLS settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/kmip/config\n```\n\n----------------------------------------\n\nTITLE: Removing a Plugin from Vault Catalog\nDESCRIPTION: This snippet demonstrates how to remove a plugin from the Vault catalog by sending a DELETE request. The example removes a plugin named 'example-plugin' of type 'secret' with a specific version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-catalog.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/plugins/catalog/secret/example-plugin?version=v1.0.0\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Auth Plugin Version in Vault Release Notes\nDESCRIPTION: Release note entry documenting the version update of the Azure authentication plugin for HashiCorp Vault to version 0.19.2.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28848.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/azure: Update plugin to v0.19.2\n```\n\n----------------------------------------\n\nTITLE: Raft Cluster State Response - Community Edition\nDESCRIPTION: JSON response showing the cluster state including failure tolerance, health status, server details and voter information for Vault Community Edition.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautopilot.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"failure_tolerance\": 1,\n  \"healthy\": true,\n  \"leader\": \"vault_1\",\n  \"servers\": {\n    \"vault_1\": {\n      \"address\": \"127.0.0.1:8201\",\n      \"healthy\": true,\n      \"id\": \"vault_1\",\n      \"last_contact\": \"0s\",\n      \"last_index\": 63,\n      \"last_term\": 3,\n      \"name\": \"vault_1\",\n      \"node_status\": \"alive\",\n      \"node_type\": \"voter\",\n      \"stable_since\": \"2024-08-29T16:02:45.639829+02:00\",\n      \"status\": \"leader\",\n      \"version\": \"1.17.3\"\n    },\n    \"vault_2\": {\n      \"address\": \"127.0.0.1:8203\",\n      \"healthy\": true,\n      \"id\": \"vault_2\",\n      \"last_contact\": \"678.62575ms\",\n      \"last_index\": 63,\n      \"last_term\": 3,\n      \"name\": \"vault_2\",\n      \"node_status\": \"alive\",\n      \"node_type\": \"voter\",\n      \"stable_since\": \"2024-08-29T16:02:47.640976+02:00\",\n      \"status\": \"voter\",\n      \"version\": \"1.17.3\"\n    },\n    \"vault_3\": {\n      \"address\": \"127.0.0.1:8205\",\n      \"healthy\": true,\n      \"id\": \"vault_3\",\n      \"last_contact\": \"3.969159375s\",\n      \"last_index\": 63,\n      \"last_term\": 3,\n      \"name\": \"vault_3\",\n      \"node_status\": \"alive\",\n      \"node_type\": \"voter\",\n      \"stable_since\": \"2024-08-29T16:02:49.640905+02:00\",\n      \"status\": \"voter\",\n      \"version\": \"1.17.3\"\n    }\n  },\n  \"voters\": [\n    \"vault_1\",\n    \"vault_2\",\n    \"vault_3\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Audit Device Path Parameter Example\nDESCRIPTION: Example of the device_path parameter syntax for Vault audit configuration. This is a required string parameter that defines the internal path where Vault accesses the audit device. Each audit device must have a unique path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/device_path.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"/audit/kv-file\"\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Encryption Key in Vault Transit Backend (Shell)\nDESCRIPTION: This command uninstalls an encryption key from the transit backend in Vault. It shows how to delete a specific key using the 'delete' command. Note that the 'deletion_allowed' parameter must be set to true for successful deletion.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/delete.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault delete transit/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Example of Updating Vault Role for ADFS\nDESCRIPTION: A concrete example showing how to update a specific SAML role named 'adfs-default' to use the 'http://schemas.xmlsoap.org/claims/Group' attribute for group mapping.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/saml/role/adfs-default \\\n    groups_attribute=http://schemas.xmlsoap.org/claims/Group\n```\n\n----------------------------------------\n\nTITLE: Vault Core Active Node Status Metric\nDESCRIPTION: A gauge metric that represents the active state of a Vault server node. When set to 1, the node is active; when set to 0, the node is in standby.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/core/active.mdx#2025-04-14_snippet_0\n\nLANGUAGE: metrics\nCODE:\n```\nvault.core.active = {0|1}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for GCP Service Account Key Generation\nDESCRIPTION: This JSON response shows the structure of a successful key generation operation. It includes the lease ID, private key data, key algorithm, and key type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_36\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"<uuid>\",\n  \"lease_id\": \"gcp/roleset/my-key-roleset/key/<uuid>\",\n  \"renewable\": true,\n  \"lease_duration\": 3600,\n  \"data\": {\n    \"private_key_data\": \"<base64-encoded private key data>\",\n    \"key_algorithm\": \"TYPE_GOOGLE_CREDENTIALS_FILE\",\n    \"key_type\": \"KEY_ALG_RSA_2048\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Transit Secrets Engine Hash Algorithm Parameter Handling\nDESCRIPTION: Modifies the HMAC verification request to prioritize 'hash_algorithm' parameter while maintaining backwards compatibility with deprecated 'algorithm' parameter\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27211.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/transit: Use 'hash_algorithm' parameter if present in HMAC verify requests. Otherwise fall back to deprecated 'algorithm' parameter.\n```\n\n----------------------------------------\n\nTITLE: Metadata Display After Restoration\nDESCRIPTION: Output showing the metadata after restoration, demonstrating the deletion_time field is now 'n/a' for the restored versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/undelete-data.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault kv metadata get -mount shared dev/square-api\n\n======== Metadata Path ========\nshared/metadata/dev/square-api\n\n========== Metadata ==========\nKey                     Value\n---                     -----\ncas_required            false\ncreated_time            2024-11-13T21:51:50.898782695Z\ncurrent_version         4\ncustom_metadata         <nil>\ndelete_version_after    0s\nmax_versions            5\noldest_version          0\nupdated_time            2024-11-14T22:32:42.29534643Z\n\n====== Version 1 ======\nKey              Value\n---              -----\ncreated_time     2024-11-13T21:51:50.898782695Z\ndeletion_time    n/a\ndestroyed        false\n\n...\n\n====== Version 4 ======\nKey              Value\n---              -----\ncreated_time     2024-11-14T22:32:42.29534643Z\ndeletion_time    n/a\ndestroyed        false\n```\n\n----------------------------------------\n\nTITLE: Including Snapshot Size Metric\nDESCRIPTION: This snippet includes the metric for the size of each automated snapshot. It aids in understanding the storage requirements of the snapshot process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/autosnap.mdx#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/autosnapshots/snapshot/size.mdx'\n```\n\n----------------------------------------\n\nTITLE: Persistent Volume Claim Retention Policy Configuration\nDESCRIPTION: Demonstrates how to specify retention policies for Persistent Volume Claims in Kubernetes\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_37\n\nLANGUAGE: yaml\nCODE:\n```\npersistentVolumeClaimRetentionPolicy:\n  whenDeleted: Retain\n  whenScaled: Retain\n```\n\n----------------------------------------\n\nTITLE: Vault Logging for Disabled Reporting (HCL)\nDESCRIPTION: This snippet shows the log entry that appears in the Vault server logs when product usage reporting is disabled using the HCL configuration. This confirms that the configuration change has been applied and Vault is no longer collecting product usage data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/product-usage-reporting.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\"[DEBUG] activity: there is no reporting agent configured, skipping counts reporting\"\n```\n\n----------------------------------------\n\nTITLE: Release Note for Transit Secrets Engine Parameter Fix\nDESCRIPTION: Release note entry that indicates a bug fix to prevent incorrect warnings about the 'batch_input' parameter in Vault's transit secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18299.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsecrets/transit: Do not warn about unrecognized parameter 'batch_input'\n```\n\n----------------------------------------\n\nTITLE: Fixing Bug in Core Logging - Go\nDESCRIPTION: This code note documents a bug fix in the core functionality of Hashicorp Vault. The fix addresses an issue that prevents certain loggers from writing to log files, ensuring that logging functions work as expected. The primary dependency is the logging framework used within the core Vault application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29917.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\ncore: Fix a bug that prevents certain loggers from writing to a log file.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Token Helper (Powershell)\nDESCRIPTION: This snippet shows how to configure a custom token helper in Powershell. It sets the `token_helper` parameter in the `.vault` file to the path of the Powershell script. The script ensures UTF-8 encoding to prevent issues with invalid characters when Vault reads the configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token-helper.mdx#2025-04-14_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\n'token_helper = \"\\\\path\\\\to\\\\token\\\\helper.ps1\"' | `\nOut-File -FilePath ${env:USERPROFILE}/.vault -Encoding ascii -Append\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault UI Bug Fix for KV Secret Version Creation\nDESCRIPTION: Release note documenting a bug fix for caching issues in the Vault UI when creating new versions of KV secrets. This note is formatted as a tagged release note for easier categorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14489.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fixes caching issue on kv new version create\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Experimental Vault DotNet Client\nDESCRIPTION: Command to install the experimental Vault DotNet client library using NuGet Package Manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n# Install-Package HashiCorp.Vault\n```\n\n----------------------------------------\n\nTITLE: Preventing Plugin Multiplexing Connection Map Panic\nDESCRIPTION: Fixes a panic condition that occurs when attempting to access a non-existent connection ID in the plugin multiplexing connection map, ensuring more robust error handling\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16094.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nplugin/multiplexing: Fix panic when id doesn't exist in connection map\n```\n\n----------------------------------------\n\nTITLE: Adding Role Information for Rate-Limit Resource Quotas - Release Note\nDESCRIPTION: This release note outlines the new feature that enables the addition of role information to rate-limit resource quotas, specifically for controlling login requests associated with authentication mounts using designated roles. This enhancement is particularly useful for managing user access limits based on their roles within the Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16115.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore/quotas: Added ability to add role information for rate-limit resource quotas, to limit login requests on auth mounts made using that role\"\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Update: GET /sys/mounts/:name\nDESCRIPTION: The `GET /sys/mounts/:name` API endpoint has been updated to include a `deprecation_status` field in the response data for built-in secrets engines. This allows users to view the deprecation status of a specific built-in secrets engine plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16849.txt#2025-04-14_snippet_3\n\nLANGUAGE: none\nCODE:\n```\nsecrets: `GET /sys/mounts/:name` endpoint now returns an additional `deprecation_status` field in the response data for builtins.\n```\n\n----------------------------------------\n\nTITLE: Documenting Core Authentication Improvement in Vault Release Notes\nDESCRIPTION: This snippet documents an improvement to Vault's core authentication process. The 'num_uses' parameter is now returned during the authentication process, providing more information to users about their authentication token usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12791.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-notes:improvemment\ncore: `num_uses` is now returned during authentication\n```\n```\n\n----------------------------------------\n\nTITLE: Updating KV Secrets Plugin Version Note\nDESCRIPTION: Release note documenting the version change of the Key-Value secrets plugin in HashiCorp Vault to version 0.20.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28334.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/kv: Update plugin to v0.20.0\n```\n\n----------------------------------------\n\nTITLE: Setting VAULT_AUDIT_DISABLE_EVENTLOGGER Environment Variable\nDESCRIPTION: This snippet shows how to set the VAULT_AUDIT_DISABLE_EVENTLOGGER environment variable to true to disable the new event framework in Vault, reverting to the audit behavior used in previous versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_15-audit-panic-handling-with-eventlogger.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_AUDIT_DISABLE_EVENTLOGGER=true\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Namespace via CLI Flag and Environment Variable\nDESCRIPTION: Examples showing how to set the root namespace for Vault CLI commands using either a command line flag or environment variable. The namespace setting allows for relative mount paths and defaults to unset if not specified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/namespace.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-namespace \"admin\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_NAMESPACE=\"admin\"\n```\n\n----------------------------------------\n\nTITLE: Reading Secret with TTL\nDESCRIPTION: Command to read a secret that includes a TTL value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv get kv/my-secret\n```\n\n----------------------------------------\n\nTITLE: Updating SDK Dependencies Release Note\nDESCRIPTION: Release note detailing version upgrades of key dependencies in the Vault SDK. Updates include Docker to v24.0.7, gRPC to v1.57.2, and golang.org/x/net to v0.17.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23913.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsdkUpgrade dependent packages by sdk.\nThis includes github.com/docker/docker to v24.0.7+incompatible,\ngoogle.golang.org/grpc to  v1.57.2 and golang.org/x/net to v0.17.0.\n```\n\n----------------------------------------\n\nTITLE: Measuring Database Secret Engine Initialization Performance\nDESCRIPTION: Tracks the time required to initialize a specific named database secret engine in Vault, providing performance insights through a summary metric measured in milliseconds.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/database/name/initialize.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### database.{NAME}.Initialize ((#database-name-initialize))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to initialize a database secret engine for the named database\n```\n\n----------------------------------------\n\nTITLE: Documenting CORS API Bug Fix in Vault Release Notes\nDESCRIPTION: This release note documents a bug fix for the Vault API. It addresses issues with outdated and invalid CORS (Cross-Origin Resource Sharing) API methods, improving the API's functionality and compatibility.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10444.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\napi: Fixes CORS API methods that were outdated and invalid\n```\n```\n\n----------------------------------------\n\nTITLE: Reloading Auth Plugin by Type and Name in Vault\nDESCRIPTION: Example showing how to reload an authentication plugin by specifying its type and name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/reload.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin reload -type=auth -plugin my-custom-plugin\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating OIDC Assignment Payload\nDESCRIPTION: The JSON payload for creating or updating an OIDC assignment. It contains entity IDs and group IDs that will be associated with the assignment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"group_ids\":[\"262ca5b9-7b69-0a84-446a-303dc7d778af\"],\n   \"entity_ids\":[\"b6094ac6-baf4-6520-b05a-2bd9f07c66da\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Git for GitHub access\nDESCRIPTION: This command adjusts the Git configuration to use SSH instead of HTTPS for GitHub access, which can resolve certain authentication issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ git config --global --add url.\"git@github.com:\".insteadOf \"https://github.com/\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Improvement in SSH Secrets Engine - Markdown\nDESCRIPTION: This release note summarizes an enhancement to the SSH secrets engine in Vault that allows additional text in the defaultExtension fields, thereby increasing usability and configuration options for users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16018.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\nsecrets/ssh: Allow additional text along with a template definition in defaultExtension value fields.\"\n```\n\n----------------------------------------\n\nTITLE: Disable DR Secondary Sample Request\nDESCRIPTION: cURL request to disable DR secondary replication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/disable\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Dev Mode Listener Improvement in Markdown\nDESCRIPTION: This release note details an improvement to Vault's development mode listener. The change allows unauthenticated requests to the sys/metrics endpoint, enhancing accessibility for monitoring and debugging purposes in development environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10992.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: dev mode listener allows unauthenticated sys/metrics requests\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Client Timeout in Shell\nDESCRIPTION: Sets the environment variable VAULT_CLIENT_TIMEOUT to control the maximum duration the Vault CLI will wait for a response from the Vault server. The timeout value follows the format <number>[s|m|h|d] where s=seconds, m=minutes, h=hours, d=days.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/client_timeout.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_CLIENT_TIMEOUT=\"2m\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Plugin Listing Bug Fix in Markdown\nDESCRIPTION: This markdown snippet documents a bug fix for HashiCorp Vault. The fix resolves an issue where listing all plugins with audit logging enabled would cause an internal server error.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18173.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nplugins: Listing all plugins while audit logging is enabled will no longer result in an internal server error.\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Proxy Static Secret Caching Feature in Markdown\nDESCRIPTION: This snippet documents a new enterprise feature for Vault Proxy that adds support for caching static secrets from KVv1 and KVv2 secret engines. This enhancement aims to improve performance and reduce load on the Vault server for frequently accessed static secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23621.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Vault Proxy Static Secret Caching (enterprise)**: Adds support for static secret (KVv1 and KVv2) caching to Vault Proxy.\n```\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP Plugin Update Release Note\nDESCRIPTION: This release note indicates that the OpenLDAP secrets plugin has been updated to version v0.12.1 within a HashiCorp Vault environment.  This update likely includes bug fixes, feature enhancements, or security improvements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25524.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:change\nsecrets/openldap: Update plugin to v0.12.1`\n```\n\n----------------------------------------\n\nTITLE: Vault Release Notes Table Layout in HTML/Markdown\nDESCRIPTION: HTML table structure defining the companion updates section of the release notes, showing enhanced features for Vault Secrets Operator.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.16.1.mdx#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th style={{verticalAlign: 'middle'}}>Release</th>\n      <th style={{verticalAlign: 'middle'}}>Update</th>\n      <th style={{verticalAlign: 'middle'}}>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td style={{verticalAlign: 'middle'}}>\n      Vault Secrets Operator (v0.5)\n    </td>\n    <td style={{verticalAlign: 'middle', textAlign: 'center'}}>ENHANCED</td>\n    <td style={{verticalAlign: 'middle'}}>\n      Use templating to format, transform, and decode secrets before syncing to\n      Kubernetes secret.\n      <br /><br />\n      Learn more: <a href=\\\"/vault/docs/platform/k8s/vso/secret-transformation\\\">Secret data transformation</a>\n    </td>\n  </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Inspecting Vault License Details\nDESCRIPTION: Command to verify license details before performing a license migration or upgrade\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/faq.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault license inspect\n```\n\nLANGUAGE: bash\nCODE:\n```\nvault license get\n```\n\n----------------------------------------\n\nTITLE: Vault UI Bug Fix: Token Expired Banner\nDESCRIPTION: This release note indicates a bug fix in the Vault UI that ensures the token expired banner is displayed when a batch token expires. This addresses an issue where users were not being notified when their batch tokens had expired.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27479.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"ui: Ensure token expired banner displays when batch token expires\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Raw Storage List in Vault\nDESCRIPTION: Shows the JSON response format when listing raw storage keys from Vault. The response contains a 'data' object with a 'keys' array listing the available keys at the requested prefix.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/raw.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"abcd-1234...\", \"efgh-1234...\", \"ijkl-1234...\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Service Account JSON Parameter in Vault DB Secrets Engine (Markdown)\nDESCRIPTION: This release note describes an improvement to the database secrets engine in HashiCorp Vault. It removes the 'service_account_json' parameter when reading database connection details, potentially simplifying the configuration process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23256.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nsecrets/db: Remove the `service_account_json` parameter when reading DB connection details\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching CA Certificate with Consul Template\nDESCRIPTION: Template example that fetches the issuing CA certificate from a PKI mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/template.mdx#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n{{- with secret \"pki/cert/ca\" -}}\n{{ .Data.certificate }}\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Rate Limit Quota - CURL Request\nDESCRIPTION: CURL command to retrieve a specific rate limit quota by name using the GET endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rate-limit-quotas.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request GET \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/quotas/rate-limit/global-rate-limiter\n```\n\n----------------------------------------\n\nTITLE: Sending GitHub Auth Configuration Request with cURL\nDESCRIPTION: Shell command using cURL to configure the GitHub auth method by sending a JSON payload to the appropriate endpoint. Requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/github.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/github/config\n```\n\n----------------------------------------\n\nTITLE: Updating OpenLDAP Secrets Plugin Version\nDESCRIPTION: Release note indicating an update to the OpenLDAP secrets plugin to version 0.15.0 in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29605.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/openldap: Update plugin to v0.15.0\n```\n\n----------------------------------------\n\nTITLE: Writing Empty Client Config for AWS Auth Method in Vault (Shell)\nDESCRIPTION: This command writes an empty client config for the AWS auth method in HashiCorp Vault to avoid a panic during IAM-based login. It uses the Vault CLI to write to the auth/aws/config/client endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/aws-auth-panics.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault write -f auth/aws/config/client\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Templated Addresses in Configuration - Release Note\nDESCRIPTION: This release note documents an improvement to the Vault configuration system, which now supports go-sockaddr templated addresses. This enhancement allows for better configuration flexibility and connectivity options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/9109.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\ncore: Add support for go-sockaddr templated addresses in config.\"\n```\n\n----------------------------------------\n\nTITLE: Vault CLI Raw Format Support Release Note\nDESCRIPTION: Release note entry describing the addition of -format=raw option to the Vault CLI, enabling reading of non-JSON endpoints and original response bodies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14945.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncli: Support the -format=raw option, to read non-JSON Vault endpoints and original response bodies.\n```\n\n----------------------------------------\n\nTITLE: Transit Secrets Engine Bug Fix Release Note\nDESCRIPTION: Release note entry documenting a fix for a panic condition that occurred when attempting to export a public RSA key from the Transit secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24054.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsecrets/transit: Fix a panic when attempting to export a public RSA key\n```\n\n----------------------------------------\n\nTITLE: Vault Operator Diagnose Command Options\nDESCRIPTION: Command line flags available for the vault operator diagnose command, including format and config options\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/diagnose.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-format (string: \"table\") # Output format: table, json, or yaml\n-config (string: \"\") # Path to vault configuration file\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault CE Storage Latency Bug Fix\nDESCRIPTION: Release note detailing a fix for storage performance issues in Vault CE where the seal unwrapper was performing duplicate read operations and unnecessary write operations for each storage request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29050.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: fix bug in seal unwrapper that caused high storage latency in Vault CE. For every storage read request, the\nseal unwrapper was performing the read twice, and would also issue an unnecessary storage write.\n```\n\n----------------------------------------\n\nTITLE: Setting Max Versions via CLI Command\nDESCRIPTION: CLI command template for setting the maximum number of versions for a KV v2 secret path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/max-versions.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv metadata put          \\\n   -max-versions <max_versions>  \\\n   -mount <mount_path>           \\\n   <secret_path>\n```\n\n----------------------------------------\n\nTITLE: Certificate Reissuance Hierarchy\nDESCRIPTION: This snippet details the hierarchy showing the reissuance of certificates using the same key material. It results in certificates with similar validation paths using root or intermediate certificates for trust, ensuring continuity of certificate validation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/rotation-primitives.mdx#2025-04-14_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n                          ------\n              -----------| root |-------------\n             /            ------              \\\n             |                                |\n ---------------                           ---------------\n| original cert | <- same key material -> | reissued cert |\n ---------------              |            ---------------\n                              |\n                      -------------------\n                     | leaf certificates |\n                      -------------------\n```\n\n----------------------------------------\n\nTITLE: Setting UDP Socket Type for Vault Audit Device\nDESCRIPTION: Example showing how to configure a UDP socket type for a Vault audit device. This configuration parameter accepts string values like \"tcp\" (default) or \"udp\" and determines the communication protocol used by the audit socket.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/socket/socket_type.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nsocket_type=\"udp\"\n```\n\n----------------------------------------\n\nTITLE: Generating Password Response in JSON\nDESCRIPTION: This snippet shows the JSON response format when generating a password from a policy. It includes the generated password in the 'password' field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"password\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault CLI Retry Attempts via Environment Variable\nDESCRIPTION: Sets the number of retry attempts for Vault CLI requests when encountering recoverable error codes (412 and 5xx except 501). The default value is 2, and setting it to 0 disables retries completely.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/max_retries.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_MAX_RETRIES=5\n```\n\n----------------------------------------\n\nTITLE: Adding Wizard to Database Secret Engine in Vault UI\nDESCRIPTION: This release note indicates the addition of a wizard feature to the Database Secret Engine in the Vault UI. The wizard likely aims to simplify the configuration process for database secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10982.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nui: Adds the wizard to the Database Secret Engine\n```\n```\n\n----------------------------------------\n\nTITLE: Address-Based Update Primary cURL Request in Vault Replication API\nDESCRIPTION: cURL command to update the primary server in a Vault performance replication secondary setup using addresses. The request sends a JSON payload containing potential primary addresses to the performance replication secondary update-primary endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/secondary/update-primary\n```\n\n----------------------------------------\n\nTITLE: Configuring Raft Storage Autopilot Upgrade Version in HCL\nDESCRIPTION: This snippet configures the Raft storage to set the `autopilot_upgrade_version` parameter, which specifies the desired version for the Autopilot upgrade. This is part of the workaround for addressing the upgrade issue in Vault Enterprise. The key parameter here is `autopilot_upgrade_version`, which should be set to the desired version number, such as '1.15.8'. No additional dependencies are required. The expected behavior is that the new nodes will recognize the specified version for the upgrade.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_15-auto-upgrade.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"raft\" {\n  autopilot_upgrade_version = \"1.15.8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note for OpenLDAP Secrets Plugin Update\nDESCRIPTION: Markdown release note documenting the version update of the OpenLDAP secrets plugin to version 0.14.2 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28704.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/openldap: Update plugin to v0.14.2\n```\n\n----------------------------------------\n\nTITLE: Release Note for InfluxDB Client Module Upgrade\nDESCRIPTION: A release note indicating that the database secrets engine for InfluxDB has been updated to use the 'influxdb1-client' module. This is marked as an improvement, suggesting better functionality or performance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12262.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nsecrets/database/influxdb: Switch/upgrade to the `influxdb1-client` module\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace in Vault Proxy\nDESCRIPTION: Added top-level namespace configuration and prepend_configured_namespace API Proxy parameter to control request proxying to specific namespaces\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24667.txt#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace = \"example-namespace\"\nprepend_configured_namespace = true\n```\n\n----------------------------------------\n\nTITLE: Configuring LDAP User Filter Escaping in Go\nDESCRIPTION: Code snippet from the LDAP utilities package showing implementation of user filter escaping when using UPN domains. This is part of a bug fix to properly escape LDAP user filters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v1.10-v1.15.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nsdk/ldaputil: use EscapeLDAPValue implementation from cap/ldap\n```\n\n----------------------------------------\n\nTITLE: Curl Request for Tuning Vault Auth Method\nDESCRIPTION: Sample curl command to send a POST request to Vault's API for tuning an authentication method. This request sends the payload to the '/sys/auth/my-auth/tune' endpoint with the necessary Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/auth.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/auth/my-auth/tune\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure MSI Authentication for VMSS\nDESCRIPTION: Adds support for authenticating with Managed Service Identity from Virtual Machine Scale Sets in flexible orchestration mode, expanding Azure authentication capabilities in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17540.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nauth/azure: Adds support for authentication with Managed Service Identity (MSI) from a Virtual Machine Scale Set (VMSS) in flexible orchestration mode.\n```\n\n----------------------------------------\n\nTITLE: Fixing Boolean Parsing in Proxy\nDESCRIPTION: This snippet describes a bug fix similar to that of the agent, specifically addressing the parsing of boolean environment variables within the proxy component's configuration. The correction ensures that the proxy component correctly interprets boolean values from environment variables.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24790.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"proxy: Fixed incorrect parsing of boolean environment variables for configuration.\"\n```\n\n----------------------------------------\n\nTITLE: Vault Azure Auth Plugin Update\nDESCRIPTION: This snippet indicates that the Vault Azure auth plugin has been updated to version v0.18.0. This update likely includes bug fixes, new features, or security enhancements to the plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27146.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:change\nauth/azure: Update plugin to v0.18.0`\n```\n\n----------------------------------------\n\nTITLE: Fixing Panic on Help Requests\nDESCRIPTION: This release note indicates a bug fix addressing a panic error that occurred when help requests were made without including /v1/ in the URL. The fix ensures that the application handles such requests gracefully without crashing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28669.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\ncore: Fixed panic seen when performing help requests without /v1/ in the URL.\"\n```\n\n----------------------------------------\n\nTITLE: Interacting with ACME Directories using CertBot\nDESCRIPTION: This bash snippet demonstrates how to interact with ACME directories using EFF's CertBot. It highlights the use of unsigned endpoints within Vault for obtaining certificates via the ACME protocol. No special authentication is required, but role settings influence behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ certbot certonly --server https://localhost:8200/v1/pki/acme/directory ...\n```\n\n----------------------------------------\n\nTITLE: Documenting Backend SDK Zero Value Panic Fix - Markdown\nDESCRIPTION: Release note entry describing a bug fix that prevents a panic when computing the zero value for TypeInt64 schema fields in Vault's backend SDK.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18729.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsdk/backend: prevent panic when computing the zero value for a `TypeInt64` schema field.\n```\n\n----------------------------------------\n\nTITLE: Creating a KMIP Scope\nDESCRIPTION: This snippet shows how to create a new scope within the KMIP secrets engine by sending a POST request to the `/kmip/scope/:scope` endpoint. The scope name is included in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope\n```\n\n----------------------------------------\n\nTITLE: Unauthenticated Profiling Access Configuration\nDESCRIPTION: Configuration to enable unauthenticated access to Vault's profiling endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  profiling {\n    unauthenticated_pprof_access = true\n    unauthenticated_in_flight_request_access = true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PKI Secret Engine Tidy Metrics\nDESCRIPTION: Metrics related to PKI certificate store cleanup, tracking deleted entries, total entries, and tidy operation performance\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/all.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/secrets/pki/tidy/cert_store_current_entry.mdx'\n```\n\n----------------------------------------\n\nTITLE: Monitoring a Restricted Endpoint in a Test Namespace\nDESCRIPTION: This snippet demonstrates how to use the `monitor` CLI command to call the `/sys/monitor` endpoint from a test namespace (`ns_test`). This is used to verify that the test namespace does not have elevated permissions. The `VAULT_NAMESPACE` environment variable is used to specify the target namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n    $ env VAULT_NAMESPACE=\"ns_test\" vault monitor –log-level=debug\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Improvement for Vault Client Counts Dashboard in Markdown\nDESCRIPTION: This code snippet is a release note in Markdown format. It documents an improvement made to the Vault UI, specifically removing initial start and end parameters from the activity call for the client counts dashboard.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27816.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: remove initial start/end parameters on the activity call for client counts dashboard.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating PKI API Behavior for Root and Intermediate CA Generation in Vault\nDESCRIPTION: The Generate Root and Set Signed Intermediate APIs in Vault's PKI secrets engine now add new issuers/keys to a mount instead of warning about existing CAs. This change affects the pki/root/generate/:type and /pki/intermediate/set-signed endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14975.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/pki: existing Generate Root (pki/root/generate/:type),\nSet Signed Intermediate (/pki/intermediate/set-signed) APIs will\nadd new issuers/keys to a mount instead of warning that an existing CA exists\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving KV Secrets in Vault CLI\nDESCRIPTION: This snippet demonstrates how to retrieve KV secrets using the Vault CLI. It specifies a namespace and mount path to access a specific secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ VAULT_NAMESPACE=ns1/ns2 vault kv get -mount=path/to/kv1 path/to/secret1\n\n========== Secret Path ==========\npath/to/kv1/data/path/to/secret1\n\n======= Metadata =======\n(...)\n\n=== Data ===\nKey    Value\n---    -----\nfoo    bar\n```\n\n----------------------------------------\n\nTITLE: Adding Tests for Vault UI Database Role Setting Form\nDESCRIPTION: This release note entry indicates an enhancement to the Vault UI testing suite. It specifies the addition of tests for the database role setting form, which will help ensure the form's functionality and improve overall UI quality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11018.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:enhancement\nui: Add tests for database role setting form\n```\n```\n\n----------------------------------------\n\nTITLE: Structure of Changelog Entry\nDESCRIPTION: This snippet lays out the required structure for changelog entries, including the opening code block, component identification, a one-line description, and the ending code block.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/README.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nThis should be in a file named after the pull request number (e.g., `12345.txt`).\n\nIf more than one area is impacted, use separate code blocks for each entry.\n```\n\n----------------------------------------\n\nTITLE: Improvement Note for SSH Secrets Template\nDESCRIPTION: Release note indicating an enhancement to the allowed_users template in the SSH secrets engine, allowing mixed use of templated and non-templated parts within the same template.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10886.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrelease-note:improvement\nsecrets/ssh: Let allowed_users template mix templated and non-templated parts.\n```\n\n----------------------------------------\n\nTITLE: Bug Fix - Vault Filesystem Permissions\nDESCRIPTION: Code fix preventing changes to audit log file permissions when mode 0000 is specified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-pre-v1.10.md#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// core: Prevent changing file permissions of audit logs when mode 0000 is used.\n// Referenced in GH-15759\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix Filter to Vault Telemetry Configuration\nDESCRIPTION: Release note documenting the addition of prefix_filter parameter to Vault's telemetry configuration. This improvement allows for filtering telemetry metrics based on prefixes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12025.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore: Add `prefix_filter` to telemetry config\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Response Definitions Release Note\nDESCRIPTION: Release note indicating an improvement where OpenAPI response definitions were added to the /sys/auth endpoints in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18465.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nopenapi: add openapi response defintions to /sys/auth endpoints\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies in Vault UI - Release Note\nDESCRIPTION: This release note documents the updates made to the Vault UI dependencies, specifically focusing on the inclusion of new versions of D3 libraries. This ensures that the UI utilizes the most recent features and improvements available in D3 for better rendering and interactivity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26346.txt#2025-04-14_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"release-note:change\\nui: Update dependencies including D3 libraries\"\n```\n\n----------------------------------------\n\nTITLE: Generating Vault Agent Config Command Structure\nDESCRIPTION: Command structure for generating a Vault Agent configuration file with environment variable templates using the vault agent generate-config command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/generate-config.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault agent generate-config \\\n    -type \"env-template\" \\\n    -exec \"<path_to_child_process> <list_of_arguments>\" \\\n    -namespace \"<plugin_namespace>\" \\\n    -path \"<mount_path_to_kv_plugin_1>\" \\\n    -path \"<mount_path_to_kv_plugin_2>\" \\\n    ...\n    -path \"<mount_path_to_kv_plugin_N>\" \\\n    <config_file_name>\n```\n\n----------------------------------------\n\nTITLE: Read Certificate Metadata Request\nDESCRIPTION: Authenticated request to retrieve certificate metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_46\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/cert-metadata/67:b4:f7:2c:aa:ef:b9:30:f6:ae:f5:12:21:79:ac:08:8a:86:89:72\n```\n\n----------------------------------------\n\nTITLE: Reading Config - JSON Response\nDESCRIPTION: Sample JSON response showing the configured home tenancy ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"home_tenancy_id\": \"ocid1.tenancy.oc1..aaaaaaaah7zkvaffv26pzyauoe2zbnionqvhvsexamplee557wakiofi4ysgqq\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Cross-Cluster Revocations in Vault PKI\nDESCRIPTION: JSON response showing certificates revoked across clusters with details about which clusters have copies of the revocations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_34\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"7f:fd:12:5b:16:29:bb:28:ea:24:bc:a1:80:f7:4e:6e:a0:69:b9:95\": {\n        \"revoking_clusters\": [\n          \"48327b28-8325-6d79-6a0b-4cbaa6f27b4a\"\n        ]\n      }\n    },\n    \"keys\": [\n      \"7f:fd:12:5b:16:29:bb:28:ea:24:bc:a1:80:f7:4e:6e:a0:69:b9:95\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Groups by ID - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to list the available groups' IDs in Vault's Identity store. It sends a LIST request to the `/identity/group/id` endpoint and includes a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/group/id\n```\n\n----------------------------------------\n\nTITLE: Checking Custom Key Store Connection Status in AWS CLI\nDESCRIPTION: This command retrieves the details of the custom key store, including its connection state. It's used to verify that the key store is properly connected before proceeding with key operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws kms describe-custom-key-stores --custom-key-store-id cks-d7a55fe93d63191d6\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Azure Auth Plugin\nDESCRIPTION: This code snippet shows the release note indicating the Azure authentication plugin for HashiCorp Vault is updated to version v0.20.1. This update likely includes bug fixes, new features, or security improvements to the plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29728.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"```release-note:change\nauth/azure: Update plugin to v0.20.1\n```\"\n```\n\n----------------------------------------\n\nTITLE: Installing Unpublished Vault Client TypeScript Package\nDESCRIPTION: Command to install an unpublished version of the package from a local path. This method is not recommended for general use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/api-client/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install PATH_TO_GENERATED_PACKAGE --save\n```\n\n----------------------------------------\n\nTITLE: Generating and Saving TLS Credentials\nDESCRIPTION: This snippet demonstrates generating TLS credentials for the KMIP role and processing the generated JSON response to extract certificate details. It requires a JSON processor like jq to handle outputs. Ensure the vault command outputs credentials in plaintext, and store the client key and certificate in designated files.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvault write -f -format=json kmip/scope/my-service/role/admin/credential/generate | tee kmip.json\njq --raw-output --exit-status '.data.ca_chain[]' kmip.json > ca.pem\njq --raw-output --exit-status '.data.certificate' kmip.json > cert.pem\n```\n\n----------------------------------------\n\nTITLE: Updating Terraform Secrets Engine Plugin in HashiCorp Vault\nDESCRIPTION: This release note indicates that the Terraform secrets engine plugin for HashiCorp Vault has been updated to version 0.9.0. This update likely includes new features, bug fixes, or improvements to the Terraform secrets management capabilities within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28016.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/terraform: Update plugin to v0.9.0\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Role Session Name to STS Credential Generation\nDESCRIPTION: This snippet provides an enhancement to the AWS secrets engine by introducing an optional parameter for specifying a role session name during the STS credential generation process. This improvement is intended for users who require better session identification. No additional dependencies are needed beyond the standard Vault and AWS setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11345.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nsecrets/aws: add ability to provide a role session name when generating STS credentials\"\n```\n\n----------------------------------------\n\nTITLE: Updating CRDs for VSO Prior to 0.8.0\nDESCRIPTION: Updates the Custom Resource Definitions (CRDs) for Vault Secrets Operator versions prior to 0.8.0. Replace <TARGET_VSO_VERSION> with the desired version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ helm show crds --version <TARGET_VSO_VERSION> hashicorp/vault-secrets-operator | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: UI Feature Announcement: Okta Number Challenge\nDESCRIPTION: This snippet documents the addition of UI support for the Okta Number Challenge feature within HashiCorp Vault. It serves as a release note, informing users about the new functionality available in the user interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15998.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\nui: UI support for Okta Number Challenge.\n```\n```\n\n----------------------------------------\n\nTITLE: Convergent Encryption Key Rotation in Transit Backend\nDESCRIPTION: Recommends rotating encryption keys to version 3 to mitigate potential offline plaintext-confirmation attacks. This involves using the transit secret engine's key rotation and data rewrapping methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.10.2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Recommended steps:\n// 1. Rotate encryption key to version 3\n// 2. Rewrap existing encrypted data\n```\n\n----------------------------------------\n\nTITLE: Vault API Authentication Context Update Release Note\nDESCRIPTION: Release note describing an improvement to the Vault API authentication system where login helpers now properly utilize the context parameter that is passed to them. This enhancement improves context handling in authentication workflows.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14775.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:improvement\napi: Use the context passed to the api/auth Login helpers.\n```\n\n----------------------------------------\n\nTITLE: Vault LDAP Authentication Warning Change Release Note\nDESCRIPTION: Release note entry documenting a change in the LDAP authentication module where authentication warnings are no longer returned to the client side.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29134.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/ldap: No longer return authentication warnings to client.\n```\n\n----------------------------------------\n\nTITLE: Fixing OIDC Request Parameter Validation in HashiCorp Vault\nDESCRIPTION: Resolves validation problems with the `request` and `request_uri` parameters in the Vault identity OIDC module. Improves parameter validation and enhances security for OpenID Connect interactions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16600.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nidentity/oidc: Fixes validation of the `request` and `request_uri` parameters.\n```\n\n----------------------------------------\n\nTITLE: Including Association Telemetry Metrics\nDESCRIPTION: Includes telemetry metrics related to secret associations from an external MDX file\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/secrets-sync.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/secrets-sync/associations.mdx'\n```\n\n----------------------------------------\n\nTITLE: Database Plugin Config Update - Release Note\nDESCRIPTION: This change updates the response from the database configuration API endpoint, streamlining the response handling for clients by returning a '204 No Content' status code.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14033.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nplugin/database: The return value from `POST /database/config/:name` has been updated to '204 No Content'\"\n```\n\n----------------------------------------\n\nTITLE: Adding Flag to PKI API for Filtering Root CAs\nDESCRIPTION: This improvement introduces a new flag to the issue/sign APIs within the PKI (Public Key Infrastructure) secrets engine of HashiCorp Vault. It allows clients to filter out root Certificate Authorities (CAs) from the ca_chain field in API responses. The enhancement helps users receive only the intermediate certificates when needed, simplifying the management of certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16935.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\\```release-note:improvement\\nsecrets/pki: Add a new flag to issue/sign APIs which can filter out root CAs from the returned ca_chain field\\n\\```\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple SSH Key Lengths\nDESCRIPTION: Allows configuration of multiple approved key lengths for a single cryptographic algorithm in HashiCorp Vault's SSH secrets engine, providing more flexible key management options\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13991.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:improvement\nsecrets/ssh: Allow specifying multiple approved key lengths for a single algorithm\n```\n\n----------------------------------------\n\nTITLE: Adding IAM Tagging Support Release Note\nDESCRIPTION: Release note entry documenting the addition of IAM tagging support functionality for iam_user roles in the AWS secrets engine of HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10953.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nsecrets/aws: add IAM tagging support for iam_user roles\n```\n```\n\n----------------------------------------\n\nTITLE: Running MSSQL Docker Container for Vault Testing\nDESCRIPTION: Docker command to start a Microsoft SQL Server 2017 container with the necessary environment variables. The command configures the SQL Server with an SA password and exposes the default SQL Server port.\nSOURCE: https://github.com/hashicorp/vault/blob/main/plugins/database/mssql/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=<YourStrong!Passw0rd>' \\\n   -p 1433:1433 --name sql1 \\\n   -d mcr.microsoft.com/mssql/server:2017-latest\n```\n\n----------------------------------------\n\nTITLE: UI Key Management Release Note\nDESCRIPTION: A release note indicating a bug fix for the key details page in the HashiCorp Vault user interface\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18808.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: fixes keymgmt key details page\n```\n\n----------------------------------------\n\nTITLE: Managing Default Lease Count Quota in Vault using Shell Commands\nDESCRIPTION: These shell commands demonstrate how to read, delete, and write the global default lease count quota using the /sys/quotas/lease-count/default endpoint in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_16-default-lcq-pre-1_9-upgrade.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/quotas/lease-count/default\n$ vault delete sys/quotas/lease-count/default\n$ vault write sys/quotas/lease-count/default max_leases=<# of max leases>\n```\n\n----------------------------------------\n\nTITLE: Using Bindings File for Static Account - Vault - Shell\nDESCRIPTION: This command utilizes a bindings file when defining a Vault static account. The bindings are provided using the '@' syntax to include an HCL file, which should be properly formatted with resource and role details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcp.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write gcp/static-account/my-account\n    bindings=@mybindings.hcl\n    ...\n```\n\n----------------------------------------\n\nTITLE: Reading Test Value from KV Plugin in Vault\nDESCRIPTION: This command reads the test value from the ADFS KV mount. It's used to verify that the configured permissions are working correctly for AD group members.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv list -mount=secret <ADFS_KV_PLUGIN_PATH>/test\n```\n\n----------------------------------------\n\nTITLE: Providing Socket Based Audit Backends with Prefix Option - Markdown\nDESCRIPTION: This snippet describes a bug fix that enhances socket-based audit backends in Vault by allowing a 'prefix' configuration option when provided. This allows users to add a prefix to their audit logs for better organization and tracking.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25004.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:bug\\naudit/socket: Provide socket based audit backends with 'prefix' configuration option when supplied.\"\n```\n\n----------------------------------------\n\nTITLE: Including Rotate Duration Metric\nDESCRIPTION: This snippet includes the metric for the duration taken to rotate automated snapshots. This can help assess performance in snapshot management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/autosnap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/autosnapshots/rotate/duration.mdx'\n```\n\n----------------------------------------\n\nTITLE: Improving etcd List() Method Behavior\nDESCRIPTION: Update the etcd storage backend to return only relevant keys during List() operations, potentially reducing unnecessary data retrieval and improving performance\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23872.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nstorage/etcd: etcd should only return keys when calling List()\n```\n\n----------------------------------------\n\nTITLE: Check Merkle Tree Corruption in Vault\nDESCRIPTION: cURL command to check the Merkle tree corruption status on a DR secondary cluster using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_32\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/replication/dr/secondary/merkle-check\n```\n\n----------------------------------------\n\nTITLE: Adding OIDC Code Challenge Methods Metadata\nDESCRIPTION: Extends OpenID Connect provider metadata to include supported code challenge methods, improving authentication protocol flexibility and compliance\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24979.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncode_challenge_methods_supported\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fix for HA Leadership Transfer Deadlock in Vault Core (Markdown)\nDESCRIPTION: This release note entry documents a bug fix in HashiCorp Vault's core functionality. The fix resolves a deadlock issue that was occurring during the process of transferring leadership in Vault's high availability (HA) setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12691.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore: Fix a deadlock on HA leadership transfer\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Framework Improvement Release Note\nDESCRIPTION: Release note indicating an improvement in the Vault framework where CreateOperation now requires an ExistenceCheck to be defined. This change helps ensure accurate OpenAPI documentation via the x-vault-createSupported flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18492.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nframework: Make it an error for `CreateOperation` to be defined without an `ExistenceCheck`, thereby fixing misleading `x-vault-createSupported` in OpenAPI\n```\n\n----------------------------------------\n\nTITLE: Logging in as User with Token\nDESCRIPTION: This command allows a user to log in to Vault using their generated token, providing authenticated access to Vault resources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-okta.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n$ vault login 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Storage Bolt Rebalance Metric Definition\nDESCRIPTION: Defines a gauge metric that tracks the count of node rebalances performed by the Bolt database in Vault's raft storage. This metric helps monitor database optimization operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/raft_storage/bolt/rebalance/count.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value   | Description\n----------- | ------- | -----------\ngauge       | number  | Number of node rebalances performed by the Bolt database\n```\n\n----------------------------------------\n\nTITLE: Fixing Deadlocks on Login Failure - Release Note\nDESCRIPTION: This release note describes the bug fix for a potential deadlock situation that can occur during user login attempts when the user lockout feature is enabled. It ensures smoother operation and better user experience during erroneous login attempts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25697.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\ncore/login: Fixed a potential deadlock when a login fails and user lockout is enabled.\"\n```\n\n----------------------------------------\n\nTITLE: Release Note: AWS Secrets Engine Bug Fix\nDESCRIPTION: Addresses a panic in the AWS secrets engine when a performance standby node attempts to write or update configurations.  This bug fix prevents unexpected crashes in Vault's AWS secrets functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30039.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nsecrets/aws: fix a panic when a performance standby node attempts to write/update config.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Listener Configuration for Request Limiter in Markdown\nDESCRIPTION: This snippet documents the addition of a new listener configuration option, `disable_request_limiter`, which allows users to disable the request limiter for individual listeners in HashiCorp Vault. This enhancement provides greater flexibility in managing listener behavior based on specific requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25098.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nlimits: Add a listener configuration option `disable_request_limiter` to allow\\ndisabling the request limiter per-listener.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response from Vault's UI Namespaces Endpoint\nDESCRIPTION: Example JSON response from the /sys/internal/ui/namespaces endpoint. The response contains a 'namespaces' array which lists the namespaces relevant to the UI. In this example, the array is empty.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-namespaces.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"namespaces\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Login Error: Missing Entity Alias Attribute Value\nDESCRIPTION: This snippet details a bug fix addressing an issue where the login process encountered an error due to a missing entity alias attribute value in LDAP authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26200.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"auth/ldap: Fix login error missing entity alias attribute value.\"\n```\n\n----------------------------------------\n\nTITLE: Prefix filter array for telemetry\nDESCRIPTION: This JSON code defines the format of a prefix filter array for filtering metrics to be enabled or blocked by prefix. A leading \"+\" will enable metrics with the given prefix, and a leading \"-\" will block them. Overlapping rules are handled with the most specific rule taking precedence, and blocking taking priority if the same prefix is listed multiple times.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/telemetry.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"[\\\"+vault.token\\\", \\\"-vault.expire\\\", \\\"+vault.expire.num_leases\\\"]\"\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets Engines in Vault\nDESCRIPTION: Command to list all secrets engines, including those mounted as plugins. The output shows details like path, type, accessor, and plugin name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault secrets list\nPath         Type       Accessor            Plugin              Default TTL  Max TTL  Force No Cache  Replication Behavior  Description\nmy-secrets/  plugin     plugin_deb84140     passthrough-plugin  system       system   false           replicated\n```\n\n----------------------------------------\n\nTITLE: Certificate Monitoring for Auto-Auth in Vault\nDESCRIPTION: Improvement to the cert auto-auth method that enables watching for changes on certificate and key files. When changes are detected, the auth handler is notified, allowing for automatic re-authentication with the new credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28126.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauto-auth/cert: support watching changes on certificate/key files and notifying the auth handler when `enable_reauth_on_new_credentials` is enabled.\n```\n```\n\n----------------------------------------\n\nTITLE: Vault UI Download Change Release Note\nDESCRIPTION: Release note entry indicating a partial revert of PR #20431 and removal of functionality for downloading unencrypted KV v2 secret data from the Vault UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29290.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nui: Partially reverts #20431 and removes ability to download unencrypted kv v2 secret data\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration for Quota Role Calculation\nDESCRIPTION: This code snippet presents a release note that documents the improvement in the quota system of HashiCorp Vault, specifically allowing configuration to skip costly calculations of roles. This functionality is aimed at enhancing performance by reducing the computing overhead associated with role evaluations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22651.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\ncore/quotas: Add configuration to allow skipping of expensive role calculations\"\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note: GCP CloudSQL Private IP Support\nDESCRIPTION: This release note indicates that Vault's secrets/database functionality has been improved to support Google Cloud SQL instances using private IPs. This allows Vault to securely manage database credentials for Cloud SQL instances without exposing them to the public internet.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26828.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:improvement\nsecrets/database: Add support for GCP CloudSQL private IP's.\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Fail-If-Not-Fulfilled Flag to Vault CLI\nDESCRIPTION: Release note documenting the addition of a --fail-if-not-fulfilled flag to Vault's renew command, which enables failure detection for unfulfillable renewal requests and supports command chaining based on renewal status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29060.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nCLI: adds an optional flag (--fail-if-not-fulfilled) to the renew command, which lets the renew command fail on unfulfillable requests and allows command chaining to allow further executions.\n```\n\n----------------------------------------\n\nTITLE: Changing Vault Activity Export API Response for No Data\nDESCRIPTION: This release note describes a change in the Vault Activity Export API's behavior. When no data exists within the specified time range, the API now responds with a status code of 204 instead of 400.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28064.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nactivity: The [activity export API](https://developer.hashicorp.com/vault/api-docs/system/internal-counters#activity-export) now responds with a status of 204 instead 400 when no data exists within the time range specified by `start_time` and `end_time`.\n```\n```\n\n----------------------------------------\n\nTITLE: Opting Out of Plugin Variables Precedence Change in Vault\nDESCRIPTION: This snippet sets an environment variable to prioritize server environment variables over plugin variables in case of conflicts. It is particularly useful for maintaining legacy behavior. Requires basic understanding of environment variables setup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.16.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export VAULT_PLUGIN_USE_LEGACY_ENV_LAYERING=true\n```\n\n----------------------------------------\n\nTITLE: Plugin Version Pinning API Improvement\nDESCRIPTION: This release note announces the addition of new APIs for pinning plugin versions. These APIs enforce that all plugins of a particular type and name run the same version, increasing security and operational consistency.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25105.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\nplugins: Add new pin version APIs to enforce all plugins of a specific type and name to run the same version.\n```\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Metadata using CLI - Vault KV V2 - Shell\nDESCRIPTION: This snippet shows how to retrieve the custom metadata fields for a specific secret path in a KV V2 mount. It outputs the metadata, including custom fields and their values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/custom-metadata.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv metadata get -mount shared dev/square-api\n\n======== Metadata Path ========\nshared/metadata/dev/square-api\n\n========== Metadata ==========\nKey                     Value\n---                     -----\ncas_required            false\ncreated_time            2024-11-13T21:51:50.898782695Z\ncurrent_version         9\ncustom_metadata         map[use:API keys for different dev environments renew-date:2026-11-14]\ndelete_version_after    0s\nmax_versions            10\noldest_version          4\nupdated_time            2024-11-15T03:10:26.749233814Z\n\n====== Version 1 ======\nKey              Value\n---              -----\ncreated_time     2024-11-13T21:51:50.898782695Z\ndeletion_time    n/a\ndestroyed        false\n```\n\n----------------------------------------\n\nTITLE: Vault Audit Logging Error Example\nDESCRIPTION: This code snippet illustrates an error message logged by Vault when it fails to write audit logs to syslog. It indicates that the audit and core modules encounter errors, and the message provides clues about the underlying problem.  The error suggests that the size of the log entries exceeds the syslog host's socket send buffer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/key-metrics.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"2020-10-20T12:34:56.290Z [ERROR] audit: backend failed to log response: backend=syslog/ error=\\\"write unixgram @->/test/log: write: message too long\\\"\\n2020-10-20T12:34:56.291Z [ERROR] core: failed to audit response: request_path=sys/mounts\\n error=\\\"1 error occurred:\\n        * no audit backend succeeded in logging the response\\\"\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Available Visible Mounts in Vault API (JSON)\nDESCRIPTION: This JSON snippet shows a sample response from the `/sys/internal/ui/mounts` endpoint. It includes information about enabled auth methods and secret engines, their types, and descriptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-mounts.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"github/\": {\n      \"description\": \"GitHub auth\",\n      \"type\": \"github\"\n    }\n  },\n  \"secret\": {\n    \"custom-secrets/\": {\n      \"description\": \"Custom secrets\",\n      \"options\": {\n        \"version\": \"2\"\n      },\n      \"type\": \"kv\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic KMS Library Stanza Structure in HCL\nDESCRIPTION: Basic structure for defining a KMS library stanza in Vault configuration. The TYPE parameter and logical name are required for configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/kms-library.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nkms_library [TYPE] {\n  name = \"<logical name>\"\n  # ...\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Role with cURL\nDESCRIPTION: This snippet shows how to send a DELETE request to remove an existing AWS role by name using cURL. This action requires the Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/aws/roles/example-role\n```\n\n----------------------------------------\n\nTITLE: Trim Tokenization Key Version - Request Payload\nDESCRIPTION: JSON payload for trimming old key versions by setting a minimum available version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"min_available_version\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Keys Configuration from Vault API - Shell\nDESCRIPTION: This shell command retrieves the default key configuration from the Vault PKI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_96\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/keys\n```\n\n----------------------------------------\n\nTITLE: Updating SDK for Identity Tokens\nDESCRIPTION: This snippet improves the SDK to include identity token helpers that are designed to consistently apply new plugin WIF fields across different integrations. It addresses the reliable management of identity tokens within the SDK context.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24925.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\nsdk: Add identity token helpers to consistently apply new plugin WIF fields across integrations.\"\n```\n\n----------------------------------------\n\nTITLE: Enhancing Certificate Authentication Security in HashiCorp Vault\nDESCRIPTION: Implements additional verification for non-CA certificates by comparing public keys to prevent potential certificate trust vulnerabilities related to serial number matching\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25649.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth/cert: compare public keys of trusted non-CA certificates with incoming client certificates to prevent trusting certs with the same serial number but not the same public/private key.\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Auth Token Environment Variable in Vault\nDESCRIPTION: Allows setting an optional GitHub auth token environment variable to make authenticated requests when fetching org ID for GitHub authentication in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v1.10-v1.15.md#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nVAULT_AUTH_CONFIG_GITHUB_TOKEN: <github_auth_token>\n```\n\n----------------------------------------\n\nTITLE: Release Note: Updating Vault Snowflake Plugin\nDESCRIPTION: This release note indicates an update to the database/snowflake plugin for HashiCorp Vault. It specifies upgrading the plugin to version v0.11.0. This update likely includes bug fixes, new features, or performance improvements within the Snowflake plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27132.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\ndatabase/snowflake: Update plugin to v0.11.0\n```\n```\n\n----------------------------------------\n\nTITLE: UI Improvement: CodeBlock Replacement\nDESCRIPTION: This release note indicates that the user interface (UI) of Vault has been improved. Specifically, instances of the readonly JsonEditor component have been replaced with the Hds::CodeBlock component. This change likely improves the display and handling of code snippets within the Vault UI, potentially enhancing readability and user experience.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29720.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nui: Use Hds::CodeBlock component to replace readonly JsonEditor instances\n```\n\n----------------------------------------\n\nTITLE: Updating Snowflake Database Plugin in HashiCorp Vault\nDESCRIPTION: Release note indicating that the Snowflake database plugin for HashiCorp Vault has been updated to version 0.12.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28275.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ndatabase/snowflake: Update plugin to v0.12.0\n```\n```\n\n----------------------------------------\n\nTITLE: Merkle Corruption Report JSON Structure (JSON)\nDESCRIPTION: This JSON structure represents the Merkle corruption report returned by the Vault API. It includes details about corrupted roots, tree maps, and the last corruption check timestamp.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"d4b2ad1a-6e5f-7f9e-edfe-558eb89a40e6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"merkle_corruption_report\": {\n      \"corrupted_root\": false,\n      \"corrupted_tree_map\": {\n        \"1\": {\n          \"corrupted_index_tuples_map\": {\n            \"5\": {\n              \"corrupted\": false,\n              \"subpages\": [\n                28\n              ]\n            }\n          },\n          \"corrupted_subtree_root\": false,\n          \"root_hash\": \"DyGc6rQTV9XgyNSff3zimhi3FJM=\",\n          \"tree_type\": \"replicated\"\n        },\n        \"2\": {\n          \"corrupted_index_tuples_map\": null,\n          \"corrupted_subtree_root\": false,\n          \"root_hash\": \"EXmRTdfYCZTm5i9wLef9RQqyLCw=\",\n          \"tree_type\": \"local\"\n        }\n      },\n      \"last_corruption_check_epoch\": \"2023-09-11T11:25:59.44956-07:00\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Key Information JSON Output\nDESCRIPTION: Example JSON output showing key metadata including version information and creation time.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"request_id\": \"631f98de-b755-9863-40db-f789ff9ff10a\",\n    \"lease_id\": \"\",\n    \"lease_duration\": 0,\n    \"renewable\": false,\n    \"data\": {\n        \"deletion_allowed\": false,\n        \"latest_version\": 1,\n        \"min_enabled_version\": 1,\n        \"name\": \"aes256-gcm96\",\n        \"type\": \"aes256-gcm96\",\n        \"versions\": {\n        \"1\": {\n            \"creation_time\": \"2021-11-16T13:07:17.878864-05:00\"\n        }\n        }\n    },\n    \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: RADIUS Login Sample Request with cURL\nDESCRIPTION: This cURL command demonstrates how to authenticate a user with the RADIUS auth method by sending their password to the login endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/radius/login/test-user\n```\n\n----------------------------------------\n\nTITLE: Updating OpenLDAP Secrets Plugin in Vault Release Note\nDESCRIPTION: This release note indicates that the OpenLDAP secrets plugin for HashiCorp Vault has been updated to version 0.14.1. It's formatted as a change in the release notes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28479.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/openldap: Update plugin to v0.14.1\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for OIDC Auth Method in Vault\nDESCRIPTION: This release note snippet describes a bug fix for the Vault UI. The fix addresses the missing 'default_role' input in the OIDC authentication method configuration form, improving the completeness of the UI for configuring OIDC auth.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28539.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: fix `default_role` input missing from oidc auth method configuration form\n```\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Atlas Secrets Plugin Version - Release Note\nDESCRIPTION: Release note entry documenting the update of the MongoDB Atlas secrets plugin to version 0.13.0 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28348.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:change\nsecrets/mongodbatlas: Update plugin to v0.13.0\n```\n\n----------------------------------------\n\nTITLE: Raft Operation Panic on Unknown Operations\nDESCRIPTION: This release note describes an improvement where Vault's Raft storage now panics when it encounters an unknown Raft operation. This ensures immediate detection and handling of unexpected situations within the Raft consensus algorithm, which is crucial for maintaining data consistency and preventing potential corruption.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25991.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\nstorage/raft: panic on unknown Raft operations\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Agent Concurrent Request Handling Improvement\nDESCRIPTION: Release note in markdown format documenting an improvement to Vault Agent's handling of identical concurrent requests when acting as a proxy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10705.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nagent: Better concurrent request handling on identical requests proxied through Agent.\n```\n\n----------------------------------------\n\nTITLE: Checking Database Interface Compliance in Go\nDESCRIPTION: A code snippet demonstrating how to validate that a custom database type implements the Database interface using a nil type assertion. This is a compile-time check to ensure your database struct properly implements all required methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/sdk/database/dbplugin/README.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nvar _ dbplugin.Database = (*MyDatabase)(nil)\n```\n\n----------------------------------------\n\nTITLE: Installing Vault-api Typescript Package\nDESCRIPTION: Command to install the vault-api Typescript client library with Axios-like API using npm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ npm install vault-api\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Ruby Client\nDESCRIPTION: Command to install the official but deprecated Vault Ruby client library using gem.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ gem install vault\n```\n\n----------------------------------------\n\nTITLE: Token Explicit Max TTL Configuration in Vault\nDESCRIPTION: Setting for defining a hard maximum TTL cap for tokens that cannot be exceeded even through renewals.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/tokenstorefields.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\ntoken_explicit_max_ttl = 0\n```\n\n----------------------------------------\n\nTITLE: Changing Directory Ownership on Linux\nDESCRIPTION: This snippet changes the ownership of the Vault data directory to the created 'vault' user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo chown vault:vault ${VAULT_DATA}\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Server Name Argument for Plugin Registration in Vault API\nDESCRIPTION: This improvement adds a new 'tls-server-name' argument for plugin registration in the Vault API. This enhancement allows users to specify the TLS server name during plugin registration, providing more control over TLS configuration for plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23549.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\napi/plugins: add `tls-server-name` arg for plugin registration\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Listing Token Roles\nDESCRIPTION: This snippet shows how to make a LIST request to retrieve all available token roles from the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/token/roles\n```\n\n----------------------------------------\n\nTITLE: Vault Core Improvement: Go 1.17 and IP/CIDR Mitigation\nDESCRIPTION: This release note documents an improvement in Vault after building with Go 1.17. It addresses a breaking change introduced by Go that could impact how approle and SSH features interpret IP addresses and CIDRs. The primary purpose is to ensure consistent and correct handling of IP/CIDR data within Vault's approle and SSH authentication mechanisms after the Go upgrade.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12868.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:improvement\ncore: build with Go 1.17, and mitigate a breaking change they made that could impact how approle and ssh interpret IPs/CIDRs\n`\n```\n\n----------------------------------------\n\nTITLE: Listing Raw Storage Keys in Vault with cURL\nDESCRIPTION: Makes a LIST request to retrieve a list of keys under a specified prefix in Vault's raw storage. Requires 'sudo' capability and an authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/raw.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/raw/logical\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Cluster Address Environment Variable\nDESCRIPTION: Example of setting the VAULT_CLUSTER_ADDR environment variable used for cluster-to-cluster communication in Vault's high-availability mode. The address specifies the local Vault node's location for internal cluster communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/cluster_addr.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_CLUSTER_ADDR=\"https://127.0.0.1:8201\"\n```\n\n----------------------------------------\n\nTITLE: Passing Context to PostgreSQL Queries in Vault\nDESCRIPTION: This release note describes an improvement where context is passed to PostgreSQL queries to enhance the management of timeouts and cancellations during requests. The functionality aims to make the query process more robust and reliable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15866.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nphysical/postgresql: pass context to queries to propagate timeouts and cancellations on requests.\"\n```\n\n----------------------------------------\n\nTITLE: Validating JWT in Kubernetes Authentication - plaintext\nDESCRIPTION: This snippet outlines an improvement in the Kubernetes authentication method of HashiCorp Vault, specifically validating JWT tokens against a given role during alias look-ahead operations. It helps ensure that only correct and valid JWTs are processed, enhancing security and functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12688.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nauth/kubernetes: validate JWT against the provided role on alias look ahead operations\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Method for LDAP Auth in Go Vault Client\nDESCRIPTION: This code snippet indicates the implementation of a Login method within the Go client libraries to support LDAP authentication. This enhancement likely involves adding a function or method to the client that handles the authentication process against an LDAP server using Vault. The purpose is to streamline and simplify LDAP authentication for Go applications interacting with Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13841.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n`release-note:improvement\napi: Implements Login method in Go client libraries for LDAP auth methods\n`\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenAPI Bug Fix in Release Notes\nDESCRIPTION: Release note entry describing a bug fix that improves the accuracy of the generated OpenAPI specification by implementing better path regexp parsing techniques.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18554.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nopenapi: Fix many incorrect details in generated API spec, by using better techniques to parse path regexps\n```\n\n----------------------------------------\n\nTITLE: Updating Seal Health Logging Level in Vault Core\nDESCRIPTION: Changes the logging level from INFO to ERROR when reporting that all seals are in an unhealthy state. This improvement helps make seal health issues more prominent in logs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28564.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore: log at level ERROR rather than INFO when all seals are unhealthy.\n```\n\n----------------------------------------\n\nTITLE: Adding Experiments System Release Note\nDESCRIPTION: Release note entry describing the addition of a new experiments system and events.alpha1 experiment to Vault core functionality. The note is formatted in the release-note improvement style.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18682.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore: Add experiments system and `events.alpha1` experiment.\n```\n\n----------------------------------------\n\nTITLE: Release Note for Couchbase Database Plugin Update in Vault\nDESCRIPTION: A release note entry that documents the update of the Couchbase database plugin to version 0.9.4 in HashiCorp Vault. This indicates a change in the database component of Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22871.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ndatabase/couchbase: Update plugin to v0.9.4\n```\n```\n\n----------------------------------------\n\nTITLE: Checking System-wide File Limit\nDESCRIPTION: Command to check the current system-wide maximum open files value from kernel process table.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncat /proc/sys/fs/file-max\n```\n\n----------------------------------------\n\nTITLE: Installing Violuke's Extended Vault PHP SDK\nDESCRIPTION: Command to install Violuke's extended version of Jippi's Vault PHP SDK using Composer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ composer require violuke/vault-php-sdk\n```\n\n----------------------------------------\n\nTITLE: Enhancing Error Messaging for Vault Plugin CLI Commands\nDESCRIPTION: This snippet outlines the improvements made to the error messages associated with the `vault plugin` sub-commands, enhancing user experience by providing clearer guidance when issues arise.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24250.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\ncli: Improved error messages for `vault plugin` sub-commands.\"\n```\n\n----------------------------------------\n\nTITLE: KMIP Operations Support Table\nDESCRIPTION: Markdown table detailing supported client-to-server operations with implementation status and version-specific notes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip-profiles.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Operation                                             | Supported | Notes |\n| ------------------------------------------------------| :--------:|:-----:|\n| Locate [KMIP-SPEC 4.9][kmip-spec-4.9]                 | ✅        | Vault version 1.11 supports attributes Activation Date, Application Specific Information, Cryptographic Algorithm, Cryptographic Length, Name, Object Type, Original Creation Date, and State. <br/> Vault version 1.12 supports all profile attributes except for Key Value Location.      |\n| Check [KMIP-SPEC 4.10][kmip-spec-4.10]                | 🔴        |        |\n```\n\n----------------------------------------\n\nTITLE: Creating TDE Login and Credentials\nDESCRIPTION: SQL commands to create login and credentials for TDE operations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nCREATE CREDENTIAL TransitVaultTDECredentials\n    WITH IDENTITY = '<approle-role-id>',\n    SECRET = '<approle-secret-id>'\nFOR CRYPTOGRAPHIC PROVIDER TransitVaultProvider;\nGO\n\nCREATE LOGIN TransitVaultTDELogin\nFROM ASYMMETRIC KEY TransitVaultAsymmetric;\nGO\n\nALTER LOGIN TransitVaultTDELogin\nADD CREDENTIAL TransitVaultTDECredentials;\nGO\n```\n\n----------------------------------------\n\nTITLE: Read Certificate Response\nDESCRIPTION: JSON response containing certificate data and metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_45\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIGmDCCBYCgAwIBAgIHBzEB3fTzhTANBgkqhkiG9w0BAQsFADCBjDELMAkGA1UE\\n...\",\n    \"revocation_time\": 1667400107,\n    \"revocation_time_rfc3339\": \"2022-11-02T14:41:47.327515Z\",\n    \"issuer_id\": \"e27bf456-51e1-d937-0001-4a609184fd9b\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Response Format in JSON\nDESCRIPTION: Example response structure showing the wrapped token details including token value, TTL, creation time, and path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-wrap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": null,\n  \"warnings\": null,\n  \"wrap_info\": {\n    \"token\": \"fb79b9d3-d94e-9eb6-4919-c559311133d6\",\n    \"ttl\": 300,\n    \"creation_time\": \"2016-09-28T14:41:00.56961496-04:00\",\n    \"creation_path\": \"sys/wrapping/wrap\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Database Connection Configuration UI\nDESCRIPTION: Adds a new input field and toggle button for managing static role password rotation settings in the Vault database connection configuration interface\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29820.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Database configuration input for skip static role password rotation -->\n```\n\n----------------------------------------\n\nTITLE: List Snapshot Configurations Response\nDESCRIPTION: Sample JSON response when listing snapshot configurations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raftautosnapshots.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"config1\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Core Backend Parallelization Release Note\nDESCRIPTION: Release note documenting the improvement to parallelize backend initialization in Vault's core to reduce startup time when dealing with large numbers of mount points.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18244.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore: parallelize backend initialization to improve startup time for large numbers of mounts.\n```\n\n----------------------------------------\n\nTITLE: Saving Random String to KV v2 via API (jq and curl)\nDESCRIPTION: This shell script uses `curl` to generate a random string using the `/sys/policies/password/{policy_name}/generate` endpoint and store it in Vault's KV v2 secrets engine. The script constructs a JSON payload containing the generated password and sends it via a POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/random-string.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ curl                                        \\\n    --request POST                            \\\n    --header \\\"X-Vault-Token: ${VAULT_TOKEN}\\\"  \\\n    --data                                    \\\n    \\\"{ \\\\\\\"data\\\\\\\": { \\\\\\\"<key_name>\\\\\\\": \\\\\\\"$( vault read -field password sys/policies/password/<policy_name>/generate )\\\\\\\" } }\\\"                                        \\\n    ${VAULT_ADDR}/v1/<plugin_mount_path>/data/<secret_path>\"\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating OIDC Assignment\nDESCRIPTION: This API endpoint creates or updates an OIDC assignment. The request uses a POST HTTP method, includes a JSON payload with entity and group IDs, and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/oidc/assignment/test-assignment\n```\n\n----------------------------------------\n\nTITLE: Adding Per-Listener Configuration Option in Vault (Markdown)\nDESCRIPTION: This release note describes a new feature in Vault's listener configuration. It allows for per-listener settings to disable replication status endpoints, providing more granular control over listener behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23547.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nconfig/listener: allow per-listener configuration setting to disable replication status endpoints.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Static Account in GCP Secrets Engine (JSON Format)\nDESCRIPTION: Sample JSON payload for creating or updating a static account in GCP secrets engine. Defines the account type, service account email, bindings, and token scopes for access token generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_type\": \"access_token\",\n  \"service_account_email\": \"example@mygcpproject.iam.gserviceaccount.com\",\n  \"bindings\": \"...\",\n  \"token_scopes\": [\n    \"https://www.googleapis.com/auth/cloud-platform\",\n    \"https://www.googleapis.com/auth/bigquery\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Node Management in Eventbus using Go\nDESCRIPTION: This snippet documents the improved functionality of the eventbus through an update to the go-eventlogger library, allowing the removal of nodes referenced by pipelines for subscriptions. The change enhances the management of subscriptions and node lifecycle within the eventbus framework.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21623.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\neventbus: updated go-eventlogger library to allow removal of nodes referenced by pipelines (used for subscriptions)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Redaction Configuration Example\nDESCRIPTION: Complete configuration example showing redaction settings for addresses, cluster name, and version information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: hcl\nCODE:\n```\nui            = true\ncluster_addr  = \"https://127.0.0.1:8201\"\napi_addr      = \"https://127.0.0.1:8200\"\ndisable_mlock = true\n\nstorage \"raft\" {\n  path = \"/path/to/raft/data\"\n  node_id = \"raft_node_1\"\n}\n\nlistener \"tcp\" {\n  address             = \"127.0.0.1:8200\",\n  tls_cert_file = \"/path/to/full-chain.pem\"\n  tls_key_file  = \"/path/to/private-key.pem\"\n  redact_addresses    = \"true\"\n  redact_cluster_name = \"true\"\n  redact_version      = \"true\"\n}\n\ntelemetry {\n  statsite_address = \"127.0.0.1:8125\"\n  disable_hostname = true\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting SDK Change: Maximum String Template Size\nDESCRIPTION: This code snippet documents the change in the Vault SDK regarding the maximum allowable size for string templates. The limit has been updated to 100,000 characters to accommodate larger templates. This change may affect existing implementations that relied on earlier size limits.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26110.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nsdk: String templates now have a maximum size of 100,000 characters.\"\n```\n\n----------------------------------------\n\nTITLE: OIDC Authorization Endpoint State Parameter Configuration\nDESCRIPTION: Updates the OIDC Authorization Endpoint to treat the `state` parameter as optional, potentially improving compatibility and flexibility for OIDC implementations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16599.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nidentity/oidc: Change the `state` parameter of the Authorization Endpoint to optional.\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note: Bug Fix\nDESCRIPTION: This release note indicates a bug fix in the Vault project, addressing a missing mutex unlock call in the error handling path for key deletion operations within the identity/token functionality.  This ensures proper resource management during error scenarios.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12916.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"identity/token: Adds missing call to unlock mutex in key deletion error handling\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Release Note\nDESCRIPTION: This release note indicates a bug fix in Vault. It specifically addresses the visibility of activity records from clients in deleted namespaces when querying the activity log from the admin namespace. The fix ensures these records are displayed as expected.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29432.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nactivity: Show activity records from clients created in deleted namespaces when activity log is queried from admin namespace.\n```\n```\n\n----------------------------------------\n\nTITLE: Improving UI for Obscuring JSON Values - Release Note\nDESCRIPTION: This release note outlines the enhancement made to the Vault UI for obscuring JSON values when a KV v2 secret contains nested objects. The improvement aims to enhance user privacy and security by preventing the display of sensitive information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24530.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nui: obscure JSON values when KV v2 secret has nested objects\"\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Secrets Plugin Version\nDESCRIPTION: This release note indicates that the GCP secrets plugin has been updated to version v0.21.2.  This likely incorporates improvements and bug fixes related to the GCP secrets engine functionality within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29970.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:change\nsecrets/gcp: Update plugin to v0.21.2\n`\n```\n\n----------------------------------------\n\nTITLE: Adding Password Policy Listing Support in Vault Core\nDESCRIPTION: This improvement adds functionality to list password policies at the 'sys/policies/password' endpoint in HashiCorp Vault. This enhancement allows users to view and manage password policies more effectively within the Vault system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12787.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: Add support to list password policies at `sys/policies/password`\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Metrics for Active Entity Count in Vault Core (Markdown)\nDESCRIPTION: This release note snippet indicates an improvement to Vault's core functionality. It introduces new metrics for tracking and reporting the count of active entities, enhancing Vault's monitoring and observability capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10514.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: add metrics for active entity count\n```\n```\n\n----------------------------------------\n\nTITLE: AWS Static Credentials Rotation Bug Fix Release Note\nDESCRIPTION: Documents a bug fix addressing the issue where AWS static credentials were not properly rotating after a Vault server restart or leadership change in the AWS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28775.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nsecrets/aws: Fix issue with static credentials not rotating after restart or leadership change.\n```\n\n----------------------------------------\n\nTITLE: Fixing Issues in Raft Storage Leadership Candidates\nDESCRIPTION: This release note outlines a bug fix implemented in the Raft storage component of the Vault application. It specifically addresses issues where invalid nodes could mistakenly become candidates for leadership, enhancing the overall reliability of the Raft consensus protocol within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13703.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\nstorage/raft: Fix issues allowing invalid nodes to become leadership candidates.\"\n```\n\n----------------------------------------\n\nTITLE: Adding Locked Users Telemetry Metric in Vault Core\nDESCRIPTION: Introduces a new telemetry metric 'vault.core.locked_users' that tracks the total number of locked users in the Vault system. This metric enhancement improves monitoring capabilities for user lock status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18718.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:improvement\ncore: Add vault.core.locked_users telemetry metric to emit information about total number of locked users.\n```\n\n----------------------------------------\n\nTITLE: Vault Core Path Handling Improvement Release Note\nDESCRIPTION: Documents a new mount tuneable feature that removes trailing slashes from request paths during POST operations. This improvement was implemented specifically to support Certificate Management Protocol v2 (CMPv2) functionality in the PKI secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28752.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore: Add a mount tuneable that trims trailing slashes of request paths during POST.  Needed to support CMPv2 in PKI.\n```\n\n----------------------------------------\n\nTITLE: Release Note: Fix Null Token Type Panic\nDESCRIPTION: This release note indicates that a bug in Vault's core token functionality has been fixed. The bug caused a panic when the `token_type` was null, specifically when using the `v1/auth/token/roles/{role_name}` endpoint to create tokens from roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13236.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`core/token: Fix null token_type panic resulting from 'v1/auth/token/roles/{role_name}' endpoint`\n```\n\n----------------------------------------\n\nTITLE: Building Plugin Container Dockerfile\nDESCRIPTION: Dockerfile configuration for creating a containerized secrets plugin using distroless base image.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/containerized-plugins/add-a-containerized-plugin.mdx#2025-04-14_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM gcr.io/distroless/static-debian12\nCOPY kv /bin/kv\nENTRYPOINT [ \"/bin/kv\" ]\n```\n\n----------------------------------------\n\nTITLE: Workaround Configuration for STS Endpoint in Vault AWS Secrets Engine\nDESCRIPTION: To resolve the STS configuration issue, explicitly set the default endpoint and region when configuring STS in the AWS Secrets engine configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/aws-fallback-sts.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n...  \n  sts_region = \"us-east-1\"\n  sts_endpoint = \"https://sts.amazonaws.com\"\n...\n}\n```\n\n----------------------------------------\n\nTITLE: Actual SAML Response Format\nDESCRIPTION: A text example showing the actual format of the SAML response with the 'http://schemas.xmlsoap.org/claims/Group' attribute instead of the expected 'groups' attribute, causing the group mapping to fail.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nuser context=\"{\n  \"attributes\":\n  {\n    \"http://schemas.xmlsoap.org/claims/Group\":[\"Domain Users\",\"VaultAdmin\"],\n    ...\n  },\n  \"subject\":\"rs@example.com\"\n}\"\n```\n\n----------------------------------------\n\nTITLE: Overriding Soft-Mandatory Sentinel Policies in Vault CLI\nDESCRIPTION: The -policy-override flag is a boolean option that allows overriding any Sentinel policy with an enforcement_level set to \"soft-mandatory\". When used, it bypasses these policy checks, enabling operations that would otherwise be restricted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/flags/policy-override.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-policy-override\n```\n\n----------------------------------------\n\nTITLE: Removing Version Package in SDK\nDESCRIPTION: This snippet indicates the removal of the version package within the SDK, aiming to simplify the user agent string by making it versionless. This change may help in preventing version-related issues and streamlining user agent implementation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19068.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nsdk: Remove version package, make useragent.String versionless.\"\n```\n\n----------------------------------------\n\nTITLE: Executing a PKI Key Generation API Call with cURL\nDESCRIPTION: Shell command using cURL to send a POST request to Vault's PKI key generation endpoint, creating an internal key that cannot be retrieved later using the payload defined above.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_54\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/keys/generate/internal\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Starting Recovery Token Generation\nDESCRIPTION: This JSON response shows the initial state of a new recovery token generation attempt, including the generated OTP that will be used to encrypt the final token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/generate-recovery-token.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"started\": true,\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"progress\": 1,\n  \"required\": 3,\n  \"encoded_token\": \"\",\n  \"otp\": \"2vPFYG8gUSW9npwzyvxXMug0\",\n  \"otp_length\": 24,\n  \"complete\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Event Sender Interface Method\nDESCRIPTION: Renames the `Send` method to `SendEvent` in the `EventSender` interface, reflecting a semantic update to the event sending mechanism.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22487.txt#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// sdk/logical/events: `EventSender` interface method is now `SendEvent` instead of `Send`\n```\n\n----------------------------------------\n\nTITLE: Documenting Raft Storage Context Handling Improvement\nDESCRIPTION: Release note entry indicating an improvement in how cancelled contexts are handled in the Raft storage implementation. The change implements best-effort handling for cancelled contexts in the storage layer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12162.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nstorage/raft: Best-effort handling of cancelled contexts.\n```\n\n----------------------------------------\n\nTITLE: Fixing Runtime Catalog Response for Non-existent Runtimes in Vault\nDESCRIPTION: This bug fix changes the response code from 500 to 404 when reading a runtime that does not exist in the runtime catalog. This improves error handling and provides more accurate feedback to clients.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23171.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nplugins: Runtime catalog returns 404 instead of 500 when reading a runtime that does not exist\n```\n```\n\n----------------------------------------\n\nTITLE: Removing MFA Secret Payload JSON\nDESCRIPTION: Sample JSON payload for removing an MFA secret, specifying the target entity ID to be processed\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"entity_id\": \"4746fb81-028c-cd4e-026b-7dd18fe4c2f4\"\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying 429 - Too Many Requests Error in Vault (Text)\nDESCRIPTION: This code snippet shows an example of the error message returned when Vault encounters a '429 - Too Many Requests' response due to exceeding the lease count quota.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/lease-issues.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nError making API request.\n\nURL: PUT https://127.0.0.1:61555/v1/auth/userpass/login/foo\nCode: 429. Errors:\n\n* 1 error occurred:\n\t* request path \"auth/userpass/login/foo\": lease count quota exceeded\n```\n\n----------------------------------------\n\nTITLE: Adding StatText Component Release Note\nDESCRIPTION: Release note entry documenting the addition of a new StatText component to the Vault user interface system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12295.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\nui: Creates new StatText component\n```\n\n----------------------------------------\n\nTITLE: Fetching Activity Counters API Improvement - Release Note\nDESCRIPTION: This release note describes an improvement in the API endpoint that retrieves activity counters, detailing how adding a query parameter for the billing period enhances the response by including full billing period data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20694.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\napi: GET ... /sys/internal/counters/activity?current_billing_period=true now\\nresults in a response which contains the full billing period\"\n```\n\n----------------------------------------\n\nTITLE: Including Destination Telemetry Metrics\nDESCRIPTION: Includes telemetry metrics specific to sync destinations from an external MDX file\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/secrets-sync.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/secrets-sync/destinations.mdx'\n```\n\n----------------------------------------\n\nTITLE: Canceling Rekey Operation Request\nDESCRIPTION: HTTP DELETE request to cancel an in-progress rekey operation\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/rekey-recovery-key/init\n```\n\n----------------------------------------\n\nTITLE: Release Note: Bug Fix in Vault Core\nDESCRIPTION: This release note highlights a bug fix related to a race condition in Vault's core functionality. The race condition occurs when updating a mount's route entry tainted status while processing incoming requests. This fix ensures data consistency and prevents potential issues related to mount route updates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21640.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\ncore: fix race when updating a mount's route entry tainted status and incoming requests \n```\n```\n\n----------------------------------------\n\nTITLE: Response for Listing Entities by Name - JSON\nDESCRIPTION: This JSON response entails a list of the names of all entities in Vault. It contains a 'keys' array with each element representing an entity name currently stored.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\"data\": {\"keys\": [\"testentityname\"]}}\n```\n\n----------------------------------------\n\nTITLE: Updating PKI Tidy Status Fields\nDESCRIPTION: Adds a new last_auto_tidy_finished field to provide more comprehensive tracking of PKI auto tidy operations in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20442.txt#2025-04-14_snippet_0\n\nLANGUAGE: release_note\nCODE:\n```\nsecrets/pki: Add missing fields to tidy-status, include new last_auto_tidy_finished field.\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Docker Test Cluster for Vault in Go\nDESCRIPTION: This snippet demonstrates how to set up a basic Docker test cluster for Vault using the NewTestDockerCluster function. It includes setting up the cluster, deferring cleanup, and performing a basic API operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"testing\"\n  \"github.com/hashicorp/vault/sdk/helper/testcluster/docker\"\n)\n\nfunc Test_Something_With_Docker(t *testing.T) {\n  opts := &docker.DockerClusterOptions{\n    ImageRepo: \"hashicorp/vault\", // or \"hashicorp/vault-enterprise\"\n    ImageTag:    \"latest\",\n  }\n  cluster := docker.NewTestDockerCluster(t, opts)\n  defer cluster.Cleanup()\n  \n  client := cluster.Nodes()[0].APIClient()\n  _, err := client.Logical().Read(\"sys/storage/raft/configuration\")\n  if err != nil {\n    t.Fatal(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vault Pod in Kubernetes\nDESCRIPTION: Command to execute a shell inside the Vault pod named 'vault-0' running in Kubernetes. This provides access to the Vault CLI within the pod.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/kubernetes-auth.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl exec -it vault-0 -- /bin/sh\n```\n\n----------------------------------------\n\nTITLE: Reading Terraform Cloud Role Information - HTTP API - Shell\nDESCRIPTION: This snippet demonstrates how to query for information about a specific Terraform Cloud role by sending a GET request to the `/terraform/role/:name` endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/terraform.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/terraform/role/tfuser\n```\n\n----------------------------------------\n\nTITLE: Adding WalkSecretsTree Functionality to CLI\nDESCRIPTION: The walkSecretsTree function has been added to the CLI to facilitate the recursive traversal of secrets starting from a specified path. This helper function is likely designed to enhance secret management, allowing users to navigate through hierarchical secret storage more efficiently. Dependencies and prerequisites for this function are not detailed, but it seems it's integrated natively within the CLI project structure. The expected input is a path denoting where the traversal should start, with the output likely being a list or structure of traversed secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20464.txt#2025-04-14_snippet_0\n\nLANGUAGE: CLI\nCODE:\n```\n\"cli: Add walkSecretsTree helper function, which recursively walks secrets rooted at the given path\"\n```\n\n----------------------------------------\n\nTITLE: Updating MSSQL Database Secrets Plugin Dependency\nDESCRIPTION: Upgrades the MSSQL database driver dependency to version 0.11.0 and introduces support for contained databases in the Vault MSSQL plugin\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12839.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/denisenkom/go-mssqldb v0.11.0\n```\n\n----------------------------------------\n\nTITLE: Enhancing Certificate Authentication Configuration Loading in Vault\nDESCRIPTION: This enhancement improves the certificate authentication method in Vault by loading configuration and certificate revocation lists (CRLs) from the InitializeFunc. This change allows for parallel processing, potentially improving performance and scalability of the auth/cert backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18885.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:enhancement\nauth/cert: Load config, crls from InitializeFunc to allow parallel processing.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding WithNamespace Helper Method to Vault API\nDESCRIPTION: This release note announces the addition of a new helper method 'WithNamespace' to the Vault API. The method allows for the creation of a cloned client with a new namespace, improving namespace management capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14963.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\napi: Provide a helper method WithNamespace to create a cloned client with a new NS\n```\n```\n\n----------------------------------------\n\nTITLE: Adding STS Region Parameter in AWS Secrets Engine Configuration for Vault\nDESCRIPTION: This release note indicates a bug fix where an 'sts_region' parameter has been added to the root configuration of the AWS secrets engine in HashiCorp Vault. This parameter is specifically for STS API calls, allowing users to specify the region for these calls.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22726.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nsecrets/aws: Add sts_region parameter to root config for STS API calls.\n```\n```\n\n----------------------------------------\n\nTITLE: Disabling usage gauges in Vault telemetry configuration - HCL\nDESCRIPTION: This snippet configures Vault telemetry to disable the collection of usage gauge metrics, which is a workaround for telemetry-related crashes on 32-bit systems.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.5.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntelemetry {\n  ...\n  usage_gauge_period = \"none\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pagination Component in Vault UI\nDESCRIPTION: Release note entry documenting the implementation of a pagination component using the Helios Design System in Vault's user interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23169.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Implement Helios Design System pagination component\n```\n\n----------------------------------------\n\nTITLE: Terminal Command Syntax Highlighting Examples\nDESCRIPTION: Demonstrates correct and incorrect ways to highlight terminal commands in documentation using appropriate language tags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ terraform apply\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ terraform apply\n```\n\n----------------------------------------\n\nTITLE: Viewing Vault Logs After Opting Out of Automated Reporting\nDESCRIPTION: Example of Vault server logs showing confirmation that automated license utilization reporting has been disabled. The logs indicate that the system recognizes the opt-out configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/license/utilization-reporting.mdx#2025-04-14_snippet_4\n\nLANGUAGE: log\nCODE:\n```\n[DEBUG] core: reloading automated reporting\n[INFO]  core: opting out of automated reporting\n[DEBUG] activity: there is no reporting agent configured, skipping counts reporting\n```\n\n----------------------------------------\n\nTITLE: Reading Pinned Plugin Version - Response\nDESCRIPTION: Sample JSON response showing the details of a specific pinned plugin version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-pins.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"name\": \"github\",\n        \"type\": \"auth\",\n        \"version\": \"v1.0.0\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Token Revocation Idempotency in Vault\nDESCRIPTION: This snippet documents the improvement made to the `auth/token/revoke-accessor` endpoint to make it idempotent, ensuring that it does not generate an error if the token has already been revoked. This enhancement contributes to more robust API behavior and developer experience.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13661.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nauth/token: The `auth/token/revoke-accessor` endpoint is now idempotent and will\\nnot error out if the token has already been revoked.\"\n```\n\n----------------------------------------\n\nTITLE: ACME Client UI Display Enhancement\nDESCRIPTION: This release note describes the improvement of displaying ACME clients on a separate page in the Vault UI. This change provides a more organized and user-friendly interface for managing ACME clients.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26020.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\nui: Display ACME clients on a separate page in the UI.\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Client Redirection Control\nDESCRIPTION: This release note describes the addition of the VAULT_DISABLE_REDIRECTS environment variable and the --disable-redirects flag. Setting the VAULT_DISABLE_REDIRECTS environment variable or including the --disable-redirects flag during client initialization will prevent the Vault client from automatically following HTTP redirection responses.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17352.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n```release-note:improvement\napi: Support VAULT_DISABLE_REDIRECTS environment variable (and --disable-redirects flag) to disable default client behavior and prevent the client following any redirection responses. \n```\n```\n\n----------------------------------------\n\nTITLE: Agent Configuration IPv6 Formatting\nDESCRIPTION: This release note indicates that IPv6 addresses within the agent configuration are now automatically translated and displayed according to RFC-5952 §4. This ensures consistent and readable IPv6 address representations in the agent's configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29517.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nagent/config: Configuration values including IPv6 addresses will be automatically translated and displayed conformant to RFC-5952 §4.\n```\n```\n\n----------------------------------------\n\nTITLE: Enhancing LDAP Auth Configuration Warning\nDESCRIPTION: Implements a new feature to log and warn when LDAP user filter configuration might be improperly configured, improving diagnostics and security awareness\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14095.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth/ldap: Add a response warning and server log whenever the config is accessed if `userfilter` doesn't consider `userattr`\n```\n\n----------------------------------------\n\nTITLE: UI Bug Fix Release Note for Vault Secrets Engines\nDESCRIPTION: Release note entry documenting a fix for filtering and search functionality issues in the Vault UI secrets engines interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23123.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nui: Fixes filter and search bug in secrets engines\n```\n\n----------------------------------------\n\nTITLE: UI Breadcrumb Formatting Improvement Release Note\nDESCRIPTION: Documents an improvement to the Vault UI where static breadcrumbs in applications are now formatted in title case for better readability and consistency.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29206.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nui: Application static breadcrumbs should be formatted in title case.\n```\n\n----------------------------------------\n\nTITLE: Correcting Token Information Display for MFA Login\nDESCRIPTION: This snippet resolves an issue where incorrect token information was presented after logging in with two-phase MFA. It ensures that the displayed token data is accurate and relevant.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15428.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"auth: Fixed erroneous token information being displayed when using vault login in case of two-phase MFA\"\n```\n\n----------------------------------------\n\nTITLE: UI Improvement for Azure Secrets Engine Configuration\nDESCRIPTION: Adds functionality to edit, create, and view Azure secrets engine configuration through the Vault UI interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29047.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nui: Adds ability to edit, create, and view the Azure secrets engine configuration.\n```\n\n----------------------------------------\n\nTITLE: Fail on TTL Increment Not Fulfilled - Shell\nDESCRIPTION: This command demonstrates a renewal request that will fail if the requested TTL increment cannot be fully fulfilled. In case of failure, it triggers a login command as a fallback operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/renew.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token renew -increment=30m 96ddf4bc-d217-f3ba-f9bd-017055595017 --fail-if-not-fulfilled || vault login\n```\n\n----------------------------------------\n\nTITLE: Defining VaultStaticSecretList Schema in YAML\nDESCRIPTION: Specifies the schema for a list of VaultStaticSecret resources, including API version, kind, metadata, and items array.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/api-reference.mdx#2025-04-14_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecretList\nmetadata:\n  # Refer to Kubernetes API documentation for fields of `metadata`.\nitems:\n  # Array of VaultStaticSecret resources\n```\n\n----------------------------------------\n\nTITLE: Adding Whitespace Warning for KV Secret Keys in Vault UI\nDESCRIPTION: Release note detailing an improvement to the Vault UI that adds a warning notification when whitespace is detected in a key within a key-value secret. This enhancement helps users identify potential formatting issues in secret keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23702.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Adds a warning when whitespace is detected in a key of a KV secret\n```\n\n----------------------------------------\n\nTITLE: Deprecating Old AWS Auth Endpoints in HashiCorp Vault\nDESCRIPTION: This release note announces the deprecation of AWS Auth endpoints in HashiCorp Vault that use the terms 'whitelist' and 'blacklist'. It refers users to the CHANGES section for more details on the updates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10997.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:deprecation\naws/auth: AWS Auth endpoints that use the \"whitelist\" and \"blacklist\" terms have been deprecated.\nRefer to the CHANGES section for addition details.\n```\n```\n\n----------------------------------------\n\nTITLE: GCP Secrets Plugin Version Update\nDESCRIPTION: This snippet documents the change of updating the Vault GCP secrets plugin from version v0.15.0 to v0.16.0. This change is recorded as a release note.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20818.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/gcp: Updated plugin from v0.15.0 to v0.16.0\n```\n\n----------------------------------------\n\nTITLE: De-duplicating Namespaces in Vault Activity Log\nDESCRIPTION: Bug fix note addressing the issue of duplicate namespace entries appearing when historical and current month activity data are combined in Vault's activity log system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18452.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore/activity: de-duplicate namespaces when historical and current month data are mixed\n```\n\n----------------------------------------\n\nTITLE: Vault PKI Content Type Improvement\nDESCRIPTION: This snippet documents a change to the Vault PKI secret engine. It specifies that PEM certificates should now use the `application/pem-certificate-chain` MIME type, while PEM CRLs should use the `application/x-pem-file` MIME type. This is an improvement over potentially generic or less specific content types previously used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13927.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"secrets/pki: Use application/pem-certificate-chain for PEM certificates, application/x-pem-file for PEM CRLs\"\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Improvements for LDAP Roles - Markdown\nDESCRIPTION: This snippet provides a release note documenting the addition of navigation for LDAP hierarchical roles in the UI. It is part of the ongoing enhancements to improve user experience. There are no specific dependencies or parameters required for this change, but it focuses on improving the accessibility of LDAP roles in the user interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28824.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nui: Adds navigation for LDAP hierarchical roles\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Documentation for Vault PKI Secrets Engine\nDESCRIPTION: Release note describing a bug fix for the PKI secrets engine in HashiCorp Vault where attempting to read a certificate without a serial number was causing a server-side error.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27681.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nsecrets/pki: fix lack of serial number to a certificate read resulting in a server side error.\n```\n```\n\n----------------------------------------\n\nTITLE: Example Vault Server Log\nDESCRIPTION: This example demonstrates the warning messages in Vault's system logs that identify duplicate entities and groups. The logs include information like the entity/group name, namespace ID, entity/group ID, and the suggested deduplication action (renaming).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/entity-group.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"2025-01-28T13:15:13.641-0800 [WARN]  identity: 2 entity duplicates found\n2025-01-28T13:15:13.641-0800 [WARN]  identity: entity \\\"entity-cAsE\\\" with namespace ID \\\"root\\\" duplicates 2 others: id=2562b42d-f603-ac6b-2591-8a20dd050897 force_deduplication=\\\"would not rename\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: entity \\\"entity-case\\\" with namespace ID \\\"root\\\" duplicates 2 others: id=290a643d-6043-da5e-943f-3a3d09e4ecbd force_deduplication=\\\"would rename to entity-case-290a643d-6043-da5e-943f-3a3d09e4ecbd\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: entity \\\"entity-case\\\" with namespace ID \\\"root\\\" duplicates 2 others: id=b0141be5-3f03-a1c7-a57b-02f045d04426 force_deduplication=\\\"would rename to entity-case-b0141be5-3f03-a1c7-a57b-02f045d04426\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: entity \\\"entity-cAsE\\\" with namespace ID \\\"sYMXY\\\" duplicates 2 others: id=95f0743b-a1d5-26da-b4ef-a50490da0787 force_deduplication=\\\"would not rename\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: entity \\\"entity-case\\\" with namespace ID \\\"sYMXY\\\" duplicates 2 others: id=9d3be96f-490a-9625-3118-896bd2b3a5f3 force_deduplication=\\\"would rename to entity-case-9d3be96f-490a-9625-3118-896bd2b3a5f3\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: entity \\\"entity-case\\\" with namespace ID \\\"sYMXY\\\" duplicates 2 others: id=d82231d2-3716-6b9c-e80d-7d09c0409739 force_deduplication=\\\"would rename to entity-case-d82231d2-3716-6b9c-e80d-7d09c0409739\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: end of entity duplicates\n2025-01-28T13:15:13.641-0800 [WARN]  identity: 2 group duplicates found\n2025-01-28T13:15:13.641-0800 [WARN]  identity: group \\\"group-case\\\" with namespace ID \\\"root\\\" duplicates 2 others: id=8ad26e0c-8cf6-5b67-7c77-6571fa374f34 force_deduplication=\\\"would not rename\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: group \\\"group-cAsE\\\" with namespace ID \\\"root\\\" duplicates 2 others: id=9fe86ea0-f80c-1131-5be1-1d6e3b70237f force_deduplication=\\\"would rename to group-cAsE-9fe86ea0-f80c-1131-5be1-1d6e3b70237f\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: group \\\"group-case\\\" with namespace ID \\\"root\\\" duplicates 2 others: id=32dd070c-c1f8-c796-9a71-15887014b813 force_deduplication=\\\"would rename to group-case-32dd070c-c1f8-c796-9a71-15887014b813\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: group \\\"group-case\\\" with namespace ID \\\"sYMXY\\\" duplicates 2 others: id=8aaeff7e-7343-c883-1e0c-c5c9968f75a5 force_deduplication=\\\"would not rename\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: group \\\"group-case\\\" with namespace ID \\\"sYMXY\\\" duplicates 2 others: id=f11277b3-d985-4d72-d2e9-9c8c6c0db02c force_deduplication=\\\"would rename to group-case-f11277b3-d985-4d72-d2e9-9c8c6c0db02c\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: group \\\"group-cAsE\\\" with namespace ID \\\"sYMXY\\\" duplicates 2 others: id=7c753d07-b0d9-e13b-6184-48247b8f7504 force_deduplication=\\\"would rename to group-cAsE-07c753d07-b0d9-e13b-6184-48247b8f7504\\\"\n2025-01-28T13:15:13.641-0800 [WARN]  identity: end of group duplicates\"\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Pod for Vault Testing\nDESCRIPTION: This YAML configuration defines a Kubernetes pod named 'vault' with an nginx container. The pod is set up to continuously echo environment variables related to Vault Kubernetes integration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/serviceregistration/kubernetes/testing/README.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: vault\nspec:\n  containers:\n    - name: nginx\n      image: nginx\n      command: [ \"sh\", \"-c\"]\n      args:\n      - while true; do\n          echo -en '\\n';\n          printenv VAULT_K8S_POD_NAME VAULT_K8S_NAMESPACE;\n          sleep 10;\n        done;\n      env:\n        - name: VAULT_K8S_POD_NAME\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.name\n        - name: VAULT_K8S_NAMESPACE\n          valueFrom:\n            fieldRef:\n              fieldPath: metadata.namespace\n  restartPolicy: Never\n```\n\n----------------------------------------\n\nTITLE: Release Note: Raft Follower Heartbeat Race Condition Fix\nDESCRIPTION: This release note indicates a bug fix in the storage/raft component of Vault. It addresses a race condition that occurs with the follower heartbeat tracker when the system is being torn down. This fix improves the stability and reliability of Vault's Raft-based storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18704.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nstorage/raft: Fix race with follower heartbeat tracker during teardown.\n`\n```\n\n----------------------------------------\n\nTITLE: Release Note: API Endpoint Bug Fix\nDESCRIPTION: This release note describes a bug fix related to API endpoints within the internal UI mounts section of Vault. The issue was related to improper handling of authentication paths (/auth/) for internal/ui/mounts and internal/ui/mounts/(?P<path>.+) endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15552.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\napi: Fixed issue with internal/ui/mounts and internal/ui/mounts/(?P<path>.+) endpoints where it was not properly handling /auth/\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Server Address via Environment Variable in Bash\nDESCRIPTION: Shows how to set the Vault server address using an environment variable. This method allows the address to be set globally for all Vault operations in the current shell session.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/address.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_ADDR=\"https://mydomain/vault:8200\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Background Thread for User Entry Updates\nDESCRIPTION: This snippet describes the implementation of a background thread that updates locked user entries in HashiCorp Vault every 15 minutes. This measure is taken to mitigate the risk of brute-force attacks on authentication methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18673.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore: Implemented background thread to update locked user entries every 15 minutes to prevent brute forcing in auth methods.\"\n```\n\n----------------------------------------\n\nTITLE: Vault HCP Authentication Feature Release Note\nDESCRIPTION: Release note entry describing the addition of a new 'hcp' command group to the Vault CLI. This group enables authentication to HCP (HashiCorp Cloud Platform) through either provided arguments or browser-based login flow.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23897.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\ncli: introduce new command group hcp which groups subcommands for authentication of users or machines to HCP using\neither provided arguments or retrieved HCP token through browser login.\n```\n\n----------------------------------------\n\nTITLE: Adding Plugin Version to Endpoint Responses - Markdown\nDESCRIPTION: This snippet outlines the changes to the endpoints `/sys/auth/:path/tune` and `/sys/mounts/:path/tune`, which now return an additional `plugin_version` field in the response data if set. This update enhances the visibility of the plugin version being used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17167.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:change\\nplugins: `GET /sys/auth/:path/tune` and `GET /sys/mounts/:path/tune` endpoints may now return an additional `plugin_version` field in the response data if set.\"\n```\n\n----------------------------------------\n\nTITLE: Release Note for Upgrading Dependencies\nDESCRIPTION: This snippet serves as a release note documenting improvements made by upgrading the dependencies in the MongoDB Atlas secrets management module. It indicates a focus on maintaining up-to-date dependencies to ensure optimal performance and security.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19861.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nsecrets/mongodbatlas: upgrades dependencies\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - RSA Key Generation Enhancement\nDESCRIPTION: Release note documenting the improvement of RSA key generation performance through the implementation of a randomly seeded cryptographic deterministic random bit generator, particularly effective when dealing with slow random sources.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29020.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note: improvement\nsdkhelper: utitilize a randomly seeded cryptographic determinstic random bit generator for\nRSA key generation when using slow random sources, speeding key generation\nconsiderably.\n```\n\n----------------------------------------\n\nTITLE: Release Note - Seal Backend Status Fix\nDESCRIPTION: Documents a bug fix in Vault's core/seal component that addresses an issue where the sys/seal-backend-status endpoint could return stale information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28631.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore/seal: Fix an issue that could cause reading from sys/seal-backend-status to return stale information.\n```\n\n----------------------------------------\n\nTITLE: Release Note for AWS KMS Key Management Feature\nDESCRIPTION: A release note indicating that Vault Enterprise's Key Management Secrets Engine now supports distributing and managing keys in AWS KMS at general availability status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11958.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Key Management Secrets Engine (Enterprise)**: Adds general availability for distributing and managing keys in AWS KMS.\n```\n```\n\n----------------------------------------\n\nTITLE: Allowing Parallel Requests to Snowflake\nDESCRIPTION: This release note documents an improvement in the database/snowflake module allowing multiple requests to be processed concurrently, which enhances the interaction with Snowflake databases and optimizes request handling. It is intended for developers looking to leverage Vault's capabilities with Snowflake in a more efficient manner.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17593.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ndatabase/snowflake: Allow parallel requests to Snowflake\"\n```\n\n----------------------------------------\n\nTITLE: Database Secrets Metrics Includes\nDESCRIPTION: Includes telemetry metrics for database secrets engine operations such as initialization, user creation, renewal, and revocation\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/secrets.mdx#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/secretsdb-intro.mdx'\n@include 'telemetry-metrics/database/close.mdx'\n@include 'telemetry-metrics/database/createuser.mdx'\n@include 'telemetry-metrics/database/initialize.mdx'\n```\n\n----------------------------------------\n\nTITLE: Configuring Rootless Docker Configuration\nDESCRIPTION: JSON configuration for rootless Docker setup with runsc runtime including additional ignore-cgroups parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/containerized-plugins/add-a-containerized-plugin.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n{\n  \"runtimes\": {\n    \"runsc\": {\n      \"path\": \"PATH_TO_RUNSC_INSTALLATION\",\n      \"runtimeArgs\": [\n        \"--host-uds=all\"\n        \"--ignore-cgroups\"\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing PingID MFA methods using Vault HTTP API\nDESCRIPTION: This snippet demonstrates how to list all available PingID MFA methods in the current namespace using the LIST request. A valid Vault token is required for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/pingid\n```\n\n----------------------------------------\n\nTITLE: Start Vault Agent Service using Start-Service\nDESCRIPTION: Starts the Vault Agent Windows service using PowerShell's Start-Service cmdlet. A simpler alternative to sc.exe.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/winsvc.mdx#2025-04-14_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\nStart-Service -Name \"VaultAgent\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Proxy for Enterprise Plugins in Vault\nDESCRIPTION: Command to register an enterprise plugin with HTTP proxy settings. Similar to community plugins, but requires specifying the version instead of SHA256 hash.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-management.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin register -version=<version of the plugin> \\\n    -env HTTP_PROXY=example.com \\\n    secret \\\n    vault-plugin-secrets-keymgmt\n\nSuccess! Registered plugin: vault-plugin-secrets-keymgmt\n```\n\n----------------------------------------\n\nTITLE: Documenting Protobuf Dependency Upgrade in Vault Core\nDESCRIPTION: This release note indicates an improvement in Vault's core component by upgrading the github.com/gogo/protobuf dependency. The upgrade likely brings performance improvements or bug fixes from the latest version of the protobuf library.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12255.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: Upgrade github.com/gogo/protobuf\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note: KV v2 Trailing Slash Bug Fix\nDESCRIPTION: This release note describes a bug fix in the Vault KV v2 plugin related to handling trailing slashes in request paths. Previously, incorrect paths with trailing slashes returned a 404 error. The fix ensures that these incorrect paths now return a 500 error, as expected.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17339.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nplugins/kv: KV v2 returns 404 instead of 500 for request paths that incorrectly include a trailing slash.\n`\n```\n\n----------------------------------------\n\nTITLE: Combining CRLs - POST Request\nDESCRIPTION: Example of sending a POST request to combine CRLs using curl with a payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_113\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    -request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/issuer/default/resign-crls\n```\n\n----------------------------------------\n\nTITLE: Vault Enterprise Login Error Handling Change\nDESCRIPTION: Changes how failed gRPC requests from performance standby nodes to active nodes are handled during login attempts. Now returns a 500 error code instead of potentially masking the underlying communication issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28807.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:change\nlogin (enterprise): Return a 500 error during logins when performance standby nodes make failed gRPC requests to the active node.\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Azure Auth Plugin Version\nDESCRIPTION: This release note indicates that the Azure authentication plugin for HashiCorp Vault has been updated to version 0.19.0. This change likely includes new features, bug fixes, or improvements to the Azure authentication mechanism in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28294.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/azure: Update plugin to v0.19.0\n```\n```\n\n----------------------------------------\n\nTITLE: Verification Cancellation Response\nDESCRIPTION: JSON response after canceling verification showing reset progress\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"nonce\": \"5827bbc1-0110-5725-cc21-beddc129d942\",\n  \"t\": 3,\n  \"n\": 5,\n  \"progress\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Vault License Caching Bug Fix Release Note\nDESCRIPTION: Release note entry describing a fix for a bug where the license manager's caching mechanism prevented new licenses from being properly detected and implemented.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10424.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nlicense: Fix license caching issue that prevents new licenses to get picked up by the license manager\n```\n\n----------------------------------------\n\nTITLE: Setting Annotations as Multi-line String in YAML\nDESCRIPTION: This YAML configuration shows how to set annotations for Vault ingress as a multi-line string, specifically for Azure load balancer settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/terraform.mdx#2025-04-14_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  ingress:\n    annotations: |\n      service.beta.kubernetes.io/azure-load-balancer-internal: true\n      service.beta.kubernetes.io/azure-load-balancer-internal-subnet: apps-subnet\n```\n\n----------------------------------------\n\nTITLE: Adding Duration and Start Time Logging - Plaintext\nDESCRIPTION: Enhancement that logs the duration and start time for completed requests to improve tracking and debugging.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13682.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\ncore: Add duration and start_time to completed requests log entries\"\n```\n\n----------------------------------------\n\nTITLE: Updating Token Role Read Response in Vault Core (Markdown)\nDESCRIPTION: This improvement modifies the token role read operation to include the 'token_no_default_policy' configuration if it is set. This enhances the visibility of token role settings for administrators.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12565.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore/token: Return the token_no_default_policy config on token role read if set\n```\n```\n\n----------------------------------------\n\nTITLE: Database Release Note - PostgreSQL Privilege Revocation Fix\nDESCRIPTION: Release note documenting a bug fix for the PostgreSQL database secrets engine in HashiCorp Vault. The fix addresses an issue where privilege revocation operations could fail when database schema names contained special characters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28519.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:bug\ndatabase/postgresql: Fix potential error revoking privileges in postgresql database secrets engine when a schema contains special characters\n```\n\n----------------------------------------\n\nTITLE: Vault Certificate Auth Release Note\nDESCRIPTION: Release note entry documenting the addition of 'enable_metadata_on_failures' configuration option that allows client certificate metadata to be included in audit logs and responses when authentication fails.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29044.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nauth/cert: Add new configuration option `enable_metadata_on_failures` to add client cert metadata on login failures to audit log and response\n```\n\n----------------------------------------\n\nTITLE: Feature Release Note: AWS KMS Key Management\nDESCRIPTION: This release note denotes the beta support for distributing and managing keys in AWS KMS. This indicates that the feature is available for testing and evaluation but may not be fully stable or feature-complete.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1739.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsecrets/keymgmt (enterprise): Adds beta support for distributing and managing keys in AWS KMS.\n```\n\n----------------------------------------\n\nTITLE: Installing HVAC Python Library\nDESCRIPTION: Command to install the HVAC Python client library using pip.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ pip install hvac\n```\n\n----------------------------------------\n\nTITLE: Support Listing Provisioned CRLs\nDESCRIPTION: This snippet details an improvement in the auth/cert package that allows users to list the Certificate Revocation Lists (CRLs) that have been provisioned within a specified mount. This feature enhances the management and visibility of CRLs, which are essential for maintaining the security and integrity of certificate-based authentication systems.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18043.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\nauth/cert: Support listing provisioned CRLs within the mount.\"\n```\n\n----------------------------------------\n\nTITLE: Vault UI Capability Self-Check Update\nDESCRIPTION: Release note highlighting an improvement in how Vault UI checks user capabilities within namespaces\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24168.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:improvement\nui: capabilities-self is always called in the user's root namespace\n```\n\n----------------------------------------\n\nTITLE: Setting Vault SRV Lookup Environment Variable\nDESCRIPTION: Sets the VAULT_SRV_LOOKUP environment variable to enable SRV record lookups for Vault hostname resolution. This is recommended only for testing as it's not designed for high-availability deployments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/srv_lookup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_SRV_LOOKUP=1\n```\n\n----------------------------------------\n\nTITLE: Adding Enterprise Parameter to Sys Health Endpoint\nDESCRIPTION: This snippet describes the addition of the `enterprise` parameter to the `/sys/health` endpoint in the Vault API. This change allows users to specify enterprise-related options when checking the health status of the Vault instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24270.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\napi: add the `enterprise` parameter to the `/sys/health` endpoint\"\n```\n\n----------------------------------------\n\nTITLE: Improvement in Secrets/Transit for RSA PSS Signature Salt Length Configuration\nDESCRIPTION: This release note informs users about the enhancement that permits the configuration of possible salt lengths for RSA PSS signatures within the HashiCorp Vault. This change aims to provide better control over signature security.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16549.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nsecrets/transit: Allow configuring the possible salt lengths for RSA PSS signatures.\"\n```\n\n----------------------------------------\n\nTITLE: Submitting Key Share Request\nDESCRIPTION: HTTP POST request to submit a recovery key share\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/rekey-recovery-key/update\n```\n\n----------------------------------------\n\nTITLE: Adding Retry Configuration in Vault Agent (HCL)\nDESCRIPTION: This snippet introduces a new 'vault.retry' stanza in the Vault agent configuration. It allows users to specify the number of retries to be attempted on failure, applicable to both templating operations and proxied requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11113.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nvault {\n  retry {\n    # Specify number of retries here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Serializer in Ember for Vault UI\nDESCRIPTION: Example of creating a custom serializer class that prevents specific model attributes from being sent to the API. This approach is useful when model attributes don't correspond to API parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/serializers-adapters.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class SomeSerializer extends ApplicationSerializer {\n  attrs = {\n    attrName: { serialize: false },\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Installing vaulTS Typescript Package\nDESCRIPTION: Command to install the vaulTS Typescript client library from Github NPM Registry using npm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ npm install @mittwald/vaults\n```\n\n----------------------------------------\n\nTITLE: Vault AD Plugin Update\nDESCRIPTION: This release note indicates that the Active Directory secrets engine plugin for HashiCorp Vault has been updated to version v0.17.0. This update likely includes bug fixes, new features, or security enhancements for the plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25187.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nsecrets/ad: Update plugin to v0.17.0\n```\n```\n\n----------------------------------------\n\nTITLE: Installing curl in Vault Docker Container at Runtime\nDESCRIPTION: The snippets provide commands to install `curl` dynamically at runtime inside Docker and Kubernetes containers. For root access, `apk add curl` is used, while for non-root users, a static binary is downloaded and permissions are adjusted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.18.x.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\ndocker exec <CONTAINER-ID> apk add curl\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nkubectl exec -ti <NAME> -- apk add curl\n```\n\nLANGUAGE: shell-session\nCODE:\n```\ndocker exec <CONTAINER-ID> wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nkubectl exec -ti <NAME> -- wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\n```\n\n----------------------------------------\n\nTITLE: Adding HA Cluster Removal Status to Health Check\nDESCRIPTION: Adds functionality to sys/health endpoint to report if a node has been removed from the HA cluster. Returns HTTP code 530 by default when node is removed, or a custom code specified via removedcode parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28991.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrelease-note:change\napi: Add to sys/health whether the node has been removed from the HA cluster. If the node has been removed, return code 530 by default or the value of the `removedcode` query parameter.\n```\n\n----------------------------------------\n\nTITLE: JSDoc Component Documentation Template\nDESCRIPTION: Template for writing JSDoc comments that will be converted to component documentation. Shows proper syntax for describing components, providing examples, and documenting parameters with their types and descriptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/how-to-docfy.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * @module ComponentName\n * @description\n * Description of the component\n *\n * @example\n * <ComponentName @param={{}} optionalParam={{}} />\n *\n * @param {object} paramName - description\n * @param {array} requiredParam=foo - foo is the default value here\n * @param {function} [optionalParamName] - An optional parameter is wrapped in brackets\n * @param {string} [param=\"some default value\"] - An optional parameter with a default value\n */\n```\n\n----------------------------------------\n\nTITLE: Sample response for reading well-known label - JSON\nDESCRIPTION: This snippet provides a sample JSON response structure for fetching information about a specific well-known label. It returns detailed information, including mount path and UUID for the label requested.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/well-known.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"label\": \"est/cacerts\",\\n  \"mount_path\": \"ns1/pki_int/\",\\n  \"mount_uuid\": \"fc9d3ee4-ae92-4e3e-c0e1-a1fdb3e3b8cf\",\\n  \"prefix\": \"est/cacerts\"\\n}\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Release Note for Vault Identity\nDESCRIPTION: This release note describes a bug fix for the Vault identity system.  The bug involves removing caseSensitivityKey to prevent errors when loading groups, which could cause missing groups in memDB when duplicates are found. This ensures that group loading is not affected by case sensitivity issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20965.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nidentity: Remove caseSensitivityKey to prevent errors while loading groups which could result in missing groups in memDB when duplicates are found.\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note for PKI Secrets Engine Constraint Enforcement\nDESCRIPTION: Documents a change in Vault's PKI secrets engine that enforces issuer constraint extensions including extended key usage, name constraints, and issuer name when issuing or signing leaf certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29045.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/pki: Enforce the issuer constraint extensions (extended key usage, name constraints, issuer name) when issuing or signing leaf certificates. For more information see [PKI considerations](https://developer.hashicorp.com/vault/docs/secrets/pki/considerations#issuer-constraints-enforcement)\n```\n\n----------------------------------------\n\nTITLE: Adding algorithm-signer Field to SSH Secrets Engine UI\nDESCRIPTION: A release note documenting the improvement to Vault's UI by adding algorithm-signer as a field in the SSH Secrets Engine interface. This enhancement improves the configuration options available in the UI for SSH secret management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10299.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: Add algorithm-signer as a SSH Secrets Engine UI field\n```\n```\n\n----------------------------------------\n\nTITLE: Using Component Helper in Handlebars Templates for Dynamic Modal Forms\nDESCRIPTION: Example of the component helper usage as referenced in the documentation. This helper dynamically renders the appropriate template within the SearchSelectWithModal component when a user tries to create a new item.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/app/components/modal-form/FYI.md#2025-04-14_snippet_0\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{component}}\n```\n\n----------------------------------------\n\nTITLE: Exposing Vault Agent Metrics Endpoint\nDESCRIPTION: Adds a new `/agent/v1/metrics` path to return telemetry information for the Vault agent, enabling improved monitoring and observability of agent performance\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13675.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// New endpoint for Vault agent metrics\n// Accessible via /agent/v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Creating or Updating LDAP User using cURL\nDESCRIPTION: This snippet shows how to create or update an LDAP user's policies and groups by sending a POST request with a JSON payload containing the user's desired policies and groups to the appropriate Vault endpoint. Authentication is handled via X-Vault-Token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/ldap/users/mitchellh\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Auto Unseal Bug\nDESCRIPTION: This release note addresses a bug in Vault's core functionality.  The bug caused sporadic auto unseal failures due to the caching of the seal configuration. Removing the cache fixes the issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21223.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\ncore: Do not cache seal configuration to fix a bug that resulted in sporadic auto unseal failures.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding HMAC Key Type to Transit Secrets Engine\nDESCRIPTION: Introduces a new dedicated HMAC key type that enables key import capabilities within the transit secrets engine for enhanced cryptographic flexibility\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16668.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsecrets/transit: Add a dedicated HMAC key type, which can be used with key import.\n```\n\n----------------------------------------\n\nTITLE: Configuring Namespace in Vault Agent\nDESCRIPTION: Introduced a top-level namespace configuration parameter for Vault Agent to specify the target namespace for agent-made requests\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24667.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nnamespace = \"example-namespace\"\n```\n\n----------------------------------------\n\nTITLE: Updating Database Configuration Endpoint Response\nDESCRIPTION: The GET endpoint for database configuration now includes an additional `plugin_version` field in the response data, providing more detailed information about the plugin configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16982.txt#2025-04-14_snippet_0\n\nLANGUAGE: rest\nCODE:\n```\nGET /database/config/:name\n```\n\n----------------------------------------\n\nTITLE: Updating KV Secrets Engine Plugin Version in Vault\nDESCRIPTION: This release note indicates that the KV (Key-Value) secrets engine plugin for HashiCorp Vault has been updated to version 0.16.1. This update likely includes bug fixes, performance improvements, or new features for the KV secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22716.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/kv: Update plugin to v0.16.1\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Okta Number Verification\nDESCRIPTION: JSON response showing the correct answer for an Okta number verification challenge.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"de6a8029-79e5-1dd1-dbe9-6405166b3f94\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"correct_answer\": 94\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: PKI Backend ed25519 Key Support\nDESCRIPTION: This release note indicates the addition of ed25519 key support to the Vault PKI backend.  This feature allows users to generate and use ed25519 keys within the PKI backend for certificate issuance and management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11780.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\npki: Support ed25519 as a key for the pki backend\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Upper-case Warning for Policy Names in Vault CLI\nDESCRIPTION: This release note describes an improvement in the Vault CLI that adds a warning when a policy name contains an upper-case letter. This enhancement helps users adhere to naming conventions and avoid potential issues related to case sensitivity in policy names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14670.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncli/vault: warn when policy name contains upper-case letter\n```\n```\n\n----------------------------------------\n\nTITLE: Including Enterprise Licenses - Markdown\nDESCRIPTION: This snippet includes documentation concerning enterprise licenses relevant to Vault. It is likely to provide necessary licensing information for users upgrading to Vault 1.4.5.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.4.5.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{@include 'enterprise-licenses.mdx'}\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Authentication Plugin in Vault\nDESCRIPTION: Release note indicating an update to the Azure authentication plugin to version 0.16.2, which may include bug fixes, security improvements, or compatibility updates\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23060.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/azure: Update plugin to v0.16.2\n```\n\n----------------------------------------\n\nTITLE: Disabling Strict Network Restrictions for Vault Sync\nDESCRIPTION: Configuration option to disable strict networking controls for Vault sync clients, which bypasses IP address and port number restrictions. This setting can reduce security if enabled without careful consideration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/sync-ssrf-fields.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ndisable_strict_networking = false\n```\n\n----------------------------------------\n\nTITLE: Example API Response containing SecretID\nDESCRIPTION: This JSON shows the response from Vault when a new SecretID is created for an AppRole.  The `data` section contains information about the SecretID, including the `secret_id`, `secret_id_accessor`, `secret_id_ttl`, and `secret_id_num_uses`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/approle/index.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n     \"data\": {\n       \"secret_id_accessor\": \"45946873-1d96-a9d4-678c-9229f74386a5\",\n       \"secret_id\": \"37b74931-c4cd-d49a-9246-ccc62d682a25\",\n       \"secret_id_ttl\": 600,\n       \"secret_id_num_uses\": 40\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Check-Out Response\nDESCRIPTION: JSON response containing the checked-out service account credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"364a17d4-e5ab-998b-ceee-b49929229e0c\",\n  \"lease_id\": \"ad/library/accounting-team/check-out/aoBsaBEI4PK96VnukubvYDlZ\",\n  \"renewable\": true,\n  \"lease_duration\": 36000,\n  \"data\": {\n    \"password\": \"?@09QW0KZ8DSBu3deIu7XLY1NZqzwhozmMAZ6v0IcZJGOjs5GvpVMvOeW7/duls2\",\n    \"service_account_name\": \"fizz@example.com\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Secrets Engine Lease Settings Response\nDESCRIPTION: Sample JSON response showing the current lease settings for AWS credentials, including the default lease duration and maximum lease duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"lease\": \"30m0s\",\n    \"lease_max\": \"12h0m0s\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Account Check-Out Request\nDESCRIPTION: Shell command to check out a service account from a library set.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ldap/library/accounting-team/check-out\n```\n\n----------------------------------------\n\nTITLE: Deleting an Audit Request Header in Vault\nDESCRIPTION: Shell request to disable auditing for a specific request header. Requires a token with sudo capability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-auditing.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/config/auditing/request-headers/my-header\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault System Counters Endpoint\nDESCRIPTION: The `/sys/internal/counters/config` endpoint now includes two additional read-only fields: `reporting_enabled` and `billing_start_timestamp` to provide more detailed system configuration information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20086.txt#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"reporting_enabled\": false,\n  \"billing_start_timestamp\": \"2023-01-01T00:00:00Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Namespace Display in Vault\nDESCRIPTION: Release note entry that documents a bug fix for the Vault UI addressing the issue of long namespace names overflowing in the sidebar navigation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_22733.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: fixes long namespace names overflow in the sidebar\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Azure Workload Identity Federation Support\nDESCRIPTION: Extends Vault's auto-authentication capabilities to support Azure Workload Identity Federation, enabling more robust authentication for Vault Agent and Vault Proxy\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22264.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nauto-auth/azure: Added Azure Workload Identity Federation support to auto-auth (for Vault Agent and Vault Proxy).\n```\n\n----------------------------------------\n\nTITLE: Vault Seal Reload Bug Fix\nDESCRIPTION: This release note documents a bug fix related to seal reloading in HashiCorp Vault. During a seal reload triggered by SIGHUP, the fix ensures that the updated seal barrier is only written on an active node, preventing potential inconsistencies or errors in a cluster environment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26381.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\ncore/seal: During a seal reload through SIGHUP, only write updated seal barrier on an active node\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Core Bug Fix Release Note\nDESCRIPTION: This release note documents a bug fix in the Vault core. It addresses an issue where durations including days were not being parsed correctly. This ensures correct interpretation of time intervals in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21357.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\ncore: Fixed issue with some durations not being properly parsed to include days.\n`\n```\n\n----------------------------------------\n\nTITLE: Updating PostgreSQL Library for TLS Connection Handling in Vault\nDESCRIPTION: This release note details bug fixes for both storage/postgres and database/postgres modules in Vault. The update to the github.com/lib/pq library ensures proper removal of terminated TLS connections from the connection pool.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12413.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nstorage/postgres: Update postgres library (github.com/lib/pq) to properly remove terminated TLS connections from the connection pool.\ndatabase/postgres: Update postgres library (github.com/lib/pq) to properly remove terminated TLS connections from the connection pool.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Okta SDK Dependency\nDESCRIPTION: This release note indicates an update to the `okta-sdk-golang` dependency for Vault's Okta authentication method. The dependency is updated to version v2.9.1 to improve request backoff handling, increasing the robustness of authentication requests to Okta. The link provided points to the GitHub repository of the Okta SDK for Go.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13439.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\nauth/okta: Update [okta-sdk-golang](https://github.com/okta/okta-sdk-golang) dependency to version v2.9.1 for improved request backoff handling\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Concurrent Map Error in Vault Lease Metrics Collection\nDESCRIPTION: Bug fix release note addressing a fatal error caused by concurrent map iteration and write operations when collecting metrics from leases in Vault's expiration system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24027.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nexpiration: Fix fatal error \"concurrent map iteration and map write\" when collecting metrics from leases.\n```\n\n----------------------------------------\n\nTITLE: Release Note for Custom Metadata Feature in Vault Core\nDESCRIPTION: A release note in markdown format documenting the addition of custom_metadata field capability for aliases in HashiCorp Vault's core functionality. This enhancement allows for additional metadata to be associated with aliases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12502.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\ncore: adds custom_metadata field for aliases\n```\n\n----------------------------------------\n\nTITLE: Fixing Plugin Termination Issue in HashiCorp Vault\nDESCRIPTION: This release note documents a bug fix that addresses an issue where Vault could fail to kill broken or unresponsive plugins. This improves Vault's ability to clean up non-functioning plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22914.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:bug\nplugins: Fix instance where Vault could fail to kill broken/unresponsive plugins.\n```\n\n----------------------------------------\n\nTITLE: Vault Agent Configuration Improvement: Disable Idle Connections\nDESCRIPTION: This release note describes the addition of the `disable_idle_connections` configuration option to the Vault agent. This setting is designed to prevent the agent from leaving idle connections open in auto-auth, caching, and templating scenarios. Disabling idle connections can help to optimize resource usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15986.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nagent: Added `disable_idle_connections` configuration to disable leaving idle connections open in auto-auth, caching and templating.\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Authentication with Auto Region Detection\nDESCRIPTION: Enables automatic region detection in Vault CLI for AWS authentication by specifying 'auto' as the region parameter\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14051.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nvault auth aws region=auto\n```\n\n----------------------------------------\n\nTITLE: Adding Build Date to Vault System View Plugin Environment\nDESCRIPTION: Enhancement to include Vault build date in the system view plugin environment response, providing additional metadata about the Vault installation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29082.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nsdk: Add Vault build date to system view plugin environment response\n```\n\n----------------------------------------\n\nTITLE: Using HTTP Header for Unconditional Forwarding to Active Node\nDESCRIPTION: A simple HTTP header that can be added to requests to force forwarding to the active node, preventing stale reads from performance standbys. This approach might reduce the benefits of having performance standbys if used extensively.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/consistency.mdx#2025-04-14_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nX-Vault-Forward: active-node\n```\n\n----------------------------------------\n\nTITLE: Adding UI Improvement Release Note for AWS/SSH Secret Engines\nDESCRIPTION: Release note documenting UI enhancement that hides mount configuration details behind a toggle for AWS and SSH secret engines. This improves the interface organization by allowing users to show/hide configuration details as needed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27831.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: For AWS and SSH secret engines hide mount configuration details in toggle and display configuration details or cta.\n```\n\n----------------------------------------\n\nTITLE: Using MDX Tabs Component for Multi-language Code Examples\nDESCRIPTION: Example of using the Tabs component to display tabbed content, particularly useful for showing code examples in different languages or formats.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_4\n\nLANGUAGE: mdx\nCODE:\n```\nNormal **markdown** content.\n\n<Tabs>\n<Tab heading=\"CLI command\">\n            <!-- Intentionally skipped line.. -->\n```shell-session\n$ command ...\n```\n            <!-- Intentionally skipped line.. -->\n</Tab>\n<Tab heading=\"API call using cURL\">\n\n```shell-session\n$ curl ...\n```\n\n</Tab>\n</Tabs>\n\nContinued normal markdown content\n```\n\n----------------------------------------\n\nTITLE: Creating Engine's Core Class in Vault\nDESCRIPTION: Engine.js file that extends Ember's Engine class to define the engine's resolver, modulePrefix, and dependencies including required services and external routes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/ember-engines.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: BUSL-1.1\n */\n\nimport Engine from '@ember/engine';\n\nimport loadInitializers from 'ember-load-initializers';\nimport Resolver from 'ember-resolver';\n\nimport config from './config/environment';\n\nconst { modulePrefix } = config;\n\nexport default class <EngineName>Engine extends Engine {\n  modulePrefix = modulePrefix;\n  Resolver = Resolver;\n  dependencies = {\n    services: ['app-router', 'store', 'secret-mount-path', 'flash-messages'],\n    externalRoutes: ['secrets'],\n  };\n}\n\nloadInitializers(<EngineName>Engine, modulePrefix);\n```\n\n----------------------------------------\n\nTITLE: Changing Driver Library for CockroachDB\nDESCRIPTION: This release note documents the change of the underlying driver library for CockroachDB from lib/pq to pgx. It enhances database performance and compatibility.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15343.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nphysical/cockroachdb: Change underlying driver library from [lib/pq](https://github.com/lib/pq) to [pgx](https://github.com/jackc/pgx)\"\n```\n\n----------------------------------------\n\nTITLE: Read Role Tag Deny List Tidy Settings Request\nDESCRIPTION: cURL command to retrieve role tag deny list tidy configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_26\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/aws/config/tidy/roletag-denylist\n```\n\n----------------------------------------\n\nTITLE: Documenting Userpass Password Update Feature in Vault UI\nDESCRIPTION: Release note entry indicating a new feature that allows users authenticated through the userpass mount to update their own passwords through the UI interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23797.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Allow users in userpass auth mount to update their own password\n```\n\n----------------------------------------\n\nTITLE: Restore Snapshot Sample Request\nDESCRIPTION: Shell command to restore a Raft cluster from a snapshot\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data-binary @raft.snap \\\n    http://127.0.0.1:8200/v1/sys/storage/raft/snapshot\n```\n\n----------------------------------------\n\nTITLE: Writing Additional Secrets in Key/Value Plugin - Shell\nDESCRIPTION: This snippet illustrates storing additional secrets under a different path in the key/value plugin. This allows for categorizing secrets according to usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put \\ \n  -mount shared \\ \n  kv/api-keys \\ \n  square=1234\n```\n\n----------------------------------------\n\nTITLE: Web CLI KV Command Enhancement\nDESCRIPTION: Added new `kv-get` command to improve secret retrieval in the Vault Web CLI, specifically for KV version 2 secrets and metadata\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20590.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nkv-get\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Button Feature Release Note\nDESCRIPTION: Release note documenting the addition of copy buttons for identity entity IDs, alias IDs, and MFA method IDs in the Vault user interface. This improvement enhances usability by making it easier to copy these identifiers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28742.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Adds copy button to identity entity, alias and mfa method IDs\n```\n\n----------------------------------------\n\nTITLE: Resolving Command Shell Quoting Issue in Vault Agent Template Component\nDESCRIPTION: Bug fix that resolves an issue with command shell quoting in the template component of the Vault agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11838.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nagent/template: fix command shell quoting issue\n```\n\n----------------------------------------\n\nTITLE: Updating Dependency Version in Release Notes\nDESCRIPTION: This snippet documents the upgrade of the go-plugin library from version 1.4.5 to 1.4.8 in the project. The change is minimal and reflects a best practice of keeping dependencies up-to-date to leverage enhancements made by the library maintainers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19100.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nBump github.com/hashicorp/go-plugin version from 1.4.5 to 1.4.8\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Transit Secret Export Fix\nDESCRIPTION: Fix for export of HMAC-only keys in Transit secrets engine, ensuring correct key export for sign operations and proper HMAC key sizing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v1.10-v1.15.md#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nsecrets/transit: Fix export of HMAC-only key, correctly exporting the key used for sign operations. For consumers of the previously incorrect key, use the plaintext export to retrieve these incorrect keys and import them as new versions.\nsecrets/transit: Fix bug related to shorter dedicated HMAC key sizing.\nsdk/helper/keysutil: New HMAC type policies will have HMACKey equal to Key and be copied over on import.\n```\n\n----------------------------------------\n\nTITLE: Updating AliCloud Auth Plugin to Version 0.20.0\nDESCRIPTION: This release note indicates an update to the AliCloud authentication plugin for HashiCorp Vault. The new version 0.20.0 may include various improvements and fixes over the previous versions. Users of the Vault should review the changelog for any breaking changes or enhancements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29613.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nauth/alicloud: Update plugin to v0.20.0\\n\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Seal HA Bug Fix in Vault Release Notes\nDESCRIPTION: A release note entry documenting a bug fix in Vault Enterprise where nodes had difficulties joining Raft clusters when the Seal High Availability feature was enabled. This fix addresses cluster formation issues in the core/seal component.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29117.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore/seal (enterprise): Fix problem with nodes unable to join Raft clusters with Seal High Availability enabled.\n```\n\n----------------------------------------\n\nTITLE: Setting Configuration Directory Environment Variable in Linux\nDESCRIPTION: Sets the VAULT_CONFIG environment variable to point to the Vault configuration directory, defaulting to /etc/vault.d if not specified.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ VAULT_CONFIG=/etc/vault.d\n```\n\n----------------------------------------\n\nTITLE: Setting HMAC Accessor Option for Vault Audit Device Configuration\nDESCRIPTION: This snippet demonstrates how to disable the HMAC accessor option when configuring a Vault audit device. By default, this option is set to true, which means token accessor data is hashed before being written to the audit log. Setting it to false will store the accessor data in plain text.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/hmac_accessor.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhmac_accessor=false\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Cloning TLS Configuration - Release Note\nDESCRIPTION: This release note describes the enhancement that adds support for cloning a Client's tls.Config. This improvement is intended to provide users with the ability to easily duplicate TLS settings associated with a Client, streamlining configuration management in secure API interactions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21424.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\napi: add support for cloning a Client's tls.Config.\"\n```\n\n----------------------------------------\n\nTITLE: Template List Response in Vault Transform API\nDESCRIPTION: JSON response structure returned when listing templates, showing an array of template names under the data.keys field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"example-template\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Help for Vault Agent (Shell)\nDESCRIPTION: This command displays the help documentation for the Vault Agent. The `-h` flag triggers the display of available command-line options and their descriptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ vault agent -h\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving the transit wrapping key from Vault\nDESCRIPTION: This command retrieves the 4096-bit RSA wrapping key from Vault's transit secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read transit/wrapping_key\n```\n\n----------------------------------------\n\nTITLE: AliCloud Login - HTTP Request\nDESCRIPTION: HTTP POST request to authenticate with Vault using the AliCloud auth method. Includes the login payload with role name and identity verification data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/alicloud/login\n```\n\n----------------------------------------\n\nTITLE: Adding Missing MFA Information in Table Format\nDESCRIPTION: This snippet fixes a bug that resulted in two-phase MFA information being absent from the display. The change ensures that all relevant information is included in the table format during the login process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15428.txt#2025-04-14_snippet_2\n\nLANGUAGE: release-note\nCODE:\n```\n\"auth: Fixed two-phase MFA information missing from table format when using vault login\"\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Payload for Assertion Consumer Service Callback - JSON\nDESCRIPTION: This JSON snippet illustrates the payload required for the assertion consumer service callback, which includes the RelayState and SAMLResponse parameters necessary for completing the SAML authentication flow.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"RelayState\": \"0afe62a9-7b83-a182-0650-c749badfb900\",\n  \"SAMLResponse\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to Identity-Alias in Vault Certificate Auth\nDESCRIPTION: Release note indicating an enhancement to Vault's certificate authentication that adds metadata capabilities to identity aliases, improving identity management and tracking.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14751.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nauth/cert: Add metadata to identity-alias\n```\n\n----------------------------------------\n\nTITLE: OIDC Route Structure Example in Vault UI\nDESCRIPTION: Shows a real-world implementation of the recommended file structure for OIDC routes in the Vault UI. This example demonstrates how nested routes can access parent models using the modelFor method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/routing.md#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n├── routes/vault/cluster/access\n│   ├── oidc/\n│   │   ├── index.js\n│   │   ├── clients/\n│   │   │   ├── client.js\n│   │   │   ├── create.js\n│   │   │   ├── index.js\n│   │   │   ├── client/\n│   │   │   │   ├── details.js\n│   │   │   │   ├── edit.js\n│   │   │   │   ├── providers.js <- utilizes the modelFor method to get id about parent's clientId\n```\n\n----------------------------------------\n\nTITLE: Creating a Google Cloud KMS Key in Vault\nDESCRIPTION: Command to create a Google Cloud KMS key through Vault, specifying the key ring in the required format and setting a rotation period of 72 hours.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/keys/my-key \\\n  key_ring=projects/my-project/locations/my-location/keyRings/my-keyring \\\n  rotation_period=72h\n```\n\n----------------------------------------\n\nTITLE: Fixing Background Thread Execution in DR Secondaries\nDESCRIPTION: Resolves an issue where a background thread for updating locked user entries was incorrectly running on disaster recovery secondary nodes, which could potentially cause unexpected system behavior\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22355.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: Fix bug where background thread to update locked user entries runs on DR secondaries.\n```\n\n----------------------------------------\n\nTITLE: DELETE Request to Remove a Specific Roleset from Vault\nDESCRIPTION: Illustrates how to delete an existing roleset by name using a DELETE request. The operation requires the roleset's unique name and a Vault token. Once executed, the roleset and its associated configurations are permanently removed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/gcp/roleset/my-token-roleset\n```\n\n----------------------------------------\n\nTITLE: Updating Kerberos Plugin Version\nDESCRIPTION: This snippet documents a release note indicating an update to the Kerberos authentication plugin version to v0.10.1. It serves to inform users about changes in the software version and improvements or fixes that may come with it.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22797.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nauth/kerberos: Update plugin to v0.10.1\\n\"\n```\n\n----------------------------------------\n\nTITLE: Reading Rekey Progress - Shell Request\nDESCRIPTION: Sends a GET request to check the status of an ongoing rekey operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/rekey/init\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Dependencies in Vault Project\nDESCRIPTION: This release note outlines the updates made to GCP-related dependencies, specifically targeting the 'google.golang.org/api' and 'github.com/hashicorp/go-gcp-common' libraries. These updates are crucial for keeping the GCP integration in Vault functional and aligned with the latest API specifications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17174.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nsecrets/gcp: Updates dependencies: `google.golang.org/api@v0.83.0`, `github.com/hashicorp/go-gcp-common@v0.8.0`.\"\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - Lease Management Null ID Fix\nDESCRIPTION: Bug fix to prevent panics in lease management endpoints when null lease_id values are provided. Affects the sys/leases/lookup, sys/leases/revoke, and sys/leases/renew endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18951.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: Prevent panics in `sys/leases/lookup`, `sys/leases/revoke`, and `sys/leases/renew` endpoints if provided `lease_id` is null\n```\n\n----------------------------------------\n\nTITLE: Adding Description Display to Vault Secret Engine List\nDESCRIPTION: Release note indicating an improvement to the Vault UI where descriptions are now shown in the secret engine list view, enhancing visibility and usability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11995.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Show description on secret engine list\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Documentation\nDESCRIPTION: Example showing typical documentation directory structure with nested folders and files.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n.\n├── docs\n│   └── directory\n│       ├── index.mdx\n│       ├── file.mdx\n│       ├── another-file.mdx\n│       └── nested-directory\n│           ├── index.mdx\n│           └── nested-file.mdx\n```\n\n----------------------------------------\n\nTITLE: Configuring External Vault Address in YAML for Kubernetes\nDESCRIPTION: This YAML configuration sets the external Vault address for the injector. It specifies the URL of the external Vault server that the Kubernetes cluster should connect to.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/external.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ninjector:\n  externalVaultAddr: 'http://external-vault:8200'\n```\n\n----------------------------------------\n\nTITLE: Modifying Data Path Event Representation\nDESCRIPTION: Changes the behavior of `data_path` to include the full data path of a secret, providing more comprehensive path information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22487.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// events: `data_path` will include full data path of secret, including name\n```\n\n----------------------------------------\n\nTITLE: Querying Tidy Status with Vault API\nDESCRIPTION: This is a sample request to the `/pki/tidy-status` endpoint to retrieve information about the current or most recent tidy operation. It uses curl to send a GET request with the Vault token in the header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_124\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/pki/tidy-status\n```\n\n----------------------------------------\n\nTITLE: Setting UI Test Filter for Enos Scenario\nDESCRIPTION: Command to set an optional test filter for the UI scenario in Enos. This allows limiting the tests that are run.\nSOURCE: https://github.com/hashicorp/vault/blob/main/enos/README.md#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport ENOS_VAR_ui_test_filter=\"some filter\"\n```\n\n----------------------------------------\n\nTITLE: Removing VAULT_LEASE_USE_LEGACY_REVOCATION_STRATEGY Environment Variable\nDESCRIPTION: This snippet indicates that the VAULT_LEASE_USE_LEGACY_REVOCATION_STRATEGY environment variable has been removed as part of the release changes. This change reflects a shift towards newer methods of managing lease revocation strategies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12888.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nexpiration: VAULT_LEASE_USE_LEGACY_REVOCATION_STRATEGY environment variable has\\nbeen removed.\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Vault CLI Read Handling in Go\nDESCRIPTION: This code snippet modifies the Vault CLI's read functionality to ensure that it returns raw data as secret.Data when the API response lacks a top-level data object. It aims to improve the user experience by avoiding unexpected behavior when reading secrets.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17913.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"release-note:bug\\ncli: Fix vault read handling to return raw data as secret.Data when there is no top-level data object from api response.\"\n```\n\n----------------------------------------\n\nTITLE: Including Global Log Level Configuration MDX\nDESCRIPTION: HTML anchor tag and MDX include statement for global log level configuration documentation. Creates a reference point with ID 'shared-flag-log-level' and includes the shared log level configuration content.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/shared/flags/log-level.mdx#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"shared-flag-log-level\" />\n```\n\nLANGUAGE: mdx\nCODE:\n```\n@include 'global-settings/both/log-level.mdx'\n```\n\n----------------------------------------\n\nTITLE: Vault Listener Configuration for Pprof\nDESCRIPTION: This enhancement introduces the ability to configure individual Vault listeners to allow unauthenticated pprof requests. This allows administrators to enable pprof endpoints for specific listeners without exposing sensitive information on other listeners. Additional pprof targets are also collected.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11324.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"core: Add per-listener config to allow unauthenticated pprof requests, and collect a few more pprof targets.\"\n```\n\n----------------------------------------\n\nTITLE: Running Component Documentation Generation Command\nDESCRIPTION: Command syntax for generating markdown documentation for specific components in the Vault UI project, with optional parameters for component name, addon/engine, and filepath.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/how-to-docfy.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn docfy-md <component name> <addon or engine> <full filepath>\n```\n\n----------------------------------------\n\nTITLE: Key Share Submission Response\nDESCRIPTION: JSON response after submitting recovery key share showing completion status and verification details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"complete\": true,\n  \"keys\": [\"one\", \"two\", \"three\"],\n  \"nonce\": \"2dbd10f1-8528-6246-09e7-82b25b8aba63\",\n  \"pgp_fingerprints\": [\"abcd1234\"],\n  \"keys_base64\": [\"base64keyvalue\"],\n  \"backup\": true,\n  \"verification_required\": true,\n  \"verification_nonce\": \"8b112c9e-2738-929d-bcc2-19aff249ff10\"\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note - Error Message Improvement\nDESCRIPTION: Documents enhancement to error messaging when users attempt to access enterprise feature paths in open-source Vault. Improves user experience by providing more descriptive feedback when enterprise features are accessed in the open-source version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18870.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore:provide more descriptive error message when calling enterprise feature paths in open-source\n```\n\n----------------------------------------\n\nTITLE: Adding HA Cluster Status Field in Vault Release Note\nDESCRIPTION: Release note entry documenting the addition of 'removed_from_cluster' field to system seal status and vault status command outputs. This field indicates if a node has been removed from the high availability cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28938.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore: Add `removed_from_cluster` field to sys/seal-status and vault status output to indicate whether the node has been removed from the HA cluster.\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Library Upgrade\nDESCRIPTION: This release note indicates an improvement to the Vault core by upgrading the github.com/hashicorp/raft library. The github.com/hashicorp/raft library provides the Raft consensus algorithm implementation which Vault uses to manage high availability and data consistency across multiple nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16609.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n`release-note:improvement\ncore: Upgrade github.com/hashicorp/raft`\n```\n\n----------------------------------------\n\nTITLE: Updating Couchbase Database Plugin - Release Note\nDESCRIPTION: Release note indicating an update of the Couchbase database plugin to version 0.9.3 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22854.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\ndatabase/couchbase: Update plugin to v0.9.3\n```\n\n----------------------------------------\n\nTITLE: Inspecting License at Given Path - Shell Script\nDESCRIPTION: This command inspects the license located at a specific path given by the user. Similar to the command with default environment variables, it retrieves detailed license information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/license/inspect.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault license inspect ~/vaults/license\nSource: /Users/ncc/vaults/license\nProduct: vault\nLicense ID: 060d7820-fa59-f95c-832b-395db0aeb9ba\nCustomer ID: 5401ae3b-136b-3e47-3b43-432927fa03e7\nInstallation ID: *\nIssue Time: 2021-05-17 19:33:47.93981585 +0000 UTC\nStart Time: 2021-05-17 00:00:00 +0000 UTC\nExpiration Time: 2022-05-17 23:59:59.999 +0000 UTC\nTermination Time: 2031-05-17 23:59:59.999 +0000 UTC\n{\"license_id\":\"060d7820-fa59-f95c-832b-395db0aeb9ba\",\"customer_id\":\"5401ae3b-136b-3e47-3b43-432927fa03e7\",\"installation_id\":\"*\",\"issue_time\":\"2021-05-17T19:33:47.93981585Z\",\"start_time\":\"2021-05-17T00:00:00Z\",\"expiration_time\":\"2022-05-17T23:59:59.999Z\",\"flags\":{\"modules\":[\"multi-dc-scale\",\"governance-policy\",\"advanced-data-protection\"]},\"features\":[\"HSM\",\"Performance Replication\",\"DR Replication\",\"MFA\",\"Sentinel\",\"Seal Wrapping\",\"Control Groups\",\"Performance Standby\",\"Namespaces\",\"KMIP\",\"Entropy Augmentation\",\"Transform Secrets Engine\",\"Lease Count Quotas\",\"Key Management Secrets Engine\",\"Automated Snapshots\"],\"performance_standby_count\":9999}\n\nLicense is valid\n```\n\n----------------------------------------\n\nTITLE: Updating HashiCorp Helm Repository\nDESCRIPTION: Updates the HashiCorp Helm repository to ensure access to the latest chart versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ helm repo update hashicorp\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Status Menu in Vault (Markdown)\nDESCRIPTION: This release note documents a bug fix for the Vault UI. The issue addressed was that the status menu was not showing on the login page, which has now been resolved.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11213.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fix status menu no showing on login\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Terraform Plugin Version\nDESCRIPTION: This release note provides information about the update to version v0.11.0 of the Terraform plugin. This is part of the ongoing improvements to the secrets/terraform module of HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29541.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nsecrets/terraform: Update plugin to v0.11.0\"\n```\n\n----------------------------------------\n\nTITLE: Lookup Token Information Text Command\nDESCRIPTION: This command retrieves details of a specific token, including its entity ID, which can be used to identify the caller in Vault. Ensure the token is valid and Vault is operational.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-duo.mdx#2025-04-14_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n$ vault token lookup 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Workload Identity Auto-Auth in HCL\nDESCRIPTION: Example configuration block for setting up Azure Workload Identity auto-authentication in Vault. Demonstrates the use of environment-based authentication with a specified role and resource endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/azure.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nauto_auth {\n  method {\n    type = \"azure\"\n    config = {\n      authenticate_from_environment = true\n      role = \"dev-role\"\n      resource = \"https://management.azure.com/\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Race Condition in JobManager.GetWorkerCounts\nDESCRIPTION: This release note indicates a bug fix for a race condition that existed within the `JobManager.GetWorkerCounts` function of the `fairshare` component in the Vault project. This fix likely improves the stability and reliability of the worker count retrieval process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24616.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nfairshare: fix a race condition in JobManager.GetWorkerCounts`\n```\n\n----------------------------------------\n\nTITLE: Introducing cap/ldap.Client for LDAP Authentication\nDESCRIPTION: A new client implementation for LDAP authentication, replacing the existing authentication mechanism in the Vault SDK. Provides improved handling of LDAP connections and authentication processes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22185.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nauth/ldap: introduce cap/ldap.Client for LDAP authentication\n```\n\n----------------------------------------\n\nTITLE: Adding FindResponseSchema Test Helper\nDESCRIPTION: This release note details the introduction of a new test helper named FindResponseSchema that assists developers with validating response schemas in tests. It is intended to enhance the testing capabilities within the Vault SDK, ensuring that response schemas conform to expected formats.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18636.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\nsdk: Adding FindResponseSchema test helper to assist with response schema validation in tests\"\n```\n\n----------------------------------------\n\nTITLE: Invalid Multi-line JSDoc Example Format\nDESCRIPTION: Example of incorrect multi-line JSDoc formatting that will not render a component example properly in the documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/how-to-docfy.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n❌ multi-line jsdoc will not render a component example\n* @example\n* <Block\n*  @title=\"Example\"\n*  @description=\"My component\"\n* />\n```\n\n----------------------------------------\n\nTITLE: Default Username Template for MongoDB Database Plugin\nDESCRIPTION: The default template used for generating dynamic usernames for MongoDB connections. It combines display name, role name, random string, and timestamp, with formatting constraints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mongodb.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ printf \"v-%s-%s-%s-%s\" (.DisplayName | truncate 15) (.RoleName | truncate 15) (random 20) (unix_time) | replace \".\" \"-\"  | truncate 100 }}\n```\n\n----------------------------------------\n\nTITLE: Setting Performance Replication Paths Filter Request\nDESCRIPTION: cURL command to set paths filter for a secondary replication target using POST request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/primary/paths-filter/mySecondaryID\n```\n\n----------------------------------------\n\nTITLE: Adding allow_empty_principals Flag to SSH Secrets Engine in Vault\nDESCRIPTION: This change introduces a new flag 'allow_empty_principals' to the SSH secrets engine in HashiCorp Vault. When enabled, this flag allows generated SSH keys or certificates to apply to any user or principal, providing more flexibility in access control.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28466.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/ssh: Add a flag, `allow_empty_principals` to allow keys or certs to apply to any user/principal.\n```\n```\n\n----------------------------------------\n\nTITLE: Registering an Enterprise Plugin in Vault\nDESCRIPTION: This snippet shows how to register an enterprise plugin by providing the version, name, and type in the request payload. Enterprise plugins don't require SHA256 confirmation unlike community plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-catalog.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.16.0+ent\",\n  \"name\": \"vault-plugin-secrets-keymgmt\",\n  \"type\": \"secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Auth Plugin to v0.20.0\nDESCRIPTION: This snippet documents the version update of the GCP Auth plugin to version 0.20.0. It serves as a release note indicating a change in the plugin version and is part of the overall plugin management and versioning.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29591.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"\"\"release-note:change\\n auth/gcp: Update plugin to v0.20.0\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Parameters to MySQL Database Secrets Engine\nDESCRIPTION: Documents the addition of two new TLS configuration parameters: tls_server_name for specifying the server name used to verify the server certificate and tls_skip_verify for optionally skipping TLS verification.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18799.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:improvement\nsecrets/db/mysql: Add `tls_server_name` and `tls_skip_verify` parameters\n```\n\n----------------------------------------\n\nTITLE: Listing Detailed Plugin Information in Vault\nDESCRIPTION: Example showing detailed plugin information including name, type, version, container status, and deprecation status using the -detailed flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/list.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin list -detailed\nName        Type    Version                  Container    Deprecation Status\n----        ----    -------                  ---------    ------------------\nalicloud    auth    v0.12.0+builtin          false        supported\napp-id      auth    v1.12.0+builtin.vault    false        pending removal\n# ...\n```\n\n----------------------------------------\n\nTITLE: Read STS Role Response\nDESCRIPTION: JSON response containing STS role information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sts_role \": \"arn:aws:iam:111122223333:role/myRole\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Go Version Update in Vault Core\nDESCRIPTION: A release note entry that indicates the Go programming language version used in the Vault core has been updated to version 1.19.2.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_go-ver-1120.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\ncore: Bump Go version to 1.19.2.\n```\n\n----------------------------------------\n\nTITLE: Verifying Fix with Vault Login (Shell)\nDESCRIPTION: This command attempts to log in again using the userpass auth method to verify that the fix has resolved the issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/internal-error-namespace-missing-policy.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login -method=userpass username=user1 password=123\n```\n\n----------------------------------------\n\nTITLE: Adding elide_list_responses Option for Vault Audit Logs in Markdown\nDESCRIPTION: Release note documenting the addition of the 'elide_list_responses' option to Vault's audit logging system. This option serves as a countermeasure for preventing common oversized audit log entries when list operations return large amounts of data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18128.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\naudit: Add `elide_list_responses` option, providing a countermeasure for a common source of oversized audit log entries\n```\n```\n\n----------------------------------------\n\nTITLE: Vault CLI Bug Fix: Remove Empty Table Heading\nDESCRIPTION: This snippet documents the removal of an empty table heading in the `vault secrets list -detailed` command output within the Vault CLI. This fixes a bug related to unnecessary output and enhances user experience by providing cleaner, more readable results.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17577.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\ncli: Remove empty table heading for `vault secrets list -detailed` output.\n```\n```\n\n----------------------------------------\n\nTITLE: Shared VaultAuth Configuration\nDESCRIPTION: Configuration showing a single VaultAuth resource with multiple VaultStaticSecret resources for different applications sharing the same authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: apps\n  namespace: apps\nspec:\n  vaultAuthGlobalRef:\n    allowDefault: true\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  name: app1-secret\n  namespace: apps\nspec:\n  destination:\n    create: true\n    name: app1-secret\n  hmacSecretData: true\n  mount: apps\n  path: app1\n  type: kv-v2\n  vaultAuthRef: apps\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  name: app2-secret\n  namespace: apps\nspec:\n  destination:\n    create: true\n    name: app2-secret\n  hmacSecretData: true\n  mount: apps\n  path: app2\n  type: kv-v2\n  vaultAuthRef: apps\n```\n\n----------------------------------------\n\nTITLE: Updating OpenLDAP Secrets Plugin in Vault Release Notes (Markdown)\nDESCRIPTION: This release note indicates that the OpenLDAP secrets plugin for HashiCorp Vault has been updated to version 0.11.2. It's formatted as a Markdown code block with a specific release note syntax.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22734.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/openldap: Update plugin to v0.11.2\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note: Database Secrets Engine Bug Fix\nDESCRIPTION: Addresses a panic in the database secrets engine when a performance standby node attempts to write or update configurations. This bug fix prevents unexpected crashes in Vault's database secrets functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30039.txt#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nsecrets/db: fix a panic when a performance standby node attempts to write/update config.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Auto-auth Method Properties in HCL\nDESCRIPTION: Configuration parameters for JWT auto-authentication method including file path handling, role specification, and JWT management settings. Includes options for JWT removal behavior and read periods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/jwt.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath = \"<path-to-jwt-file>\"  # Required: Path to the JWT file\nrole = \"<role-name>\"        # Required: Role to authenticate against\nremove_jwt_after_reading = true|false  # Optional: Control JWT removal after reading\nremove_jwt_follows_symlinks = true|false  # Optional: Control symlink behavior\njwt_read_period = \"0.5s\"  # Optional: JWT read interval duration\n```\n\n----------------------------------------\n\nTITLE: Read Store Sample Response\nDESCRIPTION: JSON response containing store configuration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"type\": \"sql\",\n    \"connection_string\": \"postgresql://{{username}}:{{password}}@mydb.conhugeco.com/tokens\",\n    \"supported_transformations\": [\"tokenization\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault PKI Tidy Config Bug Fix\nDESCRIPTION: This release note documents a bug fix in the Vault PKI secrets engine. The bug prevented users from explicitly setting both `maintain_stored_certificate_counts` and `publish_stored_certificate_count_metrics` to `false` in the tidy configuration. This fix allows for the correct configuration of these settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20664.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/pki: Support setting both maintain_stored_certificate_counts=false and publish_stored_certificate_count_metrics=false explicitly in tidy config.\n```\n\n----------------------------------------\n\nTITLE: Sending Remount Request in Shell\nDESCRIPTION: Sample shell command to send a POST request to the /sys/remount endpoint. Uses curl to send the request with the necessary headers and payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/remount.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/remount\n```\n\n----------------------------------------\n\nTITLE: Vault Out of Memory Error with Integrated Storage\nDESCRIPTION: Example error message when Vault encounters an out-of-memory condition due to using mlock() with Integrated Storage. This can occur when Vault data exceeds available physical memory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\nkernel: [12209.426991] Out of memory: Kill process 23847 (vault) score 444 or sacrifice child\nkernel: [12209.427473] Killed process 23847 (vault) total-vm:1897491kB, anon-rss:948745kB, file-rss:474372kB\n```\n\n----------------------------------------\n\nTITLE: Improving CLI Operator Diagnose Telemetry Check\nDESCRIPTION: This snippet updates the CLI operations to enhance the diagnostic command, specifically targeting the telemetry configuration checks. It aims to identify any missing or incomplete telemetry configurations that may impact operational insights. The update is a part of the overall effort to ensure better monitoring and troubleshooting capabilities within the Vault CLI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12802.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\ncli: Operator diagnose now tests for missing or partial telemetry configurations.\"\n```\n\n----------------------------------------\n\nTITLE: Adding Build Date to Vault System Endpoints\nDESCRIPTION: This improvement adds the build date to the 'sys/seal-status' and 'sys/version-history' endpoints in Vault's core functionality. This addition provides more detailed information about the Vault instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14957.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: Include build date in `sys/seal-status` and `sys/version-history` endpoints.\n```\n```\n\n----------------------------------------\n\nTITLE: Returning Additional Invalid Token Error Messages\nDESCRIPTION: This release note describes the enhancement made to the core error handling mechanism in HashiCorp Vault. It details how the system now returns a specific error message for various invalid token scenarios, including expired tokens, tokens that exceed their usage limit, and tokens that are recognized as bogus or invalid values. This change enhances the clarity of error responses for clients interfacing with Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25953.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\ncore: return an additional \\\"invalid token\\\" error message in 403 response when the provided request token is expired,\\nexceeded the number of uses, or is a bogus value\"\n```\n\n----------------------------------------\n\nTITLE: Database Connection Configuration Change\nDESCRIPTION: This release note indicates a change in the behavior of reading connection configurations for database plugins.  A new computed field `running_plugin_version` is returned when a non-builtin version is running. This allows operators to determine the version of the database plugin in use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25105.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nplugins/database: Reading connection config at `database/config/:name` will now return a computed `running_plugin_version` field if a non-builtin version is running.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding LDAP Alias Dereferencing Configuration Release Note\nDESCRIPTION: Release note entry documenting a functionality improvement in Vault's LDAP authentication method that enables configuration of alias dereferencing during LDAP searches. This enhancement provides more control over how LDAP references are handled during authentication operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18230.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth/ldap: allow configuration of alias dereferencing in LDAP search\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note: Cubbyhole Storage Cleanup Fix\nDESCRIPTION: This release note indicates a bug fix in Vault's core functionality. The fix specifically targets the cleanup process of storage entries located in cubbyholes within namespaces, ensuring proper data removal and preventing potential data leaks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11408.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`core: Fix cleanup of storage entries from cubbyholes within namespaces.`\n```\n\n----------------------------------------\n\nTITLE: Adding Snowflake Dynamic Username Feature Release Note\nDESCRIPTION: Release note entry documenting the addition of customizable dynamic username functionality to the Snowflake database secrets engine in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11997.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\nsecrets/database/snowflake: Add ability to customize dynamic usernames\n```\n\n----------------------------------------\n\nTITLE: Moving Vault Binary on Linux\nDESCRIPTION: This snippet moves the Vault binary to the /usr/bin directory to make it accessible from any location in the command line.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo mv PATH/TO/VAULT/BINARY /usr/bin/\n```\n\n----------------------------------------\n\nTITLE: Improving Vault Activity Export API with Identity Metadata\nDESCRIPTION: This release note indicates an improvement to the Vault Activity Export API. The API now includes identity metadata about entity clients in its response.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28064.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nactivity: The [activity export API](https://developer.hashicorp.com/vault/api-docs/system/internal-counters#activity-export) now includes identity metadata about entity clients.\n```\n```\n\n----------------------------------------\n\nTITLE: Vault CLI KV Get Command Bug Fix Release Note\nDESCRIPTION: Release note entry documenting a fix for the Vault CLI kv get command to properly handle trailing spaces when retrieving secrets. This improvement ensures more accurate secret retrieval operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15188.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncli: kv get command now honors trailing spaces to retrieve secrets\n```\n\n----------------------------------------\n\nTITLE: Adding pprof Dumping to Agent\nDESCRIPTION: This snippet describes the enhancement for the agent to allow the dumping of pprof data to the filesystem when the SIGUSR2 signal is received, which helps in profiling applications.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27510.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nag\\add the ability to dump pprof to the filesystem using SIGUSR2\"\n```\n\n----------------------------------------\n\nTITLE: Fixing Plugin Hanging Issue in HashiCorp Vault\nDESCRIPTION: This release note documents a bug fix that addresses an issue where broken or unresponsive plugins could cause Vault to hang. This improves Vault's resilience when dealing with problematic plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22914.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:bug\nplugins: Fix instance where broken/unresponsive plugins could cause Vault to hang.\n```\n\n----------------------------------------\n\nTITLE: PKI AIA URL Templating Bug Fix Release Note\nDESCRIPTION: Fix for a bug in Vault's PKI secret engine where the enable_aia_url_templating issuer field could not be set to false. This impacts the Authority Information Access (AIA) URL configuration for PKI certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28832.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecret/pki: Fix a bug that prevents PKI issuer field enable_aia_url_templating\\nto be set to false.\n```\n\n----------------------------------------\n\nTITLE: HTML Table Structure in Markdown\nDESCRIPTION: HTML table structure embedded in markdown defining core updates for Vault, including security patches and agent/proxy enhancements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.17.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th style={{verticalAlign: 'middle'}}>Release</th>\n      <th style={{verticalAlign: 'middle'}}>Update</th>\n      <th style={{verticalAlign: 'middle'}}>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n\n  <tr>\n    <td style={{verticalAlign: 'middle'}}>\n      Security patches\n    </td>\n    <td style={{verticalAlign: 'middle', textAlign: 'center'}}>ENHANCED</td>\n    <td style={{verticalAlign: 'middle'}}>\n      Various security improvements to remediate varying severity and\n      informational findings from a 3rd party security audit.\n    </td>\n  </tr>\n\n  <tr>\n    <td style={{verticalAlign: 'middle'}}>\n      Vault Agent and Vault Proxy self-healing tokens\n    </td>\n    <td style={{verticalAlign: 'middle', textAlign: 'center'}}>ENHANCED</td>\n    <td style={{verticalAlign: 'middle'}}>\n      Auto-authentication avoids agent/proxy restarts and config changes by\n      automatically re-authenticating authN tokens to Vault.\n      <br /><br />\n      Learn more: <a href=\\\"/vault/docs/agent-and-proxy/autoauth\\\">Vault Agent and Vault Proxy auto-auth</a>\n    </td>\n  </tr>\n\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Release Note: Vault Identity Bug Fix\nDESCRIPTION: This release note documents a bug fix addressing an issue where the incorrect mount accessor was used when refreshing external group memberships in Vault's identity system.  The fix ensures that the correct accessor is used.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11506.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nidentity: Use correct mount accessor when refreshing external group memberships.\n`\n```\n\n----------------------------------------\n\nTITLE: Fixing Identity Group Update by Name in Vault\nDESCRIPTION: Release note documenting a bug fix for the identity/group endpoint in HashiCorp Vault. Addresses an issue where modifying groups by name wasn't properly updating associated policies and member entities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10812.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nidentity: When the identity/group endpoint is used to modify a group by name, correctly update its policy and member entities.\n```\n\n----------------------------------------\n\nTITLE: Azure Auth Managed Identities Feature\nDESCRIPTION: This feature allows any Azure resource that supports managed identities to authenticate with Vault. This simplifies the authentication process and improves security by leveraging Azure's managed identities service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19077.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\n**Azure Auth Managed Identities**: Allow any Azure resource that supports managed identities to authenticate with Vault\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting PKI Secrets Engine CA Chain Update in Vault Release Note\nDESCRIPTION: This release note indicates that the ca_chain response field in issuing and signing APIs of the PKI secrets engine will now include the root CA certificate if the mount is aware of it. This change affects the /pki/issue/:role endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15155.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/pki: The `ca_chain` response field within issuing (/pki/issue/:role)\nand signing APIs will now include the root CA certificate if the mount is\naware of it.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating consul-template Dependency for Vault Agent\nDESCRIPTION: This release note indicates an improvement in the Vault agent by updating the consul-template dependency to version 0.29.0. This update likely brings new features or bug fixes from the consul-template project into the Vault agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15293.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nagent: Update consult-template to v0.29.0\n```\n```\n\n----------------------------------------\n\nTITLE: Application 2 VaultAuth Configuration\nDESCRIPTION: Configuration for the second application showing VaultAuth and VaultStaticSecret resources using the global authentication settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: app2\n  namespace: apps\nspec:\n  kubernetes:\n    role: app2\n    serviceAccount: app2\n  vaultAuthGlobalRef:\n    allowDefault: true\n    namespace: admin\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultStaticSecret\nmetadata:\n  name: app2-secret\n  namespace: apps\nspec:\n  destination:\n    create: true\n    name: app2-secret\n  hmacSecretData: true\n  mount: apps\n  path: app2\n  type: kv-v2\n  vaultAuthRef: app2\n```\n\n----------------------------------------\n\nTITLE: Fixing Bug in Debug Command - Release Note\nDESCRIPTION: This release note outlines the fix implemented for the bug in the debug command that prevented the monitor from properly honoring the configured duration. This fix aims to enhance the reliability of monitoring functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16834.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\ncommand/debug: fix bug where monitor was not honoring configured duration\"\n```\n\n----------------------------------------\n\nTITLE: Release Note - UI Client Count Card Fix\nDESCRIPTION: Bug fix entry for Vault release notes, addressing an issue where the Client Count card was not displaying properly when running Vault in a Dedicated cluster configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29241.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nUI: Fix missing Client Count card when running as a Vault Dedicated cluster\n```\n\n----------------------------------------\n\nTITLE: UI Bug Fix for Chroot Namespace Listener Access\nDESCRIPTION: Documents a bug fix that resolves issues with the Vault GUI when accessing through a listener that has chroot_namespace defined. The fix ensures proper functionality of the user interface under namespace-constrained configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23942.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nui: fix broken GUI when accessing from listener with chroot_namespace defined\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - MongoDB UI Enhancement\nDESCRIPTION: Release note entry indicating improvement to the user interface by adding customized input fields specifically for MongoDB configuration within the Database Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10949.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Customize MongoDB input fields on Database Secrets Engine\n```\n\n----------------------------------------\n\nTITLE: Configuring Splash Delay Based on Testing Environment\nDESCRIPTION: Sets a splash delay constant that is 0 when in testing mode and 300ms in normal operation, preventing unnecessary delays during automated tests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport Ember from 'ember';\n/* eslint-disable ember/no-ember-testing-in-module-scope */\nconst SPLASH_DELAY = Ember.testing ? 0 : 300;\n\nexport default Route.extend({\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - Random Source Enhancement\nDESCRIPTION: Release note documenting improvement that enables callers to specify custom random byte sources, including entropy augmentation sources, when using sys/tools/random and transit/random endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15213.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore,transit: Allow callers to choose random byte source including entropy augmentation sources for the sys/tools/random and transit/random endpoints.\n```\n\n----------------------------------------\n\nTITLE: Removing String Interpolation in MSSQL Queries\nDESCRIPTION: This snippet documents the removal of string interpolation in internal database queries for MS SQL. The aim is to enhance security by using inline queries and named parameters instead of potentially vulnerable string interpolation. This change is particularly focused on improving the integrity of query execution and reducing the risk of SQL injection attacks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13799.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:security\\ndatabase/mssql: Removed string interpolation on internal queries and replaced them with inline queries using named parameters.\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Azure Debug Logs\nDESCRIPTION: Shell environment variable to enable debug logging for the Azure authentication plugin, which includes additional information about API requests and responses.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nAZURE_SDK_GO_LOGGING=all\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log File Archives in Vault\nDESCRIPTION: Command line flag to specify the number of log file archives to retain. The value 5 will preserve up to 5 archived log files before deleting older archives. Archives are created with timestamp-based naming like agent-{timestamp}.log.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/shared/flags/log-rotate-max-files.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-log-rotate-max-files 5\n```\n\n----------------------------------------\n\nTITLE: Vault SDK: Error Handling in NewDockerCluster\nDESCRIPTION: This release note indicates a bug fix in the Vault SDK. Previously, when setting up the first node (node 0) in a NewDockerCluster, any failures encountered were silently ignored.  Now, the SDK returns an error when such a failure occurs, providing better visibility and error handling during Docker cluster initialization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24136.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nsdk: Return error when failure occurs setting up node 0 in NewDockerCluster, instead of ignoring it.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring PostStart Container Hook\nDESCRIPTION: Defines a custom PostStart hook to run a script after the pod becomes ready, useful for initialization or bootstrapping tasks\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\npostStart:\n  - /bin/sh\n  - -c\n  - /vault/userconfig/myscript/run.sh\n```\n\n----------------------------------------\n\nTITLE: Verifying Client IP Address from X-Forwarded-For Header\nDESCRIPTION: This snippet documents a change in HashiCorp Vault to verify that the client IP address obtained from the X-Forwarded-For header is a valid IPv4 or IPv6 address. This validation is crucial to prevent potential security issues related to malformed IP addresses. The expectation is to improve the integrity of network requests processed by the application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29774.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\ncore: Verify that the client IP address extracted from an X-Forwarded-For header is a valid IPv4 or IPv6 address \"\n```\n\n----------------------------------------\n\nTITLE: Vault Raft Restore Metrics Table\nDESCRIPTION: Markdown table showing the metric specifications for the vault.raft.restoreUserSnapshot timer metric that measures snapshot restoration duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/raft/restoreusersnapshot.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value | Description\n----------- | ----- | -----------\ntimer       | ms    | Time required to restore the finite state machine from a user snapshot\n```\n\n----------------------------------------\n\nTITLE: Removing Logical Database Plugins\nDESCRIPTION: Improvement to mark logical database plugins as removed and eliminate associated plugin code from the project\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18039.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nplugins: Mark logical database plugins Removed and remove the plugin code.\n```\n\n----------------------------------------\n\nTITLE: Managing Database Connections - Release Note\nDESCRIPTION: This feature enables users to manage multiple database connections using a single Vault plugin process, improving efficiency in managing connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14033.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:feature\\n**Database plugin multiplexing**: manage multiple database connections with a single plugin process\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Redirect Rule\nDESCRIPTION: This JavaScript snippet shows how to create a basic redirect rule by defining the source, destination, and permanence of the redirect. The redirect rule will forward requests from the 'source' URL to the 'destination' URL. Setting 'permanent' to true indicates a 301 redirect, while setting it to false indicates a temporary redirect.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_10\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  source: '/foo',\n  destination: '/bar',\n  permanent: true\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Endpoint Deprecation Warning\nDESCRIPTION: Adds a warning response for deprecated authentication methods when interacting with the system authentication endpoint\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17058.txt#2025-04-14_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nPOST /sys/auth/:type\n```\n\n----------------------------------------\n\nTITLE: UI: Adding pagination to Vault Auth Methods List\nDESCRIPTION: This release note indicates the addition of pagination to the authentication methods list view in the Vault UI. This enhancement is intended to improve the user experience when dealing with a large number of auth methods by providing a way to navigate them in smaller, more manageable chunks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13054.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nui: Adds pagination to auth methods list view\n`\n```\n\n----------------------------------------\n\nTITLE: Adding KV Secret Search Box in Vault UI\nDESCRIPTION: This release note documents an improvement to the Vault user interface. It adds a search box for Key-Value secrets when the user does not have access to list metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12626.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: Add KV secret search box when no metadata list access.\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note: Cassandra TLS Hostname Validation Bug Fix\nDESCRIPTION: This release note indicates a bug fix related to hostname validation when using TLS with the Cassandra database secret engine in Vault.  The fix ensures that hostnames are properly validated when TLS is enabled, preventing potential security vulnerabilities. No code is included as this is a release note.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11365.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"secrets/database/cassandra: Fixed issue where hostnames were not being validated when using TLS\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Transform Roles\nDESCRIPTION: Example JSON response when listing roles from the Transform secrets engine, showing the names of available roles.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"example-role\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recovery Response from Vault Replication API\nDESCRIPTION: Sample JSON response from the replication recovery endpoint. The response includes a warnings array that contains any relevant warning messages about the recovery operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"warnings\": [\"...\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Removing VAULT_16_REVOKE_PERMITPOOL Environment Variable\nDESCRIPTION: This snippet notes the removal of the VAULT_16_REVOKE_PERMITPOOL environment variable, which is part of the changes in Vault's configuration. The removal indicates ongoing improvements in the management of permit pools within the system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12888.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nexpiration: VAULT_16_REVOKE_PERMITPOOL environment variable has been removed.\"\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Skip Verify in Vault CLI\nDESCRIPTION: Shows how to disable TLS certificate verification using a CLI flag. This should be used with caution as it reduces security.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/tls-skip-verify.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-tls-skip-verify\n```\n\n----------------------------------------\n\nTITLE: Vault LDAP Auth Method Bug Fix Release Note\nDESCRIPTION: Release note documenting a fix for the LDAP authentication method where the request_timeout configuration parameter was not being returned when reading the configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11975.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nauth/ldap: Fix a bug where the LDAP auth method does not return the request_timeout configuration parameter on config read.\n```\n\n----------------------------------------\n\nTITLE: Generating Intermediate CSR with JSON Payload in Vault PKI\nDESCRIPTION: This JSON payload demonstrates the minimum required parameters for generating an intermediate CSR using Vault's PKI secret engine. It specifies the common name for the certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_64\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"common_name\": \"www.example.com\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating OCI Authentication Plugin Version in Vault Release Notes\nDESCRIPTION: A release note indicating that the OCI (Oracle Cloud Infrastructure) authentication plugin for HashiCorp Vault has been updated to version 0.14.1. This is formatted using HashiCorp's release note convention.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22774.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/oci: Update plugin to v0.14.1\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note Entry for Consul Service Registration Bug Fix\nDESCRIPTION: Documents a bug fix that addresses race conditions occurring during the shutdown process of Consul service registration in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10901.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nserviceregistration: Fix race during shutdown of Consul service registration.\n```\n\n----------------------------------------\n\nTITLE: Fixing Timestamp Format in Vault Agent Templating Engine Log Messages\nDESCRIPTION: Bug fix that addresses incorrect timestamp formatting in log messages generated by the Vault agent's templating engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11838.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nagent: fix timestamp format in log messages from the templating engine\n```\n\n----------------------------------------\n\nTITLE: Vault Transit Engine: Bug Fix for Invalid Nonce Size\nDESCRIPTION: This release note highlights a bug fix in the Vault transit secrets engine. The fix prevents a panic that could occur when an invalid nonce size is provided while not using convergent encryption mode. This ensures that Vault handles such cases gracefully without crashing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13690.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/transit: Ensure that Vault does not panic for invalid nonce size when we aren't in convergent encryption mode.\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Agent Template Server Namespace Fix\nDESCRIPTION: Markdown release note describing a bug fix implementation that sets the namespace correctly for the template server component within the Vault Agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10757.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nagent: Set namespace for template server in agent.\n```\n\n----------------------------------------\n\nTITLE: Moving Auth Method Between Namespaces in Vault\nDESCRIPTION: This example demonstrates how to move an existing auth method from one namespace to another in Vault. It moves the auth method from 'ns1/approle/' to 'ns2/new-approle/'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/move.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth move ns1/auth/approle/ ns2/auth/new-approle/\n```\n\n----------------------------------------\n\nTITLE: Updating Terraform Resources After Deduplication\nDESCRIPTION: This snippet demonstrates how to update Terraform configuration after deduplication by renaming resources to avoid conflicts. The snippet shows two resources, correctly renamed, to align with system logs after deduplication. This ensures Terraform can apply configurations without encountering duplicate name errors.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/terraform-refs.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nterraform {\n  required_providers {\n    vault = {\n      source = \"hashicorp/vault\"\n    }\n  }\n}\n\nprovider \"vault\" {}\n\nresource \"vault_identity_entity\" \"BOB-9fe86ea0-f80c-1199-5ad1-1d01ab70237f\" {\n  name      = \"BOB-9fe86ea0-f80c-1199-5ad1-1d01ab70237f\"\n  policies  = [\"TEST\"]\n}\n\nresource \"vault_identity_entity\" \"bob\" {\n  name      = \"bob\"\n  policies  = [\"test\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - UI Styling Enhancement\nDESCRIPTION: Release note entry documenting a UI improvement where the Secrets engine text in the sidebar was updated to use title case formatting for better visual consistency and readability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23964.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Update sidebar Secrets engine to title case.\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining the documentation page metadata and description for AliCloud auto-authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/alicloud.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: Auto-auth with AliCloud\ndescription: >\n  Use AliCloud for auto-authentication with Vault Agent or Vault Proxy.\n---\n```\n\n----------------------------------------\n\nTITLE: Improving OCSP Error Handling\nDESCRIPTION: This release note announces an improvement that enhances the clarity of OCSP validation error messages returned to callers during the login process. This change assists developers and users in troubleshooting OCSP-related issues more effectively.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20234.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nauth/cert: Better return OCSP validation errors during login to the caller.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Mount Table Entry Size Limit\nDESCRIPTION: Increase the size limit for mount table and namespace metadata entries using the `max_mount_and_namespace_table_entry_size` configuration in Vault Enterprise 1.17+\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/storage-entry-size.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nmax_mount_and_namespace_table_entry_size = \"2MiB\"\n```\n\n----------------------------------------\n\nTITLE: List LDAP Groups Request\nDESCRIPTION: This curl command lists all configured LDAP groups in the Vault authentication method using the LIST HTTP verb.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/auth/ldap/groups\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Metrics Replacement in Vault\nDESCRIPTION: This snippet details the change in telemetry metrics for Vault, replacing specific metrics with more general ones. It introduces a new configuration option, `add_mount_point_rollback_metrics`, which modifies the behavior of metric emission.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22400.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:change\\ntelemetry: Replace `vault.rollback.attempt.{MOUNT_POINT}` and `vault.route.rollback.{MOUNT_POINT}` metrics with `vault.rollback.attempt` and `vault.route.rollback metrics` by default. Added a telemetry configuration `add_mount_point_rollback_metrics` which, when set to true, causes vault to emit the metrics with mount points in their names.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Defining the vault.replication.fetchRemoteKeys metric in Vault's replication system\nDESCRIPTION: This snippet documents the performance metric used to track the time required to fetch keys from a remote cluster participating in Vault replication. The metric is measured in milliseconds and is collected before Merkle tree delta generation occurs in the replication process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/replication/fetchremotekeys.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.replication.fetchRemoteKeys ((#vault-replication-fetchremotekeys))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to fetch keys from a remote cluster participating in replication before Merkle tree delta generation occurs\n```\n\n----------------------------------------\n\nTITLE: API JSON Configuration\nDESCRIPTION: JSON configuration file for setting maximum versions via the API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/max-versions.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"max_versions\": 10\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Maximum Request Duration in Vault\nDESCRIPTION: Example configuration showing how to set the default_max_request_duration parameter in Vault to limit request duration across all endpoints. Includes basic server configuration with TCP listener and Consul storage backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/tune-server-performance.mdx#2025-04-14_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\napi_addr = \"https://127.0.0.8200\"\n\ndefault_max_request_duration = \"30s\"\n\nlistener \"tcp\" {\n  address       = \"127.0.0.1:8200\"\n  tls_cert_file = \"/etc/pki/vault-server.crt\"\n  tls_key_file  = \"/etc/pki/vault-server.key\"\n}\n\nstorage \"consul\" {\n  address = \"127.0.0.1:8500\"\n  path    = \"vault\"\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note: Vault Token Storage Bug Fix\nDESCRIPTION: This release note indicates a bug fix where the token is stored in the tokenhelper for interactive login MFA in Vault. This ensures proper token management in interactive login scenarios involving multi-factor authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17040.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nlogin: Store token in tokenhelper for interactive login MFA\n`\n```\n\n----------------------------------------\n\nTITLE: Version Reference - Go Dependency Update\nDESCRIPTION: Several versions mention Go version bumps as part of their changes, including updating to Go 1.17.13, 1.17.12, and 1.17.11 across different releases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-pre-v1.10.md#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// Go version updates across releases:\n// 1.9.9: Go 1.17.13\n// 1.9.8: Go 1.17.12\n// 1.9.7: Go 1.17.11\n```\n\n----------------------------------------\n\nTITLE: JSON Payload for Custom Metadata - Vault KV V2 - JSON\nDESCRIPTION: This JSON represents the custom metadata fields to be sent to the Vault API when writing metadata for a KV V2 secret. It defines the key-value pairs that are to be included in the custom metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/custom-metadata.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"custom_metadata\": {\n    \"use\": \"API keys for different dev environments\",\n    \"renew-date\": \"2026-11-14\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing CPU Usage in Proxy - Vault\nDESCRIPTION: This snippet outlines a fix for excessive CPU usage during normal operation in the proxy component of Vault. It aims to improve performance and system efficiency without any noted dependencies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27518.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\nproxy: Fixed an issue causing excessive CPU usage during normal operation\"\n```\n\n----------------------------------------\n\nTITLE: Okta Authentication Group Retrieval Limitation\nDESCRIPTION: Highlights the pagination issue with Okta authentication in Vault when handling more than 200 user groups. The official Okta Go client library does not automatically paginate group results beyond 200 entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/okta-group-pagination.mdx#2025-04-14_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\n// Group retrieval limitation in Vault 1.4.0\n// Only first 200 groups will be processed during authentication\n```\n\n----------------------------------------\n\nTITLE: Fixing Deadlocks in Client Operations\nDESCRIPTION: This snippet provides a release note indicating a bug fix in the Vault API client, specifically addressing a deadlock issue that arises when the CloneWithHeaders method is used alongside other client methods. There are no additional dependencies or required parameters mentioned. The expected outcome is improved concurrency in the client operations, enhancing stability and reliability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22410.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\napi/client: Fix deadlock in client.CloneWithHeaders when used alongside other client methods.\"\n```\n\n----------------------------------------\n\nTITLE: Vault auth/cf Improvement Note\nDESCRIPTION: This release note indicates an improvement in Vault's `auth/cf` path configuration. The improvement involves removing an incorrect usage of `CreateOperation`. This likely means a previous implementation was using a create operation where it was not appropriate, and the change corrects this.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19098.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\nauth/cf: Remove incorrect usage of CreateOperation from path_config\n```\n```\n\n----------------------------------------\n\nTITLE: Improving Vault Agent Auto-Authentication Token Handling\nDESCRIPTION: Enhances the auto-auth functionality to preload an existing token when the agent starts, potentially improving token management and initialization process\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10850.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\\nagent: change auto-auth to preload an existing token on start\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with Bash\nDESCRIPTION: This command sets the VAULT_TOKEN environment variable to 'dev-only-token'. This allows the Vault CLI to authenticate using the specified token for subsequent commands.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export VAULT_TOKEN=\"dev-only-token\"\n```\n\n----------------------------------------\n\nTITLE: Vault PKI Secrets Release Note\nDESCRIPTION: Release note documentation for a bug fix that resolves an issue where the complete CA chain was not being properly utilized during name constraints enforcement in the PKI secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29255.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsecrets/pki: Fix a bug that prevented the full CA chain to be used when enforcing name constraints.\n```\n\n----------------------------------------\n\nTITLE: Configuring a Route with the withConfig Decorator in Vault UI\nDESCRIPTION: Example of using the withConfig decorator in a configuration creation route. It fetches the existing configuration or creates a new record if one doesn't exist.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/fetch-secrets-engine-config.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n@withConfig('foo/config')\nexport default class FooConfigureRoute extends Route {\n  @service store;\n  @service secretMountPath;\n\n  model() {\n    const backend = this.secretMountPath.currentPath;\n    return this.configModel || this.store.createRecord('foo/config', { backend });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Rotate Root Operation Bug for Azure Secrets Engine - Markdown\nDESCRIPTION: This snippet addresses a bug fix related to the rotate root operation for the Azure secrets engine, specifically for configurations with a `root_password_ttl` set to zero. This is important for maintaining secure operations in upgraded setups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14130.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:bug\\nsecrets/azure: Fixes the [rotate root](https://www.vaultproject.io/api-docs/secret/azure#rotate-root) \\noperation for upgraded configurations with a `root_password_ttl` of zero.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Improvement in Vault Release Note\nDESCRIPTION: Release note indicating that the IvyCodemirror wrapper in Vault's UI has been replaced with a custom ember modifier. This likely improves the code editing experience within the Vault interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14659.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Replaces the IvyCodemirror wrapper with a custom ember modifier.\n```\n\n----------------------------------------\n\nTITLE: Vault TLS Verification Bug Fix Release Note\nDESCRIPTION: Release note entry documenting a fix for an issue where the TLS verification system was incorrectly reporting certificate expiration times by approximately one month.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29128.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nvault/diagnose: Fix time to expiration reporting within the TLS verification to not be a month off.\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Azure Auth Plugin Version\nDESCRIPTION: This snippet represents a release note that details the update of the Azure authentication plugin in HashiCorp Vault. The plugin version is being updated from v0.13.0 to v0.15.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20816.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nauth/azure: Updated plugin from v0.13.0 to v0.15.0\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Snowflake Database Plugin in HashiCorp Vault\nDESCRIPTION: Release note specifying a version change for the Snowflake database plugin. This update suggests improvements or compatibility changes in the plugin's functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25143.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\ndatabase/snowflake: Update plugin to v0.10.0\n```\n\n----------------------------------------\n\nTITLE: Listing Alphabets with cURL in Vault Transform API\nDESCRIPTION: Makes a LIST request to retrieve all alphabets from the Vault Transform Secrets Engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_39\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/transform/alphabet\n```\n\n----------------------------------------\n\nTITLE: Sample Response for GET Identity Access List (JSON)\nDESCRIPTION: This JSON response displays the data structure returned when querying the identity access list for a specific instance. It contains fields like `pending_time`, `expiration_time`, `creation_time`, `client_nonce`, and `role`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_48\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"pending_time\": \"2016-04-14T01:01:41Z\",\n    \"expiration_time\": \"2016-05-05 10:09:16.67077232 +0000 UTC\",\n    \"creation_time\": \"2016-04-14 14:09:16.67077232 +0000 UTC\",\n    \"client_nonce\": \"5defbf9e-a8f9-3063-bdfc-54b7a42a1f95\",\n    \"role\": \"dev-role\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Impersonated Accounts Listing Response (JSON)\nDESCRIPTION: Sample JSON response showing the list of impersonated accounts configured in the GCP secrets engine, returning just the names of available accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\n      \"my-token-impersonate\",\n      \"secondary-role\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Read Role Tag Deny List Tidy Settings Response\nDESCRIPTION: JSON response showing current role tag deny list tidy settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_27\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"safety_buffer\": 600,\n    \"disable_periodic_tidy\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Response Format in Vault API\nDESCRIPTION: Example JSON response from an unwrap operation, showing the structure of unwrapped data including request ID, lease information, and the actual data payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-unwrap.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"8e33c808-f86c-cff8-f30a-fbb3ac22c4a8\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 2592000,\n  \"renewable\": false,\n  \"data\": {\n    \"zip\": \"zap\"\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Front Matter for Release Notes\nDESCRIPTION: YAML front matter defining the page layout and metadata for the Vault 1.10.0 release notes documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.10.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: 1.10.0\ndescription: |-\n  This page contains release notes for Vault 1.10.0\n---\n```\n\n----------------------------------------\n\nTITLE: Documenting Memory Leak Fix in Vault Core Component\nDESCRIPTION: Release note entry describing a bug fix that addresses a memory leak issue in Vault's core component that occurs when time.After() is used within select statements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14814.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore: time.After() used in a select statement can lead to memory leak\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - Policy Wildcard Path Fix\nDESCRIPTION: Release note detailing a fix for policy paths with wildcards not correctly matching list operations due to missing trailing slashes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23874.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: fix policies with wildcards not matching list operations due to the policy path not having a trailing slash\n```\n\n----------------------------------------\n\nTITLE: Fixing Seal HA Configuration Change Bug in Vault Enterprise\nDESCRIPTION: Documents a bug fix that addresses an issue where changing from two auto seals to one auto seal was being rejected due to the persistence of 'multiseal' seal type in the configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23573.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nSeal HA (enterprise/beta): Fix rejection of a seal configuration change\nfrom two to one auto seal due to persistence of the previous seal type being\n\"multiseal\".\n```\n\n----------------------------------------\n\nTITLE: Database Connection URL Password Redaction\nDESCRIPTION: Ensures that connection URL passwords are consistently redacted to prevent unintended exposure of sensitive credentials in logs or output\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14744.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsecrets/database: Ensure that a `connection_url` password is redacted in all cases.\n```\n\n----------------------------------------\n\nTITLE: Improving WSL Detection for CLI Logins in Hashicorp Vault\nDESCRIPTION: This release note highlights an enhancement made to the JWT authentication method that improves the detection of the Windows Subsystem for Linux (WSL) for CLI-based logins. This update aims to streamline login processes for users operating within a WSL environment.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16525.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"auth/jwt: Improves detection of Windows Subsystem for Linux (WSL) for CLI-based logins.\"\n```\n\n----------------------------------------\n\nTITLE: Release Note for TTL Picker UI Improvement in Vault\nDESCRIPTION: A markdown formatted release note indicating an improvement to the TTL picker component in the Vault UI to enhance consistency in its appearance or functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18114.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: update TTL picker for consistency\n```\n```\n\n----------------------------------------\n\nTITLE: Estimating Encryption Operations in Vault\nDESCRIPTION: This snippet illustrates how to estimate the number of encryption operations in Vault, which is crucial for adhering to NIST guidelines on key rotation. It defines the formula ESTIMATED_OPS as the sum of PUT_EVENTS, CREATE_EVENTS, MERKLE_FLUSH_EVENTS, and WAL_INDEX, each representing different telemetry metrics within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/rotation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"ESTIMATED_OPS = PUT_EVENTS + CREATE_EVENTS + MERKLE_FLUSH_EVENTS + WAL_INDEX\"\n```\n\n----------------------------------------\n\nTITLE: Documenting PKI Secrets Engine Improvement in Markdown\nDESCRIPTION: This markdown snippet documents an improvement to the PKI secrets engine in Vault. It specifies that the Subject Key Identifier is now calculated as suggested in RFC 5280, Section 4.2.1.2.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11218.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nsecrets/pki: Calculate the Subject Key Identifier as suggested in [RFC 5280, Section 4.2.1.2](https://datatracker.ietf.org/doc/html/rfc5280#section-4.2.1.2).\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Vault SDK Dependencies in Release Notes\nDESCRIPTION: This snippet documents an upgrade to the go-secure-stdlib/plugincontainer package and its downstream effect on the Docker dependency version. It's formatted as a release note for change documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28456.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsdk: Upgrade to go-secure-stdlib/plugincontainer@v0.4.1, which also bumps github.com/docker/docker to v27.2.1+incompatible\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Response Schema Validation Methods in Vault SDK\nDESCRIPTION: Release note detailing the addition of FieldData.ValidateStrict method for response schema validation and two test helpers - ValidateResponse and ValidateResponseData - in the Vault SDK framework.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18635.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsdk: Add response schema validation method framework/FieldData.ValidateStrict and two test helpers (ValidateResponse, ValidateResponseData)\n```\n\n----------------------------------------\n\nTITLE: Release Note: Vault Agent Cache Panic Fix\nDESCRIPTION: Release note documenting a bug fix that prevents 'unexpected fault address' panic when using Vault Agent's persistent cache feature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12534.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nagent: Avoid possible `unexpected fault address` panic when using persistent cache.\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for KV v2 Secret Deletion in Markdown\nDESCRIPTION: This release note documents a bug fix in the Vault UI. It addresses an issue where the toast (flash) alert message incorrectly displayed 'created' instead of 'deleted' when removing a KV v2 secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28093.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: fixes toast (flash) alert message saying \"created\" when deleting a kv v2 secret\n```\n```\n\n----------------------------------------\n\nTITLE: Return false for invalid tokens on validate endpoint\nDESCRIPTION: This release note describes a bug fix related to the behavior of the validate endpoint when encountering invalid tokens. Instead of returning an HTTP error, the endpoint now returns `false`, providing a more graceful and expected response for invalid tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1622.txt#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\ntransform (enterprise): Return false for invalid tokens on the validate endpoint rather than returning an HTTP error\n```\n\n----------------------------------------\n\nTITLE: Release Note for OCI Auth Plugin Update in Markdown\nDESCRIPTION: A release note entry documenting that the Oracle Cloud Infrastructure (OCI) authentication plugin for HashiCorp Vault has been updated to version 0.17.0. This is formatted in the standard HashiCorp release note format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28307.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/oci: Update plugin to v0.17.0\n```\n```\n\n----------------------------------------\n\nTITLE: Adding User Unlock Endpoint Release Note\nDESCRIPTION: Release note entry documenting the addition of a new API endpoint that allows unlocking users who have been locked out. The endpoint uses the mount accessor and alias identifier to identify the specific user to unlock.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18279.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore: Added sys/lockedusers/[mount_accessor]/unlock/[alias_identifier] endpoint to unlock an user\nwith given mount_accessor and alias_identifier if locked\n```\n\n----------------------------------------\n\nTITLE: PKI Secrets Engine acme_account_safety_buffer Bug Fix\nDESCRIPTION: This release note describes a bug fix in the Vault PKI secrets engine that addresses the preservation of the acme_account_safety_buffer setting. The fix ensures that the buffer is properly maintained during config/auto-tidy operations, preventing unintended consequences related to account safety.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21870.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nsecrets/pki: Fix preserving acme_account_safety_buffer on config/auto-tidy.\n```\n\n----------------------------------------\n\nTITLE: Sending a POST Request to Create a CRL\nDESCRIPTION: This curl command sends a POST request to create a named CRL in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --cacert vault-ca.pem \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/cert/crls/custom-crl\n```\n\n----------------------------------------\n\nTITLE: Announcing Changes in etcd Storage Version Support\nDESCRIPTION: This snippet provides a release note informing users and developers about the discontinuation of support for etcd storage version 2. This change implies a possible migration necessity to version 3 for continued support and compatibility. Users should ensure their systems and integrations are compatible with the supported etcd versions going forward.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14193.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nstorage/etcd: Remove support for v2.\n```\n\n----------------------------------------\n\nTITLE: HCL Policy for AD FS KV Mount Access\nDESCRIPTION: HCL policy definition that grants read and list capabilities to a KV secrets engine at a specific path. This policy would be used in the Vault GUI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\n# Read and list policy for the AD FS KV mount\npath \"<ADFS_KV_PLUGIN_PATH>/*\" {\n  capabilities = [\"read\", \"list\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Resource Leak in CLI Debug Command\nDESCRIPTION: This release note documents the resolution of a resource leak issue occurring within the CLI debug command. It indicates that the fix ensures better resource management and stability during debugging sessions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26167.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"cli/debug: Fix resource leak in CLI debug command.\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables on Linux\nDESCRIPTION: This snippet sets the environment variables for Vault's data and configuration directories on a Linux system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_DATA=/opt/vault/data\n```\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_CONFIG=/etc/vault.d\n```\n\n----------------------------------------\n\nTITLE: Using Vault Agent -exec Flag\nDESCRIPTION: Demonstrates how to use the -exec flag to specify a command path and arguments for child processes. The path can be relative to the current working directory and includes optional command line arguments. This flag corresponds to exec.command in the configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/agent/flags/exec.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-exec \"./my-app arg1 arg2\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Deadlock Prevention in Vault Core (Markdown)\nDESCRIPTION: This release note describes a bug fix in Vault's core to prevent deadlocks. The fix ensures that when the grabLockOrStop function returns with stopped=true, the lock is not held, thus avoiding potential deadlock situations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10456.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore: Avoid deadlocks by ensuring that if grabLockOrStop returns stopped=true, the lock will not be held.\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Raft Storage Join Behavior Change\nDESCRIPTION: Release note entry describing a change in Vault's raft storage system where nodes that were previously removed from the raft cluster will receive an error when attempting to rejoin if they still have existing raft data on disk.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29090.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\ncore/raft: Return an error on sys/storage/raft/join if a node that has been removed from raft cluster attempts to re-join when it still has existing raft data on disk.\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Definitions for Vault Wrapping Endpoints - Release Note\nDESCRIPTION: Release note entry documenting the enhancement of OpenAPI specifications by adding response definitions to Vault's /sys/wrapping endpoints. This improvement helps with API documentation and client generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18627.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nopenapi: add openapi response definitions to /sys/wrapping endpoints\n```\n\n----------------------------------------\n\nTITLE: Vault Enterprise Activity Log Bug Fix Note\nDESCRIPTION: Release note describing a bug fix for the activity tracking system in Vault Enterprise. The fix addresses an issue where entities were being incorrectly attributed to either no namespace or child namespace authentication methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18809.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nactivity (enterprise): Fix misattribution of entities to no or child namespace auth methods\n```\n```\n\n----------------------------------------\n\nTITLE: Adding RSA Padding Scheme Support in HashiCorp Vault\nDESCRIPTION: This release note highlights the enhancement of the transit secrets engine in HashiCorp Vault to include support for the RSA padding scheme pkcs1v15. This allows users to encrypt data using RSA with this specific padding method, which is crucial for compatibility with existing systems that require it.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25486.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\nsecrets/transit: Add support for RSA padding scheme pkcs1v15 for encryption\"\n```\n\n----------------------------------------\n\nTITLE: Release Note for OpenLDAP Static Role Password Rotation Fix\nDESCRIPTION: Bug fix release note detailing an update to the OpenLDAP secrets engine's static role password rotation mechanism. The fix implements a new retry mechanism that generates a new password after 2 failed rotation attempts, resolving an issue where customers could get stuck in a failing rotation loop.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29131.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsecrets/openldap: Update static role rotation to generate a new password after 2 failed attempts.\nUnblocks customers that were stuck in a failing loop when attempting to rotate static role passwords.\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - Userpass Alias Path Fix\nDESCRIPTION: Release note documenting the removal of strings.ToLower() for alias names in the pathLoginAliasLookahead function, which fixes storage entry paths for locked users by preserving the correct case sensitivity of alias names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18890.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: removes strings.ToLower for alias name from pathLoginAliasLookahead function in userpass. This fixes\nthe storage entry for locked users by having the correct alias name in path.\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom File Path for Vault Agent Configuration\nDESCRIPTION: The file_path parameter specifies where Vault should save the generated configuration file. By default, it points to './agent.hcl' but can be customized as needed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/agent/args/file_path.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n\"./agent/custom-config.hcl\"\n```\n\n----------------------------------------\n\nTITLE: Using Pre-existing Elasticsearch Roles in Creation Statement\nDESCRIPTION: Alternative JSON creation statement that references pre-existing roles in Elasticsearch instead of defining new role permissions. This approach requires that the roles already exist in Elasticsearch.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/elasticdb.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"elasticsearch_roles\": [\"pre-existing-role-in-elasticsearch\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable on PowerShell\nDESCRIPTION: This snippet sets the VAULT_HOME environment variable to designate the Vault installation directory on a Windows system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_4\n\nLANGUAGE: powershell\nCODE:\n```\n$env:VAULT_HOME = \"${env:ProgramFiles}\\Vault\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Command for Vault Liveness Probe\nDESCRIPTION: YAML configuration for defining a custom liveness probe that executes a script to check Vault's health. This allows for more complex health checking logic beyond simple HTTP checks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nexecCommand:\n  - /bin/sh\n  - -c\n  - /vault/userconfig/mylivenessscript/run.sh\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Auth Plugin Version in Vault Release Notes\nDESCRIPTION: Release note entry documenting the version update of the Azure authentication plugin to version 0.19.1 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28712.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/azure: Update plugin to v0.19.1\n```\n\n----------------------------------------\n\nTITLE: Example Terraform Plan with Duplicate Handling\nDESCRIPTION: This example illustrates the Terraform execution plan when deduplication is enforced: Terraform updates in-place to avoid case-sensitive name clashes. It shows the console output for such operations and highlights the error caused by duplicate names, demonstrating the need to update resources after deduplication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/terraform-refs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n➜  tf_dupe_testing terraform apply\nvault_identity_entity.bob: Refreshing state... [id=e8c5e633-fe37-5a49-4a29-32e2643d03bd]\nvault_identity_entity.BOB: Refreshing state... [id=2577bc3f-67ab-dab7-93dc-e86f78194ff0]\n\nTerraform used the selected providers to generate the following execution plan. Resource\nactions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  # vault_identity_entity.bob will be updated in-place\n  ~ resource \"vault_identity_entity\" \"bob\" {\n      + external_policies = false\n        id                = \"e8c5e633-fe37-5a49-4a29-32e2643d03bd\"\n      ~ name              = \"bob-e8c5e633-fe37-5a49-4a29-32e2643d03bd\" -> \"bob\"\n        # (3 unchanged attributes hidden)\n    }\n\n...\n\nvault_identity_entity.bob: Modifying... [id=e8c5e633-fe37-5a49-4a29-32e2643d03bd]\n╷\n│ Error: error updating IdentityEntity \"e8c5e633-fe37-5a49-4a29-32e2643d03bd\": Error making API request.\n│\n│ URL: PUT https://127.0.0.1:8200/v1/identity/entity/id/e8c5e633-fe37-5a49-4a29-32e2643d03bd\n│ Code: 400. Errors:\n│\n│ * entity name is already in use\n│\n│   with vault_identity_entity.bob,\n│   on main.tf line 17, in resource \"vault_identity_entity\" \"bob\":\n│   17: resource \"vault_identity_entity\" \"bob\" {\n```\n\n----------------------------------------\n\nTITLE: Session Token Sample Payload\nDESCRIPTION: This snippet provides a JSON payload example for creating a role with a session token as the credential type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credential_type\": \"session_token\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CMPv2 in Vault PKI (JSON)\nDESCRIPTION: Sample payload for configuring Certificate Management Protocol v2 (CMPv2) in Vault's PKI secrets engine. It includes settings for enabling CMPv2, configuring authenticators, default path policy, and audit fields.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"enabled\": true,\n  \"authenticators\": {\n    \"cert\": {\n      \"accessor\": \"auth_cert_0f1df449\",\n      \"cert_role\": \"cert1\"\n    }\n   },\n   \"default_path_policy\": \"sign-verbatim\",\n   \"disabled_validations\": [\"DisableMatchingKeyIdValidation\"],\n   \"audit_fields\": [\"common_name\", \"alt_names\", \"ip_sans\", \"uri_sans\"],\n   \"enable_sentinel_parsing\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Secret Data for Subkeys\nDESCRIPTION: This JSON payload represents sample secret data.  When requesting subkeys, this structure shows how values of leaf keys are replaced with null.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"foo\": \"abc\",\n  \"bar\": {\n    \"baz\": \"def\"\n  },\n  \"quux\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Azure Graph URL Configuration in Vault\nDESCRIPTION: Resolves an issue where the Azure environment did not correctly update the Graph URL for authentication and resource management\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13973.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsecrets/azure: Fixed bug where Azure environment did not change Graph URL\n```\n\n----------------------------------------\n\nTITLE: Adding Copy Button for Secret Paths in Vault UI (Markdown)\nDESCRIPTION: This release note describes an improvement to the Vault user interface. A new button has been added to allow users to easily copy secret paths in both Key-Value (KV) version 1 and version 2 secrets engines.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28629.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: Add button to copy secret path in kv v1 and v2 secrets engines\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Unseal Command Output Example\nDESCRIPTION: Example showing the output format when unsealing Vault, displaying the seal status, key shares, threshold, and unseal progress.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/unseal.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault operator unseal\nKey (will be hidden):\nSealed: false\nKey Shares: 1\nKey Threshold: 1\nUnseal Progress: 0\n```\n\n----------------------------------------\n\nTITLE: Vault Plugin Deprecation Status Method\nDESCRIPTION: This release note indicates the addition of a Deprecation Status method to the builtinregistry for Vault plugins. This functionality likely allows developers to mark plugins as deprecated and communicate this status to users, aiding in plugin management and migration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16846.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n```release-note:improvement\nplugins: Add Deprecation Status method to builtinregistry.\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting a Certificate Revocation List (CRL)\nDESCRIPTION: This code snippet demonstrates how to delete a specific named CRL from the Vault system using a DELETE request. The request requires a valid Vault token and CA certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cert.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\ \n    --header \"X-Vault-Token: ...\" \\ \n    --request DELETE \\ \n    --cacert vault-ca.pem \\ \n    https://127.0.0.1:8200/v1/auth/cert/crls/cert1\n```\n\n----------------------------------------\n\nTITLE: Vault API Authentication Improvement\nDESCRIPTION: This release note indicates an improvement to the Vault API wrapper functions `GetAuth` and `GetAuthWithContext`. The key enhancement is the removal of the requirement for sudo privileges when these functions are called, presumably simplifying authentication workflows and reducing the operational overhead associated with managing elevated privileges.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25968.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"api: Do not require sudo for API wrapper functions GetAuth and GetAuthWithContext\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Agent Template Error Handling\nDESCRIPTION: Introduces a new configuration parameter `exit_on_retry_failure` within the `template_config` stanza to control agent behavior on template engine errors. When set to `true`, the agent will exit on template processing failures.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11775.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntemplate_config {\n  exit_on_retry_failure = true\n}\n```\n\n----------------------------------------\n\nTITLE: API Monitoring Log Format Improvement\nDESCRIPTION: This release note indicates an improvement to the Vault API monitoring functionality by adding the `log_format` option. This allows logs generated by the API monitor to be emitted in JSON format, facilitating easier parsing and integration with log aggregation systems.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15536.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\napi/monitor: Add log_format option to allow for logs to be emitted in JSON format\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Pagination to PKI List Pages in HashiCorp Vault UI\nDESCRIPTION: This release note indicates an improvement in the Vault UI where pagination has been added to list pages for PKI roles, keys, issuers, and certificates. This enhancement likely improves the user experience when dealing with large numbers of these PKI-related items.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23193.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: Add pagination to PKI roles, keys, issuers, and certificates list pages\n```\n```\n\n----------------------------------------\n\nTITLE: Handling Autoloading License Retrieval Error in Vault CLI\nDESCRIPTION: This snippet displays the output when attempting to use the '-signed' flag with 'vault license get' while the license is autoloaded. The command prevents retrieving a signed string under such conditions, resulting in a message indicating absence or temporary usage of the license. Ensure the autoloading feature is disabled to avoid this error.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/license/get.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault license get -signed\nLicense not found or using a temporary license.\n```\n\n----------------------------------------\n\nTITLE: Using Internal Endpoint for Client Count Export\nDESCRIPTION: This snippet denotes a change in the UI component where it now uses the internal/counters/activity/export endpoint to fetch client count export data. This is part of an ongoing effort to streamline data retrieval processes within the application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27455.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nui: Uses the internal/counters/activity/export endpoint for client count export data.\"\n```\n\n----------------------------------------\n\nTITLE: Updating Docs Navigation with External Links\nDESCRIPTION: This JavaScript snippet illustrates how to update the documentation navigation to point to an external website.  Instead of using a string for the 'content' array, an object with 'title' and 'href' properties is used.  The 'href' property contains the full URL of the external link.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  category: 'docs',\n  content: [\n    { title: 'Foo Title', href: 'https://learn.hashicorp.com/<product>/foo' }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing MFA Configuration Loading in Vault Authentication\nDESCRIPTION: Bug fix to ensure login Multi-Factor Authentication (MFA) configuration is properly loaded when Vault restarts, maintaining security settings across system reboots.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15261.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nauth: load login MFA configuration upon restart\n```\n\n----------------------------------------\n\nTITLE: Sample Request for Creating/Updating Token Role\nDESCRIPTION: This CURL command demonstrates how to create or update a token role using a specified role name. The POST request requires the role configuration in the payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/token/roles/:role_name\n```\n\n----------------------------------------\n\nTITLE: Vault Configuration Change: Performance Standbys\nDESCRIPTION: This release note indicates a change in the behavior of the `vault server` command when using the `-dev-three-node` flag in the enterprise edition. It now creates performance standbys instead of regular standbys, likely improving performance and resource utilization in development environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20629.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ncommand/server (enterprise): -dev-three-node now creates perf standbys instead of regular standbys.\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in Vault KV Engine\nDESCRIPTION: This cURL command demonstrates how to list secrets at a specified path in Vault's KV engine using the LIST HTTP method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_19\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    https://127.0.0.1:8200/v1/secret/metadata/my-secret\n```\n\n----------------------------------------\n\nTITLE: CLI Plugin List Command Enhancement\nDESCRIPTION: Improves vault plugin list command to include version and type information in table format and details in JSON output\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17347.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault plugin list\n```\n\n----------------------------------------\n\nTITLE: ACME Client Activity Logging Improvement\nDESCRIPTION: This release note documents the improvement of including ACME clients in the activity log responses within the core functionality of Vault. This enhancement allows for better auditing and monitoring of ACME client interactions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26020.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\ncore/activity: Include ACME clients in activity log responses\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing AWS Credential Provider Configuration\nDESCRIPTION: Resolves an issue where environment and shared credential providers were incorrectly overriding Workload Identity Federation (WIF) configuration in AWS secrets management\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29982.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:bug\nsecrets/aws: fix a bug where environment and shared credential providers were overriding the WIF configuration\n```\n\n----------------------------------------\n\nTITLE: Installing Typescript Node-vault Package\nDESCRIPTION: Command to install the Typescript-based node-vault client library using npm.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ npm install @litehex/node-vault\n```\n\n----------------------------------------\n\nTITLE: Vault API HTTP Proxy Configuration Note\nDESCRIPTION: Documents the addition of VAULT_HTTP_PROXY environment variable support to allow configuration of HTTP proxy settings for the Vault API client.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12582.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\napi: Support VAULT_HTTP_PROXY environment variable to allow overriding the Vault client's HTTP proxy\n```\n\n----------------------------------------\n\nTITLE: Parsing Namespace Parameter in UI\nDESCRIPTION: This release note specifies an improvement to the UI functionality where the namespace parameter is now processed from the state query parameter. This enhancement will streamline the handling of namespaces, allowing for a more user-friendly experience when interacting with state-related queries in the application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15378.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nui: Allow namespace param to be parsed from state queryParam\"\n```\n\n----------------------------------------\n\nTITLE: Sample Zero-Address Roles Response in JSON\nDESCRIPTION: Example JSON response showing the list of configured zero-address roles. These roles can be used to generate credentials for any IP address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"roles\": [\"otp_key_role\"]\n  },\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Token Revocation Fix Pull Request\nDESCRIPTION: Reference to a GitHub pull request that fixes token revocation-orphan and tidy operations to properly clean up parent entries.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_11\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4193](https://github.com/hashicorp/vault/pull/4193)]\n```\n\n----------------------------------------\n\nTITLE: Role ARN Example Payload\nDESCRIPTION: This JSON snippet illustrates how to use an ARN when creating a role. It specifies the credential type and associated role ARNs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"credential_type\": \"assumed_role\",\n  \"role_arns\": \"arn:aws:iam::123456789012:role/DeveloperRole\"\n}\n```\n\n----------------------------------------\n\nTITLE: Including Global Settings Documentation in Markdown\nDESCRIPTION: This snippet demonstrates the pattern used throughout the file to include external Markdown documents containing information about various global settings for HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/all-env-variables.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'global-settings/both/address.mdx'\n\n<br /><hr /><br />\n\n@include 'global-settings/both/agent-address.mdx'\n```\n\n----------------------------------------\n\nTITLE: Listing Plugin Runtimes in Vault Catalog with curl\nDESCRIPTION: Sample request to list all plugin runtimes in the Vault catalog using the LIST method. This requires sudo capability and returns details about registered plugin runtimes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-runtimes-catalog.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST\n    http://127.0.0.1:8200/v1/sys/plugins/runtimes/catalog\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Secrets Engine Plugin Version in Vault Release Notes\nDESCRIPTION: This code snippet is a release note in Markdown format, indicating an update to the GCP secrets engine plugin for HashiCorp Vault. It specifies that the plugin has been updated to version 0.17.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22746.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/gcp: Update plugin to v0.17.0\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Agent Certificate Auth Reload Option Release Note\nDESCRIPTION: Release note documentation for an improvement that adds a reload configuration option to certificate authentication in Vault Agent. This allows handling external renewals of local x509 key-pairs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19002.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nagent: Added `reload` option to cert auth configuration in case of external renewals of local x509 key-pairs.\n```\n\n----------------------------------------\n\nTITLE: Vault Operator Command Usage Reference\nDESCRIPTION: Lists all available subcommands for the vault operator command, including their basic purposes such as generating root tokens, importing secrets, and managing server state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nUsage: vault operator <subcommand> [options] [args]\n\n  # ...\n\nSubcommands:\n    generate-root    Generates a new root token\n    import           Import secrets from external systems into Vault\n    init             Initializes a server\n    key-status       Provides information about the active encryption key\n    rekey            Generates new unseal keys\n    rotate           Rotates the underlying encryption key\n    seal             Seals the Vault server\n    step-down        Forces Vault to resign active duty\n    unseal           Unseals the Vault server\n```\n\n----------------------------------------\n\nTITLE: Adding User Interface Warning for KV Secret Engine - Markdown\nDESCRIPTION: This snippet details a release note that documents the enhancement made to the user interface, specifically regarding the addition of warnings about white space in the KV secret engine. There are no specific dependencies, but it relates to the user interface functionality of the KV secret engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12921.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:improvement\\nui: Adds warning about white space in KV secret engine.\"\n```\n\n----------------------------------------\n\nTITLE: Debug Bundle Windows Fix - Vault Release Note\nDESCRIPTION: Release note entry documenting a fix for a panic that occurred when attempting to capture debug bundles on Windows systems in Vault. The fix addresses system-specific issues that were causing the debug bundle collection to crash.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14399.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:bug\ndebug: Fix panic when capturing debug bundle on Windows\n```\n\n----------------------------------------\n\nTITLE: Adding AWS STS Fallback Configuration Parameters\nDESCRIPTION: Adds support for fallback endpoint and region parameters in the AWS secrets engine STS configuration. This improvement enhances the flexibility of AWS service connectivity options.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29051.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/aws: add fallback endpoint and region parameters to sts configuration\n```\n\n----------------------------------------\n\nTITLE: Looking up a Lease - Shell\nDESCRIPTION: This command is used to retrieve information about a specific lease in HashiCorp Vault using its lease ID. It returns details such as expiration time, issue time, and TTL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/lease/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault lease lookup database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nKey             Value\n---             -----\nexpire_time     2021-03-17T11:55:50.755313-05:00\nid              database/creds/readonly/27e1b9a1-27b8-83d9-9fe0-d99d786bdc83\nissue_time      2021-03-17T11:45:50.755312-05:00\nlast_renewal    <nil>\nrenewable       true\nttl             9m52s\n```\n\n----------------------------------------\n\nTITLE: Vault Azure Auth Plugin Update\nDESCRIPTION: This release note indicates that the Azure authentication plugin for HashiCorp Vault has been updated to version v0.16.0.  This update likely includes bug fixes, new features, or security enhancements to the Azure authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22277.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nauth/azure: Update plugin to v0.16.0\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Kubernetes Secrets Plugin in HashiCorp Vault\nDESCRIPTION: Indicates a version update for the Kubernetes secrets plugin to version 0.10.0. This change suggests improvements or maintenance updates to the plugin's functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29592.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsecrets/kubernetes: Update plugin to v0.10.0\n```\n\n----------------------------------------\n\nTITLE: Reloading Secrets Plugin Globally in Vault\nDESCRIPTION: Example demonstrating how to reload a secrets plugin across all nodes and replicated clusters using global scope.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/reload.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault plugin reload \\\n  -type=secret \\\n  -plugin=my-custom-plugin \\\n  -scope=global\n```\n\n----------------------------------------\n\nTITLE: Updating Secrets Plugin for Kubernetes\nDESCRIPTION: This snippet indicates the update of the Kubernetes secrets plugin to version 0.5.0. It serves to inform users of the new features or fixes in this specific version change.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20802.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nsecrets/kubernetes: Update plugin to v0.5.0\"\n```\n\n----------------------------------------\n\nTITLE: Vault API Wrapper Functions Addition\nDESCRIPTION: This release note indicates the addition of wrapper functions for the Vault API endpoints `/sys/mounts/:path` and `/sys/auth/:path`. These functions provide a simplified way to retrieve data from these endpoints, likely improving developer experience and code readability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25499.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\napi: Add wrapper functions for GET /sys/mounts/:path and GET /sys/auth/:path\n```\n```\n\n----------------------------------------\n\nTITLE: Sudo Capability for sys/revoke-force Endpoint\nDESCRIPTION: Highlights the new requirement for sudo capability when using the sys/revoke-force path. Users must have elevated permissions to execute this operation in Vault 0.8.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.8.0.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\n# New requirement: sudo capability for sys/revoke-force\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Authentication Identity Parameters\nDESCRIPTION: Defines configuration options for IAM and EC2 authentication methods, including how to generate identity aliases and include metadata for authentication tokens\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"iam_alias\": \"unique_id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Vault LDAP Authentication Release Note\nDESCRIPTION: Release note entry documenting the addition of sAMAccountname login support when upndomain is configured in Vault's LDAP authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29118.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth/ldap: Adds an option to enable sAMAccountname logins when upndomain is set. \n```\n```\n\n----------------------------------------\n\nTITLE: Displaying Successful Vault Configuration Message\nDESCRIPTION: This configuration message indicates that the data has been successfully written to the specified endpoint in Vault. This confirms that the configuration changes have been applied.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nSuccess! Data written to: sys/config/group-policy-application\n```\n\n----------------------------------------\n\nTITLE: Configuring PKI Issuer Default Behavior in HashiCorp Vault\nDESCRIPTION: Introduces a new configuration parameter `default_follows_latest_issuer` that allows dynamic control over the default issuer when creating or importing new issuers in the PKI secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17824.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsecrets/pki: Allow issuer creation, import to change default issuer via `default_follows_latest_issuer`.\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault UI Name Constraints Extension Support\nDESCRIPTION: Documents enhancement to Vault UI allowing full specification of name constraints extension when creating root and intermediate CA certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29263.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Add support for the name constraints extension to be fully specified when creating root and intermediate CA certificates.\n```\n\n----------------------------------------\n\nTITLE: Using YAML Frontmatter in Markdown Files\nDESCRIPTION: Example of YAML frontmatter used at the beginning of Markdown files to define metadata like title and description. This metadata is used for HTML title and description tags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 'My Title'\ndescription: \"A thorough, yet succinct description of the page's contents\"\n---\n```\n\n----------------------------------------\n\nTITLE: Vault Build Preference Change\nDESCRIPTION: This snippet represents a release note indicating an improvement in the build process. It signifies that when building the Vault binary, the system now prefers the GOBIN environment variable if it's set. Otherwise, it falls back to the GOPATH/bin directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19862.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n\"build: Prefer GOBIN when set over GOPATH/bin when building the binary\"\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Framework\nDESCRIPTION: This release note highlights the decision to remove the Bulma CSS framework from the Vault UI. This change aims to enhance performance and allow for a more tailored user interface experience without the constraints of the framework.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19878.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\nui: Remove the Bulma CSS framework.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Adding Core Dump Limit to Vault Service File on Linux\nDESCRIPTION: This change adds a LimitCORE=0 setting to the vault.service file for Linux systems. This prevents the service from generating core dumps, which can improve security and system resource management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23272.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.release/linux: add LimitCORE=0 to vault.service\n```\n\n----------------------------------------\n\nTITLE: Logging Duplicate Entity Alias Warnings in Vault\nDESCRIPTION: This log snippet shows the warnings generated by Vault when it detects duplicate entity aliases that differ only by case. These warnings highlight the potential security risks and provide identifiers for both the duplicates and their canonical entities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/different-case.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n[WARN]  identity: 2 different-case entity alias duplicates found (potential security risk)\n[WARN]  identity: entity-alias \"alias-case\" with mount accessor \"auth_userpass_34aca7ec\" duplicates 1 others: id=df3568a4-3b65-4104-9481-1129ecbed72f canonical_id=5f013d99-a6c7-9a00-6ad5-4ad724b14f60 force_deduplication=\"would merge into entity 7da76b0d-fe9b-a125-3362-2a8ff055dcf8\"\n[WARN]  identity: entity-alias \"alias-cAsE\" with mount accessor \"auth_userpass_34aca7ec\" duplicates 1 others: id=2992253b-1e99-4e47-b6f9-afb0c7cedf7a canonical_id=7da76b0d-fe9b-a125-3362-2a8ff055dcf8 force_deduplication=\"would merge others into this entity\"\n[WARN]  identity: entity-alias \"alias-case\" with mount accessor \"auth_userpass_a555989a\" duplicates 1 others: id=0e4bd46e-a868-4dd4-a34a-cb73f097e3a5 canonical_id=1ce06951-e2fd-0923-8ae0-a0e2c6c2378b force_deduplication=\"would merge into entity 37f41fcf-5e15-f13f-248d-9fa8405b1ecd\"\n[WARN]  identity: entity-alias \"alias-cAsE\" with mount accessor \"auth_userpass_a555989a\" duplicates 1 others: id=6cafe546-665c-4bd0-a4fd-5e699ba413c1 canonical_id=37f41fcf-5e15-f13f-248d-9fa8405b1ecd force_deduplication=\"would merge others into this entity\"\n[WARN]  identity: end of different-case entity-alias duplicates\n```\n\n----------------------------------------\n\nTITLE: Listing Groups by Name - Vault Identity API (JSON Response)\nDESCRIPTION: This JSON response presents the list of group names returned when listing groups by name in Vault's Identity store. The response contains a \"keys\" array listing the names of the available groups.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"testgroupname\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SDK Rotation Manager Helpers Release Note\nDESCRIPTION: Documents the addition of helper functions and Community Edition stubs to facilitate plugin communication with the Rotation Manager in Vault Enterprise.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29273.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsdk: Add helpers and CE stubs for plugins to communicate with Rotation Manager (Enterprise).\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout via Environment Variable in Vault\nDESCRIPTION: This release note documents an improvement that allows the timeout for encryption count tracking persistence to be configured using an environment variable. This enhancement aims to provide flexibility in tuning timeout settings according to deployment needs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25636.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:improvement\\ncore: make the best effort timeout for encryption count tracking persistence configurable via an environment variable.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Vault UI API Explorer Bug Fix Release Note\nDESCRIPTION: Release note entry documenting a fix for an API explorer routing issue in the Vault user interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12354.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:bug\nui: Fixed api explorer routing bug\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Core Login MFA Policy Optimization\nDESCRIPTION: Bug fix release note that documents an optimization in Vault's core login MFA process. The fix eliminates redundant policy derivation during MFA checks, improving performance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23894.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: Skip unnecessary deriving of policies during Login MFA Check.\n```\n\n----------------------------------------\n\nTITLE: Updating AliCloud Secrets Plugin Version\nDESCRIPTION: Indicates a version upgrade for the AliCloud secrets plugin from v0.5.4-beta1.0.20230330124709-3fcfc5914a22 to v0.15.0 in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20787.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/alicloud: Updated plugin from v0.5.4-beta1.0.20230330124709-3fcfc5914a22 to v0.15.0\n```\n\n----------------------------------------\n\nTITLE: Tracking Identity Entity Alias Count Metric\nDESCRIPTION: A Vault metric that provides a gauge of the number of identity entity aliases currently stored, updated at regular intervals specified by usage_gauge_period\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/identity/entity/alias/count.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.identity.entity.alias.count\n\nMetric type | Value   | Description\n----------- | ------- | -----------\ngauge       | aliases | The number of identity entities aliases (per authN mount) currently stored in Vault\n```\n\n----------------------------------------\n\nTITLE: Exposing secret_id_accessor in AppRole Authentication for Vault\nDESCRIPTION: This improvement exposes the secret_id_accessor as a WrappedAccessor when creating a wrapped secret-id in the AppRole authentication method. This enhancement provides more flexibility and control over secret management in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12425.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth/approle: expose secret_id_accessor as WrappedAccessor when creating wrapped secret-id.\n```\n```\n\n----------------------------------------\n\nTITLE: Vault PKI: Supporting Y10K value\nDESCRIPTION: This code snippet is a release note that describes the improvement of the PKI engine in Vault to support the Y10K value in the `notAfter` field. This enhancement ensures compliance with the IEEE 802.1AR-2018 standard for generated certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12795.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:improvement\ncore/pki: Support Y10K value in notAfter field to be compliant with IEEE 802.1AR-2018 standard\n`\n```\n\n----------------------------------------\n\nTITLE: Release Note: Fix for PKCS7 Slice Out-of-Bounds Panic\nDESCRIPTION: This release note indicates a bug fix in the `helper/pkcs7` package. It addresses a slice out-of-bounds panic issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24891.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nhelper/pkcs7: Fix slice out-of-bounds panic\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Pinned Plugin Versions - Response\nDESCRIPTION: Sample JSON response showing the list of pinned plugin versions with their details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-pins.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"pinned_versions\": [\n            {\n                \"name\": \"github\",\n                \"type\": \"auth\",\n                \"version\": \"v1.0.0\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Panic in CLI due to Backslash Parsing - Vault\nDESCRIPTION: This release note describes a bug fix that resolves a panic condition in the Vault CLI when parsing key=value pairs where the value is a single backslash. This improvement enhances the robustness and reliability of the CLI under specific input conditions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14523.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\ncli: Fix panic caused by parsing key=value fields whose value is a single backslash\"\n```\n\n----------------------------------------\n\nTITLE: Vault Raft TLS Key Rotation Bug Fix Release Note\nDESCRIPTION: Release note detailing a fix for a panic that occurred during Raft TLS key rotation when the active key exceeded 24 hours in age.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15156.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nrafft: fix Raft TLS key rotation panic that occurs if active key is more than 24 hours old\n```\n\n----------------------------------------\n\nTITLE: Deprecating Roleset Paths in GCP Secrets Engine of Vault\nDESCRIPTION: This deprecation notice informs users about the obsolescence of certain paths for generating secrets for rolesets in the GCP Secrets Engine. New paths are provided as replacements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12023.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:deprecation\nsecrets/gcp: Deprecated the `/gcp/token/:roleset` and `/gcp/key/:roleset` paths for generating\nsecrets for rolesets. Use `/gcp/roleset/:roleset/token` and `/gcp/roleset/:roleset/key` instead.\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Formatted GitHub Issue Reference\nDESCRIPTION: Format for referencing GitHub issues in Markdown with a descriptive text and link to the specific pull request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4237](https://github.com/hashicorp/vault/pull/4237)]\n```\n\n----------------------------------------\n\nTITLE: Documenting Raft Batch Size Selection Improvement in Markdown\nDESCRIPTION: A release note entry that documents an improvement to the Raft storage backend in HashiCorp Vault. The improvement focuses on enhancing the batch size selection mechanism in Raft, which likely improves performance or resource utilization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11907.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nraft: Improve raft batch size selection\n```\n```\n\n----------------------------------------\n\nTITLE: Changing Driver Library for Redshift\nDESCRIPTION: This release note indicates the update of the underlying driver library for Redshift from lib/pq to pgx, which is expected to improve efficiency and support for database operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15343.txt#2025-04-14_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\ndatabase/redshift: Change underlying driver library from [lib/pq](https://github.com/lib/pq) to [pgx](https://github.com/jackc/pgx)\"\n```\n\n----------------------------------------\n\nTITLE: Release Note for Path Validation Error Response Change\nDESCRIPTION: Documents a change in Vault's error handling where requests that fail path validation due to relative path checks now return a 400 Bad Request status code instead of a 500 Internal Server Error. This change improves error clarity by correctly indicating client-side validation failures.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14328.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\ncore: A request that fails path validation due to relative path check will now be responded to with a 400 rather than 500.\n```\n\n----------------------------------------\n\nTITLE: Identity Alias Rename Validation Bug Fix Release Note\nDESCRIPTION: Release note documenting a fix that prevents duplicate identity aliases by validating that the combination of name and accessor is unique during rename operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12473.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nidentity: Fail alias rename if the resulting (name,accessor) exists already\n```\n\n----------------------------------------\n\nTITLE: Cassandra Backend: Add `disable_host_initial_lookup` option\nDESCRIPTION: This code snippet represents a release note indicating the addition of the `disable_host_initial_lookup` configuration option to the Cassandra backend.  This option allows administrators to disable the initial host lookup, which might be useful in certain environments. The functionality is intended to improve performance or address specific deployment needs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/9733.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:improvement\ndb/cassandra: Add `disable_host_initial_lookup` option to backend, allowing the disabling of initial host lookup.\n`\n```\n\n----------------------------------------\n\nTITLE: Vault Bug Fix Release Note\nDESCRIPTION: This release note indicates a fix for warnings logged on performance standbys related to stored versions within the Vault core. It signifies an improvement in the stability and reliability of Vault's performance standby nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13042.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\ncore: Fix warnings logged on perf standbys re stored versions\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting ZooKeeper PUT Metric in Vault\nDESCRIPTION: This snippet describes the 'vault.zookeeper.put' metric, which measures the time taken to complete a PUT operation against the ZooKeeper backend in Vault. The metric is of type 'summary' and is measured in milliseconds (ms).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/zookeeper/put.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.zookeeper.put ((#vault-zookeeper-put))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `PUT` operation against the ZooKeeper backend\n```\n\n----------------------------------------\n\nTITLE: Handlebars Template for Configuration Display with Error Handling\nDESCRIPTION: Handlebars template that conditionally renders content based on configuration status. It displays configuration fields, errors, or a configuration call-to-action depending on the state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/fetch-secrets-engine-config.md#2025-04-14_snippet_2\n\nLANGUAGE: handlebars\nCODE:\n```\n{{#if @configModel}}\n  {{#each @configModel.fields as |field|}}\n    <InfoTableRow @label={{field.label}} @value={{field.value}} />\n  {{/each}}\n{{else if @configError}}\n  <Page::Error @error={{@configError}} />\n{{else}}\n  <ConfigCta />\n{{/if}}\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Policy Input Toolbar Scrolling in Vault\nDESCRIPTION: This release note entry documents a bug fix in the Vault user interface. The fix addresses an issue with the policy input toolbar, which was previously scrolling by default.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23297.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fixes policy input toolbar scrolling by default\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Lease Lookup Command to Vault CLI and API\nDESCRIPTION: This release note indicates the addition of a new lease lookup command to both the Vault CLI and API. This feature allows users to retrieve information about existing leases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11129.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\ncli/api: Add lease lookup command\n```\n```\n\n----------------------------------------\n\nTITLE: Vault UI Backend Mounting Bug Fix Release Note\nDESCRIPTION: Release note indicating a bug fix that addresses how the Vault UI handles API errors when mounting backend systems. This improves error handling reliability during backend mount operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14551.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: Fix issue where UI incorrectly handled API errors when mounting backends\n```\n\n----------------------------------------\n\nTITLE: Refactoring Kubernetes Secrets Metadata Parameters\nDESCRIPTION: Splits the existing `additional_metadata` parameter into two separate parameters: `extra_annotations` and `extra_labels` to provide more granular control over Kubernetes secret metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15655.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Before (deprecated)\nsecrets/kubernetes additional_metadata = {...}\n\n# After (new approach)\nsecrets/kubernetes extra_annotations = {...}\nsecrets/kubernetes extra_labels = {...}\n```\n\n----------------------------------------\n\nTITLE: PKI Secret Engine Release Note Enhancement\nDESCRIPTION: Introduces a new configuration value 'always_enforce_err' for the leaf_not_after_behavior setting in PKI secret engine. This value enforces strict error handling when requested TTL values exceed the issuer's NotAfter value, applying to all scenarios including CA issuance and ACME requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28907.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsecret/pki: Introduce a new value `always_enforce_err` within `leaf_not_after_behavior` to force the error in all circumstances such as CA issuance and ACME requests if requested TTL values are beyond the issuer's NotAfter.\n```\n\n----------------------------------------\n\nTITLE: Release Note Entry for UI Fix Reversion in Markdown\nDESCRIPTION: A release note entry formatted in markdown documenting the reversion of a UI fix from PR #11423 in the Vault project.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12008.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: Revert fix for PR [11423](https://github.com/hashicorp/vault/pull/11423).\n```\n\n----------------------------------------\n\nTITLE: Empty JSON Payload for Reindexing Request\nDESCRIPTION: Sample empty JSON payload for the replication reindexing endpoint. Parameters can be added to customize the reindexing behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{}\n```\n\n----------------------------------------\n\nTITLE: Documenting Cassandra Storage Tuning Parameters in Vault (Markdown)\nDESCRIPTION: This release note snippet describes improvements to the Cassandra storage backend in Vault. It introduces new tuning parameters for optimizing performance in clustered environments, including connection timeout settings and retry policy configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10467.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nstorage/cassandra: tuning parameters for clustered environments `connection_timeout`, `initial_connection_timeout`, `simple_retry_policy_retries`.\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Boolean Parsing in Agent\nDESCRIPTION: This snippet outlines a bug fix where the parsing of boolean environment variables for the configuration of the agent component was erroneous. This fix corrects how the agent interprets these variables, ensuring accurate configuration behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24790.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"agent: Fixed incorrect parsing of boolean environment variables for configuration.\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Imported Vault Mount Resource\nDESCRIPTION: Shows how to verify an imported Vault mount resource using terraform state show command. Displays the full configuration of the admin_keys plugin mount including its accessor, path, and type settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nterraform state show vault_mount.admin_keys_plugin\n```\n\n----------------------------------------\n\nTITLE: Updating Terraform Secrets Plugin in Vault (Markdown)\nDESCRIPTION: This release note indicates an update to the Terraform secrets plugin within HashiCorp Vault. The plugin has been upgraded to version 0.10.0, which may include new features, bug fixes, or improvements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28312.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/terraform: Update plugin to v0.10.0\n```\n```\n\n----------------------------------------\n\nTITLE: Database Context Invalidation Bug Fix\nDESCRIPTION: Release note indicating a fix for canceling context before invalidating queue to prevent potential deadlock situations in HashiCorp Vault's database operations\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15933.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ndatabase: Invalidate queue should cancel context first to avoid deadlock\n```\n\n----------------------------------------\n\nTITLE: Using MDX Alert Components\nDESCRIPTION: Examples of MDX inline alert components that can be used to display different types of notifications including tips, highlights, notes, and warnings to users.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_3\n\nLANGUAGE: mdx\nCODE:\n```\n## Alert types\n\n### Tip\n\n<Tip>\n  To provide general information to the user regarding the current context or\n  relevant actions.\n</Tip>\n\n### Highlight\n\n<Highlight>\n  To provide general or promotional information to the user prominently.\n</Highlight>\n\n### Note\n\n<Note>\n  To help users avoid an issue. Provide guidance and actions if possible.\n</Note>\n\n### Warning\n\n<Warning>\n  To indicate critical issues that need immediate action or help users\n  understand something critical.\n</Warning>\n\n## Title override prop\n\n<Note title=\"Hashiconf 2027\">To provide general information.</Note>\n```\n\n----------------------------------------\n\nTITLE: Testing Health for Auto-Seal Backends\nDESCRIPTION: This release note indicates an improvement in the core Vault functionality to periodically test the health of connectivity to auto-seal backends. This enhancement aims to ensure reliability and prompt detection of connectivity issues, which is crucial for maintaining secure operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13078.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore: Periodically test the health of connectivity to auto-seal backends\"\n```\n\n----------------------------------------\n\nTITLE: Updating AD Secrets Plugin Version - Markdown Release Note\nDESCRIPTION: Release note entry documenting the update of the Active Directory secrets plugin to version 0.19.0 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28361.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/ad: Update plugin to v0.19.0\n```\n\n----------------------------------------\n\nTITLE: Release Note - Apple M1 Support\nDESCRIPTION: A release note entry documenting the addition of Darwin/ARM64 binary support for Apple M1 CPU architecture in HashiCorp Vault core functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12071.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\ncore: Add a darwin/arm64 binary release supporting the Apple M1 CPU\n```\n\n----------------------------------------\n\nTITLE: Aerospike Storage Backend Dependency Update Release Note\nDESCRIPTION: Release note entry indicating an improvement through upgrading the aerospike-client-go dependency to version 5.6.0 in Vault's Aerospike storage backend implementation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12165.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nstorage/aerospike: Upgrade `aerospike-client-go` to v5.6.0.\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript in Vault UI\nDESCRIPTION: This snippet serves as a release note indicating that TypeScript has been enabled for the Vault UI, which is intended to improve the development process and maintainability of the UI codebase.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17927.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nui: Enable typescript for future development\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Go Version Update in Vault Core\nDESCRIPTION: A release note entry indicating that the Go programming language version used in Vault core has been updated to version 1.23.3.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_go-ver-1190.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ncore: Bump Go version to 1.23.3.\n```\n```\n\n----------------------------------------\n\nTITLE: Consul Storage Backend Entry Size Configuration\nDESCRIPTION: Configure the maximum key-value entry size in Consul using the `kv_max_value_size` parameter. Note that Consul does not chunk entries like Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/storage-entry-size.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nkv_max_value_size = 512\n```\n\n----------------------------------------\n\nTITLE: Vault DR Secondary Authentication Update\nDESCRIPTION: Security release note specifying the use of DR operation token for authenticating raft remove-peer operations on DR secondary nodes in Vault enterprise replication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10758.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nreplication (enterprise): On DR secondaries, use DR operation token to authenticate raft remove-peer.\n```\n\n----------------------------------------\n\nTITLE: Listing Distributed Keys\nDESCRIPTION: Command to list all keys that have been distributed to the Cloud KMS instance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault list keymgmt/kms/gcpckms/key/\n```\n\n----------------------------------------\n\nTITLE: Installing Jippi's Vault PHP SDK\nDESCRIPTION: Command to install Jippi's Vault PHP SDK using Composer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ composer require jippi/vault-php-sdk\n```\n\n----------------------------------------\n\nTITLE: Documenting Mount Path Disclosure Vulnerability Fix in Vault 1.6.2\nDESCRIPTION: Details about a security fix for CVE-2020-25594, where Vault returned different HTTP status codes for existent and non-existent mount paths, potentially allowing unauthenticated brute force attacks to reveal valid mount paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_2021Jan20.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:security\nMount Path Disclosure: Vault previously returned different HTTP status codes for\nexistent and non-existent mount paths. This behavior would allow unauthenticated\nbrute force attacks to reveal which paths had valid mounts. This issue affects\nVault and Vault Enterprise and is fixed in 1.6.2 (CVE-2020-25594).\n```\n```\n\n----------------------------------------\n\nTITLE: Secret Transformation Template Configuration\nDESCRIPTION: Example showing how to use transformation templates to extract values from nested map format secrets using get and dig commands.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/hvs.mdx#2025-04-14_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n    transformation:\n      templates:\n        secret_one:\n          text: '{{- get (get .Secrets \"secret_name\") \"key_one\" -}}'\n        secret_two:\n          text: '{{- dig \"secret_name\" \"key_two\" \"<missing>\" .Secrets -}}'\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Date Display in Vault\nDESCRIPTION: This release note documents a bug fix in the Vault UI. The fix addresses an issue with the date display on expired token notices, ensuring that the correct date is shown to users when a token has expired.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11142.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fix date display on expired token notice\n```\n```\n\n----------------------------------------\n\nTITLE: Reading Lease Count Quota via Vault API\nDESCRIPTION: This cURL command shows how to read the details of a specific lease count quota using the Vault API. It sends a GET request to the appropriate endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/create-lease-count-quota.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                      \\\n  --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n  --request GET                             \\\n  --silent                                  \\\n  ${VAULT_ADDR}/v1/sys/quotas/lease-count/webapp-tokens | jq\n```\n\n----------------------------------------\n\nTITLE: Documenting Go Version Upgrade in Vault Core\nDESCRIPTION: This release note indicates that Vault's core components have been updated to use Go version 1.20. This type of note is typically included in release documentation to inform users and developers about underlying technology changes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_go-ver-1130.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ncore: Bump Go version to 1.20.\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Non-Root Namespace Support for Vault Activity Export API\nDESCRIPTION: This improvement allows the activity export API to be called in non-root namespaces. The resulting records are filtered to include data from the requested namespace and its child namespaces, improving flexibility and granularity of activity data retrieval.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27846.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nactivity: The [activity export API](https://developer.hashicorp.com/vault/api-docs/system/internal-counters#activity-export) can now be called in non-root namespaces. Resulting records will be filtered to include the requested namespace (via `X-Vault-Namespace` header or within the path) and all child namespaces.\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note for OCI Auth Plugin Fix\nDESCRIPTION: Release note entry documenting a bug fix where the alias name in the OCI authentication plugin was incorrectly using a literal string instead of the role name. The fix ensures proper alias naming using the actual role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10952.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nauth/oci: Fixes alias name to use the role name, and not the literal string `name` [[GH-10](https://github.com/hashicorp/vault-plugin-auth-oci/pull/10)]\n```\n\n----------------------------------------\n\nTITLE: Release Note: AWS Authentication Bug Fix\nDESCRIPTION: Addresses a panic in the AWS authentication method when a performance standby node attempts to write or update configurations. This bug fix prevents unexpected crashes in Vault's AWS authentication functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30039.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nauth/aws: fix a panic when a performance standby node attempts to write/update config.\n```\n```\n\n----------------------------------------\n\nTITLE: Cache Clear API Request in Shell\nDESCRIPTION: Example curl command demonstrating how to call the cache clear API endpoint using a JSON payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/caching/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:1234/agent/v1/cache-clear\n```\n\n----------------------------------------\n\nTITLE: Updating Node Version Release Note\nDESCRIPTION: Release note indicating an improvement to the Vault UI system through an update to Node.js version 14. This represents a maintenance update to use the latest stable build.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12049.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Updated node to v14, latest stable build\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Response Definitions for Vault Internal Endpoints\nDESCRIPTION: Release note entry documenting the enhancement of OpenAPI specifications for /sys/internal endpoints in Vault. This improvement helps provide better API documentation and schema definitions for internal system endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18542.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nopenapi: add openapi response definitions to /sys/internal endpoints\n```\n\n----------------------------------------\n\nTITLE: Adding 'vault operator usage' Command in Vault Core Metrics\nDESCRIPTION: This release note indicates an improvement in Vault's core/metrics module. It introduces a new command 'vault operator usage', which likely provides usage statistics or metrics for Vault operators.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10365.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore/metrics: Added \"vault operator usage\" command.\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Agent Cache Persistence Feature\nDESCRIPTION: A release note entry documenting the addition of disk persistence support for the Vault Agent cache. This feature allows the agent cache to be stored on disk and persisted between agent restarts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10938.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nagent: Support for persisting the agent cache to disk\n```\n```\n\n----------------------------------------\n\nTITLE: Sample response for listing static roles\nDESCRIPTION: The response JSON object contains a list of keys representing all static roles in Vault, useful for identifying available roles for management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_32\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"data\": {\\n    \"keys\": [\"example-role\"]\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Delete RGP Policy Request\nDESCRIPTION: Deletes an RGP policy using DELETE method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/policies/rgp/webapp\n```\n\n----------------------------------------\n\nTITLE: Fix tokenization handling metadata\nDESCRIPTION: This release note indicates a bug fix related to how the Transform Secrets Engine handles metadata during tokenization, specifically within the context of exportable stores. The fix ensures proper handling of metadata during tokenization for exportable stores.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1622.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ntransform (enterprise): Fix bug tokenization handling metadata on exportable stores\n```\n\n----------------------------------------\n\nTITLE: Sample response for certificate signing\nDESCRIPTION: This JSON response contains the details returned from a successful request to sign a certificate. It includes the lease ID, duration, and the signed certificate data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"pki/sign-verbatim/7ad6cfa5-f04f-c62a-d477-f33210475d05\",\n  \"renewable\": false,\n  \"lease_duration\": 21600,\n  \"data\": {\n    \"certificate\": \"-----BEGIN CERTIFICATE-----\\nMIIDzDCCAragAwIBAgIUOd0ukLcjH43TfTHFG9qE0FtlMVgwCwYJKoZIhvcNAQEL\\n...\\numkqeYeO30g1uYvDuWLXVA==\\n-----END CERTIFICATE-----\\n\",\n    \"issuing_ca\": \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\",\n    \"ca_chain\": [\n      \"-----BEGIN CERTIFICATE-----\\nMIIDUTCCAjmgAwIBAgIJAKM+z4MSfw2mMA0GCSqGSIb3DQEBCwUAMBsxGTAXBgNV\\n...\\nG/7g4koczXLoUM3OQXd5Aq2cs4SS1vODrYmgbioFsQ3eDHd1fg==\\n-----END CERTIFICATE-----\\n\"\n    ],\n    \"serial_number\": \"39:dd:2e:90:b7:23:1f:8d:d3:7d:31:c5:1b:da:84:d0:5b:65:31:58\"\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Sample response for Session Token request\nDESCRIPTION: This JSON object contains the response from the session token request, featuring the access key, secret key, and session token retrieved through Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"data\": {\\n    \"access_key\": \"AKIA...\",\\n    \"secret_key\": \"xlCs...\",\\n    \"session_token\": \"FwoG...\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: MongoDB WriteConcern Bug Fix Release Note\nDESCRIPTION: Document indicating a bug fix that ensures writeConcern settings are consistently applied across all MongoDB database queries within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18546.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ndatabase/mongodb: Fix writeConcern set to be applied to any query made on the database\n```\n\n----------------------------------------\n\nTITLE: Adding Default OIDC Provider - Release Note\nDESCRIPTION: This release note announces the addition of a default OIDC provider to the HashiCorp Vault identity module. This enhancement improves identity management for applications using OIDC.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14119.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nidentity/oidc: Adds a default OIDC provider\"\n```\n\n----------------------------------------\n\nTITLE: Updating UI Toggle Button Polarity in Vault Database Configuration\nDESCRIPTION: Adjusts the toggle button for skip_rotation_import to ensure displayed values match the values sent to the backend API, improving user interface consistency\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30055.txt#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// UI toggle button polarity update for skip_rotation_import\n```\n\n----------------------------------------\n\nTITLE: Setting TLS Skip Verify via Environment Variable\nDESCRIPTION: Demonstrates how to disable TLS certificate verification using an environment variable. This method persists across sessions but should be used carefully.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/tls-skip-verify.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_SKIP_VERIFY=1\n```\n\n----------------------------------------\n\nTITLE: Running Content Validation for Markdown Files\nDESCRIPTION: Command to validate content changes against a set of rules before committing. This helps ensure content meets the required standards.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm run content-check\n```\n\n----------------------------------------\n\nTITLE: Shared Parameter Template in Markdown\nDESCRIPTION: Template for documenting shared parameters that are used across multiple command families but are not global.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/README.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<a id=\"shared-[arg | option | flag]-NAME\" />\n\n**`NAME (TYPE : DEFAULT)`**\n\nDESCRIPTION\n\n**Example**: `EXAMPLE_OF_VALID_USE`\n```\n\n----------------------------------------\n\nTITLE: Vault Warning Messages for Deprecated Configuration\nDESCRIPTION: Example warning messages displayed when attempting to configure deprecated settings in Vault 1.17.x\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.17.x.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nWARNING! The following warnings were returned from Vault:\n\n* default_report_months is deprecated: defaulting to billing start time\n\n* current_billing_period is deprecated; unless otherwise specified, all requests will default to the current billing period\n```\n\n----------------------------------------\n\nTITLE: Fixing Transit HMAC Key Export in Vault\nDESCRIPTION: Resolves an issue with HMAC key export, ensuring correct key retrieval for sign operations and addressing key sizing limitations\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20864.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/transit: Fix export of HMAC-only key, correctly exporting the key used for sign operations.\n```\n\nLANGUAGE: text\nCODE:\n```\nsecrets/transit: Fix bug related to shorter dedicated HMAC key sizing.\n```\n\nLANGUAGE: text\nCODE:\n```\nsdk/helper/keysutil: New HMAC type policies will have HMACKey equal to Key and be copied over on import.\n```\n\n----------------------------------------\n\nTITLE: Updating Prometheus Client Library for Security Patch\nDESCRIPTION: Upgrades the github.com/prometheus/client_golang dependency to resolve CVE-2022-21698 security vulnerability in HashiCorp Vault's core components\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14190.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore: Update github.com/prometheus/client_golang to fix security vulnerability CVE-2022-21698.\n```\n\n----------------------------------------\n\nTITLE: Joining and Unsealing Additional Pods in HA Raft Mode\nDESCRIPTION: These commands join the remaining pods to the Raft cluster and unseal them, using the internal service provided by the Helm chart for pod communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/openshift.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ oc exec -ti vault-1 -- vault operator raft join http://vault-0.vault-internal:8200\n$ oc exec -ti vault-1 -- vault operator unseal\n\n$ oc exec -ti vault-2 -- vault operator raft join http://vault-0.vault-internal:8200\n$ oc exec -ti vault-2 -- vault operator unseal\n```\n\n----------------------------------------\n\nTITLE: Vault UI Database Connection Bug Fix Release Note\nDESCRIPTION: Release note detailing a fix for database connection updates in the Vault UI. The fix addresses issues when connection URLs contain template variables by implementing proper URL decoding.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29114.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: Decode `connection_url` to fix database connection updates (i.e. editing connection config, deleting roles) failing when urls include template variables.\n```\n\n----------------------------------------\n\nTITLE: Dynamic Curl Installation in Docker Container\nDESCRIPTION: Shows methods for installing curl dynamically in a Vault container using package managers and wget for static binary\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.17.x.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker exec <CONTAINER-ID> apk add curl\n\nkubectl exec -ti <NAME> -- apk add curl\n\ndocker exec <CONTAINER-ID> wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\n\nkubectl exec -ti <NAME> -- wget https://github.com/moparisthebest/static-curl/releases/latest/download/curl-amd64 -O /home/vault/curl && chmod +x /home/vault/curl\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Documentation for PKI Certificate Count Maintenance\nDESCRIPTION: Documents a breaking change where the default behavior for maintaining running count of certificates in the PKI secrets engine will be disabled by default. Provides configuration options for re-enabling count maintenance and metrics publishing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18186.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:breaking-change\nsecrets/pki: Maintaining running count of certificates will be turned off by default.\nTo re-enable keeping these metrics available on the tidy status endpoint, enable\nmaintain_stored_certificate_counts on tidy-config, to also publish them to the\nmetrics consumer, enable publish_stored_certificate_count_metrics .\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Kubernetes Auth Plugin Version - Release Note\nDESCRIPTION: Release note indicating an update of the Vault Kubernetes authentication plugin to version 0.17.1. This change note documents a version bump in the plugin that handles Kubernetes authentication within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22879.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth/kubernetes: Update plugin to v0.17.1\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine's index.js in Vault\nDESCRIPTION: Engine index.js file that uses ember-engines buildEngine function to define the engine's core properties including name and lazy loading settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/ember-engines.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Copyright (c) HashiCorp, Inc.\n * SPDX-License-Identifier: BUSL-1.1\n */\n\n/* eslint-disable node/no-extraneous-require */\nconst { buildEngine } = require('ember-engines/lib/engine-addon');\n\nmodule.exports = buildEngine({\n  name: '<engine-name>',\n  lazyLoading: {\n    enabled: false,\n  },\n  isDevelopingAddon() {\n    return true;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Fixing Systemd Reload Notification in Vault Core\nDESCRIPTION: Release note entry documenting a bug fix that addresses issues with systemd reload notification functionality in Vault's core system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15041.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore: fixed systemd reloading notification\n```\n\n----------------------------------------\n\nTITLE: Vault OIDC Redirect URI Validation Bug Fix\nDESCRIPTION: This snippet represents a release note indicating a bug fix in HashiCorp Vault. The bug fix addresses the early detection of invalid `redirect_uri` values during the authorization endpoint validation within the identity/oidc component.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16601.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n```release-note:bug\nidentity/oidc: Detect invalid `redirect_uri` values sooner in validation of the \nAuthorization Endpoint.\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Secrets Injection via Vault Agent\nDESCRIPTION: This snippet describes the implementation of a process runner that injects secrets into environment variables through the Vault agent. It is designed to enhance security by ensuring that sensitive information is managed properly. The implementation requires the Vault agent and its associated dependencies to function correctly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20628.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nagents: initial implementation of a process runner for injecting secrets via environment variables via vault agent\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Response Definitions for Vault Seal Endpoints\nDESCRIPTION: Release note entry indicating the addition of OpenAPI response definitions to the /sys/seal endpoints in HashiCorp Vault. This improvement enhances API documentation and usability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18625.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nopenapi: add openapi response definitions to /sys/seal endpoints\n```\n\n----------------------------------------\n\nTITLE: Listing Policies via API\nDESCRIPTION: API request to list all policies using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n  --header \"X-Vault-Token: ...\" \\\n  https://vault.hashicorp.rocks/v1/sys/policy\n```\n\n----------------------------------------\n\nTITLE: Read Automatic Tidy Configuration Response Example\nDESCRIPTION: This JSON response shows an example of the data returned when reading the automatic tidy configuration from the `/pki/config/auto-tidy` endpoint. The data section contains parameters such as `enabled`, `interval_duration`, and various `tidy_*` flags to configure the automatic tidy operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_121\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"enabled\": false,\n    \"interval_duration\": 43200,\n    \"issuer_safety_buffer\": 31536000,\n    \"maintain_stored_certificate_counts\": false,\n    \"max_startup_backoff_duration\": 1200,\n    \"min_startup_backoff_duration\": 900,\n    \"pause_duration\": \"0s\",\n    \"publish_stored_certificate_count_metrics\": false,\n    \"revocation_queue_safety_buffer\": 172800,\n    \"safety_buffer\": 259200,\n    \"tidy_cert_store\": false,\n    \"tidy_cross_cluster_revoked_certs\": false,\n    \"tidy_expired_issuers\": false,\n    \"tidy_move_legacy_ca_bundle\": false,\n    \"tidy_revocation_queue\": false,\n    \"tidy_revoked_cert_issuer_associations\": false,\n    \"tidy_revoked_certs\": false,\n    \"tidy_cert_metadata\": false,\n    \"tidy_cmpv2_nonce_store\": false\n  },\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Login Enforcement Configuration\nDESCRIPTION: Curl command to delete a specific login enforcement configuration by name\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/login-enforcement.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/mfa/login-enforcement/foo\n```\n\n----------------------------------------\n\nTITLE: Updating GCP Secrets Plugin Version in Vault Release Note\nDESCRIPTION: Release note entry documenting the update of the GCP secrets plugin to version 0.20.0 in HashiCorp Vault. This represents a change in the secrets management functionality for Google Cloud Platform integration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28324.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/gcp: Update plugin to v0.20.0\n```\n\n----------------------------------------\n\nTITLE: Release Note for Self-Managed Static Roles in Vault Enterprise\nDESCRIPTION: Feature announcement for Self-Managed Static Roles support in SQL database engines including Postgres and Oracle. This feature is exclusively available for Vault Enterprise customers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28199.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Self-Managed Static Roles**: Self-Managed Static Roles are now supported for select SQL database engines (Postgres, Oracle). Requires Vault Enterprise.\n```\n```\n\n----------------------------------------\n\nTITLE: Vault SSH Role: Convert not_before_duration to seconds\nDESCRIPTION: This release note indicates a bug fix in the Vault SSH secrets engine. The `not_before_duration` role field was not being returned in seconds, and this fix ensures the correct conversion before returning the value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15559.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/ssh: Convert role field not_before_duration to seconds before returning it\n```\n\n----------------------------------------\n\nTITLE: Vault PostgreSQL Dynamic Username Customization\nDESCRIPTION: This release note indicates the addition of a feature to the Vault's database secret engine, allowing customization of dynamic usernames for PostgreSQL databases.  This provides more control over generated usernames, likely through configuration options within Vault.  It allows for more flexibility and adherence to specific database naming conventions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10766.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"secrets/database/postgresql: Add ability to customize dynamic usernames\"\n```\n\n----------------------------------------\n\nTITLE: Adding Mount Flag to KV List Command - Release Note\nDESCRIPTION: This release note describes the addition of the -mount flag to the kv list command in the CLI, which allows users to specify a mount point when listing key-value pairs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19378.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\ncli/kv: add -mount flag to kv list\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to S3 Content-Length Fix Pull Request\nDESCRIPTION: Reference to a GitHub pull request that fixes a panic in S3 storage backend when Content-Length header is missing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_15\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4222](https://github.com/hashicorp/vault/pull/4222)]\n```\n\n----------------------------------------\n\nTITLE: Adding Default Key for OIDC Clients - Release Note\nDESCRIPTION: This release note introduces a default key for OIDC clients within the identity module of HashiCorp Vault. This improvement facilitates client management and security for OIDC-based authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14119.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nidentity/oidc: Adds a default key for OIDC clients\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Response Definitions for Vault System Endpoints\nDESCRIPTION: This release note documents an improvement to Vault's OpenAPI specifications. It adds response definitions for five system-related endpoints, enhancing API documentation and integration capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18628.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nopenapi: add openapi response definitions to /sys/version-history, /sys/leader, /sys/ha-status, /sys/host-info, /sys/in-flight-req\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Rollback Waiting Metric Definition Table\nDESCRIPTION: Markdown table defining the vault.rollback.waiting metric which measures the time in milliseconds between when a rollback operation is queued and when it begins execution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/rollback/waiting.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time between queueing a rollback operation and the operation starting\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault UI Path Encoding Bug Fix\nDESCRIPTION: This release note documents a fix for a bug in the Vault UI where spaces in secret paths were being double encoded, preventing users from viewing version history.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10596.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fix bug that double encodes secret route when there are spaces in the path and makes you unable to view the version history.\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing CPU Usage in Agent - Vault\nDESCRIPTION: This snippet describes a bug fix related to excessive CPU usage during normal operation in the agent component of Vault. No specific dependencies are noted, but it addresses performance issues that could affect overall system reliability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27518.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\nagent: Fixed an issue causing excessive CPU usage during normal operation\"\n```\n\n----------------------------------------\n\nTITLE: Vault UI Language Update in Transit Secret Engine\nDESCRIPTION: This release note indicates a UI improvement in HashiCorp Vault's Transit secret engine. The language used in the UI is updated to reflect that not all keys within the Transit secret engine are solely for encryption purposes, providing a more accurate representation of key functionalities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27346.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"ui: Update language in Transit secret engine to reflect that not all keys are for encyryption\"\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP Schema Compatibility Bug Fix Release Note in Markdown\nDESCRIPTION: Release note entry detailing a bug fix that addresses schema compatibility issues with rotate-root functionality in the OpenLDAP secrets engine. The fix was implemented through pull request #24 in the vault-plugin-secrets-openldap repository.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12019.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsecrets/openldap: Fix bug where schema was not compatible with rotate-root [#24](https://github.com/hashicorp/vault-plugin-secrets-openldap/pull/24)\n```\n\n----------------------------------------\n\nTITLE: Documenting Go Version Update in Release Notes for Vault Project\nDESCRIPTION: This code snippet is a release note in markdown format. It indicates a change in the Vault project, specifically updating the Go programming language version to 1.16.7. This type of note is typically used in version control systems to document changes between releases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12408.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ngo: Update go version to 1.16.7\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Client Private Key Path\nDESCRIPTION: Examples showing how to set the path to a PEM-encoded private key using either a CLI flag or environment variable. The private key must correspond to the client certificate specified with -client-cert.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/client-key.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n-client-key \"/path/to/keys/myprivatekey.pem\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_CLIENT_KEY=\"/path/to/keys/myprivatekey.pem\"\n```\n\n----------------------------------------\n\nTITLE: CouchDB Storage Backend List Operation Metric\nDESCRIPTION: Measures the time required to complete a LIST operation against the CouchDB storage backend in HashiCorp Vault. The metric is reported in milliseconds and helps monitor performance of listing operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/couchdb/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.couchdb.list ((#vault-couchdb-list))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `LIST` operation against the CouchDB storage backend\n```\n\n----------------------------------------\n\nTITLE: Deleting an Impersonated Account (cURL)\nDESCRIPTION: cURL command to delete an existing impersonated account from the GCP secrets engine by sending a DELETE request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_29\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/gcp/impersonated-account/my-token-impersonate\n```\n\n----------------------------------------\n\nTITLE: List Unused ACME EAB Binding Tokens via CURL\nDESCRIPTION: This CURL request lists all unused ACME EAB binding tokens available within a specified Vault path. Tokens used for requesting certificates are excluded from this list.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/eab\n```\n\n----------------------------------------\n\nTITLE: Fixing Local Mount Table Size Metrics in Vault Core\nDESCRIPTION: Bug fix implementation that corrects the table size metric calculation for local mounts within Vault's core metrics system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14755.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore/metrics: Fix incorrect table size metric for local mounts\n```\n\n----------------------------------------\n\nTITLE: Fixing JWT Verification Key Updates after jwks_url Change\nDESCRIPTION: Bug fix that resolves an issue where JWT verification keys were not being properly updated after a change to the jwks_url configuration, ensuring proper key rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10919.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nauth/jwt: Fixes an issue where JWT verification keys weren't updated after a `jwks_url` change.\n```\n```\n\n----------------------------------------\n\nTITLE: Release Note - Vault Permission Fix\nDESCRIPTION: Release note entry documenting a bug fix that corrects incorrect 'permission denied' errors occurring during HelpOperations on paths protected by sudo privileges in HashiCorp Vault's core functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18568.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: Fix spurious `permission denied` for all HelpOperations on sudo-protected paths\n```\n\n----------------------------------------\n\nTITLE: Vault 1.6.0 Release Notes Frontmatter\nDESCRIPTION: YAML frontmatter defining the page title and description for the Vault 1.6.0 release notes documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.6.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: 1.6.0\ndescription: |-\n  This page contains release notes for Vault 1.6.0.\n---\n```\n\n----------------------------------------\n\nTITLE: Release Note: Kubernetes Secrets Engine Documentation\nDESCRIPTION: This release note signals an improvement to the Vault documentation by adding usage documentation for the Kubernetes Secrets Engine. This addition helps users understand how to effectively use the Kubernetes Secrets Engine within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15527.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"website/docs: Add usage documentation for Kubernetes Secrets Engine\"\n```\n\n----------------------------------------\n\nTITLE: Using withConfig in an Overview Route with Multiple Data Sources\nDESCRIPTION: Example of using the withConfig decorator in a route that fetches multiple resources. It uses the promptConfig property to determine if configuration is needed while also loading other data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/fetch-secrets-engine-config.md#2025-04-14_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n@withConfig('foo/config')\nexport default class FooOverviewRoute extends Route {\n  @service store;\n  @service secretMountPath;\n\n  model() {\n    const backend = this.secretMountPath.currentPath;\n    return hash({\n      promptConfig: this.promptConfig,\n      roles: this.store.query('foo/role', { backend }).catch(() => []),\n      libraries: this.store.query('foo/library', { backend }).catch(() => []),\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Endpoint Path in Markdown\nDESCRIPTION: Specifies the main API endpoint path for internal inspection in Vault using Markdown heading syntax.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/inspect/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `/sys/internal/inspect`\n```\n\n----------------------------------------\n\nTITLE: Measuring Cassandra List Operation Timing\nDESCRIPTION: A metric that tracks the time (in milliseconds) taken to complete a list operation in the Vault Cassandra storage backend. This helps in monitoring and analyzing storage backend performance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/cassandra/list.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.cassandra.list ((#vault-cassandra-list))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `LIST` operation against the Cassandra storage backend\n```\n\n----------------------------------------\n\nTITLE: Listing Available Library Types Response\nDESCRIPTION: JSON response showing available library types in the system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ldap.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\"backend\", \"frontend\"]\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Directories on PowerShell\nDESCRIPTION: This snippet creates the Vault home, data, configuration, and logs directories on a Windows system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Item -ItemType Directory -Path \"${env:VAULT_HOME}\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Item -ItemType Directory -Path \"${env:VAULT_HOME}/Data\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Item -ItemType Directory -Path \"${env:VAULT_HOME}/Config\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Item -ItemType Directory -Path \"${env:VAULT_HOME}/Logs\"\n```\n\n----------------------------------------\n\nTITLE: Fix for Vault Seal Status API Deadlock\nDESCRIPTION: Release note describing a bug fix that resolves a deadlock condition occurring during seal-status API calls when namespace configuration is present on the request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23861.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\napi/seal-status: Fix deadlock on calls to sys/seal-status with a namespace configured\non the request.\n```\n\n----------------------------------------\n\nTITLE: Updating AD Secrets Plugin Version\nDESCRIPTION: Release note indicating an update to the Active Directory secrets plugin to version 0.20.1\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29648.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsecrets/ad: Update plugin to v0.20.1\n```\n\n----------------------------------------\n\nTITLE: Patching KV Secret with Additional Key\nDESCRIPTION: This shell command demonstrates how to use the 'vault kv patch' command to add a new key-value pair to an existing set of secrets stored at 'secret/data/creds'. The command adds 'ttl=48h' without replacing the existing data. It requires the Vault CLI to be configured and accessible.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/patch.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv patch -mount=secret creds ttl=48h\n== Secret Path ==\nsecret/data/creds\n\n======= Metadata =======\nKey              Value\n---              -----\ncreated_time     2019-06-06T16:46:22.090654Z\ndeletion_time    n/a\ndestroyed        false\nversion          6\n```\n\n----------------------------------------\n\nTITLE: Including Log Format Partial in Vault CLI Documentation\nDESCRIPTION: This HTML snippet defines an anchor for the shared log format flag and includes the global log-format partial. It's used to maintain consistency in CLI-related documentation for HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/shared/flags/log-format.mdx#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a id=\"shared-flag-log-format\" />\n\n@include 'global-settings/both/log-format.mdx'\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Cache Configuration\nDESCRIPTION: JSON payload for setting the number of entries in the Vault Transit Secrets Engine cache. A size of zero means unlimited entries, while a non-zero size indicates a limited number based on the LRU strategy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_74\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"size\": 456\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Generic KV Mount Support for Secret Count Metric\nDESCRIPTION: Release note entry describing a bug fix that adds support for tracking secret counts in generic KV mounts through the vault.kv.secret.count telemetry metric.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12020.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore/metrics: Add generic KV mount support for vault.kv.secret.count telemetry metric\n```\n\n----------------------------------------\n\nTITLE: Release Note Entry for PKI Secrets UTC Time Handling Fix\nDESCRIPTION: A release note entry documenting a bug fix that ensures consistent UTC time usage when displaying CA certificate expiration error messages in Vault's PKI secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18984.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:bug\nsecrets/pki: consistently use UTC for CA's notAfter exceeded error message\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Lambda Extension for AMD64 Architecture\nDESCRIPTION: ARN for including the Vault Lambda Extension as a layer in your Lambda function for AMD64 (x86_64) architecture.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\narn:aws:lambda:<your-region>:634166935893:layer:vault-lambda-extension:18\n```\n\n----------------------------------------\n\nTITLE: Fixing LDAP Roles Quick Actions Navigation\nDESCRIPTION: Bug fix addressing navigation issues in the quick actions popup menu for LDAP roles within the Vault UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29293.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nui: Fixes navigation for quick actions in LDAP roles' popup menu\n```\n\n----------------------------------------\n\nTITLE: Token Tidy Operation Response in Vault (JSON)\nDESCRIPTION: Sample JSON response for a token tidy operation in Vault. It includes a request ID and a warning message indicating the successful start of the tidy operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"84437c7f-36a1-6c1d-381d-14ec99217e94\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"wrap_info\": null,\n  \"warnings\": [\n    \"Tidy operation successfully started. Any information from the operation will be printed to Vault's server logs.\"\n  ],\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring log_raw Audit Option in Vault\nDESCRIPTION: Sets the log_raw option to true, which enables logging of raw sensitive security information in Vault's audit device. By default, this option is set to false for security reasons.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/log_raw.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nlog_raw=true\n```\n\n----------------------------------------\n\nTITLE: Core Update - Go Version Bump\nDESCRIPTION: Update to core Vault codebase upgrading the Go version to 1.19.3.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v1.10-v1.15.md#2025-04-14_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n1.19.3\n```\n\n----------------------------------------\n\nTITLE: Adding MySQL Dynamic Username Customization Feature Release Note\nDESCRIPTION: Release note entry documenting a feature enhancement for MySQL database secrets engine in HashiCorp Vault that adds support for customizing dynamically generated usernames.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10834.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\nsecrets/database/mysql: Add ability to customize dynamic usernames\n```\n\n----------------------------------------\n\nTITLE: Documenting KV v2 Patch Update Feature in Vault (Markdown)\nDESCRIPTION: This release note describes the addition of partial update support for the KV v2 secret engine in Vault. It specifies the endpoint, HTTP method, and new ACL capability required for this feature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12687.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**KV patch**: Add partial update support the for the `/<mount>/data/:path` kv-v2\nendpoint through HTTP `PATCH`.  A new `patch` ACL capability has been added and\nis required to make such requests.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Storage Backend in Vault\nDESCRIPTION: Basic structure for configuring a storage backend in Vault's configuration file using the storage stanza. The configuration accepts a NAME parameter and additional PARAMETERS specific to the chosen backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/index.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nstorage [NAME] {\n  [PARAMETERS...]\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Key with Vault API\nDESCRIPTION: This code snippet demonstrates how to delete a key in Vault via the PKI secrets engine. It sends a DELETE request to the `/pki/key/:key_ref` endpoint, specifying the key reference.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_79\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/pki/key/key-root-x1\n```\n\n----------------------------------------\n\nTITLE: Vault Agent SIGHUP Panic Bug Fix\nDESCRIPTION: This release note indicates that a bug causing a panic in Vault Agent when a SIGHUP signal is sent while the Agent has a non-TLS listener has been fixed. The fix ensures the Agent does not panic under these circumstances, improving stability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19483.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nagent: Fix panic when SIGHUP is issued to Agent while it has a non-TLS listener.\n`\n```\n\n----------------------------------------\n\nTITLE: OIDC Provider: List Request\nDESCRIPTION: This is a sample `curl` request to list all OIDC providers. It sends a LIST request to the specified endpoint, including the Vault token. Replace `...` with your Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider\n```\n\n----------------------------------------\n\nTITLE: Fixing UI Footer Version Changelog Link in Vault\nDESCRIPTION: Release note documenting a bug fix that corrects the footer URL to properly link to the correct version changelog in the Vault UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10491.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nui: Fix footer URL linking to the correct version changelog.\n```\n\n----------------------------------------\n\nTITLE: Updating GCP KMS Secrets Plugin Version\nDESCRIPTION: Release note indicating the Google Cloud Platform KMS secrets plugin for HashiCorp Vault has been updated to version 0.19.0.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28360.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/gcpkms: Update plugin to v0.19.0\n```\n\n----------------------------------------\n\nTITLE: Updating AppRole Secret ID Generation Response in Vault\nDESCRIPTION: The Secret ID generation endpoint for the AppRole authentication method now includes the 'secret_id_ttl' field in its response. This change provides additional information about the TTL of the generated Secret ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10826.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:changes\nauth/approle: Secrets ID generation endpoint now returns `secret_id_ttl` as part of its response.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Authentication Plugin\nDESCRIPTION: Release note indicating an update to the Azure authentication plugin to version 0.20.3 in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30082.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/azure: Update plugin to v0.20.3\n```\n\n----------------------------------------\n\nTITLE: Adding Automated Root Rotation to AWS Auth and Secrets Plugins\nDESCRIPTION: This release note highlights the introduction of Automated Root Rotation capabilities for the AWS Auth and AWS Secrets plugins, which enables users to schedule and automate credential rotations via the Rotation Manager. This feature is exclusive to the Enterprise version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29497.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:feature\\n**Automated Root Rotation**: Adds Automated Root Rotation capabilities to the AWS Auth and AWS Secrets\\nplugins. This allows plugin users to automate their root credential rotations based on configurable\\nschedules/periods via the Rotation Manager. Note: Enterprise only.\"\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace Search to Vault UI Client Count Views\nDESCRIPTION: Release note entry documenting the addition of namespace search functionality to client count views in the Vault UI. This improvement enhances the ability to filter and locate specific namespaces when viewing client counts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12577.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nui: namespace search in client count views\n```\n\n----------------------------------------\n\nTITLE: Basic Username Template Example in Go\nDESCRIPTION: A simple example of username templating using DisplayName and RoleName fields. This demonstrates basic string substitution but lacks randomness for actual use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/username-templating.mdx#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{.DisplayName}}_{{.RoleName}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Server with TLS in HCL\nDESCRIPTION: This configuration snippet defines a Vault server setup using an in-memory backend, with TCP listener configured for TLS using certificate files. It sets default and maximum lease TTLs and disables mlock for development purposes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/builtin/credential/cert/test-fixtures/generate.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nbackend \"inmem\" {\n}\ndisable_mlock = true\ndefault_lease_ttl = \"700h\"\nmax_lease_ttl = \"768h\"\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n  tls_cert_file = \"./cacert.pem\"\n  tls_key_file = \"./cakey.pem\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Host Information using cURL in Vault API\nDESCRIPTION: A shell command example showing how to make a GET request to the /sys/host-info endpoint with authentication. This request retrieves information about the host instance running the Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/host-info.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/host-info\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret Engine Configuration in Vault Core (Markdown)\nDESCRIPTION: This release note documents an improvement in Vault's core functionality. The API endpoint 'sys/mounts/:path' now returns the configuration for the secret engine at the specified path when read.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12792.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: Reading `sys/mounts/:path` now returns the configuration for the secret engine at the given path\n```\n```\n\n----------------------------------------\n\nTITLE: Checking Performance Standby Status with Vault CLI\nDESCRIPTION: Demonstrates how to use the 'vault status' command to verify if a node is functioning as a performance standby. The output displays various status information including HA mode, active node address, and performance standby indicators.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/performance-standby.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault status\nKey                                    Value\n---                                    -----\nSeal Type                              shamir\nSealed                                 false\nTotal Shares                           1\nThreshold                              1\nVersion                                0.11.0+ent\nCluster Name                           vault-cluster-d040e74c\nCluster ID                             9f82e03b-71fb-97a6-9c5a-46fa6715d6e4\nHA Enabled                             true\nHA Cluster                             https://127.0.0.1:8201\nHA Mode                                standby\nActive Node Address                    http://127.0.0.1:8200\nPerformance Standby Node               true\nPerformance Standby Last Remote WAL    380329\n```\n\n----------------------------------------\n\nTITLE: Read Identity Access List Tidy Settings Request\nDESCRIPTION: cURL command to retrieve identity access list tidy configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/aws.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/auth/aws/config/tidy/identity-accesslist\n```\n\n----------------------------------------\n\nTITLE: Documenting IP Address Disclosure Vulnerability Fix in Vault 1.6.2\nDESCRIPTION: Details about a security fix for CVE-2021-3024, where Vault would expose internal IP addresses in error messages under certain error conditions, affecting both Vault and Vault Enterprise.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_2021Jan20.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:security\nIP Address Disclosure: We fixed a vulnerability where, under some error\nconditions, Vault would return an error message disclosing internal IP\naddresses. This vulnerability affects Vault and Vault Enterprise and is fixed in\n1.6.2 (CVE-2021-3024).\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a New Templetized ACL Policy - HCL\nDESCRIPTION: This snippet defines a new ACL policy that uses a reference to the metadata field 'old_name'. It allows read, create, and update capabilities on a specified path based on the entity's old name. The requirement is to create ACL files in HCL format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/acl-policy-templates.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\npath \"kv/users/{{identity.entity.metadata.old_name}}/*\" {\n  capabilities = [\"read\", \"create\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zyborg.Vault PowerShell Module\nDESCRIPTION: PowerShell command to install the Zyborg.Vault PowerShell module.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_17\n\nLANGUAGE: PowerShell\nCODE:\n```\nInstall-Module Zyborg.Vault\n```\n\n----------------------------------------\n\nTITLE: Changing Default Configuration Parameter for Azure Secrets Engine - Markdown\nDESCRIPTION: This snippet outlines the change in the Azure secrets configuration, specifically altering the `use_microsoft_graph_api` parameter to be enabled by default. This modification aims to streamline the integration with Microsoft's API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14130.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:change\\nsecrets/azure: Changes the configuration parameter `use_microsoft_graph_api` to use the Microsoft \\nGraph API by default.\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Reading Rekey Progress Sample Request\nDESCRIPTION: HTTP GET request to check the status of an ongoing rekey operation\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/rekey-recovery-key/init\n```\n\n----------------------------------------\n\nTITLE: Duo MFA Method Response JSON\nDESCRIPTION: JSON response returned when reading a Duo MFA method configuration. Contains all the configuration details including api_hostname, integration_key, mount_accessor, and other settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/duo.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"api_hostname\": \"api-2b5c39f5.duosecurity.com\",\n    \"id\": \"0ad21b78-e9bb-64fa-88b8-1e38db217bde\",\n    \"integration_key\": \"BIACEUEAXI20BNWTEYXT\",\n    \"mount_accessor\": \"auth_userpass_1793464a\",\n    \"name\": \"my_duo\",\n    \"pushinfo\": \"\",\n    \"secret_key\": \"8C7THtrIigh2rPZQMbguugt8IUftWhMRCOBzbuyz\",\n    \"type\": \"duo\",\n    \"username_format\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response from Vault Audit Hash Endpoint\nDESCRIPTION: Example JSON response returned from the /sys/audit-hash endpoint. It contains a 'hash' field with the calculated hash value using the specified audit device's hash function and salt.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/audit-hash.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hash\": \"hmac-sha256:08ba35...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Metrics Bug Fix in Vault Release Notes\nDESCRIPTION: This release note entry documents a bug fix in Vault's metrics system. The fix prevents the emitMetrics function from panicking during the post-seal process, enhancing the stability of Vault's metrics reporting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10708.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nmetrics: Protect emitMetrics from panicking during post-seal\n```\n```\n\n----------------------------------------\n\nTITLE: Logging into Vault with Root Token - Shell\nDESCRIPTION: This snippet demonstrates how to log into the Vault server using the root token. Successful authentication grants full access to Vault's functionalities for the user.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/operations-qs.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault login dev-only-token\n```\n\n----------------------------------------\n\nTITLE: Setting Vault MFA Credentials via Environment Variable\nDESCRIPTION: Example showing how to provide MFA credentials using environment variables. Note that VAULT_MFA only accepts one MFA method and credential combination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/both/mfa.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_MFA=\"totp:password=12345\"\n```\n\n----------------------------------------\n\nTITLE: Release Note: OpenAPI Bug Fix\nDESCRIPTION: This release note indicates a bug fix in the OpenAPI specification. The issue involved missing information about the /auth/token endpoints when explicit policy permissions were in place, hindering proper documentation and usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15552.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nopenapi: Fixed issue where information about /auth/token endpoints was not present with explicit policy permissions\n```\n```\n\n----------------------------------------\n\nTITLE: Verifying Updated Auth Method Configuration in Vault CLI\nDESCRIPTION: This snippet demonstrates how to verify the updated configuration of an auth method after tuning, showing the changed default lease duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read sys/auth/github/tune\nKey                  Value\n---                  -----\ndefault_lease_ttl    72h\ndescription          n/a\nforce_no_cache       false\nmax_lease_ttl        768h\ntoken_type           default-service\n```\n\n----------------------------------------\n\nTITLE: Documenting LDAP Authentication Improvement in Vault (Markdown)\nDESCRIPTION: This release note documents an improvement to the LDAP authentication method in HashiCorp Vault. It introduces the ability to provide the LDAP password through an environment variable when authenticating via the command-line interface, enhancing security and usability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18225.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth/ldap: allow providing the LDAP password via an env var when authenticating via the CLI\n```\n```\n\n----------------------------------------\n\nTITLE: Upgrading gRPC Dependency in Vault\nDESCRIPTION: This release note indicates an upgrade of the gRPC dependency to version 1.58.3 in the Vault project. gRPC is a high-performance RPC framework used for inter-service communication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23703.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nUpgrade grpc to v1.58.3\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Vault Go Client Package\nDESCRIPTION: Command to install the official Vault Go client library using Go's package manager.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ go get github.com/hashicorp/vault/api\n```\n\n----------------------------------------\n\nTITLE: Release Note: API Client Clone Bug Fix\nDESCRIPTION: Documents a bug fix where the OutputCurlString field was unintentionally being copied during client cloning operations in the Vault API client.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14968.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\napi: Fixes bug where OutputCurlString field was unintentionally being copied over during client cloning\n```\n\n----------------------------------------\n\nTITLE: Checking CIDR for Remote Address - Release Note\nDESCRIPTION: This release note specifies a bug fix in the SDK's CIDR utility, ensuring that the check for whether a CIDR contains a remote address is performed exclusively for IP addresses. This improves the functionality and reliability of the SDK by restricting checks to valid input types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14487.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\nsdk/cidrutil: Only check if cidr contains remote address for IP addresses\"\n```\n\n----------------------------------------\n\nTITLE: Updating OpenTelemetry Dependencies in Vault Diagnose Module\nDESCRIPTION: Release note documenting the upgrade of OpenTelemetry packages to version 1.11.2 in the Vault diagnose module. The update includes core OpenTelemetry packages, SDK, and tracing components.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18589.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nvault/diagnose: Upgrade `go.opentelemetry.io/otel`, `go.opentelemetry.io/otel/sdk`, `go.opentelemetry.io/otel/trace` to v1.11.2\n```\n\n----------------------------------------\n\nTITLE: Including mount_accessor in Audit Logs\nDESCRIPTION: This snippet provides a release note indicating that the audit functionality has been improved by incorporating mount_accessor information into the audit request and response logs. This enhancement aids in better tracking and auditing actions within HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15342.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"audit: Include mount_accessor in audit request and response logs\"\n```\n\n----------------------------------------\n\nTITLE: Release Note for HCP Connectivity Improvement in Vault\nDESCRIPTION: This release note announces the addition of foundational open-source support for opt-in secure communication between self-managed Vault nodes and HashiCorp Cloud Platform (HCP). The feature enhances security capabilities for Vault users who wish to integrate their self-managed instances with HCP services.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18228.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nhcp/connectivity: Add foundational OSS support for opt-in secure communication between self-managed Vault nodes and [HashiCorp Cloud Platform](https://cloud.hashicorp.com)\n```\n```\n\n----------------------------------------\n\nTITLE: Vault SDK Queue Bug Fix Release Note\nDESCRIPTION: This release note describes a bug fix in the Vault SDK queue. The fix involves moving the lock acquisition operation before the queue length check. This change prevents potential panics that could occur due to race conditions when accessing and modifying the queue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13146.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nsdk/queue: move lock before length check to prevent panics.\n```\n```\n\n----------------------------------------\n\nTITLE: Moving Vault Audit Log File Example\nDESCRIPTION: Example command showing how to move a Vault audit log file, which demonstrates the problematic behavior where Vault continues writing to the moved file location.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_15-audit-file-sighup-does-not-trigger-reload.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ mv /var/log/vault/audit.log /var/log/vault/archive/audit.log.bak\n```\n\n----------------------------------------\n\nTITLE: Release Note - Core Route Tainting Fix\nDESCRIPTION: Bug fix documentation for optimizing namespace path calculations during route tainting in Vault's post-unseal process. The fix involves pre-calculating namespace-specific paths when tainting routes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15067.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncore: pre-calculate namespace specific paths when tainting a route during postUnseal\n```\n\n----------------------------------------\n\nTITLE: Allowing All Entities for OIDC Authentication - Release Note\nDESCRIPTION: This release note details the introduction of an 'allow_all' assignment that permits any entity to authenticate through an OIDC client in HashiCorp Vault. This feature aims to enhance flexibility and ease of use for OIDC integrations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14119.txt#2025-04-14_snippet_2\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nidentity/oidc: Adds an `allow_all` assignment that permits all entities to authenticate via an OIDC client\"\n```\n\n----------------------------------------\n\nTITLE: Releasing Improvement - Upgrading Mongo Driver\nDESCRIPTION: This snippet documents the improvement made by upgrading the MongoDB driver to version 1.11. This update is crucial for ensuring that the MongoDB functionalities within HashiCorp Vault remain performant and in line with the latest features and security improvements provided by the newer driver version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19954.txt#2025-04-14_snippet_0\n\nLANGUAGE: none\nCODE:\n```\n\"release-note:improvement\\ndatabase/mongodb: upgrade mongo driver to 1.11\"\n```\n\n----------------------------------------\n\nTITLE: Vault Bug Fix Release Note\nDESCRIPTION: This release note indicates a bug fix in the core of Vault, specifically addressing the allowed number of concurrent gRPC streams over the cluster port.  The fix involves increasing the limit on concurrent gRPC streams.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16327.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\ncore: Increase the allowed concurrent gRPC streams over the cluster port.\n```\n```\n\n----------------------------------------\n\nTITLE: Using Map Populate for Bolt Files in Raft Storage on Linux\nDESCRIPTION: This release note describes a bug fix that implements the use of map_populate for bolt files in the raft storage driver. This change aims to improve startup time on Linux systems by optimizing how bolt files are handled during the initialization process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13573.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\nstorage/raft: On linux, use map_populate for bolt files to improve startup time.\"\n```\n\n----------------------------------------\n\nTITLE: Including Max Space Used Percentage Metric\nDESCRIPTION: This snippet includes the metric for the maximum space used percentage during automated snapshots. It enables tracking of storage efficiency linked to snapshotting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/autosnap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/autosnapshots/percent/maxspace/used.mdx'\n```\n\n----------------------------------------\n\nTITLE: Release Note: Kubernetes Auth Plugin Update to v0.18.0\nDESCRIPTION: This snippet represents a release note indicating an update to the Kubernetes authentication plugin in Vault. It specifies that the plugin is updated to version v0.18.0. This update likely includes bug fixes, new features, or security enhancements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25207.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"auth/kubernetes: Update plugin to v0.18.0\"\n```\n\n----------------------------------------\n\nTITLE: Removing Storybook from Vault UI - Release Note\nDESCRIPTION: Release note entry indicating an improvement to the UI by removing Storybook integration. This change likely aims to simplify the UI development infrastructure.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15074.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Remove storybook.\n```\n\n----------------------------------------\n\nTITLE: Adding LDAP Hierarchical Libraries Navigation\nDESCRIPTION: UI improvement that adds navigation capabilities for LDAP hierarchical libraries in the Vault interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29293.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nui: Adds navigation for LDAP hierarchical libraries\n```\n\n----------------------------------------\n\nTITLE: Adding TLS Max Version Configuration for Vault Listeners\nDESCRIPTION: This enhancement adds a new configuration option 'tls_max_version' for Vault listeners. It allows users to specify the maximum TLS version that can be used for listener connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11226.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:enhancement\ncore: Add tls_max_version listener config option.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Selector for CSI Provider Pods\nDESCRIPTION: Example of setting nodeSelector labels for CSI pod assignment targeting AMD64 architecture.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/configuration.mdx#2025-04-14_snippet_50\n\nLANGUAGE: yaml\nCODE:\n```\nnodeSelector:\n  beta.kubernetes.io/arch: amd64\n```\n\n----------------------------------------\n\nTITLE: Fixing Debug Level Logging in LDAP Auth Module\nDESCRIPTION: This release note details a bug fix that resolves an issue where debug level logging was not being emitted in the LDAP authentication module of HashiCorp Vault. The fix ensures that developers and users can obtain detailed logs while troubleshooting LDAP-related issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28881.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\nauth/ldap: Fixed an issue where debug level logging was not emitted.\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading GCP Secrets Dependencies\nDESCRIPTION: Release note indicating an improvement to the GCP secrets engine by updating its underlying dependencies\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17871.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsecrets/gcp: Upgrades dependencies\n```\n\n----------------------------------------\n\nTITLE: Adding max_age Parameter and auth_time Claim Validation in JWT Authentication\nDESCRIPTION: Feature addition that implements max_age role parameter and auth_time claim validation in the JWT authentication method, allowing time-based restrictions on token acceptance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10919.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nauth/jwt: Adds `max_age` role parameter and `auth_time` claim validation.\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Spinner after Token Renewal - Release Note\nDESCRIPTION: This release note details the bug fix where the spinner that appears during token renewal operations in the Vault UI has been removed. This change aims to enhance user experience by preventing unnecessary loading indicators after the token has successfully been renewed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12887.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\nui: Remove spinner after token renew\"\n```\n\n----------------------------------------\n\nTITLE: Metric Definition Table in Markdown\nDESCRIPTION: Markdown table defining the vault.token.count.by_ttl metric properties including type, value format, and description.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/token/count/by_ttl.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value   | Description\n----------- | ------- | -----------\ngauge       | number  | Total number of service tokens assigned a particular time to live (TTL)\n```\n\n----------------------------------------\n\nTITLE: Adding Token Bound CIDRs to AppRole Secret IDs\nDESCRIPTION: The AppRole auth method now supports setting token bound CIDRs on individual Secret IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nauth/approle: Add ability to set token bound CIDRs on individual Secret IDs\n[[GH-5034](https://github.com/hashicorp/vault/pull/5034)]\n```\n\n----------------------------------------\n\nTITLE: Adding Client Count Monthly View Feature to Vault UI\nDESCRIPTION: This release note entry announces the addition of a new feature to the Vault UI. The feature provides a monthly view for client count, allowing users to visualize and analyze client usage data on a monthly basis.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12554.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nui: client count monthly view\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Bug Fix Release Note\nDESCRIPTION: This snippet represents a release note for Vault, specifically addressing a bug where listener and storage types were incorrectly reported as \"key not found\" warnings when using the command-line interface. This note clarifies the fix and informs users about the resolved issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15383.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\ncommand: do not report listener and storage types as key not found warnings`\n```\n\n----------------------------------------\n\nTITLE: Referencing GitHub Pull Request in Markdown\nDESCRIPTION: References to GitHub pull requests in the release notes, formatted as Markdown links with issue numbers and URLs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4230](https://github.com/hashicorp/vault/pull/4230)]\n```\n\n----------------------------------------\n\nTITLE: Sending Okta Group Registration Request via cURL\nDESCRIPTION: Shell command to register a new group with the specified payload using POST request with authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/okta.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/okta/groups/admins\n```\n\n----------------------------------------\n\nTITLE: Configuring Token File for Vault Agent Auto-Authentication\nDESCRIPTION: Adds support for using a pre-existing token file during Vault Agent authentication. This improvement allows users to provide a token file directly, simplifying authentication workflows.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18740.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\ntoken_file = \"/path/to/token\"\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to MFA Flag Migration Pull Request\nDESCRIPTION: Reference to a GitHub pull request that re-adds the MFA flag and migrates it to the open-source binary.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_12\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4223](https://github.com/hashicorp/vault/pull/4223)]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Error Handling for Not Found Tests\nDESCRIPTION: Configures test environment to prevent error logging during not-found tests by replacing Ember.Logger.error and Ember.Test.adapter.exception with no-op functions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nhooks.beforeEach(function() {\n  loggerError = Ember.Logger.error;\n  adapterException = Ember.Test.adapter.exception;\n  Ember.Test.adapter.exception = () => {};\n  Ember.Logger.error = () => {};\n  return authPage.login();\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Internal Feature Flag Listing Endpoint in Vault Core (Markdown)\nDESCRIPTION: This release note snippet documents an improvement to Vault's core functionality. It introduces a new internal endpoint that provides a list of feature flags, enhancing the system's introspection capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10613.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-node:improvement\ncore: Added an internal endpoint that lists feature flags.\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Password Policies Response in JSON\nDESCRIPTION: This snippet shows the JSON response format when listing password policies. It includes the list of policy names under the 'keys' field.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"58e2540f-8c51-6390-46de-38e279e75468\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"keys\": [\n      \"my-policy\"\n    ]\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: OIDC Client: Read Request\nDESCRIPTION: This is a sample `curl` request to read an OIDC client by name. It sends a GET request to the specified endpoint, including the Vault token. Replace `...` with your Vault token and `test-client` with the name of the client to retrieve.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/oidc/client/test-client\n```\n\n----------------------------------------\n\nTITLE: SSH CA Configuration Payload in JSON\nDESCRIPTION: Sample JSON payload for configuring the SSH CA in Vault. The payload specifies that Vault should generate the signing key pair internally.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generate_signing_key\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed IPv4 Addresses for Vault Sync\nDESCRIPTION: Specifies a list of permitted IPv4 addresses in CIDR notation that sync clients can connect to. This provides granular control over network access and helps prevent unauthorized connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/sync-ssrf-fields.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nallowed_ipv4_addresses = [\"192.168.1.0/24\", \"10.0.0.0/16\"]\n```\n\n----------------------------------------\n\nTITLE: Registering New Secret Plugin in Vault\nDESCRIPTION: Demonstrates how to register a new secret plugin to the Vault plugin catalog with a specific SHA256 hash.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/index.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin register \\\n  -sha256=d3f0a8be02f6c074cf38c9c99d4d04c9c6466249 \\\n  secret my-custom-plugin\nSuccess! Registered plugin: my-custom-plugin\n```\n\n----------------------------------------\n\nTITLE: Adding KV Secret Value Download Format Toggle\nDESCRIPTION: Release note entry detailing the addition of a toggle in the KV secrets engine value download modal that allows users to choose whether to stringify the value in the downloaded file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23747.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nui: Adds toggle to KV secrets engine value download modal to optionally stringify value in downloaded file\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Vault Website\nDESCRIPTION: This robots.txt configuration allows all web crawlers (user-agents) to access the entire Vault website without restrictions. The Disallow: / line is followed by empty space, effectively not disallowing any paths.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/public/robots.txt#2025-04-14_snippet_0\n\nLANGUAGE: robotstxt\nCODE:\n```\nUser-agent: *\nDisallow: /\n\n```\n\n----------------------------------------\n\nTITLE: Nomad-Vault Integration Client Count Rules\nDESCRIPTION: Explains how Nomad-Vault integration handles client counting with Workload Identity and token roles\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/faq/client-count/computing-clients.mdx#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n\t- Vault bases Workload Identity client counts on the\n\t  `user_claim` field. The\n\t  recommended default is `nomad_job`, which results in 1 client per\n\t  Nomad job.\n\t- Nomad deprecated token roles and will remove the feature in v1.10. Client\n\t  counts for legacy token roles treat each unique policy combination as 1\n\t\tnon-entity client.\n```\n\n----------------------------------------\n\nTITLE: Reading Key Information in JSON Format\nDESCRIPTION: Command to read key information and format output as JSON.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/gcpkms/setup.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nvault read -format=json keymgmt/key/aes256-gcm96 | jq\n```\n\n----------------------------------------\n\nTITLE: OIDC Client: Sample Payload\nDESCRIPTION: This is a sample JSON payload for creating or updating an OIDC client. It specifies the key used for signing ID tokens, access token TTL, and ID token TTL.  The `key` field refers to a named key resource, and the TTL values determine the lifetime of the respective tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"key\":\"test-key\",\n   \"access_token_ttl\":\"30m\",\n   \"id_token_ttl\":\"1h\"\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Auto Rotation for Managed Keys in Vault Transit Secrets Engine\nDESCRIPTION: This release note indicates a bug fix that prevents auto rotation from being allowed on managed_key key types in the Transit secrets engine of HashiCorp Vault. This change likely improves security or consistency in key management for managed keys.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23723.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:bug\nsecrets/transit: Do not allow auto rotation on managed_key key types\n```\n\n----------------------------------------\n\nTITLE: Example JWT Payload for Claim Extraction\nDESCRIPTION: Sample JSON payload demonstrating nested JWT claims that can be referenced using JSON Pointer syntax. Shows both top-level and nested claims that can be used in Vault JWT configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/index.mdx#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"division\": \"North America\",\n  \"groups\": {\n    \"primary\": \"Engineering\",\n    \"secondary\": \"Software\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Vault License via API (Pre-1.8)\nDESCRIPTION: This bash command uses curl to verify the Vault Enterprise license installation through the Vault API for versions prior to 1.8. It sends a GET request to the sys/license endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/enterprise.mdx#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --header \"X-Vault-Token: VAULT_LOGIN_TOKEN_HERE\" \\\n  http://127.0.0.1:8200/v1/sys/license\n```\n\n----------------------------------------\n\nTITLE: Creating an Association between Vault Secret and GCP Secret Manager\nDESCRIPTION: This command creates an association between a Vault secret and the GCP Secret Manager sync destination.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/gcpsm.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/sync/destinations/gcp-sm/my-dest/associations/set \\\n    mount='my-kv' \\\n    secret_name='my-secret'\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Agent Header HMAC in Vault Audit Logs\nDESCRIPTION: This improvement allows Vault to include User-Agent headers in audit logs when present in incoming requests. By default, these headers are not HMAC'ed, but can be configured to be so using the specified endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28596.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\naudit: Audit logs will contain User-Agent headers when they are present in the incoming request. They are not\nHMAC'ed by default but can be configured to be via the `/sys/config/auditing/request-headers/user-agent` endpoint.\n```\n```\n\n----------------------------------------\n\nTITLE: Improving AliCloud Authentication Role Compatibility\nDESCRIPTION: Modifies the AliCloud authentication method to be compatible with Vault's role-based quota mechanisms, enabling more flexible access control and resource management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17251.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth/alicloud: Enables AliCloud roles to be compatible with Vault's role based quotas.\n```\n\n----------------------------------------\n\nTITLE: Vault SDK Plugin Log Level Fix Release Note\nDESCRIPTION: Markdown release note documenting a fix that enables external plugins to properly report logs below the INFO level, improving logging granularity and debugging capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23771.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsdkplugin: Fix an issue where external plugins were not reporting logs below INFO level\n```\n\n----------------------------------------\n\nTITLE: Documenting PKI Secrets Engine Improvement in Release Notes\nDESCRIPTION: Release note entry indicating an enhancement to Vault's PKI secrets engine that enables signing self-issued certificates using a signature algorithm different from the original certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12514.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrelease-note:improvement\nsecrets/pki: Allow signing of self-issued certs with a different signature algorithm.\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Agent Windows Service Support in Release Notes\nDESCRIPTION: This code snippet is a release note in markdown format, documenting an improvement to the Vault agent. It indicates that the Vault agent can now be run as a Windows service, enhancing its deployment options on Windows platforms.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10231.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nagent: Agent can now run as a Windows service.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Response Definitions - Vault AppRole\nDESCRIPTION: Release note indicating an improvement that adds OpenAPI response definitions to the AppRole role path in Vault. This enhances API documentation and specification coverage for the AppRole authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18198.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nopenapi: Add openapi response definitions to approle/path_role.go\n```\n\n----------------------------------------\n\nTITLE: Documenting Removal of Legacy MFA Support in Vault Release Notes\nDESCRIPTION: This markdown snippet is used in Vault's release notes to indicate the removal of support for legacy MFA. It includes a link to the documentation for the affected feature in version 1.10.x.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14869.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth: Remove support for legacy MFA\n(https://www.vaultproject.io/docs/v1.10.x/auth/mfa)\n```\n```\n\n----------------------------------------\n\nTITLE: Updating MongoDB Atlas Plugin to Version 0.10.1\nDESCRIPTION: This snippet highlights the update of the MongoDB Atlas plugin to version 0.10.1, part of the release notes for HashiCorp Vault. The update likely includes bug fixes, performance enhancements, or new features relevant to users of the plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22655.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\ndatabase/mongodbatlas: Update plugin to v0.10.1\"\n```\n\n----------------------------------------\n\nTITLE: Looking Up SSH Roles by IP Address in Vault\nDESCRIPTION: Example of looking up SSH roles associated with a specific IP address using a POST request. The request includes a JSON payload with the IP address to search for.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/lookup\n```\n\n----------------------------------------\n\nTITLE: Deleting Secret - Vault KV API - Shell\nDESCRIPTION: This curl command deletes a secret from the specified path in the Vault KV secrets engine. The `X-Vault-Token` header is required for authentication, and the DELETE method is invoked.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v1.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/secret/my-secret\n```\n\n----------------------------------------\n\nTITLE: Deprecating Parameters in Consul Secrets Engine - Release Note\nDESCRIPTION: This release note documents the deprecation of the 'policies' parameter, recommending the use of 'consul_policies' instead. This update aims to enhance consistency within the codebase. It is essential for developers and users of the Consul secrets engine to update any configurations that currently reference 'policies'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15400.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:deprecation\\nsecrets/consul: Deprecate parameter \\\"policies\\\" in favor of \\\"consul_policies\\\" for consistency\"\n```\n\n----------------------------------------\n\nTITLE: Formatting for New and Major Features\nDESCRIPTION: Instructions for documenting new and major features in changelogs, emphasizing the need for clarity and a specific format to describe the feature without referencing individual PRs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/README.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n    changelog/<pr num OR feature name>.txt:\n    ```release-note:feature\n    **Feature Name**: Description of feature - for example \"Custom password policies are now supported for all database engines.\"\n    ```\n```\n\n----------------------------------------\n\nTITLE: Resolving Race Condition in Auditing Entries - HashiCorp Vault - Release Note\nDESCRIPTION: This release note addresses a potential race condition when auditing entries that employ SSCT. The fix enhances the reliability of the auditing process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25443.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\naudit: Resolve potential race condition when auditing entries which use SSCT.\"\n```\n\n----------------------------------------\n\nTITLE: Configuring VaultConnection for VSO\nDESCRIPTION: YAML configuration to establish connection between VSO and Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/client-cache.mdx#2025-04-14_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultConnection\nmetadata:\n  name: local-vault-server\n  namespace: vault-secrets-operator\nspec:\n  address: 'https://vault.vault.svc.cluster.local:8200'\n```\n\n----------------------------------------\n\nTITLE: API Help Response Format\nDESCRIPTION: Example of the JSON response structure when requesting help documentation. Shows the help text in markdown format and OpenAPI specification for the endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"help\": \"## DESCRIPTION\\n\\nThis backend provides a versioned key-value store. The kv backend reads and\\nwrites arbitrary secrets to the storage backend. The secrets are\\nencrypted/decrypted by Vault: they are never stored unencrypted in the backend\\nand the backend never has an opportunity to see the unencrypted value. Each key\\ncan have a configured number of versions, and versions can be retrieved based on\\ntheir version numbers.\\n\\n## PATHS\\n\\nThe following paths are supported by this backend. To view help for\\nany of the paths below, use the help command with any route matching\\nthe path pattern. Note that depending on the policy of your auth token,\\nyou may or may not be able to access certain paths.\\n\\n    ^.*$\\n\\n\\n    ^config$\\n        Configures settings for the KV store\\n\\n    ^data/(?P<path>.*)$\\n        Write, Read, and Delete data in the Key-Value Store.\\n\\n    ^delete/(?P<path>.*)$\\n        Marks one or more versions as deleted in the KV store.\\n\\n    ^destroy/(?P<path>.*)$\\n        Permanently removes one or more versions in the KV store\\n\\n    ^metadata/(?P<path>.*)$\\n        Configures settings for the KV store\\n\\n    ^undelete/(?P<path>.*)$\\n        Undeletes one or more versions from the KV store.\",\n  \"openapi\": {\n    \"openapi\": \"3.0.2\",\n    \"info\": {\n      \"title\": \"HashiCorp Vault API\",\n      \"description\": \"HTTP API that gives you full access to Vault. All API routes are prefixed with `/v1/`.\",\n      \"version\": \"1.0.0\",\n      \"license\": {\n        \"name\": \"Mozilla Public License 2.0\",\n        \"url\": \"https://www.mozilla.org/en-US/MPL/2.0\"\n      }\n    },\n    \"paths\": {\n      \"/.*\": {},\n      \"/config\": {\n        \"description\": \"Configures settings for the KV store\",\n        \"x-vault-create-supported\": true,\n        \"get\": {\n          \"summary\": \"Read the backend level settings.\",\n          \"tags\": [\n            \"secrets\"\n          ],\n          \"responses\": {\n            \"200\": {\n              \"description\": \"OK\"\n            }\n          }\n        }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining the document metadata including title and description for the AWS auto-auth documentation page.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/aws.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: Auto-auth with AWS\ndescription: >\n  Use AWS for auto-authentication with Vault Agent or Vault Proxy.\n---\n```\n\n----------------------------------------\n\nTITLE: Login Request - JSON Payload\nDESCRIPTION: JSON payload for authenticating using signed request headers and role name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/oci.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_headers\": {\n    \"date\": [\"Fri, 22 Aug 2019 21:02:19 GMT\"],\n    \"(request-target)\": [\"get /v1/auth/oci/login/devrole\"],\n    \"host\": [\"127.0.0.1\"],\n    \"content-type\": [\"application/json\"],\n    \"authorization\": [\n      \"Signature algorithm=\\\"rsa-sha256\\\",headers=\\\"date (request-target) host\\\",keyId=\\\"ocid1.tenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f15p2b2m2yt2j6rx32uzr4h25vqstifsfdsq/ocid1.user.oc1..aaaaaaaat5nvwcna5j6aqzjcaty5eqbb6qt2jvpkanghtgdaqedqw3rynjq/73:61:a2:21:67:e0:df:be:7e:4b:93:1e:15:98:a5:b7\\\",signature=\\\"GBas7grhyrhSKHP6AVIj/h5/Vp8bd/peM79H9Wv8kjoaCivujVXlpbKLjMPeDUhxkFIWtTtLBj3sUzaFj34XE6YZAHc9r2DmE4pMwOAy/kiITcZxa1oHPOeRheC0jP2dqbTll8fmTZVwKZOKHYPtrLJIJQHJjNvxFWeHQjMaR7M=\\\",version=\\\"1\\\"\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Deadlock in API Calls - Plaintext\nDESCRIPTION: This snippet documents a bug fix related to deadlocks that occur in API calls to sys/leader, specifically when a namespace is configured. It serves as a release note to inform users about the issue and its resolution.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24256.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\napi: Fix deadlock on calls to sys/leader with a namespace configured\\non the request.\"\n```\n\n----------------------------------------\n\nTITLE: ProductDownloader Component Implementation\nDESCRIPTION: React/JSX implementation examples for the ProductDownloader component, showing both standard and prerelease configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductDownloader\n  product=\"<Product>\"\n  version={VERSION}\n  downloads={downloadData}\n  community=\"/resources\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ProductDownloader\n  product=\"<Product>\"\n  version={VERSION}\n  downloads={downloadData}\n  community=\"/resources\"\n  prerelease={{\n    type: 'release candidate', // the type of prerelease: beta, release candidate, etc.\n    name: 'v1.0.0', // the name displayed in text on the website\n    version: '1.0.0-rc1', // the actual version tag that was pushed to releases.hashicorp.com\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Adding Dependencies to Vault Project\nDESCRIPTION: This release note indicates an improvement where dependencies listed in a specific file have been added to the project. The file referenced is 'dependencies/2-25-21'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11015.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nrelease-note: Add dependencies listed in dependencies/2-25-21\n```\n```\n\n----------------------------------------\n\nTITLE: SSH Host Keys Tidy API Response in Vault\nDESCRIPTION: Sample response from tidying SSH host keys, indicating the number of keys that were removed. This confirms the cleanup operation was completed successfully.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_37\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"message\": \"Removed 15 of 15 host keys.\"\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to API Retry Fix Pull Request\nDESCRIPTION: Reference to a GitHub pull request that fixes retries not working in the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4322](https://github.com/hashicorp/vault/pull/4322)]\n```\n\n----------------------------------------\n\nTITLE: Transit Backend Cache Size Bug Fix Note\nDESCRIPTION: Release note indicating a fix to enforce minimum cache size requirements and enable cache size initialization without requiring a restart in Vault's transit secrets backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12418.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsecrets/transit: Enforce minimum cache size for transit backend and init cache size on transit backend without restart.\n```\n\n----------------------------------------\n\nTITLE: Documenting Raft Storage Bug Fix in Vault Release Notes\nDESCRIPTION: This release note documents a bug fix in Vault's Raft storage implementation. It addresses the detection of incomplete Raft snapshots in the api.RaftSnapshot() function, which affects the 'vault operator raft snapshot save' command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12388.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nstorage/raft: Detect incomplete raft snapshots in api.RaftSnapshot(), and thereby in `vault operator raft snapshot save`.\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Sample Payload for SAML Authentication - JSON\nDESCRIPTION: This JSON snippet defines a sample payload for initiating SAML authentication with Vault, including the ACS URL, client challenge, client type, and user role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"acs_url\": \"https://my.vault/v1/auth/saml/callback\",\n  \"client_challenge\": \"Z6+7owP80d1aHTha1kdixtT99JkvmG4TPSgbvDwZ70A=\",\n  \"client_type\": \"cli\",\n  \"role\": \"admin\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving SAML Auth Mount Accessor\nDESCRIPTION: Command to retrieve the mount accessor for the SAML authentication method and save it to a file. The accessor is needed to create group aliases.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/link-vault-group-to-ad.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth list -format=json |               \\\n  jq -r '.\"<SAML_PLUGIN_PATH>/\".accessor' >  \\\n  accessor_adfs.txt\n```\n\n----------------------------------------\n\nTITLE: Tidy Endpoint Request Example\nDESCRIPTION: This curl command shows how to send a POST request to the `/pki/tidy` endpoint with a JSON payload to trigger a manual tidy operation. It uses the `X-Vault-Token` header for authentication and specifies the payload using the `--data` flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_119\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/tidy\n```\n\n----------------------------------------\n\nTITLE: Adding Periodic Tidy Operations in HashiCorp Vault\nDESCRIPTION: This snippet adds functionality to the PKI secrets engine in HashiCorp Vault to enable periodic tidy operations that will automatically remove expired certificates. This ensures that the certificate storage remains clean and does not accumulate unnecessary expired certificates, optimizing performance and management.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16900.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nsecrets/pki: Add ability to periodically run tidy operations to remove expired certificates.\"\n```\n\n----------------------------------------\n\nTITLE: Listing Locked Users with Mount Accessor - HTTP GET Request\nDESCRIPTION: Makes a GET request with payload to filter locked users by mount accessor.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/user-lockout.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl \\\n    --header \"X-Vault-Token: ...\" \\\n    --data @payload.json \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/locked-users\n```\n\n----------------------------------------\n\nTITLE: Parsing Vault API JSON Response in JSON\nDESCRIPTION: This snippet illustrates the structure of a JSON response from a Vault API endpoint after initiating a tidy operation. It includes fields for request identification, lease information, and operation warnings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"b20b56e3-4699-5b19-cc6b-e74f7b787bbf\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"wrap_info\": null,\n  \"warnings\": [\n    \"Tidy operation successfully started. Any information from the operation will be printed to Vault's server logs.\"\n  ],\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring IRSA VaultAuth Profile\nDESCRIPTION: YAML configuration for setting up a VaultAuth profile in VSO for IRSA authentication method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: vaultauth-aws-irsa-example\n  namespace: <K8S_NAMESPACE>\nspec:\n  vaultConnectionRef: <VAULT_CONNECTION_NAME>\n  mount: aws\n  method: aws\n  aws:\n    role: <VAULT_AWS_IRSA_ROLE>\n    region: <AWS_REGION>\n    irsaServiceAccount: <SERVICE_ACCOUNT>\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Refresh Interval in Vault HCL\nDESCRIPTION: HCL configuration block that enables static secret caching and sets the token capability refresh interval.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/static-secret-caching.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\ncache {\n  cache_static_secrets = true\n  static_secret_token_capability_refresh_interval = \"1m\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ACL Policy via API\nDESCRIPTION: Use `jq` and `curl` to upload an ACL policy to Vault's system policy endpoint via POST. This operation involves escaping the policy file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/setup.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ jq -Rs '{ \"policy\": . | gsub(\"[\\\\r\\\\n\\\\t]\"; \"\") }' <path_to_policy_file> |\n  curl                                        \\\n    --request POST                            \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n    \"$(</dev/stdin)\"                          \\\n    ${VAULT_ADDR}/v1/sys/policy/<policy_name>\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ jq -Rs '{ \"policy\": . | gsub(\"[\\\\r\\\\n\\\\t]\"; \"\") }' ./kv-policy.hcl |\n  curl                                          \\\n      --request POST                            \\\n      --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n      --data \"$(</dev/stdin)\"                   \\\n      ${VAULT_ADDR}/v1/sys/policy/kv-access | jq\n```\n\n----------------------------------------\n\nTITLE: Referencing AlertInline Component in PKI Role Generate Template\nDESCRIPTION: An HTML snippet showing how to render an AlertInline component beside form buttons in the PKI role generate template. This is particularly important for long forms where error banners might be hidden from view.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/forms.md#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n../lib/pki/addon/components/pki-role-generate.hbs\n```\n\n----------------------------------------\n\nTITLE: Fixing JWT Algorithm Validation for jwks_url and jwt_validation_pubkeys\nDESCRIPTION: Bug fix that addresses an issue where configured supported JWT algorithms (jwt_supported_algs) were not being properly validated when using jwks_url or jwt_validation_pubkeys for JWT authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10919.txt#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nauth/jwt: Fixes an issue where `jwt_supported_algs` were not being validated for JWT auth using\n`jwks_url` and `jwt_validation_pubkeys`.\n```\n```\n\n----------------------------------------\n\nTITLE: Styled HTML Table for Continue Reading Section\nDESCRIPTION: HTML table component with custom styling using inline CSS. Features a dashed border top and custom font sizing for the 'Continue reading' text.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/content-footer-title.mdx#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table style={{borderTop: \"1px dashed var(--token-color-vault-foreground)\"}}><tbody><tr>\n<th style={{textAlign: \"left\", fontSize: \"var(--token-typography-display-300-font-size)\"}}>\n  <br />\n  Continue reading...\n</th>\n</tr></tbody></table>\n```\n\n----------------------------------------\n\nTITLE: Documenting Raft Autopilot Bug Fix in Markdown\nDESCRIPTION: This markdown snippet documents a bug fix for the Raft Autopilot feature in HashiCorp Vault. It addresses a panic that could occur during the shutdown process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27726.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nraft/autopilot: Fixed panic that may occur during shutdown\n```\n```\n\n----------------------------------------\n\nTITLE: Sample Role Lookup Response in JSON\nDESCRIPTION: Example JSON response when looking up SSH roles by IP address. Shows an array of role IDs associated with the specified IP.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_18\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"roles\": [\n      \"fe6f61b7-7e4a-46a6-b2c8-0d530b8513df\",\n      \"6d6411fd-f622-ea0a-7e2c-989a745cbbb2\"\n    ]\n  },\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Making Wrapping Token Lookup Request Payload\nDESCRIPTION: JSON payload structure for looking up wrapping token properties. Requires a token parameter with the wrapping token ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-lookup.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"abcd1234\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Quotas List - JSON Response\nDESCRIPTION: Sample JSON response when listing all rate limit quotas, showing quota names.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rate-limit-quotas.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": null,\n  \"data\": {\n    \"keys\": [\"global-rate-limiter\", \"kv-rate-limiter\"]\n  },\n  \"lease_duration\": 0,\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"request_id\": \"ab633ee1-a692-ba03-083b-f1bd91c51c28\",\n  \"warnings\": null,\n  \"wrap_info\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Encryption Status\nDESCRIPTION: SQL queries to verify the database encryption status and details\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/installation.mdx#2025-04-14_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM sys.dm_database_encryption_keys;\n\nSELECT (SELECT name FROM sys.databases WHERE database_id = k.database_id) as name,\n    encryption_state, key_algorithm, key_length,\n    encryptor_type, encryption_state_desc, encryption_scan_state_desc FROM sys.dm_database_encryption_keys k;\n```\n\n----------------------------------------\n\nTITLE: Deleting AliCloud Role - HTTP Request\nDESCRIPTION: HTTP DELETE request to remove an AliCloud role from Vault. Requires a Vault token and the role name in the URL path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/alicloud.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/auth/alicloud/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: LDAP Directory Structure Example\nDESCRIPTION: Example LDAP directory information tree (DIT) structure showing organizational units, Db2 groups, and users configuration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/db2.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Organizational units\ndn: ou=groups,dc=example,dc=com\nobjectClass: organizationalUnit\nou: groups\n\ndn: ou=users,dc=example,dc=com\nobjectClass: organizationalUnit\nou: users\n\n# Db2 groups\ndn: cn=db2iadm1,ou=groups,dc=example,dc=com\nobjectClass: groupOfNames\ncn: db2iadm1\nmember: uid=db2inst1,ou=users,dc=example,dc=com\ndescription: DB2 sysadm group\n\ndn: cn=db2fadm1,ou=groups,dc=example,dc=com\nobjectClass: groupOfNames\ncn: db2fadm1\nmember: uid=db2fenc1,ou=users,dc=example,dc=com\ndescription: DB2 fenced user group\n\ndn: cn=dev,ou=groups,dc=example,dc=com\nobjectClass: groupOfNames\ncn: dev\nmember: uid=staticuser,ou=users,dc=example,dc=com\ndescription: Development group\n\n# Db2 users\ndn: uid=db2inst1,ou=users,dc=example,dc=com\nobjectClass: inetOrgPerson\ncn: db2inst1\nsn: db2inst1\nuid: db2inst1\nuserPassword: Db2AdminPassword\n\ndn: uid=db2fenc1,ou=users,dc=example,dc=com\nobjectClass: inetOrgPerson\ncn: db2fenc1\nsn: db2fenc1\nuid: db2fenc1\nuserPassword: Db2FencedPassword\n\ndn: uid=staticuser,ou=users,dc=example,dc=com\nobjectClass: inetOrgPerson\ncn: staticuser\nsn: staticuser\nuid: staticuser\nuserPassword: StaticUserPassword\n```\n\n----------------------------------------\n\nTITLE: Deprecating Connection Timeout Configuration\nDESCRIPTION: Replaces the deprecated `connection_timeout` parameter with `request_timeout` for more consistent timeout handling in LDAP authentication configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22185.txt#2025-04-14_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nauth/ldap: deprecates `connection_timeout` in favor of `request_timeout` for timeouts\n```\n\n----------------------------------------\n\nTITLE: Vault PKI URI SAN Template Release Note\nDESCRIPTION: Release note indicating enhancement to PKI secrets engine that allows URI Subject Alternative Name (SAN) templates in allowed_uri_sans configuration parameter when allowed_uri_sans_template is enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10249.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrelease-note:improvement\nsecrets/pki: Allow URI SAN templates in allowed_uri_sans when allowed_uri_sans_template is set to true.\n```\n\n----------------------------------------\n\nTITLE: Adding Active Since Timestamp to Node Status - Release Note\nDESCRIPTION: Release note documenting an improvement to Vault core that adds an active since timestamp to the status output when querying active nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10489.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\ncore: Added active since timestamp to the status output of active nodes.\n```\n\n----------------------------------------\n\nTITLE: Vault Entity Group Merging Bugfix Note\nDESCRIPTION: Release note entry documenting a bug fix that ensures proper merging of associated entity groups when merging entities in Vault's identity system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10085.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nidentity: merge associated entity groups when merging entities\n```\n\n----------------------------------------\n\nTITLE: Updating API Response for AppRole Secret ID Accessor Lookup in Vault\nDESCRIPTION: This improvement changes the behavior of the 'role/:name/secret-id-accessor/lookup' endpoint in Vault's AppRole authentication method. When a secret_id_accessor cannot be found, the endpoint now returns a 404 status code, improving error handling and API consistency.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12788.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth/approle: The `role/:name/secret-id-accessor/lookup` endpoint now returns a 404 status code when the `secret_id_accessor` cannot be found\n```\n```\n\n----------------------------------------\n\nTITLE: Fixing Namespace Header Response Bug in Vault Enterprise\nDESCRIPTION: Documents a bug fix where namespace header is now properly included in responses and utilized by the Go client when displaying error messages in Vault Enterprise.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12196.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore (enterprise): namespace header included in responses, Go client uses it when displaying error messages\n```\n\n----------------------------------------\n\nTITLE: Configuring Enterprise Request Limiter\nDESCRIPTION: Adds adaptive concurrency controls to write operations and PKI issue requests to protect Vault server performance and stability\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25093.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n**Request Limiter (enterprise)**: Add adaptive concurrency limits to write-based HTTP methods and special-case `pki/issue` requests to prevent overloading the Vault server.\n```\n\n----------------------------------------\n\nTITLE: Vault Identity Backend Tuning Enhancement Note\nDESCRIPTION: Release note indicating that the identity backend in Vault can now be tuned using the same standard tuning parameters available for secrets backends. This improvement provides more flexibility in configuring the identity backend's behavior.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14723.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nrelease-note:improvement\ncore/identity: allow identity backend to be tuned using standard secrets backend tuning parameters.\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration header defining the documentation page layout and metadata for the Vault Proxy Kubernetes persistent cache documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/persistent-caches/kubernetes.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: Use Kubernetes persistent cache - Vault Proxy\ndescription: >\n  Configure Vault Proxy to use Kubernetes for persistent cache.\n---\n```\n\n----------------------------------------\n\nTITLE: Vault Agent: Lease Renewal Threshold Configuration\nDESCRIPTION: This snippet documents the addition of the `lease_renewal_threshold` configuration option for Vault Agent. It controls the refresh rate of non-renewable leases within the Agent's template engine, influencing how often these leases are renewed.  It enhances the flexibility and control over lease management in Vault Agent.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25212.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nagent: Added a new config option, `lease_renewal_threshold`, that controls the refresh rate of non-renewable leases in Agent's template engine.\n```\n\n----------------------------------------\n\nTITLE: Handling Auth Message Reminder Delays in Testing Environment\nDESCRIPTION: A task that shows loading and yields a timeout of 0 when in testing mode, preventing delays during automated tests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndelayAuthMessageReminder: task(function*() {\n  if (Ember.testing) {\n    this.showLoading = true;\n    yield timeout(0);\n```\n\n----------------------------------------\n\nTITLE: Adding Elasticsearch Support to Vault UI\nDESCRIPTION: This release note indicates that Elasticsearch database is now supported in the Vault user interface. This enhancement likely allows users to configure and manage Elasticsearch integrations directly through the Vault UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12672.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\n**Elasticsearch in the UI**: Elasticsearch DB is now supported by the UI\n```\n```\n\n----------------------------------------\n\nTITLE: Vault UI Bug Fix Release Note\nDESCRIPTION: This release note documents a bug fix in the Vault UI. The bug caused `key_bits` and `signature_bits` to revert to default values when a PKI role was edited. The fix ensures these values are properly retained during the editing process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20907.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nui: fixes key_bits and signature_bits reverting to default values when editing a pki role\n```\n```\n\n----------------------------------------\n\nTITLE: Vault UI Token CIDR Tooltip Update\nDESCRIPTION: This snippet represents a release note indicating a UI improvement in HashiCorp Vault. The change clarifies that comma separated values are not accepted in the tokenBoundCidrs field tooltip. This improves user experience by providing clear input requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15852.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\nui: Changed the tokenBoundCidrs tooltip content to clarify that comma separated values are not accepted in this field.\n```\n```\n\n----------------------------------------\n\nTITLE: Removing App-ID Authentication Method\nDESCRIPTION: Improvement to mark the app-id authentication method as removed and eliminate its associated plugin code\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18039.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nplugins: Mark app-id auth method Removed and remove the plugin code.\n```\n\n----------------------------------------\n\nTITLE: Changing Driver Library for PostgreSQL in Physical Layer\nDESCRIPTION: This release note specifies that the driver library for PostgreSQL in the physical layer has been changed from lib/pq to pgx, contributing to improved functionality and performance.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15343.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nphysical/postgres: Change underlying driver library from [lib/pq](https://github.com/lib/pq) to [pgx](https://github.com/jackc/pgx)\"\n```\n\n----------------------------------------\n\nTITLE: Running MongoDB TLS Test Locally with Go\nDESCRIPTION: Command to run the TestInit_clientTLS test locally using Go's test runner, which requires Docker to be configured to allow volume mounting from the current directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/plugins/database/mongodb/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo test -v -run Init_clientTLS\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable Workaround\nDESCRIPTION: Command to set an environment variable that disables the new event framework, reverting to Vault 1.14.x audit behavior as a workaround for the SIGHUP issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_15-audit-file-sighup-does-not-trigger-reload.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_AUDIT_DISABLE_EVENTLOGGER=true\n```\n\n----------------------------------------\n\nTITLE: Configuring IAM Policy for AWS Secrets Manager Access\nDESCRIPTION: This JSON snippet defines an IAM policy that grants permissions to create, update, delete, and tag secrets in AWS Secrets Manager. It restricts access to secrets with names starting with 'vault'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/sync/awssm.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n      {\n        \"Effect\": \"Allow\",\n        \"Action\": [\n          \"secretsmanager:Create*\",\n          \"secretsmanager:Update*\",\n          \"secretsmanager:Delete*\",\n          \"secretsmanager:TagResource\"\n        ],\n        \"Resource\": \"arn:aws:secretsmanager:*:*:secret:vault*\"\n      }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Restoring Error Handling After Not Found Tests\nDESCRIPTION: Restores the original error handlers after not-found tests complete by setting Ember.Test.adapter.exception and Ember.Logger.error back to their original values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nhooks.afterEach(function() {\n  Ember.Test.adapter.exception = adapterException;\n  Ember.Logger.error = loggerError;\n  return logout.visit();\n});\n```\n\n----------------------------------------\n\nTITLE: Vault WAL Deletion Metric Specification\nDESCRIPTION: Defines the metric for measuring the time taken to delete write-ahead log files in Vault. The metric is of type 'summary' and measures duration in milliseconds.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/wal/deletewals.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to fully delete a write-ahead log\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Redirect Parameter Forwarding\nDESCRIPTION: Modifies authentication route to forward redirect_to parameter when a user is already authenticated, improving user experience and navigation flow.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16821.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrelease-note:improvement\nui: redirect_to param forwards from auth route when authenticated\n```\n\n----------------------------------------\n\nTITLE: Enabling mlock for Containerized Vault Plugins\nDESCRIPTION: Bug fix release note indicating that containerized plugins can now be run with mlock enabled, which provides memory security by preventing memory from being swapped to disk.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23215.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nplugins: Containerized plugins can be run with mlock enabled.\n```\n```\n\n----------------------------------------\n\nTITLE: Retrieving Plugin Runtime Information in Vault\nDESCRIPTION: Command to display runtime details for a container-type plugin named 'runc', showing key metadata such as OCI runtime, name, and system resource allocations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/plugin/runtime/info.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin runtime info -type=container runc\n```\n\n----------------------------------------\n\nTITLE: Example Vault In-Memory Storage Configuration (HCL)\nDESCRIPTION: This is a duplicate example that shows activating the In-Memory storage backend with no configuration parameters. The snippet shows the basic syntax for declaring the in-memory storage, which is intended for development/testing and is not recommended for production use.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/in-memory.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nstorage \"inmem\" {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Specific Vault Namespace via CLI\nDESCRIPTION: This snippet shows the command to create a specific namespace named `ns_admin` using the Vault CLI. This command is used in the tutorial to set up an administrative namespace.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/create-admin-namespace.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace create ns_admin\n```\n\n----------------------------------------\n\nTITLE: OCI Authorization Header for Vault Authentication\nDESCRIPTION: Example of the Authorization header generated after signing the request with OCI credentials. This header contains the signature algorithm, included headers, key ID, and the signature value that Vault will verify.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/oci.mdx#2025-04-14_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nSignature version=\"1\",headers=\"date (request-target) host\",keyId=\"ocid1.t\nenancy.oc1..aaaaaaaaba3pv6wkcr4jqae5f15p2b2m2yt2j6rx32uzr4h25vqstifsfdsq/\nocid1.user.oc1..aaaaaaaat5nvwcna5j6aqzjcaty5eqbb6qt2jvpkanghtgdaqedqw3ryn\njq/73:61:a2:21:67:e0:df:be:7e:4b:93:1e:15:98:a5:b7\",algorithm=\"rsa-sha256\n\",signature=\"GBas7grhyrhSKHP6AVIj/h5/Vp8bd/peM79H9Wv8kjoaCivujVXlpbKLjMPe\nDUhxkFIWtTtLBj3sUzaFj34XE6YZAHc9r2DmE4pMwOAy/kiITcZxa1oHPOeRheC0jP2dqbTll\n8fmTZVwKZOKHYPtrLJIJQHJjNvxFWeHQjMaR7M=\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Core Activation Flags Feature in Release Notes\nDESCRIPTION: Release note entry describing the addition of activation flags to Vault Core Edition (CE). This mechanism allows users to opt in to new functionality at their convenience, extending a feature previously available only in Enterprise for SecretSync to be available in CE for future features.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29237.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore: Add activation flags. A mechanism for users to opt in to new functionality at a convenient time. Previously used only in Enterprise for SecretSync, activation flags are now available in CE for future features to use.\n```\n\n----------------------------------------\n\nTITLE: Promote DR Secondary Sample Response\nDESCRIPTION: JSON response showing the progress of a DR secondary promotion operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-dr.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"progress\": 0,\n  \"required\": 1,\n  \"complete\": false,\n  \"request_id\": \"ad8f9074-0e24-d30e-83cd-595c9652ff89\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"complete\": false,\n    \"progress\": 0,\n    \"required\": 1\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Quota Management Bug Fix\nDESCRIPTION: This release note documents a bug fix for Vault Enterprise's core functionality. The fix addresses an issue where quotas were being deleted on all clusters instead of only the primary cluster.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12339.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore (enterprise): Only delete quotas on primary cluster.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Database Methods Release Note\nDESCRIPTION: Release note entry documenting the addition of new database methods in Vault's core component that do not prepare statements, representing an improvement to the system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15166.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore: Add new DB methods that do not prepare statements.\n```\n\n----------------------------------------\n\nTITLE: Tidying Tokens in Vault (cURL)\nDESCRIPTION: Sample cURL request for performing token tidying operations in Vault. It sends a POST request to the tidy endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/auth/token/tidy\n```\n\n----------------------------------------\n\nTITLE: Measuring Vault Identity Entities\nDESCRIPTION: Provides a gauge metric that reports the current total number of identity entities in the Vault system. This metric helps administrators track identity management and system usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/identity/num_entities.mdx#2025-04-14_snippet_0\n\nLANGUAGE: metrics\nCODE:\n```\nvault.identity.num_entities\n```\n\n----------------------------------------\n\nTITLE: IPv6 & IPv4 Interface Configuration\nDESCRIPTION: Configuration for Vault to listen on all IPv6 and IPv4 interfaces.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_6\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  address         = \"[::]\":8200\"\n  cluster_address = \"[::]\":8201\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Mittwald's Vault PHP Library\nDESCRIPTION: Command to install Mittwald's Vault PHP client library using Composer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/libraries.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell-session\nCODE:\n```\n$ composer require mittwald/vault-php\n```\n\n----------------------------------------\n\nTITLE: Inspecting Merkle Difference Log Output\nDESCRIPTION: This snippet demonstrates how to interpret log entries related to Merkle tree operations, specifically when a performance secondary cluster encounters a corrupted Merkle tree. It illustrates the behavior during the merkle-diff state when the logs indicate conflicting page issues and the transition to streaming write-ahead logs (WALs).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nvault [INFO]  .perf-sec.core0.core: non-matching guard, exiting\nvault [TRACE] .perf-sec.core0.core: finished client WAL streaming\nvault [INFO]  .perf-sec.core0.replication: no matching WALs available\nvault [DEBUG] .perf-sec.core0.replication: starting merkle diff\nvault [TRACE] .perf-sec.core0.core: checking conflicting pages\nvault [TRACE] .perf-pri.core0.core: serving conflicting pages\nvault [DEBUG] .perf-pri.core0.replication.index.perf: creating merkle state snapshot: generation=4\nvault [DEBUG] .perf-pri.core0.replication.index.perf: removing state snapshot from cache: generation=4\nvault [INFO]  .perf-sec.core0.replication: requesting WAL stream: guard=8acf94ac\nvault [TRACE] .perf-sec.core0.core: starting client WAL streaming\nvault [TRACE] .perf-sec.core0.core: receiving WALs\nvault [TRACE] .perf-pri.core0.core: starting serving WALs: clientID=e16930a6-7d24-6924-41fe-aa8beb90b1b2\nvault [TRACE] .perf-pri.core0.core: streaming from log shipper done: clientID=e16930a6-7d24-6924-41fe-aa8beb90b1b2\nvault [TRACE] .perf-pri.core0.core: internal wal stream stop channel fired: clientID=e16930a6-7d24-6924-41fe-aa8beb90b1b2\nvault [TRACE] .perf-pri.core0.core: stopping serving WALs: clientID=e16930a6-7d24-6924-41fe-aa8beb90b1b2\nvault [INFO]  .perf-sec.core0.core: non-matching guard, exiting\nvault [TRACE] .perf-sec.core0.core: finished client WAL streaming\nvault [INFO]  .perf-sec.core0.replication: no matching WALs available\nvault [TRACE] .perf-sec.core0.core: wal context done\nvault [DEBUG] .perf-sec.core0.replication: starting merkle diff\nvault [TRACE] .perf-sec.core0.core: checking conflicting pages\nvault [TRACE] .perf-pri.core0.core: serving conflicting pages\n```\n\n----------------------------------------\n\nTITLE: Vault Azure Auth Plugin Update Release Note\nDESCRIPTION: This release note indicates an update to the Azure authentication plugin for HashiCorp Vault. The plugin is being updated to version v0.20.0. This likely includes bug fixes, new features, or security enhancements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29606.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nauth/azure: Update plugin to v0.20.0\n```\n```\n\n----------------------------------------\n\nTITLE: KMIP Attributes Support Table\nDESCRIPTION: Markdown table listing supported KMIP attributes with their implementation status and version notes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip-profiles.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Attribute                                                              | Supported | Notes  |\n| -----------------------------------------------------------------------| :-------: | :----: |\n| Unique Identifier [KMIP-SPEC 3.1][kmip-spec-3.1]                       | ✅        |        |\n| Name [KMIP-SPEC 3.2][kmip-spec-3.2]                                    | ✅        |        |\n| Object Type [KMIP-SPEC 3.3][kmip-spec-3.3]                             | ✅        |        |\n```\n\n----------------------------------------\n\nTITLE: Allowing HTTP Header Specification in Vault CLI using JSON\nDESCRIPTION: This snippet notes the enhancement of the Vault CLI to enable users to set HTTP headers via the VAULT_HEADERS environment variable, which is encoded in JSON. This change enhances user experience by simplifying the configuration process for API requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21993.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncli: Allow vault CLI HTTP headers to be specified using the JSON-encoded VAULT_HEADERS environment variable\"\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Text Overflow in Flash Messages\nDESCRIPTION: A release note in markdown format documenting a bug fix for text overflow issues in flash messages within the Vault UI. Flash messages are typically temporary notifications shown to users after actions are completed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12357.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fixed text overflow in flash messages\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Replication Command Example\nDESCRIPTION: Shell command example for enabling Vault performance replication using the active service.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/kubernetes.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nvault write -f sys/replication/performance/primary/enable \\\n    primary_cluster_addr='https://vault-active-us-east:8201'\n```\n\n----------------------------------------\n\nTITLE: Release Note: UI Version History Query Parameters Fix\nDESCRIPTION: Documentation of a bug fix addressing issues with version history query parameters in the Vault UI's LinkedBlock component.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12079.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: Fix Version History queryParams on LinkedBlock\n```\n\n----------------------------------------\n\nTITLE: Multiple Interface Listening Configuration\nDESCRIPTION: Configuration for Vault to listen on multiple interfaces including localhost and a private network interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/listener/tcp/index.mdx#2025-04-14_snippet_2\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  address = \"127.0.0.1:8200\"\n}\n\nlistener \"tcp\" {\n  address = \"10.0.0.5:8200\"\n}\n\n# Advertise the non-loopback interface\napi_addr = \"https://10.0.0.5:8200\"\ncluster_addr = \"https://10.0.0.5:8201\"\n```\n\n----------------------------------------\n\nTITLE: JSON Response for Entity Count in Vault\nDESCRIPTION: This JSON snippet shows the structure of the response returned when querying the entity count. It includes a 'data' object with a nested 'counters' object containing the total number of entities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"75cbaa46-e741-3eba-2be2-325b1ba8f03f\",\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": {\n    \"counters\": {\n      \"entities\": {\n        \"total\": 1\n      }\n    }\n  },\n  \"wrap_info\": null,\n  \"warnings\": null,\n  \"auth\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Agent Namespace Environment Variable Handling\nDESCRIPTION: Bug fix release note indicating that the Vault agent will now only set the namespace if the VAULT_NAMESPACE environment variable is not already present, preserving user-defined values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10556.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nrelease-note:bug\nagent: Only set the namespace if the VAULT_NAMESPACE env var isn't present\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note for Database Connection Bug Fix\nDESCRIPTION: Release note documenting a fix for a goroutine blocking issue in the Vault database SDK when handling slow database connections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29097.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nrepo:/hashicorp/vault\nsdk/database: Fix a bug where slow database connections can cause goroutines to be blocked.\n```\n\n----------------------------------------\n\nTITLE: AliCloud Config GET Response Example\nDESCRIPTION: Example response from a GET request to the config endpoint showing the configured access key (but not the secret key for security).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"access_key\": \"0wNEpMMlzy7szvai\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Reading a Group Alias - JSON\nDESCRIPTION: This JSON snippet illustrates the expected response format when successfully querying a group alias by its ID. It details various properties of the alias, including `creation_time` and `last_update_time`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group-alias.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"canonical_id\": \"b86920ea-2831-00ff-15c5-a3f923f1ee3b\",\n    \"creation_time\": \"2017-11-13T20:09:41.661694Z\",\n    \"id\": \"ca726050-d8ac-6f1f-4210-3b5c5b613824\",\n    \"last_update_time\": \"2017-11-13T20:09:41.661694Z\",\n    \"merged_from_canonical_ids\": null,\n    \"metadata\": null,\n    \"mount_accessor\": \"auth_github_232a90dc\",\n    \"mount_path\": \"\",\n    \"mount_type\": \"github\",\n    \"name\": \"dev-team\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SDK LDAP Client Deprecation\nDESCRIPTION: Deprecates the existing SDK LDAP client in favor of the new cap/ldap.Client, signaling a transition to a more robust LDAP client implementation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22185.txt#2025-04-14_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsdk/ldaputil: deprecates Client in favor of cap/ldap.Client\n```\n\n----------------------------------------\n\nTITLE: Installing Enos via Homebrew\nDESCRIPTION: Command to install Enos using Homebrew package manager. This installs the latest version of Enos (>= v0.0.28) which is required for running Vault scenarios.\nSOURCE: https://github.com/hashicorp/vault/blob/main/enos/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew tap hashicorp/tap && brew update && brew install hashicorp/tap/enos\n```\n\n----------------------------------------\n\nTITLE: Updating Group Policy Application Mode in Vault\nDESCRIPTION: This command updates the `group_policy_application_mode` setting to `any`. This allows policies to be applied and secrets to be shared across namespaces without a hierarchical relationship.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/configure-cross-namespace-access.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write sys/config/group-policy-application \\\n     group_policy_application_mode=\"any\"\n```\n\n----------------------------------------\n\nTITLE: Setting TTL for KV Secret\nDESCRIPTION: Example of setting a TTL (Time To Live) hint for a secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put kv/my-secret ttl=30m my-value=s3cr3t\n```\n\n----------------------------------------\n\nTITLE: Improving Memory Usage in Vault SDK Decompression\nDESCRIPTION: Updates the DecompressWithCanary method to process data in chunks, preventing full file loading into memory at once. This optimization helps manage memory consumption during large file decompression.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26464.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsdk/decompression: DecompressWithCanary will now chunk the decompression in memory to prevent loading it all at once.\n```\n\n----------------------------------------\n\nTITLE: API Plugin Listing Endpoint Update\nDESCRIPTION: Changes the plugin catalog listing to exclusively use GET endpoint with additional details field in responses\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17347.txt#2025-04-14_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET /sys/plugins/catalog\n```\n\n----------------------------------------\n\nTITLE: Release Note: UI Bug Fix\nDESCRIPTION: This release note documents a fix for a bug in the Vault UI that incorrectly redirected secret version and status menu links to the authentication screen. This ensures users can navigate within the secret management interface without unexpected interruptions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16983.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\"ui: Fixes secret version and status menu links transitioning to auth screen\"\n```\n\n----------------------------------------\n\nTITLE: Changing Driver Library for PostgreSQL in Database Layer\nDESCRIPTION: This release note highlights the transition of the underlying driver library for PostgreSQL in the database layer from lib/pq to pgx, aimed at enhancing performance and features.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15343.txt#2025-04-14_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\ndatabase/postgres: Change underlying driver library from [lib/pq](https://github.com/lib/pq) to [pgx](https://github.com/jackc/pgx)\"\n```\n\n----------------------------------------\n\nTITLE: Vault JWT Auth Plugin Version Update\nDESCRIPTION: This release note indicates an update to the Vault JWT Auth plugin to version v0.20.1. This likely includes bug fixes, new features, or security improvements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25937.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nauth/jwt: Update plugin to v0.20.1\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Core Engine Component with Backing Class\nDESCRIPTION: Command to generate a component with a backing class in the core engine using the -gc flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nember g component foo -gc -ir core\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Authentication Improvement in Markdown\nDESCRIPTION: This release note describes an improvement to the Vault UI authentication process. It addresses an issue where the latest version of Chrome doesn't automatically redirect back to the app after authentication unless triggered by the user. To resolve this, a link has been added to allow users to manually redirect back to the app.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18513.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: latest version of chrome does not automatically redirect back to the app after authentication unless triggered by the user, hence added a link to redirect back to the app.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Elasticsearch Security API Path\nDESCRIPTION: Modification to use the new /_security base API path instead of the deprecated /_xpack/security path when managing Elasticsearch security configurations in HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15614.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/database/elasticsearch: Use the new /_security base API path instead of /_xpack/security when managing elasticsearch.\n```\n\n----------------------------------------\n\nTITLE: Signature Verification API Request\nDESCRIPTION: Example cURL command for verifying a signature using the Transit secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_63\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/transit/verify/my-key/sha2-512\n```\n\n----------------------------------------\n\nTITLE: Enabling the Database Secrets Engine in Vault\nDESCRIPTION: Command to enable the database secrets engine in Vault, which is required before configuring the Redis ElastiCache plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/rediselasticache.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets enable database\nSuccess! Enabled the database secrets engine at: database/\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fix for Event Sending in Vault\nDESCRIPTION: This release note indicates a fix for the events system in Vault. The change involves ignoring the sending context to allow more time for events to be sent, addressing a timing-related issue.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23500.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nevents: Ignore sending context to give more time for events to send\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Specific Error Message Handling for Unseal Failure in Vault UI\nDESCRIPTION: This snippet documents the addition of a specific error message in the Vault UI to inform users when the unseal operation fails due to licensing issues. This improvement aims to make error handling clearer for administrators.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11705.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nui: Add specific error message if unseal fails due to license\"\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response from Vault Experiments API\nDESCRIPTION: This JSON object represents the response from the `/sys/experiments` endpoint. It contains information about available and enabled experiments on the Vault node, including request metadata and experiment data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/experiments.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"cb48b1e2-635c-52e9-db79-ad9a54ed3e88\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"available\": [\n      \"events.alpha1\"\n    ],\n    \"enabled\": []\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Replication Metric Definition - Group Upsert Request\nDESCRIPTION: Defines a summary metric that measures the time in milliseconds required to complete a group upsert request in Vault's replication RPC server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/replication/rpc/server/upsert_group_request.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.replication.rpc.server.upsert_group_request ((#vault-replication-rpc-server-upsert_group_request))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a group upsert request\n```\n\n----------------------------------------\n\nTITLE: Fixing Transit Secrets Engine Lock Release\nDESCRIPTION: Resolves a potential deadlock scenario when handling invalid hash algorithm configurations in Vault's transit secrets engine. The bug caused a lock to remain unreleased after encountering an error with invalid input.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25336.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/transit: When provided an invalid input with hash_algorithm=none, a lock was not released properly before reporting an error leading to deadlocks on a subsequent key configuration update.\n```\n\n----------------------------------------\n\nTITLE: Deleting Policy via API\nDESCRIPTION: API request to delete a policy using cURL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_28\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n  --request DELETE \\\n  --header \"X-Vault-Token: ...\" \\\n  https://vault.hashicorp.rocks/v1/sys/policy/policy-name\n```\n\n----------------------------------------\n\nTITLE: Listing UI Headers Configuration Request\nDESCRIPTION: Makes a LIST request to retrieve all configured UI headers. Requires X-Vault-Token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/config/ui/headers\n```\n\n----------------------------------------\n\nTITLE: Returning HTTP 400 for Invalid Unseal Key\nDESCRIPTION: This release note details a fix in the Vault core system where an attempt to unseal with an incorrect key now properly returns an HTTP 400 error, indicating a bad request. This improves user feedback and error handling during the unsealing process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17836.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:bug\\ncore: trying to unseal with the wrong key now returns HTTP 400\"\n```\n\n----------------------------------------\n\nTITLE: Documenting Centrify Plugin Deprecation in Markdown\nDESCRIPTION: A release note in markdown format that announces the deprecation of the Centrify authentication plugin in HashiCorp Vault version 1.15, with planned removal in version 1.17.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23050.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:deprecation\nauth/centrify: Centrify plugin is deprecated as of 1.15, slated for removal in 1.17\n```\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Pod Labels Example\nDESCRIPTION: Example of pod labels applied by Vault service registration when pods are running.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/kubernetes.mdx#2025-04-14_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: vault\n  labels:\n    vault-active: \"false\"\n    vault-initialized: \"true\"\n    vault-perf-standby: \"false\"\n    vault-sealed: \"false\"\n    vault-version: 1.19.0\n```\n\n----------------------------------------\n\nTITLE: Adding Deadlock Detection Configuration in Vault Core\nDESCRIPTION: This snippet introduces a new configuration option 'detect_deadlocks' in Vault's core. This option allows for optional detection of core state deadlocks, enhancing Vault's operational stability and troubleshooting capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18604.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore: add `detect_deadlocks` config to optionally detect core state deadlocks\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring TCP Listener for Vault Agent in HCL\nDESCRIPTION: This snippet sets up a TCP listener for Vault Agent. It specifies the address to listen on and disables TLS for the connection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/proxy/caching/static-secret-caching.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n    address = \"127.0.0.1:8100\"\n    tls_disable = true\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ACME Account Info in Vault PKI (Shell)\nDESCRIPTION: This snippet demonstrates how to retrieve account information for a specific ACME account key using a GET request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/acme/mgmt/account/keyid/2ea9859a-eba8-ff24-cd03-2a51639fc7d5\n```\n\n----------------------------------------\n\nTITLE: Reading Client Count Configuration Response in JSON (Vault)\nDESCRIPTION: This JSON snippet shows a sample response from reading the client count configuration in Vault. It includes settings such as enabled status, query availability, and retention period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"25a94b99-b49a-c4ac-cb7b-5ba0eb390a25\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"enabled\": \"default-enabled\",\n    \"queries_available\": true,\n    \"retention_months\": 48,\n    \"reporting_enabled\": false,\n    \"billing_start_timestamp\": \"2022-03-01T00:00:00Z\",\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Token Accessor Capabilities in Vault - cURL Request\nDESCRIPTION: A shell command using cURL to send a POST request to the Vault API endpoint for checking the capabilities of a token accessor. It includes the authorization header and references a payload file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/capabilities-accessor.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/capabilities-accessor\n```\n\n----------------------------------------\n\nTITLE: Validating CF Certificate Chain with OpenSSL\nDESCRIPTION: This OpenSSL command verifies the certificate chain for CF instance certificates. It helps in troubleshooting authentication issues by ensuring that the identity certificate is properly chained to the configured CA certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl verify -CAfile ca.crt -untrusted intermediate.crt identity.crt\n```\n\n----------------------------------------\n\nTITLE: Measuring CouchDB Put Operation Time in Vault\nDESCRIPTION: A metric that captures the duration of PUT operations against the CouchDB storage backend in HashiCorp Vault, measured in milliseconds\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/couchdb/put.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.couchdb.put ((#vault-couchdb-put))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `PUT` operation against the CouchDB storage backend\n```\n\n----------------------------------------\n\nTITLE: Updating Dependencies for GCP KMS in Go\nDESCRIPTION: This code snippet updates the Google Cloud API dependency to version v0.83.0 for enhanced functionality and compatibility within the GCP KMS secrets engine of HashiCorp Vault. It is essential for maintaining up-to-date integrations with Google Cloud services. The primary input is the updated dependency version, and the output is an updated dependency within the Go module.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17199.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nsecrets/gcpkms: Update dependencies: google.golang.org/api@v0.83.0.\"\n```\n\n----------------------------------------\n\nTITLE: Correcting Doctype in HTML for UI\nDESCRIPTION: This release note documents the correction of the doctype declaration in the index.html file. This ensures that the file complies with HTML standards, which is crucial for proper rendering of the UI in web browsers.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22153.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:bug\\nui: correct doctype for index.html\"\n```\n\n----------------------------------------\n\nTITLE: Generating Client ID Hyperloglogs\nDESCRIPTION: Enhances activity logging by creating hyperloglogs containing client identifiers on a monthly basis during precomputation stage\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16146.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncore/activity: generate hyperloglogs containing clientIds for each month during precomputation\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Secrets Plugin Version in Release Notes\nDESCRIPTION: Release note entry documenting the update of the Azure secrets plugin to version 0.16.2 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22799.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/azure: Update plugin to v0.16.2\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Auth Method Capabilities in Vault (Markdown)\nDESCRIPTION: This release note entry describes a bug fix for the Vault user interface. The fix addresses an issue related to editing authentication method capabilities, improving the functionality of the UI for managing auth methods.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14966.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fixes edit auth method capabilities issue\n```\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - OpenAPI Audit Endpoint Improvement\nDESCRIPTION: Release note entry documenting the addition of OpenAPI response definitions to the /sys/audit endpoints in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18456.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nopenapi: add openapi response defintions to /sys/audit endpoints\n```\n\n----------------------------------------\n\nTITLE: SSH Secrets Engine Release Note\nDESCRIPTION: Bug fix documentation for returning the allow_empty_principals flag when reading role configuration for CA key type in Vault's SSH secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28901.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nsecrets/ssh: Return the flag `allow_empty_principals` in the read role api when key_type is \"ca\"\n```\n\n----------------------------------------\n\nTITLE: Vault UI Toggle Component Enhancement\nDESCRIPTION: Adds Toggle component to core addon for availability across Ember Engines like KMIP\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-pre-v1.10.md#2025-04-14_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n* ui: Add Toggle component into core addon so it is available in KMIP and other Ember Engines.[[GH-8913]](https://github.com/hashicorp/vault/pull/8913)\n```\n\n----------------------------------------\n\nTITLE: Listing Plugins by Type with LIST Request in Vault\nDESCRIPTION: This snippet shows how to list plugins by specific type using a LIST request to endpoints like /sys/plugins/catalog/auth. The example uses the auth endpoint to retrieve all authentication plugins.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-catalog.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST\n    http://127.0.0.1:8200/v1/sys/plugins/catalog/auth\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"data\": {\n        \"keys\": [\n            \"aws\",\n            \"azure\",\n            \"custom-auth-plugin\",\n            \"gcp\",\n            \"ldap\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Rate Limit Environment Variable\nDESCRIPTION: Example of setting the VAULT_RATE_LIMIT environment variable to configure request throttling with a rate of 10 operations per second and a burst limit of 30.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/rate_limit.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport VAULT_RATE_LIMIT=\"10:30\"\n```\n\n----------------------------------------\n\nTITLE: Creating OIDC Reviewer ClusterRoleBinding in Kubernetes\nDESCRIPTION: This command creates a ClusterRoleBinding to allow unauthenticated access to OIDC discovery URLs in Kubernetes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/kubernetes.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl create clusterrolebinding oidc-reviewer  \\\n   --clusterrole=system:service-account-issuer-discovery \\\n   --group=system:unauthenticated\n```\n\n----------------------------------------\n\nTITLE: Listing Zero-Address SSH Roles in Vault\nDESCRIPTION: Example of retrieving configured zero-address roles using a GET request. Zero-address roles allow credentials to be requested for any IP address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/ssh/config/zeroaddress\n```\n\n----------------------------------------\n\nTITLE: Vault Operator Generate Root Command Improvement\nDESCRIPTION: This snippet describes an improvement to the Vault operator generate-root command that allows passing the encoded token via stdin. The -decode flag enables the functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12881.txt#2025-04-14_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n```release-note:improvement\ncommand: operator generate-root -decode: allow passing encoded token via stdin\n```\n```\n\n----------------------------------------\n\nTITLE: Subscribing to All KV Event Notifications\nDESCRIPTION: This command subscribes to all Key-Value (KV) event notifications in Vault using a glob pattern.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/events.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault events subscribe 'kv*'\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Token Copy in Collapsed Sidebar (Markdown)\nDESCRIPTION: This release note describes a bug fix for the Vault UI. It addresses an issue where the copy token button in the sidebar navigation was not functioning correctly when the sidebar was in a collapsed state.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23331.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fix the copy token button in the sidebar navigation window when in a collapsed state.\n```\n```\n\n----------------------------------------\n\nTITLE: Fetching Secondary Public Key\nDESCRIPTION: cURL command to generate and fetch a public key from a secondary node for secure credential transfer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/replication-performance.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/performance/secondary/generate-public-key\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Vault TLS Configuration in Kubernetes\nDESCRIPTION: Defines the necessary environment variables that will be used throughout the TLS setup process, including service name, namespace, secret name, and working directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/helm/examples/standalone-tls.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# SERVICE is the name of the Vault service in kubernetes.\n# It does not have to match the actual running service, though it may help for consistency.\nexport SERVICE=vault-server-tls\n\n# NAMESPACE where the Vault service is running.\nexport NAMESPACE=vault-namespace\n\n# SECRET_NAME to create in the kubernetes secrets store.\nexport SECRET_NAME=vault-server-tls\n\n# TMPDIR is a temporary working directory.\nexport TMPDIR=/tmp\n\n# CSR_NAME will be the name of our certificate signing request as seen by kubernetes.\nexport CSR_NAME=vault-csr\n```\n\n----------------------------------------\n\nTITLE: Listing Available SSH Roles in Vault\nDESCRIPTION: Example of making a LIST request to retrieve all available SSH roles from Vault. The request includes authentication via the X-Vault-Token header.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/ssh/roles\n```\n\n----------------------------------------\n\nTITLE: Response for Token Transformation Request (JSON)\nDESCRIPTION: This JSON response shows the expected output of a token transformation request, detailing the encoded values and their references.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"batch_results\": [\n      {\n        \"encoded_value\": \"1111-2222-3333-4444\",\n        \"reference\": \"order#1234\"\n      },\n      {\n        \"encoded_value\": \"1111-2222-3333-4444\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Digicert Certificates in PowerShell\nDESCRIPTION: PowerShell commands to import required Digicert certificates into the Root trust store to resolve Authenticode signature verification failures. Creates a temporary directory, syncs with Windows Update, extracts certificates, adds them to the Root store, and cleans up.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/troubleshooting.mdx#2025-04-14_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nNew-Item -ItemType Directory -Path certs\ncertutil -syncwithWU .\\certs\\\nextrac32 -L .\\certs\\ .\\certs\\authrootstl.cab\ncertutil -f -ent -AddStore Root .\\certs\\authroot.stl\ncertutil -f -ent -AddStore Root .\\certs\\0563b8630d62d75abbc8ab1e4bdfb5a899b24d43.crt\ncertutil -f -ent -AddStore Root .\\certs\\ddfb16cd4931c973a2037d3fc83a4d7d775d05e4.crt\nRemove-Item -Recurse .\\certs\\\n```\n\n----------------------------------------\n\nTITLE: Sample Request to Delete Configuration - Shell\nDESCRIPTION: This shell command demonstrates how to make a DELETE request to remove the configuration of the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/gcpkms/config\n```\n\n----------------------------------------\n\nTITLE: Upgrading x/net Dependency in Vault\nDESCRIPTION: This release note specifies an upgrade of the x/net dependency to version 0.17.0 in the Vault project. x/net is a Go package that provides additional networking functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23703.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nUpgrade x/net to v0.17.0\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting Bug Fix for Vault Description in Markdown\nDESCRIPTION: This release note indicates a bug fix in the Vault documentation. It expands the description of 'What is Vault?' to better align with the content provided by the CSA (presumably Customer Success and Adoption) team.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12684.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nDoc: Expanded the description of \"What is Vault?\" to align with CSA team's content.\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Improvement for Mount Backend Form in Vault\nDESCRIPTION: Release note entry documenting enhancement to Vault's user interface, specifically updating the mount backend form to implement selectable cards for improved user interaction.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14998.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: Update mount backend form to use selectable cards\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - Identity System Improvement\nDESCRIPTION: Release note entry documenting an improvement to Vault's core identity subsystem that fixes data race conditions identified by Go's race detector. While no actual issues were reported, this proactive fix improves system reliability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15123.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\ncore: Fix some identity data races found by Go race detector (no known impact yet).\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: Markdown frontmatter defining the documentation page metadata and layout settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/methods/gcp.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: Auto-auth with GCP\ndescription: >\n  Use Google Cloud Platform (GCP) for auto-authentication with Vault Agent or\n  Vault Proxy.\n---\n```\n\n----------------------------------------\n\nTITLE: OIDC Scope: List Request\nDESCRIPTION: This is a sample `curl` request to list all OIDC scopes. It sends a LIST request to the specified endpoint, including the Vault token. Replace `...` with your Vault token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/identity/oidc/scope\n```\n\n----------------------------------------\n\nTITLE: Sending Cassandra Configuration Request to Vault API\nDESCRIPTION: cURL command example for sending a POST request to configure a Cassandra connection via Vault's HTTP API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/cassandra.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/cassandra/config/connection\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Proxy Address in Bash\nDESCRIPTION: This snippet demonstrates how to set the VAULT_PROXY_ADDR environment variable in Bash. It specifies an HTTPS address including server and port for client access to Vault, overriding default proxy settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/env/proxy_addr.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_PROXY_ADDR=\"https://gohereforvault:8200\"\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Auth Plugin Version in Vault Release Note (Markdown)\nDESCRIPTION: This code snippet is a release note in Markdown format, documenting a change in the Azure authentication plugin for HashiCorp Vault. It specifies that the plugin has been updated to version 0.16.1.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22795.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nauth/azure: Update plugin to v0.16.1\n```\n```\n\n----------------------------------------\n\nTITLE: Deleting an Azure Auth Role\nDESCRIPTION: cURL command to delete a previously registered role from the Azure auth method.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/auth/azure/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Static Accounts Listing Response (JSON)\nDESCRIPTION: Sample JSON response showing the list of static accounts configured in the GCP secrets engine, returning just the names of available accounts.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcp.mdx#2025-04-14_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"keys\": [\"my-token-account\", \"my-sakey-account\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exporting and Encoding a GnuPG Public Key\nDESCRIPTION: This command exports a GnuPG public key, encodes it in base64, and saves it to a file named 'seth.asc'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --export 348FFC4C | base64 > seth.asc\n```\n\n----------------------------------------\n\nTITLE: Updating Redis-Elasticache Vault Plugin\nDESCRIPTION: This code snippet represents a release note indicating the update of the Vault database plugin for Redis-Elasticache to version v0.6.0.  This update likely contains changes to the plugin's functionality, bug fixes, and/or security improvements. No specific dependencies are mentioned.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29594.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\ndatabase/redis-elasticache: Update plugin to v0.6.0\n```\n```\n\n----------------------------------------\n\nTITLE: Login to CredHub\nDESCRIPTION: Logs into CredHub using the specified client name and secret. This requires prior configuration of the CredHub client with necessary permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ credhub login --client-name=director_to_credhub --client-secret=some-secret\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure WIF in Vault CLI\nDESCRIPTION: Shell command to configure Azure authentication method with tenant ID, client ID, and identity token audience for Workload Identity Federation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/azure.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write azure/config \\\n  tenant_id=7cd1f227-ca67-4fc6-a1a4-9888ea7f388c \\\n  client_id=dd794de4-4c6c-40b3-a930-d84cd32e9699 \\\n  identity_token_audience=vault.example/v1/identity/oidc/plugins\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Payload for Restore Key\nDESCRIPTION: The JSON payload consists of the backed-up key data necessary for restoring it through the Vault Transit Engine. This includes the backup information and any additional parameters required for the restore operation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_70\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"backup\": \"eyJwb2xpY3kiOnsibmFtZSI6ImFlcyIsImtleXMiOnsiMSI6eyJrZXkiOiJXK3k4Z0dOMHdiTDJLOU95NXFPN1laMGtjdzMvR0ZiNWM4STBzdlNMMnFNPSIsImhtYWNfa2V5IjoiUDBTcjh1YTJaZERNUTdPd2h4RGp1Z0U5d0JSR3Q2QXl6K0t4TzN5Z2M5ST0iLCJ0aW1lIjoiMjAxNy0xMi0wOFQxMTo1MDowOC42MTM4MzctMDU6MDAiLCJlY194IjpudWxsLCJlY195IjpudWxsLCJlY19kIjpudWxsLCJyc2Ffa2V5IjpudWxsLCJwdWJsaWNfa2V5IjoiIiwiY3JlYXRpb25fdGltZSI6MTUxMjc1MTgwOH19LCJkZXJpdmVkIjpmYWxzZSwia2RmIjowLCJjb252ZXJnZW50X2VuY3J5cHRpb24iOmZhbHNlLCJleHBvcnRhYmxlIjpmYWxzZSwibWluX2RlY3J5cHRpb25fdmVyc2lvbiI6MSwibWluX2VuY3J5cHRpb25fdmVyc2lvbiI6MCwibGF0ZXN0X3ZlcnNpb24iOjEsImFyY2hpdmVfdmVyc2lvbiI6MSwiZGVsZXRpb25fYWxsb3dlZCI6ZmFsc2UsImNvbnZlcmdlbnRfdmVyc2lvbiI6MCwidHlwZSI6MCwiYmFja3VwX2luZm8iOnsidGltZSI6IjIwMTctMTItMDhUMTE6NTA6MjkuMjI4MTU3LTA1OjAwIiwidmVyc2lvbiI6MX0sInJlc3RvcmVfaW5mbyI6bnVsbH0sImFyY2hpdmVkX2tleXMiOnsia2V5cyI6W3sia2V5IjpudWxsLCJobWFjX2tleSI6bnVsbCwidGltZSI6IjAwMDEtMDEtMDFUMDA6MDA6MDBaIiwiZWNfeCI6bnVsbCwiZWNfeSI6bnVsbCwiZWNfZCI6bnVsbCwicnNhX2tleSI6bnVsbCwicHVibGljX2tleSI6IiIsImNyZWF0aW9uX3RpbWUiOjB9LHsia2V5IjoiVyt5OGdHTjB3YkwySzlPeTVxTzdZWjBrY3czL0dGYjVjOEkwc3ZTTDJxTT0iLCJobWFjX2tleSI6IlAwU3I4dWEyWmRETVE3T3doeERqdWdFOXdCUkd0NkF5eitLeE8zeWdjOUk9IiwidGltZSI6IjIwMTctMTItMDhUMTE6NTA6MDguNjEzODM3LTA1OjAwIiwiZWNfeCI6bnVsbCwiZWNfeSI6bnVsbCwiZWNfZCI6bnVsbCwicnNhX2tleSI6bnVsbCwicHVibGljX2tleSI6IiIsImNyZWF0aW9uX3RpbWUiOjE1MTI3NTE4MDh9XX19Cg==\"\n}\n```\n\n----------------------------------------\n\nTITLE: Making GET Request to Retrieve Pre-login Custom Messages in Vault\nDESCRIPTION: Sample shell command demonstrating how to retrieve active pre-login custom messages by making a GET request to the `/sys/internal/ui/unauthenticated-messages` endpoint in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-unauthenticated-messages.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    http://127.0.0.1:8200/v1/sys/internal/ui/unauthenticated-messages\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Verification - JSON\nDESCRIPTION: This JSON object is a sample payload for verifying a signed digest using the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"key_version\": \"1\",\n  \"digest\": \"LoM6lxd8YS+hUynZwrlCG20ViUUqqbNNNmh7HCtOkSc=\",\n  \"signature\": \"MGQCMEN2rgg6sj2vUEC3IcKDD+UprtMnxDoB3...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Access Rules on PowerShell\nDESCRIPTION: This snippet creates access control rules granting the 'Local System' and current user full control over the Vault directory on Windows.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\n$SystemAccessRule = \n  New-Object System.Security.AccessControl.FileSystemAccessRule(\n    \"SYSTEM\",\n    \"FullControl\",\n    \"ContainerInherit,Objectinherit\",\n    \"none\",\n    \"Allow\"\n  )\n```\n\nLANGUAGE: powershell\nCODE:\n```\n$myUsername = Get-CimInstance -Class Win32_Computersystem |    `\n                Select-Object UserName | foreach {$_.UserName} ; `\n  $AdminAccessRule =\n    New-Object System.Security.AccessControl.FileSystemAccessRule(\n      \"$myUsername\",\n      \"FullControl\",\n      \"ContainerInherit,Objectinherit\",\n      \"none\",\n      \"Allow\"\n    )\n```\n\n----------------------------------------\n\nTITLE: Documenting AWS Request Cancellation Enhancement - Secrets Module\nDESCRIPTION: This snippet presents a release note that details the enhancement of supporting request cancellation for AWS secret management requests in HashiCorp Vault. It aims to inform users about the added functionality that facilitates better control over AWS requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19365.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note: enhancement\\nsecrets/aws: Support request cancellation with AWS requests\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: Vault Raft List Peers Example Output\nDESCRIPTION: Shows example JSON output from the list-peers command displaying cluster configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/raft.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n ...\n  \"data\": {\n    \"config\": {\n      \"index\": 62,\n      \"servers\": [\n        {\n          \"address\": \"127.0.0.2:8201\",\n          \"leader\": true,\n          \"node_id\": \"node1\",\n          \"protocol_version\": \"3\",\n          \"voter\": true\n        },\n        {\n          \"address\": \"127.0.0.4:8201\",\n          \"leader\": false,\n          \"node_id\": \"node3\",\n          \"protocol_version\": \"3\",\n          \"voter\": true\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Event Framework in Vault using Shell\nDESCRIPTION: This shell command sets the VAULT_AUDIT_DISABLE_EVENTLOGGER environment variable to 'true' in order to disable the new event framework in Vault. This causes Vault to revert to the audit behavior used in version 1.14.x. The command should be run in a terminal session and requires a restart of Vault to take effect.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/1_15-audit-vault-enterprise-perf-standby-logs-all-headers.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ export VAULT_AUDIT_DISABLE_EVENTLOGGER=true\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Audit Device Description Flag\nDESCRIPTION: Example of using the -description flag when configuring a Vault audit device. The flag accepts a string value that provides a human-friendly explanation of the audit device's purpose.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/flags/description.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n-description \"KV request auditing\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Lease Settings for Nomad Tokens\nDESCRIPTION: Sets time-to-live (TTL) parameters for generated Nomad tokens to control their lifecycle and expiration\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/nomad.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ttl\": 1800,\n  \"max_ttl\": 3600\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/nomad/config/lease\n```\n\n----------------------------------------\n\nTITLE: List ACL Policies Response\nDESCRIPTION: Sample JSON response showing available ACL policy names\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\"root\", \"my-policy\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting SSH Host Key Removal Feature in Vault Release Note (Markdown)\nDESCRIPTION: This release note describes an improvement to the SSH secrets engine in HashiCorp Vault. It allows users to remove SSH host keys from the dynamic keys feature, enhancing flexibility in managing SSH configurations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18939.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nsecrets/ssh: Allow removing SSH host keys from the dynamic keys feature.\n```\n```\n\n----------------------------------------\n\nTITLE: Logging in with the Created Token\nDESCRIPTION: Command to authenticate the current CLI session with the newly created token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ vault login 70f97438-e174-c03c-40fe-6bcdc1028d6c\n```\n\n----------------------------------------\n\nTITLE: IAM Authentication Inference in Vault\nDESCRIPTION: Explains the mechanism of AWS IAM role authentication and instance ID inference in HashiCorp Vault, highlighting security considerations and potential risks of spoofing\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/aws.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## IAM authentication inferences\n```\n\n----------------------------------------\n\nTITLE: Importing a Key Version with JSON Payload in Transit Secrets Engine\nDESCRIPTION: Sample JSON payload for importing a new version of an existing key in Vault's Transit secrets engine. Contains only the ciphertext parameter with the encrypted key material.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ciphertext\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Warning Event Output\nDESCRIPTION: JSON output showing a warning event for VaultAuth resource when VaultAuthGlobal is not found.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": \"Event\",\n  \"apiVersion\": \"v1\",\n  \"metadata\": {\n    \"name\": \"default.17e2c0da7b0e36b5\",\n    \"namespace\": \"admin\",\n    \"uid\": \"3ca6088e-7391-4b76-9443-a790ccae02c0\",\n    \"resourceVersion\": \"634396\",\n    \"creationTimestamp\": \"2024-07-16T17:14:12Z\"\n  },\n  \"involvedObject\": {\n    \"kind\": \"VaultAuth\",\n    \"namespace\": \"admin\",\n    \"name\": \"default\",\n    \"uid\": \"1dabe3a5-5479-4f5d-ac48-5db7eff7f822\",\n    \"apiVersion\": \"secrets.hashicorp.com/v1beta1\",\n    \"resourceVersion\": \"631994\"\n  },\n  \"reason\": \"Accepted\",\n  \"message\": \"Failed to handle VaultAuth resource request: err=failed getting admin/default, err=VaultAuthGlobal.secrets.hashicorp.com \\\"default\\\" not found\",\n  \"source\": {\n    \"component\": \"VaultAuth\"\n  },\n  \"firstTimestamp\": \"2024-07-16T17:14:12Z\",\n  \"lastTimestamp\": \"2024-07-16T17:15:53Z\",\n  \"count\": 25,\n  \"type\": \"Warning\",\n  \"eventTime\": null,\n  \"reportingComponent\": \"VaultAuth\",\n  \"reportingInstance\": \"\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Metadata Retrieval\nDESCRIPTION: A sample JSON response illustrating the token metadata and expiration time returned by Vault when retrieving token metadata. The `metadata` field holds additional information about the token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_76\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"metadata\": \"Department=Marketing\"\n    \"expiration_time\": \"2020-11-04T04:00:00+00:00\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Google Cloud KMS Key from Vault\nDESCRIPTION: This snippet shows how to delete a Google Cloud KMS key from both Vault and Google Cloud KMS. It includes the necessary policy and curl command for the DELETE request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_29\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/keys/my-key\" {\n  capabilities = [\"delete\"]\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    https://127.0.0.1:8200/v1/gcpkms/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Message in Vault\nDESCRIPTION: Demonstrates creating a new custom message with specific parameters including title, authentication requirements, type, and message content.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-custom-messages.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"title\": \"Post-login Advisory\",\n  \"authenticated\": true,\n  \"type\": \"modal\",\n  \"message\": \"TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQ3VyYWJpdHVyIG51bGxhIGF1Z3VlLCBwbGFjZXJhdCBxdWlzIHJpc3VzIGJsYW5kaXQsIG1vbGVzdGllIGltcGVyZGlldCBtYXNzYS4gU2VkIGJsYW5kaXQgcnV0cnVtIG9kaW8gcXVpcyB2YXJpdXMuIEZ1c2NlIHB1cnVzIG9yY2ksIG1heGltdXMgYWMgbGliZXJvLgo=\",\n  \"start_time\": \"2024-01-01T00:00:00.000Z\"\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/config/ui/custom-messages\n```\n\n----------------------------------------\n\nTITLE: Using pki list-intermediates Command in Vault\nDESCRIPTION: This example demonstrates how to use the 'pki list-intermediates' command to list intermediate CA certificates issued by a parent issuer. The command returns the list of intermediate CA paths and indicates whether they match the parent certificate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/pki/list-intermediates.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault pki list-intermediates /pki_root/issuer/default\nintermediate                                             match?\n------------                                             ------\npki_int_2/issuer/d4404ccc-3ad4-83a9-f5df-398637654b3b    true\npki_int_2/issuer/db0b0a6c-6641-ac15-363a-4e5261315581    true\npki_root/issuer/9464c4fe-e8a6-d96a-0566-021575e7382c     true\npki_int/issuer/2f958ec5-1838-336e-331b-07032379b958      true\npki_int/issuer/b8cc0b41-e0e9-1a92-12c4-6849c9d6f837      true\n```\n\n----------------------------------------\n\nTITLE: Updating AWS Auth Endpoints in HashiCorp Vault\nDESCRIPTION: This release note describes changes to AWS Auth concepts and endpoints in HashiCorp Vault. It replaces terms like 'whitelist' and 'blacklist' with more inclusive language, such as 'accesslist'. The old endpoints are deprecated but still functional.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10997.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\naws/auth: AWS Auth concepts and endpoints that use the \"whitelist\" and \"blacklist\" terms\nhave been updated to more inclusive language (e.g. `/auth/aws/identity-whitelist` has been\nupdated to`/auth/aws/identity-accesslist`). The legacy endpoint names have not been removed\nbut are considered **deprecated**. The old and new endpoints are essentially aliases, sharing\nthe same underlying data. The complete list of endpoint changes is available in the\n[AWS Auth API docs](https://www.vaultproject.io/api-docs/auth/aws).\n```\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Authentication TLS Configuration Fix\nDESCRIPTION: Resolves inconsistent TLS configuration for Kubernetes API requests in the Vault authentication plugin. The bug fix ensures uniform TLS handling across different API interactions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18716.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nauth/kubernetes: Ensure a consistent TLS configuration for all k8s API requests [[#173](https://github.com/hashicorp/vault-plugin-auth-kubernetes/pull/173)]\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Key Store for XKS in AWS CLI\nDESCRIPTION: This command creates a custom key store with XKS configuration, specifying the proxy URI, authentication credentials, and connectivity type. It returns a CustomKeyStoreId upon successful creation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ aws kms create-custom-key-store \\\n    --custom-key-store-name myVaultKeyStore \\\n    --custom-key-store-type EXTERNAL_KEY_STORE \\\n    --xks-proxy-uri-endpoint https://example.ngrok.io \\\n    --xks-proxy-uri-path /xyz/kms/xks/v1 \\\n    --xks-proxy-authentication-credential AccessKeyId=AKIA4GBY3I6JCE5M2HPM,RawSecretAccessKey=1234567890123456789012345678901234567890123= \\\n    --xks-proxy-connectivity PUBLIC_ENDPOINT\n\n{\n    \"CustomKeyStoreId\": \"cks-d7a55fe93d63191d6\"\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to MySQL Storage Improvement Pull Request\nDESCRIPTION: Reference to a GitHub pull request that adds connection configuration options to MySQL storage backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4211](https://github.com/hashicorp/vault/pull/4211)]\n```\n\n----------------------------------------\n\nTITLE: LDAP Configuration JSON Payload\nDESCRIPTION: This JSON payload contains all the parameters needed to configure an LDAP authentication method in Vault, including connection settings, group configuration, and user attributes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/ldap.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"binddn\": \"cn=vault,ou=Users,dc=example,dc=com\",\n  \"deny_null_bind\": true,\n  \"discoverdn\": false,\n  \"groupattr\": \"cn\",\n  \"groupdn\": \"ou=Groups,dc=example,dc=com\",\n  \"groupfilter\": \"(\\u0026(objectClass=group)(member:1.2.840.113556.1.4.1941:={{.UserDN}}))\",\n  \"insecure_tls\": false,\n  \"starttls\": false,\n  \"tls_max_version\": \"tls12\",\n  \"tls_min_version\": \"tls12\",\n  \"url\": \"ldaps://ldap.myorg.com:636\",\n  \"username_as_alias\": false,\n  \"userattr\": \"samaccountname\",\n  \"userdn\": \"ou=Users,dc=example,dc=com\",\n  \"max_page_size\": 1000\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Denied Parameters in Vault Policy (HCL)\nDESCRIPTION: This snippet demonstrates how to set denied parameters in a Vault policy. It allows updating userpass user configurations but denies changes to 'token_policies' and 'policies' parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/policies.mdx#2025-04-14_snippet_11\n\nLANGUAGE: hcl\nCODE:\n```\npath \"auth/userpass/users/*\" {\n  capabilities = [\"update\"]\n  denied_parameters = {\n    \"token_policies\" = []\n    \"policies\" = []\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Service Startup Type in Windows\nDESCRIPTION: Sets the startup type for the Vault Windows service to 'Manual' to allow controlled testing before enabling automatic startup.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/run-as-service.mdx#2025-04-14_snippet_10\n\nLANGUAGE: powershell\nCODE:\n```\nnssm set MS_VAULT Start SERVICE_DEMAND_START\n```\n\n----------------------------------------\n\nTITLE: Querying Data Using Store Service in JavaScript\nDESCRIPTION: This snippet demonstrates how data was queried before implementing the pagination service. It uses the store.query method to fetch PKI role data based on backend and id parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/client-pagination.md#2025-04-14_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default class ExampleRoute extends Route {\n  @service store;\n\n  model(params) {\n    const { secret } = params;\n    const { backend } = this.paramsFor('vault.cluster.secrets.backend');\n    return this.store.query('pki/role', { backend, id })\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Upgrading Crypto SSH Library in Vault Core\nDESCRIPTION: Release note detailing the upgrade of the github.org/x/crypto/ssh library in Vault's core component. This represents an improvement to the system's cryptographic capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15125.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:improvement\ncore: Upgrade github.org/x/crypto/ssh\n```\n\n----------------------------------------\n\nTITLE: Removing Group Policy in Vault (Shell)\nDESCRIPTION: This command removes the 'group_policy' from a specific group ID in the 'ns1' namespace of Vault, setting only the 'default' policy.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/internal-error-namespace-missing-policy.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write                                             \\\n  -namespace=ns1                                          \\\n  identity/group/id/6cb152b7-955d-272b-4dcf-a2ed668ca1ea  \\\n  name=\"test\"                                             \\\n  policies=\"default\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Provider Class Parameters\nDESCRIPTION: Example structure of a SecretProviderClass object showing how to set parameters for the Vault provider.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/configurations.mdx#2025-04-14_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nobjects: |\n  - objectName: \"app-secret\"\n    secretPath: \"secret/data/test?version=1\"\n    secretKey: \"password\"\n```\n\n----------------------------------------\n\nTITLE: Reading Verbosity Level of a Single Logger (cURL Request)\nDESCRIPTION: Shell command to send a GET request to retrieve the current log level for a specific logger. This example checks the log level for the 'core' logger.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    https://127.0.0.1:8200/v1/sys/loggers/core\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT User Claims with JSON Pointer\nDESCRIPTION: Enables using JSON pointer syntax for specifying user claims in JWT authentication, providing more flexible claim extraction and mapping\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15593.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nuser_claim = \"/metadata/username\"\n```\n\n----------------------------------------\n\nTITLE: Sample Request to Read Configuration - Shell\nDESCRIPTION: This shell command demonstrates how to make a GET request to read the configuration of the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    https://127.0.0.1:8200/v1/gcpkms/config\n```\n\n----------------------------------------\n\nTITLE: Updating Docs Navigation with Internal Links\nDESCRIPTION: This JavaScript snippet shows how the documentation navigation file is structured for internal links. It provides a basic structure with the 'category' and 'content' keys.  The 'content' array contains strings representing links to the documentation pages.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  category: 'docs',\n  content: [\n    'foo'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Custom Docker Test Cluster for Vault in Go\nDESCRIPTION: This snippet demonstrates using DefaultOptions to set up a Docker test cluster. It allows for using a local Vault binary and setting environment variables for customization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc Test_Custom_Build_With_Docker(t *testing.T) {\n  opts := docker.DefaultOptions(t)\n  cluster := docker.NewTestDockerCluster(t, opts)\n  defer cluster.Cleanup()\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a New PGP Key with GnuPG\nDESCRIPTION: This command generates a new PGP key using GnuPG. It will prompt for user input to set up the key.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/pgp-gpg-keybase.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ gpg --gen-key\n```\n\n----------------------------------------\n\nTITLE: Reading Verbosity Level of All Loggers (JSON Response)\nDESCRIPTION: Example JSON response showing the current log levels for various Vault loggers. This output shows different verbosity levels set for different components.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/loggers.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"audit\": \"trace\",\n    \"core\": \"info\",\n    \"policy\": \"debug\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code for TOTP MFA\nDESCRIPTION: Creates a base64 decoded QR code image for TOTP authentication using method and entity IDs\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/login-mfa/index.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nvault write -field=barcode \\n   \\/identity\\/mfa\\/method\\/totp\\/admin-generate \\n   method_id=$TOTP_METHOD_ID entity_id=$ENTITY_ID \\n   | base64 -d > qr-code.png\n```\n\n----------------------------------------\n\nTITLE: Generating Client Certificate Credentials for MongoDB Atlas\nDESCRIPTION: Command to generate X.509 client certificate credentials for MongoDB Atlas by reading from the /creds endpoint with the certificate role name. Returns a client certificate, private key, and username.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mongodbatlas.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/creds/my-dynamic-certificate-role\n  Key                 Value\n  ---                 -----\n  request_id          b6556b2d-c379-5a92-465d-6597c506c821\n  lease_id            database/creds/my-dynamic-certificate-role/AZ5tao6NjLJctx7fm1bujKEL\n  lease_duration      1h\n  lease_renewable     true\n  client_certificate  -----BEGIN CERTIFICATE-----\n                      ...\n                      -----END CERTIFICATE-----\n  private_key         -----BEGIN PRIVATE KEY-----\n                      ...\n                      -----END PRIVATE KEY-----\n  private_key_type    rsa\n  username            CN=token_my-dynamic-certificate-role_1677262121\n```\n\n----------------------------------------\n\nTITLE: Reading an Entity by ID - HTTP API - Shell\nDESCRIPTION: This cURL command retrieves an entity by its ID using a GET request to Vault's HTTP API. It requires a valid Vault token in the request header and queries the endpoint `/identity/entity/id/:id`, where ':id' is the entity's identifier. No payload is needed for this request.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/entity.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/identity/entity/id/8d6a45e5-572f-8f13-d226-cd0d1ec57297\n```\n\n----------------------------------------\n\nTITLE: Modifying AWS Authentication DisplayName\nDESCRIPTION: Enhancement to include RoleSession information in the display name during AWS assumeRole authentication process\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14954.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth\\/aws: Add RoleSession to DisplayName when using assumeRole for authentication\n```\n\n----------------------------------------\n\nTITLE: Creating a User with MFA Policy\nDESCRIPTION: Command to create a user in the userpass authentication method and assign the previously created ping-policy to them.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write auth/userpass/users/testuser \\\n    password=testpassword \\\n    policies=ping-policy\n```\n\n----------------------------------------\n\nTITLE: Configuring Engine's package.json in Vault\nDESCRIPTION: Package.json configuration for an Ember Engine in Vault, specifying dependencies and ember-addon paths to enable shared components with the core application.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/ember-engines.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"<engine-name>\",\n\n  \"dependencies\": {\n    \"ember-cli-htmlbars\": \"*\",\n    \"ember-cli-babel\": \"*\"\n  },\n\n  \"ember-addon\": {\n    \"paths\": [\"../core\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AliCloud Role GET Response for Assume-Role Configuration\nDESCRIPTION: Sample response when retrieving a role configured with Assume-Role functionality, showing the role ARN.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/alicloud.mdx#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inline_policies\": null,\n  \"max_ttl\": 0,\n  \"remote_policies\": null,\n  \"role_arn\": \"acs:ram::5138828231865461:role/hastrustedactors\",\n  \"ttl\": 0\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling File Audit Device - Stdout\nDESCRIPTION: Command to enable file audit device logging to stdout, useful for containerized environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/audit/file.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault audit enable file file_path=stdout\n```\n\n----------------------------------------\n\nTITLE: Response Sample for Static Credentials with Rotation Period in Vault\nDESCRIPTION: JSON response containing the current username, password, last rotation time, and rotation period configuration. Includes TTL indicating time until next rotation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"username\": \"static-user\",\n    \"password\": \"132ae3ef-5a64-7499-351e-bfe59f3a2a21\",\n    \"last_vault_rotation\": \"2019-05-06T15:26:42.525302-05:00\",\n    \"rotation_period\": 30,\n    \"ttl\": 28\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Group by ID - Vault Identity API (cURL Request)\nDESCRIPTION: This cURL command demonstrates how to delete a group in Vault's Identity store using its ID. It sends a DELETE request to the `/identity/group/id/:id` endpoint, replacing `:id` with the ID of the group to be deleted, and includes a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/group.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/identity/group/id/363926d8-dd8b-c9f0-21f8-7b248be80ce1\n```\n\n----------------------------------------\n\nTITLE: Updating JWT Authentication Plugin Version\nDESCRIPTION: Release note indicating an update to the HashiCorp Vault JWT authentication plugin to version 0.21.0\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/27498.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/jwt: Update plugin to v0.21.0\n```\n\n----------------------------------------\n\nTITLE: RADIUS Login Response Example in JSON\nDESCRIPTION: This JSON response shows what is returned after successful RADIUS authentication, including a client token that can be used for subsequent Vault operations.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/radius.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"lease_id\": \"\",\n  \"renewable\": false,\n  \"lease_duration\": 0,\n  \"data\": null,\n  \"warnings\": null,\n  \"auth\": {\n    \"client_token\": \"64d2a8f2-2a2f-5688-102b-e6088b76e344\",\n    \"accessor\": \"18bb8f89-826a-56ee-c65b-1736dc5ea27d\",\n    \"policies\": [\"default\"],\n    \"metadata\": {\n      \"username\": \"vishal\"\n    },\n  },\n  \"lease_duration\": 7200,\n  \"renewable\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in Cubbyhole (Shell)\nDESCRIPTION: This shell command demonstrates how to list secrets at a specified location in the Cubbyhole. It uses the LIST HTTP method and requires a Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cubbyhole.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/cubbyhole/my-secret\n```\n\n----------------------------------------\n\nTITLE: Adding OIDC Provider ACL Rule in HCL\nDESCRIPTION: This HCL snippet defines the ACL rule necessary for enabling the OIDC provider feature in Vault 1.9. It must be added to the default policy or a related policy to permit tokens making requests to the authorization endpoint. Key parameters include 'path' which specifies the authorization endpoint, and 'capabilities' which sets the read and update permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.9.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n# Allow a token to make requests to the authorization endpoint for OIDC providers.\npath \"identity/oidc/provider/+/authorize\" {\n  capabilities = [\"read\", \"update\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Current Vault Token using Shell Command\nDESCRIPTION: Demonstrates how to use the 'vault print token' command to display the current Vault authentication token. The command outputs the token in its encoded format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/print.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault print token\nhvs.CAESICaie3Dm0_Hx001QuMabo1IXnyKkx_FuE14MH7zir_bqGh4KHGh2cy5wQnJsZzZ6WG82b29HUlI3eFdEQ0NPQzQ\n```\n\n----------------------------------------\n\nTITLE: Listing Auth Methods to Get Mount Accessor\nDESCRIPTION: Command to list all enabled authentication methods with detailed information to obtain the mount accessor, which is required for configuring PingID MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault auth list -detailed\n```\n\n----------------------------------------\n\nTITLE: Importing a Key for Tokenization Transformation - cURL Request\nDESCRIPTION: Sample cURL request for importing an existing key into a new tokenization transformation. The request sends the payload to the tokenization import endpoint with the transformation name in the URL.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_18\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/transform/transformations/tokenization/example-transformation/import\n```\n\n----------------------------------------\n\nTITLE: Response Sample for Static Credentials with Rotation Schedule in Vault\nDESCRIPTION: JSON response containing static credentials with a scheduled rotation configuration. Shows username, password, last rotation time, and scheduled rotation details instead of a rotation period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/index.mdx#2025-04-14_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"username\": \"static-user\",\n    \"password\": \"132ae3ef-5a64-7499-351e-bfe59f3a2a21\",\n    \"last_vault_rotation\": \"2019-05-06T15:26:42.525302-05:00\",\n    \"rotation_schedule\": \"0 0 * * SAT\",\n    \"rotation_window\": 3600,\n    \"ttl\": 5000\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Month Client Counts in Vault\nDESCRIPTION: Example demonstrating how to retrieve client count metrics for a specific month using start-time and end-time parameters. Shows the same metrics but for a targeted time period.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/usage.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator usage -start-time=2020-01 -end-time=2020-01\nPeriod start: 2020-01-01T00:00:00Z\nPeriod end: 2020-01-31T23:59:59Z\n\nNamespace path   Distinct entities   Non-Entity tokens   Secret syncs   ACME clients   Active clients\n--------------   -----------------   -----------------   ------------   ------------   --------------\n[root]           934                 176                 20             30             1160\n\nTotal            934                 176                 20             30             1160\n```\n\n----------------------------------------\n\nTITLE: Defining Minimum Claim Set for Vault API\nDESCRIPTION: This JSON object defines the necessary claims (sub, aud, exp) required for authenticating with Vault using a JWT token. The audience (aud) should be set to \"vault/$ROLE\", and the expiration (exp) must be a valid NumericDate value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sub\": \"$SERVICE_ACCOUNT_EMAIL_OR_ID\",\n  \"aud\": \"vault/$ROLE\",\n  \"exp\": \"$EXPIRATION\"\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note - OIDC/JWT Error Handling Bug Fix\nDESCRIPTION: Documents a bug fix that improves how role-related errors are displayed during OIDC/JWT login attempts in the Vault UI. This update ensures better visibility of error messages related to role configuration issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23908.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nrelease-note:bug\nui: Updates OIDC/JWT login error handling to surface all role related errors\n```\n\n----------------------------------------\n\nTITLE: Decrypting Encrypted Data using Vault Transit API - Bash\nDESCRIPTION: This snippet shows how to decrypt data using the `/decrypt` endpoint in Vault. It includes sending the ciphertext to Vault and receiving the base64-encoded plaintext in response. Additional commands for decoding the plaintext are provided.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/index.mdx#2025-04-14_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n$ vault write transit/decrypt/my-key ciphertext=vault:v1:8SDd3WHDOjf7mq69CyCqYjBXAiQQAVZRkFM13ok481zoCmHnSeDX9vyf7w==\n\nKey          Value\n---          -----\nplaintext    bXkgc2VjcmV0IGRhdGEK\n```\n\nLANGUAGE: text\nCODE:\n```\n$ base64 --decode <<< \"bXkgc2VjcmV0IGRhdGEK\"\nmy secret data\n```\n\nLANGUAGE: text\nCODE:\n```\n$ vault write -field=plaintext transit/decrypt/my-key ciphertext=... | base64 --decode\nmy secret data\n```\n\n----------------------------------------\n\nTITLE: Making API Request to Chroot Namespace in Vault\nDESCRIPTION: This shell command demonstrates how to make an API request to a Vault endpoint using a chroot namespace. The request creates a KV v2 secrets engine at 'team-secret' path within the 'usa-hq/team_1' namespace via the chrootd listener.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/namespaces/namespace-structure.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --header \"X-Vault-Namespace: team_1\" \\\n   --header \"X-Vault-Token: $VAULT_TOKEN\" \\\n   --request POST \\\n   --data '{\"type\": \"kv-v2\"}' \\\n   https://127.0.0.1:8300/v1/sys/mounts/team-secret\n```\n\n----------------------------------------\n\nTITLE: Raft Library Upgrade - Logging Improvement\nDESCRIPTION: This release note details the upgrade of the hashicorp/raft library to version v1.7.3 within the Vault project. The key improvement is the addition of more detailed logging on the raft leader. This logging captures information about opening snapshots and the process of sending them to followers, providing better insights into the Raft replication process and potentially simplifying troubleshooting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29976.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:improvement\nstorage/raft: Upgrade hashicorp/raft library to v1.7.3 which includes additional logging on the leader when opening and sending a snapshot to a follower.\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Revocation Queue with cURL in Vault PKI Engine\nDESCRIPTION: Makes a LIST request to retrieve certificates in the revocation queue from the Vault PKI secrets engine. Shows pending revocation requests across clusters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/pki/certs/revocation-queue\n```\n\n----------------------------------------\n\nTITLE: Defining HCL Policy for Debug Command Permissions\nDESCRIPTION: This HCL snippet defines a policy that grants the necessary permissions to generate debug packages with all targets in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/debug.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\npath \"auth/token/lookup-self\" {\n  capabilities = [\"read\"]\n}\n\npath \"sys/pprof/*\" {\n  capabilities = [\"read\"]\n}\n\npath \"sys/config/state/sanitized\" {\n  capabilities = [\"read\"]\n}\n\npath \"sys/monitor\" {\n  capabilities = [\"read\"]\n}\n\npath \"sys/host-info\" {\n  capabilities = [\"read\"]\n}\n\npath \"sys/in-flight-req\" {\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for a Single Audit Request Header in Vault\nDESCRIPTION: JSON response showing configuration details for a specific request header, including its HMAC setting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-auditing.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"X-Forwarded-For\": {\n    \"hmac\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Multi-value UI Header Configuration Request\nDESCRIPTION: Makes a GET request to retrieve multiple values for a specific UI header using the multivalue parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-ui-headers.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/sys/config/ui/headers/X-Custom-Header?multivalue=true\n```\n\n----------------------------------------\n\nTITLE: Adding External Source Metadata for Consul Registration\nDESCRIPTION: Release note indicating the addition of a metadata field that identifies Vault as the external source during Consul service registration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12163.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nserviceregistration: add `external-source: \"vault\"` metadata value for Consul registration.\n```\n\n----------------------------------------\n\nTITLE: RSA Signature Generation for CF Auth Login\nDESCRIPTION: Go code snippet showing the cryptographic operation used to generate the signature required for Cloud Foundry authentication. Uses RSA-PSS with SHA256 for signing the authentication data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/cf.mdx#2025-04-14_snippet_12\n\nLANGUAGE: go\nCODE:\n```\nrsa.SignPSS(rand.Reader, rsaPrivateKey, crypto.SHA256, checksum, nil)\n```\n\n----------------------------------------\n\nTITLE: Updating Vault OpenLDAP Plugin\nDESCRIPTION: This release note indicates that the OpenLDAP secrets plugin for Vault has been updated to version v0.15.1. This update likely includes bug fixes, new features, or security improvements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29727.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/openldap: Update plugin to v0.15.1\n```\n\n----------------------------------------\n\nTITLE: EST Path Configuration for Default Issuer\nDESCRIPTION: Defines the EST path configuration with default issuer and sign-verbatim policy for certificate enrollment and management\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/pki-est-default-policy.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\n/pki/est/{cacerts, simpleenroll, simplereenroll}\n```\n\n----------------------------------------\n\nTITLE: Using GDB to Verify BoringCrypto Startup Tests in Vault\nDESCRIPTION: Demonstrates how to use GDB to confirm that Vault Enterprise correctly executes FIPS-required startup cryptographic tests by setting a breakpoint on the BoringCrypto power-on self-test function.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/fips/fips1402.mdx#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ gdb --args vault server -dev\n...GDB startup messages elided...\n(gdb) break _goboringcrypto_BORINGSSL_bcm_power_on_self_test\n...breakpoint location elided...\n(gdb) run\n...additional GDB output elided...\nThread 1 \"vault\" hit Breakpoint 1, 0x0000000000454950 in _goboringcrypto_BORINGSSL_bcm_power_on_self_test ()\n(gdb) backtrace\n#0 0x0000000000454950 in _goboringcrypto_BORINGSSL_bcm_power_on_self_test ()\n#1 0x00000000005da8f0 in runtime.asmcgocall () at /usr/local/hashicorp-fips-go-devel/src/runtime/asm_amd64.s:765\n#2 0x00007fffd07a5a18 in ?? ()\n#3 0x00007fffffffdf28 in ?? ()\n#4 0x000000000057ebce in runtime.persistentalloc.func1 () at /usr/local/hashicorp-fips-go-devel/src/runtime/malloc.go:1371\n#5 0x00000000005d8a49 in runtime.systemstack () at /usr/local/hashicorp-fips-go-devel/src/runtime/asm_amd64.s:383\n#6 0x00000000005dd189 in runtime.newproc (siz=6129989, fn=0x5d88fb <runtime.rt0_go+315>) at <autogenerated>:1\n#7 0x0000000000000000 in ?? ()\n```\n\n----------------------------------------\n\nTITLE: Authentication Token Response\nDESCRIPTION: Example output of the login command showing the returned token and its properties, including associated policies and metadata.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nKey                    Value\n---                    -----\ntoken                  70f97438-e174-c03c-40fe-6bcdc1028d6c\ntoken_accessor         a91d97f4-1c7d-6af3-e4bf-971f74f9fab9\ntoken_duration         768h0m0s\ntoken_renewable        true\ntoken_policies         [default ping-policy]\ntoken_meta_username    \"testuser\"\n```\n\n----------------------------------------\n\nTITLE: Monthly Attribution Breakdown in JSON\nDESCRIPTION: This snippet shows the structure of monthly attributions, including namespace and mount-level breakdowns for each month.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-counters.mdx#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"months\":[\n      {\n         \"timestamp\":\"2021-05-01T00:00:00Z\",\n         \"counts\":{},\n         \"namespaces\":[\n            {\n               \"namespace_id\":\"root\",\n               \"namespace_path\":\"\",\n               \"counts\":{},\n               \"mounts\":[\n                  {\n                     \"path\":\"auth/up2/\",\n                     \"counts\":{}\n                  },\n                  {\n                     \"path\":\"auth/up1/\",\n                     \"counts\":{}\n                  }\n               ]\n            },\n            {\n               \"namespace_id\":\"s07UR\",\n               \"namespace_path\":\"ns1/\",\n               \"counts\":{},\n               \"mounts\":[\n                  {\n                     \"path\":\"auth/up1/\",\n                     \"counts\":{}\n                  },\n                  {\n                     \"path\":\"auth/up2/\",\n                     \"counts\":{}\n                  }\n               ]\n            }\n         ],\n         \"new_clients\":{}\n      }\n   ],\n}\n```\n\n----------------------------------------\n\nTITLE: Generate a New Nomad ACL Token (shell-session)\nDESCRIPTION: This command reads from a specified role in the Vault secrets engine to generate a new Nomad ACL token, outputting various token properties like lease ID and duration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/nomad.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault read nomad/creds/monitoring\nKey              Value\n---              -----\nlease_id         nomad/creds/monitoring/78ec3ef3-c806-1022-4aa8-1dbae39c760c\nlease_duration   768h0m0s\nlease_renewable  true\naccessor_id      a715994d-f5fd-1194-73df-ae9dad616307\nsecret_id        b31fb56c-0936-5428-8c5f-ed010431aba9\n```\n\n----------------------------------------\n\nTITLE: SystemD PrivateTmp Compatibility for Containerized Vault Plugins\nDESCRIPTION: Improvement release note describing that containerized plugins now work with systemd's PrivateTmp=true setting, which provides better isolation for processes by giving them private /tmp directories.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23215.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nplugins: Containerized plugins can be configured to still work when running with systemd's PrivateTmp=true setting.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring OIDC Role in Vault\nDESCRIPTION: This command sets up the OIDC role in Vault, specifying the user claim, allowed redirect URIs, OIDC scopes, and policies. It defines how Vault should interpret and use the OIDC token information for authentication and authorization.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/forgerock.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault write auth/oidc/role/your_default_role \\\n   user_claim=\"sub\" \\\n   allowed_redirect_uris=\"http://localhost:8250/oidc/callback,https://online_version_hostname:port_number/ui/vault/auth/oidc/oidc/callback\"  \\\n   oidc_scopes=\"your_oidc_scopes\" \\\n   policies=default\n```\n\n----------------------------------------\n\nTITLE: OIDC Provider: List Response\nDESCRIPTION: This is a sample JSON response from listing OIDC providers. It contains a list of keys which represent the names of the configured providers and their associated details such as `allowed_client_ids`, `issuer`, and `scopes_supported`.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"key_info\": {\n      \"default\": {\n        \"allowed_client_ids\": [\n          \"*\"\n        ],\n        \"issuer\": \"http://127.0.0.1:8200/v1/identity/oidc/provider/default\",\n        \"scopes_supported\": []\n      }\n    },\n    \"keys\": [\n      \"default\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a KMIP Scope and Role\nDESCRIPTION: This snippet shows how to create a KMIP scope and a role with access permissions. The scope acts as an isolated namespace for the AES keys, and the role allows operations on that namespace. Adjust the operation permissions as per security requirements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/pkcs11-provider/aws-xks.mdx#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nvault write -f kmip/scope/my-service\nvault write kmip/scope/my-service/role/admin operation_all=true\n```\n\n----------------------------------------\n\nTITLE: CLI Command Improvement: auth and secrets list -detailed\nDESCRIPTION: The `auth` and `secrets` list `-detailed` CLI commands now display the Deprecation Status for built-in plugins. This improvement enhances the user experience by providing more detailed information about authentication and secrets engines.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16849.txt#2025-04-14_snippet_4\n\nLANGUAGE: none\nCODE:\n```\ncli: `auth` and `secrets` list `-detailed` commands now show Deprecation Status for builtin plugins.\n```\n\n----------------------------------------\n\nTITLE: Defining Available Audit Device Types in HashiCorp Vault\nDESCRIPTION: This table defines the three supported audit device types in HashiCorp Vault: file for writing logs to a file, socket for writing logs to TCP/UDP/UNIX sockets, and syslog for using the system logging protocol.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/args/device_type.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nEnum     | Description\n-------- | -----------\n`file`   | Write log entries to a file on the Vault server.\n`socket` | Write log entries to an existing TCP, UDP, or UNIX socket.\n`syslog` | Write log entries using the existing system logging protocol.\n```\n\n----------------------------------------\n\nTITLE: Metadata Display After Soft Delete\nDESCRIPTION: Command output showing the metadata of a secret after soft deletion, including deletion timestamps for the affected versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/delete-data.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault kv metadata get -mount shared dev/square-api\n\n======== Metadata Path ========\nshared/metadata/dev/square-api\n\n========== Metadata ==========\nKey                     Value\n---                     -----\ncas_required            false\ncreated_time            2024-11-13T21:51:50.898782695Z\ncurrent_version         4\ncustom_metadata         <nil>\ndelete_version_after    0s\nmax_versions            5\noldest_version          0\nupdated_time            2024-11-14T22:32:42.29534643Z\n\n====== Version 1 ======\nKey              Value\n---              -----\ncreated_time     2024-11-13T21:51:50.898782695Z\ndeletion_time    2024-11-15T00:45:04.057772212Z\ndestroyed        false\n\n...\n\n====== Version 4 ======\nKey              Value\n---              -----\ncreated_time     2024-11-14T22:32:42.29534643Z\ndeletion_time    2024-11-15T00:45:04.057772712Z\ndestroyed        false\n```\n\n----------------------------------------\n\nTITLE: Bug Fix Release Note\nDESCRIPTION: This release note documents a bug fix for issue #28749 in the Vault PKI secrets engine. The fix ensures that all certificate chains are represented as a single line of authority, resolving a potential issue in certificate validation or processing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29342.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nsecrets/pki: fixes issue #28749 requiring all chains to be single line of authority.\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Step-down Request in Vault API\nDESCRIPTION: Makes a POST request to the Vault API endpoint /sys/step-down to force the active node to relinquish leadership. Requires a valid Vault token with root policy or sudo capability. The node will wait 10 seconds before attempting to reclaim active status.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/step-down.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/step-down\n```\n\n----------------------------------------\n\nTITLE: Reading SAML Role with cURL\nDESCRIPTION: This cURL command sends a GET request to read the configuration of a specific SAML role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/saml.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/auth/saml/role/admin\n```\n\n----------------------------------------\n\nTITLE: Response for Listing OIDC Assignments\nDESCRIPTION: The JSON response format when listing OIDC assignments. It returns an array of assignment keys (names).\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n      \"keys\":[\n         \"test-assignment\"\n      ]\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling Vault with UI using Make\nDESCRIPTION: This command compiles a development version of Vault that includes the user interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ make static-dist dev-ui\n...\n$ bin/vault\n...\n```\n\n----------------------------------------\n\nTITLE: Improving Expired Certificate Management in PKI\nDESCRIPTION: This release note outlines improvements that allow Vault users to tidy up expired issuer certificates, thereby streamlining certificate management under the PKI secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17823.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nsecrets/pki: Allow tidying of expired issuer certificates.\"\n```\n\n----------------------------------------\n\nTITLE: Building Vault UI into Vault Binary\nDESCRIPTION: Commands to build the static assets of the Ember application into a Vault binary using Go's embed package.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake static-dist\nmake dev-ui\n```\n\n----------------------------------------\n\nTITLE: Updating Plugin Version for MongoDB Atlas\nDESCRIPTION: This snippet provides a release note indicating that the MongoDB Atlas database plugin has been updated to version 0.14.0. This update is significant for users who rely on the plugin for database functionalities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29584.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\ndatabase/mongodbatlas: Update plugin to v0.14.0\"\n```\n\n----------------------------------------\n\nTITLE: Response example for reading PingID MFA method\nDESCRIPTION: This JSON response example shows the details retrieved after a successful GET request to read a PingID MFA method configuration, including settings URLs and IDs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/pingid.mdx#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"use_signature\": true,\n    \"idp_url\": \"https://idpxnyl3m.pingidentity.com/pingid\",\n    \"admin_url\": \"https://idpxnyl3m.pingidentity.com/pingid\",\n    \"authenticator_url\": \"https://authenticator.pingone.com/pingid/ppm\",\n    \"id\": \"f8381105-67f0-4105-8662-4b07ae5c1233\",\n    \"org_alias\": \"181459b0-9fb1-4938-8c86...\",\n    \"type\": \"pingid\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Start Vault Agent Service using sc.exe\nDESCRIPTION: Starts the Vault Agent Windows service using the sc.exe command. Shows service status details after starting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/agent/winsvc.mdx#2025-04-14_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\nsc.exe start VaultAgent\n```\n\n----------------------------------------\n\nTITLE: Listing Sync Associations in Vault (Shell)\nDESCRIPTION: cURL command to list all secrets referenced by at least one association in Vault using the LIST method. Requires authentication token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_25\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/sys/sync/associations\n```\n\n----------------------------------------\n\nTITLE: OIDC Provider: Sample Request\nDESCRIPTION: This is a sample `curl` request to create or update an OIDC provider.  It sends a POST request to the specified endpoint, including the Vault token and the JSON payload. Replace `...` with your Vault token and `@payload.json` with the file containing the JSON payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/oidc-provider.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/identity/oidc/provider/test-provider\n```\n\n----------------------------------------\n\nTITLE: Standardizing Unauthenticated Response Handling in Vault Core\nDESCRIPTION: Bug fix that ensures consistent response behavior when unauthenticated requests are made to sys/internal endpoints, regardless of whether the mount exists or not. This change improves security by preventing information disclosure through response differences.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10650.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore: Make the response to an unauthenticated request to sys/internal endpoints consistent regardless of mount existence.\n```\n\n----------------------------------------\n\nTITLE: Registering Initial Vault Plugin Version\nDESCRIPTION: This snippet demonstrates how to register the initial version of a Vault plugin using the `vault plugin register` command. It requires the SHA256 hash of the plugin binary and the plugin type (secret) and name. This step is skipped if the plugin is built-in or already registered.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/plugins.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault plugin register \\\n        -sha256=<SHA256 Hex value of the plugin binary> \\\n        secret \\\n        my-secret-plugin\n    Success! Registered plugin: my-secret-plugin\n```\n\n----------------------------------------\n\nTITLE: Amazon RDS Custom Revocation\nDESCRIPTION: Example of custom revocation statements for Amazon RDS MSSQL databases\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mssql.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault write database/roles/my-role revocation_statements=\"\\\n   USE my_database \\\n   IF EXISTS \\\n     (SELECT name \\\n      FROM sys.database_principals \\\n      WHERE name = N'{{name}}') \\\n   BEGIN \\\n     DROP USER [{{name}}] \\\n   END \\\n\n   IF EXISTS \\\n     (SELECT name \\\n      FROM master.sys.server_principals \\\n      WHERE name = N'{{name}}') \\\n   BEGIN \\\n     DROP LOGIN [{{name}}] \\\n   END\"\n```\n\n----------------------------------------\n\nTITLE: Updating OpenLDAP Plugin Version in Vault\nDESCRIPTION: This release note indicates that the OpenLDAP plugin has been updated to version 0.12.0. This update may include new features, bug fixes, or improvements from the previous version.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25251.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:change\\nsecrets/openldap: Update plugin to v0.12.0\"\n```\n\n----------------------------------------\n\nTITLE: Improving Vault Operator Usage Response\nDESCRIPTION: Modification to include ACME client details in core activity tracking for HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26525.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\\ncore/activity: Include ACME clients in vault operator usage response\n```\n\n----------------------------------------\n\nTITLE: Token Usage Limit Configuration in Vault\nDESCRIPTION: Parameter to set the maximum number of times a generated token can be used within its lifetime.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/tokenstorefields.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\ntoken_num_uses = 0\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Accessor Lookup Payload\nDESCRIPTION: This JSON payload is used to specify the `secret_id_accessor` when looking up AppRole details by accessor. The accessor is a unique identifier for the secret ID.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"secret_id_accessor\": \"84896a0c-1347-aa90-a4f6-aca8b7558780\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving ACME Configuration in Vault PKI (Shell)\nDESCRIPTION: This snippet shows how to retrieve the current ACME server configuration using a GET request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/pki/config/acme\n```\n\n----------------------------------------\n\nTITLE: Updating Azure Auth Plugin - Release Note\nDESCRIPTION: This code snippet contains a release note indicating that the Azure authentication plugin has been updated to version 0.20.2. The note mentions that the login process now requires specific parameters ('resource_group_name', 'vm_name', and 'vmss_name') to align with the claims found in the token.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/30052.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:change\\nauth/azure: Update plugin to v0.20.2. Login requires `resource_group_name`, `vm_name`, and `vmss_name` to match token claims\"\n```\n\n----------------------------------------\n\nTITLE: Searching for Vault Secrets Operator Chart\nDESCRIPTION: Searches the HashiCorp Helm repository for the Vault Secrets Operator chart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/installation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ helm search repo hashicorp/vault-secrets-operator\n```\n\n----------------------------------------\n\nTITLE: Vault Product Usage Reporting Release Note Markdown\nDESCRIPTION: Release note markdown describing the addition of product usage reporting to collect anonymous numerical data about Vault feature usage and integrate it with existing utilization reports.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28858.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\n**Product Usage Reporting**: Added product usage reporting, which collects anonymous, numerical, non-sensitive data about Vault feature usage, and adds it to the existing utilization reports.\n```\n\n----------------------------------------\n\nTITLE: Creating System User for Vault on Linux\nDESCRIPTION: This snippet creates a system user named 'vault' to run the Vault service with the appropriate home and shell settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/install-binary.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ sudo useradd --system --home ${VAULT_DATA} --shell /sbin/nologin vault\n```\n\n----------------------------------------\n\nTITLE: AppRole Secret ID Destroy Request\nDESCRIPTION: This curl command demonstrates how to destroy a secret ID associated with an AppRole. It requires a Vault token and the `secret_id` in the payload.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/approle.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/auth/approle/role/application1/secret-id/destroy\n```\n\n----------------------------------------\n\nTITLE: Administratively generating TOTP MFA secret using HTTP API - Shell\nDESCRIPTION: This command allows for administrative creation of a TOTP MFA secret using 'method_id' and 'entity_id'. The generated secret is stored directly on the given entity rather than the user's entity.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method_id\": \"4746fb81-028c-cd4e-026b-7dd18fe4c2f4\",\n  \"entity_id\": \"9189f7fd-e3f5-436b-a835-cb14864b1e01\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/identity/mfa/method/totp/admin-generate\n```\n\n----------------------------------------\n\nTITLE: Creating TOTP Key with Vault-Generated Secret\nDESCRIPTION: Creates a TOTP key where Vault generates the secret. This requires specifying 'generate' as true along with 'issuer' and 'account_name' parameters. Vault returns the barcode and URL for setting up the TOTP client.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/totp.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"generate\": true,\n  \"issuer\": \"Google\",\n  \"account_name\": \"test@gmail.com\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/totp/keys/my-key\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"barcode\": \"iVBORw0KGgoAAAANSUhEUgAAAMgAAADIEAAAAADYoy0BAAAGXklEQVR4nOyd4Y4iOQyEmRPv/8p7upX6BJm4XbbDbK30fT9GAtJJhpLjdhw3z1+/HmDEP396AvDO878/X1+9i1frWvu5Po/6Xz+P2kft1nFVa1f7z+YdjT/5PrEQMxDEDAQx4/n6orsGr6z9ZP1mviMbP/MBav/R6/U61Ud0vk8sxAwEMQNBzHju3lTvv6P2ajwS9Ve9zz+9pkfjRp+r/SjzwULMQBAzEMSMrQ/pUo0bouun7dW9LXVvrBq/TMBCzEAQMxDEjKM+JFqT17W4mu9Y+49eq/OL3r/GVX3CJ7KtWIgZCGIGgpix9SHTtXGa4476qfoa1adVc+HV/6/yfWIhZiCIGQhixpsP6Z4nulD3lqavV7q+Yvo6G7/zfWIhZiCIGQhixteJ/Rh1Da3e71d9RjRul2ocdeK7xELMQBAzEMSM3z6ku6dTrdOo1l9M6y5O7clVx5n4SCzEDAQxA0HMuN3L+qlavqj9itpePY+VtVdrHqfzeQULMQNBzEAQM97ikAv1vr/brltTeCp/svarcjLe2F1PnbohCGIGgphRqjG8mJ6PmtYMVnP363Vqv6d8qZrzf2AhfiCIGQhixm0c8n+jQ8+7+jZ4cY3PrlfHO/1Ml+45st18sRAzEMQMBDHjdxyixgPqs0lWsvvwqH00zrSO41R80p3XXXssxAwEMQNBzJCeuaieo6pedzGtb1/76fqgLH6ofg+dZ65gIWYgiBkIYsbbs9/V+/EVde1V+62eh1I/r/qIrs+Ixo2uYy/LGAQxA0HMeNvLilDX1OraXc2jVNtPzxJXr6v+HzuwEDMQxAwEMWNbp95d21WmzzBR6066e07dPMq0XoW9LEMQxAwEMUOqUz+1p9ONd07Xz586u6yifp/4EEMQxAwEMUPay7rIcthqTrx6v1/NTX+qZrIbF63v34GFmIEgZiCIGdvfU++e1a3GM2oOPjtvpfbfjS+qeZFJXgcLMQNBzEAQM6Tn9p7OLVdrFqP5TFF9ZXTdqfqTV7AQMxDEDAQx482HdPMPGdN8SjeHr6710zzJidrCB/kQTxDEDAQxY7uXdTGNC9S9pK6vqs6nWzdyej53PhELMQNBzEAQM0o59YtTz/xQfVO3jmOdl0rmE6f5ort5YSFmIIgZCGLGbU69eka3ep+v5sCzcbp5jZXMR0zr+aPPqVM3BkHMQBAzRs/tjejmwj9d05ihzq96nQr5EEMQxAwEMWPrQy6q9/fdevFTcVA0v+n5K7U/tf4lGhcfYgiCmIEgZtw+6+RCXUurvkKlepZ2vS5i+oyTaby0GxcLMQNBzEAQM0r5kKnv6K6xK9X4R13zu+eyJnXpazssxAwEMQNBzNj+fkg3nqjGK9laPz1vleXwq2v+p+vciUMMQRAzEMSM298xrOYDVqrtpmtzt59uHqc6v2zcBxbiB4KYgSBmbOvUV7q577VdOIliXqLr87p7Tupe2YnrsRAzEMQMBDFj+zuGar3Gp+rNp3kUtR5lmj/Jxo/GvZsvFmIGgpiBIGbcPi/rW+MPPaeqOs407xL1E1E9lzWpg8FCzEAQMxDEDOk3qC66a7f6fsSn1uz18+o8P+GzsBAzEMQMBDFjm1Ov7L3s3p+2/6lcfoa6ZxaNm50DWyEOMQRBzEAQM7Zne6PX3XilW5M3zbd0c/3ZHpvqY6P+7j7HQsxAEDMQxIxRPqRaT6Kuzemkh7WJ3RrJbJxq7eOuPyzEDAQxA0HMKJ3t/XbxobW/Gmdka/PpPMxPgoWYgSBmIIgZ0m9QrXTP1mb9Ru2y+/hsD2xaM9jN5UfjEIf8RSCIGQhiRus3qLp7ONU6jK4vynxMdn10XdY+m4/SHxZiBoKYgSBm3MYhGdl9/qkzvN18ilpDqF6nxiPVGs3Xz7EQMxDEDAQx4/ZcVoR6fqobZ6h7Vtm81TVejZdWuvHNXXssxAwEMQNBzHju3pyujdO68Ky9Wm+h9qPGJVG/6nyU+WIhZiCIGQhixtaHdFF9hlqLeOrcVPcMQDeOmtTNYyFmIIgZCGLGUR/SPQs73QuL5tGtiVznlc1X/T8iXtthIWYgiBkIYsbWh3T3nNS1dXqe6tReW8S0Hr1b5/LAQvxAEDMQxIw3H9I9nzU9R6XGHdn41dx4d4+rGp9En7OX9ReAIGYgiBlff6IWG2KwEDP+DQAA//+TDHXGhqE4+AAAAABJRU5ErkJggg==\",\n    \"url\": \"otpauth://totp/Google:test@gmail.com?algorithm=SHA1&digits=6&issuer=Google&period=30&secret=HTXT7KJFVNAJUPYWQRWMNVQE5AF5YZI2\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vault Alibaba Cloud Auth Plugin Update\nDESCRIPTION: This release note signifies an update to the Alibaba Cloud authentication plugin for HashiCorp Vault. The plugin has been updated to version v0.17.0, likely including bug fixes, new features, or performance improvements related to Alibaba Cloud integration with Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25217.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nauth/alicloud: Update plugin to v0.17.0\n```\n```\n\n----------------------------------------\n\nTITLE: Raft Configuration Sample Response\nDESCRIPTION: JSON response showing the configuration of nodes in the Raft cluster\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/storage/raft.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"ca4b5a1d-38d6-e27e-e756-269521328a15\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"config\": {\n      \"index\": 24,\n      \"servers\": [\n        {\n          \"address\": \"127.0.0.1:8201\",\n          \"leader\": true,\n          \"node_id\": \"raft1\",\n          \"protocol_version\": \"\\u0003\",\n          \"voter\": true\n        },\n        {\n          \"address\": \"127.0.0.2:8201\",\n          \"leader\": false,\n          \"node_id\": \"raft2\",\n          \"protocol_version\": \"\\u0003\",\n          \"voter\": true\n        }\n      ]\n    }\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: GCP Secret Manager Permissions in Shell\nDESCRIPTION: This shell snippet lists the necessary GCP permissions required to utilize the GCP secret import function. These permissions allow the associated GCP identity to list secrets and access their versions, crucial for importing data from GCP Secret Manager into Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/gcpsm.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n\"secretmanager.secrets.list\",\n\"secretmanager.versions.access\",\n```\n\n----------------------------------------\n\nTITLE: Sample AssumeRole request using Curl\nDESCRIPTION: This code snippet demonstrates how to make a request to the HashiCorp Vault API to assume a specified AWS role and retrieve temporary credentials. It requires the Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/aws.mdx#2025-04-14_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/aws/creds/example-role\n```\n\n----------------------------------------\n\nTITLE: Tune Mount Configuration for ACME Headers\nDESCRIPTION: This command tunes a Vault mount to include essential ACME response headers. Headers such as Replay-Nonce, Link, and Location must be specified to support ACME interactions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/issuance.mdx#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ vault secrets tune -allowed-response-headers=Location -allowed-response-headers=Replay-Nonce \\\n                     -allowed-response-headers=Link \\\n                     pki/\n```\n\n----------------------------------------\n\nTITLE: Modifying ADFS Relying Party Trust Settings with PowerShell\nDESCRIPTION: PowerShell command to fix the AD FS event 320 error by setting SignedSamlRequestsRequired to false for the Vault relying party trust. This allows Vault to send unsigned SAML requests to AD FS.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/adfs-event-320.mdx#2025-04-14_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$ Set-AdfsRelyingPartyTrust                 `\n    -TargetName \"<ADFS_VAULT_POLICY_NAME>\"  `\n    -SignedSamlRequestsRequired $false\n```\n\n----------------------------------------\n\nTITLE: Including Vault Telemetry Metric Documentation\nDESCRIPTION: Collection of @include statements for Vault's telemetry metrics documentation covering various subsystems including replication, runtime metrics, storage backends, token management, and WAL operations\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/all.mdx#2025-04-14_snippet_5\n\nLANGUAGE: mdx\nCODE:\n```\n@include 'telemetry-metrics/vault/replication/rpc/server/forwarding_request.mdx'\n\n@include 'telemetry-metrics/vault/replication/rpc/server/guard_hash_request.mdx'\n\n@include 'telemetry-metrics/vault/replication/rpc/server/persist_alias_request.mdx'\n\n[...additional includes...]\n```\n\n----------------------------------------\n\nTITLE: Setting proxy_protocol_behavior with deny_unauthorized in Vault TCP Listener Configuration\nDESCRIPTION: This code reference shows a configuration setting that was fixed in 1.16.5. When using proxy_protocol_behavior with deny_unauthorized, there was an issue causing the Vault TCP listener to close after receiving an untrusted upstream proxy connection.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproxy_protocol_behavior = \"deny_unauthorized\"\n```\n\n----------------------------------------\n\nTITLE: Handling Deprecated Report Configurations in Vault\nDESCRIPTION: The code snippets show warnings emitted by Vault when attempting to set deprecated fields `default_report_months` and `current_billing_period`. These warnings indicate that the fields are no longer supported and default to pre-determined values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.18.x.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell-session\nCODE:\n```\nWARNING! The following warnings were returned from Vault:\n\n  * default_report_months is deprecated: defaulting to billing start time\n\n```\n\nLANGUAGE: shell-session\nCODE:\n```\nWARNING! The following warnings were returned from Vault:\n\n  * current_billing_period is deprecated; unless otherwise specified, all requests will default to the current billing period\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secret from KV v2 via API (curl)\nDESCRIPTION: This shell command retrieves a secret from Vault's KV v2 engine using the API.  It makes a GET request to the `/{plugin_mount_path}/data/{secret_path}` endpoint, providing the Vault token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/random-string.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n\"$ curl                                       \\\n   --request GET                             \\\n   --header \\\"X-Vault-Token: ${VAULT_TOKEN}\\\"  \\\n   ${VAULT_ADDR}/v1/<plugin_mount_path>/data/<secret_path>\"\n```\n\n----------------------------------------\n\nTITLE: Patch Secret Request\nDESCRIPTION: This curl command sends a PATCH request to update an existing secret. It includes the Vault token, sets the Content-Type header to application/merge-patch+json, and includes the patch data in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kv/kv-v2.mdx#2025-04-14_snippet_10\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --header \"Content-Type: application/merge-patch+json\"\n    --request PATCH \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/secret/data/my-secret\n```\n\n----------------------------------------\n\nTITLE: Updating Vault JWT Auth Plugin\nDESCRIPTION: This code snippet represents a release note indicating that the JWT authentication plugin for HashiCorp Vault has been updated to version v0.17.0. This update likely includes bug fixes, new features, or security enhancements.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22678.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nauth/jwt: Update plugin to v0.17.0\n```\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Declaration Files with tsc\nDESCRIPTION: The general command for generating TypeScript declaration files from JavaScript files using the TypeScript compiler. It uses the --declaration and --allowJs flags to enable declaration file generation for JavaScript files, and --emitDeclarationOnly to only output the declaration file without JavaScript output.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/types/generate-declaration.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nyarn tsc <javascript file to declare>  --declaration --allowJs --emitDeclarationOnly --outDir <type file location>\n```\n\n----------------------------------------\n\nTITLE: Fix transform configuration handling stores parameter\nDESCRIPTION: This release note describes a bug fix addressing the incorrect handling of the `stores` parameter in transform configurations when using the legacy path. The fix ensures that the `stores` parameter is correctly processed in transform configurations even when the legacy path is utilized.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1622.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\ntransform (enterprise): Fix transform configuration not handling `stores` parameter on the legacy path\n```\n\n----------------------------------------\n\nTITLE: Sending HANA Database Configuration Request to Vault API\nDESCRIPTION: This curl command sends a POST request to Vault's API to configure a HANA database connection. It includes the necessary headers and references a JSON payload file containing the configuration details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/hanadb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/database/config/hana\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Credentials VaultAuth\nDESCRIPTION: YAML configuration for setting up a VaultAuth profile in VSO using static AWS credentials, including the creation of a Kubernetes secret for storing the credentials.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/aws.mdx#2025-04-14_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: aws-static-creds\n  namespace: <K8S_NAMESPACE>\ndata:\n  access_key_id: <AWS_ACCESS_KEY_ID>\n  secret_access_key: <AWS_SECRET_ACCESS_KEY>\n  session_token: <AWS_SESSION_TOKEN>  # session_token is optional\n---\napiVersion: secrets.hashicorp.com/v1beta1\nkind: VaultAuth\nmetadata:\n  name: vaultauth-aws-static-example\n  namespace: <K8S_NAMESPACE>\nspec:\n  vaultConnectionRef: <VAULT_CONNECTION_NAME>\n  mount: aws\n  method: aws\n  aws:\n    role: <VAULT_AWS_STATIC_ROLE>\n    region: <AWS_REGION>\n    secretRef: aws-static-creds\n```\n\n----------------------------------------\n\nTITLE: Plugin Reload API Improvement\nDESCRIPTION: New API endpoint for reloading plugins across all namespaces from the root namespace, enhancing plugin management capabilities\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24878.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nsys/plugins/reload/:type/:name\n```\n\n----------------------------------------\n\nTITLE: Setting Deletion Time for KV Metadata in Vault\nDESCRIPTION: This command sets the duration after which a version of a secret will be marked for deletion in Vault's KV v2 secrets engine.  This configuration allows automatic cleanup of older secret versions after a specified time.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/metadata.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault kv metadata put -mount=secret -delete-version-after=\"3h25m19s\" creds\n```\n\n----------------------------------------\n\nTITLE: Default Username Template Configuration\nDESCRIPTION: Template string used to generate dynamic usernames for MSSQL database access\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mssql.mdx#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n{{ printf \"v-%s-%s-%s-%s\" (.DisplayName | truncate 20) (.RoleName | truncate 20) (random 20) (unix_time) | truncate 128 }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up FoundationDB Client with LD_LIBRARY_PATH\nDESCRIPTION: Shell commands for configuring FoundationDB client using LD_LIBRARY_PATH method, suitable for deployments without mlock.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/storage/foundationdb.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ export LD_LIBRARY_PATH=/dest/dir/for/primary:$LD_LIBRARY_PATH\n$ export FDB_NETWORK_OPTION_EXTERNAL_CLIENT_DIRECTORY=/dest/dir/for/secondary\n$ /path/to/bin/vault ...\n```\n\n----------------------------------------\n\nTITLE: Renewing a Specific Token - Shell\nDESCRIPTION: This snippet demonstrates how to renew a specific token in HashiCorp Vault using its command line interface. By providing the token's ID, the lease for that token is extended, allowing continued access to resources under that token's permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/token/renew.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault token renew 96ddf4bc-d217-f3ba-f9bd-017055595017\n```\n\n----------------------------------------\n\nTITLE: Creating a Redirect Rule for Nested Routes\nDESCRIPTION: This JavaScript snippet demonstrates a redirect rule for moving content to a nested route. It shows how to redirect from a simpler URL to a more complex, nested URL. The 'permanent' key indicates that this is a permanent redirect.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\n{ source: '/foo', destination: '/nested/foo', permanent: true }\n```\n\n----------------------------------------\n\nTITLE: Vault AppRole Seal Wrap Release Note\nDESCRIPTION: Release note entry describing the addition of seal wrapping functionality for AppRole secrets when seal wrapping is enabled in the Vault system.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28703.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nauth/approle: seal wrap approle secrets if seal wrap is enabled.\n```\n\n----------------------------------------\n\nTITLE: Retrieve CF API Certificate\nDESCRIPTION: Fetches the public certificate from the CF API using OpenSSL, useful for resolving certificate trust issues. Requires the domain of the CF API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_9\n\nLANGUAGE: shell-session\nCODE:\n```\n$ openssl s_client -showcerts -servername domain.com -connect domain.com:443\n```\n\n----------------------------------------\n\nTITLE: Updating Vault Role's Bound Attributes for ADFS\nDESCRIPTION: A shell command to update the bound attributes in the Vault SAML role to match the groups listed in the SAML response from AD FS after updating AD FS to use 'groups' instead of 'Group'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/troubleshoot-adfs/bad-mapping.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write auth/<SAML_PLUGIN_PATH>/role/<ADFS_ROLE> \\\n    bound_attributes=groups=\"<AD_GROUP_LIST>\"\n```\n\n----------------------------------------\n\nTITLE: Exporting a Transit Key\nDESCRIPTION: Shell command to export a specific version of an encryption key from the Transit secrets engine, which only works if the key was created with the exportable flag.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transit.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/transit/export/encryption-key/my-key/1\n```\n\n----------------------------------------\n\nTITLE: Reading TOTP MFA method using HTTP API - Shell\nDESCRIPTION: This command retrieves the configuration details of a TOTP MFA method in Vault using the GET request. The 'method_id' is required to specify which configuration to read. The response includes details such as algorithm, digits, issuer, etc.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/identity/mfa/totp.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/identity/mfa/method/totp/4c6b1968-b385-4c46-ac5e-9b74e7b206be\n```\n\n----------------------------------------\n\nTITLE: Generating KMIP Credentials in Shell\nDESCRIPTION: This shell command generates new client credentials (certificate and private key) for a specific KMIP role and scope by sending a POST request to the Vault API endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kmip.mdx#2025-04-14_snippet_17\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    https://127.0.0.1:8200/v1/kmip/scope/myscope/role/myrole/credential/generate\n```\n\n----------------------------------------\n\nTITLE: List revoked certificates endpoint details\nDESCRIPTION: This section provides details about the LIST method to retrieve serial numbers of certificates that have been revoked in the local cluster. The request is sent to the '/certs/revoked' endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_28\n\nLANGUAGE: text\nCODE:\n```\n| Method | Path              |\n|:-------|:------------------|\n| `LIST` | `/certs/revoked`  |\n```\n\n----------------------------------------\n\nTITLE: Configuring Audit Log Filtering in HashiCorp Vault (HCL)\nDESCRIPTION: Demonstrates how to use the 'filter' option in Vault's audit device configuration. This Enterprise feature allows specifying a filtering expression to determine which audit log entries should be written to the audit device.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/filter.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nfilter='mount_type == \"kv-v2\"'\n```\n\n----------------------------------------\n\nTITLE: Documenting Dependency Upgrade in Vault SDK Release Note\nDESCRIPTION: This release note indicates that the Vault SDK has been updated to use go-secure-stdlib/plugincontainer version 0.4.0, which includes an upgrade to the Docker dependency (github.com/docker/docker) to version v26.1.5+incompatible.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28269.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsdк: Upgrade to go-secure-stdlib/plugincontainer@v0.4.0, which also bumps github.com/docker/docker to v26.1.5+incompatible\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom HTTP Headers in Vault TCP Listener\nDESCRIPTION: HCL configuration example for setting up custom HTTP response headers for Vault's root path and API endpoints in the server configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.9.0.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlistener \"tcp\" {\n  custom_response_headers {\n    \"/\" = {\n      \"X-Custom-Header\" = \"custom-value\"\n    }\n    \"/v1/*\" = {\n      \"X-Custom-API-Header\" = \"api-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Wrapping Key from Vault\nDESCRIPTION: This command retrieves the wrapping key from the Transform secrets engine. This key is a 4096-bit RSA public key used for encrypting data before importing it into Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transform/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n\"$ vault read transform/wrapping_key\"\n```\n\n----------------------------------------\n\nTITLE: Authenticating to Vault with OpenAPI .NET\nDESCRIPTION: This code snippet demonstrates how to authenticate to Vault using the OpenAPI-based .NET client. It creates a Vault client, sets the address, and sets the token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/get-started/developer-qs.mdx#2025-04-14_snippet_23\n\nLANGUAGE: cs\nCODE:\n```\nstring address = \"http://127.0.0.1:8200\";\nVaultConfiguration config = new VaultConfiguration(address);\n\nVaultClient vaultClient = new VaultClient(config);\nvaultClient.SetToken(\"dev-only-token\");\n```\n\n----------------------------------------\n\nTITLE: Preventing Redirects During Testing in Logout Route\nDESCRIPTION: Prevents page redirection during tests by checking if the application is in testing mode. In test environments, it replaces the current route instead of navigating away.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/MODULE_REPORT.md#2025-04-14_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nthis.flashMessages.clearMessages();\nthis.permissions.reset();\nif (Ember.testing) {\n  // Don't redirect on the test\n  this.replaceWith('vault.cluster.auth', { queryParams: { with: authType } });\n```\n\n----------------------------------------\n\nTITLE: Configuring Zero-Address Roles in Vault\nDESCRIPTION: Example of configuring zero-address roles with a POST request. The request includes a JSON payload with role names that can be used with any IP address.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/ssh/config/zeroaddress\n```\n\n----------------------------------------\n\nTITLE: Signing a CSR with Venafi Cloud - Shell Script\nDESCRIPTION: This snippet shows how to sign a CSR using the `/sign` endpoint configured for Venafi Cloud, allowing certificate requests to be fulfilled based on the CSR.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write venafi-pki/sign/cloud csr=@example.req\n```\n\n----------------------------------------\n\nTITLE: Tuning Secrets with Vault CLI Shell-Session\nDESCRIPTION: This command tunes secret engine settings at the \"pki/\" path by updating the default lease TTL and configuring audit settings to prevent HMAC on specified request and response keys. It outputs success confirmation and shows the updated configuration. Dependencies include Vault CLI and a configured Vault server.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/secrets/tune.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault secrets tune -default-lease-ttl=18h -audit-non-hmac-request-keys=common_name -audit-non-hmac-response-keys=serial_number pki/\nSuccess! Tuned the secrets engine at: pki/\n\n$ vault read sys/mounts/pki/tune\nKey                             Value\n---                             -----\naudit_non_hmac_request_keys     [common_name]\naudit_non_hmac_response_keys    [serial_number]\ndefault_lease_ttl               18h\ndescription                     Example PKI mount\nforce_no_cache                  false\nmax_lease_ttl                   24h\n```\n\n----------------------------------------\n\nTITLE: Documenting Azure Auth Improvement in Markdown\nDESCRIPTION: This release note describes an improvement to the Azure authentication method in HashiCorp Vault. It adds support for Azure workload identity authentication, addressing issue #18257. Additionally, it updates the go-kms-wrapping dependency to include changes from PR #155.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22994.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth/azure: Add support for azure workload identity authentication (see issue\n#18257). Update go-kms-wrapping dependency to include [PR\n#155](https://github.com/hashicorp/go-kms-wrapping/pull/155) \n```\n```\n\n----------------------------------------\n\nTITLE: Checking Composite Root Corruption via CLI (Shell)\nDESCRIPTION: This Vault CLI command checks if the composite tree root is corrupted. It uses jq to parse the JSON output and extract the relevant boolean value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write sys/replication/merkle-check \\\n    -format=json | jq -r '.data.merkle_corruption_report.corrupted_root'\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Resultant ACL Query in Vault API\nDESCRIPTION: This JSON snippet shows the structure of the response received from the `/sys/internal/ui/resultant-acl` endpoint. The response contains a 'resultant-acl' key with an empty array as its value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/internal-ui-resultant-acl.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"resultant-acl\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Create a Role Mapping to Policy Names (shell-session)\nDESCRIPTION: Creates a role within the Nomad secrets engine in Vault, which maps to one or more policy names required for generating Nomad ACL tokens.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/nomad.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault write nomad/role/monitoring policies=readonly\nSuccess! Data written to: nomad/role/monitoring\n```\n\n----------------------------------------\n\nTITLE: Authenticating as the User\nDESCRIPTION: Command to authenticate against the userpass auth method and receive a token for the created user. This token will have the identity information needed for MFA.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/mfa/mfa-pingid.mdx#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write auth/userpass/login/testuser password=testpassword\n```\n\n----------------------------------------\n\nTITLE: Enabling GET Request for Listing Vault Plugin Runtimes\nDESCRIPTION: This bug fix allows the 'vault plugin runtime list' command to successfully list plugin runtimes using a GET request. This improves the functionality and usability of the plugin runtime listing feature.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23171.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nplugins: `vault plugin runtime list` can successfully list plugin runtimes with GET\n```\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenLDAP Secrets Plugin Update in Markdown\nDESCRIPTION: This markdown snippet describes an update to the OpenLDAP secrets plugin for HashiCorp Vault. It specifies that the plugin has been updated to version 0.14.0, which is classified as a change in the release notes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28325.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\nsecrets/openldap: Update plugin to v0.14.0\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Password Policy using Vault CLI\nDESCRIPTION: This snippet shows how to create a password policy using the Vault CLI. It involves creating an HCL file with the policy definition and using the 'vault write' command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ cat my-policy.hcl\nlength = 20\nrule \"charset\" {\n    charset = \"abcde\"\n}\n\n$ vault write sys/policies/password/my-policy policy=@my-policy.hcl\n```\n\n----------------------------------------\n\nTITLE: Adding Issuer Details to PKI Secrets Engine JSON Response in Vault\nDESCRIPTION: This improvement enhances the /issuer/:issuer_ref/json endpoint in Vault's PKI secrets engine. It now returns additional fields: issuer_id and issuer_name in the response, providing more detailed information about the issuer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18482.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nsecrets/pki: Return issuer_id and issuer_name on /issuer/:issuer_ref/json endpoint.\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Vault Runtime Malloc Count Metric\nDESCRIPTION: Documentation table defining the vault.runtime.malloc_count metric which tracks the total number of allocated heap objects in memory. This gauge metric provides visibility into memory allocation patterns.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/runtime/malloc_count.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value   | Description\n----------- | ------- | -----------\ngauge       | number  | Total number of allocated heap objects in memory\n```\n\n----------------------------------------\n\nTITLE: GCP Secrets Impersonated Account Support\nDESCRIPTION: Adds support for GCP service account impersonation, enabling generation of GCP access tokens without storing or retrieving GCP service account keys for each role. This feature enhances security by removing the need to store sensitive keys within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19018.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\n**GCP Secrets Impersonated Account Support**: Add support for GCP service account impersonation, allowing callers to generate a GCP access token without requiring Vault to store or retrieve a GCP service account key for each role.\n```\n```\n\n----------------------------------------\n\nTITLE: Minimal Kubernetes Service Registration Configuration\nDESCRIPTION: Minimal configuration when using environment variables for namespace and pod name settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/service-registration/kubernetes.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nservice_registration \"kubernetes\" {}\n```\n\n----------------------------------------\n\nTITLE: Specifying Plugin Directory in Vault Configuration - Shell Script\nDESCRIPTION: This snippet updates the Vault server configuration file to set the directory where the Venafi plugin is located. This step is necessary for Vault to locate and use the installed plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/venafi.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell-session\nCODE:\n```\n$ plugin_directory = \"/etc/vault/vault_plugins\"\n```\n\n----------------------------------------\n\nTITLE: Verifying CF Instance Certificate Format with OpenSSL\nDESCRIPTION: This command uses OpenSSL to verify the format and content of a CF instance certificate. It's useful for troubleshooting authentication issues related to certificate formatting or expiration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\n$ openssl x509 -in ca.crt -text -noout\n```\n\n----------------------------------------\n\nTITLE: Deleting a KMS Key from Vault\nDESCRIPTION: Command to delete a KMS key from Vault, which removes all key versions and Vault's record of the key, making it impossible to use for encryption, decryption, or signing.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ vault delete gcpkms/keys/my-key\n```\n\n----------------------------------------\n\nTITLE: Establishing Key Quorum for Root Token Generation in Vault CLI\nDESCRIPTION: This command is used by key holders to provide their unseal or recovery key along with the distributed nonce. It contributes to establishing the required quorum for root token generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/troubleshoot/generate-root-token.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ echo ${UNSEAL_OR_RECOVERY_KEY} | vault operator generate-root -nonce=${NONCE_VALUE} -\n```\n\n----------------------------------------\n\nTITLE: Documenting Raft Storage Timeout Improvement in Markdown\nDESCRIPTION: Release note entry describing an improvement to Raft storage startup timeouts in HashiCorp Vault. The change implements larger timeouts during startup to minimize the chance of triggering unnecessary leader elections.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15042.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nstorage/raft: Use larger timeouts at startup to reduce likelihood of inducing elections.\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Repository Secrets Destination\nDESCRIPTION: A JSON configuration for synchronizing secrets to a GitHub repository. Uses a personal access token to authenticate and targets a specific repository for secret storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"access_token\": \"github_pat_12345\",\n    \"secrets_location\": \"repository\",\n    \"repository_owner\": \"my-organization-or-username\",\n    \"repository_name\": \"my-repository\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Vault Encryption Key Status via CLI\nDESCRIPTION: Example of using the vault operator key-status command to view information about the active encryption key. Shows key term, installation time, and encryption count.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/key-status.mdx#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator key-status\nKey Term          2\nInstall Time      01 Jan 17 12:30 UTC\nEncryption Count  4494\n```\n\n----------------------------------------\n\nTITLE: Vault API Request Example\nDESCRIPTION: cURL command example showing how to make a POST request to Vault's API to write new secret data, including proper header and authentication token usage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/write-data.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl                                        \\\n    --request POST                            \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n    --data @data.json                         \\\n    ${VAULT_ADDR}/v1/shared/data/dev/square-api | jq\n```\n\n----------------------------------------\n\nTITLE: Configuring OCI KMS Seal with Instance Principal (HCL)\nDESCRIPTION: This snippet shows how to configure the OCI KMS seal using Instance Principal authentication. It includes the crypto_endpoint, management_endpoint, and key_id parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/seal/ocikms.mdx#2025-04-14_snippet_1\n\nLANGUAGE: hcl\nCODE:\n```\nseal \"ocikms\" {\n    crypto_endpoint     = \"<kms-crypto-endpoint>\"\n    management_endpoint = \"<kms-management-endpoint>\"\n    key_id              = \"<kms-key-id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Azure Auth Configuration\nDESCRIPTION: JSON response format showing the configured Azure authentication settings including tenant ID, resource URL, client ID, and client secret.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/azure.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\":{\n    \"tenant_id\": \"kd83...\",\n    \"resource\": \"https://management.azure.com/\",\n    \"client_id\": \"12ud...\",\n    \"client_secret\": \"DUJDS3...\"\n  },\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Signing JWT Using gcloud Command\nDESCRIPTION: This shell command demonstrates how to use the beta version of gcloud to sign a JWT. It requires input claims, output file location, and the IAM account and project details.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/gcp.mdx#2025-04-14_snippet_13\n\nLANGUAGE: shell-session\nCODE:\n```\n$ gcloud beta iam service-accounts sign-jwt $INPUT_JWT_CLAIMS $OUTPUT_JWT_FILE \\\n    --iam-account=service-account@my-project.iam.gserviceaccount.com \\\n    --project=my-project\n```\n\n----------------------------------------\n\nTITLE: Improving Consul Secrets Error Messaging\nDESCRIPTION: Enhances error handling and reporting for Consul ACL bootstrapping process in Vault secrets backend. Provides more informative error messages to aid troubleshooting.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20891.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/consul: Improve error message when ACL bootstrapping fails.\n```\n\n----------------------------------------\n\nTITLE: Checking Secondary Cluster Merkle Tree Corruption via API (Shell)\nDESCRIPTION: This command sends a GET request to the Vault API endpoint to check for Merkle tree corruption in a disaster recovery (DR) secondary cluster. It requires a DR operation token for access.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/enterprise/replication/check-merkle-tree-corruption.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ curl $VAULT_ADDR/v1/sys/replication/dr/secondary/merkle-check\n```\n\n----------------------------------------\n\nTITLE: Viewing Destroyed KV Metadata\nDESCRIPTION: Example output showing metadata after destroying versions of a secret, demonstrating the destroyed field set to true for the affected versions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/destroy-data.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault kv metadata get -mount shared dev/square-api\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Namespace Environment Variable\nDESCRIPTION: Configures the VAULT_NAMESPACE environment variable for Vault Enterprise or HCP users. This specifies the namespace where the OIDC plugin is mounted.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_NAMESPACE=\"<OIDC_NAMESPACE>\"\n```\n\n----------------------------------------\n\nTITLE: Enhancing Vault Activity Endpoint with Warning for Estimated Client Counts\nDESCRIPTION: This improvement adds a warning to the '/sys/internal/counters/activity' endpoint. The warning is displayed when the specified usage period contains estimated client counts, providing API users with more accurate information about the data they are retrieving.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28068.txt#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nactivity: `/sys/internal/counters/activity` will now include a warning if the specified usage period contains estimated client counts.\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Namespace Helpers - Release Note\nDESCRIPTION: This release note documents the addition of helper functions specifically designed for managing namespaces in the test helpers within the SDK. These functions will facilitate easier and more efficient tests by encapsulating namespace-related logic.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25270.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nsdk/helper/testhelpers: add namespace helpers\"\n```\n\n----------------------------------------\n\nTITLE: PKI Secrets Engine Response Enhancement - Release Note\nDESCRIPTION: Enhancement to return written data in response to configuration operations on Vault's PKI secrets engine endpoints including auto-tidy config, CRL config, and role definitions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18222.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nsecrets/pki: Respond with written data to `config/auto-tidy`, `config/crl`, and `roles/:role`.\n```\n\n----------------------------------------\n\nTITLE: CLI Plugin Reload Behavior Change\nDESCRIPTION: Modified CLI plugin reload functionality to reload plugins across all namespaces when using the `-plugin` flag in the root namespace\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24878.txt#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault plugin reload\n```\n\n----------------------------------------\n\nTITLE: Patching Vault CSI Provider DaemonSet for OpenShift\nDESCRIPTION: This command patches the Vault CSI provider DaemonSet to run with a privileged security context, which is necessary for OpenShift environments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/csi/installation.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ kubectl patch daemonset vault-csi-provider \\\n  --type='json' \\\n  --patch='[{\"op\": \"add\", \"path\": \"/spec/template/spec/containers/0/securityContext\", \"value\": {\"privileged\": true} }]'\n```\n\n----------------------------------------\n\nTITLE: Configuring Authentication Parameters for Vault\nDESCRIPTION: Example of setting custom parameters to be used when authenticating to Vault using a specific auth method, demonstrating a simple key-value parameter format.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nparams:\n  param-something1: \"foo\"\n```\n\n----------------------------------------\n\nTITLE: Rotating Database Encryption Key (DEK) in SQL Server\nDESCRIPTION: SQL commands to regenerate the database encryption key using AES-256 algorithm and verify the rotation by querying encryption keys information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/mssql/rotation.mdx#2025-04-14_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nUSE TestTDE;\nGO\n\nALTER DATABASE ENCRYPTION KEY\nREGENERATE WITH ALGORITHM = AES_256;\nGO\n\nSELECT * FROM sys.dm_database_encryption_keys;\n```\n\n----------------------------------------\n\nTITLE: Importing the wrapped key into Vault's transit secrets engine\nDESCRIPTION: This shell command imports the wrapped key into Vault's transit secrets engine, specifying the ciphertext, hash function, and key type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write transit/keys/test-key/import ciphertext=$CIPHERTEXT hash_function=SHA256 type=$KEY_TYPE\n```\n\n----------------------------------------\n\nTITLE: Writing Test Value to KV Plugin in Vault\nDESCRIPTION: This command writes a test key-value pair to the ADFS KV mount. It's used to verify the configuration and test access permissions.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put <ADFS_KV_PLUGIN_PATH>/test test_key=\"test value\"\n```\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv put adfs-kv/test test_key=\"test value\"\n```\n\n----------------------------------------\n\nTITLE: Generating an ephemeral AES key in Go\nDESCRIPTION: This Go code snippet generates a 32-byte ephemeral AES key using the crypto/rand library for secure random number generation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/transit/key-wrapping-guide.mdx#2025-04-14_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nephemeralAESKey := make([]byte, 32)\n_, err := rand.Read(ephemeralAESKey)\nif err != nil {\n        return err\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Vault Mount Resource in Terraform\nDESCRIPTION: Demonstrates how to define a Vault mount resource using Terraform. This snippet shows the basic structure for creating a mount resource for secret engines.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/configuration/programmatic-management.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nresource \"vault_mount\" \"<TERRAFORM_RESOURCE_NAME>\" {\n  path = \"<VAULT_NAMESPACE>\"\n  type = \"<VAULT_PLUGIN_TYPE>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Soft Delete Request\nDESCRIPTION: Example cURL command showing how to soft delete versions 5 and 8 of a secret using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/delete-data.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl                                       \\\n    --request POST                           \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\" \\\n    --data '{\"versions\":[5,8]}'              \\\n    ${VAULT_ADDR}/v1/shared/delete/dev/square-api | jq\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub App Configuration\nDESCRIPTION: POST request payload and curl command for configuring a custom GitHub app in Vault. Requires app_id and private key parameters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_28\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"app_id\": \"true\",\n    \"private_key\":  \"<PRIVATE KEY PEM>\"\n}\n```\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json\n    http://127.0.0.1:8200/v1/sys/sync/github-apps/my-custom-app\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Token Environment Variable\nDESCRIPTION: Configures the VAULT_TOKEN environment variable with your access token. This token is required for authentication when running Vault CLI commands.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/jwt/oidc-providers/adfs.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ export VAULT_TOKEN=\"<YOUR_VAULT_ACCESS_TOKEN>\"\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unspecified STS Endpoint in Vault AWS Secrets Engine\nDESCRIPTION: When configuring an STS endpoint in the AWS Secrets engine without specifying the sts_endpoint, Vault returns an error indicating a mismatch between the number of regions and endpoints.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/aws-fallback-sts.mdx#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\"errors\":[\"number of regions does not match number of endpoints\"]}\n```\n\n----------------------------------------\n\nTITLE: Adding Connection Timeout to LDAP Plugins\nDESCRIPTION: This snippet updates the LDAP utility in the Vault SDK by introducing a new parameter `connection_timeout`, which allows users to specify the duration of the connection timeout for all LDAP plugins. This enhances flexibility and control over connection settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20144.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\nsdk/ldaputil: added `connection_timeout` to tune connection timeout duration \\nfor all LDAP plugins.\"\n```\n\n----------------------------------------\n\nTITLE: Adding Inferred Hostname Metadata for AWS Authentication\nDESCRIPTION: Introduces a new metadata field for inferred hostname during AWS IAM authentication, enhancing identification and tracking capabilities in Vault's authentication process.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/25418.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nauth/aws: Add inferred_hostname metadata for IAM AWS authentication method.\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Checking Tokenization (JSON)\nDESCRIPTION: This JSON payload is used to check if a plaintext value has a valid tokenized equivalent in HashiCorp Vault, including transformation type.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/transform.mdx#2025-04-14_snippet_63\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"value\": \"1111-1111-1111-1111\",\n  \"transformation\": \"ccn-tokenization\"\n}\n```\n\n----------------------------------------\n\nTITLE: Postgres Connection Library Migration\nDESCRIPTION: Highlights the library change from lib/pq to pgx in Vault 1.11+, which may impact connection configurations and require updates to connection URLs, especially for unsupported parameters like fallback_application_name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/pgx-params.mdx#2025-04-14_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Documenting Raft Storage Bug Fix for Windows in Vault (Markdown)\nDESCRIPTION: This release note documents a bug fix for the raft storage backend in Vault. It ensures that the initialMmapSize is set to 0 on Windows systems, which is likely necessary for proper initialization and operation of the raft storage on this platform.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14977.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nraft: Ensure initialMmapSize is set to 0 on Windows\n```\n```\n\n----------------------------------------\n\nTITLE: PKI Secrets Engine ACME Tidy Bug Fix\nDESCRIPTION: This release note indicates a bug fix within the Vault PKI secrets engine related to the ACME tidy operation. The fix addresses an issue where the ACME base folder path could not be determined, preventing proper cleanup or maintenance tasks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21870.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nsecrets/pki: Fix bug with ACME tidy, 'unable to determine acme base folder path'.\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix in Markdown Release Note\nDESCRIPTION: This markdown snippet documents a bug fix for the Vault UI. It specifies an upgrade to the HDS version to address sidebar navigation issues that occur when the viewport size is reduced.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23580.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Upgrade HDS version to fix sidebar navigation issues when it collapses in smaller viewports.\n```\n```\n\n----------------------------------------\n\nTITLE: Plugin CLI Listing with Detailed Information\nDESCRIPTION: Updated plugin list command with new `-detailed` flag to display comprehensive plugin information including deprecation status and version details\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17077.txt#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nplugin list -detailed\n```\n\nLANGUAGE: shell\nCODE:\n```\nplugin info\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Metadata Using API - Bash\nDESCRIPTION: This snippet updates entity metadata in Vault using the API by issuing a POST request to set the 'old_name' field for each entity listed in 'rename-targets.txt'. It constructs a JSON payload and sends the request with Vault's token for authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/deduplication/acl-policy-templates.mdx#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwhile read entity_name; do\n\n  if [[ \"\" = \"${entity_name}\" ]] ; then continue ; fi\n  \n  # Create a payload file with the new metadata\n  echo -n '{\"metadata\": { \"old_name\": \"'${entity_name}'\"}}' > ./metadata.json\n  \n  # Save the metadata to the entity\n  curl                                        \\\n    --request POST                            \\\n    --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n    --data @./metadata.json                   \\\n    ${VAULT_ADDR}/v1/${VAULT_NAMESPACE}/identity/entity/name/${entity_name}\n  \ndone < rename-targets.txt\n```\n\n----------------------------------------\n\nTITLE: Listing All Kubernetes Roles in Vault\nDESCRIPTION: Shell command to list all configured Kubernetes roles in Vault. This demonstrates using the LIST HTTP method on the roles endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/kubernetes.mdx#2025-04-14_snippet_14\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request LIST \\\n    http://127.0.0.1:8200/v1/kubernetes/roles\n```\n\n----------------------------------------\n\nTITLE: Dynamic Credentials Setup Commands\nDESCRIPTION: Shell commands for setting up dynamic credentials in Vault's LDAP secrets engine including enabling the engine, configuring it, and creating LDAP templates\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/db2.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault secrets enable ldap\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write ldap/config \\\n    binddn=\"cn=admin,dc=example,dc=com\" \\\n    bindpass=\"LDAPAdminPassword\" \\\n    url=\"ldap://127.0.0.1:389\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ncat > /tmp/creation.ldif <<EOF\ndn: uid={{.Username}},ou=users,dc=example,dc=com\nobjectClass: inetOrgPerson\nuid: {{.Username}}\ncn: {{.Username}}\nsn: {{.Username}}\nuserPassword: {{.Password}}\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\ncat > /tmp/deletion_rollback.ldif <<EOF\ndn: uid={{.Username}},ou=users,dc=example,dc=com\nchangetype: delete\nEOF\n```\n\nLANGUAGE: shell\nCODE:\n```\nvault write ldap/role/dynamic \\\n     creation_ldif=@/tmp/creation.ldif \\\n     deletion_ldif=@/tmp/deletion_rollback.ldif \\\n     rollback_ldif=@/tmp/deletion_rollback.ldif \\\n     default_ttl=1h\n```\n\n----------------------------------------\n\nTITLE: Resetting Auth Method Lease Duration to System Default in Vault CLI\nDESCRIPTION: This snippet shows how to reset the default lease duration of an auth method back to the system default using -1 as the value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/auth/tune.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault auth tune -default-lease-ttl=-1 github/\nSuccess! Tuned the auth method at: github/\n```\n\n----------------------------------------\n\nTITLE: Configuring MySQL Plugin in Vault\nDESCRIPTION: This command configures Vault with the MySQL plugin and connection information.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/mysql-maria.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write database/config/my-mysql-database \\\n    plugin_name=mysql-database-plugin \\\n    connection_url=\"{{username}}:{{password}}@tcp(127.0.0.1:3306)/\" \\\n    allowed_roles=\"my-role\" \\\n    username=\"vaultuser\" \\\n    password=\"vaultpass\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Vault Documentation\nDESCRIPTION: YAML front matter configuration block defining the page title and description for Vault's file sink documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/agent-and-proxy/autoauth/sinks/file.mdx#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: docs\npage_title: Auto-auth with file sinks\ndescription: >\n  Use file sinks for auto-authentication with Vault Agent or Vault Proxy.\n---\n```\n\n----------------------------------------\n\nTITLE: Handle Unknown Certificate Authority\nDESCRIPTION: This plaintext message signifies an error where a certificate signed by an unknown authority is encountered, prompting retrieval of correct certificates.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/cf.mdx#2025-04-14_snippet_8\n\nLANGUAGE: plaintext\nCODE:\n```\nx509: certificate signed by unknown authority\n```\n\n----------------------------------------\n\nTITLE: Deleting TOTP MFA Method\nDESCRIPTION: This curl command sends a DELETE request to remove a TOTP MFA method named 'my_totp'.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/mfa/totp.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/mfa/method/totp/my_totp\n```\n\n----------------------------------------\n\nTITLE: Registering Plugin in Legacy Vault (Pre-v0.10.4)\nDESCRIPTION: Example command for registering a plugin in Vault versions prior to v0.10.4 using the sys/plugins/catalog endpoint.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/plugins/plugin-architecture.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvault write sys/plugins/catalog/database/myplugin-database-plugin \\\n     sha256=<SHA256 Hex value of the plugin binary> \\\n     command=\"myplugin\"\n```\n\n----------------------------------------\n\nTITLE: Measuring Vault Barrier Delete Performance\nDESCRIPTION: Provides a performance metric for delete operations tracking the time required to complete a deletion at the storage barrier level\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/barrier/delete.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.barrier.delete ((#vault-barrier-delete))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `DELETE` operation at the barrier\n```\n\n----------------------------------------\n\nTITLE: Listing Policies in Vault Namespace (Shell)\nDESCRIPTION: This command lists all policies in the 'ns1' namespace of Vault, showing only the default policy exists.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/internal-error-namespace-missing-policy.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault policy list -namespace=ns1\ndefault\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Search-Select Component Fix in Vault Release Notes\nDESCRIPTION: Release note entry documenting a bug fix for the search-select component in Vault's UI that addresses an issue where blank selections were appearing when editing group member entities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15058.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: fix search-select component showing blank selections when editing group member entity\n```\n\n----------------------------------------\n\nTITLE: Release Note: Updating Redis ElastiCache Plugin version\nDESCRIPTION: This snippet represents a release note indicating the update of the redis-elasticache plugin for Hashicorp Vault to version v0.2.3. This update potentially includes bug fixes, new features, or performance enhancements related to the plugin's functionality.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22598.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\ndatabase/redis-elasticache: Update plugin to v0.2.3\n```\n```\n\n----------------------------------------\n\nTITLE: Listing Sub-keys Under a Nested Hierarchical Path in Vault LDAP Secrets Engine\nDESCRIPTION: Lists the sub-keys under the 'org/platform' path, showing the 'dev' endpoint that was configured earlier.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/ldap.mdx#2025-04-14_snippet_21\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault list ldap/static-role/org/platform\nKeys\n----\ndev\n```\n\n----------------------------------------\n\nTITLE: Improving Client Count Query Consistency in Vault Activity Log\nDESCRIPTION: This improvement ensures that client count queries including the current month return consistent results. It achieves this by sorting the clients before performing estimation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28062.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\ncore/activity: Ensure client count queries that include the current month return consistent results by sorting the clients before performing estimation \n```\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Password Policy Rules in HCL\nDESCRIPTION: This snippet demonstrates a simple password policy that generates 20 character passwords using only lowercase letters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/password-policies.mdx#2025-04-14_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nlength = 20\nrule \"charset\" {\n  charset = \"abcdefghijklmnopqrstuvwxyz\"\n}\n```\n\n----------------------------------------\n\nTITLE: Documenting Vault Agent Config Reload Improvement in Release Notes\nDESCRIPTION: Release note entry describing an enhancement to Vault agent that allows partial configuration reloading without requiring a full agent restart.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18638.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nagent: allows some parts of config to be reloaded without requiring a restart.\n```\n\n----------------------------------------\n\nTITLE: Logging DOMException Errors\nDESCRIPTION: This snippet provides a release note for a bug fix which surfaces DOMException errors that occur when browser settings prevent access to localStorage, enhancing the user experience by providing feedback on such errors.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/21503.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"release-note:bug\\nui: Surface DOMException error when browser settings prevent localStorage.\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading Ember Dependencies in Vault UI\nDESCRIPTION: Release note detailing the upgrade of Ember data to version 5.3.2 and minor version upgrades of ember-cli and ember-source to version 5.8.0 in the Vault UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28798.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:change\nui: Upgrade Ember data to v5.3.2 (and minor upgrade of ember-cli, ember-source to v5.8.0)\n```\n\n----------------------------------------\n\nTITLE: Improving Database Plugin Reloading in HashiCorp Vault\nDESCRIPTION: This snippet describes an improvement that allows for the reloading of named database plugins through the sys/plugins/reload/backend API endpoint, enhancing the flexibility and usability of plugin management in Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24512.txt#2025-04-14_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\nsecrets/database: Support reloading named database plugins using the sys/plugins/reload/backend API endpoint.\"\n```\n\n----------------------------------------\n\nTITLE: Retrieve Backed-up Unseal Keys\nDESCRIPTION: Retrieves previously backed-up unseal keys from Vault's storage.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey -backup-retrieve\n```\n\n----------------------------------------\n\nTITLE: Removing Sync Destination Association in Vault (JSON)\nDESCRIPTION: Sample payload for removing an association between a secret and a destination in Vault. Includes mount and secret name.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"mount\": \"my-kv\",\n    \"secret_name\": \"my-secret-1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Role API Request\nDESCRIPTION: cURL command to create a new JWT role using the configuration payload\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/jwt.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    https://127.0.0.1:8200/v1/auth/jwt/role/dev-role\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to GCS HA Support Pull Request\nDESCRIPTION: Reference to a GitHub pull request that adds High Availability support to Google Cloud Storage backend.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4226](https://github.com/hashicorp/vault/pull/4226)]\n```\n\n----------------------------------------\n\nTITLE: Enabling SAML Auth Method in Vault CLI\nDESCRIPTION: Enable the SAML authentication method in Vault using the CLI, specifying a namespace if needed.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/saml/adfs.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault -namespace=ns_admin auth enable saml\n```\n\n----------------------------------------\n\nTITLE: Sample Payload for Token Revocation\nDESCRIPTION: This snippet includes the JSON payload required for revoking a token, which must include the token ID to be revoked.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/auth/token.mdx#2025-04-14_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"token\": \"ClientToken\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Cassandra Credentials Sample Request\nDESCRIPTION: cURL request to generate a new set of dynamic Cassandra credentials based on a specified role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    http://127.0.0.1:8200/v1/cassandra/creds/my-role\n```\n\n----------------------------------------\n\nTITLE: Delete EGP Policy Request\nDESCRIPTION: Deletes an EGP policy using DELETE method\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies.mdx#2025-04-14_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/policies/egp/breakglass\n```\n\n----------------------------------------\n\nTITLE: Downloading Vault Lambda Extension\nDESCRIPTION: Command to download the Vault Lambda Extension zip file from HashiCorp's release repository.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/aws/lambda-extension.mdx#2025-04-14_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n$ curl --silent https://releases.hashicorp.com/vault-lambda-extension/0.5.0/vault-lambda-extension_0.5.0_linux_amd64.zip \\\n  --output vault-lambda-extension.zip\n```\n\n----------------------------------------\n\nTITLE: Using Non-Interactive Flag in Vault CLI\nDESCRIPTION: Demonstrates the usage of the -non-interactive flag which prevents the CLI from prompting for user input through the terminal. This is useful in automated scripts or CI/CD pipelines where interactive input is not possible.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/global-settings/flags/non-interactive.mdx#2025-04-14_snippet_0\n\nLANGUAGE: cli\nCODE:\n```\n-non-interactive\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for Generated Token's Policies Help Text in Vault\nDESCRIPTION: This release note entry documents a bug fix in the Vault user interface. It clarifies the help text for the Generated Token's Policies field, specifically stating that comma-separated values are not accepted in this input.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15046.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fix Generated Token's Policies helpText to clarify that comma separated values are not accepted in this field. \n```\n```\n\n----------------------------------------\n\nTITLE: Reading Google Cloud KMS Configuration - HCL\nDESCRIPTION: This HCL policy defines the capabilities for reading the configuration of the Google Cloud KMS secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/gcpkms.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\npath \"gcpkms/config\" {\n  capabilities = [\"read\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note: Quota Bug Fix\nDESCRIPTION: This snippet represents a release note indicating a bug fix related to quotas in the Vault core. The bug involved unnecessary role resolution for non-role-based quotas. The fix limits role resolution to role-based quotas and lease creation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22597.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`core/quotas: Only perform ResolveRoleOperation for role-based quotas and lease creation.`\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Go Project (Powershell)\nDESCRIPTION: Bootstraps the Go project, downloading and compiling the libraries and tools needed to build Vault using the provided `make` tool. This step is necessary to prepare the environment for building.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/install/build-from-code.mdx#2025-04-14_snippet_8\n\nLANGUAGE: powershell\nCODE:\n```\n\".\\\\make bootstrap\"\n```\n\n----------------------------------------\n\nTITLE: Updating Couchbase Database Plugin Version in Release Notes\nDESCRIPTION: Release note entry documenting the update of the Couchbase database plugin to version 0.12.0 in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28327.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\ndatabase/couchbase: Update plugin to v0.12.0\n```\n\n----------------------------------------\n\nTITLE: Marking Request Body as Required in OpenAPI\nDESCRIPTION: This snippet indicates an improvement to the Vault OpenAPI specification. The change marks request body objects as required, ensuring that API consumers understand which request bodies must be provided for successful API calls. This clarification enhances the usability and correctness of the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17909.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:improvement\nopenapi: Mark request body objects as required \n`\n```\n\n----------------------------------------\n\nTITLE: GCP Secrets IAM Bindings Bug Fix\nDESCRIPTION: Fixes an issue where IAM bindings were not preserved during policy updates in the GCP secrets engine. This bug fix ensures that IAM policies are correctly maintained when updating the secrets engine's policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19018.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nsecrets/gcp: fix issue where IAM bindings were not preserved during policy update\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Username Customization to Elasticsearch Database Secrets Engine\nDESCRIPTION: Release note announcing a new feature that allows customization of dynamic usernames in the Elasticsearch database secrets engine within Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11957.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nsecrets/database/elasticsearch: Add ability to customize dynamic usernames\n```\n```\n\n----------------------------------------\n\nTITLE: Logging Enhancement Release Note for Raft Storage\nDESCRIPTION: Release note documenting the addition of logging functionality when the MAP_POPULATE mmap flag gets disabled before opening the Raft database. This improves observability of memory mapping behavior in Vault's storage layer.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28526.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nphysical/raft: Log when the MAP_POPULATE mmap flag gets disabled before opening the database.\n```\n\n----------------------------------------\n\nTITLE: Handling TLS Connection Error in Vault Certificate Credentials\nDESCRIPTION: Adds explicit error messaging when no TLS connection is found during AliasLookahead operation, improving diagnostic capabilities for certificate-based authentication\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17904.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncredential/cert: adds error message if no tls connection is found during the AliasLookahead operation\n```\n\n----------------------------------------\n\nTITLE: Deleting Backup Keys Request\nDESCRIPTION: HTTP DELETE request to remove PGP-encrypted backup recovery key shares\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/rekey-recovery-key.mdx#2025-04-14_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/sys/rekey/recovery-key-backup\n```\n\n----------------------------------------\n\nTITLE: Deleting Cassandra Role Sample Request\nDESCRIPTION: cURL request to delete an existing Cassandra role definition from Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/cassandra.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/cassandra/roles/my-role\n```\n\n----------------------------------------\n\nTITLE: Configuring Image Pull Secrets in Vault Secrets Operator\nDESCRIPTION: Example configuration for private registry authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/helm.mdx#2025-04-14_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nimagePullSecrets:\n  - name: pull-secret-name-1\n  - name: pull-secret-name-2\n```\n\n----------------------------------------\n\nTITLE: Configuring KMIP Listener\nDESCRIPTION: Command to configure the KMIP secrets engine with custom listener address and port.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kmip.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write kmip/config listen_addrs=0.0.0.0:5696\n```\n\n----------------------------------------\n\nTITLE: Token Type Configuration in Vault\nDESCRIPTION: Configuration for specifying the type of token to be generated, supporting service, batch, default, default-service, and default-batch types.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/tokenstorefields.mdx#2025-04-14_snippet_5\n\nLANGUAGE: hcl\nCODE:\n```\ntoken_type = \"\"\n```\n\n----------------------------------------\n\nTITLE: Vault OIDC Nonce Parameter Update\nDESCRIPTION: This release note indicates a bug fix for the identity/oidc functionality in HashiCorp Vault.  The fix makes the `nonce` parameter optional during the Authorization Endpoint interaction with OIDC providers, increasing flexibility in OIDC configurations. This change addresses situations where OIDC providers might not require or support the nonce parameter.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13231.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n`release-note:bug\nidentity/oidc: Make the `nonce` parameter optional for the Authorization Endpoint of OIDC providers.\n`\n```\n\n----------------------------------------\n\nTITLE: Three-Node Development Mode with Metrics and Profiling\nDESCRIPTION: Enhancement to three-node development mode that enables unauthenticated access to metrics and pprof profiling endpoints, facilitating easier debugging and performance analysis\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20224.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault server -dev-three-node\n```\n\n----------------------------------------\n\nTITLE: Enterprise UI Enhancement for Azure WIF Configuration\nDESCRIPTION: Enterprise-specific feature that enables Workload Identity Federation (WIF) configuration capabilities for Azure secrets engine through the UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29047.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nui (enterprise): Allow WIF configuration on the Azure secrets engine.\n```\n\n----------------------------------------\n\nTITLE: Documenting OpenLDAP Plugin Update in Markdown Release Note\nDESCRIPTION: Release note entry specifying the version update of the OpenLDAP secrets plugin in HashiCorp Vault to version 0.14.3. This update affects the secrets/openldap component of Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28780.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nsecrets/openldap: Update plugin to v0.14.3\n```\n\n----------------------------------------\n\nTITLE: Updating AliCloud Auth Plugin Version\nDESCRIPTION: Updates the AliCloud authentication plugin from version 0.14.0 to version 0.15.0, indicating minor version upgrade and potential compatibility improvements\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20758.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:change\nauth/alicloud: Updated plugin from v0.14.0 to v0.15.0\n```\n\n----------------------------------------\n\nTITLE: Vault Release Note - API Dependency Removal\nDESCRIPTION: Release note entry in YAML format documenting an improvement to remove SDK module dependency from the Vault API. This change helps reduce dependencies and improve maintainability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18962.txt#2025-04-14_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrelease-note:improvement\napi: Remove dependency on sdk module.\n```\n\n----------------------------------------\n\nTITLE: Documenting UI Bug Fix for AWS Secret Engine in Vault (Markdown)\nDESCRIPTION: This release note documents a bug fix in the Vault UI for the AWS secret engine. The fix allows the policy_document field to be empty, improving flexibility in AWS secret configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23470.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\nui: Fix AWS secret engine to allow empty policy_document field.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating API for Backoff Package in Vault\nDESCRIPTION: This snippet details the change made to upgrade the backoff package from version v3 to v4.3.0, reflecting updates in functionality or dependencies necessary for the Vault project.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/26868.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n\"\"\"release-note:change\\napi: Update backoff/v3 to backoff/v4.3.0\\n\"\"\"\n```\n\n----------------------------------------\n\nTITLE: API Endpoint Update: GET /sys/auth/:name\nDESCRIPTION: The `GET /sys/auth/:name` API endpoint has been updated to include a `deprecation_status` field in the response data for built-in authentication methods. This allows users to view the deprecation status of a specific built-in authentication plugin.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16849.txt#2025-04-14_snippet_1\n\nLANGUAGE: none\nCODE:\n```\nauth: `GET /sys/auth/:name` endpoint now returns an additional `deprecation_status` field in the response data for builtins.\n```\n\n----------------------------------------\n\nTITLE: Rotating a Key in Vault\nDESCRIPTION: This command rotates a specific key in Vault's key management secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/key-management/azurekeyvault/setup.mdx#2025-04-14_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ vault write -f keymgmt/key/rsa-1/rotate\n```\n\n----------------------------------------\n\nTITLE: Retrieving Static Credentials\nDESCRIPTION: Command to retrieve credentials for a configured static role.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/databases/redis.mdx#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read database/static-creds/my-static-role\n```\n\n----------------------------------------\n\nTITLE: Documenting WAL Persistence Metric in Vault\nDESCRIPTION: Defines a metric that tracks the time taken to persist write-ahead logs in Vault. The metric is of type 'summary' and measures duration in milliseconds.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/wal/persistwals.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to persist a write-ahead log\n```\n\n----------------------------------------\n\nTITLE: Deleting a Namespace - Vault CLI - Shell\nDESCRIPTION: This command deletes a specified namespace in Vault. Ensure that you have sufficient permissions and that the namespace is no longer needed, as this action is irreversible.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/namespace.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ vault namespace delete ns1/\n```\n\n----------------------------------------\n\nTITLE: Improving PKI Health Check Output to JSON\nDESCRIPTION: This release note outlines the modification of the PKI health-check command's output format to JSON. This change allows users to receive configurations in a structured format that can be easily utilized by applications. The specific command affected is the --list the default configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19269.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\ncli/pki: Change the pki health-check --list default config output to JSON so it's a usable configuration file\"\n```\n\n----------------------------------------\n\nTITLE: Vault UI Bug Fix Release Note\nDESCRIPTION: This release note indicates a bug fix in the Vault UI related to form input handling. Specifically, it addresses an issue where model defaults were overwriting the input value when a user attempted to clear a form input field.  This issue has been resolved in the updated UI.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/22458.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:bug\nui: fixes model defaults overwriting input value when user tries to clear form input\n```\n```\n\n----------------------------------------\n\nTITLE: Deprecating Active Directory Secrets Engine\nDESCRIPTION: Marks the Active Directory secrets engine as deprecated, indicating it will be removed in future versions of HashiCorp Vault\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19334.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:deprecation\nsecrets/ad: Marks the Active Directory (AD) secrets engine as deprecated.\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to Auth Backend Path Fix Pull Request\nDESCRIPTION: Reference to a GitHub pull request that fixes an issue with mounting two auth backends with the same path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_13\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4206](https://github.com/hashicorp/vault/pull/4206)]\n```\n\n----------------------------------------\n\nTITLE: Vault OpenAPI Schema Generation Shell Script Update\nDESCRIPTION: Change to gen_openapi.sh script to generate OpenAPI schema using generic mount paths instead of specific ones, improving schema flexibility and reusability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18934.txt#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngen_openapi.sh\n```\n\n----------------------------------------\n\nTITLE: Redis ElastiCache DB Plugin Feature Release Note\nDESCRIPTION: This release note announces the addition of the Redis ElastiCache database plugin as a built-in plugin for HashiCorp Vault. This addition allows Vault to manage and provision Redis ElastiCache database credentials directly.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/17075.txt#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n```release-note:feature\n**Redis ElastiCache DB Plugin**: Added Redis ElastiCache as a built-in plugin.\n```\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Struct Field in Vault Core\nDESCRIPTION: An improvement to the Vault core implementation that removes the *BarrierView field from the backendEntry struct, likely to reduce memory overhead and simplify internal data structures.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20933.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ncore: remove unnecessary *BarrierView field from backendEntry struct\n```\n\n----------------------------------------\n\nTITLE: Including secret_syncs in Activity Log Responses\nDESCRIPTION: This release note indicates an improvement to the activity logging system within Vault, specifically adding secret_syncs to the activity log responses. This improvement is intended to give users deeper insights into secret synchronization processes. There are no external dependencies cited for this change.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24710.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncore/activity: Include secret_syncs in activity log responses\"\n```\n\n----------------------------------------\n\nTITLE: Listing Keys in KV Store\nDESCRIPTION: Command to list all keys stored in the KV secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v1.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv list kv/\n```\n\n----------------------------------------\n\nTITLE: Including Save Duration Metric\nDESCRIPTION: This snippet includes the metric for the duration taken to save automated snapshots. It is essential for understanding the efficiency of snapshot saving processes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/internals/telemetry/metrics/autosnap.mdx#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n@include 'telemetry-metrics/vault/autosnapshots/save/duration.mdx'\n```\n\n----------------------------------------\n\nTITLE: Initialize Rekey with Verification Process\nDESCRIPTION: Initializes a rekey operation with verification enabled, 15 key shares and 9 threshold requirement.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/operator/rekey.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nvault operator rekey \\\n    -init \\\n    -key-shares=15 \\\n    -key-threshold=9 \\\n    -verify\n```\n\n----------------------------------------\n\nTITLE: Adding Default Values to OpenAPI Parameters in Vault\nDESCRIPTION: Release note entry documenting the addition of default values to thing_mount_path parameters in Vault's OpenAPI specification. This improvement enhances API documentation and usability.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18935.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nopenapi: Add default values to thing_mount_path parameters\n```\n\n----------------------------------------\n\nTITLE: Adding Format Options to Vault Delete Commands\nDESCRIPTION: Release note documenting the addition of output format options (e.g. -format) to vault delete and vault kv delete commands to match functionality available in vault write command.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/11992.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\ncli: vault delete and vault kv delete should support the same output options (e.g. -format) as vault write.\n```\n\n----------------------------------------\n\nTITLE: Documenting Azure Auth Improvement in Vault Release Note\nDESCRIPTION: This code snippet is a structured release note indicating an improvement in the Azure authentication method for HashiCorp Vault. It specifies that configurable retry options have been added for Azure API calls, which can enhance reliability and flexibility when interacting with Azure services.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23059.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth/azure: Added Azure API configurable retry options\n```\n```\n\n----------------------------------------\n\nTITLE: Adding AWS_DYNAMODB_REGION Environment Variable for Vault DynamoDB Storage\nDESCRIPTION: This release note indicates the addition of a new environment variable 'AWS_DYNAMODB_REGION' for the DynamoDB storage backend in Vault. This allows users to specify the AWS region for DynamoDB operations via an environment variable.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15054.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nstorage/dynamodb: Added `AWS_DYNAMODB_REGION` environment variable.\n```\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version\nDESCRIPTION: This snippet updates the Go version to 1.17.5 in the Vault project, ensuring that the project utilizes improved features and security patches available in the newer version. It's important to ensure that the rest of the codebase is compatible with this new version before deploying the update.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13408.txt#2025-04-14_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n\"release-note:change\\ngo: Update go version to 1.17.5\"\n```\n\n----------------------------------------\n\nTITLE: Measuring CouchDB GET Operation Latency in Vault\nDESCRIPTION: Provides a metric tracking the time required to complete retrieval operations in the CouchDB storage backend for HashiCorp Vault. Measures performance in milliseconds for GET requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/couchdb/get.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### vault.couchdb.get ((#vault-couchdb-get))\n\nMetric type | Value | Description\n----------- | ----- | -----------\nsummary     | ms    | Time required to complete a `GET` operation against the CouchDB storage backend\n```\n\n----------------------------------------\n\nTITLE: Updating Source URL Format for Vault\nDESCRIPTION: This change update indicates that the source URL format has been modified to `vault://{vault node}`. It improves clarity in how to reference Vault nodes in configurations and deployments.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24201.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:change\\nevents: Source URL is now `vault://{vault node}`\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Deadlock Detection in Vault Core\nDESCRIPTION: Release note detailing a bug fix that allows individual configuration of deadlock detection for expiration and quotas systems using the 'detect_deadlocks' parameter. Previously, deadlock detection was always enabled for both systems regardless of configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23902.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\ncore: fix bug where deadlock detection was always on for expiration and quotas. \nThese can now be configured individually with `detect_deadlocks`.\n```\n\n----------------------------------------\n\nTITLE: Testing Performance Replication with Docker Clusters in Go\nDESCRIPTION: This snippet shows how to set up and test performance replication between two 3-node Vault clusters using Docker. It uses the NewReplicationSetDocker function and tests if replication becomes healthy within a specified timeout.\nSOURCE: https://github.com/hashicorp/vault/blob/main/README.md#2025-04-14_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc TestStandardPerfReplication_Docker(t *testing.T) {\n  opts := docker.DefaultOptions(t)\n  r, err := docker.NewReplicationSetDocker(t, opts)\n  if err != nil {\n      t.Fatal(err)\n  }\n  defer r.Cleanup()\n\n  ctx, cancel := context.WithTimeout(context.Background(), time.Minute)\n  defer cancel()\n  err = r.StandardPerfReplication(ctx)\n  if err != nil {\n    t.Fatal(err)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Sync Destination Association in Vault (Shell)\nDESCRIPTION: cURL command to remove an association between a secret and a destination in Vault using the POST method. Requires authentication token and payload data.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/secrets-sync.mdx#2025-04-14_snippet_24\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/sync/destinations/aws-sm/my-store-1/associations/remove\n```\n\n----------------------------------------\n\nTITLE: Vault UI KV Secret Bug Fix Release Note\nDESCRIPTION: Release note entry documenting a bug fix where KV secrets were incorrectly displayed in the edit form after a new version was created by users without read capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14794.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:bug\nui: Fix KV secret showing in the edit form after a user creates a new version but doesn't have read capabilities\n```\n\n----------------------------------------\n\nTITLE: Adding Google TOTP Support in Vault Okta Auth\nDESCRIPTION: Release note documenting the addition of Google provider TOTP (Time-based One-Time Password) type support in the Okta authentication method for HashiCorp Vault. This improvement enhances authentication capabilities by supporting Google's TOTP implementation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14985.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:improvement\nauth/okta: Add support for Google provider TOTP type in the Okta auth method\n```\n\n----------------------------------------\n\nTITLE: Fixing AliCloud Auth Login Command Bug\nDESCRIPTION: Resolves a regression issue in the vault login command that was preventing successful authentication with AliCloud.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/19005.txt#2025-04-14_snippet_1\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nauth/alicloud: fix regression in vault login command that caused login to fail\n```\n\n----------------------------------------\n\nTITLE: Adding Rate Limit for TOTP Passcode Validation in Vault (Markdown)\nDESCRIPTION: This release note describes an improvement to Vault's authentication system. It introduces a rate limit for Time-based One-Time Password (TOTP) passcode validation attempts, enhancing security by preventing brute-force attacks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14864.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nauth: enforce a rate limit for TOTP passcode validation attempts\n```\n```\n\n----------------------------------------\n\nTITLE: OpenLDAP Password Rotation Bug Fix Release Note\nDESCRIPTION: Release note entry describing a fix for an issue where Vault could prematurely rotate static role passwords during startup under certain conditions in the OpenLDAP secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12600.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/openldap: Fix bug where Vault can rotate static role passwords early during start up under certain conditions. [#28](https://github.com/hashicorp/vault-plugin-secrets-openldap/pull/28)\n```\n\n----------------------------------------\n\nTITLE: Example TypeScript Declaration Generation for PKI Certificate Model\nDESCRIPTION: A specific example command that generates a declaration file (base.d.ts) for the PKI certificate base JavaScript model in the Vault project. The declaration file will be output to the specified types directory.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/types/generate-declaration.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn tsc ./app/models/pki/certificate/base.js  --declaration --allowJs --emitDeclarationOnly --outDir types/vault/models/pki/certificate\n```\n\n----------------------------------------\n\nTITLE: Activity Log Client Count Namespace Limitation\nDESCRIPTION: Introduces an improvement to limit activity log client count usage by namespaces in HashiCorp Vault core functionality\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/16000.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\\ncore: Limit activity log client count usage by namespaces\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration IPv6 Formatting\nDESCRIPTION: This release note indicates that IPv6 addresses within the proxy configuration are now automatically translated and displayed according to RFC-5952 §4. This ensures consistent and readable IPv6 address representations in the proxy's configuration.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/29517.txt#2025-04-14_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n```release-note:change\nproxy/config: Configuration values including IPv6 addresses will be automatically translated and displayed conformant to RFC-5952 §4.\n```\n```\n\n----------------------------------------\n\nTITLE: PKI Certificate Issuance Warning\nDESCRIPTION: Warns about potential future restrictions on issuing leaf certificates from CSRs with Certificate Authority (CA) basic constraints\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/20654.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nsecrets/pki: Warning when issuing leafs from CSRs with basic constraints\n```\n\n----------------------------------------\n\nTITLE: Checking Merkle Tree Corruption Status with cURL\nDESCRIPTION: This snippet demonstrates how to check the corruption status of the Merkle tree using cURL. This endpoint requires authentication and provides information about whether reindexing would be useful for resolving replication issues.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/replication/index.mdx#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/replication/merkle-check\n```\n\n----------------------------------------\n\nTITLE: Trimming Newline in API Token Unwrap\nDESCRIPTION: This snippet describes the improvement made to the API in the HashiCorp Vault project, focusing on the removal of newline characters from wrapping tokens when using the logical.Unwrap function. This change enhances data consistency and prevents formatting issues that may arise from unintended newlines.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/13044.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"release-note:improvement\\napi: Trim newline character from wrapping token in logical.Unwrap from the api package\"\n```\n\n----------------------------------------\n\nTITLE: Core Updates Table Layout in HTML/Markdown\nDESCRIPTION: HTML table structure showing core updates and enhancements for endpoint hardening and external plugins features.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/release-notes/1.16.1.mdx#2025-04-14_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <thead>\n    <tr>\n      <th style={{verticalAlign: 'middle'}}>Release</th>\n      <th style={{verticalAlign: 'middle'}}>Update</th>\n      <th style={{verticalAlign: 'middle'}}>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n  <tr>\n    <td style={{verticalAlign: 'middle'}}>\n      Endpoint hardening\n    </td>\n    <td style={{verticalAlign: 'middle', textAlign: 'center'}}>ENHANCED</td>\n    <td style={{verticalAlign: 'middle'}}>\n      Minimize network exposure by selectively redacting select fields like IP\n      addresses, cluster names, and Vault version from the HTTP responses of\n      your Vault server.\n      <br /><br />\n      Learn more:&nbsp;\n      <a href=\\\"/vault/docs/configuration/listener/tcp#redact_addresses\\\"><tt>redact_addresses</tt> parameter</a>\n    </td>\n  </tr>\n  <tr>\n    <td style={{verticalAlign: 'middle'}}>\n      External plugins\n    </td>\n    <td style={{verticalAlign: 'middle', textAlign: 'center'}}>GA</td>\n    <td style={{verticalAlign: 'middle'}}>\n      Run external plugins in their own container with native container platform\n      controls.\n      <br /><br />\n      Learn more: <a href=\\\"/vault/docs/plugins/containerized-plugins\\\">Containerize Vault plugins</a>\n    </td>\n  </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Release Note: PKI Certificate Metadata UI Enhancement\nDESCRIPTION: Documentation of a UI improvement that adds functionality to parse and display PKI certificate metadata in the Vault interface.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12541.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nui: parse and display pki cert metadata\n```\n\n----------------------------------------\n\nTITLE: Adding MongoDB Dynamic Username Customization Feature Note\nDESCRIPTION: Release note entry specifying the addition of customizable dynamic usernames feature for MongoDB database secrets in Vault's database secrets engine.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10858.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:feature\nsecrets/database/mongodb: Add ability to customize dynamic usernames\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Nomad ACL System in Vault (Markdown)\nDESCRIPTION: This release note describes a new feature in Vault's Nomad integration that automatically bootstraps the Nomad ACL system if no token is provided. This enhancement simplifies the setup process for Vault-Nomad integrations by reducing manual configuration steps.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12451.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:feature\nnomad: Bootstrap Nomad ACL system if no token is provided\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Published Vault Client TypeScript Package\nDESCRIPTION: Command to install the published @hashicorp/vault-client-typescript package from npm. This is the recommended method for consuming the package.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/api-client/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @hashicorp/vault-client-typescript@0.0.0 --save\n```\n\n----------------------------------------\n\nTITLE: Including Global Settings MDX References\nDESCRIPTION: A collection of @include directives that reference MDX documentation fragments for global settings in HashiCorp Vault. The includes are organized into 'both' (applying to both CLI and config) and 'flags' (CLI-specific) categories.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/standard-settings/all-standard-flags.mdx#2025-04-14_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n@include 'global-settings/both/address.mdx'\n\n@include 'global-settings/both/agent-address.mdx'\n\n@include 'global-settings/both/ca-cert.mdx'\n\n@include 'global-settings/both/ca-path.mdx'\n\n@include 'global-settings/both/client-cert.mdx'\n\n@include 'global-settings/both/client-key.mdx'\n\n@include 'global-settings/both/disable-redirects.mdx'\n\n@include 'global-settings/both/format.mdx'\n\n@include 'global-settings/flags/header.mdx'\n\n@include 'global-settings/both/mfa.mdx'\n\n@include 'global-settings/both/namespace.mdx'\n\n@include 'global-settings/flags/non-interactive.mdx'\n\n@include 'global-settings/flags/output-curl-string.mdx'\n\n@include 'global-settings/flags/output-policy.mdx'\n\n@include 'global-settings/flags/policy-override.mdx'\n\n@include 'global-settings/both/tls-server-name.mdx'\n\n@include 'global-settings/both/tls-skip-verify.mdx'\n\n@include 'global-settings/flags/unlock-key.mdx'\n\n@include 'global-settings/both/wrap-ttl.mdx'\n```\n\n----------------------------------------\n\nTITLE: Fixing Login with MFA for OIDC\nDESCRIPTION: This snippet documents a bug fix for the web UI login process when Multi-Factor Authentication (MFA) is enabled for OIDC authentication methods, including providers like Azure and Auth0. The fix enhances user access security by ensuring that the login functionality works seamlessly with MFA enabled.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28873.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"ui: Fixes login to web UI when MFA is enabled for OIDC (i.e. azure, auth0) and Okta auth methods\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenAPI Response Structure Generation - Release Note\nDESCRIPTION: Release note indicating an improvement to add logic for generating OpenAPI response structures in Vault, enhancing API documentation capabilities.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/18192.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nopenapi: Add logic to generate openapi response structures\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Configuration Response\nDESCRIPTION: Sample JSON response showing the current rate limit quota configuration including exempt paths and feature flags.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/quotas-config.mdx#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_id\": \"259801bd-a0c9-9350-8eb9-26c91afd19c6\",\n  \"lease_id\": \"\",\n  \"lease_duration\": 0,\n  \"renewable\": false,\n  \"data\": {\n    \"enable_rate_limit_audit_logging\": false,\n    \"enable_rate_limit_response_headers\": false,\n    \"rate_limit_exempt_paths\": [\n      \"sys/internal/ui/mounts\",\n      \"sys/generate-recovery-token/attempt\",\n      \"sys/generate-recovery-token/update\",\n      \"sys/generate-root/attempt\",\n      \"sys/generate-root/update\",\n      \"sys/health\",\n      \"sys/seal-status\",\n      \"sys/unseal\"\n    ]\n  },\n  \"warnings\": null\n}\n```\n\n----------------------------------------\n\nTITLE: Release Note for Consul Repository Reference Update\nDESCRIPTION: Release note entry documenting the update of outdated Consul repository references in Vault documentation, changing from consul-helm to consul-k8s repository.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/28825.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrelease-note:improvement\nwebsite/docs: changed outdated reference to consul-helm repository to consul-k8s repository.\n```\n\n----------------------------------------\n\nTITLE: Markdown Link to PKI Tidying Fix Pull Request\nDESCRIPTION: Reference to a GitHub pull request that fixes the PKI tidying process to handle nil values gracefully.\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-v0.md#2025-04-14_snippet_14\n\nLANGUAGE: markdown\nCODE:\n```\n[[GH-4214](https://github.com/hashicorp/vault/pull/4214)]\n```\n\n----------------------------------------\n\nTITLE: Documenting Storybook Upgrade in Vault UI Release Note\nDESCRIPTION: A release note indicating an improvement to the Vault UI by upgrading Storybook from version 5.3.19 to version 6.1.17. This represents a significant version jump in the Storybook tool used for UI component development and documentation.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10904.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: Upgrade Storybook from 5.3.19 to 6.1.17.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring log_requests_level in Vault HCL\nDESCRIPTION: Bug fix release note indicating a correction in how the log_requests_level configuration value is processed in Vault's core configuration system. The fix ensures the correct HCL config value is used when setting logging levels for requests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/24056.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nlog_requests_level\n```\n\n----------------------------------------\n\nTITLE: Release Note for Vault Core Bug Fix\nDESCRIPTION: A release note entry documenting a bug fix in the Vault core component that addresses an issue with duplicate quotas appearing on performance standby nodes.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10855.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:bug\ncore: Fix duplicate quotas on performance standby nodes.\n```\n```\n\n----------------------------------------\n\nTITLE: Go Version Compatibility for Vault 1.8.0\nDESCRIPTION: Details about Go version used in Vault 1.8.0 and notable platform support changes\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.8.x.mdx#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- Vault 1.8.0 is built with Go 1.16\n- Added support for darwin/arm64\n- Vault binaries now available for Apple M1 CPU\n```\n\n----------------------------------------\n\nTITLE: Examples of Markdown List Items with Inline Code\nDESCRIPTION: Examples showing normal list items and list items starting with inline code. Changing list items that begin with inline code can break existing permalinks.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/README.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n- this is a normal list item\n- `this` is a list item that begins with inline code\n```\n\nLANGUAGE: markdown\nCODE:\n```\n- lsdhfhksdjf\n- `this` jsdhfkdsjhkdsfjh\n```\n\n----------------------------------------\n\nTITLE: Reading Plugin Runtime Details with curl\nDESCRIPTION: Sample request to retrieve configuration details for a specific plugin runtime. This GET request requires sudo capability and returns the full configuration of the named runtime.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-runtimes-catalog.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request GET \\\n    http://127.0.0.1:8200/v1/sys/plugins/runtimes/catalog/container/example-plugin-runtime\n```\n\n----------------------------------------\n\nTITLE: Adding Support for Metric Retrieval in CLI\nDESCRIPTION: This snippet describes the addition of support for retrieving metrics from Disaster Recovery (DR) clusters in the CLI when the `unauthenticated_metrics_access` feature is enabled. This enhancement allows users to gain insights into cluster metrics without requiring authentication.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/15316.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\n\"release-note:improvement\\ncli/debug: added support for retrieving metrics from DR clusters if `unauthenticated_metrics_access` is enabled\"\n```\n\n----------------------------------------\n\nTITLE: Deleting Zero-Address Configuration in Vault\nDESCRIPTION: Example of deleting the zero-address roles configuration using a DELETE request. This removes all zero-address role settings.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/ssh.mdx#2025-04-14_snippet_12\n\nLANGUAGE: shell-session\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request DELETE \\\n    http://127.0.0.1:8200/v1/ssh/config/zeroaddress\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Set Certificate URLs - Shell\nDESCRIPTION: This shell command demonstrates how to make a POST request to configure the URLs for issuing certificates and OCSP servers using the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/pki/index.mdx#2025-04-14_snippet_91\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/pki/config/urls\n```\n\n----------------------------------------\n\nTITLE: Complex Metadata Mapping with Multiple Filters in Vault HCL\nDESCRIPTION: Demonstrates advanced metadata mapping with multiple filters using different priorities, showing how secrets can be selectively imported based on complex tag matching rules.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/import/mappings.mdx#2025-04-14_snippet_3\n\nLANGUAGE: hcl\nCODE:\n```\nmapping_metadata {\n  name        = \"my-map-1\"\n  source      = \"my-gcp-source-1\"\n  destination = \"my-dest-1\"\n  priority    = 1\n\n  tags = {\n    \"database\"   = \"users\"\n    \"importable\" = \"true\"\n  }\n}\n\nmapping_metadata {\n  name        = \"my-map-2\"\n  source      = \"my-gcp-source-1\"\n  destination = \"my-dest-2\"\n  priority    = 2\n\n  tags = {\n    \"importable\" = \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Helper Files for PKI Area in TypeScript\nDESCRIPTION: Example path structure for PKI-related selector and helper files. The selectors file exports constants for page elements, while the helpers file contains utility methods and example data for tests.\nSOURCE: https://github.com/hashicorp/vault/blob/main/ui/docs/tests.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n'/helpers/<area>/<area>-selectors.ts'\n```\n\nLANGUAGE: javascript\nCODE:\n```\n'/helpers/<area>/<area>-helpers.js'\n```\n\n----------------------------------------\n\nTITLE: Adding Warning Banner for Stopped Token Auto-Refresh in Vault UI\nDESCRIPTION: A release note indicating that a warning banner has been added to the Vault UI that will be displayed when automatic token refreshing has stopped. This helps users know when they might need to re-authenticate.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/23143.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\nui: Surface warning banner if UI has stopped auto-refreshing token\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Vault Migration in Shell\nDESCRIPTION: This command uses the 'vault operator migrate' command to perform the migration from Consul to Integrated Storage using the specified configuration file.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/concepts/integrated-storage/migrate-consul-storage.mdx#2025-04-14_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ vault operator migrate -config=migrate.hcl\n```\n\n----------------------------------------\n\nTITLE: CLI Example with Version Limit\nDESCRIPTION: Example of setting a 5-version limit on a KV v2 secret path named 'dev/square-api' in the 'shared' mount.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/max-versions.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vault kv metadata put \\\n   -max-versions 5      \\\n   -mount shared        \\\n   dev/square-api\n\nSuccess! Data written to: shared/metadata/dev/square-api\n```\n\n----------------------------------------\n\nTITLE: Configuring Vault Audit Device with Exclusion Rules\nDESCRIPTION: Example command showing how to enable a Vault audit device with exclusion rules loaded from a JSON file. The command configures file-based audit logging while applying custom exclusion filters.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/cli/audit/options/exclude.mdx#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ vault audit enable    \\\n      exclude=@rules.json \\\n      file file_path=\"/var/logs/vault/audit.log'\"\n```\n\n----------------------------------------\n\nTITLE: Metric Definition Table for Raft Storage Node Count\nDESCRIPTION: Markdown table defining the vault.raft_storage.bolt.node.count metric which tracks the number of node allocations in the Bolt database. This gauge metric returns a numeric value.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/telemetry-metrics/vault/raft_storage/bolt/node/count.mdx#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nMetric type | Value   | Description\n----------- | ------- | -----------\ngauge       | number  | Number of node allocations for the Bolt database\n```\n\n----------------------------------------\n\nTITLE: Documenting API Parameter Handling Improvement in Vault (Markdown)\nDESCRIPTION: This release note describes an improvement to the Vault API where warnings are added to non-empty responses when parameters are ignored or replaced. This enhancement applies to cases where supplied parameters are not expected by the endpoint or are overridden by values in the endpoint's path.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/14962.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:improvement\napi: If the parameters supplied over the API payload are ignored due to not\nbeing what the endpoints were expecting, or if the parameters supplied get\nreplaced by the values in the endpoint's path itself, warnings will be added to\nthe non-empty responses listing all the ignored and replaced parameters.\n```\n```\n\n----------------------------------------\n\nTITLE: JSON Response from RADIUS Authentication in Vault\nDESCRIPTION: This JSON snippet represents the response received after successful authentication with the RADIUS auth method. It includes the client token and associated policies.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/auth/radius.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"auth\": {\n    \"client_token\": \"c4f280f6-fdb2-18eb-89d3-589e2e834cdb\",\n    \"policies\": [\"admins\"],\n    \"metadata\": {\n      \"username\": \"mitchellh\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing curl at runtime in Kubernetes pod\nDESCRIPTION: These shell commands demonstrate how to install `curl` inside a running Kubernetes pod using `apk`.  This is useful when running the image as root. It depends on the `kubectl` command-line tool and the availability of `apk` within the container.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-1.15.x.mdx#2025-04-14_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n\"kubectl exec -ti <NAME> -- apk add curl\"\n```\n\n----------------------------------------\n\nTITLE: Fetching Group Policies in Vault Namespace (Shell)\nDESCRIPTION: This command reads the policies associated with a specific group ID in the 'ns1' namespace of Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/known-issues/internal-error-namespace-missing-policy.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vault read -format=json -namespace=ns1 \\\n  identity/group/id/6cb152b7-955d-272b-4dcf-a2ed668ca1ea | \\\n  jq '.data.policies'\n[\n  \"group_policy\"\n]\n```\n\n----------------------------------------\n\nTITLE: AWS Role Output Change in Vault Authentication\nDESCRIPTION: Modified AWS authentication backend to support binds as comma-delimited strings or string arrays, with role reading now returning string arrays for consistency\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/upgrading/upgrade-to-0.9.6.mdx#2025-04-14_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Response from Getting Group Policy Application Mode in Vault API\nDESCRIPTION: This JSON response shows the current group policy application mode configured in Vault. In this example, the mode is set to 'within_namespace_hierarchy', which is the default restrictive mode.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/config-group-policy-application.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"group_policy_application_mode\": \"within_namespace_hierarchy\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring Vault to CIEPS JSON Request in PKI Secrets Engine\nDESCRIPTION: Defines the JSON structure for requests sent from Vault to CIEPS, including version, UUID, user request parameters, identity information, ACME details, and Vault-specific values.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/pki/cieps.mdx#2025-04-14_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"request_version\": 1,\n  \"request_uuid\": \"string\",\n  \"synchronous\": true,\n  \"user_request_key_values\": {\n    \"csr\": \"string\"\n  },\n  \"identity_request_key_values\": {\n    \"entity_id\": \"string\",\n    \"entity\": {},\n    \"groups\": []\n  },\n  \"acme_request_key_values\": {\n    \"authorizations\": {},\n    \"account\": {\n      \"id\": \"string\",\n      \"directory\": \"string\",\n      \"contact\": [],\n      \"created_date\": \"string\",\n      \"eab\": {\n        \"key_id\": \"string\",\n        \"key_type\": \"string\",\n        \"created_date\": \"string\"\n      }\n    }\n  },\n  \"vault_request_values\": {\n    \"policy_name\": \"\",\n    \"mount\": \"string\",\n    \"namespace\": \"string\",\n    \"vault_is_performance_standby\": false,\n    \"vault_is_performance_secondary\": false,\n    \"issuance_mode\": \"string\",\n    \"vault_generated_private_key\": false,\n    \"requested_issuer_name\": \"string\",\n    \"requested_issuer_id\": \"string\",\n    \"requested_issuer_cert\": \"string\",\n    \"requested_issuance_config\": {\n      \"aia_values\": {},\n      \"leaf_not_after_behavior\": \"string\",\n      \"mount_default_ttl\": \"string\",\n      \"mount_max_ttl\": \"string\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destroying KV Data Using API\nDESCRIPTION: cURL command template for destroying secret versions via the Vault HTTP API. Requires authentication token and version numbers in the request body.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/kv/kv-v2/cookbook/destroy-data.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl                                       \\\n   --request POST                            \\\n   --header \"X-Vault-Token: ${VAULT_TOKEN}\"  \\\n   --data '{\"versions\":[<target_versions>]}  \\\n   ${VAULT_ADDR}/v1/<plugin_mount_path>/destroy/<secret_path>\n```\n\n----------------------------------------\n\nTITLE: VaultAuth Invalid Status Output\nDESCRIPTION: JSON output showing an invalid status condition when VaultAuthGlobal is not found.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/platform/k8s/vso/sources/vault/auth/index.mdx#2025-04-14_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"conditions\": [\n    {\n      \"lastTransitionTime\": \"2024-07-16T15:35:43Z\",\n      \"message\": \"failed getting admin/default, err=VaultAuthGlobal.secrets.hashicorp.com \\\"default\\\" not found\",\n      \"observedGeneration\": 3,\n      \"reason\": \"VaultAuthGlobalRef\",\n      \"status\": \"False\",\n      \"type\": \"Available\"\n    }\n  ],\n  \"specHash\": \"e264f241cb4ad776802924b6ad2aa272b11cffd570382605d1c2ddbdfd661ad3\",\n  \"valid\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Default Username Template for mysql-database-plugin\nDESCRIPTION: Template string used to generate dynamic usernames for the standard MySQL database plugin. Combines display name, role name, random string and unix timestamp.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/secret/databases/mysql-maria.mdx#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n{{ printf \"v-%s-%s-%s-%s\" (.DisplayName | truncate 10) (.RoleName | truncate 10) (random 20) (unix_time) | truncate 32 }}\n```\n\n----------------------------------------\n\nTITLE: Identity Role Creation Bug Fix Release Note\nDESCRIPTION: Documents a bug fix that prevents the creation of identity roles without specifying a required key parameter in HashiCorp Vault.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/12208.txt#2025-04-14_snippet_0\n\nLANGUAGE: release-note\nCODE:\n```\nrelease-note:bug\nidentity: disallow creation of role without a key parameter\n```\n\n----------------------------------------\n\nTITLE: Configuring Google Cloud KMS Secrets Engine with Credentials\nDESCRIPTION: Command to configure the Google Cloud KMS secrets engine with account credentials from a JSON file. If running in GCE or GKE, instance or pod service accounts can be used instead.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/secrets/gcpkms.mdx#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ vault write gcpkms/config \\\n    credentials=@my-credentials.json\nSuccess! Data written to: gcpkms/config\n```\n\n----------------------------------------\n\nTITLE: Creating Password Policy using cURL\nDESCRIPTION: This snippet demonstrates how to create a password policy using cURL. It includes preparing a JSON payload file and sending a POST request to the Vault API.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/policies-password.mdx#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cat payload.json\n{\n  \"policy\": \"length = 20\\nrule \\\"charset\\\" {\\n  charset = \\\"abcde\\\"\\n}\\n\"\n}\n\n$ curl \\\n    --header \"X-Vault-Token: ...\" \\\n    --request POST \\\n    --data @payload.json \\\n    http://127.0.0.1:8200/v1/sys/policies/password/my-policy\n```\n\n----------------------------------------\n\nTITLE: Database Secrets Plugin Performance Standby Connection Fix\nDESCRIPTION: Resolves an issue preventing performance standbys from connecting to databases after root credential rotation\nSOURCE: https://github.com/hashicorp/vault/blob/main/CHANGELOG-pre-v1.10.md#2025-04-14_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n* secrets/database: Fix issue that prevents performance standbys from connecting to databases after a root credential rotation [[GH-9129](https://github.com/hashicorp/vault/pull/9129)]\n```\n\n----------------------------------------\n\nTITLE: Direct Token Unwrapping Request in Vault API\nDESCRIPTION: Shell command for unwrapping a response using the wrapping token directly as the authentication token. No additional payload required.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/wrapping-unwrap.mdx#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ curl \\\n    --header \"X-Vault-Token: abcd1234...\" \\\n    --request POST \\\n    http://127.0.0.1:8200/v1/sys/wrapping/unwrap\n```\n\n----------------------------------------\n\nTITLE: Patching KV Secret with Stdin Input\nDESCRIPTION: This shell command demonstrates reading data from standard input and using it to update a secret with the 'vault kv patch' command. The '-' symbol is used to designate input from stdin. The Vault CLI must be installed and configured beforehand.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/docs/commands/kv/patch.mdx#2025-04-14_snippet_3\n\nLANGUAGE: shell-session\nCODE:\n```\n$ echo \"abcd1234\" | vault kv patch -mount=secret foo bar=-\n```\n\n----------------------------------------\n\nTITLE: Sample Response for Listing Plugin Runtimes\nDESCRIPTION: JSON response format when listing plugin runtimes in the Vault catalog. The response includes runtime details such as name, type, OCI runtime, cgroup parent, and resource limits.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/api-docs/system/plugins-runtimes-catalog.mdx#2025-04-14_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"runtimes\": [\n      {\n        \"name\": \"example-plugin-runtime\",\n        \"type\": \"container\",\n        \"oci_runtime\": \"example-oci-runtime\",\n        \"cgroup_parent\": \"/examplelimit/\",\n        \"cpu_nanos\": 1000,\n        \"memory_bytes\": 10000000\n      },\n      ...\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling User Lockout Globally in Vault using Environment Variable\nDESCRIPTION: This snippet shows how to disable the user lockout feature globally in Vault using an environment variable. This method affects all auth methods that support user lockout.\nSOURCE: https://github.com/hashicorp/vault/blob/main/website/content/partials/user-lockout.mdx#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nVAULT_DISABLE_USER_LOCKOUT\n```\n\n----------------------------------------\n\nTITLE: Updating Go Version in Vault\nDESCRIPTION: A release note indicating that the Go version used in Vault has been updated to version 1.15.7.\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/10730.txt#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```release-note:change\ngo: Update go version to 1.15.7\n```\n```\n\n----------------------------------------\n\nTITLE: PKI Setup and Root Certificate Generation in Vault\nDESCRIPTION: Commands for setting up Vault's PKI secrets engine, configuring TTL, and generating a root certificate. The commands mount the PKI engine, adjust its maximum lease TTL, and create an exported root certificate with a specific domain and IP SANs.\nSOURCE: https://github.com/hashicorp/vault/blob/main/builtin/credential/cert/test-fixtures/generate.txt#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvault mount pki\nvault mount-tune -max-lease-ttl=438000h pki\nvault write pki/root/generate/exported common_name=myvault.com ttl=438000h ip_sans=127.0.0.1\nvi cacert.pem\nvi cakey.pem\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Blob Storage Environment in Vault Enterprise\nDESCRIPTION: Resolves a bug requiring explicit Azure blob environment specification for automated snapshots, now defaulting to AZUREPUBLICCLOUD\nSOURCE: https://github.com/hashicorp/vault/blob/main/changelog/_1663.txt#2025-04-14_snippet_0\n\nLANGUAGE: hcl\nCODE:\n```\nazure_blob_environment = \"AZUREPUBLICCLOUD\"\n```"
  }
]