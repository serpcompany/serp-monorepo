[
  {
    "owner": "evmos",
    "repo": "evmos",
    "content": "TITLE: Custom EIP Implementation Example\nDESCRIPTION: Example showing how to implement a custom EIP that modifies the constant gas cost for the CREATE opcode.\nSOURCE: https://github.com/evmos/evmos/blob/main/app/eips/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\n// Enable a custom EIP-0000\nfunc Enable0000(jt *vm.JumpTable) {\n\tjt[vm.CREATE].SetConstantGas(1)\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Configurator Usage Example\nDESCRIPTION: Example demonstrating how to use the EVM configurator to set up custom EIPs and handle configuration errors.\nSOURCE: https://github.com/evmos/evmos/blob/main/app/eips/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nconfigurator := evmconfig.NewEVMConfigurator().\n    WithExtendedEips(customActivators).\n    WithExtendedDefaultExtraEIPs(defaultEnabledEIPs...).\n    Configure()\n\nerr := configurator.Configure()\nif err != nil {\n    panic(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TestingApp Interface - Core Methods\nDESCRIPTION: Example implementation of required TestingApp interface methods for SimApp including base app access, keeper access, and configuration methods.\nSOURCE: https://github.com/evmos/evmos/blob/main/ibc/testing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n// GetBaseApp implements the TestingApp interface.\nfunc (app *SimApp) GetBaseApp() *baseapp.BaseApp {\n\treturn app.BaseApp\n}\n\n// GetStakingKeeper implements the TestingApp interface.\nfunc (app *SimApp) GetStakingKeeper() stakingkeeper.Keeper {\n\treturn app.StakingKeeper\n}\n\n// GetIBCKeeper implements the TestingApp interface.\nfunc (app *SimApp) GetIBCKeeper() *ibckeeper.Keeper {\n\treturn app.IBCKeeper\n}\n\n// GetScopedIBCKeeper implements the TestingApp interface.\nfunc (app *SimApp) GetScopedIBCKeeper() capabilitykeeper.ScopedKeeper {\n\treturn app.ScopedIBCKeeper\n}\n\n// GetTxConfig implements the TestingApp interface.\nfunc (app *SimApp) GetTxConfig() client.TxConfig {\n\treturn MakeTestEncodingConfig().TxConfig\n}\n```\n\n----------------------------------------\n\nTITLE: EVM Operation Structure Definition\nDESCRIPTION: Core structure defining an EVM operation including execution function, gas costs, stack requirements and memory size parameters.\nSOURCE: https://github.com/evmos/evmos/blob/main/app/eips/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntype operation struct {\n\t// execute is the operation function\n\texecute     executionFunc\n\tconstantGas uint64\n\tdynamicGas  gasFunc\n\t// minStack tells how many stack items are required\n\tminStack int\n\t// maxStack specifies the max length the stack can have for this operation\n\t// to not overflow the stack.\n\tmaxStack int\n\n\t// memorySize returns the memory size required for the operation\n\tmemorySize memorySizeFunc\n}\n```\n\n----------------------------------------\n\nTITLE: IBC Testing Suite Setup\nDESCRIPTION: Example implementation of a testing suite structure with coordinator and chain setup for IBC testing.\nSOURCE: https://github.com/evmos/evmos/blob/main/ibc/testing/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// KeeperTestSuite is a testing suite to test keeper functions.\ntype KeeperTestSuite struct {\n\tsuite.Suite\n\n\tcoordinator *ibctesting.Coordinator\n\n\t// testing chains used for convenience and readability\n\tchainA *ibctesting.TestChain\n\tchainB *ibctesting.TestChain\n}\n\n// TestKeeperTestSuite runs all the tests within this package.\nfunc TestKeeperTestSuite(t *testing.T) {\n\tsuite.Run(t, new(KeeperTestSuite))\n}\n\n// SetupTest creates a coordinator with 2 test chains.\nfunc (suite *KeeperTestSuite) SetupTest() {\n\tsuite.coordinator = ibctesting.NewCoordinator(suite.T(), 2) // initializes 2 test chains\n\tsuite.chainA = suite.coordinator.GetChain(ibctesting.GetChainID(1)) // convenience and readability\n\tsuite.chainB = suite.coordinator.GetChain(ibctesting.GetChainID(2)) // convenience and readability\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Module from SimApp for IBC Middleware Testing\nDESCRIPTION: Example showing how to access an IBC module from SimApp for middleware testing. This approach is necessary when testing modules that never sit at the top of a middleware stack, requiring access via a public field in SimApp.\nSOURCE: https://github.com/evmos/evmos/blob/main/ibc/testing/README.md#2025-04-22_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nsuite.chainA.GetSimApp().ICAAuthModule.IBCApp.OnChanOpenInit = func(ctx sdk.Context, order channeltypes.Order, connectionHops []string,\n\tportID, channelID string, chanCap *capabilitytypes.Capability,\n\tcounterparty channeltypes.Counterparty, version string,\n) error {\n\treturn fmt.Errorf(\"mock ica auth fails\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Evmos from Source\nDESCRIPTION: Command to build and install the Evmos blockchain node software from source code after installing prerequisites. Alternatively, users can download the latest release directly from GitHub.\nSOURCE: https://github.com/evmos/evmos/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake install\n```\n\n----------------------------------------\n\nTITLE: Defining Custom EIP Function Signature in Go\nDESCRIPTION: Basic function signature required for defining custom EIP modifiers that can alter opcode behavior in the EVM.\nSOURCE: https://github.com/evmos/evmos/blob/main/app/eips/README.md#2025-04-22_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc(jt *vm.JumpTable) {}\n```\n\n----------------------------------------\n\nTITLE: Enabled EIPs Configuration\nDESCRIPTION: Configuration slice defining which custom EIP activators should be enabled by default.\nSOURCE: https://github.com/evmos/evmos/blob/main/app/eips/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nevmosEnabledEIPs = []int64{\n    \"evmos_0\",\n}\n```\n\n----------------------------------------\n\nTITLE: TestingApp Setup Implementation\nDESCRIPTION: Function to initialize TestingApp with required configuration and genesis state for testing purposes.\nSOURCE: https://github.com/evmos/evmos/blob/main/ibc/testing/README.md#2025-04-22_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc SetupTestingApp() (TestingApp, map[string]json.RawMessage) {\n\tdb := dbm.NewMemDB()\n\tencCdc := simapp.MakeTestEncodingConfig()\n\tapp := simapp.NewSimApp(log.NewNopLogger(), db, nil, true, map[int64]bool{}, simapp.DefaultNodeHome, 5, encCdc, simapp.EmptyAppOptions{})\n\treturn app, simapp.NewDefaultGenesisState(encCdc.Marshaler)\n}\n```\n\n----------------------------------------\n\nTITLE: AppCodec Implementation for TestingApp\nDESCRIPTION: Implementation of AppCodec method for SimApp to handle codec functionality in testing environment.\nSOURCE: https://github.com/evmos/evmos/blob/main/ibc/testing/README.md#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\n// AppCodec returns SimApp's app codec.\n//\n// NOTE: This is solely to be used for testing purposes as it may be desirable\n// for modules to register their own custom testing types.\nfunc (app *SimApp) AppCodec() codec.Codec {\n\treturn app.appCodec\n}\n```\n\n----------------------------------------\n\nTITLE: Running Basic E2E Tests in Shell\nDESCRIPTION: Command to execute basic end-to-end tests for Evmos chain upgrades\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/e2e/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmake test-e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring E2E Test Parameters\nDESCRIPTION: Environment variables for customizing the E2E test execution, including cleanup settings, version specifications, mount paths, and chain ID\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/e2e/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# flag to skip containers cleanup after upgrade\n# should be set true with make test-e2e command if you need access to the node\n# after upgrading\nE2E_SKIP_CLEANUP := false\n\n# version(s) of initial evmos node(s) that will be upgraded, tag e.g. 'v9.1.0'\n# to use multiple upgrades separate the versions with a forward slash, e.g.\n# 'v10.0.1/v11.0.0-rc1'\nINITIAL_VERSION\n\n# version of upgraded evmos node that will replace the initial node, tag e.g.\n# 'v10.0.0'\nTARGET_VERSION\n\n# mount point for the upgraded node container, to mount new node version to\n# previous node state folder. By default this is './build/.evmosd:/root/.evmosd'\n# More info at https://docs.docker.com/engine/reference/builder/#volume\nMOUNT_PATH\n\n# '--chain-id' evmos cli parameter, used to start nodes with a specific\n# chain-id and submit proposals\n# By default this is 'evmos_9002-1'\nCHAIN_ID\n```\n\n----------------------------------------\n\nTITLE: Mocking OnChanOpenTry Callback in IBC MockIBCApp\nDESCRIPTION: Example of mocking the OnChanOpenTry callback in a MockIBCApp to force an error condition. This allows testing that the base application cannot affect the outcome of the OnChanOpenTry callback.\nSOURCE: https://github.com/evmos/evmos/blob/main/ibc/testing/README.md#2025-04-22_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nmockModule.IBCApp.OnChanOpenTry = func(ctx sdk.Context, portID, channelID, version string) error {\n\t\t\treturn fmt.Errorf(\"mock base app must not be called for OnChanOpenTry\")\n}\n```\n\n----------------------------------------\n\nTITLE: Transfer Testing Application Setup\nDESCRIPTION: Implementation of transfer-specific testing setup including custom path initialization and app type assertions.\nSOURCE: https://github.com/evmos/evmos/blob/main/ibc/testing/README.md#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\npackage transfertesting\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/tendermint/tendermint/libs/log\"\n\tdbm \"github.com/tendermint/tm-db\"\n\n\t\"github.com/cosmos/ibc-go/v6/modules/apps/transfer/simapp\"\n\tibctesting \"github.com/cosmos/ibc-go/v6/testing\"\n)\n\nfunc SetupTransferTestingApp() (ibctesting.TestingApp, map[string]json.RawMessage) {\n\tdb := dbm.NewMemDB()\n\tencCdc := simapp.MakeTestEncodingConfig()\n\tapp := simapp.NewSimApp(log.NewNopLogger(), db, nil, true, map[int64]bool{}, simapp.DefaultNodeHome, 5, encCdc, simapp.EmptyAppOptions{})\n\treturn app, simapp.NewDefaultGenesisState(encCdc.Marshaler)\n}\n\nfunc init() {\n\tibctesting.DefaultTestingAppInit = SetupTransferTestingApp\n}\n\nfunc NewTransferPath(chainA, chainB *ibctesting.TestChain) *ibctesting.Path {\n\tpath := ibctesting.NewPath(chainA, chainB)\n\tpath.EndpointA.ChannelConfig.PortID = ibctesting.TransferPort\n\tpath.EndpointB.ChannelConfig.PortID = ibctesting.TransferPort\n\n\treturn path\n}\n\nfunc GetTransferSimApp(chain *ibctesting.TestChain) *simapp.SimApp {\n\tapp, ok := chain.App.(*simapp.SimApp)\n\tif !ok {\n\t\tpanic(\"not transfer app\")\n\t}\n\n\treturn app\n}\n```\n\n----------------------------------------\n\nTITLE: Running RPC Integration Tests with Make\nDESCRIPTION: Command to run the integration tests for the first time using Make. This will set up the environment and execute all tests.\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/nix_tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nmake run-nix-tests\n```\n\n----------------------------------------\n\nTITLE: Running RPC Tests Directly with Nix\nDESCRIPTION: Series of commands to run tests after the initial setup. These commands enter the Nix shell environment and execute the Pytest test suite.\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/nix_tests/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnix-shell tests/nix_tests/shell.nix\ncd tests/nix_tests\npytest -s -vv\n```\n\n----------------------------------------\n\nTITLE: Running Explicit Version Upgrade Test\nDESCRIPTION: Command to test an upgrade to a specific target version while maintaining the upgraded node\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/e2e/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake test-e2e E2E_SKIP_CLEANUP=true INITIAL_VERSION=<tag> TARGET_VERSION=<tag>\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Version Upgrades\nDESCRIPTION: Command to execute multiple sequential upgrades using forward slash notation\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/e2e/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake test-e2e INITIAL_VERSION=v10.0.1/v11.0.0-rc1 TARGET_VERSION=v11.0.0-rc3\n```\n\n----------------------------------------\n\nTITLE: Compiling Smart Contracts using Make in Bash\nDESCRIPTION: This command compiles all smart contracts in the repository using a Hardhat setup. It generates JSON files for existing contracts with corresponding JSON files.\nSOURCE: https://github.com/evmos/evmos/blob/main/scripts/compile_smart_contracts/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake contracts-compile\n```\n\n----------------------------------------\n\nTITLE: Adding New Smart Contract and Generating JSON in Bash\nDESCRIPTION: This command adds a new smart contract to the compilation process and generates a corresponding JSON file. It requires specifying the path to the new contract file.\nSOURCE: https://github.com/evmos/evmos/blob/main/scripts/compile_smart_contracts/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake contracts-add CONTRACT=path/to/contract.sol\n```\n\n----------------------------------------\n\nTITLE: Generating BankKeeper Mock from Cosmos SDK\nDESCRIPTION: Commands to clone the Cosmos SDK repository, checkout the specific version used in the project, and generate a mock for the BankKeeper interface using mockery tool.\nSOURCE: https://github.com/evmos/evmos/blob/main/x/erc20/types/mocks/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/evmos/cosmos-sdk.git\ncd cosmos-sdk\ngit checkout v0.47.5 # or the version currently used\n\n# Go into bank module and generate mock\ncd x/bank\nmockery --name Keeper\n```\n\n----------------------------------------\n\nTITLE: Generating EVMKeeper Mock for ERC20 Module\nDESCRIPTION: Commands to navigate to the ERC20 types directory and generate a mock for the EVMKeeper interface using mockery tool. This uses a reduced interface defined in the ERC20 types.\nSOURCE: https://github.com/evmos/evmos/blob/main/x/erc20/types/mocks/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd x/erc20/types\nmockery --name EVMKeeper\n```\n\n----------------------------------------\n\nTITLE: Installing Nix Multi-user for RPC Testing\nDESCRIPTION: Command to install Nix in multi-user mode. This is required to set up the environment for running integration tests against Evmos.\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/nix_tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsh <(curl -L https://nixos.org/nix/install) --daemon\n```\n\n----------------------------------------\n\nTITLE: Enabling Binary Cache for Faster Tests\nDESCRIPTION: Commands to set up Cachix binary cache for Evmos, which speeds up test runs by avoiding rebuilding components that haven't changed.\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/nix_tests/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnix-env -iA cachix -f https://cachix.org/api/v1/install\ncachix use evmos\n```\n\n----------------------------------------\n\nTITLE: Compiling Test Contracts Using npm in Evmos\nDESCRIPTION: Shell commands to install dependencies and compile the Solidity contracts using Hardhat. The typechain command also runs a script that copies all Solidity smart contracts from the precompiles directory of the Evmos repository.\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/nix_tests/hardhat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run typechain\n```\n\n----------------------------------------\n\nTITLE: Adding Nix to Shell Profile\nDESCRIPTION: Line that needs to be added to the shell profile to ensure Nix commands are available in the terminal session after installation.\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/nix_tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsource ~/.nix-profile/etc/profile.d/nix.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Nix on Linux without Daemon\nDESCRIPTION: Alternative command for installing Nix on Linux systems without using the daemon mode. This is useful for certain Linux configurations.\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/nix_tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nsh <(curl -L https://nixos.org/nix/install) --no-daemon\n```\n\n----------------------------------------\n\nTITLE: Cleaning Contract Artifacts and Dependencies in Bash\nDESCRIPTION: This command cleans up generated artifacts, installed dependencies, and cached files related to smart contract compilation.\nSOURCE: https://github.com/evmos/evmos/blob/main/scripts/compile_smart_contracts/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake contracts-clean\n```\n\n----------------------------------------\n\nTITLE: Calculating Dropbox Address in Bash\nDESCRIPTION: This snippet demonstrates how to derive the Dropbox address using the SHA256 sum of the 'safu' string. The address is created from the first 20 bytes of the hash.\nSOURCE: https://github.com/evmos/evmos/blob/main/SAFU.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\naddress = address(shaSum256([]byte(\"safu\"))[:20]))\n```\n\n----------------------------------------\n\nTITLE: Calculating Claimable Amount in Bash\nDESCRIPTION: This snippet shows the formula for calculating the amount claimable by a whitehat. It takes into account the bounty cap and the bounty percent of the secured amount.\nSOURCE: https://github.com/evmos/evmos/blob/main/SAFU.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\namount_claimable = min(bounty_cap, amount_secured * bounty_percent)\n```\n\n----------------------------------------\n\nTITLE: Configuring Protobuf Path in VSCode Settings\nDESCRIPTION: This JSON configuration sets up the protobuf path in VSCode workspace settings to ensure proper compilation of imports in the IDE.\nSOURCE: https://github.com/evmos/evmos/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"protoc\": {\n    \"options\": [\n      \"--proto_path=${workspaceRoot}/proto\",\n      \"--proto_path=${workspaceRoot}/third_party/proto\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Linkified Changelog with Python Script\nDESCRIPTION: Command to run the Python script that converts entries in CHANGELOG.md to proper hyperlinks. This step is required during the release preparation process to ensure all changelog entries are properly formatted with clickable links.\nSOURCE: https://github.com/evmos/evmos/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python ./scripts/linkify_changelog.py CHANGELOG.md\n```\n\n----------------------------------------\n\nTITLE: Example Test Results Output\nDESCRIPTION: Sample log output showing successful test execution and error scenarios\nSOURCE: https://github.com/evmos/evmos/blob/main/tests/e2e/README.md#2025-04-22_snippet_3\n\nLANGUAGE: log\nCODE:\n```\nok  \tgithub.com/evmos/evmos/v9/tests/e2e\t174.137s.\n```\n\n----------------------------------------\n\nTITLE: Running Changelog Checker in Bash\nDESCRIPTION: Command to execute the changelog checker from the repository root directory to validate formatting and spelling.\nSOURCE: https://github.com/evmos/evmos/blob/main/scripts/changelog_checker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake check-changelog\n```\n\n----------------------------------------\n\nTITLE: Fixing Changelog Issues Automatically\nDESCRIPTION: Command to automatically fix easily resolvable formatting and spelling issues in the changelog.\nSOURCE: https://github.com/evmos/evmos/blob/main/scripts/changelog_checker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmake fix-changelog\n```\n\n----------------------------------------\n\nTITLE: Documenting Changelog Entries in Markdown\nDESCRIPTION: This snippet demonstrates the structure of changelog entries, including version headers, categories, and links to pull requests. It covers unreleased changes and multiple released versions.\nSOURCE: https://github.com/evmos/evmos/blob/main/scripts/changelog_checker/testdata/changelog_ok.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Changelog\n\n## Unreleased\n\n### State Machine Breaking\n\n- (p256-precompile) [#1922](https://github.com/evmos/evmos/pull/1922) Add `secp256r1` curve precompile.\n- (distribution-precompile) [#1949](https://github.com/evmos/evmos/pull/1949) Add `ClaimRewards` custom transaction.\n- (swagger) [#2218](https://github.com/evmos/evmos/pull/2218) Use correct version of proto dependencies to generate swagger.\n- (go) [#1687](https://github.com/evmos/evmos/pull/1687) Bump Evmos version to v14.\n\n### API Breaking\n\n- (inflation) [#2015](https://github.com/evmos/evmos/pull/2015) Rename `inflation` module to `inflation/v1`.\n- (ante) [#2078](https://github.com/evmos/evmos/pull/2078) Deprecate legacy EIP-712 ante handler.\n- (evm) [#1851](https://github.com/evmos/evmos/pull/1851) Enable [EIP 3855](https://eips.ethereum.org/EIPS/eip-3855) (`PUSH0` opcode) during upgrade.\n\n### Improvements\n\n- (testnet) [#1864](https://github.com/evmos/evmos/pull/1864) Add `--base-fee` and `--min-gas-price` flags.\n- (stride-outpost) [#1912](https://github.com/evmos/evmos/pull/1912) Add Stride outpost interface and ABI.\n- (app) [#2104](https://github.com/evmos/evmos/pull/2104) Refactor to use `sdkmath.Int` and `sdkmath.LegacyDec` instead of SDK types.\n- (all) [#701](https://github.com/evmos/evmos/pull/701) Rename Go module to `evmos/evmos`.\n\n### Bug Fixes\n\n- (evm) [#1801](https://github.com/evmos/evmos/pull/1801) Fixed the problem `gas_used` is 0.\n- (erc20) [#109](https://github.com/evmos/evmos/pull/109) Fix hardcoded ERC-20 nonce and `UpdateTokenPairERC20` proposal to support ERC-20s with 0 decimals.\n\n## [v15.0.0](https://github.com/evmos/evmos/releases/tag/v15.0.0) - 2023-10-31\n\n### API Breaking\n\n- (vesting) [#1862](https://github.com/evmos/evmos/pull/1862) Add Authorization Grants to the Vesting extension.\n- (app) [#555](https://github.com/evmos/evmos/pull/555) `v4.0.0` upgrade logic.\n\n## [v2.0.0](https://github.com/evmos/evmos/releases/tag/v2.0.0) - 2021-10-31\n\n### State Machine Breaking\n\n- legacy entries do not have to be fully correct\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entries\nDESCRIPTION: Structured changelog entries documenting version history including state machine breaking changes, improvements, bug fixes and dependency updates\nSOURCE: https://github.com/evmos/evmos/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Improvements\n\n- (deps) [#839](https://github.com/evmos/evmos/pull/839) Bump ibc-go to [`v3.2.0`](https://github.com/cosmos/ibc-go/releases/tag/v3.2.0) and Cosmos SDK to [`v0.45.7`](https://github.com/cosmos/cosmos-sdk/releases/tag/v0.45.7).\n- (build) [#725](https://github.com/evmos/evmos/pull/725) Migrate Protobuf code generator to [Protobuf Workspaces](https://docs.buf.build/reference/workspaces).\n\n### Bug Fixes\n\n- (build) [#856](https://github.com/evmos/evmos/pull/856) Update docker base image to use golang:1.18.5-bullseye and expose other relevant ports.\n```\n\n----------------------------------------\n\nTITLE: Custom EIP Activators Definition\nDESCRIPTION: Example showing how to define custom EIP activators that can be enabled to modify opcode behavior.\nSOURCE: https://github.com/evmos/evmos/blob/main/app/eips/README.md#2025-04-22_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// Activate custom EIPs: 0000, 0001, 0002, etc\nevmosActivators = map[int]func(*vm.JumpTable){\n\t\"evmos_0\": eips.Enable0000,\n\t\"evmos_1\": eips.Enable0001,\n\t\"evmos_2\": eips.Enable0002,\n}\n```"
  }
]