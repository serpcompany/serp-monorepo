[
  {
    "owner": "hmans",
    "repo": "miniplex",
    "content": "TITLE: Implementing Basic ECS Game Logic in TypeScript\nDESCRIPTION: Demonstrates core ECS concepts including entity definition, world creation, queries, and systems implementation. Shows how to define entity types, create worlds, add entities, and implement game systems for movement, health, and poison effects.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* Define an entity type */\ntype Entity = {\n  position: { x: number; y: number }\n  velocity?: { x: number; y: number }\n  health?: {\n    current: number\n    max: number\n  }\n  poisoned?: true\n}\n\n/* Create a world with entities of that type */\nconst world = new World<Entity>()\n\n/* Create an entity */\nconst player = world.add({\n  position: { x: 0, y: 0 },\n  velocity: { x: 0, y: 0 },\n  health: { current: 100, max: 100 }\n})\n\n/* Create another entity */\nconst enemy = world.add({\n  position: { x: 10, y: 10 },\n  velocity: { x: 0, y: 0 },\n  health: { current: 100, max: 100 }\n})\n\n/* Create some queries: */\nconst queries = {\n  moving: world.with(\"position\", \"velocity\"),\n  health: world.with(\"health\"),\n  poisoned: queries.health.with(\"poisoned\")\n}\n\n/* Create functions that perform actions on entities: */\nfunction damage({ health }: With<Entity, \"health\">, amount: number) {\n  health.current -= amount\n}\n\nfunction poison(entity: With<Entity, \"poisoned\">) {\n  world.addComponent(entity, \"poisoned\", true)\n}\n\n/* Create a bunch of systems: */\nfunction moveSystem() {\n  for (const { position, velocity } of queries.moving) {\n    position.x += velocity.x\n    position.y += velocity.y\n  }\n}\n\nfunction poisonSystem() {\n  for (const { health, poisoned } of queries.poisoned) {\n    health.current -= 1\n  }\n}\n\nfunction healthSystem() {\n  for (const entity of queries.health) {\n    if (entity.health.current <= 0) {\n      world.remove(entity)\n    }\n  }\n}\n\n/* React to entities appearing/disappearing in queries: */\nqueries.poisoned.onEntityAdded.subscribe((entity) => {\n  console.log(\"Poisoned:\", entity)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Entities and Creating a World in TypeScript\nDESCRIPTION: Demonstrates how to define an entity type with TypeScript, create a world, add entities, define queries, and implement systems for managing entity behavior in a game.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/* Define an entity type */\ntype Entity = {\n  position: { x: number; y: number }\n  velocity?: { x: number; y: number }\n  health?: {\n    current: number\n    max: number\n  }\n  poisoned?: true\n}\n\n/* Create a world with entities of that type */\nconst world = new World<Entity>()\n\n/* Create an entity */\nconst player = world.add({\n  position: { x: 0, y: 0 },\n  velocity: { x: 0, y: 0 },\n  health: { current: 100, max: 100 }\n})\n\n/* Create another entity */\nconst enemy = world.add({\n  position: { x: 10, y: 10 },\n  velocity: { x: 0, y: 0 },\n  health: { current: 100, max: 100 }\n})\n\n/* Create some queries: */\nconst queries = {\n  moving: world.with(\"position\", \"velocity\"),\n  health: world.with(\"health\"),\n  poisoned: queries.health.with(\"poisoned\")\n}\n\n/* Create functions that perform actions on entities: */\nfunction damage({ health }: With<Entity, \"health\">, amount: number) {\n  health.current -= amount\n}\n\nfunction poison(entity: With<Entity, \"poisoned\">) {\n  world.addComponent(entity, \"poisoned\", true)\n}\n\n/* Create a bunch of systems: */\nfunction moveSystem() {\n  for (const { position, velocity } of queries.moving) {\n    position.x += velocity.x\n    position.y += velocity.y\n  }\n}\n\nfunction poisonSystem() {\n  for (const { health, poisoned } of queries.poisoned) {\n    health.current -= 1\n  }\n}\n\nfunction healthSystem() {\n  for (const entity of queries.health) {\n    if (entity.health.current <= 0) {\n      world.remove(entity)\n    }\n  }\n}\n\n/* React to entities appearing/disappearing in queries: */\nqueries.poisoned.onEntityAdded.subscribe((entity) => {\n  console.log(\"Poisoned:\", entity)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating World and Type Definitions in TypeScript\nDESCRIPTION: Shows how to create a typed Miniplex world and define entity types using TypeScript interfaces. Demonstrates basic world initialization and entity creation with type safety.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { World } from \"miniplex\"\n\ntype Entity = {\n  position: { x: number; y: number; z: number }\n  velocity?: { x: number; y: number; z: number }\n  health?: number\n  paused?: true\n}\n\nconst world = new World<Entity>()\n\nconst entity = world.add({ position: { x: 0, y: 0, z: 0 } })\n```\n\n----------------------------------------\n\nTITLE: Recommended Entity Iteration Patterns in Miniplex\nDESCRIPTION: Shows the recommended way to iterate over entities in a query using 'for...of' loops, compared to less optimal alternatives. The 'for...of' approach iterates in reverse order, allowing safe entity removal during iteration.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst withHealth = world.with(\"health\")\n\n/* ✅ Recommended: */\nfor (const entity of withHealth) {\n  if (entity.health <= 0) {\n    world.remove(entity)\n  }\n}\n\n/* ⛔️ Avoid: */\nfor (const entity of withHealth.entities) {\n  if (entity.health <= 0) {\n    world.remove(entity)\n  }\n}\n\n/* ⛔️ Especially avoid: */\nwithHealth.entities.forEach((entity) => {\n  if (entity.health <= 0) {\n    world.remove(entity)\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing a Movement System in Miniplex\nDESCRIPTION: Demonstrates how to create a movement system that iterates through all entities with position and velocity components. The system updates each entity's position based on its velocity using object destructuring for cleaner code.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction movementSystem() {\n  for (const { position, velocity } of movingEntities) {\n    position.x += velocity.x\n    position.y += velocity.y\n    position.z += velocity.z\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Movement System in Miniplex (TypeScript)\nDESCRIPTION: Shows how to create a system that updates entity positions based on their velocities using a query and a for...of loop.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nfunction movementSystem() {\n  for (const { position, velocity } of movingEntities) {\n    position.x += velocity.x\n    position.y += velocity.y\n    position.z += velocity.z\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Component-Based Alternative to Value Queries in Miniplex\nDESCRIPTION: Shows a more efficient alternative to 'where' queries by using additional components to mark entity states. This approach adds 'damaged' and 'dead' components based on health values rather than using predicates.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst damagedEntities = world.with(\"health\", \"damaged\")\n\nconst deadEntities = world.with(\"health\", \"dead\")\n\nfunction damageEntity(entity: With<Entity, \"health\">, amount: number) {\n  entity.health.current -= amount\n\n  if (entity.health.current < entity.health.max) {\n    world.addComponent(entity, \"damaged\")\n  }\n\n  if (entity.health.current <= 0) {\n    world.addComponent(entity, \"dead\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Entities in TypeScript with Miniplex\nDESCRIPTION: Shows how to define a TypeScript type for entities with various components and how to provide this type to the World constructor for full type support.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { World } from \"miniplex\"\n\ntype Entity = {\n  position: { x: number; y: number; z: number }\n  velocity?: { x: number; y: number; z: number }\n  health?: number\n  paused?: true\n}\n\nconst world = new World<Entity>()\n```\n\n----------------------------------------\n\nTITLE: Entity Creation and Removal in Miniplex 2.0\nDESCRIPTION: Examples of adding entities to a world, adding components to entities, and removing entities using the simplified API introduced in Miniplex 2.0. The world.add method replaces createEntity and returns the correctly typed entity.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst entity = world.add({ position: { x: 0, y: 0 } })\nworld.addComponent(entity, \"velocity\", { x: 0, y: 0 })\nworld.remove(entity)\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate Queries with 'where' in Miniplex\nDESCRIPTION: Shows how to use the 'where' method to create queries based on component values rather than just component presence. These examples filter entities based on health values with custom predicates.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst damagedEntities = world\n  .with(\"health\")\n  .where(({ health }) => health.current < health.max)\n\nconst deadEntities = world.with(\"health\").where(({ health }) => health <= 0)\n```\n\n----------------------------------------\n\nTITLE: Creating Component Queries in Miniplex\nDESCRIPTION: Shows how to create a query that selects entities with specific components. This example fetches all entities that have both position and velocity components, which is useful for implementing movement systems.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/* Get all entities with position and velocity */\nconst movingEntities = world.with(\"position\", \"velocity\")\n```\n\n----------------------------------------\n\nTITLE: Using Predicate Queries with 'where' in Miniplex (TypeScript)\nDESCRIPTION: Demonstrates how to use the 'where' method to create queries based on component values and how to reindex entities when using such queries.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst damagedEntities = world\n  .with(\"health\")\n  .where(({ health }) => health.current < health.max)\n\nconst deadEntities = world.with(\"health\").where(({ health }) => health <= 0)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nfunction damageEntity(entity: With<Entity, \"health\">, amount: number) {\n  entity.health.current -= amount\n  world.reindex(entity)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Component Queries in Miniplex\nDESCRIPTION: Shows how to create more complex queries by chaining the 'with' and 'without' methods. This example gets entities that have position and velocity components but don't have the paused component.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst movingEntities = world.with(\"position\", \"velocity\").without(\"paused\")\n```\n\n----------------------------------------\n\nTITLE: Creating Predicate-Based Queries in Miniplex 2.0\nDESCRIPTION: Example of using the new 'where' method to create custom queries based on arbitrary conditions. Entities matching these queries need to be reindexed when their relevant properties change to keep the query results up to date.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst almostDead = world.where((entity) => entity.health < 10)\n```\n\n----------------------------------------\n\nTITLE: Implementing ECS Systems with React Hooks\nDESCRIPTION: Demonstrates how to implement ECS systems using React hooks and react-three-fiber's useFrame.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEntities } from \"miniplex-react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport { ECS } from \"./state\"\n\nconst movingEntities = ECS.world.with(\"position\", \"velocity\")\n\nconst MovementSystem = () => {\n  useFrame((_, dt) => {\n    for (const entity of movingEntities) {\n      entity.position.x += entity.velocity.x * dt\n      entity.position.y += entity.velocity.y * dt\n      entity.position.z += entity.velocity.z * dt\n    }\n  })\n\n  return null\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Entity Addition Events in Miniplex (TypeScript)\nDESCRIPTION: Shows how to use the onEntityAdded event to react when new entities are added to the world or a specific query.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nworld.onEntityAdded.subscribe((entity) => {\n  console.log(\"A new entity has been spawned:\", entity)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst withHealth = world.with(\"health\")\n\nwithHealth.onEntityAdded.subscribe((entity) => {\n  entity.health.current = entity.health.max\n})\n```\n\n----------------------------------------\n\nTITLE: Query Reuse Patterns in Miniplex\nDESCRIPTION: Demonstrates efficient query reuse versus inefficient recreation of queries. Reusing a query instance avoids the overhead of checking for existing queries with the same attributes each time a system runs.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n/* ✅ Recommended: */\nconst movingEntities = world.with(\"position\", \"velocity\")\n\nfunction movementSystem() {\n  for (const { position, velocity } of movingEntities) {\n    position.x += velocity.x\n    position.y += velocity.y\n    position.z += velocity.z\n  }\n}\n\n/* ⛔️ Avoid: */\nfunction movementSystem(world) {\n  /* This will work, but now the world needs to check if a query for \"position\" and \"velocity\" already exists every time this function is called, which is pure overhead. */\n  for (const { position, velocity } of world.with(\"position\", \"velocity\")) {\n    position.x += velocity.x\n    position.y += velocity.y\n    position.z += velocity.z\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Entities in Miniplex\nDESCRIPTION: Shows how to add a new entity with a position component to a Miniplex world using the add method.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = world.add({ position: { x: 0, y: 0, z: 0 } })\n```\n\n----------------------------------------\n\nTITLE: Chaining Query Methods in Miniplex 2.0\nDESCRIPTION: Example of chaining multiple query methods together to create complex entity filters that combine component presence, absence, and custom conditions.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nworld\n  .with(\"position\", \"velocity\")\n  .without(\"dead\")\n  .where((entity) => entity.health < 10)\n```\n\n----------------------------------------\n\nTITLE: Alternative Approach to Entity State Management in Miniplex (TypeScript)\nDESCRIPTION: Shows an alternative way to manage entity states using additional components instead of value-based queries.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst damagedEntities = world.with(\"health\", \"damaged\")\n\nconst deadEntities = world.with(\"health\", \"dead\")\n\nfunction damageEntity(entity: With<Entity, \"health\">, amount: number) {\n  entity.health.current -= amount\n\n  if (entity.health.current < entity.health.max) {\n    world.addComponent(entity, \"damaged\")\n  }\n\n  if (entity.health.current <= 0) {\n    world.addComponent(entity, \"dead\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Enemies with Declarative and Imperative Code in React ECS\nDESCRIPTION: Demonstrates co-locating an <Enemies> component that renders active enemies alongside a spawnEnemy function that adds new enemies to the world. This pattern separates UI rendering from state mutation.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst enemies = ECS.world.with(\"enemy\")\n\nexport const Enemies = () => (\n  <ECS.Entities in={enemies}>\n    <ECS.Component name=\"three\">\n      <EnemyShipModel />\n    </ECS.Component>\n  </ECS.Entities>\n)\n\nexport const spawnEnemy = () =>\n  ECS.world.add({\n    position: { x: 0, y: 0, z: 0 },\n    velocity: { x: 0, y: 0, z: 0 },\n    health: 100,\n    enemy: true\n  })\n```\n\n----------------------------------------\n\nTITLE: Type-Narrowed Queries in Miniplex 2.0\nDESCRIPTION: Example of specifying a type to narrow query results in TypeScript, providing better type safety and autocompletion for entity properties.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst player = world.with<Player>(\"player\")\n```\n\n----------------------------------------\n\nTITLE: Handling Query-Specific Entity Addition in Miniplex\nDESCRIPTION: Shows how to run initialization code when entities are added to specific queries. This example sets an entity's current health to maximum when it first appears in the health query.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst withHealth = world.with(\"health\")\n\nwithHealth.onEntityAdded.subscribe((entity) => {\n  entity.health.current = entity.health.max\n})\n```\n\n----------------------------------------\n\nTITLE: Composing Types with Strict and With in Miniplex 2.0\nDESCRIPTION: Example of using the new Strict and With type utilities to compose entity types in TypeScript, ensuring that entities have the required components with proper typing.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntype Entity = {\n  position: { x: number; y: number }\n  velocity: { x: number; y: number }\n}\n\ntype Player = Strict<With<Entity, \"position\" | \"velocity\">>\n\nconst player = world.archetype<Player>(\"player\")\n```\n\n----------------------------------------\n\nTITLE: Querying Entities with Specific Components in Miniplex (TypeScript)\nDESCRIPTION: Shows how to create a query to fetch entities with both 'position' and 'velocity' components using the World instance's with method.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/* Get all entities with position and velocity */\nconst movingEntities = world.with(\"position\", \"velocity\")\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Queries in Miniplex 2.0\nDESCRIPTION: Example of iterating over entities that match a query using the new direct iteration syntax. This is the recommended approach as it's efficient and iterates in reverse order, making it safe to modify entities during iteration.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst moving = world.with(\"position\", \"velocity\")\n\nfor (const { position, velocity } of moving) {\n  position.x += velocity.x\n  position.y += velocity.y\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Components to Entities in Miniplex\nDESCRIPTION: Demonstrates how to add a velocity component to an existing entity using the World.addComponent method. This method requires the entity object as the first parameter, followed by the component name and its value.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nworld.addComponent(entity, \"velocity\", { x: 10, y: 0, z: 0 })\n```\n\n----------------------------------------\n\nTITLE: Creating Entities with Component Factories in JavaScript\nDESCRIPTION: Demonstrates how to use component factory functions with the updated createEntity method, which now supports multiple partial entity arguments.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/* Provide a bunch of component factories */\nconst position = (x = 0, y = 0) => ({ position: { x, y } })\nconst velocity = (x = 0, y = 0) => ({ velocity: { x, y } })\nconst health = (initial) => ({\n  health: { max: initial, current: initial }\n})\n\nconst world = new World()\n\nconst entity = world.createEntity(\n  position(0, 0),\n  velocity(5, 7),\n  health(1000)\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Entities and Components in React TSX\nDESCRIPTION: Uses ECS.Entity and ECS.Component to declare entities and add components in a React component.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ECS } from \"./state\"\n\nconst Player = () => (\n  <ECS.Entity>\n    <ECS.Component name=\"position\" data={{ x: 0, y: 0, z: 0 }} />\n    <ECS.Component name=\"health\" data={100} />\n  </ECS.Entity>\n)\n```\n\n----------------------------------------\n\nTITLE: Using Predicate-Based Iterators in Miniplex 2.0\nDESCRIPTION: Example of using the 'where' method to create a temporary iterator for filtering entities on the fly without creating persistent queries or archetypes.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nfor (const entity of world.where((entity) => entity.health < 10)) {\n  // Do something\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Entity Lists with ECS.Entities in React TSX\nDESCRIPTION: Demonstrates the use of ECS.Entities component to render lists of entities based on a Miniplex query.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ECS } from \"./state\"\nimport { AsteroidModel } from \"./models\"\n\nconst asterois = ECS.world.with(\"isAsteroid\")\n\nconst Asteroids = () => (\n  <ECS.Entities in={asteroids}>\n    <ECS.Component name=\"three\">\n      <AsteroidModel />\n    </ECS.Component>\n  </ECS.Entities>\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a World in JavaScript/TypeScript\nDESCRIPTION: Demonstrates how to import the World class from Miniplex and create a new world instance for entity management.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { World } from \"miniplex\"\n\nconst world = new World()\n```\n\n----------------------------------------\n\nTITLE: Using useEntities Hook for React Side Effects\nDESCRIPTION: Demonstrates the useEntities hook to react to changes in entity queries and implement side effects.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst cameraTargets = ECS.world.with(\"cameraTarget\", \"object3d\")\n\nconst MyCamera = () => {\n  const camera = useRef<PerspectiveCamera>()\n\n  /* Grab the first entity that matches the query */\n  const [cameraTarget] = useEntities(cameraTargets)\n\n  /* Run a side effect when the camera target changes */\n  useEffect(() => {\n    if (!camera.current) return\n    if (!cameraTarget) return\n\n    camera.current.lookAt(cameraTarget.object3d.position)\n  }, [cameraTarget])\n\n  return <PerspectiveCamera ref={camera} makeDefault />\n}\n```\n\n----------------------------------------\n\nTITLE: Using Queue Functionality in Miniplex 2.0\nDESCRIPTION: Example of using the new standalone queue object that replaces the queuing functionality previously built into the World class. This allows scheduling operations and executing them later.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { queue } from \"miniplex\"\n\nqueue(() => {\n  // Do something\n})\n\n/* Later */\nqueue.flush()\n```\n\n----------------------------------------\n\nTITLE: Reindexing Entities After Value Changes in Miniplex\nDESCRIPTION: Demonstrates how to use the reindex function to update query results after changing component values. This example reindexes an entity after modifying its health, which is necessary for 'where' queries to update properly.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nfunction damageEntity(entity: With<Entity, \"health\">, amount: number) {\n  entity.health.current -= amount\n  world.reindex(entity)\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Archetypes in JavaScript\nDESCRIPTION: Demonstrates the new iterator syntax for archetypes, allowing direct iteration over entities matching specific components.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst withVelocity = world.archetype(\"velocity\")\n\nfor (const { velocity } of withVelocity) {\n  /* ... */\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Entity Addition Events in Miniplex\nDESCRIPTION: Demonstrates how to use the onEntityAdded event to be notified when new entities are added to the world. This example logs a message whenever a new entity is spawned in the world.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nworld.onEntityAdded.subscribe((entity) => {\n  console.log(\"A new entity has been spawned:\", entity)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Render Props with ECS.Entities in React TSX\nDESCRIPTION: Shows how to use render props with ECS.Entities to access entity data and perform per-entity operations.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst enemies = ECS.world.with(\"enemy\")\n\nconst EnemyShips = () => (\n  <ECS.Entities in={enemies}>\n    {(entity) => {\n      const health = Math.random() * 1000\n\n      return (\n        <ECS.Entity entity={entity}>\n          <ECS.Component name=\"health\" data={health} />\n\n          <ECS.Component name=\"three\">\n            <EnemyShipModel />\n          </ECS.Component>\n        </ECS.Entity>\n      )\n    }}\n  </ECS.Entities>\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Game State with Enemy Spawning in React ECS\nDESCRIPTION: Shows how to use the spawnEnemy function within a React component's useEffect hook to initialize the game state with multiple enemies. Also demonstrates proper cleanup by clearing the world when unmounting.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { spawnEnemy } from \"./enemies\"\n\nexport const GameState = () => {\n  useEffect(() => {\n    /* Initialize game state */\n    for (let i = 0; i < 10; i++) {\n      spawnEnemy()\n    }\n\n    /* When unmounting, reset game state */\n    return () => {\n      ECS.world.clear()\n    }\n  }, [])\n}\n```\n\n----------------------------------------\n\nTITLE: Using ArchetypeEntities Component for Optimized Rendering\nDESCRIPTION: Demonstrates using the ArchetypeEntities component introduced in version 1.0.0, which provides better rendering performance by not causing parent components to re-render.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/CHANGELOG.md#2025-04-11_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  /* This component will not rerender */\n  return <ArchetypeEntities archetype=\"my-archetype\" />\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Entities with Specific Components\nDESCRIPTION: Demonstrates the 'without' query method that returns entities missing specific components. This example shows how to get all active entities by excluding those with a 'paused' component.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = world.without(\"paused\")\n```\n\n----------------------------------------\n\nTITLE: Installing Miniplex Package\nDESCRIPTION: Shows how to install the Miniplex package using different package managers including npm, yarn, and pnpm.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm add miniplex\nyarn add miniplex\npnpm add miniplex\n```\n\n----------------------------------------\n\nTITLE: Using Children Prop with Entities Component in React ECS\nDESCRIPTION: Demonstrates passing a render function as the children prop to the <Entities> component. This pattern allows for deferring the rendering of entities to a separate function for better component organization.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst enemies = ECS.world.with(\"enemy\")\n\nexport const Enemies = () => <ECS.Entities in={enemies} children={Enemy} />\n\nexport const Enemy = (entity) => (\n  <ECS.Entity entity={entity}>\n    <ECS.Component name=\"three\">\n      <EnemyShipModel />\n    </ECS.Component>\n  </ECS.Entity>\n)\n```\n\n----------------------------------------\n\nTITLE: Concise Rendering Pattern for Entity Lists in React ECS\nDESCRIPTION: A simplified syntax that uses the fact that React components are functions, allowing direct passing of the Enemy component to the children prop without additional wrapping.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Enemies = () => <ECS.Entities in={enemies}>{Enemy}</ECS.Entities>\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Queries in Miniplex 2.0\nDESCRIPTION: Examples of creating queries using the new 'with' and 'without' methods that filter entities based on component presence or absence.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst moving = world.with(\"position\", \"velocity\")\nconst alive = world.without(\"dead\")\n```\n\n----------------------------------------\n\nTITLE: Correct and Incorrect Component Mutation in Miniplex\nDESCRIPTION: Illustrates the proper and improper ways to modify entity components. Direct component value mutation is acceptable, but adding new components directly (bypassing addComponent) should be avoided.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n/* ✅ This is fine: */\nconst entity = world.add({ position: { x: 0, y: 0, z: 0 } })\nentity.position.x = 10\n\n/* ⛔️ This is not: */\nconst entity = world.add({ position: { x: 0, y: 0, z: 0 } })\nentity.velocity = { x: 10, y: 0, z: 0 }\n```\n\n----------------------------------------\n\nTITLE: Using Entities Component with Queries in React\nDESCRIPTION: Demonstrates how to use the Entities component in version 2.0, which can accept a query, world, or array of entities as its 'in' prop and will automatically re-render when needed.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/CHANGELOG.md#2025-04-11_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Entities in={world.with(\"asteroid\")}>{/* ... */}</Entities>\n```\n\n----------------------------------------\n\nTITLE: Accessing Singleton Entities in React with TypeScript\nDESCRIPTION: Shows how to use the new 'first' getter on archetypes to access singleton entities like players or cameras in a React component.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const CameraRigSystem: FC = () => {\n  const player = ECS.useArchetype(\"isPlayer\").first\n  const camera = ECS.useArchetype(\"isCamera\").first\n\n  /* Do things with player and camera */\n}\n```\n\n----------------------------------------\n\nTITLE: Enhancing Existing Entities in React TSX\nDESCRIPTION: Shows how to use ECS.Entity to represent and enhance previously created entities.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ECS } from \"./state\"\n\nconst Game = () => {\n  const [player] = useState(() =>\n    ECS.world.add({\n      position: { x: 0, y: 0, z: 0 },\n      health: 100\n    })\n  )\n\n  return (\n    <>\n      {/* All sorts of stuff */}\n      <RenderPlayer player={player} />\n      {/* More stuff */}\n    </>\n  )\n}\n\nconst RenderPlayer = ({ player }) => (\n  <ECS.Entity entity={player}>\n    <ECS.Component name=\"three\">\n      <mesh>\n        <sphereGeometry />\n        <meshStandardMaterial color=\"hotpink\" />\n      </mesh>\n    </ECS.Component>\n  </ECS.Entity>\n)\n```\n\n----------------------------------------\n\nTITLE: Removing Entities from a Miniplex World\nDESCRIPTION: Shows how to completely remove an entity from the world. This immediately removes the entity from the Miniplex world and all existing queries, though it doesn't destroy the JavaScript object itself.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nworld.remove(entity)\n```\n\n----------------------------------------\n\nTITLE: Adding Components to Entities in Miniplex (TypeScript)\nDESCRIPTION: Demonstrates how to add a 'velocity' component to an existing entity using the World instance's addComponent method.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nworld.addComponent(entity, \"velocity\", { x: 10, y: 0, z: 0 })\n```\n\n----------------------------------------\n\nTITLE: Creating React API for Miniplex World in TypeScript\nDESCRIPTION: Sets up a Miniplex world and creates React bindings using createReactAPI function.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/* state.ts */\nimport { World } from \"miniplex\"\nimport createReactAPI from \"miniplex-react\"\n\n/* Our entity type */\nexport type Entity = {\n  /* ... */\n}\n\n/* Create a Miniplex world that holds our entities */\nconst world = new World<Entity>()\n\n/* Create and export React bindings */\nexport const ECS = createReactAPI(world)\n```\n\n----------------------------------------\n\nTITLE: Adding Components with Factories in TypeScript\nDESCRIPTION: Shows how to use component factories with the addComponent method, which now expects a partial entity instead of name and value.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst position = (x: number = 0, y: number = 0) => ({ position: { x, y } })\nconst health = (amount: number) => ({\n  health: { max: amount, current: amount }\n})\n\nworld.addComponent(entity, { ...position(), ...health(100) })\n```\n\n----------------------------------------\n\nTITLE: Updating Component Addition in TypeScript\nDESCRIPTION: Demonstrates the new simplified signature for addComponent, which now accepts an entity, a component name, and the component value directly. The previous API is available as extendEntity but marked as deprecated.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n/* Before */\nworld.addComponent(entity, { position: { x: 0, y: 0 } })\n\n/* After */\nworld.addComponent(entity, \"position\", { x: 0, y: 0 })\n```\n\n----------------------------------------\n\nTITLE: Alternative Syntax for Rendering Entity Lists in React ECS\nDESCRIPTION: Shows an equivalent way to render entities using the render prop pattern, where the entity is passed to the Enemy component via props spreading.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nexport const Enemies = () => (\n  <ECS.Entities in={enemies}>{(entity) => <Enemy {...entity} />}</ECS.Entities>\n)\n```\n\n----------------------------------------\n\nTITLE: Looking Up Entities by ID in Miniplex\nDESCRIPTION: Shows how to retrieve an entity using its numeric ID. This complements the ID generation feature and allows entities to be found after storing just their IDs.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = world.entity(id)\n```\n\n----------------------------------------\n\nTITLE: Generating and Using Entity IDs in Miniplex\nDESCRIPTION: Demonstrates how to generate numeric IDs for entities and later look them up by ID. This is useful when integrating with non-Miniplex systems that expect numeric identifiers.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = world.add({ count: 10 })\nconst id = world.id(entity)\n```\n\n----------------------------------------\n\nTITLE: Querying Entities without Specific Components in Miniplex (TypeScript)\nDESCRIPTION: Demonstrates how to use the 'without' method to query entities that do not have specific components, and how to nest queries.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst active = world.without(\"paused\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst movingEntities = world.with(\"position\", \"velocity\").without(\"paused\")\n```\n\n----------------------------------------\n\nTITLE: Using Entities Component with Static Arrays\nDESCRIPTION: Shows how to use the Entities component with a plain array of entities instead of a query, which won't automatically update when entities change.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Entities in={[entity1, entity2]}>{/* ... */}</Entities>\n```\n\n----------------------------------------\n\nTITLE: Capturing Object Refs in Components using React TSX\nDESCRIPTION: Demonstrates how to use ECS.Component to capture React refs as component data.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ECS } from \"./state\"\n\nconst Player = () => (\n  <ECS.Entity>\n    <ECS.Component name=\"position\" data={{ x: 0, y: 0, z: 0 }} />\n    <ECS.Component name=\"health\" data={100} />\n    <ECS.Component name=\"three\">\n      <mesh>\n        <sphereGeometry />\n        <meshStandardMaterial color=\"hotpink\" />\n      </mesh>\n    </ECS.Component>\n  </ECS.Entity>\n)\n```\n\n----------------------------------------\n\nTITLE: Importing and Initializing Miniplex-React in version 2.0\nDESCRIPTION: Shows the updated import and initialization pattern for miniplex-react 2.0. It requires creating a World instance first and then passing it to createReactAPI.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/CHANGELOG.md#2025-04-11_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { World } from \"miniplex\"\nimport createReactAPI from \"miniplex-react\" // !\n\n/* It now expects a world as its argument, so you need to create one first: */\nconst world = new World()\nconst ECS = createReactAPI(world)\n```\n\n----------------------------------------\n\nTITLE: Using ArchetypeEntities with Multiple Component Types\nDESCRIPTION: Shows how to use the ArchetypeEntities component with an array of component names to create a more specific query.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/CHANGELOG.md#2025-04-11_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst EnemyShips = () => {\n  return <ArchetypeEntities archetype={[\"ship\", \"enemy\"]} />\n}\n```\n\n----------------------------------------\n\nTITLE: Migration from useArchetype to useEntities Hook\nDESCRIPTION: Illustrates the migration from the deprecated useArchetype hook to the new global useEntities hook introduced in version 2.0.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/CHANGELOG.md#2025-04-11_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/* Before */\nconst entities = useArchetype(\"position\", \"velocity\")\n\n/* Now */\nconst entities = useEntities(world.with(\"position\", \"velocity\"))\n```\n\n----------------------------------------\n\nTITLE: Previous Pattern Using useArchetype with Entities Component\nDESCRIPTION: Shows the previous pattern for rendering entities from an archetype, which would cause the parent component to re-render when entities changed.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/CHANGELOG.md#2025-04-11_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyComponent = () => {\n  const { entities } = useArchetype(\"my-archetype\")\n  /* This component will now re-render every time the archetype is updated */\n  return <Entities entities={entities} />\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Entities from the World in Miniplex (TypeScript)\nDESCRIPTION: Demonstrates how to remove an entity from the Miniplex world using the World instance's remove method.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nworld.remove(entity)\n```\n\n----------------------------------------\n\nTITLE: Generating and Using Entity IDs in Miniplex (TypeScript)\nDESCRIPTION: Demonstrates how to generate numerical IDs for entities and use them to look up entities in the world.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = world.add({ count: 10 })\nconst id = world.id(entity)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst entity = world.entity(id)\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Creation with Composition in JavaScript\nDESCRIPTION: Shows how to update entity creation code to use object spread for composition, following the breaking change that simplified the createEntity API to accept only a single argument.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst entity = createEntity({\n  ...position(0, 0),\n  ...velocity(1, 1),\n  ...health(100)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing miniplex and miniplex-react packages\nDESCRIPTION: Commands for installing miniplex and miniplex-react using different package managers.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/react/README.md#2025-04-11_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install miniplex miniplex-react\nyarn add miniplex miniplex-react\npnpm add miniplex miniplex-react\n```\n\n----------------------------------------\n\nTITLE: Installing Miniplex with Package Managers\nDESCRIPTION: Shows the commands for installing the Miniplex package using different JavaScript package managers including npm, yarn, and pnpm.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm add miniplex\nyarn add miniplex\npnpm add miniplex\n```\n\n----------------------------------------\n\nTITLE: MIT License Text for Miniplex\nDESCRIPTION: The standard MIT license text applied to the Miniplex project. It grants permission to use, modify, and distribute the software without restriction, while including a copyright notice and disclaiming warranties.\nSOURCE: https://github.com/hmans/miniplex/blob/main/README.md#2025-04-11_snippet_12\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright (c) 2023 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Entities from Queries in Miniplex 2.0\nDESCRIPTION: Example of using array destructuring to fetch the first entity from a query that's expected to contain only one entity, such as a player entity.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/CHANGELOG.md#2025-04-11_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst [player] = world.with(\"player\")\n```\n\n----------------------------------------\n\nTITLE: MIT License Declaration\nDESCRIPTION: Standard MIT license text granting permission to use, modify and distribute the software while disclaiming warranties and limiting liability. Includes copyright notice for Hendrik Mans from 2023.\nSOURCE: https://github.com/hmans/miniplex/blob/main/packages/core/README.md#2025-04-11_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nCopyright (c) 2023 Hendrik Mans\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```"
  }
]