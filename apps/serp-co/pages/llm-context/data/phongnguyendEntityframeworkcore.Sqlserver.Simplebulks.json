[
  {
    "owner": "phongnguyend",
    "repo": "entityframeworkcore.sqlserver.simplebulks",
    "content": "TITLE: DbContext Bulk Operations Using Lambda Expressions\nDESCRIPTION: Demonstrates bulk insert, update, merge, and delete operations using DbContext extensions with lambda expressions for column selection.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Insert all columns\ndbct.BulkInsert(rows);\ndbct.BulkInsert(compositeKeyRows);\n\n// Insert selected columns only\ndbct.BulkInsert(rows,\n    row => new { row.Column1, row.Column2, row.Column3 });\ndbct.BulkInsert(compositeKeyRows,\n    row => new { row.Id1, row.Id2, row.Column1, row.Column2, row.Column3 });\n\ndbct.BulkUpdate(rows,\n    row => new { row.Column3, row.Column2 });\ndbct.BulkUpdate(compositeKeyRows,\n    row => new { row.Column3, row.Column2 });\n\ndbct.BulkMerge(rows,\n    row => row.Id,\n    row => new { row.Column1, row.Column2 },\n    row => new { row.Column1, row.Column2, row.Column3 });\ndbct.BulkMerge(compositeKeyRows,\n    row => new { row.Id1, row.Id2 },\n    row => new { row.Column1, row.Column2, row.Column3 },\n    row => new { row.Id1, row.Id2, row.Column1, row.Column2, row.Column3 });\n                        \ndbct.BulkDelete(rows);\ndbct.BulkDelete(compositeKeyRows);\n```\n\n----------------------------------------\n\nTITLE: Bulk Operations Using Builder Pattern\nDESCRIPTION: Demonstrates the builder pattern approach for bulk operations, allowing mixing of dynamic and lambda expression approaches.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nnew BulkInsertBuilder<Row>(dbct.GetSqlConnection())\n\t.WithColumns(row => new { row.Column1, row.Column2, row.Column3 })\n\t// or .WithColumns([ \"Column1\", \"Column2\", \"Column3\" ])\n\t.WithOutputId(row => row.Id)\n\t// or .WithOutputId(\"Id\")\n\t.ToTable(dbct.GetTableName(typeof(Row)))\n\t// or .ToTable(\"Rows\")\n\t.Execute(rows);\n```\n\n----------------------------------------\n\nTITLE: DbContext Bulk Operations Using Dynamic Strings\nDESCRIPTION: Shows how to perform bulk operations using string arrays to specify columns instead of lambda expressions.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ndbct.BulkUpdate(rows,\n    [ \"Column3\", \"Column2\" ]);\ndbct.BulkUpdate(compositeKeyRows,\n    [ \"Column3\", \"Column2\" ]);\n\ndbct.BulkMerge(rows,\n    \"Id\",\n    [ \"Column1\", \"Column2\" ],\n    [ \"Column1\", \"Column2\", \"Column3\" ]);\ndbct.BulkMerge(compositeKeyRows,\n    [ \"Id1\", \"Id2\" ],\n    [ \"Column1\", \"Column2\", \"Column3\" ],\n    [ \"Id1\", \"Id2\", \"Column1\", \"Column2\", \"Column3\" ]);\n```\n\n----------------------------------------\n\nTITLE: Benchmarking EF Core vs BulkInsert on Single Table Operations\nDESCRIPTION: Benchmark results comparing standard EF Core Insert operations with BulkInsert for single table operations across various row counts (100 to 500,000). The results show BulkInsert performing significantly faster with less memory allocation, especially at higher row counts.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_4\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Configuring Connection String in C#\nDESCRIPTION: Example of setting up the database connection string for the SimpleBulks demo.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprivate const string _connectionString = \"Server=.;Database=SimpleBulks;User Id=xxx;Password=xxx\";\n```\n\n----------------------------------------\n\nTITLE: Benchmarking EF Core vs BulkUpdate Operations\nDESCRIPTION: Performance comparison between standard EF Core Update operations and BulkUpdate across different row counts (100 to 250,000). Results demonstrate that BulkUpdate is significantly faster and more memory-efficient, with the advantage increasing at higher row counts.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_6\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Benchmarking EF Core vs BulkInsert on Multiple Tables Operations\nDESCRIPTION: Benchmark results comparing standard EF Core Insert operations with BulkInsert for multiple related tables (1 parent with 5 child rows) across various row counts (100 to 100,000). BulkInsert shows substantial performance and memory advantages, especially for larger datasets.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Benchmarking EF Core vs BulkDelete Operations\nDESCRIPTION: Performance comparison between standard EF Core Delete operations and BulkDelete across various row counts (100 to 50,000). The benchmark demonstrates that BulkDelete significantly outperforms standard EF Core operations in both speed and memory usage, with greater advantages at higher row counts.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Benchmarking EF Core Upsert vs BulkMerge Operations\nDESCRIPTION: Performance comparison between EF Core's Upsert and custom BulkMerge operations across different row counts. Measures execution time, memory allocation, and garbage collection metrics.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_10\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Benchmarking BulkMerge with DB Generated ID Options\nDESCRIPTION: Performance comparison of BulkMerge operations with and without returning database generated IDs. Shows impact on execution time and memory usage across various data volumes.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Benchmarking Large-Scale BulkUpdate Operations\nDESCRIPTION: Performance metrics for BulkUpdate operations on very large datasets (500,000 and 1,000,000 rows). These benchmarks show how the BulkUpdate method scales to handle extremely large datasets while maintaining reasonable performance and memory usage.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_7\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Benchmarking Large-Scale BulkDelete Operations\nDESCRIPTION: Performance metrics for BulkDelete operations on very large datasets (100,000 to 1,000,000 rows). These benchmarks demonstrate how the BulkDelete method scales to handle massive datasets while maintaining reasonable performance and memory efficiency.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_9\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: BulkMatch Single Column Benchmark Configuration (Small Scale)\nDESCRIPTION: Benchmark configuration for comparing EFCoreSelect, EFCoreBatchSelect, and BulkMatch operations with single column on small to medium datasets (100-100,000 rows).\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_13\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: BulkMatch Multiple Columns Benchmark Configuration (Small Scale)\nDESCRIPTION: Benchmark configuration for comparing EFCoreSelect and BulkMatch operations with multiple columns on small to medium datasets (100-100,000 rows).\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: Large-Scale BulkMerge Performance Metrics\nDESCRIPTION: Extended benchmark results for large datasets (250K-1M rows) comparing BulkMerge operations with and without DB generated IDs. Focuses on memory allocation and execution time at scale.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_12\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: BulkMatch Single Column Benchmark Configuration (Large Scale)\nDESCRIPTION: Benchmark configuration for comparing EFCoreBatchSelect and BulkMatch operations with single column on large datasets (250,000-1,000,000 rows).\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_14\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: BulkMatch Multiple Columns Benchmark Configuration (Large Scale)\nDESCRIPTION: Benchmark configuration for BulkMatch operations with multiple columns on large datasets (250,000-1,000,000 rows), showing performance metrics for extensive data processing.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_16\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```\n\n----------------------------------------\n\nTITLE: TempTable Creation Benchmark Configuration\nDESCRIPTION: Benchmark configuration for measuring performance of TempTable creation operations across various dataset sizes from 100 to 1,000,000 rows, focusing on execution time and memory allocation.\nSOURCE: https://github.com/phongnguyend/EntityFrameworkCore.SqlServer.SimpleBulks/blob/master/README.md#2025-04-16_snippet_17\n\nLANGUAGE: ini\nCODE:\n```\nBenchmarkDotNet=v0.13.2, OS=Windows 10 (10.0.19045.5011)\n11th Gen Intel Core i7-1165G7 2.80GHz, 1 CPU, 8 logical and 4 physical cores\n.NET SDK=8.0.400\n  [Host]     : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n  Job-LGAVYD : .NET 8.0.8 (8.0.824.36612), X64 RyuJIT AVX2\n\nInvocationCount=1  IterationCount=1  UnrollFactor=1  \nWarmupCount=0  \n```"
  }
]