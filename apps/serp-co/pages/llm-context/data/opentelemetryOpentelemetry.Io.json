[
  {
    "owner": "open-telemetry",
    "repo": "opentelemetry.io",
    "content": "TITLE: OpenTelemetry Instrumentation in TypeScript\nDESCRIPTION: Sets up OpenTelemetry instrumentation in TypeScript with console exporters for both traces and metrics. Uses auto-instrumentation to automatically capture spans from Express and other libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport {\n  PeriodicExportingMetricReader,\n  ConsoleMetricExporter,\n} from '@opentelemetry/sdk-metrics';\n\nconst sdk = new NodeSDK({\n  traceExporter: new ConsoleSpanExporter(),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new ConsoleMetricExporter(),\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Setting up Python virtual environment\nDESCRIPTION: Creates a new directory, sets up a Python virtual environment, and activates it.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir otel-getting-started\ncd otel-getting-started\npython3 -m venv venv\nsource ./venv/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Signs in OpenTelemetry Collector Configuration (YAML)\nDESCRIPTION: Example showing how to use literal dollar signs in configuration values by using double dollar signs ($$).\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  prometheus:\n    endpoint: prometheus:8889\n    namespace: $$DataVisualization\n```\n\n----------------------------------------\n\nTITLE: Pulling OpenTelemetry Collector Contrib Docker Image\nDESCRIPTION: Docker command to pull the OpenTelemetry Collector Contrib image, which is a distribution that includes additional components beyond the core collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/quick-start.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull otel/opentelemetry-collector-contrib:{{% param vers %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metric Exporters in OpenTelemetry Java SDK\nDESCRIPTION: Demonstrates configuration of various metric exporters including OTLP HTTP/gRPC, logging, and JSON logging exporters. Shows how to set endpoints, headers, and timeouts for exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.exporter.logging.LoggingMetricExporter;\nimport io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingMetricExporter;\nimport io.opentelemetry.exporter.otlp.http.metrics.OtlpHttpMetricExporter;\nimport io.opentelemetry.exporter.otlp.metrics.OtlpGrpcMetricExporter;\nimport io.opentelemetry.sdk.metrics.export.MetricExporter;\nimport java.time.Duration;\n\npublic class MetricExporterConfig {\n  public static MetricExporter otlpHttpMetricExporter(String endpoint) {\n    return OtlpHttpMetricExporter.builder()\n        .setEndpoint(endpoint)\n        .addHeader(\"api-key\", \"value\")\n        .setTimeout(Duration.ofSeconds(10))\n        .build();\n  }\n\n  public static MetricExporter otlpGrpcMetricExporter(String endpoint) {\n    return OtlpGrpcMetricExporter.builder()\n        .setEndpoint(endpoint)\n        .addHeader(\"api-key\", \"value\")\n        .setTimeout(Duration.ofSeconds(10))\n        .build();\n  }\n\n  public static MetricExporter logginMetricExporter() {\n    return LoggingMetricExporter.create();\n  }\n\n  public static MetricExporter otlpJsonLoggingMetricExporter() {\n    return OtlpJsonLoggingMetricExporter.create();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python Packages\nDESCRIPTION: Commands to install the OpenTelemetry distro package and bootstrap the auto-instrumentation setup\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-distro opentelemetry-exporter-otlp\nopentelemetry-bootstrap -a install\n```\n\n----------------------------------------\n\nTITLE: Implementing Counter in OpenTelemetry Java\nDESCRIPTION: Demonstrates how to create and use a LongCounter to record monotonic (positive) measurements with different attribute combinations. Shows counter creation using builder pattern and recording measurements with and without context/attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\nimport static otel.Util.customContext;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.LongCounter;\nimport io.opentelemetry.api.metrics.Meter;\n\npublic class CounterUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void counterUsage(Meter meter) {\n    // Construct a counter to record measurements that are always positive (monotonically\n    // increasing).\n    LongCounter counter =\n        meter\n            .counterBuilder(\"fully.qualified.counter\")\n            .setDescription(\"A count of produced widgets\")\n            .setUnit(\"{widget}\")\n            // optionally change the type to double\n            // .ofDoubles()\n            .build();\n\n    // Record a measurement with no attributes or context.\n    // Attributes defaults to Attributes.empty(), context to Context.current().\n    counter.add(1L);\n\n    // Record a measurement with attributes, using pre-allocated attributes whenever possible.\n    counter.add(1L, WIDGET_RED_CIRCLE);\n    // Sometimes, attributes must be computed using application context.\n    counter.add(\n        1L, Attributes.of(WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n\n    // Record a measurement with attributes, and context.\n    // Most users will opt to omit the context argument, preferring the default Context.current().\n    counter.add(1L, WIDGET_RED_CIRCLE, customContext());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in JavaScript\nDESCRIPTION: Shows how to set the status of a span in JavaScript based on certain conditions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\n\n// ...\n\ntracer.startActiveSpan('app.doWork', (span) => {\n  for (let i = 0; i <= Math.floor(Math.random() * 40000000); i += 1) {\n    if (i > 10000) {\n      span.setStatus({\n        code: opentelemetry.SpanStatusCode.ERROR,\n        message: 'Error',\n      });\n    }\n  }\n\n  span.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Factory Implementation\nDESCRIPTION: The complete implementation of the connector factory including all necessary imports and component definitions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage exampleconnector\n\nimport (\n    \"context\"\n\n    \"go.opentelemetry.io/collector/component\"\n    \"go.opentelemetry.io/collector/connector\"\n    \"go.opentelemetry.io/collector/consumer\"\n)\n\nconst (\n    defaultVal = \"request.n\"\n    // this is the name used to refer to the connector in the config.yaml\n    typeStr = \"example\"\n)\n\n\n// NewFactory creates a factory for example connector.\nfunc NewFactory() connector.Factory {\n    // OpenTelemetry connector factory to make a factory for connectors\n\n    return connector.NewFactory(\n    typeStr,\n    createDefaultConfig,\n    connector.WithTracesToMetrics(createTracesToMetricsConnector, component.StabilityLevelAlpha))\n}\n\n\nfunc createDefaultConfig() component.Config {\n    return &Config{\n        AttributeName: defaultVal,\n    }\n}\n\n\n// createTracesToMetricsConnector defines the consumer type of the connector\n// We want to consume traces and export metrics, therefore, define nextConsumer as metrics, since consumer is the next component in the pipeline\nfunc createTracesToMetricsConnector(ctx context.Context, params connector.CreateSettings, cfg component.Config, nextConsumer consumer.Metrics) (connector.Traces, error) {\n    c, err := newConnector(params.Logger, cfg)\n    if err != nil {\n        return nil, err\n    }\n    c.metricsConsumer = nextConsumer\n    return c, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceIDRatioBasedSampler in Node.js (TypeScript)\nDESCRIPTION: This snippet shows how to configure the TraceIDRatioBasedSampler in Node.js using TypeScript. It sets up the sampler to collect 10% of traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/sampling.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TraceIdRatioBasedSampler } from '@opentelemetry/sdk-trace-node';\n\nconst samplePercentage = 0.1;\n\nconst sdk = new NodeSDK({\n  // Other SDK configuration parameters go here\n  sampler: new TraceIdRatioBasedSampler(samplePercentage),\n});\n```\n\n----------------------------------------\n\nTITLE: Example App with OpenTelemetry Metrics and Tracing in JavaScript\nDESCRIPTION: JavaScript version of the Express server application that uses OpenTelemetry for metrics and tracing. It implements a simple dice rolling API.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_52\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*app.js*/\nconst { trace, metrics } = require('@opentelemetry/api');\nconst express = require('express');\nconst { rollTheDice } = require('./dice.js');\n\nconst tracer = trace.getTracer('dice-server', '0.1.0');\nconst meter = metrics.getMeter('dice-server', '0.1.0');\n\nconst PORT = parseInt(process.env.PORT || '8080');\nconst app = express();\n\napp.get('/rolldice', (req, res) => {\n  const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;\n  if (isNaN(rolls)) {\n    res\n      .status(400)\n      .send(\"Request parameter 'rolls' is missing or not a number.\");\n    return;\n  }\n  res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Context API Usage in Java\nDESCRIPTION: Example showing how to use OpenTelemetry Context API including creating context keys, storing/retrieving values, context propagation, and wrapping executors and functional interfaces for context propagation. Demonstrates core Context API functionality including current context access, scoped context modification, and context propagation across different execution contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.context.Context;\nimport io.opentelemetry.context.ContextKey;\nimport io.opentelemetry.context.Scope;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\n\npublic class ContextUsage {\n  public static void contextUsage() throws Exception {\n    // Define an example context key\n    ContextKey<String> exampleContextKey = ContextKey.named(\"example-context-key\");\n\n    // Context doesn't contain the key until we add it\n    // Context.current() accesses the current context\n    // output => current context value: null\n    System.out.println(\"current context value: \" + Context.current().get(exampleContextKey));\n\n    // Add entry to context\n    Context context = Context.current().with(exampleContextKey, \"value\");\n\n    // The local context var contains the added value\n    // output => context value: value\n    System.out.println(\"context value: \" + context.get(exampleContextKey));\n    // The current context still doesn't contain the value\n    // output => current context value: null\n    System.out.println(\"current context value: \" + Context.current().get(exampleContextKey));\n\n    // Calling context.makeCurrent() sets Context.current() to the context until the scope is\n    // closed, upon which Context.current() is restored to the state prior to when\n    // context.makeCurrent() was called. The resulting Scope implements AutoCloseable and is\n    // normally used in a try-with-resources block. Failure to call Scope.close() is an error and\n    // may cause memory leaks or other issues.\n    try (Scope scope = context.makeCurrent()) {\n      // The current context now contains the added value\n      // output => context value: value\n      System.out.println(\"context value: \" + Context.current().get(exampleContextKey));\n    }\n\n    // The local context var still contains the added value\n    // output => context value: value\n    System.out.println(\"context value: \" + context.get(exampleContextKey));\n    // The current context no longer contains the value\n    // output => current context value: null\n    System.out.println(\"current context value: \" + Context.current().get(exampleContextKey));\n\n    ExecutorService executorService = Executors.newSingleThreadExecutor();\n    ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(1);\n\n    // Context instances can be explicitly passed around application code, but it's more convenient\n    // to use implicit context, calling Context.makeCurrent() and accessing via Context.current().\n    // Context provides a number of utilities for implicit context propagation. These utilities wrap\n    // utility classes like Scheduler, ExecutorService, ScheduledExecutorService, Runnable,\n    // Callable, Consumer, Supplier, Function, etc and modify their behavior to call\n    // Context.makeCurrent() before running.\n    context.wrap(ContextUsage::callable).call();\n    context.wrap(ContextUsage::runnable).run();\n    context.wrap(executorService).submit(ContextUsage::runnable);\n    context.wrap(scheduledExecutorService).schedule(ContextUsage::runnable, 1, TimeUnit.SECONDS);\n    context.wrapConsumer(ContextUsage::consumer).accept(new Object());\n    context.wrapConsumer(ContextUsage::biConsumer).accept(new Object(), new Object());\n    context.wrapFunction(ContextUsage::function).apply(new Object());\n    context.wrapSupplier(ContextUsage::supplier).get();\n  }\n\n  /** Example {@link java.util.concurrent.Callable}. */\n  private static Object callable() {\n    return new Object();\n  }\n\n  /** Example {@link Runnable}. */\n  private static void runnable() {}\n\n  /** Example {@link java.util.function.Consumer}. */\n  private static void consumer(Object object) {}\n\n  /** Example {@link java.util.function.BiConsumer}. */\n  private static void biConsumer(Object object1, Object object2) {}\n\n  /** Example {@link java.util.function.Function}. */\n  private static Object function(Object object) {\n    return object;\n  }\n\n  /** Example {@link java.util.function.Supplier}. */\n  private static Object supplier() {\n    return new Object();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Views in OpenTelemetry Java SDK\nDESCRIPTION: Demonstrates configuration of views for customizing metric streams, including dropping metrics, setting histogram bucket boundaries, filtering attributes, and setting cardinality limits.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.metrics.Aggregation;\nimport io.opentelemetry.sdk.metrics.InstrumentSelector;\nimport io.opentelemetry.sdk.metrics.SdkMeterProviderBuilder;\nimport io.opentelemetry.sdk.metrics.View;\nimport java.util.List;\nimport java.util.Set;\n\npublic class ViewConfig {\n  public static SdkMeterProviderBuilder dropMetricView(\n      SdkMeterProviderBuilder builder, String metricName) {\n    return builder.registerView(\n        InstrumentSelector.builder().setName(metricName).build(),\n        View.builder().setAggregation(Aggregation.drop()).build());\n  }\n\n  public static SdkMeterProviderBuilder histogramBucketBoundariesView(\n      SdkMeterProviderBuilder builder, String metricName, List<Double> bucketBoundaries) {\n    return builder.registerView(\n        InstrumentSelector.builder().setName(metricName).build(),\n        View.builder()\n            .setAggregation(Aggregation.explicitBucketHistogram(bucketBoundaries))\n            .build());\n  }\n\n  public static SdkMeterProviderBuilder attributeFilterView(\n      SdkMeterProviderBuilder builder, String metricName, Set<String> keysToRetain) {\n    return builder.registerView(\n        InstrumentSelector.builder().setName(metricName).build(),\n        View.builder().setAttributeFilter(keysToRetain).build());\n  }\n\n  public static SdkMeterProviderBuilder cardinalityLimitsView(\n      SdkMeterProviderBuilder builder, String metricName, int cardinalityLimit) {\n    return builder.registerView(\n        InstrumentSelector.builder().setName(metricName).build(),\n        View.builder().setCardinalityLimit(cardinalityLimit).build());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Authentication in Java\nDESCRIPTION: Demonstrates how to configure static and dynamic header-based authentication for OTLP exporters in Java. The example includes a static API key implementation and a dynamic JWT token implementation with automatic token refreshing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_24\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.exporter.otlp.http.logs.OtlpHttpLogRecordExporter;\nimport io.opentelemetry.exporter.otlp.http.metrics.OtlpHttpMetricExporter;\nimport io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.util.Collections;\nimport java.util.Map;\nimport java.util.function.Supplier;\n\npublic class OtlpAuthenticationConfig {\n  public static void staticAuthenticationHeader(String endpoint) {\n    // If the OTLP destination accepts a static, long-lived authentication header like an API key,\n    // set it as a header.\n    // This reads the API key from the OTLP_API_KEY env var to avoid hard coding the secret in\n    // source code.\n    String apiKeyHeaderName = \"api-key\";\n    String apiKeyHeaderValue = System.getenv(\"OTLP_API_KEY\");\n\n    // Initialize OTLP Span, Metric, and LogRecord exporters using a similar pattern\n    OtlpHttpSpanExporter spanExporter =\n        OtlpHttpSpanExporter.builder()\n            .setEndpoint(endpoint)\n            .addHeader(apiKeyHeaderName, apiKeyHeaderValue)\n            .build();\n    OtlpHttpMetricExporter metricExporter =\n        OtlpHttpMetricExporter.builder()\n            .setEndpoint(endpoint)\n            .addHeader(apiKeyHeaderName, apiKeyHeaderValue)\n            .build();\n    OtlpHttpLogRecordExporter logRecordExporter =\n        OtlpHttpLogRecordExporter.builder()\n            .setEndpoint(endpoint)\n            .addHeader(apiKeyHeaderName, apiKeyHeaderValue)\n            .build();\n  }\n\n  public static void dynamicAuthenticationHeader(String endpoint) {\n    // If the OTLP destination requires a dynamic authentication header, such as a JWT which needs\n    // to be periodically refreshed, use a header supplier.\n    // Here we implement a simple supplier which adds a header of the form \"Authorization: Bearer\n    // <token>\", where <token> is fetched from refreshBearerToken every 10 minutes.\n    String username = System.getenv(\"OTLP_USERNAME\");\n    String password = System.getenv(\"OTLP_PASSWORD\");\n    Supplier<Map<String, String>> supplier =\n        new AuthHeaderSupplier(() -> refreshToken(username, password), Duration.ofMinutes(10));\n\n    // Initialize OTLP Span, Metric, and LogRecord exporters using a similar pattern\n    OtlpHttpSpanExporter spanExporter =\n        OtlpHttpSpanExporter.builder().setEndpoint(endpoint).setHeaders(supplier).build();\n    OtlpHttpMetricExporter metricExporter =\n        OtlpHttpMetricExporter.builder().setEndpoint(endpoint).setHeaders(supplier).build();\n    OtlpHttpLogRecordExporter logRecordExporter =\n        OtlpHttpLogRecordExporter.builder().setEndpoint(endpoint).setHeaders(supplier).build();\n  }\n\n  private static class AuthHeaderSupplier implements Supplier<Map<String, String>> {\n    private final Supplier<String> tokenRefresher;\n    private final Duration tokenRefreshInterval;\n    private Instant refreshedAt = Instant.ofEpochMilli(0);\n    private String currentTokenValue;\n\n    private AuthHeaderSupplier(Supplier<String> tokenRefresher, Duration tokenRefreshInterval) {\n      this.tokenRefresher = tokenRefresher;\n      this.tokenRefreshInterval = tokenRefreshInterval;\n    }\n\n    @Override\n    public Map<String, String> get() {\n      return Collections.singletonMap(\"Authorization\", \"Bearer \" + getToken());\n    }\n\n    private synchronized String getToken() {\n      Instant now = Instant.now();\n      if (currentTokenValue == null || now.isAfter(refreshedAt.plus(tokenRefreshInterval))) {\n        currentTokenValue = tokenRefresher.get();\n        refreshedAt = now;\n      }\n      return currentTokenValue;\n    }\n  }\n\n  private static String refreshToken(String username, String password) {\n    // For a production scenario, this would be replaced with an out-of-band request to exchange\n    // username / password for bearer token.\n    return \"abc123\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing OTLP Exporter in ASP.NET Core\nDESCRIPTION: Configure the OTLP exporter with custom endpoint and protocol options for tracing, metrics, and logging in an ASP.NET Core application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n    .WithTracing(tracing => tracing\n        // The rest of your setup code goes here\n        .AddOtlpExporter(options =>\n        {\n            options.Endpoint = new Uri(\"your-endpoint-here/v1/traces\");\n            options.Protocol = OtlpExportProtocol.HttpProtobuf;\n        }))\n    .WithMetrics(metrics => metrics\n        // The rest of your setup code goes here\n        .AddOtlpExporter(options =>\n        {\n            options.Endpoint = new Uri(\"your-endpoint-here/v1/metrics\");\n            options.Protocol = OtlpExportProtocol.HttpProtobuf;\n        }));\n\nbuilder.Logging.AddOpenTelemetry(logging => {\n    // The rest of your setup code goes here\n    logging.AddOtlpExporter(options =>\n    {\n        options.Endpoint = new Uri(\"your-endpoint-here/v1/logs\");\n        options.Protocol = OtlpExportProtocol.HttpProtobuf;\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Exporters in OpenTelemetry Collector YAML\nDESCRIPTION: This snippet shows how to configure various exporters in the OpenTelemetry Collector, including file, otlp, kafka, debug, opencensus, otlphttp, prometheus, prometheusremotewrite, and zipkin exporters. It demonstrates the structure and options for each exporter type.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  # Data sources: traces, metrics, logs\n  file:\n    path: ./filename.json\n\n  # Data sources: traces\n  otlp/jaeger:\n    endpoint: jaeger-server:4317\n    tls:\n      cert_file: cert.pem\n      key_file: cert-key.pem\n\n  # Data sources: traces, metrics, logs\n  kafka:\n    protocol_version: 2.0.0\n\n  # Data sources: traces, metrics, logs\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`\n  debug:\n    verbosity: detailed\n\n  # Data sources: traces, metrics\n  opencensus:\n    endpoint: otelcol2:55678\n\n  # Data sources: traces, metrics, logs\n  otlp:\n    endpoint: otelcol2:4317\n    tls:\n      cert_file: cert.pem\n      key_file: cert-key.pem\n\n  # Data sources: traces, metrics\n  otlphttp:\n    endpoint: https://otlp.example.com:4318\n\n  # Data sources: metrics\n  prometheus:\n    endpoint: 0.0.0.0:8889\n    namespace: default\n\n  # Data sources: metrics\n  prometheusremotewrite:\n    endpoint: http://prometheus.example.com:9411/api/prom/push\n    # When using the official Prometheus (running via Docker)\n    # endpoint: 'http://prometheus:9090/api/v1/write', add:\n    # tls:\n    #   insecure: true\n\n  # Data sources: traces\n  zipkin:\n    endpoint: http://zipkin.example.com:9411/api/v2/spans\n```\n\n----------------------------------------\n\nTITLE: Getting a Span from Context in JavaScript with OpenTelemetry\nDESCRIPTION: Retrieves a span from a specific context that isn't necessarily the active span. This allows working with spans from different contexts in your application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst ctx = getContextFromSomewhere();\nconst span = opentelemetry.trace.getSpan(ctx);\n\n// do something with the acquired span, optionally ending it if that is appropriate for your use case.\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes During Span Creation in TypeScript with OpenTelemetry\nDESCRIPTION: TypeScript example of setting span attributes during creation. The rollTheDice function creates a span with the number of rolls as an attribute.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rollTheDice(rolls: number, min: number, max: number) {\n  return tracer.startActiveSpan(\n    'rollTheDice',\n    { attributes: { 'dicelib.rolls': rolls.toString() } },\n    (span: Span) => {\n      /* ... */\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Active Spans in JavaScript with OpenTelemetry\nDESCRIPTION: JavaScript implementation of the rollTheDice function using OpenTelemetry to create an active span. The span tracks the execution of rolling dice multiple times and ensures the span is properly closed at the end.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nfunction rollTheDice(rolls, min, max) {\n  // Create a span. A span must be closed.\n  return tracer.startActiveSpan('rollTheDice', (span) => {\n    const result = [];\n    for (let i = 0; i < rolls; i++) {\n      result.push(rollOnce(min, max));\n    }\n    // Be sure to end the span!\n    span.end();\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Docker\nDESCRIPTION: Commands to pull and run the OpenTelemetry Collector Docker image. It includes options for using DockerHub or ghcr.io registries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull otel/opentelemetry-collector-contrib:{{% param vers %}}\ndocker run otel/opentelemetry-collector-contrib:{{% param vers %}}\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker pull ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:{{% param vers %}}\ndocker run ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:{{% param vers %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetrySdk in Java\nDESCRIPTION: Demonstrates how to programmatically configure OpenTelemetrySdk with custom TracerProvider, MeterProvider, LoggerProvider, and ContextPropagators.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\nimport io.opentelemetry.sdk.resources.Resource;\n\npublic class OpenTelemetrySdkConfig {\n  public static OpenTelemetrySdk create() {\n    Resource resource = ResourceConfig.create();\n    return OpenTelemetrySdk.builder()\n        .setTracerProvider(SdkTracerProviderConfig.create(resource))\n        .setMeterProvider(SdkMeterProviderConfig.create(resource))\n        .setLoggerProvider(SdkLoggerProviderConfig.create(resource))\n        .setPropagators(ContextPropagatorsConfig.create())\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Instrumented JavaScript Application\nDESCRIPTION: Command to run a JavaScript application with OpenTelemetry instrumentation. The instrumentation file is loaded before the main application using the --require flag.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_11\n\nLANGUAGE: console\nCODE:\n```\n$ node --require ./instrumentation.js app.js\nListening for requests on http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry SDK for PHP Application\nDESCRIPTION: Complete implementation of OpenTelemetry SDK initialization for a PHP application. Sets up trace, metrics, and logs providers with OTLP exporters and configures resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse OpenTelemetry\\API\\Globals;\nuse OpenTelemetry\\API\\Logs\\EventLogger;\nuse OpenTelemetry\\API\\Logs\\LogRecord;\nuse OpenTelemetry\\API\\Trace\\Propagation\\TraceContextPropagator;\nuse OpenTelemetry\\Contrib\\Otlp\\LogsExporter;\nuse OpenTelemetry\\Contrib\\Otlp\\MetricExporter;\nuse OpenTelemetry\\Contrib\\Otlp\\SpanExporter;\nuse OpenTelemetry\\SDK\\Common\\Attribute\\Attributes;\nuse OpenTelemetry\\SDK\\Common\\Export\\Stream\\StreamTransportFactory;\nuse OpenTelemetry\\SDK\\Logs\\LoggerProvider;\nuse OpenTelemetry\\SDK\\Logs\\Processor\\SimpleLogRecordProcessor;\nuse OpenTelemetry\\SDK\\Metrics\\MeterProvider;\nuse OpenTelemetry\\SDK\\Metrics\\MetricReader\\ExportingReader;\nuse OpenTelemetry\\SDK\\Resource\\ResourceInfo;\nuse OpenTelemetry\\SDK\\Resource\\ResourceInfoFactory;\nuse OpenTelemetry\\SDK\\Sdk;\nuse OpenTelemetry\\SDK\\Trace\\Sampler\\AlwaysOnSampler;\nuse OpenTelemetry\\SDK\\Trace\\Sampler\\ParentBased;\nuse OpenTelemetry\\SDK\\Trace\\SpanProcessor\\SimpleSpanProcessor;\nuse OpenTelemetry\\SDK\\Trace\\TracerProvider;\nuse OpenTelemetry\\SemConv\\ResourceAttributes;\n\nrequire 'vendor/autoload.php';\n\n$resource = ResourceInfoFactory::emptyResource()->merge(ResourceInfo::create(Attributes::create([\n    ResourceAttributes::SERVICE_NAMESPACE => 'demo',\n    ResourceAttributes::SERVICE_NAME => 'test-application',\n    ResourceAttributes::SERVICE_VERSION => '0.1',\n    ResourceAttributes::DEPLOYMENT_ENVIRONMENT_NAME => 'development',\n])));\n$spanExporter = new SpanExporter(\n    (new StreamTransportFactory())->create('php://stdout', 'application/json')\n);\n\n$logExporter = new LogsExporter(\n    (new StreamTransportFactory())->create('php://stdout', 'application/json')\n);\n\n$reader = new ExportingReader(\n    new MetricExporter(\n        (new StreamTransportFactory())->create('php://stdout', 'application/json')\n    )\n);\n\n$meterProvider = MeterProvider::builder()\n    ->setResource($resource)\n    ->addReader($reader)\n    ->build();\n\n$tracerProvider = TracerProvider::builder()\n    ->addSpanProcessor(\n        new SimpleSpanProcessor($spanExporter)\n    )\n    ->setResource($resource)\n    ->setSampler(new ParentBased(new AlwaysOnSampler()))\n    ->build();\n\n$loggerProvider = LoggerProvider::builder()\n    ->setResource($resource)\n    ->addLogRecordProcessor(\n        new SimpleLogRecordProcessor($logExporter)\n    )\n    ->build();\n\nSdk::builder()\n    ->setTracerProvider($tracerProvider)\n    ->setMeterProvider($meterProvider)\n    ->setLoggerProvider($loggerProvider)\n    ->setPropagator(TraceContextPropagator::getInstance())\n    ->setAutoShutdown(true)\n    ->buildAndRegisterGlobal();\n```\n\n----------------------------------------\n\nTITLE: Configuring Metric Views in JavaScript with OpenTelemetry\nDESCRIPTION: Shows how to configure metric views to customize metrics exposed by the Metrics SDK. Includes examples of filtering attributes, dropping instruments, and defining explicit bucket sizes for histograms.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nconst limitAttributesView = {\n  // only export the attribute 'environment'\n  attributeKeys: ['environment'],\n  // apply the view to all instruments\n  instrumentName: '*',\n};\n\nconst dropView = {\n  aggregation: { type: AggrgationType.DROP },\n  meterName: 'pubsub',\n};\n\nconst histogramView = {\n  aggregation: {\n    type: AggregationType.EXPLICIT_BUCKET_HISTOGRAM,\n    options: { boundaries: [0, 1, 5, 10, 15, 20, 25, 30] },\n  },\n  instrumentName: 'http.server.duration',\n  instrumentType: InstrumentType.HISTOGRAM,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Pipeline in YAML\nDESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector pipeline with OTLP receiver, batch processor, and multiple exporters including OTLP, logging, and Zipkin. It defines the components and their settings for the traces pipeline.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nprocessors:\n  batch:\n    send_batch_max_size: 200\n    send_batch_size: 200\nexporters:\n  otlp:\n  logging:\n  zipkin:\n    endpoint: http://my-zipkin-service:9411/api/v2/spans\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp, logging, zipkin]\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Span Processors in OpenTelemetry Swift\nDESCRIPTION: This snippet demonstrates how to configure multiple span processors simultaneously. It shows setting up both a BatchSpanProcessor for OTLP export and a SimpleSpanProcessor for stdout logging.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: swift\nCODE:\n```\nlet otlpConfiguration = OtlpConfiguration(timeout: OtlpConfiguration.DefaultTimeoutInterval)\n\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1))\n                                                  .connect(host: <collector host>, port: <collector port>)\n\nlet traceExporter = OtlpTraceExporter(channel: grpcChannel\n                                      config: otlpConfiguration)\n\n// build & register the Tracer Provider using the built otlp trace exporter\nOpenTelemetry.registerTracerProvider(tracerProvider: TracerProviderBuilder()\n                                                      .add(spanProcessor:BatchSpanProcessor(spanExporter: traceExporter))\n                                                      .add(spanProcessor:SimpleSpanProcessor(spanExporter: StdoutExporter))\n                                                      .with(resource: Resource())\n                                                      .build())\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTelemetry Collector Configuration\nDESCRIPTION: This YAML configuration sets up a basic OpenTelemetry Collector with OTLP receiver, batch processor, OTLP exporter, and three extensions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\nprocessors:\n  batch:\n\nexporters:\n  otlp:\n    endpoint: otelcol:4317\n\nextensions:\n  health_check:\n  pprof:\n  zpages:\n\nservice:\n  extensions: [health_check, pprof, zpages]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n    metrics:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Multiple Pipeline Configuration with Shared Receiver\nDESCRIPTION: YAML configuration demonstrating how to configure multiple pipelines sharing the same OTLP receiver with different processors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: localhost:4317\n\nservice:\n  pipelines:\n    traces: # a pipeline of \"traces\" type\n      receivers: [otlp]\n      processors: [memory_limiter, batch]\n      exporters: [otlp]\n    traces/2: # another pipeline of \"traces\" type\n      receivers: [otlp]\n      processors: [transform]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Programmatic OpenTelemetry Configuration\nDESCRIPTION: Java code for programmatically configuring OpenTelemetry instance with Jaeger exporter and custom service name using SDK builders.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nResource resource = Resource.getDefault()\n        .merge(Resource.create(Attributes.of(ResourceAttributes.SERVICE_NAME, \"my-kafka-service\")));\n\nSdkTracerProvider sdkTracerProvider = SdkTracerProvider.builder()\n        .addSpanProcessor(BatchSpanProcessor.builder(JaegerGrpcSpanExporter.builder().build()).build())\n        .setSampler(Sampler.alwaysOn())\n        .setResource(resource)\n        .build();\n\nOpenTelemetry openTelemetry = OpenTelemetrySdk.builder()\n        .setTracerProvider(sdkTracerProvider)\n        .setPropagators(ContextPropagators.create(W3CTraceContextPropagator.getInstance()))\n        .buildAndRegisterGlobal();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Sidecar with Operator\nDESCRIPTION: YAML configuration for deploying an OpenTelemetry Collector as a sidecar using the OpenTelemetry Operator. Includes both the collector configuration and pod specification with required annotations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/scaling.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: sidecar-for-my-workload\nspec:\n  mode: sidecar\n  config: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n    processors:\n\n    exporters:\n      # Note: Prior to v0.86.0 use the `logging` instead of `debug`.\n      debug:\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: []\n          exporters: [debug]\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: my-microservice\n  annotations:\n    sidecar.opentelemetry.io/inject: 'true'\nspec:\n  containers:\n    - name: my-microservice\n      image: my-org/my-microservice:v0.0.0\n      ports:\n        - containerPort: 8080\n          protocol: TCP\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracer in Go\nDESCRIPTION: Set up an OpenTelemetry tracer by initializing an exporter, resources, trace provider, and tracer. This code demonstrates the basic setup required for manual instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage app\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\tsdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\nvar tracer trace.Tracer\n\nfunc newExporter(ctx context.Context)  /* (someExporter.Exporter, error) */ {\n\t// Seu Exporter de preferência: console, jaeger, zipkin, OTLP, etc.\n}\n\nfunc newTraceProvider(exp sdktrace.SpanExporter) *sdktrace.TracerProvider {\n\t// Certifique-se de que os recursos padrão do SDK e o nome do serviço estão definidos.\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceName(\"ServicoExemplo\"),\n\t\t),\n\t)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn sdktrace.NewTracerProvider(\n\t\tsdktrace.WithBatcher(exp),\n\t\tsdktrace.WithResource(r),\n\t)\n}\n\nfunc main() {\n\tctx := context.Background()\n\n\texp, err := newExporter(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"falha ao inicializar o exporter: %v\", err)\n\t}\n\n\t// Crie um novo TracerProvider com o Processor de Trechos e o Exporter criado.\n\ttp := newTraceProvider(exp)\n\n\t// Lidamos com a finalização corretamente, evitando leaks.\n\tdefer func() { _ = tp.Shutdown(ctx) }()\n\n\totel.SetTracerProvider(tp)\n\n\t// Finalmente, definimos o Tracer que será utilizado por este pacote.\n\ttracer = tp.Tracer(\"example.io/package/name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Dice Library with OpenTelemetry in TypeScript\nDESCRIPTION: Library file for the dice rolling functionality in TypeScript that acquires OpenTelemetry meter and tracer for the dice-lib scope.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_53\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*dice.ts*/\nimport { trace, metrics } from '@opentelemetry/api';\n\nconst tracer = trace.getTracer('dice-lib');\nconst meter = metrics.getMeter('dice-lib');\n\nfunction rollOnce(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function rollTheDice(rolls: number, min: number, max: number) {\n  const result: number[] = [];\n  for (let i = 0; i < rolls; i++) {\n    result.push(rollOnce(min, max));\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Replacing Basic Application Builder with OpenTelemetry Configuration\nDESCRIPTION: Shows the original application builder code that will be replaced with OpenTelemetry-enabled configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Visualizing OpenTelemetry Pipeline Flow with Mermaid\nDESCRIPTION: Mermaid diagram showing the typical flow of data through an OpenTelemetry pipeline, from multiple receivers through processors to multiple exporters via fan-out.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Pipeline\n---\nflowchart LR\n  R1(Receiver 1) --> P1[Processor 1]\n  R2(Receiver 2) --> P1\n  RM(...) ~~~ P1\n  RN(Receiver N) --> P1\n  P1 --> P2[Processor 2]\n  P2 --> PM[...]\n  PM --> PN[Processor N]\n  PN --> FO((fan-out))\n  FO --> E1[[Exporter 1]]\n  FO --> E2[[Exporter 2]]\n  FO ~~~ EM[[...]]\n  FO --> EN[[Exporter N]]\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Docker and custom config\nDESCRIPTION: Commands to run the OpenTelemetry Collector Docker image with a custom configuration file mounted as a volume.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v $(pwd)/config.yaml:/etc/otelcol-contrib/config.yaml otel/opentelemetry-collector-contrib:{{% param vers %}}\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v $(pwd)/config.yaml:/etc/otelcol-contrib/config.yaml ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:{{% param vers %}}\n```\n\n----------------------------------------\n\nTITLE: Registering All Node.js Instrumentation Packages in TypeScript\nDESCRIPTION: Code to register all available Node.js instrumentation packages with the OpenTelemetry SDK using the auto-instrumentation metapackage in a TypeScript environment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\n...\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\n\nconst sdk = new NodeSDK({\n  ...\n  // This registers all instrumentation packages\n  instrumentations: [getNodeAutoInstrumentations()]\n});\n\nsdk.start()\n```\n\n----------------------------------------\n\nTITLE: Running the Instrumented Application\nDESCRIPTION: Command to run the application after OpenTelemetry instrumentation has been added, which will start emitting telemetry data to the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter with gRPC Transport in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to configure an OTLP exporter using gRPC transport for sending trace data to a specified endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse OpenTelemetry\\API\\Signals;\nuse OpenTelemetry\\Contrib\\Grpc\\GrpcTransportFactory;\nuse OpenTelemetry\\Contrib\\Otlp\\OtlpUtil;\nuse OpenTelemetry\\Contrib\\Otlp\\SpanExporter;\nuse OpenTelemetry\\SDK\\Trace\\SpanProcessor\\SimpleSpanProcessor;\nuse OpenTelemetry\\SDK\\Trace\\TracerProvider;\n\n$transport = (new GrpcTransportFactory())->create('http://jaeger:4317' . OtlpUtil::method(Signals::TRACE));\n$exporter = new SpanExporter($transport);\n\n$tracerProvider =  new TracerProvider(\n    new SimpleSpanProcessor($exporter)\n);\n```\n\n----------------------------------------\n\nTITLE: Express Server with OpenTelemetry Tracing in TypeScript\nDESCRIPTION: TypeScript code for an Express server that uses OpenTelemetry for tracing. It demonstrates acquiring a tracer and setting up a route handler.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/*app.ts*/\nimport { trace } from '@opentelemetry/api';\nimport express, { Express } from 'express';\nimport { rollTheDice } from './dice';\n\nconst tracer = trace.getTracer('dice-server', '0.1.0');\n\nconst PORT: number = parseInt(process.env.PORT || '8080');\nconst app: Express = express();\n\napp.get('/rolldice', (req, res) => {\n  const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;\n  if (isNaN(rolls)) {\n    res\n      .status(400)\n      .send(\"Request parameter 'rolls' is missing or not a number.\");\n    return;\n  }\n  res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific OpenTelemetry Instrumentations\nDESCRIPTION: Sets environment variable to disable specific instrumentations (fs and grpc) while keeping all others enabled.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/js/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_NODE_DISABLED_INSTRUMENTATIONS=\"fs,grpc\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporters in Node.js with TypeScript\nDESCRIPTION: Sets up OpenTelemetry SDK with OTLP exporters using HTTP/protobuf in a TypeScript Node.js application. Configures both trace and metric exporters pointing to custom endpoints.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\nimport * as opentelemetry from '@opentelemetry/sdk-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { OTLPMetricExporter } from '@opentelemetry/exporter-metrics-otlp-proto';\nimport { PeriodicExportingMetricReader } from '@opentelemetry/sdk-metrics';\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new OTLPTraceExporter({\n    // optional - default url is http://localhost:4318/v1/traces\n    url: '<your-otlp-endpoint>/v1/traces',\n    // optional - collection of custom headers to be sent with each request, empty by default\n    headers: {},\n  }),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter({\n      url: '<your-otlp-endpoint>/v1/metrics', // url is optional and can be omitted - default is http://localhost:4318/v1/metrics\n      headers: {}, // an optional object containing custom headers to be sent with each request\n    }),\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Initializing MeterProvider for OpenTelemetry Python\nDESCRIPTION: Sets up a MeterProvider with a periodic exporting metric reader and console exporter, then configures it globally and creates a meter instance.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import (\n    ConsoleMetricExporter,\n    PeriodicExportingMetricReader,\n)\n\nmetric_reader = PeriodicExportingMetricReader(ConsoleMetricExporter())\nprovider = MeterProvider(metric_readers=[metric_reader])\n\n# Sets the global default meter provider\nmetrics.set_meter_provider(provider)\n\n# Creates a meter from the global meter provider\nmeter = metrics.get_meter(\"my.meter.name\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in ASP.NET Core Application\nDESCRIPTION: Complete example of setting up OpenTelemetry instrumentation in an ASP.NET Core application with HTTP client monitoring.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/libraries.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n  .WithTracing(b =>\n  {\n      b\n      .AddHttpClientInstrumentation()\n      .AddAspNetCoreInstrumentation();\n  });\n\nvar app = builder.Build();\n\nvar httpClient = new HttpClient();\n\napp.MapGet(\"/hello\", async () =>\n{\n    var html = await httpClient.GetStringAsync(\"https://example.com/\");\n    if (string.IsNullOrWhiteSpace(html))\n    {\n        return \"Hello, World!\";\n    }\n    else\n    {\n        return \"Hello, World!\";\n    }\n});\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in JavaScript with OpenTelemetry\nDESCRIPTION: Adds custom attributes to a span in JavaScript. The setAttribute method attaches key-value pairs to the span to provide additional context for analysis.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nfunction rollOnce(i, min, max) {\n  return tracer.startActiveSpan(`rollOnce:${i}`, (span) => {\n    const result = Math.floor(Math.random() * (max - min + 1) + min);\n\n    // Add an attribute to the span\n    span.setAttribute('dicelib.rolled', result.toString());\n\n    span.end();\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using GlobalOpenTelemetry in Java Applications\nDESCRIPTION: Demonstrates how to set and get the global OpenTelemetry singleton instance. This approach is useful for Java agent users and applications that need a globally accessible telemetry instance, though direct dependency injection is preferred for most instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.GlobalOpenTelemetry;\nimport io.opentelemetry.api.OpenTelemetry;\n\npublic class GlobalOpenTelemetryUsage {\n\n  public static void openTelemetryUsage(OpenTelemetry openTelemetry) {\n    // Set the GlobalOpenTelemetry instance as early in the application lifecycle as possible\n    // Set must only be called once. Calling multiple times raises an exception.\n    GlobalOpenTelemetry.set(openTelemetry);\n\n    // Get the GlobalOpenTelemetry instance.\n    openTelemetry = GlobalOpenTelemetry.get();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complex Context Management Example in OpenTelemetry JavaScript\nDESCRIPTION: A comprehensive example showing context immutability, nesting active contexts, and return values. Demonstrates how new context objects are created rather than modifying existing ones.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst key = api.createContextKey('Key to store a value');\n\nconst ctx = api.context.active(); // Returns ROOT_CONTEXT when no context is active\nconst ctx2 = ctx.setValue(key, 'context 2'); // does not modify ctx\n\nconsole.log(ctx.getValue(key)); //? undefined\nconsole.log(ctx2.getValue(key)); //? \"context 2\"\n\nconst ret = api.context.with(ctx2, () => {\n  const ctx3 = api.context.active().setValue(key, 'context 3');\n\n  console.log(api.context.active().getValue(key)); //? \"context 2\"\n  console.log(ctx.getValue(key)); //? undefined\n  console.log(ctx2.getValue(key)); //? \"context 2\"\n  console.log(ctx3.getValue(key)); //? \"context 3\"\n\n  api.context.with(ctx3, () => {\n    console.log(api.context.active().getValue(key)); //? \"context 3\"\n  });\n  console.log(api.context.active().getValue(key)); //? \"context 2\"\n\n  return 'return value';\n});\n\n// The value returned by the callback is returned to the caller\nconsole.log(ret); //? \"return value\"\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in TypeScript with OpenTelemetry\nDESCRIPTION: Implementation of nested spans in TypeScript, where the rollOnce function creates child spans under the parent rollTheDice span. This creates a hierarchical structure of spans to track nested operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rollOnce(i: number, min: number, max: number) {\n  return tracer.startActiveSpan(`rollOnce:${i}`, (span: Span) => {\n    const result = Math.floor(Math.random() * (max - min + 1) + min);\n    span.end();\n    return result;\n  });\n}\n\nexport function rollTheDice(rolls: number, min: number, max: number) {\n  // Create a span. A span must be closed.\n  return tracer.startActiveSpan('rollTheDice', (parentSpan: Span) => {\n    const result: number[] = [];\n    for (let i = 0; i < rolls; i++) {\n      result.push(rollOnce(i, min, max));\n    }\n    // Be sure to end the span!\n    parentSpan.end();\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK for Console Application\nDESCRIPTION: OpenTelemetry SDK initialization for a console application including tracer, meter, and logger provider setup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Logs;\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\nvar serviceName = \"MyServiceName\";\nvar serviceVersion = \"1.0.0\";\n\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddSource(serviceName)\n    .ConfigureResource(resource =>\n        resource.AddService(\n          serviceName: serviceName,\n          serviceVersion: serviceVersion))\n    .AddConsoleExporter()\n    .Build();\n\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(serviceName)\n    .AddConsoleExporter()\n    .Build();\n\nvar loggerFactory = LoggerFactory.Create(builder =>\n{\n    builder.AddOpenTelemetry(logging =>\n    {\n        logging.AddConsoleExporter();\n    });\n});\n\ntracerProvider.Dispose();\nmeterProvider.Dispose();\nloggerFactory.Dispose();\n```\n\n----------------------------------------\n\nTITLE: Using Attributes in OpenTelemetry Java API\nDESCRIPTION: Demonstrates various ways to create and manipulate Attributes objects in OpenTelemetry Java. Shows how to use pre-allocated attribute keys, build complex attribute sets, read attribute values, and perform operations like size inspection, map conversion, and filtering.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.common.AttributeKey;\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.common.AttributesBuilder;\nimport java.util.Map;\n\npublic class AttributesUsage {\n  // Establish static constant for attribute keys and reuse to avoid allocations\n  private static final AttributeKey<String> SHOP_ID = AttributeKey.stringKey(\"com.acme.shop.id\");\n  private static final AttributeKey<String> SHOP_NAME =\n      AttributeKey.stringKey(\"com.acme.shop.name\");\n  private static final AttributeKey<Long> CUSTOMER_ID =\n      AttributeKey.longKey(\"com.acme.customer.id\");\n  private static final AttributeKey<String> CUSTOMER_NAME =\n      AttributeKey.stringKey(\"com.acme.customer.name\");\n\n  public static void attributesUsage() {\n    // Use a varargs initializer and pre-allocated attribute keys. This is the most efficient way to\n    // create attributes.\n    Attributes attributes =\n        Attributes.of(\n            SHOP_ID,\n            \"abc123\",\n            SHOP_NAME,\n            \"opentelemetry-demo\",\n            CUSTOMER_ID,\n            123L,\n            CUSTOMER_NAME,\n            \"Jack\");\n\n    // ...or use a builder.\n    attributes =\n        Attributes.builder()\n            .put(SHOP_ID, \"abc123\")\n            .put(SHOP_NAME, \"opentelemetry-demo\")\n            .put(CUSTOMER_ID, 123)\n            .put(CUSTOMER_NAME, \"Jack\")\n            // Optionally initialize attribute keys on the fly\n            .put(AttributeKey.stringKey(\"com.acme.string-key\"), \"value\")\n            .put(AttributeKey.booleanKey(\"com.acme.bool-key\"), true)\n            .put(AttributeKey.longKey(\"com.acme.long-key\"), 1L)\n            .put(AttributeKey.doubleKey(\"com.acme.double-key\"), 1.1)\n            .put(AttributeKey.stringArrayKey(\"com.acme.string-array-key\"), \"value1\", \"value2\")\n            .put(AttributeKey.booleanArrayKey(\"come.acme.bool-array-key\"), true, false)\n            .put(AttributeKey.longArrayKey(\"come.acme.long-array-key\"), 1L, 2L)\n            .put(AttributeKey.doubleArrayKey(\"come.acme.double-array-key\"), 1.1, 2.2)\n            // Optionally omit initializing AttributeKey\n            .put(\"com.acme.string-key\", \"value\")\n            .put(\"com.acme.bool-key\", true)\n            .put(\"come.acme.long-key\", 1L)\n            .put(\"come.acme.double-key\", 1.1)\n            .put(\"come.acme.string-array-key\", \"value1\", \"value2\")\n            .put(\"come.acme.bool-array-key\", true, false)\n            .put(\"come.acme.long-array-key\", 1L, 2L)\n            .put(\"come.acme.double-array-key\", 1.1, 2.2)\n            .build();\n\n    // Attributes has a variety of methods for manipulating and reading data.\n    // Read an attribute key:\n    String shopIdValue = attributes.get(SHOP_ID);\n    // Inspect size:\n    int size = attributes.size();\n    boolean isEmpty = attributes.isEmpty();\n    // Convert to a map representation:\n    Map<AttributeKey<?>, Object> map = attributes.asMap();\n    // Iterate through entries, printing each to the template: <key> (<type>): <value>\\n\n    attributes.forEach(\n        (attributeKey, value) ->\n            System.out.printf(\n                \"%s (%s): %s%n\", attributeKey.getKey(), attributeKey.getType(), value));\n    // Convert to a builder, remove the com.acme.customer.id and any entry whose key starts with\n    // com.acme.shop, and build a new instance:\n    AttributesBuilder builder = attributes.toBuilder();\n    builder.remove(CUSTOMER_ID);\n    builder.removeIf(attributeKey -> attributeKey.getKey().startsWith(\"com.acme.shop\"));\n    Attributes trimmedAttributes = builder.build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating Spans with OpenTelemetry Java API\nDESCRIPTION: Demonstrates comprehensive usage of SpanBuilder and Span APIs including span creation, attribute setting, event recording, and status updates. Shows how to create spans with various attributes, add events, record exceptions, and properly end spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static io.opentelemetry.context.Context.current;\n\nimport io.opentelemetry.api.common.AttributeKey;\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.trace.Span;\nimport io.opentelemetry.api.trace.SpanContext;\nimport io.opentelemetry.api.trace.SpanKind;\nimport io.opentelemetry.api.trace.StatusCode;\nimport io.opentelemetry.api.trace.Tracer;\nimport java.util.Arrays;\n\npublic class SpanUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void spanUsage(Tracer tracer) {\n    // Get a span builder by providing the span name\n    Span span =\n        tracer\n            .spanBuilder(\"span name\")\n            // Set span kind\n            .setSpanKind(SpanKind.INTERNAL)\n            // Set attributes\n            .setAttribute(AttributeKey.stringKey(\"com.acme.string-key\"), \"value\")\n            .setAttribute(AttributeKey.booleanKey(\"com.acme.bool-key\"), true)\n            .setAttribute(AttributeKey.longKey(\"com.acme.long-key\"), 1L)\n            .setAttribute(AttributeKey.doubleKey(\"com.acme.double-key\"), 1.1)\n            .setAttribute(\n                AttributeKey.stringArrayKey(\"com.acme.string-array-key\"),\n                Arrays.asList(\"value1\", \"value2\"))\n            .setAttribute(\n                AttributeKey.booleanArrayKey(\"come.acme.bool-array-key\"),\n                Arrays.asList(true, false))\n            .setAttribute(\n                AttributeKey.longArrayKey(\"come.acme.long-array-key\"), Arrays.asList(1L, 2L))\n            .setAttribute(\n                AttributeKey.doubleArrayKey(\"come.acme.double-array-key\"), Arrays.asList(1.1, 2.2))\n            // Optionally omit initializing AttributeKey\n            .setAttribute(\"com.acme.string-key\", \"value\")\n            .setAttribute(\"com.acme.bool-key\", true)\n            .setAttribute(\"come.acme.long-key\", 1L)\n            .setAttribute(\"come.acme.double-key\", 1.1)\n            .setAllAttributes(WIDGET_RED_CIRCLE)\n            .startSpan();\n\n    // Check if span is recording before computing additional data\n    if (span.isRecording()) {\n      // Update the span name with information not available when starting\n      span.updateName(\"new span name\");\n\n      // Add additional attributes not available when starting\n      span.setAttribute(\"com.acme.string-key2\", \"value\");\n\n      // Add additional span links not available when starting\n      span.addLink(exampleLinkContext());\n      // optionally include attributes on the link\n      span.addLink(exampleLinkContext(), WIDGET_RED_CIRCLE);\n\n      // Add span events\n      span.addEvent(\"my-event\");\n      // optionally include attributes on the event\n      span.addEvent(\"my-event\", WIDGET_RED_CIRCLE);\n\n      // Record exception, syntactic sugar for a span event with a specific shape\n      span.recordException(new RuntimeException(\"error\"));\n\n      // Set the span status\n      span.setStatus(StatusCode.OK, \"status description\");\n    }\n\n    // Finally, end the span\n    span.end();\n  }\n\n  /** Return a dummy link context. */\n  private static SpanContext exampleLinkContext() {\n    return Span.fromContext(current()).getSpanContext();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Counters for Metrics in JavaScript\nDESCRIPTION: JavaScript version of creating and using a counter metric instrument to count dice rolls in the sample application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_56\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*dice.js*/\nconst counter = meter.createCounter('dice-lib.rolls.counter');\n\nfunction rollOnce(min, max) {\n  counter.add(1);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n```\n\n----------------------------------------\n\nTITLE: Using Synchronous Meters with UpDownCounter in PHP\nDESCRIPTION: Demonstrates how to create and use a synchronous UpDownCounter meter for tracking the number of jobs in a queue. Shows how to manually adjust the counter as data changes and export metrics with forceFlush().\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n$up_down = $meterProvider\n    ->getMeter('demo_meter')\n    ->createUpDownCounter('queued', 'jobs', 'The number of jobs enqueued');\n//jobs come in\n$up_down->add(5);\n//job completed\n$up_down->add(-1);\n//more jobs come in\n$up_down->add(2);\n\n$meterProvider->forceFlush();\n```\n\n----------------------------------------\n\nTITLE: Configuring B3 Propagation Format in OpenTelemetry Python\nDESCRIPTION: Shows how to install and configure the B3 propagation format for cross-service trace context propagation, useful for Zipkin compatibility.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-propagator-b3\n```\n\n----------------------------------------\n\nTITLE: Configuring OTTL with Advanced Context Inference and Conditions in YAML\nDESCRIPTION: Example YAML configuration showing the traditional approach with explicit context and conditions for filtering based on resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/ottl-contexts-just-got-easier.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmetric_statements:\n  - context: datapoint\n    conditions:\n      - resource.attributes[\"service.name\"] == \"my.service\"\n    statements:\n      - set(metric.description, \"counter\") where attributes[\"my.attr\"] == \"some\"\n```\n\n----------------------------------------\n\nTITLE: Integrating Monolog with OpenTelemetry in PHP\nDESCRIPTION: Shows how to connect Monolog to OpenTelemetry using the monolog handler package. This integration allows existing Monolog logs to be sent to OpenTelemetry-compatible services, including proper handling of error levels and exception details.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_28\n\nLANGUAGE: php\nCODE:\n```\n$handler = new \\OpenTelemetry\\Contrib\\Logs\\Monolog\\Handler(\n    $loggerProvider,\n    \\Psr\\Log\\LogLevel::ERROR,\n);\n$monolog = new \\Monolog\\Logger('example', [$handler]);\n\n$monolog->info('hello, world');\n$monolog->error('oh no', [\n    'foo' => 'bar',\n    'exception' => new \\Exception('something went wrong'),\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating Dice Rolling Library in TypeScript\nDESCRIPTION: Defines a dice rolling library with functions to roll dice a specified number of times between a min and max value. This demonstrates instrumenting a library that will be imported by the main application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/*dice.ts*/\nfunction rollOnce(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function rollTheDice(rolls: number, min: number, max: number) {\n  const result: number[] = [];\n  for (let i = 0; i < rolls; i++) {\n    result.push(rollOnce(min, max));\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Tracer Implementation with Console Exporter\nDESCRIPTION: Enhanced implementation adding console span exporter and simple span processor for trace output\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/browser.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport {\n  ConsoleSpanExporter,\n  SimpleSpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\n\nconst provider = new WebTracerProvider({\n  spanProcessors: [new SimpleSpanProcessor(new ConsoleSpanExporter())],\n});\n\nprovider.register({\n  contextManager: new ZoneContextManager(),\n});\n\nregisterInstrumentations({\n  instrumentations: [new DocumentLoadInstrumentation()],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Collector to Docker Compose\nDESCRIPTION: Example of how to add the OpenTelemetry Collector to an existing docker-compose.yaml file, including volume mounting and port mapping.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\notel-collector:\n  image: otel/opentelemetry-collector-contrib\n  volumes:\n    - ./otel-collector-config.yaml:/etc/otelcol-contrib/config.yaml\n  ports:\n    - 1888:1888 # pprof extension\n    - 8888:8888 # Prometheus metrics exposed by the Collector\n    - 8889:8889 # Prometheus exporter metrics\n    - 13133:13133 # health_check extension\n    - 4317:4317 # OTLP gRPC receiver\n    - 4318:4318 # OTLP http receiver\n    - 55679:55679 # zpages extension\n```\n\n----------------------------------------\n\nTITLE: Configuring Processors in OpenTelemetry Collector YAML\nDESCRIPTION: This snippet demonstrates how to configure various processors in the OpenTelemetry Collector, including attributes, batch, filter, memory_limiter, resource, probabilistic_sampler, and span processors. It shows the structure and options for each processor type.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  # Data sources: traces\n  attributes:\n    actions:\n      - key: environment\n        value: production\n        action: insert\n      - key: db.statement\n        action: delete\n      - key: email\n        action: hash\n\n  # Data sources: traces, metrics, logs\n  batch:\n\n  # Data sources: metrics, metrics, logs\n  filter:\n    error_mode: ignore\n    traces:\n      span:\n        - 'attributes[\"container.name\"] == \"app_container_1\"'\n        - 'resource.attributes[\"host.name\"] == \"localhost\"'\n        - 'name == \"app_3\"'\n      spanevent:\n        - 'attributes[\"grpc\"] == true'\n        - 'IsMatch(name, \".*grpc.*\")'\n    metrics:\n      metric:\n        - 'name == \"my.metric\" and resource.attributes[\"my_label\"] == \"abc123\"'\n        - 'type == METRIC_DATA_TYPE_HISTOGRAM'\n      datapoint:\n        - 'metric.type == METRIC_DATA_TYPE_SUMMARY'\n        - 'resource.attributes[\"service.name\"] == \"my_service_name\"'\n    logs:\n      log_record:\n        - 'IsMatch(body, \".*password.*\")'\n        - 'severity_number < SEVERITY_NUMBER_WARN'\n\n  # Data sources: traces, metrics, logs\n  memory_limiter:\n    check_interval: 5s\n    limit_mib: 4000\n    spike_limit_mib: 500\n\n  # Data sources: traces\n  resource:\n    attributes:\n      - key: cloud.zone\n        value: zone-1\n        action: upsert\n      - key: k8s.cluster.name\n        from_attribute: k8s-cluster\n        action: insert\n      - key: redundant-attribute\n        action: delete\n\n  # Data sources: traces\n  probabilistic_sampler:\n    hash_seed: 22\n    sampling_percentage: 15\n\n  # Data sources: traces\n  span:\n    name:\n      to_attributes:\n        rules:\n          - ^/api/v1/document/(?P<documentId>.*)/update$\n      from_attributes: [db.svc, operation]\n      separator: '::'\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HTTP Server with OpenTelemetry\nDESCRIPTION: Updates the main.go file to integrate OpenTelemetry by initializing the SDK, adding instrumentation to the HTTP server, and handling graceful shutdown. Uses otelhttp to automatically capture telemetry for HTTP requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\"\n)\n\nfunc main() {\n\tif err := run(); err != nil {\n\t\tlog.Fatalln(err)\n\t}\n}\n\nfunc run() (err error) {\n\t// Handle SIGINT (CTRL+C) gracefully.\n\tctx, stop := signal.NotifyContext(context.Background(), os.Interrupt)\n\tdefer stop()\n\n\t// Set up OpenTelemetry.\n\totelShutdown, err := setupOTelSDK(ctx)\n\tif err != nil {\n\t\treturn\n\t}\n\t// Handle shutdown properly so nothing leaks.\n\tdefer func() {\n\t\terr = errors.Join(err, otelShutdown(context.Background()))\n\t}()\n\n\t// Start HTTP server.\n\tsrv := &http.Server{\n\t\tAddr:         \":8080\",\n\t\tBaseContext:  func(_ net.Listener) context.Context { return ctx },\n\t\tReadTimeout:  time.Second,\n\t\tWriteTimeout: 10 * time.Second,\n\t\tHandler:      newHTTPHandler(),\n\t}\n\tsrvErr := make(chan error, 1)\n\tgo func() {\n\t\tsrvErr <- srv.ListenAndServe()\n\t}()\n\n\t// Wait for interruption.\n\tselect {\n\tcase err = <-srvErr:\n\t\t// Error when starting HTTP server.\n\t\treturn\n\tcase <-ctx.Done():\n\t\t// Wait for first CTRL+C.\n\t\t// Stop receiving signal notifications as soon as possible.\n\t\tstop()\n\t}\n\n\t// When Shutdown is called, ListenAndServe immediately returns ErrServerClosed.\n\terr = srv.Shutdown(context.Background())\n\treturn\n}\n\nfunc newHTTPHandler() http.Handler {\n\tmux := http.NewServeMux()\n\n\t// handleFunc is a replacement for mux.HandleFunc\n\t// which enriches the handler's HTTP instrumentation with the pattern as the http.route.\n\thandleFunc := func(pattern string, handlerFunc func(http.ResponseWriter, *http.Request)) {\n\t\t// Configure the \"http.route\" for the HTTP instrumentation.\n\t\thandler := otelhttp.WithRouteTag(pattern, http.HandlerFunc(handlerFunc))\n\t\tmux.Handle(pattern, handler)\n\t}\n\n\t// Register handlers.\n\thandleFunc(\"/rolldice/\", rolldice)\n\thandleFunc(\"/rolldice/{player}\", rolldice)\n\n\t// Add HTTP instrumentation for the whole server.\n\thandler := otelhttp.NewHandler(mux, \"/\")\n\treturn handler\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Span Links in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to create links between spans that are causally related but not in a parent-child relationship.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ntracer = trace.get_tracer(__name__)\n\nwith tracer.start_as_current_span(\"span-1\"):\n    # Do something that 'span-1' tracks.\n    ctx = trace.get_current_span().get_span_context()\n    link_from_span_1 = trace.Link(ctx)\n\nwith tracer.start_as_current_span(\"span-2\", links=[link_from_span_1]):\n    # Do something that 'span-2' tracks.\n    # The link in 'span-2' is causally associated it with the 'span-1',\n    # but it is not a child span.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Enabling Only Specific Node.js Instrumentation Libraries\nDESCRIPTION: This YAML configuration enables only specific Node.js instrumentation libraries using the OTEL_NODE_ENABLED_INSTRUMENTATIONS environment variable. It specifically enables only HTTP and NestJS Core instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\n# ... other fields skipped from this example\nspec:\n  # ... other fields skipped from this example\n  nodejs:\n    env:\n      - name: OTEL_NODE_ENABLED_INSTRUMENTATIONS\n        value: http,nestjs-core # comma-separated list of the instrumentation package names without the `@opentelemetry/instrumentation-` prefix.\n```\n\n----------------------------------------\n\nTITLE: Implementing Baggage Operations in OpenTelemetry Java\nDESCRIPTION: Demonstrates comprehensive usage of OpenTelemetry's Baggage API including creating, modifying, and accessing baggage entries in a distributed context. Shows baggage manipulation methods, context management, and scope handling for distributed tracing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static io.opentelemetry.context.Context.current;\n\nimport io.opentelemetry.api.baggage.Baggage;\nimport io.opentelemetry.api.baggage.BaggageEntry;\nimport io.opentelemetry.api.baggage.BaggageEntryMetadata;\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.context.Scope;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\npublic class BaggageUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void baggageUsage() {\n    // Access current baggage with Baggage.current()\n    // output => context baggage: {}\n    Baggage currentBaggage = Baggage.current();\n    System.out.println(\"current baggage: \" + asString(currentBaggage));\n    // ...or from a Context\n    currentBaggage = Baggage.fromContext(current());\n\n    // Baggage has a variety of methods for manipulating and reading data.\n    // Convert to builder and add entries:\n    Baggage newBaggage =\n        Baggage.current().toBuilder()\n            .put(\"shopId\", \"abc123\")\n            .put(\"shopName\", \"opentelemetry-demo\", BaggageEntryMetadata.create(\"metadata\"))\n            .build();\n    // ...or uncomment to start from empty\n    // newBaggage = Baggage.empty().toBuilder().put(\"shopId\", \"abc123\").build();\n    // output => new baggage: {shopId=abc123(), shopName=opentelemetry-demo(metadata)}\n    System.out.println(\"new baggage: \" + asString(newBaggage));\n    // Read an entry:\n    String shopIdValue = newBaggage.getEntryValue(\"shopId\");\n    // Inspect size:\n    int size = newBaggage.size();\n    boolean isEmpty = newBaggage.isEmpty();\n    // Convert to map representation:\n    Map<String, BaggageEntry> map = newBaggage.asMap();\n    // Iterate through entries:\n    newBaggage.forEach((s, baggageEntry) -> {});\n\n    // The current baggage still doesn't contain the new entries\n    // output => context baggage: {}\n    System.out.println(\"current baggage: \" + asString(Baggage.current()));\n\n    // Calling Baggage.makeCurrent() sets Baggage.current() to the baggage until the scope is\n    // closed, upon which Baggage.current() is restored to the state prior to when\n    // Baggage.makeCurrent() was called.\n    try (Scope scope = newBaggage.makeCurrent()) {\n      // The current baggage now contains the added value\n      // output => context baggage: {shopId=abc123(), shopName=opentelemetry-demo(metadata)}\n      System.out.println(\"current baggage: \" + asString(Baggage.current()));\n    }\n\n    // The current baggage no longer contains the new entries:\n    // output => context baggage: {}\n    System.out.println(\"current baggage: \" + asString(Baggage.current()));\n  }\n\n  private static String asString(Baggage baggage) {\n    return baggage.asMap().entrySet().stream()\n        .map(\n            entry ->\n                String.format(\n                    \"%s=%s(%s)\",\n                    entry.getKey(),\n                    entry.getValue().getValue(),\n                    entry.getValue().getMetadata().getValue()))\n        .collect(Collectors.joining(\", \", \"{\", \"}\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Span Links in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to create links between spans that are causally related but not in a parent-child relationship.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ntracer = trace.get_tracer(__name__)\n\nwith tracer.start_as_current_span(\"span-1\"):\n    # Do something that 'span-1' tracks.\n    ctx = trace.get_current_span().get_span_context()\n    link_from_span_1 = trace.Link(ctx)\n\nwith tracer.start_as_current_span(\"span-2\", links=[link_from_span_1]):\n    # Do something that 'span-2' tracks.\n    # The link in 'span-2' is causally associated it with the 'span-1',\n    # but it is not a child span.\n    pass\n```\n\n----------------------------------------\n\nTITLE: Configuring OpAMP Supervisor in YAML\nDESCRIPTION: Configuration file for the OpAMP supervisor that defines the connection to the OpAMP server and specifies the OpenTelemetry Collector binary to manage.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/management.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nserver:\n  endpoint: ws://127.0.0.1:4320/v1/opamp\n\nagent:\n  executable: $OTEL_COLLECTOR_BINARY\n```\n\n----------------------------------------\n\nTITLE: Recording Exceptions in TypeScript\nDESCRIPTION: Demonstrates how to record exceptions and set span status when errors occur.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nimport opentelemetry, { SpanStatusCode } from '@opentelemetry/api';\n\n// ...\n\ntry {\n  doWork();\n} catch (ex) {\n  if (ex instanceof Error) {\n    span.recordException(ex);\n  }\n  span.setStatus({ code: SpanStatusCode.ERROR });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Metrics in Go\nDESCRIPTION: This code snippet demonstrates how to initialize resources, a metrics exporter, and a metrics provider in a Go application using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n)\n\nfunc main() {\n\t// Create resource.\n\tres, err := newResource()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Create a meter provider.\n\t// You can pass this instance directly to your instrumented code if it\n\t// accepts a MeterProvider instance.\n\tmeterProvider, err := newMeterProvider(res)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// Handle shutdown properly so nothing leaks.\n\tdefer func() {\n\t\tif err := meterProvider.Shutdown(context.Background()); err != nil {\n\t\t\tlog.Println(err)\n\t\t}\n\t}()\n\n\t// Register as global meter provider so that it can be used via otel.Meter\n\t// and accessed using otel.GetMeterProvider.\n\t// Most instrumentation libraries use the global meter provider as default.\n\t// If the global meter provider is not set then a no-op implementation\n\t// is used, which fails to generate data.\n\totel.SetMeterProvider(meterProvider)\n}\n\nfunc newResource() (*resource.Resource, error) {\n\treturn resource.Merge(resource.Default(),\n\t\tresource.NewWithAttributes(semconv.SchemaURL,\n\t\t\tsemconv.ServiceName(\"my-service\"),\n\t\t\tsemconv.ServiceVersion(\"0.1.0\"),\n\t\t))\n}\n\nfunc newMeterProvider(res *resource.Resource) (*metric.MeterProvider, error) {\n\tmetricExporter, err := stdoutmetric.New()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmeterProvider := metric.NewMeterProvider(\n\t\tmetric.WithResource(res),\n\t\tmetric.WithReader(metric.NewPeriodicReader(metricExporter,\n\t\t\t// Default is 1m. Set to 3s for demonstrative purposes.\n\t\t\tmetric.WithInterval(3*time.Second))),\n\t)\n\treturn meterProvider, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Trace Provider in Go\nDESCRIPTION: Sets up the OpenTelemetry TraceProvider with OTLP exporter for sending trace data over gRPC. Configures resource information and sets the global trace provider and text map propagator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc initTracerProvider() *sdktrace.TracerProvider {\n    ctx := context.Background()\n\n    exporter, err := otlptracegrpc.New(ctx)\n    if err != nil {\n        log.Fatalf(\"OTLP Trace gRPC Creation: %v\", err)\n    }\n    tp := sdktrace.NewTracerProvider(\n        sdktrace.WithBatcher(exporter),\n        sdktrace.WithResource(initResource()),\n    )\n    otel.SetTracerProvider(tp)\n    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n    return tp\n}\n```\n\n----------------------------------------\n\nTITLE: Main Function for the otelsql Instrumented Client\nDESCRIPTION: The main function of the client application that initializes OpenTelemetry providers, connects to the database using otelsql instrumentation, and runs SQL queries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\tctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt)\n\tdefer cancel()\n\n\tconn, err := initConn(ctx)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tshutdownTracerProvider, err := initTracerProvider(ctx, conn)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif err := shutdownTracerProvider(ctx); err != nil {\n\t\t\tlog.Fatalf(\"failed to shutdown TracerProvider: %s\", err)\n\t\t}\n\t}()\n\n\tshutdownMeterProvider, err := initMeterProvider(ctx, conn)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer func() {\n\t\tif err := shutdownMeterProvider(ctx); err != nil {\n\t\t\tlog.Fatalf(\"failed to shutdown MeterProvider: %s\", err)\n\t\t}\n\t}()\n\n\tdb := connectDB()\n\tdefer db.Close()\n\n\terr = runSQLQuery(ctx, db)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(\"Example finished\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spans in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to create spans using the context manager approach, which automatically handles span lifecycle management.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef do_work():\n    with tracer.start_as_current_span(\"span-name\") as span:\n        # do some work that 'span' will track\n        print(\"doing some work...\")\n        # When the 'with' block goes out of scope, 'span' is closed for you\n```\n\n----------------------------------------\n\nTITLE: Working with OpenTelemetry Interface in Java\nDESCRIPTION: Shows how to access core OpenTelemetry components including TracerProvider, MeterProvider, LoggerProvider, and ContextPropagators from an OpenTelemetry instance. This is the primary way to access telemetry functionality when using dependency injection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.logs.LoggerProvider;\nimport io.opentelemetry.api.metrics.MeterProvider;\nimport io.opentelemetry.api.trace.TracerProvider;\nimport io.opentelemetry.context.propagation.ContextPropagators;\n\npublic class OpenTelemetryUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void openTelemetryUsage(OpenTelemetry openTelemetry) {\n    // Access TracerProvider, MeterProvider, LoggerProvider, ContextPropagators\n    TracerProvider tracerProvider = openTelemetry.getTracerProvider();\n    MeterProvider meterProvider = openTelemetry.getMeterProvider();\n    LoggerProvider loggerProvider = openTelemetry.getLogsBridge();\n    ContextPropagators propagators = openTelemetry.getPropagators();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom OpenTelemetry Instrumentation in Go Dice Rolling Application\nDESCRIPTION: A complete implementation of a dice rolling HTTP handler with OpenTelemetry instrumentation. The code showcases tracing, metrics collection, and structured logging using OpenTelemetry's API. It tracks dice rolls, adds custom attributes, and maintains context propagation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"strconv\"\n\n\t\"go.opentelemetry.io/contrib/bridges/otelslog\"\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/attribute\"\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\nconst name = \"go.opentelemetry.io/otel/example/dice\"\n\nvar (\n\ttracer = otel.Tracer(name)\n\tmeter  = otel.Meter(name)\n\tlogger = otelslog.NewLogger(name)\n\trollCnt metric.Int64Counter\n)\n\nfunc init() {\n\tvar err error\n\trollCnt, err = meter.Int64Counter(\"dice.rolls\",\n\t\tmetric.WithDescription(\"The number of rolls by roll value\"),\n\t\tmetric.WithUnit(\"{roll}\"))\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc rolldice(w http.ResponseWriter, r *http.Request) {\n\tctx, span := tracer.Start(r.Context(), \"roll\")\n\tdefer span.End()\n\n\troll := 1 + rand.Intn(6)\n\n\tvar msg string\n\tif player := r.PathValue(\"player\"); player != \"\" {\n\t\tmsg = fmt.Sprintf(\"%s is rolling the dice\", player)\n\t} else {\n\t\tmsg = \"Anonymous player is rolling the dice\"\n\t}\n\tlogger.InfoContext(ctx, msg, \"result\", roll)\n\n\trollValueAttr := attribute.Int(\"roll.value\", roll)\n\tspan.SetAttributes(rollValueAttr)\n\trollCnt.Add(ctx, 1, metric.WithAttributes(rollValueAttr))\n\n\tresp := strconv.Itoa(roll) + \"\\n\"\n\tif _, err := io.WriteString(w, resp); err != nil {\n\t\tlog.Printf(\"Write failed: %v\\n\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans\nDESCRIPTION: C# code showing how to create nested spans to represent parent-child relationships between operations. This is useful for tracking sub-operations within a larger operation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void ParentOperation(Tracer tracer)\n{\n    using var parentSpan = tracer.StartActiveSpan(\"parent-span\");\n\n    // Do some work tracked by parentSpan\n\n    ChildOperation(tracer);\n\n    // Finish up work tracked by parentSpan again\n}\n\npublic static void ChildOperation(Tracer tracer)\n{\n    using var childSpan = tracer.StartActiveSpan(\"child-span\");\n\n    // Track work in ChildOperation with childSpan\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TracingProducerInterceptor for Kafka Producer\nDESCRIPTION: Code to configure the TracingProducerInterceptor in Kafka producer properties to automatically create a \"send\" span each time a message is sent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nprops.setProperty(ProducerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingProducerInterceptor.class.getName());\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Instrumentation with Request Hook in TypeScript\nDESCRIPTION: Example of configuring the Express instrumentation with a request hook in TypeScript to enrich spans with additional HTTP attributes like method and URL, demonstrating advanced instrumentation customization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Span } from '@opentelemetry/api';\nimport {\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_URL,\n} from '@opentelemetry/semantic-conventions';\nimport {\n  ExpressInstrumentation,\n  ExpressLayerType,\n  ExpressRequestInfo,\n} from '@opentelemetry/instrumentation-express';\n\nconst expressInstrumentation = new ExpressInstrumentation({\n  requestHook: function (span: Span, info: ExpressRequestInfo) {\n    if (info.layerType === ExpressLayerType.REQUEST_HANDLER) {\n      span.setAttribute(SEMATTRS_HTTP_METHOD, info.request.method);\n      span.setAttribute(SEMATTRS_HTTP_URL, info.request.baseUrl);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenTelemetry Collector Configuration\nDESCRIPTION: Example YAML configuration to disable metrics and logging pipelines, and non-OTLP receivers in the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nconfig:\n  receivers:\n    jaeger: null\n    prometheus: null\n    zipkin: null\n  service:\n    pipelines:\n      traces:\n        receivers:\n          - otlp\n      metrics: null\n      logs: null\nports:\n  jaeger-compact:\n    enabled: false\n  jaeger-thrift:\n    enabled: false\n  jaeger-grpc:\n    enabled: false\n  zipkin:\n    enabled: false\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTelemetry Pipeline Configuration\nDESCRIPTION: YAML configuration example showing how to define a basic pipeline for traces with OTLP and Zipkin receivers, memory limiter and batch processors, and corresponding exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines: # section that can contain multiple subsections, one per pipeline\n    traces: # type of the pipeline\n      receivers: [otlp, zipkin]\n      processors: [memory_limiter, batch]\n      exporters: [otlp, zipkin]\n```\n\n----------------------------------------\n\nTITLE: Configuring Log4j2 with OpenTelemetry Appender\nDESCRIPTION: XML configuration for integrating Log4j2 with OpenTelemetry. This setup adds the OpenTelemetry appender to log4j2.xml and configures root logger to use it for all log levels. The configuration includes the necessary package declaration for the OpenTelemetry appender.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/additional-instrumentations.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" packages=\"io.opentelemetry.instrumentation.log4j.appender.v2_17\">\n    <Appenders>\n        <OpenTelemetry name=\"OpenTelemetryAppender\"/>\n    </Appenders>\n    <Loggers>\n        <Root>\n            <AppenderRef ref=\"OpenTelemetryAppender\" level=\"All\"/>\n        </Root>\n    </Loggers>\n</Configuration>\n```\n\n----------------------------------------\n\nTITLE: Instrumenting the HTTP Server with OpenTelemetry\nDESCRIPTION: Updated version of the HTTP server with OpenTelemetry instrumentation added to track spans for incoming requests. It initializes a tracer provider and creates spans for each request that captures the HTTP method and path.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nuse std::convert::Infallible;\nuse std::net::SocketAddr;\nuse std::sync::OnceLock;\n\nuse http_body_util::Full;\nuse hyper::body::Bytes;\nuse hyper::server::conn::http1;\nuse hyper::service::service_fn;\nuse hyper::Method;\nuse hyper::{Request, Response};\nuse hyper_util::rt::TokioIo;\nuse opentelemetry::global::{self, BoxedTracer};\nuse opentelemetry::trace::{Span, SpanKind, Status, Tracer};\nuse opentelemetry_sdk::trace::SdkTracerProvider;\nuse opentelemetry_stdout::SpanExporter;\nuse rand::Rng;\nuse tokio::net::TcpListener;\n\nasync fn roll_dice(_: Request<hyper::body::Incoming>) -> Result<Response<Full<Bytes>>, Infallible> {\n    let random_number = rand::rng().random_range(1..=6);\n    Ok(Response::new(Full::new(Bytes::from(\n        random_number.to_string(),\n    ))))\n}\n\nasync fn handle(req: Request<hyper::body::Incoming>) -> Result<Response<Full<Bytes>>, Infallible> {\n    let tracer = get_tracer();\n\n    let mut span = tracer\n        .span_builder(format!(\"{} {}\", req.method(), req.uri().path()))\n        .with_kind(SpanKind::Server)\n        .start(tracer);\n\n    match (req.method(), req.uri().path()) {\n        (&Method::GET, \"/rolldice\") => roll_dice(req).await,\n        _ => {\n            span.set_status(Status::Ok);\n            Ok(Response::builder()\n                .status(404)\n                .body(Full::new(Bytes::from(\"Not Found\")))\n                .unwrap())\n        }\n    }\n}\n\nfn get_tracer() -> &'static BoxedTracer {\n    static TRACER: OnceLock<BoxedTracer> = OnceLock::new();\n    TRACER.get_or_init(|| global::tracer(\"dice_server\"))\n}\n\nfn init_tracer_provider() {\n    let provider = SdkTracerProvider::builder()\n        .with_simple_exporter(SpanExporter::default())\n        .build();\n    global::set_tracer_provider(provider);\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {\n    let addr = SocketAddr::from(([127, 0, 0, 1], 8080));\n\n    let listener = TcpListener::bind(addr).await?;\n    init_tracer_provider();\n\n    loop {\n        let (stream, _) = listener.accept().await?;\n        let io = TokioIo::new(stream);\n        tokio::task::spawn(async move {\n            if let Err(err) = http1::Builder::new()\n                .serve_connection(io, service_fn(handle))\n                .await\n            {\n                eprintln!(\"Error serving connection: {:?}\", err);\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Observable Gauge with Callback Registration in Python\nDESCRIPTION: This snippet demonstrates how to create an observable gauge metric instrument with the callback function registered. The gauge will track config versions across different configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nmeter.create_observable_gauge(\n    \"config.version\",\n    callbacks=[scrape_config_versions],\n    description=\"The active config version for each configuration\",\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in Main Function\nDESCRIPTION: Go code snippet showing how to set up the Jaeger tracer provider in the main function of a Go application. It includes error handling and global OpenTelemetry configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n    tp, tpErr: = tracing.JaegerTracerProvider()\n    if tpErr != nil {\n        log.Fatal(tpErr)\n    }\n    otel.SetTracerProvider(tp)\n    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext {}, propagation.Baggage {}))\n    connectMongo()\n    setupWebServer()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Observable Gauge for Memory Usage in Go\nDESCRIPTION: This snippet demonstrates how to use an Observable Gauge to measure and report memory usage of heap objects in a Go application using OpenTelemetry. It utilizes the runtime package to read memory statistics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_19\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"runtime\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\nfunc init() {\n\tif _, err := meter.Int64ObservableGauge(\n\t\t\"memory.heap\",\n\t\tmetric.WithDescription(\n\t\t\t\"Memory usage of the allocated heap objects.\",\n\t\t),\n\t\tmetric.WithUnit(\"By\"),\n\t\tmetric.WithInt64Callback(func(_ context.Context, o metric.Int64Observer) error {\n\t\t\tvar m runtime.MemStats\n\t\t\truntime.ReadMemStats(&m)\n\t\t\to.Observe(int64(m.HeapAlloc))\n\t\t\treturn nil\n\t\t}),\n\t); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python Packages\nDESCRIPTION: Commands to install the required OpenTelemetry API and SDK packages via pip.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Accessing Global OpenTelemetry Providers in PHP\nDESCRIPTION: Code snippet showing how to obtain globally registered OpenTelemetry providers (tracer, meter, logger) for use in PHP applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n$tracerProvider = \\OpenTelemetry\\API\\Globals::tracerProvider();\n$meterProvider = \\OpenTelemetry\\API\\Globals::meterProvider();\n$loggerProvider = \\OpenTelemetry\\API\\Globals::loggerProvider();\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Flask Dice Roller with OpenTelemetry Tracing\nDESCRIPTION: Initial implementation of a Flask application with OpenTelemetry tracing. Creates a tracer and implements a basic dice rolling endpoint with span creation and attribute setting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ntracer = trace.get_tracer(\"diceroller.tracer\")\n\napp = Flask(__name__)\n\n@app.route(\"/rolldice\")\ndef roll_dice():\n    return str(roll())\n\ndef roll():\n    # This creates a new span that's the child of the current one\n    with tracer.start_as_current_span(\"roll\") as rollspan:\n        res = randint(1, 6)\n        rollspan.set_attribute(\"roll.value\", res)\n        return res\n```\n\n----------------------------------------\n\nTITLE: Testing OpenTelemetry Instrumentation with a Custom Exporter in Java\nDESCRIPTION: Shows how to create a unit test for OpenTelemetry instrumentation using a custom TestExporter that collects exported spans for validation. The example includes setup of a test SDK and pattern for span validation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void checkInstrumentation() {\n  SpanExporter exporter = new TestExporter();\n\n  Tracer tracer = OpenTelemetrySdk.builder()\n           .setTracerProvider(SdkTracerProvider.builder()\n              .addSpanProcessor(SimpleSpanProcessor.create(exporter)).build()).build()\n           .getTracer(\"test\");\n  // run test ...\n\n  validateSpans(exporter.exportedSpans);\n}\n\nclass TestExporter implements SpanExporter {\n  public final List<SpanData> exportedSpans = Collections.synchronizedList(new ArrayList<>());\n\n  @Override\n  public CompletableResultCode export(Collection<SpanData> spans) {\n    exportedSpans.addAll(spans);\n    return CompletableResultCode.ofSuccess();\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Span Events in JavaScript\nDESCRIPTION: Demonstrates how to add events to spans, including events with additional attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nspan.addEvent('Doing something');\n\nconst result = doWork();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nspan.addEvent('some log', {\n  'log.severity': 'error',\n  'log.message': 'Data not found',\n  'request.id': requestId,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Backend Exporters\nDESCRIPTION: YAML configuration for adding custom exporters to the OpenTelemetry Collector configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nopentelemetry-collector:\n  config:\n    exporters:\n      otlphttp/example:\n        endpoint: <your-endpoint-url>\n\n    service:\n      pipelines:\n        traces:\n          exporters: [spanmetrics, otlphttp/example]\n```\n\n----------------------------------------\n\nTITLE: Using Histograms for Measuring API Response Time in JavaScript\nDESCRIPTION: JavaScript version of using a histogram metric to measure API response times in an Express application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_59\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst express = require('express');\n\nconst app = express();\n\napp.get('/', (_req, _res) => {\n  const histogram = myMeter.createHistogram('task.duration');\n  const startTime = new Date().getTime();\n\n  // do some work in an API call\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n\n  // Record the duration of the task operation\n  histogram.record(executionTime);\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping Kafka Consumer with OpenTelemetry Tracing\nDESCRIPTION: Example showing how to wrap a Kafka consumer instance with a tracing-enabled wrapper using KafkaTelemetry. This enables automatic span creation when consuming messages from Kafka.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nConsumer<String, String> tracingConsumer = telemetry.wrap(this.consumer);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom SpanExporter in Java OpenTelemetry SDK\nDESCRIPTION: Shows how to implement a custom SpanExporter by implementing the SpanExporter interface. This example demonstrates the required methods: export() for sending span data, flush() for processing queued spans, and shutdown() for cleanup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.common.CompletableResultCode;\nimport io.opentelemetry.sdk.trace.data.SpanData;\nimport io.opentelemetry.sdk.trace.export.SpanExporter;\nimport java.util.Collection;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class CustomSpanExporter implements SpanExporter {\n\n  private static final Logger logger = Logger.getLogger(CustomSpanExporter.class.getName());\n\n  @Override\n  public CompletableResultCode export(Collection<SpanData> spans) {\n    // Export the records. Typically, records are sent out of process via some network protocol, but\n    // we simply log for illustrative purposes.\n    logger.log(Level.INFO, \"Exporting spans\");\n    spans.forEach(span -> logger.log(Level.INFO, \"Span: \" + span));\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode flush() {\n    // Export any records which have been queued up but not yet exported.\n    logger.log(Level.INFO, \"flushing\");\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode shutdown() {\n    // Shutdown the exporter and cleanup any resources.\n    logger.log(Level.INFO, \"shutting down\");\n    return CompletableResultCode.ofSuccess();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing OpenTelemetry Instrumentation with a Custom Exporter in Java\nDESCRIPTION: Shows how to create a unit test for OpenTelemetry instrumentation using a custom TestExporter that collects exported spans for validation. The example includes setup of a test SDK and pattern for span validation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Test\npublic void checkInstrumentation() {\n  SpanExporter exporter = new TestExporter();\n\n  Tracer tracer = OpenTelemetrySdk.builder()\n           .setTracerProvider(SdkTracerProvider.builder()\n              .addSpanProcessor(SimpleSpanProcessor.create(exporter)).build()).build()\n           .getTracer(\"test\");\n  // run test ...\n\n  validateSpans(exporter.exportedSpans);\n}\n\nclass TestExporter implements SpanExporter {\n  public final List<SpanData> exportedSpans = Collections.synchronizedList(new ArrayList<>());\n\n  @Override\n  public CompletableResultCode export(Collection<SpanData> spans) {\n    exportedSpans.addAll(spans);\n    return CompletableResultCode.ofSuccess();\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SdkLoggerProvider in Java\nDESCRIPTION: Demonstrates the programmatic configuration of SdkLoggerProvider with resource settings, log record processor, and log limits. Sets up batch processing for OTLP HTTP log record export.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.logs.SdkLoggerProvider;\nimport io.opentelemetry.sdk.resources.Resource;\n\npublic class SdkLoggerProviderConfig {\n  public static SdkLoggerProvider create(Resource resource) {\n    return SdkLoggerProvider.builder()\n        .setResource(resource)\n        .addLogRecordProcessor(\n            LogRecordProcessorConfig.batchLogRecordProcessor(\n                LogRecordExporterConfig.otlpHttpLogRecordExporter(\"http://localhost:4318/v1/logs\")))\n        .setLogLimits(LogLimitsConfig::logLimits)\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Autoconfigured OpenTelemetry SDK in Java\nDESCRIPTION: This code snippet demonstrates how to automatically configure the OpenTelemetry SDK components using the autoconfigure module. It initializes the SDK and returns an instance of OpenTelemetrySdk.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\nimport io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk;\n\npublic class AutoConfiguredSdk {\n  public static OpenTelemetrySdk autoconfiguredSdk() {\n    return AutoConfiguredOpenTelemetrySdk.initialize().getOpenTelemetrySdk();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using semantic attribute conventions with OpenTelemetry in Java\nDESCRIPTION: Demonstrates how to use OpenTelemetry's semantic conventions through generated constants. Shows implementation with both stable and incubating semantic attributes including HTTP and Server attributes, providing standardized telemetry collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.semconv.HttpAttributes;\nimport io.opentelemetry.semconv.ServerAttributes;\nimport io.opentelemetry.semconv.incubating.HttpIncubatingAttributes;\n\npublic class SemanticAttributesUsage {\n  public static void semanticAttributesUsage() {\n    // Semantic attributes are organized by top-level domain and whether they are stable or\n    // incubating.\n    // For example:\n    // - stable attributes starting with http.* are in the HttpAttributes class.\n    // - stable attributes starting with server.* are in the ServerAttributes class.\n    // - incubating attributes starting with http.* are in the HttpIncubatingAttributes class.\n    // Attribute keys which define an enumeration of values are accessible in an inner\n    // {AttributeKey}Values class.\n    // For example, the enumeration of http.request.method values is available in the\n    // HttpAttributes.HttpRequestMethodValues class.\n    Attributes attributes =\n        Attributes.builder()\n            .put(HttpAttributes.HTTP_REQUEST_METHOD, HttpAttributes.HttpRequestMethodValues.GET)\n            .put(HttpAttributes.HTTP_ROUTE, \"/users/:id\")\n            .put(ServerAttributes.SERVER_ADDRESS, \"example\")\n            .put(ServerAttributes.SERVER_PORT, 8080L)\n            .put(HttpIncubatingAttributes.HTTP_RESPONSE_BODY_SIZE, 1024)\n            .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in Erlang/Elixir\nDESCRIPTION: Shows how to set the status of a span, typically used to indicate error conditions. Includes the necessary include directive for Erlang and demonstrates setting an error status with a message.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: erlang\nCODE:\n```\n-include_lib(\"opentelemetry_api/include/opentelemetry.hrl\").\n\n?set_status(?OTEL_STATUS_ERROR, <<\"this is not ok\">>)\n```\n\nLANGUAGE: elixir\nCODE:\n```\nTracer.set_status(:error, \"this is not ok\")\n```\n\n----------------------------------------\n\nTITLE: Extracting and Activating Trace Context in Java\nDESCRIPTION: Demonstrates how to extract trace context from an incoming request, create a server span with the extracted context as parent, and make it active for correlating nested telemetry. Includes proper error handling and span finalization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// extract the context\nContext extractedContext = propagator.extract(Context.current(), httpExchange, getter);\nSpan span = tracer.spanBuilder(\"receive\")\n            .setSpanKind(SpanKind.SERVER)\n            .setParent(extractedContext)\n            .startSpan();\n\n// make span active so any nested telemetry is correlated\ntry (Scope unused = span.makeCurrent()) {\n  userCode();\n} catch (Exception e) {\n  span.recordException(e);\n  span.setStatus(StatusCode.ERROR);\n  throw e;\n} finally {\n  span.end();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Java Agent for Auto-instrumentation\nDESCRIPTION: This Dockerfile environment variable configuration adds the OpenTelemetry Java agent to the application. The agent is set via JAVA_TOOL_OPTIONS to automatically instrument libraries like Kafka and configure the OpenTelemetry SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/fraud-detection.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing in ASP.NET Core\nDESCRIPTION: C# code to configure OpenTelemetry tracing in an ASP.NET Core application. It sets up tracing with ASP.NET Core instrumentation and a console exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\n// These can come from a config file, constants file, etc.\nvar serviceName = \"MyCompany.MyProduct.MyService\";\nvar serviceVersion = \"1.0.0\";\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// Configure important OpenTelemetry settings, the console exporter, and instrumentation library\nbuilder.Services.AddOpenTelemetry().WithTracing(tcb =>\n{\n    tcb\n    .AddSource(serviceName)\n    .SetResourceBuilder(\n        ResourceBuilder.CreateDefault()\n            .AddService(serviceName: serviceName, serviceVersion: serviceVersion))\n    .AddAspNetCoreInstrumentation()\n    .AddConsoleExporter();\n});\n```\n\n----------------------------------------\n\nTITLE: Checking OpenTelemetry Operator Logs for Auto-Instrumentation Errors\nDESCRIPTION: Shell command to view OpenTelemetry Operator logs for troubleshooting auto-instrumentation issues.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl logs -l app.kubernetes.io/name=opentelemetry-operator --container manager -n opentelemetry-operator-system --follow\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in JavaScript with OpenTelemetry\nDESCRIPTION: JavaScript implementation of nested spans where rollOnce spans are created as children of the parent rollTheDice span. Each dice roll is traced independently while maintaining the parent-child relationship in the trace hierarchy.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfunction rollOnce(i, min, max) {\n  return tracer.startActiveSpan(`rollOnce:${i}`, (span) => {\n    const result = Math.floor(Math.random() * (max - min + 1) + min);\n    span.end();\n    return result;\n  });\n}\n\nfunction rollTheDice(rolls, min, max) {\n  // Create a span. A span must be closed.\n  return tracer.startActiveSpan('rollTheDice', (parentSpan) => {\n    const result = [];\n    for (let i = 0; i < rolls; i++) {\n      result.push(rollOnce(i, min, max));\n    }\n    // Be sure to end the span!\n    parentSpan.end();\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Instrumenting gRPC Server with OpenTelemetry in Go\nDESCRIPTION: Configures a gRPC server with OpenTelemetry instrumentation by adding a StatsHandler to automatically trace all incoming requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nsrv := grpc.NewServer(\n    grpc.StatsHandler(otelgrpc.NewServerHandler()),\n)\n```\n\n----------------------------------------\n\nTITLE: Importing Semantic Conventions in JavaScript with OpenTelemetry\nDESCRIPTION: Imports semantic attribute constants in JavaScript. These constants provide standardized attribute names that conform to the OpenTelemetry specification.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  SEMATTRS_CODE_FUNCTION,\n  SEMATTRS_CODE_FILEPATH,\n} = require('@opentelemetry/semantic-conventions');\n```\n\n----------------------------------------\n\nTITLE: Using Histograms for Measuring API Response Time in TypeScript\nDESCRIPTION: Example of using a histogram metric to measure the distribution of API response times in an Express application in TypeScript.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_58\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport express from 'express';\n\nconst app = express();\n\napp.get('/', (_req, _res) => {\n  const histogram = myMeter.createHistogram('task.duration');\n  const startTime = new Date().getTime();\n\n  // do some work in an API call\n\n  const endTime = new Date().getTime();\n  const executionTime = endTime - startTime;\n\n  // Record the duration of the task operation\n  histogram.record(executionTime);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in OpenTelemetry Python\nDESCRIPTION: Shows how to create parent-child span relationships to represent nested operations, with automatic scope and span management.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef do_work():\n    with tracer.start_as_current_span(\"parent\") as parent:\n        # do some work that 'parent' tracks\n        print(\"doing some work...\")\n        # Create a nested span to track nested work\n        with tracer.start_as_current_span(\"child\") as child:\n            # do some work that 'child' tracks\n            print(\"doing some nested work...\")\n            # the nested span is closed when it's out of scope\n\n        # This span is also closed when it goes out of scope\n```\n\n----------------------------------------\n\nTITLE: Using Decorators for Span Creation in OpenTelemetry Python\nDESCRIPTION: Demonstrates using the span decorator pattern to simplify code by automatically creating spans that track the execution of entire functions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@tracer.start_as_current_span(\"do_work\")\ndef do_work():\n    print(\"doing some work...\")\n```\n\n----------------------------------------\n\nTITLE: Configuring MetricReaders in OpenTelemetry Java\nDESCRIPTION: Demonstrates how to configure built-in MetricReaders including PeriodicMetricReader with a custom interval and PrometheusHttpServer with host and port configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.exporter.prometheus.PrometheusHttpServer;\nimport io.opentelemetry.sdk.metrics.export.MetricExporter;\nimport io.opentelemetry.sdk.metrics.export.MetricReader;\nimport io.opentelemetry.sdk.metrics.export.PeriodicMetricReader;\nimport java.time.Duration;\n\npublic class MetricReaderConfig {\n  public static MetricReader periodicMetricReader(MetricExporter metricExporter) {\n    return PeriodicMetricReader.builder(metricExporter).setInterval(Duration.ofSeconds(60)).build();\n  }\n\n  public static MetricReader prometheusMetricReader() {\n    return PrometheusHttpServer.builder().setHost(\"localhost\").setPort(9464).build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Automatically Instrumenting a Flask Route in Python\nDESCRIPTION: This snippet demonstrates an automatically instrumented Flask route. The route handler is defined without any explicit instrumentation code, relying on the OpenTelemetry auto-instrumentation agent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/server_request\")\ndef server_request():\n    print(request.args.get(\"param\"))\n    return \"served\"\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Gin Web Framework with OpenTelemetry in Go\nDESCRIPTION: Go code showing how to instrument a Gin web server with OpenTelemetry. It includes setting up middleware for tracing and handling a GET request to fetch todos from MongoDB.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nfunc startWebServer() {\n    r: = gin.Default()\n    //Gin OpenTelemetry instrumentation\n    r.Use(otelgin.Middleware(\"todo-service\"))\n    r.GET(\"/todo\", func(c * gin.Context) {\n        collection: = client.Database(\"todo\").Collection(\"todos\")\n        //make sure to pass c.Request.Context() as the context and not c itself\n        cur, findErr: = collection.Find(c.Request.Context(), bson.D {})\n        if findErr != nil {\n            c.AbortWithError(500, findErr)\n            return\n        }\n        results: = make([] interface {}, 0)\n        curErr: = cur.All(c, & results)\n        if curErr != nil {\n            c.AbortWithError(500, curErr)\n            return\n        }\n        c.JSON(http.StatusOK, results)\n    })\n    _ = r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Configuration Structure in Go\nDESCRIPTION: Go code that defines the configuration structure for the example connector. It includes parameter validation to ensure the attribute_name is not empty.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage exampleconnector\n\nimport \"fmt\"\n\ntype Config struct {\n    AttributeName string `mapstructure:\"attribute_name\"`\n}\n\nfunc (c *Config) Validate() error {\n    if c.AttributeName == \"\" {\n        return fmt.Errorf(\"attribute_name must not be empty\")\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Exporter Configuration\nDESCRIPTION: YAML configuration showing how to define multiple OTLP exporters with different endpoints.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp/1:\n    endpoint: example.com:4317\n  otlp/2:\n    endpoint: localhost:14317\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Thrift Exporter in Python\nDESCRIPTION: Python code to configure the OpenTelemetry Zipkin JSON/Thrift exporter for traces. Sets up a TracerProvider with BatchSpanProcessor to send spans to a Zipkin backend.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.zipkin.json import ZipkinExporter\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\n\nresource = Resource(attributes={\n    SERVICE_NAME: \"your-service-name\"\n})\n\nzipkin_exporter = ZipkinExporter(endpoint=\"http://localhost:9411/api/v2/spans\")\n\nprovider = TracerProvider(resource=resource)\nprocessor = BatchSpanProcessor(zipkin_exporter)\nprovider.add_span_processor(processor)\ntrace.set_tracer_provider(provider)\n```\n\n----------------------------------------\n\nTITLE: Using Decorators for Span Creation in OpenTelemetry Python\nDESCRIPTION: Demonstrates using the span decorator pattern to simplify code by automatically creating spans that track the execution of entire functions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@tracer.start_as_current_span(\"do_work\")\ndef do_work():\n    print(\"doing some work...\")\n```\n\n----------------------------------------\n\nTITLE: Generating Self-Signed Certificates for OpenTelemetry Collector (Shell)\nDESCRIPTION: Shell commands to generate self-signed certificates using cfssl. This creates a Certificate Authority (CA) and a client certificate signed by the CA.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncfssl genkey -initca csr.json | cfssljson -bare ca\ncfssl gencert -ca ca.pem -ca-key ca-key.pem csr.json | cfssljson -bare cert\n```\n\n----------------------------------------\n\nTITLE: Configuring Debug Exporter in YAML\nDESCRIPTION: Example configuration for setting up a debug exporter with Zipkin receiver to inspect data processing in the Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/troubleshooting.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  zipkin:\nexporters:\n  debug:\nservice:\n  pipelines:\n    traces:\n      receivers: [zipkin]\n      processors: []\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in OpenTelemetry Python\nDESCRIPTION: Shows how to create parent-child span relationships to represent nested operations, with automatic scope and span management.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef do_work():\n    with tracer.start_as_current_span(\"parent\") as parent:\n        # do some work that 'parent' tracks\n        print(\"doing some work...\")\n        # Create a nested span to track nested work\n        with tracer.start_as_current_span(\"child\") as child:\n            # do some work that 'child' tracks\n            print(\"doing some nested work...\")\n            # the nested span is closed when it's out of scope\n\n        # This span is also closed when it goes out of scope\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Attributes in JavaScript with OpenTelemetry\nDESCRIPTION: Applies semantic conventions to a span by using the standardized attribute keys. This example adds code.function and code.filepath attributes to help identify the source of the span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nconst doWork = () => {\n  tracer.startActiveSpan('app.doWork', (span) => {\n    span.setAttribute(SEMATTRS_CODE_FUNCTION, 'doWork');\n    span.setAttribute(SEMATTRS_CODE_FILEPATH, __filename);\n\n    // Do some work...\n\n    span.end();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with a Connector\nDESCRIPTION: YAML configuration that defines how data flows through the OpenTelemetry Collector with an example connector. It sets up trace and metric pipelines connected by the 'example' connector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nexporters:\n  # NOTE: Prior to v0.86.0 use the `logging` instead of `debug`.\n  debug:\n\nconnectors:\n  example:\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [example]\n    metrics:\n      receivers: [example]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK for ASP.NET Core\nDESCRIPTION: Complete OpenTelemetry SDK initialization including tracing, metrics, and logging configuration for an ASP.NET Core application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Logs;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\nvar serviceName = \"dice-server\";\nvar serviceVersion = \"1.0.0\";\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(resource => resource.AddService(\n        serviceName: serviceName,\n        serviceVersion: serviceVersion))\n    .WithTracing(tracing => tracing\n        .AddSource(serviceName)\n        .AddAspNetCoreInstrumentation()\n        .AddConsoleExporter())\n    .WithMetrics(metrics => metrics\n        .AddMeter(serviceName)\n        .AddConsoleExporter());\n\nbuilder.Logging.AddOpenTelemetry(options => options\n    .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\n        serviceName: serviceName,\n        serviceVersion: serviceVersion))\n    .AddConsoleExporter());\n\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.MapControllers();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Recording Exceptions in JavaScript\nDESCRIPTION: Shows how to record exceptions and set span status when errors occur in JavaScript.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\n\n// ...\n\ntry {\n  doWork();\n} catch (ex) {\n  if (ex instanceof Error) {\n    span.recordException(ex);\n  }\n  span.setStatus({ code: opentelemetry.SpanStatusCode.ERROR });\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Trace Connector Implementation in Go\nDESCRIPTION: The full implementation of the trace connector including all required imports, structure definitions, and method implementations required for processing trace data and converting it to metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage exampleconnector\n\nimport (\n    \"context\"\n    \"fmt\"\n\n    \"go.uber.org/zap\"\n\n    \"go.opentelemetry.io/collector/component\"\n    \"go.opentelemetry.io/collector/consumer\"\n    \"go.opentelemetry.io/collector/pdata/pmetric\"\n    \"go.opentelemetry.io/collector/pdata/ptrace\"\n)\n\n\n// schema for connector\ntype connectorImp struct {\n    config Config\n    metricsConsumer consumer.Metrics\n    logger *zap.Logger\n    // Include these parameters if a specific implementation for the Start and Shutdown function are not needed\n    component.StartFunc\n\tcomponent.ShutdownFunc\n}\n\n// newConnector is a function to create a new connector\nfunc newConnector(logger *zap.Logger, config component.Config) (*connectorImp, error) {\n    logger.Info(\"Building exampleconnector connector\")\n    cfg := config.(*Config)\n\n    return &connectorImp{\n    config: *cfg,\n    logger: logger,\n    }, nil\n}\n\n\n// Capabilities implements the consumer interface.\nfunc (c *connectorImp) Capabilities() consumer.Capabilities {\n    return consumer.Capabilities{MutatesData: false}\n}\n\n// ConsumeTraces method is called for each instance of a trace sent to the connector\nfunc (c *connectorImp) ConsumeTraces(ctx context.Context, td ptrace.Traces) error {\n    // loop through the levels of spans of the one trace consumed\n    for i := 0; i < td.ResourceSpans().Len(); i++ {\n        resourceSpan := td.ResourceSpans().At(i)\n\n        for j := 0; j < resourceSpan.ScopeSpans().Len(); j++ {\n            scopeSpan := resourceSpan.ScopeSpans().At(j)\n\n            for k := 0; k < scopeSpan.Spans().Len(); k++ {\n                span := scopeSpan.Spans().At(k)\n                attrs := span.Attributes()\n                mapping := attrs.AsRaw()\n                for key, _ := range mapping {\n                    if key == c.config.AttributeName {\n                        // create metric only if span of trace had the specific attribute\n                        metrics := pmetric.NewMetrics()\n                        return c.metricsConsumer.ConsumeMetrics(ctx, metrics)\n                    }\n                }\n            }\n        }\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Span Context Management in OpenTelemetry Python\nDESCRIPTION: Shows how to manually handle span context propagation including injection and extraction of context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/cookbook.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace, context\nfrom opentelemetry.trace import NonRecordingSpan, SpanContext, TraceFlags\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor\nfrom opentelemetry.trace.propagation.tracecontext import TraceContextTextMapPropagator\n\n# Set up a simple processor to write spans out to the console so we can see what's happening.\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\ntracer = trace.get_tracer(\"my.tracer\")\n\n# A TextMapPropagator works with any dict-like object as its Carrier by default. You can also implement custom getters and setters.\nwith tracer.start_as_current_span('first-trace'):\n    carrier = {}\n    # Write the current context into the carrier.\n    TraceContextTextMapPropagator().inject(carrier)\n\n# The below might be in a different thread, on a different machine, etc.\n# As a typical example, it would be on a different microservice and the carrier would\n# have been forwarded via HTTP headers.\n\n# Extract the trace context from the carrier.\n# Here's what a typical carrier might look like, as it would have been injected above.\ncarrier = {'traceparent': '00-a9c3b99a95cc045e573e163c3ac80a77-d99d251a8caecd06-01'}\n# Then we use a propagator to get a context from it.\nctx = TraceContextTextMapPropagator().extract(carrier=carrier)\n\n# Instead of extracting the trace context from the carrier, if you have a SpanContext\n# object already you can get a trace context from it like this.\nspan_context = SpanContext(\n    trace_id=2604504634922341076776623263868986797,\n    span_id=5213367945872657620,\n    is_remote=True,\n    trace_flags=TraceFlags(0x01)\n)\nctx = trace.set_span_in_context(NonRecordingSpan(span_context))\n\n# Now there are a few ways to make use of the trace context.\n\n# You can pass the context object when starting a span.\nwith tracer.start_as_current_span('child', context=ctx) as span:\n    span.set_attribute('primes', [2, 3, 5, 7])\n\n# Or you can make it the current context, and then the next span will pick it up.\n# The returned token lets you restore the previous context.\ntoken = context.attach(ctx)\ntry:\n    with tracer.start_as_current_span('child') as span:\n        span.set_attribute('evens', [2, 4, 6, 8])\nfinally:\n    context.detach(token)\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in OpenTelemetry C#\nDESCRIPTION: Shows how to set the status of a span to indicate errors in OpenTelemetry C#. This is typically used to specify that a span has not completed successfully by setting StatusCode.Error.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nusing var span = tracer.StartActiveSpan(\"SayHello\");\n\ntry\n{\n\t// do something\n}\ncatch (Exception ex)\n{\n    span.SetStatus(new(StatusCode.Error, \"Something bad happened!\"));\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status and Recording Exceptions in PHP with OpenTelemetry\nDESCRIPTION: Shows how to set the status of a span and record exceptions in PHP using OpenTelemetry. It demonstrates proper error handling and exception recording within a span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n$span = $tracer->spanBuilder(\"my-span\")->startSpan();\ntry {\n  // do something that could fail\n  throw new \\Exception('uh-oh');\n} catch (\\Throwable $t) {\n  $span->setStatus(\\OpenTelemetry\\API\\Trace\\StatusCode::STATUS_ERROR, \"Something bad happened!\");\n  //This will capture things like the current stack trace in the span.\n  $span->recordException($t, ['exception.escaped' => true]);\n  throw $t;\n} finally {\n  $span->end();\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracing in C++\nDESCRIPTION: This function initializes the OpenTelemetry SDK for tracing, setting up an exporter, processor, and global trace provider. It also sets the global text map propagator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/currency.md#2025-04-09_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nvoid initTracer()\n{\n  auto exporter = opentelemetry::exporter::otlp::OtlpGrpcExporterFactory::Create();\n  auto processor =\n      opentelemetry::sdk::trace::SimpleSpanProcessorFactory::Create(std::move(exporter));\n  std::vector<std::unique_ptr<opentelemetry::sdk::trace::SpanProcessor>> processors;\n  processors.push_back(std::move(processor));\n  std::shared_ptr<opentelemetry::sdk::trace::TracerContext> context =\n      opentelemetry::sdk::trace::TracerContextFactory::Create(std::move(processors));\n  std::shared_ptr<opentelemetry::trace::TracerProvider> provider =\n      opentelemetry::sdk::trace::TracerProviderFactory::Create(context);\n // Set the global trace provider\n  opentelemetry::trace::Provider::SetTracerProvider(provider);\n\n // set global propagator\n  opentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(\n      opentelemetry::nostd::shared_ptr<opentelemetry::context::propagation::TextMapPropagator>(\n          new opentelemetry::trace::propagation::HttpTraceContext()));\n}\n```\n\n----------------------------------------\n\nTITLE: Updating /etc/hosts for Traefik in OpenTelemetry Demo App\nDESCRIPTION: Adds entries to /etc/hosts to enable access to Traefik-exposed services and dashboard for the OpenTelemetry Demo App.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\n127.0.0.1   traefik.localhost\n127.0.0.1   otel-demo.localhost\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to attach key/value pairs to spans to provide additional context about the operation being tracked.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ncurrent_span = trace.get_current_span()\n\ncurrent_span.set_attribute(\"operation.value\", 1)\ncurrent_span.set_attribute(\"operation.name\", \"Saying hello!\")\ncurrent_span.set_attribute(\"operation.other-stuff\", [1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HTTPX Client for Automatic Tracing\nDESCRIPTION: Python code demonstrating how to apply the HTTPX instrumentor to automatically trace HTTP requests for both synchronous and asynchronous HTTPX clients.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/libraries.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom opentelemetry.instrumentation.httpx import HTTPXClientInstrumentor\n\nurl = \"https://some.url/get\"\nHTTPXClientInstrumentor().instrument()\n\nwith httpx.Client() as client:\n     response = client.get(url)\n\nasync with httpx.AsyncClient() as client:\n     response = await client.get(url)\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Tracing Hook in React Native\nDESCRIPTION: A comprehensive custom hook that sets up OpenTelemetry instrumentation for React Native. It initializes a TracerProvider, configures OTLP export, registers propagators, and sets up auto-instrumentation for network requests with appropriate workarounds for React Native compatibility.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/react-native-app.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n} from '@opentelemetry/core';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { XMLHttpRequestInstrumentation } from '@opentelemetry/instrumentation-xml-http-request';\nimport { FetchInstrumentation } from '@opentelemetry/instrumentation-fetch';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { Resource } from '@opentelemetry/resources';\nimport {\n  ATTR_DEVICE_ID,\n  ATTR_OS_NAME,\n  ATTR_OS_VERSION,\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions/incubating';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\nimport getLocalhost from '@/utils/Localhost';\nimport { useEffect, useState } from 'react';\nimport {\n  getDeviceId,\n  getSystemVersion,\n  getVersion,\n} from 'react-native-device-info';\nimport { Platform } from 'react-native';\nimport { SessionIdProcessor } from '@/utils/SessionIdProcessor';\n\nconst Tracer = async () => {\n  const localhost = await getLocalhost();\n\n  const resource = new Resource({\n    [ATTR_SERVICE_NAME]: 'react-native-app',\n    [ATTR_OS_NAME]: Platform.OS,\n    [ATTR_OS_VERSION]: getSystemVersion(),\n    [ATTR_SERVICE_VERSION]: getVersion(),\n    [ATTR_DEVICE_ID]: getDeviceId(),\n  });\n\n  const provider = new WebTracerProvider({\n    resource,\n    spanProcessors: [\n      new BatchSpanProcessor(\n        new OTLPTraceExporter({\n          url: `http://${localhost}:${process.env.EXPO_PUBLIC_FRONTEND_PROXY_PORT}/otlp-http/v1/traces`,\n        }),\n        {\n          scheduledDelayMillis: 500,\n        },\n      ),\n      new SessionIdProcessor(),\n    ],\n  });\n\n  provider.register({\n    propagator: new CompositePropagator({\n      propagators: [\n        new W3CBaggagePropagator(),\n        new W3CTraceContextPropagator(),\n      ],\n    }),\n  });\n\n  registerInstrumentations({\n    instrumentations: [\n      // Some tiptoeing required here, propagateTraceHeaderCorsUrls is required to make the instrumentation\n      // work in the context of a mobile app even though we are not making CORS requests. `clearTimingResources` must\n      // be turned off to avoid using the web-only Performance API\n      new FetchInstrumentation({\n        propagateTraceHeaderCorsUrls: /.*/,\n        clearTimingResources: false,\n      }),\n\n      // The React Native implementation of fetch is simply a polyfill on top of XMLHttpRequest:\n      // https://github.com/facebook/react-native/blob/7ccc5934d0f341f9bc8157f18913a7b340f5db2d/packages/react-native/Libraries/Network/fetch.js#L17\n      // Because of this when making requests using `fetch` there will an additional span created for the underlying\n      // request made with XMLHttpRequest. Since in this demo calls to /api/ are made using fetch, turn off\n      // instrumentation for that path to avoid the extra spans.\n      new XMLHttpRequestInstrumentation({\n        ignoreUrls: [/\\/api\\/.*/],\n      }),\n    ],\n  });\n};\n\nexport interface TracerResult {\n  loaded: boolean;\n}\n\nexport const useTracer = (): TracerResult => {\n  const [loaded, setLoaded] = useState<boolean>(false);\n\n  useEffect(() => {\n    if (!loaded) {\n      Tracer()\n        .catch(() => console.warn('failed to setup tracer'))\n        .finally(() => setLoaded(true));\n    }\n  }, [loaded]);\n\n  return {\n    loaded,\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Context Propagation\nDESCRIPTION: Shows how to propagate trace context across service boundaries using W3C Trace Context HTTP headers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n// set global propagator\nopentelemetry::context::propagation::GlobalTextMapPropagator::SetGlobalPropagator(\n    nostd::shared_ptr<opentelemetry::context::propagation::TextMapPropagator>(\n        new opentelemetry::trace::propagation::HttpTraceContext()));\n\n// get global propagator\nHttpTextMapCarrier<opentelemetry::ext::http::client::Headers> carrier;\nauto propagator =\n    opentelemetry::context::propagation::GlobalTextMapPropagator::GetGlobalPropagator();\n\n//inject context to headers\nauto current_ctx = opentelemetry::context::RuntimeContext::GetCurrent();\npropagator->Inject(carrier, current_ctx);\n\n//Extract headers to context\nauto current_ctx = opentelemetry::context::RuntimeContext::GetCurrent();\nauto new_context = propagator->Extract(carrier, current_ctx);\nauto remote_span = opentelemetry::trace::propagation::GetSpan(new_context);\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in Ruby with OpenTelemetry\nDESCRIPTION: Set the status of a span to indicate success or failure of the operation it represents.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\ncurrent_span = OpenTelemetry::Trace.current_span\n\nbegin\n  1/0 # something that obviously fails\nrescue\n  current_span.status = OpenTelemetry::Trace::Status.error(\"error message here!\")\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Events to Spans in PHP with OpenTelemetry\nDESCRIPTION: Shows how to add events to spans in PHP using OpenTelemetry. It demonstrates adding simple events and events with attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_19\n\nLANGUAGE: php\nCODE:\n```\n$span->addEvent(\"Init\");\n...\n$span->addEvent(\"End\");\n\n$eventAttributes = Attributes::create([\n    \"operation\" => \"calculate-pi\",\n    \"result\" => 3.14159,\n]);\n$span->addEvent(\"End Computation\", $eventAttributes);\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Activities with Tags\nDESCRIPTION: Implementation of rollOnce method that creates nested activities and adds tags for detailed tracing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nprivate int rollOnce()\n{\n    using (var childActivity = activitySource.StartActivity(\"rollOnce\"))\n    {\n      int result;\n\n      result = Random.Shared.Next(min, max + 1);\n      childActivity?.SetTag(\"dicelib.rolled\", result);\n\n      return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP HTTP/Protobuf Exporters in C++\nDESCRIPTION: Implements initialization of OpenTelemetry exporters using HTTP/protobuf protocol. Includes setup for tracers, metrics, and loggers with HTTP endpoints. Configures batch processing for spans and periodic exporting for metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"opentelemetry/exporters/otlp/otlp_http_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_http_exporter_options.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/batch_span_processor_factory.h\"\n#include \"opentelemetry/sdk/trace/batch_span_processor_options.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider_factory.h\"\n#include \"opentelemetry/trace/provider.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider.h\"\n\n#include \"opentelemetry/exporters/otlp/otlp_http_metric_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_http_metric_exporter_options.h\"\n#include \"opentelemetry/metrics/provider.h\"\n#include \"opentelemetry/sdk/metrics/aggregation/default_aggregation.h\"\n#include \"opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader.h\"\n#include \"opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader_factory.h\"\n#include \"opentelemetry/sdk/metrics/meter_context_factory.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider_factory.h\"\n\n#include \"opentelemetry/exporters/otlp/otlp_http_log_record_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_http_log_record_exporter_options.h\"\n#include \"opentelemetry/logs/provider.h\"\n#include \"opentelemetry/sdk/logs/logger_provider_factory.h\"\n#include \"opentelemetry/sdk/logs/processor.h\"\n#include \"opentelemetry/sdk/logs/simple_log_record_processor_factory.h\"\n\nnamespace trace_api = opentelemetry::trace;\nnamespace trace_sdk = opentelemetry::sdk::trace;\n\nnamespace metric_sdk = opentelemetry::sdk::metrics;\nnamespace metrics_api = opentelemetry::metrics;\n\nnamespace otlp = opentelemetry::exporter::otlp;\n\nnamespace logs_api = opentelemetry::logs;\nnamespace logs_sdk = opentelemetry::sdk::logs;\n\n\nvoid InitTracer()\n{\n  trace_sdk::BatchSpanProcessorOptions bspOpts{};\n  otlp::OtlpHttpExporterOptions opts;\n  opts.url = \"http://localhost:4318/v1/traces\";\n  auto exporter  = otlp::OtlpHttpExporterFactory::Create(opts);\n  auto processor = trace_sdk::BatchSpanProcessorFactory::Create(std::move(exporter), bspOpts);\n  std::shared_ptr<trace_api::TracerProvider> provider = trace_sdk::TracerProviderFactory::Create(std::move(processor));\n  trace_api::Provider::SetTracerProvider(provider);\n}\n\nvoid InitMetrics()\n{\n  otlp::OtlpHttpMetricExporterOptions opts;\n  opts.url = \"http://localhost:4318/v1/metrics\";\n  auto exporter = otlp::OtlpHttpMetricExporterFactory::Create(opts);\n  metric_sdk::PeriodicExportingMetricReaderOptions reader_options;\n  reader_options.export_interval_millis = std::chrono::milliseconds(1000);\n  reader_options.export_timeout_millis  = std::chrono::milliseconds(500);\n  auto reader = metric_sdk::PeriodicExportingMetricReaderFactory::Create(std::move(exporter), reader_options);\n  auto context = metric_sdk::MeterContextFactory::Create();\n  context->AddMetricReader(std::move(reader));\n  auto u_provider = metric_sdk::MeterProviderFactory::Create(std::move(context));\n  std::shared_ptr<metrics_api::MeterProvider> provider(std::move(u_provider));\n  metrics_api::Provider::SetMeterProvider(provider);\n}\n\nvoid InitLogger()\n{\n  otlp::OtlpHttpLogRecordExporterOptions opts;\n  opts.url = \"http://localhost:4318/v1/logs\";\n  auto exporter  = otlp::OtlpHttpLogRecordExporterFactory::Create(opts);\n  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));\n  std::shared_ptr<logs_api::LoggerProvider> provider =\n      logs_sdk::LoggerProviderFactory::Create(std::move(processor));\n  logs_api::Provider::SetLoggerProvider(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenLIT with Direct OTLP Endpoint\nDESCRIPTION: Python code snippet showing how to initialize OpenLIT by directly providing the OpenTelemetry Collector endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/llm-observability.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport openlit\n\nopenlit.init(\n  otlp_endpoint=\"YOUR_OTELCOL_URL:4318\",\n)\n```\n\n----------------------------------------\n\nTITLE: Renaming Metric Labels with Regex in OpenTelemetry Collector\nDESCRIPTION: Example showing how to use the metrics transform processor with regular expressions to rename a metric label across all metrics, changing 'cluster_name' to 'cluster-name'.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  metricstransform/clustername:\n    transforms:\n      - include: ^.*$\n        match_type: regexp\n        action: update\n        operations:\n          - action: update_label\n            label: cluster_name\n            new_label: cluster-name\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Views in OpenTelemetry Go SDK\nDESCRIPTION: This snippet demonstrates how to create and register custom views in OpenTelemetry Go SDK. It includes examples of renaming instruments, changing aggregation types, and filtering attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_21\n\nLANGUAGE: go\nCODE:\n```\nview := metric.NewView(metric.Instrument{\n\tName: \"latency\",\n\tScope: instrumentation.Scope{\n\t\tName:    \"http\",\n\t\tVersion: \"0.34.0\",\n\t},\n}, metric.Stream{Name: \"request.latency\"})\n\nmeterProvider := metric.NewMeterProvider(\n\tmetric.WithView(view),\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nview := metric.NewView(\n\tmetric.Instrument{\n\t\tName:  \"latency\",\n\t\tScope: instrumentation.Scope{Name: \"http\"},\n\t},\n\tmetric.Stream{\n\t\tAggregation: metric.AggregationBase2ExponentialHistogram{\n\t\t\tMaxSize:  160,\n\t\t\tMaxScale: 20,\n\t\t},\n\t},\n)\n\nmeterProvider := metric.NewMeterProvider(\n\tmetric.WithView(view),\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nview := metric.NewView(\n  metric.Instrument{\n    Name:  \"latency\",\n    Scope: instrumentation.Scope{Name: \"http\"},\n  },\n  metric.Stream{Aggregation: metric.AggregationDrop{}},\n)\n\nmeterProvider := metric.NewMeterProvider(\n\tmetric.WithView(view),\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nview := metric.NewView(\n  metric.Instrument{\n    Name:  \"latency\",\n    Scope: instrumentation.Scope{Name: \"http\"},\n  },\n  metric.Stream{AttributeFilter: attribute.NewDenyKeysFilter(\"http.request.method\")},\n)\n\nmeterProvider := metric.NewMeterProvider(\n\tmetric.WithView(view),\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nview := metric.NewView(\n  metric.Instrument{Name: \"*.ms\"},\n  metric.Stream{Unit: \"ms\"},\n)\n\nmeterProvider := metric.NewMeterProvider(\n\tmetric.WithView(view),\n)\n```\n\nLANGUAGE: go\nCODE:\n```\nre := regexp.MustCompile(`[._](ms|byte)$`)\nvar view metric.View = func(i metric.Instrument) (metric.Stream, bool) {\n\t// In a custom View function, you need to explicitly copy\n\t// the name, description, and unit.\n\ts := metric.Stream{Name: i.Name, Description: i.Description, Unit: i.Unit}\n\t// Any instrument that does not have a unit suffix defined, but has a\n\t// dimensional unit defined, update the name with a unit suffix.\n\tif re.MatchString(i.Name) {\n\t\treturn s, false\n\t}\n\tswitch i.Unit {\n\tcase \"ms\":\n\t\ts.Name += \".ms\"\n\tcase \"By\":\n\t\ts.Name += \".byte\"\n\tdefault:\n\t\treturn s, false\n\t}\n\treturn s, true\n}\n\nmeterProvider := metric.NewMeterProvider(\n\tmetric.WithView(view),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in TypeScript with OpenTelemetry\nDESCRIPTION: Adds custom attributes to a span in TypeScript. Attributes provide additional context about the operation being traced, such as the value rolled in this dice example.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nfunction rollOnce(i: number, min: number, max: number) {\n  return tracer.startActiveSpan(`rollOnce:${i}`, (span: Span) => {\n    const result = Math.floor(Math.random() * (max - min + 1) + min);\n\n    // Add an attribute to the span\n    span.setAttribute('dicelib.rolled', result.toString());\n\n    span.end();\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Flask Dice Roller with Metrics and Logging\nDESCRIPTION: Extended implementation adding metrics collection using a counter instrument and structured logging. Includes player tracking and enhanced telemetry data collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry import metrics\n\nfrom random import randint\nfrom flask import Flask, request\nimport logging\n\ntracer = trace.get_tracer(\"diceroller.tracer\")\nmeter = metrics.get_meter(\"diceroller.meter\")\n\nroll_counter = meter.create_counter(\n    \"dice.rolls\",\n    description=\"The number of rolls by roll value\",\n)\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n@app.route(\"/rolldice\")\ndef roll_dice():\n    with tracer.start_as_current_span(\"roll\") as roll_span:\n        player = request.args.get('player', default = None, type = str)\n        result = str(roll())\n        roll_span.set_attribute(\"roll.value\", result)\n        roll_counter.add(1, {\"roll.value\": result})\n        if player:\n            logger.warn(\"{} is rolling the dice: {}\", player, result)\n        else:\n            logger.warn(\"Anonymous player is rolling the dice: %s\", result)\n        return result\n\ndef roll():\n    return randint(1, 6)\n```\n\n----------------------------------------\n\nTITLE: Implementing Activity Creation for Dice Rolls\nDESCRIPTION: Implementation of rollTheDice method that creates and uses activities for tracing dice roll operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic List<int> rollTheDice(int rolls)\n{\n    List<int> results = new List<int>();\n\n    // It is recommended to create activities, only when doing operations that are worth measuring independently.\n    // Too many activities makes it harder to visualize in tools like Jaeger.\n    using (var myActivity = activitySource.StartActivity(\"rollTheDice\"))\n    {\n        for (int i = 0; i < rolls; i++)\n        {\n            results.Add(rollOnce());\n        }\n\n        return results;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Instrumentation Configuration\nDESCRIPTION: Configuration for enabling OpenTelemetry SDK with console span exporter in Node.js applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n// instrumentation.js\nconst { NodeSDK } = require('@opentelemetry/sdk-node');\nconst {\n  ConsoleSpanExporter,\n  SimpleSpanProcessor,\n} = require('@opentelemetry/sdk-trace-node');\n\nconst sdk = new NodeSDK({\n  spanProcessors: [new SimpleSpanProcessor(new ConsoleSpanExporter())],\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in OpenTelemetry Python\nDESCRIPTION: Shows how to explicitly set the status of a span, particularly useful for error handling scenarios.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.trace import Status, StatusCode\n\ncurrent_span = trace.get_current_span()\n\ntry:\n    # something that might fail\nexcept:\n    current_span.set_status(Status(StatusCode.ERROR))\n```\n\n----------------------------------------\n\nTITLE: Creating OTLP Logs Exporter over HTTP in Go OpenTelemetry (Experimental)\nDESCRIPTION: Example of how to create an experimental OTLP logs exporter using the HTTP protocol with binary protobuf payloads. This exporter sends logs data to an OTLP endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/exporters.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n \t\"context\"\n\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp\"\n\t\"go.opentelemetry.io/otel/sdk/log\"\n)\n\nfunc newExporter(ctx context.Context) (log.Exporter, error) {\n\treturn otlploghttp.New(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Assigning Resources in OpenTelemetry Go\nDESCRIPTION: This snippet demonstrates how to create a Resource with attributes using semantic conventions and assign it to a TracerProvider. It uses the semconv package to ensure consistent attribute naming.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/resources.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nres := resource.NewWithAttributes(\n    semconv.SchemaURL,\n    semconv.ServiceNameKey.String(\"myService\"),\n    semconv.ServiceVersionKey.String(\"1.0.0\"),\n    semconv.ServiceInstanceIDKey.String(\"abcdef12345\"),\n)\n\nprovider := sdktrace.NewTracerProvider(\n    ...\n    sdktrace.WithResource(res),\n)\n```\n\n----------------------------------------\n\nTITLE: Adding Span Events in Go with OpenTelemetry\nDESCRIPTION: These code snippets demonstrate how to add span events with and without additional attributes using OpenTelemetry in Go.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nspan.AddEvent(\"prepared\")\n```\n\nLANGUAGE: go\nCODE:\n```\nspan.AddEvent(\"charged\",\n    trace.WithAttributes(attribute.String(\"app.payment.transaction.id\", txID)))\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Exporter in Python for Development and Debugging\nDESCRIPTION: Python code to set up a console exporter for both traces and metrics. This is useful for debugging instrumentation in development environments by outputting telemetry data to stdout.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\n\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor, ConsoleSpanExporter\n\nfrom opentelemetry import metrics\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader, ConsoleMetricExporter\n\n# Service name is required for most backends,\n# and although it's not necessary for console export,\n# it's good to set service name anyways.\nresource = Resource(attributes={\n    SERVICE_NAME: \"your-service-name\"\n})\n\ntracerProvider = TracerProvider(resource=resource)\nprocessor = BatchSpanProcessor(ConsoleSpanExporter())\ntracerProvider.add_span_processor(processor)\ntrace.set_tracer_provider(tracerProvider)\n\nreader = PeriodicExportingMetricReader(ConsoleMetricExporter())\nmeterProvider = MeterProvider(resource=resource, metric_readers=[reader])\nmetrics.set_meter_provider(meterProvider)\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK for Web Tracing in JavaScript\nDESCRIPTION: JavaScript code to initialize the OpenTelemetry SDK for web tracing, including resource creation, exporter setup, and tracer provider registration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\nconst {\n  defaultResource,\n  resourceFromAttributes,\n} = require('@opentelemetry/resources');\nconst {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} = require('@opentelemetry/semantic-conventions');\nconst { WebTracerProvider } = require('@opentelemetry/sdk-trace-web');\nconst {\n  ConsoleSpanExporter,\n  BatchSpanProcessor,\n} = require('@opentelemetry/sdk-trace-base');\n\nconst resource = defaultResource().merge(\n  resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: 'service-name-here',\n    [ATTR_SERVICE_VERSION]: '0.1.0',\n  }),\n);\n\nconst exporter = new ConsoleSpanExporter();\nconst processor = new BatchSpanProcessor(exporter);\n\nconst provider = new WebTracerProvider({\n  resource: resource,\n  spanProcessors: [processor],\n});\n\nprovider.register();\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in OpenTelemetry Python\nDESCRIPTION: Shows how to explicitly set the status of a span, particularly useful for error handling scenarios.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.trace import Status, StatusCode\n\ncurrent_span = trace.get_current_span()\n\ntry:\n    # something that might fail\nexcept:\n    current_span.set_status(Status(StatusCode.ERROR))\n```\n\n----------------------------------------\n\nTITLE: Creating Spans with Links in PHP using OpenTelemetry\nDESCRIPTION: Demonstrates how to create spans with links to other spans in PHP using OpenTelemetry. It shows linking to multiple parent spans and a remote span context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_20\n\nLANGUAGE: php\nCODE:\n```\n$span = $tracer->spanBuilder(\"span-with-links\")\n    ->addLink($parentSpan1->getContext())\n    ->addLink($parentSpan2->getContext())\n    ->addLink($parentSpan3->getContext())\n    ->addLink($remoteSpanContext)\n    ->startSpan();\n```\n\n----------------------------------------\n\nTITLE: Complete Frontend Tracer Implementation\nDESCRIPTION: Full implementation of the frontend tracer with web-specific configurations, OTLP export setup, and auto-instrumentation registration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/frontend.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  CompositePropagator,\n  W3CBaggagePropagator,\n  W3CTraceContextPropagator,\n} from '@opentelemetry/core';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { SimpleSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { getWebAutoInstrumentations } from '@opentelemetry/auto-instrumentations-web';\nimport { Resource } from '@opentelemetry/resources';\nimport { SEMRESATTRS_SERVICE_NAME } from '@opentelemetry/semantic-conventions';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-http';\n\nconst FrontendTracer = async () => {\n  const { ZoneContextManager } = await import('@opentelemetry/context-zone');\n\n  const provider = new WebTracerProvider({\n    resource: new Resource({\n      [SEMRESATTRS_SERVICE_NAME]: process.env.NEXT_PUBLIC_OTEL_SERVICE_NAME,\n    }),\n    spanProcessors: [new SimpleSpanProcessor(new OTLPTraceExporter())],\n  });\n\n  const contextManager = new ZoneContextManager();\n\n  provider.register({\n    contextManager,\n    propagator: new CompositePropagator({\n      propagators: [\n        new W3CBaggagePropagator(),\n        new W3CTraceContextPropagator(),\n      ],\n    }),\n  });\n\n  registerInstrumentations({\n    tracerProvider: provider,\n    instrumentations: [\n      getWebAutoInstrumentations({\n        '@opentelemetry/instrumentation-fetch': {\n          propagateTraceHeaderCorsUrls: /.*/,\n          clearTimingResources: true,\n          applyCustomAttributesOnSpan(span) {\n            span.setAttribute('app.synthetic_request', 'false');\n          },\n        },\n      }),\n    ],\n  });\n};\n\nexport default FrontendTracer;\n```\n\n----------------------------------------\n\nTITLE: Creating a Slim Framework HTTP Server for Dice Rolling\nDESCRIPTION: Implementation of a PHP application using the Slim framework that creates an HTTP server with a /rolldice endpoint. It uses the Dice class and logs rolls with Monolog.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Log\\LogLevel;\nuse Slim\\Factory\\AppFactory;\nuse Monolog\\Logger;\nuse Monolog\\Level;\nuse Monolog\\Handler\\StreamHandler;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nrequire('dice.php');\n\n$logger = new Logger('dice-server');\n$logger->pushHandler(new StreamHandler('php://stdout', Level::INFO));\n\n$app = AppFactory::create();\n\n$dice = new Dice();\n\n$app->get('/rolldice', function (Request $request, Response $response) use ($logger, $dice) {\n    $params = $request->getQueryParams();\n    if(isset($params['rolls'])) {\n        $result = $dice->roll($params['rolls']);\n        if (isset($params['player'])) {\n          $logger->info(\"A player is rolling the dice.\", ['player' => $params['player'], 'result' => $result]);\n        } else {\n          $logger->info(\"Anonymous player is rolling the dice.\", ['result' => $result]);\n        }\n        $response->getBody()->write(json_encode($result));\n    } else {\n        $response->withStatus(400)->getBody()->write(\"Please enter a number of rolls\");\n    }\n    return $response;\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Dice Library with OpenTelemetry in JavaScript\nDESCRIPTION: JavaScript version of the dice rolling library that acquires OpenTelemetry meter and tracer for instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_54\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*dice.js*/\nconst { trace, metrics } = require('@opentelemetry/api');\n\nconst tracer = trace.getTracer('dice-lib');\nconst meter = metrics.getMeter('dice-lib');\n\nfunction rollOnce(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction rollTheDice(rolls, min, max) {\n  const result = [];\n  for (let i = 0; i < rolls; i++) {\n    result.push(rollOnce(min, max));\n  }\n  return result;\n}\n\nmodule.exports = { rollTheDice };\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Go Modules\nDESCRIPTION: This command installs the necessary Go modules for OpenTelemetry metrics initialization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngo get go.opentelemetry.io/otel \\\n  go.opentelemetry.io/otel/exporters/stdout/stdoutmetric \\\n  go.opentelemetry.io/otel/sdk \\\n  go.opentelemetry.io/otel/sdk/metric\n```\n\n----------------------------------------\n\nTITLE: Visualizing OpenTelemetry Collector as Agent Deployment Models\nDESCRIPTION: This diagram illustrates different deployment patterns for running OpenTelemetry Collector as an agent, showing three scenarios: as a VM agent binary, as a Kubernetes sidecar container, and as a Kubernetes DaemonSet. It demonstrates how the agent collects telemetry data from applications and forwards it to backend systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_10\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  subgraph S1 [\"#nbsp;\"]\n      subgraph S2 [\"#nbsp;\"]\n        subgraph VM [VM]\n            PR[\"Process [Library]\"] -->|Push sample spans, metrics| AB[Agent Binary]\n            AB -->|Push configs| PR\n        end\n        subgraph K8s-pod [K8s Pod]\n            AC[\"`App Container [Library]`\"] --> AS[Agent Sidecar]\n            AS --> AC\n        end\n        subgraph K8s-node [K8s Node]\n            subgraph Pod1 [Pod]\n                APP1[App] ~~~ APP2[App]\n            end\n            subgraph Pod2 [Pod]\n                APP3[App] ~~~ APP4[App]\n            end\n            subgraph Pod3 [Pod]\n                APP5[App] ~~~ APP6[App]\n            end\n            subgraph AD [Agent Daemonset]\n            end\n            APP1 --> AD\n            APP2 --> AD\n            APP4 --> AD\n            APP6 --> AD\n        end\n      end\n      subgraph Backends [\"#nbsp;\"]\n          AB --> BE[Backend]\n          AS --> PRM[Prometheus Backend]\n          AS --> JA[Jaeger Backend]\n          AD --> JA\n      end\n  end\n\nclass S2 noLines;\nclass VM,K8s-pod,K8s-node,Pod1,Pod2,Pod3,Backends withLines;\nclass PR,AB,AC,AS,APP1,APP2,APP3,APP4,APP5,APP6,AD,BE,PRM,JA nodeStyle\nclassDef noLines stroke:#fff,stroke-width:4px,color:#000000;\nclassDef withLines fill:#fff,stroke:#4f62ad,color:#000000;\nclassDef nodeStyle fill:#e3e8fc,stroke:#4f62ad,color:#000000;\n```\n\n----------------------------------------\n\nTITLE: Building and Emitting Log Records in OpenTelemetry Java\nDESCRIPTION: Shows how to use LogRecordBuilder to construct and emit log records with various attributes and settings. The example demonstrates setting log body with different data types, severity levels, timestamps, and multiple attribute formats.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_16\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.common.AttributeKey;\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.common.Value;\nimport io.opentelemetry.api.logs.Logger;\nimport io.opentelemetry.api.logs.Severity;\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\npublic class LogRecordUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void logRecordUsage(Logger logger) {\n    logger\n        .logRecordBuilder()\n        // Set body. Note, setBody(..) is called multiple times for demonstration purposes but only\n        // the last call is used.\n        // Set the body to a string, syntactic sugar for setBody(Value.of(\"log message\"))\n        .setBody(\"log message\")\n        // Optionally set the body to a Value to record arbitrarily complex structured data\n        .setBody(Value.of(\"log message\"))\n        .setBody(Value.of(1L))\n        .setBody(Value.of(1.1))\n        .setBody(Value.of(true))\n        .setBody(Value.of(new byte[] {'a', 'b', 'c'}))\n        .setBody(Value.of(Value.of(\"entry1\"), Value.of(\"entry2\")))\n        .setBody(\n            Value.of(\n                Map.of(\n                    \"stringKey\",\n                    Value.of(\"entry1\"),\n                    \"mapKey\",\n                    Value.of(Map.of(\"stringKey\", Value.of(\"entry2\"))))))\n        // Set severity\n        .setSeverity(Severity.DEBUG)\n        .setSeverityText(\"debug\")\n        // Set timestamp\n        .setTimestamp(System.currentTimeMillis(), TimeUnit.MILLISECONDS)\n        // Optionally set the timestamp when the log was observed\n        .setObservedTimestamp(System.currentTimeMillis(), TimeUnit.MILLISECONDS)\n        // Set attributes\n        .setAttribute(AttributeKey.stringKey(\"com.acme.string-key\"), \"value\")\n        .setAttribute(AttributeKey.booleanKey(\"com.acme.bool-key\"), true)\n        .setAttribute(AttributeKey.longKey(\"com.acme.long-key\"), 1L)\n        .setAttribute(AttributeKey.doubleKey(\"com.acme.double-key\"), 1.1)\n        .setAttribute(\n            AttributeKey.stringArrayKey(\"com.acme.string-array-key\"),\n            Arrays.asList(\"value1\", \"value2\"))\n        .setAttribute(\n            AttributeKey.booleanArrayKey(\"come.acme.bool-array-key\"), Arrays.asList(true, false))\n        .setAttribute(AttributeKey.longArrayKey(\"come.acme.long-array-key\"), Arrays.asList(1L, 2L))\n        .setAttribute(\n            AttributeKey.doubleArrayKey(\"come.acme.double-array-key\"), Arrays.asList(1.1, 2.2))\n        .setAllAttributes(WIDGET_RED_CIRCLE)\n        // Uncomment to optionally explicitly set the context used to correlate with spans. If\n        // omitted, Context.current() is used.\n        // .setContext(context)\n        // Emit the log record\n        .emit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Dependency in mix.exs for Elixir\nDESCRIPTION: This code snippet demonstrates how to add the OpenTelemetry package as a dependency in the mix.exs file of an Elixir project. It uses a placeholder for the package name and version, which should be replaced with actual values.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/ecosystem/registry/quickinstall/hex.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:{{ .name }}, \"~> {{ .version }}\"}\n  ]\n```\n\n----------------------------------------\n\nTITLE: Setting Up TracerProvider in OpenTelemetry Node.js\nDESCRIPTION: This snippet shows how to properly set up a TracerProvider in OpenTelemetry Node.js. It demonstrates creating a NodeTracerProvider, adding a SimpleSpanProcessor with a ConsoleSpanExporter, and registering the provider.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport {\n  ConsoleSpanExporter,\n  SimpleSpanProcessor,\n} from '@opentelemetry/sdk-trace-base';\nconst provider = new NodeTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\nprovider.register();\n```\n\n----------------------------------------\n\nTITLE: Using SimpleSpanProcessor with OTLP gRPC Exporter in Python\nDESCRIPTION: Python code snippet showing how to use SimpleSpanProcessor instead of BatchSpanProcessor with an OTLP gRPC exporter. SimpleSpanProcessor exports spans immediately rather than batching them.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk.trace.export import SimpleSpanProcessor\n\nprocessor = SimpleSpanProcessor(OTLPSpanExporter(endpoint=\"your-endpoint-here\"))\n```\n\n----------------------------------------\n\nTITLE: Using UpDown Counters for Metrics in JavaScript\nDESCRIPTION: Shows how to create and use an UpDown counter that can both increment and decrement to measure cumulative values that go up or down.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_57\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst counter = myMeter.createUpDownCounter('events.counter');\n\n//...\n\ncounter.add(1);\n\n//...\n\ncounter.add(-1);\n```\n\n----------------------------------------\n\nTITLE: Installing OpenLIT Library\nDESCRIPTION: Command to install the OpenLIT Python library using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/llm-observability.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install openlit\n```\n\n----------------------------------------\n\nTITLE: Visualizing OpenTelemetry Demo Service Architecture with Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the microservices architecture of the OpenTelemetry Demo, showing the interactions between different services written in various programming languages. It includes gRPC and HTTP communications, as well as connections to databases and message queues.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/architecture.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\nsubgraph Service Diagram\naccounting(Accounting):::dotnet\nad(Ad):::java\ncache[(Cache<br/>&#40Valkey&#41)]\ncart(Cart):::dotnet\ncheckout(Checkout):::golang\ncurrency(Currency):::cpp\nemail(Email):::ruby\nflagd(Flagd):::golang\nflagd-ui(Flagd-ui):::typescript\nfraud-detection(Fraud Detection):::kotlin\nfrontend(Frontend):::typescript\nfrontend-proxy(Frontend Proxy <br/>&#40Envoy&#41):::cpp\nimage-provider(Image Provider <br/>&#40nginx&#41):::cpp\nload-generator([Load Generator]):::python\npayment(Payment):::javascript\nproduct-catalog(Product Catalog):::golang\nquote(Quote):::php\nrecommendation(Recommendation):::python\nshipping(Shipping):::rust\nqueue[(queue<br/>&#40Kafka&#41)]:::java\nreact-native-app(React Native App):::typescript\n\nad ---->|gRPC| flagd\n\ncheckout -->|gRPC| cart\ncheckout --->|TCP| queue\ncart --> cache\ncart -->|gRPC| flagd\n\ncheckout -->|gRPC| shipping\ncheckout -->|gRPC| payment\ncheckout --->|HTTP| email\ncheckout -->|gRPC| currency\ncheckout -->|gRPC| product-catalog\n\nfraud-detection -->|gRPC| flagd\n\nfrontend -->|gRPC| ad\nfrontend -->|gRPC| cart\nfrontend -->|gRPC| checkout\nfrontend ---->|gRPC| currency\nfrontend ---->|gRPC| recommendation\nfrontend -->|gRPC| product-catalog\n\nfrontend-proxy -->|gRPC| flagd\nfrontend-proxy -->|HTTP| frontend\nfrontend-proxy -->|HTTP| flagd-ui\nfrontend-proxy -->|HTTP| image-provider\n\nInternet -->|HTTP| frontend-proxy\n\nload-generator -->|HTTP| frontend-proxy\n\npayment -->|gRPC| flagd\n\nqueue -->|TCP| accounting\nqueue -->|TCP| fraud-detection\n\nrecommendation -->|gRPC| product-catalog\nrecommendation -->|gRPC| flagd\n\nshipping -->|HTTP| quote\n\nreact-native-app -->|HTTP| frontend-proxy\nend\n\nclassDef dotnet fill:#178600,color:white;\nclassDef cpp fill:#f34b7d,color:white;\nclassDef golang fill:#00add8,color:black;\nclassDef java fill:#b07219,color:white;\nclassDef javascript fill:#f1e05a,color:black;\nclassDef kotlin fill:#560ba1,color:white;\nclassDef php fill:#4f5d95,color:white;\nclassDef python fill:#3572A5,color:white;\nclassDef ruby fill:#701516,color:white;\nclassDef rust fill:#dea584,color:black;\nclassDef typescript fill:#e98516,color:black;\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spans in HTTP Handler\nDESCRIPTION: Example showing how to create spans within an HTTP handler using OpenTelemetry Go.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc httpHandler(w http.ResponseWriter, r *http.Request) {\n\tctx, span := tracer.Start(r.Context(), \"hello-span\")\n\tdefer span.End()\n\n\t// do some work to track with hello-span\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Samplers in OpenTelemetry Java SDK\nDESCRIPTION: This code snippet demonstrates how to programmatically configure various samplers in the OpenTelemetry Java SDK. It includes methods for creating parent-based, always-on, always-off, trace ID ratio-based, and Jaeger remote samplers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.extension.trace.jaeger.sampler.JaegerRemoteSampler;\nimport io.opentelemetry.sdk.trace.samplers.Sampler;\nimport java.time.Duration;\n\npublic class SamplerConfig {\n  public static Sampler parentBasedSampler(Sampler root) {\n    return Sampler.parentBasedBuilder(root)\n        .setLocalParentNotSampled(Sampler.alwaysOff())\n        .setLocalParentSampled(Sampler.alwaysOn())\n        .setRemoteParentNotSampled(Sampler.alwaysOff())\n        .setRemoteParentSampled(Sampler.alwaysOn())\n        .build();\n  }\n\n  public static Sampler alwaysOn() {\n    return Sampler.alwaysOn();\n  }\n\n  public static Sampler alwaysOff() {\n    return Sampler.alwaysOff();\n  }\n\n  public static Sampler traceIdRatioBased(double ratio) {\n    return Sampler.traceIdRatioBased(ratio);\n  }\n\n  public static Sampler jaegerRemoteSampler() {\n    return JaegerRemoteSampler.builder()\n        .setInitialSampler(Sampler.alwaysOn())\n        .setEndpoint(\"http://endpoint\")\n        .setPollingInterval(Duration.ofSeconds(60))\n        .setServiceName(\"my-service-name\")\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Attributes in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to use standardized semantic attributes for HTTP operations, ensuring consistent naming across telemetry systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.semconv.trace import SpanAttributes\n\n// ...\n\ncurrent_span = trace.get_current_span()\ncurrent_span.set_attribute(SpanAttributes.HTTP_METHOD, \"GET\")\ncurrent_span.set_attribute(SpanAttributes.HTTP_URL, \"https://opentelemetry.io/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracer\nDESCRIPTION: Complete Go code example showing how to initialize an OpenTelemetry tracer with proper resource attributes and shutdown handling.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage app\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/sdk/resource\"\n\tsdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n\t\"go.opentelemetry.io/otel/trace\"\n)\n\nvar tracer trace.Tracer\n\nfunc newExporter(ctx context.Context)  /* (someExporter.Exporter, error) */ {\n\t// Your preferred exporter: console, jaeger, zipkin, OTLP, etc.\n}\n\nfunc newTracerProvider(exp sdktrace.SpanExporter) *sdktrace.TracerProvider {\n\t// Ensure default SDK resources and the required service name are set.\n\tr, err := resource.Merge(\n\t\tresource.Default(),\n\t\tresource.NewWithAttributes(\n\t\t\tsemconv.SchemaURL,\n\t\t\tsemconv.ServiceName(\"ExampleService\"),\n\t\t),\n\t)\n\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\treturn sdktrace.NewTracerProvider(\n\t\tsdktrace.WithBatcher(exp),\n\t\tsdktrace.WithResource(r),\n\t)\n}\n\nfunc main() {\n\tctx := context.Background()\n\n\texp, err := newExporter(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed to initialize exporter: %v\", err)\n\t}\n\n\t// Create a new tracer provider with a batch span processor and the given exporter.\n\ttp := newTracerProvider(exp)\n\n\t// Handle shutdown properly so nothing leaks.\n\tdefer func() { _ = tp.Shutdown(ctx) }()\n\n\totel.SetTracerProvider(tp)\n\n\t// Finally, set the tracer that can be used for this package.\n\ttracer = tp.Tracer(\"example.io/package/name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using Observable Counters in Go with OpenTelemetry\nDESCRIPTION: This code snippet demonstrates how to use an Observable Counter to measure the uptime of an application in Go using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_17\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\nfunc init() {\n\tstart := time.Now()\n\tif _, err := meter.Float64ObservableCounter(\n\t\t\"uptime\",\n\t\tmetric.WithDescription(\"The duration since the application started.\"),\n\t\tmetric.WithUnit(\"s\"),\n\t\tmetric.WithFloat64Callback(func(_ context.Context, o metric.Float64Observer) error {\n\t\t\to.Observe(float64(time.Since(start).Seconds()))\n\t\t\treturn nil\n\t\t}),\n\t); err != nil {\n\t\tpanic(err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceIDRatioBasedSampler in Browser (TypeScript)\nDESCRIPTION: This snippet illustrates how to configure the TraceIDRatioBasedSampler for browser applications using TypeScript. It sets up the sampler to collect 10% of traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/sampling.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  WebTracerProvider,\n  TraceIdRatioBasedSampler,\n} from '@opentelemetry/sdk-trace-web';\n\nconst samplePercentage = 0.1;\n\nconst provider = new WebTracerProvider({\n  sampler: new TraceIdRatioBasedSampler(samplePercentage),\n});\n```\n\n----------------------------------------\n\nTITLE: Test Execution Results for OpenTelemetry Demo\nDESCRIPTION: This text output shows the results of running the test transaction against the OpenTelemetry Demo application. It displays the status of each test step and their respective assertions, demonstrating successful validation of the entire user purchase flow.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/testing-otel-demo/index.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n✔  Frontend Service (http://tracetest-server:11633/transaction/frontend-all/run/1)\n  ✔  Frontend: See Ads (http://tracetest-server: 11633/test/frontend-see-adds/run/1/test)\n    ✔  It called the frontend with success and got a valid redirectUrl for each ads\n    ✔  It returns two ads\n  ✔  Frontend: Get recommendations (http://tracetest-server: 11633/test/frontend-get-recommendation/run/1/test)\n    ✔  It called the frontend with success\n    ✔  It called ListRecommendations correctly and got 5 products\n  ✔  Frontend: Browse products (http://tracetest-server:11633/test/frontend-browse-product/run/1/test)\n    ✔  It called the frontend with success and got a product with valid attributes\n    ✔  It queried the product catalog correctly for a specific product\n  ✔  Frontend: Add product to the cart (http://tracetest-server:11633/test/frontend-add-product/run/1/test)\n    ✔  It called the frontend with success\n    ✔  It added an item correctly into the shopping cart\n    ✔  It set the cart item correctly on the database\n  ✔  Frontend: View cart (http://tracetest-server:11633/test/frontend-view-cart/run/1/test)\n    ✔  It called the frontend with success\n    ✔  It retrieved the cart items correctly\n  ✔  Frontend: Checking out shopping cart (http://tracetest-server: 11633/test/frontend-checkout-shopping-cart/run/1/test)\n    ✔  It called the frontend with success\n    ✔  The order was placed\n    ✔  The user was charged\n    ✔  The product was shipped\n    ✔  The cart was emptied\n```\n\n----------------------------------------\n\nTITLE: Setting Semantic Attributes in PHP with OpenTelemetry\nDESCRIPTION: Demonstrates how to set semantic attributes on a span in PHP using OpenTelemetry. It shows importing the necessary classes and setting code-related attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nuse OpenTelemetry\\SemConv\\TraceAttributes;\nuse OpenTelemetry\\SemConv\\TraceAttributeValues;\n\n$span->setAttribute(TraceAttributes::CODE_FUNCTION, 'rollOnce');\n$span->setAttribute(TraceAttributes::CODE_FILEPATH, __FILE__);\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in Erlang/Elixir\nDESCRIPTION: Shows how to add attributes to spans both at creation and during execution.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n?with_span(my_span, #{attributes => [{'start-opts-attr', <<\"start-opts-value\">>}]},\n           fun() ->\n               ?set_attributes([{'my-attribute', <<\"my-value\">>},\n                                {another_attribute, <<\"value-of-attribute\">>}])\n           end)\n```\n\nLANGUAGE: elixir\nCODE:\n```\nTracer.with_span :span_1, %{attributes: [{:\"start-opts-attr\", <<\"start-opts-value\">>}]} do\n  Tracer.set_attributes([{:\"my-attributes\", \"my-value\"},\n                         {:another_attribute, \"value-of-attributes\"}])\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Explicitly Linked Parent-Child Spans in OpenTelemetry Swift\nDESCRIPTION: This code demonstrates how to manually create a parent-child relationship between spans by explicitly passing a parent span to a child function and setting it as the parent of the child span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: swift\nCODE:\n```\nfunc parent() {\n  let parentSpan = someTracer.spanBuilder(spanName: \"parent span\").startSpan()\n  child(span: parentSpan)\n  parentSpan.end()\n}\n\nfunc child(parentSpan: Span) {\nlet childSpan = someTracer.spanBuilder(spanName: \"child span\")\n                             .setParent(parentSpan)\n                             .startSpan()\n  // do work\n  childSpan.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Propagation in OpenTelemetry Go\nDESCRIPTION: Shows how to set up context propagation for distributed tracing in OpenTelemetry Go using the W3C TraceContext format.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"go.opentelemetry.io/otel\"\n  \"go.opentelemetry.io/otel/propagation\"\n)\n...\notel.SetTextMapPropagator(propagation.TraceContext{})\n```\n\n----------------------------------------\n\nTITLE: UpDownCounter Implementation in OpenTelemetry Java\nDESCRIPTION: Demonstrates how to create and use a LongUpDownCounter to record non-monotonic values with various attributes and contexts. Shows measurement recording with and without attributes, and custom context usage.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\nimport static otel.Util.customContext;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.LongUpDownCounter;\nimport io.opentelemetry.api.metrics.Meter;\n\npublic class UpDownCounterUsage {\n\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void usage(Meter meter) {\n    // Construct an updowncounter to record measurements that go up and down.\n    LongUpDownCounter upDownCounter =\n        meter\n            .upDownCounterBuilder(\"fully.qualified.updowncounter\")\n            .setDescription(\"Current length of widget processing queue\")\n            .setUnit(\"{widget}\")\n            // Uncomment to optionally change the type to double\n            // .ofDoubles()\n            .build();\n\n    // Record a measurement with no attributes or context.\n    // Attributes defaults to Attributes.empty(), context to Context.current().\n    upDownCounter.add(1L);\n\n    // Record a measurement with attributes, using pre-allocated attributes whenever possible.\n    upDownCounter.add(-1L, WIDGET_RED_CIRCLE);\n    // Sometimes, attributes must be computed using application context.\n    upDownCounter.add(\n        -1L, Attributes.of(WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n\n    // Record a measurement with attributes, and context.\n    // Most users will opt to omit the context argument, preferring the default Context.current().\n    upDownCounter.add(1L, WIDGET_RED_CIRCLE, customContext());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spans in HTTP Handler\nDESCRIPTION: Example showing how to create spans within an HTTP handler using OpenTelemetry Go.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nfunc httpHandler(w http.ResponseWriter, r *http.Request) {\n\tctx, span := tracer.Start(r.Context(), \"hello-span\")\n\tdefer span.End()\n\n\t// do some work to track with hello-span\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Events to Spans in OpenTelemetry Python\nDESCRIPTION: Shows how to add time-stamped events to spans to record significant occurrences during the span's lifetime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ncurrent_span = trace.get_current_span()\n\ncurrent_span.add_event(\"Gonna try it!\")\n\n# Do the thing\n\ncurrent_span.add_event(\"Did it!\")\n```\n\n----------------------------------------\n\nTITLE: Nested Span and Context Propagation in OpenTelemetry Java\nDESCRIPTION: Shows how to create nested spans and propagate context across different scopes. Demonstrates parent-child span relationships, explicit context setting, and proper span lifecycle management using try-finally blocks.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.trace.Span;\nimport io.opentelemetry.api.trace.Tracer;\nimport io.opentelemetry.context.Context;\nimport io.opentelemetry.context.Scope;\n\npublic class SpanAndContextUsage {\n  private final Tracer tracer;\n\n  SpanAndContextUsage(Tracer tracer) {\n    this.tracer = tracer;\n  }\n\n  public void nestedSpanUsage() {\n    // Start a span. Since we don't call makeCurrent(), we must explicitly call setParent on\n    // children. Wrap code in try / finally to ensure we end the span.\n    Span span = tracer.spanBuilder(\"span\").startSpan();\n    try {\n      // Start a child span, explicitly setting the parent.\n      Span childSpan =\n          tracer\n              .spanBuilder(\"span child\")\n              // Explicitly set parent.\n              .setParent(span.storeInContext(Context.current()))\n              .startSpan();\n      // Call makeCurrent(), adding childSpan to Context.current(). Spans created inside the scope\n      // will have their parent set to childSpan.\n      try (Scope childSpanScope = childSpan.makeCurrent()) {\n        // Call another method which creates a span. The span's parent will be childSpan since it is\n        // started in the childSpan scope.\n        doWork();\n      } finally {\n        childSpan.end();\n      }\n    } finally {\n      span.end();\n    }\n  }\n\n  private int doWork() {\n    Span doWorkSpan = tracer.spanBuilder(\"doWork\").startSpan();\n    try (Scope scope = doWorkSpan.makeCurrent()) {\n      int result = 0;\n      for (int i = 0; i < 10; i++) {\n        result += i;\n      }\n      return result;\n    } finally {\n      doWorkSpan.end();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Instrumentation Libraries for Python Load Generator\nDESCRIPTION: This code imports the Instrumentors for the Requests and URLLib3 libraries, which are used by Locust. These instrumentors are necessary for adding OpenTelemetry instrumentation to the load generator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/load-generator.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.requests import RequestsInstrumentor\nfrom opentelemetry.instrumentation.urllib3 import URLLib3Instrumentor\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporters on Unix\nDESCRIPTION: This shell script sets up environment variables for OpenTelemetry exporters and service name, then sources the instrumentation script for Unix-based systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport OTEL_TRACES_EXPORTER=console \\\n  OTEL_METRICS_EXPORTER=console \\\n  OTEL_LOGS_EXPORTER=console\n  OTEL_SERVICE_NAME=RollDiceService\n. $HOME/.otel-dotnet-auto/instrument.sh\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Links Template in Markdown\nDESCRIPTION: Reference links for latest release and all releases of language-specific OpenTelemetry implementation, using template variables for GitHub repository paths.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/_includes/index-intro.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[latest release]:\n  <https://github.com/open-telemetry/opentelemetry-{{ $lang }}/releases/latest>\n[Releases]:\n  <https://github.com/open-telemetry/opentelemetry-{{ $lang }}/releases>\n```\n\n----------------------------------------\n\nTITLE: Enabling Diagnostic Logging in TypeScript\nDESCRIPTION: Code snippet to enable diagnostic logging for troubleshooting OpenTelemetry initialization in TypeScript. It sets up a console logger with a specified log level.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*instrumentation.ts*/\nimport { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\n\n// For troubleshooting, set the log level to DiagLogLevel.DEBUG\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);\n\n// const sdk = new NodeSDK({...\n```\n\n----------------------------------------\n\nTITLE: Programmatic Resource Configuration in PHP OpenTelemetry\nDESCRIPTION: Code example demonstrating how to create and merge custom resources with default resources and configure them with a tracer provider.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/resources.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$resource = ResourceInfoFactory::defaultResource()->merge(ResourceInfo::create(Attributes::create([\n    ResourceAttributes::SERVICE_NAMESPACE => 'foo',\n    ResourceAttributes::SERVICE_NAME => 'bar',\n    ResourceAttributes::SERVICE_INSTANCE_ID => 1,\n    ResourceAttributes::SERVICE_VERSION => '0.1',\n    ResourceAttributes::DEPLOYMENT_ENVIRONMENT_NAME => 'development',\n])));\n\n$tracerProvider =  new TracerProvider(\n    new SimpleSpanProcessor(\n        (new ConsoleSpanExporterFactory())->create()\n    ),\n    null,\n    $resource\n);\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry CLI Configuration\nDESCRIPTION: Shell command to run the Flask application with OpenTelemetry instrumentation enabled, configuring traces, metrics, and logs exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true\nopentelemetry-instrument \\\n    --traces_exporter console \\\n    --metrics_exporter console \\\n    --logs_exporter console \\\n    --service_name dice-server \\\n    flask run -p 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring Batch Span Processor with OTLP HTTP Exporter in C++\nDESCRIPTION: This snippet demonstrates how to configure a batch span processor with an OTLP HTTP exporter in OpenTelemetry C++. It includes creating the exporter and processor with custom options.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"opentelemetry/exporters/otlp/otlp_http_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_http_exporter_options.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/batch_span_processor_factory.h\"\n#include \"opentelemetry/sdk/trace/batch_span_processor_options.h\"\n\nopentelemetry::sdk::trace::BatchSpanProcessorOptions options{};\n\nauto exporter  = opentelemetry::exporter::otlp::OtlpHttpExporterFactory::Create(opts);\nauto processor = opentelemetry::sdk::trace::BatchSpanProcessorFactory::Create(std::move(exporter), options);\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Span\nDESCRIPTION: C# code showing how to access the current span at a given point in time. This is useful for adding information to the current span without explicitly passing it around.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar span = Tracer.CurrentSpan;\n// do cool stuff!\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP HTTP/JSON Exporters in JavaScript\nDESCRIPTION: Installs the OpenTelemetry OTLP HTTP/JSON exporters for traces and metrics as npm dependencies for your project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/exporter-trace-otlp-http \\\n  @opentelemetry/exporter-metrics-otlp-http\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Auto-instrumentation for Server in Go\nDESCRIPTION: This code shows how to add OpenTelemetry auto-instrumentation to a gRPC server in Go, enabling automatic tracing for incoming gRPC requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nvar srv = grpc.NewServer(\n    grpc.StatsHandler(otelgrpc.NewServerHandler()),\n)\n```\n\n----------------------------------------\n\nTITLE: Cloud Event Context Logging in Knative Second Service\nDESCRIPTION: Example log output showing cloud event context attributes and extensions from the second service, demonstrating how events are received and processed in Knative.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/knative/index.md#2025-04-09_snippet_1\n\nLANGUAGE: nocode\nCODE:\n```\n2022/02/17 13:39:36 Event received: Context Attributes,\n  specversion: 1.0\n  type: httpbody\n  source: github/com/pavolloffay\n  id: fad4139c-b3fb-48b2-b0f4-fee44addc5f1\n  time: 2022-02-17T13:39:34.426355726Z\n  datacontenttype: text/plain\nExtensions,\n  knativearrivaltime: 2022-02-17T13:39:34.491325425Z\nData,\n  hello from first, traceid=5f2c4775e0e36efc1d554a0b6c456cc1\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Extraction in Receiving Service with Python and Flask\nDESCRIPTION: This code shows a Flask service that extracts OpenTelemetry context from incoming HTTP headers. It demonstrates how to extract both trace context and baggage information, and then use this context for creating new spans that maintain the trace relationship with the originating service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/propagation.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, request\nfrom opentelemetry import trace, baggage\nfrom opentelemetry.trace.propagation.tracecontext import TraceContextTextMapPropagator\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor\nfrom opentelemetry.baggage.propagation import W3CBaggagePropagator\n\napp = Flask(__name__)\n\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\ntracer = trace.get_tracer(__name__)\n\n@app.route('/')\ndef hello():\n    # Example: Log headers received in the request in API 2\n    headers = dict(request.headers)\n    print(f\"Received headers: {headers}\")\n    carrier ={'traceparent': headers['Traceparent']}\n    ctx = TraceContextTextMapPropagator().extract(carrier=carrier)\n    print(f\"Received context: {ctx}\")\n\n    b2 ={'baggage': headers['Baggage']}\n    ctx2 = W3CBaggagePropagator().extract(b2, context=ctx)\n    print(f\"Received context2: {ctx2}\")\n\n    # Start a new span\n    with tracer.start_span(\"api2_span\", context=ctx2):\n       # Use propagated context\n        print(baggage.get_baggage('hello', ctx2))\n        return \"Hello from API 2!\"\n\nif __name__ == '__main__':\n    app.run(port=5001)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in ASP.NET Core for Traces, Metrics, and Logs\nDESCRIPTION: Complete implementation of OpenTelemetry in an ASP.NET Core application, setting up tracing, metrics, and logging with console exporters. It configures a resource with a service name for proper identification in telemetry data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Logs;\nusing OpenTelemetry.Metrics;\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nconst string serviceName = \"roll-dice\";\n\nbuilder.Logging.AddOpenTelemetry(options =>\n{\n    options\n        .SetResourceBuilder(\n            ResourceBuilder.CreateDefault()\n                .AddService(serviceName))\n        .AddConsoleExporter();\n});\nbuilder.Services.AddOpenTelemetry()\n      .ConfigureResource(resource => resource.AddService(serviceName))\n      .WithTracing(tracing => tracing\n          .AddAspNetCoreInstrumentation()\n          .AddConsoleExporter())\n      .WithMetrics(metrics => metrics\n          .AddAspNetCoreInstrumentation()\n          .AddConsoleExporter());\n\nvar app = builder.Build();\n```\n\n----------------------------------------\n\nTITLE: Adding Span Events in .NET\nDESCRIPTION: Shows how to add span events to the current activity in .NET.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/cart/index.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nactivity?.AddEvent(new(\"Fetch cart\"));\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Prometheus and Jaeger\nDESCRIPTION: YAML configuration for setting up the OpenTelemetry collector to receive OTLP data and export to Prometheus and Jaeger. Includes receiver, processor, and exporter configurations with memory limits and pipeline definitions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/llm-observability.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n\nprocessors:\n  batch:\n  memory_limiter:\n    # 80% of maximum memory up to 2G\n    limit_mib: 1500\n    # 25% of limit up to 2G\n    spike_limit_mib: 512\n    check_interval: 5s\n\nexporters:\n  prometheusremotewrite:\n    endpoint: 'YOUR_PROMETHEUS_REMOTE_WRITE_URL'\n    add_metric_suffixes: false\n  otlp:\n    endpoint: 'YOUR_JAEGER_URL'\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [memory_limiter, batch]\n      exporters: [otlp]\n    metrics:\n      receivers: [otlp]\n      processors: [memory_limiter, batch]\n      exporters: [prometheusremotewrite]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry for Testing in Elixir\nDESCRIPTION: Elixir configuration that sets up OpenTelemetry for testing by disabling the exporter and using the simple processor. This ensures spans are processed but not exported outside the test environment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# config/test.exs\nimport Config\n\nconfig :opentelemetry,\n    traces_exporter: :none\n\nconfig :opentelemetry, :processors, [\n  {:otel_simple_processor, %{}}\n]\n```\n\n----------------------------------------\n\nTITLE: Adding System.Diagnostics.DiagnosticSource Dependency in XML\nDESCRIPTION: Adds the System.Diagnostics.DiagnosticSource NuGet package to the project, which is required for both custom traces and metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/custom.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<PackageReference Include=\"System.Diagnostics.DiagnosticSource\" Version=\"8.0.0\" />\n```\n\n----------------------------------------\n\nTITLE: Defining a Test Transaction in YAML for OpenTelemetry Demo\nDESCRIPTION: This YAML file defines a transaction that orchestrates multiple test steps that simulate a user purchasing products. It creates a sequence of tests that will execute in order to validate the complete user flow.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/testing-otel-demo/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntype: Transaction\nspec:\n  name: 'Frontend Service'\n  description:\n    Run all Frontend tests enabled in sequence, simulating a process of a user\n    purchasing products on the Astronomy store\n  steps:\n    - ./01-see-ads.yaml\n    - ./02-get-product-recommendation.yaml\n    - ./03-browse-product.yaml\n    - ./04-add-product-to-cart.yaml\n    - ./05-view-cart.yaml\n    - ./06-checking-out-cart.yaml\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK in JavaScript\nDESCRIPTION: JavaScript version of the OpenTelemetry SDK initialization for a Node.js application, setting up console exporters for traces and metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\nconst { NodeSDK } = require('@opentelemetry/sdk-node');\nconst { ConsoleSpanExporter } = require('@opentelemetry/sdk-trace-node');\nconst {\n  PeriodicExportingMetricReader,\n  ConsoleMetricExporter,\n} = require('@opentelemetry/sdk-metrics');\nconst { resourceFromAttributes } = require('@opentelemetry/resources');\nconst {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} = require('@opentelemetry/semantic-conventions');\n\nconst sdk = new NodeSDK({\n  resource: resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: 'dice-server',\n    [ATTR_SERVICE_VERSION]: '0.1.0',\n  }),\n  traceExporter: new ConsoleSpanExporter(),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new ConsoleMetricExporter(),\n  }),\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Using Counters for Metrics in TypeScript\nDESCRIPTION: Shows how to create and use a counter metric instrument in TypeScript. This example counts each dice roll in the sample application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_55\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*dice.ts*/\nconst counter = meter.createCounter('dice-lib.rolls.counter');\n\nfunction rollOnce(min: number, max: number) {\n  counter.add(1);\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n```\n\n----------------------------------------\n\nTITLE: Launching OpenTelemetry Collector with Docker\nDESCRIPTION: Docker command to run the OpenTelemetry Collector, mapping the required ports (4317 for OTLP gRPC, 4318 for OTLP HTTP, and 55679 for ZPages) and saving output to a file for easier debugging.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/quick-start.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker run \\\n  -p 127.0.0.1:4317:4317 \\\n  -p 127.0.0.1:4318:4318 \\\n  -p 127.0.0.1:55679:55679 \\\n  otel/opentelemetry-collector-contrib:{{% param vers %}} \\\n  2>&1 | tee collector-output.txt # Optionally tee output for easier search later\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno Auto-instrumentation in Kubernetes\nDESCRIPTION: This snippet creates an Instrumentation resource for Deno services, enabling OpenTelemetry integration by setting the OTEL_DENO environment variable. It configures the OTLP exporter endpoint, propagators, and sampling strategy.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  env:\n    - name: OTEL_DENO\n      value: 'true'\n  exporter:\n    endpoint: http://demo-collector:4318\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: '1'\nEOF\n```\n\n----------------------------------------\n\nTITLE: Histogram Implementation in OpenTelemetry Java\nDESCRIPTION: Demonstrates DoubleHistogram usage for recording monotonic values where distribution is important. Shows configuration options and various ways to record measurements with attributes and contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_13\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\nimport static otel.Util.customContext;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.DoubleHistogram;\nimport io.opentelemetry.api.metrics.Meter;\n\npublic class HistogramUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void histogramUsage(Meter meter) {\n    // Construct a histogram to record measurements where the distribution is important.\n    DoubleHistogram histogram =\n        meter\n            .histogramBuilder(\"fully.qualified.histogram\")\n            .setDescription(\"Length of time to process a widget\")\n            .setUnit(\"s\")\n            // Uncomment to optionally provide advice on useful default explicit bucket boundaries\n            // .setExplicitBucketBoundariesAdvice(Arrays.asList(1.0, 2.0, 3.0))\n            // Uncomment to optionally change the type to long\n            // .ofLongs()\n            .build();\n\n    // Record a measurement with no attributes or context.\n    // Attributes defaults to Attributes.empty(), context to Context.current().\n    histogram.record(1.1);\n\n    // Record a measurement with attributes, using pre-allocated attributes whenever possible.\n    histogram.record(2.2, WIDGET_RED_CIRCLE);\n    // Sometimes, attributes must be computed using application context.\n    histogram.record(\n        3.2, Attributes.of(WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n\n    // Record a measurement with attributes, and context.\n    // Most users will opt to omit the context argument, preferring the default Context.current().\n    histogram.record(4.4, WIDGET_RED_CIRCLE, customContext());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Exporter in JavaScript\nDESCRIPTION: JavaScript code to initialize OpenTelemetry SDK with a Prometheus exporter for metrics. It configures the metricReader with a port option and sets up auto-instrumentations for Node.js.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\nconst { PrometheusExporter } = require('@opentelemetry/exporter-prometheus');\nconst { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');\nconst sdk = new opentelemetry.NodeSDK({\n  metricReader: new PrometheusExporter({\n    port: 9464, // optional - default is 9464\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry-Instrumented Application\nDESCRIPTION: Enhanced version of the dice rolling application with manual OpenTelemetry tracing implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse OpenTelemetry\\API\\Globals;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Slim\\Factory\\AppFactory;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$tracer = Globals::tracerProvider()->getTracer('demo');\n\n$app = AppFactory::create();\n\n$app->get('/rolldice', function (Request $request, Response $response) use ($tracer) {\n    $span = $tracer\n        ->spanBuilder('manual-span')\n        ->startSpan();\n    $result = random_int(1,6);\n    $response->getBody()->write(strval($result));\n    $span\n        ->addEvent('rolled dice', ['result' => $result])\n        ->end();\n    return $response;\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Span in OpenTelemetry Python\nDESCRIPTION: Shows how to retrieve the current active span to add additional information or context to an ongoing operation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ncurrent_span = trace.get_current_span()\n# enrich 'current_span' with some information\n```\n\n----------------------------------------\n\nTITLE: Registering the Tailtracer Receiver in OpenTelemetry Collector Components\nDESCRIPTION: Updates the OpenTelemetry Collector's components.go file to register the tailtracer receiver factory, allowing it to be used in pipelines. This makes the custom receiver available to the Collector's initialization process.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_22\n\nLANGUAGE: go\nCODE:\n```\n// Code generated by \"go.opentelemetry.io/collector/cmd/builder\". DO NOT EDIT.\n\npackage main\n\nimport (\n\t\"go.opentelemetry.io/collector/exporter\"\n\t\"go.opentelemetry.io/collector/extension\"\n\t\"go.opentelemetry.io/collector/otelcol\"\n\t\"go.opentelemetry.io/collector/processor\"\n\t\"go.opentelemetry.io/collector/receiver\"\n\tdebugexporter \"go.opentelemetry.io/collector/exporter/debugexporter\"\n\totlpexporter \"go.opentelemetry.io/collector/exporter/otlpexporter\"\n\tbatchprocessor \"go.opentelemetry.io/collector/processor/batchprocessor\"\n\totlpreceiver \"go.opentelemetry.io/collector/receiver/otlpreceiver\"\n\ttailtracer \"github.com/open-telemetry/opentelemetry-tutorials/trace-receiver/tailtracer\" // newly added line\n)\n\nfunc components() (otelcol.Factories, error) {\n\tvar err error\n\tfactories := otelcol.Factories{}\n\n\tfactories.Extensions, err = extension.MakeFactoryMap(\n\t)\n\tif err != nil {\n\t\treturn otelcol.Factories{}, err\n\t}\n\n\tfactories.Receivers, err = receiver.MakeFactoryMap(\n\t\totlpreceiver.NewFactory(),\n\t\ttailtracer.NewFactory(), // newly added line\n\t)\n\tif err != nil {\n\t\treturn otelcol.Factories{}, err\n\t}\n\n\tfactories.Exporters, err = exporter.MakeFactoryMap(\n\t\tdebugexporter.NewFactory(),\n\t\totlpexporter.NewFactory(),\n\t)\n\tif err != nil {\n\t\treturn otelcol.Factories{}, err\n\t}\n\n\tfactories.Processors, err = processor.MakeFactoryMap(\n\t\tbatchprocessor.NewFactory(),\n\t)\n\tif err != nil {\n\t\treturn otelcol.Factories{}, err\n\t}\n\n\treturn factories, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific OpenTelemetry Instrumentation in Ruby\nDESCRIPTION: Shows how to configure OpenTelemetry to use all instrumentation libraries except for a specific one (Redis in this example) by passing a configuration map.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/libraries.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'opentelemetry/sdk'\nrequire 'opentelemetry/instrumentation/all'\n\nOpenTelemetry::SDK.configure do |c|\n  config = {'OpenTelemetry::Instrumentation::Redis' => { enabled: false }}\n  c.use_all(config)\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Context Injection in Sending Service with Python and Flask\nDESCRIPTION: This code demonstrates how to create a Flask service that injects OpenTelemetry context (trace context and baggage) into HTTP headers before making a request to another service. It uses TraceContextTextMapPropagator for trace propagation and W3CBaggagePropagator for baggage propagation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/propagation.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask\nimport requests\nfrom opentelemetry import trace, baggage\nfrom opentelemetry.trace.propagation.tracecontext import TraceContextTextMapPropagator\nfrom opentelemetry.baggage.propagation import W3CBaggagePropagator\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor\n\napp = Flask(__name__)\n\ntrace.set_tracer_provider(TracerProvider())\ntrace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\ntracer = trace.get_tracer(__name__)\n\n@app.route('/')\ndef hello():\n    with tracer.start_as_current_span(\"api1_span\") as span:\n        ctx = baggage.set_baggage(\"hello\", \"world\")\n\n        headers = {}\n        W3CBaggagePropagator().inject(headers, ctx)\n        TraceContextTextMapPropagator().inject(headers, ctx)\n        print(headers)\n\n        response = requests.get('http://127.0.0.1:5001/', headers=headers)\n        return f\"Hello from API 1! Response from API 2: {response.text}\"\n\nif __name__ == '__main__':\n    app.run(port=5002)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporter in Elixir\nDESCRIPTION: Sets up the OpenTelemetry configuration in Elixir to use the stdout exporter and batch span processor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_10\n\nLANGUAGE: elixir\nCODE:\n```\n# config/runtime.exs\nconfig :opentelemetry,\n  span_processor: :batch,\n  traces_exporter: {:otel_exporter_stdout, []}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracing in Console App\nDESCRIPTION: C# code to initialize OpenTelemetry tracing in a console application. It sets up a tracer provider with a console exporter and configures the service name and version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\nusing OpenTelemetry.Resources;\n\n// ...\n\nvar serviceName = \"MyServiceName\";\nvar serviceVersion = \"1.0.0\";\n\nusing var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddSource(serviceName)\n    .SetResourceBuilder(\n        ResourceBuilder.CreateDefault()\n            .AddService(serviceName: serviceName, serviceVersion: serviceVersion))\n    .AddConsoleExporter()\n    .Build();\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry in React Native App Layout\nDESCRIPTION: Code snippet showing how the OpenTelemetry tracer is initialized in the app's main layout file using a custom hook before displaying the UI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/react-native-app.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useTracer } from '@/hooks/useTracer';\n\nconst { loaded: tracerLoaded } = useTracer();\n```\n\n----------------------------------------\n\nTITLE: Initializing OTLP Metric Exporter in Swift\nDESCRIPTION: This snippet demonstrates how to register a MeterProvider with an OTLP metric exporter. It configures a pipeline for exporting metric data to an OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\n// otlpConfiguration & grpcChannel can be reused\nOpenTelemetry.registerMeterProvider(meterProvider: MeterProviderBuilder()\n            .with(processor: MetricProcessorSdk())\n            .with(exporter: OtlpMetricExporter(channel: channel, config: otlpConfiguration))\n            .with(resource: Resource())\n            .build())\n```\n\n----------------------------------------\n\nTITLE: Creating Spans in Python without Manual Configuration\nDESCRIPTION: Python code example demonstrating how to create nested spans using the OpenTelemetry trace API without any manual SDK configuration, relying on the distro package for setup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/distro.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# no_configuration.py\nfrom opentelemetry import trace\n\nwith trace.get_tracer(\"my.tracer\").start_as_current_span(\"foo\"):\n    with trace.get_tracer(\"my.tracer\").start_as_current_span(\"bar\"):\n        print(\"baz\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter in Ruby\nDESCRIPTION: Ruby configuration code for setting up the OTLP exporter in a Rails application's initializer file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/opentelemetry.rb\nrequire 'opentelemetry/sdk'\nrequire 'opentelemetry/instrumentation/all'\nrequire 'opentelemetry-exporter-otlp'\nOpenTelemetry::SDK.configure do |c|\n  c.service_name = 'dice-ruby'\n  c.use_all() # enables all instrumentation!\nend\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry SDK Builder Configuration\nDESCRIPTION: Shows how to use the SDK builder pattern to configure TracerProvider, MeterProvider, and LoggerProvider with various processors and exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/sdk.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\n$spanExporter = new InMemoryExporter(); //mock exporter for demonstration purposes\n\n$meterProvider = MeterProvider::builder()\n    ->addReader(\n        new ExportingReader(new MetricExporter((new StreamTransportFactory())->create(STDOUT, 'application/x-ndjson'), /*Temporality::CUMULATIVE*/))\n    )\n    ->build();\n\n$tracerProvider = TracerProvider::builder()\n    ->addSpanProcessor(\n        (new BatchSpanProcessorBuilder($spanExporter))\n            ->setMeterProvider($meterProvider)\n            ->build()\n    )\n    ->build();\n\n$loggerProvider = LoggerProvider::builder()\n    ->addLogRecordProcessor(\n        new SimpleLogsProcessor(\n            (new ConsoleExporterFactory())->create()\n        )\n    )\n    ->setResource(ResourceInfo::create(Attributes::create(['foo' => 'bar'])))\n    ->build();\n\nSdk::builder()\n    ->setTracerProvider($tracerProvider)\n    ->setLoggerProvider($loggerProvider)\n    ->setMeterProvider($meterProvider)\n    ->setPropagator(TraceContextPropagator::getInstance())\n    ->setAutoShutdown(true)\n    ->buildAndRegisterGlobal();\n```\n\n----------------------------------------\n\nTITLE: OTLP/JSON Log Output Example\nDESCRIPTION: Example of an OTLP/JSON formatted log output from a Java application. It includes resource attributes, scope logs, and log records with various fields such as timestamp, severity, and custom attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/collecting-otel-compliant-java-logs-from-files/index.md#2025-04-09_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"resourceLogs\": [\n    {\n      \"resource\": {\n        \"attributes\": [\n          {\n            \"key\": \"deployment.environment.name\",\n            \"value\": {\n              \"stringValue\": \"staging\"\n            }\n          },\n          {\n            \"key\": \"service.instance.id\",\n            \"value\": {\n              \"stringValue\": \"6ad88e10-238c-4fb7-bf97-38df19053366\"\n            }\n          },\n          {\n            \"key\": \"service.name\",\n            \"value\": {\n              \"stringValue\": \"checkout\"\n            }\n          },\n          {\n            \"key\": \"service.namespace\",\n            \"value\": {\n              \"stringValue\": \"shop\"\n            }\n          },\n          {\n            \"key\": \"service.version\",\n            \"value\": {\n              \"stringValue\": \"1.1\"\n            }\n          }\n        ]\n      },\n      \"scopeLogs\": [\n        {\n          \"scope\": {\n            \"name\": \"com.mycompany.checkout.CheckoutServiceServer$CheckoutServiceImpl\",\n            \"attributes\": []\n          },\n          \"logRecords\": [\n            {\n              \"timeUnixNano\": \"1730435085776869000\",\n              \"observedTimeUnixNano\": \"1730435085776944000\",\n              \"severityNumber\": 9,\n              \"severityText\": \"INFO\",\n              \"body\": {\n                \"stringValue\": \"Order order-12035 successfully placed\"\n              },\n              \"attributes\": [\n                {\n                  \"key\": \"customerId\",\n                  \"value\": {\n                    \"stringValue\": \"customer-49\"\n                  }\n                },\n                {\n                  \"key\": \"thread.id\",\n                  \"value\": {\n                    \"intValue\": \"44\"\n                  }\n                },\n                {\n                  \"key\": \"thread.name\",\n                  \"value\": {\n                    \"stringValue\": \"grpc-default-executor-1\"\n                  }\n                }\n              ],\n              \"flags\": 1,\n              \"traceId\": \"42de1f0dd124e27619a9f3c10bccac1c\",\n              \"spanId\": \"270984d03e94bb8b\"\n            }\n          ]\n        }\n      ],\n      \"schemaUrl\": \"https://opentelemetry.io/schemas/1.24.0\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry SDK Configuration with Docker Resource Detection\nDESCRIPTION: Complete configuration of OpenTelemetry Node.js SDK with Docker container detection and other resource detectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/resources.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\nconst { diag, DiagConsoleLogger, DiagLogLevel } = require('@opentelemetry/api');\nconst {\n  dockerCGroupV1Detector,\n} = require('@opentelemetry/resource-detector-docker');\nconst { envDetector, processDetector } = require('@opentelemetry/resources');\n\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new opentelemetry.tracing.ConsoleSpanExporter(),\n  instrumentations: [getNodeAutoInstrumentations()],\n  resourceDetectors: [envDetector, processDetector, dockerCGroupV1Detector],\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Metrics in .NET\nDESCRIPTION: Configures OpenTelemetry metrics in the .NET dependency injection container, setting up resource builders, instrumentation libraries, and exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/cart/index.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nAction<ResourceBuilder> appResourceBuilder =\n    resource => resource\n        .AddContainerDetector()\n        .AddHostDetector();\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(appResourceBuilder)\n    .WithMetrics(meterBuilder => meterBuilder\n        .AddMeter(\"OpenTelemetry.Demo.Cart\")\n        .AddProcessInstrumentation()\n        .AddRuntimeInstrumentation()\n        .AddAspNetCoreInstrumentation()\n        .SetExemplarFilter(ExemplarFilterType.TraceBased)\n        .AddOtlpExporter());\n```\n\n----------------------------------------\n\nTITLE: Instrumenting MongoDB with OpenTelemetry in Go\nDESCRIPTION: Go code demonstrating how to instrument MongoDB operations with OpenTelemetry. It includes setting up the MongoDB client with OpenTelemetry monitoring and seeding the database.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc connectMongo() {\n    opts: = options.Client()\n    //Mongo OpenTelemetry instrumentation\n    opts.Monitor = otelmongo.NewMonitor()\n    opts.ApplyURI(\"mongodb://localhost:27017\")\n    client, _ = mongo.Connect(context.Background(), opts)\n    //Seed the database with some todo's\n    docs: = [] interface {} {\n        bson.D {\n                {\n                    \"id\", \"1\"\n                }, {\n                    \"title\", \"Buy groceries\"\n                }\n            },\n            bson.D {\n                {\n                    \"id\", \"2\"\n                }, {\n                    \"title\", \"install Aspecto.io\"\n                }\n            },\n            bson.D {\n                {\n                    \"id\", \"3\"\n                }, {\n                    \"title\", \"Buy dogz.io domain\"\n                }\n            },\n    }\n    client.Database(\"todo\").Collection(\"todos\").InsertMany(context.Background(), docs)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TracerProvider with DefaultResource in Swift\nDESCRIPTION: This snippet demonstrates how to register a TracerProvider with DefaultResource in OpenTelemetry Swift. It uses the DefaultResource.get() method to generate an all-in-one resource object, which is then added to the TracerProvider.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nOpenTelemetry.registerTracerProvider(tracerProvider: TracerProviderBuilder()\n            .with(resource: DefaultResource.get())\n            .build())\n```\n\n----------------------------------------\n\nTITLE: Recording Exceptions in Spans with OpenTelemetry Python\nDESCRIPTION: Demonstrates how to record exceptions in spans along with setting appropriate status codes for error tracking.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.trace import Status, StatusCode\n\ncurrent_span = trace.get_current_span()\n\ntry:\n    # something that might fail\n\n# Consider catching a more specific exception in your code\nexcept Exception as ex:\n    current_span.set_status(Status(StatusCode.ERROR))\n    current_span.record_exception(ex)\n```\n\n----------------------------------------\n\nTITLE: Verifying Log Collection with OTel Collector Debug Exporter\nDESCRIPTION: Example log output from the OpenTelemetry Collector Debug exporter, showing collected log data including resource attributes, timestamps, and log record details.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/collecting-otel-compliant-java-logs-from-files/index.md#2025-04-09_snippet_4\n\nLANGUAGE: log\nCODE:\n```\n2024-11-01T10:03:31.074+0530\tinfo\tLogs\t{\"kind\": \"exporter\", \"data_type\": \"logs\", \"name\": \"debug\", \"resource logs\": 1, \"log records\": 1}\n2024-11-01T10:03:31.074+0530\tinfo\tResourceLog #0\nResource SchemaURL: https://opentelemetry.io/schemas/1.24.0\nResource attributes:\n     -> deployment.environment.name: Str(staging)\n     -> service.instance.id: Str(6ad88e10-238c-4fb7-bf97-38df19053366)\n     -> service.name: Str(checkout)\n     -> service.namespace: Str(shop)\n     -> service.version: Str(1.1)\nScopeLogs #0\nScopeLogs SchemaURL:\nInstrumentationScope com.mycompany.checkout.CheckoutServiceServer$CheckoutServiceImpl\nLogRecord #0\nObservedTimestamp: 2024-11-01 04:24:45.776944 +0000 UTC\nTimestamp: 2024-11-01 04:24:45.776869 +0000 UTC\nSeverityText: INFO\nSeverityNumber: Info(9)\nBody: Str(Order order-12035 successfully placed)\nAttributes:\n     -> customerId: Str(cust-12345)\n     -> thread.id: Int(44)\n     -> thread.name: Str(grpc-default-executor-1)\nTrace ID: 42de1f0dd124e27619a9f3c10bccac1c\nSpan ID: 270984d03e94bb8b\nFlags: 1\n     {\"kind\": \"exporter\", \"data_type\": \"logs\", \"name\": \"debug\"}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies for AWS Lambda\nDESCRIPTION: Shell commands to initialize a package.json file and install required OpenTelemetry dependencies for instrumenting AWS Lambda functions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/serverless.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install \\\n  @opentelemetry/api \\\n  @opentelemetry/auto-instrumentations-node \\\n  @opentelemetry/exporter-trace-otlp-http \\\n  @opentelemetry/instrumentation \\\n  @opentelemetry/sdk-trace-base \\\n  @opentelemetry/sdk-trace-node\n```\n\n----------------------------------------\n\nTITLE: Initializing Metrics Provider in Go with OpenTelemetry\nDESCRIPTION: This function initializes the OpenTelemetry SDK for metrics. It sets up an OTLP gRPC exporter and creates a MeterProvider with a periodic reader.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc initMeterProvider() *sdkmetric.MeterProvider {\n    ctx := context.Background()\n\n    exporter, err := otlpmetricgrpc.New(ctx)\n    if err != nil {\n        log.Fatalf(\"new otlp metric grpc exporter failed: %v\", err)\n    }\n\n    mp := sdkmetric.NewMeterProvider(sdkmetric.WithReader(sdkmetric.NewPeriodicReader(exporter)))\n    global.SetMeterProvider(mp)\n    return mp\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering ASP.NET Requests in OpenTelemetry Instrumentation\nDESCRIPTION: Demonstrates how to use the Filter method in AspNetInstrumentationOptions to selectively collect telemetry data. This example shows filtering to only collect data for GET requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/netframework.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nthis.tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddAspNetInstrumentation(\n        (options) => options.Filter =\n            (httpContext) =>\n            {\n                // only collect telemetry about HTTP GET requests\n                return httpContext.Request.HttpMethod.Equals(\"GET\");\n            })\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Recording Exceptions in Spans with OpenTelemetry Python\nDESCRIPTION: Demonstrates how to record exceptions in spans along with setting appropriate status codes for error tracking.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.trace import Status, StatusCode\n\ncurrent_span = trace.get_current_span()\n\ntry:\n    # something that might fail\n\n# Consider catching a more specific exception in your code\nexcept Exception as ex:\n    current_span.set_status(Status(StatusCode.ERROR))\n    current_span.record_exception(ex)\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram with Description in JavaScript using OpenTelemetry\nDESCRIPTION: Illustrates how to create a histogram instrument with a description, unit, and value type. This example creates a histogram to measure HTTP server response times.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nconst httpServerResponseDuration = myMeter.createHistogram(\n  'http.server.duration',\n  {\n    description: 'A distribution of the HTTP server response times',\n    unit: 'milliseconds',\n    valueType: ValueType.INT,\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in PHP with OpenTelemetry\nDESCRIPTION: Demonstrates how to create nested spans in PHP using OpenTelemetry. It shows activating a parent span, creating a child span, and properly detaching the scope.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_14\n\nLANGUAGE: php\nCODE:\n```\nprivate function rollOnce() {\n    $parent = OpenTelemetry\\API\\Trace\\Span::getCurrent();\n    $scope = $parent->activate();\n    try {\n        $span = $this->tracer->spanBuilder(\"rollTheDice\")->startSpan();\n        $result = random_int(1, 6);\n        $span->end();\n    } finally {\n        $scope->detach();\n    }\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Getting Context Values in PHP\nDESCRIPTION: Illustrates how to set and get values in a context using OpenTelemetry's Context API. Context is immutable, so setting a value creates a new context with the new entry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/context.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nuse OpenTelemetry\\Context\\Context;\n\n$key = Context::createKey('some key');\n\n// add a new entry\n$ctx2 = Context::getCurrent()->with($key, 'context 2');\n\n// ctx2 contains the new entry\nvar_dump($ctx2->get($key)); // \"context 2\"\n\n// active context is unchanged\nvar_dump(Context::getCurrent()->get($key)); // NULL\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to OpenTelemetry Spans in Go\nDESCRIPTION: Adds custom attributes to the current span, providing additional context about the operation such as a product ID being processed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nspan.SetAttributes(\n    attribute.String(\"app.product.id\", req.Id),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in OpenTelemetry Python\nDESCRIPTION: Illustrates how to create nested spans for tracking hierarchical operations with timing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/cookbook.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nimport time\n\ntracer = trace.get_tracer(\"my.tracer\")\n\n# Create a new span to track some work\nwith tracer.start_as_current_span(\"parent\"):\n    time.sleep(1)\n\n    # Create a nested span to track nested work\n    with tracer.start_as_current_span(\"child\"):\n        time.sleep(2)\n        # the nested span is closed when it's out of scope\n\n    # Now the parent span is the current span again\n    time.sleep(1)\n\n    # This span is also closed when it goes out of scope\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Service Resources in OpenTelemetry\nDESCRIPTION: Example of setting custom service-related resource attributes in the OpenTelemetry Node.js SDK configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/resources.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { resourceFromAttributes } = require('@opentelemetry/resources');\nconst { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_SERVICE_NAMESPACE, SEMRESATTRS_SERVICE_VERSION, SEMRESATTRS_SERVICE_INSTANCE_ID } = require('@opentelemetry/semantic-conventions');\n\nconst sdk = new opentelemetry.NodeSDK({\n  ...\n  resource: resourceFromAttributes({\n    [ SEMRESATTRS_SERVICE_NAME ]: \"yourServiceName\",\n    [ SEMRESATTRS_SERVICE_NAMESPACE ]: \"yourNameSpace\",\n    [ SEMRESATTRS_SERVICE_VERSION ]: \"1.0\",\n    [ SEMRESATTRS_SERVICE_INSTANCE_ID ]: \"my-instance-id-1\",\n  })\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Multiple Config Files\nDESCRIPTION: This command demonstrates how to provide multiple configuration files to the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\notelcol --config=file:/path/to/first/file --config=file:/path/to/second/file\n```\n\n----------------------------------------\n\nTITLE: Configuring SpanExporter implementations in Java OpenTelemetry SDK\nDESCRIPTION: Demonstrates how to configure different SpanExporter implementations for exporting spans out of process. This snippet shows configuration for OTLP HTTP/gRPC exporters and logging exporters with customizable parameters like endpoints, headers, and timeouts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.exporter.logging.LoggingSpanExporter;\nimport io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingSpanExporter;\nimport io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter;\nimport io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter;\nimport io.opentelemetry.sdk.trace.export.SpanExporter;\nimport java.time.Duration;\n\npublic class SpanExporterConfig {\n  public static SpanExporter otlpHttpSpanExporter(String endpoint) {\n    return OtlpHttpSpanExporter.builder()\n        .setEndpoint(endpoint)\n        .addHeader(\"api-key\", \"value\")\n        .setTimeout(Duration.ofSeconds(10))\n        .build();\n  }\n\n  public static SpanExporter otlpGrpcSpanExporter(String endpoint) {\n    return OtlpGrpcSpanExporter.builder()\n        .setEndpoint(endpoint)\n        .addHeader(\"api-key\", \"value\")\n        .setTimeout(Duration.ofSeconds(10))\n        .build();\n  }\n\n  public static SpanExporter logginSpanExporter() {\n    return LoggingSpanExporter.create();\n  }\n\n  public static SpanExporter otlpJsonLoggingSpanExporter() {\n    return OtlpJsonLoggingSpanExporter.create();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Attributes in Erlang Configuration\nDESCRIPTION: Defines resource attributes in the Erlang application configuration using sys.config. This example sets the deployment environment to development using a nested map structure.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/resources.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n%% sys.config\n{opentelemetry, {resource, #{deployment => #{environment => <<\"development\">>}}}}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies\nDESCRIPTION: Installs OpenTelemetry SDK and auto-instrumentation packages for Node.js to collect traces and metrics from the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @opentelemetry/sdk-node \\\n  @opentelemetry/api \\\n  @opentelemetry/auto-instrumentations-node \\\n  @opentelemetry/sdk-metrics \\\n  @opentelemetry/sdk-trace-node\n```\n\n----------------------------------------\n\nTITLE: Implementing a Minimal ASP.NET Core API for Rolling Dice\nDESCRIPTION: Sets up a simple API endpoint that simulates rolling a dice, returning a random number between 1 and 6, with optional player name parameter. It includes logging functionality to track dice roll activities.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Globalization;\n\nusing Microsoft.AspNetCore.Mvc;\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\nstring HandleRollDice([FromServices]ILogger<Program> logger, string? player)\n{\n    var result = RollDice();\n\n    if (string.IsNullOrEmpty(player))\n    {\n        logger.LogInformation(\"Anonymous player is rolling the dice: {result}\", result);\n    }\n    else\n    {\n        logger.LogInformation(\"{player} is rolling the dice: {result}\", player, result);\n    }\n\n    return result.ToString(CultureInfo.InvariantCulture);\n}\n\nint RollDice()\n{\n    return Random.Shared.Next(1, 7);\n}\n\napp.MapGet(\"/rolldice/{player?}\", HandleRollDice);\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter in Non-ASP.NET Core Applications\nDESCRIPTION: Configure the OTLP exporter for tracing, metrics, and logging in a non-ASP.NET Core application with custom endpoint and protocol options.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    // Other setup code, like setting a resource goes here too\n    .AddOtlpExporter(options =>\n    {\n        options.Endpoint = new Uri(\"your-endpoint-here/v1/traces\");\n        options.Protocol = OtlpExportProtocol.HttpProtobuf;\n    })\n    .Build();\n\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    // Other setup code, like setting a resource goes here too\n    .AddOtlpExporter(options =>\n    {\n        options.Endpoint = new Uri(\"your-endpoint-here/v1/metrics\");\n        options.Protocol = OtlpExportProtocol.HttpProtobuf;\n    })\n    .Build();\n\nvar loggerFactory = LoggerFactory.Create(builder =>\n{\n    builder.AddOpenTelemetry(logging =>\n    {\n        logging.AddOtlpExporter(options =>\n        {\n            options.Endpoint = new Uri(\"your-endpoint-here/v1/logs\");\n            options.Protocol = OtlpExportProtocol.HttpProtobuf;\n        })\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans\nDESCRIPTION: Example showing how to create nested spans for tracking hierarchical operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc parentFunction(ctx context.Context) {\n\tctx, parentSpan := tracer.Start(ctx, \"parent\")\n\tdefer parentSpan.End()\n\n\t// call the child function and start a nested span in there\n\tchildFunction(ctx)\n\n\t// do more work - when this function ends, parentSpan will complete.\n}\n\nfunc childFunction(ctx context.Context) {\n\t// Create a span to track `childFunction()` - this is a nested span whose parent is `parentSpan`\n\tctx, childSpan := tracer.Start(ctx, \"child\")\n\tdefer childSpan.End()\n\n\t// do work here, when this function returns, childSpan will complete.\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Instruments in OpenTelemetry Python\nDESCRIPTION: Creates a Counter instrument for measuring work items processed, with unit and description metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nwork_counter = meter.create_counter(\n    \"work.counter\", unit=\"1\", description=\"Counts the amount of work done\"\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans\nDESCRIPTION: Example showing how to create nested spans for tracking hierarchical operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc parentFunction(ctx context.Context) {\n\tctx, parentSpan := tracer.Start(ctx, \"parent\")\n\tdefer parentSpan.End()\n\n\t// call the child function and start a nested span in there\n\tchildFunction(ctx)\n\n\t// do more work - when this function ends, parentSpan will complete.\n}\n\nfunc childFunction(ctx context.Context) {\n\t// Create a span to track `childFunction()` - this is a nested span whose parent is `parentSpan`\n\tctx, childSpan := tracer.Start(ctx, \"child\")\n\tdefer childSpan.End()\n\n\t// do work here, when this function returns, childSpan will complete.\n}\n```\n\n----------------------------------------\n\nTITLE: Ansible Configuration Setup\nDESCRIPTION: Basic ansible.cfg configuration specifying inventory location and SSH settings\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/scaling-collectors.md#2025-04-09_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[defaults]\ninventory = inventory  # Path to the inventory file\nprivate_key_file = ~/.ssh/id_rsa   # Path to private SSH Key\nremote_user=root\n```\n\n----------------------------------------\n\nTITLE: Initializing Tracing Provider in Go with OpenTelemetry\nDESCRIPTION: This function initializes the OpenTelemetry SDK for tracing. It sets up an OTLP gRPC exporter, creates a TracerProvider with a batcher, and configures global propagators.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nfunc initTracerProvider() *sdktrace.TracerProvider {\n    ctx := context.Background()\n\n    exporter, err := otlptracegrpc.New(ctx)\n    if err != nil {\n        log.Fatal(err)\n    }\n    tp := sdktrace.NewTracerProvider(\n        sdktrace.WithBatcher(exporter),\n        sdktrace.WithResource(initResource()),\n    )\n    otel.SetTracerProvider(tp)\n    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext{}, propagation.Baggage{}))\n    return tp\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Metrics in OpenTelemetry Go\nDESCRIPTION: This example shows how to add attributes to metrics using OpenTelemetry Go SDK. It creates an UpDownCounter for API calls and adds an HTTP status code attribute to each measurement.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_20\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"net/http\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n\tsemconv \"go.opentelemetry.io/otel/semconv/v1.26.0\"\n)\n\nfunc init() {\n\tapiCounter, err := meter.Int64UpDownCounter(\n\t\t\"api.finished.counter\",\n\t\tmetric.WithDescription(\"Number of finished API calls.\"),\n\t\tmetric.WithUnit(\"{call}\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\t// do some work in an API call and set the response HTTP status code\n\n\t\tapiCounter.Add(r.Context(), 1,\n\t\t\tmetric.WithAttributes(semconv.HTTPResponseStatusCode(statusCode)))\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetryCollector with Target Allocator in YAML\nDESCRIPTION: Example YAML configuration for enabling the Target Allocator in an OpenTelemetryCollector Custom Resource. It shows the collector configuration with a Prometheus receiver and necessary settings to enable target allocation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/target-allocator.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: collector-with-ta\nspec:\n  mode: statefulset\n  targetAllocator:\n    enabled: true\n  config: |\n    receivers:\n      prometheus:\n        config:\n          scrape_configs:\n          - job_name: 'otel-collector'\n            scrape_interval: 10s\n            static_configs:\n            - targets: [ '0.0.0.0:8888' ]\n            metric_relabel_configs:\n            - action: labeldrop\n              regex: (id|name)\n              replacement: $$1\n            - action: labelmap\n              regex: label_(.+)\n              replacement: $$1\n\n    exporters:\n      # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n      debug:\n\n    service:\n      pipelines:\n        metrics:\n          receivers: [prometheus]\n          processors: []\n          exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Registering All Node.js Instrumentation Packages in JavaScript\nDESCRIPTION: Code to register all available Node.js instrumentation packages with the OpenTelemetry SDK using the auto-instrumentation metapackage in a JavaScript environment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\n\nconst sdk = new NodeSDK({\n  ...\n  // This registers all instrumentation packages\n  instrumentations: [getNodeAutoInstrumentations()]\n});\n```\n\n----------------------------------------\n\nTITLE: Manual Context Propagation in JavaScript (Receiving Service)\nDESCRIPTION: JavaScript implementation for manually extracting OpenTelemetry context in a receiving service from propagated trace information and creating a new span within that context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// Receiving service\nimport { context, propagation, trace } from '@opentelemetry/api';\n\n// Assume \"input\" is an object with 'traceparent' & 'tracestate' keys\nconst input = {};\n\n// Extracts the 'traceparent' and 'tracestate' data into a context object.\n//\n// You can then treat this context as the active context for your\n// traces.\nlet activeContext = propagation.extract(context.active(), input);\n\nlet tracer = trace.getTracer('app-name');\n\nlet span = tracer.startSpan(\n  spanName,\n  {\n    attributes: {},\n  },\n  activeContext,\n);\n\n// Set the created span as active in the deserialized context.\ntrace.setSpan(activeContext, span);\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans\nDESCRIPTION: Example showing how to create nested spans for tracking hierarchical operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc parentFunction(ctx context.Context) {\n\tctx, parentSpan := tracer.Start(ctx, \"parent\")\n\tdefer parentSpan.End()\n\n\t// call the child function and start a nested span in there\n\tchildFunction(ctx)\n\n\t// do more work - when this function ends, parentSpan will complete.\n}\n\nfunc childFunction(ctx context.Context) {\n\t// Create a span to track `childFunction()` - this is a nested span whose parent is `parentSpan`\n\tctx, childSpan := tracer.Start(ctx, \"child\")\n\tdefer childSpan.End()\n\n\t// do work here, when this function returns, childSpan will complete.\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Counter Value with Tags for Custom Metrics in C#\nDESCRIPTION: Demonstrates how to increment the counter value and add a tag to the measurement. This allows for more detailed metric tracking.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/custom.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nsuccessCounter.Add(1, new KeyValuePair<string, object?>(\"tagName\", \"tagValue\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Go Module for Dice Application\nDESCRIPTION: Initializes a new Go module named 'dice' for the example application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init dice\n```\n\n----------------------------------------\n\nTITLE: Configuring Launch Settings for ASP.NET Core Application\nDESCRIPTION: JSON configuration that sets up the development environment for the ASP.NET Core application, specifying the HTTP port (8080) and environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"http://localhost:8080\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Span in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to create a basic span using OpenTelemetry tracer and set span attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/cookbook.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ntracer = trace.get_tracer(\"my.tracer\")\nwith tracer.start_as_current_span(\"print\") as span:\n    print(\"foo\")\n    span.set_attribute(\"printed_string\", \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK in Node.js\nDESCRIPTION: Sets up the OpenTelemetry SDK with auto-instrumentation, trace and metric exporters, and various resource detectors. Configures OTLP exporters for both traces and metrics, and includes cloud platform-specific resource detectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/payment.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\nconst {\n  OTLPTraceExporter,\n} = require('@opentelemetry/exporter-trace-otlp-grpc');\nconst {\n  OTLPMetricExporter,\n} = require('@opentelemetry/exporter-metrics-otlp-grpc');\nconst { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');\nconst {\n  alibabaCloudEcsDetector,\n} = require('@opentelemetry/resource-detector-alibaba-cloud');\nconst {\n  awsEc2Detector,\n  awsEksDetector,\n} = require('@opentelemetry/resource-detector-aws');\nconst {\n  containerDetector,\n} = require('@opentelemetry/resource-detector-container');\nconst { gcpDetector } = require('@opentelemetry/resource-detector-gcp');\nconst {\n  envDetector,\n  hostDetector,\n  osDetector,\n  processDetector,\n} = require('@opentelemetry/resources');\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new OTLPTraceExporter(),\n  instrumentations: [\n    getNodeAutoInstrumentations({\n      // only instrument fs if it is part of another trace\n      '@opentelemetry/instrumentation-fs': {\n        requireParentSpan: true,\n      },\n    }),\n  ],\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter(),\n  }),\n  resourceDetectors: [\n    containerDetector,\n    envDetector,\n    hostDetector,\n    osDetector,\n    processDetector,\n    alibabaCloudEcsDetector,\n    awsEksDetector,\n    awsEc2Detector,\n    gcpDetector,\n  ],\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Exporters Configuration\nDESCRIPTION: This YAML file contains the configuration for the OTLP exporter, which is included in the main configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\notlp:\n  endpoint: otelcol.observability.svc.cluster.local:443\n```\n\n----------------------------------------\n\nTITLE: Configuring LogRecordExporter in OpenTelemetry Java SDK\nDESCRIPTION: This code demonstrates how to configure various LogRecordExporter implementations, including OTLP HTTP, OTLP gRPC, SystemOut, and OTLP JSON logging exporters. It shows how to set endpoints, headers, and timeouts for the exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_19\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.exporter.logging.SystemOutLogRecordExporter;\nimport io.opentelemetry.exporter.logging.otlp.OtlpJsonLoggingLogRecordExporter;\nimport io.opentelemetry.exporter.otlp.http.logs.OtlpHttpLogRecordExporter;\nimport io.opentelemetry.exporter.otlp.logs.OtlpGrpcLogRecordExporter;\nimport io.opentelemetry.sdk.logs.export.LogRecordExporter;\nimport java.time.Duration;\n\npublic class LogRecordExporterConfig {\n  public static LogRecordExporter otlpHttpLogRecordExporter(String endpoint) {\n    return OtlpHttpLogRecordExporter.builder()\n        .setEndpoint(endpoint)\n        .addHeader(\"api-key\", \"value\")\n        .setTimeout(Duration.ofSeconds(10))\n        .build();\n  }\n\n  public static LogRecordExporter otlpGrpcLogRecordExporter(String endpoint) {\n    return OtlpGrpcLogRecordExporter.builder()\n        .setEndpoint(endpoint)\n        .addHeader(\"api-key\", \"value\")\n        .setTimeout(Duration.ofSeconds(10))\n        .build();\n  }\n\n  public static LogRecordExporter systemOutLogRecordExporter() {\n    return SystemOutLogRecordExporter.create();\n  }\n\n  public static LogRecordExporter otlpJsonLoggingLogRecordExporter() {\n    return OtlpJsonLoggingLogRecordExporter.create();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Using EventLogger for Log Events in PHP\nDESCRIPTION: Demonstrates how to create a Logger and EventLogger for emitting log events. The example shows how to create a LogRecord with severity level and attributes, then log it as an event with a specific domain.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_27\n\nLANGUAGE: php\nCODE:\n```\n$logger = $loggerProvider->getLogger('demo', '1.0', 'http://schema.url', [/*attributes*/]);\n$eventLogger = new EventLogger($logger, 'my-domain');\n$record = (new LogRecord('hello world'))\n    ->setSeverityText('INFO')\n    ->setAttributes([/*attributes*/]);\n\n$eventLogger->logEvent('foo', $record);\n```\n\n----------------------------------------\n\nTITLE: Working with Return Values from Context Callbacks in OpenTelemetry\nDESCRIPTION: Shows how api.context.with() returns the value from the callback. This example demonstrates using the context with an async operation that returns a value.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst name = await api.context.with(api.context.active(), async () => {\n  const row = await db.getSomeValue();\n  return row['name'];\n});\n\nconsole.log(name); // name returned by the db\n```\n\n----------------------------------------\n\nTITLE: Getting Span from Context in PHP with OpenTelemetry\nDESCRIPTION: Demonstrates how to retrieve a span from a given context in PHP using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n$span = OpenTelemetry\\API\\Trace\\Span::fromContext($context);\n```\n\n----------------------------------------\n\nTITLE: Getting Current Span in PHP with OpenTelemetry\nDESCRIPTION: Shows how to retrieve the current active span in PHP using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n$span = OpenTelemetry\\API\\Trace\\Span::getCurrent();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with DNS-based Load Balancing\nDESCRIPTION: YAML configuration for a first-tier OpenTelemetry collector that uses the load-balancing exporter with DNS resolver. It resolves collector hostnames dynamically through DNS queries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/gateway/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nexporters:\n  loadbalancing:\n    protocol:\n      otlp:\n        tls:\n          insecure: true\n    resolver:\n      dns:\n        hostname: collectors.example.com\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [loadbalancing]\n```\n\n----------------------------------------\n\nTITLE: Creating and Ending a Span in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to create a tracer, build a span, start it, and then end it using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$tracer = $tracerProvider->getTracer('io.opentelemetry.contrib.php');\n$tracer\n  ->spanBuilder('example')\n  ->startSpan()\n  ->end();\n```\n\n----------------------------------------\n\nTITLE: Viewing Collector Logs via Journalctl\nDESCRIPTION: Shell commands for viewing OpenTelemetry Collector logs using journalctl on Linux systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\njournalctl | grep otelcol\n```\n\nLANGUAGE: sh\nCODE:\n```\njournalctl | grep otelcol | grep Error\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Authenticator with OTLP Receiver\nDESCRIPTION: YAML configuration demonstrating how to connect an OIDC authenticator to an OTLP receiver using gRPC protocol.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/authenticator-extension.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  oidc:\n\nreceivers:\n  otlp/auth:\n    protocols:\n      grpc:\n         endpoint: 0.0.0.0:4317\n        auth:\n          authenticator: oidc\n\nprocessors:\nexporters:\n\nservice:\n  extensions:\n    - oidc\n  pipelines:\n    traces:\n      receivers:\n        - otlp/auth\n      processors: []\n      exporters: []\n```\n\n----------------------------------------\n\nTITLE: Generating OpenTelemetry Language Support Status Table with Hugo Template\nDESCRIPTION: A Hugo template that creates a markdown table displaying the implementation status of OpenTelemetry features (traces, metrics, logs) for different programming languages. The template uses data from Site.Data.instrumentation and applies the 'humanize' filter to format status values.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/telemetry-support-table.md#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $data := $.Site.Data.instrumentation }}\n\nLanguage | Traces | Metrics | Logs |\n| --- | --- | --- | --- |\n| [C++](/docs/languages/cpp/) | {{ $data.cpp.status.traces | humanize }} | {{ $data.cpp.status.metrics | humanize }} | {{ $data.cpp.status.logs | humanize }} |\n| [C#/.NET](/docs/languages/dotnet/) | {{ $data.dotnet.status.traces | humanize }} | {{ $data.dotnet.status.metrics | humanize }} | {{ $data.dotnet.status.logs | humanize }} |\n| [Erlang/Elixir](/docs/languages/erlang/) | {{ $data.erlang.status.traces | humanize }} | {{ $data.erlang.status.metrics | humanize }} | {{ $data.erlang.status.logs | humanize }} |\n| [Go](/docs/languages/go/) | {{ $data.go.status.traces | humanize }} | {{ $data.go.status.metrics | humanize }} | {{ $data.go.status.logs | humanize }} |\n| [Java](/docs/languages/java/) | {{ $data.java.status.traces | humanize }} | {{ $data.java.status.metrics | humanize }} | {{ $data.java.status.logs | humanize }} |\n| [JavaScript](/docs/languages/js/) | {{ $data.js.status.traces | humanize }} | {{ $data.js.status.metrics | humanize }} | {{ $data.js.status.logs | humanize }} |\n| [PHP](/docs/languages/php/) | {{ $data.php.status.traces | humanize }} | {{ $data.php.status.metrics | humanize }} | {{ $data.php.status.logs | humanize }} |\n| [Python](/docs/languages/python/) | {{$data.python.status.traces | humanize }} | {{ $data.python.status.metrics | humanize }} | {{ $data.python.status.logs | humanize }} |\n| [Ruby](/docs/languages/ruby/) | {{ $data.ruby.status.traces | humanize }} | {{ $data.ruby.status.metrics | humanize }} | {{ $data.ruby.status.logs | humanize }} |\n| [Rust](/docs/languages/rust/) | {{ $data.rust.status.traces | humanize }} | {{ $data.rust.status.metrics | humanize }} | {{ $data.rust.status.logs | humanize }} |\n| [Swift](/docs/languages/swift/) | {{ $data.swift.status.traces | humanize }} | {{ $data.swift.status.metrics | humanize }} | {{ $data.swift.status.logs | humanize }} |\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP HTTP/Proto Exporter in Python\nDESCRIPTION: Python code to configure the OpenTelemetry HTTP/Proto exporter for both traces and metrics. Sets up a TracerProvider with BatchSpanProcessor and MeterProvider with PeriodicExportingMetricReader.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\n\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.otlp.proto.http.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\nfrom opentelemetry import metrics\nfrom opentelemetry.exporter.otlp.proto.http.metric_exporter import OTLPMetricExporter\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\n\n# Service name is required for most backends\nresource = Resource(attributes={\n    SERVICE_NAME: \"your-service-name\"\n})\n\ntracerProvider = TracerProvider(resource=resource)\nprocessor = BatchSpanProcessor(OTLPSpanExporter(endpoint=\"<traces-endpoint>/v1/traces\"))\ntracerProvider.add_span_processor(processor)\ntrace.set_tracer_provider(tracerProvider)\n\nreader = PeriodicExportingMetricReader(\n    OTLPMetricExporter(endpoint=\"<traces-endpoint>/v1/metrics\")\n)\nmeterProvider = MeterProvider(resource=resource, metric_readers=[reader])\nmetrics.set_meter_provider(meterProvider)\n```\n\n----------------------------------------\n\nTITLE: Accessing Active Span in OpenTelemetry\nDESCRIPTION: Demonstrates how to access the current active span from the OpenTelemetry context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/payment.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst span = opentelemetry.trace.getActiveSpan();\n```\n\n----------------------------------------\n\nTITLE: Creating a basic Flask application\nDESCRIPTION: Defines a simple Flask application with a /rolldice endpoint that returns a random dice roll.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom random import randint\nfrom flask import Flask, request\nimport logging\n\napp = Flask(__name__)\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\n\n@app.route(\"/rolldice\")\ndef roll_dice():\n    player = request.args.get('player', default=None, type=str)\n    result = str(roll())\n    if player:\n        logger.warning(\"%s is rolling the dice: %s\", player, result)\n    else:\n        logger.warning(\"Anonymous player is rolling the dice: %s\", result)\n    return result\n\n\ndef roll():\n    return randint(1, 6)\n```\n\n----------------------------------------\n\nTITLE: Initializing Zipkin Exporter for Tracing in C++\nDESCRIPTION: This snippet shows how to initialize the Zipkin exporter for tracing in OpenTelemetry C++. It includes setting up the exporter options, creating a resource, and configuring the tracer provider.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"opentelemetry/exporters/zipkin/zipkin_exporter_factory.h\"\n#include \"opentelemetry/sdk/resource/resource.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/simple_processor_factory.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider_factory.h\"\n#include \"opentelemetry/trace/provider.h\"\n\nnamespace trace     = opentelemetry::trace;\nnamespace trace_sdk = opentelemetry::sdk::trace;\nnamespace zipkin    = opentelemetry::exporter::zipkin;\nnamespace resource  = opentelemetry::sdk::resource;\n\nvoid InitTracer()\n{\n  zipkin::ZipkinExporterOptions opts;\n  resource::ResourceAttributes attributes = {{\"service.name\", \"zipkin_demo_service\"}};\n  auto resource                           = resource::Resource::Create(attributes);\n  auto exporter                           = zipkin::ZipkinExporterFactory::Create(opts);\n  auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));\n  std::shared_ptr<opentelemetry::trace::TracerProvider> provider =\n      trace_sdk::TracerProviderFactory::Create(std::move(processor), resource);\n  // Set the global trace provider\n  trace::Provider::SetTracerProvider(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing DiceController with ActivitySource\nDESCRIPTION: Controller implementation that uses ActivitySource for tracing dice roll operations. Includes error handling and logging.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n/*DiceController.cs*/\n\nusing Microsoft.AspNetCore.Mvc;\nusing System.Diagnostics;\nusing System.Net;\n\npublic class DiceController : ControllerBase\n{\n    private ILogger<DiceController> logger;\n\n    private ActivitySource activitySource;\n\n    public DiceController(ILogger<DiceController> logger, Instrumentation instrumentation)\n    {\n        this.logger = logger;\n        this.activitySource = instrumentation.ActivitySource;\n    }\n\n    [HttpGet(\"/rolldice\")]\n    public List<int> RollDice(string player, int? rolls)\n    {\n        List<int> result = new List<int>();\n\n        if (!rolls.HasValue)\n        {\n            logger.LogError(\"Missing rolls parameter\");\n            throw new HttpRequestException(\"Missing rolls parameter\", null, HttpStatusCode.BadRequest);\n        }\n\n        result = new Dice(1, 6, activitySource).rollTheDice(rolls.Value);\n\n        if (string.IsNullOrEmpty(player))\n        {\n            logger.LogInformation(\"Anonymous player is rolling the dice: {result}\", result);\n        }\n        else\n        {\n            logger.LogInformation(\"{player} is rolling the dice: {result}\", player, result);\n        }\n\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in a Rails Initializer\nDESCRIPTION: Ruby code for initializing OpenTelemetry in a Rails application, setting the service name and enabling all available instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/opentelemetry.rb\nrequire 'opentelemetry/sdk'\nrequire 'opentelemetry/instrumentation/all'\nOpenTelemetry::SDK.configure do |c|\n  c.service_name = 'dice-ruby'\n  c.use_all() # enables all instrumentation!\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Values for Kubernetes\nDESCRIPTION: YAML configuration for deploying OpenTelemetry Collector in Kubernetes. Sets up cluster metrics and Kubernetes events collection with deployment mode and single replica count. Includes commented section for configuring optional OTLP exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmode: deployment\n\nimage:\n  repository: otel/opentelemetry-collector-k8s\n\n# We only want one of these collectors - any more and we'd produce duplicate data\nreplicaCount: 1\n\npresets:\n  # enables the k8sclusterreceiver and adds it to the metrics pipelines\n  clusterMetrics:\n    enabled: true\n  # enables the k8sobjectsreceiver to collect events only and adds it to the logs pipelines\n  kubernetesEvents:\n    enabled: true\n## The chart only includes the loggingexporter by default\n## If you want to send your data somewhere you need to\n## configure an exporter, such as the otlpexporter\n# config:\n# exporters:\n#   otlp:\n#     endpoint: \"<SOME BACKEND>\"\n# service:\n#   pipelines:\n#     traces:\n#       exporters: [ otlp ]\n#     metrics:\n#       exporters: [ otlp ]\n#     logs:\n#       exporters: [ otlp ]\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans with sdk-trace-base in JavaScript\nDESCRIPTION: Demonstrates how to create nested spans and manually propagate span context using sdk-trace-base.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nconst mainWork = () => {\n  const parentSpan = tracer.startSpan('main');\n\n  for (let i = 0; i < 3; i += 1) {\n    doWork(parentSpan, i);\n  }\n\n  // Be sure to end the parent span!\n  parentSpan.end();\n};\n\nconst doWork = (parent, i) => {\n  // To create a child span, we need to mark the current (parent) span as the active span\n  // in the context, then use the resulting context to create a child span.\n  const ctx = opentelemetry.trace.setSpan(\n    opentelemetry.context.active(),\n    parent,\n  );\n  const span = tracer.startSpan(`doWork:${i}`, undefined, ctx);\n\n  // simulate some random work.\n  for (let i = 0; i <= Math.floor(Math.random() * 40000000); i += 1) {\n    // empty\n  }\n\n  // Make sure to end this child span! If you don't,\n  // it will continue to track work beyond 'doWork'!\n  span.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Using Counters in Go with OpenTelemetry\nDESCRIPTION: This code snippet demonstrates how to use a Counter to measure the number of API calls in a Go HTTP handler using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_13\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"net/http\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\nfunc init() {\n\tapiCounter, err := meter.Int64Counter(\n\t\t\"api.counter\",\n\t\tmetric.WithDescription(\"Number of API calls.\"),\n\t\tmetric.WithUnit(\"{call}\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tapiCounter.Add(r.Context(), 1)\n\n\t\t// do some work in an API call\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Detectors in Erlang\nDESCRIPTION: Configures which resource detectors to use in an Erlang application through sys.config file. This example sets up the otel_resource_env_var and otel_resource_app_env detectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/resources.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n%% sys.config\n{opentelemetry, {resource_detectors, [otel_resource_env_var, otel_resource_app_env]}}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Annotations in Java Spring\nDESCRIPTION: Demonstrates the usage of @WithSpan and @SpanAttribute annotations to create spans and capture method arguments as attributes in a Java Spring component.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/annotations.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.trace.Span;\nimport io.opentelemetry.api.trace.SpanKind;\nimport io.opentelemetry.instrumentation.annotations.SpanAttribute;\nimport io.opentelemetry.instrumentation.annotations.WithSpan;\nimport org.springframework.stereotype.Component;\n\n/** Test WithSpan */\n@Component\npublic class TracedClass {\n\n  @WithSpan\n  public void tracedMethod() {}\n\n  @WithSpan(value = \"span name\")\n  public void tracedMethodWithName() {\n    Span currentSpan = Span.current();\n    currentSpan.addEvent(\"ADD EVENT TO tracedMethodWithName SPAN\");\n    currentSpan.setAttribute(\"isTestAttribute\", true);\n  }\n\n  @WithSpan(kind = SpanKind.CLIENT)\n  public void tracedClientSpan() {}\n\n  public void tracedMethodWithAttribute(@SpanAttribute(\"attributeName\") String parameter) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing OpenCensus Bridge Links\nDESCRIPTION: Reference links to OpenCensus compatibility bridge implementations across different programming languages\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/sunsetting-opencensus.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[go shim]: https://github.com/open-telemetry/opentelemetry-go/tree/main/bridge/opencensus\n[java shim]: https://github.com/open-telemetry/opentelemetry-java/tree/main/opencensus-shim\n[python shim]: https://github.com/open-telemetry/opentelemetry-python/tree/main/shim/opentelemetry-opencensus-shim\n[js shim]: https://github.com/open-telemetry/opentelemetry-js/tree/main/experimental/packages/shim-opencensus\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Auto-Instrumentation Annotations in Kubernetes YAML\nDESCRIPTION: YAML annotations to enable Go auto-instrumentation and specify the target executable path for the OpenTelemetry Operator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ninstrumentation.opentelemetry.io/inject-go: 'true'\ninstrumentation.opentelemetry.io/otel-go-auto-target-exe: '/path/to/container/executable'\n```\n\n----------------------------------------\n\nTITLE: Frontmatter Configuration for .NET Documentation\nDESCRIPTION: YAML frontmatter configuration defining the document metadata, including title, description, aliases, and weight for the .NET implementation documentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: .NET\ndescription: >\n  <img width=\"35\" class=\"img-initial\" src=\"/img/logos/32x32/dotnet.svg\"\n  alt=\".NET\"> A language-specific implementation of OpenTelemetry in .NET.\naliases: [net, /csharp, /csharp/metrics, /csharp/tracing]\nweight: 12\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceIDRatioBasedSampler in Browser (JavaScript)\nDESCRIPTION: This snippet shows how to configure the TraceIDRatioBasedSampler for browser applications using JavaScript. It sets up the sampler to collect 10% of traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/sampling.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst {\n  WebTracerProvider,\n  TraceIdRatioBasedSampler,\n} = require('@opentelemetry/sdk-trace-web');\n\nconst samplePercentage = 0.1;\n\nconst provider = new WebTracerProvider({\n  sampler: new TraceIdRatioBasedSampler(samplePercentage),\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Main File for OpenTelemetry Go and Jaeger Integration\nDESCRIPTION: The complete main.go file that integrates OpenTelemetry with Jaeger tracing in a Go application. It includes MongoDB and Gin instrumentation, along with the main function setup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\n    \"context\"\n    \"log\"\n    \"net/http\"\n    \"github.com/aspecto-io/opentelemetry-examples/tracing\"\n    \"github.com/gin-gonic/gin\"\n    \"go.mongodb.org/mongo-driver/bson\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n    \"go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin\"\n    \"go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo\"\n    \"go.opentelemetry.io/otel\"\n    \"go.opentelemetry.io/otel/propagation\"\n)\n\nvar client * mongo.Client\n\nfunc main() {\n    //Export traces to Jaeger\n    tp, tpErr: = tracing.JaegerTracerProvider()\n    if tpErr != nil {\n        log.Fatal(tpErr)\n    }\n    otel.SetTracerProvider(tp)\n    otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(propagation.TraceContext {}, propagation.Baggage {}))\n    connectMongo()\n    startWebServer()\n}\n\nfunc connectMongo() {\n    opts: = options.Client()\n    //Mongo OpenTelemetry instrumentation\n    opts.Monitor = otelmongo.NewMonitor()\n    opts.ApplyURI(\"mongodb://localhost:27017\")\n    client, _ = mongo.Connect(context.Background(), opts)\n    //Seed the database with some todo's\n    docs: = [] interface {} {\n        bson.D {\n                {\n                    \"id\", \"1\"\n                }, {\n                    \"title\", \"Buy groceries\"\n                }\n            },\n            bson.D {\n                {\n                    \"id\", \"2\"\n                }, {\n                    \"title\", \"install Aspecto.io\"\n                }\n            },\n            bson.D {\n                {\n                    \"id\", \"3\"\n                }, {\n                    \"title\", \"Buy dogz.io domain\"\n                }\n            },\n    }\n    client.Database(\"todo\").Collection(\"todos\").InsertMany(context.Background(), docs)\n}\n\nfunc startWebServer() {\n    r: = gin.Default()\n    //gin OpenTelemetry instrumentation\n    r.Use(otelgin.Middleware(\"todo-service\"))\n    r.GET(\"/todo\", func(c * gin.Context) {\n        collection: = client.Database(\"todo\").Collection(\"todos\")\n        //Make sure to pass c.Request.Context() as the context and not c itself\n        cur, findErr: = collection.Find(c.Request.Context(), bson.D {})\n        if findErr != nil {\n            c.AbortWithError(500, findErr)\n            return\n        }\n        results: = make([] interface {}, 0)\n        curErr: = cur.All(c, & results)\n        if curErr != nil {\n            c.AbortWithError(500, curErr)\n            return\n        }\n        c.JSON(http.StatusOK, results)\n    })\n    _ = r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Root Span in JSON for OpenTelemetry Tracing\nDESCRIPTION: JSON representation of a root span named 'olá' in an OpenTelemetry trace. It includes context information, timestamps, attributes, and events.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/signals/traces.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"olá\",\n  \"context\": {\n    \"trace_id\": \"5b8aa5a2d2c872e8321cf37308d69df2\",\n    \"span_id\": \"051581bf3cb55c13\"\n  },\n  \"parent_id\": null,\n  \"start_time\": \"2022-04-29T18:52:58.114201Z\",\n  \"end_time\": \"2022-04-29T18:52:58.114687Z\",\n  \"attributes\": {\n    \"http.route\": \"alguma_rota1\"\n  },\n  \"events\": [\n    {\n      \"name\": \"Guten Tag!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114561Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating OpenTelemetry Wrapper for AWS Lambda\nDESCRIPTION: JavaScript code for creating an OpenTelemetry wrapper to enable tracing in AWS Lambda functions. It sets up the tracer provider, span processor, and registers instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/serverless.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/* lambda-wrapper.js */\n\nconst api = require('@opentelemetry/api');\nconst { BatchSpanProcessor } = require('@opentelemetry/sdk-trace-base');\nconst {\n  OTLPTraceExporter,\n} = require('@opentelemetry/exporter-trace-otlp-http');\nconst { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');\nconst { registerInstrumentations } = require('@opentelemetry/instrumentation');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\n\napi.diag.setLogger(new api.DiagConsoleLogger(), api.DiagLogLevel.ALL);\n\nconst spanProcessor = new BatchSpanProcessor(\n  new OTLPTraceExporter({\n    url: '<backend_url>',\n  }),\n);\n\nconst provider = new NodeTracerProvider({\n  spanProcessors: [spanProcessor],\n});\n\nprovider.register();\n\nregisterInstrumentations({\n  instrumentations: [\n    getNodeAutoInstrumentations({\n      '@opentelemetry/instrumentation-aws-lambda': {\n        disableAwsContextPropagation: true,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Using Gauges in Go with OpenTelemetry\nDESCRIPTION: This code snippet demonstrates how to use a Gauge to measure the current speed of a CPU fan in a Go application using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_15\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"net/http\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\nvar (\n  fanSpeedSubscription chan int64\n  speedGauge metric.Int64Gauge\n)\n\nfunc init() {\n\tvar err error\n\tspeedGauge, err = meter.Int64Gauge(\n\t\t\"cpu.fan.speed\",\n\t\tmetric.WithDescription(\"Speed of CPU fan\"),\n\t\tmetric.WithUnit(\"RPM\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tgetCPUFanSpeed := func() int64 {\n\t\t// Generates a random fan speed for demonstration purpose.\n\t\t// In real world applications, replace this to get the actual fan speed.\n\t\treturn int64(1500 + rand.Intn(1000))\n\t}\n\n\tfanSpeedSubscription = make(chan int64, 1)\n\tgo func() {\n\t\tdefer close(fanSpeedSubscription)\n\n\t\tfor idx := 0; idx < 5; idx++ {\n\t\t\t// Synchronous gauges are used when the measurement cycle is\n\t\t\t// synchronous to an external change.\n\t\t\ttime.Sleep(time.Duration(rand.Intn(3)) * time.Second)\n\t\t\tfanSpeed := getCPUFanSpeed()\n\t\t\tfanSpeedSubscription <- fanSpeed\n\t\t}\n\t}()\n}\n\nfunc recordFanSpeed() {\n\tctx := context.Background()\n\tfor fanSpeed := range fanSpeedSubscription {\n\t\tspeedGauge.Record(ctx, fanSpeed)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Traces with Resource and Instrumentation Scopes\nDESCRIPTION: Function to generate traces with proper resource and instrumentation scope initialization for both ATM and backend systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_38\n\nLANGUAGE: go\nCODE:\n```\nfunc generateTraces(numberOfTraces int) ptrace.Traces{\n\ttraces := ptrace.NewTraces()\n\n\tfor i := 0; i <= numberOfTraces; i++{\n\t\tnewAtm := generateAtm()\n\t\tnewBackendSystem := generateBackendSystem()\n\n\t\tresourceSpan := traces.ResourceSpans().AppendEmpty()\n\t\tatmResource := resourceSpan.Resource()\n\t\tfillResourceWithAtm(&atmResource, newAtm)\n\n\t\tatmInstScope := appendAtmSystemInstrScopeSpans(&resourceSpan)\n\n\t\tresourceSpan = traces.ResourceSpans().AppendEmpty()\n\t\tbackendResource := resourceSpan.Resource()\n\t\tfillResourceWithBackendSystem(&backendResource, newBackendSystem)\n\n\t\tbackendInstScope := appendAtmSystemInstrScopeSpans(&resourceSpan)\n\t}\n\n\treturn traces\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Span Attributes in OpenTelemetry\nDESCRIPTION: Shows how to add custom attributes to an OpenTelemetry span for payment amount tracking.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/payment.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nspan.setAttributes({\n  'app.payment.amount': parseFloat(`${amount.units}.${amount.nanos}`),\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing the Dice Controller with Random Roll Function\nDESCRIPTION: Ruby code for the DiceController that implements a 'roll' method to generate and return a random number between 1 and 6.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nclass DiceController < ApplicationController\n  def roll\n    render json: rand(1..6).to_s\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Java Auto-Instrumentation Libraries\nDESCRIPTION: This YAML configuration shows how to exclude specific Java instrumentation libraries by setting environment variables. It disables Kafka and Rediscala instrumentations while keeping the rest of the default configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  exporter:\n    endpoint: http://demo-collector:4318\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: '1'\n  java:\n    env:\n      - name: OTEL_INSTRUMENTATION_KAFKA_ENABLED\n        value: false\n      - name: OTEL_INSTRUMENTATION_REDISCALA_ENABLED\n        value: false\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Port Forwarding Commands\nDESCRIPTION: Shell commands for setting up port forwarding to access the Target Allocator service and retrieve service information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl port-forward svc/otelcol-targetallocator -n opentelemetry 8080:80\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get svc -l app.kubernetes.io/component=opentelemetry-targetallocator -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Service Mapping Example\nDESCRIPTION: Example configuration showing how to map host names and IP addresses to peer services. Format uses comma-separated pairs of host/IP and service name assignments.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/instrumentation/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1.2.3.4=cats-service,dogs-abcdef123.serverlessapis.com=dogs-api\n```\n\n----------------------------------------\n\nTITLE: Setting Active Span\nDESCRIPTION: Marks a span as active for the current context, returning a scope object that controls the span's active lifetime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nauto scope = tracer->WithActiveSpan(span);\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporters in Node.js with JavaScript\nDESCRIPTION: Sets up OpenTelemetry SDK with OTLP exporters using HTTP/protobuf in a JavaScript Node.js application. Configures both trace and metric exporters with additional options like concurrency limits.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\nconst {\n  OTLPTraceExporter,\n} = require('@opentelemetry/exporter-trace-otlp-proto');\nconst {\n  OTLPMetricExporter,\n} = require('@opentelemetry/exporter-metrics-otlp-proto');\nconst { PeriodicExportingMetricReader } = require('@opentelemetry/sdk-metrics');\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new OTLPTraceExporter({\n    // optional - default url is http://localhost:4318/v1/traces\n    url: '<your-otlp-endpoint>/v1/traces',\n    // optional - collection of custom headers to be sent with each request, empty by default\n    headers: {},\n  }),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new OTLPMetricExporter({\n      url: '<your-otlp-endpoint>/v1/metrics', // url is optional and can be omitted - default is http://localhost:4318/v1/metrics\n      headers: {}, // an optional object containing custom headers to be sent with each request\n      concurrencyLimit: 1, // an optional limit on pending requests\n    }),\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Instrumented Function in Elixir\nDESCRIPTION: Example Elixir function with OpenTelemetry instrumentation that creates a span around an operation and sets an attribute. This serves as sample code for testing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n# lib/otel_getting_started.ex\ndefmodule OtelGettingStarted do\n  require OpenTelemetry.Tracer, as: Tracer\n\n  def hello do\n    Tracer.with_span \"operation\" do\n      Tracer.set_attributes([{:a_key, \"a value\"}])\n      :world\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring ATM System Instrumentation Scope with Metadata\nDESCRIPTION: Updated version of appendAtmSystemInstrScopeSpans that includes setting the name and version for the instrumentation scope.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_37\n\nLANGUAGE: go\nCODE:\n```\nfunc appendAtmSystemInstrScopeSpans(resourceSpans *ptrace.ResourceSpans) (ptrace.ScopeSpans){\n\tscopeSpans := resourceSpans.ScopeSpans().AppendEmpty()\n\tscopeSpans.Scope().SetName(\"atm-system\")\n\tscopeSpans.Scope().SetVersion(\"v1.0\")\n\treturn scopeSpans\n}\n```\n\n----------------------------------------\n\nTITLE: Creating ASP.NET Core Minimal API in C#\nDESCRIPTION: This code snippet defines a simple ASP.NET Core Minimal API application with a '/rolldice' endpoint. It includes logging functionality and demonstrates how to handle optional route parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Globalization;\n\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\n\nvar logger = app.Logger;\n\nint RollDice()\n{\n    return Random.Shared.Next(1, 7);\n}\n\nstring HandleRollDice(string? player)\n{\n    var result = RollDice();\n\n    if (string.IsNullOrEmpty(player))\n    {\n        logger.LogInformation(\"Anonymous player is rolling the dice: {result}\", result);\n    }\n    else\n    {\n        logger.LogInformation(\"{player} is rolling the dice: {result}\", player, result);\n    }\n\n    return result.ToString(CultureInfo.InvariantCulture);\n}\n\napp.MapGet(\"/rolldice/{player?}\", HandleRollDice);\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Setting Active Context in OpenTelemetry JavaScript\nDESCRIPTION: Demonstrates using api.context.with() to make a context active during execution of a callback. The active context can be accessed within the callback.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst key = api.createContextKey('Key to store a value');\nconst ctx = api.context.active();\n\napi.context.with(ctx.setValue(key, 'context 2'), async () => {\n  // \"context 2\" is active\n  console.log(api.context.active().getValue(key)); // \"context 2\"\n});\n```\n\n----------------------------------------\n\nTITLE: Minimum ClusterRole Rules for Target Allocator\nDESCRIPTION: This YAML snippet defines the minimum ClusterRole rules required for the Target Allocator to query targets based on Prometheus configurations. It includes permissions for various Kubernetes resources.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n- apiGroups: ['']\n  resources:\n    - nodes\n    - nodes/metrics\n    - services\n    - endpoints\n    - pods\n  verbs: ['get', 'list', 'watch']\n- apiGroups: ['']\n  resources:\n    - configmaps\n  verbs: ['get']\n- apiGroups:\n    - discovery.k8s.io\n  resources:\n    - endpointslices\n  verbs: ['get', 'list', 'watch']\n- apiGroups:\n    - networking.k8s.io\n  resources:\n    - ingresses\n  verbs: ['get', 'list', 'watch']\n- nonResourceURLs: ['/metrics']\n  verbs: ['get']\n```\n\n----------------------------------------\n\nTITLE: Configuring OTel Collector for Log Collection\nDESCRIPTION: This YAML configuration sets up the OTel Collector to receive logs via OTLP/gRPC and export them using the debug exporter with detailed verbosity.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\nexporters:\n  debug:\n    verbosity: detailed\nservice:\n  pipelines:\n    logs:\n      receivers: [otlp]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Pipelines of Same Type in OpenTelemetry Collector (YAML)\nDESCRIPTION: Example showing how to create additional pipelines for a given type using the type[/name] syntax, extending an existing configuration with a second traces pipeline.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    # ...\n    traces:\n      # ...\n    traces/2:\n      receivers: [opencensus]\n      processors: [batch]\n      exporters: [zipkin]\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-instrumentation in Dockerfile\nDESCRIPTION: Sets up the OpenTelemetry auto-instrumentation for Python by configuring the opentelemetry-instrument wrapper in the Dockerfile ENTRYPOINT command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [ \"opentelemetry-instrument\", \"python\", \"recommendation_server.py\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring TracingConsumerInterceptor for Kafka Consumer\nDESCRIPTION: Code to configure the TracingConsumerInterceptor in Kafka consumer properties to automatically create a \"receive\" span each time a message is received.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nprops.setProperty(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, TracingConsumerInterceptor.class.getName());\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Span Processor with OTLP HTTP Exporter in C++\nDESCRIPTION: This snippet shows how to configure a simple span processor with an OTLP HTTP exporter in OpenTelemetry C++. It includes creating the exporter and processor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"opentelemetry/exporters/otlp/otlp_http_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_http_exporter_options.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/simple_processor_factory.h\"\n\nauto exporter  = opentelemetry::exporter::otlp::OtlpHttpExporterFactory::Create(opts);\nauto processor = opentelemetry::sdk::trace::SimpleSpanProcessorFactory::Create(std::move(exporter));\n```\n\n----------------------------------------\n\nTITLE: Creating OTLP Trace Exporter over gRPC in Go OpenTelemetry\nDESCRIPTION: Example of how to create an OTLP trace exporter using the gRPC protocol. This implementation allows sending trace data to an OTLP endpoint like the OpenTelemetry collector or Jaeger via gRPC.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/exporters.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n \t\"context\"\n\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n)\n\nfunc newExporter(ctx context.Context) (trace.SpanExporter, error) {\n\treturn otlptracegrpc.New(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Unstructured Logs Examples\nDESCRIPTION: Examples of unstructured logs that don't follow a consistent format, showing how they can contain valuable information but are difficult to parse programmatically due to inconsistent structure.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/signals/logs.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] 2024-08-04 12:45:23 - Failed to connect to database. Exception: java.sql.SQLException: Timeout expired. Attempted reconnect 3 times. Server: db.example.com, Port: 5432\n\nSystem reboot initiated at 2024-08-04 03:00:00 by user: admin. Reason: Scheduled maintenance. Services stopped: web-server, database, cache. Estimated downtime: 15 minutes.\n\nDEBUG - 2024-08-04 09:30:15 - User johndoe performed action: file_upload. Filename: report_Q3_2024.pdf, Size: 2.3 MB, Duration: 5.2 seconds. Result: Success\n```\n\n----------------------------------------\n\nTITLE: Setting up OpenTelemetry SDK in Go\nDESCRIPTION: Initializes the OpenTelemetry SDK with trace, metric, and log providers. Sets up console exporters for all telemetry signals and configures propagation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\tcontext \"context\"\n\t\"errors\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdoutlog\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdouttrace\"\n\t\"go.opentelemetry.io/otel/log/global\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.opentelemetry.io/otel/sdk/log\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n)\n\n// setupOTelSDK bootstraps the OpenTelemetry pipeline.\n// If it does not return an error, make sure to call shutdown for proper cleanup.\nfunc setupOTelSDK(ctx context.Context) (shutdown func(context.Context) error, err error) {\n\tvar shutdownFuncs []func(context.Context) error\n\n\t// shutdown calls cleanup functions registered via shutdownFuncs.\n\t// The errors from the calls are joined.\n\t// Each registered cleanup will be invoked once.\n\tshutdown = func(ctx context.Context) error {\n\t\tvar err error\n\t\tfor _, fn := range shutdownFuncs {\n\t\t\terr = errors.Join(err, fn(ctx))\n\t\t}\n\t\tshutdownFuncs = nil\n\t\treturn err\n\t}\n\n\t// handleErr calls shutdown for cleanup and makes sure that all errors are returned.\n\thandleErr := func(inErr error) {\n\t\terr = errors.Join(inErr, shutdown(ctx))\n\t}\n\n\t// Set up propagator.\n\tprop := newPropagator()\n\totel.SetTextMapPropagator(prop)\n\n\t// Set up trace provider.\n\ttracerProvider, err := newTracerProvider()\n\tif err != nil {\n\t\thandleErr(err)\n\t\treturn\n\t}\n\tshutdownFuncs = append(shutdownFuncs, tracerProvider.Shutdown)\n\totel.SetTracerProvider(tracerProvider)\n\n\t// Set up meter provider.\n\tmeterProvider, err := newMeterProvider()\n\tif err != nil {\n\t\thandleErr(err)\n\t\treturn\n\t}\n\tshutdownFuncs = append(shutdownFuncs, meterProvider.Shutdown)\n\totel.SetMeterProvider(meterProvider)\n\n\t// Set up logger provider.\n\tloggerProvider, err := newLoggerProvider()\n\tif err != nil {\n\t\thandleErr(err)\n\t\treturn\n\t}\n\tshutdownFuncs = append(shutdownFuncs, loggerProvider.Shutdown)\n\tglobal.SetLoggerProvider(loggerProvider)\n\n\treturn\n}\n\nfunc newPropagator() propagation.TextMapPropagator {\n\treturn propagation.NewCompositeTextMapPropagator(\n\t\tpropagation.TraceContext{},\n\t\tpropagation.Baggage{},\n\t)\n}\n\nfunc newTracerProvider() (*trace.TracerProvider, error) {\n\ttraceExporter, err := stdouttrace.New(\n\t\tstdouttrace.WithPrettyPrint())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttracerProvider := trace.NewTracerProvider(\n\t\ttrace.WithBatcher(traceExporter,\n\t\t\t// Default is 5s. Set to 1s for demonstrative purposes.\n\t\t\ttrace.WithBatchTimeout(time.Second)),\n\t)\n\treturn tracerProvider, nil\n}\n\nfunc newMeterProvider() (*metric.MeterProvider, error) {\n\tmetricExporter, err := stdoutmetric.New()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmeterProvider := metric.NewMeterProvider(\n\t\tmetric.WithReader(metric.NewPeriodicReader(metricExporter,\n\t\t\t// Default is 1m. Set to 3s for demonstrative purposes.\n\t\t\tmetric.WithInterval(3*time.Second))),\n\t)\n\treturn meterProvider, nil\n}\n\nfunc newLoggerProvider() (*log.LoggerProvider, error) {\n\tlogExporter, err := stdoutlog.New()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tloggerProvider := log.NewLoggerProvider(\n\t\tlog.WithProcessor(log.NewBatchProcessor(logExporter)),\n\t)\n\treturn loggerProvider, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in a Rails Application\nDESCRIPTION: Demonstrates how to configure OpenTelemetry in a Rails application using an initializer file. This enables all available instrumentation libraries automatically.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/opentelemetry.rb\nrequire 'opentelemetry/sdk'\nrequire 'opentelemetry/exporter/otlp'\nrequire 'opentelemetry/instrumentation/all'\nOpenTelemetry::SDK.configure do |c|\n  c.service_name = '<YOUR_SERVICE_NAME>'\n  c.use_all() # enables all instrumentation!\nend\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Module for OpenTelemetry Project\nDESCRIPTION: Initializes a new Go module for the dice rolling application that will be instrumented with OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo mod init dice\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core Program Entry Point\nDESCRIPTION: Basic ASP.NET Core application setup with controller configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.MapControllers();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to configure a Zipkin exporter for sending trace data to a Zipkin backend and create a tracer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$transport = \\OpenTelemetry\\SDK\\Common\\Export\\Http\\PsrTransportFactory::discover()\n    ->create('http://zipkin:9411/api/v2/spans', 'application/json');\n$zipkinExporter = new ZipkinExporter($transport);\n$tracerProvider =  new TracerProvider(\n    new SimpleSpanProcessor($zipkinExporter)\n);\n$tracer = $tracerProvider->getTracer('io.opentelemetry.contrib.php');\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Meter for Custom Metrics Creation\nDESCRIPTION: Java code for obtaining a Meter instance from the GlobalOpenTelemetry object. The Meter is used to create custom metrics like counters, gauges, or histograms in your application code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/api.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport io.opentelemetry.api.GlobalOpenTelemetry;\nimport io.opentelemetry.api.metrics.Meter;\n\nMeter meter = GlobalOpenTelemetry.getMeter(\"application\");\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP Exporter via Bundler/Gem\nDESCRIPTION: Commands to install the OpenTelemetry OTLP exporter package using either Bundler or direct gem installation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbundle add opentelemetry-exporter-otlp\n```\n\nLANGUAGE: shell\nCODE:\n```\ngem install opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Adding Span Events in Rust\nDESCRIPTION: Demonstrates adding events to a span with associated attributes. This code adds a tracking ID creation event to the active span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/shipping.md#2025-04-09_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nlet tid = create_tracking_id();\nspan.set_attribute(KeyValue::new(\"app.shipping.tracking.id\", tid.clone()));\ninfo!(\"Tracking ID Created: {}\", tid);\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Gems in Ruby\nDESCRIPTION: Shows how to install the necessary Ruby gems for OpenTelemetry SDK, OTLP exporter, and all instrumentation libraries using the bundler gemfile format.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngem 'opentelemetry-sdk'\ngem 'opentelemetry-exporter-otlp'\ngem 'opentelemetry-instrumentation-all'\n```\n\n----------------------------------------\n\nTITLE: Defining Dependencies in Cargo.toml for a Rust HTTP Server\nDESCRIPTION: Initial Cargo.toml configuration defining dependencies needed for a basic Rust HTTP server using hyper, tokio, and rand libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[package]\nname = \"dice_server\"\nversion = \"0.1.0\"\nedition = \"2021\"\n\n[dependencies]\nhyper = { version = \"1\", features = [\"full\"] }\ntokio = { version = \"1\", features = [\"full\"] }\nhttp-body-util = \"0.1\"\nhyper-util = { version = \"0.1\", features = [\"full\"] }\nrand = \"0.9.0\"\n```\n\n----------------------------------------\n\nTITLE: Viewing OpenTelemetry HTTP Server Metrics in JSON Format\nDESCRIPTION: This JSON snippet shows the structure of OpenTelemetry metrics collected from an HTTP server instrumented with the otelhttp package. It includes metrics for request content length, response content length, and request duration, with attributes like HTTP method, route, status code, and host information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Scope\": {\n    \"Name\": \"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\",\n    \"Version\": \"0.44.0\",\n    \"SchemaURL\": \"\"\n  },\n  \"Metrics\": [\n    {\n      \"Name\": \"http.server.request_content_length\",\n      \"Description\": \"\",\n      \"Unit\": \"\",\n      \"Data\": {\n        \"DataPoints\": [\n          {\n            \"Attributes\": [\n              {\n                \"Key\": \"http.flavor\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"1.1\"\n                }\n              },\n              {\n                \"Key\": \"http.method\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"GET\"\n                }\n              },\n              {\n                \"Key\": \"http.route\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"/rolldice/Alice\"\n                }\n              },\n              {\n                \"Key\": \"http.scheme\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"http\"\n                }\n              },\n              {\n                \"Key\": \"http.status_code\",\n                \"Value\": {\n                  \"Type\": \"INT64\",\n                  \"Value\": 200\n                }\n              },\n              {\n                \"Key\": \"net.host.name\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"localhost\"\n                }\n              },\n              {\n                \"Key\": \"net.host.port\",\n                \"Value\": {\n                  \"Type\": \"INT64\",\n                  \"Value\": 8080\n                }\n              }\n            ],\n            \"StartTime\": \"2023-09-25T12:42:04.279212238+02:00\",\n            \"Time\": \"2023-09-25T12:42:15.482695758+02:00\",\n            \"Value\": 0\n          }\n        ],\n        \"Temporality\": \"CumulativeTemporality\",\n        \"IsMonotonic\": true\n      }\n    },\n    {\n      \"Name\": \"http.server.response_content_length\",\n      \"Description\": \"\",\n      \"Unit\": \"\",\n      \"Data\": {\n        \"DataPoints\": [\n          {\n            \"Attributes\": [\n              {\n                \"Key\": \"http.flavor\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"1.1\"\n                }\n              },\n              {\n                \"Key\": \"http.method\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"GET\"\n                }\n              },\n              {\n                \"Key\": \"http.route\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"/rolldice/Alice\"\n                }\n              },\n              {\n                \"Key\": \"http.scheme\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"http\"\n                }\n              },\n              {\n                \"Key\": \"http.status_code\",\n                \"Value\": {\n                  \"Type\": \"INT64\",\n                  \"Value\": 200\n                }\n              },\n              {\n                \"Key\": \"net.host.name\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"localhost\"\n                }\n              },\n              {\n                \"Key\": \"net.host.port\",\n                \"Value\": {\n                  \"Type\": \"INT64\",\n                  \"Value\": 8080\n                }\n              }\n            ],\n            \"StartTime\": \"2023-09-25T12:42:04.279214438+02:00\",\n            \"Time\": \"2023-09-25T12:42:15.482696158+02:00\",\n            \"Value\": 54\n          }\n        ],\n        \"Temporality\": \"CumulativeTemporality\",\n        \"IsMonotonic\": true\n      }\n    },\n    {\n      \"Name\": \"http.server.duration\",\n      \"Description\": \"\",\n      \"Unit\": \"\",\n      \"Data\": {\n        \"DataPoints\": [\n          {\n            \"Attributes\": [\n              {\n                \"Key\": \"http.flavor\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"1.1\"\n                }\n              },\n              {\n                \"Key\": \"http.method\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"GET\"\n                }\n              },\n              {\n                \"Key\": \"http.route\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"/rolldice/Alice\"\n                }\n              },\n              {\n                \"Key\": \"http.scheme\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"http\"\n                }\n              },\n              {\n                \"Key\": \"http.status_code\",\n                \"Value\": {\n                  \"Type\": \"INT64\",\n                  \"Value\": 200\n                }\n              },\n              {\n                \"Key\": \"net.host.name\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"localhost\"\n                }\n              },\n              {\n                \"Key\": \"net.host.port\",\n                \"Value\": {\n                  \"Type\": \"INT64\",\n                  \"Value\": 8080\n                }\n              }\n            ],\n            \"StartTime\": \"2023-09-25T12:42:04.279219438+02:00\",\n            \"Time\": \"2023-09-25T12:42:15.482697158+02:00\",\n            \"Count\": 27,\n            \"Bounds\": [\n              0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000,\n              7500, 10000\n            ],\n            \"BucketCounts\": [\n              0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n            ],\n            \"Min\": {},\n            \"Max\": {},\n            \"Sum\": 2.1752759999999993\n          }\n        ],\n        \"Temporality\": \"CumulativeTemporality\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Trace Model Definition in Go\nDESCRIPTION: This file defines the data structures and methods needed for generating OpenTelemetry traces for an ATM and backend system. It includes entity models, helper functions for creating trace IDs, span IDs, and methods to populate trace resources with appropriate attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_42\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\tcrand \"crypto/rand\"\n\t\"encoding/binary\"\n\t\"math/rand\"\n\t\"time\"\n\n\t\"github.com/google/uuid\"\n\t\"go.opentelemetry.io/collector/pdata/pcommon\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\tconventions \"go.opentelemetry.io/collector/semconv/v1.9.0\"\n)\n\ntype Atm struct {\n\tID           int64\n\tVersion      string\n\tName         string\n\tStateID      string\n\tSerialNumber string\n\tISPNetwork   string\n}\n\ntype BackendSystem struct {\n\tVersion       string\n\tProcessName   string\n\tOSType        string\n\tOSVersion     string\n\tCloudProvider string\n\tCloudRegion   string\n\tEndpoint      string\n}\n\nfunc generateAtm() Atm {\n\ti := getRandomNumber(1, 2)\n\tvar newAtm Atm\n\n\tswitch i {\n\tcase 1:\n\t\tnewAtm = Atm{\n\t\t\tID:           111,\n\t\t\tName:         \"ATM-111-IL\",\n\t\t\tSerialNumber: \"atmxph-2022-111\",\n\t\t\tVersion:      \"v1.0\",\n\t\t\tISPNetwork:   \"comcast-chicago\",\n\t\t\tStateID:      \"IL\",\n\t\t}\n\n\tcase 2:\n\t\tnewAtm = Atm{\n\t\t\tID:           222,\n\t\t\tName:         \"ATM-222-CA\",\n\t\t\tSerialNumber: \"atmxph-2022-222\",\n\t\t\tVersion:      \"v1.0\",\n\t\t\tISPNetwork:   \"comcast-sanfrancisco\",\n\t\t\tStateID:      \"CA\",\n\t\t}\n\t}\n\n\treturn newAtm\n}\n\nfunc generateBackendSystem() BackendSystem {\n\ti := getRandomNumber(1, 3)\n\n\tnewBackend := BackendSystem{\n\t\tProcessName:   \"accounts\",\n\t\tVersion:       \"v2.5\",\n\t\tOSType:        \"lnx\",\n\t\tOSVersion:     \"4.16.10-300.fc28.x86_64\",\n\t\tCloudProvider: \"amzn\",\n\t\tCloudRegion:   \"us-east-2\",\n\t}\n\n\tswitch i {\n\tcase 1:\n\t\tnewBackend.Endpoint = \"api/v2.5/balance\"\n\tcase 2:\n\t\tnewBackend.Endpoint = \"api/v2.5/deposit\"\n\tcase 3:\n\t\tnewBackend.Endpoint = \"api/v2.5/withdrawn\"\n\t}\n\n\treturn newBackend\n}\n\nfunc getRandomNumber(min int, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\ti := (rand.Intn(max-min+1) + min)\n\treturn i\n}\n\nfunc generateTraces(numberOfTraces int) ptrace.Traces {\n\ttraces := ptrace.NewTraces()\n\n\tfor i := 0; i <= numberOfTraces; i++ {\n\t\tnewAtm := generateAtm()\n\t\tnewBackendSystem := generateBackendSystem()\n\n\t\tresourceSpan := traces.ResourceSpans().AppendEmpty()\n\t\tatmResource := resourceSpan.Resource()\n\t\tfillResourceWithAtm(&atmResource, newAtm)\n\n\t\tatmInstScope := appendAtmSystemInstrScopeSpans(&resourceSpan)\n\n\t\tresourceSpan = traces.ResourceSpans().AppendEmpty()\n\t\tbackendResource := resourceSpan.Resource()\n\t\tfillResourceWithBackendSystem(&backendResource, newBackendSystem)\n\n\t\tbackendInstScope := appendAtmSystemInstrScopeSpans(&resourceSpan)\n\n\t\tappendTraceSpans(&newBackendSystem, &backendInstScope, &atmInstScope)\n\t}\n\n\treturn traces\n}\n\nfunc fillResourceWithAtm(resource *pcommon.Resource, atm Atm) {\n\tatmAttrs := resource.Attributes()\n\tatmAttrs.PutInt(\"atm.id\", atm.ID)\n\tatmAttrs.PutStr(\"atm.stateid\", atm.StateID)\n\tatmAttrs.PutStr(\"atm.ispnetwork\", atm.ISPNetwork)\n\tatmAttrs.PutStr(\"atm.serialnumber\", atm.SerialNumber)\n\tatmAttrs.PutStr(conventions.AttributeServiceName, atm.Name)\n\tatmAttrs.PutStr(conventions.AttributeServiceVersion, atm.Version)\n\n}\n\nfunc fillResourceWithBackendSystem(resource *pcommon.Resource, backend BackendSystem) {\n\tbackendAttrs := resource.Attributes()\n\tvar osType, cloudProvider string\n\n\tswitch {\n\tcase backend.CloudProvider == \"amzn\":\n\t\tcloudProvider = conventions.AttributeCloudProviderAWS\n\tcase backend.OSType == \"mcrsft\":\n\t\tcloudProvider = conventions.AttributeCloudProviderAzure\n\tcase backend.OSType == \"gogl\":\n\t\tcloudProvider = conventions.AttributeCloudProviderGCP\n\t}\n\n\tbackendAttrs.PutStr(conventions.AttributeCloudProvider, cloudProvider)\n\tbackendAttrs.PutStr(conventions.AttributeCloudRegion, backend.CloudRegion)\n\n\tswitch {\n\tcase backend.OSType == \"lnx\":\n\t\tosType = conventions.AttributeOSTypeLinux\n\tcase backend.OSType == \"wndws\":\n\t\tosType = conventions.AttributeOSTypeWindows\n\tcase backend.OSType == \"slrs\":\n\t\tosType = conventions.AttributeOSTypeSolaris\n\t}\n\n\tbackendAttrs.PutStr(conventions.AttributeOSType, osType)\n\tbackendAttrs.PutStr(conventions.AttributeOSVersion, backend.OSVersion)\n\n\tbackendAttrs.PutStr(conventions.AttributeServiceName, backend.ProcessName)\n\tbackendAttrs.PutStr(conventions.AttributeServiceVersion, backend.Version)\n}\n\nfunc appendAtmSystemInstrScopeSpans(resourceSpans *ptrace.ResourceSpans) ptrace.ScopeSpans {\n\tscopeSpans := resourceSpans.ScopeSpans().AppendEmpty()\n\n\treturn scopeSpans\n}\n\nfunc NewTraceID() pcommon.TraceID {\n\treturn pcommon.TraceID(uuid.New())\n}\n\nfunc NewSpanID() pcommon.SpanID {\n\tvar rngSeed int64\n\t_ = binary.Read(crand.Reader, binary.LittleEndian, &rngSeed)\n\trandSource := rand.New(rand.NewSource(rngSeed))\n\n\tvar sid [8]byte\n\trandSource.Read(sid[:])\n\tspanID := pcommon.SpanID(sid)\n\n\treturn spanID\n}\n\nfunc appendTraceSpans(backend *BackendSystem, backendScopeSpans *ptrace.ScopeSpans, atmScopeSpans *ptrace.ScopeSpans) {\n\ttraceId := NewTraceID()\n\tbackendSpanId := NewSpanID()\n\n\tbackendDuration, _ := time.ParseDuration(\"1s\")\n\tbackendSpanStartTime := time.Now()\n\tbackendSpanFinishTime := backendSpanStartTime.Add(backendDuration)\n\n\tbackendSpan := backendScopeSpans.Spans().AppendEmpty()\n\tbackendSpan.SetTraceID(traceId)\n\tbackendSpan.SetSpanID(backendSpanId)\n\tbackendSpan.SetName(backend.Endpoint)\n\tbackendSpan.SetKind(ptrace.SpanKindServer)\n\tbackendSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(backendSpanStartTime))\n\tbackendSpan.SetEndTimestamp(pcommon.NewTimestampFromTime(backendSpanFinishTime))\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Logging in Node.js\nDESCRIPTION: This snippet demonstrates how to enable logging for OpenTelemetry in a Node.js application. It sets up a console logger with debug level, which is useful for diagnosing tracing issues.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { diag, DiagConsoleLogger, DiagLogLevel } from '@opentelemetry/api';\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);\n// rest of your otel initialization code\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies\nDESCRIPTION: Commands to install required OpenTelemetry packages for logging functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-distro\npip install opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Implementing Dice Rolling Function in Go\nDESCRIPTION: Defines a 'rolldice' function that generates a random number between 1 and 6 and returns it as an HTTP response.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc rolldice(w http.ResponseWriter, r *http.Request) {\n\troll := 1 + rand.Intn(6)\n\n\tresp := strconv.Itoa(roll) + \"\\n\"\n\tif _, err := io.WriteString(w, resp); err != nil {\n\t\tlog.Printf(\"Write failed: %v\\n\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry SDK and OTLP Exporter\nDESCRIPTION: Shell command to install the OpenTelemetry SDK and OTLP exporter packages needed for a complete OpenTelemetry implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \\\n  open-telemetry/sdk \\\n  open-telemetry/exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Initializing Frontend Tracer with OpenTelemetry\nDESCRIPTION: Sets up the WebTracerProvider with resource detection, span processors, and context management for browser-based tracing. Configures OTLP export and registers web auto-instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/frontend.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst FrontendTracer = async () => {\n  const { ZoneContextManager } = await import('@opentelemetry/context-zone');\n\n  let resource = new Resource({\n    [SEMRESATTRS_SERVICE_NAME]: NEXT_PUBLIC_OTEL_SERVICE_NAME,\n  });\n  const detectedResources = detectResourcesSync({\n    detectors: [browserDetector],\n  });\n  resource = resource.merge(detectedResources);\n\n  const provider = new WebTracerProvider({\n    resource,\n    spanProcessors: [\n      new SessionIdProcessor(),\n      new BatchSpanProcessor(\n        new OTLPTraceExporter({\n          url:\n            NEXT_PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ||\n            'http://localhost:4318/v1/traces',\n        }),\n        {\n          scheduledDelayMillis: 500,\n        },\n      ),\n    ],\n  });\n\n  const contextManager = new ZoneContextManager();\n\n  provider.register({\n    contextManager,\n    propagator: new CompositePropagator({\n      propagators: [\n        new W3CBaggagePropagator(),\n        new W3CTraceContextPropagator(),\n      ],\n    }),\n  });\n\n  registerInstrumentations({\n    tracerProvider: provider,\n    instrumentations: [\n      getWebAutoInstrumentations({\n        '@opentelemetry/instrumentation-fetch': {\n          propagateTraceHeaderCorsUrls: /.*/,\n          clearTimingResources: true,\n          applyCustomAttributesOnSpan(span) {\n            span.setAttribute('app.synthetic_request', IS_SYNTHETIC_REQUEST);\n          },\n        },\n      }),\n    ],\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Recording Exceptions in Spans with Ruby OpenTelemetry\nDESCRIPTION: Record exceptions in spans to capture error information and create span events.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\ncurrent_span = OpenTelemetry::Trace.current_span\n\nbegin\n  1/0 # something that obviously fails\nrescue Exception => e\n  current_span.status = OpenTelemetry::Trace::Status.error(\"error message here!\")\n  current_span.record_exception(e)\nend\n\ncurrent_span.record_exception(ex, attributes: { \"some.attribute\" => 12 })\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector CR with Target Allocator\nDESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector CR with Target Allocator enabled. It includes the collector mode, target allocator settings, and the collector's configuration for receivers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otelcol\n  namespace: opentelemetry\nspec:\n  mode: statefulset\n  targetAllocator:\n    enabled: true\n    serviceAccount: opentelemetry-targetallocator-sa\n    prometheusCR:\n      enabled: true\n  config: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n          http:\n      prometheus:\n        config:\n          scrape_configs:\n          - job_name: 'otel-collector'\n            scrape_interval: 30s\n            static_configs:\n            - targets: [ '0.0.0.0:8888' ]\n        target_allocator:\n          endpoint: http://otelcol-targetallocator\n          interval: 30s\n          collector_id: \"${POD_NAME}\"\n…\n```\n\n----------------------------------------\n\nTITLE: Configuring OTel-Arrow Receiver in YAML\nDESCRIPTION: Example configuration for OTel-Arrow receiver showing protocol settings, memory limits, and admission controls. Includes gRPC message size limits and Arrow-specific memory constraints.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-arrow-production/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otelarrow:\n    protocols:\n      grpc:\n        max_recv_msg_size_mib: 16\n      arrow:\n        memory_limit_mib: 128\n    admission:\n      request_limit_mib: 128\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Span from Context in Go OpenTelemetry\nDESCRIPTION: Retrieves the current active span from the context within auto-instrumented code to perform additional operations like adding attributes or events.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nspan := trace.SpanFromContext(ctx)\n```\n\n----------------------------------------\n\nTITLE: Accessing OpenTelemetry Baggage\nDESCRIPTION: Example of accessing OpenTelemetry baggage items using the propagation API to check for synthetic requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/frontend.md#2025-04-09_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst baggage = propagation.getBaggage(context.active());\nif (baggage?.getEntry(\"synthetic_request\")?.value == \"true\") {...}\n```\n\n----------------------------------------\n\nTITLE: Installing Core OpenTelemetry Packages\nDESCRIPTION: Commands for installing the core OpenTelemetry packages required for basic setup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry\ndotnet add package OpenTelemetry.Extensions.Hosting\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Agent via CLI\nDESCRIPTION: Example showing how to configure the OpenTelemetry agent using command line arguments including traces exporter, metrics exporter, service name, and endpoint configuration\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopentelemetry-instrument \\\n    --traces_exporter console,otlp \\\n    --metrics_exporter console \\\n    --service_name your-service-name \\\n    --exporter_otlp_endpoint 0.0.0.0:4317 \\\n    python myapp.py\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Container with OpenTelemetry Module, Collector and Zipkin\nDESCRIPTION: Command to start a Docker container running Apache HTTP Server with the OpenTelemetry module along with OpenTelemetry Collector and Zipkin backend.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose --profile centos7 up -d\n```\n\n----------------------------------------\n\nTITLE: Running the JavaScript Client\nDESCRIPTION: Command to run the JavaScript client application that makes requests to the instrumented server.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnode client.js\n```\n\n----------------------------------------\n\nTITLE: Managing Baggage Context in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to set and get baggage values in different span contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/cookbook.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace, baggage\n\ntracer = trace.get_tracer(\"my.tracer\")\nwith tracer.start_as_current_span(name=\"root span\") as root_span:\n    parent_ctx = baggage.set_baggage(\"context\", \"parent\")\n    with tracer.start_as_current_span(\n        name=\"child span\", context=parent_ctx\n    ) as child_span:\n        child_ctx = baggage.set_baggage(\"context\", \"child\")\n\nprint(baggage.get_baggage(\"context\", parent_ctx))\nprint(baggage.get_baggage(\"context\", child_ctx))\n```\n\n----------------------------------------\n\nTITLE: Initializing Console Exporter for Tracing, Metrics, and Logging in C++\nDESCRIPTION: This snippet demonstrates how to initialize the console exporter for tracing, metrics, and logging in OpenTelemetry C++. It includes the necessary header files and functions to set up the exporter for each telemetry type.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"opentelemetry/exporters/ostream/span_exporter_factory.h\"\n#include \"opentelemetry/sdk/trace/exporter.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/simple_processor_factory.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider_factory.h\"\n#include \"opentelemetry/trace/provider.h\"\n\n#include \"opentelemetry/exporters/ostream/metrics_exporter_factory.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider_factory.h\"\n#include \"opentelemetry/metrics/provider.h\"\n\n#include \"opentelemetry/exporters/ostream/log_record_exporter_factory.h\"\n#include \"opentelemetry/logs/provider.h\"\n#include \"opentelemetry/sdk/logs/logger_provider_factory.h\"\n#include \"opentelemetry/sdk/logs/processor.h\"\n#include \"opentelemetry/sdk/logs/simple_log_record_processor_factory.h\"\n\nnamespace trace_api      = opentelemetry::trace;\nnamespace trace_sdk      = opentelemetry::sdk::trace;\nnamespace trace_exporter = opentelemetry::exporter::trace;\n\nnamespace metrics_sdk      = opentelemetry::sdk::metrics;\nnamespace metrics_api      = opentelemetry::metrics;\nnamespace metrics_exporter = opentelemetry::exporter::metrics;\n\nnamespace logs_api = opentelemetry::logs;\nnamespace logs_sdk = opentelemetry::sdk::logs;\nnamespace logs_exporter = opentelemetry::exporter::logs;\n\nvoid InitTracer()\n{\n  auto exporter  = trace_exporter::OStreamSpanExporterFactory::Create();\n  auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));\n  std::shared_ptr<opentelemetry::trace::TracerProvider> provider = trace_sdk::TracerProviderFactory::Create(std::move(processor));\n  trace_api::Provider::SetTracerProvider(provider);\n}\n\nvoid InitMetrics()\n{\n    auto exporter = metrics_exporter::OStreamMetricExporterFactory::Create();\n    auto u_provider = metrics_sdk::MeterProviderFactory::Create();\n    std::shared_ptr<opentelemetry::metrics::MeterProvider> provider(std::move(u_provider));\n    auto *p = static_cast<metrics_sdk::MeterProvider *>(u_provider.get());\n    p->AddMetricReader(std::move(exporter));\n    metrics_api::Provider::SetMeterProvider(provider);\n}\n\nvoid InitLogger()\n{\n  auto exporter = logs_exporter::OStreamLogRecordExporterFactory::Create();\n  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));\n  nostd::shared_ptr<logs_api::LoggerProvider> provider(\n      logs_sdk::LoggerProviderFactory::Create(std::move(processor)));\n  logs_api::Provider::SetLoggerProvider(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Core Packages in Python\nDESCRIPTION: Basic installation commands for OpenTelemetry API and SDK packages using pip package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP Exporter Package\nDESCRIPTION: Install the OpenTelemetry Protocol (OTLP) exporter package using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.OpenTelemetryProtocol\n```\n\n----------------------------------------\n\nTITLE: Optimizing Attribute Collection based on Sampling in Java\nDESCRIPTION: Demonstrates a performance optimization where important attributes for sampling decisions are provided at span creation time, while expensive attributes are only calculated if the span is actually recording (not sampled out).\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// some attributes are important for sampling, they should be provided at creation time\nSpan span = tracer.spanBuilder(String.format(\"SELECT %s.%s\", dbName, collectionName))\n        .setSpanKind(SpanKind.CLIENT)\n        .setAttribute(\"db.name\", dbName)\n        ...\n        .startSpan();\n\n// other attributes, especially those that are expensive to calculate\n// should be added if span is recording\nif (span.isRecording()) {\n    span.setAttribute(\"db.statement\", sanitize(query.statement()))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Tracing\nDESCRIPTION: Enhanced version of the HTTP server with OpenTelemetry instrumentation, including tracer initialization and span creation for the /rolldice endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\nimport OpenTelemetryApi\nimport OpenTelemetrySdk\nimport StdoutExporter\nimport ResourceExtension\n\n@main\nenum Entrypoint {\n    static func main() async throws {\n\n        let spanExporter = StdoutExporter();\n        let spanProcessor = SimpleSpanProcessor(spanExporter: spanExporter)\n        let resources = DefaultResources().get()\n\n        let instrumentationScopeName = \"DiceServer\"\n        let instrumentationScopeVersion = \"semver:0.1.0\"\n\n        OpenTelemetry.registerTracerProvider(tracerProvider:\n            TracerProviderBuilder()\n                .add(spanProcessor: spanProcessor)\n                .with(resource: resources)\n                .build()\n        )\n        let tracer = OpenTelemetry.instance.tracerProvider.get(instrumentationName: instrumentationScopeName, instrumentationVersion: instrumentationScopeVersion) as! TracerSdk\n\n\n        let app = try Application(.detect())\n        defer { app.shutdown() }\n\n        app.get(\"rolldice\") { req in\n            let span = tracer.spanBuilder(spanName: \"GET /rolldice\").setSpanKind(spanKind: .client).startSpan()\n            let result = Int.random(in: 1..<7)\n            span.end();\n            return result\n        }\n\n        try app.run()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Context-Propagated Parent-Child Spans in OpenTelemetry Swift\nDESCRIPTION: This snippet shows how to create parent-child span relationships using the active span context. The parent span is set as active, and the child span automatically inherits the parent context without explicit passing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: swift\nCODE:\n```\nfunc parent() {\n  let parentSpan = someTracer.spanBuilder(spanName: \"parent span\")\n                      .setActive(true) // automatically sets context\n                      .startSpan()\n  child()\n  parentSpan.end()\n}\n\nfunc child() {\n  let childSpan = someTracer.spanBuilder(spanName: \"child span\")\n                             .startSpan() //automatically captures `active span` as parent\n  // do work\n  childSpan.end()\n}\n```\n\n----------------------------------------\n\nTITLE: Properly Shutting Down OpenTelemetry Tracer Provider in Go\nDESCRIPTION: Demonstrates the proper shutdown pattern for the OpenTelemetry TracerProvider using a deferred function to ensure all spans are exported before the application exits.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntp := InitTracerProvider()\ndefer func() {\n    if err := tp.Shutdown(context.Background()); err != nil {\n        log.Fatalf(\"Tracer Provider Shutdown: %v\", err)\n    }\n}()\n```\n\n----------------------------------------\n\nTITLE: Data Flow Diagram for Telemetry Collection\nDESCRIPTION: A flowchart showing how telemetry data flows from the MySQL client through the OpenTelemetry Collector to Jaeger for traces and Prometheus for metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR;\n    A[MySQL client]-->B[OpenTelemetry Collector];\n    B-->C[\"Jaeger (trace)\"];\n    B-->D[\"Prometheus (metrics)\"];\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation Package\nDESCRIPTION: Command for adding OpenTelemetry instrumentation packages via NuGet package manager.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Instrumentation.{library-name-or-type}\n```\n\n----------------------------------------\n\nTITLE: Implementing Capabilities Method in Go\nDESCRIPTION: Implements the Capabilities method to fulfill the consumer interface, specifying whether the connector mutates the data it processes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_11\n\nLANGUAGE: go\nCODE:\n```\n// Capabilities implements the consumer interface.\nfunc (c *connectorImp) Capabilities() consumer.Capabilities {\n    return consumer.Capabilities{MutatesData: false}\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration YAML\nDESCRIPTION: Configuration for the OpenTelemetry Collector that sets up receivers for self-monitoring and host metrics, and a debug exporter to log collected data. This configuration will be managed by the OpAMP supervisor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/management.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  prometheus/own_metrics:\n    config:\n      scrape_configs:\n        - job_name: otel-collector\n          scrape_interval: 10s\n          static_configs:\n            - targets: [0.0.0.0:8888]\n  hostmetrics:\n    collection_interval: 10s\n    scrapers:\n      load:\n      filesystem:\n      memory:\n      network:\n\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [hostmetrics, prometheus/own_metrics]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry SDK in Ruby\nDESCRIPTION: Initializes the OpenTelemetry SDK with the Sinatra instrumentation library. Uses environment variables for OTLP export configuration, resource attributes, and service name.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/email.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nOpenTelemetry::SDK.configure do |c|\n  c.use \"OpenTelemetry::Instrumentation::Sinatra\"\nend\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Distro with OTLP Support\nDESCRIPTION: Command to install the OpenTelemetry distro package with OTLP exporter support and the instrumentation package, which enables automatic instrumentation of Python applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/distro.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-distro[otlp] opentelemetry-instrumentation\n```\n\n----------------------------------------\n\nTITLE: Configuring Carbon Receiver and Transform Processor in YAML\nDESCRIPTION: This YAML configuration sets up the Carbon Receiver, Debug Exporter, and Transform Processor to collect and process custom metrics. It uses OTTL statements to convert data point attributes into metric units.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  carbon:\n    endpoint: localhost:8080\n    transport: tcp\n    parser:\n      type: plaintext\n      config:\n\nexporters:\n  debug:\n    verbosity: detailed\n\nprocessors:\n  transform:\n    metric_statements:\n      - context: datapoint\n        statements:\n          - set(metric.unit, attributes[\"unit\"])\n          - delete_key(attributes, \"unit\")\nservice:\n  pipelines:\n    metrics:\n      receivers: [carbon]\n      processors: [transform]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom ResourceProvider for OpenTelemetry Java SDK\nDESCRIPTION: Shows how to implement the ResourceProvider SPI to contribute custom resource attributes during OpenTelemetry SDK autoconfiguration. This implementation adds a custom resource attribute that will be included in all telemetry data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;\nimport io.opentelemetry.sdk.autoconfigure.spi.ResourceProvider;\nimport io.opentelemetry.sdk.resources.Resource;\n\npublic class CustomResourceProvider implements ResourceProvider {\n\n  @Override\n  public Resource createResource(ConfigProperties config) {\n    // Callback invoked to contribute to the resource.\n    return Resource.builder().put(\"my.custom.resource.attribute\", \"abc123\").build();\n  }\n\n  @Override\n  public int order() {\n    // Optionally influence the order of invocation.\n    return 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Resources in Code with OpenTelemetry .NET\nDESCRIPTION: Example demonstrating how to programmatically add custom resources to a ResourceBuilder in a .NET application. The code shows setting service information and adding custom attributes like environment name and team name.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/resources.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\nusing OpenTelemetry.Resources;\n\nvar serviceName = \"resource-tutorial-dotnet\";\nvar serviceVersion = \"1.0\";\n\nvar resourceBuilder =\n    ResourceBuilder\n        .CreateDefault()\n        .AddService(serviceName: serviceName, serviceVersion: serviceVersion)\n        .AddAttributes(new Dictionary<string, object>\n        {\n            [\"environment.name\"] = \"production\",\n            [\"team.name\"] = \"backend\"\n        });\n\nvar sourceName = \"tutorial-dotnet\";\n\nusing var tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddSource(sourceName)\n    .SetResourceBuilder(resourceBuilder)\n    .AddConsoleExporter()\n    .Build();\n\nvar MyActivitySource = new ActivitySource(sourceName);\n\nusing var activity = MyActivitySource.StartActivity(\"SayHello\");\nactivity?.SetTag(\"foo\", 1);\nactivity?.SetTag(\"bar\", \"Hello, World!\");\nactivity?.SetTag(\"baz\", new int[] { 1, 2, 3 });\n```\n\n----------------------------------------\n\nTITLE: Custom Attribute Sampler Implementation in Erlang\nDESCRIPTION: Implements a custom sampler that filters spans based on attribute matching in Erlang.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/sampling.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n-module(attribute_sampler).\n\n-behavior(otel_sampler).\n\n-export([description/1,\n         setup/1,\n         should_sample/7]).\n\n-include(\"otel_sampler.hrl\").\n\nsetup(Attributes) when is_map(Attributes) ->\n    Attributes;\nsetup(_) ->\n    #{}.\n\ndescription(_) ->\n    <<\"AttributeSampler\">>.\n\nshould_sample(_Ctx, _TraceId, _Links, _SpanName, _SpanKind, Attributes, ConfigAttributes) ->\n    AttributesSet = sets:from_list(maps:to_list(Attributes)),\n    ConfigSet = sets:from_list(maps:to_list(ConfigAttributes)),\n    case sets:is_disjoint(AttributesSet, ConfigSet) of\n        true -> {?RECORD_AND_SAMPLE, [], []};\n        _ -> {?DROP, [], []}\nend.\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Docker Container for Client Service\nDESCRIPTION: This shell command rebuilds the 'client' service Docker container and starts it up to apply changes made to the SQL query implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose build client\ndocker compose up client\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry .NET Automatic Instrumentation on Windows\nDESCRIPTION: These PowerShell commands download and install the OpenTelemetry .NET Automatic Instrumentation on a Windows system. It includes steps to download the PowerShell module and install the core components.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\n$module_url = \"https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/OpenTelemetry.DotNet.Auto.psm1\"\n$download_path = Join-Path $env:temp \"OpenTelemetry.DotNet.Auto.psm1\"\nInvoke-WebRequest -Uri $module_url -OutFile $download_path -UseBasicParsing\n\nImport-Module $download_path\nInstall-OpenTelemetryCore\n```\n\n----------------------------------------\n\nTITLE: OTLP Receiver Configuration for Kubernetes\nDESCRIPTION: This configuration sets up the OTLP receiver for use in a Kubernetes environment, using environment variables to dynamically set the endpoint IP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: ${env:MY_POD_IP}:4317\n      http:\n        endpoint: ${env:MY_POD_IP}:4318\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin Container\nDESCRIPTION: Docker command to run Zipkin container for trace collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Creating a Counter Instrument for Custom Metrics in C#\nDESCRIPTION: Creates a Counter instrument for tracking the number of successful responses. The instrument name and description are specified.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/custom.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar successCounter = meter.CreateCounter<long>(\"srv.successes.count\", description: \"Number of successful responses\");\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Using Export Commands\nDESCRIPTION: Alternative approach to configure OpenTelemetry using export commands to set environment variables. Includes service name, resource detectors, and node options configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/js/_index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_TRACES_EXPORTER=\"otlp\"\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\"your-endpoint\"\nexport OTEL_NODE_RESOURCE_DETECTORS=\"env,host,os\"\nexport OTEL_SERVICE_NAME=\"your-service-name\"\nexport NODE_OPTIONS=\"--require @opentelemetry/auto-instrumentations-node/register\"\nnode app.js\n```\n\n----------------------------------------\n\nTITLE: Parsed Log Output Example\nDESCRIPTION: JSON example showing the structured output of a parsed Docker log line including Kubernetes metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-collector-container-log-parser/index.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2024-03-30 08:31:20.545192187 +0000 UTC\",\n  \"body\": \"INFO: This is a docker log line\",\n  \"attributes\": {\n    \"time\": \"2024-03-30T08:31:20.545192187Z\",\n    \"log.iostream\": \"stdout\",\n    \"log.file.path\": \"/var/log/pods/kube-system_kube-controller-kind-control-plane_49cc7c1fd3702c40b2686ea7486091d6/kube-controller/1.log\"\n  },\n  \"resource\": {\n    \"attributes\": {\n      \"k8s.pod.name\": \"kube-controller-kind-control-plane\",\n      \"k8s.pod.uid\": \"49cc7c1fd3702c40b2686ea7486091d6\",\n      \"k8s.container.name\": \"kube-controller\",\n      \"k8s.container.restart_count\": \"1\",\n      \"k8s.namespace.name\": \"kube-system\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Comment with Alternative Design for Course Card\nDESCRIPTION: A commented section containing an alternative card design for displaying course information that is kept for possible future use.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/training/index.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% comment %}}\n\n<!-- Alternative design. Keeping for possible use later -->\n\n<div class=\"card mb-3\" style=\"max-width: 540px; margin: auto\">\n  <div class=\"row p-2\">\n    <div class=\"col-md-5 d-flex align-items-center\">\n      <img src=\"LFS148-Course-Badge-300x300.avif\"\n        class=\"img-initial m-auto\"\n        alt=\"LFS148 course badge\">\n    </div>\n    <div class=\"col-md-7\">\n      <div class=\"card-body p-3\">\n        <h5 class=\"card-title\">Getting Started with OpenTelemetry</h5>\n        <p class=\"card-text\">\n          A course designed for software developers, DevOps engineers, site reliability engineers (SREs), and more looking to implement telemetry solutions across apps and environments.\n        </p>\n        <p class=\"card-text text-body-secondary small\">\n          Online, self-paced, 8-10 hrs,\n          <a href=\"{{% param LFS148 %}}\">learn more</a>.\n        </p>\n        <p class=\"text-center w-100\">\n          <a href=\"{{% param LFS148 %}}\" target=\"_blank\" rel=\"noopener\" class=\"btn btn-primary \">\n            Register\n          </a>\n        </p>\n      </div>\n    </div>\n  </div>\n</div>\n\n{{% /comment %}}\n```\n\n----------------------------------------\n\nTITLE: Running the OpenTelemetry Instrumentation Installer\nDESCRIPTION: Command to run the OpenTelemetry instrumentation installer in basic mode, which installs all necessary components with the most recent versions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/php-auto-instrumentation/index.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n./vendor/bin/install-otel-instrumentation basic\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as a Load Balancer for OpenTelemetry Collectors\nDESCRIPTION: NGINX configuration for load balancing traffic across multiple OpenTelemetry collectors. This setup handles both gRPC (port 4317) and HTTP (port 4318) protocols with appropriate upstream configurations and error handling.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/gateway/index.md#2025-04-09_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 4317 http2;\n    server_name _;\n\n    location / {\n            grpc_pass      grpc://collector4317;\n            grpc_next_upstream     error timeout invalid_header http_500;\n            grpc_connect_timeout   2;\n            grpc_set_header        Host            $host;\n            grpc_set_header        X-Real-IP       $remote_addr;\n            grpc_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n\nserver {\n    listen 4318;\n    server_name _;\n\n    location / {\n            proxy_pass      http://collector4318;\n            proxy_redirect  off;\n            proxy_next_upstream     error timeout invalid_header http_500;\n            proxy_connect_timeout   2;\n            proxy_set_header        Host            $host;\n            proxy_set_header        X-Real-IP       $remote_addr;\n            proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n}\n\nupstream collector4317 {\n    server collector1:4317;\n    server collector2:4317;\n    server collector3:4317;\n}\n\nupstream collector4318 {\n    server collector1:4318;\n    server collector2:4318;\n    server collector3:4318;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Auto-instrumentation Package\nDESCRIPTION: Command to install the Node.js auto-instrumentation metapackage which bundles all Node.js-based instrumentation libraries into a single package.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/auto-instrumentations-node\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTelemetry Dependencies in Elixir\nDESCRIPTION: Configuration for adding OpenTelemetry dependencies to an Elixir project using Mix. Includes the opentelemetry_api and opentelemetry SDK packages with version parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:opentelemetry_api, \"~> {{% param versions.otelApi %}}\"},\n    {:opentelemetry, \"~> {{% param versions.otelSdk %}}\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Exporter in Python\nDESCRIPTION: Python code to configure the OpenTelemetry Prometheus exporter for metrics. Sets up an HTTP server on port 9464 to expose the metrics endpoint that Prometheus can scrape.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom prometheus_client import start_http_server\n\nfrom opentelemetry import metrics\nfrom opentelemetry.exporter.prometheus import PrometheusMetricReader\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\n\n# Service name is required for most backends\nresource = Resource(attributes={\n    SERVICE_NAME: \"your-service-name\"\n})\n\n# Start Prometheus client\nstart_http_server(port=9464, addr=\"localhost\")\n# Initialize PrometheusMetricReader which pulls metrics from the SDK\n# on-demand to respond to scrape requests\nreader = PrometheusMetricReader()\nprovider = MeterProvider(resource=resource, metric_readers=[reader])\nmetrics.set_meter_provider(provider)\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter with NDJSON Transport in PHP\nDESCRIPTION: This PHP code snippet shows how to set up an OTLP exporter using NDJSON transport for sending trace data to a specified endpoint and create a sample span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse OpenTelemetry\\Contrib\\Otlp\\OtlpHttpTransportFactory;\nuse OpenTelemetry\\Contrib\\Otlp\\SpanExporter;\nuse OpenTelemetry\\SDK\\Trace\\SpanProcessor\\SimpleSpanProcessor;\nuse OpenTelemetry\\SDK\\Trace\\TracerProvider;\n\n$transport = (new OtlpHttpTransportFactory())->create('http://jaeger:4318/v1/traces', 'application/x-ndjson');\n$exporter = new SpanExporter($transport);\n\n$tracerProvider =  new TracerProvider(\n    new SimpleSpanProcessor($exporter)\n);\n$tracer = $tracerProvider->getTracer('io.opentelemetry.contrib.php');\n$tracer->spanBuilder('example')->startSpan()->end();\n```\n\n----------------------------------------\n\nTITLE: Creating and Starting Spans in C++\nDESCRIPTION: This code snippet demonstrates how to create and start a new span using the OpenTelemetry Tracer. It sets the span name, attributes, and puts it into the active context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/currency.md#2025-04-09_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nstd::string span_name = \"CurrencyService/Convert\";\nauto span =\n    get_tracer(\"currency\")->StartSpan(span_name,\n                                  {{SemanticConventions::kRpcSystem, \"grpc\"},\n                                   {SemanticConventions::kRpcService, \"oteldemo.CurrencyService\"},\n                                   {SemanticConventions::kRpcMethod, \"Convert\"},\n                                   {SemanticConventions::kRpcGrpcStatusCode, 0}},\n                                  options);\nauto scope = get_tracer(\"currency\")->WithActiveSpan(span);\n```\n\n----------------------------------------\n\nTITLE: Modifying Current Span in OpenTelemetry Python\nDESCRIPTION: Shows how to access and modify the currently active span in OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/cookbook.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ncurrent_span = trace.get_current_span()\ncurrent_span.set_attribute(\"hometown\", \"Seattle\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Demo with kubectl\nDESCRIPTION: Command to deploy the OpenTelemetry demo using kubectl by applying the kubernetes manifest directly.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply --namespace otel-demo -f https://raw.githubusercontent.com/open-telemetry/opentelemetry-demo/main/kubernetes/opentelemetry-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Building OpenTelemetry Collector from Source\nDESCRIPTION: Commands to clone the OpenTelemetry Collector repository and build the latest version from source code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-collector.git\ncd opentelemetry-collector\nmake install-tools\nmake otelcorecol\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Span in Ruby OpenTelemetry\nDESCRIPTION: Creates a new custom span using an OpenTelemetry tracer and executes code within its context. The span automatically ends when the block execution completes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/email.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\ntracer = OpenTelemetry.tracer_provider.tracer('email')\ntracer.in_span(\"send_email\") do |span|\n  # logic in context of span here\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status with Transform Processor in OpenTelemetry Collector\nDESCRIPTION: Configuration for the transform processor to set a span's status code to 'Ok' when the HTTP status code attribute equals 400. This processor uses OTTL for advanced telemetry transformations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ntransform:\n  error_mode: ignore\n  trace_statements:\n    - set(span.status.code, STATUS_CODE_OK) where span.attributes[\"http.request.status_code\"] == 400\n```\n\n----------------------------------------\n\nTITLE: Running Test Command in Kubernetes Cluster\nDESCRIPTION: Example of running a simple echo command in Kubernetes using kubectl to generate traceable operations. The command creates a temporary pod using Alpine image to echo 'hi' and then automatically removes it.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/k8s-runtime-observability/index.md#2025-04-09_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ kubectl run -it --rm --restart=Never --image=alpine echo-command -- echo hi\n\n# Output\n# If you don't see a command prompt, try pressing enter.\n# warning: couldn't attach to pod/echo-command, falling back to streaming logs: unable to upgrade connection: container echo-command not found in pod echo-command_default\n# Hi\n# pod \"echo-command\" deleted\n```\n\n----------------------------------------\n\nTITLE: Installing Express Dependencies for TypeScript\nDESCRIPTION: Installs Express web framework and TypeScript related dependencies for a Node.js application using TypeScript.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typescript \\\n  ts-node \\\n  @types/node \\\n  express \\\n  @types/express\n\n# initialize typescript\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Traces with Telemetrygen\nDESCRIPTION: Command using the telemetrygen utility to generate 3 sample traces and send them to the OpenTelemetry Collector via OTLP over an insecure connection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/quick-start.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$GOBIN/telemetrygen traces --otlp-insecure --traces 3\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Telemetry Generator\nDESCRIPTION: Commands to install the telemetrygen tool and generate test traces for verifying the Collector setup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo install github.com/open-telemetry/opentelemetry-collector-contrib/cmd/telemetrygen@latest\n\ntelemetrygen traces --otlp-insecure --traces 1\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Spans\nDESCRIPTION: C# code showing how to create independent spans that are siblings rather than nested. This is useful when tracking parallel or unrelated operations within the same context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void DoWork(Tracer tracer)\n{\n    using var parent = tracer.StartSpan(\"parent\");\n    // 'parent' will be the shared parent of both 'child1' and 'child2'\n\n    using (var child1 = tracer.StartSpan(\"child1\"))\n    {\n        // do some work that 'child1' tracks\n    }\n\n    using (var child2 = tracer.StartSpan(\"child2\"))\n    {\n        // do some work that 'child2' tracks\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin Exporter via Bundler/Gem\nDESCRIPTION: Commands to install the OpenTelemetry Zipkin exporter package using either Bundler or direct gem installation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nbundle add opentelemetry-exporter-zipkin\n```\n\nLANGUAGE: shell\nCODE:\n```\ngem install opentelemetry-exporter-zipkin\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Resource Attributes for Envoy Proxies\nDESCRIPTION: Applying an Istio ProxyConfig to set the OTEL_RESOURCE_ATTRIBUTES environment variable for all Envoy proxies, which will be picked up by the environment resource detector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/new-otel-features-envoy-istio/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | kubectl apply -f -\napiVersion: networking.istio.io/v1beta1\nkind: ProxyConfig\nmetadata:\n  name: my-proxyconfig\n  namespace: istio-system\nspec:\n  concurrency: 0\n  environmentVariables:\n    OTEL_RESOURCE_ATTRIBUTES: \"host.name=abc-123\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: RBAC Configuration for Kubernetes Attributes Processor\nDESCRIPTION: YAML configuration for the required RBAC permissions needed by the Kubernetes Attributes Processor. It defines a ServiceAccount, ClusterRole with permissions to get, watch, and list pods, namespaces, and replicasets, and a ClusterRoleBinding to tie them together.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/kubernetes/collector/components.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: collector\n  namespace: <OTEL_COL_NAMESPACE>\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector\nrules:\n  - apiGroups:\n      - ''\n    resources:\n      - 'pods'\n      - 'namespaces'\n    verbs:\n      - 'get'\n      - 'watch'\n      - 'list'\n  - apiGroups:\n      - 'apps'\n    resources:\n      - 'replicasets'\n    verbs:\n      - 'get'\n      - 'list'\n      - 'watch'\n  - apiGroups:\n      - 'extensions'\n    resources:\n      - 'replicasets'\n    verbs:\n      - 'get'\n      - 'list'\n      - 'watch'\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: otel-collector\nsubjects:\n  - kind: ServiceAccount\n    name: collector\n    namespace: <OTEL_COL_NAMESPACE>\nroleRef:\n  kind: ClusterRole\n  name: otel-collector\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Kubernetes Tracing\nDESCRIPTION: YAML configuration for OpenTelemetry Collector that receives traces in OpenTelemetry format and exports them to Jaeger. It sets up receivers for OTLP protocol, processors for sampling and batching, and exporters for logging and sending data to Jaeger.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/k8s-runtime-observability/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nprocessors:\n  probabilistic_sampler:\n    hash_seed: 22\n    sampling_percentage: 100\n  batch:\n    timeout: 100ms\nexporters:\n  logging:\n    logLevel: debug\n  otlp/jaeger:\n    endpoint: jaeger:4317\n    tls:\n      insecure: true\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [probabilistic_sampler, batch]\n      exporters: [otlp/jaeger, logging]\n```\n\n----------------------------------------\n\nTITLE: Instrumenting gRPC Requests in Rust\nDESCRIPTION: Creates a root span for a gRPC server request, adds attributes and events, then passes context to an async function. The code demonstrates proper context handling in an async environment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/shipping.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n    let tracer = global::tracer(\"shipping\");\n    let mut span = tracer.span_builder(\"oteldemo.ShippingService/GetQuote\").with_kind(SpanKind::Server).start_with_context(&tracer, &parent_cx);\n    span.set_attribute(semcov::trace::RPC_SYSTEM.string(RPC_SYSTEM_GRPC));\n\n    span.add_event(\"Processing get quote request\".to_string(), vec![]);\n\n    let cx = Context::current_with_span(span);\n    let q = match create_quote_from_count(itemct)\n        .with_context(cx.clone())\n        .await\n//-> create_quote_from_count()...\n    let f = match request_quote(count).await {\n        Ok(float) => float,\n        Err(err) => {\n            let msg = format!(\"{}\", err);\n            return Err(tonic::Status::unknown(msg));\n        }\n    };\n\n    Ok(get_active_span(|span| {\n        let q = create_quote_from_float(f);\n        span.add_event(\n            \"Received Quote\".to_string(),\n            vec![KeyValue::new(\"app.shipping.cost.total\", format!(\"{}\", q))],\n        );\n        span.set_attribute(KeyValue::new(\"app.shipping.items.count\", count as i64));\n        span.set_attribute(KeyValue::new(\"app.shipping.cost.total\", format!(\"{}\", q)));\n        q\n    }))\n//<- create_quote_from_count()...\n    cx.span().set_attribute(semcov::trace::RPC_GRPC_STATUS_CODE.i64(RPC_GRPC_STATUS_CODE_OK));\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Environment Variables\nDESCRIPTION: Examples of setting OpenTelemetry configuration through environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/sdk-configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_PROPAGATORS=\"tracecontext,b3\"\nexport OTEL_RESOURCE_ATTRIBUTES=\"deployment.environment=dev,service.name=cart,service.namespace=shop\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Instrumentation Libraries in TypeScript\nDESCRIPTION: Code to register Node.js instrumentation packages but disable specific ones (like FS instrumentation) in TypeScript. This shows how to selectively use auto-instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\n...\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\n\nconst sdk = new NodeSDK({\n  ...\n  // This registers all instrumentation packages\n  instrumentations: [\n    getNodeAutoInstrumentations({\n      '@opentelemetry/instrumentation-fs': {\n        enabled: false,\n      },\n    }),\n  ],\n});\n\nsdk.start()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Collector on macOS (Intel)\nDESCRIPTION: Commands to download and extract the OpenTelemetry Collector binary for macOS Intel systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_darwin_amd64.tar.gz\ntar -xvf otelcol_{{% param vers %}}_darwin_amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Using Histograms in Go with OpenTelemetry\nDESCRIPTION: This code snippet shows how to use a Histogram to measure the distribution of response times for an HTTP handler in a Go application using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_16\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\nfunc init() {\n\thistogram, err := meter.Float64Histogram(\n\t\t\"task.duration\",\n\t\tmetric.WithDescription(\"The duration of task execution.\"),\n\t\tmetric.WithUnit(\"s\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tstart := time.Now()\n\n\t\t// do some work in an API call\n\n\t\tduration := time.Since(start)\n\t\thistogram.Record(r.Context(), duration.Seconds())\n\t})\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Events to Spans in Erlang/Elixir\nDESCRIPTION: Demonstrates how to add basic events to a span using OpenTelemetry. Events are human-readable messages that represent discrete points in time within a span's lifecycle.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: erlang\nCODE:\n```\n?add_event(<<\"Gonna try it\">>),\n\n%% Do the thing\n\n?add_event(<<\"Did it!\">>)\n```\n\nLANGUAGE: elixir\nCODE:\n```\nTracer.add_event(\"Gonna try it\")\n\n%% Do the thing\n\nTracer.add_event(\"Did it!\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Operator with kubectl\nDESCRIPTION: Command to install the OpenTelemetry Operator in an existing Kubernetes cluster. Requires cert-manager to be installed as a prerequisite.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f https://github.com/open-telemetry/opentelemetry-operator/releases/latest/download/opentelemetry-operator.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Demo Application with Make\nDESCRIPTION: Command to start the demo using Make build tool.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmake start\n```\n\n----------------------------------------\n\nTITLE: Using UpDown Counters in Go with OpenTelemetry\nDESCRIPTION: This code snippet shows how to use an UpDown Counter to measure the number of items in a collection in a Go application using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\nvar itemsCounter metric.Int64UpDownCounter\n\nfunc init() {\n\tvar err error\n\titemsCounter, err = meter.Int64UpDownCounter(\n\t\t\"items.counter\",\n\t\tmetric.WithDescription(\"Number of items.\"),\n\t\tmetric.WithUnit(\"{item}\"),\n\t)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc addItem() {\n\t// code that adds an item to the collection\n\n\titemsCounter.Add(context.Background(), 1)\n}\n\nfunc removeItem() {\n\t// code that removes an item from the collection\n\n\titemsCounter.Add(context.Background(), -1)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Exporter in Non-ASP.NET Core Applications\nDESCRIPTION: Configure the Console exporter for tracing, metrics, and logging in a non-ASP.NET Core application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    // The rest of your setup code goes here\n    .AddConsoleExporter()\n    .Build();\n\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    // The rest of your setup code goes here\n    .AddConsoleExporter()\n    .Build();\n\nvar loggerFactory = LoggerFactory.Create(builder =>\n{\n    builder.AddOpenTelemetry(logging =>\n    {\n        logging.AddConsoleExporter();\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Span Attributes in Rust\nDESCRIPTION: Shows how to add attributes to an active span using KeyValue pairs. This example adds a tracking ID as an attribute to the span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/shipping.md#2025-04-09_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet tid = create_tracking_id();\nspan.set_attribute(KeyValue::new(\"app.shipping.tracking.id\", tid.clone()));\ninfo!(\"Tracking ID Created: {}\", tid);\n```\n\n----------------------------------------\n\nTITLE: Adding manual instrumentation to Flask application\nDESCRIPTION: Modifies the Flask application to include manual OpenTelemetry instrumentation for creating child spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom random import randint\nfrom flask import Flask\n\nfrom opentelemetry import trace\n```\n\n----------------------------------------\n\nTITLE: Running Python with OpenTelemetry Instrumentation\nDESCRIPTION: Command to execute a Python script with OpenTelemetry instrumentation enabled, capturing traces and metrics from OpenAI API calls.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-generative-ai/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nopentelemetry-instrument python main.py\n```\n\n----------------------------------------\n\nTITLE: RBAC Configuration for Kubeletstats Receiver\nDESCRIPTION: Kubernetes RBAC configuration defining the necessary permissions for the Kubeletstats Receiver to access node statistics via the Kubernetes API.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: otel-collector\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector\nrules:\n  - apiGroups: ['']\n    resources: ['nodes/stats']\n    verbs: ['get', 'watch', 'list']\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: otel-collector\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: otel-collector\nsubjects:\n  - kind: ServiceAccount\n    name: otel-collector\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Instrumentation in TypeScript\nDESCRIPTION: TypeScript code to set up OpenTelemetry instrumentation with console exporters for traces and metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport {\n  PeriodicExportingMetricReader,\n  ConsoleMetricExporter,\n} from '@opentelemetry/sdk-metrics';\n\nconst sdk = new NodeSDK({\n  traceExporter: new ConsoleSpanExporter(),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new ConsoleMetricExporter(),\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Running the OpenTelemetry C++ Server\nDESCRIPTION: Command to run the compiled dice server executable.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n./dice-server\n```\n\n----------------------------------------\n\nTITLE: Setting up LoggerProvider with Stream Transport in PHP\nDESCRIPTION: Initializes a LoggerProvider with a StreamTransport for exporting logs to stdout in JSON format. The setup includes a SimpleLogRecordProcessor to process and forward log records to the exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_26\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse OpenTelemetry\\API\\Logs\\EventLogger;\nuse OpenTelemetry\\API\\Logs\\LogRecord;\nuse OpenTelemetry\\Contrib\\Otlp\\LogsExporter;\nuse OpenTelemetry\\SDK\\Common\\Export\\Stream\\StreamTransportFactory;\nuse OpenTelemetry\\SDK\\Logs\\LoggerProvider;\nuse OpenTelemetry\\SDK\\Logs\\Processor\\SimpleLogRecordProcessor;\nuse OpenTelemetry\\SDK\\Resource\\ResourceInfoFactory;\n\nrequire 'vendor/autoload.php';\n\n$exporter = new LogsExporter(\n    (new StreamTransportFactory())->create('php://stdout', 'application/json')\n);\n\n$loggerProvider = LoggerProvider::builder()\n    ->addLogRecordProcessor(new SimpleLogRecordProcessor($exporter))\n    ->setResource(ResourceInfoFactory::emptyResource())\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Running Rails Server with OTLP Configuration\nDESCRIPTION: Shell commands for running a Rails server with OTLP exporter configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrails server -p 8080\n```\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:4318\" rails server -p 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector in Daemonset Mode\nDESCRIPTION: This YAML manifest deploys the OpenTelemetry Collector in daemonset mode with the k8sattributesprocessor configured. It includes filters to fetch pods belonging to the node where the collector is deployed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-metadata/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otel-collector-daemonset\nspec:\n  mode: daemonset\n  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.47.0\n  serviceAccount: attributes-account\n  env:\n    - name: KUBE_NODE_NAME\n      valueFrom:\n        fieldRef:\n          apiVersion: v1\n          fieldPath: spec.nodeName\n  config: |\n    receivers:\n      jaeger:\n          protocols:\n              grpc:\n              thrift_binary:\n              thrift_compact:\n              thrift_http:\n      otlp:\n          protocols:\n              grpc:\n              http:\n\n    processors:\n         k8sattributes:\n             filter:\n                 node_from_env_var: KUBE_NODE_NAME\n    exporters:\n      jaeger:\n        endpoint: jaeger-all-in-one-collector:14250\n        tls:\n          insecure: true\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp, jaeger]\n          processors: [k8sattributes]\n          exporters: [jaeger]\n```\n\n----------------------------------------\n\nTITLE: Running the Rust HTTP Server\nDESCRIPTION: Command to build and run the HTTP server application using Cargo, showing the console output indicating that the server is listening on the configured address.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ cargo run\n...\nListening on 127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Adding Detailed Events to a Span\nDESCRIPTION: C# code demonstrating how to add events with timestamps and attributes to a span. This allows for more detailed logging within the context of a trace.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing var span = tracer.StartActiveSpan(\"SayHello\");\n\n// ...\n\nspan.AddEvent(\"event-message\");\nspan.AddEvent(\"event-message2\", DateTimeOffset.Now);\n\n// ...\n\nvar attributeData = new Dictionary<string, object>\n{\n    {\"foo\", 1 },\n    { \"bar\", \"Hello, World!\" },\n    { \"baz\", new int[] { 1, 2, 3 } }\n};\n\nspan.AddEvent(\"asdf\", DateTimeOffset.Now, new(attributeData));\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Page Settings in YAML\nDESCRIPTION: This YAML snippet configures the blog page settings, including menu weight, output formats, and directory exclusions for HTML testing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Blog\nmenu: { main: { weight: 50 } }\noutputs: [HTML, RSS]\nhtmltest:\n  # 2024-11-07 DO NOT COPY the following IgnoreDirs to non-en pages because it handles all locales.\n  IgnoreDirs:\n    # Ignore blog index pages for all locales and in all blog sections (top-level and years)\n    - ^(../)?blog/(\\d+/)?page/\\d+\n    # Ignore old blog posts\n    - ^(../)?blog/20(19|21|22|23)/\ndescription: OpenTelemetry blog\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Server Implementation in Go\nDESCRIPTION: Creates a simple HTTP server with a /rolldice endpoint. This is the basic application that will be instrumented with OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/rolldice\", rolldice)\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Instrumentors for Python Load Generator\nDESCRIPTION: This snippet initializes the Requests and URLLib3 Instrumentors by calling their instrument() methods. This ensures that every Locust request will have its own trace with spans for both the Requests and URLLib3 libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/load-generator.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nRequestsInstrumentor().instrument()\nURLLib3Instrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Generating Trace Data in Go using OpenTelemetry API\nDESCRIPTION: This code implements trace generation for a simulated ATM and backend system. It creates spans with parent-child relationships between ATM operations and backend API calls, setting appropriate trace context to represent a distributed transaction.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_44\n\nLANGUAGE: go\nCODE:\n```\nfunc appendTraceSpans(backend *BackendSystem, backendScopeSpans *ptrace.ScopeSpans, atmScopeSpans *ptrace.ScopeSpans) {\n\ttraceId := NewTraceID()\n\n\tvar atmOperationName string\n\n\tswitch {\n\t\tcase strings.Contains(backend.Endpoint, \"balance\"):\n\t\t\tatmOperationName = \"Check Balance\"\n\t\tcase strings.Contains(backend.Endpoint, \"deposit\"):\n\t\t\tatmOperationName = \"Make Deposit\"\n\t\tcase strings.Contains(backend.Endpoint, \"withdraw\"):\n\t\t\tatmOperationName = \"Fast Cash\"\n\t\t}\n\n\tatmSpanId := NewSpanID()\n    atmSpanStartTime := time.Now()\n    atmDuration, _ := time.ParseDuration(\"4s\")\n    atmSpanFinishTime := atmSpanStartTime.Add(atmDuration)\n\n\tatmSpan := atmScopeSpans.Spans().AppendEmpty()\n\tatmSpan.SetTraceID(traceId)\n\tatmSpan.SetSpanID(atmSpanId)\n\tatmSpan.SetName(atmOperationName)\n\tatmSpan.SetKind(ptrace.SpanKindClient)\n\tatmSpan.Status().SetCode(ptrace.StatusCodeOk)\n\tatmSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(atmSpanStartTime))\n\tatmSpan.SetEndTimestamp(pcommon.NewTimestampFromTime(atmSpanFinishTime))\n\n\tbackendSpanId := NewSpanID()\n\n\tbackendDuration, _ := time.ParseDuration(\"2s\")\n    backendSpanStartTime := atmSpanStartTime.Add(backendDuration)\n\n\tbackendSpan := backendScopeSpans.Spans().AppendEmpty()\n\tbackendSpan.SetTraceID(atmSpan.TraceID())\n\tbackendSpan.SetSpanID(backendSpanId)\n\tbackendSpan.SetParentSpanID(atmSpan.SpanID())\n\tbackendSpan.SetName(backend.Endpoint)\n\tbackendSpan.SetKind(ptrace.SpanKindServer)\n\tbackendSpan.Status().SetCode(ptrace.StatusCodeOk)\n\tbackendSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(backendSpanStartTime))\n\tbackendSpan.SetEndTimestamp(atmSpan.EndTimestamp())\n}\n```\n\n----------------------------------------\n\nTITLE: Using @SpanAttribute with @WithSpan\nDESCRIPTION: Example demonstrating how to use @SpanAttribute to automatically add method parameters as span attributes during instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/annotations.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport io.opentelemetry.instrumentation.annotations.SpanAttribute;\nimport io.opentelemetry.instrumentation.annotations.WithSpan;\n\npublic class MyClass {\n\n    @WithSpan\n    public void myMethod(@SpanAttribute(\"parameter1\") String parameter1,\n        @SpanAttribute(\"parameter2\") long parameter2) {\n        <...>\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Go Dependencies\nDESCRIPTION: Shell commands to install the required OpenTelemetry Go packages for tracing functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get go.opentelemetry.io/otel \\\n  go.opentelemetry.io/otel/trace \\\n  go.opentelemetry.io/otel/sdk \\\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Instrumentation in JavaScript\nDESCRIPTION: JavaScript code for setting up a custom instrumentation configuration with span processors. This example creates a NodeSDK with a SimpleSpanProcessor attached to a custom exporter and Node.js auto-instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\n\nconst sdk = new opentelemetry.NodeSDK({\n  spanProcessors: [new SimpleSpanProcessor(exporter)],\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Creating Server Span for Synchronous Operations in Rust\nDESCRIPTION: Example of span creation in a synchronous context for shipping order operations. Extracts trace context from incoming gRPC request metadata and creates a new server span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/shipping.md#2025-04-09_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nlet parent_cx =\nglobal::get_text_map_propagator(|prop| prop.extract(&MetadataMap(request.metadata())));\n// in this case, generating a tracking ID is trivial\n// we'll create a span and associated events all in this function.\nlet tracer = global::tracer(\"shipping\");\nlet mut span = tracer\n    .span_builder(\"oteldemo.ShippingService/ShipOrder\").with_kind(SpanKind::Server).start_with_context(&tracer, &parent_cx);\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes During Span Creation in JavaScript with OpenTelemetry\nDESCRIPTION: Sets attributes directly during span creation using the options parameter. This allows initializing a span with its attributes in a single operation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\ntracer.startActiveSpan(\n  'app.new-span',\n  { attributes: { attribute1: 'value1' } },\n  (span) => {\n    // do some work...\n\n    span.end();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Registering Auto Instrumentations in OpenTelemetry Node.js\nDESCRIPTION: This snippet demonstrates how to register multiple auto instrumentations in an OpenTelemetry Node.js application. It shows the proper way to set up instrumentations for different packages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FooInstrumentation } from '@opentelemetry/instrumentation-foo';\nimport { BarInstrumentation } from '@opentelemetry/instrumentation-bar';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\n// create TracerProvider, SpanProcessors and SpanExporters\nregisterInstrumentations({\n  instrumentations: [new FooInstrumentation(), new BarInstrumentation()],\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Browser Auto-instrumentation Package\nDESCRIPTION: Command to install the web auto-instrumentation metapackage which bundles all browser-based instrumentation libraries into a single package.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/auto-instrumentations-web\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry for Testing in Erlang\nDESCRIPTION: Erlang configuration that sets up OpenTelemetry for testing by disabling the exporter and using the simple processor. This ensures spans are processed but not exported outside the test environment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n%% config/sys.config.src\n{opentelemetry,\n  [{traces_exporter, none},\n   {processors,\n     [{otel_simple_processor, #{}}]}]}\n```\n\n----------------------------------------\n\nTITLE: Package Installation Commands\nDESCRIPTION: NPM commands to install required OpenTelemetry dependencies for browser instrumentation\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/browser.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\nnpm install @opentelemetry/api \\\n  @opentelemetry/sdk-trace-web \\\n  @opentelemetry/instrumentation-document-load \\\n  @opentelemetry/context-zone\n```\n\n----------------------------------------\n\nTITLE: Adding Events to Activities in C#\nDESCRIPTION: Examples of adding events to activities with and without additional event tags.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nmyActivity?.AddEvent(new(\"Init\"));\n...\nmyActivity?.AddEvent(new(\"End\"));\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar eventTags = new ActivityTagsCollection\n{\n    { \"operation\", \"calculate-pi\" },\n    { \"result\", 3.14159 }\n};\n\nactivity?.AddEvent(new(\"End Computation\", DateTimeOffset.Now, eventTags));\n```\n\n----------------------------------------\n\nTITLE: Injecting OpenTelemetry Tracer into Spring Controller\nDESCRIPTION: This snippet demonstrates how to inject the OpenTelemetry instance into a Spring Controller and obtain a Tracer. The Tracer can then be used to create custom spans for application-specific telemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/api.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.api.trace.Tracer;\n\n@Controller\npublic class MyController {\n  private final Tracer tracer;\n\n  public MyController(OpenTelemetry openTelemetry) {\n    this.tracer = openTelemetry.getTracer(\"application\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Glassfish / Payara for OpenTelemetry Java Agent\nDESCRIPTION: Add the path to the Java agent for Glassfish / Payara using the asadmin tool. This configuration is platform-specific, with separate commands for Linux and Windows.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/server-config.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n<server_install_dir>/bin/asadmin create-jvm-options \"-javaagent\\:/path/to/opentelemetry-javaagent.jar\"\n```\n\nLANGUAGE: powershell\nCODE:\n```\n<server_install_dir>\\bin\\asadmin.bat create-jvm-options '-javaagent\\:<Drive>\\:\\path\\to\\opentelemetry-javaagent.jar'\n```\n\n----------------------------------------\n\nTITLE: Checking Instrumentation Resource Status in Kubernetes\nDESCRIPTION: This command describes the Instrumentation resource in a specified namespace to verify its installation status and configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe otelinst -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Adding Events to Spans in OpenTelemetry Swift\nDESCRIPTION: This snippet demonstrates how to add structured events to spans. Events represent significant points in time during a span's lifetime and can include additional attribute data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: swift\nCODE:\n```\nlet attributes = [\n    \"key\" : AttributeValue.string(\"value\"),\n    \"result\" : AttributeValue.int(100)\n]\nspan.addEvent(name: \"computation complete\", attributes: attributes)\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer in OpenTelemetry Swift\nDESCRIPTION: This snippet shows how to acquire a tracer from the OpenTelemetry TracerProvider. The tracer requires an instrumentation name and optional version parameter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nlet  tracer = OpenTelemetry.instance.tracerProvider.get(instrumentationName: \"instrumentation-library-name\", instrumentationVersion: \"1.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to a Span\nDESCRIPTION: Example of how to add key-value attributes to spans to provide additional context and information about the operation being traced.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ncurrent_span = trace.get_current_span()\n\ncurrent_span.set_attribute(\"operacao.valor\", 1)\ncurrent_span.set_attribute(\"operacao.nome\", \"Dizendo olá!\")\ncurrent_span.set_attribute(\"operacao.outras-coisas\", [1, 2, 3])\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Detectors in Elixir\nDESCRIPTION: Configures which resource detectors to use in an Elixir application through runtime.exs file. This example sets up the otel_resource_env_var and otel_resource_app_env detectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/resources.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n## runtime.exs\nconfig :opentelemetry, resource_detectors: [:otel_resource_env_var, :otel_resource_app_env]\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Endpoint Environment Variable\nDESCRIPTION: Shell command to set the OpenTelemetry Collector endpoint using an environment variable.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/llm-observability.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT = \"YOUR_OTELCOL_URL:4318\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Auto Instrumentation in OpenTelemetry Java Agent\nDESCRIPTION: Set the 'otel.instrumentation.common.default-enabled' configuration option to false to disable all default auto instrumentation in the OpenTelemetry Java agent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/disable.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\notel.instrumentation.common.default-enabled=false\n```\n\n----------------------------------------\n\nTITLE: Creating Counter Metric\nDESCRIPTION: Demonstrates how to create and use a counter instrument for measuring increasing values with associated labels.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\nauto meter = provider->GetMeter(name, \"1.2.0\");\nauto double_counter = meter->CreateDoubleCounter(counter_name);\n// Create a label set which annotates metric values\nstd::map<std::string, std::string> labels = {{\"key\", \"value\"}};\nauto labelkv = common::KeyValueIterableView<decltype(labels)>{labels};\ndouble_counter->Add(val, labelkv);\n```\n\n----------------------------------------\n\nTITLE: Configuring ParentBasedSampler in Elixir\nDESCRIPTION: Implements ParentBasedSampler configuration in Elixir with TraceIdRatioBasedSampler for root sampling and specific rules for parent contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/sampling.md#2025-04-09_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\n# config/runtime.exs\nconfig :opentelemetry, sampler: {:parent_based, %{root: {:trace_id_ratio_based, 0.10},\n                                                  remote_parent_sampled: :always_on,\n                                                  remote_parent_not_sampled: :always_off,\n                                                  local_parent_sampled: :always_on,\n                                                  local_parent_not_sampled: :always_off}}\n```\n\n----------------------------------------\n\nTITLE: Running OpAMP Supervisor with Go\nDESCRIPTION: Command to start the OpAMP supervisor, which connects to the OpAMP server and manages the OpenTelemetry Collector according to the configuration. The output shows the supervisor starting, connecting to the server, and managing the lifecycle of the collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/management.md#2025-04-09_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ go run .\n2023/02/08 13:32:54 Supervisor starting, id=01GRRKNBJE06AFVGQT5ZYC0GEK, type=io.opentelemetry.collector, version=1.0.0.\n2023/02/08 13:32:54 Starting OpAMP client...\n2023/02/08 13:32:54 OpAMP Client started.\n2023/02/08 13:32:54 Starting agent /usr/local/bin/otelcol\n2023/02/08 13:32:54 Connected to the server.\n2023/02/08 13:32:54 Received remote config from server, hash=e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855.\n2023/02/08 13:32:54 Agent process started, PID=13553\n2023/02/08 13:32:54 Effective config changed.\n2023/02/08 13:32:54 Enabling own metrics pipeline in the config<F11>\n2023/02/08 13:32:54 Effective config changed.\n2023/02/08 13:32:54 Config is changed. Signal to restart the agent.\n2023/02/08 13:32:54 Agent is not healthy: Get \"http://localhost:13133\": dial tcp [::1]:13133: connect: connection refused\n2023/02/08 13:32:54 Stopping the agent to apply new config.\n2023/02/08 13:32:54 Stopping agent process, PID=13553\n2023/02/08 13:32:54 Agent process PID=13553 successfully stopped.\n2023/02/08 13:32:54 Starting agent /usr/local/bin/otelcol\n2023/02/08 13:32:54 Agent process started, PID=13554\n2023/02/08 13:32:54 Agent is not healthy: Get \"http://localhost:13133\": dial tcp [::1]:13133: connect: connection refused\n2023/02/08 13:32:55 Agent is not healthy: health check on http://localhost:13133 returned 503\n2023/02/08 13:32:55 Agent is not healthy: health check on http://localhost:13133 returned 503\n2023/02/08 13:32:56 Agent is not healthy: health check on http://localhost:13133 returned 503\n2023/02/08 13:32:57 Agent is healthy.\n```\n\n----------------------------------------\n\nTITLE: Database Connection with otelsql Instrumentation\nDESCRIPTION: Function that establishes a connection to MySQL using otelsql.Open instead of sql.Open to create an instrumented database connection, and registers DB stats metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nfunc connectDB() *sql.DB {\n\t// Connect to database\n\tdb, err := otelsql.Open(\"mysql\", mysqlDSN, otelsql.WithAttributes(\n\t\tsemconv.DBSystemMySQL,\n\t))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Register DB stats to meter\n\terr = otelsql.RegisterDBStatsMetrics(db, otelsql.WithAttributes(\n\t\tsemconv.DBSystemMySQL,\n\t))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn db\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry PHP SDK Autoloading\nDESCRIPTION: Demonstrates how to initialize OpenTelemetry SDK through composer autoloading. Requires OTEL_PHP_AUTOLOAD_ENABLED=true environment variable.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/quote.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire __DIR__ . '/../vendor/autoload.php';\n```\n\n----------------------------------------\n\nTITLE: Context Extraction in Java OpenTelemetry\nDESCRIPTION: Shows how to extract context from upstream calls and create server spans with proper error handling and scope management.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n// extrair o contexto\nContext extractedContext = propagator.extract(Context.current(), httpExchange, getter);\nSpan span = tracer.spanBuilder(\"receive\")\n            .setSpanKind(SpanKind.SERVER)\n            .setParent(extractedContext)\n            .startSpan();\n\n// tornar o trecho ativo para que qualquer telemetria aninhada seja correlacionada\ntry (Scope unused = span.makeCurrent()) {\n  userCode();\n} catch (Exception e) {\n  span.recordException(e);\n  span.setStatus(StatusCode.ERROR);\n  throw e;\n} finally {\n  span.end();\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting a Tracer with ASP.NET Core\nDESCRIPTION: C# code demonstrating how to inject a tracer instance in ASP.NET Core and use it in an endpoint. This approach is recommended for ASP.NET Core applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry.Trace;\n\nvar builder = WebApplication.CreateBuilder(args);\n\n// ...\n\nbuilder.Services.AddSingleton(TracerProvider.Default.GetTracer(serviceName));\n\n// ...\n\nvar app = builder.Build();\n\n// ...\n\napp.MapGet(\"/hello\", (Tracer tracer) =>\n{\n    using var span = tracer.StartActiveSpan(\"hello-span\");\n\n    // do stuff\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Span in PHP with OpenTelemetry\nDESCRIPTION: Shows how to create a basic span using OpenTelemetry in PHP. The span is created, some work is done, and then the span is ended.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n<?php\npublic function roll($rolls) {\n    $span = $this->tracer->spanBuilder(\"rollTheDice\")->startSpan();\n    $result = [];\n    for ($i = 0; $i < $rolls; $i++) {\n        $result[] = $this->rollOnce();\n    }\n    $span->end();\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Span Links in Ruby with OpenTelemetry\nDESCRIPTION: Create span links to casually associate spans across different traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\nspan_to_link_from = OpenTelemetry::Trace.current_span\n\nlink = OpenTelemetry::Trace::Link.new(span_to_link_from.context)\n\nMyAppTracer.in_span(\"new-span\", links: [link])\n  # do something that 'new_span' tracks\n\n  # The link in 'new_span' casually associated it with the span it's linked from,\n  # but it is not necessarily a child span.\nend\n\nlink = OpenTelemetry::Trace::Link.new(span_to_link_from.context, attributes: { \"some.attribute\" => 12 })\n```\n\n----------------------------------------\n\nTITLE: Telemetrygen Trace Generation Output\nDESCRIPTION: Sample output showing successful trace generation from the telemetrygen utility, indicating that 3 traces were generated by worker 0.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/quick-start.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n2024-01-16T14:33:15.692-0500  INFO  traces/worker.go:99  traces generated  {\"worker\": 0, \"traces\": 3}\n2024-01-16T14:33:15.692-0500  INFO  traces/traces.go:58  stop the batch span processor\n```\n\n----------------------------------------\n\nTITLE: Writing OpenTelemetry Tests in Elixir with ExUnit\nDESCRIPTION: Elixir test module using ExUnit to verify that spans are correctly created with the expected attributes. It defines record macros to work with the Span record and uses the otel_simple_processor with an exporter that sends spans to the test process.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule OtelGettingStartedTest do\n  use ExUnit.Case\n\n  # Use Record module to extract fields of the Span record from the opentelemetry dependency.\n  require Record\n  @fields Record.extract(:span, from: \"deps/opentelemetry/include/otel_span.hrl\")\n  # Define macros for `Span`.\n  Record.defrecordp(:span, @fields)\n\n  test \"greets the world\" do\n    # Set exporter to :otel_exporter_pid, which sends spans\n    # to the given process - in this case self() - in the format {:span, span}\n    :otel_simple_processor.set_exporter(:otel_exporter_pid, self())\n\n    # Call the function to be tested.\n    OtelGettingStarted.hello()\n\n    # Use Erlang's `:otel_attributes` module to create attributes to match against.\n    # See the `:otel_events` module for testing events.\n    attributes = :otel_attributes.new([a_key: \"a value\"], 128, :infinity)\n\n    # Assert that the span emitted by OtelGettingStarted.hello/0 was received and contains the desired attributes.\n    assert_receive {:span,\n                    span(\n                      name: \"operation\",\n                      attributes: ^attributes\n                    )}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Metrics in C++\nDESCRIPTION: This function initializes the OpenTelemetry MeterProvider, setting up an exporter and reader for metrics collection in the Currency Service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/currency.md#2025-04-09_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nvoid initMeter()\n{\n  // Build MetricExporter\n  otlp_exporter::OtlpGrpcMetricExporterOptions otlpOptions;\n  auto exporter = otlp_exporter::OtlpGrpcMetricExporterFactory::Create(otlpOptions);\n\n  // Build MeterProvider and Reader\n  metric_sdk::PeriodicExportingMetricReaderOptions options;\n  std::unique_ptr<metric_sdk::MetricReader> reader{\n      new metric_sdk::PeriodicExportingMetricReader(std::move(exporter), options) };\n  auto provider = std::shared_ptr<metrics_api::MeterProvider>(new metric_sdk::MeterProvider());\n  auto p = std::static_pointer_cast<metric_sdk::MeterProvider>(provider);\n  p->AddMetricReader(std::move(reader));\n  metrics_api::Provider::SetMeterProvider(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Library Instrumentation Suppression\nDESCRIPTION: Configuration property to disable specific library instrumentations in OpenTelemetry. Set 'otel.instrumentation.[name].enabled' to false where [name] is the instrumentation name for the target library.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/disable.md#2025-04-09_snippet_4\n\nLANGUAGE: properties\nCODE:\n```\notel.instrumentation.[name].enabled=false\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Service-based Routing\nDESCRIPTION: YAML configuration for a first-tier OpenTelemetry collector that uses the load-balancing exporter with DNS resolver and service-based routing. It ensures all spans from the same service are sent to the same downstream collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/gateway/index.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nexporters:\n  loadbalancing:\n    routing_key: service\n    protocol:\n      otlp:\n        tls:\n          insecure: true\n    resolver:\n      dns:\n        hostname: collectors.example.com\n        port: 5317\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [loadbalancing]\n```\n\n----------------------------------------\n\nTITLE: Configuring Request Attribute Tracing in OpenTelemetry Python\nDESCRIPTION: Examples of configuring which request attributes to trace for Django, Falcon, and Tornado frameworks.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport OTEL_PYTHON_DJANGO_TRACED_REQUEST_ATTRS='path_info,content_type'\nexport OTEL_PYTHON_FALCON_TRACED_REQUEST_ATTRS='query_string,uri_template'\nexport OTEL_PYTHON_TORNADO_TRACED_REQUEST_ATTRS='uri,query'\n```\n\n----------------------------------------\n\nTITLE: Adding Events to Spans in Java\nDESCRIPTION: Demonstrates how to add an event with an attribute to a span when an exception is caught in the getAds function.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/ad.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nspan.addEvent(\"Error\", Attributes.of(AttributeKey.stringKey(\"exception.message\"), e.getMessage()));\n```\n\n----------------------------------------\n\nTITLE: Injecting OpenTelemetry Meter into Spring Controller\nDESCRIPTION: This snippet shows how to inject the OpenTelemetry instance into a Spring Controller and obtain a Meter. The Meter can then be used to create metrics like counters, gauges, or histograms for monitoring application behavior.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/api.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.api.metrics.Meter;\n\n@Controller\npublic class MyController {\n  private final Meter meter;\n\n  public MyController(OpenTelemetry openTelemetry) {\n    this.meter = openTelemetry.getMeter(\"application\");\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Prometheus Metric After Deprecation\nDESCRIPTION: Demonstrates how a Prometheus metric is formatted after it has been deprecated, including the deprecation notice in the HELP line.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\n# HELP otelcol_exporter_queue_size (Deprecated since 1.15.0) this counts things\n# TYPE otelcol_exporter_queue_size counter\notelcol_exporter_queue_size 0\n```\n\n----------------------------------------\n\nTITLE: Getting Active Context in OpenTelemetry JavaScript\nDESCRIPTION: Shows how to retrieve the currently active context. If no context is active, ROOT_CONTEXT is returned. A context manager must be configured for this to work properly.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\n// Returns the active context\n// If no context is active, the ROOT_CONTEXT is returned\nconst ctx = api.context.active();\n```\n\n----------------------------------------\n\nTITLE: Creating Active Spans in TypeScript with OpenTelemetry\nDESCRIPTION: Creates an active span using the tracer.startActiveSpan method to track the rollTheDice function execution. The span is created, used to trace the function's operations, and properly ended before returning the result.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { trace, Span } from '@opentelemetry/api';\n\n/* ... */\n\nexport function rollTheDice(rolls: number, min: number, max: number) {\n  // Create a span. A span must be closed.\n  return tracer.startActiveSpan('rollTheDice', (span: Span) => {\n    const result: number[] = [];\n    for (let i = 0; i < rolls; i++) {\n      result.push(rollOnce(min, max));\n    }\n    // Be sure to end the span!\n    span.end();\n    return result;\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Benchmark Charts with Chart.js in JavaScript\nDESCRIPTION: This script initializes and renders benchmark charts using Chart.js. It processes benchmark data, organizes it by test case, and creates interactive line charts for each benchmark set.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/benchmarks.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n(function () {\n  const COLORS = [\n    \"#48aaf9\",\n    \"#8a3ef2\",\n    \"#78eeda\",\n    \"#d78000\",\n    \"#1248b3\",\n    \"#97dbfc\",\n    \"#006174\",\n    \"#00b6b6\",\n    \"#854200\",\n    \"#f3c8ad\",\n    \"#410472\",\n  ];\n\n  function init() {\n    function collectBenchesPerTestCase(entries) {\n      const byGroup = new Map();\n      const commitIds = [];\n      for (const entry of entries) {\n        const { commit, date, tool, benches } = entry;\n        const commitId = commit.id.slice(0, 7);\n        commitIds.push(commitId);\n        for (const bench of benches) {\n          const result = { commit, date, tool, bench };\n          if (!bench.extra.includes(\"10kDPS\") && !bench.extra.includes(\"10kSPS\")){\n            continue\n          }\n          const extraParts = bench.extra.split(\"/\");\n          let benchmarkName = extraParts[0] + \" - \" + bench.name;\n          let byName = byGroup.get(benchmarkName);\n          if (byName === undefined) {\n            byName = new Map();\n            byGroup.set(benchmarkName, byName);\n          }\n          let extraName = bench.extra\n          if (extraParts.length > 1) {\n            extraName = extraParts[1].split(\" - \")[0]\n          }\n          let byCommitId = byName.get(extraName);\n          if (byCommitId === undefined) {\n            byCommitId = new Map();\n            byCommitId.set(commitId, result)\n            byName.set(extraName, byCommitId);\n          } else {\n            byCommitId.set(commitId, result);\n          }\n        }\n      }\n      return {\n        commitIds,\n        byGroup\n      };\n    }\n\n    const data = window.BENCHMARK_DATA;\n\n    // Render footer\n    document.getElementById('dl-button').onclick = () => {\n      const dataUrl = 'data:,' + JSON.stringify(data, null, 2);\n      const a = document.createElement('a');\n      a.href = dataUrl;\n      a.download = 'benchmark_data.json';\n      a.click();\n    };\n\n    // Prepare data points for charts\n    return Object.keys(data.entries).map(name => ({\n      name,\n      dataSet: collectBenchesPerTestCase(data.entries[name]),\n    }));\n  }\n\n  function renderAllChars(dataSets) {\n\n    function renderGraph(parent, name, commitIds, byName) {\n      const chartTitle = document.createElement('h3');\n      chartTitle.textContent = name;\n      parent.append(chartTitle);\n\n      const canvas = document.createElement('canvas');\n      canvas.className = 'benchmark-chart';\n      parent.appendChild(canvas);\n\n      const results = [];\n      for (const [name, byCommitId] of byName.entries()) {\n        results.push({\n          name,\n          dataset: commitIds.map(commitId => byCommitId.get(commitId) ?? null)\n        });\n      }\n      results.sort((a, b) => a.name.localeCompare(b.name));\n\n      const data = {\n        labels: commitIds,\n        datasets: results.map(({ name, dataset }, index) => {\n          const color = COLORS[index % COLORS.length];\n\n          return {\n            label: name,\n            data: dataset.map(d => d?.bench.value ?? null),\n            fill: false,\n            borderColor: color,\n            backgroundColor: color,\n          };\n        }),\n      };\n\n      const options = {\n        scales: {\n          xAxes: [\n            {\n              scaleLabel: {\n                display: true,\n                labelString: 'commit',\n              },\n            }\n          ],\n          yAxes: [\n            {\n              scaleLabel: {\n                display: true,\n                labelString: results?.[0]?.dataset.find(d => d !== null)?.bench.unit ?? '',\n              },\n              ticks: {\n                beginAtZero: true,\n              }\n            }\n          ],\n        },\n        tooltips: {\n          callbacks: {\n            afterTitle: items => {\n              const { datasetIndex, index } = items[0];\n              const data = results[datasetIndex].dataset[index];\n              return '\\n' + data.commit.message + '\\n\\n' + data.commit.timestamp + ' committed by @' + data.commit.author.username + '\\n';\n            },\n            label: item => {\n              const { datasetIndex, index, value } = item;\n              const { name, dataset } = results[datasetIndex];\n              const { range, unit } = dataset[index].bench;\n              let label = `${name}: ${value}`;\n              label += unit;\n              if (range) {\n                label += ' (' + range + ')';\n              }\n              return label;\n            },\n          }\n        },\n        legend: {\n          display: true,\n          position: \"right\"\n        }\n      };\n\n      new Chart(canvas, {\n        type: 'line',\n        data,\n        options,\n      });\n    }\n\n    function renderBenchSet(name, benchSet, main) {\n      const setElem = document.createElement('div');\n      setElem.className = 'benchmark-set';\n      main.appendChild(setElem);\n\n      const graphsElem = document.createElement('div');\n      graphsElem.className = 'benchmark-graphs';\n      setElem.appendChild(graphsElem);\n\n      const { commitIds, byGroup } = benchSet;\n      const groups = [];\n      for (const [name, byName] of byGroup.entries()) {\n        groups.push({ name, byName });\n      }\n      groups.sort((a, b) => a.name.localeCompare(b.name));\n\n      for (const { name, byName } of groups) {\n        renderGraph(graphsElem, name, commitIds, byName);\n      }\n    }\n\n    const main = document.getElementById('main');\n    for (const { name, dataSet } of dataSets) {\n      renderBenchSet(name, dataSet, main);\n    }\n  }\n\n  renderAllChars(init()); // Start\n})();\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Attributes with OpenTelemetry\nDESCRIPTION: Shows how to use standardized semantic attributes for common data types like HTTP methods and URLs to ensure consistent naming across systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.semconv.trace import SpanAttributes\n\n// ...\n\ncurrent_span = trace.get_current_span()\ncurrent_span.set_attribute(SpanAttributes.HTTP_METHOD, \"GET\")\ncurrent_span.set_attribute(SpanAttributes.HTTP_URL, \"https://opentelemetry.io/\")\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracing in .NET\nDESCRIPTION: Configures OpenTelemetry tracing in the .NET dependency injection container, setting up resource builders, instrumentation libraries, and exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/cart/index.md#2025-04-09_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAction<ResourceBuilder> appResourceBuilder =\n    resource => resource\n        .AddContainerDetector()\n        .AddHostDetector();\n\nbuilder.Services.AddOpenTelemetry()\n    .ConfigureResource(appResourceBuilder)\n    .WithTracing(tracerBuilder => tracerBuilder\n        .AddSource(\"OpenTelemetry.Demo.Cart\")\n        .AddRedisInstrumentation(\n            options => options.SetVerboseDatabaseStatements = true)\n        .AddAspNetCoreInstrumentation()\n        .AddGrpcClientInstrumentation()\n        .AddHttpClientInstrumentation()\n        .AddOtlpExporter());\n```\n\n----------------------------------------\n\nTITLE: Configuring LoadBalancer Service Type\nDESCRIPTION: YAML configuration to set the frontend-proxy service type to LoadBalancer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  frontend-proxy:\n    service:\n      type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Plugin for a Specific Route\nDESCRIPTION: cURL command to enable the OpenTelemetry plugin for a specific route in Apache APISIX. It sets the sampler to always_on for testing purposes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/apisix/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 \\\n  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \\\n  -X PUT -d '\n{\n    \"uri\": \"/get\",\n    \"plugins\": {\n        \"opentelemetry\": {\n            \"sampler\": {\n                \"name\": \"always_on\"\n            }\n        }\n    },\n    \"upstream\": {\n        \"type\": \"roundrobin\",\n        \"nodes\": {\n            \"httpbin.org:80\": 1\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Starting a Basic Span\nDESCRIPTION: Creates a new span with a specified name and sets its start time to the current time.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\nauto span = tracer->StartSpan(\"HandleRequest\");\n```\n\n----------------------------------------\n\nTITLE: Sending Custom Metrics Using OTLP JSON\nDESCRIPTION: This shell script demonstrates how to send custom metrics using OTLP JSON format. It includes resource attributes, metric name, unit, and gauge data points.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\nURL=${1}\nPORT=${2:-443}\n\nnow=$(date +%s)\nnotAfterString=$(echo q | openssl s_client -servername \"${URL}\" \"${URL}:${PORT}\" 2>/dev/null | openssl x509 -noout -enddate | awk -F\"=\" '{ print $2; }')\nif [[ \"$(uname)\" == \"Darwin\" ]] ; then\n  notAfter=$(date -j -f \"%b %d %H:%M:%S %Y %Z\" \"${notAfterString}\" +%s)\nelse\n  notAfter=$(date -d \"${notAfterString}\" +%s)\nfi\n\nsecondsLeft=$(($notAfter-$now))\n\ndata=\"\n{\n    \\\"resourceMetrics\\\": [\n      {\n        \\\"resource\\\": {\n          \\\"attributes\\\": [\n            {\n              \\\"key\\\": \\\"service.name\\\",\n              \\\"value\\\": {\n                \\\"stringValue\\\": \\\"${URL}\\\"\n              }\n            }\n          ]\n        },\n        \\\"scopeMetrics\\\": [\n          {\n            \\\"metrics\\\": [\n              {\n                \\\"name\\\": \\\"tls.server.not_after.time_left\\\",\n                \\\"unit\\\": \\\"s\\\",\n                \\\"description\\\": \\\"\\\",\n                \\\"gauge\\\": {\n                  \\\"dataPoints\\\": [\n                    {\n                      \\\"asInt\\\": ${secondsLeft},\n                      \\\"timeUnixNano\\\": ${now}000000000\n                    }\n                  ]\n                }\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n\"\ncurl -X POST -H \"Content-Type: application/json\" -d \"${data}\" -i localhost:4318/v1/metrics\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry OTLP Exporter Dependencies\nDESCRIPTION: Cargo dependency configuration for adding the OpenTelemetry OTLP exporter to a Rust project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[dependencies]\nopentelemetry-otlp = { version = \"{{% version-from-registry exporter-rust-otlp %}}\", features = [\"default\"] }\n```\n\n----------------------------------------\n\nTITLE: Querying OpenTelemetry Collector Metrics with cURL\nDESCRIPTION: Command to query the metrics endpoint of the OpenTelemetry Collector to inspect the telemetry data it has collected about itself, showing successful integration of the collector with the OpAMP management system.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/management.md#2025-04-09_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ curl localhost:8888/metrics\n...\n# HELP otelcol_receiver_accepted_metric_points Number of metric points successfully pushed into the pipeline.\n# TYPE otelcol_receiver_accepted_metric_points counter\notelcol_receiver_accepted_metric_points{receiver=\"prometheus/own_metrics\",service_instance_id=\"01GRRKNBJE06AFVGQT5ZYC0GEK\",service_name=\"io.opentelemetry.collector\",service_version=\"1.0.0\",transport=\"http\"} 322\n# HELP otelcol_receiver_refused_metric_points Number of metric points that could not be pushed into the pipeline.\n# TYPE otelcol_receiver_refused_metric_points counter\notelcol_receiver_refused_metric_points{receiver=\"prometheus/own_metrics\",service_instance_id=\"01GRRKNBJE06AFVGQT5ZYC0GEK\",service_name=\"io.opentelemetry.collector\",service_version=\"1.0.0\",transport=\"http\"} 0\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporter in Erlang\nDESCRIPTION: Sets up the OpenTelemetry configuration in Erlang to use the stdout exporter and batch span processor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n%% config/sys.config.src\n[\n {opentelemetry,\n  [{span_processor, batch},\n   {traces_exporter, {otel_exporter_stdout, []}}]}\n].\n```\n\n----------------------------------------\n\nTITLE: Container Parser Configuration Example\nDESCRIPTION: YAML configuration showing how to set up the new container parser in the filelog receiver to handle container logs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-collector-container-log-parser/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  filelog:\n    include_file_path: true\n    include:\n      - /var/log/pods/*/*/*.log\n    operators:\n      - id: container-parser\n        type: container\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Metrics\nDESCRIPTION: This YAML configuration sets up an OpenTelemetry collector to receive metrics via OTLP and export them using Prometheus Remote Write. It defines receivers, processors, exporters, and a pipeline for metric data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/agent.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: 0.0.0.0:4318\n\nprocessors:\n  batch:\n\nexporters:\n  prometheusremotewrite:\n    endpoint: https://prw.example.com/v1/api/remote_write\n\nservice:\n  pipelines:\n    metrics/prod:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [prometheusremotewrite]\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as a Reverse Proxy for OpenTelemetry Collector\nDESCRIPTION: NGINX configuration for securely exposing an OpenTelemetry collector to the internet, handling CORS headers for browser-based telemetry collection and providing SSL offloading.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80 default_server;\n    server_name _;\n    location / {\n        # Take care of preflight requests\n        if ($request_method = 'OPTIONS') {\n             add_header 'Access-Control-Max-Age' 1728000;\n             add_header 'Access-Control-Allow-Origin' 'name.of.your.website.example.com' always;\n             add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type' always;\n             add_header 'Access-Control-Allow-Credentials' 'true' always;\n             add_header 'Content-Type' 'text/plain charset=UTF-8';\n             add_header 'Content-Length' 0;\n             return 204;\n        }\n\n        add_header 'Access-Control-Allow-Origin' 'name.of.your.website.example.com' always;\n        add_header 'Access-Control-Allow-Credentials' 'true' always;\n        add_header 'Access-Control-Allow-Headers' 'Accept,Accept-Language,Content-Language,Content-Type' always;\n        proxy_http_version 1.1;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://collector:4318;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Environment Variables Configuration Table\nDESCRIPTION: Markdown table documenting OTLP exporter environment variables including their descriptions, default values, and stability status. Covers configuration options for endpoints, protocols, timeouts, headers, and attribute limits.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment variable                                | Description                                                                                                                                                                                    | Default value                                                                        | Status                                              |\n| --------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------ | --------------------------------------------------- |\n| `OTEL_EXPORTER_OTLP_ENDPOINT`                       | Target endpoint for the OTLP exporter. See [the OpenTelemetry specification](/docs/specs/otel/protocol/exporter/) for more details.                                                            | `http/protobuf`: `http://localhost:4318`, `grpc`: `http://localhost:4317`            | [Stable](/docs/specs/otel/versioning-and-stability) |\n| `OTEL_EXPORTER_OTLP_TRACES_ENDPOINT`                | Equivalent to `OTEL_EXPORTER_OTLP_ENDPOINT`, but applies only to traces.                                                                                                                       | `http/protobuf`: `http://localhost:4318/v1/traces`, `grpc`: `http://localhost:4317`  | [Stable](/docs/specs/otel/versioning-and-stability) |\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Auto-instrumentation in Kubernetes\nDESCRIPTION: This snippet creates an Instrumentation resource for Go services, configuring the OTLP exporter endpoint with HTTP/protobuf protocol, standard propagators, and a sampling strategy that samples all traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  exporter:\n    endpoint: http://demo-collector:4318\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: \"1\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring URL Exclusions for OpenTelemetry Python\nDESCRIPTION: Examples of setting environment variables to exclude specific URLs from instrumentation globally and for specific libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport OTEL_PYTHON_EXCLUDED_URLS=\"client/.*/info,healthcheck\"\nexport OTEL_PYTHON_URLLIB3_EXCLUDED_URLS=\"client/.*/info\"\nexport OTEL_PYTHON_REQUESTS_EXCLUDED_URLS=\"healthcheck\"\n```\n\n----------------------------------------\n\nTITLE: Setting Resources via Environment Variables in OpenTelemetry .NET\nDESCRIPTION: Example showing how to inject resource attributes like service information, host details, and OS data using the OTEL_RESOURCE_ATTRIBUTES environment variable. The example uses unix commands like uname to generate some of the resource values.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/resources.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ env OTEL_RESOURCE_ATTRIBUTES=\"service.name=resource-tutorial-dotnet,service.namespace=tutorial,service.version=1.0,service.instance.id=`uuidgen`,host.name=`HOSTNAME`,host.type=`uname -m`,os.name=`uname -s`,os.version=`uname -r`\" dotnet run\n\nActivity.TraceId:          d1cbb7787440cc95b325835cb2ff8018\nActivity.SpanId:           2ca007300fcb3068\nActivity.TraceFlags:           Recorded\nActivity.ActivitySourceName: tutorial-dotnet\nActivity.DisplayName: SayHello\nActivity.Kind:        Internal\nActivity.StartTime:   2022-10-02T13:31:12.0175090Z\nActivity.Duration:    00:00:00.0003920\nActivity.Tags:\n    foo: 1\n    bar: Hello, World!\n    baz: [1,2,3]\nResource associated with Activity:\n    service.name: resource-tutorial-dotnet\n    service.namespace: tutorial\n    service.version: 1.0\n    service.instance.id: 93B14BAD-813D-48EE-9FB1-2ADFD07C5E78\n    host.name: myhost\n    host.type: arm64\n    os.name: Darwin\n    os.version: 21.6.0\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Counter in OpenTelemetry Java\nDESCRIPTION: Shows implementation of ObservableLongCounter for asynchronous monitoring of monotonic values. Demonstrates callback-based measurement recording and handling of attributes in async context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.api.metrics.ObservableLongCounter;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class AsyncCounterUsage {\n  // Pre-allocate attributes whenever possible\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void asyncCounterUsage(Meter meter) {\n    AtomicLong widgetCount = new AtomicLong();\n\n    // Construct an async counter to observe an existing counter in a callback\n    ObservableLongCounter asyncCounter =\n        meter\n            .counterBuilder(\"fully.qualified.counter\")\n            .setDescription(\"A count of produced widgets\")\n            .setUnit(\"{widget}\")\n            // Uncomment to optionally change the type to double\n            // .ofDoubles()\n            .buildWithCallback(\n                // the callback is invoked when a MetricReader reads metrics\n                observableMeasurement -> {\n                  long currentWidgetCount = widgetCount.get();\n\n                  // Record a measurement with no attributes.\n                  // Attributes defaults to Attributes.empty().\n                  observableMeasurement.record(currentWidgetCount);\n\n                  // Record a measurement with attributes, using pre-allocated attributes whenever\n                  // possible.\n                  observableMeasurement.record(currentWidgetCount, WIDGET_RED_CIRCLE);\n                  // Sometimes, attributes must be computed using application context.\n                  observableMeasurement.record(\n                      currentWidgetCount,\n                      Attributes.of(\n                          WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n                });\n\n    // Optionally close the counter to unregister the callback when required\n    asyncCounter.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Startup Logs\nDESCRIPTION: Log output showing the initialization and running state of the OpenTelemetry Collector with the tailtracer receiver.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_25\n\nLANGUAGE: log\nCODE:\n```\n2023-11-08T21:38:36.621+0800\tinfo\tservice@v0.88.0/telemetry.go:84\tSetting up own telemetry...\n2023-11-08T21:38:36.621+0800\tinfo\tservice@v0.88.0/telemetry.go:201\tServing Prometheus metrics\t{\"address\": \":8888\", \"level\": \"Basic\"}\n2023-11-08T21:38:36.621+0800\tinfo\texporter@v0.88.0/exporter.go:275\tDevelopment component. May change in the future.\t{\"kind\": \"exporter\", \"data_type\": \"traces\", \"name\": \"debug\"}\n2023-11-08T21:38:36.621+0800\tdebug\texporter@v0.88.0/exporter.go:273\tStable component.\t{\"kind\": \"exporter\", \"data_type\": \"traces\", \"name\": \"otlp/jaeger\"}\n2023-11-08T21:38:36.621+0800\tdebug\tprocessor@v0.88.0/processor.go:287\tStable component.\t{\"kind\": \"processor\", \"name\": \"batch\", \"pipeline\": \"traces\"}\n2023-11-08T21:38:36.621+0800\tdebug\treceiver@v0.88.0/receiver.go:294\tStable component.\t{\"kind\": \"receiver\", \"name\": \"otlp\", \"data_type\": \"traces\"}\n2023-11-08T21:38:36.621+0800\tdebug\treceiver@v0.88.0/receiver.go:294\tAlpha component. May change in the future.\t{\"kind\": \"receiver\", \"name\": \"tailtracer\", \"data_type\": \"traces\"}\n2023-11-08T21:38:36.622+0800\tinfo\tservice@v0.88.0/service.go:143\tStarting otelcol-dev...\t{\"Version\": \"1.0.0\", \"NumCPU\": 10}\n2023-11-08T21:38:36.622+0800\tinfo\textensions/extensions.go:33\tStarting extensions...\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP HTTP Receiver Size Limit in OpenTelemetry Collector\nDESCRIPTION: YAML configuration example showing how to set the max_request_body_size parameter for the OTLP HTTP receiver to limit payload sizes to 10 MiB. This setting helps mitigate potential DoS attacks through compressed payloads.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/cve-2024-36129.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: localhost:4318\n        max_request_body_size: 10485760 # 10 MiB\n```\n\n----------------------------------------\n\nTITLE: Getting Current Span from Context\nDESCRIPTION: Code example demonstrating how to retrieve the current span from a context object.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// This context needs contain the active span you plan to extract.\nctx := context.TODO()\nspan := trace.SpanFromContext(ctx)\n\n// Do something with the current span, optionally calling `span.End()` if you want it to end\n```\n\n----------------------------------------\n\nTITLE: Getting Context Entry Value in OpenTelemetry JavaScript\nDESCRIPTION: Shows how to retrieve a value from a context using a context key. The example demonstrates accessing a value from the ROOT_CONTEXT, which is the empty base context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst key = api.createContextKey('some key');\n// ROOT_CONTEXT is the empty context\nconst ctx = api.ROOT_CONTEXT;\n\nconst value = ctx.getValue(key);\n```\n\n----------------------------------------\n\nTITLE: Recording Errors in OpenTelemetry Go Spans\nDESCRIPTION: Demonstrates how to record errors in spans using OpenTelemetry Go, including setting the span status.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t// ...\n\t\"go.opentelemetry.io/otel/codes\"\n\t// ...\n)\n\n// ...\n\nresult, err := operacaoQueDeveriaFalhar()\nif err != nil {\n\tspan.SetStatus(codes.Error, \"operacaoQueDeveriaFalhar falhou\")\n\tspan.RecordError(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Kafka Broker\nDESCRIPTION: Command to start the Kafka broker with default configuration\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkafka-server-start /usr/local/etc/kafka/server.properties\n```\n\n----------------------------------------\n\nTITLE: Getting Current Span from Context\nDESCRIPTION: Code example demonstrating how to retrieve the current span from a context object.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\n// This context needs contain the active span you plan to extract.\nctx := context.TODO()\nspan := trace.SpanFromContext(ctx)\n\n// Do something with the current span, optionally calling `span.End()` if you want it to end\n```\n\n----------------------------------------\n\nTITLE: Configuring Jaeger Exporter in OpenTelemetry Collector\nDESCRIPTION: Original Jaeger exporter configuration that needs to be migrated. Specifies the Jaeger endpoint and pipeline setup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jaeger-exporter-collector-migration.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  jaeger:\n    endpoint: https://jaeger.example.com:14250\n\nservice:\n  pipelines:\n    exporters: [jaeger]\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry API Dependency with Gradle\nDESCRIPTION: Gradle configuration for adding the OpenTelemetry API dependency to a Gradle project. This dependency is required to use the OpenTelemetry API for manual instrumentation with the Java agent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/api.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation('io.opentelemetry:opentelemetry-api:{{% param vers.otel %}}')\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Events with Attributes in Erlang/Elixir\nDESCRIPTION: Shows how to add events with associated attributes to a span. This allows for more detailed event tracking by including additional contextual information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: erlang\nCODE:\n```\n?add_event(<<\"Process exited with reason\">>, [{pid, Pid)}, {reason, Reason}]))\n```\n\nLANGUAGE: elixir\nCODE:\n```\nTracer.add_event(\"Process exited with reason\", pid: pid, reason: Reason)\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Exporter Package for OpenTelemetry JS\nDESCRIPTION: Command to install the Prometheus exporter package as a dependency for a Node.js application using npm.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/exporter-prometheus\n```\n\n----------------------------------------\n\nTITLE: Affected Go Package Imports\nDESCRIPTION: List of OpenTelemetry Go package domains that will be affected by the migration. These packages will continue to work after the migration but may experience brief downtime during the transition.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/go-opentelemetry-io.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\ngo.opentelemetry.io/auto\ngo.opentelemetry.io/build-tools\ngo.opentelemetry.io/collector-contrib\ngo.opentelemetry.io/collector\ngo.opentelemetry.io/contrib\ngo.opentelemetry.io/otel\ngo.opentelemetry.io/proto\n```\n\n----------------------------------------\n\nTITLE: Specifying Security Context for Go Auto-Instrumentation in Kubernetes YAML\nDESCRIPTION: YAML configuration for the security context required by the Go auto-instrumentation sidecar, including privileged mode and root user execution.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nsecurityContext:\n  privileged: true\n  runAsUser: 0\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in Ruby with OpenTelemetry\nDESCRIPTION: Demonstrate how to create nested spans to represent relationships between operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\ndef parent_work\n  MyAppTracer.in_span(\"parent\") do |span|\n    # do some work that the 'parent' span tracks!\n\n    child_work\n\n    # do some more work afterwards\n  end\nend\n\ndef child_work\n  MyAppTracer.in_span(\"child\") do |span|\n    # do some work that the 'child' span tracks!\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Recording Exceptions in Spans with OpenTelemetry C#\nDESCRIPTION: Illustrates how to record exceptions in spans using OpenTelemetry C#. This captures details like stack traces as attributes in the span, typically done together with setting the span status to Error.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nusing var span = tracer.StartActiveSpan(\"SayHello\");\n\ntry\n{\n\t// do something\n}\ncatch (Exception ex)\n{\n    span.SetStatus(new(StatusCode.Error, \"Something bad happened!\"));\n    span.RecordException(ex)\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Meter in JavaScript\nDESCRIPTION: JavaScript version of acquiring a meter from the global meter provider using an instrumentation scope name and version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_50\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\n\nconst myMeter = opentelemetry.metrics.getMeter(\n  'instrumentation-scope-name',\n  'instrumentation-scope-version',\n);\n\n// You can now use a 'meter' to create instruments!\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector\nDESCRIPTION: YAML configuration for the OpenTelemetry Collector that sets up OTLP receivers, debug exporters, and batch processors for trace data collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/distro.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# /tmp/otel-collector-config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n    verbosity: detailed\nprocessors:\n  batch:\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [debug]\n      processors: [batch]\n```\n\n----------------------------------------\n\nTITLE: Complete Factory File Implementation\nDESCRIPTION: Complete implementation of the factory.go file including all necessary imports and configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_16\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/collector/component\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.opentelemetry.io/collector/receiver\"\n)\n\nvar (\n\ttypeStr         = component.MustNewType(\"tailtracer\")\n)\n\nconst (\n\tdefaultInterval = 1 * time.Minute\n)\n\nfunc createDefaultConfig() component.Config {\n\treturn &Config{\n\t\tInterval: string(defaultInterval),\n\t}\n}\n\nfunc createTracesReceiver(_ context.Context, params receiver.Settings, baseCfg component.Config, consumer consumer.Traces) (receiver.Traces, error) {\n\treturn nil, nil\n}\n\n// NewFactory creates a factory for tailtracer receiver.\nfunc NewFactory() receiver.Factory {\n\treturn receiver.NewFactory(\n\t\ttypeStr,\n\t\tcreateDefaultConfig,\n\t\treceiver.WithTraces(createTracesReceiver, component.StabilityLevelAlpha))\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Distributed Tracing Demo Environment\nDESCRIPTION: Shell command to start all services defined in the Docker Compose file, including Jaeger, OpenTelemetry Collector, NGINX, frontend, and backend services.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Starting Aspire Dashboard for OpenTelemetry Visualization\nDESCRIPTION: Docker command to run the Aspire Dashboard container for visualizing OpenTelemetry data collected from generative AI applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-generative-ai/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -d -p 18888:18888 -p 4317:18889 -p 4318:18890 --name aspire-dashboard mcr.microsoft.com/dotnet/aspire-dashboard:9.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Propagators in Elixir\nDESCRIPTION: This code snippet demonstrates how to configure global propagators in an Elixir runtime.exs file using the text_map_propagators configuration option. It sets up both baggage and trace_context propagators.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/propagation.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n## runtime.exs\n...\ntext_map_propagators: [:baggage, :trace_context],\n...\n```\n\n----------------------------------------\n\nTITLE: Custom Attribute Sampler Implementation in Elixir\nDESCRIPTION: Implements a custom sampler that filters spans based on attribute matching in Elixir.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/sampling.md#2025-04-09_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule AttributesSampler do\n  def setup(attributes) when is_map(attributes) do\n    attributes\n  end\n\n  def setup(_) do\n    %{}\n  end\n\n  def description(_) do\n    \"ExampleSampler\"\n  end\n\n  def should_sample(_ctx, _trace_id, _links, _span_name, _span_kind, attributes, config_attributes) do\n    no_match =\n      Enum.into(attributes, %MapSet{})\n      |> MapSet.disjoint?(Enum.into(config_attributes, %MapSet{}))\n\n    if no_match, do: {:record_and_sample, [], []}, else: {:drop, [], []}\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin Thrift Exporter for Python\nDESCRIPTION: Command to install the OpenTelemetry Zipkin JSON/Thrift exporter package as a dependency for your Python project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-exporter-zipkin-json\n```\n\n----------------------------------------\n\nTITLE: Manual Context Propagation in TypeScript (Sending Service)\nDESCRIPTION: TypeScript implementation for manually propagating OpenTelemetry context from a sending service by injecting trace information into a carrier object.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// Sending service\nimport { context, propagation, trace } from '@opentelemetry/api';\n\n// Define an interface for the output object that will hold the trace information.\ninterface Carrier {\n  traceparent?: string;\n  tracestate?: string;\n}\n\n// Create an output object that conforms to that interface.\nconst output: Carrier = {};\n\n// Serialize the traceparent and tracestate from context into\n// an output object.\n//\n// This example uses the active trace context, but you can\n// use whatever context is appropriate to your scenario.\npropagation.inject(context.active(), output);\n\n// Extract the traceparent and tracestate values from the output object.\nconst { traceparent, tracestate } = output;\n\n// You can then pass the traceparent and tracestate\n// data to whatever mechanism you use to propagate\n// across services.\n```\n\n----------------------------------------\n\nTITLE: Creating a New Span with OpenTelemetry in Python\nDESCRIPTION: Shows how to create and activate a new span within a with block, which automatically ends the span when the block completes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nwith tracer.start_as_current_span(\"get_product_list\") as span:\n```\n\n----------------------------------------\n\nTITLE: Adding SignPostIntegration as a Span Processor in Swift\nDESCRIPTION: This snippet demonstrates how to add SignPostIntegration as a Span Processor to the OpenTelemetry TracerProvider. This integration creates os_signpost begin and end calls when spans are started or ended, allowing for automatic integration with profiling apps like Instruments.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/libraries.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\nOpenTelemetry.instance.tracerProvider.addSpanProcessor(SignPostIntegration())\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Dependency in Gradle\nDESCRIPTION: Groovy configuration for adding an OpenTelemetry package dependency in a Gradle build.gradle file. Uses template variables for package name and version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/ecosystem/registry/quickinstall/maven.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n implementation '{{ index (split .name \"/\") 0 }}:{{ index (split .name \"/\") 1 }}:{{ .version }}'\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Service Extensions in OpenTelemetry Collector YAML\nDESCRIPTION: This snippet demonstrates how to enable extensions in the service section of the OpenTelemetry Collector configuration. It shows how to list the desired extensions to be enabled.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  extensions: [health_check, pprof, zpages]\n```\n\n----------------------------------------\n\nTITLE: Custom Collector Manifest with Jaeger Exporters\nDESCRIPTION: Manifest configuration for building a custom collector that includes both Jaeger and Jaeger Thrift HTTP exporters at version 0.85.0.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jaeger-exporter-collector-migration.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  - gomod: go.opentelemetry.io/collector/exporter/jaegerexporter v0.85.0\n  - gomod:\n      go.opentelemetry.io/collector/exporter/jaegerthrifthttpexporter v0.85.0\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for Go SDK Documentation\nDESCRIPTION: YAML configuration block defining metadata for the Go SDK documentation page, including title, description, navigation aliases, and weight for sorting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Go\ndescription: >\n  <img width=\"35\" class=\"img-initial\" src=\"/img/logos/32x32/Golang_SDK.svg\"\n  alt=\"Go\"> A language-specific implementation of OpenTelemetry in Go.\naliases: [/golang, /golang/metrics, /golang/tracing]\nweight: 16\n---\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger for OpenTelemetry Trace Visualization\nDESCRIPTION: Docker command to start the Jaeger all-in-one container for collecting and visualizing OpenTelemetry traces from generative AI applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-generative-ai/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -it -d -p 16686:16686 -p 4317:4317 -p 4318:4318 --name jaeger jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Istio Telemetry API for OpenTelemetry Tracing\nDESCRIPTION: Applying Istio's Telemetry API configuration to enable the OpenTelemetry tracer with 100% sampling rate for all service mesh traffic.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/new-otel-features-envoy-istio/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: telemetry.istio.io/v1alpha1\nkind: Telemetry\nmetadata:\n  name: otel-demo\nspec:\n  tracing:\n  - providers:\n    - name: otel-tracing\n    randomSamplingPercentage: 100\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Front Matter for Java Zero-Code Instrumentation Documentation\nDESCRIPTION: This YAML front matter block sets up metadata for the Java zero-code instrumentation documentation page. It includes the title, link title, aliases for redirects, and version information for instrumentation and OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Java zero-code instrumentation\nlinkTitle: Java\naliases:\n  - /docs/java/automatic_instrumentation\n  - /docs/languages/java/automatic_instrumentation\ncascade:\n  vers:\n    instrumentation: 2.14.0\n    otel: 1.49.0\n---\n```\n\n----------------------------------------\n\nTITLE: Spring ConfigProperties Implementation\nDESCRIPTION: Implementation details showing how the Spring Boot starter handles configuration properties, particularly for lists and maps in the Spring Environment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@ConfigurationProperties\nclass SpringConfigProperties {\n    // List handling\n    List<String> getList() {\n        // implementation\n    }\n    \n    // Map handling\n    Map<String, String> getMap() {\n        // implementation\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in Erlang/Elixir\nDESCRIPTION: Demonstrates how to create nested spans with parent-child relationships.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: erlang\nCODE:\n```\nparent_function() ->\n    ?with_span(parent, #{}, fun child_function/0).\n\nchild_function() ->\n    %% this is the same process, so the span parent set as the active\n    %% span in the with_span call above will be the active span in this function\n    ?with_span(child, #{},\n               fun() ->\n                   %% do work here. when this function returns, child will complete.\n               end).\n```\n\nLANGUAGE: elixir\nCODE:\n```\nrequire OpenTelemetry.Tracer\n\ndef parent_function() do\n    OpenTelemetry.Tracer.with_span :parent do\n        child_function()\n    end\nend\n\ndef child_function() do\n    # this is the same process, so the span :parent set as the active\n    # span in the with_span call above will be the active span in this function\n    OpenTelemetry.Tracer.with_span :child do\n        ## do work here. when this function returns, :child will complete.\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Temporality Preference Environment Variable\nDESCRIPTION: Shell command to configure the OTEL_EXPORTER_METRICS_TEMPORALITY_PREFERENCE environment variable to DELTA, which affects how different metric instruments handle cumulative vs. delta reporting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_EXPORTER_METRICS_TEMPORALITY_PREFERENCE=\"DELTA\"\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Logs Discovery for Kubernetes Pods\nDESCRIPTION: YAML annotation that enables log collection for a Kubernetes pod. This annotation allows the OpenTelemetry Collector to automatically discover and collect logs from the annotated pod.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/otel-collector-k8s-discovery.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nio.opentelemetry.discovery.logs/enabled: 'true'\n```\n\n----------------------------------------\n\nTITLE: Checking OpenTelemetry Operator Logs in Kubernetes\nDESCRIPTION: This command retrieves and follows the logs of the OpenTelemetry Operator manager container, filtering for any auto-instrumentation related errors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nkubectl logs -l app.kubernetes.io/name=opentelemetry-operator --container manager -n opentelemetry-operator-system --follow\n```\n\n----------------------------------------\n\nTITLE: Spring Boot Configuration Property Example\nDESCRIPTION: Example of configuring OpenTelemetry resource attributes in Spring Boot configuration files, showing both environment variable and configuration file approaches.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\notel.resource.attributes=service.name=my-service,service.version=1.0.0\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Auto-instrumented Spans in Go\nDESCRIPTION: This code shows how to add custom attributes to an auto-instrumented span in Go using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nspan := trace.SpanFromContext(ctx)\nspan.SetAttributes(\n    attribute.String(\"app.order.id\", orderID.String()), shippingTrackingAttribute,\n    attribute.Float64(\"app.shipping.amount\", shippingCostFloat),\n    attribute.Float64(\"app.order.amount\", totalPriceFloat),\n    attribute.Int(\"app.order.items.count\", len(prep.orderItems)),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating ActivitySource for Custom Traces in C#\nDESCRIPTION: Initializes an ActivitySource instance for creating custom traces. The source name is used for registration with OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/custom.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprivate static readonly ActivitySource RegisteredActivity = new ActivitySource(\"Examples.ManualInstrumentations.Registered\");\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry packages\nDESCRIPTION: Installs the OpenTelemetry distribution package which includes API, SDK, and instrumentation tools.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-distro\n```\n\n----------------------------------------\n\nTITLE: Rendering Benchmark Charts with Chart.js in JavaScript\nDESCRIPTION: Implements functions to render benchmark charts using Chart.js library, including graph creation, data formatting, and interactive features.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/benchmarks.md#2025-04-09_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction renderAllChars(dataSets) {\n\n  function renderGraph(parent, name, dataset) {\n    const chartTitle = document.createElement('h3');\n    chartTitle.textContent = name;\n    parent.append(chartTitle);\n\n    const canvas = document.createElement('canvas');\n    canvas.className = 'benchmark-chart';\n    parent.appendChild(canvas);\n\n    const color = COLORS[0];\n    const data = {\n      labels: dataset.map(d => d.commit.id.slice(0, 7)),\n      datasets: [\n        {\n          label: name,\n          data: dataset.map(d => d.bench.value),\n          borderColor: color,\n          backgroundColor: color + '60', // Add alpha for #rrggbbaa,\n          fill: false\n        }\n      ],\n    };\n    const options = {\n      scales: {\n        xAxes: [\n          {\n            scaleLabel: {\n              display: true,\n              labelString: 'commit',\n            },\n          }\n        ],\n        yAxes: [\n          {\n            scaleLabel: {\n              display: true,\n              labelString: dataset.length > 0 ? dataset[0].bench.unit : '',\n            },\n            ticks: {\n              beginAtZero: true,\n            }\n          }\n        ],\n      },\n      tooltips: {\n        callbacks: {\n          afterTitle: items => {\n            const {index} = items[0];\n            const data = dataset[index];\n            return '\\n' + data.commit.message + '\\n\\n' + data.commit.timestamp + ' committed by @' + data.commit.committer.username + '\\n';\n          },\n          label: item => {\n            let label = item.value;\n            const { range, unit } = dataset[item.index].bench;\n            label += ' ' + unit;\n            if (range) {\n              label += ' (' + range + ')';\n            }\n            return label;\n          },\n          afterLabel: item => {\n            const { extra } = dataset[item.index].bench;\n            return extra ? '\\n' + extra : '';\n          }\n        }\n      },\n      onClick: (_mouseEvent, activeElems) => {\n        if (activeElems.length === 0) {\n          return;\n        }\n        // XXX: Undocumented. How can we know the index?\n        const index = activeElems[0]._index;\n        const url = dataset[index].commit.url;\n        window.open(url, '_blank');\n      },\n    };\n\n    new Chart(canvas, {\n      type: 'line',\n      data,\n      options,\n    });\n  }\n\n  function renderBenchSet(name, benchSet, main) {\n    const setElem = document.createElement('div');\n    setElem.className = 'benchmark-set';\n    main.appendChild(setElem);\n\n    const graphsElem = document.createElement('div');\n    graphsElem.className = 'benchmark-graphs';\n    setElem.appendChild(graphsElem);\n\n    for (const [benchName, benches] of benchSet.entries()) {\n      renderGraph(graphsElem, benchName, benches)\n    }\n  }\n\n  const main = document.getElementById('main');\n  for (const {name, dataSet} of dataSets) {\n    renderBenchSet(name, dataSet, main);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans\nDESCRIPTION: Demonstrates how to create parent-child relationships between spans using nested scopes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: cpp\nCODE:\n```\nauto outer_span = tracer->StartSpan(\"Outer operation\");\nauto outer_scope = tracer->WithActiveSpan(outer_span);\n{\n    auto inner_span = tracer->StartSpan(\"Inner operation\");\n    auto inner_scope = tracer->WithActiveSpan(inner_span);\n    // ... perform inner operation\n    inner_span->End();\n}\n// ... perform outer operation\nouter_span->End();\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Span\nDESCRIPTION: C# code demonstrating how to create a basic span using a tracer. This is the fundamental building block for tracing operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing var span = MyTracer.StartActiveSpan(\"SayHello\");\n\n// do work that 'span' will now track\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Gauge in OpenTelemetry Java\nDESCRIPTION: Demonstrates how to use ObservableDoubleGauge to track the current value of a metric where spatial re-aggregation doesn't make sense. The example shows how to set up a gauge with callbacks and record measurements with various attribute configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.api.metrics.ObservableDoubleGauge;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class AsyncGaugeUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void asyncGaugeUsage(Meter meter) {\n    AtomicReference<Double> processingLineTemp = new AtomicReference<>(273.0);\n\n    // Construct an async counter to observe an existing counter in a callback\n    ObservableDoubleGauge asyncGauge =\n        meter\n            .gaugeBuilder(\"fully.qualified.gauge\")\n            .setDescription(\"The current temperature of the widget processing line\")\n            .setUnit(\"K\")\n            // Uncomment to optionally change the type to long\n            // .ofLongs()\n            .buildWithCallback(\n                // the callback is invoked when a MetricReader reads metrics\n                observableMeasurement -> {\n                  double currentWidgetCount = processingLineTemp.get();\n\n                  // Record a measurement with no attributes.\n                  // Attributes defaults to Attributes.empty().\n                  observableMeasurement.record(currentWidgetCount);\n\n                  // Record a measurement with attributes, using pre-allocated attributes whenever\n                  // possible.\n                  observableMeasurement.record(currentWidgetCount, WIDGET_RED_CIRCLE);\n                  // Sometimes, attributes must be computed using application context.\n                  observableMeasurement.record(\n                      currentWidgetCount,\n                      Attributes.of(\n                          WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n                });\n\n    // Optionally close the gauge to unregister the callback when required\n    asyncGauge.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Static Load Balancing\nDESCRIPTION: YAML configuration for a first-tier OpenTelemetry collector that uses the load-balancing exporter with static resolver. It routes incoming OTLP data to a statically defined list of downstream collectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/gateway/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nexporters:\n  loadbalancing:\n    protocol:\n      otlp:\n        tls:\n          insecure: true\n    resolver:\n      static:\n        hostnames:\n          - collector-1.example.com:4317\n          - collector-2.example.com:5317\n          - collector-3.example.com\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [loadbalancing]\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Gauge in OpenTelemetry Java\nDESCRIPTION: Demonstrates how to use ObservableDoubleGauge to track the current value of a metric where spatial re-aggregation doesn't make sense. The example shows how to set up a gauge with callbacks and record measurements with various attribute configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.api.metrics.ObservableDoubleGauge;\nimport java.util.concurrent.atomic.AtomicReference;\n\npublic class AsyncGaugeUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void asyncGaugeUsage(Meter meter) {\n    AtomicReference<Double> processingLineTemp = new AtomicReference<>(273.0);\n\n    // Construct an async counter to observe an existing counter in a callback\n    ObservableDoubleGauge asyncGauge =\n        meter\n            .gaugeBuilder(\"fully.qualified.gauge\")\n            .setDescription(\"The current temperature of the widget processing line\")\n            .setUnit(\"K\")\n            // Uncomment to optionally change the type to long\n            // .ofLongs()\n            .buildWithCallback(\n                // the callback is invoked when a MetricReader reads metrics\n                observableMeasurement -> {\n                  double currentWidgetCount = processingLineTemp.get();\n\n                  // Record a measurement with no attributes.\n                  // Attributes defaults to Attributes.empty().\n                  observableMeasurement.record(currentWidgetCount);\n\n                  // Record a measurement with attributes, using pre-allocated attributes whenever\n                  // possible.\n                  observableMeasurement.record(currentWidgetCount, WIDGET_RED_CIRCLE);\n                  // Sometimes, attributes must be computed using application context.\n                  observableMeasurement.record(\n                      currentWidgetCount,\n                      Attributes.of(\n                          WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n                });\n\n    // Optionally close the gauge to unregister the callback when required\n    asyncGauge.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Static Load Balancing\nDESCRIPTION: YAML configuration for a first-tier OpenTelemetry collector that uses the load-balancing exporter with static resolver. It routes incoming OTLP data to a statically defined list of downstream collectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/gateway/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nexporters:\n  loadbalancing:\n    protocol:\n      otlp:\n        tls:\n          insecure: true\n    resolver:\n      static:\n        hostnames:\n          - collector-1.example.com:4317\n          - collector-2.example.com:5317\n          - collector-3.example.com\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [loadbalancing]\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Context Propagation in JavaScript\nDESCRIPTION: JavaScript implementation of a client application that uses OpenTelemetry to automatically propagate context when making HTTP requests with Undici.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { NodeSDK } = require('@opentelemetry/sdk-node');\nconst {\n  SimpleSpanProcessor,\n  ConsoleSpanExporter,\n} = require('@opentelemetry/sdk-trace-node');\nconst {\n  UndiciInstrumentation,\n} = require('@opentelemetry/instrumentation-undici');\n\nconst sdk = new NodeSDK({\n  spanProcessors: [new SimpleSpanProcessor(new ConsoleSpanExporter())],\n  instrumentations: [new UndiciInstrumentation()],\n});\nsdk.start();\n\nconst { request } = require('undici');\n\nrequest('http://localhost:8080/rolldice').then((response) => {\n  response.body.json().then((json) => console.log(json));\n});\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Environment Configuration\nDESCRIPTION: Example of setting up OpenTelemetry configuration using environment variables for SDK autoloading and OTLP exporter configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/sdk.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_PHP_AUTOLOAD_ENABLED=true \\\nOTEL_EXPORTER_OTLP_PROTOCOL=grpc \\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317 \\\nphp example.php\n```\n\n----------------------------------------\n\nTITLE: Setting Span Attributes in PHP with OpenTelemetry\nDESCRIPTION: Shows how to set attributes on a span in PHP using OpenTelemetry. It includes activating a parent span, creating a child span, setting an attribute, and properly detaching the scope.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nprivate function rollOnce() {\n    $parent = OpenTelemetry\\API\\Trace\\Span::getCurrent();\n    $scope = $parent->activate();\n    try {\n        $span = $this->tracer->spanBuilder(\"rollTheDice\")->startSpan();\n        $result = random_int(1, 6);\n        $span->setAttribute('dicelib.rolled', $result);\n        $span->end();\n    } finally {\n        $scope->detach();\n    }\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Counter Instruments in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to use a Counter instrument within application logic to track work items being processed, with attributes for categorization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ndef do_work(work_item):\n    # count the work being doing\n    work_counter.add(1, {\"work.type\": work_item.work_type})\n    print(\"doing some work...\")\n```\n\n----------------------------------------\n\nTITLE: Prometheus CPU Usage Query\nDESCRIPTION: PromQL query to calculate average CPU usage percentage\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/scaling-collectors.md#2025-04-09_snippet_6\n\nLANGUAGE: promql\nCODE:\n```\n100 - (avg by (cpu) (irate(system_cpu_time{state=\"idle\"}[5m])) * 100)\n```\n\n----------------------------------------\n\nTITLE: Generating Adopters Table using Hugo Templating\nDESCRIPTION: This Hugo template creates a markdown table of OpenTelemetry adopters. It sorts the data by organization name, lists the components used by each adopter, and provides a link for more information if available. The table includes a footnote explaining the alphabetical listing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/adopters-table.md#2025-04-09_snippet_0\n\nLANGUAGE: Hugo\nCODE:\n```\n{{ $data := sort $.Site.Data.ecosystem.adopters \"name\" }}\nOrganization[^1] | Components |  Learn more\n------------ | ---------- |  ----------\n{{- range $data }}\n{{ .name }} | {{ delimit (sort .components) \", \" }} | {{ if .reference }} [{{ .referenceTitle }}]({{ .reference }}) {{ end }}\n{{- end }}\n\n[^1]: Organizations are listed alphabetically\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing New Spans in Java\nDESCRIPTION: Demonstrates how to create a new span, set it into context, perform an operation, and end the span in the getRandomAds function.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/ad.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n// create and start a new span manually\nTracer tracer = GlobalOpenTelemetry.getTracer(\"ad\");\nSpan span = tracer.spanBuilder(\"getRandomAds\").startSpan();\n\n// put the span into context, so if any child span is started the parent will be set properly\ntry (Scope ignored = span.makeCurrent()) {\n\n  Collection<Ad> allAds = adsMap.values();\n  for (int i = 0; i < MAX_ADS_TO_SERVE; i++) {\n    ads.add(Iterables.get(allAds, random.nextInt(allAds.size())));\n  }\n  span.setAttribute(\"app.ads.count\", ads.size());\n\n} finally {\n  span.end();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Context in PHP\nDESCRIPTION: Shows how to get the current active context using OpenTelemetry's Context API. If no context is active, the root context (empty context object) is returned.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/context.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nuse OpenTelemetry\\Context\\Context;\n\n// Returns the active context\n// If no context is active, the root context is returned\n$context = Context::getCurrent();\n```\n\n----------------------------------------\n\nTITLE: Configuring Blog Front Matter in YAML\nDESCRIPTION: YAML front matter that configures the OpenTelemetry blog section. It sets the page title, defines the menu position with a weight of 50, specifies HTML and RSS output formats, and includes a default language commit reference.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/blog/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Blog\nmenu: { main: { weight: 50 } }\noutputs: [HTML, RSS]\ndefault_lang_commit: c0a5eea5d720b0e075efa87f99dcf58c89106268\n---\n```\n\n----------------------------------------\n\nTITLE: Uninstrumenting HTTPX Clients in OpenTelemetry\nDESCRIPTION: Python code showing how to remove instrumentation from either a specific HTTPX client or all HTTPX clients when tracing is no longer needed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/libraries.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom opentelemetry.instrumentation.httpx import HTTPXClientInstrumentor\n\nHTTPXClientInstrumentor().instrument()\nclient = httpx.Client()\n\n# Uninstrument a specific client\nHTTPXClientInstrumentor.uninstrument_client(client)\n\n# Uninstrument all clients\nHTTPXClientInstrumentor().uninstrument()\n```\n\n----------------------------------------\n\nTITLE: Creating Contributing Guidelines Link in Hugo Template\nDESCRIPTION: Renders a sentence with a link to the contribution guidelines using translated strings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_6\n\nLANGUAGE: HTML with Hugo Template\nCODE:\n```\n{{ T \"community_how_to\" . }} <a href=\"/docs/contributing/\">{{ T \"community_guideline\" }}</a>.\n```\n\n----------------------------------------\n\nTITLE: Blog Post Frontmatter in Markdown\nDESCRIPTION: YAML frontmatter metadata for a blog post, including title, link title, date and canonical URL pointing to the Medium article.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2021/womens-day.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: OpenTelemetry Observes International Women's Day 2021 (Medium)\nlinkTitle: Women's day 2021\ndate: 2021-03-08\ncanonical_url: https://medium.com/opentelemetry/opentelemetry-observes-international-womens-day-2021-4493a157f119\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Span Events in Ruby with OpenTelemetry\nDESCRIPTION: Add events to spans to represent significant occurrences during span lifetime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\nspan = OpenTelemetry::Trace.current_span\n\nspan.add_event(\"Acquiring lock\")\nif mutex.try_lock\n  span.add_event(\"Got lock, doing work...\")\n  # some code here\n  span.add_event(\"Releasing lock\")\nelse\n  span.add_event(\"Lock already in use\")\nend\n\nspan.add_event(\"Cancelled wait due to external signal\", attributes: {\n  \"pid\" => 4328,\n  \"signal\" => \"SIGHUP\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Exemplars for Cart Service Metrics\nDESCRIPTION: Sets up ActivitySource, Meter, and Histograms for tracking latency of AddItem and GetCart methods, with custom bucket boundaries for microsecond results.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/cart/index.md#2025-04-09_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprivate static readonly ActivitySource CartActivitySource = new(\"OpenTelemetry.Demo.Cart\");\nprivate static readonly Meter CartMeter = new Meter(\"OpenTelemetry.Demo.Cart\");\nprivate static readonly Histogram<long> addItemHistogram = CartMeter.CreateHistogram<long>(\n    \"app.cart.add_item.latency\",\n    advice: new InstrumentAdvice<long>\n    {\n        HistogramBucketBoundaries = [ 500000, 600000, 700000, 800000, 900000, 1000000, 1100000 ]\n    });\nprivate static readonly Histogram<long> getCartHistogram = CartMeter.CreateHistogram<long>(\n    \"app.cart.get_cart.latency\",\n    advice: new InstrumentAdvice<long>\n    {\n        HistogramBucketBoundaries = [ 300000, 400000, 500000, 600000, 700000, 800000, 900000 ]\n    });\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Receiver with Explicit Endpoint in YAML\nDESCRIPTION: Updated OTLP receiver configuration with an explicit endpoint setting to maintain previous behavior after the change to localhost binding.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/hardening-the-collector-one.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: ${env:HOST_IP}:4317\n```\n\n----------------------------------------\n\nTITLE: Creating Dice Rolling Library in JavaScript\nDESCRIPTION: JavaScript version of the dice rolling library, exporting a function to roll dice multiple times between a min and max value.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/*dice.js*/\nfunction rollOnce(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction rollTheDice(rolls, min, max) {\n  const result = [];\n  for (let i = 0; i < rolls; i++) {\n    result.push(rollOnce(min, max));\n  }\n  return result;\n}\n\nmodule.exports = { rollTheDice };\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus HttpListener Exporter\nDESCRIPTION: Configure the Prometheus HttpListener exporter for metrics in a non-ASP.NET Core application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar meterProvider = Sdk.CreateMeterProviderBuilder()\n    .AddMeter(MyMeter.Name)\n    .AddPrometheusHttpListener(\n        options => options.UriPrefixes = new string[] { \"http://localhost:9464/\" })\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Creating and Tagging an Activity for Custom Traces in C#\nDESCRIPTION: Demonstrates how to create an Activity (representing a trace) and set tags on it. The using statement ensures proper disposal of the activity.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/custom.md#2025-04-09_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing (var activity = RegisteredActivity.StartActivity(\"Main\"))\n{\n   activity?.SetTag(\"foo\", \"bar1\");\n   // your logic for Main activity\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Histogram Metric\nDESCRIPTION: Shows how to create and use a histogram instrument for recording distributions of measurements.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: cpp\nCODE:\n```\nauto meter = provider->GetMeter(name, \"1.2.0\");\nauto histogram_counter = meter->CreateDoubleHistogram(\"histogram_name\");\nhistogram_counter->Record(val, labelkv);\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry instrumentation\nDESCRIPTION: Runs the OpenTelemetry bootstrap command to install Flask instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nopentelemetry-bootstrap -a install\n```\n\n----------------------------------------\n\nTITLE: Configuring Logs Collection with OTLP Exporter\nDESCRIPTION: YAML configuration to enable logs collection, including collector logs, and use an OTLP HTTP exporter instead of the default debug exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nmode: daemonset\n\npresets:\n  logsCollection:\n    enabled: true\n    includeCollectorLogs: true\n\nconfig:\n  exporters:\n    otlphttp:\n      endpoint: https://example.com:55681\n  service:\n    pipelines:\n      logs:\n        exporters:\n          - otlphttp\n```\n\n----------------------------------------\n\nTITLE: Adding Span Attribute to Dice Roll Function in Elixir\nDESCRIPTION: This snippet enhances the OpenTelemetry instrumentation by adding an attribute to the span. It captures the result of the dice roll and sets it as an attribute named 'roll' on the span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_8\n\nLANGUAGE: elixir\nCODE:\n```\ndefp roll_dice do\n  Tracer.with_span(\"dice_roll\") do\n    roll = Enum.random(1..6)\n\n    Tracer.set_attribute(:roll, roll)\n\n    to_string(roll)\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Load Balancing Exporter Configuration for OpenTelemetry Collector\nDESCRIPTION: YAML configuration for setting up a load balancing exporter in OpenTelemetry Collector using DNS resolution for backend discovery. Used for scaling stateful collectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/scaling.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nprocessors:\n\nexporters:\n  loadbalancing:\n    protocol:\n      otlp:\n    resolver:\n      dns:\n        hostname: otelcol.observability.svc.cluster.local\n\nservice:\n  pipelines:\n    traces:\n      receivers:\n        - otlp\n      processors: []\n      exporters:\n        - loadbalancing\n```\n\n----------------------------------------\n\nTITLE: Complete Receiver Implementation\nDESCRIPTION: Final implementation of the trace receiver with context and host management.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_19\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/collector/component\"\n)\n\ntype tailtracerReceiver struct {\n\thost   component.Host\n\tcancel context.CancelFunc\n}\n\nfunc (tailtracerRcvr *tailtracerReceiver) Start(ctx context.Context, host component.Host) error {\n    tailtracerRcvr.host = host\n    ctx = context.Background()\n\tctx, tailtracerRcvr.cancel = context.WithCancel(ctx)\n\n\treturn nil\n}\n\nfunc (tailtracerRcvr *tailtracerReceiver) Shutdown(ctx context.Context) error {\n\tif tailtracerRcvr.cancel != nil {\n\t\ttailtracerRcvr.cancel()\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific Instrumentation in OpenTelemetry Java Agent\nDESCRIPTION: Use the 'otel.instrumentation.[name].enabled' configuration option to enable specific instrumentations individually in the OpenTelemetry Java agent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/disable.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\notel.instrumentation.[name].enabled=true\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Content with Link to Original Medium Post\nDESCRIPTION: Markdown template for the blog post content that references the original Medium post. It includes placeholder text for an introductory sentence and creates a link to the original post using the canonical URL defined in the front matter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/archetypes/medium.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTODO: INTRO SENTENCE GOES HERE. For all the details, see the [original post][].\n\n[original post]: {{% param canonical_url %}}\n```\n\n----------------------------------------\n\nTITLE: Creating Activities with Links in C#\nDESCRIPTION: Example of creating activities with links to other related spans for batch operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar links = new List<ActivityLink>\n{\n    new ActivityLink(activityContext1),\n    new ActivityLink(activityContext2),\n    new ActivityLink(activityContext3)\n};\n\nvar activity = MyActivitySource.StartActivity(\n    ActivityKind.Internal,\n    name: \"activity-with-links\",\n    links: links);\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Attributes via Environment Variables in PHP\nDESCRIPTION: Example of setting custom resource attributes using OTEL_RESOURCE_ATTRIBUTES environment variable.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/resources.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_RESOURCE_ATTRIBUTES=\"service.name=my_service,service.namespace=demo,service.version=1.0,deployment.environment=development\" \\\nphp example.php\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurablePropagatorProvider in Java\nDESCRIPTION: Example implementation of ConfigurablePropagatorProvider interface to create a custom propagator that can participate in autoconfiguration. The propagator is created when OTEL_PROPAGATORS includes the value from getName().\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.context.propagation.TextMapPropagator;\nimport io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;\nimport io.opentelemetry.sdk.autoconfigure.spi.ConfigurablePropagatorProvider;\n\npublic class CustomTextMapPropagatorProvider implements ConfigurablePropagatorProvider {\n  @Override\n  public TextMapPropagator getPropagator(ConfigProperties config) {\n    // Callback invoked when OTEL_PROPAGATORS includes the value from getName().\n    return new CustomTextMapPropagator();\n  }\n\n  @Override\n  public String getName() {\n    return \"custom-propagator\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Async UpDownCounter Implementation in OpenTelemetry Java\nDESCRIPTION: Shows implementation of an ObservableLongUpDownCounter for asynchronous measurement recording. Includes callback registration for observing values and handling attributes in the callback.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.api.metrics.ObservableLongUpDownCounter;\nimport java.util.concurrent.atomic.AtomicLong;\n\npublic class AsyncUpDownCounterUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void asyncUpDownCounterUsage(Meter meter) {\n    AtomicLong queueLength = new AtomicLong();\n\n    // Construct an async updowncounter to observe an existing up down counter in a callback\n    ObservableLongUpDownCounter asyncUpDownCounter =\n        meter\n            .upDownCounterBuilder(\"fully.qualified.updowncounter\")\n            .setDescription(\"Current length of widget processing queue\")\n            .setUnit(\"{widget}\")\n            // Uncomment to optionally change the type to double\n            // .ofDoubles()\n            .buildWithCallback(\n                // the callback is invoked when a MetricReader reads metrics\n                observableMeasurement -> {\n                  long currentWidgetCount = queueLength.get();\n\n                  // Record a measurement with no attributes.\n                  // Attributes defaults to Attributes.empty().\n                  observableMeasurement.record(currentWidgetCount);\n\n                  // Record a measurement with attributes, using pre-allocated attributes whenever\n                  // possible.\n                  observableMeasurement.record(currentWidgetCount, WIDGET_RED_CIRCLE);\n                  // Sometimes, attributes must be computed using application context.\n                  observableMeasurement.record(\n                      currentWidgetCount,\n                      Attributes.of(\n                          WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n                });\n\n    // Optionally close the counter to unregister the callback when required\n    asyncUpDownCounter.close();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger as an OTLP Endpoint with Docker\nDESCRIPTION: Shell command to run Jaeger in a Docker container as an OTLP endpoint for trace visualization. The command enables OTLP collection and exposes ports 16686 for the UI, 4317 for gRPC, and 4318 for HTTP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger as an OTLP Endpoint with Docker\nDESCRIPTION: Shell command to run Jaeger in a Docker container as an OTLP endpoint for trace visualization. The command enables OTLP collection and exposes ports 16686 for the UI, 4317 for gRPC, and 4318 for HTTP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in OpenTelemetry Swift\nDESCRIPTION: This code demonstrates how to set the status of a span to indicate error conditions. It uses a defer block to ensure the span is ended properly regardless of execution path.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: swift\nCODE:\n```\nfunc myFunction() {\n  let span = someTracer.spanBuilder(spanName: \"my span\").startSpan()\n  defer {\n    span.end()\n  }\n  guard let criticalData = get() else {\n      span.status = .error(description: \"something bad happened\")\n      return\n  }\n  // do something\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Propagators for Ruby OpenTelemetry\nDESCRIPTION: Set up context propagators for distributed tracing using environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nexport OTEL_PROPAGATORS=tracecontext,baggage,b3\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenTelemetry Java Agent\nDESCRIPTION: Set the 'otel.javaagent.enabled' configuration option to false to disable the OpenTelemetry Java agent entirely.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/disable.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\notel.javaagent.enabled=false\n```\n\n----------------------------------------\n\nTITLE: Setting Error Status on OpenTelemetry Spans in Go\nDESCRIPTION: Sets the span status to Error when an error condition is encountered, along with an appropriate error message.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nmsg := fmt.Sprintf(\"Error: ProductCatalogService Fail Feature Flag Enabled\")\nspan.SetStatus(otelcodes.Error, msg)\n```\n\n----------------------------------------\n\nTITLE: Recording Method Latency for Exemplars\nDESCRIPTION: Demonstrates how to record method latency using a Stopwatch and the configured Histogram for exemplars.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/cart/index.md#2025-04-09_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar stopwatch = Stopwatch.StartNew();\n\n(method logic)\n\naddItemHistogram.Record(stopwatch.ElapsedTicks);\n```\n\n----------------------------------------\n\nTITLE: Building OpenTelemetry C++ with Zipkin Support\nDESCRIPTION: This shell command demonstrates how to build OpenTelemetry C++ from source with Zipkin support enabled using CMake.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncmake -DWITH_ZIPKIN=ON ...\n```\n\n----------------------------------------\n\nTITLE: Getting Current Span and Adding Attributes in Ruby\nDESCRIPTION: Retrieve the current span and add attributes to it using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\ndef track_extended_warranty(extended_warranty)\n  # Get the current span\n  current_span = OpenTelemetry::Trace.current_span\n\n  # And add useful stuff to it!\n  current_span.add_attributes({\n    \"com.extended_warranty.id\" => extended_warranty.id,\n    \"com.extended_warranty.timestamp\" => extended_warranty.timestamp\n  })\nend\n```\n\n----------------------------------------\n\nTITLE: Creating a k3d Cluster with OpenTelemetry Tracing\nDESCRIPTION: Bash command to create a k3d cluster with OpenTelemetry tracing enabled. It mounts the configuration files and sets the necessary arguments for kube-apiserver and kubelet.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/k8s-runtime-observability/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nk3d cluster create tracingcluster \\\n  --image=rancher/k3s:v1.27.1-k3s1 \\\n  --volume '[CURRENT_PATH]/config.toml.tmpl:/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl@server:*' \\\n  --volume '[CURRENT_PATH]/config:/etc/kube-tracing@server:*' \\\n  --k3s-arg '--kube-apiserver-arg=tracing-config-file=/etc/kube-tracing/apiserver-tracing.yaml@server:*' \\\n  --k3s-arg '--kube-apiserver-arg=feature-gates=APIServerTracing=true@server:*' \\\n  --k3s-arg '--kubelet-arg=config=/etc/kube-tracing/kubelet-tracing.yaml@server:*'\n```\n\n----------------------------------------\n\nTITLE: Creating a Meter Instance for Custom Metrics in C#\nDESCRIPTION: Initializes a Meter instance for creating custom metrics. The meter name and version are specified.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/custom.md#2025-04-09_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing var meter = new Meter(\"Examples.Service\", \"1.0\");\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in Java\nDESCRIPTION: Shows how to set the span status to ERROR when an exception is caught in the getAds function.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/ad.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nspan.setStatus(StatusCode.ERROR);\n```\n\n----------------------------------------\n\nTITLE: Adding Golang Runtime Auto-instrumentation\nDESCRIPTION: This code snippet shows how to add auto-instrumentation for Golang runtime metrics using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nerr := runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Building the OpenTelemetry C++ Server\nDESCRIPTION: Commands for building the C++ server project using CMake build system.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncd build\ncmake ..\ncmake --build .\n```\n\n----------------------------------------\n\nTITLE: Serving OpenTelemetry Documentation Locally with Hugo\nDESCRIPTION: Command to build and serve the OpenTelemetry.io website locally using Hugo. This allows contributors to preview their changes before submitting a pull request, helping catch build errors or formatting issues.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Propagation\nDESCRIPTION: Example showing how to configure trace context propagation using the W3C TraceContext format.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"go.opentelemetry.io/otel\"\n  \"go.opentelemetry.io/otel/propagation\"\n)\n...\notel.SetTextMapPropagator(propagation.TraceContext{})\n```\n\n----------------------------------------\n\nTITLE: Sample OpenTelemetry Span Output\nDESCRIPTION: Example JSON output showing the format of an OpenTelemetry span emitted by the server.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\" : \"RollDiceServer\",\n  \"trace_id\": \"f47bea385dc55e4d17470d51f9d3130b\",\n  \"span_id\": \"deed994b51f970fa\",\n  \"tracestate\" : ,\n  \"parent_span_id\": \"0000000000000000\",\n  \"start\": 1698991818716461000,\n  \"duration\": 64697,\n  \"span kind\": \"Internal\",\n  \"status\": \"Unset\",\n  \"service.name\": \"unknown_service\",\n  \"telemetry.sdk.language\": \"cpp\",\n  \"telemetry.sdk.name\": \"opentelemetry\",\n  \"telemetry.sdk.version\": \"1.11.0\",\n  \"instr-lib\": \"my-app-tracer\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Environment Variables and YAML Paths\nDESCRIPTION: This example shows how to configure the OpenTelemetry Collector using environment variables, HTTP URIs, and YAML paths.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\notelcol --config=env:MY_CONFIG_IN_AN_ENVVAR --config=https://server/config.yaml\notelcol --config=\"yaml:exporters::debug::verbosity: normal\"\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Propagator in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to programmatically configure a custom propagation format (B3) for cross-service trace context propagation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.propagate import set_global_textmap\nfrom opentelemetry.propagators.b3 import B3Format\n\nset_global_textmap(B3Format())\n```\n\n----------------------------------------\n\nTITLE: Disabling OpenTelemetry Instrumentation via Environment Variables\nDESCRIPTION: Demonstrates how to disable specific instrumentation libraries using environment variables. Shows the naming convention for the environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/libraries.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_RUBY_INSTRUMENTATION_SINATRA_ENABLED=false\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurableSamplerProvider in Java\nDESCRIPTION: Example implementation of ConfigurableSamplerProvider interface to create a custom sampler that can participate in autoconfiguration. The sampler is created when OTEL_TRACES_SAMPLER is set to the value from getName().\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_8\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;\nimport io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSamplerProvider;\nimport io.opentelemetry.sdk.trace.samplers.Sampler;\n\npublic class CustomSamplerProvider implements ConfigurableSamplerProvider {\n\n  @Override\n  public Sampler createSampler(ConfigProperties config) {\n    // Callback invoked when OTEL_TRACES_SAMPLER is set to the value from getName().\n    return new CustomSampler();\n  }\n\n  @Override\n  public String getName() {\n    return \"custom-sampler\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gauge Implementation in OpenTelemetry Java\nDESCRIPTION: Shows how to implement a DoubleGauge for recording latest values where spatial re-aggregation is not needed. Demonstrates various measurement recording patterns with attributes and contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_SHAPE;\nimport static otel.Util.computeWidgetColor;\nimport static otel.Util.computeWidgetShape;\nimport static otel.Util.customContext;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.metrics.DoubleGauge;\nimport io.opentelemetry.api.metrics.Meter;\n\npublic class GaugeUsage {\n  private static final Attributes WIDGET_RED_CIRCLE = Util.WIDGET_RED_CIRCLE;\n\n  public static void gaugeUsage(Meter meter) {\n    // Construct a gauge to record measurements as they occur, which cannot be spatially\n    // re-aggregated.\n    DoubleGauge gauge =\n        meter\n            .gaugeBuilder(\"fully.qualified.gauge\")\n            .setDescription(\"The current temperature of the widget processing line\")\n            .setUnit(\"K\")\n            // Uncomment to optionally change the type to long\n            // .ofLongs()\n            .build();\n\n    // Record a measurement with no attributes or context.\n    // Attributes defaults to Attributes.empty(), context to Context.current().\n    gauge.set(273.0);\n\n    // Record a measurement with attributes, using pre-allocated attributes whenever possible.\n    gauge.set(273.0, WIDGET_RED_CIRCLE);\n    // Sometimes, attributes must be computed using application context.\n    gauge.set(\n        273.0,\n        Attributes.of(WIDGET_SHAPE, computeWidgetShape(), WIDGET_COLOR, computeWidgetColor()));\n\n    // Record a measurement with attributes, and context.\n    // Most users will opt to omit the context argument, preferring the default Context.current().\n    gauge.set(1L, WIDGET_RED_CIRCLE, customContext());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Errors in Spans\nDESCRIPTION: Example demonstrating how to record errors in spans along with setting error status.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t// ...\n\t\"go.opentelemetry.io/otel/codes\"\n\t// ...\n)\n\n// ...\n\nresult, err := operationThatCouldFail()\nif err != nil {\n\tspan.SetStatus(codes.Error, \"operationThatCouldFail failed\")\n\tspan.RecordError(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Express Instrumentation with Request Hook in JavaScript\nDESCRIPTION: Example of configuring the Express instrumentation with a request hook in JavaScript to enrich spans with additional HTTP attributes like method and URL, demonstrating advanced instrumentation customization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\nconst {\n  SEMATTRS_HTTP_METHOD,\n  SEMATTRS_HTTP_URL,\n} = require('@opentelemetry/semantic-conventions');\nconst {\n  ExpressInstrumentation,\n  ExpressLayerType,\n} = require('@opentelemetry/instrumentation-express');\n\nconst expressInstrumentation = new ExpressInstrumentation({\n  requestHook: function (span, info) {\n    if (info.layerType === ExpressLayerType.REQUEST_HANDLER) {\n      span.setAttribute(SEMATTRS_HTTP_METHOD, info.request.method);\n      span.setAttribute(SEMATTRS_HTTP_URL, info.request.baseUrl);\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Observable Counter\nDESCRIPTION: Demonstrates creation of an observable counter with a callback for collecting measurements during metrics collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_8\n\nLANGUAGE: cpp\nCODE:\n```\nauto meter = provider->GetMeter(name, \"1.2.0\");\nauto counter = meter->CreateDoubleObservableCounter(counter_name);\ncounter->AddCallback(MeasurementFetcher::Fetcher, nullptr);\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP gRPC Exporter in Python\nDESCRIPTION: Python code to configure the OpenTelemetry gRPC exporter for both traces and metrics. Sets up a TracerProvider with BatchSpanProcessor and MeterProvider with PeriodicExportingMetricReader.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\n\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\n\nfrom opentelemetry import metrics\nfrom opentelemetry.exporter.otlp.proto.grpc.metric_exporter import OTLPMetricExporter\nfrom opentelemetry.sdk.metrics import MeterProvider\nfrom opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader\n\n# Service name is required for most backends\nresource = Resource(attributes={\n    SERVICE_NAME: \"your-service-name\"\n})\n\ntracerProvider = TracerProvider(resource=resource)\nprocessor = BatchSpanProcessor(OTLPSpanExporter(endpoint=\"your-endpoint-here\"))\ntracerProvider.add_span_processor(processor)\ntrace.set_tracer_provider(tracerProvider)\n\nreader = PeriodicExportingMetricReader(\n    OTLPMetricExporter(endpoint=\"localhost:5555\")\n)\nmeterProvider = MeterProvider(resource=resource, metric_readers=[reader])\nmetrics.set_meter_provider(meterProvider)\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in Java\nDESCRIPTION: Shows how to add attributes to a span using the setAttribute method in the getAds function.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/ad.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nspan.setAttribute(\"app.ads.contextKeys\", req.getContextKeysList().toString());\nspan.setAttribute(\"app.ads.contextKeys.count\", req.getContextKeysCount());\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake for Oat++ HTTP Server\nDESCRIPTION: CMake configuration file for building an Oat++ HTTP server project, including necessary dependencies and compilation settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.25)\nproject(RollDiceServer)\nset(CMAKE_CXX_STANDARD 17)\nset(project_name roll-dice-server)\n\nset(SOURCES\n    main.cpp\n)\n\nadd_executable(dice-server ${SOURCES})\n\nset(OATPP_ROOT ../oatpp)\nfind_library(OATPP_LIB NAMES liboatpp.a HINTS \"${OATPP_ROOT}/build/src/\" NO_DEFAULT_PATH)\n\nif (NOT OATPP_LIB)\n  message(SEND_ERROR \"Did not find oatpp library ${OATPP_ROOT}/build/src\")\nendif()\ninclude_directories(${OATPP_ROOT}/src)\ntarget_link_libraries(dice-server PRIVATE ${OATPP_LIB})\n```\n\n----------------------------------------\n\nTITLE: Enriching Telemetry with Resource Detection in OpenTelemetry Collector\nDESCRIPTION: Configuration for the resource detection processor that automatically identifies and adds relevant cloud or host-level metadata to telemetry. It supports various detectors for different cloud environments.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  resourcedetection/system:\n    # Modify the list of detectors to match the cloud environment\n    detectors: [env, system, gcp, ec2, azure]\n    timeout: 2s\n    override: false\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Plugin in Apache APISIX\nDESCRIPTION: YAML configuration for enabling the OpenTelemetry plugin in Apache APISIX's config.yaml file. It sets up the trace ID source, service name, and collector address.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/apisix/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nplugins:\n  ... # Other plugins that have been enabled\n  - opentelemetry\nplugin_attr:\n  ...\n  opentelemetry:\n    trace_id_source: x-request-id\n    resource:\n      service.name: APISIX\n    collector:\n      address: 127.0.0.1:4318 # OTLP HTTP Receiver address\n      request_timeout: 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubernetes Events Preset in OpenTelemetry Collector\nDESCRIPTION: Configuration to enable the collection of Kubernetes events. This preset requires the k8sobjectsreceiver component and is recommended to be used in deployment or statefulset mode with a single replica.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nmode: deployment\nreplicaCount: 1\npresets:\n  kubernetesEvents:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Detectors via Environment Variables in PHP\nDESCRIPTION: Example showing how to enable specific resource detectors using the OTEL_PHP_RESOURCE_DETECTORS environment variable.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/resources.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_PHP_RESOURCE_DETECTORS=env,host,sdk \\\nphp example.php\n```\n\n----------------------------------------\n\nTITLE: Customizing Span Names in otelsql for Go\nDESCRIPTION: This Go code demonstrates how to use otelsql.WithSpanNameFormatter to customize the span names in OpenTelemetry instrumentation for SQL queries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\notelsql.WithSpanNameFormatter(func(ctx context.Context, method otelsql.Method, query string) string {\n    return string(method) + \": \" + query\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Express Application in TypeScript\nDESCRIPTION: Sets up a basic Express web server in TypeScript with a '/rolldice' endpoint that returns a random number between 1 and 6.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/*app.ts*/\nimport express, { Express } from 'express';\n\nconst PORT: number = parseInt(process.env.PORT || '8080');\nconst app: Express = express();\n\nfunction getRandomNumber(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\napp.get('/rolldice', (req, res) => {\n  res.send(getRandomNumber(1, 6).toString());\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for 2024 Documentation\nDESCRIPTION: YAML front matter configuration that sets up page metadata including the title '2024', a negative weight for sorting priority, and a default language commit reference hash.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/zh/blog/2024/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2024\nweight: -2024\ndefault_lang_commit: c0a5eea5d720b0e075efa87f99dcf58c89106268\n---\n```\n\n----------------------------------------\n\nTITLE: Running Go Application\nDESCRIPTION: Compiles and runs the Go application using the 'go run' command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with YAML\nDESCRIPTION: A basic YAML configuration for the OpenTelemetry Collector that sets up OTLP receivers for gRPC and HTTP protocols, and exports telemetry data to a debug console with detailed verbosity.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/_includes/exporters/intro.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\nexporters:\n  debug:\n    verbosity: detailed\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [debug]\n    metrics:\n      receivers: [otlp]\n      exporters: [debug]\n    logs:\n      receivers: [otlp]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter in TypeScript\nDESCRIPTION: TypeScript code to initialize OpenTelemetry SDK with a Zipkin exporter for traces. It configures the traceExporter and sets up auto-instrumentations for Node.js.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as opentelemetry from '@opentelemetry/sdk-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { ZipkinExporter } from '@opentelemetry/exporter-zipkin';\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new ZipkinExporter({}),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Implementing Start Method for OpenTelemetry Trace Receiver in Go\nDESCRIPTION: This code updates the Start method of a tailtracer receiver to consume and forward generated traces. It creates a background goroutine that periodically generates traces and pushes them to the next consumer in the pipeline based on a configured interval.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_43\n\nLANGUAGE: go\nCODE:\n```\nfunc (tailtracerRcvr *tailtracerReceiver) Start(ctx context.Context, host component.Host) error {\n    tailtracerRcvr.host = host\n    ctx = context.Background()\n\tctx, tailtracerRcvr.cancel = context.WithCancel(ctx)\n\n\tinterval, _ := time.ParseDuration(tailtracerRcvr.config.Interval)\n\tgo func() {\n\t\tticker := time.NewTicker(interval)\n\t\tdefer ticker.Stop()\n\t\tfor {\n\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\ttailtracerRcvr.logger.Info(\"I should start processing traces now!\")\n\t\t\t\t\ttailtracerRcvr.nextConsumer.ConsumeTraces(ctx, generateTraces(tailtracerRcvr.config.NumberOfTraces)) // new line added\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Manual Instrumentation Only in OpenTelemetry Java Agent\nDESCRIPTION: Use these configuration options to suppress all auto instrumentations but enable support for manual instrumentation with @WithSpan and normal API interactions in the OpenTelemetry Java agent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/disable.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n-Dotel.instrumentation.common.default-enabled=false -Dotel.instrumentation.opentelemetry-api.enabled=true -Dotel.instrumentation.opentelemetry-instrumentation-annotations.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Properly Shutting Down OpenTelemetry Meter Provider in Go\nDESCRIPTION: Demonstrates the proper shutdown pattern for the OpenTelemetry MeterProvider using a deferred function to ensure all metrics are exported before the application exits.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\nmp := initMeterProvider()\ndefer func() {\n    if err := mp.Shutdown(context.Background()); err != nil {\n        log.Fatalf(\"Error shutting down meter provider: %v\", err)\n    }\n}()\n```\n\n----------------------------------------\n\nTITLE: Client-Side OpenTelemetry Instrumentation\nDESCRIPTION: Implementation of browser-side telemetry using web tracer provider and automatic web instrumentations. Captures user actions like clicks, fetch requests, and page loads.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/frontend-overhaul/index.md#2025-04-09_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Reference implementation at:\n// https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/frontend/utils/telemetry/FrontendTracer.ts\n```\n\n----------------------------------------\n\nTITLE: Skipping Instrumentations in .NET Project File\nDESCRIPTION: Example of how to skip specific instrumentations by adding them to the SkippedInstrumentations property in the project file. This is useful when you want to exclude certain packages from automatic instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/nuget-packages.md#2025-04-09_snippet_1\n\nLANGUAGE: csproj\nCODE:\n```\n<PropertyGroup>\n   <SkippedInstrumentations>MongoDB.Driver.Core;StackExchange.Redis</SkippedInstrumentations>\n</PropertyGroup>\n```\n\n----------------------------------------\n\nTITLE: Generating Schema Redirect with Hugo Templates\nDESCRIPTION: This snippet uses Hugo templating to create a redirect from /schemas/latest to the most recent schema file. It first retrieves a list of schema files, selects the latest one, and then constructs the redirect URL.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/redirects/schemas.txt#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $schemaFiles := partial \"schema-file-list\" . -}}\n{{ $latestSchemaFile := index $schemaFiles 0 -}}\n\n/schemas/latest  /schemas/{{ $latestSchemaFile.Name -}}\n```\n\n----------------------------------------\n\nTITLE: Adding Span Attributes in OpenTelemetry PHP\nDESCRIPTION: Demonstrates adding attributes to a span to provide additional context about the quote calculation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/quote.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$childSpan->setAttribute('app.quote.items.count', $numberOfItems);\n$childSpan->setAttribute('app.quote.cost.total', $quote);\n```\n\n----------------------------------------\n\nTITLE: Configuring Specific OpenTelemetry Instrumentation Libraries\nDESCRIPTION: Demonstrates how to selectively enable and configure specific instrumentation libraries with custom options instead of enabling all available libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/libraries.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'opentelemetry/sdk'\n\n# install all compatible instrumentation with default configuration\nOpenTelemetry::SDK.configure do |c|\n  c.use 'OpenTelemetry::Instrumentation::Sinatra'\n  c.use 'OpenTelemetry::Instrumentation::Faraday', { opt: 'value' }\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Simple Span Event in OpenTelemetry PHP\nDESCRIPTION: Shows how to add a simple event to a span without additional attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/quote.md#2025-04-09_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$span->addEvent('Received get quote request, processing it');\n```\n\n----------------------------------------\n\nTITLE: Linking OpenTelemetry Libraries with CMake\nDESCRIPTION: CMake configuration for linking the required OpenTelemetry C++ libraries with the dice-server target.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: cmake\nCODE:\n```\ntarget_link_libraries(dice-server PRIVATE\n                      ${OATPP_LIB}\n                      ${OPENTELEMETRY_CPP_LIBRARIES})\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector\nDESCRIPTION: YAML configuration for the OpenTelemetry Collector that defines receivers, exporters, and service pipelines for metrics, traces, and logs with a debug exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: '0.0.0.0:4318'\nexporters:\n  debug:\n    verbosity: detailed\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      exporters: [debug]\n    traces:\n      receivers: [otlp]\n      exporters: [debug]\n    logs:\n      receivers: [otlp]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Configuring Ingress for Frontend Proxy\nDESCRIPTION: YAML configuration for enabling and configuring ingress resources for the frontend-proxy component.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  frontend-proxy:\n    ingress:\n      enabled: true\n      annotations: {}\n      hosts:\n        - host: otel-demo.my-domain.com\n          paths:\n            - path: /\n              pathType: Prefix\n              port: 8080\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter with JSON Transport in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to configure an OTLP exporter using JSON transport for sending trace data to a specified endpoint and create a sample span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse OpenTelemetry\\Contrib\\Otlp\\OtlpHttpTransportFactory;\nuse OpenTelemetry\\Contrib\\Otlp\\SpanExporter;\nuse OpenTelemetry\\SDK\\Trace\\SpanProcessor\\SimpleSpanProcessor;\nuse OpenTelemetry\\SDK\\Trace\\TracerProvider;\n\n$transport = (new OtlpHttpTransportFactory())->create('http://jaeger:4318/v1/traces', 'application/json');\n$exporter = new SpanExporter($transport);\n\n$tracerProvider =  new TracerProvider(\n    new SimpleSpanProcessor($exporter)\n);\n$tracer = $tracerProvider->getTracer('io.opentelemetry.contrib.php');\n$tracer->spanBuilder('example')->startSpan()->end();\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Attributes in Ruby with OpenTelemetry\nDESCRIPTION: Install and use semantic conventions for attributes in OpenTelemetry Ruby.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngem install opentelemetry-semantic_conventions\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'opentelemetry/sdk'\nrequire 'opentelemetry/semantic_conventions'\n\ncurrent_span = OpenTelemetry::Trace.current_span\n\ncurrent_span.add_attributes({\n  OpenTelemetry::SemanticConventions::Trace::HTTP_METHOD => \"GET\",\n  OpenTelemetry::SemanticConventions::Trace::HTTP_URL => \"https://opentelemetry.io/\",\n})\n```\n\n----------------------------------------\n\nTITLE: Installing HTTPX Instrumentation Library\nDESCRIPTION: Command to install the OpenTelemetry instrumentation library specifically for the HTTPX HTTP client using pip.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/libraries.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-instrumentation-httpx\n```\n\n----------------------------------------\n\nTITLE: Receiver Factory Implementation\nDESCRIPTION: Factory function implementation that creates a new receiver factory with trace processing capabilities.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_15\n\nLANGUAGE: go\nCODE:\n```\n// NewFactory creates a factory for tailtracer receiver.\nfunc NewFactory() receiver.Factory {\n\treturn receiver.NewFactory(\n\t\ttypeStr,\n\t\tcreateDefaultConfig,\n\t\treceiver.WithTraces(createTracesReceiver, component.StabilityLevelAlpha))\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics Discovery Annotation for Kubernetes Pods\nDESCRIPTION: YAML annotation that instructs the OpenTelemetry Collector to use the NGINX metrics scraper for a pod. This annotation allows users to specify which receiver should be used to collect metrics from their workloads.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/otel-collector-k8s-discovery.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nio.opentelemetry.discovery.metrics/scraper: nginx\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Exporter in TypeScript\nDESCRIPTION: TypeScript code to initialize OpenTelemetry SDK with a Prometheus exporter for metrics. It configures the metricReader with a port option (default 9464) and sets up auto-instrumentations for Node.js.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as opentelemetry from '@opentelemetry/sdk-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\nimport { PrometheusExporter } from '@opentelemetry/exporter-prometheus';\n\nconst sdk = new opentelemetry.NodeSDK({\n  metricReader: new PrometheusExporter({\n    port: 9464, // optional - default is 9464\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Span to Dice Roll Function in Elixir\nDESCRIPTION: This snippet shows how to wrap the 'roll_dice' function with an OpenTelemetry span. It uses the OpenTelemetry.Tracer module to create a span named 'dice_roll' around the random number generation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RollDiceWeb.DiceController do\n  use RollDiceWeb, :controller\n  require OpenTelemetry.Tracer, as: Tracer\n\n  # ...snip\n\n  defp roll_dice do\n    Tracer.with_span(\"dice_roll\") do\n      to_string(Enum.random(1..6))\n    end\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Initializing Tracing in Python for OpenTelemetry Load Generator\nDESCRIPTION: This snippet initializes the OpenTelemetry SDK for tracing. It creates a tracer provider and sets up a BatchSpanProcessor with an OTLPSpanExporter. The configuration uses OpenTelemetry environment variables for export endpoints, resource attributes, and service name.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/load-generator.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntracer_provider = TracerProvider()\ntrace.set_tracer_provider(tracer_provider)\ntracer_provider.add_span_processor(BatchSpanProcessor(OTLPSpanExporter()))\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSphere Liberty Profile for OpenTelemetry Java Agent\nDESCRIPTION: Add the path to the Java agent to the jvm.options file for WebSphere Liberty Profile. This configuration applies to either a single server or all servers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/server-config.md#2025-04-09_snippet_5\n\nLANGUAGE: ini\nCODE:\n```\n-javaagent:/path/to/opentelemetry-javaagent.jar\n```\n\n----------------------------------------\n\nTITLE: Initializing a Meter in Python with OpenTelemetry\nDESCRIPTION: Creates a meter object from the meter provider for the recommendation service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nmeter = metrics.get_meter_provider().get_meter(\"recommendation\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Metrics Exporter and Reader\nDESCRIPTION: Sets up the metrics pipeline by creating an exporter and periodic reader for metrics collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: cpp\nCODE:\n```\nstd::unique_ptr<opentelemetry::sdk::metrics::MetricExporter> exporter{new opentelemetry::exporters::OStreamMetricExporter};\nstd::unique_ptr<opentelemetry::sdk::metrics::MetricReader> reader{\n    new opentelemetry::sdk::metrics::PeriodicExportingMetricReader(std::move(exporter), options)};\n```\n\n----------------------------------------\n\nTITLE: Viewing Collected Traces in Collector Output\nDESCRIPTION: Command to filter and display the trace ingest activity in the Collector output, showing trace IDs, parent IDs, span names, and other trace metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/quick-start.md#2025-04-09_snippet_7\n\nLANGUAGE: console\nCODE:\n```\n$ grep -E '^Span|(ID|Name|Kind|time|Status \\w+)\\s+:' ./collector-output.txt\nSpan #0\n    Trace ID       : f30faffbde5fcf71432f89da1bf7bc14\n    Parent ID      : 6f1ff7f9cf4ec1c7\n    ID             : 8d1e820c1ac57337\n    Name           : okey-dokey\n    Kind           : Server\n    Start time     : 2024-01-16 14:13:54.585877 +0000 UTC\n    End time       : 2024-01-16 14:13:54.586 +0000 UTC\n    Status code    : Unset\n    Status message :\nSpan #1\n    Trace ID       : f30faffbde5fcf71432f89da1bf7bc14\n    Parent ID      :\n    ID             : 6f1ff7f9cf4ec1c7\n    Name           : lets-go\n    Kind           : Client\n    Start time     : 2024-01-16 14:13:54.585877 +0000 UTC\n    End time       : 2024-01-16 14:13:54.586 +0000 UTC\n    Status code    : Unset\n    Status message :\n...\n```\n\n----------------------------------------\n\nTITLE: Enabling Logs Collection Preset\nDESCRIPTION: YAML configuration to enable the logs collection preset for the OpenTelemetry Collector, setting it up as a DaemonSet.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmode: daemonset\npresets:\n  logsCollection:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Example of OpenTelemetry Span JSON Output\nDESCRIPTION: Sample JSON output from ConsoleSpanExporter showing the structure of a span with its traceId, name, duration, and other attributes. This represents what's logged to the console when spans are created and completed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"traceId\": \"6cc927a05e7f573e63f806a2e9bb7da8\",\n  \"parentId\": undefined,\n  \"name\": \"rollTheDice\",\n  \"id\": \"117d98e8add5dc80\",\n  \"kind\": 0,\n  \"timestamp\": 1688386291908349,\n  \"duration\": 501,\n  \"attributes\": {},\n  \"status\": { \"code\": 0 },\n  \"events\": [],\n  \"links\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Operator Helm Chart\nDESCRIPTION: Commands to add the OpenTelemetry Helm repository and install the OpenTelemetry Operator chart with custom settings for the collector image and certificate generation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/operator.md#2025-04-09_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\nhelm install my-opentelemetry-operator open-telemetry/opentelemetry-operator \\\n  --set \"manager.collectorImage.repository=otel/opentelemetry-collector-k8s\" \\\n  --set admissionWebhooks.certManager.enabled=false \\\n  --set admissionWebhooks.autoGenerateCert.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Running Application with Combined Environment Variables and Code Resources\nDESCRIPTION: Example showing the output when running an application with both environment variable resources and programmatically defined resources. This demonstrates how resources from both sources are combined, with code-defined values taking precedence.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/resources.md#2025-04-09_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ env OTEL_RESOURCE_ATTRIBUTES=\"service.namespace=tutorial,host.name=`HOSTNAME`,host.type=`uname -m`,os.name=`uname -s`,os.version=`uname -r`\" dotnet run\n\nActivity.TraceId:          d1cbb7787440cc95b325835cb2ff8018\nActivity.SpanId:           2ca007300fcb3068\nActivity.TraceFlags:           Recorded\nActivity.ActivitySourceName: tutorial-dotnet\nActivity.DisplayName: SayHello\nActivity.Kind:        Internal\nActivity.StartTime:   2022-10-02T13:31:12.0175090Z\nActivity.Duration:    00:00:00.0003920\nActivity.Tags:\n    foo: 1\n    bar: Hello, World!\n    baz: [1,2,3]\nResource associated with Activity:\n    environment.name: production\n    team.name: backend\n    service.name: resource-tutorial-dotnet\n    service.namespace: tutorial\n    service.version: 1.0\n    service.instance.id: 28976A1C-BF02-43CA-BAE0-6E0564431462\n    host.name: pcarter\n    host.type: arm64\n    os.name: Darwin\n    os.version: 21.6.0\n```\n\n----------------------------------------\n\nTITLE: Deleting Context Entry Value in OpenTelemetry JavaScript\nDESCRIPTION: Shows how to delete an entry from a context, which creates a new context without the specified entry. This illustrates the immutability of contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst key = api.createContextKey('some key');\nconst ctx = api.ROOT_CONTEXT;\nconst ctx2 = ctx.setValue(key, 'context 2');\n\n// remove the entry\nconst ctx3 = ctx.deleteValue(key);\n\n// ctx3 does not contain the entry\nconsole.log(ctx3.getValue(key)); // undefined\n\n// ctx2 is unchanged\nconsole.log(ctx2.getValue(key)); // \"context 2\"\n// ctx is unchanged\nconsole.log(ctx.getValue(key)); // undefined\n```\n\n----------------------------------------\n\nTITLE: Filtering Spans from a Specific Service in OpenTelemetry Collector\nDESCRIPTION: Example showing how to configure the filter processor to drop spans only from a specific service ('service1') while keeping spans from all other services.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter/ottl:\n    error_mode: ignore\n    traces:\n      span:\n        - resource.attributes[\"service.name\"] == \"service1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Trace Exporter in JavaScript\nDESCRIPTION: Basic configuration for adding an OTLP trace exporter to an OpenTelemetry provider using the BatchSpanProcessor. This sets up the core components needed to export traces to an OTLP collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\n// Create TracerProvider\nconst exporter = new OTLPTraceExporter();\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\n```\n\n----------------------------------------\n\nTITLE: Diagrama del flujo de edición con GitHub\nDESCRIPTION: Diagrama de Mermaid que ilustra los pasos para editar contenido directamente desde la interfaz de GitHub, incluyendo la selección de la opción \"Editar esta página\", realizar cambios y crear un Pull Request.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nA([fa:fa-user Nuevo<br>Contribuyente]) --- id1[(open-telemetry/opentelemetry.io<br>GitHub)]\nsubgraph tasks[Editando en GitHub]\ndirection TB\n    0[ ] -.-\n    1[Edita esta página] --> 2[Usa el editor de markdown en GitHub<br>para hacer tus cambios]\n    2 --> 3[Agrega tus propuesta de cambios]\n\nend\nsubgraph tasks2[ ]\ndirection TB\n4[Selecciona los archivos a cambiar] --> 5[Haz click en Crear Pull Request] --> 6[Llena los cambios en Abriendo un Pull Request]\n6 --> 7[Haz click en Crear pull request]\nend\n\nid1 --> tasks --> tasks2\n\nclassDef grey fill:#dddddd,stroke:#ffffff,stroke-width:px,color:#000000, font-size:15px;\nclassDef white fill:#ffffff,stroke:#000,stroke-width:px,color:#000,font-weight:bold\nclassDef k8s fill:#326ce5,stroke:#fff,stroke-width:1px,color:#fff;\nclassDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000\nclass A,1,2,3,4,5,6,7 grey\nclass 0 spacewhite\nclass tasks,tasks2 white\nclass id1 k8s\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Document Load Instrumentation\nDESCRIPTION: Basic HTML template that includes the traceparent meta tag for trace context propagation and sets up the document structure for OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/browser.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Document Load Instrumentation Example</title>\n    <base href=\"/\" />\n    <meta\n      name=\"traceparent\"\n      content=\"00-ab42124a3c573678d4d8b21ba52df3bf-d21f7bc17caa5aba-01\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n  </head>\n  <body>\n    Example of using Web Tracer with document load instrumentation with console\n    exporter and collector exporter\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing the Current Active Span\nDESCRIPTION: Shows how to retrieve the current active span in any part of the code to add information or manipulate it.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ncurrent_span = trace.get_current_span()\n# enriqueça 'current_span' com algumas informações\n```\n\n----------------------------------------\n\nTITLE: Updating CMake Configuration for OpenTelemetry Integration\nDESCRIPTION: Modified CMake configuration to include OpenTelemetry C++ dependencies for instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.25)\nproject(RollDiceServer)\nset(CMAKE_CXX_STANDARD 17)\nset(project_name roll-dice-server)\n\nset(SOURCES\n    main.cpp\n)\nadd_executable(dice-server ${SOURCES})\n\nset(OATPP_ROOT ../oatpp)\nset(opentelemetry-cpp_DIR ../otel-cpp/lib/cmake/opentelemetry-cpp)\nfind_library(OATPP_LIB NAMES liboatpp.a HINTS \"${OATPP_ROOT}/build/src/\" NO_DEFAULT_PATH)\nif (NOT OATPP_LIB)\n  message(SEND_ERROR \"Did not find oatpp library ${OATPP_ROOT}/build/src\")\nendif()\ninclude_directories(${OATPP_ROOT}/src)\n\nfind_package(opentelemetry-cpp CONFIG REQUIRED NO_DEFAULT_PATH)\n```\n\n----------------------------------------\n\nTITLE: Configuring Routes for the Dice Rolling Application\nDESCRIPTION: Ruby code to configure a route that maps the 'rolldice' endpoint to the roll action in the DiceController.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.routes.draw do\n  get 'rolldice', to: 'dice#roll'\nend\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Docker Container\nDESCRIPTION: Shell command to run Prometheus in a Docker container with mounted configuration and OTLP write receiver enabled. Exposes port 9090 for the Prometheus UI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/_includes/exporters/prometheus-setup.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -v ${PWD}/prometheus.yml:/prometheus/prometheus.yml -p 9090:9090 prom/prometheus --enable-feature=otlp-write-receive\n```\n\n----------------------------------------\n\nTITLE: Configuring PSR-3 Logger for OpenTelemetry PHP\nDESCRIPTION: This snippet demonstrates how to set up a custom PSR-3 logger for OpenTelemetry PHP. It creates a logger instance with an INFO log level and registers it with the OpenTelemetry API's LoggerHolder.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_29\n\nLANGUAGE: php\nCODE:\n```\n$logger = new \\Example\\Psr3Logger(LogLevel::INFO);\n\\OpenTelemetry\\API\\LoggerHolder::set($logger);\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Instrumentation Properties\nDESCRIPTION: Spring application properties configuration to enable database monitoring using OpenTelemetry JDBC driver when no DataSource bean is declared.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/spring-native/index.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\nspring.datasource.url=jdbc:otel:h2:mem:db\nspring.datasource.driver-class-name=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for OpenTelemetry Collector Registry Page\nDESCRIPTION: This YAML front matter defines metadata for a page about the OpenTelemetry Collector Registry. It includes a title, description, redirect URL, build instructions, and weight for page ordering in navigation menus.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Exporters, processors, receivers and other useful components for the\n  OpenTelemetry Collector\nredirect: /ecosystem/registry/?language=collector\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for OpenTelemetry Node.js Application\nDESCRIPTION: Dockerfile configuration for containerizing a Node.js application with OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/resources.md#2025-04-09_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:latest\nWORKDIR /usr/src/app\nCOPY package.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ \"node\", \"--require\", \"./tracing.js\", \"app.js\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Spans for ATM and Backend Services in Go\nDESCRIPTION: This code creates and configures two related spans in a trace: an ATM client span and a backend server span with a parent-child relationship. It sets essential span properties including trace/span IDs, timestamps, status codes, and span kinds to model a distributed transaction.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_45\n\nLANGUAGE: go\nCODE:\n```\natmSpan.SetKind(ptrace.SpanKindClient)\natmSpan.Status().SetCode(ptrace.StatusCodeOk)\natmSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(atmSpanStartTime))\natmSpan.SetEndTimestamp(pcommon.NewTimestampFromTime(atmSpanFinishTime))\n\nbackendSpanId := NewSpanID()\n\nbackendDuration, _ := time.ParseDuration(\"2s\")\nbackendSpanStartTime := atmSpanStartTime.Add(backendDuration)\n\nbackendSpan := backendScopeSpans.Spans().AppendEmpty()\nbackendSpan.SetTraceID(atmSpan.TraceID())\nbackendSpan.SetSpanID(backendSpanId)\nbackendSpan.SetParentSpanID(atmSpan.SpanID())\nbackendSpan.SetName(backend.Endpoint)\nbackendSpan.SetKind(ptrace.SpanKindServer)\nbackendSpan.Status().SetCode(ptrace.StatusCodeOk)\nbackendSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(backendSpanStartTime))\nbackendSpan.SetEndTimestamp(atmSpan.EndTimestamp())\n```\n\n----------------------------------------\n\nTITLE: Configuring JBoss EAP / WildFly for OpenTelemetry Java Agent\nDESCRIPTION: Add the javaagent argument to the standalone configuration file for JBoss EAP / WildFly. This configuration is platform-specific, with separate commands for Linux and Windows.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/server-config.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Add to standalone.conf\nJAVA_OPTS=\"$JAVA_OPTS -javaagent:/path/to/opentelemetry-javaagent.jar\"\n```\n\nLANGUAGE: bat\nCODE:\n```\nrem Add to standalone.conf.bat\nset \"JAVA_OPTS=%JAVA_OPTS% -javaagent:<Drive>:\\path\\to\\opentelemetry-javaagent.jar\"\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Tracer Provider in Go\nDESCRIPTION: This code snippet demonstrates how to properly shut down the TracerProvider when the service is terminated, ensuring all spans are exported.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ntp := initTracerProvider()\ndefer func() {\n    if err := tp.Shutdown(context.Background()); err != nil {\n        log.Printf(\"Error shutting down tracer provider: %v\", err)\n    }\n}()\n```\n\n----------------------------------------\n\nTITLE: Implementing ConsumeTraces Method in Go\nDESCRIPTION: Processes incoming trace data by iterating through spans and looking for a specific attribute to create metrics. This method is called for each trace sent to the connector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n// ConsumeTraces method is called for each instance of a trace sent to the connector\nfunc (c *connectorImp) ConsumeTraces(ctx context.Context, td ptrace.Traces) error{\n// loop through the levels of spans of the one trace consumed\n    for i := 0; i < td.ResourceSpans().Len(); i++ {\n        resourceSpan := td.ResourceSpans().At(i)\n\n        for j := 0; j < resourceSpan.ScopeSpans().Len(); j++ {\n            scopeSpan := resourceSpan.ScopeSpans().At(j)\n\n            for k := 0; k < scopeSpan.Spans().Len(); k++ {\n                span := scopeSpan.Spans().At(k)\n                attrs := span.Attributes()\n                mapping := attrs.AsRaw()\n                for key, _ := range mapping {\n                    if key == c.config.AttributeName {\n                        // create metric only if span of trace had the specific attribute\n                        metrics := pmetric.NewMetrics()\n                        return c.metricsConsumer.ConsumeMetrics(ctx, metrics)\n                    }\n                }\n            }\n        }\n    }\n    return nil\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation Library in PHP using Composer\nDESCRIPTION: This command installs a specific OpenTelemetry instrumentation library using Composer. The user needs to replace {name-of-instrumentation} with the Packagist reference for the desired instrumentation and {version-number} with the appropriate version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp composer.phar install {name-of-instrumentation}:{version-number}\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Agent for Auto-instrumentation in Dockerfile\nDESCRIPTION: Sets the JAVA_TOOL_OPTIONS environment variable to include the OpenTelemetry Java agent for automatic instrumentation of libraries and SDK configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/ad.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV JAVA_TOOL_OPTIONS=-javaagent:/app/opentelemetry-javaagent.jar\n```\n\n----------------------------------------\n\nTITLE: Implementing Factory with Default Configuration\nDESCRIPTION: Complete factory implementation with type definition, default interval setting, and configuration creation function.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_13\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"time\"\n\n\t\"go.opentelemetry.io/collector/component\"\n\t\"go.opentelemetry.io/collector/receiver\"\n)\n\nvar (\n\ttypeStr         = component.MustNewType(\"tailtracer\")\n)\n\nconst (\n\tdefaultInterval = 1 * time.Minute\n)\n\nfunc createDefaultConfig() component.Config {\n\treturn &Config{\n\t\tInterval: string(defaultInterval),\n\t}\n}\n\n// NewFactory creates a factory for tailtracer receiver.\nfunc NewFactory() receiver.Factory {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: OTel Collector Log Output\nDESCRIPTION: This snippet shows the output from the OTel Collector, including startup information and log records received from the Python application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nyoda-collector-1   | 2023-11-15T16:54:22.545Z   info    service@v0.88.0/telemetry.go:84 Setting up own telemetry...\nyoda-collector-1   | 2023-11-15T16:54:22.546Z   info    service@v0.88.0/telemetry.go:201        Serving Prometheus metrics      {\"address\": \":8888\", \"level\": \"Basic\"}\nyoda-collector-1   | 2023-11-15T16:54:22.546Z   info    exporter@v0.88.0/exporter.go:275        Deprecated component. Will be removed in future releases.       {\"kind\": \"exporter\", \"data_type\": \"logs\", \"name\": \"logging\"}\nyoda-collector-1   | 2023-11-15T16:54:22.547Z   info    service@v0.88.0/service.go:143  Starting otelcol-contrib...     {\"Version\": \"0.88.0\", \"NumCPU\": 4}\nyoda-collector-1   | 2023-11-15T16:54:22.547Z   info    extensions/extensions.go:33     Starting extensions...\nyoda-collector-1   | 2023-11-15T16:54:22.547Z   warn    internal@v0.88.0/warning.go:40  Using the 0.0.0.0 address exposes this server to every network interface, which may facilitate Denial of Service attacks    {\"kind\": \"receiver\", \"name\": \"otlp\", \"data_type\": \"logs\", \"documentation\": \"https://github.com/open-telemetry/opentelemetry-collector/blob/main/docs/security-best-practices.md#safeguards-against-denial-of-service-attacks\"}\nyoda-collector-1   | 2023-11-15T16:54:22.549Z   info    otlpreceiver@v0.88.0/otlp.go:83 Starting GRPC server    {\"kind\": \"receiver\", \"name\": \"otlp\", \"data_type\": \"logs\", \"endpoint\": \"0.0.0.0:4317\"}\nyoda-collector-1   | 2023-11-15T16:54:22.550Z   info    service@v0.88.0/service.go:169  Everything is ready. Begin running and processing data.\nyoda-collector-1   | 2023-11-15T16:54:27.667Z   info    LogsExporter    {\"kind\": \"exporter\", \"data_type\": \"logs\", \"name\": \"logging\", \"resource logs\": 1, \"log records\": 1}\nyoda-collector-1   | 2023-11-15T16:54:27.668Z   info    ResourceLog #0\nyoda-collector-1   | Resource SchemaURL:\nyoda-collector-1   | Resource attributes:\nyoda-collector-1   |      -> telemetry.sdk.language: Str(python)\nyoda-collector-1   |      -> telemetry.sdk.name: Str(opentelemetry)\nyoda-collector-1   |      -> telemetry.sdk.version: Str(1.21.0)\nyoda-collector-1   |      -> service.name: Str(train-the-telemetry)\nyoda-collector-1   |      -> service.instance.id: Str(33992a23112e)\nyoda-collector-1   | ScopeLogs #0\nyoda-collector-1   | ScopeLogs SchemaURL:\nyoda-collector-1   | InstrumentationScope opentelemetry.sdk._logs._internal\nyoda-collector-1   | LogRecord #0\nyoda-collector-1   | ObservedTimestamp: 1970-01-01 00:00:00 +0000 UTC\nyoda-collector-1   | Timestamp: 2023-11-15 16:54:22.651675136 +0000 UTC\nyoda-collector-1   | SeverityText: INFO\nyoda-collector-1   | SeverityNumber: Info(9)\nyoda-collector-1   | Body: Str(Starting to practice The Telemetry for 10 second(s))\nyoda-collector-1   | Trace ID:\nyoda-collector-1   | Span ID:\nyoda-collector-1   | Flags: 0\nyoda-collector-1   |    {\"kind\": \"exporter\", \"data_type\": \"logs\", \"name\": \"logging\"}\nyoda-collector-1   | 2023-11-15T16:54:32.715Z   info    LogsExporter    {\"kind\": \"exporter\", \"data_type\": \"logs\", \"name\": \"logging\", \"resource logs\": 1, \"log records\": 2}\nyoda-collector-1   | 2023-11-15T16:54:32.716Z   info    ResourceLog #0\nyoda-collector-1   | Resource SchemaURL:\nyoda-collector-1   | Resource attributes:\nyoda-collector-1   |      -> telemetry.sdk.language: Str(python)\nyoda-collector-1   |      -> telemetry.sdk.name: Str(opentelemetry)\nyoda-collector-1   |      -> telemetry.sdk.version: Str(1.21.0)\nyoda-collector-1   |      -> service.name: Str(train-the-telemetry)\nyoda-collector-1   |      -> service.instance.id: Str(33992a23112e)\nyoda-collector-1   | ScopeLogs #0\nyoda-collector-1   | ScopeLogs SchemaURL:\nyoda-collector-1   | InstrumentationScope opentelemetry.sdk._logs._internal\nyoda-collector-1   | LogRecord #0\nyoda-collector-1   | ObservedTimestamp: 1970-01-01 00:00:00 +0000 UTC\nyoda-collector-1   | Timestamp: 2023-11-15 16:54:32.713701888 +0000 UTC\nyoda-collector-1   | SeverityText: INFO\nyoda-collector-1   | SeverityNumber: Info(9)\nyoda-collector-1   | Body: Str(Done practicing)\nyoda-collector-1   | Trace ID:\nyoda-collector-1   | Span ID:\nyoda-collector-1   | Flags: 0\nyoda-collector-1   | LogRecord #1\nyoda-collector-1   | ObservedTimestamp: 1970-01-01 00:00:00 +0000 UTC\nyoda-collector-1   | Timestamp: 2023-11-15 16:54:32.714062336 +0000 UTC\nyoda-collector-1   | SeverityText: INFO\nyoda-collector-1   | SeverityNumber: Info(9)\nyoda-collector-1   | Body: Str(Practicing The Telemetry completed: True)\nyoda-collector-1   | Trace ID:\nyoda-collector-1   | Span ID:\nyoda-collector-1   | Flags: 0\nyoda-collector-1   |    {\"kind\": \"exporter\", \"data_type\": \"logs\", \"name\": \"logging\"}\nyoda-baby-grogu-1  | =`;*'+.|,+?):(*-<}~}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sampler in OpenTelemetry Go SDK\nDESCRIPTION: This snippet demonstrates how to set a sampler on a tracer provider using the WithSampler option. It uses the AlwaysSample sampler, which samples every span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/sampling.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nprovider := trace.NewTracerProvider(\n    trace.WithSampler(trace.AlwaysSample()),\n)\n```\n\n----------------------------------------\n\nTITLE: Creating OpenTelemetry Wrapper for Google Cloud Functions\nDESCRIPTION: JavaScript code for creating an OpenTelemetry wrapper to enable tracing in Google Cloud Functions. It sets up the tracer provider, span processor, and registers instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/serverless.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/* otelwrapper.js */\n\nconst { resourceFromAttributes } = require('@opentelemetry/resources');\nconst {\n  SEMRESATTRS_SERVICE_NAME,\n} = require('@opentelemetry/semantic-conventions');\nconst api = require('@opentelemetry/api');\nconst { BatchSpanProcessor } = require('@opentelemetry/sdk-trace-base');\nconst {\n  OTLPTraceExporter,\n} = require('@opentelemetry/exporter-trace-otlp-http');\nconst { NodeTracerProvider } = require('@opentelemetry/sdk-trace-node');\nconst { registerInstrumentations } = require('@opentelemetry/instrumentation');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\n\napi.diag.setLogger(new api.DiagConsoleLogger(), api.DiagLogLevel.ALL);\n\nconst collectorOptions = {\n  url: '<address for your backend>',\n};\n\nconst provider = new NodeTracerProvider({\n  resource: resourceFromAttributes({\n    [SEMRESATTRS_SERVICE_NAME]: '<your function name>',\n  }),\n  spanProcessors: [\n    new BatchSpanProcessor(new OTLPTraceExporter(collectorOptions)),\n  ],\n});\n\nprovider.register();\n\nregisterInstrumentations({\n  instrumentations: [getNodeAutoInstrumentations()],\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rebasing Changes from Remote Fork\nDESCRIPTION: Git commands to fetch commits from a remote fork and rebase the working branch when reviewers have made changes to a pull request. This keeps the local working branch in sync with remote changes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch origin\ngit rebase origin/<your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Implementing Google Cloud Function Handler\nDESCRIPTION: JavaScript code for a simple Google Cloud Function handler that makes an HTTPS request to opentelemetry.io and returns the response.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/serverless.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/* index.js */\nconst functions = require('@google-cloud/functions-framework');\nconst https = require('https');\n\nfunctions.http('helloHttp', (req, res) => {\n  let url = 'https://opentelemetry.io/';\n  https\n    .get(url, (response) => {\n      res.send(`Response ${response.body}!`);\n    })\n    .on('error', (e) => {\n      res.send(`Error ${e}!`);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceIdRatioBased Sampler with Environment Variables in Shell\nDESCRIPTION: This snippet demonstrates how to set up a TraceIdRatioBased sampler using environment variables. It configures the sampler to export 10% of traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/sampling.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_TRACES_SAMPLER=\"traceidratio\"\nexport OTEL_TRACES_SAMPLER_ARG=\"0.1\"\n```\n\n----------------------------------------\n\nTITLE: Basic Slim Framework Application\nDESCRIPTION: PHP implementation of a basic dice rolling application using Slim Framework.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Slim\\Factory\\AppFactory;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$app = AppFactory::create();\n\n$app->get('/rolldice', function (Request $request, Response $response) {\n    $result = random_int(1,6);\n    $response->getBody()->write(strval($result));\n    return $response;\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing Proper Shutdown for OpenTelemetry Provider in JavaScript\nDESCRIPTION: Code demonstrating how to properly shut down an OpenTelemetry provider to ensure all spans are exported before the application terminates. This is crucial for applications like serverless functions where execution may end abruptly.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nconst provider = new NodeTracerProvider();\nprovider.register();\n// when your you terminate your service, call shutdown on provider:\nprovider.shutdown();\n```\n\n----------------------------------------\n\nTITLE: Implementing Asynchronous Observable Gauge Metrics in PHP\nDESCRIPTION: Shows how to create and use an asynchronous Observable Gauge to automatically report the current queue size. The callback is executed each time collect() is called on the reader, providing real-time measurements.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_25\n\nLANGUAGE: php\nCODE:\n```\n$queue = [\n    'job1',\n    'job2',\n    'job3',\n];\n$reader = $meterProvider\n    ->getMeter('demo_meter')\n    ->createObservableGauge('queued', 'jobs', 'The number of jobs enqueued')\n    ->observe(static function (ObserverInterface $observer) use (&$queue): void {\n        $observer->observe(count($queue));\n    });\n$reader->collect();\narray_pop($queue);\n$reader->collect();\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter in Ruby\nDESCRIPTION: Ruby configuration code for setting up the Zipkin exporter in a Rails application's initializer file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_6\n\nLANGUAGE: ruby\nCODE:\n```\n# config/initializers/opentelemetry.rb\nrequire 'opentelemetry/sdk'\nrequire 'opentelemetry/instrumentation/all'\n\nrequire 'opentelemetry-exporter-zipkin'\nOpenTelemetry::SDK.configure do |c|\n  c.service_name = 'dice-ruby'\n  c.use_all() # enables all instrumentation!\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Auto-Instrumentation in PHP\nDESCRIPTION: PHP code demonstrating how to use the OpenTelemetry extension to implement custom auto-instrumentation for a class method.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/php.md#2025-04-09_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n\nuse OpenTelemetry\\API\\Instrumentation\\CachedInstrumentation;\nuse OpenTelemetry\\API\\Trace\\Span;\nuse OpenTelemetry\\API\\Trace\\StatusCode;\nuse OpenTelemetry\\Context\\Context;\n\nrequire 'vendor/autoload.php';\n\n/* The class to be instrumented */\nclass DemoClass\n{\n    public function run(): void\n    {\n        echo 'Hello, world';\n    }\n}\n\n/* The auto-instrumentation code */\nOpenTelemetry\\Instrumentation\\hook(\n    class: DemoClass::class,\n    function: 'run',\n    pre: static function (DemoClass $demo, array $params, string $class, string $function, ?string $filename, ?int $lineno) {\n        static $instrumentation;\n        $instrumentation ??= new CachedInstrumentation('example');\n        $span = $instrumentation->tracer()->spanBuilder('democlass-run')->startSpan();\n        Context::storage()->attach($span->storeInContext(Context::getCurrent()));\n    },\n    post: static function (DemoClass $demo, array $params, $returnValue, ?Throwable $exception) {\n        $scope = Context::storage()->scope();\n        $scope->detach();\n        $span = Span::fromContext($scope->context());\n        if ($exception) {\n            $span->recordException($exception);\n            $span->setStatus(StatusCode::STATUS_ERROR);\n        }\n        $span->end();\n    }\n);\n\n/* Run the instrumented code, which will generate a trace */\n$demo = new DemoClass();\n$demo->run();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tailtracer Receiver Structure in Go\nDESCRIPTION: Defines the basic structure for a tailtracer receiver that implements the required interfaces for an OpenTelemetry Collector receiver. Includes Start and Shutdown methods with a ticker mechanism for periodic trace generation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_20\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"context\"\n\t\"time\"\n\t\"go.opentelemetry.io/collector/component\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.uber.org/zap\"\n)\n\ntype tailtracerReceiver struct {\n\thost         component.Host\n\tcancel       context.CancelFunc\n\tlogger       *zap.Logger\n\tnextConsumer consumer.Traces\n\tconfig       *Config\n}\n\nfunc (tailtracerRcvr *tailtracerReceiver) Start(ctx context.Context, host component.Host) error {\n\ttailtracerRcvr.host = host\n\tctx = context.Background()\n\tctx, tailtracerRcvr.cancel = context.WithCancel(ctx)\n\n\tinterval, _ := time.ParseDuration(tailtracerRcvr.config.Interval)\n\tgo func() {\n\t\tticker := time.NewTicker(interval)\n\t\tdefer ticker.Stop()\n\n\t\tfor {\n\t\t\tselect {\n\t\t\t\tcase <-ticker.C:\n\t\t\t\t\ttailtracerRcvr.logger.Info(\"I should start processing traces now!\")\n\t\t\t\tcase <-ctx.Done():\n\t\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}()\n\n\treturn nil\n}\n\nfunc (tailtracerRcvr *tailtracerReceiver) Shutdown(ctx context.Context) error {\n\tif tailtracerRcvr.cancel != nil {\n\t\ttailtracerRcvr.cancel()\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer in TypeScript\nDESCRIPTION: TypeScript code demonstrating how to acquire a tracer using the OpenTelemetry API. The tracer is identified by an instrumentation scope name and version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport opentelemetry from '@opentelemetry/api';\n//...\n\nconst tracer = opentelemetry.trace.getTracer(\n  'instrumentation-scope-name',\n  'instrumentation-scope-version',\n);\n\n// You can now use a 'tracer' to do tracing!\n```\n\n----------------------------------------\n\nTITLE: Setting Up OpenTelemetry Dependencies in Erlang\nDESCRIPTION: Configuration for adding OpenTelemetry dependencies to an Erlang project. Includes the opentelemetry_api and opentelemetry SDK packages with version parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n{deps, [{opentelemetry_api, \"~> {{% param versions.otelApi %}}\"},\n        {opentelemetry, \"~> {{% param versions.otelSdk %}}\"}}.\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource for OpenTelemetry in Java\nDESCRIPTION: Shows how to create a Resource object with custom attributes, specifically setting the service name for telemetry source identification.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.resources.Resource;\nimport io.opentelemetry.semconv.ServiceAttributes;\n\npublic class ResourceConfig {\n  public static Resource create() {\n    return Resource.getDefault().toBuilder()\n        .put(ServiceAttributes.SERVICE_NAME, \"my-service\")\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Logging in C++\nDESCRIPTION: This function initializes the OpenTelemetry LoggerProvider, setting up an exporter and processor for log collection in the Currency Service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/currency.md#2025-04-09_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\nvoid initLogger() {\n  otlp::OtlpGrpcLogRecordExporterOptions loggerOptions;\n  auto exporter  = otlp::OtlpGrpcLogRecordExporterFactory::Create(loggerOptions);\n  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));\n  std::vector<std::unique_ptr<logs_sdk::LogRecordProcessor>> processors;\n  processors.push_back(std::move(processor));\n  auto context = logs_sdk::LoggerContextFactory::Create(std::move(processors));\n  std::shared_ptr<logs::LoggerProvider> provider = logs_sdk::LoggerProviderFactory::Create(std::move(context));\n  opentelemetry::logs::Provider::SetLoggerProvider(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Receiver in YAML\nDESCRIPTION: This YAML configuration sets up the OTLP Receiver to accept metrics via HTTP and gRPC protocols, and uses the Debug Exporter to display the received metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n      grpc:\nexporters:\n  debug:\n    verbosity: detailed\nservice:\n  pipelines:\n    metrics:\n      receivers: [otlp]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin HTTP/Proto Exporter for Python\nDESCRIPTION: Command to install the OpenTelemetry Zipkin HTTP/Proto exporter package as a dependency for your Python project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-exporter-zipkin-proto-http\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus HttpListener Exporter Package\nDESCRIPTION: Install the OpenTelemetry Prometheus HttpListener exporter package for non-ASP.NET Core applications using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Prometheus.HttpListener --version {{% version-from-registry exporter-dotnet-prometheus-httplistener %}}\n```\n\n----------------------------------------\n\nTITLE: Manual OpenTelemetry PHP SDK Setup\nDESCRIPTION: Demonstrates manual initialization of OpenTelemetry TracerProvider with BatchSpanProcessor and InMemoryExporter. Shows configuration of queue size, export timeout, and batch size parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/sdk.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$exporter = new InMemoryExporter();\n$meterProvider = new NoopMeterProvider();\n$tracerProvider =  new TracerProvider(\n    new BatchSpanProcessor(\n        $exporter,\n        ClockFactory::getDefault(),\n        2048, //max queue size\n        5000, //export timeout\n        1024, //max batch size\n        true, //auto flush\n        $meterProvider\n    )\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring SdkMeterProvider in Java OpenTelemetry SDK\nDESCRIPTION: Shows how to configure the SdkMeterProvider for handling metric telemetry. Demonstrates setting up with a resource, metric readers, and various view configurations for customizing metric streams including filtering attributes and setting cardinality limits.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_10\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.metrics.SdkMeterProvider;\nimport io.opentelemetry.sdk.metrics.SdkMeterProviderBuilder;\nimport io.opentelemetry.sdk.resources.Resource;\nimport java.util.List;\nimport java.util.Set;\n\npublic class SdkMeterProviderConfig {\n  public static SdkMeterProvider create(Resource resource) {\n    SdkMeterProviderBuilder builder =\n        SdkMeterProvider.builder()\n            .setResource(resource)\n            .registerMetricReader(\n                MetricReaderConfig.periodicMetricReader(\n                    MetricExporterConfig.otlpHttpMetricExporter(\n                        \"http://localhost:4318/v1/metrics\")));\n    // Uncomment to optionally register metric reader with cardinality limits\n    // builder.registerMetricReader(\n    //     MetricReaderConfig.periodicMetricReader(\n    //         MetricExporterConfig.otlpHttpMetricExporter(\"http://localhost:4318/v1/metrics\")),\n    //     instrumentType -> 100);\n\n    ViewConfig.dropMetricView(builder, \"some.custom.metric\");\n    ViewConfig.histogramBucketBoundariesView(\n        builder, \"http.server.request.duration\", List.of(1.0, 5.0, 10.0));\n    ViewConfig.attributeFilterView(\n        builder, \"http.client.request.duration\", Set.of(\"http.request.method\"));\n    ViewConfig.cardinalityLimitsView(builder, \"http.server.active_requests\", 100);\n    return builder.build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BatchSpanProcessor and SimpleSpanProcessor in Java\nDESCRIPTION: This snippet demonstrates how to programmatically configure BatchSpanProcessor and SimpleSpanProcessor in the OpenTelemetry Java SDK. It includes methods to create instances of both processors with customizable parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.trace.SpanProcessor;\nimport io.opentelemetry.sdk.trace.export.BatchSpanProcessor;\nimport io.opentelemetry.sdk.trace.export.SimpleSpanProcessor;\nimport io.opentelemetry.sdk.trace.export.SpanExporter;\nimport java.time.Duration;\n\npublic class SpanProcessorConfig {\n  public static SpanProcessor batchSpanProcessor(SpanExporter spanExporter) {\n    return BatchSpanProcessor.builder(spanExporter)\n        .setMaxQueueSize(2048)\n        .setExporterTimeout(Duration.ofSeconds(30))\n        .setScheduleDelay(Duration.ofSeconds(5))\n        .build();\n  }\n\n  public static SpanProcessor simpleSpanProcessor(SpanExporter spanExporter) {\n    return SimpleSpanProcessor.builder(spanExporter).build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Python Application with OpenTelemetry Instrumentation\nDESCRIPTION: Command to run a Flask application with OpenTelemetry automatic instrumentation, enabling OTLP export for traces, metrics, and logs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true\nopentelemetry-instrument --logs_exporter otlp flask run -p 8080\n```\n\n----------------------------------------\n\nTITLE: Prometheus Configuration\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from the OpenTelemetry Java agent\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nglobal:\\n  scrape_interval: 10s\\n  evaluation_interval: 10s\\n\\nscrape_configs:\\n  - job_name: my-kafka-broker\\n    scrape_interval: 5s\\n    static_configs:\\n      - targets: [host.docker.internal:9464]\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Attributes via Environment Variables in OpenTelemetry\nDESCRIPTION: Example showing how to set custom resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable. In this case, it sets the deployment environment to 'production'.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/ja/docs/concepts/resources/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_RESOURCE_ATTRIBUTES=deployment.environment=production yourApp\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Namespace OpenTelemetry Auto-Instrumentation in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure the auto-instrumentation annotation when the Instrumentation resource is in a different namespace than the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  instrumentation.opentelemetry.io/inject-python: 'opentelemetry/my-instrumentation'\n```\n\n----------------------------------------\n\nTITLE: Running Instrumented TypeScript Application\nDESCRIPTION: Command to run an instrumented TypeScript application that utilizes OpenTelemetry for tracing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx ts-node --require ./instrumentation.ts app.ts\n```\n\n----------------------------------------\n\nTITLE: Programmatically Instrumenting a Flask App in Python\nDESCRIPTION: This snippet shows how to programmatically instrument a Flask app using the FlaskInstrumentor. It allows for more control over the instrumentation process, including the ability to exclude specific URLs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ninstrumentor = FlaskInstrumentor()\n\napp = Flask(__name__)\n\ninstrumentor.instrument_app(app)\n# instrumentor.instrument_app(app, excluded_urls=\"/server_request\")\n@app.route(\"/server_request\")\ndef server_request():\n    print(request.args.get(\"param\"))\n    return \"served\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Dependencies to Cargo.toml\nDESCRIPTION: Updated Cargo.toml with additional dependencies for OpenTelemetry SDK and the stdout exporter, which will be used to add tracing to the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nopentelemetry = \"{{% version-from-registry otel-rust %}}\"\nopentelemetry_sdk = \"{{% version-from-registry otel-rust-sdk %}}\"\nopentelemetry-stdout = { version = \"{{% version-from-registry exporter-rust-stdout %}}\", features = [\"trace\"] }\n```\n\n----------------------------------------\n\nTITLE: Defining ATM and BackendSystem types in Go\nDESCRIPTION: Initial definition of Atm and BackendSystem structs that represent entities generating telemetry in the system. These types contain properties that will be added to traces as Resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_29\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\ntype Atm struct{\n    ID           int64\n\tVersion      string\n\tName         string\n\tStateID      string\n\tSerialNumber string\n\tISPNetwork   string\n}\n\ntype BackendSystem struct{\n\tVersion       string\n\tProcessName   string\n\tOSType        string\n    OSVersion     string\n\tCloudProvider string\n\tCloudRegion   string\n\tServiceName   string\n\tEndpoint      string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry .NET Logs Exporter with Environment Variables\nDESCRIPTION: This markdown table describes the OTEL_DOTNET_AUTO_LOGS_INCLUDE_FORMATTED_MESSAGE environment variable used to configure the OpenTelemetry .NET logs exporter. It controls whether the formatted log message should be set in the exported logs. The variable is experimental and defaults to false.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment variable                              | Description                                             | Default value | Status                                                    |\n| ------------------------------------------------- | ------------------------------------------------------- | ------------- | --------------------------------------------------------- |\n| `OTEL_DOTNET_AUTO_LOGS_INCLUDE_FORMATTED_MESSAGE` | Whether the formatted log message should be set or not. | `false`       | [Experimental](/docs/specs/otel/versioning-and-stability) |\n```\n\n----------------------------------------\n\nTITLE: Manual Context Propagation in JavaScript (Sending Service)\nDESCRIPTION: JavaScript implementation for manually propagating OpenTelemetry context from a sending service by injecting trace information into a carrier object.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n// Sending service\nconst { context, propagation } = require('@opentelemetry/api');\nconst output = {};\n\n// Serialize the traceparent and tracestate from context into\n// an output object.\n//\n// This example uses the active trace context, but you can\n// use whatever context is appropriate to your scenario.\npropagation.inject(context.active(), output);\n\nconst { traceparent, tracestate } = output;\n// You can then pass the traceparent and tracestate\n// data to whatever mechanism you use to propagate\n// across services.\n```\n\n----------------------------------------\n\nTITLE: Starting OpenTelemetry Collector Docker Container\nDESCRIPTION: Command to run the OpenTelemetry Collector in a Docker container, exposing the necessary port and mounting the configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/distro.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -p 4317:4317 \\\n    -v /tmp/otel-collector-config.yaml:/etc/otel-collector-config.yaml \\\n    otel/opentelemetry-collector:latest \\\n    --config=/etc/otel-collector-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating Express Server Application in JavaScript\nDESCRIPTION: JavaScript version of the Express server application with a /rolldice endpoint using the dice rolling library.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n/*app.js*/\nconst express = require('express');\nconst { rollTheDice } = require('./dice.js');\n\nconst PORT = parseInt(process.env.PORT || '8080');\nconst app = express();\n\napp.get('/rolldice', (req, res) => {\n  const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;\n  if (isNaN(rolls)) {\n    res\n      .status(400)\n      .send(\"Request parameter 'rolls' is missing or not a number.\");\n    return;\n  }\n  res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Activity Status and Exception Handling\nDESCRIPTION: Example of setting activity status and recording exceptions during error handling.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nprivate int rollOnce()\n{\n    using (var childActivity = activitySource.StartActivity(\"rollOnce\"))\n    {\n        int result;\n\n        try\n        {\n            result = Random.Shared.Next(min, max + 1);\n            childActivity?.SetTag(\"dicelib.rolled\", result);\n        }\n        catch (Exception ex)\n        {\n            childActivity?.SetStatus(ActivityStatusCode.Error, \"Something bad happened!\");\n            childActivity?.RecordException(ex);\n            throw;\n        }\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Instrumentation Package to Mix Dependencies in Elixir\nDESCRIPTION: This snippet shows how to add an OpenTelemetry instrumentation library as a dependency in a Mix project's deps function. The placeholder {package} should be replaced with the specific instrumentation name needed for the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    {:opentelemetry_{package}, \"~> 1.0\"}\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Setting Vendor Credentials for OTLP Exporter in JavaScript\nDESCRIPTION: Configuration for OTLP exporter with authentication headers when using a vendor's tracing backend. This example shows how to add an Authorization header with an API key for Aspecto's collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-proto';\n// Create TracerProvider\nconst exporter = new OTLPTraceExporter({\n  url: 'https://otelcol.aspecto.io/v1/trace',\n  headers: {\n    Authorization: 'YOUR_API_KEY_HERE',\n  },\n});\nprovider.addSpanProcessor(new BatchSpanProcessor(exporter));\n```\n\n----------------------------------------\n\nTITLE: Basic Receiver Type Implementation\nDESCRIPTION: Initial implementation of the receiver type with required interface methods.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_18\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"context\"\n\t\"go.opentelemetry.io/collector/component\"\n)\n\ntype tailtracerReceiver struct {\n}\n\nfunc (tailtracerRcvr *tailtracerReceiver) Start(ctx context.Context, host component.Host) error {\n\treturn nil\n}\n\nfunc (tailtracerRcvr *tailtracerReceiver) Shutdown(ctx context.Context) error {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Instrumentation Libraries in JavaScript\nDESCRIPTION: Code to register Node.js instrumentation packages but disable specific ones (like FS instrumentation) in JavaScript. This shows how to selectively use auto-instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node');\n\nconst sdk = new NodeSDK({\n  ...\n  // This registers all instrumentation packages\n  instrumentations: [\n    getNodeAutoInstrumentations({\n      '@opentelemetry/instrumentation-fs': {\n        enabled: false,\n      },\n    }),\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a MeterProvider in JavaScript\nDESCRIPTION: JavaScript version of the MeterProvider setup with a ConsoleMetricExporter. The configuration includes resource attributes for service name and version, with periodic export of metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_46\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\nconst {\n  MeterProvider,\n  PeriodicExportingMetricReader,\n  ConsoleMetricExporter,\n} = require('@opentelemetry/sdk-metrics');\nconst {\n  defaultResource,\n  resourceFromAttributes,\n} = require('@opentelemetry/resources');\nconst {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} = require('@opentelemetry/semantic-conventions');\n\nconst resource = defaultResource().merge(\n  resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: 'service-name-here',\n    [ATTR_SERVICE_VERSION]: '0.1.0',\n  }),\n);\n\nconst metricReader = new PeriodicExportingMetricReader({\n  exporter: new ConsoleMetricExporter(),\n\n  // Default is 60000ms (60 seconds). Set to 10 seconds for demonstrative purposes only.\n  exportIntervalMillis: 10000,\n});\n\nconst myServiceMeterProvider = new MeterProvider({\n  resource: resource,\n  readers: [metricReader],\n});\n\n// Set this MeterProvider to be global to the app being instrumented.\nopentelemetry.metrics.setGlobalMeterProvider(myServiceMeterProvider);\n```\n\n----------------------------------------\n\nTITLE: Using Providers and Scopes in OpenTelemetry Java\nDESCRIPTION: This code demonstrates how to use TracerProvider, MeterProvider, and LoggerProvider to create scoped telemetry objects. It shows both the full builder pattern with all scope parameters as well as shorthand methods for simple scenarios.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.api.logs.Logger;\nimport io.opentelemetry.api.logs.LoggerProvider;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.api.metrics.MeterProvider;\nimport io.opentelemetry.api.trace.Tracer;\nimport io.opentelemetry.api.trace.TracerProvider;\n\npublic class ProvidersAndScopes {\n\n  private static final String SCOPE_NAME = \"fully.qualified.name\";\n  private static final String SCOPE_VERSION = \"1.0.0\";\n  private static final String SCOPE_SCHEMA_URL = \"https://example\";\n\n  public static void providersUsage(OpenTelemetry openTelemetry) {\n    // Access providers from an OpenTelemetry instance\n    TracerProvider tracerProvider = openTelemetry.getTracerProvider();\n    MeterProvider meterProvider = openTelemetry.getMeterProvider();\n    // NOTE: LoggerProvider is a special case and should only be used to bridge logs from other\n    // logging APIs / frameworks into OpenTelemetry.\n    LoggerProvider loggerProvider = openTelemetry.getLogsBridge();\n\n    // Access tracer, meter, logger from providers to record telemetry for a particular scope\n    Tracer tracer =\n        tracerProvider\n            .tracerBuilder(SCOPE_NAME)\n            .setInstrumentationVersion(SCOPE_VERSION)\n            .setSchemaUrl(SCOPE_SCHEMA_URL)\n            .build();\n    Meter meter =\n        meterProvider\n            .meterBuilder(SCOPE_NAME)\n            .setInstrumentationVersion(SCOPE_VERSION)\n            .setSchemaUrl(SCOPE_SCHEMA_URL)\n            .build();\n    Logger logger =\n        loggerProvider\n            .loggerBuilder(SCOPE_NAME)\n            .setInstrumentationVersion(SCOPE_VERSION)\n            .setSchemaUrl(SCOPE_SCHEMA_URL)\n            .build();\n\n    // ...optionally, shorthand versions are available if scope version and schemaUrl aren't\n    // available\n    tracer = tracerProvider.get(SCOPE_NAME);\n    meter = meterProvider.get(SCOPE_NAME);\n    logger = loggerProvider.get(SCOPE_NAME);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing AutoConfigured OpenTelemetry SDK in Java\nDESCRIPTION: Demonstrates how to programmatically customize the OpenTelemetry SDK by extending various components such as propagators, resources, samplers, exporters, and processors. This approach provides hooks to supplement the supported properties with programmatic configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.OpenTelemetrySdk;\nimport io.opentelemetry.sdk.autoconfigure.AutoConfiguredOpenTelemetrySdk;\nimport java.util.Collections;\n\npublic class CustomizedAutoConfiguredSdk {\n  public static OpenTelemetrySdk autoconfiguredSdk() {\n    return AutoConfiguredOpenTelemetrySdk.builder()\n        // Optionally customize TextMapPropagator.\n        .addPropagatorCustomizer((textMapPropagator, configProperties) -> textMapPropagator)\n        // Optionally customize Resource.\n        .addResourceCustomizer((resource, configProperties) -> resource)\n        // Optionally customize Sampler.\n        .addSamplerCustomizer((sampler, configProperties) -> sampler)\n        // Optionally customize SpanExporter.\n        .addSpanExporterCustomizer((spanExporter, configProperties) -> spanExporter)\n        // Optionally customize SpanProcessor.\n        .addSpanProcessorCustomizer((spanProcessor, configProperties) -> spanProcessor)\n        // Optionally supply additional properties.\n        .addPropertiesSupplier(Collections::emptyMap)\n        // Optionally customize ConfigProperties.\n        .addPropertiesCustomizer(configProperties -> Collections.emptyMap())\n        // Optionally customize SdkTracerProviderBuilder.\n        .addTracerProviderCustomizer((builder, configProperties) -> builder)\n        // Optionally customize SdkMeterProviderBuilder.\n        .addMeterProviderCustomizer((builder, configProperties) -> builder)\n        // Optionally customize MetricExporter.\n        .addMetricExporterCustomizer((metricExporter, configProperties) -> metricExporter)\n        // Optionally customize MetricReader.\n        .addMetricReaderCustomizer((metricReader, configProperties) -> metricReader)\n        // Optionally customize SdkLoggerProviderBuilder.\n        .addLoggerProviderCustomizer((builder, configProperties) -> builder)\n        // Optionally customize LogRecordExporter.\n        .addLogRecordExporterCustomizer((logRecordExporter, configProperties) -> logRecordExporter)\n        // Optionally customize LogRecordProcessor.\n        .addLogRecordProcessorCustomizer((processor, configProperties) -> processor)\n        .build()\n        .getOpenTelemetrySdk();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector on Kubernetes\nDESCRIPTION: Command to deploy the OpenTelemetry Collector as a daemonset and a single gateway instance on Kubernetes using a pre-defined configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply -f https://raw.githubusercontent.com/open-telemetry/opentelemetry-collector/v{{% param vers %}}/examples/k8s/otel-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP Request to Trigger Error in Spring PetClinic\nDESCRIPTION: This shell command sends an HTTP GET request to the '/oups' endpoint of the Spring PetClinic application running on localhost:8080. This request is designed to trigger an error response for demonstration purposes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8080/oups\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Constants in Go\nDESCRIPTION: Defines constant values for the connector's default value and type identifier used in configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nconst (\n    defaultVal = \"request.n\"\n    // this is the name used to refer to the connector in the config.yaml\n    typeStr = \"example\"\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing RestClient Controller\nDESCRIPTION: Example of a Spring RestController using RestClient.Builder to create an instrumented RestClient instance with a base URL.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestClient;\n\n@RestController\npublic class RestClientController {\n\n  private final RestClient restClient;\n\n  public RestClientController(RestClient.Builder restClientBuilder) {\n    restClient = restClientBuilder.baseUrl(\"http://localhost:8080\").build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Metric Views to MeterProvider in JavaScript with OpenTelemetry\nDESCRIPTION: Demonstrates how to attach configured metric views to a MeterProvider. This step is necessary to apply the custom views to the metrics collection process.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nconst meterProvider = new MeterProvider({\n  views: [limitAttributesView, dropView, histogramView],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Console Logs Exporter in Go OpenTelemetry (Experimental)\nDESCRIPTION: Example of how to create an experimental console logs exporter with default settings. This implementation uses the stdoutlog package to output log data to the console for development.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdoutlog\"\n\t\"go.opentelemetry.io/otel/sdk/log\"\n)\n\nfunc newExporter() (log.Exporter, error) {\n\treturn stdoutlog.New()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporter\nDESCRIPTION: Development configuration for OpenTelemetry to use stdout exporter for trace output verification.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: elixir\nCODE:\n```\nconfig :opentelemetry, traces_exporter: {:otel_exporter_stdout, []}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Traces\nDESCRIPTION: This YAML configuration sets up an OpenTelemetry collector to receive traces via OTLP and export them to Jaeger. It defines receivers, processors, exporters, and a pipeline for trace data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/agent.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: 0.0.0.0:4318\n\nprocessors:\n  batch:\n\nexporters:\n  otlp/jaeger:\n    endpoint: https://jaeger.example.com:4317\n\nservice:\n  pipelines:\n    traces/dev:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/jaeger]\n```\n\n----------------------------------------\n\nTITLE: Serving the OpenTelemetry.io Website Locally\nDESCRIPTION: Command to serve the OpenTelemetry.io website locally for development. The site will be available at localhost:1313.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/development.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run serve\n```\n\n----------------------------------------\n\nTITLE: NuGet Package Installation Error for .NET Framework\nDESCRIPTION: Error message when attempting to install OpenTelemetry.AutoInstrumentation.Runtime.Native package in a project targeting an older .NET Framework version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/troubleshooting.md#2025-04-09_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nCould not install package 'OpenTelemetry.AutoInstrumentation.Runtime.Native 1.6.0'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.7.2', but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.\n```\n\n----------------------------------------\n\nTITLE: Configuring Extensions in OpenTelemetry Collector YAML\nDESCRIPTION: This snippet shows how to configure extensions in the OpenTelemetry Collector. It demonstrates the configuration of health_check, pprof, and zpages extensions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  health_check:\n  pprof:\n  zpages:\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Attributes with Environment Variable\nDESCRIPTION: Defines resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable. This example sets the deployment environment to development.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/resources.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_RESOURCE_ATTRIBUTES=\"deployment.environment=development\"\n```\n\n----------------------------------------\n\nTITLE: Using Observable UpDown Counters in Go with OpenTelemetry\nDESCRIPTION: This code snippet shows how to use an Observable UpDown Counter to measure database metrics in a Go application using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_18\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\t\"database/sql\"\n\n\t\"go.opentelemetry.io/otel/metric\"\n)\n\n// registerDBMetrics registers asynchronous metrics for the provided db.\n// Make sure to unregister metric.Registration before closing the provided db.\nfunc registerDBMetrics(db *sql.DB, meter metric.Meter, poolName string) (metric.Registration, error) {\n\tmax, err := meter.Int64ObservableUpDownCounter(\n\t\t\"db.client.connections.max\",\n\t\tmetric.WithDescription(\"The maximum number of open connections allowed.\"),\n\t\tmetric.WithUnit(\"{connection}\"),\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\twaitTime, err := meter.Int64ObservableUpDownCounter(\n\t\t\"db.client.connections.wait_time\",\n\t\tmetric.WithDescription(\"The time it took to obtain an open connection from the pool.\"),\n\t\tmetric.WithUnit(\"ms\"),\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treg, err := meter.RegisterCallback(\n\t\tfunc(_ context.Context, o metric.Observer) error {\n\t\t\tstats := db.Stats()\n\t\t\to.ObserveInt64(max, int64(stats.MaxOpenConnections))\n\t\t\to.ObserveInt64(waitTime, int64(stats.WaitDuration))\n\t\t\treturn nil\n\t\t},\n\t\tmax,\n\t\twaitTime,\n\t)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn reg, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Detectors with Environment Variable\nDESCRIPTION: Configures resource detectors using the OTEL_RESOURCE_DETECTORS environment variable instead of application configuration. This method works for both Erlang and Elixir applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/resources.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_RESOURCE_DETECTORS=otel_resource_env_var,otel_resource_app_env\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Annotations Dependency - Maven Configuration\nDESCRIPTION: Maven dependency configuration for adding opentelemetry-instrumentation-annotations library to enable @WithSpan annotation usage.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/annotations.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-instrumentation-annotations</artifactId>\n    <version>{{% param vers.instrumentation %}}</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry API Dependency with Maven\nDESCRIPTION: XML configuration for adding the OpenTelemetry API dependency to a Maven project. This dependency is required to use the OpenTelemetry API for manual instrumentation with the Java agent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/api.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-api</artifactId>\n    <version>{{% param vers.otel %}}</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Creating a Dice Rolling Library in PHP\nDESCRIPTION: Implementation of a simple dice rolling library in PHP that will be used as a dependency by the main application. The class provides methods to roll dice multiple times.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nclass Dice {\n\n    private $tracer;\n\n    function __construct() {\n    }\n\n    public function roll($rolls) {\n        $result = [];\n        for ($i = 0; $i < $rolls; $i++) {\n            $result[] = $this->rollOnce();\n        }\n        return $result;\n    }\n\n    private function rollOnce() {\n      $result = random_int(1, 6);\n      return $result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Packages for Node.js\nDESCRIPTION: Commands to install the required OpenTelemetry packages for zero-code instrumentation. Installs both the API and auto-instrumentation packages for Node.js.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/js/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/api\nnpm install --save @opentelemetry/auto-instrumentations-node\n```\n\n----------------------------------------\n\nTITLE: Configuring Java OpenTelemetry Instrumentation Environment Variables\nDESCRIPTION: Example of setting environment variables to enable specific instrumentations for Java in AWS Lambda, reducing startup time by disabling default auto-instrumentation and enabling only Lambda and AWS SDK instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/faas/lambda-auto-instrument.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nOTEL_INSTRUMENTATION_COMMON_DEFAULT_ENABLED=false\nOTEL_INSTRUMENTATION_AWS_LAMBDA_ENABLED=true\nOTEL_INSTRUMENTATION_AWS_SDK_ENABLED=true\n```\n\n----------------------------------------\n\nTITLE: Initial trace generation function in Go\nDESCRIPTION: Function to generate traces using OpenTelemetry's ptrace package. Creates instances of ATM and backend system objects that will act as telemetry sources for the traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_31\n\nLANGUAGE: go\nCODE:\n```\nfunc generateTraces(numberOfTraces int) ptrace.Traces{\n\ttraces := ptrace.NewTraces()\n\n\tfor i := 0; i <= numberOfTraces; i++{\n\t\tnewAtm := generateAtm()\n\t\tnewBackendSystem := generateBackendSystem()\n\t}\n\n\treturn traces\n}\n```\n\n----------------------------------------\n\nTITLE: Shared Exporter Pipeline Flow\nDESCRIPTION: Mermaid diagram showing how multiple pipelines can feed into a single shared exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  M1[...] ~~~ P1[\"\\\"memory_limiter\\\" Processor\"]\n  M2[...] ~~~ P2[\"\\\"transform\\\" Processor\"]\n  P1 -->|Pipeline 'traces'|E1[[\"\\\"otlp\\\" Exporter\"]]\n  P2 -->|Pipeline 'traces/2'|E1\n```\n\n----------------------------------------\n\nTITLE: Creating a new ASP.NET Core Web Project with .NET CLI\nDESCRIPTION: Command to create a new ASP.NET Core web application using the .NET CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet new web\n```\n\n----------------------------------------\n\nTITLE: Verificación de remotes en Git\nDESCRIPTION: Comando de shell para verificar que los repositorios remotos 'origin' y 'upstream' estén correctamente configurados en el repositorio local.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -v\n```\n\n----------------------------------------\n\nTITLE: Configuring WebClient Bean in Spring Java\nDESCRIPTION: This code snippet demonstrates how to create a WebClient bean in a Spring configuration class. It uses WebClient.create() to instantiate a new WebClient instance.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@Configuration\npublic class WebClientConfig {\n\n  @Bean\n  public WebClient webClient() {\n    return WebClient.create();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceIDRatioBasedSampler in Node.js (JavaScript)\nDESCRIPTION: This snippet demonstrates how to configure the TraceIDRatioBasedSampler in Node.js using JavaScript. It sets up the sampler to collect 10% of traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/sampling.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { TraceIdRatioBasedSampler } = require('@opentelemetry/sdk-trace-node');\n\nconst samplePercentage = 0.1;\n\nconst sdk = new NodeSDK({\n  // Other SDK configuration parameters go here\n  sampler: new TraceIdRatioBasedSampler(samplePercentage),\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Guzzle for HTTP Client Requirements\nDESCRIPTION: Shell command to install Guzzle, which satisfies the PSR HTTP client and factory implementation requirements for the OpenTelemetry SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require guzzlehttp/guzzle\n```\n\n----------------------------------------\n\nTITLE: Running Python Code with OpenTelemetry Auto-instrumentation\nDESCRIPTION: Command to execute the Python script with OpenTelemetry auto-instrumentation, which automatically applies the configuration from the distro package.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/distro.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nopentelemetry-instrument python no_configuration.py\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Custom Config\nDESCRIPTION: This command shows how to run the OpenTelemetry Collector with a custom configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\notelcol --config=customconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LogRecordExporter in OpenTelemetry Java SDK\nDESCRIPTION: This code snippet shows how to implement a custom LogRecordExporter by implementing the LogRecordExporter interface. It demonstrates the export, flush, and shutdown methods required for a custom exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_20\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.common.CompletableResultCode;\nimport io.opentelemetry.sdk.logs.data.LogRecordData;\nimport io.opentelemetry.sdk.logs.export.LogRecordExporter;\nimport java.util.Collection;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class CustomLogRecordExporter implements LogRecordExporter {\n\n  private static final Logger logger = Logger.getLogger(CustomLogRecordExporter.class.getName());\n\n  @Override\n  public CompletableResultCode export(Collection<LogRecordData> logs) {\n    // Export the records. Typically, records are sent out of process via some network protocol, but\n    // we simply log for illustrative purposes.\n    System.out.println(\"Exporting logs\");\n    logs.forEach(log -> System.out.println(\"log record: \" + log));\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode flush() {\n    // Export any records which have been queued up but not yet exported.\n    logger.log(Level.INFO, \"flushing\");\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode shutdown() {\n    // Shutdown the exporter and cleanup any resources.\n    logger.log(Level.INFO, \"shutting down\");\n    return CompletableResultCode.ofSuccess();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ActivitySource in C# with Custom Instrumentation Class\nDESCRIPTION: Creates a custom Instrumentation class to manage ActivitySource instances for tracing. Implements IDisposable to properly cleanup resources.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Diagnostics;\n\n/// <summary>\n/// It is recommended to use a custom type to hold references for ActivitySource.\n/// This avoids possible type collisions with other components in the DI container.\n/// </summary>\npublic class Instrumentation : IDisposable\n{\n    internal const string ActivitySourceName = \"dice-server\";\n    internal const string ActivitySourceVersion = \"1.0.0\";\n\n    public Instrumentation()\n    {\n        this.ActivitySource = new ActivitySource(ActivitySourceName, ActivitySourceVersion);\n    }\n\n    public ActivitySource ActivitySource { get; }\n\n    public void Dispose()\n    {\n        this.ActivitySource.Dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Semantic Conventions Package for OpenTelemetry\nDESCRIPTION: Command to install the semantic conventions package for OpenTelemetry, which provides standardized attribute keys for common operations and entities.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_31\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/semantic-conventions\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Instrumented Function in Erlang\nDESCRIPTION: Example Erlang function with OpenTelemetry instrumentation that creates a span around an operation and sets an attribute. This serves as sample code for testing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\n%% apps/otel_getting_started/src/otel_getting_started.erl\n-module(otel_getting_started).\n\n-export([hello/0]).\n\n-include_lib(\"opentelemetry_api/include/otel_tracer.hrl\").\n\nhello() ->\n    %% start an active span and run a local function\n    ?with_span(<<\"operation\">>, #{}, fun nice_operation/1).\n\nnice_operation(_SpanCtx) ->\n    ?set_attributes([{a_key, <<\"a value\">>}]),\n    world\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Attributes in Erlang/Elixir\nDESCRIPTION: Demonstrates the use of standardized OpenTelemetry semantic conventions for attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: erlang\nCODE:\n```\n-include_lib(\"opentelemetry_semantic_conventions/include/trace.hrl\").\n\n?with_span(my_span, #{attributes => [{?HTTP_SCHEME, <<\"https\">>}]},\n           fun() ->\n             ...\n           end)\n```\n\nLANGUAGE: elixir\nCODE:\n```\nalias OpenTelemetry.SemanticConventions.Trace, as: Trace\n\nTracer.with_span :span_1, %{attributes: [{Trace.http_scheme(), <<\"https\">>}]} do\n\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Log Records with OpenTelemetry in Python\nDESCRIPTION: Demonstrates how to create log records using the standard Python logging interface, which automatically includes trace and span IDs for correlation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nlogger.info(f\"Receive ListRecommendations for product ids:{prod_list}\")\n```\n\n----------------------------------------\n\nTITLE: Advanced OpenTelemetry Collector Configuration with Multiple Components\nDESCRIPTION: This YAML configuration demonstrates how to define multiple components of the same type with unique identifiers in the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\n  otlp/2:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:55690\n\nprocessors:\n  batch:\n  batch/test:\n\nexporters:\n  otlp:\n    endpoint: otelcol:4317\n  otlp/2:\n    endpoint: otelcol2:4317\n\nextensions:\n  health_check:\n  pprof:\n  zpages:\n\nservice:\n  extensions: [health_check, pprof, zpages]\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n    traces/2:\n      receivers: [otlp/2]\n      processors: [batch/test]\n      exporters: [otlp/2]\n    metrics:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n    logs:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Receiver with Target Allocator\nDESCRIPTION: This YAML snippet shows how to configure the Prometheus receiver in the OpenTelemetry Collector to use the Target Allocator. It specifies the scrape configs and target allocator settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  prometheus:\n    config:\n      scrape_configs:\n        - job_name: 'otel-collector'\n          scrape_interval: 30s\n          static_configs:\n            - targets: ['0.0.0.0:8888']\n    target_allocator:\n      endpoint: http://otelcol-targetallocator\n      interval: 30s\n      collector_id: '${POD_NAME}'\n```\n\n----------------------------------------\n\nTITLE: Filtering Telemetrygen Output with Grep\nDESCRIPTION: Command that generates traces with telemetrygen while using grep to filter the output to only show relevant information about trace generation process.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/quick-start.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n$GOBIN/telemetrygen traces --otlp-insecure \\\n  --traces 3 2>&1 | grep -E 'start|traces|stop'\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Environment Variables for OpenAI Monitoring\nDESCRIPTION: Environment variable configuration for OpenTelemetry to enable monitoring of OpenAI API calls, including endpoint settings and content capture options.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-generative-ai/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOPENAI_API_KEY=<replace_with_your_openai_api_key>\n\nOTEL_EXPORTER_OTLP_ENDPOINT=http://localhost:4318\nOTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nOTEL_SERVICE_NAME=python-opentelemetry-openai\nOTEL_LOGS_EXPORTER=otlp_proto_http\nOTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true\n# Set to false or remove to disable log events\nOTEL_INSTRUMENTATION_GENAI_CAPTURE_MESSAGE_CONTENT=true\n```\n\n----------------------------------------\n\nTITLE: Configuring Logback with OpenTelemetry Appender\nDESCRIPTION: XML configuration for setting up Logback with OpenTelemetry instrumentation. Includes console and OpenTelemetry appenders with various attribute capture options.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n    <appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\">\n        <encoder>\n            <pattern>\n                %d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n\n            </pattern>\n        </encoder>\n    </appender>\n    <appender name=\"OpenTelemetry\"\n        class=\"io.opentelemetry.instrumentation.logback.appender.v1_0.OpenTelemetryAppender\">\n        <captureExperimentalAttributes>false</captureExperimentalAttributes>\n        <captureCodeAttributes>true</captureCodeAttributes>\n        <captureMarkerAttribute>true</captureMarkerAttribute>\n        <captureKeyValuePairAttributes>true</captureKeyValuePairAttributes>\n        <captureLoggerContext>true</captureLoggerContext>\n        <captureMdcAttributes>*</captureMdcAttributes>\n    </appender>\n    <root level=\"INFO\">\n        <appender-ref ref=\"console\"/>\n        <appender-ref ref=\"OpenTelemetry\"/>\n    </root>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Initializing Logging with OpenTelemetry in Python\nDESCRIPTION: Sets up a logger provider with a resource, adds a batch processor with OTLP exporter, and configures a logging handler to enable correlation between logs and traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nlogger_provider = LoggerProvider(\n    resource=Resource.create(\n        {\n            'service.name': service_name,\n        }\n    ),\n)\nset_logger_provider(logger_provider)\nlog_exporter = OTLPLogExporter(insecure=True)\nlogger_provider.add_log_record_processor(BatchLogRecordProcessor(log_exporter))\nhandler = LoggingHandler(level=logging.NOTSET, logger_provider=logger_provider)\n\nlogger = logging.getLogger('main')\nlogger.addHandler(handler)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry SDK in Ruby\nDESCRIPTION: Initialize the OpenTelemetry SDK and set up a global tracer provider with a service name.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\nOpenTelemetry::SDK.configure do |c|\n  c.service_name = '<YOUR_SERVICE_NAME>'\nend\n\n# 'Tracer' can be used throughout your code now\nMyAppTracer = OpenTelemetry.tracer_provider.tracer('<YOUR_TRACER_NAME>')\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Packages for Console App\nDESCRIPTION: Commands to add required OpenTelemetry packages for a console application using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry in Dockerfile\nDESCRIPTION: Docker configuration to start the Node.js application with OpenTelemetry initialization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/payment.md#2025-04-09_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nENTRYPOINT [ \"node\", \"--require\", \"./opentelemetry.js\", \"./index.js\" ]\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Kafka Broker Metrics in YAML\nDESCRIPTION: Example YAML configuration showing how to define custom JMX metric collection for Kafka broker message counts. The configuration specifies the MBean object name, attribute mapping, metric name, type, description and unit of measurement.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\nrules:\n  - bean: kafka.server:type=BrokerTopicMetrics,name=MessagesInPerSec\n    mapping:\n      Count:\n        metric: kafka.message.count\n        type: counter\n        desc: The number of messages received by the broker\n        unit: '{messages}'\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceIdRatioBasedSampler with Environment Variables\nDESCRIPTION: Sets up trace sampling with environment variables to sample 10% of traces using parentbased_traceidratio sampler.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/sampling.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_TRACES_SAMPLER=\"parentbased_traceidratio\"\nexport OTEL_TRACES_SAMPLER_ARG=\"0.1\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dockerfile for Node.js Frontend with OpenTelemetry\nDESCRIPTION: Dockerfile for the Node.js frontend service that installs necessary OpenTelemetry dependencies, copies the application code, and exposes the service port.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:16\nWORKDIR /app\nRUN npm install @opentelemetry/api @opentelemetry/auto-instrumentations-node @opentelemetry/exporter-trace-otlp-http @opentelemetry/sdk-node express\nCOPY app.js .\nEXPOSE 8000\nCMD [ \"node\", \"app.js\" ]\n```\n\n----------------------------------------\n\nTITLE: Kubernetes DaemonSet Configuration for OpenTelemetry Collector\nDESCRIPTION: This Kubernetes configuration deploys the OpenTelemetry Collector as a DaemonSet, exposing OTLP gRPC and HTTP ports, and using the Downward API to get the pod's IP address.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: collector\nspec:\n  selector:\n    matchLabels:\n      name: collector\n  template:\n    metadata:\n      labels:\n        name: collector\n    spec:\n      containers:\n        - name: collector\n          image: otel/opentelemetry-collector:{{% param collector_vers %}}\n          ports:\n            - containerPort: 4317\n              hostPort: 4317\n              protocol: TCP\n              name: otlp-grpc\n            - containerPort: 4318\n              hostPort: 4318\n              protocol: TCP\n              name: otlp-http\n          env:\n            - name: MY_POD_IP\n              valueFrom:\n                fieldRef:\n                  fieldPath: status.podIP\n```\n\n----------------------------------------\n\nTITLE: Generating Language Sampling Links Using Hugo Templates\nDESCRIPTION: Iterates through site instrumentation data to generate links to language-specific sampling documentation. Uses Hugo templating to build relative links with language names from the data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/sampling-support-list.md#2025-04-09_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{- range $lang, $data := $.Site.Data.instrumentation }}\n  {{- $path := printf \"/docs/languages/%s/sampling.md\" $lang }}\n  {{- with site.GetPage $path }}\n    {{- template \"list-item\" (dict \"name\" $data.name \"page\" .) }}\n  {{- end }}\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Instrumentation in JavaScript\nDESCRIPTION: Sets up OpenTelemetry instrumentation in JavaScript with console exporters for both traces and metrics. Uses auto-instrumentation to automatically capture spans from Express and other libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\n// Require dependencies\nconst { NodeSDK } = require('@opentelemetry/sdk-node');\nconst { ConsoleSpanExporter } = require('@opentelemetry/sdk-trace-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\nconst {\n  PeriodicExportingMetricReader,\n  ConsoleMetricExporter,\n} = require('@opentelemetry/sdk-metrics');\n\nconst sdk = new NodeSDK({\n  traceExporter: new ConsoleSpanExporter(),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new ConsoleMetricExporter(),\n  }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Exporter for OpenTelemetry Go\nDESCRIPTION: Command to install the Jaeger exporter for OpenTelemetry Go using the go get command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/otel/exporters/jaeger\n```\n\n----------------------------------------\n\nTITLE: CSR Configuration for TLS Certificates (JSON)\nDESCRIPTION: JSON configuration for generating self-signed certificates using cfssl. This defines the hosts, key algorithm, and organization name for the certificate.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hosts\": [\"localhost\", \"127.0.0.1\"],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"O\": \"OpenTelemetry Example\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Meter Provider in Go\nDESCRIPTION: Sets up the OpenTelemetry MeterProvider with OTLP exporter for sending metrics over gRPC, configuring a periodic reader for batched export.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nfunc initMeterProvider() *sdkmetric.MeterProvider {\n    ctx := context.Background()\n\n    exporter, err := otlpmetricgrpc.New(ctx)\n    if err != nil {\n        log.Fatalf(\"new otlp metric grpc exporter failed: %v\", err)\n    }\n\n    mp := sdkmetric.NewMeterProvider(sdkmetric.WithReader(sdkmetric.NewPeriodicReader(exporter)))\n    global.SetMeterProvider(mp)\n    return mp\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Propagators in Erlang\nDESCRIPTION: This code snippet shows how to configure global propagators using the OTP application environment variable 'text_map_propagators' in Erlang's sys.config file. It sets up both baggage and trace_context propagators.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/propagation.md#2025-04-09_snippet_0\n\nLANGUAGE: erlang\nCODE:\n```\n%% sys.config\n...\n{text_map_propagators, [baggage,\n                        trace_context]},\n...\n```\n\n----------------------------------------\n\nTITLE: Linking Spans in Erlang/Elixir\nDESCRIPTION: Demonstrates how to create linked spans across different processes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: erlang\nCODE:\n```\nParent = ?current_span_ctx,\nproc_lib:spawn_link(fun() ->\n                        %% a new process has a new context so the span created\n                        %% by the following `with_span` will have no parent\n                        Link = opentelemetry:link(Parent),\n                        ?with_span('other-process', #{links => [Link]},\n                                   fun() -> ok end)\n                    end),\n```\n\nLANGUAGE: elixir\nCODE:\n```\nparent = OpenTelemetry.Tracer.current_span_ctx()\ntask = Task.async(fn ->\n                    # a new process has a new context so the span created\n                    # by the following `with_span` will have no parent\n                    link = OpenTelemetry.link(parent)\n                    Tracer.with_span :\"my-task\", %{links: [link]} do\n                      :hello\n                    end\n                 end)\n```\n\n----------------------------------------\n\nTITLE: Generating Trace and Span IDs\nDESCRIPTION: Helper functions to generate unique trace IDs and span IDs using UUID and crypto/rand packages respectively.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_39\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\tcrand \"crypto/rand\"\n\t\"math/rand\"\n  \t...\n)\n\nfunc NewTraceID() pcommon.TraceID {\n\treturn pcommon.TraceID(uuid.New())\n}\n\nfunc NewSpanID() pcommon.SpanID {\n\tvar rngSeed int64\n\t_ = binary.Read(crand.Reader, binary.LittleEndian, &rngSeed)\n\trandSource := rand.New(rand.NewSource(rngSeed))\n\n\tvar sid [8]byte\n\trandSource.Read(sid[:])\n\tspanID := pcommon.SpanID(sid)\n\n\treturn spanID\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration with File Inclusion\nDESCRIPTION: This YAML configuration shows how to include other files in the OpenTelemetry Collector configuration, demonstrating file merging.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nexporters: ${file:exporters.yaml}\n\nservice:\n  extensions: []\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: []\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Configuring B3 Propagation Format\nDESCRIPTION: Example of how to change the context propagation format from the default W3C Trace Context to B3 format used by Zipkin.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-propagator-b3\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.propagate import set_global_textmap\nfrom opentelemetry.propagators.b3 import B3Format\n\nset_global_textmap(B3Format())\n```\n\n----------------------------------------\n\nTITLE: Recording Span Exceptions in OpenTelemetry\nDESCRIPTION: Demonstrates error handling and status setting in OpenTelemetry spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/payment.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nspan.recordException(err);\nspan.setStatus({ code: opentelemetry.SpanStatusCode.ERROR });\n```\n\n----------------------------------------\n\nTITLE: Configuring SdkTracerProvider in Java\nDESCRIPTION: Demonstrates the setup of SdkTracerProvider with custom resource, span processor, sampler, and span limits for trace telemetry handling.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.resources.Resource;\nimport io.opentelemetry.sdk.trace.SdkTracerProvider;\n\npublic class SdkTracerProviderConfig {\n  public static SdkTracerProvider create(Resource resource) {\n    return SdkTracerProvider.builder()\n        .setResource(resource)\n        .addSpanProcessor(\n            SpanProcessorConfig.batchSpanProcessor(\n                SpanExporterConfig.otlpHttpSpanExporter(\"http://localhost:4318/v1/spans\")))\n        .setSampler(SamplerConfig.parentBasedSampler(SamplerConfig.traceIdRatioBased(.25)))\n        .setSpanLimits(SpanLimitsConfig::spanLimits)\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Implementation of Resource Attribute Population in Go\nDESCRIPTION: This snippet shows the full implementation of the tailtracer/model.go file, including struct definitions, helper functions, and the main generateTraces function that creates and populates Resource attributes for ATM and BackendSystem entities.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_35\n\nLANGUAGE: Go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/collector/pdata/pcommon\"\n\t\"go.opentelemetry.io/collector/pdata/ptrace\"\n\tconventions \"go.opentelemetry.io/collector/semconv/v1.9.0\"\n)\n\ntype Atm struct {\n\tID           int64\n\tVersion      string\n\tName         string\n\tStateID      string\n\tSerialNumber string\n\tISPNetwork   string\n}\n\ntype BackendSystem struct {\n\tVersion       string\n\tProcessName   string\n\tOSType        string\n\tOSVersion     string\n\tCloudProvider string\n\tCloudRegion   string\n\tEndpoint      string\n}\n\nfunc generateAtm() Atm {\n\ti := getRandomNumber(1, 2)\n\tvar newAtm Atm\n\n\tswitch i {\n\tcase 1:\n\t\tnewAtm = Atm{\n\t\t\tID:           111,\n\t\t\tName:         \"ATM-111-IL\",\n\t\t\tSerialNumber: \"atmxph-2022-111\",\n\t\t\tVersion:      \"v1.0\",\n\t\t\tISPNetwork:   \"comcast-chicago\",\n\t\t\tStateID:      \"IL\",\n\t\t}\n\n\tcase 2:\n\t\tnewAtm = Atm{\n\t\t\tID:           222,\n\t\t\tName:         \"ATM-222-CA\",\n\t\t\tSerialNumber: \"atmxph-2022-222\",\n\t\t\tVersion:      \"v1.0\",\n\t\t\tISPNetwork:   \"comcast-sanfrancisco\",\n\t\t\tStateID:      \"CA\",\n\t\t}\n\t}\n\n\treturn newAtm\n}\n\nfunc generateBackendSystem() BackendSystem {\n\ti := getRandomNumber(1, 3)\n\n\tnewBackend := BackendSystem{\n\t\tProcessName:   \"accounts\",\n\t\tVersion:       \"v2.5\",\n\t\tOSType:        \"lnx\",\n\t\tOSVersion:     \"4.16.10-300.fc28.x86_64\",\n\t\tCloudProvider: \"amzn\",\n\t\tCloudRegion:   \"us-east-2\",\n\t}\n\n\tswitch i {\n\tcase 1:\n\t\tnewBackend.Endpoint = \"api/v2.5/balance\"\n\tcase 2:\n\t\tnewBackend.Endpoint = \"api/v2.5/deposit\"\n\tcase 3:\n\t\tnewBackend.Endpoint = \"api/v2.5/withdrawn\"\n\t}\n\n\treturn newBackend\n}\n\nfunc getRandomNumber(min int, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\ti := (rand.Intn(max-min+1) + min)\n\treturn i\n}\n\nfunc generateTraces(numberOfTraces int) ptrace.Traces {\n\ttraces := ptrace.NewTraces()\n\n\tfor i := 0; i <= numberOfTraces; i++ {\n\t\tnewAtm := generateAtm()\n\t\tnewBackendSystem := generateBackendSystem()\n\n\t\tresourceSpan := traces.ResourceSpans().AppendEmpty()\n\t\tatmResource := resourceSpan.Resource()\n\t\tfillResourceWithAtm(&atmResource, newAtm)\n\n\t\tresourceSpan = traces.ResourceSpans().AppendEmpty()\n\t\tbackendResource := resourceSpan.Resource()\n\t\tfillResourceWithBackendSystem(&backendResource, newBackendSystem)\n\t}\n\n\treturn traces\n}\n\nfunc fillResourceWithAtm(resource *pcommon.Resource, atm Atm) {\n\tatmAttrs := resource.Attributes()\n\tatmAttrs.PutInt(\"atm.id\", atm.ID)\n\tatmAttrs.PutStr(\"atm.stateid\", atm.StateID)\n\tatmAttrs.PutStr(\"atm.ispnetwork\", atm.ISPNetwork)\n\tatmAttrs.PutStr(\"atm.serialnumber\", atm.SerialNumber)\n\tatmAttrs.PutStr(conventions.AttributeServiceName, atm.Name)\n\tatmAttrs.PutStr(conventions.AttributeServiceVersion, atm.Version)\n\n}\n\nfunc fillResourceWithBackendSystem(resource *pcommon.Resource, backend BackendSystem) {\n\tbackendAttrs := resource.Attributes()\n\tvar osType, cloudProvider string\n\n\tswitch {\n\tcase backend.CloudProvider == \"amzn\":\n\t\tcloudProvider = conventions.AttributeCloudProviderAWS\n\tcase backend.OSType == \"mcrsft\":\n\t\tcloudProvider = conventions.AttributeCloudProviderAzure\n\tcase backend.OSType == \"gogl\":\n\t\tcloudProvider = conventions.AttributeCloudProviderGCP\n\t}\n\n\tbackendAttrs.PutStr(conventions.AttributeCloudProvider, cloudProvider)\n\tbackendAttrs.PutStr(conventions.AttributeCloudRegion, backend.CloudRegion)\n\n\tswitch {\n\tcase backend.OSType == \"lnx\":\n\t\tosType = conventions.AttributeOSTypeLinux\n\tcase backend.OSType == \"wndws\":\n\t\tosType = conventions.AttributeOSTypeWindows\n\tcase backend.OSType == \"slrs\":\n\t\tosType = conventions.AttributeOSTypeSolaris\n\t}\n\n\tbackendAttrs.PutStr(conventions.AttributeOSType, osType)\n\tbackendAttrs.PutStr(conventions.AttributeOSVersion, backend.OSVersion)\n\n\tbackendAttrs.PutStr(conventions.AttributeServiceName, backend.ProcessName)\n\tbackendAttrs.PutStr(conventions.AttributeServiceVersion, backend.Version)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TelemetryHttpModule in Web.Config for ASP.NET\nDESCRIPTION: Modifies the Web.Config file to add the required HttpModule for OpenTelemetry ASP.NET instrumentation. This configuration is necessary for integrating OpenTelemetry with ASP.NET applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/netframework.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<system.webServer>\n    <modules>\n        <add\n            name=\"TelemetryHttpModule\"\n            type=\"OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule,\n                OpenTelemetry.Instrumentation.AspNet.TelemetryHttpModule\"\n            preCondition=\"integratedMode,managedHandler\" />\n    </modules>\n</system.webServer>\n```\n\n----------------------------------------\n\nTITLE: Configuring OTTL with Basic Context Inference in YAML\nDESCRIPTION: Example YAML configuration using the new basic context inference style, which simplifies configuration by automatically selecting appropriate contexts from prefixed paths.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/ottl-contexts-just-got-easier.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nmetric_statements:\n  - keep_keys(resource.attributes, [\"host.name\"])\n  - set(metric.description, \"Sum\") where metric.type == \"Sum\"\n  - convert_sum_to_gauge() where metric.name == \"system.processes.count\"\n  - limit(datapoint.attributes, 100, [\"host.name\"])\n```\n\n----------------------------------------\n\nTITLE: Initialize Composer Dependencies\nDESCRIPTION: Shell commands to create a new Composer project with Slim Framework dependencies.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncomposer init \\\n  --no-interaction \\\n  --require slim/slim:\"^4\" \\\n  --require slim/psr7:\"^1\"\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Adding Events to a Span\nDESCRIPTION: C# code showing how to add events to a span. Events are timestamped messages that represent significant occurrences during the span's lifetime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing var span = tracer.StartActiveSpan(\"SayHello\");\n\n// ...\n\nspan.AddEvent(\"Doing something...\");\n\n// ...\n\nspan.AddEvent(\"Dit it!\");\n```\n\n----------------------------------------\n\nTITLE: Resource Detector Environment Variables Documentation\nDESCRIPTION: Configuration documentation for enabling resource detectors in OpenTelemetry .NET, including general and specific detector enablement options.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment variable                             | Description                                                                                                                                                                                           | Default value | Status                                                    |\n| ------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------- | --------------------------------------------------------- |\n| `OTEL_DOTNET_AUTO_RESOURCE_DETECTOR_ENABLED`     | Enables all resource detectors.                                                                                                                                                                       | `true`        | [Experimental](/docs/specs/otel/versioning-and-stability) |\n| `OTEL_DOTNET_AUTO_{0}_RESOURCE_DETECTOR_ENABLED` | Configuration pattern for enabling a specific resource detector, where `{0}` is the uppercase ID of the resource detector you want to enable. Overrides `OTEL_DOTNET_AUTO_RESOURCE_DETECTOR_ENABLED`. | `true`        | [Experimental](/docs/specs/otel/versioning-and-stability) |\n```\n\n----------------------------------------\n\nTITLE: Deploying Jaeger In-Memory Backend\nDESCRIPTION: YAML configuration for deploying a Jaeger in-memory backend using the Jaeger Operator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: jaegertracing.io/v1\nkind: Jaeger\nmetadata:\n  name: my-in-memory\n```\n\n----------------------------------------\n\nTITLE: Adding Span Events\nDESCRIPTION: Examples showing how to add events to spans with and without attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nspan.AddEvent(\"Acquiring lock\")\nmutex.Lock()\nspan.AddEvent(\"Got lock, doing work...\")\n// do stuff\nspan.AddEvent(\"Unlocking\")\nmutex.Unlock()\n```\n\nLANGUAGE: go\nCODE:\n```\nspan.AddEvent(\"Cancelled wait due to external signal\", trace.WithAttributes(attribute.Int(\"pid\", 4328), attribute.String(\"signal\", \"SIGHUP\")))\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Django Applications with OpenTelemetry Operator\nDESCRIPTION: Example of required environment variables that must be set in the deployment file for Django applications when using OpenTelemetry auto-instrumentation. These variables ensure the operator can properly find and instrument the Django application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/operator.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- PYTHONPATH, with the path to the Django application root directory, e.g. \"/app\"\n- DJANGO_SETTINGS_MODULE, with the name of the Django settings module, e.g. \"myapp.settings\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Semantic Conventions Package\nDESCRIPTION: Command to install the package that provides predefined semantic attribute constants for standardized telemetry data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-semantic-conventions\n```\n\n----------------------------------------\n\nTITLE: Markdown Footnotes for Build Information\nDESCRIPTION: Adds explanatory footnotes to the build information table to provide context about the timestamp display.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/site-build-info.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[^date]: Approximate build timestamp.\n[^local-time]: In your timezone: <span id=\"local-time\">unknown</span>.\n```\n\n----------------------------------------\n\nTITLE: Sampling and Attribute Recording in OpenTelemetry Java\nDESCRIPTION: Demonstrates how to provide attributes for sampling and check if a span is recording before adding potentially expensive attributes in OpenTelemetry Java SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n// alguns atributos são importantes para a amostragem e devem ser fornecidos no momento da criação\nSpan span = tracer.spanBuilder(String.format(\"SELECT %s.%s\", dbName, collectionName))\n        .setSpanKind(SpanKind.CLIENT)\n        .setAttribute(\"db.name\", dbName)\n        ...\n        .startSpan();\n\n// outros atributos, especialmente aqueles caros de calcular\n// devem ser adicionados se o trecho estiver gravando\nif (span.isRecording()) {\n    span.setAttribute(\"db.statement\", sanitize(query.statement()))\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Semantic Conventions in TypeScript with OpenTelemetry\nDESCRIPTION: Imports semantic attribute constants from the OpenTelemetry semantic conventions package in TypeScript. These constants provide standardized attribute names for common concepts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SEMATTRS_CODE_FUNCTION,\n  SEMATTRS_CODE_FILEPATH,\n} from '@opentelemetry/semantic-conventions';\n```\n\n----------------------------------------\n\nTITLE: Adding Span Events\nDESCRIPTION: Examples showing how to add events to spans with and without attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nspan.AddEvent(\"Acquiring lock\")\nmutex.Lock()\nspan.AddEvent(\"Got lock, doing work...\")\n// do stuff\nspan.AddEvent(\"Unlocking\")\nmutex.Unlock()\n```\n\nLANGUAGE: go\nCODE:\n```\nspan.AddEvent(\"Cancelled wait due to external signal\", trace.WithAttributes(attribute.Int(\"pid\", 4328), attribute.String(\"signal\", \"SIGHUP\")))\n```\n\n----------------------------------------\n\nTITLE: Adding Links Between Spans in OpenTelemetry C#\nDESCRIPTION: Demonstrates how to create a new span with links to existing spans using OpenTelemetry in C#. Links allow establishing causal relationships between spans that are not parent-child relationships.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Get a context from somewhere, perhaps it's passed in as a parameter\nvar ctx = span.Context;\n\nvar links = new List<Link>\n{\n    new(ctx)\n};\n\nusing var span = tracer.StartActiveSpan(\"another-span\", links: links);\n\n// do some work\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer in Erlang/Elixir\nDESCRIPTION: Demonstrates how to get an application tracer in both Erlang and Elixir.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\nopentelemetry:get_application_tracer(?MODULE)\n```\n\nLANGUAGE: elixir\nCODE:\n```\n:opentelemetry.get_application_tracer(__MODULE__)\n```\n\n----------------------------------------\n\nTITLE: Setting OpenTelemetry Baggage for Synthetic Requests in Python\nDESCRIPTION: This code sets OpenTelemetry Baggage to indicate that the traces are synthetically generated. It creates a context object with a baggage item and attaches it to all tasks performed by the load generator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/load-generator.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nctx = baggage.set_baggage(\"synthetic_request\", \"true\")\ncontext.attach(ctx)\n```\n\n----------------------------------------\n\nTITLE: Collector Builder Configuration in YAML\nDESCRIPTION: Configuration file for the OpenTelemetry Collector Builder that defines the components to include in a custom collector binary, including the newly created connector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndist:\n    name: otelcol-dev-bin\n    description: Basic OpenTelemetry collector distribution for Developers\n    output_path: ./otelcol-dev\n\n\nexporters:\n    - gomod:\n    # Note: Prior to v0.86.0 use the `loggingexporter` instead of `debugexporter`.\n    go.opentelemetry.io/collector/exporter/debugexporter v0.86.0\n\n\nprocessors:\n    - gomod:\n    go.opentelemetry.io/collector/processor/batchprocessor v0.86.0\n\n\nreceivers:\n    - gomod:\ngo.opentelemetry.io/collector/receiver/otlpreceiver v0.86.0\n\n\nconnectors:\n    - gomod: github.com/gord02/exampleconnector v0.86.0\n\n\nreplaces:\n# a list of \"replaces\" directives that will be part of the resulting go.mod\n\n# This replace statement is necessary since the newly added component is not found/published to GitHub yet. Replace references to GitHub path with the local path\n- github.com/gord02/exampleconnector => [PATH-TO-COMPONENT-CODE]/exampleconnector\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry NuGet Packages for .NET\nDESCRIPTION: Commands to add the required OpenTelemetry NuGet packages to the project for instrumentation, including the core hosting extensions, ASP.NET Core instrumentation, and console exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry.Extensions.Hosting\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Active Span in OpenTelemetry Swift\nDESCRIPTION: This snippet demonstrates how to access the current active span from any point in the code using the context provider in OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: swift\nCODE:\n```\nlet currentSpan = OpenTelemetry.instance.contextProvider.activeSpan\n```\n\n----------------------------------------\n\nTITLE: Compression Factor Query Example\nDESCRIPTION: MetricQL query demonstrating how to calculate the compression factor for exported data by comparing uncompressed and compressed metrics using rate and group_by operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-arrow-production/index.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nwith\n    uncompressed = metric otelcol_exporter_sent\n        | rate\n        | group_by [\"method\"], sum;\n    compressed = metric otelcol_exporter_sent_wire\n        | rate\n        | group_by [\"method\"], sum;\njoin uncompressed / compressed\n```\n\n----------------------------------------\n\nTITLE: Creating Route and Enabling OpenTelemetry Plugin in Apache APISIX\nDESCRIPTION: This shell command creates a route in Apache APISIX and enables the OpenTelemetry plugin for always-on sampling. It sets up the upstream server and configures the plugin parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/apisix/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1 \\\n-H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \\\n-X PUT -d '\n{\n  \"uri\": \"/hello\",\n  \"plugins\": {\n      \"opentelemetry\": {\n          \"sampler\": {\n            \"name\": \"always_on\"\n          }\n      }\n  },\n  \"upstream\": {\n      \"type\": \"roundrobin\",\n      \"nodes\": {\n          \"127.0.0.1:7080\": 1\n      }\n  }\n}'\n```\n\n----------------------------------------\n\nTITLE: Adding Kafka (Sarama) Auto-instrumentation in Go\nDESCRIPTION: This code snippet demonstrates how to add OpenTelemetry instrumentation to a Kafka producer using the Sarama library in Go.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nsaramaConfig := sarama.NewConfig()\nproducer, err := sarama.NewAsyncProducer(brokers, saramaConfig)\nif err != nil {\n    return nil, err\n}\nproducer = otelsarama.WrapAsyncProducer(saramaConfig, producer)\n```\n\n----------------------------------------\n\nTITLE: Basic Tracer Provider Implementation\nDESCRIPTION: Initial setup of WebTracerProvider with document load instrumentation and zone context manager\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/browser.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport { DocumentLoadInstrumentation } from '@opentelemetry/instrumentation-document-load';\nimport { ZoneContextManager } from '@opentelemetry/context-zone';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\n\nconst provider = new WebTracerProvider();\n\nprovider.register({\n  contextManager: new ZoneContextManager(),\n});\n\nregisterInstrumentations({\n  instrumentations: [new DocumentLoadInstrumentation()],\n});\n```\n\n----------------------------------------\n\nTITLE: Cloning OpAMP Repository in Shell\nDESCRIPTION: Command to clone the open-telemetry/opamp-go repository, which provides a Go implementation of the Open Agent Management Protocol (OpAMP).\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/management.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opamp-go.git\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Specifications and Redirects in YAML\nDESCRIPTION: This YAML configuration sets up the structure and redirects for OpenTelemetry specification pages. It includes metadata like title and weight, and defines redirect rules for various semantic convention documentation paths.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/specs/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Specifications\nlinkTitle: Specs\naliases: [reference, specification]\nweight: 960\n# Temporary redirect rules until they are added to the spec pages\nredirects:\n  # OTel spec\n  - from: otel/logs/semantic_conventions/events\n    to: semconv/general/events/\n  - from: otel/trace/semantic_conventions/http\n    to: semconv/http/http-spans/\n  # Temporarily implement a catch-all for the rest. Later we'll add specific redirects like the one above.\n  - from: otel/logs/semantic_conventions/*\n    to: semconv/general/logs/\n  - from: otel/metrics/semantic_conventions/*\n    to: semconv/general/metrics/\n  - from: otel/resource/semantic_conventions/*\n    to: semconv/resource/\n  - from: otel/trace/semantic_conventions/*\n    to: semconv/general/trace/\n  # Semconv\n  - from: semconv/resource/deployment_environment\n    to: semconv/resource/deployment-environment\n---\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Span from Context in Python\nDESCRIPTION: Retrieves the current active span from the execution context to add attributes or manipulate it.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nspan = trace.get_current_span()\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin Exporter Package\nDESCRIPTION: Install the OpenTelemetry Zipkin exporter package using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Zipkin\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin Exporter Package for OpenTelemetry JS\nDESCRIPTION: Command to install the Zipkin exporter package as a dependency for a Node.js application using npm.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/exporter-zipkin\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterRole for k8sattributesprocessor in Kubernetes\nDESCRIPTION: This YAML snippet defines a ClusterRole with the minimum permissions required for the k8sattributesprocessor to fetch pod and namespace information from the Kubernetes API.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-metadata/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector\nrules:\n  - apiGroups: ['']\n    resources: ['pods', 'namespaces']\n    verbs: ['get', 'watch', 'list']\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic Release Links with Hugo Template\nDESCRIPTION: Creates formatted URLs for GitHub releases of OpenTelemetry components. Uses a language parameter to construct links to both latest release and all releases pages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/docs/latest-release.md#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $relUrl := printf \"https://github.com/open-telemetry/opentelemetry-%s/releases\" .lang -}}\n\nFor releases, including the [latest release][], see [Releases][].\n{{- .Inner }}\n\n[latest release]: {{ $relUrl }}/latest\n[Releases]: {{ $relUrl }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Scraping Settings\nDESCRIPTION: YAML configuration for Prometheus to scrape metrics from a dice-service application. Sets up scraping interval and target endpoint using host.docker.internal.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/_includes/exporters/prometheus-setup.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nscrape_configs:\n  - job_name: dice-service\n    scrape_interval: 5s\n    static_configs:\n      - targets: [host.docker.internal:9464]\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Attributes to a Span in Ruby\nDESCRIPTION: Adds multiple key-value pairs as attributes to a span using the add_attributes method. This example adds order ID information to the current span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/email.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\ncurrent_span.add_attributes({\n  \"app.order.id\" => data.order.order_id,\n})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure for Benchmark Visualization\nDESCRIPTION: HTML markup that provides the structure for the benchmark visualization page, including container elements and required script/style dependencies.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/benchmarks.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"/css/benchmarks.css\">\n\n<div class=\"container\">\n  <main id=\"main\"></main>\n</div>\n\n<footer>\n  <button id=\"dl-button\">Download data as JSON</button>\n  <div class=\"spacer\"></div>\n  <div class=\"small\">Powered by <a rel=\"noopener\" href=\"https://github.com/marketplace/actions/continuous-benchmark\">github-action-benchmark</a></div>\n</footer>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js@2.9.2/dist/Chart.min.js\"></script>\n<script src=\"https://open-telemetry.github.io/opentelemetry-js/benchmarks/data.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Customizing Span Labels with additional_attributes\nDESCRIPTION: cURL command to configure a route with custom span labels using the additional_attributes feature of the OpenTelemetry plugin.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/apisix/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://127.0.0.1:9080/apisix/admin/routes/1001 \\\n  -H 'X-API-KEY: edd1c9f034335f136f87ad84b625c8f1' \\\n  -X PUT -d '\n{\n    \"uri\": \"/put\",\n    \"plugins\": {\n        \"opentelemetry\": {\n            \"sampler\": {\n                \"name\": \"always_on\"\n            },\n            \"additional_attributes\":[\n                \"route_id\",\n                \"http_x-custom-ot-key\"\n            ]\n        }\n    },\n    \"upstream\": {\n        \"type\": \"roundrobin\",\n        \"nodes\": {\n            \"httpbin.org:80\": 1\n        }\n    }\n}'\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Python Packages\nDESCRIPTION: Installs the OpenTelemetry API and SDK packages using pip, which are required for manual instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-api\npip install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Creating Traces Receiver Function\nDESCRIPTION: Bootstrap implementation of the CreateTracesFunc function pointer that will be used to instantiate the receiver.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_14\n\nLANGUAGE: go\nCODE:\n```\nfunc createTracesReceiver(_ context.Context, params receiver.Settings, baseCfg component.Config, consumer consumer.Traces) (receiver.Traces, error) {\n\treturn nil, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Auto-instrumented Spans in .NET\nDESCRIPTION: Demonstrates how to add custom attributes to auto-instrumented spans in .NET using the Activity object.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/cart/index.md#2025-04-09_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar activity = Activity.Current;\n\nactivity?.SetTag(\"app.user.id\", request.UserId);\nactivity?.SetTag(\"app.product.quantity\", request.Item.Quantity);\nactivity?.SetTag(\"app.product.id\", request.Item.ProductId);\n```\n\n----------------------------------------\n\nTITLE: Creating Node.js Instrumentation Resource with OpenTelemetry Operator\nDESCRIPTION: This command creates a basic Instrumentation resource configured for instrumenting Node.js services. It sets up OTLP exporter with gRPC protocol, configures propagators, and sets the sampler type to parentbased_traceidratio.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  exporter:\n    endpoint: http://demo-collector:4317\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: \"1\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Configuring Cluster Metrics Preset in OpenTelemetry Collector\nDESCRIPTION: Configuration to enable the collection of cluster-level metrics from the Kubernetes API server. This preset requires a deployment or statefulset mode with a single replica and uses the k8sclusterreceiver component.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nmode: deployment\nreplicaCount: 1\npresets:\n  clusterMetrics:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Enabling Diagnostic Logging in JavaScript\nDESCRIPTION: Code snippet to enable diagnostic logging for troubleshooting OpenTelemetry initialization in JavaScript. It sets up a console logger with a specified log level.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\n/*instrumentation.js*/\n// Require dependencies\nconst { diag, DiagConsoleLogger, DiagLogLevel } = require('@opentelemetry/api');\n\n// For troubleshooting, set the log level to DiagLogLevel.DEBUG\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.INFO);\n\n// const sdk = new NodeSDK({...\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Go Modules\nDESCRIPTION: This shell command installs the necessary Go modules for OpenTelemetry logging, including the core library, OTLP exporter, and SDK components.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ngo get go.opentelemetry.io/otel \\\n  go.opentelemetry.io/otel/exporters/otlp/otlplog/otlploghttp \\\n  go.opentelemetry.io/otel/sdk \\\n  go.opentelemetry.io/otel/sdk/log\n```\n\n----------------------------------------\n\nTITLE: Additional ClusterRole Rules for Prometheus CR\nDESCRIPTION: This YAML snippet defines additional ClusterRole rules required when enabling Prometheus CR functionality in the Target Allocator. It grants access to PodMonitor and ServiceMonitor Custom Resources.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n- apiGroups:\n    - monitoring.coreos.com\n  resources:\n    - servicemonitors\n    - podmonitors\n  verbs:\n    - '*'\n- apiGroups: ['']\n  resources:\n    - namespaces\n  verbs: ['get', 'list', 'watch']\n```\n\n----------------------------------------\n\nTITLE: Running SQL Queries with OpenTelemetry Context\nDESCRIPTION: Functions that execute SQL queries using the instrumented database connection, creating a parent span for the operation and handling the query results.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc runSQLQuery(ctx context.Context, db *sql.DB) error {\n\t// Create a parent span (Optional)\n\ttracer := otel.GetTracerProvider()\n\tctx, span := tracer.Tracer(instrumentationName).Start(ctx, \"example\")\n\tdefer span.End()\n\n\terr := query(ctx, db)\n\tif err != nil {\n\t\tspan.RecordError(err)\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc query(ctx context.Context, db *sql.DB) error {\n\t// Make a query\n\trows, err := db.QueryContext(ctx, `SELECT CURRENT_TIMESTAMP`)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer rows.Close()\n\n\tvar currentTime time.Time\n\tfor rows.Next() {\n\t\terr = rows.Scan(&currentTime)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\tfmt.Println(currentTime)\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Child Span in OpenTelemetry\nDESCRIPTION: Example of a child span that references its parent span through the parent_id field. This span represents a greeting operation and contains multiple events within its lifetime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/traces.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello-greetings\",\n  \"context\": {\n    \"trace_id\": \"5b8aa5a2d2c872e8321cf37308d69df2\",\n    \"span_id\": \"5fb397be34d26b51\"\n  },\n  \"parent_id\": \"051581bf3cb55c13\",\n  \"start_time\": \"2022-04-29T18:52:58.114304Z\",\n  \"end_time\": \"2022-04-29T22:52:58.114561Z\",\n  \"attributes\": {\n    \"http.route\": \"some_route2\"\n  },\n  \"events\": [\n    {\n      \"name\": \"hey there!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114561Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    },\n    {\n      \"name\": \"bye now!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114585Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Sampler in OpenTelemetry Java SDK\nDESCRIPTION: This code snippet shows how to implement a custom sampler by implementing the Sampler interface. The custom sampler demonstrates how to make sampling decisions based on span kind and provides a description of the sampler.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.trace.SpanKind;\nimport io.opentelemetry.context.Context;\nimport io.opentelemetry.sdk.trace.data.LinkData;\nimport io.opentelemetry.sdk.trace.samplers.Sampler;\nimport io.opentelemetry.sdk.trace.samplers.SamplingResult;\nimport java.util.List;\n\npublic class CustomSampler implements Sampler {\n  @Override\n  public SamplingResult shouldSample(\n      Context parentContext,\n      String traceId,\n      String name,\n      SpanKind spanKind,\n      Attributes attributes,\n      List<LinkData> parentLinks) {\n    // Callback invoked when span is started, before any SpanProcessor is called.\n    // If the SamplingDecision is:\n    // - DROP: the span is dropped. A valid span context is created and SpanProcessor#onStart is\n    // still called, but no data is recorded and SpanProcessor#onEnd is not called.\n    // - RECORD_ONLY: the span is recorded but not sampled. Data is recorded to the span,\n    // SpanProcessor#onStart and SpanProcessor#onEnd are called, but the span's sampled status\n    // indicates it should not be exported out of process.\n    // - RECORD_AND_SAMPLE: the span is recorded and sampled. Data is recorded to the span,\n    // SpanProcessor#onStart and SpanProcessor#onEnd are called, and the span's sampled status\n    // indicates it should be exported out of process.\n    return SpanKind.SERVER == spanKind ? SamplingResult.recordAndSample() : SamplingResult.drop();\n  }\n\n  @Override\n  public String getDescription() {\n    // Return a description of the sampler.\n    return this.getClass().getSimpleName();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to Nomad Conversions Repository\nDESCRIPTION: Commands to clone the Nomad Conversions repository and navigate to the working directory for deploying the OpenTelemetry Demo App.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/avillela/nomad-conversions.git\ncd nomad-conversions\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP gRPC Exporters in JavaScript\nDESCRIPTION: Installs the OpenTelemetry OTLP gRPC exporters for traces and metrics as npm dependencies for your project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/exporter-trace-otlp-grpc \\\n  @opentelemetry/exporter-metrics-otlp-grpc\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP Exporter Dependencies in PHP\nDESCRIPTION: This shell command installs the necessary packages for using the OTLP exporter in PHP, including the exporter package and an HTTP client implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \\\n  open-telemetry/exporter-otlp \\\n  php-http/guzzle7-adapter\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Kubernetes Container Logs\nDESCRIPTION: YAML configuration for setting up OpenTelemetry Collector in Kubernetes to handle container logs. It includes filelog receiver configuration with container parsing and resource detection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/collecting-otel-compliant-java-logs-from-files/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  filelog/otlp-json-logs:\n    # start_at: beginning # for testing purpose, use \"start_at: beginning\"\n    include: [/var/log/pods/<<namespace>>_<<pod_name>>_*/<<container_name>>/]\n    include_file_path: true\n    operators:\n      - type: container\n        add_metadata_from_filepath: true\n\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n  resourcedetection:\n    detectors: ['env', 'system']\n    override: false\n\nconnectors:\n  otlpjson:\n\nservice:\n  pipelines:\n    logs/raw_otlpjson:\n      receivers: [filelog/otlp-json-logs]\n      # (i) no need for processors before the otlpjson connector\n      # Declare processors in the shared \"logs\" pipeline below\n      processors: []\n      exporters: [otlpjson]\n    logs:\n      receivers: [otlp, otlpjson]\n      processors: [resourcedetection, batch]\n      # remove \"debug\" for production deployments\n      exporters: [otlphttp, debug]\n\nexporters:\n  debug:\n    verbosity: detailed\n  # Exporter to the OTLP backend like `otlphttp`\n  otlphttp:\n```\n\n----------------------------------------\n\nTITLE: SIGINT Handler for Graceful Container Shutdown\nDESCRIPTION: JavaScript code to handle SIGINT signals for graceful shutdown of the Node.js application in a container.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/resources.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.on('SIGINT', function () {\n  process.exit();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK in Go\nDESCRIPTION: Sets up the OpenTelemetry SDK for Go, including trace, metric, and log providers. This code initializes exporters, creates providers, and configures global settings for OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/otel\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdoutlog\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric\"\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdouttrace\"\n\t\"go.opentelemetry.io/otel/log/global\"\n\t\"go.opentelemetry.io/otel/propagation\"\n\t\"go.opentelemetry.io/otel/sdk/log\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n)\n\n// setupOTelSDK inicializa o pipeline do OpenTelemetry.\n// Caso não retorne um erro, certifique-se de executar o método shutdown para realizar a finalização adequada.\nfunc setupOTelSDK(ctx context.Context) (shutdown func(context.Context) error, err error) {\n\tvar shutdownFuncs []func(context.Context) error\n\n\t// shutdown chama as funções de finalização registradas via shutdownFuncs.\n\t// Os erros das chamadas são concatenados.\n\t// Cada função de finalização registrada será invocada uma única vez.\n\tshutdown = func(ctx context.Context) error {\n\t\tvar err error\n\t\tfor _, fn := range shutdownFuncs {\n\t\t\terr = errors.Join(err, fn(ctx))\n\t\t}\n\t\tshutdownFuncs = nil\n\t\treturn err\n\t}\n\n\t// handleErr chama a função shutdown para finalizar corretamente e garante que todos os erros serão retornados.\n\thandleErr := func(inErr error) {\n\t\terr = errors.Join(inErr, shutdown(ctx))\n\t}\n\n\t// Inicializa o Propagator.\n\tprop := newPropagator()\n\totel.SetTextMapPropagator(prop)\n\n\t// Inicializa o Trace Provider.\n\ttracerProvider, err := newTraceProvider()\n\tif err != nil {\n\t\thandleErr(err)\n\t\treturn\n\t}\n\tshutdownFuncs = append(shutdownFuncs, tracerProvider.Shutdown)\n\totel.SetTracerProvider(tracerProvider)\n\n\t// Inicializa o Meter Provider.\n\tmeterProvider, err := newMeterProvider()\n\tif err != nil {\n\t\thandleErr(err)\n\t\treturn\n\t}\n\tshutdownFuncs = append(shutdownFuncs, meterProvider.Shutdown)\n\totel.SetMeterProvider(meterProvider)\n\n\t// Inicializa o Logger Provider.\n\tloggerProvider, err := newLoggerProvider()\n\tif err != nil {\n\t\thandleErr(err)\n\t\treturn\n\t}\n\tshutdownFuncs = append(shutdownFuncs, loggerProvider.Shutdown)\n\tglobal.SetLoggerProvider(loggerProvider)\n\n\treturn\n}\n\nfunc newPropagator() propagation.TextMapPropagator {\n\treturn propagation.NewCompositeTextMapPropagator(\n\t\tpropagation.TraceContext{},\n\t\tpropagation.Baggage{},\n\t)\n}\n\nfunc newTraceProvider() (*trace.TracerProvider, error) {\n\ttraceExporter, err := stdouttrace.New(\n\t\tstdouttrace.WithPrettyPrint())\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\ttraceProvider := trace.NewTracerProvider(\n\t\ttrace.WithBatcher(traceExporter,\n\t\t\t// O valor padrão é 5s. Definimos em 1s para propósito de demonstração.\n\t\t\ttrace.WithBatchTimeout(time.Second)),\n\t)\n\treturn traceProvider, nil\n}\n\nfunc newMeterProvider() (*metric.MeterProvider, error) {\n\tmetricExporter, err := stdoutmetric.New()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tmeterProvider := metric.NewMeterProvider(\n\t\tmetric.WithReader(metric.NewPeriodicReader(metricExporter,\n\t\t\t// O valor padrão é 1m. Definimos em 3s para propósito de demonstração.\n\t\t\tmetric.WithInterval(3*time.Second))),\n\t)\n\treturn meterProvider, nil\n}\n\nfunc newLoggerProvider() (*log.LoggerProvider, error) {\n\tlogExporter, err := stdoutlog.New()\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tloggerProvider := log.NewLoggerProvider(\n\t\tlog.WithProcessor(log.NewBatchProcessor(logExporter)),\n\t)\n\treturn loggerProvider, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for NGINX with OpenTelemetry Module\nDESCRIPTION: Dockerfile that configures a NGINX server with the OpenTelemetry module. It starts from a base NGINX image, installs dependencies, downloads and sets up the OpenTelemetry SDK, and configures NGINX to load the OpenTelemetry module.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nginx:1.23.1\nRUN apt-get update ; apt-get install unzip\nADD https://github.com/open-telemetry/opentelemetry-cpp-contrib/releases/download/webserver%2Fv1.0.3/opentelemetry-webserver-sdk-x64-linux.tgz /opt\nRUN cd /opt ; unzip opentelemetry-webserver-sdk-x64-linux.tgz.zip; tar xvfz opentelemetry-webserver-sdk-x64-linux.tgz\nRUN cd /opt/opentelemetry-webserver-sdk; ./install.sh\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/opentelemetry-webserver-sdk/sdk_lib/lib\nRUN echo \"load_module /opt/opentelemetry-webserver-sdk/WebServerModule/Nginx/1.23.1/ngx_http_opentelemetry_module.so;\\n$(cat /etc/nginx/nginx.conf)\" > /etc/nginx/nginx.conf\nCOPY opentelemetry_module.conf /etc/nginx/conf.d\n```\n\n----------------------------------------\n\nTITLE: Ansible Inventory Configuration\nDESCRIPTION: Example inventory file listing host IP addresses for OpenTelemetry Collector deployment\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/scaling-collectors.md#2025-04-09_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n10.0.0.1    # hostname = ubuntu-01\n10.0.0.2    # hostname = ubuntu-02\n10.0.0.3    # hostname = centos-01\n10.0.0.4    # hostname = centos-02\n10.0.0.5    # hostname = debian-01\n10.0.0.6    # hostname = debian-02\n10.0.0.7    # hostname = fedora-01\n10.0.0.8    # hostname = fedora-02\n```\n\n----------------------------------------\n\nTITLE: Initializing Benchmark Data Visualization in JavaScript\nDESCRIPTION: Core script that initializes and renders benchmark data visualization using Chart.js. Handles data collection, chart rendering, and interactive features like tooltips and click-to-commit navigation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/benchmarks.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n'use strict';\n(function() {\n  const COLORS = [\n    \"#48aaf9\",\n    \"#8a3ef2\",\n    \"#78eeda\",\n    \"#d78000\",\n    \"#1248b3\",\n    \"#97dbfc\",\n    \"#006174\",\n    \"#00b6b6\",\n    \"#854200\",\n    \"#f3c8ad\",\n    \"#410472\",\n  ];\n\n  function init() {\n    function collectBenchesPerTestCase(entries) {\n      const map = new Map();\n      for (const entry of entries) {\n        const {commit, date, tool, benches} = entry;\n        for (const bench of benches) {\n          const result = { commit, date, tool, bench };\n          const arr = map.get(bench.name);\n          if (arr === undefined) {\n            map.set(bench.name, [result]);\n          } else {\n            arr.push(result);\n          }\n        }\n      }\n      return map;\n    }\n\n    const data = window.BENCHMARK_DATA;\n\n    document.getElementById('dl-button').onclick = () => {\n      const dataUrl = 'data:,' + JSON.stringify(data, null, 2);\n      const a = document.createElement('a');\n      a.href = dataUrl;\n      a.download = 'benchmark_data.json';\n      a.click();\n    };\n\n    return Object.keys(data.entries).map(name => ({\n      name,\n      dataSet: collectBenchesPerTestCase(data.entries[name]),\n    }));\n  }\n\n  function renderAllChars(dataSets) {\n    function renderGraph(parent, name, dataset) {\n      const chartTitle = document.createElement('h3');\n      chartTitle.textContent = name;\n      parent.append(chartTitle);\n\n      const canvas = document.createElement('canvas');\n      canvas.className = 'benchmark-chart';\n      parent.appendChild(canvas);\n\n      const color = COLORS[0];\n      const data = {\n        labels: dataset.map(d => d.commit.id.slice(0, 7)),\n        datasets: [\n          {\n            label: name,\n            data: dataset.map(d => d.bench.value),\n            borderColor: color,\n            backgroundColor: color + '60',\n            fill: false\n          }\n        ],\n      };\n      const options = {\n        scales: {\n          xAxes: [\n            {\n              scaleLabel: {\n                display: true,\n                labelString: 'commit',\n              },\n            }\n          ],\n          yAxes: [\n            {\n              scaleLabel: {\n                display: true,\n                labelString: dataset.length > 0 ? dataset[0].bench.unit : '',\n              },\n              ticks: {\n                beginAtZero: true,\n              }\n            }\n          ],\n        },\n        tooltips: {\n          callbacks: {\n            afterTitle: items => {\n              const {index} = items[0];\n              const data = dataset[index];\n              return '\\n' + data.commit.message + '\\n\\n' + data.commit.timestamp + ' committed by @' + data.commit.committer.username + '\\n';\n            },\n            label: item => {\n              let label = item.value;\n              const { range, unit } = dataset[item.index].bench;\n              label += ' ' + unit;\n              if (range) {\n                label += ' (' + range + ')';\n              }\n              return label;\n            },\n            afterLabel: item => {\n              const { extra } = dataset[item.index].bench;\n              return extra ? '\\n' + extra : '';\n            }\n          }\n        },\n        onClick: (_mouseEvent, activeElems) => {\n          if (activeElems.length === 0) {\n            return;\n          }\n          const index = activeElems[0]._index;\n          const url = dataset[index].commit.url;\n          window.open(url, '_blank');\n        },\n      };\n\n      new Chart(canvas, {\n        type: 'line',\n        data,\n        options,\n      });\n    }\n\n    function renderBenchSet(name, benchSet, main) {\n      const setElem = document.createElement('div');\n      setElem.className = 'benchmark-set';\n      main.appendChild(setElem);\n\n      const graphsElem = document.createElement('div');\n      graphsElem.className = 'benchmark-graphs';\n      setElem.appendChild(graphsElem);\n\n      for (const [benchName, benches] of benchSet.entries()) {\n        renderGraph(graphsElem, benchName, benches)\n      }\n    }\n\n    const main = document.getElementById('main');\n    for (const {name, dataSet} of dataSets) {\n      renderBenchSet(name, dataSet, main);\n    }\n  }\n\n  renderAllChars(init());\n})();\n```\n\n----------------------------------------\n\nTITLE: Running Kafka Consumer with OpenTelemetry Agent\nDESCRIPTION: Shell command to run a Kafka consumer application with the OpenTelemetry Java agent, including additional configuration for message receive telemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\njava -javaagent:path/to/opentelemetry-javaagent.jar \\\n      -Dotel.service.name=my-kafka-service \\\n      -Dotel.traces.exporter=jaeger \\\n      -Dotel.metrics.exporter=none \\\n      -Dotel.instrumentation.messaging.experimental.receive-telemetry.enabled=true \\\n      -jar kafka-consumer-agent/target/kafka-consumer-agent-1.0-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter in JavaScript\nDESCRIPTION: JavaScript code to initialize OpenTelemetry SDK with a Zipkin exporter for traces. It configures the traceExporter and sets up auto-instrumentations for Node.js.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\nconst { ZipkinExporter } = require('@opentelemetry/exporter-zipkin');\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new ZipkinExporter({}),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Validation in Go\nDESCRIPTION: Extended configuration implementation with validation logic to ensure interval is at least 1 minute and number of traces is at least 1.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\n// Config represents the receiver config settings within the collector's config.yaml\ntype Config struct {\n\tInterval       string `mapstructure:\"interval\"`\n\tNumberOfTraces int    `mapstructure:\"number_of_traces\"`\n}\n\n// Validate checks if the receiver configuration is valid\nfunc (cfg *Config) Validate() error {\n\tinterval, _ := time.ParseDuration(cfg.Interval)\n\tif interval.Minutes() < 1 {\n\t\treturn fmt.Errorf(\"when defined, the interval has to be set to at least 1 minute (1m)\")\n\t}\n\n\tif cfg.NumberOfTraces < 1 {\n\t\treturn fmt.Errorf(\"number_of_traces must be greater or equal to 1\")\n\t}\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection for ActivitySource in Program.cs\nDESCRIPTION: Updates Program.cs to register the Instrumentation class as a singleton in the dependency injection container.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n//...\n\n// Register the Instrumentation class as a singleton in the DI container.\nbuilder.Services.AddSingleton<Instrumentation>();\n\nbuilder.Services.AddControllers();\n\nvar app = builder.Build();\n\napp.MapControllers();\n\napp.Run();\n```\n\n----------------------------------------\n\nTITLE: Excluding Specific Python Auto-Instrumentation Libraries\nDESCRIPTION: This YAML configuration demonstrates how to exclude specific Python instrumentation libraries by setting the OTEL_PYTHON_DISABLED_INSTRUMENTATIONS environment variable. This helps to reduce unwanted data by disabling specific package instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  exporter:\n    endpoint: http://demo-collector:4318\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: '1'\n  python:\n    env:\n      - name: OTEL_PYTHON_DISABLED_INSTRUMENTATIONS\n        value:\n          <comma-separated list of package names to exclude from\n          instrumentation>\n```\n\n----------------------------------------\n\nTITLE: Defining Child Span 'olá-cumprimentos' in JSON for OpenTelemetry Tracing\nDESCRIPTION: JSON representation of a child span named 'olá-cumprimentos' in an OpenTelemetry trace. It includes context information, parent ID, timestamps, attributes, and multiple events.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/signals/traces.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"olá-cumprimentos\",\n  \"context\": {\n    \"trace_id\": \"5b8aa5a2d2c872e8321cf37308d69df2\",\n    \"span_id\": \"0x5fb397be34d26b51\"\n  },\n  \"parent_id\": \"051581bf3cb55c13\",\n  \"start_time\": \"2022-04-29T18:52:58.114304Z\",\n  \"end_time\": \"2022-04-29T22:52:58.114561Z\",\n  \"attributes\": {\n    \"http.route\": \"alguma_rota2\"\n  },\n  \"events\": [\n    {\n      \"name\": \"e aí!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114561Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    },\n    {\n      \"name\": \"até logo!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114585Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Express Server Application in TypeScript\nDESCRIPTION: Sets up an Express server with a /rolldice endpoint that uses the dice rolling library. This demonstrates instrumenting a standalone application that imports a library.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/*app.ts*/\nimport express, { Express } from 'express';\nimport { rollTheDice } from './dice';\n\nconst PORT: number = parseInt(process.env.PORT || '8080');\nconst app: Express = express();\n\napp.get('/rolldice', (req, res) => {\n  const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;\n  if (isNaN(rolls)) {\n    res\n      .status(400)\n      .send(\"Request parameter 'rolls' is missing or not a number.\");\n    return;\n  }\n  res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry in Tyk Gateway Configuration\nDESCRIPTION: This JSON configuration snippet shows how to enable OpenTelemetry support in the Tyk Gateway configuration file. By default, OpenTelemetry spans are exported using gRPC protocol to localhost:4317.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/tyk-api-gateway/index.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"opentelemetry\": {\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Account ID Attribute to Spans in OpenTelemetry Collector\nDESCRIPTION: Configuration for the attributes processor that adds a new attribute called 'account_id' with a specific value to all spans. This processor can insert, update, delete, or replace existing attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  attributes/accountid:\n    actions:\n      - key: account_id\n        value: 2245\n        action: insert\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Automatic Context Propagation in JavaScript\nDESCRIPTION: Commands to install the necessary dependencies for creating a JavaScript client application that uses OpenTelemetry to propagate context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\nnpm install undici \\\n  @opentelemetry/instrumentation-undici \\\n  @opentelemetry/sdk-node\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry PHP Extension Configuration\nDESCRIPTION: PHP INI configuration to enable the OpenTelemetry extension.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: ini\nCODE:\n```\n[opentelemetry]\nextension=opentelemetry.so\n```\n\n----------------------------------------\n\nTITLE: Setting Context Entry Value in OpenTelemetry JavaScript\nDESCRIPTION: Demonstrates setting a value in a context, which creates a new context with the added entry. This shows how contexts are immutable, and setting values creates new context instances.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst key = api.createContextKey('some key');\nconst ctx = api.ROOT_CONTEXT;\n\n// add a new entry\nconst ctx2 = ctx.setValue(key, 'context 2');\n\n// ctx2 contains the new entry\nconsole.log(ctx2.getValue(key)); // \"context 2\"\n\n// ctx is unchanged\nconsole.log(ctx.getValue(key)); // undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Context Keys in OpenTelemetry JavaScript\nDESCRIPTION: Demonstrates how to create context keys using the OpenTelemetry API. Context keys are used to identify entries in the context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst key1 = api.createContextKey('My first key');\nconst key2 = api.createContextKey('My second key');\n```\n\n----------------------------------------\n\nTITLE: Creating Console Metrics Exporter in Go OpenTelemetry\nDESCRIPTION: Example of how to create a console metrics exporter with default settings. This implementation uses the stdoutmetric package to output metrics data to the console for development purposes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n)\n\nfunc newExporter() (metric.Exporter, error) {\n\treturn stdoutmetric.New()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Python Flask App with Redis for OpenTelemetry Testing\nDESCRIPTION: This Python script creates a Flask application that interacts with Redis to count and display the number of times it has been accessed. It's used as part of a test setup for OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/debug-otel-with-otel/index.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport time\n\nimport redis\nfrom flask import Flask\n\napp = Flask(__name__)\ncache = redis.Redis(host='redis', port=6379)\n\ndef get_hit_count():\n    retries = 5\n    while True:\n        try:\n            return cache.incr('hits')\n        except redis.exceptions.ConnectionError as exc:\n            if retries == 0:\n                raise exc\n            retries -= 1\n            time.sleep(0.5)\n\n@app.route('/')\ndef hello():\n    count = get_hit_count()\n    return 'Hello World! I have been seen {} times.\\n'.format(count)\n```\n\n----------------------------------------\n\nTITLE: Creating Jaeger Tracer Provider in Go\nDESCRIPTION: Go code to create a Jaeger tracer provider using OpenTelemetry. It sets up the Jaeger exporter and configures the tracer provider with appropriate resources.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\npackage tracing\nimport (\n    \"go.opentelemetry.io/otel/exporters/jaeger\"\n    \"go.opentelemetry.io/otel/sdk/resource\"\n    sdktrace \"go.opentelemetry.io/otel/sdk/trace\"\n    semconv \"go.opentelemetry.io/otel/semconv/v1.4.0\"\n)\n\nfunc JaegerTracerProvider()(*sdktrace.TracerProvider, error) {\n    exp, err: = jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(\"http://localhost:14268/api/traces\")))\n    if err != nil {\n        return nil, err\n    }\n    tp: = sdktrace.NewTracerProvider(\n        sdktrace.WithBatcher(exp),\n        sdktrace.WithResource(resource.NewWithAttributes(\n            semconv.SchemaURL,\n            semconv.ServiceNameKey.String(\"todo-service\"),\n            semconv.DeploymentEnvironmentKey.String(\"production\"),\n        )),\n    )\n    return tp, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing URLSessionInstrumentation in Swift\nDESCRIPTION: This code snippet shows how to initialize URLSessionInstrumentation with a configuration object. This setup automatically captures all network calls made with NSURLSessions, with the option to customize behavior using optional callbacks.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nlet sessionInstrumentation = URLSessionInstrumentation(configuration: URLSessionInstrumentationConfiguration())\n```\n\n----------------------------------------\n\nTITLE: Creating New Blog Post with Hugo CLI\nDESCRIPTION: Commands to create a new blog post using Hugo static site generator. The first command creates a simple post, while the second creates a post with support for additional assets like images.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/blog.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx hugo new content/en/blog/2024/short-name-for-post.md\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx hugo new content/en/blog/2024/short-name-for-post/index.md\n```\n\n----------------------------------------\n\nTITLE: Example OpenTelemetry Span Output\nDESCRIPTION: Sample JSON output of spans generated by the OpenTelemetry instrumentation, showing various attributes and timings for HTTP requests and Express middleware.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"traceId\": \"3f1fe6256ea46d19ec3ca97b3409ad6d\",\n  \"parentId\": \"f0b7b340dd6e08a7\",\n  \"name\": \"middleware - query\",\n  \"id\": \"41a27f331c7bfed3\",\n  \"kind\": 0,\n  \"timestamp\": 1624982589722992,\n  \"duration\": 417,\n  \"attributes\": {\n    \"http.route\": \"/\",\n    \"express.name\": \"query\",\n    \"express.type\": \"middleware\"\n  },\n  \"status\": { \"code\": 0 },\n  \"events\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Go Module for Example Connector\nDESCRIPTION: Shell commands to initialize a Go module for the example connector and manage dependencies.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngo mod init github.com/gord02/exampleconnector\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom OTLP Exporter\nDESCRIPTION: YAML configuration for adding a custom OTLP HTTP exporter to the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlphttp/example:\n    endpoint: <your-endpoint-url>\n```\n\n----------------------------------------\n\nTITLE: Configuring Connectors in OpenTelemetry Collector YAML\nDESCRIPTION: This snippet demonstrates how to configure a connector in the OpenTelemetry Collector. It shows the 'count' connector configuration and how it's used in the pipelines section to connect traces and metrics pipelines.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  foo:\n\nexporters:\n  bar:\n\nconnectors:\n  count:\n    spanevents:\n      my.prod.event.count:\n        description: The number of span events from my prod environment.\n        conditions:\n          - 'attributes[\"env\"] == \"prod\"'\n          - 'name == \"prodevent\"'\n\nservice:\n  pipelines:\n    traces:\n      receivers: [foo]\n      exporters: [count]\n    metrics:\n      receivers: [count]\n      exporters: [bar]\n```\n\n----------------------------------------\n\nTITLE: Configuring the Tailtracer Receiver in YAML\nDESCRIPTION: Example YAML configuration for the tailtracer receiver defining interval between telemetry operations and number of mock traces to generate.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  tailtracer: # this line represents the ID of your receiver\n    interval: 1m\n    number_of_traces: 1\n```\n\n----------------------------------------\n\nTITLE: Creating DiceController for HTTP Endpoints\nDESCRIPTION: ASP.NET Core controller implementation that handles dice rolling HTTP requests with logging functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class DiceController : ControllerBase\n{\n    private ILogger<DiceController> logger;\n\n    public DiceController(ILogger<DiceController> logger)\n    {\n        this.logger = logger;\n    }\n\n    [HttpGet(\"/rolldice\")]\n    public List<int> RollDice(string player, int? rolls)\n    {\n        if(!rolls.HasValue)\n        {\n            logger.LogError(\"Missing rolls parameter\");\n            throw new HttpRequestException(\"Missing rolls parameter\", null, HttpStatusCode.BadRequest);\n        }\n\n        var result = new Dice(1, 6).rollTheDice(rolls.Value);\n\n        if (string.IsNullOrEmpty(player))\n        {\n            logger.LogInformation(\"Anonymous player is rolling the dice: {result}\", result);\n        }\n        else\n        {\n            logger.LogInformation(\"{player} is rolling the dice: {result}\", player, result);\n        }\n\n        return result;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Java Agent Logging Mode\nDESCRIPTION: Configures the logging output mode for the Java agent. Supports 'simple', 'none', and 'application' modes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\notel.javaagent.logging=simple\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Express Application\nDESCRIPTION: Command to run the Express application written in TypeScript using ts-node.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ npx ts-node app.ts\nListening for requests on http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Express Application\nDESCRIPTION: Command to run the Express application written in TypeScript using ts-node.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ npx ts-node app.ts\nListening for requests on http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Logging in .NET\nDESCRIPTION: Sets up OpenTelemetry logging in the .NET dependency injection container, configuring the OTLP exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/cart/index.md#2025-04-09_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nbuilder.Logging\n    .AddOpenTelemetry(options => options.AddOtlpExporter());\n```\n\n----------------------------------------\n\nTITLE: Logging Java Code Example\nDESCRIPTION: Example of Java code using SLF4J logger with MDC and structured logging. This snippet shows how to log messages with context and additional key-value pairs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/collecting-otel-compliant-java-logs-from-files/index.md#2025-04-09_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nLogger logger = org.slf4j.LoggerFactory.getLogger(MyClass.class);\n...\nMDC.put(\"customerId\", customerId);\n\nlogger.info(\"Order {} successfully placed\", orderId);\n\nlogger.atInfo().\n   .addKeyValue(\"orderId\", orderId)\n   .addKeyValue(\"outcome\", \"success\")\n   .log(\"placeOrder\");\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry noop() method for tracing, metrics, and logging in Java\nDESCRIPTION: Demonstrates the usage of OpenTelemetry's noop() implementation for tracing, metrics, and logging. The noop implementation provides a performance-optimized version that does nothing, making it useful as a default when no concrete implementation is installed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport static otel.Util.WIDGET_COLOR;\nimport static otel.Util.WIDGET_RED_CIRCLE;\nimport static otel.Util.WIDGET_SHAPE;\n\nimport io.opentelemetry.api.OpenTelemetry;\nimport io.opentelemetry.api.common.Attributes;\nimport io.opentelemetry.api.logs.Logger;\nimport io.opentelemetry.api.logs.Severity;\nimport io.opentelemetry.api.metrics.DoubleGauge;\nimport io.opentelemetry.api.metrics.DoubleHistogram;\nimport io.opentelemetry.api.metrics.LongCounter;\nimport io.opentelemetry.api.metrics.LongUpDownCounter;\nimport io.opentelemetry.api.metrics.Meter;\nimport io.opentelemetry.api.trace.StatusCode;\nimport io.opentelemetry.api.trace.Tracer;\n\npublic class NoopUsage {\n  private static final String SCOPE_NAME = \"fully.qualified.name\";\n\n  public static void noopUsage() {\n    // Access the noop OpenTelemetry instance\n    OpenTelemetry noopOpenTelemetry = OpenTelemetry.noop();\n\n    // Noop tracing\n    Tracer noopTracer = OpenTelemetry.noop().getTracer(SCOPE_NAME);\n    noopTracer\n        .spanBuilder(\"span name\")\n        .startSpan()\n        .setAttribute(WIDGET_SHAPE, \"square\")\n        .setStatus(StatusCode.OK)\n        .addEvent(\"event-name\", Attributes.builder().put(WIDGET_COLOR, \"red\").build())\n        .end();\n\n    // Noop metrics\n    Attributes attributes = WIDGET_RED_CIRCLE;\n    Meter noopMeter = OpenTelemetry.noop().getMeter(SCOPE_NAME);\n    DoubleHistogram histogram = noopMeter.histogramBuilder(\"fully.qualified.histogram\").build();\n    histogram.record(1.0, attributes);\n    // counter\n    LongCounter counter = noopMeter.counterBuilder(\"fully.qualified.counter\").build();\n    counter.add(1, attributes);\n    // async counter\n    noopMeter\n        .counterBuilder(\"fully.qualified.counter\")\n        .buildWithCallback(observable -> observable.record(10, attributes));\n    // updowncounter\n    LongUpDownCounter upDownCounter =\n        noopMeter.upDownCounterBuilder(\"fully.qualified.updowncounter\").build();\n    // async updowncounter\n    noopMeter\n        .upDownCounterBuilder(\"fully.qualified.updowncounter\")\n        .buildWithCallback(observable -> observable.record(10, attributes));\n    upDownCounter.add(-1, attributes);\n    // gauge\n    DoubleGauge gauge = noopMeter.gaugeBuilder(\"fully.qualified.gauge\").build();\n    gauge.set(1.1, attributes);\n    // async gauge\n    noopMeter\n        .gaugeBuilder(\"fully.qualified.gauge\")\n        .buildWithCallback(observable -> observable.record(10, attributes));\n\n    // Noop logs\n    Logger noopLogger = OpenTelemetry.noop().getLogsBridge().get(SCOPE_NAME);\n    noopLogger\n        .logRecordBuilder()\n        .setBody(\"log message\")\n        .setAttribute(WIDGET_SHAPE, \"square\")\n        .setSeverity(Severity.INFO)\n        .emit();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Kubernetes Cluster Name as Resource Attribute in OpenTelemetry Collector\nDESCRIPTION: Example using the resource processor to add Kubernetes cluster name as a resource attribute. This processor is specifically for modifying infrastructure metadata related to telemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  resource/k8s:\n    attributes:\n      - key: k8s.cluster.name\n        from_attribute: k8s-cluster\n        action: insert\n```\n\n----------------------------------------\n\nTITLE: Installing gRPC Transport for OTLP Exporter in PHP\nDESCRIPTION: These shell commands install the gRPC extension and the gRPC transport package for use with the OTLP exporter in PHP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npecl install grpc\ncomposer require open-telemetry/transport-grpc\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration in YAML\nDESCRIPTION: Reference to Cloud Foundry deployment configuration for adding OpenTelemetry Collector exporter settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/cloud-foundry.md#2025-04-09_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\noperations/experimental/add-otel-collector.yml\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core Logging Instrumentation\nDESCRIPTION: Sets the ASPNETCORE_HOSTINGSTARTUPASSEMBLIES environment variable to enable LoggingBuilder instrumentation without using the .NET CLR Profiler.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/instrumentations.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nASPNETCORE_HOSTINGSTARTUPASSEMBLIES=OpenTelemetry.AutoInstrumentation.AspNetCoreBootstrapper\n```\n\n----------------------------------------\n\nTITLE: Running instrumented Flask application\nDESCRIPTION: Launches the Flask application with OpenTelemetry instrumentation, exporting traces, metrics, and logs to the console.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true\nopentelemetry-instrument \\\n    --traces_exporter console \\\n    --metrics_exporter console \\\n    --logs_exporter console \\\n    --service_name dice-server \\\n    flask run -p 8080\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Metrics Output Example\nDESCRIPTION: Example JSON output showing metrics data for dice rolls, including counts for different roll values and resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Resource\": [\n    {\n      \"Key\": \"service.name\",\n      \"Value\": {\n        \"Type\": \"STRING\",\n        \"Value\": \"dice\"\n      }\n    }\n  ],\n  \"ScopeMetrics\": [\n    {\n      \"Scope\": {\n        \"Name\": \"rolldice\",\n        \"Version\": \"\",\n        \"SchemaURL\": \"\"\n      },\n      \"Metrics\": [\n        {\n          \"Name\": \"dice.rolls\",\n          \"Description\": \"The number of rolls by roll value\",\n          \"Unit\": \"{roll}\",\n          \"Data\": {\n            \"DataPoints\": [\n              {\n                \"Attributes\": [\n                  {\n                    \"Key\": \"roll.value\",\n                    \"Value\": {\n                      \"Type\": \"INT64\",\n                      \"Value\": 1\n                    }\n                  }\n                ],\n                \"StartTime\": \"2023-09-25T12:42:04.279204638+02:00\",\n                \"Time\": \"2023-09-25T12:42:15.482694258+02:00\",\n                \"Value\": 4\n              }\n            ]\n          }\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Istio with OpenTelemetry Tracing Configuration\nDESCRIPTION: Command using istioctl to install Istio with OpenTelemetry tracing enabled, configured to use the OTLP/HTTP exporter pointing to the Jaeger collector with environment resource detection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/new-otel-features-envoy-istio/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncat <<EOF | istioctl install -y -f -\napiVersion: install.istio.io/v1alpha1\nkind: IstioOperator\nspec:\n  meshConfig:\n    enableTracing: true\n    extensionProviders:\n    - name: otel-tracing\n      opentelemetry:\n        port: 4318\n        service: simplest-collector.default.svc.cluster.local\n        http:\n          path: \"/v1/traces\"\n          timeout: 5s\n        resource_detectors:\n          environment: {}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing Console Exporter Package\nDESCRIPTION: Install the OpenTelemetry Console exporter package using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Exporter.Console\n```\n\n----------------------------------------\n\nTITLE: Deploying Jaeger Container\nDESCRIPTION: Docker command to run Jaeger all-in-one container for collecting and visualizing traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 14250:14250 \\\n  -p 14268:14268 \\\n  -p 14269:14269 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Defining Learning Section with Translated Heading\nDESCRIPTION: Creates a section heading for learning about OpenTelemetry using a translated string.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_2\n\nLANGUAGE: HTML with Hugo Template\nCODE:\n```\n## {{ T \"community_learn\" }}\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenTelemetry Integration Table Header in Hugo Template\nDESCRIPTION: This snippet sets up the markdown table header for displaying OpenTelemetry integrations, defining columns for Name, OSS status, Component, and documentation links. It includes a footnote reference for additional information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/integrations-table.md#2025-04-09_snippet_2\n\nLANGUAGE: html\nCODE:\n```\nName[^1]     | OSS | Component |  Learn more\n------------ | --- | ---------- |  ----------\n```\n\n----------------------------------------\n\nTITLE: Enriching OpenTelemetry Activities in ASP.NET Instrumentation\nDESCRIPTION: Shows how to use the Enrich method to add custom tags to Activities generated by OpenTelemetry. This example adds tags for the physical path of the request and the response content type.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/netframework.md#2025-04-09_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nthis.tracerProvider = Sdk.CreateTracerProviderBuilder()\n    .AddAspNetInstrumentation((options) => options.Enrich\n        = (activity, eventName, rawObject) =>\n    {\n        if (eventName.Equals(\"OnStartActivity\"))\n        {\n            if (rawObject is HttpRequest httpRequest)\n            {\n                activity?.SetTag(\"physicalPath\", httpRequest.PhysicalPath);\n            }\n        }\n        else if (eventName.Equals(\"OnStopActivity\"))\n        {\n            if (rawObject is HttpResponse httpResponse)\n            {\n                activity?.SetTag(\"responseType\", httpResponse.ContentType);\n            }\n        }\n    })\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector\nDESCRIPTION: YAML configuration for the OpenTelemetry Collector, setting up receivers, processors, exporters, and service pipelines for tracing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nprocessors:\n  batch:\n\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n    verbosity: detailed\n  otlp/jaeger:\n    endpoint: localhost:14317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/jaeger, debug]\n  telemetry:\n    logs:\n      level: debug\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry SDK-Metrics in Node.js\nDESCRIPTION: Command to install the OpenTelemetry SDK-Metrics package via npm, which is used when you don't want to use the full OpenTelemetry SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_44\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @opentelemetry/sdk-metrics\n```\n\n----------------------------------------\n\nTITLE: Defining Connector Structure in Go\nDESCRIPTION: Defines the basic structure for the trace connector with configuration parameters, metrics consumer, and logger.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\n// schema for connector\ntype connectorImp struct {\n    config Config\n    metricsConsumer consumer.Metrics\n    logger *zap.Logger\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry BOM Dependency in Maven\nDESCRIPTION: This XML snippet shows how to add an OpenTelemetry BOM dependency in a Maven POM file. It uses the dependencyManagement section to import the BOM and then adds a specific OpenTelemetry dependency without specifying its version, as it's managed by the BOM.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/intro.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<project>\n  <dependencyManagement>\n    <dependencies>\n      <dependency>\n        <groupId>{{bomGroupId}}</groupId>\n        <artifactId>{{bomArtifactId}}</artifactId>\n        <version>{{bomVersion}}</version>\n        <type>pom</type>\n        <scope>import</scope>\n      </dependency>\n    </dependencies>\n  </dependencyManagement>\n  <!-- Add a dependency on an artifact whose version is managed by the bom -->\n  <dependencies>\n    <dependency>\n      <groupId>io.opentelemetry</groupId>\n      <artifactId>opentelemetry-api</artifactId>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Pipelines in OpenTelemetry Collector (YAML)\nDESCRIPTION: Example configuration for setting up metrics and traces pipelines in the OpenTelemetry Collector. This shows how to define receivers, processors, and exporters for different data types.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    metrics:\n      receivers: [opencensus, prometheus]\n      processors: [batch]\n      exporters: [opencensus, prometheus]\n    traces:\n      receivers: [opencensus, jaeger]\n      processors: [batch, memory_limiter]\n      exporters: [opencensus, zipkin]\n```\n\n----------------------------------------\n\nTITLE: Generating a Controller for the Dice Rolling Application\nDESCRIPTION: Command to generate a new controller named 'dice' that will handle the dice rolling functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrails generate controller dice\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Dependencies in mix.exs\nDESCRIPTION: Defines required OpenTelemetry dependencies including the API, SDK, exporter, and instrumentation packages for Phoenix, Cowboy, and Ecto.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\ndef deps do\n  [\n    # other default deps...\n    {:opentelemetry, \"~> {{% param versions.otelSdk %}}}\"},\n    {:opentelemetry_api, \"~> {{% param versions.otelApi %}}}\"},\n    {:opentelemetry_exporter, \"~> {{% param versions.otelExporter %}}}\"},\n    {:opentelemetry_phoenix, \"~> {{% param versions.otelPhoenix %}}}\"},\n    {:opentelemetry_cowboy, \"~> {{% param versions.otelCowboy %}}}\"},\n    {:opentelemetry_ecto, \"~> {{% param versions.otelEcto %}}\"} # if using ecto\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Tomcat / TomEE for OpenTelemetry Java Agent\nDESCRIPTION: Add the path to the Java agent to the startup script for Tomcat / TomEE. This configuration is platform-specific, with separate commands for Linux and Windows.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/server-config.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Add to <tomcat_home>/bin/setenv.sh\nCATALINA_OPTS=\"$CATALINA_OPTS -javaagent:/path/to/opentelemetry-javaagent.jar\"\n```\n\nLANGUAGE: bat\nCODE:\n```\nrem Add to <tomcat_home>\\bin\\setenv.bat\nset CATALINA_OPTS=%CATALINA_OPTS% -javaagent:\"<Drive>:\\path\\to\\opentelemetry-javaagent.jar\"\n```\n\n----------------------------------------\n\nTITLE: Setting up Jaeger Container for Testing\nDESCRIPTION: Docker command to start a Jaeger instance for testing the trace receiver. This sets up the necessary ports and enables OTLP collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 14317:4317 \\\n  -p 14318:4318 \\\n  jaegertracing/all-in-one:1.41\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in OpenTelemetry Collector Configuration (YAML)\nDESCRIPTION: Example showing how to reference environment variables in a configuration file. Environment variables are referenced using ${env:VARIABLE_NAME} syntax.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  attributes/example:\n    actions:\n      - key: ${env:DB_KEY}\n        action: ${env:OPERATION}\n```\n\n----------------------------------------\n\nTITLE: Installing Zipkin Exporter for OpenTelemetry in PHP\nDESCRIPTION: This shell command installs the Zipkin exporter package for OpenTelemetry in PHP using Composer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require open-telemetry/exporter-zipkin\n```\n\n----------------------------------------\n\nTITLE: Nesting Active Contexts in OpenTelemetry JavaScript\nDESCRIPTION: Demonstrates how active contexts can be nested using multiple api.context.with() calls. The active context changes within each nested callback.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\n\nconst key = api.createContextKey('Key to store a value');\nconst ctx = api.context.active();\n\n// No context is active\nconsole.log(api.context.active().getValue(key)); // undefined\n\napi.context.with(ctx.setValue(key, 'context 2'), () => {\n  // \"context 2\" is active\n  console.log(api.context.active().getValue(key)); // \"context 2\"\n  api.context.with(ctx.setValue(key, 'context 3'), () => {\n    // \"context 3\" is active\n    console.log(api.context.active().getValue(key)); // \"context 3\"\n  });\n  // \"context 2\" is active\n  console.log(api.context.active().getValue(key)); // \"context 2\"\n});\n\n// No context is active\nconsole.log(api.context.active().getValue(key)); // undefined\n```\n\n----------------------------------------\n\nTITLE: Creating Base64 Encoded Credentials for HTTP Basic Auth\nDESCRIPTION: Demonstrates how to encode and decode credentials for HTTP Basic Authentication using the base64 command-line tool.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# encode\n$ echo \"user-1:1234\" | base64\ndXNlci0xOjEyMzQK\n\n# decode\n$ echo \"dXNlci0xOjEyMzQK\" | base64 -d\nuser-1:1234\n```\n\n----------------------------------------\n\nTITLE: Enabling Go Runtime Metrics with OpenTelemetry\nDESCRIPTION: Initializes the OpenTelemetry runtime instrumentation to collect Go runtime metrics such as memory usage, GC stats, and goroutine count.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nerr := runtime.Start(runtime.WithMinimumReadMemStatsInterval(time.Second))\nif err != nil {\n    log.Fatal(err)\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Collector Settings via Command Line (Shell)\nDESCRIPTION: Examples showing how to use the --set option to override configuration settings. This demonstrates overriding nested configuration values.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\notelcol --set \"exporters::debug::verbosity=detailed\"\notelcol --set \"receivers::otlp::protocols::grpc={endpoint:localhost:4317, compression: gzip}\"\n```\n\n----------------------------------------\n\nTITLE: Testing Distributed Tracing with Service Requests\nDESCRIPTION: Command to execute a request from the ratings service to the productpage service, which will generate OpenTelemetry traces that can be viewed in Jaeger.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/new-otel-features-envoy-istio/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl exec \"$(kubectl get pod -l app=ratings -o jsonpath='{.items[0].metadata.name}')\" -c ratings -- curl -sS productpage:9080/productpage | grep -o \"<title>.*</title>\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Collector on Debian Linux (AMD64)\nDESCRIPTION: Commands to download and install the OpenTelemetry Collector DEB package on Debian-based Linux systems for AMD64 architecture.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt-get update\nsudo apt-get -y install wget\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_linux_amd64.deb\nsudo dpkg -i otelcol_{{% param vers %}}_linux_amd64.deb\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spans in Erlang/Elixir\nDESCRIPTION: Shows how to create basic spans using with_span in both languages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n?with_span(main, #{}, fun() ->\n                        %% do work here.\n                        %% when this function returns the Span ends\n                      end).\n```\n\nLANGUAGE: elixir\nCODE:\n```\nrequire OpenTelemetry.Tracer\n\n...\n\nOpenTelemetry.Tracer.with_span :main do\n  # do work here\n  # when the block ends the Span ends\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET Auto-instrumentation in Kubernetes\nDESCRIPTION: This snippet creates an Instrumentation resource for .NET services, configuring the OTLP exporter endpoint, propagators, and sampling strategy. It uses the OpenTelemetry Operator to inject auto-instrumentation into .NET applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  exporter:\n    endpoint: http://demo-collector:4318\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: \"1\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry C++ Server\nDESCRIPTION: Complete C++ server implementation with OpenTelemetry tracing integration, including tracer initialization, request handling, and span creation for a dice rolling endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"oatpp/web/server/HttpConnectionHandler.hpp\"\n#include \"oatpp/network/Server.hpp\"\n#include \"oatpp/network/tcp/server/ConnectionProvider.hpp\"\n\n#include \"opentelemetry/exporters/ostream/span_exporter_factory.h\"\n#include \"opentelemetry/sdk/trace/exporter.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/simple_processor_factory.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider_factory.h\"\n#include \"opentelemetry/trace/provider.h\"\n\n#include <cstdlib>\n#include <ctime>\n#include <string>\n\nusing namespace std;\nnamespace trace_api = opentelemetry::trace;\nnamespace trace_sdk = opentelemetry::sdk::trace;\nnamespace trace_exporter = opentelemetry::exporter::trace;\n\nnamespace {\n  void InitTracer() {\n    auto exporter  = trace_exporter::OStreamSpanExporterFactory::Create();\n    auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));\n    std::shared_ptr<opentelemetry::trace::TracerProvider> provider =\n      trace_sdk::TracerProviderFactory::Create(std::move(processor));\n    //set the global trace provider\n    trace_api::Provider::SetTracerProvider(provider);\n  }\n  void CleanupTracer() {\n    std::shared_ptr<opentelemetry::trace::TracerProvider> none;\n    trace_api::Provider::SetTracerProvider(none);\n  }\n\n}\n\nclass Handler : public oatpp::web::server::HttpRequestHandler {\npublic:\n  shared_ptr<OutgoingResponse> handle(const shared_ptr<IncomingRequest>& request) override {\n    auto tracer = opentelemetry::trace::Provider::GetTracerProvider()->GetTracer(\"my-app-tracer\");\n    auto span = tracer->StartSpan(\"RollDiceServer\");\n    int low = 1;\n    int high = 7;\n    int random = rand() % (high - low) + low;\n    // Convert a std::string to oatpp::String\n    const string response = to_string(random);\n    span->End();\n    return ResponseFactory::createResponse(Status::CODE_200, response.c_str());\n  }\n};\n\nvoid run() {\n  auto router = oatpp::web::server::HttpRouter::createShared();\n  router->route(\"GET\", \"/rolldice\", std::make_shared<Handler>());\n  auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router);\n  auto connectionProvider = oatpp::network::tcp::server::ConnectionProvider::createShared({\"localhost\", 8080, oatpp::network::Address::IP_4});\n  oatpp::network::Server server(connectionProvider, connectionHandler);\n  OATPP_LOGI(\"Dice Server\", \"Server running on port %s\", static_cast<const char*>(connectionProvider->getProperty(\"port\").getData()));\n  server.run();\n}\n\nint main() {\n  oatpp::base::Environment::init();\n  InitTracer();\n  srand((int)time(0));\n  run();\n  oatpp::base::Environment::destroy();\n  CleanupTracer();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry C++ Server\nDESCRIPTION: Complete C++ server implementation with OpenTelemetry tracing integration, including tracer initialization, request handling, and span creation for a dice rolling endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"oatpp/web/server/HttpConnectionHandler.hpp\"\n#include \"oatpp/network/Server.hpp\"\n#include \"oatpp/network/tcp/server/ConnectionProvider.hpp\"\n\n#include \"opentelemetry/exporters/ostream/span_exporter_factory.h\"\n#include \"opentelemetry/sdk/trace/exporter.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/simple_processor_factory.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider_factory.h\"\n#include \"opentelemetry/trace/provider.h\"\n\n#include <cstdlib>\n#include <ctime>\n#include <string>\n\nusing namespace std;\nnamespace trace_api = opentelemetry::trace;\nnamespace trace_sdk = opentelemetry::sdk::trace;\nnamespace trace_exporter = opentelemetry::exporter::trace;\n\nnamespace {\n  void InitTracer() {\n    auto exporter  = trace_exporter::OStreamSpanExporterFactory::Create();\n    auto processor = trace_sdk::SimpleSpanProcessorFactory::Create(std::move(exporter));\n    std::shared_ptr<opentelemetry::trace::TracerProvider> provider =\n      trace_sdk::TracerProviderFactory::Create(std::move(processor));\n    //set the global trace provider\n    trace_api::Provider::SetTracerProvider(provider);\n  }\n  void CleanupTracer() {\n    std::shared_ptr<opentelemetry::trace::TracerProvider> none;\n    trace_api::Provider::SetTracerProvider(none);\n  }\n\n}\n\nclass Handler : public oatpp::web::server::HttpRequestHandler {\npublic:\n  shared_ptr<OutgoingResponse> handle(const shared_ptr<IncomingRequest>& request) override {\n    auto tracer = opentelemetry::trace::Provider::GetTracerProvider()->GetTracer(\"my-app-tracer\");\n    auto span = tracer->StartSpan(\"RollDiceServer\");\n    int low = 1;\n    int high = 7;\n    int random = rand() % (high - low) + low;\n    // Convert a std::string to oatpp::String\n    const string response = to_string(random);\n    span->End();\n    return ResponseFactory::createResponse(Status::CODE_200, response.c_str());\n  }\n};\n\nvoid run() {\n  auto router = oatpp::web::server::HttpRouter::createShared();\n  router->route(\"GET\", \"/rolldice\", std::make_shared<Handler>());\n  auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router);\n  auto connectionProvider = oatpp::network::tcp::server::ConnectionProvider::createShared({\"localhost\", 8080, oatpp::network::Address::IP_4});\n  oatpp::network::Server server(connectionProvider, connectionHandler);\n  OATPP_LOGI(\"Dice Server\", \"Server running on port %s\", static_cast<const char*>(connectionProvider->getProperty(\"port\").getData()));\n  server.run();\n}\n\nint main() {\n  oatpp::base::Environment::init();\n  InitTracer();\n  srand((int)time(0));\n  run();\n  oatpp::base::Environment::destroy();\n  CleanupTracer();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jetty for OpenTelemetry Java Agent\nDESCRIPTION: Define the path to the Java agent for Jetty using the -javaagent argument. This can be done directly in the Java command, in the jetty.sh file, or in the start.ini file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/server-config.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njava -javaagent:/path/to/opentelemetry-javaagent.jar -jar start.jar\n```\n\nLANGUAGE: sh\nCODE:\n```\nJAVA_OPTIONS=\"${JAVA_OPTIONS} -javaagent:/path/to/opentelemetry-javaagent.jar\"\n```\n\nLANGUAGE: ini\nCODE:\n```\n#===========================================================\n# Sample Jetty start.ini file\n#-----------------------------------------------------------\n--exec\n-javaagent:/path/to/opentelemetry-javaagent.jar\n```\n\n----------------------------------------\n\nTITLE: Creating OTLP Trace Exporter over HTTP in Go OpenTelemetry\nDESCRIPTION: Example of how to create an OTLP trace exporter using the HTTP protocol with binary protobuf payloads. This allows sending trace data to an OTLP endpoint like the OpenTelemetry collector or Jaeger.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/exporters.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nimport (\n\t\"context\"\n\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracehttp\"\n\t\"go.opentelemetry.io/otel/sdk/trace\"\n)\n\nfunc newExporter(ctx context.Context) (trace.SpanExporter, error) {\n\treturn otlptracehttp.New(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Default Configuration for OpenTelemetry Connector\nDESCRIPTION: Implements the default configuration function that initializes the connector with default values.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\nfunc createDefaultConfig() component.Config {\n    return &Config{\n        AttributeName: defaultVal,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining API Route for Dice Rolling\nDESCRIPTION: Phoenix router configuration that defines the API endpoint for the dice rolling functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\nscope \"/api\", RollDiceWeb do\n  pipe_through :api\n\n  get \"/rolldice\", DiceController, :roll\nend\n```\n\n----------------------------------------\n\nTITLE: Enabling OpenTelemetry Discovery for Pod Metrics\nDESCRIPTION: YAML annotation that enables metrics discovery for a Kubernetes pod. This annotation must be set to 'true' to allow the OpenTelemetry Collector to discover and collect metrics from the pod.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/otel-collector-k8s-discovery.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nio.opentelemetry.discovery.metrics/enabled: 'true'\n```\n\n----------------------------------------\n\nTITLE: Enabling Python Logs Auto-Instrumentation\nDESCRIPTION: This YAML configuration enables Python logs auto-instrumentation by setting the OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED environment variable to true. This is required as Python logs auto-instrumentation is disabled by default.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: python-instrumentation\n  namespace: application\nspec:\n  exporter:\n    endpoint: http://demo-collector:4318\n  env:\n  propagators:\n    - tracecontext\n    - baggage\n  python:\n    env:\n      - name: OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED\n        value: 'true'\n```\n\n----------------------------------------\n\nTITLE: Creating OTLP Metrics Exporter over gRPC in Go OpenTelemetry\nDESCRIPTION: Example of how to create an OTLP metrics exporter using the gRPC protocol. This implementation sends metrics data to an OTLP endpoint like the OpenTelemetry collector via gRPC.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/exporters.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nimport (\n \t\"context\"\n\n\t\"go.opentelemetry.io/otel/exporters/otlp/otlpmetric/otlpmetricgrpc\"\n\t\"go.opentelemetry.io/otel/sdk/metric\"\n)\n\nfunc newExporter(ctx context.Context) (metric.Exporter, error) {\n\treturn otlpmetricgrpc.New(ctx)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Headers\nDESCRIPTION: Environment variable configuration for adding custom headers to OTLP requests. Supports key-value pairs for authentication and other configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/sdk-configuration/otlp-exporter.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_HEADERS=\"api-key=key,other-config-value=value\"\n```\n\n----------------------------------------\n\nTITLE: Validating OpenTelemetry Collector Configuration\nDESCRIPTION: This command shows how to validate a configuration file for the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\notelcol validate --config=customconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Injecting Context for Cross-Boundary Propagation in Java\nDESCRIPTION: This code demonstrates how to use ContextPropagators to inject the current context into an HTTP request carrier. It creates a composite propagator with W3C trace context and W3C baggage, then injects the current context into an HTTP request before sending it.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.baggage.propagation.W3CBaggagePropagator;\nimport io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\nimport io.opentelemetry.context.Context;\nimport io.opentelemetry.context.propagation.ContextPropagators;\nimport io.opentelemetry.context.propagation.TextMapPropagator;\nimport io.opentelemetry.context.propagation.TextMapSetter;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class InjectContextUsage {\n  private static final TextMapSetter<HttpRequest.Builder> TEXT_MAP_SETTER = new HttpRequestSetter();\n\n  public static void injectContextUsage() throws Exception {\n    // Create a ContextPropagators instance which propagates w3c trace context and w3c baggage\n    ContextPropagators propagators =\n        ContextPropagators.create(\n            TextMapPropagator.composite(\n                W3CTraceContextPropagator.getInstance(), W3CBaggagePropagator.getInstance()));\n\n    // Create an HttpRequest builder\n    HttpClient httpClient = HttpClient.newBuilder().build();\n    HttpRequest.Builder requestBuilder =\n        HttpRequest.newBuilder().uri(new URI(\"http://127.0.0.1:8080/resource\")).GET();\n\n    // Given a ContextPropagators instance, inject the current context into the HTTP request carrier\n    propagators.getTextMapPropagator().inject(Context.current(), requestBuilder, TEXT_MAP_SETTER);\n\n    // Send the request with the injected context\n    httpClient.send(requestBuilder.build(), HttpResponse.BodyHandlers.discarding());\n  }\n\n  /** {@link TextMapSetter} with a {@link HttpRequest.Builder} carrier. */\n  private static class HttpRequestSetter implements TextMapSetter<HttpRequest.Builder> {\n    @Override\n    public void set(HttpRequest.Builder carrier, String key, String value) {\n      if (carrier == null) {\n        return;\n      }\n      carrier.setHeader(key, value);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer from a TracerProvider\nDESCRIPTION: C# code showing how to acquire a tracer from a TracerProvider. This method is useful for non-ASP.NET Core applications or when injection is not preferred.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// ...\n\nvar tracer = tracerProvider.GetTracer(serviceName);\n\n// Assign it somewhere globally\n\n//...\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry.AutoInstrumentation NuGet Package\nDESCRIPTION: Command to add the OpenTelemetry.AutoInstrumentation package to a .NET project using the dotnet CLI. This package enables automatic instrumentation of the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/nuget-packages.md#2025-04-09_snippet_0\n\nLANGUAGE: terminal\nCODE:\n```\ndotnet add [<PROJECT>] package OpenTelemetry.AutoInstrumentation\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector in Docker\nDESCRIPTION: A shell command to run the OpenTelemetry Collector in a Docker container, mounting the configuration file and exposing the necessary ports for OTLP receivers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/_includes/exporters/intro.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 4317:4317 -p 4318:4318 --rm -v $(pwd)/collector-config.yaml:/etc/otelcol/config.yaml otel/opentelemetry-collector\n```\n\n----------------------------------------\n\nTITLE: Generating Test Traffic for NGINX Telemetry\nDESCRIPTION: Simple shell command to send an HTTP request to the instrumented NGINX server, which will generate trace data that can be viewed in Jaeger. This command helps verify that the telemetry setup is working correctly.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Setting up Go Workspace\nDESCRIPTION: Commands to initialize and configure a Go workspace for managing multiple modules in the project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\ngo work init\ngo work use otelcol-dev\ngo work use tailtracer\n```\n\n----------------------------------------\n\nTITLE: Creating ATM System Instrumentation Scope in Go\nDESCRIPTION: Function to create and initialize a ScopeSpans instance for the ATM system's instrumentation scope. Sets the name and version of the instrumentation library.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_36\n\nLANGUAGE: go\nCODE:\n```\nfunc appendAtmSystemInstrScopeSpans(resourceSpans *ptrace.ResourceSpans) (ptrace.ScopeSpans){\n\tscopeSpans := resourceSpans.ScopeSpans().AppendEmpty()\n\n    return scopeSpans\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TraceIDRatioBasedSampler with Environment Variables\nDESCRIPTION: This snippet demonstrates how to configure the TraceIDRatioBasedSampler using environment variables to sample 10% of traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/sampling.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_TRACES_SAMPLER=\"traceidratio\"\nexport OTEL_TRACES_SAMPLER_ARG=\"0.1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Metrics Preset in OpenTelemetry Collector\nDESCRIPTION: Configuration to enable the collection of host metrics from Kubernetes nodes. This preset requires the hostmetricsreceiver component and is recommended to be used in daemonset mode to collect metrics from each node.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nmode: daemonset\npresets:\n  hostMetrics:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Triggering DebugScope Error in PHP\nDESCRIPTION: Shows how a DebugScope error can be triggered when a scope is not properly detached. This helps developers locate issues with context and scope management.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/context.md#2025-04-09_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse OpenTelemetry\\Context\\Context;\n\n$key = Context::createKey('my-key');\n$scope = Context::getCurrent()->with($key, 'value')->activate();\n\n//exit without detaching $scope\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Protocol\nDESCRIPTION: Environment variable configuration for specifying the OTLP transport protocol. Supports gRPC, HTTP/protobuf, and HTTP/JSON formats.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/sdk-configuration/otlp-exporter.md#2025-04-09_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_PROTOCOL=grpc\n```\n\n----------------------------------------\n\nTITLE: Creating Manual Spans in OpenTelemetry PHP\nDESCRIPTION: Demonstrates manual span creation with a tracer, setting span kind as internal. The span becomes a child of the active span in current context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/quote.md#2025-04-09_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$span = Globals::tracerProvider()\n    ->getTracer('manual-instrumentation')\n    ->spanBuilder('calculate-quote')\n    ->setSpanKind(SpanKind::KIND_INTERNAL)\n    ->startSpan();\n/* calculate quote */\n$span->end();\n```\n\n----------------------------------------\n\nTITLE: OCB Build Process Output\nDESCRIPTION: Sample output from the OCB build process showing the various stages of generating the collector distribution, including initialization, source creation, module resolution, and compilation of the final binary.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/custom-collector.md#2025-04-09_snippet_4\n\nLANGUAGE: nocode\nCODE:\n```\n2022-06-13T14:25:03.037-0500\tINFO\tinternal/command.go:85\tOpenTelemetry Collector distribution builder\t{\"version\": \"{{% version-from-registry collector-builder noPrefix %}}\", \"date\": \"2023-01-03T15:05:37Z\"}\n2022-06-13T14:25:03.039-0500\tINFO\tinternal/command.go:108\tUsing config file\t{\"path\": \"builder-config.yaml\"}\n2022-06-13T14:25:03.040-0500\tINFO\tbuilder/config.go:99\tUsing go\t{\"go-executable\": \"/usr/local/go/bin/go\"}\n2022-06-13T14:25:03.041-0500\tINFO\tbuilder/main.go:76\tSources created\t{\"path\": \"./otelcol-dev\"}\n2022-06-13T14:25:03.445-0500\tINFO\tbuilder/main.go:108\tGetting go modules\n2022-06-13T14:25:04.675-0500\tINFO\tbuilder/main.go:87\tCompiling\n2022-06-13T14:25:17.259-0500\tINFO\tbuilder/main.go:94\tCompiled\t{\"binary\": \"./otelcol-dev/otelcol-dev\"}\n```\n\n----------------------------------------\n\nTITLE: Setting up Gradle Dependencies for Spring Boot Application\nDESCRIPTION: Gradle build configuration for a simple Spring Boot application. It sets up Java source directories and includes the Spring Boot web starter dependency.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"java\")\n  id(\"org.springframework.boot\") version \"3.0.6\"\n  id(\"io.spring.dependency-management\") version \"1.1.0\"\n}\n\nsourceSets {\n  main {\n    java.setSrcDirs(setOf(\".\"))\n  }\n}\n\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n  implementation(\"org.springframework.boot:spring-boot-starter-web\")\n}\n```\n\n----------------------------------------\n\nTITLE: Basic OpenTelemetry Collector Authenticator Configuration\nDESCRIPTION: Basic YAML configuration showing how to define and enable an OIDC authenticator extension in the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/authenticator-extension.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  oidc:\n\nreceivers:\nprocessors:\nexporters:\n\nservice:\n  extensions:\n    - oidc\n  pipelines:\n    traces:\n      receivers: []\n      processors: []\n      exporters: []\n```\n\n----------------------------------------\n\nTITLE: Setting up Node.js package.json\nDESCRIPTION: Initializes a new Node.js project by creating a package.json file in a new directory.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Configuring ParentBasedSampler in Erlang\nDESCRIPTION: Implements ParentBasedSampler configuration in Erlang with TraceIdRatioBasedSampler for root sampling and specific rules for parent contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/sampling.md#2025-04-09_snippet_1\n\nLANGUAGE: erlang\nCODE:\n```\n%% config/sys.config.src\n{opentelemetry, {sampler, {parent_based, #{root => {trace_id_ratio_based, 0.10},\n                                          remote_parent_sampled => always_on,\n                                          remote_parent_not_sampled => always_off,\n                                          local_parent_sampled => always_on,\n                                          local_parent_not_sampled => always_off}}}}\n```\n\n----------------------------------------\n\nTITLE: Route Middleware OpenTelemetry Instrumentation\nDESCRIPTION: Implementation of manual instrumentation middleware that captures incoming HTTP requests and creates spans with context propagation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/frontend-overhaul/index.md#2025-04-09_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Reference implementation at:\n// https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/frontend/utils/telemetry/InstrumentationMiddleware.ts\n```\n\n----------------------------------------\n\nTITLE: Starting Demo with Custom Port using Make\nDESCRIPTION: Command to start the demo on a custom port (8081) using Make.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nENVOY_PORT=8081 make start\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-HTTP Spans in OpenTelemetry Collector\nDESCRIPTION: This configuration uses the filter processor to drop spans that don't have HTTP attributes, reducing load on both the Collector and backend systems while preserving relevant telemetry data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter:\n    error_mode: ignore\n    traces:\n      span:\n        - attributes[\"http.request.method\"] == nil\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Collector using Helm\nDESCRIPTION: Command to install the OpenTelemetry Collector using Helm with a custom values file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhelm install otel-collector open-telemetry/opentelemetry-collector --values <path where you saved the chart>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Virtual Environment\nDESCRIPTION: Shell commands to create and activate a Python virtual environment for the logging example.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nmkdir python_logs_example\nvirtualenv python_logs_example\nsource python_logs_example/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Viewing Instrumentation Resource Details in YAML Format\nDESCRIPTION: This YAML output shows the details of an Instrumentation resource named 'python-instrumentation', including its metadata, specifications, and configurations for various auto-instrumentation images.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nName:         python-instrumentation\nNamespace:    application\nLabels:       app.kubernetes.io/managed-by=opentelemetry-operator\nAnnotations:  instrumentation.opentelemetry.io/default-auto-instrumentation-apache-httpd-image:\n               ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-apache-httpd:1.0.3\n             instrumentation.opentelemetry.io/default-auto-instrumentation-dotnet-image:\n               ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-dotnet:0.7.0\n             instrumentation.opentelemetry.io/default-auto-instrumentation-go-image:\n               ghcr.io/open-telemetry/opentelemetry-go-instrumentation/autoinstrumentation-go:v0.2.1-alpha\n             instrumentation.opentelemetry.io/default-auto-instrumentation-java-image:\n               ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-java:1.26.0\n             instrumentation.opentelemetry.io/default-auto-instrumentation-nodejs-image:\n               ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-nodejs:0.40.0\n             instrumentation.opentelemetry.io/default-auto-instrumentation-python-image:\n               ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:0.39b0\nAPI Version:  opentelemetry.io/v1alpha1\nKind:         Instrumentation\nMetadata:\n Creation Timestamp:  2023-07-28T03:42:12Z\n Generation:          1\n Resource Version:    3385\n UID:                 646661d5-a8fc-4b64-80b7-8587c9865f53\nSpec:\n...\n Exporter:\n   Endpoint:  http://otel-collector-collector.opentelemetry.svc.cluster.local:4318\n...\n Propagators:\n   tracecontext\n   baggage\n Python:\n   Image:  ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:0.39b0\n   Resource Requirements:\n     Limits:\n       Cpu:     500m\n       Memory:  32Mi\n     Requests:\n       Cpu:     50m\n       Memory:  32Mi\n Resource:\n Sampler:\nEvents:  <none>\n```\n\n----------------------------------------\n\nTITLE: Client-Side Authentication Configuration in OpenTelemetry Collector (YAML)\nDESCRIPTION: Example configuration for an agent to use OAuth2 client authentication when sending data to a remote collector. This sets up the OTLP exporter to obtain and use OIDC tokens.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  oauth2client:\n    client_id: agent\n    client_secret: some-secret\n    token_url: http://localhost:8080/auth/realms/opentelemetry/protocol/openid-connect/token\n\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n\nprocessors:\n\nexporters:\n  otlp/auth:\n    endpoint: remote-collector:4317\n    auth:\n      authenticator: oauth2client\n\nservice:\n  extensions:\n    - oauth2client\n  pipelines:\n    traces:\n      receivers:\n        - otlp\n      processors: []\n      exporters:\n        - otlp/auth\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Server in Go\nDESCRIPTION: Sets up a basic HTTP server in Go that handles a '/rolldice' endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/rolldice\", rolldice)\n\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n```\n\n----------------------------------------\n\nTITLE: Running PHP Application with OpenTelemetry Instrumentation\nDESCRIPTION: Command to run a PHP Laravel application with OpenTelemetry auto-instrumentation enabled, starting a development server on localhost port 8080.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/php-auto-instrumentation/index.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n./vendor/bin/run-with-otel-instrumentation php -S localhost:8080 -t public public/index.php\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry for Windows Services\nDESCRIPTION: PowerShell commands for setting up OpenTelemetry instrumentation for Windows Services. Shows how to register and configure a Windows Service for telemetry collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/_index.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\n# Import the module\nImport-Module \"OpenTelemetry.DotNet.Auto.psm1\"\n\n# Install core files\nInstall-OpenTelemetryCore\n\n# Set up your Windows Service instrumentation\nRegister-OpenTelemetryForWindowsService -WindowsServiceName \"WindowsServiceName\" -OTelServiceName \"MyServiceDisplayName\"\n```\n\n----------------------------------------\n\nTITLE: Actualización de repositorios remotos\nDESCRIPTION: Comandos de shell para mantener actualizadas las referencias de los repositorios remotos 'origin' y 'upstream' en el repositorio local.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch origin\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Initializing Prometheus Exporter for Metrics in C++\nDESCRIPTION: This snippet shows how to initialize the Prometheus exporter for metrics in OpenTelemetry C++. It includes setting up the exporter options and configuring the meter provider.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_4\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"opentelemetry/exporters/prometheus/exporter_factory.h\"\n#include \"opentelemetry/exporters/prometheus/exporter_options.h\"\n#include \"opentelemetry/metrics/provider.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider_factory.h\"\n\nnamespace metrics_sdk      = opentelemetry::sdk::metrics;\nnamespace metrics_api      = opentelemetry::metrics;\nnamespace metrics_exporter = opentelemetry::exporter::metrics;\n\nvoid InitMetrics()\n{\n    metrics_exporter::PrometheusExporterOptions opts;\n    opts.url = \"localhost:9464\";\n    auto prometheus_exporter = metrics_exporter::PrometheusExporterFactory::Create(opts);\n    auto u_provider = metrics_sdk::MeterProviderFactory::Create();\n    auto *p = static_cast<metrics_sdk::MeterProvider *>(u_provider.get());\n    p->AddMetricReader(std::move(prometheus_exporter));\n    std::shared_ptr<metrics_api::MeterProvider> provider(std::move(u_provider));\n    metrics_api::Provider::SetMeterProvider(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tail Sampling Processor in OpenTelemetry Collector\nDESCRIPTION: Configuration example for the tail sampling processor showing error-based and probabilistic sampling policies. Includes settings for decision wait time, trace memory allocation, and expected trace throughput.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/tail-sampling/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  tail_sampling:\n    decision_wait: 10s\n    num_traces: 100\n    expected_new_traces_per_sec: 10\n    policies:\n      [\n        {\n          name: errors-policy,\n          type: status_code,\n          status_code: { status_codes: [ERROR] },\n        },\n        {\n          name: randomized-policy,\n          type: probabilistic,\n          probabilistic: { sampling_percentage: 25 },\n        },\n      ]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for AWS Lambda\nDESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector to receive traces and logs from the AWS Lambda Telemetry API and forward them to an external collector. It uses the 'decouple' processor to separate receiving and exporting operations, allowing Lambda to return while telemetry data is still being processed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/observing-lambdas/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  telemetryapi:\nexporters:\n  otlphttp/external:\n    endpoint: 'external-collector:4318'\nprocessors:\n  batch:\n  decouple:\nservice:\n  pipelines:\n    traces:\n      receivers: [telemetryapi]\n      processors: [batch, decouple]\n      exporters: [otlphttp/external]\n    logs:\n      receivers: [telemetryapi]\n      processors: [batch, decouple]\n      exporters: [otlphttp/external]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Logs\nDESCRIPTION: This YAML configuration sets up an OpenTelemetry collector to receive logs via OTLP and export them to a local file. It defines receivers, processors, exporters, and a pipeline for log data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/agent.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      http:\n        endpoint: 0.0.0.0:4318\n\nprocessors:\n  batch:\n\nexporters:\n  file:\n    path: ./app42_example.log\n    rotation:\n\nservice:\n  pipelines:\n    logs/dev:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [file]\n```\n\n----------------------------------------\n\nTITLE: Running OCB with Configuration File\nDESCRIPTION: Command to execute the OpenTelemetry Collector Builder (OCB) tool with a specified configuration file. This command generates the custom collector code and builds the binary distribution.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/custom-collector.md#2025-04-09_snippet_3\n\nLANGUAGE: cmd\nCODE:\n```\n./ocb --config builder-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Spring Boot Application Main Class\nDESCRIPTION: Java code for the main application class that configures and runs a Spring Boot application with banner mode turned off.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport org.springframework.boot.Banner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class DiceApplication {\n  public static void main(String[] args) {\n    SpringApplication app = new SpringApplication(DiceApplication.class);\n    app.setBannerMode(Banner.Mode.OFF);\n    app.run(args);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Agent with Environment Variables\nDESCRIPTION: This snippet demonstrates how to use environment variables to configure the OpenTelemetry agent, setting the service name and trace exporter before launching the Java application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nOTEL_SERVICE_NAME=your-service-name \\\nOTEL_TRACES_EXPORTER=zipkin \\\njava -javaagent:path/to/opentelemetry-javaagent.jar \\\n     -jar myapp.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Timeout\nDESCRIPTION: Environment variable configuration for setting timeout values in milliseconds for OTLP data transmission.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/sdk-configuration/otlp-exporter.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_TIMEOUT=500\n```\n\n----------------------------------------\n\nTITLE: Orchestrating Services with Docker Compose\nDESCRIPTION: Docker Compose configuration that defines and connects the OTel Collector and the Python application. It mounts the necessary files and configures the services to work together.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  collector:\n    image: otel/opentelemetry-collector-contrib:latest\n    volumes:\n      - ./otel-config.yaml:/etc/otelcol-contrib/config.yaml\n      - ./:/usr/src/app\n    command: ['--config=/etc/otelcol-contrib/config.yaml']\n    ports:\n      - '4317:4317'\n  baby-grogu:\n    build: .\n    command: python main.py 10\n    volumes:\n      - .:/usr/src/app\n```\n\n----------------------------------------\n\nTITLE: Implementing Config Struct with Fields in Go\nDESCRIPTION: Complete configuration struct implementation with fields for interval and number of traces, using mapstructure tags for YAML parsing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\n// Config represents the receiver config settings within the collector's config.yaml\ntype Config struct {\n   Interval    string `mapstructure:\"interval\"`\n   NumberOfTraces int `mapstructure:\"number_of_traces\"`\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector with Target Allocator Configuration\nDESCRIPTION: YAML configuration for setting up an OpenTelemetry Collector with Target Allocator for distributed Prometheus scraping. Includes collector configuration with prometheus receiver setup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/scaling.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: collector-with-ta\nspec:\n  mode: statefulset\n  targetAllocator:\n    enabled: true\n  config: |\n    receivers:\n      prometheus:\n        config:\n          scrape_configs:\n          - job_name: 'otel-collector'\n            scrape_interval: 10s\n            static_configs:\n            - targets: [ '0.0.0.0:8888' ]\n\n    exporters:\n      # Note: Prior to v0.86.0 use the `logging` instead of `debug`.\n      debug:\n\n    service:\n      pipelines:\n        traces:\n          receivers: [prometheus]\n          processors: []\n          exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Redaction Processor Configuration in YAML\nDESCRIPTION: This configuration sets up the redaction processor to scrub sensitive data, including credit card numbers, from telemetry data before exporting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  redaction:\n    allow_all_keys: false\n    allowed_keys:\n      - description\n      - group\n      - id\n      - name\n    ignored_keys:\n      - safe_attribute\n    blocked_values: # Regular expressions for blocking values of allowed span attributes\n      - '4[0-9]{12}(?:[0-9]{3})?' # Visa credit card number\n      - '(5[1-5][0-9]{14})' # MasterCard number\n    summary: debug\n```\n\n----------------------------------------\n\nTITLE: Defining a Matching Kubernetes Service in YAML\nDESCRIPTION: This YAML configuration shows a Kubernetes Service that matches the criteria set in the ServiceMonitor. It has the correct labels, namespace, and port name to be discovered by the ServiceMonitor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: py-prometheus-app\n  namespace: opentelemetry\n  labels:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\nspec:\n  selector:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\n  ports:\n    - name: prom\n      port: 8080\n```\n\n----------------------------------------\n\nTITLE: Unstructured Logs Examples\nDESCRIPTION: Examples of unstructured logs with inconsistent formats that, while human-readable, are difficult to parse programmatically. These include error messages, system events, and debug information with varying formats.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/logs.md#2025-04-09_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[ERROR] 2024-08-04 12:45:23 - Failed to connect to database. Exception: java.sql.SQLException: Timeout expired. Attempted reconnect 3 times. Server: db.example.com, Port: 5432\n\nSystem reboot initiated at 2024-08-04 03:00:00 by user: admin. Reason: Scheduled maintenance. Services stopped: web-server, database, cache. Estimated downtime: 15 minutes.\n\nDEBUG - 2024-08-04 09:30:15 - User johndoe performed action: file_upload. Filename: report_Q3_2024.pdf, Size: 2.3 MB, Duration: 5.2 seconds. Result: Success\n```\n\n----------------------------------------\n\nTITLE: Initializing Composer Dependencies for Example PHP App\nDESCRIPTION: Shell commands to initialize a minimal composer.json file with required dependencies for the example application, including Slim, PSR-7, and Monolog.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncomposer init \\\n  --no-interaction \\\n  --require slim/slim:\"^4\" \\\n  --require slim/psr7:\"^1\" \\\n  --require monolog/monolog:\"^3\"\ncomposer update\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Collector with Helm\nDESCRIPTION: Shell command for installing the OpenTelemetry Collector using Helm with a custom values file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nhelm install otel-collector-cluster open-telemetry/opentelemetry-collector --values <path where you saved the chart>\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Metrics Export in OpenTelemetry Collector\nDESCRIPTION: YAML configuration for pushing internal metrics to an OTLP backend using HTTP/protobuf protocol.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  telemetry:\n    metrics:\n      readers:\n        - periodic:\n            exporter:\n              otlp:\n                protocol: http/protobuf\n                endpoint: https://backend:4318\n```\n\n----------------------------------------\n\nTITLE: Running Go Mod Tidy for Dependency Management\nDESCRIPTION: Shell command to update and organize module dependencies in go.mod and go.sum files.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngo mod tidy\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector DaemonSet Configuration\nDESCRIPTION: OpenTelemetry Collector configuration as a DaemonSet with basicauth extension, k8sattributes processor, and OTLP exporter settings for edge cluster deployment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otel-collector-app\nspec:\n  mode: daemonset\n  image: otel/opentelemetry-collector-contrib:0.58.0\n  serviceAccount: attributes-account\n  env:\n    - name: KUBE_NODE_NAME\n      valueFrom:\n        fieldRef:\n          apiVersion: v1\n          fieldPath: spec.nodeName\n\n  config: |\n    extensions:\n      basicauth/client:\n        client_auth: # credentials must be consistent with those of the receiving collector.\n          username: <REPLACE: your basicauth username, e.g.: \"user-1\">\n          password: <REPLACE: your basicauth password, e.g.: \"1234\">\n\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n\n    processors:\n      resource:\n        attributes:\n        - key: cloud.availability_zone\n          value: <REPLACE: your availability zone, e.g.: \"eu-west-1\">\n          action: insert\n        - key: k8s.cluster.name\n          value: <REPLACE: your cluster name, e.g.: \"edge-cluster-1\">\n          action: insert\n      k8sattributes:\n        filter:\n          node_from_env_var: KUBE_NODE_NAME\n\n    exporters:\n      otlp:\n        endpoint: \"<REPLACE: your domain endpoint, e.g.: \"traces.example.com:443\">\"\n        auth:\n          authenticator: basicauth/client\n      logging:\n\n    service:\n      extensions: [basicauth/client]\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: [k8sattributes]\n          exporters: [otlp,logging]\n```\n\n----------------------------------------\n\nTITLE: Filling Resource Attributes for ATM Entity in Go\nDESCRIPTION: This function populates a pcommon.Resource with attributes describing an ATM entity, including custom 'atm.' prefixed attributes and standard service attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_33\n\nLANGUAGE: Go\nCODE:\n```\nfunc fillResourceWithAtm(resource *pcommon.Resource, atm Atm){\n   atmAttrs := resource.Attributes()\n   atmAttrs.PutInt(\"atm.id\", atm.ID)\n   atmAttrs.PutStr(\"atm.stateid\", atm.StateID)\n   atmAttrs.PutStr(\"atm.ispnetwork\", atm.ISPNetwork)\n   atmAttrs.PutStr(\"atm.serialnumber\", atm.SerialNumber)\n}\n```\n\n----------------------------------------\n\nTITLE: DaemonSet Configuration for Log Collection\nDESCRIPTION: Kubernetes DaemonSet configuration showing volume mounts required for the OpenTelemetry Collector to access container and pod logs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: DaemonSet\n...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      ...\n      containers:\n        - name: opentelemetry-collector\n          ...\n          volumeMounts:\n            ...\n            # Mount the volumes to the collector container\n            - name: varlogpods\n              mountPath: /var/log/pods\n              readOnly: true\n            - name: varlibdockercontainers\n              mountPath: /var/lib/docker/containers\n              readOnly: true\n            ...\n      volumes:\n        ...\n        # Typically the collector will want access to pod logs and container logs\n        - name: varlogpods\n          hostPath:\n            path: /var/log/pods\n        - name: varlibdockercontainers\n          hostPath:\n            path: /var/lib/docker/containers\n        ...\n```\n\n----------------------------------------\n\nTITLE: Running the Flask application\nDESCRIPTION: Launches the Flask application on port 8080.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nflask run -p 8080\n```\n\n----------------------------------------\n\nTITLE: Running Go Application with OpenTelemetry\nDESCRIPTION: Commands to build and run the dice rolling application with OpenTelemetry configuration. Sets service name and version via environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngo mod tidy\nexport OTEL_RESOURCE_ATTRIBUTES=\"service.name=dice,service.version=0.1.0\"\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Filtering Spans with OTTL Filter Processor in OpenTelemetry Collector\nDESCRIPTION: Configuration example for the filter processor using OTTL to drop span data that doesn't match specific service names. This allows users to keep data only from designated services while filtering out everything else.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  filter/ottl:\n    error_mode: ignore\n    traces:\n      span:\n        - |\n        resource.attributes[\"service.name\"] != \"app1\" and\n        resource.attributes[\"service.name\"] != \"app2\" and\n        resource.attributes[\"service.name\"] != \"app3\"\n```\n\n----------------------------------------\n\nTITLE: Configuring NGINX as a Reverse Proxy for Backend Service\nDESCRIPTION: NGINX configuration file that sets up a simple reverse proxy to forward all requests from the frontend to the backend service running on port 8080.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_10\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen       80;\n    location / {\n        proxy_pass http://backend:8080;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OCB Builder on Linux AMD64\nDESCRIPTION: Command to download and install the OpenTelemetry Collector builder (ocb) binary for Linux AMD64 systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/custom-collector.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -fL -o ocb \\\nhttps://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/cmd%2Fbuilder%2F{{% version-from-registry collector-builder %}}/ocb_{{% version-from-registry collector-builder noPrefix %}}_linux_amd64\nchmod +x ocb\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubernetes Attributes Preset\nDESCRIPTION: YAML configuration to enable the Kubernetes attributes preset for the OpenTelemetry Collector, setting it up as a DaemonSet.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nmode: daemonset\npresets:\n  kubernetesAttributes:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Launching Java Application with OpenTelemetry Agent (Environment Variables)\nDESCRIPTION: This snippet shows how to set up environment variables for the OpenTelemetry agent and launch a Java application, allowing for more flexible configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport JAVA_TOOL_OPTIONS=\"-javaagent:path/to/opentelemetry-javaagent.jar\"\nexport OTEL_SERVICE_NAME=\"your-service-name\"\njava -jar myapp.jar\n```\n\n----------------------------------------\n\nTITLE: Running OpAMP Server with Go\nDESCRIPTION: Command to start the OpAMP server example included in the opamp-go repository. This server will act as the control plane for managing OpenTelemetry collectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/management.md#2025-04-09_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ go run .\n2023/02/08 13:31:32.004501 [MAIN] OpAMP Server starting...\n2023/02/08 13:31:32.004815 [MAIN] OpAMP Server running...\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Pipeline Exporters\nDESCRIPTION: YAML configuration for overriding the exporters in the traces pipeline.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  pipelines:\n    traces:\n      exporters: [spanmetrics, otlphttp/example]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Endpoint in Instrumentation YAML\nDESCRIPTION: YAML configuration to specify the OpenTelemetry Collector endpoint in the Instrumentation resource for telemetry data export.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  exporter:\n    endpoint: http://demo-collector.opentelemetry.svc.cluster.local:4317\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Profiling with OTLP\nDESCRIPTION: YAML configuration example for setting up the OpenTelemetry Collector to receive and export profiling data using OTLP protocol. This configuration enables profile ingestion and export through gRPC, though it's not yet recommended for production use.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/state-profiling.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\nexporters:\n  otlp:\n    endpoint: 'localhost:4317'\nservice:\n  pipelines:\n    profiles:\n      receivers: [otlp]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Size for OTLP Exporter in OpenTelemetry Collector\nDESCRIPTION: This configuration demonstrates how to manage queue size for the OTLP exporter using the exporterhelper to handle traffic spikes while preventing data loss and memory issues.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    endpoint: <ENDPOINT>\n    sending_queue:\n      queue_size: 800\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP HTTP/Proto Exporter for Python\nDESCRIPTION: Command to install the OpenTelemetry HTTP/Proto exporter package as a dependency for your Python project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-exporter-otlp-proto-http\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Contrib Instrumentation Libraries in Go\nDESCRIPTION: Command to install OpenTelemetry instrumentation libraries from the Contrib repository using go get. Replace {import-path} and {package-name} with appropriate values.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get go.opentelemetry.io/contrib/instrumentation/{import-path}/otel{package-name}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry API Dependencies for PHP\nDESCRIPTION: Shell commands to install the OpenTelemetry API packages necessary for manual instrumentation of PHP applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require open-telemetry/api open-telemetry/sem-conv\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Dependencies\nDESCRIPTION: Updated Package.swift configuration adding OpenTelemetry dependencies including API, SDK, StdoutExporter, and ResourceExtension.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.9\nimport PackageDescription\n\n\nlet package = Package(\n    name: \"dice-server\",\n    platforms: [\n       .macOS(.v13)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.83.1\"),\n        .package(url: \"https://github.com/open-telemetry/opentelemetry-swift\", from: \"1.0.0\"),\n    ],\n    targets: [\n        .executableTarget(\n            name: \"DiceApp\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\"),\n                .product(name: \"OpenTelemetryApi\", package: \"opentelemetry-swift\"),\n                .product(name: \"OpenTelemetrySdk\", package: \"opentelemetry-swift\"),\n                .product(name: \"StdoutExporter\", package: \"opentelemetry-swift\"),\n                .product(name: \"ResourceExtension\", package: \"opentelemetry-swift\"),\n            ],\n            path: \".\"\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Disabling Specific Node.js Instrumentation Libraries\nDESCRIPTION: This YAML configuration disables specific Node.js instrumentation libraries using the OTEL_NODE_DISABLED_INSTRUMENTATIONS environment variable. It keeps all default libraries enabled except for FS and gRPC instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\n# ... other fields skipped from this example\nspec:\n  # ... other fields skipped from this example\n  nodejs:\n    env:\n      - name: OTEL_NODE_DISABLED_INSTRUMENTATIONS\n        value: fs,grpc # comma-separated list of the instrumentation package names without the `@opentelemetry/instrumentation-` prefix.\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Heading ID in Markdown\nDESCRIPTION: Example of Markdown syntax for preserving heading IDs when translating content, using the format '{ #some-id }' after the heading text.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{ #some-id }\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Attributes in OpenTelemetry\nDESCRIPTION: Defines key-value pairs to be used as resource attributes in OpenTelemetry. These attributes provide context about the service being monitored.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/sdk-configuration/general.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_RESOURCE_ATTRIBUTES=\"key1=value1,key2=value2\"\n```\n\n----------------------------------------\n\nTITLE: Updated trace generation with ResourceSpans in Go\nDESCRIPTION: Enhanced generateTraces function that creates ResourceSpans and initializes Resource objects for ATM entities. This demonstrates how to properly create resources within the OpenTelemetry Collector's API structure.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_32\n\nLANGUAGE: go\nCODE:\n```\nfunc generateTraces(numberOfTraces int) ptrace.Traces{\n\ttraces := ptrace.NewTraces()\n\n\tfor i := 0; i <= numberOfTraces; i++{\n\t\tnewAtm := generateAtm()\n\t\tnewBackendSystem := generateBackendSystem()\n\n\t\tresourceSpan := traces.ResourceSpans().AppendEmpty()\n\t\tatmResource := resourceSpan.Resource()\n\t}\n\n\treturn traces\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry as Temporary Release\nDESCRIPTION: Project configuration that sets up OpenTelemetry as a temporary application in releases to prevent application termination on OpenTelemetry failures.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\ndef project do\n  [\n    app: :roll_dice,\n    version: \"0.1.0\",\n    elixir: \"~> 1.14\",\n    elixirc_paths: elixirc_paths(Mix.env()),\n    start_permanent: Mix.env() == :prod,\n    releases: [\n      roll_dice: [\n        applications: [opentelemetry: :temporary]\n      ]\n    ],\n    aliases: aliases(),\n    deps: deps()\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Helm Chart Repository\nDESCRIPTION: Command to add the OpenTelemetry Collector Helm chart repository for later installation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Trace Output Example\nDESCRIPTION: Example JSON output showing trace data with parent and child spans for a dice roll request. Includes span context, attributes, timestamps and OpenTelemetry resource information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"Name\": \"roll\",\n\t\"SpanContext\": {\n\t\t\"TraceID\": \"829fb7ceb787403c96eac3caf285c965\",\n\t\t\"SpanID\": \"8b6b408b6c1a35e5\",\n\t\t\"TraceFlags\": \"01\",\n\t\t\"TraceState\": \"\",\n\t\t\"Remote\": false\n\t},\n\t\"Parent\": {\n\t\t\"TraceID\": \"829fb7ceb787403c96eac3caf285c965\",\n\t\t\"SpanID\": \"612be4bbdf450de6\",\n\t\t\"TraceFlags\": \"01\",\n\t\t\"TraceState\": \"\",\n\t\t\"Remote\": false\n\t},\n\t\"SpanKind\": 1,\n\t\"StartTime\": \"2023-09-25T12:42:06.177119576+02:00\",\n\t\"EndTime\": \"2023-09-25T12:42:06.177136776+02:00\",\n\t\"Attributes\": [\n\t\t{\n\t\t\t\"Key\": \"roll.value\",\n\t\t\t\"Value\": {\n\t\t\t\t\"Type\": \"INT64\",\n\t\t\t\t\"Value\": 6\n\t\t\t}\n\t\t}\n\t],\n\t\"Events\": null,\n\t\"Links\": null,\n\t\"Status\": {\n\t\t\"Code\": \"Unset\",\n\t\t\"Description\": \"\"\n\t},\n\t\"DroppedAttributes\": 0,\n\t\"DroppedEvents\": 0,\n\t\"DroppedLinks\": 0,\n\t\"ChildSpanCount\": 0,\n\t\"Resource\": [\n\t\t{\n\t\t\t\"Key\": \"service.name\",\n\t\t\t\"Value\": {\n\t\t\t\t\"Type\": \"STRING\",\n\t\t\t\t\"Value\": \"dice\"\n\t\t\t}\n\t\t}\n\t]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for HTTP Check Receiver\nDESCRIPTION: This YAML configuration sets up the OpenTelemetry Collector with the HTTP Check receiver. It defines multiple HTTP targets with different methods and headers, sets a collection interval, and outlines the basic pipeline structure.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/synthetic-testing/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  httpcheck:\n    targets:\n      - endpoint: https://api.restful-api.dev/objects\n        method: GET\n      - endpoint: https://httpbin.org/delete\n        method: DELETE\n      - endpoint: https://httpbin.org/post\n        method: POST\n        headers:\n          test-key: 'test-123'\n    collection_interval: 10s\n\nexporters:\n  #Your chosen exporter\n\nprocessors:\n  batch:\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [httpcheck]\n      processors: [batch]\n      #exporters: [your-exporter]\n```\n\n----------------------------------------\n\nTITLE: Enabling GCP Resource Provider\nDESCRIPTION: Enables the GCP Resource Provider for additional resource information in OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: Properties\nCODE:\n```\notel.resource.providers.gcp.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Server-Side Authentication Configuration in OpenTelemetry Collector (YAML)\nDESCRIPTION: Example configuration for setting up OIDC authentication on a receiver in a remote collector. This protects the OTLP endpoints from unauthorized access.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  oidc:\n    issuer_url: http://localhost:8080/auth/realms/opentelemetry\n    audience: collector\n\nreceivers:\n  otlp/auth:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n        auth:\n          authenticator: oidc\n\nprocessors:\n\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n\nservice:\n  extensions:\n    - oidc\n  pipelines:\n    traces:\n      receivers:\n        - otlp/auth\n      processors: []\n      exporters:\n        - debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Receiver Creator for NGINX Discovery in Kubernetes\nDESCRIPTION: YAML configuration for the receiver creator that enables automatic discovery of NGINX pods in a Kubernetes cluster. The configuration watches for pods that expose port 80 and have names matching 'nginx'.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/otel-collector-k8s-discovery.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  receiver_creator:\n    watch_observers: [k8s_observer]\n    receivers:\n      nginx:\n        rule: type == \"port\" && port == 80 && pod.name matches \"(?i)nginx\"\n        config:\n          endpoint: 'http://`endpoint`/nginx_status'\n          collection_interval: '15s'\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Agent with JVM Arguments\nDESCRIPTION: This command illustrates how to configure the OpenTelemetry agent using JVM arguments, setting the service name and specifying Zipkin as the trace exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njava -javaagent:path/to/opentelemetry-javaagent.jar \\\n     -Dotel.service.name=your-service-name \\\n     -Dotel.traces.exporter=zipkin \\\n     -jar myapp.jar\n```\n\n----------------------------------------\n\nTITLE: Checking Localization Drift for Specific Language\nDESCRIPTION: Command to restrict the localization check to a specific language path, such as Chinese (zh) content.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run check:i18n -- content/zh\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS with cert-manager and Ingress for OpenTelemetry Collector\nDESCRIPTION: YAML configuration for setting up automatic TLS certificate provisioning with cert-manager and exposing the OpenTelemetry Collector through an Ingress.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: letsencrypt\n  namespace: cert-manager\nspec:\n  acme:\n    server: https://acme-v02.api.letsencrypt.org/directory\n    email: your-email-address-here@example.com # REPLACE\n    privateKeySecretRef:\n      name: letsencrypt\n    solvers:\n      - http01:\n          ingress:\n            class: nginx\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: ingress-otel\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    nginx.ingress.kubernetes.io/backend-protocol: GRPC\n    cert-manager.io/cluster-issuer: letsencrypt\nspec:\n  tls:\n    - hosts:\n        - your-host # REPLACE your domain endpoint, e.g., traces@example.com\n      secretName: letsencrypt\n  rules:\n    - host: your-host # REPLACE your domain endpoint, e.g., traces@example.com\n      http:\n        paths:\n          - pathType: Prefix\n            path: '/'\n            backend:\n              service:\n                name: otel-collector-app-collector\n                port:\n                  number: 4317\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Tracing Middleware in Rust\nDESCRIPTION: Sets up HTTP client tracing middleware for outgoing HTTP requests using reqwest-middleware and tracing-opentelemetry libraries to automatically generate child spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/shipping.md#2025-04-09_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nlet reqwest_client = reqwest::Client::new();\nlet client = ClientBuilder::new(reqwest_client)\n    .with(TracingMiddleware::<SpanBackendWithUrl>::new())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Peer Service Mapping with Ports and Paths\nDESCRIPTION: Advanced configuration example showing how to map hosts with specific ports and paths to peer services. Supported in Java agent version 1.31.0 and above.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/instrumentation/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n1.2.3.4:443=cats-service,dogs-abcdef123.serverlessapis.com:80/api=dogs-api\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector\nDESCRIPTION: YAML configuration for OpenTelemetry Collector setup with Target Allocator and various pipeline configurations for traces, metrics, and logs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1beta1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otelcol\n  namespace: opentelemetry\nspec:\n  mode: statefulset\n  targetAllocator:\n    enabled: true\n    serviceAccount: opentelemetry-targetallocator-sa\n    prometheusCR:\n      enabled: true\n      podMonitorSelector: {}\n      serviceMonitorSelector: {}\n  config:\n    receivers:\n      otlp:\n        protocols:\n          grpc: {}\n          http: {}\n      prometheus:\n        config:\n          scrape_configs:\n            - job_name: 'otel-collector'\n              scrape_interval: 10s\n              static_configs:\n                - targets: ['0.0.0.0:8888']\n\n    processors:\n      batch: {}\n\n    exporters:\n      debug:\n        verbosity: detailed\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: [batch]\n          exporters: [debug]\n        metrics:\n          receivers: [otlp, prometheus]\n          processors: []\n          exporters: [debug]\n        logs:\n          receivers: [otlp]\n          processors: [batch]\n          exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Setting Metrics Level in OpenTelemetry Collector\nDESCRIPTION: YAML configuration for setting the verbosity level of internal metrics collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  telemetry:\n    metrics:\n      level: detailed\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurableMetricExporterProvider in Java\nDESCRIPTION: Example implementation of ConfigurableMetricExporterProvider interface to create a custom metric exporter that can participate in autoconfiguration. The exporter is created when OTEL_METRICS_EXPORTER includes the value from getName().\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;\nimport io.opentelemetry.sdk.autoconfigure.spi.metrics.ConfigurableMetricExporterProvider;\nimport io.opentelemetry.sdk.metrics.export.MetricExporter;\n\npublic class CustomMetricExporterProvider implements ConfigurableMetricExporterProvider {\n\n  @Override\n  public MetricExporter createExporter(ConfigProperties config) {\n    // Callback invoked when OTEL_METRICS_EXPORTER includes the value from getName().\n    return new CustomMetricExporter();\n  }\n\n  @Override\n  public String getName() {\n    return \"custom-exporter\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Log Output with Trace Correlation\nDESCRIPTION: Example JSON output showing log records with automatic trace correlation fields including TraceId and SpanId.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/_index.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"logRecords\": [\n    {\n        \"timeUnixNano\": \"1679392614538226700\",\n        \"severityNumber\": 9,\n        \"severityText\": \"Information\",\n        \"body\": {\n            \"stringValue\": \"Success! Today is: {Date:MMMM dd, yyyy}\"\n        },\n        \"flags\": 1,\n        \"traceId\": \"21df288eada1ce4ace6c40f39a6d7ce1\",\n        \"spanId\": \"a80119e5a05fed5a\"\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector on GKE\nDESCRIPTION: Shell command to deploy the OpenTelemetry Collector on Google Kubernetes Engine (GKE) using kubectl and pre-defined Kubernetes manifests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f k8s/manifest.yaml -n otel-collector\n```\n\n----------------------------------------\n\nTITLE: Verifying Auto-Instrumentation Init Container in Kubernetes\nDESCRIPTION: Shell command to check if the auto-instrumentation init container has started correctly in a specific namespace.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get events -n <your_app_namespace>\n```\n\n----------------------------------------\n\nTITLE: Configuring OTEL_SERVICE_NAME in App.config or Web.config for .NET\nDESCRIPTION: This XML snippet demonstrates how to set the OTEL_SERVICE_NAME configuration in an App.config or Web.config file for a .NET application using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<configuration>\n<appSettings>\n    <add key=\"OTEL_SERVICE_NAME\" value=\"my-service-name\" />\n</appSettings>\n</configuration>\n```\n\n----------------------------------------\n\nTITLE: Running the TypeScript Client\nDESCRIPTION: Command to run the TypeScript client application that makes requests to the instrumented server.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx ts-node client.ts\n```\n\n----------------------------------------\n\nTITLE: AdditionalDeps Assembly Not Found Error\nDESCRIPTION: Error message indicating that an assembly specified in the OpenTelemetry.AutoInstrumentation.AdditionalDeps.deps.json file was not found during application startup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/troubleshooting.md#2025-04-09_snippet_4\n\nLANGUAGE: txt\nCODE:\n```\nAn assembly specified in the application dependencies manifest (OpenTelemetry.AutoInstrumentation.AdditionalDeps.deps.json) was not found\n```\n\n----------------------------------------\n\nTITLE: Trace Generator Deployment Configuration\nDESCRIPTION: Kubernetes deployment configuration for a trace generator pod that creates test telemetry data using the OpenTelemetry collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: trace-gen\nspec:\n  selector:\n    matchLabels:\n      app: trace-gen\n  template:\n    metadata:\n      labels:\n        app: trace-gen\n    spec:\n      containers:\n        - name: trace-gen\n          image: ghcr.io/frzifus/jaeger-otel-test:latest\n          args:\n            [\n              '-otel.agent.host=otel-collector-app-collector',\n              '-otel.agent.port=4317',\n            ]\n          env:\n            - name: OTEL_SERVICE_NAME\n              value: 'local-test-service'\n```\n\n----------------------------------------\n\nTITLE: Installing Express Dependencies for Node.js\nDESCRIPTION: Commands to install Express and related dependencies for both TypeScript and JavaScript projects.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install typescript \\\n  ts-node \\\n  @types/node \\\n  express \\\n  @types/express\n\n# inicialização do typescript\nnpx tsc --init\n```\n\nLANGUAGE: shell\nCODE:\n```\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Managing Spans Across Processes in Erlang/Elixir\nDESCRIPTION: Shows how to handle spans across different processes using context passing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: erlang\nCODE:\n```\nSpanCtx = ?start_span(child),\n\nCtx = otel_ctx:get_current(),\n\nproc_lib:spawn_link(fun() ->\n                        otel_ctx:attach(Ctx),\n                        ?set_current_span(SpanCtx),\n\n                        %% do work here\n\n                        ?end_span(SpanCtx)\n                    end),\n```\n\nLANGUAGE: elixir\nCODE:\n```\nspan_ctx = OpenTelemetry.Tracer.start_span(:child)\nctx = OpenTelemetry.Ctx.get_current()\n\ntask = Task.async(fn ->\n                      OpenTelemetry.Ctx.attach(ctx)\n                      OpenTelemetry.Tracer.set_current_span(span_ctx)\n                      # do work here\n\n                      # end span here\n                      OpenTelemetry.Tracer.end_span(span_ctx)\n                  end)\n\n_ = Task.await(task)\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Custom Components\nDESCRIPTION: Shell command to run the OpenTelemetry Collector using Go with a custom configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ngo run ./otelcol-dev --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration with Various Receivers\nDESCRIPTION: This YAML configuration demonstrates the setup of multiple receivers for different data sources in the OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/configuration.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  # Data sources: logs\n  fluentforward:\n    endpoint: 0.0.0.0:8006\n\n  # Data sources: metrics\n  hostmetrics:\n    scrapers:\n      cpu:\n      disk:\n      filesystem:\n      load:\n      memory:\n      network:\n      process:\n      processes:\n      paging:\n\n  # Data sources: traces\n  jaeger:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      thrift_binary:\n      thrift_compact:\n      thrift_http:\n\n  # Data sources: traces, metrics, logs\n  kafka:\n    protocol_version: 2.0.0\n\n  # Data sources: traces, metrics\n  opencensus:\n\n  # Data sources: traces, metrics, logs\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n        tls:\n          cert_file: cert.pem\n          key_file: cert-key.pem\n      http:\n        endpoint: 0.0.0.0:4318\n\n  # Data sources: metrics\n  prometheus:\n    config:\n      scrape_configs:\n        - job_name: otel-collector\n          scrape_interval: 5s\n          static_configs:\n            - targets: [localhost:8888]\n\n  # Data sources: traces\n  zipkin:\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Log Output Example\nDESCRIPTION: Example JSON output showing log data with timestamps, severity, trace context and attributes for a dice roll operation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Timestamp\": \"2023-09-25T12:42:05.177136776+02:00\",\n  \"ObservedTimestamp\": \"2023-09-25T12:42:06.809396011+02:00\",\n  \"Severity\": 9,\n  \"SeverityText\": \"\",\n  \"Body\": {\n    \"Type\": \"String\",\n    \"Value\": \"Alice is rolling the dice\"\n  },\n  \"Attributes\": [\n    {\n      \"Key\": \"result\",\n      \"Value\": {\n        \"Type\": \"Int64\",\n        \"Value\": 6\n      }\n    }\n  ],\n  \"TraceID\": \"829fb7ceb787403c96eac3caf285c965\",\n  \"SpanID\": \"8b6b408b6c1a35e5\",\n  \"TraceFlags\": \"01\"\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Annotation-Based Discovery in OpenTelemetry Collector\nDESCRIPTION: YAML configuration for enabling the annotation-based discovery feature in the OpenTelemetry Collector. This configuration must be added to the receiver creator component to activate the discovery functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/otel-collector-k8s-discovery.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  receiver_creator:\n    watch_observers: [k8s_observer]\n    discovery:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic OpenTelemetry Collector Instance\nDESCRIPTION: YAML configuration to create a simple OpenTelemetry Collector instance with OTLP receivers and debug exporter. This defines a basic pipeline for collecting and exporting trace data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: simplest\nspec:\n  config: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n    processors:\n\n    exporters:\n      # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n      debug:\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: []\n          exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Language Version Support Table in Markdown\nDESCRIPTION: Table showing minimum language version requirements for OpenTracing and OpenTelemetry APIs across different programming languages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/migration/opentracing.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Language       | OpenTracing API | OpenTelemetry API |\n| -------------- | --------------- | ----------------- |\n| [Go][]         | 1.13            | 1.16              |\n| [Java][]       | 7               | 8                 |\n| [Python][]     | 2.7             | 3.6               |\n| [JavaScript][] | 6               | 8.5               |\n| [.NET][]       | 1.3             | 1.4               |\n| [C++][]        | 11              | 11                |\n```\n\n----------------------------------------\n\nTITLE: Debugging Span Sampling in OpenTelemetry Node.js\nDESCRIPTION: This code snippet demonstrates how to add a debug span processor in OpenTelemetry Node.js. It helps diagnose issues related to span sampling by printing the sampling decision for each span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { trace, Span, Context, TraceFlags } from '@opentelemetry/api';\nconst provider = new NodeTracerProvider();\nprovider.addSpanProcessor({\n  forceFlush: async () => {},\n  onStart: (_span: Span, _parentContext: Context) => {},\n  onEnd: (span: ReadableSpan) => {\n    const sampled = !!(span.spanContext().traceFlags & TraceFlags.SAMPLED);\n    console.log(`span sampled: ${sampled}`);\n  },\n  shutdown: async () => {},\n});\nprovider.register();\n```\n\n----------------------------------------\n\nTITLE: Running the Instrumented Server\nDESCRIPTION: Command to run the server with OpenTelemetry instrumentation, showing the same console output as before.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n$ cargo run\n...\nListening on 127.0.0.1:8080\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Helm Repository\nDESCRIPTION: Command to add the OpenTelemetry Helm repository to your local Helm installation, making the demo chart available for installation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/demo.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n```\n\n----------------------------------------\n\nTITLE: Defining a ServiceMonitor with Matching Labels in YAML\nDESCRIPTION: This YAML snippet shows a ServiceMonitor resource definition with labels matching the selector configured in the OpenTelemetryCollector. It demonstrates how to properly label a ServiceMonitor for discovery.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: sm-example\n  labels:\n    app: my-app\n    release: prometheus\nspec:\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Traces Export in OpenTelemetry Collector\nDESCRIPTION: YAML configuration for sending internal traces to an OTLP backend (experimental feature).\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  telemetry:\n    traces:\n      processors:\n        - batch:\n            exporter:\n              otlp:\n                protocol: http/protobuf\n                endpoint: https://backend:4318\n```\n\n----------------------------------------\n\nTITLE: Filling Resource Attributes for BackendSystem Entity in Go\nDESCRIPTION: This function populates a pcommon.Resource with attributes describing a BackendSystem entity, using OpenTelemetry semantic conventions for cloud provider, OS type, and service information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_34\n\nLANGUAGE: Go\nCODE:\n```\nfunc fillResourceWithBackendSystem(resource *pcommon.Resource, backend BackendSystem){\n\tbackendAttrs := resource.Attributes()\n\tvar osType, cloudProvider string\n\n\tswitch {\n\t\tcase backend.CloudProvider == \"amzn\":\n\t\t\tcloudProvider = conventions.AttributeCloudProviderAWS\n\t\tcase backend.OSType == \"mcrsft\":\n\t\t\tcloudProvider = conventions.AttributeCloudProviderAzure\n\t\tcase backend.OSType == \"gogl\":\n\t\t\tcloudProvider = conventions.AttributeCloudProviderGCP\n\t}\n\n\tbackendAttrs.PutStr(conventions.AttributeCloudProvider, cloudProvider)\n\tbackendAttrs.PutStr(conventions.AttributeCloudRegion, backend.CloudRegion)\n\n\tswitch {\n\t\tcase backend.OSType == \"lnx\":\n\t\t\tosType = conventions.AttributeOSTypeLinux\n\t\tcase backend.OSType == \"wndws\":\n\t\t\tosType = conventions.AttributeOSTypeWindows\n\t\tcase backend.OSType == \"slrs\":\n\t\t\tosType = conventions.AttributeOSTypeSolaris\n\t}\n\n\tbackendAttrs.PutStr(conventions.AttributeOSType, osType)\n\tbackendAttrs.PutStr(conventions.AttributeOSVersion, backend.OSVersion)\n }\n```\n\n----------------------------------------\n\nTITLE: Extended Log Format (ELF) with JSON Example\nDESCRIPTION: An example of Extended Log Format (ELF) that combines Common Log Format with additional JSON data, demonstrating how structured formats can be mixed together in the same log entry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/logs.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n192.168.1.1 - johndoe [04/Aug/2024:12:34:56 -0400] \"POST /api/v1/login HTTP/1.1\" 200 1234 \"http://example.com\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\" {\"transactionId\": \"abcd-efgh-ijkl-mnop\", \"responseTime\": 150, \"requestBody\": {\"username\": \"johndoe\"}, \"responseHeaders\": {\"Content-Type\": \"application/json\"}}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry via php.ini\nDESCRIPTION: INI configuration to set up OpenTelemetry auto-instrumentation in PHP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/php.md#2025-04-09_snippet_5\n\nLANGUAGE: INI\nCODE:\n```\nOTEL_PHP_AUTOLOAD_ENABLED=\"true\"\nOTEL_SERVICE_NAME=your-service-name\nOTEL_TRACES_EXPORTER=otlp\nOTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\nOTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318\nOTEL_PROPAGATORS=baggage,tracecontext\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Events for Auto-Instrumentation\nDESCRIPTION: This shell command retrieves events from a specific namespace in Kubernetes, which can be used to verify if the auto-instrumentation init container has started correctly.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get events -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Adding default_lang_commit Front Matter Field in Localized Pages\nDESCRIPTION: Example of front matter syntax for localized pages, which includes the default_lang_commit field to identify the specific commit of the English version it was translated from.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Your localized page title\n# ...\ndefault_lang_commit: <most-recent-commit-hash-of-default-language-page>\n---\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory Structure\nDESCRIPTION: Shell commands to create the necessary directory structure and files for the logging example.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nmkdir python-logs-example\ncd python-logs-example\ntouch example.py\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Go SDK for Instrumentation\nDESCRIPTION: Commands to install the OpenTelemetry Go SDK packages for implementing distributed tracing in a Go application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/otel /\ngo.opentelemetry.io/otel/sdk /\n```\n\n----------------------------------------\n\nTITLE: Extended Log Format (ELF) with JSON Combination\nDESCRIPTION: An example of a mixed format log combining Extended Log Format (ELF) with JSON data, demonstrating how structured data can be embedded within standard log formats.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/signals/logs.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n192.168.1.1 - johndoe [04/Aug/2024:12:34:56 -0400] \"POST /api/v1/login HTTP/1.1\" 200 1234 \"http://example.com\" \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\" {\"transactionId\": \"abcd-efgh-ijkl-mnop\", \"responseTime\": 150, \"requestBody\": {\"username\": \"johndoe\"}, \"responseHeaders\": {\"Content-Type\": \"application/json\"}}\n```\n\n----------------------------------------\n\nTITLE: Visualizing OpenTelemetry Collector as Gateway Deployment Model\nDESCRIPTION: This diagram shows the OpenTelemetry Collector deployed as a gateway service that receives telemetry data from multiple sources (VMs, Kubernetes pods, and node agents) and forwards it to various backends such as Jaeger and Prometheus. It illustrates the centralized collection architecture.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_11\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  subgraph S1 [\"#nbsp;\"]\n      subgraph S2 [\"#nbsp;\"]\n        subgraph S3 [\"#nbsp;\"]\n          subgraph VM [VM]\n              PR[\"Process [Library]\"]\n          end\n          subgraph K8s-pod [K8s Pod]\n              AC[\"`App Container [Library]`\"]\n          end\n          subgraph K8s-node [K8s Node]\n              subgraph Pod1 [Pod]\n                  APP1[App] ~~~ APP2[App]\n              end\n              subgraph Pod2 [Pod]\n                  APP3[App] ~~~ APP4[App]\n              end\n              subgraph Pod3 [Pod]\n                  APP5[App] ~~~ APP6[App]\n              end\n              subgraph AD [Agent Daemonset]\n              end\n              APP1 --> AD\n              APP2 --> AD\n              APP4 --> AD\n              APP6 --> AD\n          end\n        end\n        subgraph S4 [\"#nbsp;\"]\n            PR --> OTEL[\"`OpenTelemetry Collector Service`\"]\n            AC --> OTEL\n            AD --> OTEL\n            OTEL ---> BE[Backend X]\n        end\n      end\n      subgraph S5 [\"#nbsp;\"]\n        subgraph S6 [\"#nbsp;\"]\n            JA[Jaeger Backend]\n        end\n        subgraph S7 [\"#nbsp;\"]\n            PRM[Prometheus Backend]\n        end\n      end\n      JA ~~~ PRM\n      OTEL --> JA\n      OTEL --> PRM\n  end\n\nclass S1,S3,S4,S5,S6,S7,S8 noLines;\nclass VM,K8s-pod,K8s-node,Pod1,Pod2,Pod3 withLines;\nclass S2 lightLines\nclass PR,AC,APP1,APP2,APP3,APP4,APP5,APP6,AD,OTEL,BE,JA,PRM nodeStyle\nclassDef noLines stroke-width:0px,color:#000000;\nclassDef withLines fill:#fff,stroke:#4f62ad,color:#000000;\nclassDef lightLines stroke:#acaeb0,color:#000000;\nclassDef nodeStyle fill:#e3e8fc,stroke:#4f62ad,color:#000000;\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Dependencies in Mix.exs\nDESCRIPTION: Adding required OpenTelemetry dependencies to an Elixir project's mix.exs file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: elixir\nCODE:\n```\n# mix.exs\ndef deps do\n  [\n    {:opentelemetry, \"~> 1.3\"},\n    {:opentelemetry_api, \"~> 1.2\"},\n  ]\nend\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Demo Chart\nDESCRIPTION: Command to install the OpenTelemetry Demo chart with a release name of 'my-otel-demo', which deploys all the microservices and components of the demo application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/demo.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nhelm install my-otel-demo open-telemetry/opentelemetry-demo\n```\n\n----------------------------------------\n\nTITLE: Installing Monolog and OpenTelemetry Logger Dependencies\nDESCRIPTION: This command installs the required Monolog library and OpenTelemetry logger for Monolog using Composer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require \\\n  monolog/monolog \\\n  open-telemetry/opentelemetry-logger-monolog\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies\nDESCRIPTION: Installs required OpenTelemetry packages including the SDK components for traces, metrics, and logs, plus HTTP instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get \"go.opentelemetry.io/otel\" \\\n  \"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric\" \\\n  \"go.opentelemetry.io/otel/exporters/stdout/stdouttrace\" \\\n  \"go.opentelemetry.io/otel/exporters/stdout/stdoutlog\" \\\n  \"go.opentelemetry.io/otel/sdk/log\" \\\n  \"go.opentelemetry.io/otel/log/global\" \\\n  \"go.opentelemetry.io/otel/propagation\" \\\n  \"go.opentelemetry.io/otel/sdk/metric\" \\\n  \"go.opentelemetry.io/otel/sdk/resource\" \\\n  \"go.opentelemetry.io/otel/sdk/trace\" \\\n  \"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\"\\\n  \"go.opentelemetry.io/contrib/bridges/otelslog\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for GKE\nDESCRIPTION: YAML configuration for the OpenTelemetry Collector when deployed on GKE, setting up OTLP receivers and exporters for trace processing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nexporters:\n  otlp:\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter Endpoint in Shell\nDESCRIPTION: This snippet shows how to set the OTLP exporter endpoint environment variable in Bash or zsh shell. It configures the OpenTelemetry SDK to send data to a specific collector address.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/agent.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=http://collector.example.com:4318\n```\n\n----------------------------------------\n\nTITLE: Sending Order Details in Snake_Case JSON to EmailService\nDESCRIPTION: This snippet demonstrates the correct format of sending order details to the EmailService using snake_case JSON, which is properly handled by the Ruby-based service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/testing-otel-demo/index.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"google@example.com\",\n  \"order\": {\n    \"order_id\": \"505\",\n    \"shipping_cost\": {\n      \"currency_code\": \"USD\"\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Demo with Custom Port using Docker Compose\nDESCRIPTION: Docker Compose command to start the demo on a custom port (8081).\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nENVOY_PORT=8081 docker compose up --force-recreate --remove-orphans --detach\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin in Docker for OpenTelemetry Testing\nDESCRIPTION: This shell command runs a Zipkin container in Docker, exposing port 9411 for receiving trace data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Demo with Helm\nDESCRIPTION: Command to install the OpenTelemetry demo using Helm with a release name of my-otel-demo.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nhelm install my-otel-demo open-telemetry/opentelemetry-demo\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetryCollector with Empty Selectors in YAML\nDESCRIPTION: This YAML configuration demonstrates how to set up an OpenTelemetryCollector with empty PodMonitor and ServiceMonitor selectors. This configuration allows matching all PodMonitor and ServiceMonitor resources.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprometheusCR:\n  enabled: true\n  podMonitorSelector: {}\n  serviceMonitorSelector: {}\n```\n\n----------------------------------------\n\nTITLE: Installing Custom Resource Detector in PHP OpenTelemetry\nDESCRIPTION: Commands to install and enable a custom container resource detector using Composer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/resources.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncomposer require open-telemetry/detector-container\nenv OTEL_PHP_RESOURCE_DETECTORS=container \\\nphp example.php\n```\n\n----------------------------------------\n\nTITLE: Incorrect OpenTelemetry Instrumentation Setup in Node.js\nDESCRIPTION: This example shows an incorrect way of setting up OpenTelemetry instrumentation in Node.js. It demonstrates the common mistake of requiring packages before enabling the instrumentation libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/troubleshooting-nodejs.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { registerInstrumentations } from '@opentelemetry/instrumentation';\nimport { HttpInstrumentation } from '@opentelemetry/instrumentation-http';\nimport {\n  SimpleSpanProcessor,\n  ConsoleSpanExporter,\n} from '@opentelemetry/sdk-trace-base';\nimport http from 'http'; // ⇐ BAD - at this point instrumentation is not registered yet\nconst provider = new NodeTracerProvider();\nprovider.addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporter()));\nprovider.register();\nregisterInstrumentations({ instrumentations: [new HttpInstrumentation()] });\n// your application code which uses http\n```\n\n----------------------------------------\n\nTITLE: Visualizing Content Contribution Process with Mermaid\nDESCRIPTION: A flowchart illustrating the steps to contribute new documentation to the OpenTelemetry project, from forking the repo to signing the CNCF CLA.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph first[How to contribute]\n    direction TB\n       T[ ] -.-\n       B[Fork the repo in GitHub] --- C[Write docs in markdown<br>and build site with Hugo]\n       C --- D[Push source to the fork]\n       D --- E[Open a pull request]\n       E --- F[Sign the CNCF CLA]\n    end\n\nclassDef grey fill:#dddddd,stroke:#ffffff,stroke-width:px,color:#000000, font-size:15px;\nclassDef white fill:#ffffff,stroke:#000,stroke-width:px,color:#000,font-weight:bold\nclassDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000\nclass A,B,C,D,E,F,G,H grey\nclass S,T spacewhite\nclass first,second white\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenTelemetry Collector Deployment\nDESCRIPTION: Shows how to customize the OpenTelemetry Collector deployment with custom images and replica counts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-operator-q-and-a/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otelcol\n  namespace: mynamespace\nspec:\n  mode: statefulset\n  image: <my_collector_image>\n  replicas: <number_of_replicas>\n```\n\n----------------------------------------\n\nTITLE: Configuring ServiceMonitor in Kubernetes\nDESCRIPTION: YAML configuration for setting up a ServiceMonitor to define metric scraping endpoints in Kubernetes. Specifies port configurations and label selectors for monitoring targets.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: sm-example\n  namespace: opentelemetry\n  labels:\n    app.kubernetes.io/name: py-prometheus-app\n    release: prometheus\nspec:\n  selector:\n    matchLabels:\n      app: my-app\n  namespaceSelector:\n    matchNames:\n      - opentelemetry\n  endpoints:\n    - port: prom\n      path: /metrics\n    - port: py-client-port\n      interval: 15s\n    - port: py-server-port\n```\n\n----------------------------------------\n\nTITLE: Configuring OTTL with Explicit Contexts in YAML\nDESCRIPTION: Example YAML configuration showing the traditional approach to OTTL statements with explicit contexts for resource, metric, and datapoint levels.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/ottl-contexts-just-got-easier.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nmetric_statements:\n  - context: resource\n    statements:\n      - keep_keys(attributes, [\"host.name\"])\n  - context: metric\n    statements:\n      - set(description, \"Sum\") where type == \"Sum\"\n      - convert_sum_to_gauge() where name == \"system.processes.count\"\n  - context: datapoint\n    statements:\n      - limit(attributes, 100, [\"host.name\"])\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Alpine\nDESCRIPTION: Commands to install required development packages on Alpine Linux for Python package installation\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\napk add python3-dev\napk add build-base\n```\n\n----------------------------------------\n\nTITLE: Configuring Announcements Page YAML Front Matter\nDESCRIPTION: YAML front matter configuration for the Announcements page. It sets the page title as 'Announcements' and cascades settings to child pages, including the 'docs' type and a parameter to hide feedback.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/announcements/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Announcements\ncascade:\n  type: docs\n  params:\n    hide_feedback: true\n---\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom SpanProcessor in Java\nDESCRIPTION: This code snippet demonstrates how to implement a custom SpanProcessor in Java by implementing the SpanProcessor interface. It includes methods for handling span start and end events, as well as shutdown and force flush operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.context.Context;\nimport io.opentelemetry.sdk.common.CompletableResultCode;\nimport io.opentelemetry.sdk.trace.ReadWriteSpan;\nimport io.opentelemetry.sdk.trace.ReadableSpan;\nimport io.opentelemetry.sdk.trace.SpanProcessor;\n\npublic class CustomSpanProcessor implements SpanProcessor {\n\n  @Override\n  public void onStart(Context parentContext, ReadWriteSpan span) {\n    // Callback invoked when span is started.\n    // Enrich the record with a custom attribute.\n    span.setAttribute(\"my.custom.attribute\", \"hello world\");\n  }\n\n  @Override\n  public boolean isStartRequired() {\n    // Indicate if onStart should be called.\n    return true;\n  }\n\n  @Override\n  public void onEnd(ReadableSpan span) {\n    // Callback invoked when span is ended.\n  }\n\n  @Override\n  public boolean isEndRequired() {\n    // Indicate if onEnd should be called.\n    return false;\n  }\n\n  @Override\n  public CompletableResultCode shutdown() {\n    // Optionally shutdown the processor and cleanup any resources.\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode forceFlush() {\n    // Optionally process any records which have been queued up but not yet processed.\n    return CompletableResultCode.ofSuccess();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracer with OTLP Exporter\nDESCRIPTION: Rust implementation of a tracer initialization function that configures an OTLP exporter with default settings and sets up the global tracer provider.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfn init_tracer() {\n    match SpanExporter::new_tonic(ExportConfig::default(), TonicConfig::default()) {\n        Ok(exporter) => {\n            global::set_text_map_propagator(TraceContextPropagator::new());\n            let provider = TracerProvider::builder()\n                .with_simple_exporter(exporter)\n                .build();\n            global::set_tracer_provider(provider);\n        },\n        Err(why) => panic!(\"{:?}\", why)\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging in Python Application\nDESCRIPTION: The practice() function in main.py that demonstrates how Expert Grogu logs various information and errors. It uses Python's logging module to record events in JSON format.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nstart_time = time.time()\ntry:\n    how_long_int = int(how_long)\n    logger.info(\"Starting to practice The Telemetry for %i second(s)\", how_long_int)\n    while time.time() - start_time < how_long_int:\n        next_char = random.choice(string.punctuation)\n        print(next_char, end=\"\", flush=True)\n        time.sleep(0.5)\n    logger.info(\"Done practicing\")\nexcept ValueError as ve:\n    logger.error(\"I need an integer value for the time to practice: %s\", ve)\n    return False\nexcept Exception as e:\n    logger.error(\"An unexpected error occurred: %s\", e)\n    return False\nreturn True\n```\n\n----------------------------------------\n\nTITLE: S3 Configuration CloudFormation Setup\nDESCRIPTION: CloudFormation YAML snippet for configuring Lambda to load collector configuration from an S3 bucket.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/faas/lambda-collector.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nFunction:\n  Type: AWS::Serverless::Function\n  Properties:\n    ...\n    Environment:\n      Variables:\n        OPENTELEMETRY_COLLECTOR_CONFIG_URI: s3://<bucket_name>.s3.<region>.amazonaws.com/collector_config.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring LogLimits in OpenTelemetry Java SDK\nDESCRIPTION: This code demonstrates how to configure LogLimits, which define constraints for the data captured by log records. It shows how to set the maximum number of attributes and the maximum attribute value length.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_21\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.logs.LogLimits;\n\npublic class LogLimitsConfig {\n  public static LogLimits logLimits() {\n    return LogLimits.builder()\n        .setMaxNumberOfAttributes(128)\n        .setMaxAttributeValueLength(1024)\n        .build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Stats Receiver Configuration in OpenTelemetry Collector\nDESCRIPTION: Reference to the dockerstatsreceiver component used in the Collector for local/non-Kubernetes deployments to monitor Docker containers alongside application traces and metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/requirements/architecture.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ndockerstatsreceiver\n```\n\n----------------------------------------\n\nTITLE: Adding SDK Autoconfiguration Dependency\nDESCRIPTION: Maven dependency configuration for adding OpenTelemetry SDK autoconfiguration support.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-sdk-extension-autoconfigure</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Downloading the OpenTelemetry Java Agent\nDESCRIPTION: Shell command to download the latest version of the OpenTelemetry Java agent JAR file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L -O https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Container\nDESCRIPTION: Docker command to run Grafana dashboard container\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d -p 3000:3000 grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Setting up MeterProvider with Console Exporter in PHP\nDESCRIPTION: Creates a MeterProvider with a ConsoleMetricExporter for recording and exporting metrics. This setup uses an ExportingReader to handle the metric export process.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_23\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse OpenTelemetry\\SDK\\Metrics\\MetricExporter\\ConsoleMetricExporterFactory;\nuse OpenTelemetry\\SDK\\Metrics\\MeterProvider;\nuse OpenTelemetry\\SDK\\Metrics\\MetricReader\\ExportingReader;\n\nrequire 'vendor/autoload.php';\n\n$reader = new ExportingReader((new ConsoleMetricExporterFactory())->create());\n\n$meterProvider = MeterProvider::builder()\n    ->addReader($reader)\n    ->build();\n```\n\n----------------------------------------\n\nTITLE: Enabling Kubelet Metrics Preset\nDESCRIPTION: YAML configuration to enable the kubelet metrics preset for the OpenTelemetry Collector, setting it up as a DaemonSet.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nmode: daemonset\npresets:\n  kubeletMetrics:\n    enabled: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Jaeger All-in-One Instance in Kubernetes\nDESCRIPTION: Kubernetes command to deploy a basic Jaeger instance that will receive traces from Envoy proxies via the OpenTelemetry protocol.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/new-otel-features-envoy-istio/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: jaegertracing.io/v1\nkind: Jaeger\nmetadata:\n  name: simplest\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining a Comprehensive ServiceMonitor in YAML\nDESCRIPTION: This YAML snippet shows a detailed ServiceMonitor configuration. It includes label selectors, namespace selectors, and multiple endpoint configurations for different ports and paths.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: sm-example\n  labels:\n    app: my-app\n    release: prometheus\nspec:\n  selector:\n    matchLabels:\n      app: my-app\n  namespaceSelector:\n    matchNames:\n      - opentelemetry\n  endpoints:\n    - port: prom\n      path: /metrics\n    - port: py-client-port\n      interval: 15s\n    - port: py-server-port\n```\n\n----------------------------------------\n\nTITLE: Running a JavaScript Application with OpenTelemetry Instrumentation\nDESCRIPTION: Command to start a JavaScript application with OpenTelemetry instrumentation. The --require flag ensures the instrumentation code is loaded before executing the main application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nnode --require ./instrumentation.js app.js\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurableLogRecordExporterProvider in Java\nDESCRIPTION: Example implementation of ConfigurableLogRecordExporterProvider interface to create a custom log record exporter that can participate in autoconfiguration. The exporter is created when OTEL_LOGS_EXPORTER includes the value from getName().\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;\nimport io.opentelemetry.sdk.autoconfigure.spi.logs.ConfigurableLogRecordExporterProvider;\nimport io.opentelemetry.sdk.logs.export.LogRecordExporter;\n\npublic class CustomLogRecordExporterProvider implements ConfigurableLogRecordExporterProvider {\n\n  @Override\n  public LogRecordExporter createExporter(ConfigProperties config) {\n    // Callback invoked when OTEL_LOGS_EXPORTER includes the value from getName().\n    return new CustomLogRecordExporter();\n  }\n\n  @Override\n  public String getName() {\n    return \"custom-exporter\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry SDK Dependency\nDESCRIPTION: Maven dependency configuration for adding the OpenTelemetry SDK core functionality.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-sdk</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic Config Struct in Go\nDESCRIPTION: Initial configuration struct setup for the tailtracer receiver before implementing required fields.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\ntype Config struct{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetryCollector with Target Allocator and Prometheus CR in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure an OpenTelemetryCollector resource with the Target Allocator enabled and Prometheus Custom Resource discovery enabled. It sets up a statefulset mode collector with the necessary configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1beta1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otelcol\n  namespace: opentelemetry\nspec:\n  mode: statefulset\n  targetAllocator:\n    enabled: true\n    serviceAccount: opentelemetry-targetallocator-sa\n    prometheusCR:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Setting YAML Frontmatter Configuration for OpenTelemetry Website\nDESCRIPTION: YAML frontmatter configuration block that defines basic site metadata including title, alternative title, and cascade settings for documentation pages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/site/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Website information\nlikeTitle: Site info\ncascade: { type: docs }\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Protobuf Files for OpenTelemetry Demo\nDESCRIPTION: This command generates protobuf files for all services in the OpenTelemetry Demo project. It's useful for local compilation and IDE integration. Note that running 'npm install' in the frontend source folder may be necessary before generation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/development.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nmake generate-protobuf\n```\n\n----------------------------------------\n\nTITLE: Complete Span Example with HTTP Attributes in OpenTelemetry\nDESCRIPTION: A detailed example of a span representing an HTTP health check operation. This example includes comprehensive attributes describing the network and HTTP request details, along with an event recording the response status.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/traces.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"/v1/sys/health\",\n  \"context\": {\n    \"trace_id\": \"7bba9f33312b3dbb8b2c2c62bb7abe2d\",\n    \"span_id\": \"086e83747d0e381e\"\n  },\n  \"parent_id\": \"\",\n  \"start_time\": \"2021-10-22 16:04:01.209458162 +0000 UTC\",\n  \"end_time\": \"2021-10-22 16:04:01.209514132 +0000 UTC\",\n  \"status_code\": \"STATUS_CODE_OK\",\n  \"status_message\": \"\",\n  \"attributes\": {\n    \"net.transport\": \"IP.TCP\",\n    \"net.peer.ip\": \"172.17.0.1\",\n    \"net.peer.port\": \"51820\",\n    \"net.host.ip\": \"10.177.2.152\",\n    \"net.host.port\": \"26040\",\n    \"http.method\": \"GET\",\n    \"http.target\": \"/v1/sys/health\",\n    \"http.server_name\": \"mortar-gateway\",\n    \"http.route\": \"/v1/sys/health\",\n    \"http.user_agent\": \"Consul Health Check\",\n    \"http.scheme\": \"http\",\n    \"http.host\": \"10.177.2.152:26040\",\n    \"http.flavor\": \"1.1\"\n  },\n  \"events\": [\n    {\n      \"name\": \"\",\n      \"message\": \"OK\",\n      \"timestamp\": \"2021-10-22 16:04:01.209512872 +0000 UTC\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger Container for OTLP Testing\nDESCRIPTION: Docker command to run a Jaeger all-in-one container with OTLP support enabled and various ports exposed for different protocols.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 14250:14250 \\\n  -p 14268:14268 \\\n  -p 14269:14269 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Creating a New Rails API Application for OpenTelemetry Demo\nDESCRIPTION: Commands to create a new Rails API-only application named 'dice-ruby' and navigate to its directory.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrails new --api dice-ruby\ncd dice-ruby\n```\n\n----------------------------------------\n\nTITLE: Implementing Oat++ HTTP Server for Dice Rolling\nDESCRIPTION: C++ code for a simple HTTP server using Oat++ framework, implementing a /rolldice endpoint that returns a random number.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"oatpp/web/server/HttpConnectionHandler.hpp\"\n#include \"oatpp/network/Server.hpp\"\n#include \"oatpp/network/tcp/server/ConnectionProvider.hpp\"\n#include <cstdlib>\n#include <ctime>\n#include <string>\n\nusing namespace std;\n\nclass Handler : public oatpp::web::server::HttpRequestHandler {\npublic:\n  shared_ptr<OutgoingResponse> handle(const shared_ptr<IncomingRequest>& request) override {\n    int low = 1;\n    int high = 7;\n    int random = rand() % (high - low) + low;\n    const string response = to_string(random);\n    return ResponseFactory::createResponse(Status::CODE_200, response.c_str());\n  }\n};\n\nvoid run() {\n  auto router = oatpp::web::server::HttpRouter::createShared();\n  router->route(\"GET\", \"/rolldice\", std::make_shared<Handler>());\n  auto connectionHandler = oatpp::web::server::HttpConnectionHandler::createShared(router);\n  auto connectionProvider = oatpp::network::tcp::server::ConnectionProvider::createShared({\"localhost\", 8080, oatpp::network::Address::IP_4});\n  oatpp::network::Server server(connectionProvider, connectionHandler);\n  OATPP_LOGI(\"Dice Server\", \"Server running on port %s\", static_cast<const char*>(connectionProvider->getProperty(\"port\").getData()));\n  server.run();\n}\n\nint main() {\n  oatpp::base::Environment::init();\n  srand((int)time(0));\n  run();\n  oatpp::base::Environment::destroy();\n  return 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK for Web Tracing in TypeScript\nDESCRIPTION: TypeScript code to initialize the OpenTelemetry SDK for web tracing, including resource creation, exporter setup, and tracer provider registration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defaultResource,\n  resourceFromAttributes,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport {\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n} from '@opentelemetry/sdk-trace-base';\n\nconst resource = defaultResource().merge(\n  resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: 'service-name-here',\n    [ATTR_SERVICE_VERSION]: '0.1.0',\n  }),\n);\n\nconst exporter = new ConsoleSpanExporter();\nconst processor = new BatchSpanProcessor(exporter);\n\nconst provider = new WebTracerProvider({\n  resource: resource,\n  spanProcessors: [processor],\n});\n\nprovider.register();\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK for Web Tracing in TypeScript\nDESCRIPTION: TypeScript code to initialize the OpenTelemetry SDK for web tracing, including resource creation, exporter setup, and tracer provider registration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  defaultResource,\n  resourceFromAttributes,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions';\nimport { WebTracerProvider } from '@opentelemetry/sdk-trace-web';\nimport {\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n} from '@opentelemetry/sdk-trace-base';\n\nconst resource = defaultResource().merge(\n  resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: 'service-name-here',\n    [ATTR_SERVICE_VERSION]: '0.1.0',\n  }),\n);\n\nconst exporter = new ConsoleSpanExporter();\nconst processor = new BatchSpanProcessor(exporter);\n\nconst provider = new WebTracerProvider({\n  resource: resource,\n  spanProcessors: [processor],\n});\n\nprovider.register();\n```\n\n----------------------------------------\n\nTITLE: Python Logging Implementation with OpenTelemetry\nDESCRIPTION: Python code demonstrating trace context correlation with logging, showing how to create spans and log messages that are automatically correlated.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom opentelemetry import trace\n\ntracer = trace.get_tracer_provider().get_tracer(__name__)\n\n# Trace context correlation\nwith tracer.start_as_current_span(\"foo\"):\n    # Do something\n    current_span = trace.get_current_span()\n    current_span.add_event(\"This is a span event\")\n    logging.getLogger().error(\"This is a log message\")\n```\n\n----------------------------------------\n\nTITLE: Python Logging Implementation with OpenTelemetry\nDESCRIPTION: Python code demonstrating trace context correlation with logging, showing how to create spans and log messages that are automatically correlated.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport logging\n\nfrom opentelemetry import trace\n\ntracer = trace.get_tracer_provider().get_tracer(__name__)\n\n# Trace context correlation\nwith tracer.start_as_current_span(\"foo\"):\n    # Do something\n    current_span = trace.get_current_span()\n    current_span.add_event(\"This is a span event\")\n    logging.getLogger().error(\"This is a log message\")\n```\n\n----------------------------------------\n\nTITLE: Complete model implementation with helper functions in Go\nDESCRIPTION: Enhanced model.go file with helper functions to generate random ATM and BackendSystem instances. Includes random number generation function and logic to create instances with different properties based on random selection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_30\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"math/rand\"\n\t\"time\"\n)\n\ntype Atm struct{\n    ID           int64\n\tVersion      string\n\tName         string\n\tStateID      string\n\tSerialNumber string\n\tISPNetwork   string\n}\n\ntype BackendSystem struct{\n\tVersion       string\n\tProcessName   string\n\tOSType        string\n    OSVersion     string\n\tCloudProvider string\n\tCloudRegion   string\n\tEndpoint      string\n}\n\nfunc generateAtm() Atm{\n\ti := getRandomNumber(1, 2)\n    var newAtm Atm\n\n\tswitch i {\n\t\tcase 1:\n\t\t\tnewAtm = Atm{\n\t\t\t\tID: 111,\n\t\t\t\tName: \"ATM-111-IL\",\n\t\t\t\tSerialNumber: \"atmxph-2022-111\",\n\t\t\t\tVersion: \"v1.0\",\n\t\t\t\tISPNetwork: \"comcast-chicago\",\n\t\t\t\tStateID: \"IL\",\n\n\t\t\t}\n\n\t\tcase 2:\n\t\t\tnewAtm = Atm{\n\t\t\t\tID: 222,\n\t\t\t\tName: \"ATM-222-CA\",\n\t\t\t\tSerialNumber: \"atmxph-2022-222\",\n\t\t\t\tVersion: \"v1.0\",\n\t\t\t\tISPNetwork: \"comcast-sanfrancisco\",\n\t\t\t\tStateID: \"CA\",\n\t\t\t}\n\t}\n\n\treturn newAtm\n}\n\nfunc generateBackendSystem() BackendSystem{\n    i := getRandomNumber(1, 3)\n\n\tnewBackend := BackendSystem{\n    \tProcessName: \"accounts\",\n\t\tVersion: \"v2.5\",\n\t\tOSType: \"lnx\",\n\t\tOSVersion: \"4.16.10-300.fc28.x86_64\",\n\t\tCloudProvider: \"amzn\",\n\t\tCloudRegion: \"us-east-2\",\n\t}\n\n\tswitch i {\n\t\tcase 1:\n\t\t \tnewBackend.Endpoint = \"api/v2.5/balance\"\n\t\tcase 2:\n\t\t  \tnewBackend.Endpoint = \"api/v2.5/deposit\"\n\t\tcase 3:\n\t\t\tnewBackend.Endpoint = \"api/v2.5/withdrawn\"\n\n\t}\n\n\treturn newBackend\n}\n\nfunc getRandomNumber(min int, max int) int {\n\trand.Seed(time.Now().UnixNano())\n\ti := (rand.Intn(max - min + 1) + min)\n    return i\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Span Example with HTTP Attributes in OpenTelemetry\nDESCRIPTION: A detailed example of a span representing an HTTP health check operation. This example includes comprehensive attributes describing the network and HTTP request details, along with an event recording the response status.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/traces.md#2025-04-09_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"/v1/sys/health\",\n  \"context\": {\n    \"trace_id\": \"7bba9f33312b3dbb8b2c2c62bb7abe2d\",\n    \"span_id\": \"086e83747d0e381e\"\n  },\n  \"parent_id\": \"\",\n  \"start_time\": \"2021-10-22 16:04:01.209458162 +0000 UTC\",\n  \"end_time\": \"2021-10-22 16:04:01.209514132 +0000 UTC\",\n  \"status_code\": \"STATUS_CODE_OK\",\n  \"status_message\": \"\",\n  \"attributes\": {\n    \"net.transport\": \"IP.TCP\",\n    \"net.peer.ip\": \"172.17.0.1\",\n    \"net.peer.port\": \"51820\",\n    \"net.host.ip\": \"10.177.2.152\",\n    \"net.host.port\": \"26040\",\n    \"http.method\": \"GET\",\n    \"http.target\": \"/v1/sys/health\",\n    \"http.server_name\": \"mortar-gateway\",\n    \"http.route\": \"/v1/sys/health\",\n    \"http.user_agent\": \"Consul Health Check\",\n    \"http.scheme\": \"http\",\n    \"http.host\": \"10.177.2.152:26040\",\n    \"http.flavor\": \"1.1\"\n  },\n  \"events\": [\n    {\n      \"name\": \"\",\n      \"message\": \"OK\",\n      \"timestamp\": \"2021-10-22 16:04:01.209512872 +0000 UTC\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry YAML\nDESCRIPTION: Example of configuring OpenTelemetry using application.yaml file to set propagators and resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/sdk-configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\notel:\n  propagators:\n    - tracecontext\n    - b3\n  resource:\n    attributes:\n      deployment.environment: dev\n      service:\n        name: cart\n        namespace: shop\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP Exporter for Python\nDESCRIPTION: Command to install the OpenTelemetry OTLP exporter package for Python using pip.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using NVM in Windows\nDESCRIPTION: Command to install and use the long-term support (LTS) version of Node.js using NVM for Windows.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/development.md#2025-04-09_snippet_1\n\nLANGUAGE: cmd\nCODE:\n```\n> nvm install lts && nvm use lts\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Dependency in Maven\nDESCRIPTION: XML configuration for adding an OpenTelemetry package dependency in a Maven pom.xml file. Uses template variables for groupId, artifactId and version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/ecosystem/registry/quickinstall/maven.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>{{ index (split .name \"/\") 0 }}</groupId>\n    <artifactId>{{ index (split .name \"/\") 1 }}</artifactId>\n    <version>{{ .version }}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Express Application\nDESCRIPTION: Command to run the Express application written in JavaScript using Node.js.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ node app.js\nListening for requests on http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up OpenTelemetry Repository\nDESCRIPTION: Shell commands for cloning the OpenTelemetry repository, installing dependencies, and setting up remote repositories.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:<your_github_username>/opentelemetry.io.git\ncd opentelemetry.io\nnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/open-telemetry/opentelemetry.io.git\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit remote -v\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch origin\ngit fetch upstream\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Service for Metrics\nDESCRIPTION: YAML configuration for a Kubernetes Service that exposes metrics endpoints. Defines ports and selectors for the monitored application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: py-prometheus-app\n  namespace: opentelemetry\n  labels:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\nspec:\n  selector:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\n  ports:\n    - name: prom\n      port: 8080\n```\n\n----------------------------------------\n\nTITLE: Basic Shell Version Check Commands\nDESCRIPTION: Commands to verify PHP and Composer installation versions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nphp -v\ncomposer -v\n```\n\n----------------------------------------\n\nTITLE: Setting Span Attributes\nDESCRIPTION: Examples of how to set attributes on spans both at creation time and during span lifetime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// setting attributes at creation...\nctx, span = tracer.Start(ctx, \"attributesAtCreation\", trace.WithAttributes(attribute.String(\"hello\", \"world\")))\n// ... and after creation\nspan.SetAttributes(attribute.Bool(\"isTrue\", true), attribute.String(\"stringAttr\", \"hi!\"))\n```\n\nLANGUAGE: go\nCODE:\n```\nvar myKey = attribute.Key(\"myCoolAttribute\")\nspan.SetAttributes(myKey.String(\"a value\"))\n```\n\n----------------------------------------\n\nTITLE: Testing the Instrumented Application\nDESCRIPTION: Shell command to send a test request to the instrumented application using curl.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8080/rolldice\n```\n\n----------------------------------------\n\nTITLE: Implementing the Dice Roll Functionality\nDESCRIPTION: Creates the rolldice handler function that generates a random number between 1 and 6 and returns it as the HTTP response.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"io\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"strconv\"\n)\n\nfunc rolldice(w http.ResponseWriter, r *http.Request) {\n\troll := 1 + rand.Intn(6)\n\n\tresp := strconv.Itoa(roll) + \"\\n\"\n\tif _, err := io.WriteString(w, resp); err != nil {\n\t\tlog.Printf(\"Write failed: %v\\n\", err)\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Zipkin Exporter with Maven\nDESCRIPTION: Maven dependency configuration for adding OpenTelemetry Zipkin exporter to a Spring project. This includes the opentelemetry-exporter-zipkin artifact which enables Zipkin tracing integration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/other-spring-autoconfig.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-zipkin</artifactId>\n    <version>{{% param vers.otel %}}</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubeletstats Receiver in YAML\nDESCRIPTION: Configuration example for the Kubeletstats Receiver that collects metrics from the kubelet API server, including collection interval and metric group settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  kubeletstats:\n    collection_interval: 10s\n    auth_type: 'serviceAccount'\n    endpoint: '${env:K8S_NODE_NAME}:10250'\n    insecure_skip_verify: true\n    metric_groups:\n      - node\n      - pod\n      - container\n```\n\n----------------------------------------\n\nTITLE: Generating URL Redirection Rules for OpenTelemetry Documentation in Go Template\nDESCRIPTION: This Go template iterates through language-specific documentation pages and generates redirection rules. It excludes the 'other' language and creates rules to redirect old URLs to new canonical URLs under the /docs/instrumentation/ path.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/redirects/languages.txt#2025-04-09_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{/* Generate rules for all languages. */ -}}\n\n{{/* FIXME - redirect to the new canonical links */ -}}\n\n{{ $languages := (.Site.GetPage \"/docs/instrumentation\").Pages -}}\n{{ range $languages -}}\n  {{ $lang := .File.ContentBaseName -}}\n  {{ if ne $lang \"other\" -}}\n    /docs/{{ $lang }}   /docs/instrumentation/{{ $lang }}\n    /docs/{{ $lang }}/*  /docs/instrumentation/{{ $lang }}/:splat\n  {{ end -}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Installing Jaeger Operator in Kubernetes for OTel Integration\nDESCRIPTION: Commands to create a dedicated observability namespace and install the Jaeger operator version 1.57.0 for collecting and visualizing OpenTelemetry traces from Envoy and Istio.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/new-otel-features-envoy-istio/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace observability\nkubectl create -f https://github.com/jaegertracing/jaeger-operator/releases/download/v1.57.0/jaeger-operator.yaml -n observability\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Auto-Instrumentation on Linux/macOS\nDESCRIPTION: Shell commands to download, install and configure OpenTelemetry auto-instrumentation on Linux/macOS systems. Includes steps for downloading the installation script, setting up instrumentation, and running an application with telemetry enabled.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Download the bash script\ncurl -sSfL https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/otel-dotnet-auto-install.sh -O\n\n# Install core files\nsh ./otel-dotnet-auto-install.sh\n\n# Enable execution for the instrumentation script\nchmod +x $HOME/.otel-dotnet-auto/instrument.sh\n\n# Setup the instrumentation for the current shell session\n. $HOME/.otel-dotnet-auto/instrument.sh\n\n# Run your application with instrumentation\nOTEL_SERVICE_NAME=myapp OTEL_RESOURCE_ATTRIBUTES=deployment.environment=staging,service.version=1.0.0 ./MyNetApp\n```\n\n----------------------------------------\n\nTITLE: Manual Installation of OpenTelemetry Collector on Linux (AMD64)\nDESCRIPTION: Commands to manually download and extract the OpenTelemetry Collector binary for Linux AMD64 systems.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncurl --proto '=https' --tlsv1.2 -fOL https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_linux_amd64.tar.gz\ntar -xvf otelcol_{{% param vers %}}_linux_amd64.tar.gz\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry SDK in TypeScript\nDESCRIPTION: Sets up the OpenTelemetry SDK for a Node.js application, configuring console exporters for traces and metrics. This is required for standalone applications but should be skipped for libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport { ConsoleSpanExporter } from '@opentelemetry/sdk-trace-node';\nimport {\n  PeriodicExportingMetricReader,\n  ConsoleMetricExporter,\n} from '@opentelemetry/sdk-metrics';\nimport { resourceFromAttributes } from '@opentelemetry/resources';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions';\n\nconst sdk = new NodeSDK({\n  resource: resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: 'yourServiceName',\n    [ATTR_SERVICE_VERSION]: '1.0',\n  }),\n  traceExporter: new ConsoleSpanExporter(),\n  metricReader: new PeriodicExportingMetricReader({\n    exporter: new ConsoleMetricExporter(),\n  }),\n});\n\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Setting Span Attributes\nDESCRIPTION: Examples of how to set attributes on spans both at creation time and during span lifetime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: go\nCODE:\n```\n// setting attributes at creation...\nctx, span = tracer.Start(ctx, \"attributesAtCreation\", trace.WithAttributes(attribute.String(\"hello\", \"world\")))\n// ... and after creation\nspan.SetAttributes(attribute.Bool(\"isTrue\", true), attribute.String(\"stringAttr\", \"hi!\"))\n```\n\nLANGUAGE: go\nCODE:\n```\nvar myKey = attribute.Key(\"myCoolAttribute\")\nspan.SetAttributes(myKey.String(\"a value\"))\n```\n\n----------------------------------------\n\nTITLE: Running Testing and Auto-fixing Script for OpenTelemetry Documentation\nDESCRIPTION: Command to run tests and automatically fix issues in preparation for submitting changes to the OpenTelemetry.io repository. This script checks for problems and applies fixes to ensure code quality standards are met.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test-and-fix\n```\n\n----------------------------------------\n\nTITLE: Building OpenTelemetry C++ with Prometheus Support\nDESCRIPTION: This shell command demonstrates how to build OpenTelemetry C++ from source with Prometheus support enabled using CMake.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncmake -DWITH_PROMETHEUS=ON ...\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sibling Span in OpenTelemetry\nDESCRIPTION: Example of another child span that shares the same parent as the previous span. This creates a sibling relationship in the trace hierarchy, demonstrating how multiple operations can branch from the same parent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/traces.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello-salutations\",\n  \"context\": {\n    \"trace_id\": \"5b8aa5a2d2c872e8321cf37308d69df2\",\n    \"span_id\": \"93564f51e1abe1c2\"\n  },\n  \"parent_id\": \"051581bf3cb55c13\",\n  \"start_time\": \"2022-04-29T18:52:58.114492Z\",\n  \"end_time\": \"2022-04-29T18:52:58.114631Z\",\n  \"attributes\": {\n    \"http.route\": \"some_route3\"\n  },\n  \"events\": [\n    {\n      \"name\": \"hey there!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114561Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: zPages Extension Configuration\nDESCRIPTION: YAML configuration for exposing the zPages extension on a public interface.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/troubleshooting.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nextensions:\n  zpages:\n    endpoint: 0.0.0.0:55679\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Registering Metrics in Bash\nDESCRIPTION: Sets an environment variable to register the custom Meter with OpenTelemetry.AutoInstrumentation. This step is crucial for the metrics to be collected.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/custom.md#2025-04-09_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nOTEL_DOTNET_AUTO_METRICS_ADDITIONAL_SOURCES=Examples.Service\n```\n\n----------------------------------------\n\nTITLE: Preparar cambios para commit en Git\nDESCRIPTION: Comando de shell para agregar archivos modificados al área de staging, preparándolos para ser incluidos en el siguiente commit.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit add <nombre_de_tu_archivo>\n```\n\n----------------------------------------\n\nTITLE: Defining the OpenTelemetry PHP Hook Function Signature\nDESCRIPTION: The function signature for the OpenTelemetry hook function that enables auto-instrumentation by registering pre and post execution closures for PHP functions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/php-auto-instrumentation/index.md#2025-04-09_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction hook(\n    ?string $class,\n    string $function,\n    ?\\Closure $pre = null,\n    ?\\Closure $post = null,\n): bool {}\n```\n\n----------------------------------------\n\nTITLE: Exposing Frontend Proxy with Port Forwarding\nDESCRIPTION: Command to set up port forwarding from the Kubernetes service to localhost, making the demo frontendproxy accessible at http://localhost:8080.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/demo.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl port-forward svc/my-otel-demo-frontendproxy 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Building the OpenTelemetry.io Website\nDESCRIPTION: Command to build the OpenTelemetry.io website. The generated files will be placed in the 'public' directory.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/development.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining a Non-Matching Kubernetes Service in YAML\nDESCRIPTION: This YAML snippet demonstrates a Kubernetes Service that would not be picked up by the ServiceMonitor due to a mismatched port name. It illustrates how port naming affects service discovery.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: py-prometheus-app\n  namespace: opentelemetry\n  labels:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\nspec:\n  selector:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\n  ports:\n    - name: bleh\n      port: 8080\n```\n\n----------------------------------------\n\nTITLE: Creating a Kind Kubernetes Cluster\nDESCRIPTION: Command to create a new Kind cluster for testing OpenTelemetry Collector deployment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: Shared Exporter Configuration\nDESCRIPTION: YAML configuration example showing multiple pipelines sharing the same OTLP exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: localhost:14250\n\nservice:\n  pipelines:\n    traces: # a pipeline of \"traces\" type\n      receivers: [zipkin]\n      processors: [memory_limiter]\n      exporters: [otlp]\n    traces/2: # another pipeline of \"traces\" type\n      receivers: [otlp]\n      processors: [transform]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Building Spring Boot Native Image with Maven\nDESCRIPTION: Command to navigate to the project directory and build a Spring Boot native image using Maven with a custom image name.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd spring-petclinic\nmvn -Pnative spring-boot:build-image -Dspring-boot.build-image.imageName=spring-petclinic-native\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Receiver Configuration\nDESCRIPTION: Configuration for the Kubernetes Cluster Receiver showing authentication type, node conditions, and allocatable resources to monitor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nk8s_cluster:\n  auth_type: serviceAccount\n  node_conditions_to_report:\n    - Ready\n    - MemoryPressure\n  allocatable_types_to_report:\n    - cpu\n    - memory\n```\n\n----------------------------------------\n\nTITLE: Common Log Format (CLF) Example\nDESCRIPTION: An example of the Common Log Format (CLF) typically used by infrastructure components to log HTTP requests in a structured way with IP address, user, timestamp, HTTP method, path, protocol, status code, and bytes sent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/logs.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 - johndoe [04/Aug/2024:12:34:56 -0400] \"POST /api/v1/login HTTP/1.1\" 200 1234\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation Libraries with Hugo Template\nDESCRIPTION: This Hugo template generates shell commands for installing OpenTelemetry instrumentation libraries. It creates a scratch variable to store the term 'instrumentation library' and then outputs the appropriate installation command by substituting the package name into a provided command template.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/ecosystem/registry/quickinstall/default.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ $typesNames := newScratch -}}\n{{ $typesNames.Set \"instrumentation\" \"instrumentation library\" -}}\n\nTo install this {{ $typesNames.Get .type | default .type }} run:\n\n```shell\n{{ printf .installLine .name }}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger as OTLP Endpoint in Docker\nDESCRIPTION: Command to run Jaeger in a Docker container as an OTLP endpoint for testing exporters. It exposes ports for the UI (16686), gRPC (4317), and HTTP (4318) protocols.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/exporters.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Context Manager in OpenTelemetry JavaScript\nDESCRIPTION: Example of setting up a context manager using AsyncHooksContextManager and registering it with the OpenTelemetry API. This is typically handled by the SDK but can be configured directly.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/context.md#2025-04-09_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as api from '@opentelemetry/api';\nimport { AsyncHooksContextManager } from '@opentelemetry/context-async-hooks';\n\nconst contextManager = new AsyncHooksContextManager();\ncontextManager.enable();\napi.context.setGlobalContextManager(contextManager);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Callback Function for Asynchronous Gauge in Python\nDESCRIPTION: This code defines a callback function that scrapes config versions from a server endpoint. The function respects the timeout provided in the callback options and yields Observation objects with version numbers and metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom typing import Iterable\nfrom opentelemetry.metrics import CallbackOptions, Observation\n\n\ndef scrape_config_versions(options: CallbackOptions) -> Iterable[Observation]:\n    r = requests.get(\n        \"http://configserver/version_metadata\", timeout=options.timeout_millis / 10**3\n    )\n    for metadata in r.json():\n        yield Observation(\n            metadata[\"version_num\"], {\"config.name\": metadata[\"version_num\"]}\n        )\n```\n\n----------------------------------------\n\nTITLE: Setting Service Name Environment Variable in OpenTelemetry\nDESCRIPTION: Sets the value of the service.name resource attribute in OpenTelemetry, which takes precedence over the same attribute if also provided in OTEL_RESOURCE_ATTRIBUTES.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/sdk-configuration/general.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_SERVICE_NAME=\"your-service-name\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Browser Instrumentation in Next.js\nDESCRIPTION: Code snippet showing how to initialize OpenTelemetry tracing in a Next.js application's _app.tsx file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/frontend.md#2025-04-09_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport FrontendTracer from '../utils/telemetry/FrontendTracer';\n\nif (typeof window !== 'undefined') FrontendTracer();\n```\n\n----------------------------------------\n\nTITLE: Cloning Spring PetClinic Repository with Git\nDESCRIPTION: Command to clone the Spring PetClinic application repository from GitHub, which will be used to demonstrate OpenTelemetry integration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/spring-projects/spring-petclinic.git\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer in PHP with OpenTelemetry\nDESCRIPTION: Demonstrates how to acquire a tracer using the OpenTelemetry PHP SDK. The tracer is obtained from the global tracer provider with specified instrumentation scope details.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n$tracerProvider = Globals::tracerProvider();\n$tracer = $tracerProvider->getTracer(\n  'instrumentation-scope-name', //name (required)\n  'instrumentation-scope-version', //version\n  'http://example.com/my-schema', //schema url\n  ['foo' => 'bar'] //attributes\n);\n```\n\n----------------------------------------\n\nTITLE: Common Log Format (CLF) Example\nDESCRIPTION: An example of the Common Log Format (CLF) typically used by infrastructure components to log HTTP requests in a structured way with IP address, user, timestamp, HTTP method, path, protocol, status code, and bytes sent.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/logs.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n127.0.0.1 - johndoe [04/Aug/2024:12:34:56 -0400] \"POST /api/v1/login HTTP/1.1\" 200 1234\n```\n\n----------------------------------------\n\nTITLE: Shared Receiver Pipeline Flow Diagram\nDESCRIPTION: Mermaid diagram illustrating how a shared receiver fans out data to multiple pipelines with different processors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n  R1(\"\\\"opentelemetry-collector\\\" Receiver\") --> FO((fan-out))\n  FO -->|Pipeline 'traces'| P1[\"\\\"memory_limiter\\\" Processor\"]\n  FO -->|Pipeline 'traces/2'| P2[\"\\\"transform\\\" Processor\"]\n  P1 ~~~ M1[...]\n  P2 ~~~ M2[...]\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource Detectors in Node.js OpenTelemetry\nDESCRIPTION: Sets environment variable to enable specific resource detectors (env and host) for OpenTelemetry Node.js SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/js/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_NODE_RESOURCE_DETECTORS=env,host\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Oversubscription in Nomad Job Spec\nDESCRIPTION: Example of configuring Memory Oversubscription in a Nomad job specification, allowing a job to use up to 2048MB of memory when needed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_4\n\nLANGUAGE: hcl\nCODE:\n```\nresources {\n   cpu    = 55\n   memory = 1024\n   memory_max = 2048\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Ansible Playbook\nDESCRIPTION: Ansible playbook for deploying OpenTelemetry Collector with configuration for host metrics collection and Prometheus export\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/scaling-collectors.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Install OpenTelemetry Collector\n  hosts: all\n  become: true\n\n  tasks:\n    - name: Install OpenTelemetry Collector\n      ansible.builtin.include_role:\n        name: opentelemetry_collector\n      vars:\n        otel_collector_receivers:\n          hostmetrics:\n            collection_interval: 60s\n            scrapers:\n              cpu: {}\n              disk: {}\n              load: {}\n              filesystem: {}\n              memory: {}\n              network: {}\n              paging: {}\n              process:\n                mute_process_name_error: true\n                mute_process_exe_error: true\n                mute_process_io_error: true\n              processes: {}\n\n        otel_collector_processors:\n          batch:\n          resourcedetection:\n            detectors: [env, system]\n            timeout: 2s\n            system:\n              hostname_sources: [os]\n          transform/add_resource_attributes_as_metric_attributes:\n            error_mode: ignore\n            metric_statements:\n              - context: datapoint\n                statements:\n                  - set(attributes[\"deployment.environment\"],\n                    resource.attributes[\"deployment.environment\"])\n                  - set(attributes[\"service.version\"],\n                    resource.attributes[\"service.version\"])\n\n        otel_collector_exporters:\n          prometheusremotewrite:\n            endpoint: https://<prometheus-url>/api/prom/push\n            headers:\n              Authorization: 'Basic <base64-encoded-username:password>'\n\n        otel_collector_service:\n          pipelines:\n            metrics:\n              receivers: [hostmetrics]\n              processors:\n                [\n                  resourcedetection,\n                  transform/add_resource_attributes_as_metric_attributes,\n                  batch,\n                ]\n              exporters: [prometheusremotewrite]\n```\n\n----------------------------------------\n\nTITLE: Implementing Observable Gauge in JavaScript with OpenTelemetry\nDESCRIPTION: Shows how to create and use an observable gauge to measure non-additive values. The gauge observes a temperature variable that can be modified by a sensor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nlet temperature = 32;\n\nconst gauge = myMeter.createObservableGauge('temperature.gauge');\n\ngauge.addCallback((result) => {\n  result.observe(temperature);\n});\n\n//... temperature variable is modified by a sensor\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Boot Starter AOP Dependency in Gradle\nDESCRIPTION: Demonstrates how to add the Spring Boot Starter AOP dependency to a Gradle project, which is necessary for using OpenTelemetry annotations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/annotations.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"org.springframework.boot:spring-boot-starter-aop\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Metrics Endpoint in OpenTelemetry Collector\nDESCRIPTION: YAML configuration for exposing internal metrics via Prometheus endpoint with customizable host and port settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  telemetry:\n    metrics:\n      readers:\n        - pull:\n            exporter:\n              prometheus:\n                host: '0.0.0.0'\n                port: 8888\n```\n\n----------------------------------------\n\nTITLE: Adding a Single Attribute to a Span in Ruby\nDESCRIPTION: Adds a single attribute to a span using the set_attribute method. This example adds the email recipient information to the span.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/email.md#2025-04-09_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nspan.set_attribute(\"app.email.recipient\", data.email)\n```\n\n----------------------------------------\n\nTITLE: Automatic Resource Detection in OpenTelemetry Go\nDESCRIPTION: This code shows how to use various resource detectors to automatically discover and provide information about the runtime environment, including process, OS, container, and host details. It also demonstrates error handling for partial resource creation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/resources.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nres, err := resource.New(\n\tcontext.Background(),\n\tresource.WithFromEnv(),      // Discover and provide attributes from OTEL_RESOURCE_ATTRIBUTES and OTEL_SERVICE_NAME environment variables.\n\tresource.WithTelemetrySDK(), // Discover and provide information about the OpenTelemetry SDK used.\n\tresource.WithProcess(),      // Discover and provide process information.\n\tresource.WithOS(),           // Discover and provide OS information.\n\tresource.WithContainer(),    // Discover and provide container information.\n\tresource.WithHost(),         // Discover and provide host information.\n\tresource.WithAttributes(attribute.String(\"foo\", \"bar\")), // Add custom resource attributes.\n\t// resource.WithDetectors(thirdparty.Detector{}), // Bring your own external Detector implementation.\n)\nif errors.Is(err, resource.ErrPartialResource) || errors.Is(err, resource.ErrSchemaURLConflict) {\n\tlog.Println(err) // Log non-fatal issues.\n} else if err != nil {\n\tlog.Fatalln(err) // The error may be fatal.\n}\n```\n\n----------------------------------------\n\nTITLE: Example Trace Output\nDESCRIPTION: Sample JSON output showing the structure of exported trace data including events and attributes\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/browser.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"traceId\": \"ab42124a3c573678d4d8b21ba52df3bf\",\n  \"parentId\": \"cfb565047957cb0d\",\n  \"name\": \"documentFetch\",\n  \"id\": \"5123fc802ffb5255\",\n  \"kind\": 0,\n  \"timestamp\": 1606814247811266,\n  \"duration\": 9390,\n  \"attributes\": {\n    \"component\": \"document-load\",\n    \"http.response_content_length\": 905\n  },\n  \"status\": {\n    \"code\": 0\n  },\n  \"events\": [\n    {\n      \"name\": \"fetchStart\",\n      \"time\": [1606814247, 811266158]\n    },\n    {\n      \"name\": \"domainLookupStart\",\n      \"time\": [1606814247, 811266158]\n    },\n    {\n      \"name\": \"domainLookupEnd\",\n      \"time\": [1606814247, 811266158]\n    },\n    {\n      \"name\": \"connectStart\",\n      \"time\": [1606814247, 811266158]\n    },\n    {\n      \"name\": \"connectEnd\",\n      \"time\": [1606814247, 811266158]\n    },\n    {\n      \"name\": \"requestStart\",\n      \"time\": [1606814247, 819101158]\n    },\n    {\n      \"name\": \"responseStart\",\n      \"time\": [1606814247, 819791158]\n    },\n    {\n      \"name\": \"responseEnd\",\n      \"time\": [1606814247, 820656158]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Host Metrics Receiver with hostfs Volume Mount\nDESCRIPTION: This YAML snippet demonstrates how to configure the Host Metrics Receiver to use the hostfs volume mount. It specifies the root path and collection interval, as well as the enabled scrapers for various system metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  hostmetrics:\n    root_path: /hostfs\n    collection_interval: 10s\n    scrapers:\n      cpu:\n      load:\n      memory:\n      disk:\n      filesystem:\n      network:\n```\n\n----------------------------------------\n\nTITLE: Styling Benchmark Charts with CSS\nDESCRIPTION: Defines custom CSS styles for the benchmark charts and responsive design for headers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/benchmarks.md#2025-04-09_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n<style>\n  @media (min-width: 100px) {\n  #main h3 {\n      font-size: 0.9rem;\n      font-weight: bold;\n      word-break: break-all;\n     }\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js using NVM in Linux\nDESCRIPTION: Command to install the Node.js version specified in the .nvmrc file using Node Version Manager (NVM) on Linux.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/development.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnvm install\n```\n\n----------------------------------------\n\nTITLE: Building and Running the .NET Application\nDESCRIPTION: Commands to build and run the .NET application, which will start the web server and make the API available at the configured URL.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndotnet build\ndotnet run\n```\n\n----------------------------------------\n\nTITLE: Setting Java Agent Configuration File Path\nDESCRIPTION: Specifies the path to a valid Java properties file containing the agent configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: Properties\nCODE:\n```\notel.javaagent.configuration-file=/path/to/config.properties\n```\n\n----------------------------------------\n\nTITLE: Defining Dice Controller in Elixir with Phoenix\nDESCRIPTION: This snippet defines a basic controller for a dice rolling application using Phoenix framework in Elixir. It includes a public 'roll' function that responds to HTTP requests and a private 'roll_dice' function that generates a random number.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: elixir\nCODE:\n```\ndefmodule RollDiceWeb.DiceController do\n  use RollDiceWeb, :controller\n\n  def roll(conn, _params) do\n    send_resp(conn, 200, roll_dice())\n  end\n\n  defp roll_dice do\n    to_string(Enum.random(1..6))\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Building OpenTelemetry Module for Apache HTTP Server using Docker\nDESCRIPTION: Commands to clone the repository and build the OpenTelemetry module for Apache HTTP Server inside a CentOS 7 Docker container. The build process downloads all required dependencies and installs the module.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-cpp-contrib\ncd  instrumentation/otel-webserver-module\ndocker compose --profile centos7 build\n```\n\n----------------------------------------\n\nTITLE: Running the Instrumented Python Application\nDESCRIPTION: Commands to activate the virtual environment and run the Python application with OpenTelemetry instrumentation enabled.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsource python_logs_example/bin/activate\n\nexport OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true\nopentelemetry-instrument \\\n  --traces_exporter console,otlp \\\n  --metrics_exporter console,otlp \\\n  --logs_exporter console,otlp \\\n  --service_name python-logs-example \\\n  python $(pwd)/example.py\n```\n\n----------------------------------------\n\nTITLE: Running the Instrumented Python Application\nDESCRIPTION: Commands to activate the virtual environment and run the Python application with OpenTelemetry instrumentation enabled.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nsource python_logs_example/bin/activate\n\nexport OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED=true\nopentelemetry-instrument \\\n  --traces_exporter console,otlp \\\n  --metrics_exporter console,otlp \\\n  --logs_exporter console,otlp \\\n  --service_name python-logs-example \\\n  python $(pwd)/example.py\n```\n\n----------------------------------------\n\nTITLE: Sample Collector Output for Generated Spans\nDESCRIPTION: Example output from the OpenTelemetry Collector showing the traces and spans generated by the Python application, including trace IDs, span names, and timing information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/distro.md#2025-04-09_snippet_5\n\nLANGUAGE: nocode\nCODE:\n```\nResource labels:\n     -> telemetry.sdk.language: STRING(python)\n     -> telemetry.sdk.name: STRING(opentelemetry)\n     -> telemetry.sdk.version: STRING(1.1.0)\n     -> service.name: STRING(unknown_service)\nInstrumentationLibrarySpans #0\nInstrumentationLibrary __main__\nSpan #0\n    Trace ID       : db3c99e5bfc50ef8be1773c3765e8845\n    Parent ID      : 0677126a4d110cb8\n    ID             : 3163b3022808ed1b\n    Name           : bar\n    Kind           : SPAN_KIND_INTERNAL\n    Start time     : 2021-05-06 22:54:51.23063 +0000 UTC\n    End time       : 2021-05-06 22:54:51.230684 +0000 UTC\n    Status code    : STATUS_CODE_UNSET\n    Status message :\nSpan #1\n    Trace ID       : db3c99e5bfc50ef8be1773c3765e8845\n    Parent ID      :\n    ID             : 0677126a4d110cb8\n    Name           : foo\n    Kind           : SPAN_KIND_INTERNAL\n    Start time     : 2021-05-06 22:54:51.230549 +0000 UTC\n    End time       : 2021-05-06 22:54:51.230706 +0000 UTC\n    Status code    : STATUS_CODE_UNSET\n    Status message :\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dictionary Entries in Markdown Front Matter\nDESCRIPTION: Demonstrates how to add custom words to the spell checker dictionary in a Markdown file's front matter. This is useful for including project-specific terminology that might not be in standard dictionaries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/style-guide.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: PageTitle\ncSpell:ignore: <word>\n---\n```\n\n----------------------------------------\n\nTITLE: Pipeline Traces/2 Flow Diagram\nDESCRIPTION: Mermaid diagram showing the flow in the 'traces/2' pipeline with batch processor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_9\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Pipeline \"traces/2\"\n---\nflowchart LR\n  R1(\"otlp Receiver\") --> P1[\"\\\"batch\\\" Processor\"]\n  P1 --> E1[[\"\\\"otlp\\\" Exporter\"]]\n```\n\n----------------------------------------\n\nTITLE: Enabling Specific OpenTelemetry Instrumentations\nDESCRIPTION: Configures environment variable to enable only HTTP and Express instrumentations while disabling all others.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/js/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_NODE_ENABLED_INSTRUMENTATIONS=\"http,express\"\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for OpenTelemetry Go API Reference Page\nDESCRIPTION: This YAML frontmatter configures a documentation page that redirects to the OpenTelemetry Go API reference. It sets the title, link properties, and build instructions for the page.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/api.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: API reference\nlinkTitle: API\nredirect: https://pkg.go.dev/go.opentelemetry.io/otel\nmanualLinkTarget: _blank\n_build: { render: link }\nweight: 210\n---\n```\n\n----------------------------------------\n\nTITLE: Installing Rails for OpenTelemetry Integration\nDESCRIPTION: Command to install the Rails framework as a prerequisite for the OpenTelemetry Ruby example application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngem install rails\n```\n\n----------------------------------------\n\nTITLE: Manually Instrumenting a Flask Route in Python\nDESCRIPTION: This snippet shows how to manually instrument a Flask route using OpenTelemetry. It creates a span, extracts context from request headers, and collects request attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/server_request\")\ndef server_request():\n    with tracer.start_as_current_span(\n        \"server_request\",\n        context=extract(request.headers),\n        kind=trace.SpanKind.SERVER,\n        attributes=collect_request_attributes(request.environ),\n    ):\n        print(request.args.get(\"param\"))\n        return \"served\"\n```\n\n----------------------------------------\n\nTITLE: Manually Instrumenting a Flask Route in Python\nDESCRIPTION: This snippet shows how to manually instrument a Flask route using OpenTelemetry. It creates a span, extracts context from request headers, and collects request attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n@app.route(\"/server_request\")\ndef server_request():\n    with tracer.start_as_current_span(\n        \"server_request\",\n        context=extract(request.headers),\n        kind=trace.SpanKind.SERVER,\n        attributes=collect_request_attributes(request.environ),\n    ):\n        print(request.args.get(\"param\"))\n        return \"served\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in OpenTelemetry Collector\nDESCRIPTION: Example showing how to configure environment variables in the OpenTelemetry Collector to reference secrets securely.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-operator-q-and-a/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenv:\n  - name: TOKEN_VALUE\n    valueFrom:\n      secretKeyRef:\n        key: TOKEN_VALUE\n        name: otel-collector-secret\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Span from Context in Ruby\nDESCRIPTION: Retrieves the currently active span from the OpenTelemetry context to modify or enhance it with additional information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/email.md#2025-04-09_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\ncurrent_span = OpenTelemetry::Trace.current_span\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for OpenTelemetry Java Documentation Redirect\nDESCRIPTION: YAML frontmatter configuration that sets up a page redirect to the OpenTelemetry Java examples documentation on GitHub. Includes metadata like title, redirect URL, link behavior, aliases for legacy URLs, and page weight.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/examples.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Examples\nredirect: https://github.com/open-telemetry/opentelemetry-java-docs#java-opentelemetry-examples\nmanualLinkTarget: _blank\naliases:\n  - /docs/java/instrumentation_examples\n  - /docs/languages/java/instrumentation_examples\n_build: { render: link }\nweight: 220\n```\n\n----------------------------------------\n\nTITLE: Running Link Validation Script in OpenTelemetry.io\nDESCRIPTION: Bash script command to validate links with non-success statuses using Puppeteer. This script is used by maintainers to double-check links that return non-200 status codes and validate URL fragments.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pr-checks.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n./scripts/double-check-refcache-400s.mjs -f --max-num-to-update 99\n```\n\n----------------------------------------\n\nTITLE: Default OpenTelemetry Collector Configuration\nDESCRIPTION: The default YAML configuration provided by the Helm chart for the OpenTelemetry Collector, including exporters, extensions, processors, receivers, and service pipelines.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug: {}\nextensions:\n  health_check: {}\nprocessors:\n  batch: {}\n  memory_limiter:\n    check_interval: 5s\n    limit_percentage: 80\n    spike_limit_percentage: 25\nreceivers:\n  jaeger:\n    protocols:\n      grpc:\n        endpoint: ${env:MY_POD_IP}:14250\n      thrift_compact:\n        endpoint: ${env:MY_POD_IP}:6831\n      thrift_http:\n        endpoint: ${env:MY_POD_IP}:14268\n  otlp:\n    protocols:\n      grpc:\n        endpoint: ${env:MY_POD_IP}:4317\n      http:\n        endpoint: ${env:MY_POD_IP}:4318\n  prometheus:\n    config:\n      scrape_configs:\n        - job_name: opentelemetry-collector\n          scrape_interval: 10s\n          static_configs:\n            - targets:\n                - ${env:MY_POD_IP}:8888\n  zipkin:\n    endpoint: ${env:MY_POD_IP}:9411\nservice:\n  extensions:\n    - health_check\n  pipelines:\n    logs:\n      exporters:\n        - debug\n      processors:\n        - memory_limiter\n        - batch\n      receivers:\n        - otlp\n    metrics:\n      exporters:\n        - debug\n      processors:\n        - memory_limiter\n        - batch\n      receivers:\n        - otlp\n        - prometheus\n    traces:\n      exporters:\n        - debug\n      processors:\n        - memory_limiter\n        - batch\n      receivers:\n        - otlp\n        - jaeger\n        - zipkin\n  telemetry:\n    metrics:\n      address: ${env:MY_POD_IP}:8888\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Cascade Build Parameters in YAML\nDESCRIPTION: This YAML configuration sets cascading build properties for Hugo. It specifies that content should never be listed or rendered, and includes tracking information for commits and file drift status.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/languages/_includes/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: # bogus for markdownlint\ncascade:\n  build: { list: never, render: never }\ndefault_lang_commit: 7811e854ba3b31c56ce681f1d60cf19e8a5c4358\ndrifted_from_default: file not found\n---\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Error for Exponential Histograms in Bash\nDESCRIPTION: This code demonstrates the mathematical calculation of relative error in exponential histograms using a scale factor of 3, showing how the error is derived from the bucket width and midpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/exponential-histograms.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nscale = 3\n# For base calculation, see above\nbase  = 1.090508\n\nrelative error = (bucketWidth / 2) / bucketMidpoint\n               = ((upper - lower) / 2) / ((upper + lower) / 2)\n               = ((base - 1) / 2) / ((base + 1) / 2)\n               = (base - 1) / (base + 1)\n               = (1.090508 - 1) / (1.090508 + 1)\n               = 0.04329\n               = 4.329%\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector in YAML\nDESCRIPTION: YAML configuration for setting up an OpenTelemetry Collector with OTLP receivers and debug exporters for traces, metrics, and logs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n# /tmp/otel-collector-config.yaml\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n      http:\n        endpoint: 0.0.0.0:4318\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n    verbosity: detailed\nprocessors:\n  batch:\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [debug]\n      processors: [batch]\n    metrics:\n      receivers: [otlp]\n      exporters: [debug]\n      processors: [batch]\n    logs:\n      receivers: [otlp]\n      exporters: [debug]\n      processors: [batch]\n```\n\n----------------------------------------\n\nTITLE: Using Observable Counters for Asynchronous Metrics in JavaScript\nDESCRIPTION: Demonstrates how to use an observable counter to asynchronously track a metric over time, in this case the number of events.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_60\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst events = [];\n\nconst addEvent = (name) => {\n  events.push(name);\n};\n\nconst counter = myMeter.createObservableCounter('events.counter');\n\ncounter.addCallback((result) => {\n  result.observe(events.length);\n});\n\n//... calls to addEvent\n```\n\n----------------------------------------\n\nTITLE: Fetching Changes from Upstream Repository\nDESCRIPTION: Git commands to fetch changes from the upstream OpenTelemetry.io repository and rebase the local branch to resolve merge conflicts. This helps keep the PR branch up-to-date with the main repository.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\n----------------------------------------\n\nTITLE: Processing Page Redirects in Hugo Template\nDESCRIPTION: A Hugo template that iterates through site pages and generates redirect mappings. It handles both explicit redirects from page parameters and processes additional redirects through partial templates. The script ensures proper path handling for both absolute and relative URLs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/redirects/pages.txt#2025-04-09_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{/* Generate redirects for all given pages */ -}}\n{{/* cSpell:ignore cond */ -}}\n\n{{ range $p := .Site.Pages -}}\n\n  {{ range $p.Params.redirects -}}\n    {{ $from := cond (strings.HasPrefix .from \"/\")\n        .from\n        (print $p.RelPermalink .from) -}}\n    {{ $to := cond (strings.HasPrefix .to \"/\")\n        .to\n        (print $p.RelPermalink .to) -}}\n    {{ $from | printf \"%-35s\" }} {{ $to }}\n  {{ end -}}\n\n  {{ partial \"redirects/aliases.txt\" $p -}}\n  {{ partial \"redirects/redirect.txt\" $p -}}\n\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Language Feature Reference Table in Markdown\nDESCRIPTION: This code snippet presents a Markdown table that outlines the OpenTelemetry instrumentation features for various programming languages used in the demo. It categorizes the services by language and type of instrumentation (automatic, library-based, or manual).\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Language   | Automatic Instrumentation                          | Instrumentation Libraries                                                                    | Manual Instrumentation                                                                       |\n| ---------- | -------------------------------------------------- | -------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n| .NET       | [Accounting Service](services/accounting/)         | [Cart Service](services/cart/)                                                               | [Cart Service](services/cart/)                                                               |\n| C++        |                                                    |                                                                                              | [Currency Service](services/currency/)                                                       |\n| Go         |                                                    | [Checkout Service](services/checkout/), [Product Catalog Service](services/product-catalog/) | [Checkout Service](services/checkout/), [Product Catalog Service](services/product-catalog/) |\n| Java       | [Ad Service](services/ad/)                         |                                                                                              | [Ad Service](services/ad/)                                                                   |\n| JavaScript |                                                    |                                                                                              | [Payment Service](services/payment/)                                                         |\n| TypeScript |                                                    | [Frontend](services/frontend/), [React Native App](services/react-native-app/)               | [Frontend](services/frontend/)                                                               |\n| Kotlin     |                                                    | [Fraud Detection Service](services/fraud-detection/)                                         |                                                                                              |\n| PHP        |                                                    | [Quote Service](services/quote/)                                                             | [Quote Service](services/quote/)                                                             |\n| Python     | [Recommendation Service](services/recommendation/) |                                                                                              | [Recommendation Service](services/recommendation/)                                           |\n| Ruby       |                                                    | [Email Service](services/email/)                                                             | [Email Service](services/email/)                                                             |\n| Rust       |                                                    | [Shipping Service](services/shipping/)                                                       | [Shipping Service](services/shipping/)                                                       |\n```\n\n----------------------------------------\n\nTITLE: Obtaining a Tracer for Custom Span Creation\nDESCRIPTION: Java code for obtaining a Tracer instance from the GlobalOpenTelemetry object. The Tracer is used to create custom spans in your application code, allowing you to track specific operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/api.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.opentelemetry.api.GlobalOpenTelemetry;\nimport io.opentelemetry.api.trace.Tracer;\n\nTracer tracer = GlobalOpenTelemetry.getTracer(\"application\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing Git Branches for OpenTelemetry Contributions\nDESCRIPTION: Shell commands for creating a new branch, checking file status, committing changes, and pushing to a remote repository.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b <my_new_branch> upstream/main\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit status\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit add <your_file_name>\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"Your commit message\"\n```\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin <my_new_branch>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Agent via Environment Variables\nDESCRIPTION: Example showing how to configure the OpenTelemetry agent using environment variables for service name, exporters, and endpoints\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nOTEL_SERVICE_NAME=your-service-name \\\nOTEL_TRACES_EXPORTER=console,otlp \\\nOTEL_METRICS_EXPORTER=console \\\nOTEL_EXPORTER_OTLP_TRACES_ENDPOINT=0.0.0.0:4317\nopentelemetry-instrument \\\n    python myapp.py\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Using CLI Environment Variables\nDESCRIPTION: Example of configuring OpenTelemetry using environment variables directly in the CLI command. Sets the traces exporter and endpoint before running the application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/js/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_TRACES_EXPORTER=otlp OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=your-endpoint \\\nnode --require @opentelemetry/auto-instrumentations-node/register app.js\n```\n\n----------------------------------------\n\nTITLE: Generating Sorted Vendor Table in Hugo Template\nDESCRIPTION: This Hugo template creates a table of OpenTelemetry ecosystem vendors. It sorts vendors first by commercial status, then by open-source status, and finally alphabetically by name. The table includes columns for organization name, OSS status, commercial status, native OTLP support, and a link to learn more.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/vendor-table.md#2025-04-09_snippet_0\n\nLANGUAGE: gohugo\nCODE:\n```\n{{/*\ncSpell:ignore: cial cond\n*/ -}}\n{{ $data := sort (sort (sort $.Site.Data.ecosystem.vendors \"name\") \"oss\" \"desc\") \"commercial\" -}}\n\n| Organization[^org] | OSS | Com&shy;mer&shy;cial | Native OTLP | Learn more  |\n| ----------- | ----------- | ---------- | ----------------- | ----------- | ----------- |\n{{- range $data }}\n  {{- $shortUrl := .shortUrl -}}\n  {{- if not $shortUrl  }}\n      {{- $tmp := split (replace .url \"https://\" \"\") \"/\"  }}\n      {{- $shortUrl = (index $tmp 0) }}\n      {{- if gt (len $tmp) 1  }}\n          {{- $shortUrl = printf \"%s/…\" $shortUrl  }}\n      {{- end }}\n  {{- end }}\n  {{/* Each line below is a column: */ -}}\n  {{ .name }} |\n  {{- cond .oss \"Yes\" \"No\" }} |\n  {{- cond .commercial \"Yes\" \"No\" }} |\n  {{- cond .nativeOTLP \"Yes\" \"No\" }} |\n  {{- /* */}} [{{ $shortUrl }}]({{ .url }}) |\n{{- end }}\n\n[^org]: Organizations are grouped as follows based on their OTel support:\n    - Pure OSS\n    - Mixed OSS/commercial\n    - Commercial\n    - Alphabetical within each group\n```\n\n----------------------------------------\n\nTITLE: Flow Diagram of Prometheus Custom Resource Discovery\nDESCRIPTION: This Mermaid flowchart shows how the Target Allocator discovers Prometheus Operator custom resources (PodMonitor and ServiceMonitor), adds jobs to the scrape configuration, and distributes this configuration to the OTel Collectors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart RL\n  pm(PodMonitor)\n  sm(ServiceMonitor)\n  ta(Target Allocator)\n  oc1(OTel Collector)\n  oc2(OTel Collector)\n  oc3(OTel Collector)\n  ta --> pm\n  ta --> sm\n  oc1 --> ta\n  oc2 --> ta\n  oc3 --> ta\n  sm ~~~|\"1. Discover Prometheus Operator CRs\"| sm\n  ta ~~~|\"2. Add job to TA scrape configuration\"| ta\n  oc3 ~~~|\"3. Add job to OTel Collector scrape configuration\"| oc3\n```\n\n----------------------------------------\n\nTITLE: Generated Collector Directory Structure\nDESCRIPTION: Console output showing the directory structure created by OCB. The structure includes the configuration file, OCB executable, and the generated collector directory containing Go source files and the compiled binary.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/custom-collector.md#2025-04-09_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n.\n├── builder-config.yaml\n├── ocb\n└── otelcol-dev\n    ├── components.go\n    ├── components_test.go\n    ├── go.mod\n    ├── go.sum\n    ├── main.go\n    ├── main_others.go\n    ├── main_windows.go\n    └── otelcol-dev\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode for Go Documentation Intro\nDESCRIPTION: Hugo shortcode implementation for rendering the standardized language introduction section for Go documentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% docs/languages/index-intro go /%}}\n```\n\n----------------------------------------\n\nTITLE: Creating Python Instrumentation Resource with OpenTelemetry Operator\nDESCRIPTION: This command creates a basic Instrumentation resource configured for instrumenting Python services. It sets up OTLP exporter with HTTP/protobuf protocol, configures propagators, and sets the sampler type to parentbased_traceidratio.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  exporter:\n    endpoint: http://demo-collector:4318\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: \"1\"\nEOF\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on CentOS\nDESCRIPTION: Commands to install required development packages on CentOS for Python package installation\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyum -y install python3-devel\nyum -y install gcc-c++\n```\n\n----------------------------------------\n\nTITLE: Instrumenting a PHP Function Using OpenTelemetry Hook\nDESCRIPTION: Example demonstrating how to use the OpenTelemetry hook function to instrument a simple helloWorld function with pre and post execution callbacks.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/php-auto-instrumentation/index.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction helloWorld() {\n  echo 'helloWorld';\n}\n\n\\OpenTelemetry\\Instrumentation\\hook(null, 'helloWorld',\n    static function (?string $class, array $params, ?string $classname, string $functionname, ?string $filename, ?int $lineno)\n    {\n      echo 'before';\n    },\n    static function (mixed $object, array $params, mixed $return, ?Throwable $exception)\n    {\n      echo 'after';\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Check Script - Carbon Protocol Version\nDESCRIPTION: Modified version of the SSL check script that outputs metrics in Carbon's plaintext protocol format for OpenTelemetry Collector integration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\nHOST=${1}\nPORT=${2:-443}\n\nnow=$(date +%s)\nstr=$(echo q | openssl s_client -servername \"${HOST}\" \"${HOST}:${PORT}\" 2>/dev/null | openssl x509 -noout -enddate | awk -F\"=\" '{ print $2; }')\nif [[ \"$(uname)\" == \"Darwin\" ]] ; then\n  notAfter=$(date -j -f \"%b %d %H:%M:%S %Y %Z\" \"${notAfterString}\" +%s)\nelse\n  notAfter=$(date -d \"${notAfterString}\" +%s)\nfi\n\nsecondsLeft=$(($notAfter-$now))\n\nmetricPath=\"tls.server.not_after.time_left;unit=s\"\necho \"${metricPath} ${secondsLeft} ${now}\"\n```\n\n----------------------------------------\n\nTITLE: Defining ServiceMonitor for Prometheus Service Discovery\nDESCRIPTION: This YAML defines a ServiceMonitor Custom Resource for Prometheus service discovery. It specifies which services to monitor based on labels and endpoints.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: monitoring.coreos.com/v1\nkind: ServiceMonitor\nmetadata:\n  name: sm-example\n  namespace: opentelemetry\n  labels:\n    app.kubernetes.io/name: py-prometheus-app\n    release: prometheus\nspec:\n  selector:\n    matchLabels:\n      app: my-app\n  namespaceSelector:\n    matchNames:\n      - opentelemetry\n  endpoints:\n    - port: prom\n      interval: 15s\n```\n\n----------------------------------------\n\nTITLE: Rendering OpenTelemetry Integration Table Rows in Hugo Template\nDESCRIPTION: This snippet iterates through filtered integrations to render each as a table row. It sorts entries alphabetically and by OSS status, conditionally formats CNCF project badges, validates required URLs, and constructs each row with name, OSS status, component type, and documentation links.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/integrations-table.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{{- range sort (sort $integrations \".title\") \".oss\" \"desc\" }}\n{{ $lang := cond\n    (eq .language \"collector\")\n    (dict \"name\" \"Collector\")\n    (index $.Site.Data.instrumentation .language)\n-}}\n{{ $cncfTag := cond\n    (isset . \"cncfProjectLevel\")\n    (printf \"<img alt=\\\"CNCF %s Project\\\" title=\\\"CNCF %s Project\\\" style=\\\"display: inline-block; padding-left: 8px; border: none; width: 16; height: 16px;\\\" src=\\\"/img/cncf-icon-color.svg\\\">\"\n      (humanize .cncfProjectLevel)\n      (humanize .cncfProjectLevel))\n    \"\" -}}\n\n{{ if not .urls.website -}}\n  {{ errorf \"Website URL is missing for integrations registry entry '%s'\" .title -}}\n{{ end -}}\n{{ if not .urls.docs -}}\n  {{ errorf \"Docs URL is missing for integrations registry entry '%s'\" .title -}}\n{{ end -}}\n\n{{/* Each line below is a table column */ -}}\n\n[{{ .title }}]({{ .urls.website }})\n  {{- $cncfTag }} |\n  {{- cond (eq .license \"Commercial\") \"No\" \"Yes\" }} |\n  {{- $lang.name -}}\n  | [{{ replace .urls.docs \"https://\" \"\" }}]({{ .urls.docs }})\n{{- end }}\n```\n\n----------------------------------------\n\nTITLE: Exception Recording Method Reference (Python)\nDESCRIPTION: Reference to Python's RecordException method in OpenTelemetry SDK for recording exceptions in spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-errors/index.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nopentelemetry.sdk.trace.Span.record_exception\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Tracer\nDESCRIPTION: Sets up the TracerProvider and obtains a Tracer instance for creating spans. The TracerProvider is a singleton that implements the OpenTelemetry API interfaces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: cpp\nCODE:\n```\nauto provider = opentelemetry::trace::Provider::GetTracerProvider();\nauto tracer = provider->GetTracer(\"foo_library\", \"1.0.0\");\n```\n\n----------------------------------------\n\nTITLE: Multiple Tracer Providers with Different Resources in OpenTelemetry Python\nDESCRIPTION: Demonstrates how to use multiple tracer providers with different resource configurations for separate services.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/cookbook.md#2025-04-09_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter, BatchSpanProcessor\n\n# Global tracer provider which can be set only once\ntrace.set_tracer_provider(\n    TracerProvider(resource=Resource.create({\"service.name\": \"service1\"}))\n)\ntrace.get_tracer_provider().add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\ntracer = trace.get_tracer(\"tracer.one\")\nwith tracer.start_as_current_span(\"some-name\") as span:\n    span.set_attribute(\"key\", \"value\")\n\n\n\nanother_tracer_provider = TracerProvider(\n    resource=Resource.create({\"service.name\": \"service2\"})\n)\nanother_tracer_provider.add_span_processor(BatchSpanProcessor(ConsoleSpanExporter()))\n\nanother_tracer = trace.get_tracer(\"tracer.two\", tracer_provider=another_tracer_provider)\nwith another_tracer.start_as_current_span(\"name-here\") as span:\n    span.set_attribute(\"another-key\", \"another-value\")\n```\n\n----------------------------------------\n\nTITLE: Sample Zipkin Trace JSON\nDESCRIPTION: Example Zipkin trace payload used for testing the Collector's data processing capabilities.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/troubleshooting.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"traceId\": \"5982fe77008310cc80f1da5e10147519\",\n    \"parentId\": \"90394f6bcffb5d13\",\n    \"id\": \"67fae42571535f60\",\n    \"kind\": \"SERVER\",\n    \"name\": \"/m/n/2.6.1\",\n    \"timestamp\": 1516781775726000,\n    \"duration\": 26000,\n    \"localEndpoint\": {\n      \"serviceName\": \"api\"\n    },\n    \"remoteEndpoint\": {\n      \"serviceName\": \"apip\"\n    },\n    \"tags\": {\n      \"data.http_response_code\": \"201\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Agent with Properties File\nDESCRIPTION: This command shows how to use a Java properties file to configure the OpenTelemetry agent, specifying the configuration file path as a JVM argument.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\njava -javaagent:path/to/opentelemetry-javaagent.jar \\\n     -Dotel.javaagent.configuration-file=path/to/properties/file.properties \\\n     -jar myapp.jar\n```\n\n----------------------------------------\n\nTITLE: Initializing Benchmark Data Visualization in JavaScript\nDESCRIPTION: Sets up the main script for processing and visualizing benchmark data, including color definitions and data collection functions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/benchmarks.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n(function() {\n  const COLORS = [\n    \"#48aaf9\",\n    \"#8a3ef2\",\n    \"#78eeda\",\n    \"#d78000\",\n    \"#1248b3\",\n    \"#97dbfc\",\n    \"#006174\",\n    \"#00b6b6\",\n    \"#854200\",\n    \"#f3c8ad\",\n    \"#410472\",\n  ];\n\n  function init() {\n    function collectBenchesPerTestCase(entries) {\n      const map = new Map();\n      for (const entry of entries) {\n        const {commit, date, tool, benches} = entry;\n        for (const bench of benches) {\n          const result = { commit, date, tool, bench };\n          const arr = map.get(bench.name);\n          if (arr === undefined) {\n            map.set(bench.name, [result]);\n          } else {\n            arr.push(result);\n          }\n        }\n      }\n      return map;\n    }\n\n    const data = window.BENCHMARK_DATA;\n\n    // Render footer\n    document.getElementById('dl-button').onclick = () => {\n      const dataUrl = 'data:,' + JSON.stringify(data, null, 2);\n      const a = document.createElement('a');\n      a.href = dataUrl;\n      a.download = 'benchmark_data.json';\n      a.click();\n    };\n\n    // Prepare data points for charts\n    return Object.keys(data.entries).map(name => ({\n      name,\n      dataSet: collectBenchesPerTestCase(data.entries[name]),\n    }));\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Metrics in OpenTelemetry\nDESCRIPTION: Shows how to create meters and counter instruments for tracking payment transactions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/payment.md#2025-04-09_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { metrics } = require('@opentelemetry/api-metrics');\n\nconst meter = metrics.getMeter('payment');\nconst transactionsCounter = meter.createCounter('app.payment.transactions');\n```\n\n----------------------------------------\n\nTITLE: Viewing Localization Script Help\nDESCRIPTION: Command to display help information for the localization management script, providing details on available options and commands.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm run check:i18n -- -h\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector with Docker\nDESCRIPTION: Docker command to run the OpenTelemetry Collector using the specified configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 4317:4317 \\\n    -v /tmp/otel-collector-config.yaml:/etc/otel-collector-config.yaml \\\n    otel/opentelemetry-collector:latest \\\n    --config=/etc/otel-collector-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Examining Kubernetes Pod Specification After Auto-Instrumentation\nDESCRIPTION: This text block shows an example output of a Kubernetes pod description after OpenTelemetry auto-instrumentation has been injected, including init containers and environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nName:             py-otel-server-f89fdbc4f-mtsps\nNamespace:        opentelemetry\nPriority:         0\nService Account:  default\nNode:             otel-target-allocator-talk-control-plane/172.24.0.2\nStart Time:       Mon, 15 Jul 2024 17:23:45 -0400\nLabels:           app=my-app\n                  app.kubernetes.io/name=py-otel-server\n                  pod-template-hash=f89fdbc4f\nAnnotations:      instrumentation.opentelemetry.io/inject-python: true\nStatus:           Running\nIP:               10.244.0.10\nIPs:\n  IP:           10.244.0.10\nControlled By:  ReplicaSet/py-otel-server-f89fdbc4f\nInit Containers:\n  opentelemetry-auto-instrumentation-python:\n    Container ID:  containerd://20ecf8766247e6043fcad46544dba08c3ef534ee29783ca552d2cf758a5e3868\n    Image:         ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:0.45b0\n    Image ID:      ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python@sha256:3ed1122e10375d527d84c826728f75322d614dfeed7c3a8d2edd0d391d0e7973\n    Port:          <none>\n    Host Port:     <none>\n    Command:\n      cp\n      -r\n      /autoinstrumentation/.\n      /otel-auto-instrumentation-python\n    State:          Terminated\n      Reason:       Completed\n      Exit Code:    0\n      Started:      Mon, 15 Jul 2024 17:23:51 -0400\n      Finished:     Mon, 15 Jul 2024 17:23:51 -0400\n    Ready:          True\n    Restart Count:  0\n    Limits:\n      cpu:     500m\n      memory:  32Mi\n    Requests:\n      cpu:        50m\n      memory:     32Mi\n    Environment:  <none>\n    Mounts:\n      /otel-auto-instrumentation-python from opentelemetry-auto-instrumentation-python (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-x2nmj (ro)\nContainers:\n  py-otel-server:\n    Container ID:   containerd://95fb6d06b08ead768f380be2539a93955251be6191fa74fa2e6e5616036a8f25\n    Image:          otel-target-allocator-talk:0.1.0-py-otel-server\n    Image ID:       docker.io/library/import-2024-07-15@sha256:a2ed39e9a39ca090fedbcbd474c43bac4f8c854336a8500e874bd5b577e37c25\n    Port:           8082/TCP\n    Host Port:      0/TCP\n    State:          Running\n      Started:      Mon, 15 Jul 2024 17:23:52 -0400\n    Ready:          True\n    Restart Count:  0\n    Environment:\n      OTEL_NODE_IP:                                       (v1:status.hostIP)\n      OTEL_POD_IP:                                        (v1:status.podIP)\n      OTEL_METRICS_EXPORTER:                             console,otlp_proto_http\n      OTEL_LOGS_EXPORTER:                                otlp_proto_http\n      OTEL_PYTHON_LOGGING_AUTO_INSTRUMENTATION_ENABLED:  true\n      PYTHONPATH:                                        /otel-auto-instrumentation-python/opentelemetry/instrumentation/auto_instrumentation:/otel-auto-instrumentation-python\n      OTEL_TRACES_EXPORTER:                              otlp\n      OTEL_EXPORTER_OTLP_TRACES_PROTOCOL:                http/protobuf\n      OTEL_EXPORTER_OTLP_METRICS_PROTOCOL:               http/protobuf\n      OTEL_SERVICE_NAME:                                 py-otel-server\n      OTEL_EXPORTER_OTLP_ENDPOINT:                       http://otelcol-collector.opentelemetry.svc.cluster.local:4318\n      OTEL_RESOURCE_ATTRIBUTES_POD_NAME:                 py-otel-server-f89fdbc4f-mtsps (v1:metadata.name)\n      OTEL_RESOURCE_ATTRIBUTES_NODE_NAME:                 (v1:spec.nodeName)\n      OTEL_PROPAGATORS:                                  tracecontext,baggage\n      OTEL_RESOURCE_ATTRIBUTES:                          service.name=py-otel-server,service.version=0.1.0,k8s.container.name=py-otel-server,k8s.deployment.name=py-otel-server,k8s.namespace.name=opentelemetry,k8s.node.name=$(OTEL_RESOURCE_ATTRIBUTES_NODE_NAME),k8s.pod.name=$(OTEL_RESOURCE_ATTRIBUTES_POD_NAME),k8s.replicaset.name=py-otel-server-f89fdbc4f,service.instance.id=opentelemetry.$(OTEL_RESOURCE_ATTRIBUTES_POD_NAME).py-otel-server\n    Mounts:\n      /otel-auto-instrumentation-python from opentelemetry-auto-instrumentation-python (rw)\n      /var/run/secrets/kubernetes.io/serviceaccount from kube-api-access-x2nmj (ro)\nConditions:\n  Type              Status\n  Initialized       True\n  Ready             True\n  ContainersReady   True\n  PodScheduled      True\nVolumes:\n  kube-api-access-x2nmj:\n    Type:                    Projected (a volume that contains injected data from multiple sources)\n    TokenExpirationSeconds:  3607\n    ConfigMapName:           kube-root-ca.crt\n    ConfigMapOptional:       <nil>\n    DownwardAPI:             true\n  opentelemetry-auto-instrumentation-python:\n    Type:        EmptyDir (a temporary directory that shares a pod's lifetime)\n    Medium:\n    SizeLimit:   200Mi\nQoS Class:       Burstable\nNode-Selectors:  <none>\nTolerations:     node.kubernetes.io/not-ready:NoExecute op=Exists for 300s\n                 node.kubernetes.io/unreachable:NoExecute op=Exists for 300s\nEvents:\n  Type    Reason     Age   From               Message\n  ----    ------     ----  ----               -------\n  Normal  Scheduled  99s   default-scheduler  Successfully assigned opentelemetry/py-otel-server-f89fdbc4f-mtsps to otel-target-allocator-talk-control-plane\n  Normal  Pulling    99s   kubelet            Pulling image \"ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:0.45b0\"\n  Normal  Pulled     93s   kubelet            Successfully pulled image \"ghcr.io/open-telemetry/opentelemetry-operator/autoinstrumentation-python:0.45b0\" in 288.756166ms (5.603779501s including waiting)\n  Normal  Created    93s   kubelet            Created container opentelemetry-auto-instrumentation-python\n  Normal  Started    93s   kubelet            Started container opentelemetry-auto-instrumentation-python\n  Normal  Pulled     92s   kubelet            Container image \"otel-target-allocator-talk:0.1.0-py-otel-server\" already present on machine\n  Normal  Created    92s   kubelet            Created container py-otel-server\n  Normal  Started    92s   kubelet            Started container py-otel-server\n```\n\n----------------------------------------\n\nTITLE: HTML Content Block for KubeCon EU 2025 Event Announcement\nDESCRIPTION: HTML markup that displays the KubeCon Europe 2025 event announcement with event dates, location, and a call to action. The snippet includes Font Awesome icons, responsive design classes, and links to registration and blog pages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/announcements/kubecon-eu.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<i class=\"fas fa-bullhorn\"></i> [**{{% param title %}}**][LF],\n**<span class=\"text-nowrap\">April 1 - 4,</span> London England**.\n<span class=\"d-none d-md-inline\"><br></span> Come [collaborate, learn, and\nshare][blog]<span class=\"d-none d-sm-inline\"> with the Cloud Native\ncommunity</span>!\n\n[LF]:\n  https://events.linuxfoundation.org/kubecon-cloudnativecon-europe/register/?utm_source=opentelemetry&utm_medium=all&utm_campaign=KubeCon-EU-2025&utm_content=slim-banner\n[blog]: /blog/2025/kubecon-eu/\n```\n\n----------------------------------------\n\nTITLE: Installing Development Version of OpenTelemetry Instrumentation\nDESCRIPTION: Command for installing a development version of an instrumentation library from the opentelemetry-python-contrib repository as an editable installation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/libraries.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install -e ./instrumentation/opentelemetry-instrumentation-{integration}\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Frontmatter for OpenTelemetry Announcements\nDESCRIPTION: This snippet shows the frontmatter section for OpenTelemetry announcement posts. It automatically formats the title based on the filename, sets the publication date, and includes an optional expiry date field. The Hugo templating uses date formatting functions to ensure consistent date presentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/archetypes/announcement.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: {{ replaceRE \"[-_]\" \" \" .Name | title }}\ndate: {{ .Date | time.Format \"2006-01-02\" }} # Start date (optional)\nexpiryDate: {{ dateFormat \"2006-01-02\" .Date }} # End date (optional)\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry Documentation Template Variables\nDESCRIPTION: Sets up template variables for language-specific instrumentation data including signal status for traces, metrics and logs. Uses Hugo template syntax to process data and prepare it for documentation rendering.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/languages/index-intro2.md#2025-04-09_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{ $prettier_ignore := `\n\n<!-- prettier-ignore -->\n` -}}\n{{ $lang := .Get 0 -}}\n{{ $data := index $.Site.Data.instrumentation $lang }}\n{{ $name := $data.name -}}\n\n{{ $tracesStatus := partial \"docs/get-signal-status.html\" (dict \"lang\" $lang \"signal\" \"traces\") -}}\n{{ $metricsStatus := partial \"docs/get-signal-status.html\" (dict \"lang\" $lang \"signal\" \"metrics\") -}}\n{{ $logsStatus := partial \"docs/get-signal-status.html\" (dict \"lang\" $lang \"signal\" \"logs\") -}}\n\n{{ $args := dict\n    \"_dot\" .\n    \"_path\" \"index-intro.md\"\n    \"name\" $name\n    \"lang\" $lang\n    \"tracesStatus\" $tracesStatus\n    \"metricsStatus\" $metricsStatus\n    \"logsStatus\" $logsStatus\n    \".Inner\" .Inner\n-}}\n\n{{ partial \"include.md\" $args -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Serverless Framework for AWS Lambda Deployment\nDESCRIPTION: YAML configuration for Serverless Framework to deploy the AWS Lambda function with OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/serverless.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservice: lambda-otel-native\nframeworkVersion: '3'\nprovider:\n  name: aws\n  runtime: nodejs14.x\n  region: '<your-region>'\n  environment:\n    NODE_OPTIONS: --require lambda-wrapper\nfunctions:\n  lambda-otel-test:\n    handler: handler.hello\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom LogRecordProcessor in Java\nDESCRIPTION: Example of implementing a custom LogRecordProcessor interface that adds custom attributes to log records and handles shutdown and flush operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_18\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.common.AttributeKey;\nimport io.opentelemetry.context.Context;\nimport io.opentelemetry.sdk.common.CompletableResultCode;\nimport io.opentelemetry.sdk.logs.LogRecordProcessor;\nimport io.opentelemetry.sdk.logs.ReadWriteLogRecord;\n\npublic class CustomLogRecordProcessor implements LogRecordProcessor {\n\n  @Override\n  public void onEmit(Context context, ReadWriteLogRecord logRecord) {\n    // Callback invoked when log record is emitted.\n    // Enrich the record with a custom attribute.\n    logRecord.setAttribute(AttributeKey.stringKey(\"my.custom.attribute\"), \"hello world\");\n  }\n\n  @Override\n  public CompletableResultCode shutdown() {\n    // Optionally shutdown the processor and cleanup any resources.\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode forceFlush() {\n    // Optionally process any records which have been queued up but not yet processed.\n    return CompletableResultCode.ofSuccess();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Diagrama del flujo de contribución a OpenTelemetry.io\nDESCRIPTION: Diagrama de Mermaid que muestra los pasos principales para contribuir con nuevo contenido al proyecto OpenTelemetry, incluyendo hacer fork del repositorio, escribir contenido, subir cambios, abrir un Pull Request y firmar el CNCF CLA.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    subgraph first[Cómo contribuir]\n    direction TB\n       T[ ] -.-\n       B[Haz un fork al repo de GitHub] --- C[Escribe el nuevo contenido utilizando Markdown<br>y compila la página web en Hugo]\n       C --- D[Sube tus cambios locales al Fork]\n       D --- E[Abre un Pull Request]\n       E --- F[Firma el CNCF CLA]\n    end\n\nclassDef grey fill:#dddddd,stroke:#ffffff,stroke-width:px,color:#000000, font-size:15px;\nclassDef white fill:#ffffff,stroke:#000,stroke-width:px,color:#000,font-weight:bold\nclassDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000\nclass A,B,C,D,E,F,G,H grey\nclass S,T spacewhite\nclass first,second white\n```\n\n----------------------------------------\n\nTITLE: Installing PodMonitor and ServiceMonitor CRDs in Kubernetes\nDESCRIPTION: Commands to install the PodMonitor and ServiceMonitor custom resource definitions in a Kubernetes cluster using kubectl. These CRDs are required when using the Target Allocator with prometheusCR enabled.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-operator-q-and-a/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --context kind-otel-target-allocator-talk apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_servicemonitors.yaml\n\nkubectl --context kind-otel-target-allocator-talk apply -f https://raw.githubusercontent.com/prometheus-operator/prometheus-operator/main/example/prometheus-operator-crd/monitoring.coreos.com_podmonitors.yaml\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Limitations of OpenTelemetry Annotations in Spring\nDESCRIPTION: Illustrates a scenario where the @WithSpan annotation does not work as expected due to Spring AOP proxy limitations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/annotations.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@RestController\npublic class MyControllerManagedBySpring {\n\n    @GetMapping(\"/ping\")\n    public void aMethod() {\n        anotherMethod();\n    }\n\n    @WithSpan\n    public void anotherMethod() {\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing TracerProvider for OpenTelemetry Python\nDESCRIPTION: Sets up a TracerProvider with a BatchSpanProcessor and ConsoleSpanExporter, then sets it as the global default and creates a tracer instance.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import (\n    BatchSpanProcessor,\n    ConsoleSpanExporter,\n)\n\nprovider = TracerProvider()\nprocessor = BatchSpanProcessor(ConsoleSpanExporter())\nprovider.add_span_processor(processor)\n\n# Sets the global default tracer provider\ntrace.set_tracer_provider(provider)\n\n# Creates a tracer from the global tracer provider\ntracer = trace.get_tracer(\"my.tracer.name\")\n```\n\n----------------------------------------\n\nTITLE: Getting Current Span in OpenTelemetry PHP\nDESCRIPTION: Shows how to obtain the current active span using the OpenTelemetry API.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/quote.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$span = Span::getCurrent();\n```\n\n----------------------------------------\n\nTITLE: Initializing TracerProvider and Creating a Tracer\nDESCRIPTION: Code to initialize a TracerProvider with a BatchSpanProcessor and ConsoleSpanExporter, then create a tracer for instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import (\n    BatchSpanProcessor,\n    ConsoleSpanExporter,\n)\n\nprovider = TracerProvider()\nprocessor = BatchSpanProcessor(ConsoleSpanExporter())\nprovider.add_span_processor(processor)\n\n# Define o provedor global padrão de rastreador\ntrace.set_tracer_provider(provider)\n\n# Cria um rastreador a partir do provedor global de rastreador\ntracer = trace.get_tracer(\"meu.rastreador.nome\")\n```\n\n----------------------------------------\n\nTITLE: Generating OpenTelemetry Status Table with Hugo Templates\nDESCRIPTION: Hugo template code that creates a markdown table showing instrumentation status for different programming languages. Uses site data to dynamically populate the status for each language based on a provided signal parameter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/signal-support-table.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ $data := $.Site.Data.instrumentation }}\n{{ $signal := .Get 0 -}}\n\nLanguage | {{ humanize $signal }} |\n| --- | --- |\n| [C++](/docs/languages/cpp/) | {{ index $data.cpp.status $signal | humanize }} |\n| [C#/.NET](/docs/languages/dotnet/) | {{ index $data.dotnet.status $signal | humanize }} |\n| [Erlang/Elixir](/docs/languages/erlang/) | {{ index $data.erlang.status $signal | humanize }} |\n| [Go](/docs/languages/go/) | {{ index $data.go.status $signal | humanize }} |\n| [Java](/docs/languages/java/) | {{ index $data.java.status $signal | humanize }} |\n| [JavaScript](/docs/languages/js/) | {{ index $data.js.status $signal | humanize }} |\n| [PHP](/docs/languages/php/) | {{ index $data.php.status $signal | humanize }} |\n| [Python](/docs/languages/python/) | {{index $data.python.status $signal | humanize }} |\n| [Ruby](/docs/languages/ruby/) | {{ index $data.ruby.status $signal | humanize }} |\n| [Rust](/docs/languages/rust/) | {{ index $data.rust.status $signal | humanize }} |\n| [Swift](/docs/languages/swift/) | {{ index $data.swift.status $signal | humanize }} |\n```\n\n----------------------------------------\n\nTITLE: Handling Baggage in OpenTelemetry\nDESCRIPTION: Demonstrates checking OpenTelemetry baggage for synthetic requests and setting appropriate span attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/payment.md#2025-04-09_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// check baggage for synthetic_request=true, and add charged attribute accordingly\nconst baggage = propagation.getBaggage(context.active());\nif (\n  baggage &&\n  baggage.getEntry('synthetic_request') &&\n  baggage.getEntry('synthetic_request').value == 'true'\n) {\n  span.setAttribute('app.payment.charged', false);\n} else {\n  span.setAttribute('app.payment.charged', true);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Drift Status to Localized Pages\nDESCRIPTION: Command to add the drifted_from_default field to localized pages that have drifted from their English counterparts, used for displaying warning banners.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm run fix:i18n:status\n```\n\n----------------------------------------\n\nTITLE: Setting Up Oat++ and OpenTelemetry C++ Dependencies\nDESCRIPTION: Commands to clone, build, and install Oat++ and OpenTelemetry C++ libraries using Git, CMake, and Make.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/oatpp/oatpp.git\ncd oatpp\ngit checkout 1.3.0-latest\nmkdir build\ncd build\ncmake ..\nmake\nsudo make install\n\ncd ../../\ngit clone https://github.com/open-telemetry/opentelemetry-cpp.git\ncd opentelemetry-cpp\nmkdir build\ncd build\ncmake -DBUILD_TESTING=OFF ..\ncmake --build .\ncmake --install . --prefix ../../otel-cpp\n```\n\n----------------------------------------\n\nTITLE: Configuring Collector Endpoint URL in Kubernetes\nDESCRIPTION: Example of an OpenTelemetry Collector endpoint URL configuration for Kubernetes service discovery. Shows the proper format including service name, namespace, and port specification.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_9\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://otel-collector.opentelemetry.svc.cluster.local:4318\n```\n\n----------------------------------------\n\nTITLE: Listing Localized Pages with Missing Commit Hashes\nDESCRIPTION: Command to identify localized pages that are missing the default_lang_commit field in their front matter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm run check:i18n -- -n\n```\n\n----------------------------------------\n\nTITLE: JavaScript for Local Timezone Conversion\nDESCRIPTION: A client-side script that converts the build timestamp to the user's local timezone. It runs when the DOM is loaded and updates a span element with the formatted local time.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/site-build-info.md#2025-04-09_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n  var options = { hour: '2-digit', hour12: false, minute: '2-digit', timeZoneName: 'short' };\n  var buildDate = new Date(\"{{ $now.Format \\\"2006-01-02T15:04:05Z07:00\\\" }}\");\n  document.getElementById(\"local-time\").innerText = buildDate.toLocaleString(undefined, options);\n});\n</script>\n```\n\n----------------------------------------\n\nTITLE: Implementing AWS Lambda Function Handler\nDESCRIPTION: JavaScript code for a simple AWS Lambda function handler that makes an HTTPS request to opentelemetry.io and returns the status code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/serverless.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/* handler.js */\n\n'use strict';\n\nconst https = require('https');\n\nfunction getRequest() {\n  const url = 'https://opentelemetry.io/';\n\n  return new Promise((resolve, reject) => {\n    const req = https.get(url, (res) => {\n      resolve(res.statusCode);\n    });\n\n    req.on('error', (err) => {\n      reject(new Error(err));\n    });\n  });\n}\n\nexports.handler = async (event) => {\n  try {\n    const result = await getRequest();\n    return {\n      statusCode: result,\n    };\n  } catch (error) {\n    return {\n      statusCode: 400,\n      body: error.message,\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Express Application in JavaScript\nDESCRIPTION: Sets up a basic Express web server in JavaScript with a '/rolldice' endpoint that returns a random number between 1 and 6.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n/*app.js*/\nconst express = require('express');\n\nconst PORT = parseInt(process.env.PORT || '8080');\nconst app = express();\n\nfunction getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\napp.get('/rolldice', (req, res) => {\n  res.send(getRandomNumber(1, 6).toString());\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration for OpenTelemetry Homepage\nDESCRIPTION: Defines the page metadata and output formats for the OpenTelemetry homepage, including title, description, and build outputs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: OpenTelemetry\ndescription: >\n  High-quality, ubiquitous, and portable telemetry to enable effective\n  observability\noutputs:\n  - HTML\n  # Include the following for `content/en` ONLY\n  - REDIRECTS\n  - RSS\ndeveloper_note:\n  The blocks/cover shortcode (used below) will use as a background image any\n  image file containing \"background\" in its name.\nshow_banner: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring OTel-Arrow Exporter in YAML\nDESCRIPTION: This YAML configuration snippet demonstrates how to set up the OTel-Arrow exporter in an OpenTelemetry Collector. It specifies the endpoint, TLS settings, and Arrow-specific parameters such as the number of streams.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-arrow-production/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otelarrow:\n    endpoint: collector.local:4317\n    tls:\n      insecure: true\n    arrow:\n      num_streams: 1\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for OpenTelemetry Documentation Page\nDESCRIPTION: This YAML frontmatter defines metadata for the OpenTelemetry documentation page, including title, link title, menu position, and default language commit reference.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Documentación\nlinkTitle: Docs\nmenu: { main: { weight: 10 } }\ndefault_lang_commit: f7cb8b65a478450d80d703b34c8473c579702108\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes During Span Creation in JavaScript with OpenTelemetry\nDESCRIPTION: JavaScript example of setting span attributes during creation. The attribute 'dicelib.rolls' is set to the number of rolls passed to the function.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nfunction rollTheDice(rolls, min, max) {\n  return tracer.startActiveSpan(\n    'rollTheDice',\n    { attributes: { 'dicelib.rolls': rolls.toString() } },\n    (span) => {\n      /* ... */\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Spans in Ruby with OpenTelemetry\nDESCRIPTION: Create a new span using the in_span method provided by OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\ndef do_work\n  MyAppTracer.in_span(\"do_work\") do |span|\n    # do some work that the 'do_work' span tracks!\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: OTLP Metrics Translation Implementation in Go\nDESCRIPTION: Code reference showing the implementation of metrics translation to OTLP format in Cloud Foundry's Forwarder Agent, requiring approximately 200 lines of Go code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/cloud-foundry.md#2025-04-09_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npkg/otelcolclient/otelcolclient.go#L108-L153\n```\n\n----------------------------------------\n\nTITLE: Generating URL Aliases with Relative Path Resolution in Hugo Templates\nDESCRIPTION: This Hugo template code generates redirect rules from page aliases. It processes each alias in the page's 'Aliases' parameter, properly handling both absolute paths (starting with '/') and relative paths. For relative paths, it uses a recursive partial to resolve the final URL based on the current page's position in the site hierarchy.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/redirects/aliases.txt#2025-04-09_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{/* Generate rules for `aliases` page param. */ -}}\n{{/* cSpell:ignore cond */ -}}\n\n{{ $p := . -}}\n{{ range $alias := $p.Aliases -}}\n  {{ if not (strings.HasPrefix $alias \"/\") -}}\n    {{ $alias = partial \"relative-redirects-alias\"\n        (dict\n          \"alias\" $alias\n          \"p\" (cond (strings.HasPrefix $alias \"./\") $p $p.Parent)\n        ) -}}\n  {{ end -}}\n  {{ $alias | printf \"%-35s\" }} {{ $p.RelPermalink }}\n{{ end -}}\n\n{{- define \"partials/relative-redirects-alias\" -}}\n  {{ $result := \"\" }}\n  {{ if strings.HasPrefix .alias \"../\" }}\n    {{ $result = (partial \"relative-redirects-alias\"\n          (dict\n            \"alias\" (strings.TrimPrefix \"../\" .alias)\n            \"p\" .p.Parent ))\n    }}\n  {{ else }}\n    {{ $result = path.Join .p.RelPermalink .alias }}\n  {{ end }}\n  {{ return $result }}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Running Instrumented JavaScript Application\nDESCRIPTION: Command to run an instrumented JavaScript application that utilizes OpenTelemetry for tracing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode --require ./instrumentation.js app.js\n```\n\n----------------------------------------\n\nTITLE: Advanced @WithSpan Usage with Parameters\nDESCRIPTION: Example showing @WithSpan annotation usage with custom parameters including span name, kind, and context inheritance settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/annotations.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@WithSpan(kind = SpanKind.CLIENT, inheritContext = false, value = \"my span name\")\npublic void myMethod() {\n    <...>\n}\n\n@WithSpan(\"my span name\")\npublic void myOtherMethod() {\n    <...>\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Tracing in Envoy Frontend Proxy\nDESCRIPTION: YAML configuration for enabling OpenTelemetry tracing in Envoy when serving as a frontend proxy. The configuration defines listeners and clusters, including the connection to the OpenTelemetry collector. Environment variables OTEL_COLLECTOR_HOST, OTEL_COLLECTOR_PORT, and ENVOY_PORT must be provided.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/frontend-proxy.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nstatic_resources:\n  listeners:\n    - address:\n        socket_address:\n          address: 0.0.0.0\n          port_value: ${ENVOY_PORT}\n      filter_chains:\n        - filters:\n            - name: envoy.filters.network.http_connection_manager\n              typed_config:\n                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\n                codec_type: AUTO\n                stat_prefix: ingress_http\n                tracing:\n                  provider:\n                    name: envoy.tracers.opentelemetry\n                    typed_config:\n                      '@type': type.googleapis.com/envoy.config.trace.v3.OpenTelemetryConfig\n                      grpc_service:\n                        envoy_grpc:\n                          cluster_name: opentelemetry_collector\n                        timeout: 0.250s\n                      service_name: frontend-proxy\n\n  clusters:\n    - name: opentelemetry_collector\n      type: STRICT_DNS\n      lb_policy: ROUND_ROBIN\n      typed_extension_protocol_options:\n        envoy.extensions.upstreams.http.v3.HttpProtocolOptions:\n          '@type': type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions\n          explicit_http_config:\n            http2_protocol_options: {}\n      load_assignment:\n        cluster_name: opentelemetry_collector\n        endpoints:\n          - lb_endpoints:\n              - endpoint:\n                  address:\n                    socket_address:\n                      address: ${OTEL_COLLECTOR_HOST}\n                      port_value: ${OTEL_COLLECTOR_PORT}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Java Agent for Kafka\nDESCRIPTION: Sets up the OpenTelemetry Java agent for Kafka broker instrumentation using environment variables. The configuration enables JMX metrics collection for Kafka broker monitoring via OTLP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/kafka.md#2025-04-09_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nENV KAFKA_OPTS=\"-javaagent:/tmp/opentelemetry-javaagent.jar -Dotel.jmx.target.system=kafka-broker\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up og:image Redirect in Hugo\nDESCRIPTION: This snippet creates a redirect from an old homepage og:image URL to the current one. It uses Hugo's template syntax to define the redirect rule.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/redirects/social-media.txt#2025-04-09_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n/featured-background.jpg  {{ $og_image_current -}}\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for OpenTelemetry PHP Registry Page\nDESCRIPTION: This YAML frontmatter defines metadata for the OpenTelemetry PHP Registry page, including title, description, redirect URL, build instructions, and weight for sorting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Instrumentation libraries, exporters and other useful components for\n  OpenTelemetry PHP\nredirect: /ecosystem/registry/?language=php\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Package Dependencies for Google Cloud Functions\nDESCRIPTION: JSON configuration for package.json to include necessary OpenTelemetry dependencies for Google Cloud Functions instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/serverless.md#2025-04-09_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"@google-cloud/functions-framework\": \"^3.0.0\",\n    \"@opentelemetry/api\": \"^1.9.0\",\n    \"@opentelemetry/auto-instrumentations-node\": \"^0.56.1\",\n    \"@opentelemetry/exporter-trace-otlp-http\": \"^0.200.0\",\n    \"@opentelemetry/instrumentation\": \"^0.200.0\",\n    \"@opentelemetry/sdk-trace-base\": \"^2.0.0\",\n    \"@opentelemetry/sdk-trace-node\": \"^2.0.0\",\n    \"@opentelemetry/resources\": \"^2.0.0\",\n    \"@opentelemetry/semantic-conventions\": \"^2.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Exporters on Windows\nDESCRIPTION: This PowerShell script sets up environment variables for OpenTelemetry exporters and registers the OpenTelemetry session for the current Windows session.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: powershell\nCODE:\n```\n$env:OTEL_TRACES_EXPORTER=\"console\"\n$env:OTEL_METRICS_EXPORTER=\"console\"\n$env:OTEL_LOGS_EXPORTER=\"console\"\nRegister-OpenTelemetryForCurrentSession -OTelServiceName \"RollDiceService\"\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Spring Boot Starter Dependency\nDESCRIPTION: Maven dependency configuration to add OpenTelemetry Spring Boot Starter to a project. This enables OTLP exports of logs, spans and metrics with auto-instrumentation for Spring HTTP frameworks.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/spring-native/index.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-spring-boot-starter</artifactId>\n    <version>1.32.0-alpha</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Continuing Git Rebase After Resolving Conflicts\nDESCRIPTION: Git command to continue the rebase process after resolving merge conflicts. This tells Git to proceed with applying the remaining commits in the rebase operation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ngit rebase --continue\n```\n\n----------------------------------------\n\nTITLE: Installing Grafana Ansible Collection\nDESCRIPTION: Command to install the Grafana Ansible collection which provides the OpenTelemetry Collector role\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/scaling-collectors.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nansible-galaxy collection install grafana.grafana\n```\n\n----------------------------------------\n\nTITLE: Referencing OpenTelemetry JavaScript Repository\nDESCRIPTION: A markdown link to the OpenTelemetry JavaScript GitHub repository, mentioned by Purvi Kanal when discussing her involvement with OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/humans-of-otel.md#2025-04-09_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[OpenTelemetry JavaScript](https://github.com/open-telemetry/opentelemetry-js)\n```\n\n----------------------------------------\n\nTITLE: CRI Partial Log Format Example\nDESCRIPTION: Example showing how CRI format can provide partial logs that need to be combined into a single log entry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-collector-container-log-parser/index.md#2025-04-09_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2024-04-06T00:17:10.113242941Z stdout P This is a very very long line th\n2024-04-06T00:17:10.113242941Z stdout P at is really, really, long and spa\n2024-04-06T00:17:10.113242941Z stdout F ns across multiple log entries\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spans with Context Manager\nDESCRIPTION: Example showing how to create spans using the context manager pattern, which automatically handles span closure when exiting the scope.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef fazer_trabalho():\n    with tracer.start_as_current_span(\"nome-do-trecho\") as span:\n        # faça algum trabalho que 'span' irá rastrear\n        print(\"fazendo algum trabalho...\")\n        # Quando o bloco 'with' sair do escopo, 'span' será fechado para você\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Properties\nDESCRIPTION: Example of configuring OpenTelemetry properties using application.properties file to set propagators and resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/sdk-configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: properties\nCODE:\n```\notel.propagators=tracecontext,b3\notel.resource.attributes.deployment.environment=dev\notel.resource.attributes.service.name=cart\notel.resource.attributes.service.namespace=shop\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for OpenTelemetry Rust Registry Page\nDESCRIPTION: This YAML snippet defines the frontmatter for a page about the OpenTelemetry Rust registry. It specifies the title, description, redirect URL, build settings, and weight for page ordering.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Instrumentation libraries, exporters and other useful components for\n  OpenTelemetry Rust\nredirect: /ecosystem/registry/?language=rust\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Adding default_lang_commit to New Localized Pages\nDESCRIPTION: Commands to automatically add the default_lang_commit field to localized page front matter, specifying either a specific commit hash or HEAD.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run check:i18n -- -n -c 1ca30b4d content/ja\nnpm run check:i18n -- -n -c HEAD content/zh/docs/concepts\n```\n\n----------------------------------------\n\nTITLE: Basic @WithSpan Usage in Java\nDESCRIPTION: Simple example of using @WithSpan annotation to create a span around a method. The span will automatically track method duration and exceptions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/annotations.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport io.opentelemetry.instrumentation.annotations.WithSpan;\n\npublic class MyClass {\n  @WithSpan\n  public void myMethod() {\n      <...>\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry with UV Package Manager\nDESCRIPTION: Commands for installing and configuring OpenTelemetry using the UV package manager instead of pip\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nuv pip install opentelemetry-distro opentelemetry-exporter-otlp\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Extension on CentOS 7 (RPM)\nDESCRIPTION: Shell commands to install the OpenTelemetry extension on CentOS 7 using RPM packages from the Remi repository.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/php.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nyum update -y\nyum install -y epel-release yum-utils\nyum install -y http://rpms.remirepo.net/enterprise/remi-release-7.rpm\nyum-config-manager --enable remi-php81\nyum install -y php php-pecl-opentelemetry\n\nphp --ri opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Language Version Notice in HTML with Font Awesome Icon\nDESCRIPTION: This snippet displays a notice to users that they are viewing the English version of the page because it hasn't been fully translated, with a font awesome information icon. It includes a link to the contribution documentation for those interested in helping with translation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/_includes/page-not-translated-msg.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<i class=\"fa-solid fa-circle-info\" style=\"margin-left: -1.5rem\"></i> You are\nviewing the **English version** of this page because it has not yet been fully\ntranslated. Interested in helping out? See [Contributing](/docs/contributing/).\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Java Agent for Kafka\nDESCRIPTION: Environment variable configuration for attaching OpenTelemetry Java agent to Kafka broker with Prometheus exporter settings\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport KAFKA_OPTS=\"-Dapplication.name=my-kafka-app\\n-Dotel.metrics.exporter=prometheus\\n-Dotel.exporter.prometheus.port=9464\\n-Dotel.service.name=my-kafka-broker\\n-Dotel.jmx.target.system=kafka-broker\\n-javaagent:/path/to/opentelemetry-javaagent.jar\"\n```\n\n----------------------------------------\n\nTITLE: Configuring ContextPropagators with W3C Trace and Baggage in Java\nDESCRIPTION: This snippet demonstrates how to programmatically configure TextMapPropagator using W3CTraceContextPropagator and W3CBaggagePropagator for context propagation in OpenTelemetry Java.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_22\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.baggage.propagation.W3CBaggagePropagator;\nimport io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\nimport io.opentelemetry.context.propagation.ContextPropagators;\nimport io.opentelemetry.context.propagation.TextMapPropagator;\n\npublic class ContextPropagatorsConfig {\n  public static ContextPropagators create() {\n    return ContextPropagators.create(\n        TextMapPropagator.composite(\n            W3CTraceContextPropagator.getInstance(), W3CBaggagePropagator.getInstance()));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prometheus Backend Error Message\nDESCRIPTION: Example error message from a Prometheus backend indicating out-of-order sample ingestion, which may occur when identical targets exist in multiple jobs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/gateway/index.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nError on ingesting out-of-order samples\n```\n\n----------------------------------------\n\nTITLE: Running Grafana Docker Container\nDESCRIPTION: Docker command to start a Grafana server instance\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/scaling-collectors.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -d -p 3000:3000 --name=grafana grafana/grafana\n```\n\n----------------------------------------\n\nTITLE: Activating a Context in PHP\nDESCRIPTION: Demonstrates how to activate a context using OpenTelemetry's Context API. Activating a context makes it the current active context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/context.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse OpenTelemetry\\Context\\Context;\n\n$key = Context::createKey('my-key');\n$ctx = Context::getCurrent();\n$ctx2 = $ctx->with($key, 'context 2');\n$ctx2->activate();\nassert($ctx2 === Context::getCurrent());\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Telemetry Endpoint\nDESCRIPTION: YAML configuration for setting up the browser telemetry collector endpoint environment variable.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ncomponents:\n  frontend:\n    envOverrides:\n      - name: PUBLIC_OTEL_EXPORTER_OTLP_TRACES_ENDPOINT\n        value: http://otel-demo.my-domain.com/otlp-http/v1/traces\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector using Kubernetes YAML\nDESCRIPTION: This snippet creates an OpenTelemetryCollector resource that deploys a Collector as a deployment with OTLP receivers for both gRPC and HTTP protocols. The Collector processes and exports traces, metrics, and logs through memory limiter and batch processors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nkubectl apply -f - <<EOF\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: demo\nspec:\n  config: |\n    receivers:\n      otlp:\n        protocols:\n          grpc:\n            endpoint: 0.0.0.0:4317\n          http:\n            endpoint: 0.0.0.0:4318\n    processors:\n      memory_limiter:\n        check_interval: 1s\n        limit_percentage: 75\n        spike_limit_percentage: 15\n      batch:\n        send_batch_size: 10000\n        timeout: 10s\n\n    exporters:\n      # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n      debug:\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp]\n          processors: [memory_limiter, batch]\n          exporters: [debug]\n        metrics:\n          receivers: [otlp]\n          processors: [memory_limiter, batch]\n          exporters: [debug]\n        logs:\n          receivers: [otlp]\n          processors: [memory_limiter, batch]\n          exporters: [debug]\nEOF\n```\n\n----------------------------------------\n\nTITLE: Defining Current og:image Path in Hugo\nDESCRIPTION: This snippet defines a variable for the current og:image path used for social media sharing. It uses Hugo's template syntax to set a string value.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/redirects/social-media.txt#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $og_image_current := `/img/social/logo-wordmark-001.png` -}}\n```\n\n----------------------------------------\n\nTITLE: Recording Measurements with Attributes in OpenTelemetry Java Metrics\nDESCRIPTION: This code demonstrates how to record a measurement to a histogram instrument with HTTP-related attributes. It shows the optimized pattern of pre-defining attribute keys as constants and using a helper function to create attribute sets.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/java-metric-systems-compared/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n// Record a measurement\nhistogram.record(7.2, httpAttributes(\"PUT\", \"/users/{id}\", 200));\n\n// Helper constants\nprivate static final AttributeKey<String> HTTP_REQUEST_METHOD = AttributeKey.stringKey(\"http.request.method\");\nprivate static final AttributeKey<String> HTTP_ROUTE = AttributeKey.stringKey(\"http.route\");\nprivate static final AttributeKey<String> HTTP_RESPONSE_STATUS_CODE = AttributeKey.stringKey(\"http.response.status_code\");\n\n// Helper function\nprivate static Attributes httpAttributes(String method, String route, int responseStatusCode) {\n  return Attributes.of(\n    HTTP_REQUEST_METHOD, method,\n    HTTP_ROUTE, route,\n    HTTP_RESPONSE_STATUS_CODE, responseStatusCode);\n```\n\n----------------------------------------\n\nTITLE: Starting OpenTelemetry Collector\nDESCRIPTION: Docker command to run the OpenTelemetry Collector with a custom configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/logs-example.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -it --rm -p 4317:4317 -p 4318:4318 \\\n  -v $(pwd)/otel-collector-config.yaml:/etc/otelcol-config.yml \\\n  --name otelcol \\\n  otel/opentelemetry-collector-contrib:0.76.1 \\\n  \"--config=/etc/otelcol-config.yml\"\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Extensions in Python\nDESCRIPTION: Commands for installing additional OpenTelemetry exporters and instrumentations using pip. Replace {exporter} and {instrumentation} with specific package names.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-exporter-{exporter}\npip install opentelemetry-instrumentation-{instrumentation}\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Extension in Maven\nDESCRIPTION: Adds the Quarkus OpenTelemetry extension as a dependency in a Maven project. This extension provides out-of-the-box instrumentation, SDK autoconfiguration, and OTLP exporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/quarkus.md#2025-04-09_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>io.quarkus</groupId>\n    <artifactId>quarkus-opentelemetry</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Python Code for OpenAI API Interaction with OpenTelemetry\nDESCRIPTION: A simple Python example showing how to use the OpenAI client to generate a response, which will be automatically instrumented by OpenTelemetry when run with the appropriate command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-generative-ai/index.md#2025-04-09_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom openai import OpenAI\n\nclient = OpenAI()\nchat_completion = client.chat.completions.create(\n    model=os.getenv(\"CHAT_MODEL\", \"gpt-4o-mini\"),\n    messages=[\n        {\n            \"role\": \"user\",\n            \"content\": \"Write a short poem on OpenTelemetry.\",\n        },\n    ],\n)\nprint(chat_completion.choices[0].message.content)\n```\n\n----------------------------------------\n\nTITLE: Dice Rolling Library with OpenTelemetry Tracing in JavaScript\nDESCRIPTION: JavaScript code for a dice rolling library that uses OpenTelemetry for tracing. It demonstrates acquiring a tracer in a library context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*dice.js*/\nconst { trace } = require('@opentelemetry/api');\n\nconst tracer = trace.getTracer('dice-lib');\n\nfunction rollOnce(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction rollTheDice(rolls, min, max) {\n  const result = [];\n  for (let i = 0; i < rolls; i++) {\n    result.push(rollOnce(min, max));\n  }\n  return result;\n}\n\nmodule.exports = { rollTheDice };\n```\n\n----------------------------------------\n\nTITLE: Dice Rolling Library with OpenTelemetry Tracing in JavaScript\nDESCRIPTION: JavaScript code for a dice rolling library that uses OpenTelemetry for tracing. It demonstrates acquiring a tracer in a library context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n/*dice.js*/\nconst { trace } = require('@opentelemetry/api');\n\nconst tracer = trace.getTracer('dice-lib');\n\nfunction rollOnce(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction rollTheDice(rolls, min, max) {\n  const result = [];\n  for (let i = 0; i < rolls; i++) {\n    result.push(rollOnce(min, max));\n  }\n  return result;\n}\n\nmodule.exports = { rollTheDice };\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Instrumentation in TypeScript\nDESCRIPTION: TypeScript code for setting up a custom instrumentation configuration with span processors. This example creates a NodeSDK with a SimpleSpanProcessor attached to a custom exporter and Node.js auto-instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\nimport * as opentelemetry from '@opentelemetry/sdk-node';\nimport { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';\n\nconst sdk = new NodeSDK({\n  spanProcessors: [new SimpleSpanProcessor(exporter)],\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n```\n\n----------------------------------------\n\nTITLE: Running Trace Testing with Docker Compose\nDESCRIPTION: Docker Compose command to run trace-based tests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker-compose-tests.yml run traceBasedTests\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex SQL Query with OpenTelemetry Instrumentation in Go\nDESCRIPTION: This code snippet demonstrates how to implement a more complex SQL query scenario using otelsql. It includes creating a parent span, executing a slow query, and handling errors with OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc runSQLQuery(ctx context.Context, db *sql.DB) error {\n    // Create a parent span (Optional)\n    tracer := otel.GetTracerProvider()\n    ctx, span := tracer.Tracer(instrumentationName).Start(ctx, \"example\")\n    defer span.End()\n\n    runSlowSQLQuery(ctx, db)\n\n    err := query(ctx, db)\n    if err != nil {\n        span.RecordError(err)\n        return err\n    }\n    return nil\n}\n\nfunc runSlowSQLQuery(ctx context.Context, db *sql.DB) {\n    db.QueryContext(ctx, `SELECT SLEEP(1)`)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter in ASP.NET Core\nDESCRIPTION: Configure the OTLP exporter for tracing, metrics, and logging in an ASP.NET Core application using default settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n    .WithTracing(tracing => tracing\n        // The rest of your setup code goes here\n        .AddOtlpExporter())\n    .WithMetrics(metrics => metrics\n        // The rest of your setup code goes here\n        .AddOtlpExporter());\n\nbuilder.Logging.AddOpenTelemetry(logging => {\n    // The rest of your setup code goes here\n    logging.AddOtlpExporter();\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Transform Processor Configuration for Resource Attributes\nDESCRIPTION: This YAML configuration extends the Transform Processor to create resource attributes from data point attributes and then remove them from the data point.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  transform:\n    metric_statements:\n      - context: datapoint\n        statements:\n          - set(metric.unit, attributes[\"unit\"])\n          - set(resource.attributes[\"service.name\"], attributes[\"service.name\"])\n          - set(resource.attributes[\"service.namespace\"],\n            attributes[\"service.namespace\"])\n          - delete_key(attributes, \"unit\")\n          - delete_key(attributes, \"service.name\")\n          - delete_key(attributes, \"service.namespace\")\n```\n\n----------------------------------------\n\nTITLE: Obtaining OpenTelemetry Tracer Instance\nDESCRIPTION: Shows how to obtain a tracer from the global tracer provider for manual instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/quote.md#2025-04-09_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$tracer = Globals::tracerProvider()->getTracer('manual-instrumentation');\n```\n\n----------------------------------------\n\nTITLE: Starting Container for Package Extraction\nDESCRIPTION: Command to start a Docker container from the built image to extract the OpenTelemetry module package for Apache HTTP Server.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -idt --name <container_name> apache_centos7 /bin/bash\n```\n\n----------------------------------------\n\nTITLE: Installing Flask\nDESCRIPTION: Installs the Flask web framework using pip.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install flask\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry from Source\nDESCRIPTION: Commands for installing cutting-edge OpenTelemetry packages directly from the GitHub repository using pip's editable install feature.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/_index.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-python.git\ncd opentelemetry-python\npip install -e ./opentelemetry-api -e ./opentelemetry-sdk -e ./opentelemetry-semantic-conventions\n```\n\n----------------------------------------\n\nTITLE: Enabling Metrics and Logs in OpenTelemetry Configuration\nDESCRIPTION: Configures application.properties to enable metrics and logs signals in Quarkus OpenTelemetry. By default, only tracing is enabled, and this configuration activates the additional telemetry signals.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/quarkus.md#2025-04-09_snippet_2\n\nLANGUAGE: Properties\nCODE:\n```\nquarkus.otel.metrics.enabled=true\nquarkus.otel.logs.enabled=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Content Capture for Generative AI Messages\nDESCRIPTION: Environment variable setting to enable the capture of message content (prompts and responses) as OpenTelemetry events for debugging AI applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-generative-ai/index.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_INSTRUMENTATION_GENAI_CAPTURE_MESSAGE_CONTENT=True\n```\n\n----------------------------------------\n\nTITLE: Installing Express Dependencies for JavaScript\nDESCRIPTION: Installs Express web framework for a Node.js application using JavaScript.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Aggregated Metrics Output Example in Text Format\nDESCRIPTION: This snippet shows an example of how aggregated metrics for HTTP server request durations might be encoded in a simple text format. It demonstrates the structure of the metric data, including attributes and histogram values for different request scenarios.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/java-metric-systems-compared/index.md#2025-04-09_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n2024-05-20T18:05:57Z: http.server.request.duration:\n  attributes: {\"http.request.method\":\"GET\",\"http.route\":\"/users/{id}\",\"http.response.status_code\":200}\n  value: {\"count\":3,\"sum\":22.0,\"min\":4.0,\"max\":11.0,\"buckets\":[[1.0,0],[5.0,1],[10.0,1]]}\n\n  attributes: {\"http.request.method\":\"GET\",\"http.route\":\"/users/{id}\",\"http.response.status_code\":404}\n  value: {\"count\":1,\"sum\":6.0,\"min\":6.0,\"max\":6.0,\"buckets\":[[1.0,0],[5.0,0],[10.0,1]]}\n\n  attributes: {\"http.request.method\":\"GET\",\"http.route\":\"/users\",\"http.response.status_code\":200}\n  value: {\"count\":1,\"sum\":22.0,\"min\":22.0,\"max\":22.0,\"buckets\":[[1.0,0],[5.0,0],[10.0,0]]}\n\n  attributes: {\"http.request.method\":\"PUT\",\"http.route\":\"/users/{id}\",\"http.response.status_code\":200}\n  value: {\"count\":2,\"sum\":13.4,\"min\":6.2,\"max\":7.2,\"buckets\":[[1.0,0],[5.0,0],[10.0,2]]}\n```\n\n----------------------------------------\n\nTITLE: Setting GOBIN Environment Variable in Bash\nDESCRIPTION: Command to initialize the GOBIN environment variable if not already set, using Go's environment path. This is a prerequisite for installing and running the telemetrygen utility.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/quick-start.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport GOBIN=${GOBIN:-$(go env GOPATH)/bin}\n```\n\n----------------------------------------\n\nTITLE: Checking Git Status After Rebasing\nDESCRIPTION: Git command to inspect the status of files after rebasing, which helps identify conflicts that need resolution. This shows which files have merge conflicts that need to be manually addressed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Creating Spans and Events in Erlang\nDESCRIPTION: Demonstrates how to create spans, add events and attributes to spans, and create child spans in Erlang using OpenTelemetry macros.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_11\n\nLANGUAGE: erlang\nCODE:\n```\n%% apps/otel_getting_started/src/otel_getting_started.erl\n-module(otel_getting_started).\n\n-export([hello/0]).\n\n-include_lib(\"opentelemetry_api/include/otel_tracer.hrl\").\n\nhello() ->\n    %% start an active span and run a local function\n    ?with_span(operation, #{}, fun nice_operation/1).\n\nnice_operation(_SpanCtx) ->\n    ?add_event(<<\"Nice operation!\">>, [{<<\"bogons\">>, 100}]),\n    ?set_attributes([{another_key, <<\"yes\">>}]),\n\n    %% start an active span and run an anonymous function\n    ?with_span(<<\"Sub operation...\">>, #{},\n               fun(_ChildSpanCtx) ->\n                       ?set_attributes([{lemons_key, <<\"five\">>}]),\n                       ?add_event(<<\"Sub span event!\">>, [])\n               end).\n```\n\n----------------------------------------\n\nTITLE: Viewing Detailed Diff of Changed English Pages\nDESCRIPTION: Command to see the specific differences between current English pages and the versions that localized pages were based on, using the -d flag.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n$ npm run check:i18n -- -d content/zh/docs/platforms/kubernetes\ndiff --git a/content/en/docs/platforms/kubernetes/_index.md b/content/en/docs/platforms/kubernetes/_index.md\nindex 3592df5d..c7980653 100644\n--- a/content/en/docs/platforms/kubernetes/_index.md\n+++ b/content/en/docs/platforms/kubernetes/_index.md\n@@ -1,7 +1,7 @@\n ---\n title: OpenTelemetry with Kubernetes\n linkTitle: Kubernetes\n-weight: 11\n+weight: 350\n description: Using OpenTelemetry with Kubernetes\n ---\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Bootstrap Command\nDESCRIPTION: This command runs the OpenTelemetry bootstrap to install instrumentation packages automatically based on the installed libraries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nopentelemetry-bootstrap -a install\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry SDK and Instrumentation Packages\nDESCRIPTION: Command to add the OpenTelemetry SDK and comprehensive instrumentation packages to the application using Bundler.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nbundle add opentelemetry-sdk opentelemetry-instrumentation-all\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry BOM with Gradle Native BOM Support\nDESCRIPTION: This snippet shows how to import the OpenTelemetry Instrumentation BOM using Gradle's native BOM support with the platform dependency approach. It ensures proper version alignment when using Spring Boot.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimport org.springframework.boot.gradle.plugin.SpringBootPlugin\n\nplugins {\n  id(\"java\")\n  id(\"org.springframework.boot\") version \"3.2.O\"\n}\n\ndependencies {\n  implementation(platform(SpringBootPlugin.BOM_COORDINATES))\n  implementation(platform(\"io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:{{% param vers.instrumentation %}}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying HTTP Request Duration Metrics with OpenTelemetry\nDESCRIPTION: An example of HTTP request duration metrics captured by OpenTelemetry collector from a Spring Boot application. The metrics include histogram data points with attributes like HTTP method, status code, and route, showing both successful (200) and error (500) responses.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_13\n\nLANGUAGE: ignorelang\nCODE:\n```\ncollector-1  | Metric #0\ncollector-1  | Descriptor:\ncollector-1  |      -> Name: http.server.request.duration\ncollector-1  |      -> Description: Duration of HTTP server requests.\ncollector-1  |      -> Unit: s\ncollector-1  |      -> DataType: Histogram\ncollector-1  |      -> AggregationTemporality: Cumulative\ncollector-1  | HistogramDataPoints #0\ncollector-1  | Data point attributes:\ncollector-1  |      -> http.request.method: Str(GET)\ncollector-1  |      -> http.response.status_code: Int(200)\ncollector-1  |      -> http.route: Str(/vets.html)\ncollector-1  |      -> network.protocol.version: Str(1.1)\ncollector-1  |      -> url.scheme: Str(http)\ncollector-1  | StartTimestamp: 2024-09-16 12:39:20.97871 +0000 UTC\ncollector-1  | Timestamp: 2024-09-16 13:10:20.892779 +0000 UTC\ncollector-1  | Count: 1\ncollector-1  | Sum: 0.035795\ncollector-1  | Min: 0.035795\ncollector-1  | Max: 0.035795\ncollector-1  | ExplicitBounds #0: 0.005000\ncollector-1  | ExplicitBounds #1: 0.010000\ncollector-1  | ExplicitBounds #2: 0.025000\ncollector-1  | ExplicitBounds #3: 0.050000\ncollector-1  | ExplicitBounds #4: 0.075000\ncollector-1  | ExplicitBounds #5: 0.100000\ncollector-1  | ExplicitBounds #6: 0.250000\ncollector-1  | ExplicitBounds #7: 0.500000\ncollector-1  | ExplicitBounds #8: 0.750000\ncollector-1  | ExplicitBounds #9: 1.000000\ncollector-1  | ExplicitBounds #10: 2.500000\ncollector-1  | ExplicitBounds #11: 5.000000\ncollector-1  | ExplicitBounds #12: 7.500000\ncollector-1  | ExplicitBounds #13: 10.000000\ncollector-1  | Buckets #0, Count: 0\ncollector-1  | Buckets #1, Count: 0\ncollector-1  | Buckets #2, Count: 0\ncollector-1  | Buckets #3, Count: 1\ncollector-1  | Buckets #4, Count: 0\ncollector-1  | Buckets #5, Count: 0\ncollector-1  | Buckets #6, Count: 0\ncollector-1  | Buckets #7, Count: 0\ncollector-1  | Buckets #8, Count: 0\ncollector-1  | Buckets #9, Count: 0\ncollector-1  | Buckets #10, Count: 0\ncollector-1  | Buckets #11, Count: 0\ncollector-1  | Buckets #12, Count: 0\ncollector-1  | Buckets #13, Count: 0\ncollector-1  | Buckets #14, Count: 0\ncollector-1  | HistogramDataPoints #1\ncollector-1  | Data point attributes:\ncollector-1  |      -> error.type: Str(500)\ncollector-1  |      -> http.request.method: Str(GET)\ncollector-1  |      -> http.response.status_code: Int(500)\ncollector-1  |      -> http.route: Str(/oups)\ncollector-1  |      -> network.protocol.version: Str(1.1)\ncollector-1  |      -> url.scheme: Str(http)\ncollector-1  | StartTimestamp: 2024-09-16 12:39:20.97871 +0000 UTC\ncollector-1  | Timestamp: 2024-09-16 13:10:20.892779 +0000 UTC\ncollector-1  | Count: 1\ncollector-1  | Sum: 0.000644\ncollector-1  | Min: 0.000644\ncollector-1  | Max: 0.000644\ncollector-1  | ExplicitBounds #0: 0.005000\ncollector-1  | ExplicitBounds #1: 0.010000\ncollector-1  | ExplicitBounds #2: 0.025000\ncollector-1  | ExplicitBounds #3: 0.050000\ncollector-1  | ExplicitBounds #4: 0.075000\ncollector-1  | ExplicitBounds #5: 0.100000\ncollector-1  | ExplicitBounds #6: 0.250000\ncollector-1  | ExplicitBounds #7: 0.500000\ncollector-1  | ExplicitBounds #8: 0.750000\ncollector-1  | ExplicitBounds #9: 1.000000\ncollector-1  | ExplicitBounds #10: 2.500000\ncollector-1  | ExplicitBounds #11: 5.000000\ncollector-1  | ExplicitBounds #12: 7.500000\ncollector-1  | ExplicitBounds #13: 10.000000\ncollector-1  | Buckets #0, Count: 1\ncollector-1  | Buckets #1, Count: 0\ncollector-1  | Buckets #2, Count: 0\ncollector-1  | Buckets #3, Count: 0\ncollector-1  | Buckets #4, Count: 0\ncollector-1  | Buckets #5, Count: 0\ncollector-1  | Buckets #6, Count: 0\ncollector-1  | Buckets #7, Count: 0\ncollector-1  | Buckets #8, Count: 0\ncollector-1  | Buckets #9, Count: 0\ncollector-1  | Buckets #10, Count: 0\ncollector-1  | Buckets #11, Count: 0\ncollector-1  | Buckets #12, Count: 0\ncollector-1  | Buckets #13, Count: 0\ncollector-1  | Buckets #14, Count: 0\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry TCP Server Implementation\nDESCRIPTION: Node.js server implementation that extracts and processes OpenTelemetry context from incoming TCP messages. Creates child spans from the received context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\nconst net = require('net');\nconst { context, propagation, trace } = require('@opentelemetry/api');\n\nlet tracer = trace.getTracer('server');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const message = data.toString();\n    // Parse the JSON object received from the client\n    try {\n      const json = JSON.parse(message);\n      let activeContext = context.active();\n      if (json._meta) {\n        activeContext = propagation.extract(context.active(), json._meta);\n        delete json._meta;\n      }\n      span = tracer.startSpan('receive', { kind: 1 }, activeContext);\n      trace.setSpan(activeContext, span);\n      console.log('Parsed JSON:', json);\n    } catch (e) {\n      console.error('Error parsing JSON:', e.message);\n    } finally {\n      span.end();\n    }\n  });\n});\n\n// Listen on port 8124\nserver.listen(8124, () => {\n  console.log('Server listening on port 8124');\n});\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry TCP Server Implementation\nDESCRIPTION: Node.js server implementation that extracts and processes OpenTelemetry context from incoming TCP messages. Creates child spans from the received context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n// server.js\nconst net = require('net');\nconst { context, propagation, trace } = require('@opentelemetry/api');\n\nlet tracer = trace.getTracer('server');\n\nconst server = net.createServer((socket) => {\n  socket.on('data', (data) => {\n    const message = data.toString();\n    // Parse the JSON object received from the client\n    try {\n      const json = JSON.parse(message);\n      let activeContext = context.active();\n      if (json._meta) {\n        activeContext = propagation.extract(context.active(), json._meta);\n        delete json._meta;\n      }\n      span = tracer.startSpan('receive', { kind: 1 }, activeContext);\n      trace.setSpan(activeContext, span);\n      console.log('Parsed JSON:', json);\n    } catch (e) {\n      console.error('Error parsing JSON:', e.message);\n    } finally {\n      span.end();\n    }\n  });\n});\n\n// Listen on port 8124\nserver.listen(8124, () => {\n  console.log('Server listening on port 8124');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Metric Exporter in OpenTelemetry Java\nDESCRIPTION: Shows implementation of a custom MetricExporter interface with logging capabilities. Includes methods for exporting metrics, flushing, shutdown, and configuration of aggregation temporality and memory mode.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_14\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.common.CompletableResultCode;\nimport io.opentelemetry.sdk.common.export.MemoryMode;\nimport io.opentelemetry.sdk.metrics.Aggregation;\nimport io.opentelemetry.sdk.metrics.InstrumentType;\nimport io.opentelemetry.sdk.metrics.data.AggregationTemporality;\nimport io.opentelemetry.sdk.metrics.data.MetricData;\nimport io.opentelemetry.sdk.metrics.export.AggregationTemporalitySelector;\nimport io.opentelemetry.sdk.metrics.export.MetricExporter;\nimport java.util.Collection;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class CustomMetricExporter implements MetricExporter {\n\n  private static final Logger logger = Logger.getLogger(CustomMetricExporter.class.getName());\n\n  @Override\n  public CompletableResultCode export(Collection<MetricData> metrics) {\n    // Export the records. Typically, records are sent out of process via some network protocol, but\n    // we simply log for illustrative purposes.\n    logger.log(Level.INFO, \"Exporting metrics\");\n    metrics.forEach(metric -> logger.log(Level.INFO, \"Metric: \" + metric));\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode flush() {\n    // Export any records which have been queued up but not yet exported.\n    logger.log(Level.INFO, \"flushing\");\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode shutdown() {\n    // Shutdown the exporter and cleanup any resources.\n    logger.log(Level.INFO, \"shutting down\");\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public AggregationTemporality getAggregationTemporality(InstrumentType instrumentType) {\n    // Specify the required aggregation temporality as a function of instrument type\n    return AggregationTemporalitySelector.deltaPreferred()\n        .getAggregationTemporality(instrumentType);\n  }\n\n  @Override\n  public MemoryMode getMemoryMode() {\n    // Optionally specify the memory mode, indicating whether metric records can be reused or must\n    // be immutable\n    return MemoryMode.REUSABLE_DATA;\n  }\n\n  @Override\n  public Aggregation getDefaultAggregation(InstrumentType instrumentType) {\n    // Optionally specify the default aggregation as a function of instrument kind\n    return Aggregation.defaultAggregation();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration\nDESCRIPTION: YAML configuration for OpenTelemetry Collector setup with Carbon receiver and debug exporter for testing custom metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  carbon:\n    endpoint: localhost:8080\n    transport: tcp\n    parser:\n      type: plaintext\n      config:\n\nexporters:\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [carbon]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Collector Configuration for NGINX Tracing\nDESCRIPTION: YAML configuration for the OpenTelemetry Collector that defines receivers for OTLP data and exporters to send the data to Jaeger. This configuration sets up the pipeline for trace data collection and forwarding.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nexporters:\n  jaeger:\n    endpoint: jaeger:14250\n    tls:\n      insecure: true\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [jaeger]\n```\n\n----------------------------------------\n\nTITLE: Adding Events to Spans\nDESCRIPTION: Demonstrates how to add timestamped events to spans to represent important moments during the span's lifetime, similar to logging.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/python/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\n\ncurrent_span = trace.get_current_span()\n\ncurrent_span.add_event(\"Vou tentar!\")\n\n# Faça alguma coisa\n\ncurrent_span.add_event(\"Consegui!\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Shard-Based Monitoring Using Pod UID Hashing\nDESCRIPTION: Algorithm for sharding pod monitoring across multiple Metricbeat instances using hash-based assignment. The algorithm uses xxHash on pod UIDs to determine which Metricbeat instance should monitor each pod.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/why-and-how-ebay-pivoted-to-opentelemetry/index.md#2025-04-09_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nxxHash(pod uid) % statefulset_size == instance number\n```\n\n----------------------------------------\n\nTITLE: Basic Java Tracer Setup and Query Instrumentation\nDESCRIPTION: Demonstrates setting up a tracer and instrumenting a database query with spans. Shows span creation, attribute setting, and proper error handling.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static Tracer tracer =  getTracer(TracerProvider.noop());\n\npublic static void setTracerProvider(TracerProvider tracerProvider) {\n    tracer = getTracer(tracerProvider);\n}\n\nprivate static Tracer getTracer(TracerProvider tracerProvider) {\n    return tracerProvider.getTracer(\"demo-db-client\", \"0.1.0-beta1\");\n}\n\nprivate Response selectWithTracing(Query query) {\n    // consulte as convenções para obter orientações sobre nomes de trechos e atributos\n    Span span = tracer.spanBuilder(String.format(\"SELECT %s.%s\", dbName, collectionName))\n            .setSpanKind(SpanKind.CLIENT)\n            .setAttribute(\"db.name\", dbName)\n            ...\n            .startSpan();\n\n    // torna o trecho ativo e permite correlacionar logs e trechos aninhados\n    try (Scope unused = span.makeCurrent()) {\n        Response response = query.runWithRetries();\n        if (response.isSuccessful()) {\n            span.setStatus(StatusCode.OK);\n        }\n\n        if (span.isRecording()) {\n           // preencha atributos de resposta para códigos de resposta e outras informações\n        }\n    } catch (Exception e) {\n        span.recordException(e);\n        span.setStatus(StatusCode.ERROR, e.getClass().getSimpleName());\n        throw e;\n    } finally {\n        span.end();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Request with cURL\nDESCRIPTION: Shell command to send an HTTP GET request to the Spring PetClinic application to test the OpenTelemetry instrumentation and generate telemetry data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncurl http://localhost:8080/vets.html\n```\n\n----------------------------------------\n\nTITLE: Creating Docker Compose Configuration for OpenTelemetry\nDESCRIPTION: YAML configuration for Docker Compose that sets up the Spring PetClinic application and OpenTelemetry Collector. It configures environment variables for service name and OTLP endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  app:\n    image: spring-petclinic-native\n    environment:\n      OTEL_SERVICE_NAME: 'graal-native-example-app'\n      OTEL_EXPORTER_OTLP_ENDPOINT: 'http://collector:4318'\n    ports:\n      - '8080:8080'\n    depends_on:\n      - collector\n  collector:\n    image: otel/opentelemetry-collector-contrib:0.109.0\n    volumes:\n      - ./collector-spring-native-config.yaml:/collector-spring-native-config.yaml\n    command: ['--config=/collector-spring-native-config.yaml']\n    expose:\n      - '4317'\n    ports:\n      - '4317:4317'\n```\n\n----------------------------------------\n\nTITLE: Auto-Instrumentation Setup with UV\nDESCRIPTION: Commands to install auto-instrumentation requirements using UV package manager\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nuv run opentelemetry-bootstrap -a requirements | uv pip install --requirement -\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Spring Boot Starter Dependency\nDESCRIPTION: XML configuration for adding the OpenTelemetry Spring Boot starter dependency to the project's pom.xml file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>io.opentelemetry.instrumentation</groupId>\n  <artifactId>opentelemetry-spring-boot-starter</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter in Non-ASP.NET Core Applications\nDESCRIPTION: Configure the Zipkin exporter for tracing in a non-ASP.NET Core application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nvar tracerProvider = Sdk.CreateTracerProviderBuilder()\n    // The rest of your setup code goes here\n    .AddZipkinExporter(options =>\n    {\n        options.Endpoint = new Uri(\"your-zipkin-uri-here\");\n    })\n    .Build();\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for OpenTelemetry Examples Page\nDESCRIPTION: YAML frontmatter configuration for a documentation page that redirects to the OpenTelemetry JavaScript examples repository. Sets up page metadata including title, aliases, description, and redirect URL.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/examples.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Examples\naliases: [instrumentation_examples]\ndescription:\n  Explore more examples for OpenTelemetry JavaScript _(external page)_\nredirect: https://github.com/open-telemetry/opentelemetry-js/tree/main/examples\nmanualLinkTarget: _blank\n_build: { render: link }\nweight: 220\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Log Collection\nDESCRIPTION: YAML configuration for the OTel Collector that defines how to collect logs from files, parse JSON formatted logs, extract timestamp and severity information, and export the processed logs for debugging.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  filelog:\n    include: [/usr/src/app/*.log]\n    operators:\n      - type: json_parser\n        timestamp:\n          parse_from: attributes.asctime\n          layout: '%Y-%m-%dT%H:%M:%S'\n        severity:\n          parse_from: attributes.levelname\nexporters:\n  debug:\n    verbosity: detailed\nservice:\n  pipelines:\n    logs:\n      receivers: [filelog]\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Creating the Config File for the Receiver\nDESCRIPTION: Shell command to create a configuration file for the tailtracer receiver.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ntouch tailtracer/config.go\n```\n\n----------------------------------------\n\nTITLE: Installing Specific OpenTelemetry Instrumentation Libraries\nDESCRIPTION: Shows how to selectively install specific instrumentation libraries instead of using the all-in-one package.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/libraries.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngem install opentelemetry-instrumentation-sinatra\ngem install opentelemetry-instrumentation-faraday\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry BOM with Maven\nDESCRIPTION: This snippet demonstrates how to import the OpenTelemetry Instrumentation BOM using Maven dependency management to ensure proper version alignment across all OpenTelemetry dependencies.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.opentelemetry.instrumentation</groupId>\n            <artifactId>opentelemetry-instrumentation-bom</artifactId>\n            <version>{{% param vers.instrumentation %}}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Initializing Tracing with sdk-trace-base in TypeScript\nDESCRIPTION: Demonstrates how to initialize tracing using the sdk-trace-base package in TypeScript.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport opentelemetry from '@opentelemetry/api';\nimport {\n  CompositePropagator,\n  W3CTraceContextPropagator,\n  W3CBaggagePropagator,\n} from '@opentelemetry/core';\nimport {\n  BasicTracerProvider,\n  BatchSpanProcessor,\n  ConsoleSpanExporter,\n} from '@opentelemetry/sdk-trace-base';\n\nopentelemetry.trace.setGlobalTracerProvider(\n  new BasicTracerProvider({\n    // Configure span processor to send spans to the exporter\n    spanProcessors: [new BatchSpanProcessor(new ConsoleSpanExporter())],\n  }),\n);\n\nopentelemetry.propagation.setGlobalPropagator(\n  new CompositePropagator({\n    propagators: [new W3CTraceContextPropagator(), new W3CBaggagePropagator()],\n  }),\n);\n\n// This is what we'll access in all instrumentation code\nconst tracer = opentelemetry.trace.getTracer('example-basic-tracer-node');\n```\n\n----------------------------------------\n\nTITLE: Disabling PostgresIntegrationTests in Java\nDESCRIPTION: Java code snippet to disable the PostgresIntegrationTests class to avoid issues during the build process as referenced in a GitHub issue.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_7\n\nLANGUAGE: java\nCODE:\n```\n@Disabled\npublic class PostgresIntegrationTests\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in Ruby with OpenTelemetry\nDESCRIPTION: Demonstrate various ways to add attributes to spans using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\ncurrent_span = OpenTelemetry::Trace.current_span\n\ncurrent_span.set_attribute(\"animals\", [\"elephant\", \"tiger\"])\n\ncurrent_span.add_attributes({\n  \"my.cool.attribute\" => \"a value\",\n  \"my.first.name\" => \"Oscar\"\n})\n\nMyAppTracer.in_span('foo', attributes: { \"hello\" => \"world\", \"some.number\" => 1024 }) do |span|\n  #  do stuff with the span\nend\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in Ruby with OpenTelemetry\nDESCRIPTION: Demonstrate various ways to add attributes to spans using OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire \"opentelemetry/sdk\"\n\ncurrent_span = OpenTelemetry::Trace.current_span\n\ncurrent_span.set_attribute(\"animals\", [\"elephant\", \"tiger\"])\n\ncurrent_span.add_attributes({\n  \"my.cool.attribute\" => \"a value\",\n  \"my.first.name\" => \"Oscar\"\n})\n\nMyAppTracer.in_span('foo', attributes: { \"hello\" => \"world\", \"some.number\" => 1024 }) do |span|\n  #  do stuff with the span\nend\n```\n\n----------------------------------------\n\nTITLE: Starting PHP Server with OpenTelemetry Exporters\nDESCRIPTION: This command starts the PHP built-in web server with OpenTelemetry exporters configured for traces and logs. It enables auto-instrumentation and sets the exporters to console output.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_PHP_AUTOLOAD_ENABLED=true \\\n    OTEL_TRACES_EXPORTER=console \\\n    OTEL_METRICS_EXPORTER=none \\\n    OTEL_LOGS_EXPORTER=console \\\n    php -S localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for OpenTelemetry Setup\nDESCRIPTION: Command to start the Spring PetClinic application and OpenTelemetry Collector using Docker Compose with the previously defined configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker-compose -f docker-compose-otel.yml up\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry and Dependencies in Python\nDESCRIPTION: This snippet shows the commands to install OpenTelemetry and its dependencies in a Python virtual environment. It includes the installation of the OpenTelemetry distro, Flask, and requests packages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npip install opentelemetry-distro\npip install flask requests\n```\n\n----------------------------------------\n\nTITLE: Initializing ASP.NET Instrumentation in Global.asax.cs\nDESCRIPTION: Sets up OpenTelemetry instrumentation in the Global.asax.cs file of an ASP.NET application. This code initializes the TracerProvider, adds ASP.NET instrumentation, configures a console exporter, and sets up resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/netframework.md#2025-04-09_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing OpenTelemetry;\nusing OpenTelemetry.Trace;\n\npublic class WebApiApplication : HttpApplication\n{\n    private TracerProvider _tracerProvider;\n\n    protected void Application_Start()\n    {\n        _tracerProvider = Sdk.CreateTracerProviderBuilder()\n            .AddAspNetInstrumentation()\n\n            // Other configuration, like adding an exporter and setting resources\n            .AddConsoleExporter()\n            .AddSource(\"my-service-name\")\n            .SetResourceBuilder(\n                ResourceBuilder.CreateDefault()\n                    .AddService(serviceName: \"my-service-name\", serviceVersion: \"1.0.0\"))\n\n            .Build();\n    }\n\n    protected void Application_End()\n    {\n        _tracerProvider?.Dispose();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Yoda's Setup with Docker Compose\nDESCRIPTION: This command runs the Docker Compose setup for Yoda's logging demonstration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose -f docker-compose.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Tailtracer Receiver\nDESCRIPTION: YAML configuration file for OpenTelemetry Collector that sets up the tailtracer receiver alongside OTLP receiver, batch processor, and debug/Jaeger exporters. Includes telemetry settings and pipeline configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 0.0.0.0:4317\n  tailtracer: # this line represents the ID of your receiver\n    interval: 1m\n    number_of_traces: 1\n\nprocessors:\n  batch:\n\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n    verbosity: detailed\n  otlp/jaeger:\n    endpoint: localhost:14317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp, tailtracer]\n      processors: [batch]\n      exporters: [otlp/jaeger, debug]\n  telemetry:\n    logs:\n      level: debug\n```\n\n----------------------------------------\n\nTITLE: Verificación del estado de los cambios locales\nDESCRIPTION: Comando de shell para revisar los archivos modificados antes de hacer commit, permitiendo ver qué cambios serán incluidos.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ngit status\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry Shutdown Handlers in PHP\nDESCRIPTION: Code snippet showing how to register OpenTelemetry provider shutdown functions with PHP's shutdown process to ensure telemetry is flushed before the process ends.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\\OpenTelemetry\\SDK\\Common\\Util\\ShutdownHandler::register([$tracerProvider, 'shutdown']);\n\\OpenTelemetry\\SDK\\Common\\Util\\ShutdownHandler::register([$meterProvider, 'shutdown']);\n\\OpenTelemetry\\SDK\\Common\\Util\\ShutdownHandler::register([$loggerProvider, 'shutdown']);\n```\n\n----------------------------------------\n\nTITLE: Registering OpenTelemetry Shutdown Handlers in PHP\nDESCRIPTION: Code snippet showing how to register OpenTelemetry provider shutdown functions with PHP's shutdown process to ensure telemetry is flushed before the process ends.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n\\OpenTelemetry\\SDK\\Common\\Util\\ShutdownHandler::register([$tracerProvider, 'shutdown']);\n\\OpenTelemetry\\SDK\\Common\\Util\\ShutdownHandler::register([$meterProvider, 'shutdown']);\n\\OpenTelemetry\\SDK\\Common\\Util\\ShutdownHandler::register([$loggerProvider, 'shutdown']);\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Spring Boot Starter with Gradle\nDESCRIPTION: This snippet demonstrates how to add the OpenTelemetry Spring Boot Starter dependency to a Gradle project. This enables OpenTelemetry's autoconfiguration in a Spring Boot application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"io.opentelemetry.instrumentation:opentelemetry-spring-boot-starter\")\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Instrumentation BOM to Maven\nDESCRIPTION: XML configuration for adding the OpenTelemetry instrumentation BOM (Bill of Materials) to the Maven dependency management section of the pom.xml file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>io.opentelemetry.instrumentation</groupId>\n            <artifactId>opentelemetry-instrumentation-bom</artifactId>\n            <version>2.8.0</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Environment Variables\nDESCRIPTION: Shell commands to set environment variables that configure the OpenTelemetry Java agent with console exporters for traces, metrics, and logs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nexport JAVA_TOOL_OPTIONS=\"-javaagent:PATH/TO/opentelemetry-javaagent.jar\" \\\n  OTEL_TRACES_EXPORTER=logging \\\n  OTEL_METRICS_EXPORTER=logging \\\n  OTEL_LOGS_EXPORTER=logging \\\n  OTEL_METRIC_EXPORT_INTERVAL=15000\n```\n\n----------------------------------------\n\nTITLE: Publishing .NET Accounting Service with Runtime Components\nDESCRIPTION: Command to publish the AccountingService project with current runtime components. Uses the dotnet publish command with specific flags to ensure appropriate native runtime components are distributed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/accounting.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndotnet publish \"./AccountingService.csproj\" --use-current-runtime -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies with NPM\nDESCRIPTION: Commands to initialize a new project and install required OpenTelemetry packages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\nnpm install @opentelemetry/api @opentelemetry/sdk-node\n```\n\n----------------------------------------\n\nTITLE: Formatting OpenTelemetry Training Announcement in HTML and Markdown\nDESCRIPTION: This snippet combines HTML and Markdown to create a styled announcement for OpenTelemetry certification and free course offerings. It uses a badge for emphasis and includes a link to more information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/announcements/training.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<span class=\"badge text-bg-secondary\">New</span> OTel **Certification** and\n_FREE_ **course**. [Learn more](/training/)\n```\n\n----------------------------------------\n\nTITLE: Sending Order Details in PascalCase JSON to EmailService\nDESCRIPTION: This snippet shows the incorrect format of sending order details to the EmailService using pascalCase JSON, which leads to errors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/testing-otel-demo/index.md#2025-04-09_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"email\": \"google@example.com\",\n  \"order\": {\n    \"orderId\": \"505\",\n    \"shippingCost\": {\n      \"currencyCode\": \"USD\"\n    }\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Server Metrics in OpenTelemetry\nDESCRIPTION: JSON configuration for HTTP server metrics instrumentation using OpenTelemetry. Defines metrics for request content length, response content length, and request duration with attributes for HTTP method, route, status code and host details. Uses cumulative temporality for aggregation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Scope\": {\n    \"Name\": \"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\",\n    \"Version\": \"0.44.0\",\n    \"SchemaURL\": \"\"\n  },\n  \"Metrics\": [\n    {\n      \"Name\": \"http.server.request_content_length\",\n      \"Description\": \"\",\n      \"Unit\": \"\",\n      \"Data\": {\n        \"DataPoints\": [\n          {\n            \"Attributes\": [\n              {\n                \"Key\": \"http.flavor\",\n                \"Value\": {\n                  \"Type\": \"STRING\",\n                  \"Value\": \"1.1\"\n                }\n              },\n              {\n                \"Key\": \"http.method\",\n                \"Value\": {\n                  \"Type\": \"STRING\", \n                  \"Value\": \"GET\"\n                }\n              }\n            ],\n            \"Value\": 0\n          }\n        ],\n        \"Temporality\": \"CumulativeTemporality\",\n        \"IsMonotonic\": true\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Resource Attributes in Elixir Configuration\nDESCRIPTION: Defines resource attributes in the Elixir application configuration using runtime.exs. This example sets the deployment environment to development using a nested map structure.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/resources.md#2025-04-09_snippet_5\n\nLANGUAGE: elixir\nCODE:\n```\n## runtime.exs\nconfig :opentelemetry, resource: %{deployment: %{environment: \"development\" }}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Setup for NGINX with OpenTelemetry and Jaeger\nDESCRIPTION: Docker Compose configuration that sets up a complete observability environment with NGINX, OpenTelemetry Collector, and Jaeger. This configuration runs all required services and connects them together to collect and view telemetry data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - '16686:16686'\n  collector:\n    image: otel/opentelemetry-collector:latest\n    command: ['--config=/etc/otel-collector-config.yaml']\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n  nginx:\n    image: nginx-otel\n    volumes:\n      - ./opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf\n    ports:\n      - 8080:80\n```\n\n----------------------------------------\n\nTITLE: Adding Span Event with Attributes in OpenTelemetry PHP\nDESCRIPTION: Demonstrates adding an event to a span with additional attribute information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/quote.md#2025-04-09_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n$span->addEvent('Quote processed, response sent back', [\n    'app.quote.cost.total' => $payload\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Path-Based Sampling in OpenTelemetry with Spring Boot\nDESCRIPTION: Demonstrates how to create a Spring configuration class that customizes the OpenTelemetry sampler to drop spans for paths starting with '/actuator'. Uses RuleBasedRoutingSampler to implement path-based sampling rules.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/spring-starter-stable/index.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.api.trace.SpanKind;\nimport io.opentelemetry.contrib.sampler.RuleBasedRoutingSampler;\nimport io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizerProvider;\nimport io.opentelemetry.semconv.UrlAttributes;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class FilterPaths {\n\n  @Bean\n  public AutoConfigurationCustomizerProvider otelCustomizer() {\n    return p ->\n        p.addSamplerCustomizer(\n            (fallback, config) ->\n                RuleBasedRoutingSampler.builder(SpanKind.SERVER, fallback)\n                    .drop(UrlAttributes.URL_PATH, \"^/actuator\")\n                    .build());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing OpenTelemetry Plugin\nDESCRIPTION: cURL command to test the OpenTelemetry plugin by sending a request to the configured route with a custom header.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/apisix/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X PUT -H `x-custom-ot-key: test-ot-val` http://127.0.0.1:9080/put\n```\n\n----------------------------------------\n\nTITLE: Running the OpenTelemetry-Instrumented Application with Console Exporter\nDESCRIPTION: Command to run the Rails server with the OpenTelemetry console exporter enabled to view traces in the terminal.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nenv OTEL_TRACES_EXPORTER=console rails server -p 8080\n```\n\n----------------------------------------\n\nTITLE: Executing Automatically Instrumented Python Server\nDESCRIPTION: This command demonstrates how to run a Python script with automatic instrumentation using the OpenTelemetry instrument command. It configures the traces exporter to console and disables metrics export.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nopentelemetry-instrument --traces_exporter console --metrics_exporter none python server_automatic.py\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer in PHP Application File\nDESCRIPTION: Shows how to acquire a tracer in the main application file (index.php) of a PHP project using OpenTelemetry. It sets up logging and initializes the application with the tracer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Log\\LogLevel;\nuse Slim\\Factory\\AppFactory;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\nuse OpenTelemetry\\API\\Globals;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nrequire('dice.php');\nrequire('instrumentation.php');\n\n$tracerProvider = Globals::tracerProvider();\n$tracer = $tracerProvider->getTracer(\n  'dice-server',\n  '0.1.0',\n  'https://opentelemetry.io/schemas/1.24.0'\n);\n\n$logger = new Logger('dice-server');\n$logger->pushHandler(new StreamHandler('php://stdout', Logger::INFO));\n\n$app = AppFactory::create();\n\n$dice = new Dice();\n\n$app->get('/rolldice', function (Request $request, Response $response) use ($logger, $dice, $tracer) {\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer in PHP Application File\nDESCRIPTION: Shows how to acquire a tracer in the main application file (index.php) of a PHP project using OpenTelemetry. It sets up logging and initializes the application with the tracer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n<?php\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Log\\LogLevel;\nuse Slim\\Factory\\AppFactory;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\StreamHandler;\nuse OpenTelemetry\\API\\Globals;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nrequire('dice.php');\nrequire('instrumentation.php');\n\n$tracerProvider = Globals::tracerProvider();\n$tracer = $tracerProvider->getTracer(\n  'dice-server',\n  '0.1.0',\n  'https://opentelemetry.io/schemas/1.24.0'\n);\n\n$logger = new Logger('dice-server');\n$logger->pushHandler(new StreamHandler('php://stdout', Logger::INFO));\n\n$app = AppFactory::create();\n\n$dice = new Dice();\n\n$app->get('/rolldice', function (Request $request, Response $response) use ($logger, $dice, $tracer) {\n// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Medium Post Reference\nDESCRIPTION: YAML front matter that defines the metadata for a blog post referencing content originally published on Medium. It includes placeholders for title, linkTitle, date, and canonical URL that need to be customized before publishing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/archetypes/medium.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: {{ replaceRE \"[-_]\" \" \" .Name | title }} (Medium)\nlinkTitle: ADD A SHORT TITLE HERE # TODO\ndate: 2021-01-01 # TODO ADJUST THE DATE\ncanonical_url: https://medium.com/opentelemetry/ADD-REST-OF-PATH-HERE # TODO\n---\n```\n\n----------------------------------------\n\nTITLE: To-Do App Implementation with Gin and MongoDB in Go\nDESCRIPTION: Complete implementation of a simple to-do application using Gin for HTTP handling and MongoDB for data storage. The code sets up MongoDB connection, seeds the database with sample to-do items, and creates an HTTP endpoint to retrieve todos.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\npackage main\nimport (\n    \"context\"\n    \"net/http\"\n    \"github.com/gin-gonic/gin\"\n    \"go.mongodb.org/mongo-driver/bson\"\n    \"go.mongodb.org/mongo-driver/mongo\"\n    \"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\nvar client * mongo.Client\n\nfunc main() {\n    connectMongo()\n    setupWebServer()\n}\n\nfunc connectMongo() {\n    opts: = options.Client()\n    opts.ApplyURI(\"mongodb://localhost:27017\")\n    client, _ = mongo.Connect(context.Background(), opts)\n    //Seed the database with todo's\n    docs: = [] interface {} {\n        bson.D {\n                {\n                    \"id\", \"1\"\n                }, {\n                    \"title\", \"Buy groceries\"\n                }\n            },\n            bson.D {\n                {\n                    \"id\", \"2\"\n                }, {\n                    \"title\", \"install Aspecto.io\"\n                }\n            },\n            bson.D {\n                {\n                    \"id\", \"3\"\n                }, {\n                    \"title\", \"Buy dogz.io domain\"\n                }\n            },\n    }\n    client.Database(\"todo\").Collection(\"todos\").InsertMany(context.Background(), docs)\n}\n\nfunc setupWebServer() {\n    r: = gin.Default()\n    r.GET(\"/todo\", func(c * gin.Context) {\n        collection: = client.Database(\"todo\").Collection(\"todos\")\n        //Important: Make sure to pass c.Request.Context() as the context and not c itself - TBD\n        cur, findErr: = collection.Find(c.Request.Context(), bson.D {})\n        if findErr != nil {\n            c.AbortWithError(500, findErr)\n            return\n        }\n        results: = make([] interface {}, 0)\n        curErr: = cur.All(c, & results)\n        if curErr != nil {\n            c.AbortWithError(500, curErr)\n            return\n        }\n        c.JSON(http.StatusOK, results)\n    })\n    _ = r.Run(\":8080\")\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Prometheus Exporter for Python OpenTelemetry\nDESCRIPTION: Command to install the OpenTelemetry Prometheus exporter package as a dependency for your Python project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-exporter-prometheus\n```\n\n----------------------------------------\n\nTITLE: Initializing OTLP Trace Exporter in Swift\nDESCRIPTION: This snippet shows how to initialize an OTLP trace exporter, establish a gRPC connection to the collector, and register a TracerProvider. It creates a pipeline for exporting trace data to an OpenTelemetry Collector.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\nimport GRPC\nimport OpenTelemetryApi\nimport OpenTelemetrySdk\nimport OpenTelemetryProtocolExporter\n\n\n// initialize the OtlpTraceExporter\nlet otlpConfiguration = OtlpConfiguration(timeout: OtlpConfiguration.DefaultTimeoutInterval)\n\nlet grpcChannel = ClientConnection.usingPlatformAppropriateTLS(for: MultiThreadedEventLoopGroup(numberOfThreads:1))\n                                                  .connect(host: <collector host>, port: <collector port>)\n\nlet traceExporter = OtlpTraceExporter(channel: grpcChannel,\n                                      config: otlpConfiguration)\n\n// build & register the Tracer Provider using the built otlp trace exporter\nOpenTelemetry.registerTracerProvider(tracerProvider: TracerProviderBuilder()\n                                                      .add(spanProcessor:SimpleSpanProcessor(spanExporter: traceExporter))\n                                                      .with(resource: Resource())\n                                                      .build())\n```\n\n----------------------------------------\n\nTITLE: Operator-Modified OpenTelemetryCollector Configuration with Target Allocator in YAML\nDESCRIPTION: This shows how the OpenTelemetry Operator transforms the user configuration after reconciliation. It replaces the static_configs with http_sd_configs pointing to the Target Allocator service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/target-allocator.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  prometheus:\n    config:\n      scrape_configs:\n        - job_name: otel-collector\n          scrape_interval: 10s\n          http_sd_configs:\n            - url: http://collector-with-ta-targetallocator:80/jobs/otel-collector/targets?collector_id=$POD_NAME\n          metric_relabel_configs:\n            - action: labeldrop\n              regex: (id|name)\n              replacement: $$1\n            - action: labelmap\n              regex: label_(.+)\n              replacement: $$1\n\nexporters:\n  debug:\n\nservice:\n  pipelines:\n    metrics:\n      receivers: [prometheus]\n      processors: []\n      exporters: [debug]\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Automatic Context Propagation in TypeScript\nDESCRIPTION: Commands to install the necessary dependencies for creating a TypeScript client application that uses OpenTelemetry to propagate context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init -y\nnpm install typescript \\\n  ts-node \\\n  @types/node \\\n  undici \\\n  @opentelemetry/instrumentation-undici \\\n  @opentelemetry/sdk-node\n\n# initialize typescript\nnpx tsc --init\n```\n\n----------------------------------------\n\nTITLE: Deploying the Istio Bookinfo Application with Sidecar Injection\nDESCRIPTION: Commands to enable Istio sidecar injection for the default namespace and deploy the Bookinfo sample application that will be monitored with OpenTelemetry tracing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/new-otel-features-envoy-istio/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl label namespace default istio-injection=enabled\nkubectl apply -f bookinfo.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring WebClient in Spring RestController Java\nDESCRIPTION: This code snippet shows how to configure a WebClient in a Spring RestController. It uses WebClient.Builder to create a WebClient instance with a base URL.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.reactive.function.client.WebClient;\n\n@RestController\npublic class WebClientController {\n\n  private final WebClient webClient;\n\n  public WebClientController(WebClient.Builder webClientBuilder) {\n    webClient = webClientBuilder.baseUrl(\"http://localhost:8080\").build();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Kafka Producer with OpenTelemetry Agent\nDESCRIPTION: Shell command to run a Kafka producer application with the OpenTelemetry Java agent, configuring service name, traces exporter, and metrics settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -javaagent:path/to/opentelemetry-javaagent.jar \\\n      -Dotel.service.name=my-kafka-service \\\n      -Dotel.traces.exporter=jaeger \\\n      -Dotel.metrics.exporter=none \\\n      -jar kafka-producer-agent/target/kafka-producer-agent-1.0-SNAPSHOT-jar-with-dependencies.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry to Capture HTTP Headers in Python\nDESCRIPTION: This snippet demonstrates how to set environment variables to specify which HTTP headers to capture for requests and responses. It also shows how to run a Python application with OpenTelemetry instrumentation enabled.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nexport OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_REQUEST=\"Accept-Encoding,User-Agent,Referer\"\nexport OTEL_INSTRUMENTATION_HTTP_CAPTURE_HEADERS_SERVER_RESPONSE=\"Last-Modified,Content-Type\"\nopentelemetry-instrument --traces_exporter console --metrics_exporter none python app.py\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry PHP Autoloading Implementation\nDESCRIPTION: Demonstrates how to use the autoloaded SDK to obtain tracer and meter instances from global providers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/sdk.md#2025-04-09_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire 'vendor/autoload.php'; //sdk autoloading happens as part of composer initialization\n\n$tracer = OpenTelemetry\\API\\Globals::tracerProvider()->getTracer('name', 'version', 'schema.url', [/*attributes*/]);\n$meter = OpenTelemetry\\API\\Globals::meterProvider()->getMeter('name', 'version', 'schema.url', [/*attributes*/]);\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Frontmatter for 2024 Page\nDESCRIPTION: YAML frontmatter configuration that sets up a page titled '2024' with a weight of -2024 for page ordering in a static site generator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2024\nweight: -2024\n---\n```\n\n----------------------------------------\n\nTITLE: Using Correct Context Propagation in Gin with MongoDB\nDESCRIPTION: Example showing the proper way to propagate context from Gin to MongoDB operations. This is important for maintaining trace context across service boundaries in OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_4\n\nLANGUAGE: go\nCODE:\n```\n//Make sure to pass c.Request.Context() as the context and not c itself\ncur, findErr := collection.Find(c.Request.Context(), bson.D{})\n```\n\n----------------------------------------\n\nTITLE: Initializing Tracing with sdk-trace-base in JavaScript\nDESCRIPTION: Shows how to initialize tracing using the sdk-trace-base package in JavaScript.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\nconst {\n  CompositePropagator,\n  W3CTraceContextPropagator,\n  W3CBaggagePropagator,\n} = require('@opentelemetry/core');\nconst {\n  BasicTracerProvider,\n  ConsoleSpanExporter,\n  BatchSpanProcessor,\n} = require('@opentelemetry/sdk-trace-base');\n\nopentelemetry.trace.setGlobalTracerProvider(\n  new BasicTracerProvider({\n    // Configure span processor to send spans to the exporter\n    spanProcessors: [new BatchSpanProcessor(new ConsoleSpanExporter())],\n  }),\n);\n\nopentelemetry.propagation.setGlobalPropagator(\n  new CompositePropagator({\n    propagators: [new W3CTraceContextPropagator(), new W3CBaggagePropagator()],\n  }),\n);\n\n// This is what we'll access in all instrumentation code\nconst tracer = opentelemetry.trace.getTracer('example-basic-tracer-node');\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoConfigurationCustomizerProvider in Java\nDESCRIPTION: Example implementation of AutoConfigurationCustomizerProvider interface to customize various SDK components like propagators, resources, samplers, exporters and processors. Provides methods to customize tracing, metrics and logging components.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizer;\nimport io.opentelemetry.sdk.autoconfigure.spi.AutoConfigurationCustomizerProvider;\nimport java.util.Collections;\n\npublic class CustomizerProvider implements AutoConfigurationCustomizerProvider {\n\n  @Override\n  public void customize(AutoConfigurationCustomizer customizer) {\n    // Optionally customize TextMapPropagator.\n    customizer.addPropagatorCustomizer((textMapPropagator, configProperties) -> textMapPropagator);\n    // Optionally customize Resource.\n    customizer.addResourceCustomizer((resource, configProperties) -> resource);\n    // Optionally customize Sampler.\n    customizer.addSamplerCustomizer((sampler, configProperties) -> sampler);\n    // Optionally customize SpanExporter.\n    customizer.addSpanExporterCustomizer((spanExporter, configProperties) -> spanExporter);\n    // Optionally customize SpanProcessor.\n    customizer.addSpanProcessorCustomizer((spanProcessor, configProperties) -> spanProcessor);\n    // Optionally supply additional properties.\n    customizer.addPropertiesSupplier(Collections::emptyMap);\n    // Optionally customize ConfigProperties.\n    customizer.addPropertiesCustomizer(configProperties -> Collections.emptyMap());\n    // Optionally customize SdkTracerProviderBuilder.\n    customizer.addTracerProviderCustomizer((builder, configProperties) -> builder);\n    // Optionally customize SdkMeterProviderBuilder.\n    customizer.addMeterProviderCustomizer((builder, configProperties) -> builder);\n    // Optionally customize MetricExporter.\n    customizer.addMetricExporterCustomizer((metricExporter, configProperties) -> metricExporter);\n    // Optionally customize MetricReader.\n    customizer.addMetricReaderCustomizer((metricReader, configProperties) -> metricReader);\n    // Optionally customize SdkLoggerProviderBuilder.\n    customizer.addLoggerProviderCustomizer((builder, configProperties) -> builder);\n    // Optionally customize LogRecordExporter.\n    customizer.addLogRecordExporterCustomizer((exporter, configProperties) -> exporter);\n    // Optionally customize LogRecordProcessor.\n    customizer.addLogRecordProcessorCustomizer((processor, configProperties) -> processor);\n  }\n\n  @Override\n  public int order() {\n    // Optionally influence the order of invocation.\n    return 0;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry SDK for Ruby\nDESCRIPTION: Install the OpenTelemetry SDK package using the gem command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngem install opentelemetry-sdk\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenLIT with Environment Variable\nDESCRIPTION: Alternative approach to initialize OpenLIT using environment variables for the OpenTelemetry Collector endpoint configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/llm-observability.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport openlit\n\nopenlit.init()\n```\n\n----------------------------------------\n\nTITLE: Configuring RestClient Bean\nDESCRIPTION: Java configuration class showing how to create a RestClient bean for Spring autowiring with OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/out-of-the-box-instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.client.RestClient;\n\n@Configuration\npublic class RestClientConfig {\n\n  @Bean\n  public RestClient restClient() {\n    return RestClient.create();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping Kafka Producer with OpenTelemetry Tracing\nDESCRIPTION: Example showing how to wrap a Kafka producer instance with a tracing-enabled wrapper using KafkaTelemetry. This alternative approach to interceptors enables tracing for all producer operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nKafkaTelemetry telemetry = KafkaTelemetry.create(GlobalOpenTelemetry.get());\nProducer<String, String> tracingProducer = telemetry.wrap(producer);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Agent via CLI\nDESCRIPTION: Example showing how to configure the OpenTelemetry agent using command-line properties including traces exporter, metrics exporter, service name, and OTLP endpoint settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/configuration.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopentelemetry-instrument \\\n    --traces_exporter console,otlp \\\n    --metrics_exporter console \\\n    --service_name your-service-name \\\n    --exporter_otlp_endpoint 0.0.0.0:4317 \\\n    python myapp.py\n```\n\n----------------------------------------\n\nTITLE: Running Instrumented TypeScript Application\nDESCRIPTION: Command to run a TypeScript application with OpenTelemetry instrumentation using ts-node. The instrumentation file is loaded before the main application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_10\n\nLANGUAGE: console\nCODE:\n```\n$ npx ts-node --require ./instrumentation.ts app.ts\nListening for requests on http://localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Generating Trace Data in Go with OpenTelemetry\nDESCRIPTION: The generateTraces function creates a specified number of trace data sets, including resource spans for both ATM and backend systems. It generates synthetic trace data for monitoring purposes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_41\n\nLANGUAGE: go\nCODE:\n```\nfunc generateTraces(numberOfTraces int) ptrace.Traces {\n\ttraces := ptrace.NewTraces()\n\n\tfor i := 0; i <= numberOfTraces; i++ {\n\t\tnewAtm := generateAtm()\n\t\tnewBackendSystem := generateBackendSystem()\n\n\t\tresourceSpan := traces.ResourceSpans().AppendEmpty()\n\t\tatmResource := resourceSpan.Resource()\n\t\tfillResourceWithAtm(&atmResource, newAtm)\n\n\t\tatmInstScope := appendAtmSystemInstrScopeSpans(&resourceSpan)\n\n\t\tresourceSpan = traces.ResourceSpans().AppendEmpty()\n\t\tbackendResource := resourceSpan.Resource()\n\t\tfillResourceWithBackendSystem(&backendResource, newBackendSystem)\n\n\t\tbackendInstScope := appendAtmSystemInstrScopeSpans(&resourceSpan)\n\n\t\tappendTraceSpans(&newBackendSystem, &backendInstScope, &atmInstScope)\n\t}\n\n\treturn traces\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Environment for NGINX Telemetry\nDESCRIPTION: Shell command to start all services defined in the Docker Compose file, which will run NGINX with OpenTelemetry, the OpenTelemetry Collector, and Jaeger for viewing traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Output of Instrumented Server Request\nDESCRIPTION: This JSON snippet shows an example of the span data generated by the instrumented server. It includes details such as trace and span IDs, timestamps, attributes, and resource information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"server_request\",\n  \"context\": {\n    \"trace_id\": \"0x9f528e0b76189f539d9c21b1a7a2fc24\",\n    \"span_id\": \"0xd79760685cd4c269\",\n    \"trace_state\": \"{}\"\n  },\n  \"kind\": \"SpanKind.SERVER\",\n  \"parent_id\": \"0xb4fb7eee22ef78e4\",\n  \"start_time\": \"2020-04-30T17:10:02.400604Z\",\n  \"end_time\": \"2020-04-30T17:10:02.401858Z\",\n  \"status\": {\n    \"status_code\": \"OK\"\n  },\n  \"attributes\": {\n    \"http.method\": \"GET\",\n    \"http.server_name\": \"127.0.0.1\",\n    \"http.scheme\": \"http\",\n    \"host.port\": 8082,\n    \"http.host\": \"localhost:8082\",\n    \"http.target\": \"/server_request?param=testing\",\n    \"net.peer.ip\": \"127.0.0.1\",\n    \"net.peer.port\": 48240,\n    \"http.flavor\": \"1.1\",\n    \"http.route\": \"/server_request\",\n    \"http.status_text\": \"OK\",\n    \"http.status_code\": 200\n  },\n  \"events\": [],\n  \"links\": [],\n  \"resource\": {\n    \"telemetry.sdk.language\": \"python\",\n    \"telemetry.sdk.name\": \"opentelemetry\",\n    \"telemetry.sdk.version\": \"0.16b1\",\n    \"service.name\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentations for Gin and MongoDB\nDESCRIPTION: Commands to install the OpenTelemetry instrumentation packages for Gin web framework and MongoDB driver. These auto-instrumentations enable automatic tracing without modifying the application code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo get go.opentelemetry.io/contrib/instrumentation/github.com/gin-gonic/gin/otelgin /\ngo get go.opentelemetry.io/contrib/instrumentation/go.mongodb.org/mongo-driver/mongo/otelmongo\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry BOM Dependency in Gradle\nDESCRIPTION: This Kotlin code demonstrates how to add an OpenTelemetry BOM dependency in a Gradle build file. It uses the platform dependency mechanism to import the BOM and then adds a specific OpenTelemetry dependency without specifying its version, as it's managed by the BOM.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/intro.md#2025-04-09_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(platform(\"{{bomGroupId}}:{{bomArtifactId}}:{{bomVersion}}\"))\n  // Add a dependency on an artifact whose version is managed by the bom\n  implementation(\"io.opentelemetry:opentelemetry-api\")\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for OpenTelemetry Demo\nDESCRIPTION: Docker Compose file that sets up services for a complete OpenTelemetry demonstration including MySQL, OpenTelemetry Collector, Prometheus, Jaeger, and the instrumented client application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.9'\nservices:\n  mysql:\n    image: mysql:8.3\n    environment:\n      - MYSQL_ROOT_PASSWORD=otel_password\n      - MYSQL_DATABASE=db\n    healthcheck:\n      test:\n        mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD\n      start_period: 5s\n      interval: 5s\n      timeout: 5s\n      retries: 10\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.91.0\n    command: ['--config=/etc/otel-collector.yaml']\n    volumes:\n      - ./otel-collector.yaml:/etc/otel-collector.yaml\n    depends_on:\n      - jaeger\n\n  prometheus:\n    image: prom/prometheus:v2.45.2\n    volumes:\n      - ./prometheus.yaml:/etc/prometheus/prometheus.yml\n    ports:\n      - 9090:9090\n    depends_on:\n      - otel-collector\n\n  jaeger:\n    image: jaegertracing/all-in-one:1.52\n    ports:\n      - 16686:16686\n\n  client:\n    build:\n      dockerfile: $PWD/Dockerfile\n      context: ../..\n    depends_on:\n      mysql:\n        condition: service_healthy\n```\n\n----------------------------------------\n\nTITLE: Illustrating System Architecture with Mermaid Diagram\nDESCRIPTION: A Mermaid flowchart showing the data flow from the Python application to the log file, then to the OTel collector, and finally to stdout.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    app[\"python main.py\"] -->  logfile[\"exgru.log\"]\n    logfile[\"exgru.log\"] -->  otelcol[\"OTel collector\"]\n    otelcol[\"OTel collector\"] -->  stdout[\"stdout\"]\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Java Shim Dependencies\nDESCRIPTION: Maven dependency declarations for various OpenTelemetry shims that bridge different observability libraries into OpenTelemetry ecosystem. Includes bridges for OpenTracing, OpenCensus, Micrometer, JMX, Prometheus, Log4j, and Logback.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\nio.opentelemetry:opentelemetry-opentracing-shim:{{% param vers.otel %}}\nio.opentelemetry:opentelemetry-opencensus-shim:{{% param vers.otel %}}-alpha\nio.opentelemetry.instrumentation:opentelemetry-micrometer-1.5:{{% param vers.instrumentation %}}-alpha\nio.opentelemetry.instrumentation:opentelemetry-jmx-metrics:{{% param vers.instrumentation %}}-alpha\nio.opentelemetry.contrib:opentelemetry-prometheus-client-bridge:{{% param vers.contrib %}}-alpha\nio.opentelemetry.contrib:opentelemetry-micrometer-meter-provider:{{% param vers.contrib %}}-alpha\nio.opentelemetry.instrumentation:opentelemetry-log4j-appender-2.17:{{% param vers.instrumentation %}}-alpha\nio.opentelemetry.instrumentation:opentelemetry-logback-appender-1.0:{{% param vers.instrumentation %}}-alpha\nio.opentelemetry.instrumentation:opentelemetry-log4j-context-data-2.17-autoconfigure:{{% param vers.instrumentation %}}-alpha\nio.opentelemetry.instrumentation:opentelemetry-logback-mdc-1.0:{{% param vers.instrumentation %}}-alpha\n```\n\n----------------------------------------\n\nTITLE: Adding Jaeger Exporter Dependency\nDESCRIPTION: Maven dependency configuration for adding the Jaeger exporter to export OpenTelemetry traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.opentelemetry</groupId>\n    <artifactId>opentelemetry-exporter-jaeger</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring ASP.NET Core launch settings in JSON\nDESCRIPTION: This JSON configuration sets up the launch settings for the ASP.NET Core application, specifying the development environment and the URL on which the application will run.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n  \"profiles\": {\n    \"http\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n      \"applicationUrl\": \"http://localhost:8080\",\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Go Packages\nDESCRIPTION: Install the required OpenTelemetry Go packages using the go get command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/instrumentation.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngo get go.opentelemetry.io/otel \\\n  go.opentelemetry.io/otel/trace \\\n  go.opentelemetry.io/otel/sdk \\\n```\n\n----------------------------------------\n\nTITLE: Sample Metric Sequence with Out-of-Order Timestamps\nDESCRIPTION: An example sequence of metrics showing how out-of-order timestamps can occur when multiple collectors send data for the same metric, causing inconsistencies in the time series.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/deployment/gateway/index.md#2025-04-09_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- Metric `M1` received at `T1` with a timestamp 13:56:04 with value `100`\n- Metric `M1` received at `T2` with a timestamp 13:56:24 with value `120`\n- Metric `M1` received at `T3` with a timestamp 13:56:04 with value `110`\n- Metric `M1` received at time 13:56:24 with value `120`\n- Metric `M1` received at time 13:56:04 with value `110`\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Java Backend with OpenTelemetry Agent\nDESCRIPTION: Dockerfile for the Java backend service using Tomcat and automatically downloading and configuring the OpenTelemetry Java agent for instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_13\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM tomcat\nADD https://github.com/open-telemetry/opentelemetry-java-instrumentation/releases/latest/download/opentelemetry-javaagent.jar javaagent.jar\nENV JAVA_OPTS=\"-javaagent:javaagent.jar\"\nCMD [\"catalina.sh\", \"run\"]\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Spans in OpenTelemetry Swift\nDESCRIPTION: This code shows how to annotate spans with attributes that provide additional context about the operation. It demonstrates adding HTTP-specific attributes following semantic conventions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_7\n\nLANGUAGE: swift\nCODE:\n```\nlet span = tracer.spanBuilder(\"/resource/path\").startSpan()\nspan.setAttribute(\"http.method\", \"GET\");\nspan.setAttribute(\"http.url\", url.toString());\n```\n\n----------------------------------------\n\nTITLE: Default OpenTelemetry Collector Configuration\nDESCRIPTION: Default YAML configuration for the OpenTelemetry Collector Lambda layer, showing basic receiver and exporter setup with debug output.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/faas/lambda-collector.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: '0.0.0.0:4317'\n      http:\n        endpoint: '0.0.0.0:4318'\n\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n    verbosity: detailed\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [debug]\n    metrics:\n      receivers: [otlp]\n      exporters: [debug]\n  telemetry:\n    metrics:\n      address: localhost:8888\n```\n\n----------------------------------------\n\nTITLE: SSL Certificate Expiration Check Script - Basic Version\nDESCRIPTION: Shell script that checks SSL certificate expiration time for a given host and port, returning the number of seconds until expiration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n#!/bin/bash\nHOST=${1}\nPORT=${2:-443}\n\nnow=$(date +%s)\nnotAfterString=$(echo q | openssl s_client -servername \"${HOST}\" \"${HOST}:${PORT}\" 2>/dev/null | openssl x509 -noout -enddate | awk -F\"=\" '{ print $2; }')\nif [[ \"$(uname)\" == \"Darwin\" ]] ; then\n  notAfter=$(date -j -f \"%b %d %H:%M:%S %Y %Z\" \"${notAfterString}\" +%s)\nelse\n  notAfter=$(date -d \"${notAfterString}\" +%s)\nfi\n\nsecondsLeft=$(($notAfter-$now))\n\necho ${secondsLeft}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Python Application Deployment\nDESCRIPTION: A Docker Compose configuration that builds and runs the Python application with specified command-line arguments. It includes volume mapping to sync the local directory with the container for development purposes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\nservices:\n  baby-grogu:\n    build: .\n    command: python main.py 3\n    volumes:\n      - .:/usr/src/app\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger Docker Container with OTLP Support\nDESCRIPTION: Docker command to run Jaeger all-in-one container with OTLP ports (4317, 4318), Zipkin port (9411), and UI port (16686) exposed. Sets up Jaeger as a trace data collector with web UI access.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/_includes/exporters/jaeger.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector in Sidecar Mode with Resource Detector\nDESCRIPTION: This YAML manifest deploys the OpenTelemetry Collector in sidecar mode with the resource detector processor configured to use environment variables for Kubernetes metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-metadata/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: sidecar-for-my-app\nspec:\n  mode: sidecar\n  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.47.0\n  config: |\n    receivers:\n      jaeger:\n        protocols:\n          grpc:\n          thrift_binary:\n          thrift_compact:\n          thrift_http:\n      otlp:\n        protocols:\n          grpc:\n          http:\n\n    processors:\n      resourcedetection:\n        detectors: [env]\n        timeout: 2s\n        override: false\n\n    exporters:\n      jaeger:\n        endpoint: jaeger-all-in-one-collector:14250\n        tls:\n          insecure: true\n\n    service:\n      pipelines:\n        traces:\n          receivers: [otlp, jaeger]\n          processors: [resourcedetection]\n          exporters: [jaeger]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry .NET Automatic Instrumentation on Unix\nDESCRIPTION: These shell commands download and install the OpenTelemetry .NET Automatic Instrumentation on a Unix-based system. It includes steps to download the installation script and execute it.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L -O https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation/releases/latest/download/otel-dotnet-auto-install.sh\n\n./otel-dotnet-auto-install.sh\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Hosting Extensions\nDESCRIPTION: Install the OpenTelemetry Extensions for Hosting package for ASP.NET Core applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Extensions.Hosting\n```\n\n----------------------------------------\n\nTITLE: Installing HTTP and Express Instrumentation Libraries in Node.js\nDESCRIPTION: Command to install Express and HTTP instrumentation libraries for OpenTelemetry to automatically instrument inbound and outbound HTTP traffic.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/instrumentation-http @opentelemetry/instrumentation-express\n```\n\n----------------------------------------\n\nTITLE: Restarting Apache HTTP Server\nDESCRIPTION: Command to restart Apache HTTP Server after configuration changes, ensuring that the OpenTelemetry module is properly loaded.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nhttpd -k restart\n```\n\n----------------------------------------\n\nTITLE: CloudFormation Lambda Environment Configuration\nDESCRIPTION: CloudFormation YAML snippet for setting up Lambda environment variables for custom collector configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/faas/lambda-collector.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nFunction:\n  Type: AWS::Serverless::Function\n  Properties:\n    ...\n    Environment:\n      Variables:\n        OPENTELEMETRY_COLLECTOR_CONFIG_URI: /var/task/collector.yaml\n```\n\n----------------------------------------\n\nTITLE: Exposing OpenTelemetry Collector for Web Store Spans\nDESCRIPTION: Command to set up port forwarding for the OpenTelemetry Collector's OTLP/HTTP receiver, enabling the collection of spans from the web store application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/demo.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl port-forward svc/my-otel-demo-otelcol 4318:4318\n```\n\n----------------------------------------\n\nTITLE: Attribute Table Documentation\nDESCRIPTION: Markdown tables documenting the manual span attributes used across different services in the OpenTelemetry demo application. Each table defines attribute names, types, and descriptions for specific service components.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/telemetry-features/manual-span-attributes.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Name                        | Type   | Description                           |\n| --------------------------- | ------ | ------------------------------------- |\n| `app.ads.category`          | string | Category for returned ad              |\n| `app.ads.contextKeys`       | string | Context keys used to find related ads |\n| `app.ads.contextKeys.count` | number | Count of unique context keys used     |\n| `app.ads.count`             | number | Count of ads returned to user         |\n| `app.ads.ad_request_type`   | string | Either `targeted` or `not_targeted`   |\n| `app.ads.ad_response_type`  | string | Either `targeted` or `random`         |\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Logging with Print Statements in Python\nDESCRIPTION: A simple Python implementation showing how a junior developer might use print statements for logging application progress and errors, with different semantic uses of print() for work execution, informational messages, and error reporting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nstart_time = time.time()\ntry:\n    how_long_int = int(how_long)\n    print(f\"Starting to practice The Telemetry for {how_long_int} second(s)\")\n    while time.time() - start_time < how_long_int:\n        next_char = random.choice(string.punctuation)\n        print(next_char, end=\"\", flush=True)\n        time.sleep(0.5)\n    print(\"\\nDone practicing\")\nexcept ValueError as ve:\n    print(f\"I need an integer value for the time to practice: {ve}\")\n    return False\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n    return False\nreturn True\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Extension to php.ini\nDESCRIPTION: INI configuration to enable the OpenTelemetry extension in PHP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/php.md#2025-04-09_snippet_2\n\nLANGUAGE: INI\nCODE:\n```\n[opentelemetry]\nextension=opentelemetry.so\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter for Jaeger in OpenTelemetry Collector\nDESCRIPTION: Updated configuration using OTLP exporter to connect to Jaeger. Uses the default OTLP/gRPC port 4317.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jaeger-exporter-collector-migration.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp/jaeger: # Jaeger supports OTLP directly. The default port for OTLP/gRPC is 4317\n    endpoint: https://jaeger.example.com:4317\n\nservice:\n  pipelines:\n    exporters: [otlp/jaeger]\n```\n\n----------------------------------------\n\nTITLE: Adding Grpc.Net.Client Reference in .NET Project\nDESCRIPTION: Example of adding the Grpc.Net.Client package reference to a .NET project's .csproj file to support the OTLP gRPC exporter protocol on .NET 6 and higher.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: csproj\nCODE:\n```\n<PackageReference Include=\"Grpc.Net.Client\" Version=\"2.65.0\" />\n```\n\n----------------------------------------\n\nTITLE: Creating New Spans with Custom Attributes\nDESCRIPTION: Demonstrates creating new spans with root configuration, links, and custom attributes for HTTP requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/frontend.md#2025-04-09_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nspan = tracer.startSpan(`HTTP ${method}`, {\n  root: true,\n  kind: SpanKind.SERVER,\n  links: [{ context: syntheticSpan.spanContext() }],\n  attributes: {\n    'app.synthetic_request': true,\n    [SEMATTRS_HTTP_TARGET]: target,\n    [SEMATTRS_HTTP_STATUS_CODE]: response.statusCode,\n    [SEMATTRS_HTTP_METHOD]: method,\n    [SEMATTRS_HTTP_USER_AGENT]: headers['user-agent'] || '',\n    [SEMATTRS_HTTP_URL]: `${headers.host}${url}`,\n    [SEMATTRS_HTTP_FLAVOR]: httpVersion,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Span Links in JavaScript\nDESCRIPTION: Shows how to create spans with links to other causally related spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst someFunction = (spanToLinkFrom) => {\n  const options = {\n    links: [\n      {\n        context: spanToLinkFrom.spanContext(),\n      },\n    ],\n  };\n\n  tracer.startActiveSpan('app.someFunction', options, (span) => {\n    // Do some work...\n\n    span.end();\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Components in YAML\nDESCRIPTION: This YAML configuration adds the Zipkin exporter and batch processor to the OpenTelemetry Collector. It specifies the import paths and Go module versions for receivers, processors, and exporters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  - import: go.opentelemetry.io/collector/receiver/otlpreceiver\n    gomod: go.opentelemetry.io/collector v0.57.2\n\nprocessors:\n  - import: go.opentelemetry.io/collector/processor/batchprocessor\n    gomod: go.opentelemetry.io/collector v0.57.2\n\nexporters:\n  - import: go.opentelemetry.io/collector/exporter/otlpexporter\n    gomod: go.opentelemetry.io/collector v0.57.2\n  - import: go.opentelemetry.io/collector/exporter/loggingexporter\n    gomod: go.opentelemetry.io/collector v0.57.2\n  - import: github.com/open-telemetry/opentelemetry-collector-contrib/exporter/zipkinexporter\n    gomod:\n      github.com/open-telemetry/opentelemetry-collector-contrib/exporter/zipkinexporter\n      v0.57.2\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Oat++ HTTP Server\nDESCRIPTION: Commands to build and run the Oat++ HTTP server using CMake and the generated executable.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmkdir build\ncd build\ncmake ..\ncmake --build .\n./dice-server\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP gRPC Exporters in C++\nDESCRIPTION: Implements initialization of OpenTelemetry exporters using gRPC protocol. Includes setup for tracers, metrics, and loggers with gRPC endpoints and SSL configuration. Configures batch processing for spans and periodic exporting for metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/cpp/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: cpp\nCODE:\n```\n#include \"opentelemetry/exporters/otlp/otlp_grpc_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_grpc_exporter_options.h\"\n#include \"opentelemetry/sdk/trace/processor.h\"\n#include \"opentelemetry/sdk/trace/batch_span_processor_factory.h\"\n#include \"opentelemetry/sdk/trace/batch_span_processor_options.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider_factory.h\"\n#include \"opentelemetry/trace/provider.h\"\n#include \"opentelemetry/sdk/trace/tracer_provider.h\"\n\n#include \"opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_grpc_metric_exporter_options.h\"\n#include \"opentelemetry/metrics/provider.h\"\n#include \"opentelemetry/sdk/metrics/aggregation/default_aggregation.h\"\n#include \"opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader.h\"\n#include \"opentelemetry/sdk/metrics/export/periodic_exporting_metric_reader_factory.h\"\n#include \"opentelemetry/sdk/metrics/meter_context_factory.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider.h\"\n#include \"opentelemetry/sdk/metrics/meter_provider_factory.h\"\n\n#include \"opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_factory.h\"\n#include \"opentelemetry/exporters/otlp/otlp_grpc_log_record_exporter_options.h\"\n#include \"opentelemetry/logs/provider.h\"\n#include \"opentelemetry/sdk/logs/logger_provider_factory.h\"\n#include \"opentelemetry/sdk/logs/processor.h\"\n#include \"opentelemetry/sdk/logs/simple_log_record_processor_factory.h\"\n\nnamespace trace_api = opentelemetry::trace;\nnamespace trace_sdk = opentelemetry::sdk::trace;\n\nnamespace metric_sdk = opentelemetry::sdk::metrics;\nnamespace metrics_api = opentelemetry::metrics;\n\nnamespace otlp = opentelemetry::exporter::otlp;\n\nnamespace logs_api = opentelemetry::logs;\nnamespace logs_sdk = opentelemetry::sdk::logs;\n\nvoid InitTracer()\n{\n  trace_sdk::BatchSpanProcessorOptions bspOpts{};\n  opentelemetry::exporter::otlp::OtlpGrpcExporterOptions opts;\n  opts.endpoint = \"localhost:4317\";\n  opts.use_ssl_credentials = true;\n  opts.ssl_credentials_cacert_as_string = \"ssl-certificate\";\n  auto exporter  = otlp::OtlpGrpcExporterFactory::Create(opts);\n  auto processor = trace_sdk::BatchSpanProcessorFactory::Create(std::move(exporter), bspOpts);\n  std::shared_ptr<opentelemetry::trace_api::TracerProvider> provider =\n      trace_sdk::TracerProviderFactory::Create(std::move(processor));\n  // Set the global trace provider\n  trace_api::Provider::SetTracerProvider(provider);\n}\n\nvoid InitMetrics()\n{\n  otlp::OtlpGrpcMetricExporterOptions opts;\n  opts.endpoint = \"localhost:4317\";\n  opts.use_ssl_credentials = true;\n  opts.ssl_credentials_cacert_as_string = \"ssl-certificate\";\n  auto exporter = otlp::OtlpGrpcMetricExporterFactory::Create(opts);\n  metric_sdk::PeriodicExportingMetricReaderOptions reader_options;\n  reader_options.export_interval_millis = std::chrono::milliseconds(1000);\n  reader_options.export_timeout_millis  = std::chrono::milliseconds(500);\n  auto reader = metric_sdk::PeriodicExportingMetricReaderFactory::Create(std::move(exporter), reader_options);\n  auto context = metric_sdk::MeterContextFactory::Create();\n  context->AddMetricReader(std::move(reader));\n  auto u_provider = metric_sdk::MeterProviderFactory::Create(std::move(context));\n  std::shared_ptr<opentelemetry::metrics::MeterProvider> provider(std::move(u_provider));\n  metrics_api::Provider::SetMeterProvider(provider);\n}\n\nvoid InitLogger()\n{\n  otlp::OtlpGrpcLogRecordExporterOptions opts;\n  opts.endpoint = \"localhost:4317\";\n  opts.use_ssl_credentials = true;\n  opts.ssl_credentials_cacert_as_string = \"ssl-certificate\";\n  auto exporter  = otlp::OtlpGrpcLogRecordExporterFactory::Create(opts);\n  auto processor = logs_sdk::SimpleLogRecordProcessorFactory::Create(std::move(exporter));\n  nostd::shared_ptr<logs_api::LoggerProvider> provider(\n      logs_sdk::LoggerProviderFactory::Create(std::move(processor)));\n  logs_api::Provider::SetLoggerProvider(provider);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to a Span in Python\nDESCRIPTION: Demonstrates how to set an attribute on a span to provide additional context about the operation, in this case recording the count of recommended products.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nspan.set_attribute(\"app.products_recommended.count\", len(prod_list))\n```\n\n----------------------------------------\n\nTITLE: Configuring kubelet Tracing in Kubernetes\nDESCRIPTION: YAML configuration for enabling OpenTelemetry tracing in kubelet. It enables the KubeletTracing feature gate and sets the same tracing settings as kube-apiserver.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/k8s-runtime-observability/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kubelet.config.k8s.io/v1beta1\nkind: KubeletConfiguration\nfeatureGates:\n  KubeletTracing: true\ntracing:\n  endpoint: host.k3d.internal:4317\n  samplingRatePerMillion: 1000000 # 100%\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry SDK and Instrumentation Libraries\nDESCRIPTION: Composer command to install the OpenTelemetry SDK, OTLP exporter, and auto-instrumentation packages for Slim Framework and PSR-18.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/php.md#2025-04-09_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncomposer require \\\n    open-telemetry/sdk \\\n    open-telemetry/exporter-otlp \\\n    open-telemetry/opentelemetry-auto-slim \\\n    open-telemetry/opentelemetry-auto-psr18\n```\n\n----------------------------------------\n\nTITLE: Extracting OpenTelemetry Module Package from Container\nDESCRIPTION: Command to copy the built OpenTelemetry module package from the Docker container to the host system for deployment on target servers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker cp <container_name>:/otel-webserver-module/build/opentelemetry-webserver-sdk-x64-linux.tgz <target-directory>\n```\n\n----------------------------------------\n\nTITLE: Unsetting CLR Profiler Environment Variables for .NET\nDESCRIPTION: This snippet shows the environment variables that can be unset or removed if only source instrumentation is acceptable for .NET applications. These variables are typically used for bytecode instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/configuration.md#2025-04-09_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nCOR_ENABLE_PROFILING\nCOR_PROFILER\nCOR_PROFILER_PATH_32\nCOR_PROFILER_PATH_64\nCORECLR_ENABLE_PROFILING\nCORECLR_PROFILER\nCORECLR_PROFILER_PATH\nCORECLR_PROFILER_PATH_32\nCORECLR_PROFILER_PATH_64\n```\n\n----------------------------------------\n\nTITLE: Initializing a Tracer in Python with OpenTelemetry\nDESCRIPTION: Creates a tracer object from the tracer provider for the recommendation service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/recommendation.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntracer = trace.get_tracer_provider().get_tracer(\"recommendation\")\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Logs Export in OpenTelemetry Collector\nDESCRIPTION: YAML configuration for sending internal logs to an OTLP/HTTP backend.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservice:\n  telemetry:\n    logs:\n      processors:\n        - batch:\n            exporter:\n              otlp:\n                protocol: http/protobuf\n                endpoint: https://backend:4318\n```\n\n----------------------------------------\n\nTITLE: Basic OCB Builder Configuration\nDESCRIPTION: Initial YAML configuration for the OpenTelemetry Collector builder, defining basic distribution settings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/custom-collector.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndist:\n  name: otelcol-dev\n  description: Basic OTel Collector distribution for Developers\n  output_path: ./otelcol-dev\n```\n\n----------------------------------------\n\nTITLE: Semistructured Log Example\nDESCRIPTION: An example of a semistructured log that uses key-value pairs for some fields but doesn't follow a standard format like JSON. While more machine-readable than unstructured logs, it still requires custom parsing logic.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/logs.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n2024-08-04T12:45:23Z level=ERROR service=user-authentication userId=12345 action=login message=\"Failed login attempt\" error=\"Invalid password\" ipAddress=192.168.1.1 userAgent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Daemonset\nDESCRIPTION: YAML configuration for deploying OpenTelemetry Collector as a Daemonset, enabling Kubernetes attributes processor, kubelet metrics, and logs collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nmode: daemonset\n\nimage:\n  repository: otel/opentelemetry-collector-k8s\n\npresets:\n  # enables the k8sattributesprocessor and adds it to the traces, metrics, and logs pipelines\n  kubernetesAttributes:\n    enabled: true\n  # enables the kubeletstatsreceiver and adds it to the metrics pipelines\n  kubeletMetrics:\n    enabled: true\n  # Enables the filelogreceiver and adds it to the logs pipelines\n  logsCollection:\n    enabled: true\n## The chart only includes the loggingexporter by default\n## If you want to send your data somewhere you need to\n## configure an exporter, such as the otlpexporter\n# config:\n#   exporters:\n#     otlp:\n#       endpoint: \"<SOME BACKEND>\"\n#   service:\n#     pipelines:\n#       traces:\n#         exporters: [ otlp ]\n#       metrics:\n#         exporters: [ otlp ]\n#       logs:\n#         exporters: [ otlp ]\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Module for NGINX\nDESCRIPTION: NGINX configuration for the OpenTelemetry module that defines the service name, exporter endpoint, and other telemetry settings. This configuration enables the module and configures it to send spans via OTLP to a specified endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nNginxModuleEnabled ON;\nNginxModuleOtelSpanExporter otlp;\nNginxModuleOtelExporterEndpoint localhost:4317;\nNginxModuleServiceName DemoService;\nNginxModuleServiceNamespace DemoServiceNamespace;\nNginxModuleServiceInstanceId DemoInstanceId;\nNginxModuleResolveBackends ON;\nNginxModuleTraceAsError ON;\n```\n\n----------------------------------------\n\nTITLE: Executing Updated SSL Check Script\nDESCRIPTION: This shell command runs the updated ssl_check.sh script that sends metrics using OTLP JSON format.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\n./ssl_check.sh opentelemetry.io\n```\n\n----------------------------------------\n\nTITLE: Uncompressing OpenTelemetry Module Package on Target System\nDESCRIPTION: Command to extract the OpenTelemetry module package to the /opt directory on the target system where Apache HTTP Server is installed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ntar -xvf opentelemetry-webserver-sdk-x64-linux.tgz -C /opt\n```\n\n----------------------------------------\n\nTITLE: Executing SSL Check and Sending Metrics via Netcat\nDESCRIPTION: This shell command executes the ssl_check.sh script and pipes the output to netcat, sending the metrics to the configured Carbon Receiver.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n./ssl_check.sh opentelemetry.io | nc 127.0.0.1 8080\n```\n\n----------------------------------------\n\nTITLE: Skipping Instrumentations via CLI\nDESCRIPTION: Command to skip specific instrumentations when building the project using the dotnet CLI. This method allows specifying the SkippedInstrumentations property directly in the build command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/nuget-packages.md#2025-04-09_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet build -p:SkippedInstrumentations=StackExchange.Redis%3BMongoDB.Driver.Core\n```\n\n----------------------------------------\n\nTITLE: Updating OpenTelemetry Collector ConfigMap on GKE\nDESCRIPTION: Shell command to update the Kubernetes ConfigMap with modified OpenTelemetry Collector configuration, allowing for hot-swapping of collector configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create configmap otel-config --from-file=./otel-config.yaml --dry-run=client -n otel-collector -o yaml | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for Java Registry Redirect Page\nDESCRIPTION: YAML front matter that sets up a redirect page for the OpenTelemetry Java registry. It defines the page title, description, redirect URL, build instructions, and weight for navigation ordering.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Instrumentation libraries, exporters and other useful components for\n  OpenTelemetry Java\nredirect: /ecosystem/registry/?language=java\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Factory Function for Receiver\nDESCRIPTION: Basic factory function setup for the tailtracer receiver before implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_12\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"go.opentelemetry.io/collector/receiver\"\n)\n\n// NewFactory creates a factory for tailtracer receiver.\nfunc NewFactory() receiver.Factory {\n\treturn nil\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Front Matter Configuration for OpenTelemetry Registry Page in YAML\nDESCRIPTION: YAML front matter configuration for the OpenTelemetry Registry page. It defines the page title, description, layout, and various configuration options including aliases and redirects to handle legacy URLs for registry entries.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/ecosystem/registry/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription: >\n  Find libraries, plugins, integrations, and other useful tools for using and\n  extending OpenTelemetry.\ntype: default\nlayout: registry\nbody_class: registry td-content\nweight: 20\n\n# =============================================================================\n# IMPORTANT:\n# IMPORTANT: Non-English locales: DO NOT include the front matter entries below\n# IMPORTANT:\n# =============================================================================\n\naliases: [/registry/*]\noutputs: [html, json]\n\n# The redirects and aliases implement catch-all rules for old registry entries;\n# we don't publish individual entry pages anymore.\n#\n# We can't use the catch-all `/ecosystem/registry/*`, because that creates a\n# self-loop with `/ecosystem/registry/index.html`. So we use the following\n# redirect rule to avoid the loop, as suggested by Netlify support\n# (email support ID 159489):\nredirects: [{ from: /ecosystem/registry*, to: '/ecosystem/registry?' }]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Span Processor in PHP with OpenTelemetry\nDESCRIPTION: Demonstrates how to configure a span processor in PHP using OpenTelemetry. It shows setting up a SimpleSpanProcessor with a ConsoleSpanExporter.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/instrumentation.md#2025-04-09_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n$tracerProvider = TracerProvider::builder()\n  ->addSpanProcessor(new SimpleSpanProcessor(new ConsoleSpanExporterFactory()->create()))\n  ->build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Filelog Receiver for Kubernetes\nDESCRIPTION: Basic configuration for the Filelog Receiver to collect container logs from Kubernetes pods. Includes path patterns for log collection and container parsing operator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nfilelog:\n  include:\n    - /var/log/pods/*/*/*.log\n  exclude:\n    # Exclude logs from all containers named otel-collector\n    - /var/log/pods/*/otel-collector/*.log\n  start_at: end\n  include_file_path: true\n  include_file_name: false\n  operators:\n    # parse container logs\n    - type: container\n      id: container-parser\n```\n\n----------------------------------------\n\nTITLE: Modifying SSL Check Script to Include Service Attributes\nDESCRIPTION: This shell script modification adds service.name and service.namespace as data point attributes to the metric.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nmetricName=\"tls.server.not_after.time_left;unit=s;service.name=otel-webserver;service.namespace=opentelemetry.io\"\necho \"${metricName} ${secondsLeft} ${now}\"\n```\n\n----------------------------------------\n\nTITLE: Installing Gin and MongoDB Driver for Go Web Application\nDESCRIPTION: Commands to install the Gin web framework and MongoDB driver packages for a Go application. These dependencies are required for creating the to-do app service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/go-web-app-instrumentation/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngo get -u github.com/gin-gonic/gin\ngo get go.mongodb.org/mongo-driver/mongo\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Exporter with Environment Variables\nDESCRIPTION: Demonstrates how to configure an OTLP exporter using environment variables to reference secure tokens.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-operator-q-and-a/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nexporters:\n  otlp:\n    endpoint: '<your_backend_endpoint_here>'\n    headers:\n      '<token_name>': '${TOKEN_VALUE}'\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Extension on Alpine Linux (APK)\nDESCRIPTION: Shell commands to install the OpenTelemetry extension on Alpine Linux using APK packages from the testing repository.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/php.md#2025-04-09_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\necho \"@testing https://dl-cdn.alpinelinux.org/alpine/edge/testing\" >> /etc/apk/repositories\napk add php php81-pecl-opentelemetry@testing\nphp --ri opentelemetry\n```\n\n----------------------------------------\n\nTITLE: Configuring OS Resource Provider in OpenTelemetry Java\nDESCRIPTION: Example of disabling the OS resource provider using the otel.java.disabled.resource.providers system property. This demonstrates how to exclude specific ResourceProvider implementations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n-Dotel.java.disabled.resource.providers=io.opentelemetry.instrumentation.resources.OsResourceProvider\n```\n\n----------------------------------------\n\nTITLE: Example App with OpenTelemetry Metrics and Tracing in TypeScript\nDESCRIPTION: Shows a complete Express server application in TypeScript that uses OpenTelemetry for both metrics and tracing. It acquires a tracer and meter for the dice-server scope.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_51\n\nLANGUAGE: TypeScript\nCODE:\n```\n/*app.ts*/\nimport { metrics, trace } from '@opentelemetry/api';\nimport express, { Express } from 'express';\nimport { rollTheDice } from './dice';\n\nconst tracer = trace.getTracer('dice-server', '0.1.0');\nconst meter = metrics.getMeter('dice-server', '0.1.0');\n\nconst PORT: number = parseInt(process.env.PORT || '8080');\nconst app: Express = express();\n\napp.get('/rolldice', (req, res) => {\n  const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;\n  if (isNaN(rolls)) {\n    res\n      .status(400)\n      .send(\"Request parameter 'rolls' is missing or not a number.\");\n    return;\n  }\n  res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Project Structure\nDESCRIPTION: Console output showing the directory structure of the OpenTelemetry Collector project with custom receiver implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_27\n\nLANGUAGE: console\nCODE:\n```\n.\n├── builder-config.yaml\n├── config.yaml\n├── go.work\n├── go.work.sum\n├── ocb\n├── otelcol-dev\n│   ├── components.go\n│   ├── components_test.go\n│   ├── go.mod\n│   ├── go.sum\n│   ├── main.go\n│   ├── main_others.go\n│   ├── main_windows.go\n│   └── otelcol-dev\n└── tailtracer\n    ├── config.go\n    ├── factory.go\n    ├── go.mod\n    └── trace-receiver.go\n```\n\n----------------------------------------\n\nTITLE: Example of SQL Query with Sqlcommenter Injection\nDESCRIPTION: This SQL snippet shows how Sqlcommenter injects a comment into SQL statements to enable context propagation for the database, enhancing traceability.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * from FOO /*traceparent='00-4bf92f3577b34da6a3ce929d0e0e4736-00f067aa0ba902b7-01',tracestate='congo%3Dt61rcWkgMzE%2Crojo%3D00f067aa0ba902b7'*/\n```\n\n----------------------------------------\n\nTITLE: Creating Backend System Trace Spans\nDESCRIPTION: Function to create and configure spans representing backend system operations, including trace ID, span ID, timestamps, and operation metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_40\n\nLANGUAGE: go\nCODE:\n```\nfunc appendTraceSpans(backend *BackendSystem, backendScopeSpans *ptrace.ScopeSpans, atmScopeSpans *ptrace.ScopeSpans) {\n\ttraceId := NewTraceID()\n\tbackendSpanId := NewSpanID()\n\n\tbackendDuration, _ := time.ParseDuration(\"1s\")\n\tbackendSpanStartTime := time.Now()\n\tbackendSpanFinishTime := backendSpanStartTime.Add(backendDuration)\n\n\tbackendSpan := backendScopeSpans.Spans().AppendEmpty()\n\tbackendSpan.SetTraceID(traceId)\n\tbackendSpan.SetSpanID(backendSpanId)\n\tbackendSpan.SetName(backend.Endpoint)\n\tbackendSpan.SetKind(ptrace.SpanKindServer)\n\tbackendSpan.SetStartTimestamp(pcommon.NewTimestampFromTime(backendSpanStartTime))\n\tbackendSpan.SetEndTimestamp(pcommon.NewTimestampFromTime(backendSpanFinishTime))\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Repository for Package Building\nDESCRIPTION: Commands to clone the OpenTelemetry C++ contrib repository which contains the Apache HTTP Server module for installation on a target system.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-cpp-contrib\ncd  opentelemetry-cpp-contrib/instrumentation/otel-webserver-module\n```\n\n----------------------------------------\n\nTITLE: Custom Collector Builder Configuration\nDESCRIPTION: YAML configuration for building a custom OpenTelemetry Collector with specific modules for production use.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/any-metric-receiver.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ndist:\n  name: otelcol-any-metric\n  description: Custom OpenTelemetry Collector for receiving any kind of metric\n  output_path: ./\n\nexporters:\n  - gomod: go.opentelemetry.io/collector/exporter/debugexporter v0.89.0\n  - gomod: go.opentelemetry.io/collector/exporter/otlpexporter v0.89.0\n  - gomod: go.opentelemetry.io/collector/exporter/otlphttpexporter v0.89.0\n\nprocessors:\n  - gomod:\n      github.com/open-telemetry/opentelemetry-collector-contrib/processor/transformprocessor\n      v0.89.0\n\nreceivers:\n  - gomod: go.opentelemetry.io/collector/receiver/otlpreceiver v0.89.0\n  - gomod:\n      github.com/open-telemetry/opentelemetry-collector-contrib/receiver/carbonreceiver\n      v0.89.0\n```\n\n----------------------------------------\n\nTITLE: Context Injection in Java OpenTelemetry\nDESCRIPTION: Demonstrates how to inject context for downstream service calls, including span creation and proper context propagation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSpan span = tracer.spanBuilder(\"send\")\n            .setSpanKind(SpanKind.CLIENT)\n            .startSpan();\n\n// tornar o trecho ativo para que qualquer telemetria aninhada seja correlacionada\n// até mesmo chamadas de rede podem ter camadas aninhadas de trechos, logs ou eventos\ntry (Scope unused = span.makeCurrent()) {\n  // injetar o contexto\n  propagator.inject(Context.current(), transportLayer, setter);\n  send();\n} catch (Exception e) {\n  span.recordException(e);\n  span.setStatus(StatusCode.ERROR);\n  throw e;\n} finally {\n  span.end();\n}\n```\n\n----------------------------------------\n\nTITLE: Updated OpenTelemetry Module Configuration for Docker Compose\nDESCRIPTION: Modified NGINX OpenTelemetry module configuration that changes the exporter endpoint to use the collector service name instead of localhost, ensuring the telemetry data is properly sent to the collector in the Docker Compose environment.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\nNginxModuleEnabled ON;\nNginxModuleOtelSpanExporter otlp;\nNginxModuleOtelExporterEndpoint collector:4317;\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry via Environment Variables\nDESCRIPTION: Shell commands to set environment variables for configuring OpenTelemetry auto-instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/php.md#2025-04-09_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nOTEL_PHP_AUTOLOAD_ENABLED=true \\\nOTEL_SERVICE_NAME=your-service-name \\\nOTEL_TRACES_EXPORTER=otlp \\\nOTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf \\\nOTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318 \\\nOTEL_PROPAGATORS=baggage,tracecontext \\\nphp myapp.php\n```\n\n----------------------------------------\n\nTITLE: Build Info Configuration\nDESCRIPTION: Maven and Gradle configurations for generating build-info.properties file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/sdk-configuration.md#2025-04-09_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<build>\n    <finalName>${project.artifactId}</finalName>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n            <executions>\n                <execution>\n                    <goals>\n                        <goal>build-info</goal>\n                        <goal>repackage</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n    </plugins>\n</build>\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nspringBoot {\n  buildInfo {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sequence Diagram of Target Allocator's Target Distribution Process\nDESCRIPTION: This Mermaid sequence diagram illustrates the process flow of how the Target Allocator discovers metrics targets, discovers available Collectors, assigns targets to Collectors, and enables Collectors to query for and scrape their assigned targets.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nsequenceDiagram\n  participant Target Allocator\n  participant Metrics Targets\n  participant OTel Collectors\n  Target Allocator ->>Metrics Targets: 1. Discover Metrics targets\n  Target Allocator ->>OTel Collectors: 2. Discover available Collectors\n  Target Allocator ->>Target Allocator: 3. Assign Metrics targets\n  OTel Collectors ->>Target Allocator: 4. Query TA for Metrics endpoints scrape\n  OTel Collectors ->>Metrics Targets: 5. Scrape Metrics target\n```\n\n----------------------------------------\n\nTITLE: Implementing Traces to Metrics Connector Creation\nDESCRIPTION: Defines the connector creation function that specifies the consumer type and initializes the connector for converting traces to metrics.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_6\n\nLANGUAGE: go\nCODE:\n```\nfunc createTracesToMetricsConnector(ctx context.Context, params connector.CreateSettings, cfg component.Config, nextConsumer consumer.Metrics) (connector.Traces, error) {\n    c, err := newConnector(params.Logger, cfg)\n    if err != nil {\n        return nil, err\n    }\n    c.metricsConsumer = nextConsumer\n    return c, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Tailtracer Receiver Factory in Go\nDESCRIPTION: Creates a factory for the tailtracer receiver that handles initialization with proper configuration and consumer setup. Includes default configuration settings and the createTracesReceiver function to instantiate a new receiver.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_21\n\nLANGUAGE: go\nCODE:\n```\npackage tailtracer\n\nimport (\n\t\"context\"\n\t\"time\"\n\n\t\"go.opentelemetry.io/collector/component\"\n\t\"go.opentelemetry.io/collector/consumer\"\n\t\"go.opentelemetry.io/collector/receiver\"\n)\n\nvar (\n\ttypeStr         = component.MustNewType(\"tailtracer\")\n)\n\nconst (\n\tdefaultInterval = 1 * time.Minute\n)\n\nfunc createDefaultConfig() component.Config {\n\treturn &Config{\n\t\tInterval: string(defaultInterval),\n\t}\n}\n\nfunc createTracesReceiver(_ context.Context, params receiver.Settings, baseCfg component.Config, consumer consumer.Traces) (receiver.Traces, error) {\n\n\tlogger := params.Logger\n\ttailtracerCfg := baseCfg.(*Config)\n\n\ttraceRcvr := &tailtracerReceiver{\n\t\tlogger:       logger,\n\t\tnextConsumer: consumer,\n\t\tconfig:       tailtracerCfg,\n\t}\n\n\treturn traceRcvr, nil\n}\n\n// NewFactory creates a factory for tailtracer receiver.\nfunc NewFactory() receiver.Factory {\n\treturn receiver.NewFactory(\n\t\ttypeStr,\n\t\tcreateDefaultConfig,\n\t\treceiver.WithTraces(createTracesReceiver, component.StabilityLevelAlpha))\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Empty Maps in OpenTelemetry Collector YAML\nDESCRIPTION: Shows the correct way to configure empty maps in the OpenTelemetry Collector configuration to avoid null map issues during config resolution. Empty maps should be represented with {} instead of null values.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/troubleshooting.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors: {}\n```\n\n----------------------------------------\n\nTITLE: Exporting OpenTelemetry Data to Console\nDESCRIPTION: Command to run a Python application with OpenTelemetry instrumentation that exports collected telemetry data to the console for debugging.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-generative-ai/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nopentelemetry-instrument --traces_exporter console --metrics_exporter console python main.py\n```\n\n----------------------------------------\n\nTITLE: Port Forwarding for Jaeger UI Access\nDESCRIPTION: Command to set up port forwarding for accessing the Jaeger UI interface locally for trace visualization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ kubectl port-forward deployments/my-in-memory 16686\nForwarding from 127.0.0.1:16686 -> 16686\n```\n\n----------------------------------------\n\nTITLE: Running OpenTelemetry Collector\nDESCRIPTION: Command to start the OpenTelemetry Collector using the custom configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n./otelcol-dev/otelcol-dev --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry NGINX Module Trace Logs\nDESCRIPTION: Example of trace logs generated by the NGINX OpenTelemetry module that show the execution of different NGINX modules during request processing. These logs are produced when NginxModuleTraceAsError is set to ON.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_8\n\nLANGUAGE: log\nCODE:\n```\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: startMonitoringRequest: Starting Request Monitoring for: / HTTP/1.1\nHost, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: startMonitoringRequest: WebServer Context: DemoServiceNamespaceDemoServiceDemoInstanceId, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: startMonitoringRequest: Request Monitoring begins successfully , client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_startInteraction: Starting a new module interaction for: ngx_http_realip_module, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_payload_decorator: Key : tracestate, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_payload_decorator: Value : , client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_payload_decorator: Key : baggage, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_payload_decorator: Value : , client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_payload_decorator: Key : traceparent, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_payload_decorator: Value : 00-987932d28550c0a1c0a82db380a075a8-fc0bf2248e93dc42-01, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_startInteraction: Interaction begin successful, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n2022/08/12 09:31:12 [error] 70#70: *3 mod_opentelemetry: otel_stopInteraction: Stopping the Interaction for: ngx_http_realip_module, client: 172.17.0.1, server: localhost, request: \"GET / HTTP/1.1\", host: \"localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Running a TypeScript Application with OpenTelemetry Instrumentation\nDESCRIPTION: Command to start a TypeScript application with OpenTelemetry instrumentation. The --require flag loads the instrumentation file before running the main application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nts-node --require ./instrumentation.ts app.ts\n```\n\n----------------------------------------\n\nTITLE: Overriding Resource Attributes\nDESCRIPTION: Examples of overriding specific resource attributes using environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/sdk-configuration.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_RESOURCE_ATTRIBUTES=\"deployment.environment=prod\"\nexport OTEL_RESOURCE_ATTRIBUTES_DEPLOYMENT_ENVIRONMENT=\"prod\"\n```\n\n----------------------------------------\n\nTITLE: Structured Log Example in JSON\nDESCRIPTION: An example of a structured log in JSON format showing a user authentication event with comprehensive metadata including timestamp, user information, request details, and response data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/logs.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"timestamp\": \"2024-08-04T12:34:56.789Z\",\n  \"level\": \"INFO\",\n  \"service\": \"user-authentication\",\n  \"environment\": \"production\",\n  \"message\": \"User login successful\",\n  \"context\": {\n    \"userId\": \"12345\",\n    \"username\": \"johndoe\",\n    \"ipAddress\": \"192.168.1.1\",\n    \"userAgent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\"\n  },\n  \"transactionId\": \"abcd-efgh-ijkl-mnop\",\n  \"duration\": 200,\n  \"request\": {\n    \"method\": \"POST\",\n    \"url\": \"/api/v1/login\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\",\n      \"Accept\": \"application/json\"\n    },\n    \"body\": {\n      \"username\": \"johndoe\",\n      \"password\": \"******\"\n    }\n  },\n  \"response\": {\n    \"statusCode\": 200,\n    \"body\": {\n      \"success\": true,\n      \"token\": \"jwt-token-here\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New OpenTelemetry Connector Factory\nDESCRIPTION: Implements the factory creation function that combines all components into a complete connector factory.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nfunc NewFactory() connector.Factory {\n    return connector.NewFactory(\n    typeStr,\n    createDefaultConfig,\n    connector.WithTracesToMetrics(createTracesToMetricsConnector, component.StabilityLevelAlpha))\n}\n```\n\n----------------------------------------\n\nTITLE: Building Netlify Information Table with Hugo Template\nDESCRIPTION: Creates a markdown table displaying build information conditionally based on available environment variables. The template includes logic to format dates, create links to deployment logs and GitHub PRs, and handle different build contexts.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/site-build-info.md#2025-04-09_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\nNetlify build information:\n\n| Attribute | Value |\n|---|---|\nNetlify built | `{{ $isNetlifyBuilt }}`\n{{/* */ -}}\n\n{{/* Don't show timestamp for local builds to avoid affecting site diffs. */ -}}\n{{ with $isNetlifyBuilt -}}\n  Date/time[^date] | {{ $now.Format \"2006-01-02 15:04 MST\" }}[^local-time]\n{{ end -}}\n{{/* */ -}}\n\n{{ with $buildID -}}\n  ID | `{{.}}`\n{{ end -}}\n{{/* */ -}}\n\n{{ with $deployID -}}\n  Deploy log | [{{ . }}](https://app.netlify.com/teams/opentelemetry/builds/{{ . }})\n{{ end -}}\n{{/* */ -}}\n\n{{ with $reviewID -}}\n  Build context |\n  {{- if $isPR -}}\n    [PR #{{ . }}](https://github.com/open-telemetry/opentelemetry.io/pull/{{ . }})\n  {{ else -}}\n    merge `{{ . }}`\n  {{ end -}}\n{{ end -}}\n{{/* */ -}}\n\nDeploy context | {{ os.Getenv \"CONTEXT\" | default \"local\" }}\n{{/* */ -}}\n\n{{ with $commitRef -}}\n  Commit | [@{{substr . 0 7  }}](https://github.com/open-telemetry/opentelemetry.io/commit//{{ . }})\n{{ end -}}\n{{/* */ -}}\n\n{{ with $branch -}}\n  Branch | `{{ . }}`\n{{ end -}}\n{{/* End of table */}}\n```\n\n----------------------------------------\n\nTITLE: Adding Spring Boot Starter AOP Dependency in Maven\nDESCRIPTION: Shows how to add the Spring Boot Starter AOP dependency to a Maven project, which is required for using OpenTelemetry annotations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/annotations.md#2025-04-09_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-aop</artifactId>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: TypeScript and Parcel Setup\nDESCRIPTION: Commands to initialize TypeScript configuration and install Parcel bundler\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/browser.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntsc --init\nnpm install --save-dev parcel\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector with Basic Auth\nDESCRIPTION: YAML configuration for deploying an OpenTelemetry Collector with HTTP Basic Authentication and OTLP exporter to Jaeger.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otel-collector-app\nspec:\n  mode: deployment\n  image: otel/opentelemetry-collector-contrib:0.58.0\n  config: |\n    extensions:\n      basicauth/server:\n        htpasswd:\n          inline: |\n            <REPLACE: your backend credentials, e.g.: \"user-1:1234\">\n\n    receivers:\n      otlp/basicauth:\n        protocols:\n          grpc:\n            auth:\n              authenticator: basicauth/server\n\n    exporters:\n      otlp/jaeger:\n        endpoint: my-in-memory-collector:4317\n        tls:\n          insecure: true\n          insecure_skip_verify: true\n\n    service:\n      extensions: [basicauth/server]\n      pipelines:\n        traces:\n          receivers: [otlp/basicauth]\n          exporters: [otlp/jaeger]\n```\n\n----------------------------------------\n\nTITLE: SSHing into HashiQube for OpenTelemetry Demo App Deployment\nDESCRIPTION: Command to SSH into the HashiQube environment for deploying the OpenTelemetry Demo App.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nvagrant ssh\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Collector with Docker Compose\nDESCRIPTION: Shell commands to clone the OpenTelemetry Collector repository and deploy the demo using Docker Compose.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/apisix/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-collector-contrib.git\ncd opentelemetry-collector-contrib/examples/demo\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Application with OpenTelemetry Instrumentation\nDESCRIPTION: Command to run a TypeScript application with OpenTelemetry instrumentation by requiring the instrumentation file at startup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_47\n\nLANGUAGE: shell\nCODE:\n```\nts-node --require ./instrumentation.ts app.ts\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Module on Target System\nDESCRIPTION: Commands to navigate to the extracted OpenTelemetry module directory and run the installation script on the target system.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd /opt/opentelemetry-webserver-sdk\n./install.sh\n```\n\n----------------------------------------\n\nTITLE: Initializing a MeterProvider in TypeScript\nDESCRIPTION: Sets up a MeterProvider with a ConsoleMetricExporter and necessary resources. This creates the OpenTelemetry metrics infrastructure with a specified service name and version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_45\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport opentelemetry from '@opentelemetry/api';\nimport {\n  ConsoleMetricExporter,\n  MeterProvider,\n  PeriodicExportingMetricReader,\n} from '@opentelemetry/sdk-metrics';\nimport {\n  defaultResource,\n  resourceFromAttributes,\n} from '@opentelemetry/resources';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n} from '@opentelemetry/semantic-conventions';\n\nconst resource = defaultResource().merge(\n  resourceFromAttributes({\n    [ATTR_SERVICE_NAME]: 'dice-server',\n    [ATTR_SERVICE_VERSION]: '0.1.0',\n  }),\n);\n\nconst metricReader = new PeriodicExportingMetricReader({\n  exporter: new ConsoleMetricExporter(),\n  // Default is 60000ms (60 seconds). Set to 10 seconds for demonstrative purposes only.\n  exportIntervalMillis: 10000,\n});\n\nconst myServiceMeterProvider = new MeterProvider({\n  resource: resource,\n  readers: [metricReader],\n});\n\n// Set this MeterProvider to be global to the app being instrumented.\nopentelemetry.metrics.setGlobalMeterProvider(myServiceMeterProvider);\n```\n\n----------------------------------------\n\nTITLE: Processor Configuration Across Multiple Pipelines\nDESCRIPTION: YAML configuration demonstrating how to use the same processor configuration across multiple pipelines.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  batch:\n    send_batch_size: 10000\n    timeout: 10s\n\nservice:\n  pipelines:\n    traces: # a pipeline of \"traces\" type\n      receivers: [zipkin]\n      processors: [batch]\n      exporters: [otlp]\n    traces/2: # another pipeline of \"traces\" type\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp]\n```\n\n----------------------------------------\n\nTITLE: Loading Individual Instrumentation Libraries in JavaScript\nDESCRIPTION: Code to register only specific instrumentation libraries (HTTP and Express) in JavaScript rather than using the auto-instrumentation metapackage. This is useful for optimizing dependency size.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n/*instrumentation.js*/\nconst { HttpInstrumentation } = require(\"@opentelemetry/instrumentation-http\");\nconst { ExpressInstrumentation } = require(\"@opentelemetry/instrumentation-express\");\n\nconst sdk = new NodeSDK({\n  ...\n  instrumentations: [\n    // Express instrumentation expects HTTP layer to be instrumented\n    new HttpInstrumentation(),\n    new ExpressInstrumentation(),\n  ]\n});\n```\n\n----------------------------------------\n\nTITLE: Processing Language Context in Hugo Template for OpenTelemetry Documentation\nDESCRIPTION: This Hugo template shortcode extracts language context from the current page and prepares variables for inclusion in exporter documentation. It supports optional language parameters, handles special cases like .NET naming conventions, and determines OTLP support based on the language.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/languages/exporters/intro.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{/*\n\nIMPORTANT NOTE TO LOCALIZATION TEAMS. ALL LOCALIZATIONS SHOULD USE THIS\nSHORTCODE. DO NOT WRITE YOUR OWN VERSION. INSTEAD, LOCALIZE THE INCLUDE FILE\nnamed by the \"_path\" field below.\n\nThis comment can be deleted once all l10n teams have updated to use this version\nof the intro.md shortcode.\n\n*/ -}}\n{{/*\n\nUsage: [langID]\n\nArgument is an optional language ID (like go or cpp). When omitted, and this\nshortcode is called from a docs/language page, $lang will be set to the language\nID of that page's section. For example $lang will be \"cpp\" for\n\"docs/languages/cpp/...\".\n\nNote: until https://github.com/open-telemetry/opentelemetry.io/issues/6582 is\nfixed, $lang will be `net` for .Net. After that issue is fixed, we'll be able to\neliminate $langIdAsPath and just use $lang.\n\nWe may also be able to avoid having the `name` in the data file, instead picking\nit up from the language section index file.\n\n*/ -}}\n\n{{ $lang := .Get 0 -}}\n{{ $langIdAsPath := \"\" -}}\n{{ with findRESubmatch `^docs/languages/(.*?)(?:$|/)` .Page.File.Path 1 -}}\n  {{ $langIdAsPath = index (index . 0) 1 -}}\n  {{ if not $lang -}}\n    {{ $lang = cond (eq $langIdAsPath \"net\") \"dotnet\" $langIdAsPath -}}\n  {{ end -}}\n{{ end -}}\n\n{{ $name := \"\" -}}\n{{ if $lang -}}\n  {{ $name = (index $.Site.Data.instrumentation $lang).name -}}\n  {{ if not $name -}}\n    {{ warnf \"No name for language '%s' in `instrumentation` data file.\" $lang -}}\n  {{ end -}}\n{{ end -}}\n\n\n{{/*\n\n  NOTE: the language list used by supportsOTLP will grow until all languages\n  are updated to a consistent structure.\n\n  FIXME: move the knowledge of OTLP support into the language's section landing page front matter params\n\n*/ -}}\n\n{{ $args := dict\n    \"_dot\" .\n    \"_path\" \"exporters/intro.md\"\n    \"lang\" $lang\n    \"name\" $name\n    \"langIdAsPath\" $langIdAsPath\n    \"extra\" .Page.Params.abc\n    \"supportsOTLP\" (in (slice \"python\" \"js\" \"java\" \"cpp\" \"dotnet\") $lang)\n    \"zeroConfigPageExists\" (.Page.GetPage (print \"/docs/zero-code/\" $langIdAsPath \"/configuration\" ))\n-}}\n\n{{ partial \"include.md\" $args -}}\n```\n\n----------------------------------------\n\nTITLE: Visualizing PR Creation Process with Mermaid Flowchart\nDESCRIPTION: A mermaid flowchart depicting the step-by-step process of creating a pull request from a fork to the OpenTelemetry.io repository. The diagram shows the workflow from accessing the repository to submitting the final PR.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_6\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nsubgraph first[ ]\ndirection TB\n1[1\\. Go to opentelemetry.io repository] --> 2[2\\. Select New Pull Request]\n2 --> 3[3\\. Select compare across forks]\n3 --> 4[4\\. Select your fork from<br>head repository drop-down menu]\nend\nsubgraph second [ ]\ndirection TB\n5[5\\. Select your branch from<br>the compare drop-down menu] --> 6[6\\. Select Create Pull Request]\n6 --> 7[7\\. Add a description<br>to your PR]\n7 --> 8[8\\. Select Create pull request]\nend\n\nfirst --> second\n\nclassDef grey fill:#dddddd,stroke:#ffffff,stroke-width:px,color:#000000, font-size:15px;\nclassDef white fill:#ffffff,stroke:#000,stroke-width:px,color:#000,font-weight:bold\nclass 1,2,3,4,5,6,7,8 grey\nclass first,second white\n```\n\n----------------------------------------\n\nTITLE: Creating a Node.js Frontend Service with OpenTelemetry Instrumentation\nDESCRIPTION: Node.js application that initializes OpenTelemetry SDK with auto-instrumentation and creates a simple Express server that forwards requests to the NGINX service. It demonstrates how to properly initialize tracing in a Node.js application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/sdk-node');\nconst {\n  getNodeAutoInstrumentations,\n} = require('@opentelemetry/auto-instrumentations-node');\nconst {\n  OTLPTraceExporter,\n} = require('@opentelemetry/exporter-trace-otlp-http');\n\nconst initAndStartSDK = async () => {\n  const sdk = new opentelemetry.NodeSDK({\n    traceExporter: new OTLPTraceExporter(),\n    instrumentations: [getNodeAutoInstrumentations()],\n  });\n\n  await sdk.start();\n  return sdk;\n};\n\nconst main = async () => {\n  try {\n    const sdk = await initAndStartSDK();\n    const express = require('express');\n    const http = require('http');\n    const app = express();\n    app.get('/', (_, response) => {\n      const options = {\n        hostname: 'nginx',\n        port: 80,\n        path: '/',\n        method: 'GET',\n      };\n      const req = http.request(options, (res) => {\n        console.log(`statusCode: ${res.statusCode}`);\n        res.on('data', (d) => {\n          response.send('Hello World');\n        });\n      });\n      req.end();\n    });\n    app.listen(8000, () => {\n      console.log('Listening for requests');\n    });\n  } catch (error) {\n    console.error('Error occurred:', error);\n  }\n};\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Example OpenTelemetry Collector Output\nDESCRIPTION: Sample debug output from the OpenTelemetry Collector showing collected spans and metrics data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/getting-started.md#2025-04-09_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n2022-06-09T20:43:39.915Z        DEBUG   debugexporter/debug_exporter.go:51  ResourceSpans #0\nResource labels:\n     -> telemetry.sdk.language: STRING(python)\n     -> telemetry.sdk.name: STRING(opentelemetry)\n     -> telemetry.sdk.version: STRING(1.12.0rc1)\n     -> telemetry.auto.version: STRING(0.31b0)\n     -> service.name: STRING(unknown_service)\nInstrumentationLibrarySpans #0\nInstrumentationLibrary app\nSpan #0\n    Trace ID       : 7d4047189ac3d5f96d590f974bbec20a\n    Parent ID      : 0b21630539446c31\n    ID             : 4d18cee9463a79ba\n    Name           : roll\n    Kind           : SPAN_KIND_INTERNAL\n    Start time     : 2022-06-09 20:43:37.390134089 +0000 UTC\n    End time       : 2022-06-09 20:43:37.390327687 +0000 UTC\n    Status code    : STATUS_CODE_UNSET\n    Status message :\nAttributes:\n     -> roll.value: INT(5)\nInstrumentationLibrarySpans #1\nInstrumentationLibrary opentelemetry.instrumentation.flask 0.31b0\nSpan #0\n    Trace ID       : 7d4047189ac3d5f96d590f974bbec20a\n    Parent ID      :\n    ID             : 0b21630539446c31\n    Name           : /rolldice\n    Kind           : SPAN_KIND_SERVER\n    Start time     : 2022-06-09 20:43:37.388733595 +0000 UTC\n    End time       : 2022-06-09 20:43:37.390723792 +0000 UTC\n    Status code    : STATUS_CODE_UNSET\n    Status message :\nAttributes:\n     -> http.method: STRING(GET)\n     -> http.server_name: STRING(127.0.0.1)\n     -> http.scheme: STRING(http)\n     -> net.host.port: INT(5000)\n     -> http.host: STRING(localhost:5000)\n     -> http.target: STRING(/rolldice)\n     -> net.peer.ip: STRING(127.0.0.1)\n     -> http.user_agent: STRING(curl/7.82.0)\n     -> net.peer.port: INT(53878)\n     -> http.flavor: STRING(1.1)\n     -> http.route: STRING(/rolldice)\n     -> http.status_code: INT(200)\n\n2022-06-09T20:43:40.025Z        INFO    debugexporter/debug_exporter.go:56  MetricsExporter {\"#metrics\": 1}\n2022-06-09T20:43:40.025Z        DEBUG   debugexporter/debug_exporter.go:66  ResourceMetrics #0\nResource labels:\n     -> telemetry.sdk.language: STRING(python)\n     -> telemetry.sdk.name: STRING(opentelemetry)\n     -> telemetry.sdk.version: STRING(1.12.0rc1)\n     -> telemetry.auto.version: STRING(0.31b0)\n     -> service.name: STRING(unknown_service)\nInstrumentationLibraryMetrics #0\nInstrumentationLibrary app\nMetric #0\nDescriptor:\n     -> Name: roll_counter\n     -> Description: The number of rolls by roll value\n     -> Unit:\n     -> DataType: Sum\n     -> IsMonotonic: true\n     -> AggregationTemporality: AGGREGATION_TEMPORALITY_CUMULATIVE\nNumberDataPoints #0\nData point attributes:\n     -> roll.value: INT(5)\nStartTimestamp: 2022-06-09 20:43:37.390226915 +0000 UTC\nTimestamp: 2022-06-09 20:43:39.848587966 +0000 UTC\nValue: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for OpenTelemetry Setup\nDESCRIPTION: This YAML file configures the Docker Compose setup for the OpenTelemetry demo, including services for Jaeger, Zipkin, OpenTelemetry Collector, demo client, demo server, and Prometheus. It sets up the necessary environment variables and port mappings.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/apisix/index.md#2025-04-09_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  # Jaeger\n  jaeger-all-in-one:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - '16686:16686' # jaeger ui port\n      - '14268'\n      - '14250'\n\n  # Zipkin\n  zipkin-all-in-one:\n    image: openzipkin/zipkin:latest\n    ports:\n      - '9411:9411'\n\n  # Collector\n  otel-collector:\n    image: ${OTELCOL_IMG}\n    command: ['--config=/etc/otel-collector-config.yaml', '${OTELCOL_ARGS}']\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n    ports:\n      - '1888:1888' # pprof extension\n      - '8888:8888' # Prometheus metrics exposed by the collector\n      - '8889:8889' # Prometheus exporter metrics\n      - '13133:13133' # health_check extension\n      - '4317' # OTLP gRPC receiver\n      - '4318:4318' # Add OTLP HTTP Receiver port mapping\n      - '55670:55679' # zpages extension\n    depends_on:\n      - jaeger-all-in-one\n      - zipkin-all-in-one\n\n  demo-client:\n    build:\n      dockerfile: Dockerfile\n      context: ./client\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317\n      - DEMO_SERVER_ENDPOINT=http://172.17.0.1:9080/hello # APISIX address\n    depends_on:\n      - demo-server\n\n  demo-server:\n    build:\n      dockerfile: Dockerfile\n      context: ./server\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317\n    ports:\n      - '7080:7080' # Map the Server port to the host\n    depends_on:\n      - otel-collector\n\n  prometheus:\n    container_name: prometheus\n    image: prom/prometheus:latest\n    volumes:\n      - ./prometheus.yaml:/etc/prometheus/prometheus.yml\n    ports:\n      - '9090:9090'\n```\n\n----------------------------------------\n\nTITLE: Running JavaScript Application with OpenTelemetry Instrumentation\nDESCRIPTION: Command to run a JavaScript application with OpenTelemetry instrumentation by requiring the instrumentation file at startup.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_48\n\nLANGUAGE: shell\nCODE:\n```\nnode --require ./instrumentation.js app.js\n```\n\n----------------------------------------\n\nTITLE: Loading Individual Instrumentation Libraries in TypeScript\nDESCRIPTION: Code to register only specific instrumentation libraries (HTTP and Express) in TypeScript rather than using the auto-instrumentation metapackage. This is useful for optimizing dependency size.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/libraries.md#2025-04-09_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/*instrumentation.ts*/\n...\nimport { HttpInstrumentation } from \"@opentelemetry/instrumentation-http\";\nimport { ExpressInstrumentation } from \"@opentelemetry/instrumentation-express\";\n\nconst sdk = new NodeSDK({\n  ...\n  instrumentations: [\n    // Express instrumentation expects HTTP layer to be instrumented\n    new HttpInstrumentation(),\n    new ExpressInstrumentation(),\n  ]\n});\n\nsdk.start()\n```\n\n----------------------------------------\n\nTITLE: Pipeline Traces Flow Diagram\nDESCRIPTION: Mermaid diagram showing the flow in the 'traces' pipeline with batch processor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/architecture.md#2025-04-09_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\n---\ntitle: Pipeline \"traces\"\n---\nflowchart LR\n  R1(\"zipkin Receiver\") --> P1[\"\\\"batch\\\" Processor\"]\n  P1 --> E1[[\"\\\"otlp\\\" Exporter\"]]\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Receiver with Default Settings in YAML\nDESCRIPTION: Example of OTLP receiver configuration using default settings before the change to localhost binding.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/hardening-the-collector-one.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Spans in OpenTelemetry Swift\nDESCRIPTION: This snippet demonstrates the basic creation of a span using a tracer. It shows how to start a span with a name and properly end it when the operation is complete.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_3\n\nLANGUAGE: swift\nCODE:\n```\nlet span = tracer.spanBuilder(spanName: \"\\(name)\").startSpan()\n...\nspan.end()\n```\n\n----------------------------------------\n\nTITLE: Running the Basic Application\nDESCRIPTION: Command to build and run the basic dice application before adding OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Building and Running NGINX with OpenTelemetry in Docker\nDESCRIPTION: Shell commands to build a Docker image with NGINX and OpenTelemetry module and run it. The commands specify platform settings to ensure compatibility and map ports for external access.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t nginx-otel --platform linux/amd64 .\ndocker run --platform linux/amd64 --rm -p 8080:80 nginx-otel\n...\n```\n\n----------------------------------------\n\nTITLE: Running Ansible Playbook\nDESCRIPTION: Command to execute the Ansible playbook for deploying OpenTelemetry Collector\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/scaling-collectors.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nansible-playbook deploy-opentelemetry.yml\n```\n\n----------------------------------------\n\nTITLE: Creating Kafka Topic\nDESCRIPTION: Command to create a new Kafka topic with specified partitions and replication factor\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkafka-topics --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic my-test-topic\n```\n\n----------------------------------------\n\nTITLE: Running the Rails Server for Testing\nDESCRIPTION: Command to run the Rails server on port 8080 for testing the application before adding OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nrails server -p 8080\n```\n\n----------------------------------------\n\nTITLE: Adding Resolved Files to Git Changeset\nDESCRIPTION: Git command to add files to the changeset after resolving merge conflicts. This is part of the conflict resolution workflow when rebasing a branch with upstream changes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ngit add <filename>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Dictionary Entries in YAML Comments\nDESCRIPTION: Shows how to add custom words to the spell checker dictionary in a YAML file using comments. This is particularly useful for registry entry YAML files in the OpenTelemetry ecosystem.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/style-guide.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# cSpell:ignore <word>\ntitle: registryEntryTitle\n```\n\n----------------------------------------\n\nTITLE: Renaming Metrics in OpenTelemetry Collector\nDESCRIPTION: Configuration for the metrics transform processor that renames a specific metric from 'system.cpu.usage' to 'system.cpu.usage_time'. This processor supports metric-specific transformations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  metricstransform/rename:\n    transforms:\n      - include: system.cpu.usage\n        action: update\n        new_name: system.cpu.usage_time\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to a Span\nDESCRIPTION: C# code demonstrating how to add attributes (key/value pairs) to a span. Attributes provide additional context and metadata for the operation being traced.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nusing var span = tracer.StartActiveSpan(\"SayHello\");\n\nspan.SetAttribute(\"operation.value\", 1);\nspan.SetAttribute(\"operation.name\", \"Saying hello!\");\nspan.SetAttribute(\"operation.other-stuff\", new int[] { 1, 2, 3 });\n```\n\n----------------------------------------\n\nTITLE: Dice Rolling Library with OpenTelemetry Tracing in TypeScript\nDESCRIPTION: TypeScript code for a dice rolling library that uses OpenTelemetry for tracing. It demonstrates acquiring a tracer in a library context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n/*dice.ts*/\nimport { trace } from '@opentelemetry/api';\n\nconst tracer = trace.getTracer('dice-lib');\n\nfunction rollOnce(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport function rollTheDice(rolls: number, min: number, max: number) {\n  const result: number[] = [];\n  for (let i = 0; i < rolls; i++) {\n    result.push(rollOnce(min, max));\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Error Recording Method Reference (Go)\nDESCRIPTION: Reference to Go's RecordError method in OpenTelemetry SDK for recording errors in spans, which serves as an idiomatic alternative to RecordException.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-errors/index.md#2025-04-09_snippet_1\n\nLANGUAGE: go\nCODE:\n```\ngithub.com/open-telemetry/opentelemetry-go/blob/main/sdk/trace/span.go.RecordError\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Module on CentOS Container\nDESCRIPTION: Commands to log into the running container and install the PHP module, which is needed for the demonstration of module-level performance monitoring.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker exec -it webserver_centos7 /bin/bash\nyum install php -y\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Events for Auto-Instrumentation Initialization\nDESCRIPTION: This text block shows an example output of Kubernetes events, specifically highlighting the creation and starting of the OpenTelemetry auto-instrumentation container.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n53s         Normal   Created             pod/py-otel-server-7f54bf4cbc-p8wmj    Created container opentelemetry-auto-instrumentation\n53s         Normal   Started             pod/py-otel-server-7f54bf4cbc-p8wmj    Started container opentelemetry-auto-instrumentation\n```\n\n----------------------------------------\n\nTITLE: Starting Zookeeper Server\nDESCRIPTION: Command to start the Zookeeper server using the default configuration file\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nzookeeper-server-start /usr/local/etc/kafka/zookeeper.properties\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Instrumentation via Environment Variables\nDESCRIPTION: Shows how to configure specific instrumentation libraries using environment variables, including the naming convention and value formatting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/libraries.md#2025-04-09_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_RUBY_INSTRUMENTATION_FARADAY_CONFIG_OPTS=\"peer_service=new_service;span_kind=client\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Application for OpenTelemetry Testing\nDESCRIPTION: Command to create a new Laravel application using Composer, which will be used as a test application for OpenTelemetry auto-instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/php-auto-instrumentation/index.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncomposer create-project laravel/laravel example-app\n```\n\n----------------------------------------\n\nTITLE: Extracting Context from Incoming Requests in Java\nDESCRIPTION: This code shows how to extract OpenTelemetry context from an incoming HTTP request using ContextPropagators. It sets up an HTTP server that extracts context from incoming requests, makes it current during request processing, and then responds to the client.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/api.md#2025-04-09_snippet_2\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport com.sun.net.httpserver.HttpExchange;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpServer;\nimport io.opentelemetry.api.baggage.propagation.W3CBaggagePropagator;\nimport io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;\nimport io.opentelemetry.context.Context;\nimport io.opentelemetry.context.Scope;\nimport io.opentelemetry.context.propagation.ContextPropagators;\nimport io.opentelemetry.context.propagation.TextMapGetter;\nimport io.opentelemetry.context.propagation.TextMapPropagator;\nimport io.opentelemetry.context.propagation.TextMapSetter;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.nio.charset.StandardCharsets;\nimport java.util.List;\n\npublic class ExtractContextUsage {\n  private static final TextMapGetter<HttpExchange> TEXT_MAP_GETTER = new HttpRequestGetter();\n\n  public static void extractContextUsage() throws Exception {\n    // Create a ContextPropagators instance which propagates w3c trace context and w3c baggage\n    ContextPropagators propagators =\n        ContextPropagators.create(\n            TextMapPropagator.composite(\n                W3CTraceContextPropagator.getInstance(), W3CBaggagePropagator.getInstance()));\n\n    // Create a server, which uses the propagators to extract context from requests\n    HttpServer server = HttpServer.create(new InetSocketAddress(8080), 0);\n    server.createContext(\"/path\", new Handler(propagators));\n    server.setExecutor(null);\n    server.start();\n  }\n\n  private static class Handler implements HttpHandler {\n    private final ContextPropagators contextPropagators;\n\n    private Handler(ContextPropagators contextPropagators) {\n      this.contextPropagators = contextPropagators;\n    }\n\n    @Override\n    public void handle(HttpExchange exchange) throws IOException {\n      // Extract the context from the request and make the context current\n      Context extractedContext =\n          contextPropagators\n              .getTextMapPropagator()\n              .extract(Context.current(), exchange, TEXT_MAP_GETTER);\n      try (Scope scope = extractedContext.makeCurrent()) {\n        // Do work with the extracted context\n      } finally {\n        String response = \"success\";\n        exchange.sendResponseHeaders(200, response.length());\n        OutputStream os = exchange.getResponseBody();\n        os.write(response.getBytes(StandardCharsets.UTF_8));\n        os.close();\n      }\n    }\n  }\n\n  /** {@link TextMapSetter} with a {@link HttpExchange} carrier. */\n  private static class HttpRequestGetter implements TextMapGetter<HttpExchange> {\n    @Override\n    public Iterable<String> keys(HttpExchange carrier) {\n      return carrier.getRequestHeaders().keySet();\n    }\n\n    @Override\n    public String get(HttpExchange carrier, String key) {\n      if (carrier == null) {\n        return null;\n      }\n      List<String> headers = carrier.getRequestHeaders().get(key);\n      if (headers == null || headers.isEmpty()) {\n        return null;\n      }\n      return headers.get(0);\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Prometheus Metric Before Deprecation\nDESCRIPTION: Shows how a Prometheus metric is formatted before it is deprecated, including HELP and TYPE information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/internal-telemetry.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# HELP otelcol_exporter_queue_size this counts things\n# TYPE otelcol_exporter_queue_size counter\notelcol_exporter_queue_size 0\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Announcement Content Instructions\nDESCRIPTION: This comment block provides guidance for contributors creating announcements, including a reference link to the documentation about announcement management. Contributors are instructed to replace this comment with their actual announcement text.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/archetypes/announcement.md#2025-04-09_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<!-- For more detail about announcements, see\nhttps://opentelemetry.io/docs/contributing/#announcement-management\n\nErase this comment once you are done including the announcement text below. -->\n```\n\n----------------------------------------\n\nTITLE: Defining Currency Conversion Trace-based Test in YAML\nDESCRIPTION: YAML definition for a trace-based integration test of the currency conversion service. It specifies the gRPC trigger and assertions to validate both the operation result and the generated trace spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/testing-otel-demo/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntype: Test\nspec:\n  name: 'Currency: Convert'\n  description: Convert a currency\n  trigger:\n    type: grpc\n    grpc:\n      protobufFile: { { protobuf file with CurrencyService definition } }\n      address: { { currency service address } }\n      method: oteldemo.CurrencyService.Convert\n      request: |-\n        {\n          \"from\": {\n            \"currencyCode\": \"USD\",\n            \"units\": 330,\n            \"nanos\": 750000000\n          },\n          \"toCode\": \"CAD\"\n        }\n  specs:\n    - name: It converts from USD to CAD\n      selector:\n        span[name=\"CurrencyService/Convert\" rpc.system=\"grpc\"\n        rpc.method=\"Convert\" rpc.service=\"CurrencyService\"]\n      assertions:\n        - attr:app.currency.conversion.from = \"USD\"\n        - attr:app.currency.conversion.to = \"CAD\"\n    - name: It has more nanos than expected\n      selector: span[name=\"Test trigger\"]\n      assertions:\n        - attr:response.body | json_path '$.nanos' >= 599380800\n```\n\n----------------------------------------\n\nTITLE: Generate Netlify Redirect Rule from Hugo Page Params\nDESCRIPTION: A Hugo template that formats a redirect rule by combining the page's relative permalink with a redirect parameter. The output is formatted with 35-character padding for consistent alignment. The template only generates output when a redirect parameter is present.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/redirects/redirect.txt#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{/* Generate a Netlify redirect rule for pages with a `redirect` param */ -}}\n\n{{ $p := . -}}\n{{ with $p.Params.redirect -}}\n  {{ $p.RelPermalink | printf \"%-35s\" }} {{ . }}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Running the OpenTelemetry Demo with Docker Compose\nDESCRIPTION: Command to clone the OpenTelemetry demo repository and run the application using Docker Compose. The demo takes 15-20 minutes to build on first run and includes a web store frontend and Jaeger UI for trace visualization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/demo-announcement/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Verifying Instrumentation Resource Installation in Kubernetes\nDESCRIPTION: Shell command to check if the Instrumentation resource is correctly installed in a specific namespace using kubectl.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nkubectl describe otelinst -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Logging Request Headers in Knative First Service\nDESCRIPTION: Example log output showing trace context propagation headers including B3 and W3C Traceparent from the first service in a Knative workflow. Demonstrates how trace context is propagated through HTTP headers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/knative/index.md#2025-04-09_snippet_0\n\nLANGUAGE: nocode\nCODE:\n```\n2022/02/17 12:53:48 Request headers:\n2022/02/17 12:53:48 \tX-B3-Sampled: [1]\n2022/02/17 12:53:48 \tX-B3-Spanid: [af6c239eb7b39349]\n2022/02/17 12:53:48 \tX-B3-Traceid: [5f2c4775e0e36efc1d554a0b6c456cc1]\n2022/02/17 12:53:48 \tX-Forwarded-For: [10.244.0.12, 10.244.0.5]\n2022/02/17 12:53:48 \tAccept-Language: [en,fr;q=0.9,de;q=0.8,sk;q=0.7]\n2022/02/17 12:53:48 \tCookie: [_ga=GA1.2.260863911.1644918876]\n2022/02/17 12:53:48 \tAccept: [text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9]\n2022/02/17 12:53:48 \tK-Proxy-Request: [activator]\n2022/02/17 12:53:48 \tUpgrade-Insecure-Requests: [1]\n2022/02/17 12:53:48 \tUser-Agent: [Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.0.4758.80 Safari/537.36]\n2022/02/17 12:53:48 \tX-Request-Id: [ee2797b5-1ee9-408e-b1ff-d5e5431977e6]\n2022/02/17 12:53:48 \tCache-Control: [max-age=0]\n2022/02/17 12:53:48 \tX-Forwarded-Proto: [http]\n2022/02/17 12:53:48 \tTraceparent: [00-5f2c4775e0e36efc1d554a0b6c456cc1-af6c239eb7b39349-01]\n2022/02/17 12:53:48 \tAccept-Encoding: [gzip, deflate]\n2022/02/17 12:53:48 \tForwarded: [for=10.244.0.12;proto=http]\n2022/02/17 12:53:48 Response headers:\n2022/02/17 12:53:48 \tTraceparent: [00-5f2c4775e0e36efc1d554a0b6c456cc1-1cf3f827eba96bf2-01]\n2022/02/17 12:53:48\n```\n\n----------------------------------------\n\nTITLE: Installing ASP.NET Core and HTTP Instrumentation\nDESCRIPTION: Commands for installing specific instrumentation libraries for ASP.NET Core and HTTP client monitoring.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/libraries.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore --prerelease\ndotnet add package OpenTelemetry.Instrumentation.Http --prerelease\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation Installer\nDESCRIPTION: Command to install the OpenTelemetry instrumentation installer package in a Laravel application using Composer.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/php-auto-instrumentation/index.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd example-app\ncomposer require open-telemetry/opentelemetry-instrumentation-installer\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenTelemetry in Application Start\nDESCRIPTION: Sets up OpenTelemetry instrumentation for Cowboy web server, Phoenix framework, and Ecto database in the application start function.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: elixir\nCODE:\n```\n@impl true\ndef start(_type, _args) do\n  :opentelemetry_cowboy.setup()\n  OpentelemetryPhoenix.setup(adapter: :cowboy2)\n  OpentelemetryEcto.setup([:dice_game, :repo]) # if using ecto\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Receiver File\nDESCRIPTION: Shell command to create a new file for the trace receiver implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ntouch tailtracer/trace-receiver.go\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Receiver for Docker in YAML\nDESCRIPTION: This configuration shows how to set up the OTLP receiver's gRPC endpoint for use in a Docker environment, using a custom hostname that matches the Docker run command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: my-hostname:4317 # Use the same hostname from your docker run command\n```\n\n----------------------------------------\n\nTITLE: Java Application Configuration for OTLP/JSON Logging\nDESCRIPTION: Command-line configuration for running a Java application with the OpenTelemetry Java agent to output OTLP/JSON logs to stdout. It includes settings for Logback appender and log attribute capture.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/collecting-otel-compliant-java-logs-from-files/index.md#2025-04-09_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\njava -javaagent:/path/to/opentelemetry-javaagent.jar \\\n     -Dotel.logs.exporter=experimental-otlp/stdout \\\n     -Dotel.instrumentation.logback-appender.experimental-log-attributes=true \\\n     -Dotel.instrumentation.logback-appender.experimental.capture-key-value-pair-attributes=true \\\n     -Dotel.instrumentation.logback-appender.experimental.capture-mdc-attributes=* \\\n     -jar /path/to/my-app.jar\n```\n\n----------------------------------------\n\nTITLE: Changing to Demo Directory\nDESCRIPTION: Command to navigate to the OpenTelemetry demo directory.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd opentelemetry-demo/\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for K8s Attributes Processor\nDESCRIPTION: Kubernetes RBAC configuration for setting up necessary permissions for the k8sattributes processor, including ClusterRole, ClusterRoleBinding, and ServiceAccount definitions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/k8s-otel-expose/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: attributes-role\nrules:\n  - apiGroups:\n      - ''\n    resources:\n      - pods\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: attributes-rolebinding\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: attributes-role\nsubjects:\n  - kind: ServiceAccount\n    name: attributes-account\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: attributes-account\n```\n\n----------------------------------------\n\nTITLE: Building and Running the Spring Boot Application\nDESCRIPTION: Shell commands to build the application with Gradle and run the resulting JAR file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/getting-started.md#2025-04-09_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngradle assemble\njava -jar ./build/libs/java-simple.jar\n```\n\n----------------------------------------\n\nTITLE: Instrumenting a Java Application with OpenTelemetry\nDESCRIPTION: This code snippet demonstrates how to instrument a Java application using OpenTelemetry. It shows how to set up a tracer, create spans for database operations, and handle errors and exceptions while following semantic conventions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/instrumentation/libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nprivate static Tracer tracer =  getTracer(TracerProvider.noop());\n\npublic static void setTracerProvider(TracerProvider tracerProvider) {\n    tracer = getTracer(tracerProvider);\n}\n\nprivate static Tracer getTracer(TracerProvider tracerProvider) {\n    return tracerProvider.getTracer(\"demo-db-client\", \"0.1.0-beta1\");\n}\n\nprivate Response selectWithTracing(Query query) {\n    // check out conventions for guidance on span names and attributes\n    Span span = tracer.spanBuilder(String.format(\"SELECT %s.%s\", dbName, collectionName))\n            .setSpanKind(SpanKind.CLIENT)\n            .setAttribute(\"db.name\", dbName)\n            ...\n            .startSpan();\n\n    // makes span active and allows correlating logs and nest spans\n    try (Scope unused = span.makeCurrent()) {\n        Response response = query.runWithRetries();\n        if (response.isSuccessful()) {\n            span.setStatus(StatusCode.OK);\n        }\n\n        if (span.isRecording()) {\n           // populate response attributes for response codes and other information\n        }\n    } catch (Exception e) {\n        span.recordException(e);\n        span.setStatus(StatusCode.ERROR, e.getClass().getSimpleName());\n        throw e;\n    } finally {\n        span.end();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Target Allocator in OpenTelemetryCollector CR\nDESCRIPTION: YAML configuration example showing how to override the Target Allocator base image and specify replicas in the OpenTelemetryCollector custom resource. Used when custom Target Allocator configuration is needed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/otel-operator-q-and-a/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otelcol\n  namespace: mynamespace\nspec:\n  mode: statefulset\n  targetAllocator:\n    image: <ta_image_name>\n    replicas: <number_of_replicas>\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry SDK for Web Tracing\nDESCRIPTION: Command to install the OpenTelemetry SDK package for web tracing using npm.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpm install @opentelemetry/sdk-trace-web\n```\n\n----------------------------------------\n\nTITLE: Curl Command for Testing Zipkin Endpoint\nDESCRIPTION: Shell command to send a test trace payload to the Collector's Zipkin endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/troubleshooting.md#2025-04-09_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST localhost:9411/api/v2/spans -H'Content-Type: application/json' -d @trace.json\n```\n\n----------------------------------------\n\nTITLE: Generating Markdown Distribution Table with Hugo Template\nDESCRIPTION: Hugo template code that generates a Markdown table listing OpenTelemetry distributions. The table is sorted alphabetically by name and shows the distribution name as a link, its components as a comma-separated list, and a link to documentation. Uses site data from ecosystem.distributions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/distributions-table.md#2025-04-09_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{ $data := sort (sort $.Site.Data.ecosystem.distributions \"components\") \"name\" \"asc\" -}}\nName[^1]     | Components |  Learn more\n------------ | ---------- |  ----------\n{{- range $data }}\n[{{ .name }}]({{ .url }}) | {{ delimit (sort .components) \", \" }} | [{{ replace .docsUrl \"https://\" \"\" }}]({{ .docsUrl }})\n{{- end }}\n\n[^1]: Listed alphabetically\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: Command to install the required npm packages and prerequisites for the OpenTelemetry.io website.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/development.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring AlwaysOn/Off Sampler with Environment Variables\nDESCRIPTION: Shows how to configure AlwaysOn and AlwaysOff samplers using environment variables.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/sampling.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_TRACES_SAMPLER=\"parentbased_always_on\"\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetryCollector with ServiceMonitor Selector in YAML\nDESCRIPTION: This YAML configuration shows how to set up an OpenTelemetryCollector with a specific ServiceMonitor selector. It enables the Target Allocator and Prometheus CR, and configures a label selector for ServiceMonitors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1beta1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otelcol\n  namespace: opentelemetry\nspec:\n  mode: statefulset\n  targetAllocator:\n    enabled: true\n    serviceAccount: opentelemetry-targetallocator-sa\n    prometheusCR:\n      enabled: true\n      serviceMonitorSelector:\n        matchLabels:\n          app: my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetryCollector with ServiceMonitor Selector in YAML\nDESCRIPTION: This YAML configuration shows how to set up an OpenTelemetryCollector with a specific ServiceMonitor selector. It enables the Target Allocator and Prometheus CR, and configures a label selector for ServiceMonitors.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/target-allocator.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1beta1\nkind: OpenTelemetryCollector\nmetadata:\n  name: otelcol\n  namespace: opentelemetry\nspec:\n  mode: statefulset\n  targetAllocator:\n    enabled: true\n    serviceAccount: opentelemetry-targetallocator-sa\n    prometheusCR:\n      enabled: true\n      serviceMonitorSelector:\n        matchLabels:\n          app: my-app\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Attributes via Environment Variables\nDESCRIPTION: Example showing how to set custom resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable. This demonstrates setting the deployment environment attribute following semantic conventions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/resources/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_RESOURCE_ATTRIBUTES=deployment.environment=production yourApp\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Target Allocator\nDESCRIPTION: This YAML configures the necessary RBAC (Role-Based Access Control) for the Target Allocator. It includes ServiceAccount, ClusterRole, and ClusterRoleBinding definitions to grant required permissions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: opentelemetry-targetallocator-sa\n  namespace: opentelemetry\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: opentelemetry-targetallocator-role\nrules:\n  - apiGroups:\n      - monitoring.coreos.com\n    resources:\n      - servicemonitors\n      - podmonitors\n    verbs:\n      - '*'\n  - apiGroups: ['']\n    resources:\n      - namespaces\n    verbs: ['get', 'list', 'watch']\n  - apiGroups: ['']\n    resources:\n      - nodes\n      - nodes/metrics\n      - services\n      - endpoints\n      - pods\n    verbs: ['get', 'list', 'watch']\n  - apiGroups: ['']\n    resources:\n      - configmaps\n    verbs: ['get']\n  - apiGroups:\n      - discovery.k8s.io\n    resources:\n      - endpointslices\n    verbs: ['get', 'list', 'watch']\n  - apiGroups:\n      - networking.k8s.io\n    resources:\n      - ingresses\n    verbs: ['get', 'list', 'watch']\n  - nonResourceURLs: ['/metrics']\n    verbs: ['get']\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: opentelemetry-targetallocator-rb\nsubjects:\n  - kind: ServiceAccount\n    name: opentelemetry-targetallocator-sa\n    namespace: opentelemetry\nroleRef:\n  kind: ClusterRole\n  name: opentelemetry-targetallocator-role\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Illustrating Telemetry Data Flow in OpenTelemetry Demo with Mermaid\nDESCRIPTION: This Mermaid diagram visualizes the telemetry data flow in the OpenTelemetry Demo. It shows how data moves from microservices through the OpenTelemetry Collector to various backends like Prometheus and Jaeger, and how these integrate with Grafana for visualization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/architecture.md#2025-04-09_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TB\nsubgraph tdf[Telemetry Data Flow]\n    subgraph subgraph_padding [ ]\n        style subgraph_padding fill:none,stroke:none;\n        %% padding to stop the titles clashing\n        subgraph od[OpenTelemetry Demo]\n        ms(Microservice)\n        end\n\n        ms -.->|\"OTLP<br/>gRPC\"| oc-grpc\n        ms -.->|\"OTLP<br/>HTTP POST\"| oc-http\n\n        subgraph oc[OTel Collector]\n            style oc fill:#97aef3,color:black;\n            oc-grpc[/\"OTLP Receiver<br/>listening on<br/>grpc://localhost:4317\"/]\n            oc-http[/\"OTLP Receiver<br/>listening on <br/>localhost:4318<br/>\"/]\n            oc-proc(Processors)\n            oc-prom[/\"OTLP HTTP Exporter\"/]\n            oc-otlp[/\"OTLP Exporter\"/]\n\n            oc-grpc --> oc-proc\n            oc-http --> oc-proc\n\n            oc-proc --> oc-prom\n            oc-proc --> oc-otlp\n        end\n\n        oc-prom -->|\"localhost:9090/api/v1/otlp\"| pr-sc\n        oc-otlp -->|gRPC| ja-col\n\n        subgraph pr[Prometheus]\n            style pr fill:#e75128,color:black;\n            pr-sc[/\"Prometheus OTLP Write Receiver\"/]\n            pr-tsdb[(Prometheus TSDB)]\n            pr-http[/\"Prometheus HTTP<br/>listening on<br/>localhost:9090\"/]\n\n            pr-sc --> pr-tsdb\n            pr-tsdb --> pr-http\n        end\n\n        pr-b{{\"Browser<br/>Prometheus UI\"}}\n        pr-http ---->|\"localhost:9090/graph\"| pr-b\n\n        subgraph ja[Jaeger]\n            style ja fill:#60d0e4,color:black;\n            ja-col[/\"Jaeger Collector<br/>listening on<br/>grpc://jaeger:4317\"/]\n            ja-db[(Jaeger DB)]\n            ja-http[/\"Jaeger HTTP<br/>listening on<br/>localhost:16686\"/]\n\n            ja-col --> ja-db\n            ja-db --> ja-http\n        end\n\n        subgraph gr[Grafana]\n            style gr fill:#f8b91e,color:black;\n            gr-srv[\"Grafana Server\"]\n            gr-http[/\"Grafana HTTP<br/>listening on<br/>localhost:3000\"/]\n\n            gr-srv --> gr-http\n        end\n\n        pr-http --> |\"localhost:9090/api\"| gr-srv\n        ja-http --> |\"localhost:16686/api\"| gr-srv\n\n        ja-b{{\"Browser<br/>Jaeger UI\"}}\n        ja-http ---->|\"localhost:16686/search\"| ja-b\n\n        gr-b{{\"Browser<br/>Grafana UI\"}}\n        gr-http -->|\"localhost:3000/dashboard\"| gr-b\n    end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin HTTP/Proto Exporter in Python\nDESCRIPTION: Python code to configure the OpenTelemetry Zipkin HTTP/Proto exporter for traces. Sets up a TracerProvider with BatchSpanProcessor to send spans to a Zipkin backend.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry import trace\nfrom opentelemetry.exporter.zipkin.proto.http import ZipkinExporter\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\n\nresource = Resource(attributes={\n    SERVICE_NAME: \"your-service-name\"\n})\n\nzipkin_exporter = ZipkinExporter(endpoint=\"http://localhost:9411/api/v2/spans\")\n\nprovider = TracerProvider(resource=resource)\nprocessor = BatchSpanProcessor(zipkin_exporter)\nprovider.add_span_processor(processor)\ntrace.set_tracer_provider(provider)\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik Router Rules for OTel Demo App in Nomad\nDESCRIPTION: This HCL code snippet configures the Traefik routing rules for the frontendproxy service in a Nomad jobspec. It sets up the Host to 'otel-demo.localhost' and enables the web entrypoint without TLS.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_7\n\nLANGUAGE: hcl\nCODE:\n```\ntags = [        \"traefik.http.routers.frontendproxy.rule=Host(`otel-demo.localhost`)\",\n    \"traefik.http.routers.frontendproxy.entrypoints=web\",\n    \"traefik.http.routers.frontendproxy.tls=false\",\n    \"traefik.enable=true\",\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Resource Attributes via Environment Variables\nDESCRIPTION: Example showing how to set custom resource attributes using the OTEL_RESOURCE_ATTRIBUTES environment variable. This demonstrates setting the deployment environment attribute following semantic conventions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/resources/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_RESOURCE_ATTRIBUTES=deployment.environment=production yourApp\n```\n\n----------------------------------------\n\nTITLE: Generating Adopters List for OpenTelemetry Language in Hugo\nDESCRIPTION: This Hugo shortcode takes a language parameter and an optional limit, then generates a list of organizations using that OpenTelemetry language implementation. It filters adopters from the site's data, sorts them alphabetically, and creates a bulleted list with links to each organization's website.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/languages/index-adopters.md#2025-04-09_snippet_0\n\nLANGUAGE: Hugo\nCODE:\n```\n{{ $lang := .Get 0 -}}\n{{ $Lang := $lang | humanize -}}\n{{ $howMany := .Get 1 | default 10 -}}\n{{ $adopters := where $.Site.Data.ecosystem.adopters \".components\" \"intersect\" (slice $Lang) -}}\n\n## Who's using OpenTelemetry {{ $Lang }}?\n\nOpenTelemetry {{ $Lang }} is in use by a number of organizations, including:\n\n{{ range first $howMany (sort $adopters \"name\") -}}\n\n<!-- prettier-ignore -->\n- [{{ .name }}]({{ .url }})\n{{- end }}\n\nFor the complete list, and instructions for adding your organization, see\n[Adopters](/ecosystem/adopters/).\n```\n\n----------------------------------------\n\nTITLE: Creating New Hugo Announcement Page\nDESCRIPTION: Command to generate a new announcement markdown file in Hugo using the announcement template. The command requires specifying the locale and desired filename.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/announcements.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhugo new --kind announcement content/YOUR-LOCALE/announcements/announcement-file-name.md\n```\n\n----------------------------------------\n\nTITLE: Initializing Go Module for Trace Receiver\nDESCRIPTION: Commands to create a new directory for the trace receiver project and initialize it as a Go module.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tailtracer\ncd tailtracer\ngo mod init github.com/open-telemetry/opentelemetry-tutorials/trace-receiver/tailtracer\n```\n\n----------------------------------------\n\nTITLE: Enabling mypy Namespace Packages via Command Line\nDESCRIPTION: Command line option to enable namespace packages support in mypy when running type checks. This is an alternative to using the configuration file.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/mypy.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nmypy --namespace-packages\n```\n\n----------------------------------------\n\nTITLE: Running Prometheus Container\nDESCRIPTION: Docker command to run Prometheus with custom configuration\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n    -p 9090:9090 \\\n    -v path/to/prometheus.yml:/etc/prometheus/prometheus.yml \\\n    prom/prometheus\n```\n\n----------------------------------------\n\nTITLE: Adding Events to OpenTelemetry Spans in Go\nDESCRIPTION: Adds an event to the current span to provide additional context about what happened during the operation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/product-catalog.md#2025-04-09_snippet_7\n\nLANGUAGE: go\nCODE:\n```\nspan.AddEvent(msg)\n```\n\n----------------------------------------\n\nTITLE: Cloning OpenTelemetry Demo Repository\nDESCRIPTION: Command to clone the OpenTelemetry demo repository from GitHub.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/open-telemetry/opentelemetry-demo.git\n```\n\n----------------------------------------\n\nTITLE: Server-Side OpenTelemetry Instrumentation in Next.js\nDESCRIPTION: Implementation of backend telemetry instrumentation using Node.js SDK and gRPC exporter. The code sets up auto-instrumentation for common Node.js libraries and includes manual instrumentation through route middleware.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/frontend-overhaul/index.md#2025-04-09_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n// Reference implementation at:\n// https://github.com/open-telemetry/opentelemetry-demo/blob/main/src/frontend/utils/telemetry/Instrumentation.js\n```\n\n----------------------------------------\n\nTITLE: Getting the Current Active Span in JavaScript with OpenTelemetry\nDESCRIPTION: Retrieves the currently active span from the context. This is useful when you need to access or modify the current span at a specific point in your code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst activeSpan = opentelemetry.trace.getActiveSpan();\n\n// do something with the active span, optionally ending it if that is appropriate for your use case.\n```\n\n----------------------------------------\n\nTITLE: Building OpenTelemetry Module Package for Distribution\nDESCRIPTION: Command to build the OpenTelemetry module package inside a Docker container, which will be later extracted for installation on the target system.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose --profile centos7 build\n```\n\n----------------------------------------\n\nTITLE: Rendering User Links Section in Hugo Template\nDESCRIPTION: Checks if user links exist in the site configuration and renders them using a template.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_3\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ with index $links \"user\"}}\n  {{ template \"community-links-list\" . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Creación de una rama local para trabajar\nDESCRIPTION: Comando de shell para crear una nueva rama local basada en la rama main del repositorio upstream de OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit checkout -b <mi_nueva_rama> upstream/main\n```\n\n----------------------------------------\n\nTITLE: Creating Factory File for Receiver\nDESCRIPTION: Shell command to create a factory file for the tailtracer receiver implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ntouch tailtracer/factory.go\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies on Debian/Ubuntu\nDESCRIPTION: Commands to install required development packages on Debian/Ubuntu for Python package installation\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\napt install -y python3-dev\napt install -y build-essential\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Multi-Service Tracing Environment\nDESCRIPTION: Docker Compose configuration that sets up a complete distributed tracing environment with Jaeger, OpenTelemetry Collector, NGINX, a Java backend service, and a Node.js frontend service with appropriate environment variables for OpenTelemetry.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-nginx/index.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3.8'\nservices:\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - '16686:16686'\n  collector:\n    image: otel/opentelemetry-collector:latest\n    command: ['--config=/etc/otel-collector-config.yaml']\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n  nginx:\n    image: nginx-otel\n    volumes:\n      - ./opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf\n      - ./default.conf:/etc/nginx/conf.d/default.conf\n  backend:\n    build: ./backend\n    image: backend-with-otel\n    environment:\n      - OTEL_TRACES_EXPORTER=otlp\n      - OTEL_METRICS_EXPORTER=none\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318/\n      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\n      - OTEL_SERVICE_NAME=backend\n  frontend:\n    build: ./frontend\n    image: frontend-with-otel\n    ports:\n      - '8000:8000'\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318/\n      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\n      - OTEL_SERVICE_NAME=frontend\n```\n\n----------------------------------------\n\nTITLE: Configuring containerd Tracing in Kubernetes\nDESCRIPTION: Template file for configuring containerd in k3s to send traces. It includes various plugin configurations and sets up the OpenTelemetry tracing processor.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/k8s-runtime-observability/index.md#2025-04-09_snippet_5\n\nLANGUAGE: go-html-template\nCODE:\n```\nversion = 2\n\n[plugins.\"io.containerd.internal.v1.opt\"]\n  path = \"{{ .NodeConfig.Containerd.Opt }}\"\n[plugins.\"io.containerd.grpc.v1.cri\"]\n  stream_server_address = \"127.0.0.1\"\n  stream_server_port = \"10010\"\n  enable_selinux = {{ .NodeConfig.SELinux }}\n  enable_unprivileged_ports = {{ .EnableUnprivileged }}\n  enable_unprivileged_icmp = {{ .EnableUnprivileged }}\n\n{{- if .DisableCgroup}}\n  disable_cgroup = true\n{{end}}\n{{- if .IsRunningInUserNS }}\n  disable_apparmor = true\n  restrict_oom_score_adj = true\n{{end}}\n\n{{- if .NodeConfig.AgentConfig.PauseImage }}\n  sandbox_image = \"{{ .NodeConfig.AgentConfig.PauseImage }}\"\n{{end}}\n\n{{- if .NodeConfig.AgentConfig.Snapshotter }}\n[plugins.\"io.containerd.grpc.v1.cri\".containerd]\n  snapshotter = \"{{ .NodeConfig.AgentConfig.Snapshotter }}\"\n  disable_snapshot_annotations = {{ if eq .NodeConfig.AgentConfig.Snapshotter \"stargz\" }}false{{else}}true{{end}}\n{{ if eq .NodeConfig.AgentConfig.Snapshotter \"stargz\" }}\n{{ if .NodeConfig.AgentConfig.ImageServiceSocket }}\n[plugins.\"io.containerd.snapshotter.v1.stargz\"]\ncri_keychain_image_service_path = \"{{ .NodeConfig.AgentConfig.ImageServiceSocket }}\"\n[plugins.\"io.containerd.snapshotter.v1.stargz\".cri_keychain]\nenable_keychain = true\n{{end}}\n{{ if .PrivateRegistryConfig }}\n{{ if .PrivateRegistryConfig.Mirrors }}\n[plugins.\"io.containerd.snapshotter.v1.stargz\".registry.mirrors]{{end}}\n{{range $k, $v := .PrivateRegistryConfig.Mirrors }}\n[plugins.\"io.containerd.snapshotter.v1.stargz\".registry.mirrors.\"{{$k}}\"]\n  endpoint = [{{range $i, $j := $v.Endpoints}}{{if $i}}, {{end}}{{printf \"%q\" .}}{{end}}]\n{{if $v.Rewrites}}\n  [plugins.\"io.containerd.snapshotter.v1.stargz\".registry.mirrors.\"{{$k}}\".rewrite]\n{{range $pattern, $replace := $v.Rewrites}}\n    \"{{$pattern}}\" = \"{{$replace}}\"\n{{end}}\n{{end}}\n{{end}}\n{{range $k, $v := .PrivateRegistryConfig.Configs }}\n{{ if $v.Auth }}\n[plugins.\"io.containerd.snapshotter.v1.stargz\".registry.configs.\"{{$k}}\".auth]\n  {{ if $v.Auth.Username }}username = {{ printf \"%q\" $v.Auth.Username }}{{end}}\n  {{ if $v.Auth.Password }}password = {{ printf \"%q\" $v.Auth.Password }}{{end}}\n  {{ if $v.Auth.Auth }}auth = {{ printf \"%q\" $v.Auth.Auth }}{{end}}\n  {{ if $v.Auth.IdentityToken }}identitytoken = {{ printf \"%q\" $v.Auth.IdentityToken }}{{end}}\n{{end}}\n{{ if $v.TLS }}\n[plugins.\"io.containerd.snapshotter.v1.stargz\".registry.configs.\"{{$k}}\".tls]\n  {{ if $v.TLS.CAFile }}ca_file = \"{{ $v.TLS.CAFile }}\"{{end}}\n  {{ if $v.TLS.CertFile }}cert_file = \"{{ $v.TLS.CertFile }}\"{{end}}\n  {{ if $v.TLS.KeyFile }}key_file = \"{{ $v.TLS.KeyFile }}\"{{end}}\n  {{ if $v.TLS.InsecureSkipVerify }}insecure_skip_verify = true{{end}}\n{{end}}\n{{end}}\n{{end}}\n{{end}}\n{{end}}\n\n{{- if not .NodeConfig.NoFlannel }}\n[plugins.\"io.containerd.grpc.v1.cri\".cni]\n  bin_dir = \"{{ .NodeConfig.AgentConfig.CNIBinDir }}\"\n  conf_dir = \"{{ .NodeConfig.AgentConfig.CNIConfDir }}\"\n{{end}}\n\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc]\n  runtime_type = \"io.containerd.runc.v2\"\n\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n  SystemdCgroup = {{ .SystemdCgroup }}\n\n{{ if .PrivateRegistryConfig }}\n{{ if .PrivateRegistryConfig.Mirrors }}\n[plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors]{{end}}\n{{range $k, $v := .PrivateRegistryConfig.Mirrors }}\n[plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"{{$k}}\"]\n  endpoint = [{{range $i, $j := $v.Endpoints}}{{if $i}}, {{end}}{{printf \"%q\" .}}{{end}}]\n{{if $v.Rewrites}}\n  [plugins.\"io.containerd.grpc.v1.cri\".registry.mirrors.\"{{$k}}\".rewrite]\n{{range $pattern, $replace := $v.Rewrites}}\n    \"{{$pattern}}\" = \"{{$replace}}\"\n{{end}}\n{{end}}\n{{end}}\n\n{{range $k, $v := .PrivateRegistryConfig.Configs }}\n{{ if $v.Auth }}\n[plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"{{$k}}\".auth]\n  {{ if $v.Auth.Username }}username = {{ printf \"%q\" $v.Auth.Username }}{{end}}\n  {{ if $v.Auth.Password }}password = {{ printf \"%q\" $v.Auth.Password }}{{end}}\n  {{ if $v.Auth.Auth }}auth = {{ printf \"%q\" $v.Auth.Auth }}{{end}}\n  {{ if $v.Auth.IdentityToken }}identitytoken = {{ printf \"%q\" $v.Auth.IdentityToken }}{{end}}\n{{end}}\n{{ if $v.TLS }}\n[plugins.\"io.containerd.grpc.v1.cri\".registry.configs.\"{{$k}}\".tls]\n  {{ if $v.TLS.CAFile }}ca_file = \"{{ $v.TLS.CAFile }}\"{{end}}\n  {{ if $v.TLS.CertFile }}cert_file = \"{{ $v.TLS.CertFile }}\"{{end}}\n  {{ if $v.TLS.KeyFile }}key_file = \"{{ $v.TLS.KeyFile }}\"{{end}}\n  {{ if $v.TLS.InsecureSkipVerify }}insecure_skip_verify = true{{end}}\n{{end}}\n{{end}}\n{{end}}\n\n{{range $k, $v := .ExtraRuntimes}}\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.\"{{$k}}\"]\n  runtime_type = \"{{$v.RuntimeType}}\"\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.\"{{$k}}\".options]\n  BinaryName = \"{{$v.BinaryName}}\"\n{{end}}\n\n[plugins.\"io.containerd.tracing.processor.v1.otlp\"]\n  endpoint = \"host.k3d.internal:4317\"\n  protocol = \"grpc\"\n  insecure = true\n\n[plugins.\"io.containerd.internal.v1.tracing\"]\n  sampling_ratio = 1.0\n  service_name = \"containerd\"\n```\n\n----------------------------------------\n\nTITLE: Running Trace Testing with Make\nDESCRIPTION: Command to enable API observability-driven testing using Make.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nmake run-tracetesting\n```\n\n----------------------------------------\n\nTITLE: RBAC Configuration for Kubernetes Attributes Processor\nDESCRIPTION: Kubernetes RBAC configuration defining the necessary permissions for the Kubernetes Attributes Processor to access pod and namespace information via the Kubernetes API.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: collector\n  namespace: <OTEL_COL_NAMESPACE>\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector\nrules:\n  - apiGroups:\n      - ''\n    resources:\n      - 'pods'\n      - 'namespaces'\n    verbs:\n      - 'get'\n      - 'watch'\n      - 'list'\n  - apiGroups:\n      - 'apps'\n    resources:\n      - 'replicasets'\n    verbs:\n      - 'get'\n      - 'list'\n      - 'watch'\n  - apiGroups:\n      - 'extensions'\n    resources:\n      - 'replicasets'\n    verbs:\n      - 'get'\n      - 'list'\n      - 'watch'\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: otel-collector\nsubjects:\n  - kind: ServiceAccount\n    name: collector\n    namespace: <OTEL_COL_NAMESPACE>\nroleRef:\n  kind: ClusterRole\n  name: otel-collector\n  apiGroup: rbac.authorization.k8s.io\n```\n\n----------------------------------------\n\nTITLE: Express Server with OpenTelemetry Tracing in JavaScript\nDESCRIPTION: JavaScript code for an Express server that uses OpenTelemetry for tracing. It demonstrates acquiring a tracer and setting up a route handler.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n/*app.js*/\nconst { trace } = require('@opentelemetry/api');\nconst express = require('express');\nconst { rollTheDice } = require('./dice.js');\n\nconst tracer = trace.getTracer('dice-server', '0.1.0');\n\nconst PORT = parseInt(process.env.PORT || '8080');\nconst app = express();\n\napp.get('/rolldice', (req, res) => {\n  const rolls = req.query.rolls ? parseInt(req.query.rolls.toString()) : NaN;\n  if (isNaN(rolls)) {\n    res\n      .status(400)\n      .send(\"Request parameter 'rolls' is missing or not a number.\");\n    return;\n  }\n  res.send(JSON.stringify(rollTheDice(rolls, 1, 6)));\n});\n\napp.listen(PORT, () => {\n  console.log(`Listening for requests on http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Gradle Dependencies Configuration\nDESCRIPTION: Gradle configuration for adding OpenTelemetry samplers dependency.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/sdk-configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"io.opentelemetry.contrib:opentelemetry-samplers:1.33.0-alpha\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Community Introduction Section in Hugo Template\nDESCRIPTION: Renders an introduction paragraph using the translated 'community_introduce' string.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_1\n\nLANGUAGE: HTML with Hugo Template\nCODE:\n```\n<p>{{ T \"community_introduce\" . }}</p>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML front matter metadata for the blog post, including title, author information, date, and spell check configurations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/why-and-how-ebay-pivoted-to-opentelemetry/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Why and How eBay Pivoted to OpenTelemetry\nlinkTitle: eBay OpenTelemetry\ndate: 2022-12-19\nauthor: '[Vijay Samuel](https://github.com/vjsamuel) (eBay)'\ncanonical_url: https://tech.ebayinc.com/engineering/why-and-how-ebay-pivoted-to-opentelemetry/\n# prettier-ignore\ncSpell:ignore: Aishwarya Aradros Ashpole Auditbeat autodiscover Bhattacharya Bogdan Charif Christos clusterlocal Dropwizard Drutu Feldmeier Filebeat filereloadreceiver Golubenco Kroh kube Markou metricbeat Mirabella Nigaryan Premendra Pérez Rami Ruflin Santanu Sarbu sharded Siering Soriano statefulset Steffen Teoh Tigran Vijay Yandapalli\n---\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration for OpenTelemetry Collector\nDESCRIPTION: launch.json configuration for debugging the OpenTelemetry Collector in Visual Studio Code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Launch otelcol-dev\",\n      \"type\": \"go\",\n      \"request\": \"launch\",\n      \"mode\": \"auto\",\n      \"program\": \"${workspaceFolder}/otelcol-dev\",\n      \"args\": [\"--config\", \"${workspaceFolder}/config.yaml\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Starting the Kubernetes Observability Environment\nDESCRIPTION: Command to launch the Docker Compose environment that runs Jaeger and OpenTelemetry Collector services for collecting and visualizing Kubernetes traces.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/k8s-runtime-observability/index.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Adding Kafka Clients OpenTelemetry Dependency\nDESCRIPTION: Maven dependency configuration for adding OpenTelemetry Kafka clients instrumentation to a Java project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-kafka-clients/index.md#2025-04-09_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>io.opentelemetry.instrumentation</groupId>\n    <artifactId>opentelemetry-kafka-clients-2.6</artifactId>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Manual Context Propagation in TypeScript (Receiving Service)\nDESCRIPTION: TypeScript implementation for manually extracting OpenTelemetry context in a receiving service from propagated trace information and creating a new span within that context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// Receiving service\nimport {\n  type Context,\n  propagation,\n  trace,\n  Span,\n  context,\n} from '@opentelemetry/api';\n\n// Define an interface for the input object that includes 'traceparent' & 'tracestate'.\ninterface Carrier {\n  traceparent?: string;\n  tracestate?: string;\n}\n\n// Assume \"input\" is an object with 'traceparent' & 'tracestate' keys.\nconst input: Carrier = {};\n\n// Extracts the 'traceparent' and 'tracestate' data into a context object.\n//\n// You can then treat this context as the active context for your\n// traces.\nlet activeContext: Context = propagation.extract(context.active(), input);\n\nlet tracer = trace.getTracer('app-name');\n\nlet span: Span = tracer.startSpan(\n  spanName,\n  {\n    attributes: {},\n  },\n  activeContext,\n);\n\n// Set the created span as active in the deserialized context.\ntrace.setSpan(activeContext, span);\n```\n\n----------------------------------------\n\nTITLE: Installing Helm Chart with Custom Values\nDESCRIPTION: Command to install the Helm chart using a custom values file for configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nhelm install my-otel-demo open-telemetry/opentelemetry-demo --values my-values-file.yaml\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Tracer in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to acquire a tracer using the OpenTelemetry API. The tracer is identified by an instrumentation scope name and version.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst opentelemetry = require('@opentelemetry/api');\n//...\n\nconst tracer = opentelemetry.trace.getTracer(\n  'instrumentation-scope-name',\n  'instrumentation-scope-version',\n);\n\n// You can now use a 'tracer' to do tracing!\n```\n\n----------------------------------------\n\nTITLE: Cloning and Running the otelsql Example\nDESCRIPTION: Shell commands to clone the otelsql repository, checkout a specific version, and run the OpenTelemetry Collector example using Docker Compose.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/getting-started-with-otelsql/index.md#2025-04-09_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/XSAM/otelsql.git\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout tags/v0.29.0\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd example/otel-collector\ndocker compose up -d\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker compose logs client\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration\nDESCRIPTION: Maven configuration for adding OpenTelemetry samplers dependency.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/sdk-configuration.md#2025-04-09_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n  <dependency>\n    <groupId>io.opentelemetry.contrib</groupId>\n    <artifactId>opentelemetry-samplers</artifactId>\n    <version>1.33.0-alpha</version>\n  </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for OpenTelemetry Training Page\nDESCRIPTION: YAML front matter configuration for the training page defining metadata like title, menu position, description, and custom parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/training/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Training\nmenu: { main: { weight: 45 } }\ndescription: OpenTelemetry certifications and courses\ntype: docs\nbody_class: ot-training\nhide_feedback: true\n# LF course image from:\n# https://training.linuxfoundation.org/wp-content/uploads/2024/10/LFS148-Course-Badge-300x300.png\nparams:\n  LFS148: https://training.linuxfoundation.org/training/getting-started-with-opentelemetry-lfs148/\ncSpell:ignore: otca\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring OTTL with Advanced Context Inference Without Explicit Context in YAML\nDESCRIPTION: Example YAML configuration using the advanced context inference style, which maintains granular control while automatically determining the appropriate context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/ottl-contexts-just-got-easier.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nmetric_statements:\n  - conditions:\n      - resource.attributes[\"service.name\"] == \"my.service\"\n    statements:\n      - set(metric.description, \"counter\") where datapoint.attributes[\"my.attr\"] == \"some\"\n```\n\n----------------------------------------\n\nTITLE: Running Localization Check Script for Drift Detection\nDESCRIPTION: Command to check for localized pages that need updating by comparing their default_lang_commit with the current English version, showing which pages have drifted.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ npm run check:i18n\n1       1       content/en/docs/platforms/kubernetes/_index.md - content/zh/docs/platforms/kubernetes/_index.md\n...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Docker Compose for Kubernetes Observability Stack\nDESCRIPTION: Docker Compose configuration that defines two services: Jaeger for trace visualization and OpenTelemetry Collector for trace collection. The services are configured with appropriate ports, health checks, and volume mounts for configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/k8s-runtime-observability/index.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  jaeger:\n    healthcheck:\n      test:\n        - CMD\n        - wget\n        - --spider\n        - localhost:16686\n      timeout: 3s\n      interval: 1s\n      retries: 60\n    image: jaegertracing/all-in-one:latest\n    restart: unless-stopped\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n    ports:\n      - 16686:16686\n  otel-collector:\n    command:\n      - --config\n      - /otel-local-config.yaml\n    depends_on:\n      jaeger:\n        condition: service_started\n    image: otel/opentelemetry-collector:0.54.0\n    ports:\n      - 4317:4317\n    volumes:\n      - ./otel-collector.yaml:/otel-local-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Running All Tests in OpenTelemetry Demo Project\nDESCRIPTION: Command to execute all tests (frontend and backend) in the OpenTelemetry demo project using Make.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/tests.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmake run-tests\n```\n\n----------------------------------------\n\nTITLE: Setting Span Status in TypeScript\nDESCRIPTION: Demonstrates how to set the status of a span based on certain conditions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport opentelemetry, { SpanStatusCode } from '@opentelemetry/api';\n\n// ...\n\ntracer.startActiveSpan('app.doWork', (span) => {\n  for (let i = 0; i <= Math.floor(Math.random() * 40000000); i += 1) {\n    if (i > 10000) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: 'Error',\n      });\n    }\n  }\n\n  span.end();\n});\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Suites in OpenTelemetry Demo Project\nDESCRIPTION: Commands to run specific test suites in the OpenTelemetry demo project using Docker Compose. Includes commands for frontend tests, backend integration tests, and trace-based tests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/tests.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run frontendTests\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run integrationTests\n```\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run traceBasedTests\n```\n\n----------------------------------------\n\nTITLE: Running Rails Server with Zipkin Configuration\nDESCRIPTION: Shell commands for running a Rails server with Zipkin exporter configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/exporters.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_TRACES_EXPORTER=zipkin rails server\n```\n\nLANGUAGE: shell\nCODE:\n```\nenv OTEL_EXPORTER_OTLP_ENDPOINT=\"http://localhost:9411\" rails server\n```\n\n----------------------------------------\n\nTITLE: Implementing Automatic Context Propagation in TypeScript\nDESCRIPTION: TypeScript implementation of a client application that uses OpenTelemetry to automatically propagate context when making HTTP requests with Undici.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { NodeSDK } from '@opentelemetry/sdk-node';\nimport {\n  SimpleSpanProcessor,\n  ConsoleSpanExporter,\n} from '@opentelemetry/sdk-trace-node';\nimport { UndiciInstrumentation } from '@opentelemetry/instrumentation-undici';\n\nconst sdk = new NodeSDK({\n  spanProcessors: [new SimpleSpanProcessor(new ConsoleSpanExporter())],\n  instrumentations: [new UndiciInstrumentation()],\n});\nsdk.start();\n\nimport { request } from 'undici';\n\nrequest('http://localhost:8080/rolldice').then((response) => {\n  response.body.json().then((json: any) => console.log(json));\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Feedback Survey Redirect in YAML\nDESCRIPTION: YAML frontmatter that configures a redirect to the OpenTelemetry feedback survey Google Form. The configuration includes the title, redirect URL, manual link target setting, build instructions, weight for navigation ordering, and URL aliases.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/community/end-user/feedback-survey.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Feedback Survey\nredirect: https://forms.gle/xLdJCtRpBaWuDBbs8\nmanualLinkTarget: _blank\n_build: { render: link }\nweight: 60\naliases: [/community-feedback]\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Auto-Instrumentation Annotation in YAML\nDESCRIPTION: This YAML snippet shows how to add an annotation to a Kubernetes resource to enable OpenTelemetry auto-instrumentation for Python applications.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nannotations:\n  instrumentation.opentelemetry.io/inject-python: 'true'\n```\n\n----------------------------------------\n\nTITLE: Force-pushing Changes After Rebasing\nDESCRIPTION: Git command to force-push changes to a fork after rebasing. The --force-with-lease flag is used as a safety measure to prevent overwriting others' work that might have been pushed in the meantime.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit push --force-with-lease origin <your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Enabling Memory Oversubscription in Nomad for OTel Demo App\nDESCRIPTION: Command to enable Memory Oversubscription in Nomad, allowing jobs to use more memory than initially allocated if needed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnomad operator scheduler set-config -memory-oversubscription true\n```\n\n----------------------------------------\n\nTITLE: Updating OpenTelemetry Collector ConfigMap in Kubernetes\nDESCRIPTION: This shell command creates or updates a ConfigMap in Kubernetes with the OpenTelemetry Collector configuration. It uses kubectl to apply the configuration from a local YAML file to the 'otel-collector' namespace.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create configmap otel-config --from-file=./otel-config.yaml --dry-run=client -n otel-collector -o yaml | kubectl apply -f -\n```\n\n----------------------------------------\n\nTITLE: Configuring Telemetry Plug in Endpoint\nDESCRIPTION: Adds telemetry plug configuration to the Phoenix endpoint for monitoring HTTP requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: elixir\nCODE:\n```\nplug Plug.Telemetry, event_prefix: [:phoenix, :endpoint]\n```\n\n----------------------------------------\n\nTITLE: Adding Attributes to Metrics in JavaScript with OpenTelemetry\nDESCRIPTION: Demonstrates how to add attributes to metrics when they are generated. This example adds an optional attribute to a counter when incrementing it.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nconst counter = myMeter.createCounter('my.counter');\n\ncounter.add(1, { 'some.optional.attribute': 'some value' });\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Traces Endpoint\nDESCRIPTION: Environment variable configuration for setting the OTLP endpoint specifically for trace data. Supports both gRPC and HTTP protocols.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/sdk-configuration/otlp-exporter.md#2025-04-09_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=\"http://my-api-endpoint/v1/traces\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Agent Extensions\nDESCRIPTION: Sets the path to an extension jar file or folder containing jar files for OpenTelemetry Java agent extensions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/configuration.md#2025-04-09_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\notel.javaagent.extensions=/path/to/extensions\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Span Output Example\nDESCRIPTION: Example of the span output generated by OpenTelemetry when a request is made to the /rolldice endpoint, showing trace details including IDs, timestamps, and resource attributes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: txt\nCODE:\n```\nSpans\nResource\n         ->  telemetry.sdk.version=String(Static(\"0.28.0\"))\n         ->  service.name=String(Static(\"unknown_service\"))\n         ->  telemetry.sdk.language=String(Static(\"rust\"))\n         ->  telemetry.sdk.name=String(Static(\"opentelemetry\"))\nSpan #0\n        Instrumentation Scope\n                Name         : \"dice_server\"\n\n        Name        : GET /rolldice\n        TraceId     : 9f03de7cf14780bd54b95d7095332107\n        SpanId      : 9faed88b3f9ed699\n        TraceFlags  : TraceFlags(1)\n        ParentSpanId: 0000000000000000\n        Kind        : Server\n        Start time: 2025-03-11 00:47:26.687497\n        End time: 2025-03-11 00:47:26.687653\n        Status: Unset\n```\n\n----------------------------------------\n\nTITLE: Launching Java Application with OpenTelemetry Agent (Direct Command)\nDESCRIPTION: This command demonstrates how to launch a Java application with the OpenTelemetry agent, specifying the agent JAR path and service name directly on the startup command.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\njava -javaagent:path/to/opentelemetry-javaagent.jar -Dotel.service.name=your-service-name -jar myapp.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Auto-Instrumentation Platform in Kubernetes YAML\nDESCRIPTION: YAML annotations to specify the platform (glibc or musl) for Python auto-instrumentation in OpenTelemetry Operator.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# for Linux glibc based images, this is the default value and can be omitted\ninstrumentation.opentelemetry.io/otel-python-platform: \"glibc\"\n# for Linux musl based images\ninstrumentation.opentelemetry.io/otel-python-platform: \"musl\"\n```\n\n----------------------------------------\n\nTITLE: Visualizing GitHub-based PR Process with Mermaid\nDESCRIPTION: A flowchart showing the steps for opening a pull request using the GitHub interface, from editing the page to creating the pull request.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\nA([fa:fa-user New<br>Contributor]) --- id1[(open-telemetry/opentelemetry.io<br>GitHub)]\nsubgraph tasks[Changes using GitHub]\ndirection TB\n    0[ ] -.-\n    1[1\\. Edit this page] --> 2[2\\. Use GitHub markdown<br>editor to make changes]\n    2 --> 3[3\\. Fill in Propose file change]\n\nend\nsubgraph tasks2[ ]\ndirection TB\n4[4\\. Select Propose file change] --> 5[5\\. Select Create pull request] --> 6[6\\. Fill in Open a pull request]\n6 --> 7[7\\. Select Create pull request]\nend\n\nid1 --> tasks --> tasks2\n\nclassDef grey fill:#dddddd,stroke:#ffffff,stroke-width:px,color:#000000, font-size:15px;\nclassDef white fill:#ffffff,stroke:#000,stroke-width:px,color:#000,font-weight:bold\nclassDef k8s fill:#326ce5,stroke:#fff,stroke-width:1px,color:#fff;\nclassDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000\nclass A,1,2,3,4,5,6,7 grey\nclass 0 spacewhite\nclass tasks,tasks2 white\nclass id1 k8s\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose for OpenTelemetry Setup\nDESCRIPTION: Command for running Docker Compose to set up a simple OpenTelemetry environment. This is mentioned as part of a suggestion for simpler reference implementations to help newcomers get started.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/end-user-q-and-a-02.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Application Docker Container\nDESCRIPTION: Dockerfile that sets up the Python environment, installs the python-json-logger dependency, and prepares the application for execution.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\nFROM python:3.11\nWORKDIR /usr/src/app\nCOPY requirements.txt requirements.txt\nRUN pip3 install --no-cache-dir -r requirements.txt\nCOPY . .\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for Python Backend with OpenTelemetry\nDESCRIPTION: This Dockerfile sets up a Python environment with Flask and OpenTelemetry instrumentation. It installs necessary dependencies and configures the OpenTelemetry instrument command to run the Flask application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/debug-otel-with-otel/index.md#2025-04-09_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM python:3.10-alpine\nWORKDIR /code\nENV FLASK_APP=app.py\nENV FLASK_RUN_HOST=0.0.0.0\nRUN apk add --no-cache gcc musl-dev linux-headers\nCOPY requirements.txt requirements.txt\nRUN pip install -r requirements.txt\nRUN opentelemetry-bootstrap -a install\nEXPOSE 5000\nCOPY . .\nCMD [\"opentelemetry-instrument\", \"--traces_exporter\", \"otlp_proto_http\", \"--metrics_exporter\", \"console\", \"flask\", \"run\"]\n```\n\n----------------------------------------\n\nTITLE: Testing Netlify Redirects Locally\nDESCRIPTION: Command to serve the OpenTelemetry.io website with Netlify redirects enabled. The site will be available at localhost:8888.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/development.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm run serve:netlify\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Receiver for IPv4 in YAML\nDESCRIPTION: This snippet demonstrates how to configure the OTLP receiver to use the IPv4 loopback address for the gRPC endpoint, enhancing security by limiting connections to the local machine.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 127.0.0.1:4317\n```\n\n----------------------------------------\n\nTITLE: Running Application with UV and OpenTelemetry\nDESCRIPTION: Command to run a Python application with OpenTelemetry instrumentation using UV\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/_index.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nuv run opentelemetry-instrument python myapp.py\n```\n\n----------------------------------------\n\nTITLE: Creating a Service Legend for OpenTelemetry Demo with Mermaid\nDESCRIPTION: This Mermaid diagram provides a legend for the programming languages used in the OpenTelemetry Demo microservices. It uses color-coding to represent different languages, making it easier to identify the technology stack of each service in the main architecture diagram.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/architecture.md#2025-04-09_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\nsubgraph Service Legend\n  dotnetsvc(.NET):::dotnet\n  cppsvc(C++):::cpp\n  golangsvc(Go):::golang\n  javasvc(Java):::java\n  javascriptsvc(JavaScript):::javascript\n  kotlinsvc(Kotlin):::kotlin\n  phpsvc(PHP):::php\n  pythonsvc(Python):::python\n  rubysvc(Ruby):::ruby\n  rustsvc(Rust):::rust\n  typescriptsvc(TypeScript):::typescript\nend\n\nclassDef dotnet fill:#178600,color:white;\nclassDef cpp fill:#f34b7d,color:white;\nclassDef golang fill:#00add8,color:black;\nclassDef java fill:#b07219,color:white;\nclassDef javascript fill:#f1e05a,color:black;\nclassDef kotlin fill:#560ba1,color:white;\nclassDef php fill:#4f5d95,color:white;\nclassDef python fill:#3572A5,color:white;\nclassDef ruby fill:#701516,color:white;\nclassDef rust fill:#dea584,color:black;\nclassDef typescript fill:#e98516,color:black;\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Semantic Convention Opt-In Environment Variable\nDESCRIPTION: Specifies the environment variable and its accepted values for opting into stable HTTP semantic conventions in OpenTelemetry instrumentations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/http-conventions-declared-stable.md#2025-04-09_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_SEMCONV_STABILITY_OPT_IN=http\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nOTEL_SEMCONV_STABILITY_OPT_IN=http/dup\n```\n\n----------------------------------------\n\nTITLE: Custom OpenTelemetry Collector Configuration\nDESCRIPTION: Sample custom configuration for the collector showing AWS X-Ray integration and debug exporters with local endpoints.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/faas/lambda-collector.md#2025-04-09_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: 'localhost:4317'\n      http:\n        endpoint: 'localhost:4318'\n\nexporters:\n  # NOTE: Prior to v0.86.0 use `logging` instead of `debug`.\n  debug:\n  awsxray:\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [awsxray]\n    metrics:\n      receivers: [otlp]\n      exporters: [debug]\n  telemetry:\n    metrics:\n      address: localhost:8888\n```\n\n----------------------------------------\n\nTITLE: Visualizing Local Development Workflow with Mermaid\nDESCRIPTION: A flowchart illustrating the steps for working on OpenTelemetry documentation from a local fork, including cloning, making changes, and pushing commits.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_3\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n1[Fork the open-telemetry/opentelemetry<br>repository] --> 2[Create local clone<br>and set upstream]\nsubgraph changes[Your changes]\ndirection TB\nS[ ] -.-\n3[Create a branch<br>example: my_new_branch] --> 3a[Make changes using<br>a text editor] --> 4[\"Preview your changes<br>locally using Hugo<br>(localhost:1313)\"]\nend\nsubgraph changes2[Commit / Push]\ndirection TB\nT[ ] -.-\n5[Commit your changes] --> 6[Push commit to<br>origin/my_new_branch]\nend\n\n2 --> changes --> changes2\n\nclassDef grey fill:#dddddd,stroke:#ffffff,stroke-width:px,color:#000000, font-size:15px;\nclassDef white fill:#ffffff,stroke:#000,stroke-width:px,color:#000,font-weight:bold\nclassDef k8s fill:#326ce5,stroke:#fff,stroke-width:1px,color:#fff;\nclassDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000\nclass 1,2,3,3a,4,5,6 grey\nclass S,T spacewhite\nclass changes,changes2 white\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Status Table in Markdown\nDESCRIPTION: Table displaying the implementation status of core OpenTelemetry components (Traces, Metrics, and Logs) for a specific language implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/_includes/index-intro.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Traces              | Metrics              | Logs              |\n| ------------------- | -------------------- | ----------------- |\n| {{ $tracesStatus }} | {{ $metricsStatus }} | {{ $logsStatus }} |\n```\n\n----------------------------------------\n\nTITLE: Visualizing Log Flow with Mermaid Diagram\nDESCRIPTION: This diagram illustrates the flow of logs from the Python application to the OTel Collector and then to stdout.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/logs-collection/index.md#2025-04-09_snippet_8\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n    app[\"python main.py\"]-- OTLP --> otelcol[\"OTel collector\"]\n    otelcol[\"OTel collector\"] -->  stdout[\"stdout\"]\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Collector Helm Chart\nDESCRIPTION: Commands to add the OpenTelemetry Helm repository and install the Collector chart with basic configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/collector.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\nhelm install my-opentelemetry-collector open-telemetry/opentelemetry-collector \\\n   --set image.repository=\"otel/opentelemetry-collector-k8s\" \\\n   --set mode=<daemonset|deployment|statefulset> \\\n```\n\n----------------------------------------\n\nTITLE: Acquiring a Meter in TypeScript\nDESCRIPTION: Shows how to acquire a meter from the global meter provider using an instrumentation scope name and version. This is used to create metric instruments.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_49\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport opentelemetry from '@opentelemetry/api';\n\nconst myMeter = opentelemetry.metrics.getMeter(\n  'instrumentation-scope-name',\n  'instrumentation-scope-version',\n);\n\n// You can now use a 'meter' to create instruments!\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for OpenTelemetry Collector\nDESCRIPTION: This Docker Compose configuration sets up the OpenTelemetry Collector service, mapping the gRPC port for external access.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:{{% param collector_vers %}}\n    ports:\n      - '4567:4317'\n```\n\n----------------------------------------\n\nTITLE: Configuring Zipkin Exporter in ASP.NET Core\nDESCRIPTION: Configure the Zipkin exporter for tracing in an ASP.NET Core application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n    .WithTracing(tracing => tracing\n        // The rest of your setup code goes here\n        .AddZipkinExporter(options =>\n        {\n            options.Endpoint = new Uri(\"your-zipkin-uri-here\");\n        }));\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry Resource Detectors Documentation\nDESCRIPTION: Comprehensive list of available resource detectors with their IDs, descriptions, documentation links, and experimental status.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/configuration.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| ID                | Description                | Documentation                                                                                                                                                                                                                         | Status                                                    |\n| ----------------- | -------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------- |\n| `AZUREAPPSERVICE` | Azure App Service detector | [Azure resource detector documentation](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/Resources.Azure-1.0.0-beta.9/src/OpenTelemetry.Resources.Azure/README.md)                                                 | [Experimental](/docs/specs/otel/versioning-and-stability) |\n| `CONTAINER`       | Container detector         | [Container resource detector documentation](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/Resources.Container-1.0.0-beta.9/src/OpenTelemetry.Resources.Container/README.md) **Not supported on .NET Framework** | [Experimental](/docs/specs/otel/versioning-and-stability) |\n| `HOST`            | Host detector              | [Host resource detector documentation](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/Resources.Host-0.1.0-beta.3/src/OpenTelemetry.Resources.Host/README.md)                                                    | [Experimental](/docs/specs/otel/versioning-and-stability) |\n| `OPERATINGSYSTEM` | Operating System detector  | [Operating System resource detector documentation](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/Resources.OperatingSystem-0.1.0-alpha.4/src/OpenTelemetry.Resources.OperatingSystem/README.md)                 | [Experimental](/docs/specs/otel/versioning-and-stability) |\n| `PROCESS`         | Process detector           | [Process resource detector documentation](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/Resources.Process-0.1.0-beta.3/src/OpenTelemetry.Resources.Process/README.md)                                           | [Experimental](/docs/specs/otel/versioning-and-stability) |\n| `PROCESSRUNTIME`  | Process Runtime detector   | [Process Runtime resource detector documentation](https://github.com/open-telemetry/opentelemetry-dotnet-contrib/blob/Resources.ProcessRuntime-0.1.0-beta.2/src/OpenTelemetry.Resources.ProcessRuntime/README.md)                     | [Experimental](/docs/specs/otel/versioning-and-stability) |\n```\n\n----------------------------------------\n\nTITLE: Configuración del repositorio upstream en Git\nDESCRIPTION: Comando de shell para agregar el repositorio original de OpenTelemetry como 'upstream' remote para poder sincronizar cambios futuros.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngit remote add upstream https://github.com/open-telemetry/opentelemetry.io.git\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for OpenTelemetry Swift Registry Page\nDESCRIPTION: This YAML frontmatter defines metadata for the OpenTelemetry Swift Registry page. It specifies the title, description, redirect URL, build instructions, and navigation weight for the page.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Instrumentation libraries, exporters and other useful components for\n  OpenTelemetry Swift\nredirect: /ecosystem/registry/?language=swift\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration\nDESCRIPTION: YAML configuration block defining metadata for the blog post including title, date, author information and aliases.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/end-user-discussions-01.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: OpenTelemetry End-User Discussions Summary for January 2023\nlinkTitle: End-User Discussions Jan 2023\ndate: 2023-01-27\nauthor: '[Adriana Villela](https://github.com/avillela) (Lightstep)'\naliases: [otel-end-user-discussions-january-2023]\nbody_class: otel-with-contributions-from\ncSpell:ignore: january OTTL\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This snippet shows how to embed a YouTube video in Markdown using a custom shortcode.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/humans-of-otel.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{<youtube coPrhP_7lVU>}}\n```\n\n----------------------------------------\n\nTITLE: Defining a Root Span in OpenTelemetry JSON Format\nDESCRIPTION: Example of a root span in a trace, containing a trace_id, span_id, timestamps, attributes, and events. This span has no parent_id, indicating it's the beginning of the trace.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/concepts/signals/traces.md#2025-04-09_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"hello\",\n  \"context\": {\n    \"trace_id\": \"5b8aa5a2d2c872e8321cf37308d69df2\",\n    \"span_id\": \"051581bf3cb55c13\"\n  },\n  \"parent_id\": null,\n  \"start_time\": \"2022-04-29T18:52:58.114201Z\",\n  \"end_time\": \"2022-04-29T18:52:58.114687Z\",\n  \"attributes\": {\n    \"http.route\": \"some_route1\"\n  },\n  \"events\": [\n    {\n      \"name\": \"Guten Tag!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114561Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying OpenTelemetry Demo App Services to Nomad\nDESCRIPTION: Series of commands to deploy all the services of the OpenTelemetry Demo App to Nomad using job specification files.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnomad job run -detach otel-demo-app/jobspec/traefik.nomad\nnomad job run -detach otel-demo-app/jobspec/redis.nomad\nnomad job run -detach otel-demo-app/jobspec/ffspostgres.nomad\nnomad job run -detach otel-demo-app/jobspec/otel-collector.nomad\nnomad job run -detach otel-demo-app/jobspec/adservice.nomad\nnomad job run -detach otel-demo-app/jobspec/cartservice.nomad\nnomad job run -detach otel-demo-app/jobspec/currencyservice.nomad\nnomad job run -detach otel-demo-app/jobspec/emailservice.nomad\nnomad job run -detach otel-demo-app/jobspec/featureflagservice.nomad\nnomad job run -detach otel-demo-app/jobspec/paymentservice.nomad\nnomad job run -detach otel-demo-app/jobspec/productcatalogservice.nomad\nnomad job run -detach otel-demo-app/jobspec/quoteservice.nomad\nnomad job run -detach otel-demo-app/jobspec/shippingservice.nomad\nnomad job run -detach otel-demo-app/jobspec/checkoutservice.nomad\nnomad job run -detach otel-demo-app/jobspec/recommendationservice.nomad\nnomad job run -detach otel-demo-app/jobspec/frontend.nomad\nnomad job run -detach otel-demo-app/jobspec/loadgenerator.nomad\nnomad job run -detach otel-demo-app/jobspec/frontendproxy.nomad\nnomad job run -detach otel-demo-app/jobspec/grafana.nomad\nnomad job run -detach otel-demo-app/jobspec/jaeger.nomad\nnomad job run -detach otel-demo-app/jobspec/prometheus.nomad\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector for Log Collection\nDESCRIPTION: YAML configuration for setting up OpenTelemetry Collector to receive, process, and export logs from various sources including file-based logs and OTLP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/collecting-otel-compliant-java-logs-from-files/index.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# tested with otelcol-contrib v0.112.0\n\nreceivers:\n  filelog/otlp-json-logs:\n    # start_at: beginning # for testing purpose, use \"start_at: beginning\"\n    include: [/path/to/my-app.otlpjson.log]\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n  resourcedetection:\n    detectors: ['env', 'system']\n    override: false\n\nconnectors:\n  otlpjson:\n\nservice:\n  pipelines:\n    logs/raw_otlpjson:\n      receivers: [filelog/otlp-json-logs]\n      # (i) no need for processors before the otlpjson connector\n      # Declare processors in the shared \"logs\" pipeline below\n      processors: []\n      exporters: [otlpjson]\n    logs:\n      receivers: [otlp, otlpjson]\n      processors: [resourcedetection, batch]\n      # remove \"debug\" for production deployments\n      exporters: [otlphttp, debug]\n\nexporters:\n  debug:\n    verbosity: detailed\n  # Exporter to the OTLP backend like `otlphttp`\n  otlphttp:\n```\n\n----------------------------------------\n\nTITLE: OTLP Receiver Configuration for Docker Compose\nDESCRIPTION: This YAML configuration sets up the OTLP receiver for use in a Docker Compose environment, using the service name as the endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/config-best-practices.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n        endpoint: otel-collector:4317 # Use the service name from your Docker compose file\n```\n\n----------------------------------------\n\nTITLE: Writing OpenTelemetry Tests in Erlang with Common Test\nDESCRIPTION: Erlang test module using Common Test framework to verify that spans are correctly created with the expected attributes. It uses the otel_simple_processor with an exporter that sends spans to the test process.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/testing.md#2025-04-09_snippet_6\n\nLANGUAGE: erlang\nCODE:\n```\n-module(otel_getting_started_SUITE).\n\n-compile(export_all).\n\n-include_lib(\"stdlib/include/assert.hrl\").\n-include_lib(\"common_test/include/ct.hrl\").\n\n-include_lib(\"opentelemetry/include/otel_span.hrl\").\n\n-define(assertReceive(SpanName),\n        receive\n            {span, Span=#span{name=SpanName}} ->\n                Span\n        after\n            1000 ->\n                ct:fail(\"Did not receive the span after 1s\")\n        end).\n\nall() ->\n    [greets_the_world].\n\ninit_per_suite(Config) ->\n    application:load(opentelemetry),\n    application:set_env(opentelemetry, processors, [{otel_simple_processor, #{}}]),\n    {ok, _} = application:ensure_all_started(opentelemetry),\n    Config.\n\nend_per_suite(_Config) ->\n    _ = application:stop(opentelemetry),\n    _ = application:unload(opentelemetry),\n    ok.\n\ninit_per_testcase(greets_the_world, Config) ->\n    otel_simple_processor:set_exporter(otel_exporter_pid, self()),\n    Config.\n\nend_per_testcase(greets_the_world, _Config) ->\n    otel_simple_processor:set_exporter(none),\n    ok.\n\ngreets_the_world(_Config) ->\n    otel_getting_started:hello(),\n\n    ExpectedAttributes = otel_attributes:new(#{a_key => <<\"a_value\">>}, 128, infinity),\n    #span{attributes=ReceivedAttributes} = ?assertReceive(<<\"operation\">>),\n\n    %% use an assertMatch instead of matching in the `receive'\n    %% so we get a nice error message if it fails\n    ?assertMatch(ReceivedAttributes, ExpectedAttributes),\n\n    ok.\n```\n\n----------------------------------------\n\nTITLE: Manual Context Propagation in Elixir\nDESCRIPTION: This code snippet demonstrates how to manually inject and extract context using the otel_propagator_text_map module in Elixir. It injects the context from the process dictionary into headers and extracts a context from headers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/propagation.md#2025-04-09_snippet_3\n\nLANGUAGE: elixir\nCODE:\n```\n# uses the context from the process dictionary to add to an empty list of headers\nheaders = :otel_propagator_text_map.inject([])\n\n# creates a context in the process dictionary from headers\n:otel_propagator_text_map.extract(headers)\n```\n\n----------------------------------------\n\nTITLE: Automated PR Merge Check Shell Command\nDESCRIPTION: Shell command to watch PR checks and automatically merge a pull request when all checks pass. Uses GitHub CLI to monitor checks and perform squash merge.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/sig-practices.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport PR=<ID OF THE PR>; gh pr checks ${PR} --watch && gh pr merge ${PR} --squash\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP HTTP/Proto Exporters in JavaScript\nDESCRIPTION: Installs the OpenTelemetry OTLP HTTP/Proto exporters for traces and metrics as npm dependencies for your project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/exporters.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save @opentelemetry/exporter-trace-otlp-proto \\\n  @opentelemetry/exporter-metrics-otlp-proto\n```\n\n----------------------------------------\n\nTITLE: Social Media Links in Markdown\nDESCRIPTION: Markdown links to various OpenTelemetry community resources and social media channels.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/humans-of-otel.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[#otel-endusers channel](/community/end-user/slack-channel/)\n[CNCF Community Slack](https://communityinviter.com/apps/cloud-native/cncf)\n[End-User Discussion Group calls](/community/end-user/discussion-group/)\n[OTel in Practice](/community/end-user/otel-in-practice/)\n[OpenTelemetry blog](https://github.com/open-telemetry/opentelemetry.io/blob/954103a7444d691db3967121f0f1cb194af1dccb/README.md#submitting-a-blog-post)\n[Mastodon](https://fosstodon.org/@opentelemetry)\n[LinkedIn](https://www.linkedin.com/company/opentelemetry/)\n[YouTube channel](https://youtube.com/@otel-official)\n```\n\n----------------------------------------\n\nTITLE: Defining Child Span 'olá-saudações' in JSON for OpenTelemetry Tracing\nDESCRIPTION: JSON representation of another child span named 'olá-saudações' in an OpenTelemetry trace. It includes context information, parent ID, timestamps, attributes, and a single event.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/signals/traces.md#2025-04-09_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"olá-saudações\",\n  \"context\": {\n    \"trace_id\": \"5b8aa5a2d2c872e8321cf37308d69df2\",\n    \"span_id\": \"5fb397be34d26b51\"\n  },\n  \"parent_id\": \"051581bf3cb55c13\",\n  \"start_time\": \"2022-04-29T18:52:58.114492Z\",\n  \"end_time\": \"2022-04-29T18:52:58.114631Z\",\n  \"attributes\": {\n    \"http.route\": \"alguma_rota3\"\n  },\n  \"events\": [\n    {\n      \"name\": \"olá!\",\n      \"timestamp\": \"2022-04-29T18:52:58.114561Z\",\n      \"attributes\": {\n        \"event_attributes\": 1\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example OpenTelemetry Metrics Output\nDESCRIPTION: Sample YAML output of metrics generated by OpenTelemetry instrumentation, including HTTP server duration, client duration, and database connection usage.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  descriptor: {\n    name: 'http.server.duration',\n    type: 'HISTOGRAM',\n    description: 'measures the duration of the inbound HTTP requests',\n    unit: 'ms',\n    valueType: 1\n  },\n  dataPointType: 0,\n  dataPoints: [\n    {\n      attributes: [Object],\n      startTime: [Array],\n      endTime: [Array],\n      value: [Object]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration for OpenTelemetry Logs Collection\nDESCRIPTION: YAML annotation for configuring custom log collection parameters for a pod. This allows users to specify log processing operators and parameters like maximum log size to be used by the filelog receiver.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/otel-collector-k8s-discovery.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nio.opentelemetry.discovery.logs/config: |\n  max_log_size: \"2MiB\"\n  operators:\n  - type: container\n    id: container-parser\n  - type: regex_parser\n    regex: '^(?P<time>\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}) (?P<sev>[A-Z]*) (?P<msg>.*)$'\n```\n\n----------------------------------------\n\nTITLE: Implementing Observable UpDown Counter in JavaScript with OpenTelemetry\nDESCRIPTION: Demonstrates how to create and use an observable up-down counter to measure a non-monotonically increasing cumulative value. The counter observes the length of an events array that can be modified.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nconst events = [];\n\nconst addEvent = (name) => {\n  events.push(name);\n};\n\nconst removeEvent = () => {\n  events.pop();\n};\n\nconst counter = myMeter.createObservableUpDownCounter('events.counter');\n\ncounter.addCallback((result) => {\n  result.observe(events.length);\n});\n\n//... calls to addEvent and removeEvent\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Structure for OpenTelemetry Getting Started Guide\nDESCRIPTION: Front matter and markdown structure for the OpenTelemetry getting started documentation page. Includes role-based navigation links and demo references.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/getting-started/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Getting Started\ndescription: Get started with OpenTelemetry based on your role.\nno_list: true\nweight: 160\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Alert Component in Hugo Template\nDESCRIPTION: A Hugo template partial that generates an alert/notification component with customizable color and optional title. The component uses Bootstrap alert classes and supports safe HTML rendering in the title.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/alert-md.md#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{/* Temporary, from Docsy */ -}}\n\n{{ $color := .Get \"color\" | default \"primary\" -}}\n\n<div class=\"alert alert-{{ $color }}\" role=\"alert\">\n{{- with .Get \"title\" -}}\n  <div class=\"h4 alert-heading\" role=\"heading\">\n    {{- . | safeHTML -}}\n  </div>\n{{/* Do **not** remove this comment! It ends the previous HTML block; see https://spec.commonmark.org/0.30/#html-blocks, 7. */}}\n{{- end -}}\n{{ .Inner -}}\n</div>\n{{/* */ -}}\n```\n\n----------------------------------------\n\nTITLE: Initializing Metrics in Java\nDESCRIPTION: Shows how to initialize a Meter instance and create a counter metric using the builder pattern.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/ad.md#2025-04-09_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nmeter\n  .counterBuilder(\"app.ads.ad_requests\")\n  .setDescription(\"Counts ad requests by request and response type\")\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Helm Repository\nDESCRIPTION: Command to add the OpenTelemetry Helm chart repository to your local Helm installation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/kubernetes-deployment.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n```\n\n----------------------------------------\n\nTITLE: Creating Nested Spans in the Same Scope\nDESCRIPTION: C# code demonstrating how to create nested spans within the same function scope. This approach requires careful management of span lifetimes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic static void DoWork(Tracer tracer)\n{\n    using var parentSpan = tracer.StartActiveSpan(\"parent-span\");\n\n    // Do some work tracked by parentSpan\n\n    using (var childSpan = tracer.StartActiveSpan(\"child-span\"))\n    {\n        // Do some \"child\" work in the same function\n    }\n\n    // Finish up work tracked by parentSpan again\n}\n```\n\n----------------------------------------\n\nTITLE: YAML Path Reference for Distributions\nDESCRIPTION: Reference to the YAML file location where distributions are listed in the OpenTelemetry documentation repository.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/ecosystem/distributions.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nhttps://github.com/open-telemetry/opentelemetry.io/tree/main/data/ecosystem/distributions.yaml\n```\n\n----------------------------------------\n\nTITLE: Processing File Inclusion with Variable Substitution in Hugo Templates\nDESCRIPTION: This Go template partial processes file inclusion with variable substitution. It finds the requested file, renders any shortcodes within it, performs variable substitution, processes conditional blocks based on variables, and provides error handling for missing files.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/include.md#2025-04-09_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{/*\n\nThis partial implements the core functionality of the 'include.html' shortcode,\nallowing reuse across other shortcodes and partials.\n\nThis partial expects the following arguments -- beyond those used for the\ninclude functionality:\n\n- `_dot`: the '.' context of the page or shortcode invoking this partial\n- `_path`: the path to the file to be included\n\n*/ -}}\n\n{{ $path := ._path -}}\n{{ $args := . -}}\n{{ $page := partial \"func/find-include.html\"  (dict \"path\" $path \"page\" ._dot.Page) -}}\n{{ with $page -}}\n  {{ $content := .RenderShortcodes -}}\n  {{ range $_k, $v := $args -}}\n    {{ $k := string $_k -}}\n    {{ if not (hasPrefix $k \"_\") -}}\n      {{ $regex := printf `\\{\\{\\s*\\$%s\\s*\\}\\}` $k -}}\n      {{ $content = replaceRE $regex $v $content -}}\n      {{ $_regex := `(?ms)^\\{\\{\\s*if%s\\s+\\$%s\\s*\\}\\}(.+?)^\\{\\{\\s*end\\s*\\}\\}` -}}\n      {{ $regexIf    := printf $_regex \"\" $k -}}\n      {{ $regexIfNot := printf $_regex \" not\" $k -}}\n      {{ if $v -}}\n        {{ $content = replaceRE $regexIf    \"$1\" $content -}}\n        {{ $content = replaceRE $regexIfNot \"\"   $content -}}\n      {{ else -}}\n        {{ $content = replaceRE $regexIf    \"\"   $content -}}\n        {{ $content = replaceRE $regexIfNot \"$1\" $content -}}\n      {{ end -}}\n    {{ end -}}\n  {{ end -}}\n  {{ $content -}}\n{{ else -}}\n  {{ $msg := printf\n      \"Can't include '%s': file not found in page or ancestor contexts of page %s.\"\n      $path .Page.Path -}}\n  {{ warnf $msg -}}\n\n  <div class=\"alert alert-warning\">\n  <div class=\"h4 alert-heading\">INTERNAL SITE ERROR</div>\n  {{ $msg }}\n  </div>\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating New Localization Checklist - Markdown\nDESCRIPTION: A template checklist for tracking the setup of a new website localization, including contributor assignments, homepage translation, and administrative tasks.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- [ ] Contributors for the new language: @GITHUB_HANDLE1, @GITHUB_HANDLE2, ...\n- [ ] Localize site homepage to YOUR_LANGUAGE_NAME\n- [ ] Create an issue label for `lang:LANG_ID`\n- [ ] Create org-level group for `LANG_ID` approvers\n- [ ] Update components owners for `content/LANG_ID`\n- [ ] Set up spell checking, if a cSpell dictionary is available\n```\n\n----------------------------------------\n\nTITLE: AWS CLI Lambda Configuration Update\nDESCRIPTION: Command to update Lambda function configuration with custom collector configuration path using AWS CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/faas/lambda-collector.md#2025-04-09_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\naws lambda update-function-configuration --function-name Function --environment Variables={OPENTELEMETRY_COLLECTOR_CONFIG_URI=/var/task/collector.yaml}\n```\n\n----------------------------------------\n\nTITLE: YAML Configuration for OpenTelemetry Python Registry\nDESCRIPTION: YAML frontmatter configuration that sets up a redirect to the OpenTelemetry ecosystem registry specifically filtered for Python components. Includes metadata like title, description and build parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Instrumentation libraries, exporters and other useful components for\n  OpenTelemetry Python\nredirect: /ecosystem/registry/?language=python\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Fixing PR Check Failures with Bot Commands\nDESCRIPTION: Commands to trigger the OpenTelemetry bot to automatically fix various build issues in pull requests.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/pull-requests.md#2025-04-09_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n/fix:all\n```\n\n----------------------------------------\n\nTITLE: Creating Independent Sibling Spans in JavaScript with OpenTelemetry\nDESCRIPTION: Creates multiple independent spans that share the same parent rather than being nested. This pattern is useful when tracing independent units of work that are logically grouped together.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst doWork = () => {\n  const span1 = tracer.startSpan('work-1');\n  // do some work\n  const span2 = tracer.startSpan('work-2');\n  // do some more work\n  const span3 = tracer.startSpan('work-3');\n  // do even more work\n\n  span1.end();\n  span2.end();\n  span3.end();\n};\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Dependencies for Go\nDESCRIPTION: Installs necessary OpenTelemetry packages for Go, including SDK components and HTTP instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/go/getting-started.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ngo get \"go.opentelemetry.io/otel\" \\\n  \"go.opentelemetry.io/otel/exporters/stdout/stdoutmetric\" \\\n  \"go.opentelemetry.io/otel/exporters/stdout/stdouttrace\" \\\n  \"go.opentelemetry.io/otel/exporters/stdout/stdoutlog\" \\\n  \"go.opentelemetry.io/otel/sdk/log\" \\\n  \"go.opentelemetry.io/otel/log/global\" \\\n  \"go.opentelemetry.io/otel/propagation\" \\\n  \"go.opentelemetry.io/otel/sdk/metric\" \\\n  \"go.opentelemetry.io/otel/sdk/resource\" \\\n  \"go.opentelemetry.io/otel/sdk/trace\" \\\n  \"go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp\"\\\n  \"go.opentelemetry.io/contrib/bridges/otelslog\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Exponential Bucket Histograms in OpenTelemetry Java\nDESCRIPTION: This command sets an environment variable to enable exponential bucket histograms as the default histogram aggregation in OpenTelemetry Java. This is the easiest way to enable this feature in the Java implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/exponential-histograms/index.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_METRICS_DEFAULT_HISTOGRAM_AGGREGATION=exponential_bucket_histogram\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Packages for ASP.NET Core\nDESCRIPTION: Commands to add required OpenTelemetry packages for an ASP.NET Core application using the dotnet CLI.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/shim.md#2025-04-09_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndotnet add package OpenTelemetry --prerelease\ndotnet add package OpenTelemetry.Instrumentation.AspNetCore --prerelease\ndotnet add package OpenTelemetry.Extensions.Hosting --prerelease\ndotnet add package OpenTelemetry.Exporter.Console --prerelease\n```\n\n----------------------------------------\n\nTITLE: Configuring Link Checker Ignore Rules - YAML\nDESCRIPTION: Front matter configuration for the link checker to ignore specific non-English directories when performing link validation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nhtmltest:\n  # TODO: remove the IgnoreDirs once broken links are fixed\n  IgnoreDirs:\n    - path-regex/to/non-en/directory/contain/files/to/ignore\n    - path-2-etc\n```\n\n----------------------------------------\n\nTITLE: Querying and Displaying OpenTelemetry Integrations in Hugo\nDESCRIPTION: This Hugo shortcode retrieves OpenTelemetry-integrated libraries for a specified language from the site's data files. It filters for native integrations, sorts them, and displays up to a specified number of results. If no integrations are found, it shows a help wanted message.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/partials/docs/native-libraries.md#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $howMany := .Get 1 | default 10 -}}\n{{ $langIndex := .Get 0 }}\n{{ $lang := index $.Site.Data.instrumentation $langIndex -}}\n{{ $integrations := where (slice ) \".language\" $langIndex -}}\n\n{{ $integrations := slice }} {{ range $entry := $.Site.Data.registry }}\n{{ if and (and (eq $entry.language $langIndex) (eq $entry.isNative true)) (eq $entry.registryType \"instrumentation\") }}\n{{ $integrations = $integrations | append $entry }} {{ end }} {{ end }}\n\n{{ range first $howMany (sort $integrations \"name\") -}}\n\n<!-- prettier-ignore -->\n- [{{ .title }}]({{ .urls.docs }})\n{{- end }}\n\n{{ if eq (len $integrations) 0 -}}\n\n<div class=\"alert alert-secondary\" role=\"alert\">\n<h4 class=\"alert-title\">Help wanted!</h4>\nAs of today, we don't know about any {{ $lang.name }} library that has OpenTelemetry\nnatively integrated. If you know about such a library,\n<a href=\"https://github.com/open-telemetry/opentelemetry.io/issues/new\" target=\"_blank\" rel=\"noopener\" class=\"external-link\">let us know</a>.\n</div>\n{{ else -}}\n<div class=\"alert alert-info\" role=\"alert\">\nIf you know a {{ $lang.name }} library that has OpenTelemetry\nnatively integrated,\n<a href=\"https://github.com/open-telemetry/opentelemetry.io/issues/new\" target=\"_blank\" rel=\"noopener\" class=\"external-link\">let us know</a>.\n</div>\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Collector Components List Command\nDESCRIPTION: Command to list available components in a Collector distribution.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/troubleshooting.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\notelcol components\n```\n\n----------------------------------------\n\nTITLE: Excluding .NET Auto-instrumentation Libraries in Kubernetes\nDESCRIPTION: This YAML configuration shows how to selectively disable specific .NET auto-instrumentation libraries by setting environment variables. It demonstrates disabling gRPC client instrumentation and process metrics collection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/automatic.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\n  name: demo-instrumentation\nspec:\n  exporter:\n    endpoint: http://demo-collector:4318\n  propagators:\n    - tracecontext\n    - baggage\n  sampler:\n    type: parentbased_traceidratio\n    argument: '1'\n  dotnet:\n    env:\n      - name: OTEL_DOTNET_AUTO_TRACES_GRPCNETCLIENT_INSTRUMENTATION_ENABLED\n        value: false\n      - name: OTEL_DOTNET_AUTO_METRICS_PROCESS_INSTRUMENTATION_ENABLED\n        value: false\n```\n\n----------------------------------------\n\nTITLE: OpenTelemetry TCP Client Implementation\nDESCRIPTION: Node.js client implementation that demonstrates context propagation over a custom TCP protocol. Creates and injects trace context into messages sent to the server.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/propagation.md#2025-04-09_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// client.js\nconst net = require('net');\nconst { context, propagation, trace } = require('@opentelemetry/api');\n\nlet tracer = trace.getTracer('client');\n\n// Connect to the server\nconst client = net.createConnection({ port: 8124 }, () => {\n  // Send the serialized object to the server\n  let span = tracer.startActiveSpan('send', { kind: 1 }, (span) => {\n    const output = {};\n    propagation.inject(context.active(), output);\n    const { traceparent, tracestate } = output;\n\n    const objToSend = { key: 'value' };\n\n    if (traceparent) {\n      objToSend._meta = { traceparent, tracestate };\n    }\n\n    client.write(JSON.stringify(objToSend), () => {\n      client.end();\n      span.end();\n    });\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Comandos para clonar y configurar el repositorio de OpenTelemetry\nDESCRIPTION: Comandos de shell para clonar el repositorio después de hacer fork, instalar las dependencias y configurar los remotes para mantener sincronizado el repositorio local con el original.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngit clone git@github.com:<your_github_username>/opentelemetry.io.git\ncd opentelemetry.io\nnpm install\n```\n\n----------------------------------------\n\nTITLE: PHP Test Page with Artificial Delay\nDESCRIPTION: A sample PHP page that introduces a one-second delay using sleep() function to demonstrate how module-level performance metrics can identify bottlenecks in request processing.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/instrument-apache-httpd-server/index.md#2025-04-09_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<!doctype html>\n<html>\n  <head>\n    <title>PHP Test Page</title>\n  </head>\n\n  <body>\n    <?php echo date('h:i:s') . \"<br />\"; echo \"Introduce delay of 1 seconds\" .\n    \"<br />\"; sleep(1); echo date('h:i:s'); ?>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for OpenTelemetry .NET Registry Page\nDESCRIPTION: This YAML configuration sets up the front matter for a page redirecting to the OpenTelemetry .NET registry. It specifies the title, description, redirect URL, build settings, and weight for page ordering.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Instrumentation libraries, exporters and other useful components for\n  OpenTelemetry .NET\nredirect: /ecosystem/registry/?language=dotnet\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Custom Configuration for OpenTelemetry Metrics Collection\nDESCRIPTION: YAML annotation for configuring custom metrics collection parameters for a pod. This allows users to override default receiver configurations with pod-specific settings like collection intervals and endpoint paths.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/otel-collector-k8s-discovery.md#2025-04-09_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nio.opentelemetry.discovery.metrics/config: |\n  endpoint: \"http://`endpoint`/nginx_status\"\n  collection_interval: '20s'\n  initial_delay: '20s'\n  read_buffer_size: '10'\n```\n\n----------------------------------------\n\nTITLE: Implementing GrpcServerCarrier for Context Propagation in C++\nDESCRIPTION: This class defines methods to extract context from inbound gRPC requests, which is used for tracing context propagation in the Currency Service.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/currency.md#2025-04-09_snippet_2\n\nLANGUAGE: cpp\nCODE:\n```\nclass GrpcServerCarrier : public opentelemetry::context::propagation::TextMapCarrier\n{\npublic:\n  GrpcServerCarrier(ServerContext *context) : context_(context) {}\n  GrpcServerCarrier() = default;\n  virtual opentelemetry::nostd::string_view Get(\n      opentelemetry::nostd::string_view key) const noexcept override\n  {\n    auto it = context_->client_metadata().find(key.data());\n    if (it != context_->client_metadata().end())\n    {\n      return it->second.data();\n    }\n    return \"\";\n  }\n\n  virtual void Set(opentelemetry::nostd::string_view key,\n                   opentelemetry::nostd::string_view value) noexcept override\n  {\n   // Not required for server\n  }\n\n  ServerContext *context_;\n};\n```\n\n----------------------------------------\n\nTITLE: Styling Document Elements with CSS\nDESCRIPTION: CSS rules that style various elements in the documentation page, including making lists more compact, and styling the 'first time' alert with custom colors and margins.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/issues.md#2025-04-09_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n/* Force all list to be compact. */\nli > p {\n  margin-bottom: 0;\n}\n\n/* Style \"first time\" alert */\n.alert--first-timer {\n  margin: 0.5rem 0 !important;\n\n  > blockquote {\n    margin-top: 1rem;\n    margin-bottom: 0;\n    border-left-color: var(--bs-warning);\n    background-color: var(--bs-danger-bg-subtle);\n    > *:last-child {\n      margin-bottom: 0;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Package Version from OpenTelemetry Registry using Hugo Shortcode\nDESCRIPTION: This shortcode retrieves a package version from the OpenTelemetry registry. It takes a package name as a required parameter and an optional boolean to remove the 'v' prefix. The code includes error handling for missing data and parameters.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/version-from-registry.md#2025-04-09_snippet_0\n\nLANGUAGE: Go Template\nCODE:\n```\n{{ $name := (.Get 0) -}}\n{{ $noPrefix := default false (.Get 1) -}}\n\n{{ with $name -}}\n  {{ with index $.Site.Data.registry . -}}\n    {{ with .package.version -}}\n      {{ if $noPrefix -}}\n        {{ strings.TrimLeft \"v\" . -}}\n      {{ else -}}\n        {{ . -}}\n      {{ end -}}\n    {{ else -}}\n      {{ errorf \"No 'package.version' in registry entry %q: %s\" $name $.Position -}}\n    {{ end -}}\n  {{ else -}}\n    {{ errorf \"Registry entry %q not found: %s\" $name $.Position -}}\n  {{ end -}}\n{{ else -}}\n  {{ errorf \"Shortcode parameter 'name' is missing %s: \" $.Position -}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug Logging in OpenTelemetry Node.js\nDESCRIPTION: Code snippet showing how to enable diagnostic logging in the OpenTelemetry Node.js SDK for troubleshooting purposes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/resources.md#2025-04-09_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// For troubleshooting, set the log level to DiagLogLevel.DEBUG\ndiag.setLogger(new DiagConsoleLogger(), DiagLogLevel.DEBUG);\n```\n\n----------------------------------------\n\nTITLE: RBAC Configuration for Kubernetes Cluster Receiver\nDESCRIPTION: Complete RBAC configuration including ServiceAccount, ClusterRole, and ClusterRoleBinding for the OpenTelemetry Collector to access Kubernetes API resources.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: otel-collector-opentelemetry-collector\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector-opentelemetry-collector\nrules:\n  - apiGroups:\n      - ''\n    resources:\n      - events\n      - namespaces\n      - namespaces/status\n      - nodes\n      - nodes/spec\n      - pods\n      - pods/status\n      - replicationcontrollers\n      - replicationcontrollers/status\n      - resourcequotas\n      - services\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - apps\n    resources:\n      - daemonsets\n      - deployments\n      - replicasets\n      - statefulsets\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - extensions\n    resources:\n      - daemonsets\n      - deployments\n      - replicasets\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - batch\n    resources:\n      - jobs\n      - cronjobs\n    verbs:\n      - get\n      - list\n      - watch\n  - apiGroups:\n      - autoscaling\n    resources:\n      - horizontalpodautoscalers\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: otel-collector-opentelemetry-collector\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: otel-collector-opentelemetry-collector\nsubjects:\n  - kind: ServiceAccount\n    name: otel-collector-opentelemetry-collector\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Manual Context Propagation in Erlang\nDESCRIPTION: This code snippet shows how to manually inject and extract context using the otel_propagator_text_map module in Erlang. It injects the context from the process dictionary into headers and extracts a context from headers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/erlang/propagation.md#2025-04-09_snippet_2\n\nLANGUAGE: erlang\nCODE:\n```\n%% uses the context from the process dictionary to add to an empty list of headers\nHeaders = otel_propagator_text_map:inject([]),\n\n%% creates a context in the process dictionary from Headers\notel_propagator_text_map:extract(Headers),\n```\n\n----------------------------------------\n\nTITLE: Batch Updating default_lang_commit for Multiple Pages\nDESCRIPTION: Commands to update the default_lang_commit field for multiple localized pages at once, using either a specific commit hash or HEAD.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/contributing/localization.md#2025-04-09_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm run check:i18n -- -c <hash> <PATH-TO-YOUR-NEW-FILES>\nnpm run check:i18n -- -c HEAD <PATH-TO-YOUR-NEW-FILES>\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Service for Prometheus Monitoring\nDESCRIPTION: This YAML defines a Kubernetes Service that corresponds to the ServiceMonitor. It specifies the service name, labels, and port configuration for Prometheus monitoring.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2024/prom-and-otel/index.md#2025-04-09_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Service\nmetadata:\n  name: py-prometheus-app\n  namespace: opentelemetry\n  labels:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\nspec:\n  selector:\n    app: my-app\n    app.kubernetes.io/name: py-prometheus-app\n  ports:\n    - name: prom\n      port: 8080\n```\n\n----------------------------------------\n\nTITLE: Adding gRPC Auto-instrumentation for Client in Go\nDESCRIPTION: This function creates an instrumented gRPC client connection, enabling automatic tracing for outgoing gRPC calls in Go.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_3\n\nLANGUAGE: go\nCODE:\n```\nfunc createClient(ctx context.Context, svcAddr string) (*grpc.ClientConn, error) {\n    return grpc.DialContext(ctx, svcAddr,\n        grpc.WithTransportCredentials(insecure.NewCredentials()),\n        grpc.WithStatsHandler(otelgrpc.NewClientHandler()),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Agent with Properties File (Environment Variable)\nDESCRIPTION: This snippet demonstrates how to use an environment variable to specify the configuration file path for the OpenTelemetry agent, providing an alternative to JVM arguments.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/getting-started.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nOTEL_JAVAAGENT_CONFIGURATION_FILE=path/to/properties/file.properties \\\njava -javaagent:path/to/opentelemetry-javaagent.jar \\\n     -jar myapp.jar\n```\n\n----------------------------------------\n\nTITLE: Shutting Down Meter Provider in Go\nDESCRIPTION: This code snippet demonstrates how to properly shut down the MeterProvider when the service is terminated, ensuring all metrics are exported.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/checkout.md#2025-04-09_snippet_8\n\nLANGUAGE: go\nCODE:\n```\nmp := initMeterProvider()\ndefer func() {\n    if err := mp.Shutdown(context.Background()); err != nil {\n        log.Printf(\"Error shutting down meter provider: %v\", err)\n    }\n}()\n```\n\n----------------------------------------\n\nTITLE: Hugo Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining title, description, weight, and URL aliases/redirects for OpenTelemetry language documentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Language APIs & SDKs\ndescription:\n  OpenTelemetry code instrumentation is supported for many popular programming\n  languages\nweight: 250\naliases: [/docs/instrumentation]\nredirects:\n  - { from: /docs/instrumentation/*, to: ':splat' } # Only for `en`\n  - { from: 'net/*', to: 'dotnet/:splat' }\n---\n```\n\n----------------------------------------\n\nTITLE: Hugo Template Conditional Language Check\nDESCRIPTION: A Hugo template snippet that conditionally renders content based on a language parameter. The template checks if a language parameter is provided and displays different content accordingly.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/languages/propagation.md#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $lang := .Get 0 | default \"\" -}}\n\n{{ if $lang -}}\n\nTo learn more, see [Context propagation](/docs/concepts/context-propagation).\n\n{{ else -}}\n\nTo understand context propagation, you need to understand two separate concepts:\ncontext and propagation.\n\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Table Structure for CVE Display\nDESCRIPTION: Defines the HTML structure for a table that will display CVE information including ID, summary, severity, and repository. The table has an empty tbody that will be populated dynamically.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/cve.md#2025-04-09_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table id=\"cve-table\">\n  <thead>\n    <tr>\n      <th>CVE ID</th>\n      <th>Issue Summary</th>\n      <th>Severity</th>\n      <th>Repository</th>\n    </tr>\n  </thead>\n  <tbody>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Configuring RBAC for Kubernetes Objects Receiver\nDESCRIPTION: YAML configuration for setting up necessary RBAC permissions for the OpenTelemetry Collector to access Kubernetes objects. Includes ServiceAccount, ClusterRole, and ClusterRoleBinding definitions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/collector/components.md#2025-04-09_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: otel-collector-opentelemetry-collector\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: otel-collector-opentelemetry-collector\nrules:\n  - apiGroups:\n      - ''\n    resources:\n      - pods\n    verbs:\n      - get\n      - list\n      - watch\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: otel-collector-opentelemetry-collector\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: otel-collector-opentelemetry-collector\nsubjects:\n  - kind: ServiceAccount\n    name: otel-collector-opentelemetry-collector\n    namespace: default\n```\n\n----------------------------------------\n\nTITLE: Defining Metadata in Markdown for OpenTelemetry Training Page\nDESCRIPTION: This code snippet defines the front matter for a Markdown page, setting the title and date range for the training announcement. It specifies the page title and sets an expiry date, likely for content management purposes.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/announcements/training.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Training!\ndate: 2025-02-14\nexpiryDate: 2025-04-14\n---\n```\n\n----------------------------------------\n\nTITLE: Rendering Developer Links Section in Hugo Template\nDESCRIPTION: Checks if developer links exist in the site configuration and renders them using a template.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_5\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ with index $links \"developer\"}}\n  {{ template \"community-links-list\" . }}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prometheus Exporter in ASP.NET Core\nDESCRIPTION: Configure the Prometheus exporter for metrics in an ASP.NET Core application and set up the scraping endpoint.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n    .WithMetrics(metrics => metrics.AddPrometheusExporter());\n\nvar app = builder.Build();\n\napp.UseOpenTelemetryPrometheusScrapingEndpoint();\n\nawait app.RunAsync();\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Collector on Red Hat Linux (AMD64)\nDESCRIPTION: Commands to download and install the OpenTelemetry Collector RPM package on Red Hat-based Linux systems for AMD64 architecture.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/installation.md#2025-04-09_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nsudo yum update\nsudo yum -y install wget systemctl\nwget https://github.com/open-telemetry/opentelemetry-collector-releases/releases/download/v{{% param vers %}}/otelcol_{{% param vers %}}_linux_amd64.rpm\nsudo rpm -ivh otelcol_{{% param vers %}}_linux_amd64.rpm\n```\n\n----------------------------------------\n\nTITLE: Checkout Service Test Definition in YAML for OpenTelemetry Demo\nDESCRIPTION: This YAML file defines a test case for the checkout functionality, including an HTTP trigger that simulates a checkout API call and multiple assertions that validate the proper functioning of various services involved in the checkout process.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/testing-otel-demo/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntype: Test\nspec:\n  name: 'Frontend: Checking out shopping cart'\n  description: Simulate user checking out shopping cart\n  trigger:\n    type: http\n    httpRequest:\n      url: http://{{frontend address}}/api/checkout\n      method: POST\n      headers:\n        - key: Content-Type\n          value: application/json\n      body: |\n        {\n          \"userId\": \"2491f868-88f1-4345-8836-d5d8511a9f83\",\n          \"email\": \"someone@example.com\",\n          \"address\": {\n            \"streetAddress\": \"1600 Amphitheatre Parkway\",\n            \"state\": \"CA\",\n            \"country\": \"United States\",\n            \"city\": \"Mountain View\",\n            \"zipCode\": \"94043\"\n          },\n          \"userCurrency\": \"USD\",\n          \"creditCard\": {\n            \"creditCardCvv\": 672,\n            \"creditCardExpirationMonth\": 1,\n            \"creditCardExpirationYear\": 2030,\n            \"creditCardNumber\": \"4432-8015-6152-0454\"\n          }\n        }\n  specs:\n    - name: 'The frontend has been called with success'\n      selector: span[name=\"Test trigger\"]\n      assertions:\n        - attr:response.status = 200\n    - selector:\n        span[name=\"oteldemo.CheckoutService/PlaceOrder\" rpc.system=\"grpc\"\n        rpc.method=\"PlaceOrder\" rpc.service=\"oteldemo.CheckoutService\"]\n      name: 'The order was placed'\n      assertions:\n        - attr:app.user.id = \"2491f868-88f1-4345-8836-d5d8511a9f83\"\n        - attr:app.order.items.count = 1\n    - selector:\n        span[name=\"oteldemo.PaymentService/Charge\" rpc.system=\"grpc\"\n        rpc.method=\"Charge\" rpc.service=\"oteldemo.PaymentService\"]\n      name: 'The user was charged'\n      assertions:\n        - attr:rpc.grpc.status_code  =  0\n        - attr:selected_spans.count >= 1\n    - selector:\n        span[name=\"oteldemo.ShippingService/ShipOrder\" rpc.system=\"grpc\"\n        rpc.method=\"ShipOrder\" rpc.service=\"oteldemo.ShippingService\"]\n      name: 'The product was shipped'\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n        - attr:selected_spans.count >= 1\n    - selector:\n        span[name=\"oteldemo.CartService/EmptyCart\" rpc.system=\"grpc\"\n        rpc.method=\"EmptyCart\" rpc.service=\"oteldemo.CartService\"]\n      name: 'The cart was emptied'\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n        - attr:selected_spans.count >= 1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current Span in Java\nDESCRIPTION: Demonstrates how to get the current span from the context within auto-instrumented code.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/services/ad.md#2025-04-09_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nSpan span = Span.current();\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for OpenTelemetry Go Examples Redirect\nDESCRIPTION: This YAML snippet sets up Hugo front matter for a page that redirects to OpenTelemetry Go examples on GitHub. It specifies the page title, redirect URL, link behavior, and page weight.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/go/examples.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Examples\nredirect: https://github.com/open-telemetry/opentelemetry-go-contrib/tree/main/examples\nmanualLinkTarget: _blank\n_build: { render: link }\nweight: 220\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Language-Specific API Documentation Links in Hugo\nDESCRIPTION: This template builds a list of pages by iterating through instrumentation data, with special handling for .NET documentation that has separate traces and metrics pages. It then renders the pages as links, with external link handling for redirects.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/apidocs.md#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $pages := slice -}}\n{{ range $key,$value := $.Site.Data.instrumentation -}}\n    {{ if eq $key \"dotnet\" -}}\n      {{ with $.Site.GetPage \"/docs/languages/dotnet/traces-api\" -}}\n          {{ $pages = $pages | append (dict \"lang\" $value \"page\" .) -}}\n      {{ end }}\n      {{ with $.Site.GetPage \"/docs/languages/dotnet/metrics-api\" -}}\n          {{ $pages = $pages | append (dict \"lang\" $value \"page\" .) -}}\n      {{ end }}\n    {{ else -}}\n      {{ with $.Site.GetPage (printf \"/docs/languages/%s/api\" $key) -}}\n          {{ $pages = $pages | append (dict \"lang\" $value \"page\" .) -}}\n      {{ end }}\n    {{ end -}}\n{{ end -}}\n\n{{ range $pages }}\n{{ $title := replaceRE `API reference` \"\" .page.Title -}}\n\n- {{/* Encode the link directly as an <a> anchor to avoid unnecessary render-link hook checks */ -}}\n  <a href=\"{{ .page.RelPermalink }}\"\n      {{- if and .page.Params.redirect (hasPrefix .page.Params.redirect \"http\") }} {{/* */ -}}\n        target=\"_blank\" rel=\"noopener\" class=\"external-link\"\n      {{- end -}}\n  >\n    {{- .lang.name -}}\n    {{ with $title }} &mdash; {{ . }} {{- end -}}\n  </a>\n\n{{- end -}}\n```\n\n----------------------------------------\n\nTITLE: Fetching and Rendering CVE Data with JavaScript\nDESCRIPTION: Implements a self-executing function to fetch CVE data from a JSON file, sort it by date, and dynamically populate the HTML table. It creates clickable links for CVE IDs and repository names.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/security/cve.md#2025-04-09_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\n'use strict';\n(function() {\n  function fetchAndRender() {\n    fetchData()\n      .then(renderTable);\n  }\n\n  function fetchData() {\n    var url = 'https://raw.githubusercontent.com/open-telemetry/sig-security/data-source/published_output.json';\n    return fetch(url)\n      .then(function(response) {\n        return response.json();\n      });\n  }\n\n  function renderTable(data) {\n    var table = document.getElementById('cve-table').querySelector('tbody');\n\n    data.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));\n\n    data.forEach(item => {\n      var row = table.insertRow();\n\n      const cell1 = row.insertCell(0);\n      const link = document.createElement('a');\n      link.href = item['html_url'];\n      link.target = '_blank';\n      link.textContent = item['cve_id'];\n      cell1.appendChild(link);\n\n      const cell2 = row.insertCell(1);\n      cell2.textContent = item['summary'];\n      const cell3 = row.insertCell(2);\n      cell3.textContent = item['severity'];\n\n      const cell4 = row.insertCell(3);\n      // cell4.textContent = item['repo'];\n      const link2 = document.createElement('a');\n      link2.href = 'https://www.github.com/open-telemetry/' + item['repo'] + '/security/advisories';\n      link2.target = '_blank';\n      link2.textContent = item['repo'];\n      cell4.appendChild(link2);\n    });\n  }\n\n  fetchAndRender();\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic HTTP Server in Rust\nDESCRIPTION: A Rust implementation of a basic HTTP server using hyper and tokio that handles requests to roll a virtual dice at the /rolldice endpoint. The server listens on localhost:8080.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse std::convert::Infallible;\nuse std::net::SocketAddr;\n\nuse http_body_util::Full;\nuse hyper::body::Bytes;\nuse hyper::server::conn::http1;\nuse hyper::service::service_fn;\nuse hyper::Method;\nuse hyper::{Request, Response};\nuse hyper_util::rt::TokioIo;\nuse rand::Rng;\nuse tokio::net::TcpListener;\n\nasync fn roll_dice(_: Request<hyper::body::Incoming>) -> Result<Response<Full<Bytes>>, Infallible> {\n    let random_number = rand::rng().random_range(1..=6);\n    Ok(Response::new(Full::new(Bytes::from(\n        random_number.to_string(),\n    ))))\n}\n\nasync fn handle(req: Request<hyper::body::Incoming>) -> Result<Response<Full<Bytes>>, Infallible> {\n    match (req.method(), req.uri().path()) {\n        (&Method::GET, \"/rolldice\") => roll_dice(req).await,\n        _ => Ok(Response::builder()\n            .status(404)\n            .body(Full::new(Bytes::from(\"Not Found\")))\n            .unwrap()),\n    }\n}\n\n#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error + Send + Sync>> {\n    let addr = SocketAddr::from(([127, 0, 0, 1], 8080));\n\n\n    let listener = TcpListener::bind(addr).await?;\n\n    loop {\n        let (stream, _) = listener.accept().await?;\n\n        let io = TokioIo::new(stream);\n\n        tokio::task::spawn(async move {\n            if let Err(err) = http1::Builder::new()\n                .serve_connection(io, service_fn(handle))\n                .await\n            {\n                eprintln!(\"Error serving connection: {:?}\", err);\n            }\n        });\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the API with curl\nDESCRIPTION: Command to send a test request to the API endpoint using curl, which will generate telemetry data that can be observed in the application logs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/getting-started.md#2025-04-09_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl localhost:8080/rolldice\n```\n\n----------------------------------------\n\nTITLE: Defining Links List Template in Hugo\nDESCRIPTION: Creates a reusable template for rendering a list of links with icons and descriptions. Each link includes an icon, name, URL, and description.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_7\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ define \"community-links-list\" -}}\n{{ range . }}\n- [<i class=\"{{ .icon }}\"></i> {{ .name }}]({{ .url }}): {{ .desc -}}\n{{ end -}}\n{{ end }}\n```\n\n----------------------------------------\n\nTITLE: Installing Kafka via Homebrew\nDESCRIPTION: Command to install Kafka using Homebrew package manager on macOS\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/jmx-metric-insight/index.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install kafka\n```\n\n----------------------------------------\n\nTITLE: Creating Dice Class with ActivitySource\nDESCRIPTION: Basic structure of Dice class that accepts ActivitySource for tracing operations.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/instrumentation.md#2025-04-09_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n/*Dice.cs*/\n\nusing System.Diagnostics;\n\npublic class Dice\n{\n    public ActivitySource activitySource;\n    private int min;\n    private int max;\n\n    public Dice(int min, int max, ActivitySource activitySource)\n    {\n        this.min = min;\n        this.max = max;\n        this.activitySource = activitySource;\n    }\n\n    //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Console Exporter in ASP.NET Core\nDESCRIPTION: Configure the Console exporter for tracing, metrics, and logging in an ASP.NET Core application.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/dotnet/exporters.md#2025-04-09_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddOpenTelemetry()\n    .WithTracing(tracing => tracing\n        // The rest of your setup code goes here\n        .AddConsoleExporter()\n    )\n    .WithMetrics(metrics => metrics\n        // The rest of your setup code goes here\n        .AddConsoleExporter()\n    );\n\nbuilder.Logging.AddOpenTelemetry(logging => {\n    // The rest of your setup code goes here\n    logging.AddConsoleExporter();\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Docker Compose Configuration for OpenTelemetry Testing\nDESCRIPTION: This Docker Compose configuration sets up a testing environment with Jaeger, OpenTelemetry Collector, NGINX, a Python backend, Redis, and a frontend service. It configures the necessary environment variables for OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/debug-otel-with-otel/index.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    ports:\n      - '16686:16686'\n  collector:\n    image: otel/opentelemetry-collector:latest\n    command: ['--config=/etc/otel-collector-config.yaml']\n    volumes:\n      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml\n  nginx:\n    image: nginx-otel\n    volumes:\n      - ./opentelemetry_module.conf:/etc/nginx/conf.d/opentelemetry_module.conf\n      - ./default.conf:/etc/nginx/conf.d/default.conf\n  backend:\n    build: ./backend\n    image: backend-with-otel\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318/v1/traces\n      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\n      - OTEL_SERVICE_NAME=python-app\n  redis:\n    image: 'redis:alpine'\n  frontend:\n    build: ./frontend\n    image: frontend-with-otel\n    ports:\n      - '8000:8000'\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4318/\n      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf\n      - OTEL_SERVICE_NAME=frontend\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter for OpenTelemetry Examples Redirect\nDESCRIPTION: YAML configuration block that sets up a page redirect to the OpenTelemetry Rust examples repository. Includes title, redirect URL, link target, build settings and navigation weight.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/rust/examples.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: Examples\nredirect: https://github.com/open-telemetry/opentelemetry-rust/tree/main/examples\nmanualLinkTarget: _blank\n_build: { render: link }\nweight: 220\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for 2019 Archive Page\nDESCRIPTION: Front matter configuration in YAML format for a Hugo or similar static site generator page. It defines the page title as '2019' and sets a negative weight value to control the page's position in navigation or sorting order.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2019/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2019\nweight: -2019\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Blog Page Checkboxes with JavaScript\nDESCRIPTION: This JavaScript snippet adds an event listener to automatically check certain checkboxes when the blog page loads, excluding pagination pages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    document.addEventListener(\"DOMContentLoaded\", function () {\n        if (window.location.pathname.includes('/page/')) return;\n\n        var checkbox = document.getElementById(\"m-blog2025-check\");\n        if (checkbox) checkbox.checked = true;\n        checkbox = document.getElementById(\"m-blog2024-check\");\n        if (checkbox) checkbox.checked = true;\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output of Captured HTTP Headers in OpenTelemetry Span\nDESCRIPTION: This JSON snippet illustrates the structure of a span's attributes containing the captured HTTP headers. It shows how the headers are represented in the OpenTelemetry span data.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/python/example.md#2025-04-09_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"attributes\": {\n    \"http.request.header.user-agent\": [\n      \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)\"\n    ],\n    \"http.request.header.accept_encoding\": [\"gzip, deflate, br\"],\n    \"http.response.header.last_modified\": [\"2022-04-20 17:07:13.075765\"],\n    \"http.response.header.content_type\": [\"text/html; charset=utf-8\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Context Executions in PHP\nDESCRIPTION: Illustrates how to nest context executions using OpenTelemetry's Context API. This demonstrates how traces can have nested spans.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/context.md#2025-04-09_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse OpenTelemetry\\Context\\Context;\n\n$key = Context::createKey('my-key');\n\nvar_dump(Context::getCurrent()->get($key)); //NULL\n$scope2 = Context::getCurrent()->with($key, 'context 2')->activate();\nvar_dump(Context::getCurrent()->get($key)); //'context 2'\n$scope3 = Context::getCurrent()->with($key, 'context 3')->activate();\nvar_dump(Context::getCurrent()->get($key)); //'context 3'\n\n$scope3->detach(); //context 2 is active\n$scope2->detach(); //original context is active\nvar_dump(Context::getCurrent()->get($key)); //NULL\n```\n\n----------------------------------------\n\nTITLE: Retrieving OpenTelemetry Integrations for {{ $langIndex }} in Hugo\nDESCRIPTION: This Hugo template snippet retrieves and filters OpenTelemetry integrations for a specific language from the site's data. It sets up variables for the number of integrations to display and the language index.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/languages/libraries-intro.md#2025-04-09_snippet_0\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ $howMany := .Get 1 | default 10 -}}\n{{ $langIndex := .Get 0 }}\n{{ $lang := index $.Site.Data.instrumentation $langIndex -}}\n{{ $integrations := where (slice ) \".language\" $langIndex -}}\n\n{{ $integrations := slice }} {{ range $entry := $.Site.Data.registry }}\n{{ if and (and (eq $entry.language $langIndex) (eq $entry.isNative true)) (eq $entry.registryType \"instrumentation\") }}\n{{ $integrations = $integrations | append $entry }} {{ end }} {{ end }}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for OpenTelemetry Ruby Registry Page\nDESCRIPTION: This YAML snippet defines the front matter for a registry page in the OpenTelemetry documentation. It sets the title, description, redirect URL, build instructions, and navigation weight for the Ruby-specific registry of OpenTelemetry components.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/ruby/registry.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Registry\ndescription:\n  Instrumentation libraries, exporters and other useful components for\n  OpenTelemetry Ruby\nredirect: /ecosystem/registry/?language=ruby\n_build: { render: link }\nweight: 300\n---\n```\n\n----------------------------------------\n\nTITLE: Installing OTLP gRPC Exporter for Python\nDESCRIPTION: Command to install the OpenTelemetry gRPC exporter package as a dependency for your Python project.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/exporters.md#2025-04-09_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install opentelemetry-exporter-otlp-proto-grpc\n```\n\n----------------------------------------\n\nTITLE: Modifying OpenTelemetry Collector Config for Debugging\nDESCRIPTION: Updated YAML configuration for the OpenTelemetry Collector, adding a logging exporter for debugging purposes when deployed on GKE.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\nexporters:\n  otlp:\n  logging:\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      exporters: [otlp, logging]\n```\n\n----------------------------------------\n\nTITLE: Python Trace Benchmark Reference\nDESCRIPTION: Reference to the Python SDK's trace benchmarking test file used for performance testing OpenTelemetry Python SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/perf-testing/index.md#2025-04-09_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntest_benchmark_trace.py\n```\n\n----------------------------------------\n\nTITLE: Defining YAML Frontmatter for 2025 Page\nDESCRIPTION: YAML frontmatter that defines the title '2025' and assigns a negative weight value of -2025, which likely determines the page's position in navigation or sorting order.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2025/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2025\nweight: -2025\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Front Matter for 2021 Archive Page\nDESCRIPTION: A YAML front matter block defining the title as '2021' and setting a negative weight of -2021 for page ordering in the navigation hierarchy. Negative weights typically position pages higher in navigation menus.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2021/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2021\nweight: -2021\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for 2022 Documentation\nDESCRIPTION: YAML front matter configuration that sets the page title to '2022' and assigns a weight of -2022 for content organization purposes. The negative weight likely ensures this appears earlier in sorted navigation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: 2022\nweight: -2022\n---\n```\n\n----------------------------------------\n\nTITLE: Applying OpenTelemetry Collector Deployment in Kubernetes\nDESCRIPTION: This shell command applies the updated OpenTelemetry Collector deployment manifest to the Kubernetes cluster. It uses kubectl to apply the changes in the 'manifest.yaml' file to the 'otel-collector' namespace.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply -f manifest.yaml -n otel-collector\n```\n\n----------------------------------------\n\nTITLE: YAML Frontmatter Configuration\nDESCRIPTION: Markdown frontmatter block defining page metadata including title and weight properties. The negative weight (-2023) is likely used for sorting/ordering pages in reverse chronological order.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntitle: 2023\nweight: -2023\n```\n\n----------------------------------------\n\nTITLE: Inspecting Kubernetes Pod Details with kubectl\nDESCRIPTION: This shell command demonstrates how to use kubectl to describe a specific pod in a given namespace, which is useful for verifying auto-instrumentation injection.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/operator/troubleshooting/automatic.md#2025-04-09_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl describe pod <your_pod_name> -n <namespace>\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for NGINX with OpenTelemetry Module\nDESCRIPTION: This Dockerfile installs and configures the OpenTelemetry module for NGINX. It downloads the module, installs it, and modifies the NGINX configuration to load the module.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/debug-otel-with-otel/index.md#2025-04-09_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM nginx:1.18\nADD https://github.com/open-telemetry/opentelemetry-cpp-contrib/releases/download/webserver%2Fv1.0.1/opentelemetry-webserver-sdk-x64-linux.tgz /opt\nRUN cd /opt ; tar xvfz opentelemetry-webserver-sdk-x64-linux.tgz\nRUN cd /opt/opentelemetry-webserver-sdk; ./install.sh\nENV LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/opentelemetry-webserver-sdk/sdk_lib/lib\nRUN echo \"load_module /opt/opentelemetry-webserver-sdk/WebServerModule/Nginx/ngx_http_opentelemetry_module.so;\\n$(cat /etc/nginx/nginx.conf)\" > /etc/nginx/nginx.conf\nCOPY default.conf /etc/nginx/conf.d\nCOPY opentelemetry_module.conf /etc/nginx/conf.d\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTelemetry Collector Builder for GCP\nDESCRIPTION: YAML configuration for the OpenTelemetry Collector Builder, specifying OTLP receiver and exporters along with a logging exporter for use with GCP.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreceivers:\n  - import: go.opentelemetry.io/collector/receiver/otlpreceiver\n    gomod: go.opentelemetry.io/collector v0.57.2\n\nexporters:\n  - import: go.opentelemetry.io/collector/exporter/otlpexporter\n    gomod: go.opentelemetry.io/collector v0.57.2\n  - import: go.opentelemetry.io/collector/exporter/loggingexporter\n    gomod: go.opentelemetry.io/collector v0.57.2\n```\n\n----------------------------------------\n\nTITLE: Creating file for model definitions in Go\nDESCRIPTION: Command to create a new model.go file in the tailtracer directory that will hold the ATM and backend system type definitions.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/receiver.md#2025-04-09_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ntouch tailtracer/model.go\n```\n\n----------------------------------------\n\nTITLE: Semistructured Log Example with Key-Value Pairs\nDESCRIPTION: An example of a semistructured log that uses key-value pairs to organize data in a somewhat machine-readable format, representing a failed login attempt with various metadata.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/concepts/signals/logs.md#2025-04-09_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n2024-08-04T12:45:23Z level=ERROR service=user-authentication userId=12345 action=login message=\"Failed login attempt\" error=\"Invalid password\" ipAddress=192.168.1.1 userAgent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\"\n```\n\n----------------------------------------\n\nTITLE: YAML Front Matter Configuration for Community Page\nDESCRIPTION: YAML configuration block that sets up the page title, menu weight, and document type cascading for the OpenTelemetry community page.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/community/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Community\nmenu: { main: { weight: 40 } }\ncascade:\n  type: docs\n---\n```\n\n----------------------------------------\n\nTITLE: Java Span Benchmark Reference\nDESCRIPTION: Reference to the Java SDK's span benchmarking code file used for performance testing OpenTelemetry Java SDK.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2023/perf-testing/index.md#2025-04-09_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nSpanBenchmark.java\n```\n\n----------------------------------------\n\nTITLE: Creating ConfigMap for OpenTelemetry Collector on GKE\nDESCRIPTION: Shell command to create a Kubernetes ConfigMap from the OpenTelemetry Collector configuration file for use in GKE.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/collector-builder-sample/index.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create configmap otel-config --from-file=./otel-config.yaml -n otel-collector\n```\n\n----------------------------------------\n\nTITLE: Formatting Markdown Files with NPM\nDESCRIPTION: Command to run the markdown formatter for maintaining consistent blog post formatting.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/archetypes/blog.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Creating New Connector Factory Function in Go\nDESCRIPTION: Implements a factory function to create a new instance of the connector with the provided logger and configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/building/connector/index.md#2025-04-09_snippet_10\n\nLANGUAGE: go\nCODE:\n```\n// newConnector is a function to create a new connector\nfunc newConnector(logger *zap.Logger, config component.Config) (*connectorImp, error) {\n    logger.Info(\"Building exampleconnector connector\")\n    cfg := config.(*Config)\n\n    return &connectorImp{\n        config: *cfg,\n        logger: logger,\n    }, nil\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic HTTP Server with Vapor\nDESCRIPTION: Implementation of a simple HTTP server using Vapor framework with a /rolldice endpoint that returns a random number between 1 and 6.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/getting-started.md#2025-04-09_snippet_1\n\nLANGUAGE: swift\nCODE:\n```\nimport Vapor\n\n@main\nenum Entrypoint {\n    static func main() async throws {\n        let app = try Application(.detect())\n        defer { app.shutdown() }\n        app.get(\"rolldice\") { req in\n            let result = Int.random(in: 1..<7)\n            return result\n        }\n        try app.run()\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Demo Application with Docker Compose\nDESCRIPTION: Docker Compose command to start the demo application with clean state and in detached mode.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/demo/docker-deployment.md#2025-04-09_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ndocker compose up --force-recreate --remove-orphans --detach\n```\n\n----------------------------------------\n\nTITLE: Resource Definition Template with Dynamic Process Reference\nDESCRIPTION: A Go template snippet that configures resource documentation with dynamic process naming and conditional resource reference links. It handles variable substitution and conditional URL generation based on the current page context.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/languages/resources-intro.md#2025-04-09_snippet_0\n\nLANGUAGE: go-template\nCODE:\n```\n{{ $processWord := .Get 0 | default \"a process\"  -}}\n{{ $resourceHRef := \"/docs/concepts/resources/\" -}}\n{{ if eq .Page.RelPermalink $resourceHRef -}}\n  {{ $resourceHRef = \"/docs/specs/otel/resource/sdk/\" -}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Results Page Frontmatter in Markdown\nDESCRIPTION: Basic YAML frontmatter configuration that sets up a page title and specifies a search layout template.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/search.md#2025-04-09_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Search Results\nlayout: search\n---\n```\n\n----------------------------------------\n\nTITLE: Adding Kubernetes Metadata to Telemetry in OpenTelemetry Collector\nDESCRIPTION: Example showing how to configure the k8sattributes processor with default settings to enrich telemetry with Kubernetes metadata such as pod name, node name, and workload name.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/transforming-telemetry.md#2025-04-09_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nprocessors:\n  k8sattributes/default:\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom MetricReader in OpenTelemetry Java\nDESCRIPTION: A complete example of implementing the MetricReader interface to create a custom metric reader that collects metrics at regular intervals. It includes handling registration, collection scheduling, temporality selection, and memory mode configuration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_12\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.common.CompletableResultCode;\nimport io.opentelemetry.sdk.common.export.MemoryMode;\nimport io.opentelemetry.sdk.metrics.Aggregation;\nimport io.opentelemetry.sdk.metrics.InstrumentType;\nimport io.opentelemetry.sdk.metrics.data.AggregationTemporality;\nimport io.opentelemetry.sdk.metrics.export.AggregationTemporalitySelector;\nimport io.opentelemetry.sdk.metrics.export.CollectionRegistration;\nimport io.opentelemetry.sdk.metrics.export.MetricReader;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.ScheduledExecutorService;\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.atomic.AtomicReference;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\npublic class CustomMetricReader implements MetricReader {\n\n  private static final Logger logger = Logger.getLogger(CustomMetricExporter.class.getName());\n\n  private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1);\n  private final AtomicReference<CollectionRegistration> collectionRef =\n      new AtomicReference<>(CollectionRegistration.noop());\n\n  @Override\n  public void register(CollectionRegistration collectionRegistration) {\n    // Callback invoked when SdkMeterProvider is initialized, providing a handle to collect metrics.\n    collectionRef.set(collectionRegistration);\n    executorService.scheduleWithFixedDelay(this::collectMetrics, 0, 60, TimeUnit.SECONDS);\n  }\n\n  private void collectMetrics() {\n    // Collect metrics. Typically, records are sent out of process via some network protocol, but we\n    // simply log for illustrative purposes.\n    logger.log(Level.INFO, \"Collecting metrics\");\n    collectionRef\n        .get()\n        .collectAllMetrics()\n        .forEach(metric -> logger.log(Level.INFO, \"Metric: \" + metric));\n  }\n\n  @Override\n  public CompletableResultCode forceFlush() {\n    // Export any records which have been queued up but not yet exported.\n    logger.log(Level.INFO, \"flushing\");\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public CompletableResultCode shutdown() {\n    // Shutdown the exporter and cleanup any resources.\n    logger.log(Level.INFO, \"shutting down\");\n    return CompletableResultCode.ofSuccess();\n  }\n\n  @Override\n  public AggregationTemporality getAggregationTemporality(InstrumentType instrumentType) {\n    // Specify the required aggregation temporality as a function of instrument type\n    return AggregationTemporalitySelector.deltaPreferred()\n        .getAggregationTemporality(instrumentType);\n  }\n\n  @Override\n  public MemoryMode getMemoryMode() {\n    // Optionally specify the memory mode, indicating whether metric records can be reused or must\n    // be immutable\n    return MemoryMode.REUSABLE_DATA;\n  }\n\n  @Override\n  public Aggregation getDefaultAggregation(InstrumentType instrumentType) {\n    // Optionally specify the default aggregation as a function of instrument kind\n    return Aggregation.defaultAggregation();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Express Server in TypeScript\nDESCRIPTION: TypeScript code for a simple Express server that responds to a /rolldice endpoint with a random number.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/*app.ts*/\nimport express, { Express } from 'express';\n\nconst PORT: number = parseInt(process.env.PORT || '8080');\nconst app: Express = express();\n\nfunction getRandomNumber(min: number, max: number) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\napp.get('/rolldice', (req, res) => {\n  res.send(getRandomNumber(1, 6).toString());\n});\n\napp.listen(PORT, () => {\n  console.log(`Aguardando requisições em http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Swift Package Dependencies\nDESCRIPTION: Package.swift configuration for a basic Vapor server application. Defines project name, platform requirements, and Vapor dependency.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/getting-started.md#2025-04-09_snippet_0\n\nLANGUAGE: swift\nCODE:\n```\n// swift-tools-version:5.9\nimport PackageDescription\n\nlet package = Package(\n    name: \"dice-server\",\n    platforms: [\n       .macOS(.v13)\n    ],\n    dependencies: [\n        .package(url: \"https://github.com/vapor/vapor.git\", from: \"4.83.1\")\n    ],\n    targets: [\n        .executableTarget(\n            name: \"DiceApp\",\n            dependencies: [\n                .product(name: \"Vapor\", package: \"vapor\")\n            ],\n            path: \".\"\n        )\n    ]\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring OTLP Base Endpoint\nDESCRIPTION: Environment variable configuration for setting the base OTLP endpoint for all signal types. Supports both gRPC and HTTP protocols with optional port specification.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/sdk-configuration/otlp-exporter.md#2025-04-09_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport OTEL_EXPORTER_OTLP_ENDPOINT=\"https://my-api-endpoint:443\"\n```\n\n----------------------------------------\n\nTITLE: Adding Footnote in Hugo Template for OpenTelemetry Integration Table\nDESCRIPTION: This snippet adds a footnote to the integration table indicating that entries are listed alphabetically. It provides additional context for understanding the table's organization.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/integrations-table.md#2025-04-09_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n[^1]: Listed alphabetically\n```\n\n----------------------------------------\n\nTITLE: Filtering OpenTelemetry Registry Entries in Hugo Template\nDESCRIPTION: This snippet filters entries from the site's registry data based on criteria like native libraries or application integrations. It processes each entry to add an OSS status based on license information and appends matching entries to a slice for later display.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/integrations-table.md#2025-04-09_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ $integrations := slice -}}\n{{ range $entry := $.Site.Data.registry -}}\n  {{ if or (and (eq ($.Get 0) \"native libraries\") (eq $entry.isNative true) (eq $entry.registryType \"instrumentation\")) (and (eq ($.Get 0) \"application integrations\") (eq $entry.registryType \"application integration\")) -}}\n    {{ $entry = merge $entry (dict \"oss\" (ne .license \"Commercial\")) -}}\n    {{ $integrations = $integrations | append $entry -}}\n  {{ end -}}\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter for OpenTelemetry Specs Page\nDESCRIPTION: This YAML configuration sets up the title, link, weight, build parameters, and redirects for the OpenTelemetry specifications documentation page. It also specifies a default language commit hash.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/ja/docs/specs/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Specifications\nlinkTitle: Specs ↗\nweight: 960\n_build: { render: link }\nredirects: [{ from: '*', to: '/docs/specs/:splat' }]\ndefault_lang_commit: 3b44fbfa49ced919daea01123abfaed836d2d0ec\n---\n```\n\n----------------------------------------\n\nTITLE: Recording Exceptions in Spans in OpenTelemetry Swift\nDESCRIPTION: This snippet shows how to properly record exception information in a span using semantic conventions. It captures exception type, message, and whether the exception escaped the scope.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/swift/instrumentation.md#2025-04-09_snippet_10\n\nLANGUAGE: swift\nCODE:\n```\nlet span = someTracer.spanBuilder(spanName: \"my span\").startSpan()\ndo {\n  try throwingFunction()\n} catch {\n  span.addEvent(name: SemanticAttributes.exception.rawValue,\n    attributes: [SemanticAttributes.exceptionType.rawValue: AttributeValue.string(String(describing: type(of: error))),\n                 SemanticAttributes.exceptionEscaped.rawValue: AttributeValue.bool(false),\n                 SemanticAttributes.exceptionMessage.rawValue: AttributeValue.string(error.localizedDescription)])\n  })\n  span.status = .error(description: error.localizedDescription)\n}\nspan.end()\n```\n\n----------------------------------------\n\nTITLE: Configuring LogRecordProcessor in Java\nDESCRIPTION: Shows how to configure both batch and simple log record processors with customizable settings like queue size, timeout, and schedule delay.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/sdk.md#2025-04-09_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.logs.LogRecordProcessor;\nimport io.opentelemetry.sdk.logs.export.BatchLogRecordProcessor;\nimport io.opentelemetry.sdk.logs.export.LogRecordExporter;\nimport io.opentelemetry.sdk.logs.export.SimpleLogRecordProcessor;\nimport java.time.Duration;\n\npublic class LogRecordProcessorConfig {\n  public static LogRecordProcessor batchLogRecordProcessor(LogRecordExporter logRecordExporter) {\n    return BatchLogRecordProcessor.builder(logRecordExporter)\n        .setMaxQueueSize(2048)\n        .setExporterTimeout(Duration.ofSeconds(30))\n        .setScheduleDelay(Duration.ofSeconds(1))\n        .build();\n  }\n\n  public static LogRecordProcessor simpleLogRecordProcessor(LogRecordExporter logRecordExporter) {\n    return SimpleLogRecordProcessor.create(logRecordExporter);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Express Server in JavaScript\nDESCRIPTION: JavaScript code for a simple Express server that responds to a /rolldice endpoint with a random number.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/pt/docs/languages/js/getting-started/nodejs.md#2025-04-09_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/*app.js*/\nconst express = require('express');\n\nconst PORT = parseInt(process.env.PORT || '8080');\nconst app = express();\n\nfunction getRandomNumber(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\napp.get('/rolldice', (req, res) => {\n  res.send(getRandomNumber(1, 6).toString());\n});\n\napp.listen(PORT, () => {\n  console.log(`Aguardando requisições em http://localhost:${PORT}`);\n});\n```\n\n----------------------------------------\n\nTITLE: Importing OpenTelemetry BOM with Gradle Dependency Management Plugin\nDESCRIPTION: This snippet demonstrates importing the OpenTelemetry Instrumentation BOM using the Spring Dependency Management plugin in Gradle. This alternative approach uses the mavenBom implementation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/getting-started.md#2025-04-09_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nplugins {\n  id(\"java\")\n  id(\"org.springframework.boot\") version \"3.2.O\"\n  id(\"io.spring.dependency-management\") version \"1.1.0\"\n}\n\ndependencyManagement {\n  imports {\n    mavenBom(\"io.opentelemetry.instrumentation:opentelemetry-instrumentation-bom:{{% param vers.instrumentation }}\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Output of Nomad Job Deployment in Detached Mode\nDESCRIPTION: Example of the output when deploying Nomad jobs in detached mode, showing successful job registrations and evaluation IDs.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/blog/2022/otel-demo-app-nomad/index.md#2025-04-09_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nJob registration successful\nEvaluation ID: d3eaa396-954e-241f-148d-6720c35f34bf\nJob registration successful\nEvaluation ID: 6bba875d-f415-36b7-bfeb-2ca4b9982acb\nJob registration successful\nEvaluation ID: 16dc8ef8-5e26-68f4-89b6-3d96b348775b\nJob registration successful\nEvaluation ID: 34de0532-a3b5-8691-bf18-51c0cc030573\nJob registration successful\nEvaluation ID: 7310e6a2-9945-710b-1505-c01bd58ccd35\n...\n```\n\n----------------------------------------\n\nTITLE: Complete OCB Builder Configuration\nDESCRIPTION: Full YAML configuration for the OpenTelemetry Collector builder, including exporters, processors, receivers, and providers.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/collector/custom-collector.md#2025-04-09_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndist:\n  name: otelcol-dev\n  description: Basic OTel Collector distribution for Developers\n  output_path: ./otelcol-dev\n\nexporters:\n  - gomod:\n      go.opentelemetry.io/collector/exporter/debugexporter {{% version-from-registry collector-exporter-debug %}}\n  - gomod:\n      go.opentelemetry.io/collector/exporter/otlpexporter {{% version-from-registry collector-exporter-otlp %}}\n\nprocessors:\n  - gomod:\n      go.opentelemetry.io/collector/processor/batchprocessor {{% version-from-registry collector-processor-batch %}}\n\nreceivers:\n  - gomod:\n      go.opentelemetry.io/collector/receiver/otlpreceiver {{% version-from-registry collector-receiver-otlp %}}\n\nproviders:\n  - gomod: go.opentelemetry.io/collector/confmap/provider/envprovider v1.18.0\n  - gomod: go.opentelemetry.io/collector/confmap/provider/fileprovider v1.18.0\n  - gomod: go.opentelemetry.io/collector/confmap/provider/httpprovider v1.18.0\n  - gomod: go.opentelemetry.io/collector/confmap/provider/httpsprovider v1.18.0\n  - gomod: go.opentelemetry.io/collector/confmap/provider/yamlprovider v1.18.0\n```\n\n----------------------------------------\n\nTITLE: Creating Language Map in Hugo Template for OpenTelemetry Components\nDESCRIPTION: This snippet merges existing instrumentation language data with additional entries for collector and Lua. The resulting map is used to display component information in the final table.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/ecosystem/integrations-table.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{ $languages := merge $.Site.Data.instrumentation (dict \"collector\" (dict \"name\" \"collector\") \"lua\" (dict \"name\" \"Lua\")) -}}\n```\n\n----------------------------------------\n\nTITLE: Subir cambios al repositorio remoto\nDESCRIPTION: Comando de shell para publicar los cambios de la rama local al repositorio remoto en GitHub, permitiendo luego crear un Pull Request.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ngit push origin <mi_nueva_rama>\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Helm Repository in Shell\nDESCRIPTION: This command adds the OpenTelemetry Helm repository to your local Helm installation. It allows you to access and install OpenTelemetry charts for components like the Collector, Operator, and Demo.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/platforms/kubernetes/helm/_index.md#2025-04-09_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add open-telemetry https://open-telemetry.github.io/opentelemetry-helm-charts\n```\n\n----------------------------------------\n\nTITLE: Running Jaeger in Docker for OpenTelemetry Testing\nDESCRIPTION: This shell command runs a Jaeger all-in-one container in Docker, setting up various ports for different protocols including OTLP, Zipkin, and Jaeger's own protocols.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/exporters.md#2025-04-09_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d --name jaeger \\\n  -e COLLECTOR_ZIPKIN_HOST_PORT=:9411 \\\n  -e COLLECTOR_OTLP_ENABLED=true \\\n  -p 6831:6831/udp \\\n  -p 6832:6832/udp \\\n  -p 5778:5778 \\\n  -p 16686:16686 \\\n  -p 4317:4317 \\\n  -p 4318:4318 \\\n  -p 14250:14250 \\\n  -p 14268:14268 \\\n  -p 14269:14269 \\\n  -p 9411:9411 \\\n  jaegertracing/all-in-one:latest\n```\n\n----------------------------------------\n\nTITLE: Adding OpenTelemetry Annotations Dependency - Gradle Configuration\nDESCRIPTION: Gradle dependency configuration for adding opentelemetry-instrumentation-annotations library.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/agent/annotations.md#2025-04-09_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n    implementation('io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:{{% param vers.instrumentation %}}')\n}\n```\n\n----------------------------------------\n\nTITLE: Generating OpenTelemetry Language Documentation in Hugo\nDESCRIPTION: A Hugo template that generates documentation pages for specific language implementations of OpenTelemetry. The template includes variable definitions for language data, signal status checks, and renders a status table showing the implementation status of traces, metrics and logs components.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/languages/index-intro.md#2025-04-09_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n{{ $prettier_ignore := `\n\n<!-- prettier-ignore -->\n` -}}\n{{ $lang := .Get 0 -}}\n{{ $data := index $.Site.Data.instrumentation $lang }}\n{{ $name := $data.name -}}\n\n{{ $tracesStatus := partial \"docs/get-signal-status.html\" (dict \"lang\" $lang \"signal\" \"traces\") -}}\n{{ $metricsStatus := partial \"docs/get-signal-status.html\" (dict \"lang\" $lang \"signal\" \"metrics\") -}}\n{{ $logsStatus := partial \"docs/get-signal-status.html\" (dict \"lang\" $lang \"signal\" \"logs\") -}}\n\nThis is the OpenTelemetry {{ $name }} documentation. OpenTelemetry is an\nobservability framework -- an API, SDK, and tools that are designed to aid in\nthe generation and collection of application telemetry data such as metrics,\nlogs, and traces. This documentation is designed to help you understand how to\nget started using OpenTelemetry {{ $name }}.\n\n## Status and Releases\n\nThe current status of the major functional components for OpenTelemetry\n{{ $name }} is as follows:\n\n| Traces              | Metrics              | Logs              |\n| ------------------- | -------------------- | ----------------- |\n| {{ $tracesStatus }} | {{ $metricsStatus }} | {{ $logsStatus }} |\n\n{{ partial \"docs/latest-release.md\" (dict \"lang\" $lang \"Inner\" .Inner) -}}\n```\n\n----------------------------------------\n\nTITLE: Accessing Site Parameters in Hugo Template\nDESCRIPTION: Retrieves the links parameter from the site configuration to be used in the template.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_0\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ $links := .Site.Params.links -}}\n```\n\n----------------------------------------\n\nTITLE: Hugo Template for Code Block Generation\nDESCRIPTION: A Hugo template that processes code files and renders them as syntax-highlighted blocks. Supports automatic language detection for Python and C# files, custom line range selection, and optional file name display in comments. Uses template variables and string manipulation to format the output.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/code_block_from.md#2025-04-09_snippet_0\n\nLANGUAGE: go\nCODE:\n```\n{{ $file := .Get \"file\" -}}\n{{ $lang := .Get \"lang\" | default \"\" -}}\n{{ $from := .Get \"from\" | default 0 -}}\n{{ $to := .Get \"to\" | default 99999 -}}\n{{ $showFileName := .Get \"show-file\" | default true -}}\n{{ $commentStart := \"//\" -}}\n\n{{ if not $lang -}}\n  {{ if strings.HasSuffix $file \".py\" -}}\n    {{ $lang = \"python\" -}}\n    {{ $commentStart = \"#\" -}}\n  {{ else if strings.HasSuffix $file \".cs\" -}}\n    {{ $lang = \"csharp\" -}}\n  {{ end -}}\n{{ end -}}\n\n{{ $pathBase := .Page.Param \"code_block_from__path_base\" | default \"\" -}}\n\n{{ $path := $file -}}\n{{ if $pathBase -}}\n  {{ $path = printf \"%s/%s\" $pathBase $path -}}\n{{ end -}}\n{{ $fileContent := readFile $path -}}\n{{ $fileLines := split $fileContent \"\\n\" -}}\n{{ $n := sub (int $to) (int $from) -}}\n{{ if le $n 0 }}\n  {{ errorf \"Invalid line range (from=%s, to=%s) for file %s\" $from $to $file -}}\n{{ end -}}\n{{ $excerpt := first $n (after $from $fileLines) -}}\n\n```{{ $lang }}\n{{ if $showFileName -}}\n  {{ $commentStart }} {{ $file }}\n{{ end -}}\n{{ delimit $excerpt \"\\n\" \"\" }}\n```\n```\n\n----------------------------------------\n\nTITLE: Crear commit con los cambios realizados\nDESCRIPTION: Comando de shell para crear un commit con los archivos preparados en el área de staging, incluyendo un mensaje descriptivo.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -m \"Mensaje de tu commit\"\n```\n\n----------------------------------------\n\nTITLE: Running Zipkin Docker Container\nDESCRIPTION: Command to start a Zipkin tracing backend in a Docker container. The container exposes port 9411 and is configured to automatically remove itself when stopped.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/_includes/exporters/zipkin-setup.md#2025-04-09_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndocker run --rm -d -p 9411:9411 --name zipkin openzipkin/zipkin\n```\n\n----------------------------------------\n\nTITLE: JSON Output for Nested Spans in OpenTelemetry\nDESCRIPTION: Sample JSON output showing the parent-child relationship between spans in a trace. The child span (rollOnce:4) references its parent span (rollTheDice) through the parentId field.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/js/instrumentation.md#2025-04-09_snippet_22\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"traceId\": \"ff1d39e648a3dc53ba710e1bf1b86e06\",\n  \"parentId\": \"9214ff209e6a8267\",\n  \"name\": \"rollOnce:4\",\n  \"id\": \"7eccf70703e2bccd\",\n  \"kind\": 0,\n  \"timestamp\": 1688387049511591,\n  \"duration\": 22,\n  \"attributes\": {},\n  \"status\": { \"code\": 0 },\n  \"events\": [],\n  \"links\": []\n}\n{\n  \"traceId\": \"ff1d39e648a3dc53ba710e1bf1b86e06\",\n  \"parentId\": undefined,\n  \"name\": \"rollTheDice\",\n  \"id\": \"9214ff209e6a8267\",\n  \"kind\": 0,\n  \"timestamp\": 1688387049510303,\n  \"duration\": 1314,\n  \"attributes\": {},\n  \"status\": { \"code\": 0 },\n  \"events\": [],\n  \"links\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Zipkin Exporter with Gradle\nDESCRIPTION: Gradle dependency configuration for adding OpenTelemetry Zipkin exporter to a Spring project. Specifies the implementation dependency for opentelemetry-exporter-zipkin.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/java/spring-boot-starter/other-spring-autoconfig.md#2025-04-09_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n  implementation(\"io.opentelemetry:opentelemetry-exporter-zipkin:{{% param vers.otel %}}\")\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfigurableSpanExporterProvider in Java\nDESCRIPTION: Example implementation of ConfigurableSpanExporterProvider interface to create a custom span exporter that can participate in autoconfiguration. The exporter is created when OTEL_TRACES_EXPORTER includes the value from getName().\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/java/configuration.md#2025-04-09_snippet_5\n\nLANGUAGE: java\nCODE:\n```\npackage otel;\n\nimport io.opentelemetry.sdk.autoconfigure.spi.ConfigProperties;\nimport io.opentelemetry.sdk.autoconfigure.spi.traces.ConfigurableSpanExporterProvider;\nimport io.opentelemetry.sdk.trace.export.SpanExporter;\n\npublic class CustomSpanExporterProvider implements ConfigurableSpanExporterProvider {\n\n  @Override\n  public SpanExporter createExporter(ConfigProperties config) {\n    // Callback invoked when OTEL_TRACES_EXPORTER includes the value from getName().\n    return new CustomSpanExporter();\n  }\n\n  @Override\n  public String getName() {\n    return \"custom-exporter\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Homepage Content Structure with Hugo Shortcodes\nDESCRIPTION: Defines the main content structure using Hugo shortcodes and markdown, including cover section, feature blocks, and CNCF project information.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/_index.md#2025-04-09_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{{< blocks/cover image_anchor=\"top\" height=\"max\" color=\"primary\" >}}\n\n![OpenTelemetry](/img/logos/opentelemetry-horizontal-color.svg)\n{.otel-logo}\n\n{{% param description %}}\n{.display-6}\n\n<div class=\"l-primary-buttons mt-5\">\n\n- [Learn more](docs/what-is-opentelemetry/)\n- [Try the demo](docs/demo/)\n\n</div>\n\n<div class=\"h3 mt-4\">\n<a class=\"text-secondary\" href=\"docs/getting-started/\">Get started</a> based on your role\n</div>\n<div class=\"l-get-started-buttons\">\n\n- [Dev](docs/getting-started/dev/)\n- [Ops](docs/getting-started/ops/)\n\n</div>\n{{< /blocks/cover >}}\n```\n\n----------------------------------------\n\nTITLE: Rendering Latest Release Information in Hugo Templates for OpenTelemetry\nDESCRIPTION: This Hugo partial template includes the latest release information in documentation pages. It accepts a language parameter and inner content through the dict function, allowing for language-specific release information to be displayed.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/docs/latest-release.md#2025-04-09_snippet_0\n\nLANGUAGE: Hugo Template\nCODE:\n```\n{{ partial \"docs/latest-release.md\" (dict \"lang\" (.Get 0) \"Inner\" .Inner) -}}\n```\n\n----------------------------------------\n\nTITLE: HTML Social Media Link Implementation\nDESCRIPTION: Implements a hidden social media verification link for Mastodon/Fosstodon integration.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/_index.md#2025-04-09_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<div class=\"d-none\"><a rel=\"me\" href=\"https://fosstodon.org/@opentelemetry\"></a></div>\n```\n\n----------------------------------------\n\nTITLE: Configuring mypy Namespace Packages via TOML\nDESCRIPTION: Configuration snippet for enabling namespace packages in mypy through a TOML configuration file. This setting is necessary for mypy to run correctly with namespace packages.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/python/mypy.md#2025-04-09_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[tool.mypy]\nnamespace_packages = true\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenTelemetry Logging in PHP\nDESCRIPTION: This PHP script sets up a Slim application with OpenTelemetry logging using Monolog. It creates a logger provider, configures a handler, and logs dice roll results.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/languages/php/getting-started.md#2025-04-09_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Logger;\nuse OpenTelemetry\\API\\Globals;\nuse OpenTelemetry\\Contrib\\Logs\\Monolog\\Handler;\nuse Psr\\Http\\Message\\ResponseInterface as Response;\nuse Psr\\Http\\Message\\ServerRequestInterface as Request;\nuse Psr\\Log\\LogLevel;\nuse Slim\\Factory\\AppFactory;\n\nrequire __DIR__ . '/vendor/autoload.php';\n\n$loggerProvider = Globals::loggerProvider();\n$handler = new Handler(\n    $loggerProvider,\n    LogLevel::INFO\n);\n$monolog = new Logger('otel-php-monolog', [$handler]);\n\n$app = AppFactory::create();\n\n$app->get('/rolldice', function (Request $request, Response $response) use ($monolog) {\n    $result = random_int(1,6);\n    $response->getBody()->write(strval($result));\n    $monolog->info('dice rolled', ['result' => $result]);\n    return $response;\n});\n\n$app->run();\n```\n\n----------------------------------------\n\nTITLE: Dotnet CLI Crash Error with OpenTelemetry Instrumentation\nDESCRIPTION: Error message when the dotnet CLI tool crashes due to assembly loading issues with OpenTelemetry instrumentation.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/en/docs/zero-code/dotnet/troubleshooting.md#2025-04-09_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nPS C:\\Users\\Administrator\\Desktop\\OTelConsole-NET6.0> dotnet run My.Simple.Console\nUnhandled exception. System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\n---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\n---> System.TypeInitializationException: The type initializer for 'OpenTelemetry.AutoInstrumentation.Loader.Startup' threw an exception.\n---> System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation.\n---> System.IO.FileNotFoundException: Could not load file or assembly 'Microsoft.Extensions.Configuration.Abstractions, Version=7.0.0.0, Culture=neutral, PublicKeyToken=adb9793829ddae60'. The system cannot find the file specified.\n```\n\n----------------------------------------\n\nTITLE: Hugo List Item Template Definition\nDESCRIPTION: Defines a reusable template for creating list items with links. Takes a name and page object as parameters to generate an HTML link with the proper relative permalink.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/sampling-support-list.md#2025-04-09_snippet_1\n\nLANGUAGE: go-template\nCODE:\n```\n{{ define \"list-item\" -}}\n- <a href=\"{{ .page.RelPermalink }}\">{{ .name }}</a>\n{{ end -}}\n```\n\n----------------------------------------\n\nTITLE: Diagrama del flujo de trabajo con repositorio local\nDESCRIPTION: Diagrama de Mermaid que muestra el proceso para contribuir utilizando un clon local del repositorio, incluyendo hacer fork, crear una rama local, realizar cambios, revisarlos y subir los cambios.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/es/docs/contributing/pull-requests.md#2025-04-09_snippet_2\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR\n1[Haz fork del repositorio <br>open-telemetry/opentelemetry] --> 2[Crea una rama local<br>y agrega el remote upstream]\nsubgraph changes[Tus cambios]\ndirection TB\nS[ ] -.-\n3[Crea una rama<br>ejemplo: mi_nueva_rama] --> 3a[Haz los cambios<br>en un editor de texto] --> 4[\"Revisa tus cambios<br>localmente usando Hugo<br>(localhost:1313)\"]\nend\nsubgraph changes2[Haz Commit / Push]\ndirection TB\nT[ ] -.-\n5[Haz commit de tus cambios] --> 6[Haz push de tus cambios<br>origin/mi_nueva_rama]\nend\n\n2 --> changes --> changes2\n\nclassDef grey fill:#dddddd,stroke:#ffffff,stroke-width:px,color:#000000, font-size:15px;\nclassDef white fill:#ffffff,stroke:#000,stroke-width:px,color:#000,font-weight:bold\nclassDef k8s fill:#326ce5,stroke:#fff,stroke-width:1px,color:#fff;\nclassDef spacewhite fill:#ffffff,stroke:#fff,stroke-width:0px,color:#000\nclass 1,2,3,3a,4,5,6 grey\nclass S,T spacewhite\nclass changes,changes2 white\n```\n\n----------------------------------------\n\nTITLE: Defining Development Section with Translated Heading\nDESCRIPTION: Creates a section heading for development and contribution using a translated string.\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/layouts/shortcodes/community-lists.md#2025-04-09_snippet_4\n\nLANGUAGE: HTML with Hugo Template\nCODE:\n```\n## {{ T \"community_develop\" }}\n```\n\n----------------------------------------\n\nTITLE: Javaの自動計装設定 - 環境変数\nDESCRIPTION: JavaのLambda自動計装で特定の計装のみを有効にするための環境変数設定例。LambdaとAWS SDKの自動計装のみを有効にします。\nSOURCE: https://github.com/open-telemetry/opentelemetry.io/blob/main/content/ja/docs/platforms/faas/lambda-auto-instrument.md#2025-04-09_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nOTEL_INSTRUMENTATION_COMMON_DEFAULT_ENABLED=false\nOTEL_INSTRUMENTATION_AWS_LAMBDA_ENABLED=true\nOTEL_INSTRUMENTATION_AWS_SDK_ENABLED=true\n```"
  }
]