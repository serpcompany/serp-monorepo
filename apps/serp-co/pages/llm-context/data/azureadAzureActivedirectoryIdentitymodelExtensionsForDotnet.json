[
  {
    "owner": "azuread",
    "repo": "azure-activedirectory-identitymodel-extensions-for-dotnet",
    "content": "TITLE: Defining Constants for Security Algorithms in C#\nDESCRIPTION: This snippet defines string constants for various security algorithms, including encryption, key wrapping, and digital signature algorithms used in cryptographic operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes128CbcHmacSha256 = \"A128CBC-HS256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes128Encryption = \"http://www.w3.org/2001/04/xmlenc#aes128-cbc\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes128Gcm = \"A128GCM\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes128KeyWrap = \"http://www.w3.org/2001/04/xmlenc#kw-aes128\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes128KW = \"A128KW\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes192CbcHmacSha384 = \"A192CBC-HS384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes192Encryption = \"http://www.w3.org/2001/04/xmlenc#aes192-cbc\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes192Gcm = \"A192GCM\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes192KeyWrap = \"http://www.w3.org/2001/04/xmlenc#kw-aes192\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes192KW = \"A192KW\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes256CbcHmacSha512 = \"A256CBC-HS512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes256Encryption = \"http://www.w3.org/2001/04/xmlenc#aes256-cbc\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes256Gcm = \"A256GCM\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes256KeyWrap = \"http://www.w3.org/2001/04/xmlenc#kw-aes256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Aes256KW = \"A256KW\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.DesEncryption = \"http://www.w3.org/2001/04/xmlenc#des-cbc\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdhEs = \"ECDH-ES\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdhEsA128kw = \"ECDH-ES+A128KW\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdhEsA192kw = \"ECDH-ES+A192KW\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdhEsA256kw = \"ECDH-ES+A256KW\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdsaSha256 = \"ES256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdsaSha256Signature = \"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdsaSha384 = \"ES384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdsaSha384Signature = \"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdsaSha512 = \"ES512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EcdsaSha512Signature = \"http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.EnvelopedSignature = \"http://www.w3.org/2000/09/xmldsig#enveloped-signature\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14n = \"http://www.w3.org/2001/10/xml-exc-c14n#\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.ExclusiveC14nWithComments = \"http://www.w3.org/2001/10/xml-exc-c14n#WithComments\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256 = \"HS256\" -> string\n```\n\n----------------------------------------\n\nTITLE: Validating Azure AD JWT Token in C# using Microsoft.IdentityModel.Tokens\nDESCRIPTION: This code demonstrates how to validate a JWT token using the configured TokenValidationParameters. It uses the JwtSecurityTokenHandler to validate the token and extract claims from it.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar handler = new JwtSecurityTokenHandler();\nClaimsPrincipal claimsPrincipal;\n\ntry\n{\n    claimsPrincipal = handler.ValidateToken(token, validationParameters, out var validatedToken);\n    // Token is valid, you can now use the claims\n    var name = claimsPrincipal.FindFirst(ClaimTypes.Name)?.Value;\n    var email = claimsPrincipal.FindFirst(ClaimTypes.Email)?.Value;\n}\ncatch (SecurityTokenException ex)\n{\n    // Token validation failed\n    Console.WriteLine($\"Token validation failed: {ex.Message}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Token Creation Methods in JsonWebTokenHandler in C#\nDESCRIPTION: Comprehensive set of virtual methods for creating JWT tokens with various configurations including signing, encryption, compression, and header claims. These methods provide flexibility for token creation with different security requirements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims, System.Collections.Generic.IDictionary<string, object> additionalInnerHeaderClaims) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims) -> string\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims) -> string\n```\n\n----------------------------------------\n\nTITLE: Validating AAD Token Issuers with AadIssuerValidator\nDESCRIPTION: The AadIssuerValidator.Validate method validates token issuers against Azure Active Directory trusted issuers. It takes an issuer string, security token, and validation parameters, and returns the validated issuer string.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.Validate(string issuer, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> string\n```\n\n----------------------------------------\n\nTITLE: EncryptingCredentials Implementation in C#\nDESCRIPTION: EncryptingCredentials provides credentials for encrypting tokens, including key, algorithm, and encoding information. It supports various constructor overloads for different key types including symmetric keys and X.509 certificates.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.Alg.get -> string\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory.get -> Microsoft.IdentityModel.Tokens.CryptoProviderFactory\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.CryptoProviderFactory.set -> void\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.Enc.get -> string\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.EncryptingCredentials(Microsoft.IdentityModel.Tokens.SecurityKey key, string alg, string enc) -> void\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.EncryptingCredentials(Microsoft.IdentityModel.Tokens.SymmetricSecurityKey key, string enc) -> void\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.EncryptingCredentials(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate, string alg, string enc) -> void\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.Key.get -> Microsoft.IdentityModel.Tokens.SecurityKey\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.KeyExchangePublicKey.get -> Microsoft.IdentityModel.Tokens.SecurityKey\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.KeyExchangePublicKey.set -> void\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.SetDefaultCtyClaim.get -> bool\nMicrosoft.IdentityModel.Tokens.EncryptingCredentials.SetDefaultCtyClaim.set -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Token Validation Parameters for Azure AD in C#\nDESCRIPTION: This snippet sets up the TokenValidationParameters for validating a JWT token against Azure AD. It configures the valid audience, issuer, and signing keys using the provided configuration values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar validationParameters = new TokenValidationParameters\n{\n    ValidAudience = configuration[\"AzureAd:ClientId\"],\n    ValidIssuer = $\"https://sts.windows.net/{configuration[\"AzureAd:TenantId\"]}/\",\n    ValidateIssuer = true,\n    ValidateAudience = true,\n    ValidateLifetime = true,\n    ValidateIssuerSigningKey = true,\n    IssuerSigningKeys = new List<SecurityKey>\n    {\n        new X509SecurityKey(cert)\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing JwtSecurityToken Methods in C#\nDESCRIPTION: This snippet shows the implementation of various methods and properties for the JwtSecurityToken class. These methods handle token properties such as ID, issuer, signing key, and validation dates.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Id.get -> string\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.Issuer.get -> string\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SecurityKey.get -> Microsoft.IdentityModel.Tokens.SecurityKey\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey.get -> Microsoft.IdentityModel.Tokens.SecurityKey\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.SigningKey.set -> void\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.ToString() -> string\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.UnsafeToString() -> string\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.ValidFrom.get -> System.DateTime\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityToken.ValidTo.get -> System.DateTime\n```\n\n----------------------------------------\n\nTITLE: Validating JWT Signature in C#\nDESCRIPTION: This method validates the signature of a JsonWebToken using the provided validation parameters and configuration. It returns a ValidationResult containing a SecurityKey.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateSignature(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.SecurityKey>\n```\n\n----------------------------------------\n\nTITLE: Implementing JwtSecurityTokenHandler Methods in C#\nDESCRIPTION: This snippet shows the implementation of various methods for the JwtSecurityTokenHandler class. These methods handle token validation, creation, reading, and writing operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanReadToken(string token) -> bool\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanValidateToken.get -> bool\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CanWriteToken.get -> bool\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> Microsoft.IdentityModel.Tokens.SecurityToken\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadToken(string token) -> Microsoft.IdentityModel.Tokens.SecurityToken\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ReadToken(System.Xml.XmlReader reader, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> Microsoft.IdentityModel.Tokens.SecurityToken\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TokenType.get -> System.Type\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateToken(string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, out Microsoft.IdentityModel.Tokens.SecurityToken validatedToken) -> System.Security.Claims.ClaimsPrincipal\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.TokenValidationResult>\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken token) -> string\noverride System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.WriteToken(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.SecurityToken token) -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Class Interface in C#\nDESCRIPTION: Class interface for JsonWebTokenHandler that provides methods for working with JWT tokens, including a method for decrypting tokens using validation parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.DecryptToken(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> string\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring TokenValidationParameters in C#\nDESCRIPTION: This snippet demonstrates how to create and configure TokenValidationParameters for JWT token validation. It specifies the valid audience, issuer, and signing key, and sets validation options for issuer, audience, lifetime, and signature.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar validationParameters = new TokenValidationParameters\n{\n    ValidAudience = \"https://localhost\",\n    ValidIssuer = \"https://localhost\",\n    IssuerSigningKey = signingKey,\n\n    // Specify what to validate\n    ValidateIssuer = true,\n    ValidateAudience = true,\n    ValidateLifetime = true,\n    ValidateIssuerSigningKey = true\n};\n```\n\n----------------------------------------\n\nTITLE: Security Token Validation Interface in C#\nDESCRIPTION: ISecurityTokenValidator defines the interface for token validators, with methods for reading and validating tokens. It includes properties for determining validator capabilities and configuring maximum token size.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ISecurityTokenValidator\nMicrosoft.IdentityModel.Tokens.ISecurityTokenValidator.CanReadToken(string securityToken) -> bool\nMicrosoft.IdentityModel.Tokens.ISecurityTokenValidator.CanValidateToken.get -> bool\nMicrosoft.IdentityModel.Tokens.ISecurityTokenValidator.MaximumTokenSizeInBytes.get -> int\nMicrosoft.IdentityModel.Tokens.ISecurityTokenValidator.MaximumTokenSizeInBytes.set -> void\nMicrosoft.IdentityModel.Tokens.ISecurityTokenValidator.ValidateToken(string securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, out Microsoft.IdentityModel.Tokens.SecurityToken validatedToken) -> System.Security.Claims.ClaimsPrincipal\n```\n\n----------------------------------------\n\nTITLE: Implementing Digital Signature Operations in C#\nDESCRIPTION: API declarations for signature provider implementations that handle digital signature operations. These methods enable generation of cryptographic signatures using both asymmetric and symmetric keys with optimized memory handling through Span<T>.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.AsymmetricSignatureProvider.Sign(System.ReadOnlySpan<byte> input, System.Span<byte> signature, out int bytesWritten) -> bool\noverride Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Sign(System.ReadOnlySpan<byte> input, System.Span<byte> signature, out int bytesWritten) -> bool\nvirtual Microsoft.IdentityModel.Tokens.SignatureProvider.Sign(System.ReadOnlySpan<byte> data, System.Span<byte> destination, out int bytesWritten) -> bool\n```\n\n----------------------------------------\n\nTITLE: Token Validation Methods in C#\nDESCRIPTION: Static methods for validating various aspects of security tokens, including algorithm, audience, issuer, lifetime, and token replay.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateAlgorithm(string algorithm, Microsoft.IdentityModel.Tokens.SecurityKey securityKey, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateAudience(System.Collections.Generic.IEnumerable<string> audiences, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateIssuer(string issuer, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> string\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateIssuerSecurityKey(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(System.DateTime? notBefore, System.DateTime? expires, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateTokenReplay(string securityToken, System.DateTime? expirationTime, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateTokenReplay(System.DateTime? expirationTime, string securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateTokenType(string type, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> string\n```\n\n----------------------------------------\n\nTITLE: JsonWebKey Implementation in C#\nDESCRIPTION: The JsonWebKey class represents a JSON Web Key (JWK) as defined in RFC 7517. It includes properties for various key parameters like modulus, exponent, and curve name, as well as methods for constructing keys from JSON strings.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.JsonWebKey\nMicrosoft.IdentityModel.Tokens.JsonWebKey.AdditionalData.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Tokens.JsonWebKey.Alg.get -> string\nMicrosoft.IdentityModel.Tokens.JsonWebKey.Alg.set -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.Crv.get -> string\nMicrosoft.IdentityModel.Tokens.JsonWebKey.Crv.set -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.D.get -> string\nMicrosoft.IdentityModel.Tokens.JsonWebKey.D.set -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.DP.get -> string\nMicrosoft.IdentityModel.Tokens.JsonWebKey.DP.set -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.DQ.get -> string\nMicrosoft.IdentityModel.Tokens.JsonWebKey.DQ.set -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.E.get -> string\nMicrosoft.IdentityModel.Tokens.JsonWebKey.E.set -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.HasPrivateKey.get -> bool\nMicrosoft.IdentityModel.Tokens.JsonWebKey.JsonWebKey() -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.JsonWebKey(string json) -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.K.get -> string\nMicrosoft.IdentityModel.Tokens.JsonWebKey.K.set -> void\nMicrosoft.IdentityModel.Tokens.JsonWebKey.KeyOps.get -> System.Collections.Generic.IList<string>\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Default Settings in C#\nDESCRIPTION: This snippet defines default settings for JWT token handling, including claim filters, claim type maps, and outbound algorithm maps. These settings provide a baseline configuration for JWT processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimFilter -> System.Collections.Generic.ISet<string>\nstatic System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultInboundClaimTypeMap -> System.Collections.Generic.IDictionary<string, string>\nstatic System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultMapInboundClaims -> bool\nstatic System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundAlgorithmMap -> System.Collections.Generic.IDictionary<string, string>\nstatic System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.DefaultOutboundClaimTypeMap -> System.Collections.Generic.IDictionary<string, string>\nstatic System.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.JsonClaimTypeProperty.get -> string\n```\n\n----------------------------------------\n\nTITLE: SignedHttpRequestValidationParameters Class Definition in C#\nDESCRIPTION: Defines the SignedHttpRequestValidationParameters class which contains settings and callbacks for validating signed HTTP requests. It includes properties for configuration options, validation flags, and custom validators.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.AcceptUnsignedHeaders.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.AcceptUnsignedHeaders.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.AcceptUnsignedQueryParameters.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.AcceptUnsignedQueryParameters.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.AllowedDomainsForJkuRetrieval.get -> System.Collections.Generic.ICollection<string>\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.AllowResolvingPopKeyFromJku.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.AllowResolvingPopKeyFromJku.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ClaimsToValidateWhenPresent.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ClaimsToValidateWhenPresent.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.CnfDecryptionKeys.get -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.SecurityKey>\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.CnfDecryptionKeys.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.CnfDecryptionKeysResolverAsync.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.CnfDecryptionKeysResolverAsync\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.CnfDecryptionKeysResolverAsync.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.HttpClientProvider.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.HttpClientProvider\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.HttpClientProvider.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.NonceValidatorAsync.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.NonceValidatorAsync\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.NonceValidatorAsync.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.PopKeyResolverAsync.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.PopKeyResolverAsync\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.PopKeyResolverAsync.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.PopKeyResolverFromKeyIdAsync.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.PopKeyResolverFromKeyIdAsync\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.PopKeyResolverFromKeyIdAsync.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ReplayValidatorAsync.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.ReplayValidatorAsync\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ReplayValidatorAsync.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.RequireHttpsForJkuResourceRetrieval.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.RequireHttpsForJkuResourceRetrieval.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.SignatureValidatorAsync.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignatureValidatorAsync\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.SignatureValidatorAsync.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.SignedHttpRequestLifetime.get -> System.TimeSpan\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.SignedHttpRequestLifetime.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.SignedHttpRequestValidationParameters() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.TokenHandler.get -> Microsoft.IdentityModel.Tokens.TokenHandler\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.TokenHandler.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateB.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateB.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateH.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateH.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateM.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateM.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateP.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateP.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidatePresentClaims.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidatePresentClaims.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateQ.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateQ.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateTs.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateTs.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateU.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.ValidateU.set -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Methods in C#\nDESCRIPTION: API signatures for the JsonWebTokenHandler class, which provides functionality to validate, decrypt, and process JSON Web Tokens with support for both synchronous and asynchronous operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler._telemetryClient -> Microsoft.IdentityModel.Telemetry.ITelemetryClient\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.DecryptToken(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<string>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.GetContentEncryptionKeys(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration) -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.SecurityKey>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.GetContentEncryptionKeys(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration, Microsoft.IdentityModel.Tokens.CallContext callContext) -> (System.Collections.Generic.IList<Microsoft.IdentityModel.Tokens.SecurityKey>, Microsoft.IdentityModel.Tokens.ValidationError)\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWEAsync(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration) -> System.Threading.Tasks.ValueTask<Microsoft.IdentityModel.Tokens.TokenValidationResult>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateJWSAsync(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jsonWebToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration) -> System.Threading.Tasks.ValueTask<Microsoft.IdentityModel.Tokens.TokenValidationResult>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jsonWebToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Threading.Tasks.ValueTask<Microsoft.IdentityModel.Tokens.TokenValidationResult>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.Tokens.SecurityToken token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenPayloadAsync(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jsonWebToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration) -> System.Threading.Tasks.ValueTask<Microsoft.IdentityModel.Tokens.TokenValidationResult>\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentityInternal(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters tokenValidationParameters, string issuer) -> System.Security.Claims.ClaimsIdentity\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken Class Interface in C#\nDESCRIPTION: Class interface for JsonWebToken that provides methods and properties for working with JWT tokens. Includes constructors, accessors for token components, and utility methods for extracting token values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimValueTypes\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Actor.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Alg.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Audiences.get -> System.Collections.Generic.IEnumerable<string>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.AuthenticationTag.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Azp.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Ciphertext.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Cty.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Enc.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.EncodedHeader.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.EncodedPayload.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.EncodedSignature.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.EncodedToken.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.EncryptedKey.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.GetClaim(string key) -> System.Security.Claims.Claim\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.GetHeaderValue<T>(string key) -> T\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.GetPayloadValue<T>(string key) -> T\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.InitializationVector.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.InnerToken.get -> Microsoft.IdentityModel.JsonWebTokens.JsonWebToken\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.IsEncrypted.get -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.IsSigned.get -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.IssuedAt.get -> System.DateTime\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.JsonWebToken(string header, string payload) -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.JsonWebToken(string jwtEncodedString) -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.JsonWebToken(System.ReadOnlyMemory<char> encodedTokenMemory) -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Kid.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Subject.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryGetClaim(string key, out System.Security.Claims.Claim value) -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryGetHeaderValue<T>(string key, out T value) -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryGetPayloadValue<T>(string key, out T value) -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryGetValue<T>(string key, out T value) -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Typ.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.X5t.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Zip.get -> string\n```\n\n----------------------------------------\n\nTITLE: JwtRegisteredClaimNames Constants in C#\nDESCRIPTION: Constants for standard JWT claim names as defined in various specifications including OpenID Connect and OAuth 2.0. These claims represent common identity attributes and token metadata.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Acr = \"acr\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Actort = \"actort\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Address = \"address\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Alg = \"alg\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Amr = \"amr\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.AtHash = \"at_hash\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Aud = \"aud\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.AuthTime = \"auth_time\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Azp = \"azp\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Birthdate = \"birthdate\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.CHash = \"c_hash\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Email = \"email\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.EmailVerified = \"email_verified\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Exp = \"exp\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.FamilyName = \"family_name\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Gender = \"gender\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.GivenName = \"given_name\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Iat = \"iat\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Iss = \"iss\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Jti = \"jti\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Locale = \"locale\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.MiddleName = \"middle_name\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Name = \"name\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.NameId = \"nameid\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Nbf = \"nbf\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Nickname = \"nickname\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Nonce = \"nonce\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.PhoneNumber = \"phone_number\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.PhoneNumberVerified = \"phone_number_verified\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Picture = \"picture\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.PreferredUsername = \"preferred_username\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Prn = \"prn\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Profile = \"profile\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Sid = \"sid\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Sub = \"sub\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Typ = \"typ\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.UniqueName = \"unique_name\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.UpdatedAt = \"updated_at\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.Website = \"website\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.ZoneInfo = \"zoneinfo\" -> string\n```\n\n----------------------------------------\n\nTITLE: JwtConstants in C#\nDESCRIPTION: Constants related to JSON Web Tokens, including serialization patterns, segment counts, and token types. These constants are used for validation and processing of JWT tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.DirectKeyUseAlg = \"dir\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.HeaderType = \"JWT\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.HeaderTypeAlt = \"http://openid.net/specs/jwt/1.0\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.JsonCompactSerializationRegex = \"^[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]*$\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.JweCompactSerializationRegex = \"^[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]*\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+$\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.JweSegmentCount = 5 -> int\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.JwsSegmentCount = 3 -> int\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.MaxJwtSegmentCount = 5 -> int\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.TokenType = \"JWT\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtConstants.TokenTypeAlt = \"urn:ietf:params:oauth:token-type:jwt\" -> string\n```\n\n----------------------------------------\n\nTITLE: EncryptToken Methods for JsonWebTokenHandler in C#\nDESCRIPTION: Methods for encrypting JSON Web Tokens with various parameter combinations. These methods allow encrypting an inner JWT using encryption credentials with optional algorithm specification and additional header claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials) -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string algorithm) -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string algorithm, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims) -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(string innerJwt, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims) -> string\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Operations in Identity Model Extensions\nDESCRIPTION: Methods for handling various cryptographic operations including asymmetric encryption/decryption, authenticated encryption, and ECDsa operations. These provide the cryptographic foundation for token signing and validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.AsymmetricAdapter.DecryptFunctionNotFound(byte[] _) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.AsymmetricAdapter.EncryptFunctionNotFound(byte[] _) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Transform(System.Security.Cryptography.ICryptoTransform transform, byte[] input, int inputOffset, int inputLength) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.CryptographicOperations.ZeroMemory(byte[] buffer) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ECDsaAdapter.ECDsaNotSupported(Microsoft.IdentityModel.Tokens.JsonWebKey jsonWebKey, bool usePrivateKey) -> System.Security.Cryptography.ECDsa\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ECDsaAdapter.GetCrvParameterValue(System.Security.Cryptography.ECCurve curve) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ECDsaAdapter.Instance -> Microsoft.IdentityModel.Tokens.ECDsaAdapter\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ECDsaAdapter.SupportsECParameters() -> bool\n```\n\n----------------------------------------\n\nTITLE: JWT Validation Context Extension Method in C#\nDESCRIPTION: Extension method for validating JWTs using custom validation parameters. It checks token syntax, creates a JWT token handler, and performs validation against specified parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Validates a Json Web Token (JWT).\n/// </summary>\n/// <param name=\"validationContext\">A <see cref=\"TokenValidationContext\"/>.</param>\n/// <returns>A <see cref=\"TokenValidationResult\"/>.</returns>\npublic static TokenValidationResult ValidateToken(this TokenValidationContext validationContext)\n{\n    return ValidateToken(\n        validationContext.Token,\n        validationContext.Parameters);\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Utilities in C#\nDESCRIPTION: These utility methods provide various functions for working with JWT tokens, including concatenating signing keys, counting token parts, creating signatures, decompressing tokens, and decrypting tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.ConcatSigningKeys(Microsoft.IdentityModel.Tokens.TokenValidationParameters tvp) -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.SecurityKey>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CountJwtTokenPart(string token, int maxCount) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateEncodedSignature(byte[] input, int offset, int count, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.DecompressToken(byte[] tokenBytes, string algorithm, int maximumDeflateSize) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.DecryptJwtToken(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jsonWebToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters decryptionParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<string>\n```\n\n----------------------------------------\n\nTITLE: Implementing SignedHttpRequestUtilities Static Methods in C#\nDESCRIPTION: This snippet defines static methods in the SignedHttpRequestUtilities class for creating JWK claims, signed HTTP request headers, and converting HttpRequestMessage to HttpRequestData.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestUtilities.CreateJwkClaim(Microsoft.IdentityModel.Tokens.JsonWebKey jsonWebKey) -> string\nstatic Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestUtilities.CreateSignedHttpRequestHeader(string signedHttpRequest) -> string\nstatic Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestUtilities.ToHttpRequestDataAsync(this System.Net.Http.HttpRequestMessage httpRequestMessage) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Protocols.HttpRequestData>\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken Core Classes in C#\nDESCRIPTION: Core class definitions for JWT handling, including JwtConstants, JwtHeaderParameterNames, and JwtRegisteredClaimNames classes which contain constants used in JWT processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JwtConstants\nMicrosoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames\nMicrosoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.JwtHeaderParameterNames() -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames\nMicrosoft.IdentityModel.JsonWebTokens.JwtRegisteredClaimNames.JwtRegisteredClaimNames() -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenUtilities\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.JwtTokenUtilities() -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing RsaSecurityKey Methods in C#\nDESCRIPTION: These snippets override methods in the RsaSecurityKey class, including ComputeJwkThumbprint, HasPrivateKey, KeySize, and PrivateKeyStatus operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.RsaSecurityKey.CanComputeJwkThumbprint() -> bool\noverride Microsoft.IdentityModel.Tokens.RsaSecurityKey.ComputeJwkThumbprint() -> byte[]\noverride Microsoft.IdentityModel.Tokens.RsaSecurityKey.HasPrivateKey.get -> bool\noverride Microsoft.IdentityModel.Tokens.RsaSecurityKey.KeySize.get -> int\noverride Microsoft.IdentityModel.Tokens.RsaSecurityKey.PrivateKeyStatus.get -> Microsoft.IdentityModel.Tokens.PrivateKeyStatus\n```\n\n----------------------------------------\n\nTITLE: ECDH Key Exchange Provider Implementation in C#\nDESCRIPTION: Definition for an Elliptic Curve Diffie-Hellman key exchange provider that generates security keys for encrypted communications. It handles initialization with public/private key pairs and implements KDF (Key Derivation Function) generation with optional parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.EcdhKeyExchangeProvider(Microsoft.IdentityModel.Tokens.SecurityKey privateKey, Microsoft.IdentityModel.Tokens.SecurityKey publicKey, string alg, string enc) -> void\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.GenerateKdf(string apu = null, string apv = null) -> Microsoft.IdentityModel.Tokens.SecurityKey\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.get -> int\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Properties for AsymmetricSecurityKey in C#\nDESCRIPTION: This snippet defines two abstract properties for the AsymmetricSecurityKey class: HasPrivateKey and PrivateKeyStatus. These properties are essential for managing asymmetric key pairs in security operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey.HasPrivateKey.get -> bool\nabstract Microsoft.IdentityModel.Tokens.AsymmetricSecurityKey.PrivateKeyStatus.get -> Microsoft.IdentityModel.Tokens.PrivateKeyStatus\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestDescriptor Class in C#\nDESCRIPTION: Class for describing a signed HTTP request, including access token, HTTP request data, signing credentials, and additional claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.AccessToken.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.AdditionalHeaderClaims.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.AdditionalHeaderClaims.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.AdditionalPayloadClaims.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.AdditionalPayloadClaims.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.CnfClaimValue.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.CnfClaimValue.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.CustomNonceValue.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.CustomNonceValue.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.HttpRequestData.get -> Microsoft.IdentityModel.Protocols.HttpRequestData\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.SignedHttpRequestCreationParameters.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.SignedHttpRequestDescriptor(string accessToken, Microsoft.IdentityModel.Protocols.HttpRequestData httpRequestData, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.SignedHttpRequestDescriptor(string accessToken, Microsoft.IdentityModel.Protocols.HttpRequestData httpRequestData, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters signedHttpRequestCreationParameters) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor.SigningCredentials.get -> Microsoft.IdentityModel.Tokens.SigningCredentials\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for HttpDocumentRetriever in C#\nDESCRIPTION: Declares constant string values for response content and status code in the HttpDocumentRetriever class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.HttpDocumentRetriever.ResponseContent = \"response_content\" -> string\nconst Microsoft.IdentityModel.Protocols.HttpDocumentRetriever.StatusCode = \"status_code\" -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing X509SecurityKey Methods in C#\nDESCRIPTION: These snippets override methods in the X509SecurityKey class, including ComputeJwkThumbprint, Equals, GetHashCode, HasPrivateKey, KeySize, and PrivateKeyStatus operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.X509SecurityKey.CanComputeJwkThumbprint() -> bool\noverride Microsoft.IdentityModel.Tokens.X509SecurityKey.ComputeJwkThumbprint() -> byte[]\noverride Microsoft.IdentityModel.Tokens.X509SecurityKey.Equals(object obj) -> bool\noverride Microsoft.IdentityModel.Tokens.X509SecurityKey.GetHashCode() -> int\noverride Microsoft.IdentityModel.Tokens.X509SecurityKey.HasPrivateKey.get -> bool\noverride Microsoft.IdentityModel.Tokens.X509SecurityKey.KeySize.get -> int\noverride Microsoft.IdentityModel.Tokens.X509SecurityKey.PrivateKeyStatus.get -> Microsoft.IdentityModel.Tokens.PrivateKeyStatus\n```\n\n----------------------------------------\n\nTITLE: CryptoProviderFactory and Caching in C#\nDESCRIPTION: CryptoProviderFactory creates and manages cryptographic providers. It includes caching capabilities for performance and supports custom cryptographic providers through the CustomCryptoProvider property.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CacheSignatureProviders.get -> bool\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CacheSignatureProviders.set -> void\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CryptoProviderCache.get -> Microsoft.IdentityModel.Tokens.CryptoProviderCache\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CryptoProviderFactory() -> void\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CryptoProviderFactory(Microsoft.IdentityModel.Tokens.CryptoProviderCache cache) -> void\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CryptoProviderFactory(Microsoft.IdentityModel.Tokens.CryptoProviderFactory other) -> void\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider.get -> Microsoft.IdentityModel.Tokens.ICryptoProvider\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.CustomCryptoProvider.set -> void\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.SignatureProviderObjectPoolCacheSize.get -> int\nMicrosoft.IdentityModel.Tokens.CryptoProviderFactory.SignatureProviderObjectPoolCacheSize.set -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring TokenValidationParameters for Azure AD JWT Validation in C#\nDESCRIPTION: This snippet shows how to create and configure TokenValidationParameters for validating JWTs issued by Azure AD. It sets up the audience, issuer, and signing keys, and enables various validation options.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar validationParameters = new TokenValidationParameters\n{\n    ValidateIssuer = true,\n    ValidIssuer = \"https://login.microsoftonline.com/{tenantId}/v2.0\",\n    ValidateAudience = true,\n    ValidAudience = \"api://your-client-id\",\n    ValidateLifetime = true,\n    ClockSkew = TimeSpan.Zero,\n    RequireSignedTokens = true,\n    ValidateIssuerSigningKey = true,\n    IssuerSigningKeys = GetSigningKeys() // Method to retrieve signing keys\n};\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Token Creation and Manipulation Methods\nDESCRIPTION: Methods for creating, signing, and encrypting JWTs. These methods provide various overloads for handling different token creation scenarios, including support for security token descriptors, custom headers, and compression.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.AddSubjectClaims(ref System.Text.Json.Utf8JsonWriter writer, Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor, bool audienceSet, bool issuerSet, ref bool expSet, ref bool iatSet, ref bool nbfSet) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CompressToken(byte[] utf8Bytes, string compressionAlgorithm) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor, bool setdefaultTimesOnTokenCreation, int tokenLifetimeInMinutes) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateToken(string payload, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims, System.Collections.Generic.IDictionary<string, object> additionalInnerHeaderClaims, string tokenType) -> string\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Registered Claim Names in C#\nDESCRIPTION: This snippet defines constant values for JWT registered claim names. These constants represent standard claims that can be included in a JWT payload, ensuring consistent naming across implementations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Acr = \"acr\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Actort = \"actort\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Address = \"address\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Alg = \"alg\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Amr = \"amr\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.AtHash = \"at_hash\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Aud = \"aud\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.AuthTime = \"auth_time\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Azp = \"azp\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Birthdate = \"birthdate\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.CHash = \"c_hash\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Email = \"email\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.EmailVerified = \"email_verified\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Exp = \"exp\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.FamilyName = \"family_name\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Gender = \"gender\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.GivenName = \"given_name\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Iat = \"iat\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Iss = \"iss\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Jti = \"jti\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Locale = \"locale\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.MiddleName = \"middle_name\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Name = \"name\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.NameId = \"nameid\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Nbf = \"nbf\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Nickname = \"nickname\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Nonce = \"nonce\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.PhoneNumber = \"phone_number\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.PhoneNumberVerified = \"phone_number_verified\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Picture = \"picture\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.PreferredUsername = \"preferred_username\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Prn = \"prn\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Profile = \"profile\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Sid = \"sid\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Sub = \"sub\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Typ = \"typ\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.UniqueName = \"unique_name\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.UpdatedAt = \"updated_at\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Website = \"website\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.ZoneInfo = \"zoneinfo\" -> string\n```\n\n----------------------------------------\n\nTITLE: ECDsaSecurityKey Implementation in C#\nDESCRIPTION: ECDsaSecurityKey provides a security key wrapper for ECDsa cryptographic algorithm implementations. It enables the use of Elliptic Curve Digital Signature Algorithm for token signing and validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ECDsaSecurityKey\nMicrosoft.IdentityModel.Tokens.ECDsaSecurityKey.ECDsa.get -> System.Security.Cryptography.ECDsa\nMicrosoft.IdentityModel.Tokens.ECDsaSecurityKey.ECDsaSecurityKey(System.Security.Cryptography.ECDsa ecdsa) -> void\n```\n\n----------------------------------------\n\nTITLE: SAML2 Token Component Serialization Methods\nDESCRIPTION: Virtual methods for serializing different components of SAML2 tokens to XML format. Each method takes an XmlWriter and the specific SAML2 component object as parameters and writes the XML representation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer.WriteNameIdType(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml2.Saml2NameIdentifier nameIdentifier) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer.WriteProxyRestriction(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml2.Saml2ProxyRestriction proxyRestriction) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer.WriteStatement(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml2.Saml2Statement statement) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer.WriteSubject(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml2.Saml2Subject subject) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer.WriteSubjectConfirmation(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectConfirmation subjectConfirmation) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer.WriteSubjectConfirmationData(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectConfirmationData subjectConfirmationData) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2Serializer.WriteSubjectLocality(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectLocality subjectLocality) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing JsonWebKey Methods in C#\nDESCRIPTION: These snippets override methods in the JsonWebKey class, including ComputeJwkThumbprint, KeyId property, KeySize property, and ToString method.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.JsonWebKey.CanComputeJwkThumbprint() -> bool\noverride Microsoft.IdentityModel.Tokens.JsonWebKey.ComputeJwkThumbprint() -> byte[]\noverride Microsoft.IdentityModel.Tokens.JsonWebKey.KeyId.get -> string\noverride Microsoft.IdentityModel.Tokens.JsonWebKey.KeyId.set -> void\noverride Microsoft.IdentityModel.Tokens.JsonWebKey.KeySize.get -> int\noverride Microsoft.IdentityModel.Tokens.JsonWebKey.ToString() -> string\n```\n\n----------------------------------------\n\nTITLE: JWT Token Handling Methods in C#\nDESCRIPTION: Methods for decrypting and validating JSON Web Tokens, including both synchronous and asynchronous validation approaches.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.DecryptToken(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.TokenDecryptionResult\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.Tokens.SecurityToken token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken? cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.TokenValidationResult>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken? cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.TokenValidationResult>\n```\n\n----------------------------------------\n\nTITLE: SAML2 Security Token Handling in C#\nDESCRIPTION: This snippet shows method signatures for creating and processing SAML2 security tokens. These methods are part of the Saml2SecurityTokenHandler class and handle various aspects of SAML2 token creation and validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler.ConsolidateAttributes(System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml2.Saml2Attribute> attributes) -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml2.Saml2Attribute>\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler.CreateAdvice(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> Microsoft.IdentityModel.Tokens.Saml2.Saml2Advice\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler.CreateAttribute(System.Security.Claims.Claim claim) -> Microsoft.IdentityModel.Tokens.Saml2.Saml2Attribute\n// ... (more Create and Process methods)\n```\n\n----------------------------------------\n\nTITLE: ICryptoProvider Interface in C#\nDESCRIPTION: The ICryptoProvider interface defines methods for creating, verifying support for, and releasing cryptographic algorithm implementations. It allows for pluggable cryptography providers in the token validation pipeline.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ICryptoProvider\nMicrosoft.IdentityModel.Tokens.ICryptoProvider.Create(string algorithm, params object[] args) -> object\nMicrosoft.IdentityModel.Tokens.ICryptoProvider.IsSupportedAlgorithm(string algorithm, params object[] args) -> bool\nMicrosoft.IdentityModel.Tokens.ICryptoProvider.Release(object cryptoInstance) -> void\n```\n\n----------------------------------------\n\nTITLE: Claims Identity and Token Validation Functions\nDESCRIPTION: Methods for creating claims identities and validating security tokens. These functions handle the creation of identity objects from claims and provide token validation functionality essential for authentication processes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ClaimsIdentityFactory.Create(string authenticationType, string nameType, string roleType, Microsoft.IdentityModel.Tokens.SecurityToken securityToken) -> System.Security.Claims.ClaimsIdentity\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ClaimsIdentityFactory.Create(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims) -> System.Security.Claims.ClaimsIdentity\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ClaimsIdentityFactory.Create(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType) -> System.Security.Claims.ClaimsIdentity\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.InternalValidators.ValidateAfterSignatureFailed(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, System.DateTime? notBefore, System.DateTime? expires, System.Collections.Generic.IEnumerable<string> audiences, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration) -> void\n```\n\n----------------------------------------\n\nTITLE: Token Handler and Validation Virtual Methods in C#\nDESCRIPTION: Virtual methods for TokenHandler and TokenValidationParameters classes for token handling configuration and asynchronous token validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.MaximumTokenSizeInBytes.get -> int\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.MaximumTokenSizeInBytes.set -> void\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.ReadToken(string token) -> Microsoft.IdentityModel.Tokens.SecurityToken\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.Tokens.SecurityToken token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.TokenValidationResult>\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.TokenValidationResult>\nvirtual Microsoft.IdentityModel.Tokens.TokenValidationParameters.Clone() -> Microsoft.IdentityModel.Tokens.TokenValidationParameters\nvirtual Microsoft.IdentityModel.Tokens.TokenValidationParameters.CreateClaimsIdentity(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, string issuer) -> System.Security.Claims.ClaimsIdentity\n```\n\n----------------------------------------\n\nTITLE: Virtual Methods in JsonWebToken and JsonWebTokenHandler in C#\nDESCRIPTION: Virtual methods for JsonWebToken and JsonWebTokenHandler classes, providing customizable functionality for claims access, token reading, validation, and creation with various parameter combinations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.Claims.get -> System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CanReadToken(string token) -> bool\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CanValidateToken.get -> bool\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentity(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Security.Claims.ClaimsIdentity\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentity(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, string issuer) -> System.Security.Claims.ClaimsIdentity\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Signature Validation and Token Reading Methods\nDESCRIPTION: Methods for validating JWT signatures and reading token information. These methods handle verification of digital signatures and parsing token content into security token objects.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.IsSignatureValid(byte[] signatureBytes, int signatureBytesLength, Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider, byte[] dataToVerify, int dataToVerifyLength) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(string token, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.SecurityToken>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateSignature(byte[] bytes, int len, string stringWithSignature, int signatureStartIndex, Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateSignature(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jsonWebToken, Microsoft.IdentityModel.Tokens.SecurityKey key, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating and Validating JSON Web Tokens in .NET\nDESCRIPTION: Demonstrates how to create a JWT token with various claims and then validate it using TokenValidationParameters. The example includes setting up security keys, specifying token lifetime, and defining validation requirements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// create token\nvar handler = new JwtSecurityTokenHandler();\nvar tokenDescriptor = new SecurityTokenDescriptor\n{\n    Subject = new ClaimsIdentity(new Claim[] \n    {\n        new Claim(ClaimTypes.Name, \"John Doe\"),\n        new Claim(ClaimTypes.Email, \"john@example.com\"),\n        new Claim(\"custom_claim\", \"custom_value\")\n    }),\n    Expires = DateTime.UtcNow.AddHours(1),\n    SigningCredentials = new SigningCredentials(\n        new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"your-secret-key-here\")),\n        SecurityAlgorithms.HmacSha256Signature)\n};\n\nvar token = handler.CreateToken(tokenDescriptor);\nvar tokenString = handler.WriteToken(token);\n\n// validate token\nvar validationParameters = new TokenValidationParameters\n{\n    ValidateIssuerSigningKey = true,\n    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(\"your-secret-key-here\")),\n    ValidateIssuer = false,\n    ValidateAudience = false,\n    ClockSkew = TimeSpan.Zero\n};\n\ntry\n{\n    var principal = handler.ValidateToken(tokenString, validationParameters, out var validatedToken);\n    var nameClaim = principal.FindFirst(ClaimTypes.Name)?.Value;\n    Console.WriteLine($\"Token validated for: {nameClaim}\");\n}\ncatch (Exception ex)\n{\n    Console.WriteLine($\"Token validation failed: {ex.Message}\");\n}\n```\n\n----------------------------------------\n\nTITLE: Token Reading and Validation Methods in JsonWebTokenHandler in C#\nDESCRIPTION: Virtual methods for reading and validating JWT tokens, including parsing tokens into JsonWebToken objects, resolving decryption keys, and validating tokens against specified parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadJsonWebToken(string token) -> Microsoft.IdentityModel.JsonWebTokens.JsonWebToken\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ResolveTokenDecryptionKey(string token, Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> Microsoft.IdentityModel.Tokens.SecurityKey\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateToken(string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> Microsoft.IdentityModel.Tokens.TokenValidationResult\n```\n\n----------------------------------------\n\nTITLE: JWT Token Utility Static Methods in C#\nDESCRIPTION: Static utility methods for JWT token manipulation, including creating signatures, generating key bytes, retrieving decryption keys, and regex patterns for token validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateEncodedSignature(string input, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials) -> string\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateEncodedSignature(string input, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, bool cacheProvider) -> string\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.GenerateKeyBytes(int sizeInBits) -> byte[]\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.GetAllDecryptionKeys(Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.SecurityKey>\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.RegexJwe -> System.Text.RegularExpressions.Regex\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.RegexJws -> System.Text.RegularExpressions.Regex\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Constants in C#\nDESCRIPTION: This snippet defines constant values for JWT claim types, header parameters, and registered claim names. These constants are used throughout the JWT handling process for standardization and consistency.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes.Json = \"JSON\" -> string\nconst System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes.JsonArray = \"JSON_ARRAY\" -> string\nconst System.IdentityModel.Tokens.Jwt.JsonClaimValueTypes.JsonNull = \"JSON_NULL\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.DirectKeyUseAlg = \"dir\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.HeaderType = \"JWT\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.HeaderTypeAlt = \"http://openid.net/specs/jwt/1.0\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.JsonCompactSerializationRegex = \"^[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]*$\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.JweCompactSerializationRegex = \"^[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]*\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+\\\\.[A-Za-z0-9-_]+$\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.TokenType = \"JWT\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.TokenTypeAlt = \"urn:ietf:params:oauth:token-type:jwt\" -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing SignedHttpRequestHandler Virtual Methods in C#\nDESCRIPTION: This snippet defines virtual methods in the SignedHttpRequestHandler class for creating HTTP request payloads and validating signed HTTP request payloads asynchronously.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.CreateHttpRequestPayload(Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor signedHttpRequestDescriptor, Microsoft.IdentityModel.Tokens.CallContext callContext) -> string\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidateSignedHttpRequestPayloadAsync(Microsoft.IdentityModel.Tokens.SecurityToken signedHttpRequest, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.SecurityToken>\n```\n\n----------------------------------------\n\nTITLE: SAML Token Handler Method Signatures\nDESCRIPTION: Collection of virtual method signatures for the SamlSecurityTokenHandler class that handle SAML token processing, validation, and transformation. These methods form the core API for working with SAML tokens in the Identity Model Extensions library.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor, Microsoft.IdentityModel.Tokens.Saml.AuthenticationInformation authenticationInformation) -> Microsoft.IdentityModel.Tokens.SecurityToken\n\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.ValidateSignature(string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> Microsoft.IdentityModel.Tokens.Saml.SamlSecurityToken\n\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.ProcessStatements(Microsoft.IdentityModel.Tokens.Saml.SamlSecurityToken samlToken, string issuer, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Token Encryption Methods\nDESCRIPTION: Methods specifically for encrypting JWTs with various parameters and options. These methods handle the encryption of inner tokens with support for JWE (JSON Web Encryption) format and custom header claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(byte[] innerTokenUtf8Bytes, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims, string tokenType) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(byte[] innerTokenUtf8Bytes, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims, string tokenType, bool includeKeyIdInHeader) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.EncryptToken(byte[] innerTokenUtf8Bytes, Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> string\n```\n\n----------------------------------------\n\nTITLE: Configuring Token Decryption Behavior in C#\nDESCRIPTION: Demonstrates how to configure the TokenValidationParameters to control whether all decryption keys should be tried when no key matches the token decrypt key IDs.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar tokenValidationParameters = new TokenValidationParameters\n{\n    TryAllDecryptionKeys = false // Set to false for better performance\n};\n```\n\n----------------------------------------\n\nTITLE: Validating Token Lifetime in C#\nDESCRIPTION: This method validates the lifetime of a security token based on its notBefore and expires claims, using the provided validation parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateLifetime(System.DateTime? notBefore, System.DateTime? expires, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedLifetime>\n```\n\n----------------------------------------\n\nTITLE: SignedHttpRequestHandler Validation Method Signatures in C#\nDESCRIPTION: Defines method signatures for validating different components of a signed HTTP request, including nonce, p-claim, q-claim, signature, ts-claim, and u-claim. These methods are part of the Microsoft.IdentityModel.Protocols.SignedHttpRequest namespace and handle the security validation logic for HTTP requests with JSON Web Token signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidateNonceAsync(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken signedHttpRequest, Microsoft.IdentityModel.Tokens.SecurityKey popKey, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext, System.Threading.CancellationToken cancellationToken) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidatePClaim(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken signedHttpRequest, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidateQClaim(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken signedHttpRequest, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidateSignatureAsync(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken signedHttpRequest, Microsoft.IdentityModel.Tokens.SecurityKey popKey, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.SecurityKey>\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidateTsClaim(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken signedHttpRequest, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext) -> void\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidateUClaim(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken signedHttpRequest, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating and Manipulating JsonWebKeySet in C#\nDESCRIPTION: Static method for creating JsonWebKeySet from JSON string and a property for default skip unresolved JSON web keys behavior.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_44\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeySet.Create(string json) -> Microsoft.IdentityModel.Tokens.JsonWebKeySet\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeySet.DefaultSkipUnresolvedJsonWebKeys -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining SamlSecurityToken and Related Classes in C#\nDESCRIPTION: This code defines the SamlSecurityToken class and related exception classes for handling SAML security tokens in the Microsoft Identity Model.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityToken\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityToken.Assertion.get -> Microsoft.IdentityModel.Tokens.Saml.SamlAssertion\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityToken.SamlSecurityToken() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityToken.SamlSecurityToken(Microsoft.IdentityModel.Tokens.Saml.SamlAssertion assertion) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityTokenException\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityTokenException.SamlSecurityTokenException() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityTokenException.SamlSecurityTokenException(string message) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityTokenException.SamlSecurityTokenException(string message, System.Exception innerException) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSecurityTokenException.SamlSecurityTokenException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuring TokenValidationParameters for X509 Certificate JWT Binding in .NET\nDESCRIPTION: This code demonstrates how to configure TokenValidationParameters to enable binding between X.509 certificates used in TLS connections and JWT tokens. It sets up validation for the 'x5t#S256' claim to match against client TLS certificates.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.LoggingExtensions/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.Audience = \"https://localhost\";\n        options.Authority = \"https://localhost\";\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateIssuerSigningKey = true,\n            ValidateLifetime = true,\n            // ... other parameters ...\n                        \n            // Validate that the certificate bound to the token matches the\n            // client certificate used for TLS connection\n            ValidateX5t256Claim = true\n        };\n        \n        // Configure client TLS certificate binding\n        options.BackchannelHttpHandler = new HttpClientHandler\n        {\n            // ... TLS configuration ...\n        };\n    });\n```\n\n----------------------------------------\n\nTITLE: InMemoryCryptoProviderCache Implementation in C#\nDESCRIPTION: InMemoryCryptoProviderCache provides an in-memory implementation of CryptoProviderCache. It manages caching of cryptographic providers and supports configuration through CryptoProviderCacheOptions including size limits.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.InMemoryCryptoProviderCache\nMicrosoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.Dispose() -> void\nMicrosoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.InMemoryCryptoProviderCache() -> void\nMicrosoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.InMemoryCryptoProviderCache(Microsoft.IdentityModel.Tokens.CryptoProviderCacheOptions cryptoProviderCacheOptions) -> void\n```\n\n----------------------------------------\n\nTITLE: JWT Token String Parsing Extension Method in C#\nDESCRIPTION: Extension method that checks if a token string is a valid JWT format. It verifies the token has three segments separated by periods and that the two header segments are valid Base64Url encoded JSON data.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Determines whether a token string is a well formed Json Web Token (JWT).\n/// </summary>\n/// <param name=\"token\">String that should contain a token.</param>\n/// <param name=\"exception\">An exception that may be thrown.</param>\n/// <returns>'true' if the token is JSON Web Token, 'false' otherwise.</returns>\npublic static bool IsValidJwtToken(this string token, out Exception exception)\n{\n    exception = null;\n    if (string.IsNullOrWhiteSpace(token))\n        return false;\n\n    if (!token.Contains('.'))\n        return false;\n\n    try\n    {\n        var parts = token.Split('.');\n        if (parts.Length != 3)\n        {\n            // some products like CosmosDB and ServiceFabric put an empty 4th segment on the token when they sign JWTs.\n            if (parts.Length < 3)\n                return false;\n        }\n\n        if (!Base64UrlEncoder.TryDecode(parts[0], out byte[] headerBytes))\n            return false;\n\n        if (!Base64UrlEncoder.TryDecode(parts[1], out byte[] payloadBytes))\n            return false;\n\n        var header = Encoding.UTF8.GetString(headerBytes);\n        var payload = Encoding.UTF8.GetString(payloadBytes);\n        JsonDocument.Parse(header);\n        JsonDocument.Parse(payload);\n\n        return true;\n    }\n    catch (Exception ex)\n    {\n        exception = ex;\n        return false;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Claims Identity from JWT\nDESCRIPTION: Virtual method for creating a ClaimsIdentity object from a JsonWebToken using validation parameters\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentity(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters) -> System.Security.Claims.ClaimsIdentity\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Algorithm Support\nDESCRIPTION: Methods for determining algorithm support and compatibility with different security key types. These utilities help validate whether specific algorithms can be used with given keys and provide information about hash algorithms, digest methods, and key validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.SupportedAlgorithms.GetDigestFromSignatureAlgorithm(string algorithm) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.SupportedAlgorithms.IsSupportedAlgorithm(string algorithm, Microsoft.IdentityModel.Tokens.SecurityKey key) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.SupportedAlgorithms.GetHashAlgorithmName(string algorithm) -> System.Security.Cryptography.HashAlgorithmName\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Provider Methods in C#\nDESCRIPTION: Virtual methods for creating and managing various cryptographic providers, including signature providers, hash algorithms, and key wrap providers.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateAuthenticatedEncryptionProvider(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> Microsoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> Microsoft.IdentityModel.Tokens.SignatureProvider\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForSigning(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool cacheProvider) -> Microsoft.IdentityModel.Tokens.SignatureProvider\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForVerifying(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> Microsoft.IdentityModel.Tokens.SignatureProvider\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateForVerifying(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool cacheProvider) -> Microsoft.IdentityModel.Tokens.SignatureProvider\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(string algorithm) -> System.Security.Cryptography.HashAlgorithm\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateHashAlgorithm(System.Security.Cryptography.HashAlgorithmName algorithm) -> System.Security.Cryptography.HashAlgorithm\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateKeyedHashAlgorithm(byte[] keyBytes, string algorithm) -> System.Security.Cryptography.KeyedHashAlgorithm\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateKeyWrapProvider(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> Microsoft.IdentityModel.Tokens.KeyWrapProvider\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.CreateKeyWrapProviderForUnwrap(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> Microsoft.IdentityModel.Tokens.KeyWrapProvider\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.IsSupportedAlgorithm(string algorithm) -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating a JsonWebKey from Crv, D, X, Y parameters\nDESCRIPTION: Initializes a JsonWebKey by setting the Curve type and parameters D, X, and Y. This code demonstrates how to create an elliptic curve JsonWebKey with specific parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar jsonWebKey = new JsonWebKey\n{\n    Crv = JsonWebKeyECTypes.P256,\n    D = \"D\",\n    X = \"X\",\n    Y = \"Y\"\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring Confirmation Claim (CNF) Class in C#\nDESCRIPTION: Definition of a class for handling confirmation claims (cnf) in JWTs for proof-of-possession tokens. This class supports various confirmation methods including JSON Web Keys, JWK Set URLs, and key identifiers.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Cnf\nMicrosoft.IdentityModel.Tokens.Cnf.Cnf() -> void\nMicrosoft.IdentityModel.Tokens.Cnf.Cnf(string json) -> void\nMicrosoft.IdentityModel.Tokens.Cnf.Jku.get -> string\nMicrosoft.IdentityModel.Tokens.Cnf.JsonWebKey.get -> Microsoft.IdentityModel.Tokens.JsonWebKey\nMicrosoft.IdentityModel.Tokens.Cnf.Jwe.get -> string\nMicrosoft.IdentityModel.Tokens.Cnf.Kid.get -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Serialization and Deserialization Methods in C#\nDESCRIPTION: This snippet shows the implementation of static methods for serializing and deserializing JWT headers and payloads. These methods handle Base64Url encoding and JSON conversion.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nstatic System.IdentityModel.Tokens.Jwt.JwtHeader.Base64UrlDeserialize(string base64UrlEncodedJsonString) -> System.IdentityModel.Tokens.Jwt.JwtHeader\nstatic System.IdentityModel.Tokens.Jwt.JwtPayload.Base64UrlDeserialize(string base64UrlEncodedJsonString) -> System.IdentityModel.Tokens.Jwt.JwtPayload\nstatic System.IdentityModel.Tokens.Jwt.JwtPayload.Deserialize(string jsonString) -> System.IdentityModel.Tokens.Jwt.JwtPayload\nstatic System.IdentityModel.Tokens.Jwt.JwtSecurityTokenConverter.Convert(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken token) -> System.IdentityModel.Tokens.Jwt.JwtSecurityToken\n```\n\n----------------------------------------\n\nTITLE: Token Replay Cache Interface in C#\nDESCRIPTION: ITokenReplayCache defines methods for checking and preventing token replay attacks. It allows tracking used tokens and their expiration to prevent reuse of previously processed tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ITokenReplayCache\nMicrosoft.IdentityModel.Tokens.ITokenReplayCache.TryAdd(string securityToken, System.DateTime expiresOn) -> bool\nMicrosoft.IdentityModel.Tokens.ITokenReplayCache.TryFind(string securityToken) -> bool\n```\n\n----------------------------------------\n\nTITLE: DSigSerializer Class Implementation in C#\nDESCRIPTION: Implementation of the DSigSerializer class for serializing and deserializing XML Digital Signature elements. This class manages the conversion between object model and XML representation of digital signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.DSigSerializer\nMicrosoft.IdentityModel.Xml.DSigSerializer.DSigSerializer() -> void\nMicrosoft.IdentityModel.Xml.DSigSerializer.MaximumReferenceTransforms.get -> int\nMicrosoft.IdentityModel.Xml.DSigSerializer.MaximumReferenceTransforms.set -> void\nMicrosoft.IdentityModel.Xml.DSigSerializer.Prefix.get -> string\nMicrosoft.IdentityModel.Xml.DSigSerializer.Prefix.set -> void\nMicrosoft.IdentityModel.Xml.DSigSerializer.TransformFactory.get -> Microsoft.IdentityModel.Xml.TransformFactory\nMicrosoft.IdentityModel.Xml.DSigSerializer.TransformFactory.set -> void\n```\n\n----------------------------------------\n\nTITLE: Creating AadIssuerValidator Instances\nDESCRIPTION: Static factory methods for creating AadIssuerValidator instances. These methods accept an Azure AD authority URL and optionally a custom HttpClient for making validation requests.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Validators.AadIssuerValidator.GetAadIssuerValidator(string aadAuthority) -> Microsoft.IdentityModel.Validators.AadIssuerValidator\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Validators.AadIssuerValidator.GetAadIssuerValidator(string aadAuthority, System.Net.Http.HttpClient httpClient) -> Microsoft.IdentityModel.Validators.AadIssuerValidator\n```\n\n----------------------------------------\n\nTITLE: Base64URL Encoding and Decoding Methods in C#\nDESCRIPTION: A collection of static methods for encoding and decoding data using Base64URL format. These methods handle various input types (strings, spans) and provide flexibility for custom operations on decoded data through delegate functions.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.Decode(System.ReadOnlySpan<char> strSpan) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.Decode(System.ReadOnlySpan<char> strSpan, System.Span<byte> output) -> int\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoding.Decode(string input, int offset, int length) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoding.Decode(string inputString) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoding.Encode(byte[] bytes) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoding.Encode(byte[] input, int offset, int length) -> string\n```\n\n----------------------------------------\n\nTITLE: JsonWebKey Serialization and Conversion\nDESCRIPTION: Static methods for serializing, deserializing, and converting JsonWebKey objects to various security key types such as RSA, ECDSA, X509, and symmetric keys. These utilities facilitate working with standardized key formats in token validation scenarios.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonWebKeySerializer.Read(string json) -> Microsoft.IdentityModel.Tokens.JsonWebKey\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonWebKeySerializer.Write(Microsoft.IdentityModel.Tokens.JsonWebKey jsonWebKey) -> string\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.TryConvertToSecurityKey(Microsoft.IdentityModel.Tokens.JsonWebKey webKey, out Microsoft.IdentityModel.Tokens.SecurityKey key) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing SymmetricSignatureProvider Methods in C#\nDESCRIPTION: These snippets override methods in the SymmetricSignatureProvider class, including Dispose, Sign, and Verify operations for symmetric signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Dispose(bool disposing) -> void\noverride Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Sign(byte[] input) -> byte[]\noverride Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Sign(byte[] input, int offset, int count) -> byte[]\noverride Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Verify(byte[] input, byte[] signature) -> bool\noverride Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Verify(byte[] input, int inputOffset, int inputLength, byte[] signature, int signatureOffset, int signatureLength) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Saml2Assertion Class in C#\nDESCRIPTION: This snippet defines the Saml2Assertion class, which represents a SAML2 assertion. It includes properties for various assertion components such as Issuer, Subject, Conditions, and Statements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Advice.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2Advice\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Advice.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.CanonicalString.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Conditions.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2Conditions\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Conditions.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Id.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2Id\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Id.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.InclusiveNamespacesPrefixList.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.InclusiveNamespacesPrefixList.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.IssueInstant.get -> System.DateTime\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.IssueInstant.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Issuer.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2NameIdentifier\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Issuer.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Saml2Assertion(Microsoft.IdentityModel.Tokens.Saml2.Saml2NameIdentifier issuer) -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Signature.get -> Microsoft.IdentityModel.Xml.Signature\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Signature.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.SigningCredentials.get -> Microsoft.IdentityModel.Tokens.SigningCredentials\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.SigningCredentials.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Statements.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml2.Saml2Statement>\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Subject.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2Subject\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Subject.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Assertion.Version.get -> string\n```\n\n----------------------------------------\n\nTITLE: Writing JWS Payload in C#\nDESCRIPTION: This method writes the JWS payload using a Utf8JsonWriter and a SecurityTokenDescriptor. It includes options for setting default times and specifying the token lifetime.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.WriteJwsPayload(ref System.Text.Json.Utf8JsonWriter writer, Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor, bool setDefaultTimesOnTokenCreation, int tokenLifetimeInMinutes) -> void\n```\n\n----------------------------------------\n\nTITLE: EnvelopedSignatureWriter Class Implementation in C#\nDESCRIPTION: Implementation of the EnvelopedSignatureWriter class for writing XML with enveloped signatures. This class handles generating XML with embedded digital signatures using the provided signing credentials.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureWriter\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureWriter.DSigSerializer.get -> Microsoft.IdentityModel.Xml.DSigSerializer\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureWriter.DSigSerializer.set -> void\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureWriter.EnvelopedSignatureWriter(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, string referenceId) -> void\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureWriter.EnvelopedSignatureWriter(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, string referenceId, string inclusivePrefixList) -> void\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureWriter.WriteSignature() -> void\n```\n\n----------------------------------------\n\nTITLE: JwtHeaderParameterNames Constants in C#\nDESCRIPTION: Constants representing standard JWT header parameter names as defined in the JWT specification. These values are used when creating, parsing, or validating JWT headers.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Alg = \"alg\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Apu = \"apu\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Apv = \"apv\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Cty = \"cty\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Enc = \"enc\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Epk = \"epk\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.IV = \"iv\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Jku = \"jku\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Jwk = \"jwk\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Kid = \"kid\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Typ = \"typ\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5c = \"x5c\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5t = \"x5t\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.X5u = \"x5u\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JwtHeaderParameterNames.Zip = \"zip\" -> string\n```\n\n----------------------------------------\n\nTITLE: AES Encryption Classes in C#\nDESCRIPTION: Classes providing AES encryption capabilities, particularly AesGcm for authenticated encryption and decryption operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AesAead\nMicrosoft.IdentityModel.Tokens.AesBCryptModes\nMicrosoft.IdentityModel.Tokens.AesGcm\nMicrosoft.IdentityModel.Tokens.AesGcm.AesGcm(byte[] key) -> void\nMicrosoft.IdentityModel.Tokens.AesGcm.Decrypt(byte[] nonce, byte[] ciphertext, byte[] tag, byte[] plaintext, byte[] associatedData = null) -> void\nMicrosoft.IdentityModel.Tokens.AesGcm.Dispose() -> void\nMicrosoft.IdentityModel.Tokens.AesGcm.Encrypt(byte[] nonce, byte[] plaintext, byte[] ciphertext, byte[] tag, byte[] associatedData = null) -> void\n```\n\n----------------------------------------\n\nTITLE: ValidationParameters Class API in Microsoft.IdentityModel.Tokens\nDESCRIPTION: Defines the ValidationParameters class which contains numerous properties and delegates for configuring token validation behavior. It provides extensive customization options for validating tokens including audience, issuer, lifetime, signature, and more.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ValidationParameters\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ActorValidationParameters.get -> Microsoft.IdentityModel.Tokens.ValidationParameters\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ActorValidationParameters.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.AlgorithmValidator.get -> Microsoft.IdentityModel.Tokens.AlgorithmValidationDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.AlgorithmValidator.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.AudienceValidator.get -> Microsoft.IdentityModel.Tokens.AudienceValidationDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.AudienceValidator.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.AuthenticationType.get -> string\nMicrosoft.IdentityModel.Tokens.ValidationParameters.AuthenticationType.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ClockSkew.get -> System.TimeSpan\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ClockSkew.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ConfigurationManager.get -> Microsoft.IdentityModel.Tokens.BaseConfigurationManager\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ConfigurationManager.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.CryptoProviderFactory.get -> Microsoft.IdentityModel.Tokens.CryptoProviderFactory\nMicrosoft.IdentityModel.Tokens.ValidationParameters.CryptoProviderFactory.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.DebugId.get -> string\nMicrosoft.IdentityModel.Tokens.ValidationParameters.DebugId.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IgnoreTrailingSlashWhenValidatingAudience.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IgnoreTrailingSlashWhenValidatingAudience.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IncludeTokenOnFailedValidation.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IncludeTokenOnFailedValidation.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.InstancePropertyBag.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IsClone.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IsClone.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerSigningKeyResolver.get -> Microsoft.IdentityModel.Tokens.IssuerSigningKeyResolverDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerSigningKeyResolver.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerSigningKeys.get -> System.Collections.Generic.IList<Microsoft.IdentityModel.Tokens.SecurityKey>\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerSigningKeys.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerSigningKeyValidator.get -> Microsoft.IdentityModel.Tokens.IssuerSigningKeyValidationDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerSigningKeyValidator.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerValidatorAsync.get -> Microsoft.IdentityModel.Tokens.IssuerValidationDelegateAsync\nMicrosoft.IdentityModel.Tokens.ValidationParameters.IssuerValidatorAsync.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.LifetimeValidator.get -> Microsoft.IdentityModel.Tokens.LifetimeValidationDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.LifetimeValidator.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.LogTokenId.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.LogTokenId.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.NameClaimType.get -> string\nMicrosoft.IdentityModel.Tokens.ValidationParameters.NameClaimType.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.NameClaimTypeRetriever.get -> System.Func<Microsoft.IdentityModel.Tokens.SecurityToken, string, string>\nMicrosoft.IdentityModel.Tokens.ValidationParameters.NameClaimTypeRetriever.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.PropertyBag.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Tokens.ValidationParameters.RefreshBeforeValidation.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.RefreshBeforeValidation.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.RoleClaimType.get -> string\nMicrosoft.IdentityModel.Tokens.ValidationParameters.RoleClaimType.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.RoleClaimTypeRetriever.get -> System.Func<Microsoft.IdentityModel.Tokens.SecurityToken, string, string>\nMicrosoft.IdentityModel.Tokens.ValidationParameters.RoleClaimTypeRetriever.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.SaveSigninToken.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.SaveSigninToken.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.SignatureValidator.get -> Microsoft.IdentityModel.Tokens.SignatureValidationDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.SignatureValidator.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TimeProvider.get -> System.TimeProvider\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TimeProvider.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenDecryptionKeyResolver.get -> Microsoft.IdentityModel.Tokens.DecryptionKeyResolverDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenDecryptionKeyResolver.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenDecryptionKeys.get -> System.Collections.Generic.IList<Microsoft.IdentityModel.Tokens.SecurityKey>\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenDecryptionKeys.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenReplayCache.get -> Microsoft.IdentityModel.Tokens.ITokenReplayCache\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenReplayCache.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenReplayValidator.get -> Microsoft.IdentityModel.Tokens.TokenReplayValidationDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenReplayValidator.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenTypeValidator.get -> Microsoft.IdentityModel.Tokens.TokenTypeValidationDelegate\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TokenTypeValidator.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TryAllDecryptionKeys.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TryAllDecryptionKeys.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TryAllIssuerSigningKeys.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.TryAllIssuerSigningKeys.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ValidAlgorithms.get -> System.Collections.Generic.IList<string>\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ValidAlgorithms.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ValidateActor.get -> bool\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ValidateActor.set -> void\nMicrosoft.IdentityModel.Tokens.ValidationParameters.ValidateSignatureLast.get -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining RSA Security Algorithm Constants in C#\nDESCRIPTION: Constants representing RSA (Rivest-Shamir-Adleman) security algorithms used for token signing and validation. These include both standard RSA and RSA-SSA-PSS variants with different hash sizes, providing both short form identifiers (like 'RS256') and full URI identifiers.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaOAEP = \"RSA-OAEP\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaOaepKeyWrap = \"http://www.w3.org/2001/04/xmlenc#rsa-oaep\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaPKCS1 = \"RSA1_5\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256 = \"RS256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha256Signature = \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha384 = \"RS384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha384Signature = \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha512 = \"RS512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSha512Signature = \"http://www.w3.org/2001/04/xmldsig-more#rsa-sha512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSsaPssSha256 = \"PS256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSsaPssSha256Signature = \"http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSsaPssSha384 = \"PS384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSsaPssSha384Signature = \"http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSsaPssSha512 = \"PS512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaSsaPssSha512Signature = \"http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.RsaV15KeyWrap = \"http://www.w3.org/2001/04/xmlenc#rsa-1_5\" -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing SymmetricSecurityKey Methods in C#\nDESCRIPTION: These snippets override methods in the SymmetricSecurityKey class, including ComputeJwkThumbprint and KeySize operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SymmetricSecurityKey.CanComputeJwkThumbprint() -> bool\noverride Microsoft.IdentityModel.Tokens.SymmetricSecurityKey.ComputeJwkThumbprint() -> byte[]\noverride Microsoft.IdentityModel.Tokens.SymmetricSecurityKey.KeySize.get -> int\n```\n\n----------------------------------------\n\nTITLE: TokenValidationParameters Extensions for AAD Validation\nDESCRIPTION: Extension methods for TokenValidationParameters to enable Azure AD-specific validation features. These methods configure validation parameters for AAD signing key and Entra ID cloud instance validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Validators.AadTokenValidationParametersExtension.EnableAadSigningKeyIssuerValidation(this Microsoft.IdentityModel.Tokens.TokenValidationParameters tokenValidationParameters) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Validators.AadTokenValidationParametersExtension.EnableEntraIdSigningKeyCloudInstanceValidation(this Microsoft.IdentityModel.Tokens.TokenValidationParameters tokenValidationParameters) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Asymmetric Security Key and Signature Provider Classes in C#\nDESCRIPTION: Definition of classes for handling asymmetric cryptography operations in token signing and validation. These classes provide functionality for working with asymmetric keys and signature generation/verification with specified minimum key size requirements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AsymmetricSecurityKey\nMicrosoft.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey() -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider.AsymmetricSignatureProvider(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider.AsymmetricSignatureProvider(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool willCreateSignatures) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider.MinimumAsymmetricKeySizeInBitsForSigningMap.get -> System.Collections.Generic.IReadOnlyDictionary<string, int>\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider.MinimumAsymmetricKeySizeInBitsForVerifyingMap.get -> System.Collections.Generic.IReadOnlyDictionary<string, int>\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestHandler Class in C#\nDESCRIPTION: Class for handling signed HTTP requests, including creation and validation methods.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.CreateSignedHttpRequest(Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor signedHttpRequestDescriptor) -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.CreateSignedHttpRequest(Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor signedHttpRequestDescriptor, Microsoft.IdentityModel.Tokens.CallContext callContext) -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.SignedHttpRequestHandler() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.ValidateSignedHttpRequestAsync(Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext signedHttpRequestValidationContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult>\n```\n\n----------------------------------------\n\nTITLE: Writing SAML Elements in C#\nDESCRIPTION: This snippet shows method signatures for writing various SAML elements to XML. These methods are part of the SamlSerializer class and use XmlWriter to output SAML data.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.WriteAction(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml.SamlAction action) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.WriteAdvice(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml.SamlAdvice advice) -> void\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.WriteAssertion(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Tokens.Saml.SamlAssertion assertion) -> void\n// ... (more Write methods)\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Provider and Certificate Handling\nDESCRIPTION: Methods for handling cryptographic providers, certificates, and algorithm operations. These utilities support the creation and management of cryptographic contexts needed for token signing and validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.CertificateHelper.LoadX509Certificate(string data) -> System.Security.Cryptography.X509Certificates.X509Certificate2\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Cng.BCryptOpenAlgorithmProvider(string pszAlgId, string pszImplementation, Microsoft.IdentityModel.Tokens.Cng.OpenAlgorithmProviderFlags dwFlags) -> Microsoft.IdentityModel.Tokens.SafeAlgorithmHandle\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Cng.SetCipherMode(this Microsoft.IdentityModel.Tokens.SafeAlgorithmHandle hAlg, string cipherMode) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ShouldCacheSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.CryptoThrowHelper.ToCryptographicException(this int hr) -> System.Security.Cryptography.CryptographicException\n```\n\n----------------------------------------\n\nTITLE: Asymmetric Cryptography Adapter in C#\nDESCRIPTION: Adapter class for asymmetric cryptographic operations including signing, verification, encryption, and decryption.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.AsymmetricAdapter(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool requirePrivateKey) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.AsymmetricAdapter(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, System.Security.Cryptography.HashAlgorithm hashAlgorithm, bool requirePrivateKey) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.AsymmetricAdapter(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, System.Security.Cryptography.HashAlgorithm hashAlgorithm, System.Security.Cryptography.HashAlgorithmName hashAlgorithmName, bool requirePrivateKey) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.Decrypt(byte[] data) -> byte[]\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.Dispose() -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.Encrypt(byte[] data) -> byte[]\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.Sign(byte[] bytes) -> byte[]\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.SignUsingOffset(byte[] bytes, int offset, int count) -> byte[]\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.SignUsingSpan(System.ReadOnlySpan<byte> data, System.Span<byte> destination, out int bytesWritten) -> bool\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.SignUsingSpanECDsa(System.ReadOnlySpan<byte> data, System.Span<byte> destination, out int bytesWritten) -> bool\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.SignUsingSpanRsa(System.ReadOnlySpan<byte> data, System.Span<byte> destination, out int bytesWritten) -> bool\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.Verify(byte[] bytes, byte[] signature) -> bool\nMicrosoft.IdentityModel.Tokens.AsymmetricAdapter.VerifyUsingOffset(byte[] bytes, int offset, int count, byte[] signature) -> bool\n```\n\n----------------------------------------\n\nTITLE: CryptoProviderFactory Virtual Methods in C#\nDESCRIPTION: Virtual methods from the CryptoProviderFactory class for handling cryptographic operations including algorithm support verification and resource management.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.IsSupportedAlgorithm(string algorithm, Microsoft.IdentityModel.Tokens.SecurityKey key) -> bool\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseHashAlgorithm(System.Security.Cryptography.HashAlgorithm hashAlgorithm) -> void\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseKeyWrapProvider(Microsoft.IdentityModel.Tokens.KeyWrapProvider provider) -> void\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseRsaKeyWrapProvider(Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider provider) -> void\nvirtual Microsoft.IdentityModel.Tokens.CryptoProviderFactory.ReleaseSignatureProvider(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken Property Overrides in C#\nDESCRIPTION: Override implementations for various properties in the JsonWebToken class, providing access to token attributes like issuer, ID, signing key, validity period, and string representation methods.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.Id.get -> string\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.Issuer.get -> string\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.SecurityKey.get -> Microsoft.IdentityModel.Tokens.SecurityKey\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.SigningKey.get -> Microsoft.IdentityModel.Tokens.SecurityKey\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.SigningKey.set -> void\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ToString() -> string\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.UnsafeToString() -> string\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ValidFrom.get -> System.DateTime\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ValidTo.get -> System.DateTime\n```\n\n----------------------------------------\n\nTITLE: SAML Assertion Class Definition in C#\nDESCRIPTION: The SamlAssertion class is a core component that represents a complete SAML assertion with all its elements including issuer information, conditions, statements, and digital signature details.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Advice.get -> Microsoft.IdentityModel.Tokens.Saml.SamlAdvice\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Advice.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.AssertionId.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.AssertionId.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.CanonicalString.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Conditions.get -> Microsoft.IdentityModel.Tokens.Saml.SamlConditions\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Conditions.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.InclusiveNamespacesPrefixList.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.InclusiveNamespacesPrefixList.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.IssueInstant.get -> System.DateTime\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.IssueInstant.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Issuer.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Issuer.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.MajorVersion.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.MinorVersion.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.SamlAssertion(string assertionId, string issuer, System.DateTime issueInstant, Microsoft.IdentityModel.Tokens.Saml.SamlConditions samlConditions, Microsoft.IdentityModel.Tokens.Saml.SamlAdvice samlAdvice, System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlStatement> samlStatements) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Signature.get -> Microsoft.IdentityModel.Xml.Signature\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Signature.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.SigningCredentials.get -> Microsoft.IdentityModel.Tokens.SigningCredentials\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.SigningCredentials.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.Statements.get -> System.Collections.Generic.IList<Microsoft.IdentityModel.Tokens.Saml.SamlStatement>\n```\n\n----------------------------------------\n\nTITLE: JWT Error Message Constants in C#\nDESCRIPTION: Constants defining error messages for JWT processing, including format validation, decoding errors, and token structure validation errors. These messages are used in exception handling and logging throughout the library.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14000 = \"IDX14000: Signature validation of this JWT is not supported for: Algorithm: '{0}', SecurityKey: '{1}'.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14100 = \"IDX14100: JWT is not well formed, there are no dots (.).\\nThe token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EncodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14101 = \"IDX14101: Unable to decode the payload '{0}' as Base64Url encoded string.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14102 = \"IDX14102: Unable to decode the header '{0}' as Base64Url encoded string.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14103 = \"IDX14103: Failed to create the token encryption provider.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14107 = \"IDX14107: Token string does not match the token formats: JWE (header.encryptedKey.iv.ciphertext.tag) or JWS (header.payload.signature)\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14112 = \"IDX14112: Only a single 'Actor' is supported. Found second claim of type: '{0}'\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14113 = \"IDX14113: A duplicate value for 'SecurityTokenDescriptor.{0}' exists in 'SecurityTokenDescriptor.Claims'. \\nThe value of 'SecurityTokenDescriptor.{0}' is used.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14114 = \"IDX14114: Both '{0}.{1}' and '{0}.{2}' are null or empty.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14116 = \"IDX14116: '{0}' cannot contain the following claims: '{1}'. These values are added by default (if necessary) during security token creation.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14120 = \"IDX14120: JWT is not well formed, there is only one dot (.).\\nThe token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EncodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14121 = \"IDX14121: JWT is not a well formed JWE, there must be four dots (.).\\nThe token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EncodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14122 = \"IDX14122: JWT is not a well formed JWE, there are more than four dots (.) a JWE can have at most 4 dots.\\nThe token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EncodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14200 = \"IDX14200: Creating raw signature using the signature credentials.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14201 = \"IDX14201: Creating raw signature using the signature credentials. Caching SignatureProvider: '{0}'.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14304 = \"IDX14304: Claim with name '{0}' does not exist in the JsonClaimSet.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14305 = \"IDX14305: Unable to convert the '{0}' json property to the following type: '{1}'. Property type was: '{2}'. Value: '{3}'.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14306 = \"IDX14306: JWE Ciphertext cannot be an empty string.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14307 = \"IDX14307: JWE header is missing.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14308 = \"IDX14308: JWE initialization vector is missing.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14309 = \"IDX14309: Unable to decode the initialization vector as Base64Url encoded string.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14310 = \"IDX14310: JWE authentication tag is missing.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14311 = \"IDX14311: Unable to decode the authentication tag as a Base64Url encoded string.\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.LogMessages.IDX14312 = \"IDX14312: Unable to decode the cipher text as a Base64Url encoded string.\" -> string\n```\n\n----------------------------------------\n\nTITLE: DeflateCompressionProvider Implementation in C#\nDESCRIPTION: DeflateCompressionProvider is an implementation of ICompressionProvider that uses the DEFLATE compression algorithm. It supports configurable compression levels and includes a maximum size limit for decompression to prevent potential attacks.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.Algorithm.get -> string\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.Compress(byte[] value) -> byte[]\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.CompressionLevel.get -> System.IO.Compression.CompressionLevel\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.Decompress(byte[] value) -> byte[]\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.DeflateCompressionProvider() -> void\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.DeflateCompressionProvider(System.IO.Compression.CompressionLevel compressionLevel) -> void\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.IsSupportedAlgorithm(string algorithm) -> bool\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.MaximumDeflateSize.get -> int\nMicrosoft.IdentityModel.Tokens.DeflateCompressionProvider.MaximumDeflateSize.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing EpochTime Static Methods in C#\nDESCRIPTION: These snippets define static methods in the EpochTime class for converting between DateTime and Unix epoch time representations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_41\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.EpochTime.DateTime(long secondsSinceUnixEpoch) -> System.DateTime\nstatic Microsoft.IdentityModel.Tokens.EpochTime.GetIntDate(System.DateTime datetime) -> long\n```\n\n----------------------------------------\n\nTITLE: Implementing RSA Cryptographic Service Provider Proxy in C#\nDESCRIPTION: Proxy class that wraps RSACryptoServiceProvider to provide RSA cryptographic operations including encryption, decryption, signing and signature verification.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Decrypt(byte[] input, bool fOAEP) -> byte[]\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Encrypt(byte[] input, bool fOAEP) -> byte[]\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.RSACryptoServiceProviderProxy(System.Security.Cryptography.RSACryptoServiceProvider rsa) -> void\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.SignData(byte[] input, object hash) -> byte[]\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.VerifyData(byte[] input, object hash, byte[] signature) -> bool\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.VerifyDataWithLength(byte[] input, int offset, int length, object hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithmName, byte[] signature) -> bool\n```\n\n----------------------------------------\n\nTITLE: Error Handling and Validation\nDESCRIPTION: Methods for creating standardized error details and validation errors in token processing scenarios. These utilities help generate consistent error information when validating tokens and signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.MessageDetail.NullParameter(string parameterName) -> Microsoft.IdentityModel.Tokens.MessageDetail\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.SignatureValidationError.NullParameter(string parameterName, System.Diagnostics.StackFrame stackFrame) -> Microsoft.IdentityModel.Tokens.SignatureValidationError\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.TokenReplayValidationError.NullParameter(string parameterName, System.Diagnostics.StackFrame stackFrame) -> Microsoft.IdentityModel.Tokens.TokenReplayValidationError\n```\n\n----------------------------------------\n\nTITLE: Defining SAML 2.0 Name Identifier Format Constants in C#\nDESCRIPTION: Declaration of constant string values for SAML 2.0 name identifier formats. These constants define the standard URNs for various ways to identify subjects, including email, encrypted, entity, Kerberos, persistent, and transient formats.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.EmailAddressString = \"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.EncryptedString = \"urn:oasis:names:tc:SAML:2.0:nameid-format:encrypted\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.EntityString = \"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.KerberosString = \"urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.PersistentString = \"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.TransientString = \"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.UnspecifiedString = \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.WindowsDomainQualifiedNameString = \"urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.NameIdentifierFormats.X509SubjectNameString = \"urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Header Parameter Names in C#\nDESCRIPTION: This snippet defines constant values for JWT header parameter names. These constants are used when working with JWT headers to ensure consistency and prevent typos.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Alg = \"alg\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Apu = \"apu\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Apv = \"apv\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Cty = \"cty\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Enc = \"enc\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Epk = \"epk\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.IV = \"iv\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Jku = \"jku\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Jwk = \"jwk\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Kid = \"kid\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Typ = \"typ\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.X5c = \"x5c\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.X5t = \"x5t\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.X5u = \"x5u\" -> string\nconst System.IdentityModel.Tokens.Jwt.JwtHeaderParameterNames.Zip = \"zip\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestCreationParameters Class in C#\nDESCRIPTION: Class for specifying parameters for creating a signed HTTP request, including flags for various claim types and time adjustment.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateB.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateB.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateCnf.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateCnf.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateH.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateH.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateM.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateM.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateNonce.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateNonce.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateP.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateP.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateQ.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateQ.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateTs.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateTs.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateU.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.CreateU.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.SignedHttpRequestCreationParameters() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.TimeAdjustment.get -> System.TimeSpan\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.TimeAdjustment.set -> void\n```\n\n----------------------------------------\n\nTITLE: Security Token and Token Handler Virtual Methods in C#\nDESCRIPTION: Virtual methods for SecurityToken and SecurityTokenHandler classes for token operations including reading, writing, and validating tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_51\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.SecurityToken.UnsafeToString() -> string\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(string tokenString) -> bool\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.Xml.XmlReader reader) -> bool\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.CanValidateToken.get -> bool\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.CanWriteToken.get -> bool\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(Microsoft.IdentityModel.Tokens.SecurityToken token, bool attached) -> Microsoft.IdentityModel.Tokens.SecurityKeyIdentifierClause\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.CreateToken(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> Microsoft.IdentityModel.Tokens.SecurityToken\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Tokens.SecurityToken\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(string securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, out Microsoft.IdentityModel.Tokens.SecurityToken validatedToken) -> System.Security.Claims.ClaimsPrincipal\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.ValidateToken(System.Xml.XmlReader reader, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters, out Microsoft.IdentityModel.Tokens.SecurityToken validatedToken) -> System.Security.Claims.ClaimsPrincipal\nvirtual Microsoft.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(Microsoft.IdentityModel.Tokens.SecurityToken token) -> string\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Methods for Claims Management in C#\nDESCRIPTION: Methods for managing claims in the JwtPayload class. These methods allow adding dictionary claims, getting typed claims (int, long, string, lists), and adding standard JWT claims with appropriate priority.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.IdentityModel.Tokens.Jwt.JwtPayload.AddDictionaryClaims(System.Collections.Generic.IDictionary<string, object> claimsCollection) -> void\nSystem.IdentityModel.Tokens.Jwt.JwtPayload.AddFirstPriorityClaims(string issuer, string audience, System.Collections.Generic.IList<string> audiences, System.DateTime? notBefore, System.DateTime? expires, System.DateTime? issuedAt) -> void\nSystem.IdentityModel.Tokens.Jwt.JwtPayload.AddFirstPriorityClaims(string issuer, string audience, System.DateTime? notBefore, System.DateTime? expires, System.DateTime? issuedAt) -> void\nSystem.IdentityModel.Tokens.Jwt.JwtPayload.GetIntClaim(string claimType) -> int?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload.GetListOfClaims(string claimType) -> System.Collections.Generic.List<string>\nSystem.IdentityModel.Tokens.Jwt.JwtPayload.GetLongClaim(string claimType) -> long?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload.GetStandardClaim(string claimType) -> string\n```\n\n----------------------------------------\n\nTITLE: SAML2 Serializer Implementation\nDESCRIPTION: Implementation of SAML2 serializer for converting SAML2 tokens to and from XML format with digital signature support.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Serializer\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Serializer.DSigSerializer.get -> Microsoft.IdentityModel.Xml.DSigSerializer\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Serializer.DSigSerializer.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Serializer.Prefix.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Serializer.Prefix.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Serializer.Saml2Serializer() -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Compression Algorithm and Provider Classes in C#\nDESCRIPTION: Definition of classes for token compression algorithms and providers. These classes handle the compression and decompression of tokens to reduce size while maintaining functionality.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.CompressionAlgorithms\nMicrosoft.IdentityModel.Tokens.CompressionAlgorithms.CompressionAlgorithms() -> void\nMicrosoft.IdentityModel.Tokens.CompressionProviderFactory\nMicrosoft.IdentityModel.Tokens.CompressionProviderFactory.CompressionProviderFactory() -> void\nMicrosoft.IdentityModel.Tokens.CompressionProviderFactory.CompressionProviderFactory(Microsoft.IdentityModel.Tokens.CompressionProviderFactory other) -> void\n```\n\n----------------------------------------\n\nTITLE: DelegatingXmlDictionaryReader Class Implementation in C#\nDESCRIPTION: Implementation of a delegating XmlDictionaryReader that wraps another XmlDictionaryReader. This class provides a way to intercept and modify XML reading operations while delegating most functionality to an inner reader.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.DelegatingXmlDictionaryReader() -> void\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.HasLineInfo() -> bool\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.InnerReader.get -> System.Xml.XmlDictionaryReader\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.InnerReader.set -> void\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.LineNumber.get -> int\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.LinePosition.get -> int\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryReader.UseInnerReader.get -> System.Xml.XmlDictionaryReader\n```\n\n----------------------------------------\n\nTITLE: Signature Provider Implementation Methods\nDESCRIPTION: Signature generation methods for asymmetric, symmetric, and base signature providers with span-based operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\noverride bool Sign(ReadOnlySpan<byte> input, Span<byte> signature, out int bytesWritten)\nvirtual bool Sign(ReadOnlySpan<byte> data, Span<byte> destination, out int bytesWritten)\n```\n\n----------------------------------------\n\nTITLE: Digital Signature Writing Methods in C#\nDESCRIPTION: Virtual methods for writing digital signature components to XML, including KeyInfo, Reference, Signature, and SignedInfo.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.WriteKeyInfo(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Xml.KeyInfo keyInfo) -> void\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.WriteReference(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Xml.Reference reference) -> void\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.WriteSignature(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Xml.Signature signature) -> void\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.WriteSignedInfo(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Xml.SignedInfo signedInfo) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Saml2Attribute Class in C#\nDESCRIPTION: This snippet defines the Saml2Attribute class, which represents a SAML2 attribute. It includes properties for the attribute's name, values, and other metadata.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.AttributeValueXsiType.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.AttributeValueXsiType.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.FriendlyName.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.FriendlyName.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.Name.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.Name.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.NameFormat.get -> System.Uri\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.NameFormat.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.OriginalIssuer.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.OriginalIssuer.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.Saml2Attribute(string name) -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.Saml2Attribute(string name, string value) -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.Saml2Attribute(string name, System.Collections.Generic.IEnumerable<string> values) -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2Attribute.Values.get -> System.Collections.Generic.ICollection<string>\n```\n\n----------------------------------------\n\nTITLE: Token Signature Validation Error Constants in C#\nDESCRIPTION: Constants for error messages related to signature validation failures in tokens, including scenarios for missing keys, failed algorithms, and exceptions during validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10512 = \"IDX10512: Signature validation failed. Token does not have KeyInfo. Keys tried: '{0}'.\\nExceptions caught:\\n '{1}'.\\ntoken: '{2}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10514 = \"IDX10514: Signature validation failed. Keys tried: '{0}'. \\nKeyInfo: '{1}'. \\nExceptions caught:\\n '{2}'.\\ntoken: '{3}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10517 = \"IDX10517: Signature validation failed. The token's kid is missing. Keys tried: '{0}'. Number of keys in TokenValidationParameters: '{1}'. \\nNumber of keys in Configuration: '{2}'. \\nExceptions caught:\\n '{3}'.\\ntoken: '{4}'. See https://aka.ms/IDX10503 for details.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10518 = \"IDX10518: Signature validation failed. Algorithm validation failed with error: '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10519 = \"IDX10519: Signature validation failed. The token's kid is missing and ValidationParameters.TryAllIssuerSigningKeys is set to false.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10520 = \"IDX10520: Signature validation failed. The key provided could not validate the signature. Key tried: '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10521 = \"IDX10521: Signature validation failed. An exception was thrown when trying to validate the signature. Key tried: '{0}'. Exception: '{1}'.\"\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken Class Properties and Methods in C#\nDESCRIPTION: Properties and methods of the JsonWebToken class for handling JWT token operations, including claims identity management, token parsing, and structure validation. These members provide functionality to work with different parts of JWT tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ActorClaimsIdentity.get -> System.Security.Claims.ClaimsIdentity\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ActorClaimsIdentity.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ActualIssuer.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ActualIssuer.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.AuthenticationTagBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.AuthenticationTagBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CipherTextBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CipherTextBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ClaimsIdentity.get -> System.Security.Claims.ClaimsIdentity\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ClaimsIdentity.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CreateClaimSet(System.ReadOnlySpan<char> strSpan, int startIndex, int length, bool createHeaderClaimSet) -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CreateHeaderClaimSet(byte[] bytes) -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CreateHeaderClaimSet(byte[] bytes, int length) -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CreateHeaderClaimSet(System.ReadOnlySpan<byte> byteSpan) -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CreatePayloadClaimSet(byte[] bytes, int length) -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.CreatePayloadClaimSet(System.ReadOnlySpan<byte> byteSpan) -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot1.get -> int\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot1.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlSecurityTokenHandler.ValidateTokenAsync Method\nDESCRIPTION: Method for validating SAML security tokens asynchronously with various parameters. It returns a ValidationResult object containing the validated token information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlSecurityTokenHandler.ValidateTokenAsync String Overload\nDESCRIPTION: Overloaded method for validating SAML security tokens provided as strings. It parses the string token and validates it according to the provided parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\n```\n\n----------------------------------------\n\nTITLE: Defining HMAC Security Algorithm Constants in C#\nDESCRIPTION: Constants representing HMAC (Hash-based Message Authentication Code) security algorithms used for token signing and validation. These constants define both the short form identifiers (like 'HS256') and the full URI identifiers used in XML.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha256Signature = \"http://www.w3.org/2001/04/xmldsig-more#hmac-sha256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha384 = \"HS384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha384Signature = \"http://www.w3.org/2001/04/xmldsig-more#hmac-sha384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha512 = \"HS512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.HmacSha512Signature = \"http://www.w3.org/2001/04/xmldsig-more#hmac-sha512\" -> string\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Method Overrides in C#\nDESCRIPTION: Override implementations for token reading and validation methods in the JsonWebTokenHandler class. These methods handle token parsing and asynchronous validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadToken(string token) -> Microsoft.IdentityModel.Tokens.SecurityToken\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.Tokens.SecurityToken token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.TokenValidationResult>\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.TokenValidationResult>\n```\n\n----------------------------------------\n\nTITLE: Declaring CallContext and Validator Classes in C#\nDESCRIPTION: Definition of utility classes for token validation including call context for activity tracking and validator classes for audience validation and algorithm validation. These classes provide core token validation functionality.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.CallContext\nMicrosoft.IdentityModel.Tokens.CallContext.CallContext() -> void\nMicrosoft.IdentityModel.Tokens.CallContext.CallContext(System.Guid activityId) -> void\nMicrosoft.IdentityModel.Tokens.AlgorithmValidator\nMicrosoft.IdentityModel.Tokens.AudienceValidator\nMicrosoft.IdentityModel.Tokens.AppCompatSwitches\nMicrosoft.IdentityModel.Tokens.Base64UrlEncoder\n```\n\n----------------------------------------\n\nTITLE: Signature Validation Result Class in C#\nDESCRIPTION: Constructors for SignatureValidationResult class used to represent the outcome of signature validation operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.Results.SignatureValidationResult\nMicrosoft.IdentityModel.JsonWebTokens.Results.SignatureValidationResult.SignatureValidationResult(bool isValid, Microsoft.IdentityModel.Tokens.ValidationFailureType validationFailureType) -> void\nMicrosoft.IdentityModel.JsonWebTokens.Results.SignatureValidationResult.SignatureValidationResult(Microsoft.IdentityModel.Tokens.ValidationFailureType validationFailure, Microsoft.IdentityModel.Tokens.ExceptionDetail exceptionDetail) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ICompressionProvider Interface in C#\nDESCRIPTION: The ICompressionProvider interface defines methods and properties for implementing compression algorithms in token processing. It includes methods for compressing and decompressing byte arrays and checking algorithm support.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ICompressionProvider\nMicrosoft.IdentityModel.Tokens.ICompressionProvider.Algorithm.get -> string\nMicrosoft.IdentityModel.Tokens.ICompressionProvider.Compress(byte[] value) -> byte[]\nMicrosoft.IdentityModel.Tokens.ICompressionProvider.Decompress(byte[] value) -> byte[]\nMicrosoft.IdentityModel.Tokens.ICompressionProvider.IsSupportedAlgorithm(string algorithm) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing KeyInfo Class in C#\nDESCRIPTION: Defines the KeyInfo class with properties and constructors for handling cryptographic key information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.KeyInfo\nMicrosoft.IdentityModel.Xml.KeyInfo.KeyInfo() -> void\nMicrosoft.IdentityModel.Xml.KeyInfo.KeyInfo(Microsoft.IdentityModel.Tokens.SecurityKey key) -> void\nMicrosoft.IdentityModel.Xml.KeyInfo.KeyInfo(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate) -> void\nMicrosoft.IdentityModel.Xml.KeyInfo.KeyName.get -> string\nMicrosoft.IdentityModel.Xml.KeyInfo.KeyName.set -> void\nMicrosoft.IdentityModel.Xml.KeyInfo.RetrievalMethodUri.get -> string\nMicrosoft.IdentityModel.Xml.KeyInfo.RetrievalMethodUri.set -> void\nMicrosoft.IdentityModel.Xml.KeyInfo.RSAKeyValue.get -> Microsoft.IdentityModel.Xml.RSAKeyValue\nMicrosoft.IdentityModel.Xml.KeyInfo.RSAKeyValue.set -> void\nMicrosoft.IdentityModel.Xml.KeyInfo.X509Data.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Xml.X509Data>\n```\n\n----------------------------------------\n\nTITLE: Creating a Signing Credential with JsonWebKey and Algorithm\nDESCRIPTION: Creates a SigningCredentials object using a JsonWebKey and specifies the signature algorithm. This is used for token signing operations with explicit algorithm selection.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar signingCredentials = new SigningCredentials(\n    jsonWebKey, \n    SecurityAlgorithms.EcdsaSha256);\n```\n\n----------------------------------------\n\nTITLE: Defining WsFederation Constants in C#\nDESCRIPTION: This snippet defines various constants used in the WsFederation protocol, including attributes, elements, actions, fault codes, and parameter names. These constants are essential for implementing WsFederation authentication in .NET applications.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Attributes.EntityId = \"entityID\" -> string\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Attributes.Id = \"ID\" -> string\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Attributes.ProtocolSupportEnumeration = \"protocolSupportEnumeration\" -> string\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Attributes.Type = \"type\" -> string\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Attributes.Use = \"use\" -> string\n// ... (more WsFederation constants)\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization and Parsing Utilities\nDESCRIPTION: A collection of helper methods for JSON serialization and deserialization using System.Text.Json. These methods handle reading various data types from JSON, creating JsonElements, and provide error handling for JSON parsing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonSerializerPrimitives.CreateJsonElement(string json) -> System.Text.Json.JsonElement\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonSerializerPrimitives.CreateJsonElement(System.Collections.Generic.IList<string> strings) -> System.Text.Json.JsonElement\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonSerializerPrimitives.CreateJsonReaderException(ref System.Text.Json.Utf8JsonReader reader, string expectedType, string className, string propertyName, System.Exception innerException = null) -> System.Text.Json.JsonException\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonSerializerPrimitives.ReadArrayOfObjects(ref System.Text.Json.Utf8JsonReader reader, string propertyName, string className) -> System.Collections.Generic.List<object>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonSerializerPrimitives.ReadBoolean(ref System.Text.Json.Utf8JsonReader reader, string propertyName, string className, bool read = false) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonSerializerPrimitives.ReadString(ref System.Text.Json.Utf8JsonReader reader, string propertyName, string className, bool read = false) -> string\n```\n\n----------------------------------------\n\nTITLE: Defining SAML 2.0 Namespace and General Constants in C#\nDESCRIPTION: Declaration of constant string values for SAML 2.0 namespace, prefix, and token profile identifiers. These constants define the core XML namespace and standard identifiers required for SAML 2.0 implementation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Namespace = \"urn:oasis:names:tc:SAML:2.0:assertion\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.OasisWssSaml2TokenProfile11 = \"http://docs.oasis-open.org/wss/oasis-wss-saml-token-profile-1.1#SAMLV2.0\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Prefix = \"saml\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Saml2TokenProfile11 = \"urn:oasis:names:tc:SAML:2.0:assertion\" -> string\n```\n\n----------------------------------------\n\nTITLE: Asynchronous WsFederation Configuration Retrieval in C#\nDESCRIPTION: These static methods asynchronously retrieve WsFederation configuration from a given address using various HTTP clients or document retrievers. They are part of the WsFederationConfigurationRetriever class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfigurationRetriever.GetAsync(string address, Microsoft.IdentityModel.Protocols.IDocumentRetriever retriever, System.Threading.CancellationToken cancel) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration>\n\nstatic Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfigurationRetriever.GetAsync(string address, System.Net.Http.HttpClient httpClient, System.Threading.CancellationToken cancel) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration>\n\nstatic Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfigurationRetriever.GetAsync(string address, System.Threading.CancellationToken cancel) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration>\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants for Token Validation in C#\nDESCRIPTION: This snippet defines a series of constant strings for log messages related to various aspects of token validation, including audience validation, issuer validation, lifetime validation, and signature validation. These constants are used throughout the library to provide consistent and informative log messages during the token validation process.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10233 = \"IDX10233: ValidateAudience property on ValidationParameters is set to false. Exiting without validating the audience.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10234 = \"IDX10234: Audience Validated.Audience: '{0}'\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10235 = \"IDX10235: ValidateIssuer property on ValidationParameters is set to false. Exiting without validating the issuer.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10236 = \"IDX10236: Issuer Validated.Issuer: '{0}'\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10237 = \"IDX10237: ValidateIssuerSigningKey property on ValidationParameters is set to false. Exiting without validating the issuer signing key.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10238 = \"IDX10238: ValidateLifetime property on ValidationParameters is set to false. Exiting without validating the lifetime.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10239 = \"IDX10239: Lifetime of the token is valid.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10240 = \"IDX10240: No token replay is detected.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10241 = \"IDX10241: Security token validated. token: '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10242 = \"IDX10242: Security token: '{0}' has a valid signature.\"\n```\n\n----------------------------------------\n\nTITLE: JsonWebKey Conversion and Exception Handling in C#\nDESCRIPTION: Utility functions for converting between security key formats and handling security token exceptions. Includes conversion from ECDsa keys to JSON Web Keys (JWK) and serialization support for security token exceptions.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromECDsaSecurityKey(Microsoft.IdentityModel.Tokens.ECDsaSecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\noverride Microsoft.IdentityModel.Tokens.SecurityTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: JsonClaimSet Class Members in C#\nDESCRIPTION: Definition of the JsonClaimSet class members, including methods for claim handling and value extraction. This class provides functionality to work with claims in a JSON format and convert them to System.Security.Claims objects.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet._claimsLock -> object\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.Claims(string issuer) -> System.Collections.Generic.List<System.Security.Claims.Claim>\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.CreateClaims(string issuer) -> System.Collections.Generic.List<System.Security.Claims.Claim>\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.GetClaim(string key, string issuer) -> System.Security.Claims.Claim\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.GetDateTime(string key) -> System.DateTime\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.GetStringValue(string key) -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.GetValue<T>(string key) -> T\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.GetValue<T>(string key, bool throwEx, out bool found) -> T\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.HasClaim(string claimName) -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.JsonClaimSet() -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.JsonClaimSet(System.Collections.Generic.Dictionary<string, object> jsonClaims) -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.TryGetClaim(string key, string issuer, out System.Security.Claims.Claim claim) -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet.TryGetValue<T>(string key, out T value) -> bool\n```\n\n----------------------------------------\n\nTITLE: CompressionProviderFactory Implementation in C#\nDESCRIPTION: CompressionProviderFactory creates compression providers by algorithm name. It supports setting a custom compression provider and creating providers with specific parameters like maximum deflate size.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.CompressionProviderFactory.CreateCompressionProvider(string algorithm) -> Microsoft.IdentityModel.Tokens.ICompressionProvider\nMicrosoft.IdentityModel.Tokens.CompressionProviderFactory.CreateCompressionProvider(string algorithm, int maximumDeflateSize) -> Microsoft.IdentityModel.Tokens.ICompressionProvider\nMicrosoft.IdentityModel.Tokens.CompressionProviderFactory.CustomCompressionProvider.get -> Microsoft.IdentityModel.Tokens.ICompressionProvider\nMicrosoft.IdentityModel.Tokens.CompressionProviderFactory.CustomCompressionProvider.set -> void\n```\n\n----------------------------------------\n\nTITLE: Reading SAML Elements in C#\nDESCRIPTION: This snippet shows method signatures for reading various SAML elements from XML. These methods are part of the SamlSerializer class and use XmlDictionaryReader or XmlReader to parse SAML data.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.ReadAdvice(System.Xml.XmlDictionaryReader reader) -> Microsoft.IdentityModel.Tokens.Saml.SamlAdvice\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.ReadAssertion(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Tokens.Saml.SamlAssertion\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.ReadAttribute(System.Xml.XmlDictionaryReader reader) -> Microsoft.IdentityModel.Tokens.Saml.SamlAttribute\n// ... (more Read methods)\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Properties in C#\nDESCRIPTION: Properties for the JsonWebTokenHandler class, including claim type mapping configurations and token type information. These properties control how claims are mapped during token processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.InboundClaimTypeMap.get -> System.Collections.Generic.IDictionary<string, string>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.InboundClaimTypeMap.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.MapInboundClaims.get -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.MapInboundClaims.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.TokenType.get -> System.Type\n```\n\n----------------------------------------\n\nTITLE: Defining SHA Hash Algorithm Constants in C#\nDESCRIPTION: Constants representing SHA (Secure Hash Algorithm) variants used in token validation and encryption. These constants define both short form identifiers (like 'SHA256') and full URI identifiers for XML digest operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Sha256 = \"SHA256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Sha256Digest = \"http://www.w3.org/2001/04/xmlenc#sha256\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Sha384 = \"SHA384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Sha384Digest = \"http://www.w3.org/2001/04/xmldsig-more#sha384\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Sha512 = \"SHA512\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Sha512Digest = \"http://www.w3.org/2001/04/xmlenc#sha512\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining ECDH Key Exchange Provider Class in C#\nDESCRIPTION: Class implementation for handling Elliptic Curve Diffie-Hellman key exchange operations with methods for key generation and KDF calculation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.EcdhKeyExchangeProvider(Microsoft.IdentityModel.Tokens.SecurityKey privateKey, Microsoft.IdentityModel.Tokens.SecurityKey publicKey, string alg, string enc) -> void\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.GenerateKdf(string apu = null, string apv = null) -> Microsoft.IdentityModel.Tokens.SecurityKey\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.get -> int\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing ECDH Key Exchange in C#\nDESCRIPTION: API declaration for the EcdhKeyExchangeProvider class that handles Elliptic Curve Diffie-Hellman key exchange operations. This class enables secure key exchange between parties using elliptic curve cryptography.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.EcdhKeyExchangeProvider(Microsoft.IdentityModel.Tokens.SecurityKey privateKey, Microsoft.IdentityModel.Tokens.SecurityKey publicKey, string alg, string enc) -> void\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.GenerateKdf(string apu = null, string apv = null) -> Microsoft.IdentityModel.Tokens.SecurityKey\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.get -> int\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.KeyDataLen.set -> void\n```\n\n----------------------------------------\n\nTITLE: RSA Cryptographic Operations API Signatures\nDESCRIPTION: Defines the public API surface for RSACryptoServiceProviderProxy including encryption, decryption, signing, verification and key management operations. The class provides a wrapper around RSACryptoServiceProvider with additional functionality specific to Azure AD identity scenarios.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Decrypt(byte[] input, bool fOAEP) -> byte[]\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Encrypt(byte[] input, bool fOAEP) -> byte[]\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.RSACryptoServiceProviderProxy(System.Security.Cryptography.RSACryptoServiceProvider rsa) -> void\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.SignData(byte[] input, object hash) -> byte[]\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.VerifyData(byte[] input, object hash, byte[] signature) -> bool\nMicrosoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.VerifyDataWithLength(byte[] input, int offset, int length, object hash, System.Security.Cryptography.HashAlgorithmName hashAlgorithmName, byte[] signature) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Segment Count Constants in C#\nDESCRIPTION: Constant definitions for JWT token segment counts. JWE (JSON Web Encryption) tokens have 5 segments, JWS (JSON Web Signature) tokens have 3 segments, and MaxJwtSegmentCount is set to the maximum possible count.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.JweSegmentCount = 5 -> int\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.JwsSegmentCount = 3 -> int\nconst System.IdentityModel.Tokens.Jwt.JwtConstants.MaxJwtSegmentCount = 5 -> int\n```\n\n----------------------------------------\n\nTITLE: AuthenticationProtocolMessage Virtual Methods in C#\nDESCRIPTION: Virtual methods for the AuthenticationProtocolMessage class that handle building form posts, redirect URLs, parameter management, and other protocol message operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.AuthenticationProtocolMessage.BuildFormPost() -> string\nvirtual Microsoft.IdentityModel.Protocols.AuthenticationProtocolMessage.BuildRedirectUrl() -> string\nvirtual Microsoft.IdentityModel.Protocols.AuthenticationProtocolMessage.GetParameter(string parameter) -> string\nvirtual Microsoft.IdentityModel.Protocols.AuthenticationProtocolMessage.RemoveParameter(string parameter) -> void\nvirtual Microsoft.IdentityModel.Protocols.AuthenticationProtocolMessage.SetParameters(System.Collections.Specialized.NameValueCollection nameValueCollection) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing InMemoryCryptoProviderCache Methods in C#\nDESCRIPTION: These snippets override methods in the InMemoryCryptoProviderCache class, including GetCacheKey, TryAdd, TryGetSignatureProvider, and TryRemove operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.GetCacheKey(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, string algorithm, string typeofProvider) -> string\noverride Microsoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.GetCacheKey(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> string\noverride Microsoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.TryAdd(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\noverride Microsoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.TryGetSignatureProvider(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, string algorithm, string typeofProvider, bool willCreateSignatures, out Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\noverride Microsoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.TryRemove(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\n```\n\n----------------------------------------\n\nTITLE: SAML2 Constants Definition\nDESCRIPTION: Static constant definitions for SAML 2.0 including confirmation methods, name identifier formats, and access decision values. These constants define the standard URIs and string values used in SAML 2.0 token processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.AccessDecision.Permit.get -> string\nstatic Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.AccessDecision.Deny.get -> string\nstatic Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.AccessDecision.Indeterminate.get -> string\n\nstatic readonly Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ConfirmationMethods.Bearer -> System.Uri\nstatic readonly Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ConfirmationMethods.HolderOfKey -> System.Uri\nstatic readonly Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ConfirmationMethods.SenderVouches -> System.Uri\n```\n\n----------------------------------------\n\nTITLE: Reading WsFederation Metadata in C#\nDESCRIPTION: This method reads WsFederation metadata from an XML reader and returns a WsFederationConfiguration object. It's part of the WsFederationMetadataSerializer class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.ReadMetadata(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration\n```\n\n----------------------------------------\n\nTITLE: Audience Validation Classes in C#\nDESCRIPTION: Classes for validating token audiences, including delegate definitions and error handling for JWT audience validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AudienceValidationDelegate\nMicrosoft.IdentityModel.Tokens.AudienceValidationError\nMicrosoft.IdentityModel.Tokens.AudienceValidationError.AudienceValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, Microsoft.IdentityModel.Tokens.ValidationFailureType validationFailureType, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, System.Collections.Generic.IList<string> tokenAudiences, System.Collections.Generic.IList<string> validAudiences, System.Exception innerException = null) -> void\nMicrosoft.IdentityModel.Tokens.AudienceValidationError.AudienceValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, System.Collections.Generic.IList<string> invalidAudiences) -> void\nMicrosoft.IdentityModel.Tokens.AudienceValidationError.TokenAudiences.get -> System.Collections.Generic.IList<string>\nMicrosoft.IdentityModel.Tokens.AudienceValidationError.TokenAudiences.set -> void\nMicrosoft.IdentityModel.Tokens.AudienceValidationError.ValidAudiences.get -> System.Collections.Generic.IList<string>\nMicrosoft.IdentityModel.Tokens.AudienceValidationError.ValidAudiences.set -> void\n```\n\n----------------------------------------\n\nTITLE: Token Encryption Error Constants in C#\nDESCRIPTION: Constants for error messages related to token encryption failures, including algorithm support, key size issues, and provider failures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10615 = \"IDX10615: Encryption failed. No support for: Algorithm: '{0}', SecurityKey: '{1}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10616 = \"IDX10616: Encryption failed. EncryptionProvider failed for: Algorithm: '{0}', SecurityKey: '{1}'. See inner exception.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10617 = \"IDX10617: Encryption failed. Keywrap is only supported for: '{0}', '{1}' and '{2}'. The content encryption specified is: '{3}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10619 = \"IDX10619: Decryption failed. Algorithm: '{0}'. Either the Encryption Algorithm: '{1}' or none of the Security Keys are supported by the CryptoProviderFactory.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10620 = \"IDX10620: Unable to obtain a CryptoProviderFactory, both EncryptingCredentials.CryptoProviderFactory and EncryptingCredentials.Key.CrypoProviderFactory are null.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10620 = \"IDX10620: Unable to obtain a CryptoProviderFactory, both EncryptingCredentials.CryptoProviderFactory and EncryptingCredentials.Key.CryptoProviderFactory are null.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10653 = \"IDX10653: The encryption algorithm '{0}' requires a key size of at least '{1}' bits. Key '{2}', is of size: '{3}'.\"\n```\n\n----------------------------------------\n\nTITLE: SignedHttpRequestValidationContext Class Properties and Constructors in C#\nDESCRIPTION: Defines the SignedHttpRequestValidationContext class which encapsulates the context used for validating signed HTTP requests. It includes properties for accessing validation parameters and constructors with various parameter combinations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.AccessTokenValidationParameters.get -> Microsoft.IdentityModel.Tokens.TokenValidationParameters\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.CallContext.get -> Microsoft.IdentityModel.Tokens.CallContext\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.HttpRequestData.get -> Microsoft.IdentityModel.Protocols.HttpRequestData\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.SignedHttpRequest.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.SignedHttpRequestValidationContext(string signedHttpRequest, Microsoft.IdentityModel.Protocols.HttpRequestData httpRequestData, Microsoft.IdentityModel.Tokens.TokenValidationParameters accessTokenValidationParameters) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.SignedHttpRequestValidationContext(string signedHttpRequest, Microsoft.IdentityModel.Protocols.HttpRequestData httpRequestData, Microsoft.IdentityModel.Tokens.TokenValidationParameters accessTokenValidationParameters, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters signedHttpRequestValidationParameters) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.SignedHttpRequestValidationContext(string signedHttpRequest, Microsoft.IdentityModel.Protocols.HttpRequestData httpRequestData, Microsoft.IdentityModel.Tokens.TokenValidationParameters accessTokenValidationParameters, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters signedHttpRequestValidationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.SignedHttpRequestValidationContext(string signedHttpRequest, Microsoft.IdentityModel.Protocols.HttpRequestData httpRequestData, Microsoft.IdentityModel.Tokens.TokenValidationParameters accessTokenValidationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext.SignedHttpRequestValidationParameters.get -> Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters\n```\n\n----------------------------------------\n\nTITLE: RSA Override Methods Implementation\nDESCRIPTION: Override implementations of base RSA class methods including value encryption/decryption, key parameter management, and algorithm property getters. These methods provide the core cryptographic functionality of the proxy class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net462/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.DecryptValue(byte[] input) -> byte[]\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Dispose(bool disposing) -> void\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.EncryptValue(byte[] input) -> byte[]\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.ExportParameters(bool includePrivateParameters) -> System.Security.Cryptography.RSAParameters\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.ImportParameters(System.Security.Cryptography.RSAParameters parameters) -> void\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.KeyExchangeAlgorithm.get -> string\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.SignatureAlgorithm.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining SAML2 Constants in C#\nDESCRIPTION: Constants that define the standard type names and version for SAML2 operations. These constants are used throughout the library to maintain consistency with the SAML2 specification.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.StatementAbstractType = \"StatementAbstractType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.SubjectConfirmationDataType = \"SubjectConfirmationDataType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.SubjectConfirmationType = \"SubjectConfirmationType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.SubjectLocalityType = \"SubjectLocalityType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.SubjectType = \"SubjectType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Version = \"2.0\" -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing RSA Cryptographic Provider Override Methods in C#\nDESCRIPTION: Override implementations for RSA cryptographic operations including parameter import/export and algorithm properties.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.DecryptValue(byte[] input) -> byte[]\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.Dispose(bool disposing) -> void\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.EncryptValue(byte[] input) -> byte[]\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.ExportParameters(bool includePrivateParameters) -> System.Security.Cryptography.RSAParameters\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.ImportParameters(System.Security.Cryptography.RSAParameters parameters) -> void\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.KeyExchangeAlgorithm.get -> string\noverride Microsoft.IdentityModel.Tokens.RSACryptoServiceProviderProxy.SignatureAlgorithm.get -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing SecurityToken Exception Handling Methods in C#\nDESCRIPTION: These snippets override GetObjectData methods for various SecurityToken exception classes, handling serialization of exception data.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SecurityTokenExpiredException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAlgorithmException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenInvalidAudienceException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenInvalidCloudInstanceException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenInvalidIssuerException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenInvalidLifetimeException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenInvalidTypeException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenNotYetValidException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenUnableToValidateException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring Configuration Management Classes in C#\nDESCRIPTION: Definition of classes for managing configurations in token validation. These classes provide functionality for configuration refreshing, caching, and fallback to last known good configurations with configurable lifetimes and refresh intervals.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.BaseConfiguration\nMicrosoft.IdentityModel.Tokens.BaseConfiguration.BaseConfiguration() -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.AutomaticRefreshInterval.get -> System.TimeSpan\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.AutomaticRefreshInterval.set -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.BaseConfigurationManager() -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.BaseConfigurationManager(Microsoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions options) -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.IsLastKnownGoodValid.get -> bool\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.LastKnownGoodConfiguration.get -> Microsoft.IdentityModel.Tokens.BaseConfiguration\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.LastKnownGoodConfiguration.set -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.LastKnownGoodLifetime.get -> System.TimeSpan\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.LastKnownGoodLifetime.set -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.MetadataAddress.get -> string\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.MetadataAddress.set -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.RefreshInterval.get -> System.TimeSpan\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.RefreshInterval.set -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.UseLastKnownGoodConfiguration.get -> bool\nMicrosoft.IdentityModel.Tokens.BaseConfigurationManager.UseLastKnownGoodConfiguration.set -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Constructor in C#\nDESCRIPTION: Constructor for the JsonWebTokenHandler class which initializes a new instance for handling JSON Web Tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.JsonWebTokenHandler() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SAML2 Error Message Constants in C#\nDESCRIPTION: This code snippet defines a comprehensive set of error message constants used in the SAML2 implementation. These messages provide detailed information about validation failures, parsing errors, and unsupported operations when working with SAML2 tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13126 = \"IDX13126: A <saml:SubjectConfirmationData> element of an unexpected type was encountered.The SubjectConfirmationDataType and KeyInfoConfirmationDataType are handled by default. To handle other types, extend Saml2SecurityTokenHandler and override ReadSubjectConfirmationData. Name: '{0}' Namespace: '{1}'\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13127 = \"IDX13127: A <saml:SubjectConfirmationData> element cannot be empty when of type KeyInfoConfirmationDataType.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13128 = \"IDX13128: A <saml:'{0}'> contained unrecognized content.The schema allows arbitrary XML elements on this element without explicit schema extension.To handle the content, extend Saml2Serializer.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13129 = \"IDX13129: The SAML2:AttributeStatement must contain at least one SAML2:Attribute.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13130 = \"IDX13130: A Saml2AudienceRestriction must specify at least one Audience.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13133 = \"IDX13133: The Saml2Assertion Statements collection contains an unrecognized Saml2Statement.To handle custom Saml2Statement objects, extend Saml2SecurityTokenHandler and override WriteStatement. Type: '{0}'\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13136 = \"IDX13136: Unable to read for Saml2SecurityToken. Required Element: '{0}' is missing or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13137 = \"IDX13137: Unable to read for Saml2SecurityToken. Version must be '2.0' was: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13138 = \"IDX13138: Unable to read for Saml2SecurityToken. the AttributeStatement does not contain any Attributes.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13139 = \"IDX13139: Uri must be an AbsoluteUri is: '{0}'\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13140 = \"IDX13140: EncryptedId is not supported. You will need to override ReadEncryptedId and provide support.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13141 = \"IDX13141: EncryptedAssertion is not supported. You will need to override ReadAssertion and provide support.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13142 = \"IDX13142: A Saml2SamlAttributeStatement can only have one Saml2Attribute of type 'Actor'. This special Saml2Attribute is used in delegation scenarios.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13149 = \"IDX13149: Both AuthenticationContext ClassReference DeclarationReference can not be null.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13150 = \"IDX13150: The Saml2SecurityTokenHandler can only write a token was of type: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13151 = \"IDX13151: Cannot write '{0}' because '{1}' is null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13300 = \"IDX13300: '{0}' must be an absolute Uri, was: '{1}'\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13302 = \"IDX13302: An assertion with no statements must contain a 'Subject' element.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13303 = \"IDX13303: 'Subject' is required in Saml2Assertion for built-in statement type.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13304 = \"IDX13304: Encryption is not supported in writing saml2 nameIdentifier.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13305 = \"IDX13305: Both id and subjectconfirmation are null in saml2 subject: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13306 = \"IDX13306: Multiple name identifier claim is not allowed in tokenDescriptor.Subject.Claims.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13310 = \"IDX13310: SAML2 AuthorizationDecision DecisionType must be 'Permit', 'Deny' or 'Indeterminate'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13312 = \"IDX13312: 'AuthnContext' cannot be empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13313 = \"IDX13313: 'AuthnStatement' cannot be empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13314 = \"IDX13314: 'AuthzDecisionStatement' cannot be empty (must have at least one 'Subject').\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13400 = \"IDX13400: The '{0}', can only process SecurityTokens of type: '{1}'. The SecurityToken received is of type: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13509 = \"IDX13509: Unable to validate token, Subject is null.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13510 = \"IDX13510: The Saml2SecurityToken cannot be validated because the Assertion specifies a OneTimeUse condition.Enforcement of the OneTimeUse condition is not supported by default.To customize the enforcement of OneTimeUse condition, extend Saml2SecurityTokenHandler and override ValidateOneTimeUseCondition.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13511 = \"IDX13511: The Saml2SecurityToken cannot be validated because the Assertion specifies a ProxyRestriction condition.Enforcement of the ProxyRestriction condition is not supported by default. To customize the enforcement of Saml2Conditions, extend Saml2SecurityTokenHandler and override ValidateConditions.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13512 = \"IDX13512: Unable to validate token. A Saml2SamlAttributeStatement can only have one Saml2Attribute of type 'Actor'. This special Saml2Attribute is used in delegation scenarios.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13513 = \"IDX13513: NotBefore '{0}', is after NotOnOrAfter '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13514 = \"IDX13514: NotOnOrAfter '{0}', is before NotBefore '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13515 = \"IDX13515: SamlId value threw on XmlConvert.VerifyNCName. value: '{0}'\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13516 = \"IDX13516: A Saml2Statement of type: '{0}' was found when ProcessingStatements and creating the ClaimsIdentity. These claims have been skipped. If you need to process this Statement, you will need to derive a custom Saml2SecurityTokenHandler and override ProcessStatements.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13900 = \"IDX13900: Unable to write Saml2Assertion: {0} is required, {1} is null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13901 = \"IDX13901: Unable to write Saml2Assertion: {0}.{1} is empty. This statement must contain at least one Action.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13902 = \"IDX13902: Unable to write Saml2Assertion: Saml2Evidence must have at least one assertion or assertion reference.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13950 = \"IDX13950: API is not supported\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13951 = \"IDX13951: Validation of confirmation data is currently not supported by default. To customize SubjectConfirmationData processing, extend Saml2SecurityTokenHandler and override ValidateConfirmationData.\" -> string\n```\n\n----------------------------------------\n\nTITLE: Signature and Key Wrap Provider Virtual Methods in C#\nDESCRIPTION: Virtual methods for SignatureProvider, RsaKeyWrapProvider, and SymmetricKeyWrapProvider classes for cryptographic signature and key wrapping operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_53\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.SignatureProvider.Sign(byte[] input, int offset, int count) -> byte[]\nvirtual Microsoft.IdentityModel.Tokens.SignatureProvider.Verify(byte[] input, int inputOffset, int inputLength, byte[] signature, int signatureOffset, int signatureLength) -> bool\nvirtual Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.IsSupportedAlgorithm(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> bool\nvirtual Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.GetSymmetricAlgorithm(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> System.Security.Cryptography.SymmetricAlgorithm\nvirtual Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.IsSupportedAlgorithm(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> bool\n```\n\n----------------------------------------\n\nTITLE: Default Validation Parameter Constants in C#\nDESCRIPTION: Default values for token validation including authentication type and maximum token size in bytes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.ValidationParameters.DefaultAuthenticationType = \"AuthenticationTypes.Federation\" -> string\nconst Microsoft.IdentityModel.Tokens.ValidationParameters.DefaultMaximumTokenSizeInBytes = 256000 -> int\n```\n\n----------------------------------------\n\nTITLE: SAML Attribute Statement Class Definition in C#\nDESCRIPTION: The SamlAttributeStatement class represents a SAML statement that carries attribute information about the subject. It contains a collection of attributes with their respective values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeStatement\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeStatement.Attributes.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml.SamlAttribute>\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeStatement.SamlAttributeStatement(Microsoft.IdentityModel.Tokens.Saml.SamlSubject samlSubject, Microsoft.IdentityModel.Tokens.Saml.SamlAttribute attribute) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeStatement.SamlAttributeStatement(Microsoft.IdentityModel.Tokens.Saml.SamlSubject samlSubject, System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlAttribute> attributes) -> void\n```\n\n----------------------------------------\n\nTITLE: SAML Authentication Statement Class Definition in C#\nDESCRIPTION: The SamlAuthenticationStatement class represents information about an authentication act performed on a subject. It includes details such as the authentication method, time, and locality information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.AuthenticationInstant.get -> System.DateTime\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.AuthenticationInstant.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.AuthenticationMethod.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.AuthenticationMethod.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.AuthorityBindings.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding>\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.DnsAddress.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.IPAddress.get -> string\n```\n\n----------------------------------------\n\nTITLE: Resolving Token Decryption Key\nDESCRIPTION: Virtual method for resolving the security key used for token decryption, using token validation parameters and call context\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ResolveTokenDecryptionKey(string token, Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.SecurityKey\n```\n\n----------------------------------------\n\nTITLE: Defining Constants for JSON Web Key Parameters in C#\nDESCRIPTION: This snippet defines string constants for various JSON Web Key (JWK) parameters, including key types, curve types, and other attributes used in JWK representations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Alg = \"alg\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Crv = \"crv\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.D = \"d\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.DP = \"dp\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.DQ = \"dq\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.E = \"e\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.K = \"k\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.KeyOps = \"key_ops\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Keys = \"keys\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Kid = \"kid\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Kty = \"kty\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.N = \"n\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Oth = \"oth\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.P = \"p\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Q = \"q\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.QI = \"qi\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Use = \"use\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.X = \"x\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.X5c = \"x5c\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.X5t = \"x5t\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.X5tS256 = \"x5t#S256\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.X5u = \"x5u\" -> string\nconst Microsoft.IdentityModel.Tokens.JsonWebKeyParameterNames.Y = \"y\" -> string\n```\n\n----------------------------------------\n\nTITLE: Declaring Case-Sensitive Claims Identity in C#\nDESCRIPTION: Definition of a case-sensitive claims identity class for token validation scenarios where claim type comparisons need to be case-sensitive. This class extends standard claims identity functionality while maintaining specific case sensitivity requirements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.CaseSensitiveClaimsIdentity() -> void\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.CaseSensitiveClaimsIdentity(string authenticationType) -> void\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.CaseSensitiveClaimsIdentity(string authenticationType, string nameType, string roleType) -> void\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.CaseSensitiveClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims) -> void\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.CaseSensitiveClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType) -> void\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.CaseSensitiveClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType) -> void\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.CaseSensitiveClaimsIdentity(System.Security.Claims.ClaimsIdentity claimsIdentity) -> void\nMicrosoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity.SecurityToken.get -> Microsoft.IdentityModel.Tokens.SecurityToken\n```\n\n----------------------------------------\n\nTITLE: CanonicalizingTransfrom Class Implementation in C#\nDESCRIPTION: Implementation of the CanonicalizingTransfrom class for XML canonicalization during signature processing. This class handles canonicalization of XML content which ensures consistent XML representation regardless of formatting differences.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.CanonicalizingTransfrom\nMicrosoft.IdentityModel.Xml.CanonicalizingTransfrom.CanonicalizingTransfrom() -> void\nMicrosoft.IdentityModel.Xml.CanonicalizingTransfrom.IncludeComments.get -> bool\nMicrosoft.IdentityModel.Xml.CanonicalizingTransfrom.IncludeComments.set -> void\nMicrosoft.IdentityModel.Xml.CanonicalizingTransfrom.InclusiveNamespacesPrefixList.get -> string\nMicrosoft.IdentityModel.Xml.CanonicalizingTransfrom.InclusiveNamespacesPrefixList.set -> void\n```\n\n----------------------------------------\n\nTITLE: Token Decryption Error Constants in C#\nDESCRIPTION: Constants for error messages related to token decryption failures, including issues with keys, algorithms, providers, and cryptographic operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10603 = \"IDX10603: Decryption failed. Keys tried: '{0}'.\\nExceptions caught:\\n '{1}'.\\ntoken: '{2}'\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10607 = \"IDX10607: Decryption skipping key: '{0}', both validationParameters.CryptoProviderFactory and key.CryptoProviderFactory are null.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10609 = \"IDX10609: Decryption failed. No Keys tried: token: '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10610 = \"IDX10610: Decryption failed. Could not create decryption provider. Key: '{0}', Algorithm: '{1}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10611 = \"IDX10611: Decryption failed. Encryption is not supported for: Algorithm: '{0}', SecurityKey: '{1}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10612 = \"IDX10612: Decryption failed. Header.Enc is null or empty, it must be specified.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10654 = \"IDX10654: Decryption failed. Cryptographic operation exception: '{0}'.\"\n```\n\n----------------------------------------\n\nTITLE: Defining Transform and CanonicalizingTransform Abstract Classes in C#\nDESCRIPTION: Abstract class definitions for XML transformations used in signature processing. These classes define the interfaces for XML transformations including canonicalization, which is essential for creating consistent XML representations for digital signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.Algorithm.get -> string\nabstract Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.ProcessAndDigest(Microsoft.IdentityModel.Xml.XmlTokenStream tokenStream, System.Security.Cryptography.HashAlgorithm hashAlg) -> byte[]\nabstract Microsoft.IdentityModel.Xml.Transform.Algorithm.get -> string\nabstract Microsoft.IdentityModel.Xml.Transform.Process(Microsoft.IdentityModel.Xml.XmlTokenStream tokenStream) -> Microsoft.IdentityModel.Xml.XmlTokenStream\n```\n\n----------------------------------------\n\nTITLE: Security Key Management Virtual Methods in C#\nDESCRIPTION: Virtual methods for the SecurityKey classes including key operations, JWK thumbprint computation, and algorithm support verification.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_50\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.SecurityKey.CanComputeJwkThumbprint() -> bool\nvirtual Microsoft.IdentityModel.Tokens.SecurityKey.ComputeJwkThumbprint() -> byte[]\nvirtual Microsoft.IdentityModel.Tokens.SecurityKey.IsSupportedAlgorithm(string algorithm) -> bool\nvirtual Microsoft.IdentityModel.Tokens.SecurityKey.KeyId.get -> string\nvirtual Microsoft.IdentityModel.Tokens.SecurityKey.KeyId.set -> void\nvirtual Microsoft.IdentityModel.Tokens.SymmetricSecurityKey.Key.get -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Version 8.2.0 Changelog Entry\nDESCRIPTION: Documents the changes in version 8.2.0 including fundamental updates, security fixes, and token validation improvements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n8.2.0\n=====\n### Fundamentals\n- Update System.Text.Json to 8.0.5 CVE-2024-43485. See [2892](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2892).\n- Using FixedTimeEquals in NETCore targets. See [2857](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2857).\n```\n\n----------------------------------------\n\nTITLE: Key-Value Accumulator Implementation\nDESCRIPTION: Class for accumulating key-value pairs with support for multiple values per key, used in protocol message processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.WsFederation.KeyValueAccumulator.Append(string key, string value);\nMicrosoft.IdentityModel.Protocols.WsFederation.KeyValueAccumulator.HasValues.get;\nMicrosoft.IdentityModel.Protocols.WsFederation.KeyValueAccumulator.HasValues.set;\nMicrosoft.IdentityModel.Protocols.WsFederation.KeyValueAccumulator.KeyValueAccumulator();\nMicrosoft.IdentityModel.Protocols.WsFederation.KeyValueAccumulator.Result.get;\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken Properties and Methods in C#\nDESCRIPTION: API signatures for the JsonWebToken class, which represents a JSON Web Token. Includes properties for accessing token components and methods for token validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot2.get -> int\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot2.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot3.get -> int\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot3.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot4.get -> int\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Dot4.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.EncryptedKeyBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.EncryptedKeyBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.HasPayloadClaim(string claimName) -> bool\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Header.get -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Header.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.HeaderAsciiBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.HeaderAsciiBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.InitializationVectorBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.InitializationVectorBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.InnerToken.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.IsSigned.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.MessageBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.MessageBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.NumberOfDots.get -> int\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.NumberOfDots.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Payload.get -> Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Payload.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.PayloadClaimNames.get -> System.Collections.Generic.IReadOnlyCollection<string>\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadToken(System.ReadOnlyMemory<char> encodedTokenMemory) -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.Typ.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ValidFromNullable.get -> System.DateTime?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.ValidToNullable.get -> System.DateTime?\n```\n\n----------------------------------------\n\nTITLE: Defining Security Algorithm Constants in C#\nDESCRIPTION: This snippet defines constant strings for default asymmetric key wrap and symmetric encryption algorithms used in the Microsoft.IdentityModel.Tokens namespace.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.DefaultAsymmetricKeyWrapAlgorithm = \"http://www.w3.org/2001/04/xmlenc#rsa-oaep\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.DefaultSymmetricEncryptionAlgorithm = \"A128CBC-HS256\"\n```\n\n----------------------------------------\n\nTITLE: SAML2 Security Token Class Definition\nDESCRIPTION: Definition of SAML2 security token class that encapsulates a SAML2 assertion for authentication and authorization purposes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2SecurityToken\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2SecurityToken.Assertion.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2Assertion\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2SecurityToken.Saml2SecurityToken(Microsoft.IdentityModel.Tokens.Saml2.Saml2Assertion assertion) -> void\n```\n\n----------------------------------------\n\nTITLE: Configuration Cache and Manager Default Values in C#\nDESCRIPTION: Static readonly fields defining default values for configuration cache size limits and refresh intervals for the ConfigurationManager class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Protocols.Configuration.LastKnownGoodConfigurationCacheOptions.DefaultLastKnownGoodConfigurationSizeLimit -> int\nstatic readonly Microsoft.IdentityModel.Protocols.ConfigurationManager<T>.DefaultAutomaticRefreshInterval -> System.TimeSpan\nstatic readonly Microsoft.IdentityModel.Protocols.ConfigurationManager<T>.DefaultRefreshInterval -> System.TimeSpan\nstatic readonly Microsoft.IdentityModel.Protocols.ConfigurationManager<T>.MinimumAutomaticRefreshInterval -> System.TimeSpan\nstatic readonly Microsoft.IdentityModel.Protocols.ConfigurationManager<T>.MinimumRefreshInterval -> System.TimeSpan\n```\n\n----------------------------------------\n\nTITLE: SAML Token Validation Method Signatures in C#\nDESCRIPTION: Method signatures for validating and processing SAML tokens including signature validation, condition checking, and claims processing. These methods are part of the SamlSecurityTokenHandler and Saml2SecurityTokenHandler classes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.ValidateSignature(Microsoft.IdentityModel.Tokens.Saml.SamlSecurityToken samlToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.SecurityKey>\n\nvirtual Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.ValidateConditions(Microsoft.IdentityModel.Tokens.Saml.SamlSecurityToken samlToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.ValidatedConditions>\n```\n\n----------------------------------------\n\nTITLE: Creating Signing Credentials with X509 Security Key\nDESCRIPTION: Initializes SigningCredentials using an X509SecurityKey with RS256 algorithm. This is used for signing tokens using an X.509 certificate with RSA and SHA-256.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar signingCredentials = new SigningCredentials(\n    x509SecurityKey, \n    SecurityAlgorithms.RsaSha256);\n```\n\n----------------------------------------\n\nTITLE: Converting X509SecurityKey to JsonWebKey in C#\nDESCRIPTION: Static methods for converting X509SecurityKey to JsonWebKey, with an option to represent as RSA key.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_43\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromX509SecurityKey(Microsoft.IdentityModel.Tokens.X509SecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromX509SecurityKey(Microsoft.IdentityModel.Tokens.X509SecurityKey key, bool representAsRsaKey) -> Microsoft.IdentityModel.Tokens.JsonWebKey\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Key Configuration Error Constants in C#\nDESCRIPTION: Constants for error messages related to cryptographic key size restrictions, minimum requirements, and validation checks.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10628 = \"IDX10628: Cannot set the MinimumSymmetricKeySizeInBits to less than '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10630 = \"IDX10630: The '{0}' for signing cannot be smaller than '{1}' bits. KeySize: '{2}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10631 = \"IDX10631: The '{0}' for verifying cannot be smaller than '{1}' bits. KeySize: '{2}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10655 = \"IDX10655: '{0}' must be greater than 1, was: '{1}'\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10662 = \"IDX10662: The KeyWrap algorithm '{0}' requires a key size of '{1}' bits. Key '{2}', is of size:'{3}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10664 = \"IDX10664: The length of input must be a multiple of 64 bits. The input size is: '{0}' bits.\"\n```\n\n----------------------------------------\n\nTITLE: Defining ReadJsonWebToken Method for JsonWebTokenHandler in C#\nDESCRIPTION: This snippet defines a virtual method ReadJsonWebToken for the JsonWebTokenHandler class. It takes a ReadOnlyMemory<char> parameter and returns a JsonWebToken object.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ReadJsonWebToken(System.ReadOnlyMemory<char> token) -> Microsoft.IdentityModel.JsonWebTokens.JsonWebToken\n```\n\n----------------------------------------\n\nTITLE: Implementing RsaKeyWrapProvider Methods in C#\nDESCRIPTION: These snippets override methods in the RsaKeyWrapProvider class, including Algorithm, Context, Dispose, Key, UnwrapKey, and WrapKey operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Algorithm.get -> string\noverride Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Context.get -> string\noverride Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Context.set -> void\noverride Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Dispose(bool disposing) -> void\noverride Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.Key.get -> Microsoft.IdentityModel.Tokens.SecurityKey\noverride Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.UnwrapKey(byte[] keyBytes) -> byte[]\noverride Microsoft.IdentityModel.Tokens.RsaKeyWrapProvider.WrapKey(byte[] keyBytes) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Creating Signing Credentials with RSA Security Key\nDESCRIPTION: Sets up SigningCredentials with an RsaSecurityKey using RS256 algorithm. This code demonstrates how to create credentials for token signing using RSA with SHA-256.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar signingCredentials = new SigningCredentials(\n    rsaSecurityKey, \n    SecurityAlgorithms.RsaSha256);\n```\n\n----------------------------------------\n\nTITLE: Defining WS-Trust Constants in C#\nDESCRIPTION: Constants for WS-Trust namespaces, prefixes, and actions for different versions of the protocol.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_1_4.Namespace = \"http://docs.oasis-open.org/ws-sx/ws-trust/200802\"\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_1_4.PreferredPrefix = \"t\"\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_2005.Actions.Issue = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\"\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_2005.Namespace = \"http://schemas.xmlsoap.org/ws/2005/02/trust\"\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_2005.PreferredPrefix = \"trust\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Signature Class in C#\nDESCRIPTION: Defines the Signature class with properties and methods for handling XML digital signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.Signature\nMicrosoft.IdentityModel.Xml.Signature.KeyInfo.get -> Microsoft.IdentityModel.Xml.KeyInfo\nMicrosoft.IdentityModel.Xml.Signature.KeyInfo.set -> void\nMicrosoft.IdentityModel.Xml.Signature.Signature() -> void\nMicrosoft.IdentityModel.Xml.Signature.Signature(Microsoft.IdentityModel.Xml.SignedInfo signedInfo) -> void\nMicrosoft.IdentityModel.Xml.Signature.SignatureValue.get -> string\nMicrosoft.IdentityModel.Xml.Signature.SignatureValue.set -> void\nMicrosoft.IdentityModel.Xml.Signature.SignedInfo.get -> Microsoft.IdentityModel.Xml.SignedInfo\nMicrosoft.IdentityModel.Xml.Signature.SignedInfo.set -> void\nMicrosoft.IdentityModel.Xml.Signature.Verify(Microsoft.IdentityModel.Tokens.SecurityKey key) -> void\nMicrosoft.IdentityModel.Xml.Signature.Verify(Microsoft.IdentityModel.Tokens.SecurityKey key, Microsoft.IdentityModel.Tokens.CryptoProviderFactory cryptoProviderFactory) -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding ECDsaSecurityKey PrivateKeyStatus Property in C#\nDESCRIPTION: This snippet overrides the PrivateKeyStatus property getter for the ECDsaSecurityKey class, returning a PrivateKeyStatus enum value.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.ECDsaSecurityKey.PrivateKeyStatus.get -> Microsoft.IdentityModel.Tokens.PrivateKeyStatus\n```\n\n----------------------------------------\n\nTITLE: Defining SAML 2.0 Element Name Constants in C#\nDESCRIPTION: Declaration of constant string values for SAML 2.0 XML element names. These constants define the standard element names used in SAML 2.0 assertions, statements, and other XML components.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Action = \"Action\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Advice = \"Advice\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Assertion = \"Assertion\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AssertionIDRef = \"AssertionIDRef\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AssertionURIRef = \"AssertionURIRef\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Attribute = \"Attribute\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AttributeStatement = \"AttributeStatement\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AttributeValue = \"AttributeValue\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Audience = \"Audience\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AudienceRestriction = \"AudienceRestriction\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AuthenticatingAuthority = \"AuthenticatingAuthority\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AuthnContext = \"AuthnContext\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AuthnContextClassRef = \"AuthnContextClassRef\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AuthnContextDecl = \"AuthnContextDecl\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AuthnContextDeclRef = \"AuthnContextDeclRef\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AuthnStatement = \"AuthnStatement\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.AuthzDecisionStatement = \"AuthzDecisionStatement\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.BaseID = \"BaseID\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Condition = \"Condition\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Conditions = \"Conditions\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.EncryptedAssertion = \"EncryptedAssertion\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.EncryptedAttribute = \"EncryptedAttribute\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.EncryptedID = \"EncryptedID\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Evidence = \"Evidence\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Issuer = \"Issuer\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.NameID = \"NameID\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.OneTimeUse = \"OneTimeUse\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.ProxyRestricton = \"ProxyRestriction\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Statement = \"Statement\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.Subject = \"Subject\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.SubjectConfirmation = \"SubjectConfirmation\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.SubjectConfirmationData = \"SubjectConfirmationData\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Elements.SubjectLocality = \"SubjectLocality\" -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing JsonWebKey and JsonWebKeyConverter Static Methods in C#\nDESCRIPTION: These snippets define static methods for creating JsonWebKey objects and converting between different security key types.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_42\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKey.Create(string json) -> Microsoft.IdentityModel.Tokens.JsonWebKey\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromRSASecurityKey(Microsoft.IdentityModel.Tokens.RsaSecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromSecurityKey(Microsoft.IdentityModel.Tokens.SecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromSymmetricSecurityKey(Microsoft.IdentityModel.Tokens.SymmetricSecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\n```\n\n----------------------------------------\n\nTITLE: Cryptographic Provider and Key Management Error Constants in C#\nDESCRIPTION: Constants for error messages related to custom crypto providers, key wrapping, elliptical curve operations, and key management.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10645 = \"IDX10645: Elliptical Curve not supported for curveId: '{0}'\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10646 = \"IDX10646: A CustomCryptoProvider was set and returned 'true' for IsSupportedAlgorithm(Algorithm: '{0}', Key: '{1}'), but Create.(algorithm, args) as '{2}' == NULL.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10647 = \"IDX10647: A CustomCryptoProvider was set and returned 'true' for IsSupportedAlgorithm(Algorithm: '{0}'), but Create.(algorithm, args) as '{1}' == NULL.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10657 = \"IDX10657: The SecurityKey provided for the symmetric key wrap algorithm cannot be converted to byte array. Type is: '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10658 = \"IDX10658: WrapKey failed, exception from cryptographic operation: '{0}'\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10659 = \"IDX10659: UnwrapKey failed, exception from cryptographic operation: '{0}'\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10661 = \"IDX10661: Unable to create the KeyWrapProvider.\\nKeyWrapAlgorithm: '{0}', SecurityKey: '{1}'\\n is not supported.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10663 = \"IDX10663: Failed to create symmetric algorithm with SecurityKey: '{0}', KeyWrapAlgorithm: '{1}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10674 = \"IDX10674: JsonWebKeyConverter does not support SecurityKey of type: {0}\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10675 = \"IDX10675: Cannot create a ECDsa object from the '{0}', the bytes from the decoded value of '{1}' must be less than the size associated with the curve: '{2}'. Size was: '{3}'.\"\n```\n\n----------------------------------------\n\nTITLE: Microsoft.IdentityModel Virtual Methods for Token Processing and Validation\nDESCRIPTION: Contains virtual method definitions from the Microsoft.IdentityModel namespace for processing JSON Web Tokens, handling security tokens, and validating tokens. These methods are part of the Azure Active Directory authentication infrastructure.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_60\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentity(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters) -> System.Security.Claims.ClaimsIdentity\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentity(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, string issuer) -> System.Security.Claims.ClaimsIdentity\nvirtual Microsoft.IdentityModel.Tokens.AesGcm.Dispose(bool disposing) -> void\nvirtual Microsoft.IdentityModel.Tokens.AsymmetricAdapter.Dispose(bool disposing) -> void\nvirtual Microsoft.IdentityModel.Tokens.SecurityKey.InternalId.get -> string\nvirtual Microsoft.IdentityModel.Tokens.SecurityToken.CreateClaims(string issuer) -> System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>\nvirtual Microsoft.IdentityModel.Tokens.SignatureProvider.ObjectPoolSize.get -> int\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.CreateClaimsIdentityInternal(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters tokenValidationParameters, string issuer) -> System.Security.Claims.ClaimsIdentity\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.CreateClaimsIdentityInternal(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, string issuer) -> System.Security.Claims.ClaimsIdentity\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.Tokens.SecurityToken token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\nvirtual Microsoft.IdentityModel.Tokens.TokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\nvirtual Microsoft.IdentityModel.Tokens.ValidationError.AddAdditionalInformation(Microsoft.IdentityModel.Tokens.ISecurityTokenException exception) -> void\nvirtual Microsoft.IdentityModel.Tokens.ValidationError.CreateException() -> System.Exception\nvirtual Microsoft.IdentityModel.Tokens.ValidationError.GetException() -> System.Exception\nvirtual Microsoft.IdentityModel.Tokens.ValidationParameters.Clone() -> Microsoft.IdentityModel.Tokens.ValidationParameters\nvirtual Microsoft.IdentityModel.Tokens.ValidationParameters.CreateClaimsIdentity(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, string issuer) -> System.Security.Claims.ClaimsIdentity\n```\n\n----------------------------------------\n\nTITLE: Implementing SymmetricKeyWrapProvider Methods in C#\nDESCRIPTION: These snippets override methods in the SymmetricKeyWrapProvider class, including Algorithm, Context, Dispose, Key, UnwrapKey, and WrapKey operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.Algorithm.get -> string\noverride Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.Context.get -> string\noverride Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.Context.set -> void\noverride Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.Dispose(bool disposing) -> void\noverride Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.Key.get -> Microsoft.IdentityModel.Tokens.SecurityKey\noverride Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.UnwrapKey(byte[] keyBytes) -> byte[]\noverride Microsoft.IdentityModel.Tokens.SymmetricKeyWrapProvider.WrapKey(byte[] keyBytes) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Creating Saml2AuthenticationStatement Class in C#\nDESCRIPTION: This snippet defines the Saml2AuthenticationStatement class, which represents an authentication statement in a SAML2 assertion. It includes properties for authentication context, instant, and session information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.AuthenticationContext.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationContext\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.AuthenticationContext.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.AuthenticationInstant.get -> System.DateTime\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.AuthenticationInstant.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.Saml2AuthenticationStatement(Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationContext authenticationContext) -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.Saml2AuthenticationStatement(Microsoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationContext authenticationContext, System.DateTime authenticationInstant) -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.SessionIndex.get -> string\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.SessionIndex.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.SessionNotOnOrAfter.get -> System.DateTime?\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.SessionNotOnOrAfter.set -> void\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.SubjectLocality.get -> Microsoft.IdentityModel.Tokens.Saml2.Saml2SubjectLocality\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AuthenticationStatement.SubjectLocality.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlSubject Class in C#\nDESCRIPTION: This snippet defines the SamlSubject class with various properties for handling SAML subject information, including confirmation methods, keys, and naming attributes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.ConfirmationData.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.ConfirmationData.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.ConfirmationMethods.get -> System.Collections.Generic.ICollection<string>\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.Key.get -> Microsoft.IdentityModel.Tokens.SecurityKey\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.Key.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.KeyInfo.get -> Microsoft.IdentityModel.Xml.KeyInfo\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.KeyInfo.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.Name.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.Name.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.NameFormat.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.NameFormat.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.NameQualifier.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.NameQualifier.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.SamlSubject() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlSubject.SamlSubject(string nameFormat, string nameQualifier, string name) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants in C#\nDESCRIPTION: Error and validation message constants used throughout the Identity Model for consistent error reporting and logging.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10000 = \"IDX10000: The parameter '{0}' cannot be a 'null' or an empty object. \"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10001 = \"IDX10001: Invalid argument '{0}'. Argument must be of type '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10002 = \"IDX10002: Unknown exception type returned. Type: '{0}'. Message: '{1}'.\"\n```\n\n----------------------------------------\n\nTITLE: Defining XML Signature Constants in C#\nDESCRIPTION: Constants defining XML signature namespaces, element names, attribute names, and prefixes used in XML digital signature processing. These constants provide standardized strings for XML signature operations following W3C specifications.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.Algorithm = \"Algorithm\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.AnyUri = \"anyURI\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.Id = \"Id\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.NcName = \"NCName\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.Nil = \"nil\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.PrefixList = \"PrefixList\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.Type = \"type\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Attributes.URI = \"URI\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.CanonicalizationMethod = \"CanonicalizationMethod\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.DigestMethod = \"DigestMethod\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.DigestValue = \"DigestValue\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.Exponent = \"Exponent\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.InclusiveNamespaces = \"InclusiveNamespaces\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.KeyInfo = \"KeyInfo\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.KeyName = \"KeyName\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.KeyValue = \"KeyValue\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.Modulus = \"Modulus\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.Object = \"Object\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.Reference = \"Reference\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.RetrievalMethod = \"RetrievalMethod\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.RSAKeyValue = \"RSAKeyValue\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.Signature = \"Signature\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.SignatureMethod = \"SignatureMethod\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.SignatureValue = \"SignatureValue\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.SignedInfo = \"SignedInfo\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.Transform = \"Transform\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.TransformationParameters = \"TransformationParameters\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.Transforms = \"Transforms\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509Certificate = \"X509Certificate\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509CRL = \"X509CRL\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509Data = \"X509Data\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509IssuerName = \"X509IssuerName\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509IssuerSerial = \"X509IssuerSerial\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509SerialNumber = \"X509SerialNumber\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509SKI = \"X509SKI\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Elements.X509SubjectName = \"X509SubjectName\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Log Message Constants in C#\nDESCRIPTION: This code defines a comprehensive set of constants for error and informational log messages related to SAML token processing in the Microsoft.IdentityModel.Tokens.Saml namespace. These constants provide standardized text for logging issues with SAML assertion validation, reading/writing operations, and security token handling.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11100 = \"IDX11100: Saml Only one element of type '{0}' is supported.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11102 = \"IDX11102: Saml An AuthorizationDecisionStatement must have at least one Action.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11104 = \"IDX11104: Saml Name cannot be null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11107 = \"IDX11107: Saml A Subject requires a NameIdentifier or ConfirmationMethod.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11108 = \"IDX11108: Saml AuthorityBinding.AuthorityKind is not well formed. Is should be of the form str:str, it is '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11110 = \"IDX11110: The SamlSecurityToken must have a value for its Assertion property.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11111 = \"IDX11111: When reading '{0}', '{1}' was not a Absolute Uri, was: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11112 = \"IDX11112: Exception thrown while reading '{0}' for SamlSecurityToken. Inner exception: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11114 = \"IDX11114: Unable to read SamlSecurityToken. Expecting XmlReader sto be at element: '{0}', found 'Empty Element'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11115 = \"IDX11115: Unable to read SamlSecurityToken. Element: '{0}' was missing Attribute: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11116 = \"IDX11116: Unable to read SamlSecurityToken. MajorVersion must be '1' was: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11117 = \"IDX11117: Unable to read SamlSecurityToken. MinorVersion must be '1' was: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11118 = \"IDX11118: Unable to read condition : '{0}'. SamlSecurityToken only support AudienceRestrictionCondition and DoNotCacheCondition.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11120 = \"IDX11120: Unable to read SamlSecurityToken. Expecting XmlReader to be at element: '{0}', found: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11121 = \"IDX11121: Invalid SAML AssertionID: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11122 = \"IDX11122: Exception thrown while reading '{0}' for SamlSecurityToken. Inner exception: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11123 = \"IDX11123: Unable to read SamlSecurityToken. Expecting XmlReader to be at element: '{0}', found 'Empty Element'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11124 = \"IDX11124: Unable to read SamlSecurityToken. Unexpecting element: '{0}' in element: '{1}' has been found.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11125 = \"IDX11125: Unable to read SamlSecurityToken. Missing data in element: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11126 = \"IDX11126: A <saml:'{0}'> contained unrecognized content: '{1}'.The schema allows arbitrary XML elements on this element without explicit schema extension.To handle the content, extend SamlSerializer.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11127 = \"IDX11127: Saml unable to read Conditions.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11128 = \"IDX11128: Saml unable to read Advice.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11129 = \"IDX11129: Saml unable to read Statement.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11130 = \"IDX11130: When reading '{0}', no Statements were found.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11131 = \"IDX11131: Unable to read for SamlSecurityToken, the AttributeStatement does not contain any Attributes.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11132 = \"IDX11132: The Attribute in SamlSecurityToken does not contain any AttributeValue.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11133 = \"IDX11133: The <saml:Evidence> element must contain at least one assertion or assertion reference.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11134 = \"IDX11134: Unable to read SamlSecurityToken. Expecting XmlReader to be at element: '{0}', found: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11135 = \"IDX11135: Unable to read SamlSecurityToken. Saml element '{0}' must have value.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11136 = \"IDX11136: 'AuthorizationDecisionStatement' cannot be empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11137 = \"IDX11137: 'SamlAction' must have a value.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11312 = \"IDX11312: Unable to validate token. A SamlSamlAttributeStatement can only have one SamlAttribute of type 'Actor'. This special SamlAttribute is used in delegation scenarios.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11313 = \"IDX11313: Unable to process Saml attribute. A SamlSubject must contain either or both of Name and ConfirmationMethod.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11314 = \"IDX11314: The AttributeValueXsiType of a SAML Attribute must be a string of the form 'prefix#suffix', where prefix and suffix are non-empty strings. Found: '{0}'\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11400 = \"IDX11400: The '{0}', can only process SecurityTokens of type: '{1}'. The SecurityToken received is of type: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11401 = \"IDX11401: Unable to validate token. TokenValidationParameters.RequireAudience is true but no AudienceRestrictions were found in the inbound token.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11402 = \"IDX11402: Unable to read SamlSecurityToken. Exception thrown: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11501 = \"IDX11501: SamlAssertion Id cannot be null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11502 = \"IDX11502: Value is not an AbsoluteUri: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11503 = \"IDX11503: SamlAssertion Id is not well formed: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11504 = \"IDX11504: Issuer cannot be null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11505 = \"IDX11505: A SamlAssertion must have at least one statement.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11506 = \"IDX11506: A SamlAttribute Value cannot be null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11507 = \"IDX11507: SAML AuthorityKind missing name.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11508 = \"IDX11508: SAML AuthorizationDecision should have one Action.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11509 = \"IDX11509: SAML Evidence should have one Assertion.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11510 = \"IDX11510: SAML Subject requires ConfirmationMethod when ConfirmationData or KeyInfo is specified.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11511 = \"IDX11511: SAML unable to read Attribute.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11512 = \"IDX11512: SAML AuthorityBinding missing Binding on read.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11513 = \"IDX11513: SAML AuthorityBinding missing Location on read.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11514 = \"IDX11514: SamlSubjectEqualityComparer cannot be null.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11515 = \"IDX11515: Each statement in Assertion.Statements has to be a SamlSubjectStatement\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11516 = \"IDX11516: We could not write the SamlStatement of type:'{0}'. You will need to override this method to write this statement.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11517 = \"IDX11517: Exception thrown while writing '{0}' for SamlSecurityToken. Inner exception: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11518 = \"IDX11518: Unable to writen SamlAssertion: SamlSubject.Name and SamlSubject.ConfirmationMethods.Count == 0.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11521 = \"IDX11521: Multiple name identifier claim is not allowed in tokenDescriptor.Subject.Claims.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11522 = \"IDX11522: More than one delegates acting as an identity are found in Saml attribute.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11523 = \"IDX11523: The claim type must have namespace and name which separated by slash. Input claim: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11800 = \"IDX11800: Unable to write SamlAssertion: {0} is required, {1}.{2} is null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11900 = \"IDX11900: Unable to write SamlAssertion: {0} is required, {1}.{2} is null or empty.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11901 = \"IDX11901: Unable to write SamlAssertion: {0}.{1} is empty. This statement must contain at least one Action.\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11902 = \"IDX11902: Unable to write SamlAssertion: SamlEvidence must have at least one assertion or assertion reference.\" -> string\n```\n\n----------------------------------------\n\nTITLE: JsonClaimSet Claim Creation Methods\nDESCRIPTION: Static methods for creating claims from JSON elements and objects. These methods handle the conversion of different JSON data types to System.Security.Claims.Claim objects.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet.CreateClaimFromJsonElement(string claimType, string issuer, System.Text.Json.JsonElement jsonElement) -> System.Security.Claims.Claim\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet.CreateClaimFromObject(System.Collections.Generic.List<System.Security.Claims.Claim> claims, string claimType, object value, string issuer) -> void\n```\n\n----------------------------------------\n\nTITLE: JWT Header Class Methods and Constructors in C#\nDESCRIPTION: Methods and constructors for the JwtHeader class. These methods allow for manipulating JWT headers, including adding claims, retrieving standard claims, and initializing headers with various parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.IdentityModel.Tokens.Jwt.JwtHeader.AddAdditionalClaims(System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims, bool setDefaultCtyClaim) -> void\nSystem.IdentityModel.Tokens.Jwt.JwtHeader.ClassName -> string\nSystem.IdentityModel.Tokens.Jwt.JwtHeader.GetStandardClaim(string claimType) -> string\nSystem.IdentityModel.Tokens.Jwt.JwtHeader.JwtHeader(Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string, string> outboundAlgorithmMap, string tokenType, System.Collections.Generic.IDictionary<string, object> additionalHeaderClaims, bool includeKeyIdInHeader) -> void\nSystem.IdentityModel.Tokens.Jwt.JwtHeader.JwtHeader(Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, System.Collections.Generic.IDictionary<string, string> outboundAlgorithmMap, string tokenType, System.Collections.Generic.IDictionary<string, object> additionalInnerHeaderClaims, bool includeKeyIdInHeader) -> void\nSystem.IdentityModel.Tokens.Jwt.JwtHeader.JwtHeader(string json) -> void\n```\n\n----------------------------------------\n\nTITLE: Hashing and Compression Algorithm Error Constants in C#\nDESCRIPTION: Constants for error messages related to keyed hash algorithms, hash creation failures, and compression/decompression operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10666 = \"IDX10666: Unable to create KeyedHashAlgorithm for algorithm '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10667 = \"IDX10667: Unable to obtain required byte array for KeyHashAlgorithm from SecurityKey: '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10668 = \"IDX10668: Unable to create '{0}', algorithm '{1}'; key: '{2}' is not supported.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10669 = \"IDX10669: Failed to create symmetric algorithm.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10679 = \"IDX10679: Failed to decompress using algorithm '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10680 = \"IDX10680: Failed to compress using algorithm '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10682 = \"IDX10682: Compression algorithm '{0}' is not supported.\"\n```\n\n----------------------------------------\n\nTITLE: Parsing WsFederation Messages in C#\nDESCRIPTION: These static methods parse WsFederation messages from query strings or URIs. They are part of the WsFederationMessage class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.FromQueryString(string queryString) -> Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMessage\n\nstatic Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.FromUri(System.Uri uri) -> Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMessage\n```\n\n----------------------------------------\n\nTITLE: Reading JWT Payload Values in C#\nDESCRIPTION: Virtual method for reading payload values from a JWT using a Utf8JsonReader and storing them in a claims dictionary\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadPayloadValue(ref System.Text.Json.Utf8JsonReader reader, System.Collections.Generic.IDictionary<string, object> claims) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlCondition and SamlConditions Classes in C#\nDESCRIPTION: This snippet shows the implementation of SamlCondition and SamlConditions classes, with SamlConditions containing properties for Conditions, NotBefore, and NotOnOrAfter.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlCondition\nMicrosoft.IdentityModel.Tokens.Saml.SamlCondition.SamlCondition() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.Conditions.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml.SamlCondition>\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.NotBefore.get -> System.DateTime\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.NotBefore.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.NotOnOrAfter.get -> System.DateTime\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.NotOnOrAfter.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.SamlConditions(System.DateTime notBefore, System.DateTime notOnOrAfter) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.SamlConditions(System.DateTime notBefore, System.DateTime notOnOrAfter, System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlCondition> conditions) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlAuthorityBinding Class in C#\nDESCRIPTION: This snippet shows the implementation of the SamlAuthorityBinding class with properties for AuthorityKind, Binding, and Location, along with a constructor.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.AuthorityKind.get -> System.Xml.XmlQualifiedName\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.AuthorityKind.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.Binding.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.Binding.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.Location.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.Location.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.SamlAuthorityBinding(System.Xml.XmlQualifiedName authorityKind, string binding, string location) -> void\n```\n\n----------------------------------------\n\nTITLE: SAML Audience Restriction Condition Class Definition in C#\nDESCRIPTION: The SamlAudienceRestrictionCondition class implements a restriction on the audiences for which a SAML assertion is valid. It contains a collection of audience URIs.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAudienceRestrictionCondition\nMicrosoft.IdentityModel.Tokens.Saml.SamlAudienceRestrictionCondition.Audiences.get -> System.Collections.Generic.ICollection<System.Uri>\nMicrosoft.IdentityModel.Tokens.Saml.SamlAudienceRestrictionCondition.SamlAudienceRestrictionCondition(System.Collections.Generic.IEnumerable<System.Uri> audiences) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAudienceRestrictionCondition.SamlAudienceRestrictionCondition(System.Uri audience) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WsTrust Constants in C#\nDESCRIPTION: This snippet defines constants for WsTrust, including element names, namespaces, and actions. These constants are used in implementing WS-Trust protocol in the Microsoft Identity Model Extensions for .NET.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.WsTrustConstants.Elements.KeyType = \"KeyType\" -> string\nconst Microsoft.IdentityModel.Xml.WsTrustConstants.Elements.Lifetime = \"Lifetime\" -> string\n// ... (more WsTrust constants)\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_1_3.Actions.Issue = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" -> string\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_1_3.Namespace = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512\" -> string\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_1_3.PreferredPrefix = \"t\" -> string\nconst Microsoft.IdentityModel.Xml.WsTrustConstants_1_4.Actions.Issue = \"http://docs.oasis-open.org/ws-sx/ws-trust/200512/RST/Issue\" -> string\n```\n\n----------------------------------------\n\nTITLE: Validating Token Type in C#\nDESCRIPTION: This method validates the type of a security token against the provided validation parameters and call context.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_56\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateTokenType(string type, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedTokenType>\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Log Message Constants in C#\nDESCRIPTION: Constants defining log messages for SAML token handling errors. These provide standardized error message templates for logging issues during SAML token processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.LogMessages.IDX11950 = \"IDX11950: API is not supported\"\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestValidationResult Class Properties in C#\nDESCRIPTION: This snippet defines the properties of the SignedHttpRequestValidationResult class, including AccessTokenValidationResult, Exception, IsValid, SignedHttpRequest, and ValidatedSignedHttpRequest.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.AccessTokenValidationResult.get -> Microsoft.IdentityModel.Tokens.TokenValidationResult\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.AccessTokenValidationResult.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.Exception.get -> System.Exception\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.Exception.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.IsValid.get -> bool\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.IsValid.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.SignedHttpRequest.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.SignedHttpRequest.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.ValidatedSignedHttpRequest.get -> Microsoft.IdentityModel.Tokens.SecurityToken\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationResult.ValidatedSignedHttpRequest.set -> void\n```\n\n----------------------------------------\n\nTITLE: JWT Payload Private Fields in C#\nDESCRIPTION: Private fields of the JwtPayload class representing standard JWT claims. These fields store information like audiences, issuer, subject, expiration time, and other standard JWT claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._audiences -> System.Collections.Generic.List<string>\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._azp -> string\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._exp -> long?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._expDateTime -> System.DateTime?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._iat -> long?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._iatDateTime -> System.DateTime?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._id -> string\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._iss -> string\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._jti -> string\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._nbf -> long?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._nbfDateTime -> System.DateTime?\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._sub -> string\nSystem.IdentityModel.Tokens.Jwt.JwtPayload._tid -> string\n```\n\n----------------------------------------\n\nTITLE: Defining IdentityModelEventSource Class in C#\nDESCRIPTION: Defines the IdentityModelEventSource class with methods for writing logs at different levels and properties for controlling log behavior.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.LogLevel.get -> System.Diagnostics.Tracing.EventLevel\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.LogLevel.set -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.Write(System.Diagnostics.Tracing.EventLevel level, System.Exception innerException, string message) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.Write(System.Diagnostics.Tracing.EventLevel level, System.Exception innerException, string message, params object[] args) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteAlways(string message) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteAlways(string message, params object[] args) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteCritical(string message) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteCritical(string message, params object[] args) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteError(string message) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteError(string message, params object[] args) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteInformation(string message) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteInformation(string message, params object[] args) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteVerbose(string message) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteVerbose(string message, params object[] args) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteWarning(string message) -> void\nMicrosoft.IdentityModel.Logging.IdentityModelEventSource.WriteWarning(string message, params object[] args) -> void\n```\n\n----------------------------------------\n\nTITLE: ConfigurationManager GetConfigurationAsync Method in C#\nDESCRIPTION: Virtual method in the ConfigurationManager class for asynchronously retrieving configuration with support for cancellation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.ConfigurationManager<T>.GetConfigurationAsync(System.Threading.CancellationToken cancel) -> System.Threading.Tasks.Task<T>\n```\n\n----------------------------------------\n\nTITLE: Writing JWE Header in C#\nDESCRIPTION: These methods write the JWE (JSON Web Encryption) header using various parameters such as encrypting credentials, compression algorithm, and token type. They return the header as a byte array.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.WriteJweHeader(Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, string tokenType, System.Collections.Generic.IDictionary<string, object> jweHeaderClaims) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.WriteJweHeader(Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, string compressionAlgorithm, string tokenType, System.Collections.Generic.IDictionary<string, object> jweHeaderClaims, bool includeKeyIdInHeader) -> byte[]\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.WriteJweHeader(Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> byte[]\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestUtilities and ValidationContext Classes in C#\nDESCRIPTION: This snippet defines the SignedHttpRequestUtilities and SignedHttpRequestValidationContext classes. These classes likely contain utility methods and validation context for Signed HTTP Requests, but their implementation details are not provided in the given content.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestUtilities\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationContext\n```\n\n----------------------------------------\n\nTITLE: Defining SAML2 Log Message Constants in C#\nDESCRIPTION: String constants for SAML2 log message templates used for error reporting. These provide standardized error messages for various failure scenarios during SAML2 token processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13001 = \"IDX13001: A SAML2 assertion that specifies an AuthenticationContext DeclarationReference is not supported.To handle DeclarationReference, extend the Saml2SecurityTokenHandler and override ProcessAuthenticationStatement.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13002 = \"IDX13002: Unable to validate token. TokenValidationParameters.RequireAudience is true but no AudienceRestrictions were found in the inbound token.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13003 = \"IDX13003: Unable to read Saml2SecurityToken. Exception thrown: '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13102 = \"IDX13102: Exception thrown while reading '{0}' for Saml2SecurityToken. Inner exception: '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13103 = \"IDX13103: Unable to read '{0}' for Saml2SecurityToken. The element type '{1}' appears to have a custom format that cannot be parsed. If this is expected, you will need to override '{2}.{3}'.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13104 = \"IDX13104: Unable to read Saml2SecurityToken. Expecting XmlReader to be at element: '{0}', found 'Empty Element'\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13105 = \"IDX13105: Unable to read Saml2SecurityToken. Expecting XmlReader to be at element: '{0}', found: '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13106 = \"IDX13106: Unable to read for Saml2SecurityToken. Element: '{0}' as missing Attribute: '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13107 = \"IDX13107: When reading '{0}', '{1}' was not a Absolute Uri, was: '{2}'.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13108 = \"IDX13108: When reading '{0}', Assertion.Subject is null and no Statements were found. [Saml2Core, line 585].\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13109 = \"IDX13109: When reading '{0}', Assertion.Subject is null and an Authentication, Attribute or AuthorizationDecision Statement was found. and no Statements were found. [Saml2Core, lines 1050, 1168, 1280].\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13110 = \"IDX13110: The Saml2SecurityToken must have a value for its Assertion property.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13117 = \"IDX13117: A <saml:EncryptedAttribute> was encountered while processing the attribute statement.To handle encrypted attributes, extend the Saml2SecurityTokenHandler and override ReadAttributeStatement.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13118 = \"IDX13118: A <saml:AuthnContextDecl> element was encountered.To handle by-value authentication context declarations, extend Saml2SecurityTokenHandler and override ReadAuthenticationContext.In addition, it may be necessary to extend Saml2AuthenticationContext so that its data model can accommodate the declaration value.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13119 = \"IDX13119: An abstract element was encountered which does not specify its concrete type. Element name: '{0}' Namespace: '{1}'\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13120 = \"IDX13120: A <saml:Conditions> element contained more than one '{0}' condition.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13121 = \"IDX13121: A <saml:Condition> was encountered which specifies an unrecognized concrete type.To handle a custom Condition, extend Saml2SecurityTokenHandler and override ReadConditions.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13122 = \"IDX13122: The <saml:Evidence> element must contain at least one assertion or assertion reference.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13124 = \"IDX13124: The SAML NameIdentifier '{0}' is of format '{1}' and NameQualifier/SPNameQualifier/SPProvidedID is not omitted.\"\nconst Microsoft.IdentityModel.Tokens.Saml2.LogMessages.IDX13125 = \"IDX13125: A Saml2Subject that does not specify an NameId cannot have an empty SubjectConfirmations collection.\"\n```\n\n----------------------------------------\n\nTITLE: SAML2 Exception Classes\nDESCRIPTION: Exception classes for handling SAML2-specific errors during token reading and writing operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenException\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenReadException\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenWriteException\n```\n\n----------------------------------------\n\nTITLE: Defining Error Message Constants for Signed HTTP Request Validation\nDESCRIPTION: Constants containing error messages (IDX23001-IDX23038) used for various validation scenarios in signed HTTP request processing, including URI validation, HTTP method validation, claim validation, and key resolution errors.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.LogMessages.IDX23001 = \"IDX23001: HttpRequestUri must be absolute when creating or validating the 'u' claim. HttpRequestUri: '{0}'.\"\n```\n\n----------------------------------------\n\nTITLE: Error Message Constants for XML Processing in Identity Model\nDESCRIPTION: Constant string error messages used throughout the Microsoft.IdentityModel.Xml namespace for XML parsing, validation and signature processing errors. These constants provide standardized error messages with placeholder parameters for diagnostic purposes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30011 = \"IDX30011: Unable to read XML. Expecting XmlReader to be at ns.element: '{0}.{1}', found: '{2}.{3}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30013 = \"IDX30013: Unable to read XML. While reading element '{0}', Required attribute was not found : '{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30015 = \"IDX30015: Only a single '{0}' element is supported. Found more than one.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30016 = \"IDX30016: Exception thrown while reading '{0}'. See inner exception for more details.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30017 = \"IDX30017: Exception thrown while reading '{0}'. Caught exception: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30019 = \"IDX30019: Unable to read XML. A second <Signature> element was found. The EnvelopedSignatureReader can only process one <Signature>.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30020 = \"IDX30020: Unable to read XML. A second <Reference> element was found. The EnvelopedSignatures can only have one <Reference>.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30022 = \"IDX30022: Unable to read XML. Expecting XmlReader to be at a StartElement, NodeType is: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30024 = \"IDX30024: Unable to read XML. Expecting XmlReader to be at element: '{0}', found: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30025 = \"IDX30025: Unable to read XML. Expecting XmlReader to be at EndElement: '{0}'. Found XmlNode 'type.name': '{1}.{2}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30026 = \"IDX30026: The reader must be pointing to a StartElement. NodeType is: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30027 = \"IDX30027: InnerReader is null. It is necessary to set InnerReader before making calls to DelegatingXmlDictionaryReader.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30028 = \"IDX30028: InnerWriter is null. It is necessary to set InnerWriter before making calls to DelegatingXmlDictionaryWriter.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30029 = \"IDX30029: The Reference '{0}' has exceeded the number of Transforms that will be processed: '{1}'. If there is a need to increase the number of Transforms, the DSigSerializer.MaximumReferenceTransforms can be increased. The default value is 10.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30100 = \"IDX30100: Unable to process the {0} element. This canonicalization method is not supported: '{1}'. Supported methods are: '{2}', '{3}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30105 = \"IDX30105: Transform must specify an algorithm none was found.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30107 = \"IDX30107: 'InclusiveNamespaces' is not supported.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30108 = \"IDX30108: 'X509Data' cannot be empty.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30200 = \"IDX30200: The 'Signature' did not validate. CryptoProviderFactory: '{0}', SecurityKey: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30201 = \"IDX30201: The 'Reference' did not validate: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30202 = \"IDX30202: The Reference does not have a XmlTokenStream set: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30203 = \"IDX30203: The CryptoProviderFactory: '{0}', CreateForVerifying returned null for key: '{1}', SignatureMethod: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30204 = \"IDX30204: Canonicalization algorithm is not supported: '{0}'. Supported methods are: '{1}', '{2}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30206 = \"IDX30206: The reference '{0}' did not contain a digest.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30207 = \"IDX30207: SignatureMethod is not supported: '{0}'. CryptoProviderFactory: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30208 = \"IDX30208: DigestMethod is not supported: '{0}'. CryptoProviderFactory: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30209 = \"IDX30209: The CryptoProviderFactory: '{0}', CreateHashAlgorithm, returned null for DigestMethod: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30210 = \"IDX30210: The TransformFactory does not support the transform: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30211 = \"IDX30211: The TransfromFactory does not support the canonicalizing transform: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30212 = \"IDX30212: Unable to verify Signature as Signature.SignedInfo is null.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30213 = \"IDX30213: The CryptoProviderFactory: '{0}', CreateForSigning returned null for key: '{1}', SignatureMethod: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30300 = \"IDX30300: KeyInfo skipped unknown element: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30401 = \"IDX30401: Unable to write XML. {0}.{1} is null or empty.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30403 = \"IDX30403: Unable to write XML. One of the values in Reference.Transforms is null or empty.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30404 = \"IDX30404: Unable to write XML. Signature.SignedInfo is null.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30405 = \"IDX30405: Unable to write XML. SignedInfo.Reference is null.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30406 = \"IDX30406: Unsupported NodeType: {0}.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30500 = \"IDX30500: xsi:type attribute was not found. Expected: '{0}':'{1}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30501 = \"IDX30501: xsi:type attribute was did not match. Expected: '{0}':'{1}', Found: '{2}':'{3}'.\" -> string\nconst Microsoft.IdentityModel.Xml.LogMessages.IDX30600 = \"IDX30600: MaximumReferenceTransforms can not be a negative value. value: '{0}'.\" -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing CompressionProviderFactory and CryptoProviderFactory Static Properties in C#\nDESCRIPTION: These snippets define static properties for the CompressionProviderFactory and CryptoProviderFactory classes, including Default and configuration settings.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.CompressionProviderFactory.Default.get -> Microsoft.IdentityModel.Tokens.CompressionProviderFactory\nstatic Microsoft.IdentityModel.Tokens.CompressionProviderFactory.Default.set -> void\nstatic Microsoft.IdentityModel.Tokens.CryptoProviderFactory.Default.get -> Microsoft.IdentityModel.Tokens.CryptoProviderFactory\nstatic Microsoft.IdentityModel.Tokens.CryptoProviderFactory.Default.set -> void\nstatic Microsoft.IdentityModel.Tokens.CryptoProviderFactory.DefaultCacheSignatureProviders.get -> bool\nstatic Microsoft.IdentityModel.Tokens.CryptoProviderFactory.DefaultCacheSignatureProviders.set -> void\nstatic Microsoft.IdentityModel.Tokens.CryptoProviderFactory.DefaultSignatureProviderObjectPoolCacheSize.get -> int\nstatic Microsoft.IdentityModel.Tokens.CryptoProviderFactory.DefaultSignatureProviderObjectPoolCacheSize.set -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing LoggerContext Class in C#\nDESCRIPTION: Defines the LoggerContext class for managing logging context, including activity ID, capture logs flag, and property bag.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Logging.LoggerContext\nMicrosoft.IdentityModel.Logging.LoggerContext.ActivityId.get -> System.Guid\nMicrosoft.IdentityModel.Logging.LoggerContext.ActivityId.set -> void\nMicrosoft.IdentityModel.Logging.LoggerContext.CaptureLogs.get -> bool\nMicrosoft.IdentityModel.Logging.LoggerContext.CaptureLogs.set -> void\nMicrosoft.IdentityModel.Logging.LoggerContext.LoggerContext() -> void\nMicrosoft.IdentityModel.Logging.LoggerContext.LoggerContext(System.Guid activityId) -> void\nMicrosoft.IdentityModel.Logging.LoggerContext.Logs.get -> System.Collections.Generic.ICollection<string>\nMicrosoft.IdentityModel.Logging.LoggerContext.PropertyBag.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Logging.LoggerContext.PropertyBag.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining JWT Class Name and Error Message Constants in C#\nDESCRIPTION: Constants defining class names and error message templates for JWT processing. These error messages cover validation failures, format issues, and processing errors during JWT token handling.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nconst System.IdentityModel.Tokens.Jwt.JwtPayload.ClassName = \"System.IdentityModel.Tokens.Jwt.JwtPayload\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12401 = \"IDX12401: Expires: '{0}' must be after NotBefore: '{1}'.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12706 = \"IDX12706: '{0}' can only write SecurityTokens of type: '{1}', 'token' type is: '{2}'.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12709 = \"IDX12709: CanReadToken() returned false. JWT is not well formed.\\nThe token needs to be in JWS or JWE Compact Serialization Format. (JWS): 'EncodedHeader.EncodedPayload.EncodedSignature'. (JWE): 'EncodedProtectedHeader.EncodedEncryptedKey.EncodedInitializationVector.EncodedCiphertext.EncodedAuthenticationTag'.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12710 = \"IDX12710: Only a single 'Actor' is supported. Found second claim of type: '{0}', value: '{1}'\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12711 = \"IDX12711: actor.BootstrapContext is not a string AND actor.BootstrapContext is not a JWT\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12712 = \"IDX12712: actor.BootstrapContext is null. Creating the token using actor.Claims.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12713 = \"IDX12713: Creating actor value using actor.BootstrapContext(as string)\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12714 = \"IDX12714: Creating actor value using actor.BootstrapContext.rawData\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12715 = \"IDX12715: Creating actor value by writing the JwtSecurityToken created from actor.BootstrapContext\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12720 = \"IDX12720: Token string does not match the token formats: JWE (header.encryptedKey.iv.ciphertext.tag) or JWS (header.payload.signature)\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12721 = \"IDX12721: Creating JwtSecurityToken: Issuer: '{0}', Audience: '{1}'\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12722 = \"IDX12722: Creating security token from the header: '{0}', payload: '{1}'.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12723 = \"IDX12723: Unable to decode the payload '{0}' as Base64Url encoded string.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12729 = \"IDX12729: Unable to decode the header '{0}' as Base64Url encoded string.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12730 = \"IDX12730: Failed to create the token encryption provider.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12735 = \"IDX12735: If JwtSecurityToken.InnerToken != null, then JwtSecurityToken.Header.EncryptingCredentials must be set.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12736 = \"IDX12736: JwtSecurityToken.SigningCredentials is not supported when JwtSecurityToken.InnerToken is set.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12737 = \"IDX12737: EncryptingCredentials set on JwtSecurityToken.InnerToken is not supported.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12738 = \"IDX12738: Header.Cty != null, assuming JWS. Cty: '{0}'.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12739 = \"IDX12739: JWT has three segments but is not in proper JWS format.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12740 = \"IDX12740: JWT has five segments but is not in proper JWE format.\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12741 = \"IDX12741: JWT must have three segments (JWS) or five segments (JWE).\" -> string\nconst System.IdentityModel.Tokens.Jwt.LogMessages.IDX12742 = \"IDX12742: ''{0}' cannot contain the following claims: '{1}'. These values are added by default (if necessary) during security token creation.\" -> string\n```\n\n----------------------------------------\n\nTITLE: Writing JWS Header in C#\nDESCRIPTION: These methods write the JWS (JSON Web Signature) header using a Utf8JsonWriter and various parameters such as signing credentials, encrypting credentials, and header claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.WriteJwsHeader(ref System.Text.Json.Utf8JsonWriter writer, Microsoft.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.WriteJwsHeader(ref System.Text.Json.Utf8JsonWriter writer, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string, object> jweHeaderClaims, System.Collections.Generic.IDictionary<string, object> jwsHeaderClaims, string tokenType) -> void\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.WriteJwsHeader(ref System.Text.Json.Utf8JsonWriter writer, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, Microsoft.IdentityModel.Tokens.EncryptingCredentials encryptingCredentials, System.Collections.Generic.IDictionary<string, object> jweHeaderClaims, System.Collections.Generic.IDictionary<string, object> jwsHeaderClaims, string tokenType, bool includeKeyIdInHeader) -> void\n```\n\n----------------------------------------\n\nTITLE: GetException Override Declaration in C#\nDESCRIPTION: Override method signature for retrieving the exception from an issuer validation error.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.IssuerValidationError.GetException() -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: Configuring AAD Authentication with OWIN Middleware in C#\nDESCRIPTION: This code demonstrates how to set up an ASP.NET application to use Azure Active Directory (AAD) authentication with OWIN middleware. It configures the app with AAD issuer, audience, and token validation parameters, along with specifying custom event handlers for authentication events.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\napp.UseWindowsAzureActiveDirectoryBearerAuthentication(\n    new WindowsAzureActiveDirectoryBearerAuthenticationOptions\n    {\n        TokenValidationParameters = new TokenValidationParameters { ValidAudience = myAudience },\n        Tenant = myTenant\n    });\n\n// or\n\napp.UseWindowsAzureActiveDirectoryBearerAuthentication(\n    new WindowsAzureActiveDirectoryBearerAuthenticationOptions\n    {\n        TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidAudience = myAudience,\n            ValidIssuer = myIssuer\n        }\n    });\n\n// or\n\napp.UseWindowsAzureActiveDirectoryBearerAuthentication(\n    new WindowsAzureActiveDirectoryBearerAuthenticationOptions\n    {\n        Audience = myAudience,\n        Tenant = myTenant,\n        TokenValidationParameters = new TokenValidationParameters\n        {\n            SaveSigninToken = true\n        }\n    });\n\n// or\n\napp.UseWindowsAzureActiveDirectoryBearerAuthentication(\n    new WindowsAzureActiveDirectoryBearerAuthenticationOptions\n    {\n        Audience = myAudience,\n        Tenant = myTenant,\n        TokenValidationParameters = tvp,\n        AuthenticationMode = Microsoft.Owin.Security.AuthenticationMode.Active,\n        Provider = new OAuthBearerAuthenticationProvider\n        {\n            OnApplyChallenge = context =>\n            {\n                context.OwinContext.Response.Headers.AppendValues(\"WWW-Authenticate\", context.Challenge);\n                context.HandleResponse();\n                return Task.FromResult(0);\n            },\n            OnRequestToken = context =>\n            {\n                // ... code to process token request\n                return Task.FromResult(0);\n            },\n            OnValidateIdentity = context =>\n            {\n                // ... code to validate identity\n                return Task.FromResult(0);\n            }\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Defining AAD Issuer Validator Log Messages in C#\nDESCRIPTION: Constant definitions for log messages used in the AAD issuer validation process. These messages provide detailed information about validation failures and other important events.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40001 = \"IDX40001: Issuer: '{0}', does not match any of the valid issuers provided for this application. \" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40002 = \"IDX40002: Microsoft.IdentityModel does not support a B2C issuer with 'tfp' in the URI. See https://aka.ms/ms-id-web/b2c-issuer for details. \" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40003 = \"IDX40003: Neither `tid` nor `tenantId` claim is present in the token obtained from Microsoft identity platform. \" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40004 = \"IDX40004: Token issuer: '{0}', does not contain the `tid` or `tenantId` claim present in the token: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40005 = \"IDX40005: Token issuer: '{0}', does not match the signing key issuer: '{1}'.\" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40007 = \"IDX40007: RequireSignedTokens property on ValidationParameters is set to true, but the issuer signing key is null.\" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40008 = \"IDX40008: When setting LastKnownGoodLifetime, the value must be greater than or equal to zero. value: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40009 = \"IDX40009: Either the 'tid' claim was not found or it didn't have a value.\" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40010 = \"IDX40010: The SecurityToken must be a 'JsonWebToken' or 'JwtSecurityToken'\" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40011 = \"IDX40011: The SecurityToken has multiple instances of the '{0}' claim.\" -> string\nconst Microsoft.IdentityModel.Validators.LogMessages.IDX40012 = \"IDX40012: The cloud instance of the signing key: '{0}', does not match cloud instance from configuration: '{1}'.\" -> string\n```\n\n----------------------------------------\n\nTITLE: ValidationFailureType Class API in Microsoft.IdentityModel.Tokens\nDESCRIPTION: Defines the ValidationFailureType class that represents the type of failure encountered during token validation. It provides a name property and constructor for creating specific failure types.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_39\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ValidationFailureType\nMicrosoft.IdentityModel.Tokens.ValidationFailureType.Name.get -> string\nMicrosoft.IdentityModel.Tokens.ValidationFailureType.ValidationFailureType(string name) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequest Claim Type Constants in C#\nDESCRIPTION: Constants for various claim types used in SignedHttpRequest, including confirmation claim types and signed HTTP request claim types.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.ConfirmationClaimTypes.Cnf = \"cnf\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.ConfirmationClaimTypes.Jku = \"jku\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.ConfirmationClaimTypes.Jwe = \"jwe\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.ConfirmationClaimTypes.Jwk = \"jwk\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.ConfirmationClaimTypes.Kid = \"kid\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.At = \"at\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.B = \"b\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.H = \"h\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.M = \"m\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.Nonce = \"nonce\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.P = \"p\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.Q = \"q\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.Ts = \"ts\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestClaimTypes.U = \"u\" -> string\n```\n\n----------------------------------------\n\nTITLE: JsonClaimSet and ClaimTypeMapping Properties\nDESCRIPTION: Definitions for the internal data structures and mapping properties used for JWT claim handling. These include the JSON claims dictionary and various claim type mapping collections for inbound and outbound claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nreadonly Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet._jsonClaims -> System.Collections.Generic.Dictionary<string, object>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.ClaimTypeMapping.InboundClaimFilter.get -> System.Collections.Generic.ISet<string>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.ClaimTypeMapping.InboundClaimTypeMap.get -> System.Collections.Generic.IDictionary<string, string>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.ClaimTypeMapping.OutboundClaimTypeMap.get -> System.Collections.Generic.IDictionary<string, string>\n```\n\n----------------------------------------\n\nTITLE: JwtSegmentType Enum Definition in C#\nDESCRIPTION: Definition of the JwtSegmentType enum that categorizes different segments of a JWT token. The enum contains Header (0) and Payload (1) values representing the different parts of a JWT token structure.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.JwtSegmentType.Header = 0\nMicrosoft.IdentityModel.Tokens.JwtSegmentType.Payload = 1\n```\n\n----------------------------------------\n\nTITLE: Digital Signature Serialization in C#\nDESCRIPTION: Virtual methods for reading and writing digital signature components, including KeyInfo, SignedInfo, and References.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.CreateKeyInfo(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Xml.KeyInfo\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadCanonicalizationMethod(System.Xml.XmlReader reader) -> string\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadKeyInfo(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Xml.KeyInfo\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadReference(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Xml.Reference\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadReferences(System.Xml.XmlReader reader) -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Xml.Reference>\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadSignature(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Xml.Signature\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadSignatureMethod(System.Xml.XmlReader reader) -> string\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadSignedInfo(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Xml.SignedInfo\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.ReadTransforms(System.Xml.XmlReader reader, Microsoft.IdentityModel.Xml.Reference reference) -> void\n```\n\n----------------------------------------\n\nTITLE: Authenticated Encryption Provider in C#\nDESCRIPTION: Methods for the authenticated encryption provider class which combines encryption and signature verification.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_33\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.CreateSymmetricSignatureProvider() -> Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.ValidKeySize() -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequest Constants in C#\nDESCRIPTION: Constants for HTTP request headers and token types used in SignedHttpRequest.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestConstants.AuthorizationHeader = \"Authorization\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestConstants.AuthorizationHeaderSchemeName = \"PoP\" -> string\nconst Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestConstants.TokenType = \"pop\" -> string\n```\n\n----------------------------------------\n\nTITLE: Declaring Authentication and Encryption Provider Classes in C#\nDESCRIPTION: Definition of classes for authenticated encryption in token processing. These classes handle secure encryption and decryption operations with authentication tags to ensure data integrity, supporting various security algorithms.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Algorithm.get -> string\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.AuthenticatedEncryptionProvider(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm) -> void\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Context.get -> string\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Context.set -> void\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Dispose() -> void\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionProvider.Key.get -> Microsoft.IdentityModel.Tokens.SecurityKey\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionResult\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionResult.AuthenticatedEncryptionResult(Microsoft.IdentityModel.Tokens.SecurityKey key, byte[] ciphertext, byte[] iv, byte[] authenticationTag) -> void\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionResult.AuthenticationTag.get -> byte[]\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionResult.Ciphertext.get -> byte[]\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionResult.IV.get -> byte[]\nMicrosoft.IdentityModel.Tokens.AuthenticatedEncryptionResult.Key.get -> Microsoft.IdentityModel.Tokens.SecurityKey\n```\n\n----------------------------------------\n\nTITLE: SAML Action Class Definition in C#\nDESCRIPTION: The SamlAction class represents an action specified within a SAML statement, typically in authorization decision statements. It includes a namespace URI and a string value describing the action.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAction\nMicrosoft.IdentityModel.Tokens.Saml.SamlAction.Namespace.get -> System.Uri\nMicrosoft.IdentityModel.Tokens.Saml.SamlAction.Namespace.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAction.SamlAction(string value) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAction.SamlAction(string value, System.Uri namespace) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAction.Value.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAction.Value.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Interfaces for Configuration Management in C#\nDESCRIPTION: Declares interfaces for configuration management, including IConfigurationManager<T>, IConfigurationRetriever<T>, and IConfigurationValidator<T>.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.IConfigurationManager<T>\nMicrosoft.IdentityModel.Protocols.IConfigurationManager<T>.GetConfigurationAsync(System.Threading.CancellationToken cancel) -> System.Threading.Tasks.Task<T>\nMicrosoft.IdentityModel.Protocols.IConfigurationManager<T>.RequestRefresh() -> void\nMicrosoft.IdentityModel.Protocols.IConfigurationRetriever<T>\nMicrosoft.IdentityModel.Protocols.IConfigurationRetriever<T>.GetConfigurationAsync(string address, Microsoft.IdentityModel.Protocols.IDocumentRetriever retriever, System.Threading.CancellationToken cancel) -> System.Threading.Tasks.Task<T>\nMicrosoft.IdentityModel.Protocols.IConfigurationValidator<T>\nMicrosoft.IdentityModel.Protocols.IConfigurationValidator<T>.Validate(T configuration) -> Microsoft.IdentityModel.Protocols.ConfigurationValidationResult\n```\n\n----------------------------------------\n\nTITLE: Implementing Security Token Exception Serialization in C#\nDESCRIPTION: Override implementation for serialization of security token exceptions.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SecurityTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Asymmetric Security Classes in C#\nDESCRIPTION: Classes for working with asymmetric security keys and signature providers that use public/private key pairs.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AsymmetricSecurityKey.AsymmetricSecurityKey(Microsoft.IdentityModel.Tokens.SecurityKey key) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider.AsymmetricSignatureProvider(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, bool willCreateSignatures, Microsoft.IdentityModel.Tokens.CryptoProviderFactory cryptoProviderFactory) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider.AsymmetricSignatureProvider(Microsoft.IdentityModel.Tokens.SecurityKey key, string algorithm, Microsoft.IdentityModel.Tokens.CryptoProviderFactory cryptoProviderFactory) -> void\nMicrosoft.IdentityModel.Tokens.AsymmetricSignatureProvider.ValidKeySize() -> bool\n```\n\n----------------------------------------\n\nTITLE: Creating a HMAC Security Key\nDESCRIPTION: Initializes a SymmetricSecurityKey with a byte array for HMAC operations. This demonstrates creating a symmetric key that can be used for token signing with HMAC algorithms.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar symmetricSecurityKey = new SymmetricSecurityKey(key);\n```\n\n----------------------------------------\n\nTITLE: XML Utility Methods in C#\nDESCRIPTION: Static utility methods for XML processing, including logging, string normalization, and XSI type validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Xml.XmlUtil.LogValidationException(string format, System.Exception inner, params object[] args) -> System.Exception\nstatic Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException(string format, params object[] args) -> System.Exception\nstatic Microsoft.IdentityModel.Xml.XmlUtil.LogWriteException(string format, System.Exception inner, params object[] args) -> System.Exception\nstatic Microsoft.IdentityModel.Xml.XmlUtil.NormalizeEmptyString(string string) -> string\nstatic Microsoft.IdentityModel.Xml.XmlUtil.ResolveQName(System.Xml.XmlReader reader, string qualifiedString) -> System.Xml.XmlQualifiedName\nstatic Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType(System.Xml.XmlReader reader, string expectedTypeName, string expectedTypeNamespace) -> void\nstatic Microsoft.IdentityModel.Xml.XmlUtil.ValidateXsiType(System.Xml.XmlReader reader, string expectedTypeName, string expectedTypeNamespace, bool requireDeclaration) -> void\n```\n\n----------------------------------------\n\nTITLE: XML Signature Verification Methods\nDESCRIPTION: Methods for verifying XML signatures including Reference.Verify, Signature.Verify, and SignedInfo.Verify. These methods use cryptographic providers to validate digital signatures in XML documents and return validation errors.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.Reference.Verify(Microsoft.IdentityModel.Tokens.CryptoProviderFactory cryptoProviderFactory, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.SignatureValidationError\nMicrosoft.IdentityModel.Xml.Signature.Verify(Microsoft.IdentityModel.Tokens.SecurityKey key, Microsoft.IdentityModel.Tokens.CryptoProviderFactory cryptoProviderFactory, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.SignatureValidationError\nMicrosoft.IdentityModel.Xml.SignedInfo.CanonicalStream.get -> System.IO.MemoryStream\nMicrosoft.IdentityModel.Xml.SignedInfo.CanonicalStream.set -> void\nMicrosoft.IdentityModel.Xml.SignedInfo.Verify(Microsoft.IdentityModel.Tokens.CryptoProviderFactory cryptoProviderFactory, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.SignatureValidationError\n```\n\n----------------------------------------\n\nTITLE: JsonClaimValueTypes Constants in C#\nDESCRIPTION: Constants used to identify JSON data types within JWT claims. These constants help with identifying the format of claim values when processing tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.JsonWebTokens.JsonClaimValueTypes.Json = \"JSON\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JsonClaimValueTypes.JsonArray = \"JSON_ARRAY\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JsonClaimValueTypes.JsonNull = \"JSON_NULL\" -> string\n```\n\n----------------------------------------\n\nTITLE: ValidationError Class API in Microsoft.IdentityModel.Tokens\nDESCRIPTION: Defines the ValidationError class which encapsulates details about token validation failures including error messages, exception types, and stack frames. It provides methods for creating exceptions, logging, and tracking validation errors.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.ValidationError.AddStackFrame(System.Diagnostics.StackFrame stackFrame) -> Microsoft.IdentityModel.Tokens.ValidationError\nMicrosoft.IdentityModel.Tokens.ValidationError.CreateException(System.Type exceptionType, System.Exception innerException) -> System.Exception\nMicrosoft.IdentityModel.Tokens.ValidationError.ExceptionType.get -> System.Type\nMicrosoft.IdentityModel.Tokens.ValidationError.FailureType.get -> Microsoft.IdentityModel.Tokens.ValidationFailureType\nMicrosoft.IdentityModel.Tokens.ValidationError.GetException() -> System.Exception\nMicrosoft.IdentityModel.Tokens.ValidationError.GetException(System.Type exceptionType, System.Exception innerException) -> System.Exception\nMicrosoft.IdentityModel.Tokens.ValidationError.InnerException.get -> System.Exception\nMicrosoft.IdentityModel.Tokens.ValidationError.InnerValidationError.get -> Microsoft.IdentityModel.Tokens.ValidationError\nMicrosoft.IdentityModel.Tokens.ValidationError.Log(Microsoft.Extensions.Logging.ILogger logger) -> void\nMicrosoft.IdentityModel.Tokens.ValidationError.Message.get -> string\nMicrosoft.IdentityModel.Tokens.ValidationError.MessageDetail.get -> Microsoft.IdentityModel.Tokens.MessageDetail\nMicrosoft.IdentityModel.Tokens.ValidationError.StackFrames.get -> System.Collections.Generic.IList<System.Diagnostics.StackFrame>\nMicrosoft.IdentityModel.Tokens.ValidationError.ValidationError(Microsoft.IdentityModel.Tokens.MessageDetail MessageDetail, Microsoft.IdentityModel.Tokens.ValidationFailureType failureType, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame) -> void\nMicrosoft.IdentityModel.Tokens.ValidationError.ValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, Microsoft.IdentityModel.Tokens.ValidationFailureType failureType, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, Microsoft.IdentityModel.Tokens.ValidationError innerValidationError) -> void\nMicrosoft.IdentityModel.Tokens.ValidationError.ValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, Microsoft.IdentityModel.Tokens.ValidationFailureType failureType, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, System.Exception innerException) -> void\nMicrosoft.IdentityModel.Tokens.ValidationError.ValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, Microsoft.IdentityModel.Tokens.ValidationFailureType validationFailureType, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, System.Exception innerException = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing Base64UrlEncoder Static Methods in C#\nDESCRIPTION: These snippets define static methods in the Base64UrlEncoder class for encoding and decoding Base64Url strings and byte arrays.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_38\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.Decode(string arg) -> string\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.DecodeBytes(string str) -> byte[]\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.Encode(byte[] inArray) -> string\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.Encode(byte[] inArray, int offset, int length) -> string\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.Encode(string arg) -> string\nstatic Microsoft.IdentityModel.Tokens.Base64UrlEncoder.Encode(System.ReadOnlySpan<byte> inArray, System.Span<char> output) -> int\n```\n\n----------------------------------------\n\nTITLE: Defining SamlAuthenticationStatement Class in C#\nDESCRIPTION: This snippet defines the SamlAuthenticationStatement class with properties for IP address and a constructor for initializing the statement with various parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.IPAddress.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.SamlAuthenticationStatement(Microsoft.IdentityModel.Tokens.Saml.SamlSubject samlSubject, string authenticationMethod, System.DateTime authenticationInstant, string dnsAddress, string ipAddress, System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding> authorityBindings) -> void\n```\n\n----------------------------------------\n\nTITLE: XmlTokenStreamWriter Class Member Definitions in C#\nDESCRIPTION: Defines the public properties and methods of the XmlTokenStreamWriter class which handles XML token streams. This class provides functionality to access tokens, write tokens to XML writers, and handle signature replacement.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.Tokens.get -> System.Collections.Generic.IList<Microsoft.IdentityModel.Xml.XmlToken>\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.TokenStream.get -> Microsoft.IdentityModel.Xml.XmlTokenStream\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.Value.get -> string\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.WriteAndReplaceSignature(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Xml.Signature signature, Microsoft.IdentityModel.Xml.DSigSerializer dSigSerializer) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.WriteTo(System.Xml.XmlWriter writer) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.WriteTo(System.Xml.XmlWriter writer, string excludedElement, string excludedNamespace) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.XmlTokenStreamWriter(Microsoft.IdentityModel.Xml.XmlTokenStream tokenStream) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Web Key Conversion in C#\nDESCRIPTION: Static method for converting ECDsa security keys to JSON Web Key format.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromECDsaSecurityKey(Microsoft.IdentityModel.Tokens.ECDsaSecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\n```\n\n----------------------------------------\n\nTITLE: Defining WS-Utility Constants in C#\nDESCRIPTION: Constants for WS-Utility namespace, preferred prefix, and element names used in WS-Federation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.WsUtility.Elements.Created = \"Created\"\nconst Microsoft.IdentityModel.Xml.WsUtility.Elements.Expires = \"Expires\"\nconst Microsoft.IdentityModel.Xml.WsUtility.Namespace = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\"\nconst Microsoft.IdentityModel.Xml.WsUtility.PreferredPrefix = \"wsu\"\n```\n\n----------------------------------------\n\nTITLE: Algorithm Validation Classes in C#\nDESCRIPTION: Classes for validating cryptographic algorithms and handling algorithm validation errors.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.AlgorithmValidationDelegate\nMicrosoft.IdentityModel.Tokens.AlgorithmValidationError\nMicrosoft.IdentityModel.Tokens.AlgorithmValidationError._invalidAlgorithm -> string\nMicrosoft.IdentityModel.Tokens.AlgorithmValidationError.AlgorithmValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, Microsoft.IdentityModel.Tokens.ValidationFailureType validationFailureType, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, string invalidAlgorithm, System.Exception innerException = null) -> void\nMicrosoft.IdentityModel.Tokens.AlgorithmValidationError.InvalidAlgorithm.get -> string\n```\n\n----------------------------------------\n\nTITLE: XML Validation Error Handling Components in C#\nDESCRIPTION: Defines classes for handling XML validation errors and exceptions. Includes constructors and methods to create and manage validation errors with detailed information about the error context.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.XmlValidationError\nMicrosoft.IdentityModel.Xml.XmlValidationError.XmlValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, Microsoft.IdentityModel.Tokens.ValidationFailureType validationFailureType, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, System.Exception innerException = null) -> void\nMicrosoft.IdentityModel.Xml.XmlValidationException.SetValidationError(Microsoft.IdentityModel.Tokens.ValidationError validationError) -> void\noverride Microsoft.IdentityModel.Xml.XmlValidationError.GetException() -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants for Configuration and Validation Delegates in C#\nDESCRIPTION: This snippet defines constant strings for log messages related to configuration retrieval, validation delegate exceptions, and specific validation scenarios. These constants provide detailed information about various aspects of the token validation process and potential issues that may arise.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10261 = \"IDX10261: Unable to retrieve configuration from authority: '{0}'. \\nProceeding with token validation in case the relevant properties have been set manually on the TokenValidationParameters. Exception caught: \\n {1}. See https://aka.ms/validate-using-configuration-manager for additional information.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10262 = \"IDX10262: One of the issuers in TokenValidationParameters.ValidIssuers was null or an empty string. See https://aka.ms/wilson/tokenvalidation for details.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10264 = \"IDX10264: Reading issuer signing keys from validation parameters and configuration.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10265 = \"IDX10265: Reading issuer signing keys from configuration.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10267 = \"IDX10267: '{0}' has been called by a derived class '{1}' which has not implemented this method. For this call graph to succeed, '{1}' will need to implement '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10268 = \"IDX10268: Unable to validate audience, validationParameters.ValidAudiences.Count == 0.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10269 = \"IDX10269: IssuerValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10270 = \"IDX10270: AudienceValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10271 = \"IDX10271: LifetimeValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10272 = \"IDX10272: SignatureValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10273 = \"IDX10273: AlgorithmValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10274 = \"IDX10274: IssuerSigningKeyValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10275 = \"IDX10275: TokenTypeValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10276 = \"IDX10276: TokenReplayValidationDelegate threw an exception, see inner exception.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10277 = \"IDX10277: RequireAudience property on ValidationParameters is set to false. Exiting without validating the audience.\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Blocking Metadata Refresh in C#\nDESCRIPTION: Demonstrates how to enable blocking metadata refresh behavior using an AppContext switch. This allows configuration calls to block when metadata is updated, reverting to the 8.0.1 behavior.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.IdentityModel.UpdateConfigAsBlocking\", true);\n```\n\n----------------------------------------\n\nTITLE: Validating JWT Token Audience in C#\nDESCRIPTION: This method validates if a JWT token's audience claim matches any of the valid audience values. It supports multiple formats of audience claims and handles special validation scenarios for Azure Active Directory.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ninternal static bool IssuerEquals(string issuer1, string issuer2, bool checkIssuerSigningKeyThumbprint = false)\n{\n    if (string.IsNullOrWhiteSpace(issuer1) || string.IsNullOrWhiteSpace(issuer2))\n        return false;\n\n    if (StringComparer.Ordinal.Equals(issuer1, issuer2))\n        return true;\n\n    if (!checkIssuerSigningKeyThumbprint)\n        return false;\n\n    if (issuer1.Contains(\"#\") && issuer2.Contains(\"#\"))\n    {\n        var i1 = issuer1.IndexOf('#');\n        var i2 = issuer2.IndexOf('#');\n        return StringComparer.Ordinal.Equals(issuer1.Substring(0, i1), issuer2.Substring(0, i2));\n    }\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AuthenticationProtocolMessage Class in C#\nDESCRIPTION: Declares the AuthenticationProtocolMessage class with properties and methods for handling authentication protocol messages.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.AuthenticationProtocolMessage() -> void\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.IssuerAddress.get -> string\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.IssuerAddress.set -> void\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.Parameters.get -> System.Collections.Generic.IDictionary<string, string>\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.PostTitle.get -> string\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.PostTitle.set -> void\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.Script.get -> string\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.Script.set -> void\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.ScriptButtonText.get -> string\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.ScriptButtonText.set -> void\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.ScriptDisabledText.get -> string\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.ScriptDisabledText.set -> void\nMicrosoft.IdentityModel.Protocols.AuthenticationProtocolMessage.SetParameter(string parameter, string value) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating a Security Key from RSA Parameters\nDESCRIPTION: Creates an RsaSecurityKey using RSA parameters including modulus and exponent. This example shows how to directly work with RSA cryptographic parameters for token operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar rsaSecurityKey = new RsaSecurityKey(\n    new RSAParameters\n    {\n        Modulus = modulus,\n        Exponent = exponent\n    });\n```\n\n----------------------------------------\n\nTITLE: JSON Web Key Conversion Methods\nDESCRIPTION: Static conversion methods for transforming security keys between different formats, specifically for ECDsa keys to JWK format.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstatic JsonWebKey ConvertFromECDsaSecurityKey(ECDsaSecurityKey key)\n```\n\n----------------------------------------\n\nTITLE: Converting ECDsa Security Keys to JsonWebKey in C#\nDESCRIPTION: API declaration for converting ECDsa security keys to the JsonWebKey format. This utility method enables interoperability between different key representations used in JWT and other token-based authentication systems.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromECDsaSecurityKey(Microsoft.IdentityModel.Tokens.ECDsaSecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\n```\n\n----------------------------------------\n\nTITLE: Defining ConfigurationManager<T> Class in C#\nDESCRIPTION: Declares the ConfigurationManager<T> class with various constructors and methods for managing configurations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.ConfigurationManager(string metadataAddress, Microsoft.IdentityModel.Protocols.IConfigurationRetriever<T> configRetriever) -> void\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.ConfigurationManager(string metadataAddress, Microsoft.IdentityModel.Protocols.IConfigurationRetriever<T> configRetriever, Microsoft.IdentityModel.Protocols.IDocumentRetriever docRetriever) -> void\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.ConfigurationManager(string metadataAddress, Microsoft.IdentityModel.Protocols.IConfigurationRetriever<T> configRetriever, Microsoft.IdentityModel.Protocols.IDocumentRetriever docRetriever, Microsoft.IdentityModel.Protocols.Configuration.LastKnownGoodConfigurationCacheOptions lkgCacheOptions) -> void\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.ConfigurationManager(string metadataAddress, Microsoft.IdentityModel.Protocols.IConfigurationRetriever<T> configRetriever, Microsoft.IdentityModel.Protocols.IDocumentRetriever docRetriever, Microsoft.IdentityModel.Protocols.IConfigurationValidator<T> configValidator) -> void\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.ConfigurationManager(string metadataAddress, Microsoft.IdentityModel.Protocols.IConfigurationRetriever<T> configRetriever, Microsoft.IdentityModel.Protocols.IDocumentRetriever docRetriever, Microsoft.IdentityModel.Protocols.IConfigurationValidator<T> configValidator, Microsoft.IdentityModel.Protocols.Configuration.LastKnownGoodConfigurationCacheOptions lkgCacheOptions) -> void\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.ConfigurationManager(string metadataAddress, Microsoft.IdentityModel.Protocols.IConfigurationRetriever<T> configRetriever, System.Net.Http.HttpClient httpClient) -> void\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.GetConfigurationAsync() -> System.Threading.Tasks.Task<T>\n```\n\n----------------------------------------\n\nTITLE: Symmetric Signature Provider and Cache Virtual Methods in C#\nDESCRIPTION: Virtual methods for SymmetricSignatureProvider and InMemoryCryptoProviderCache classes for handling symmetric signatures and provider caching.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_54\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.GetKeyBytes(Microsoft.IdentityModel.Tokens.SecurityKey key) -> byte[]\nvirtual Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.GetKeyedHashAlgorithm(byte[] keyBytes, string algorithm) -> System.Security.Cryptography.KeyedHashAlgorithm\nvirtual Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.ReleaseKeyedHashAlgorithm(System.Security.Cryptography.KeyedHashAlgorithm keyedHashAlgorithm) -> void\nvirtual Microsoft.IdentityModel.Tokens.InMemoryCryptoProviderCache.Dispose(bool disposing) -> void\n```\n\n----------------------------------------\n\nTITLE: SAML 1.0 Authentication Method Constants\nDESCRIPTION: Defines URN strings for various SAML 1.0 authentication methods including hardware tokens, Kerberos, passwords, and certificates.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.AuthenticationMethods.HardwareTokenString = \"URI:urn:oasis:names:tc:SAML:1.0:am:HardwareToken\";\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.AuthenticationMethods.KerberosString = \"urn:ietf:rfc:1510\";\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants for Token Type Validation in C#\nDESCRIPTION: This snippet defines constant strings for log messages related to token type validation, including handling null or empty token types, validation failures, and successful validations. These constants provide information about the token type validation process.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10255 = \"IDX10255: TypeValidator property on ValidationParameters is null and ValidTypes is either null or empty. Exiting without validating the token type.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10256 = \"IDX10256: Unable to validate the token type. TokenValidationParameters.ValidTypes is set, but the 'typ' header claim is null or empty.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10257 = \"IDX10257: Token type validation failed. Type: '{0}'. Did not match: validationParameters.TokenTypes: '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10258 = \"IDX10258: Token type validated. Type: '{0}'.\"\n```\n\n----------------------------------------\n\nTITLE: JWT Utility Classes in C#\nDESCRIPTION: API signatures for utility classes used in JWT processing, including JwtHeaderUtf8Bytes, JwtPayloadUtf8Bytes, and other supporting classes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JwtHeaderUtf8Bytes\nMicrosoft.IdentityModel.JsonWebTokens.JwtHeaderUtf8Bytes.JwtHeaderUtf8Bytes() -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtPayloadUtf8Bytes\nMicrosoft.IdentityModel.JsonWebTokens.JwtPayloadUtf8Bytes.JwtPayloadUtf8Bytes() -> void\nMicrosoft.IdentityModel.JsonWebTokens.LogMessages\n```\n\n----------------------------------------\n\nTITLE: KeyInfo Processing Methods in C#\nDESCRIPTION: Virtual methods for reading and processing various types of KeyInfo elements, including RSA keys and X509 data.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.TryReadKeyInfoType(System.Xml.XmlReader reader, ref Microsoft.IdentityModel.Xml.KeyInfo keyInfo) -> bool\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.TryReadKeyName(System.Xml.XmlReader reader, out string name) -> bool\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.TryReadKeyValueType(System.Xml.XmlReader reader, ref Microsoft.IdentityModel.Xml.KeyInfo keyInfo) -> bool\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.TryReadRetrievalMethod(System.Xml.XmlReader reader, out string method) -> bool\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.TryReadRSAKeyValue(System.Xml.XmlReader reader, out Microsoft.IdentityModel.Xml.RSAKeyValue value) -> bool\nvirtual Microsoft.IdentityModel.Xml.DSigSerializer.TryReadX509Data(System.Xml.XmlReader reader, out Microsoft.IdentityModel.Xml.X509Data data) -> bool\n```\n\n----------------------------------------\n\nTITLE: JWT Header Static Properties and Methods in C#\nDESCRIPTION: Static properties and methods for JWT headers. Includes DefaultHeaderParameters list and methods like AddClaimsFromJsonElement that help with parsing and manipulating JWT tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nstatic System.IdentityModel.Tokens.Jwt.JwtHeader.DefaultHeaderParameters -> System.Collections.Generic.IList<string>\nstatic System.IdentityModel.Tokens.Jwt.JwtPayload.AddClaimsFromJsonElement(string claimType, string issuer, System.Text.Json.JsonElement jsonElement, System.Collections.Generic.List<System.Security.Claims.Claim> claims) -> void\nstatic System.IdentityModel.Tokens.Jwt.JwtPayload.CreatePayload(byte[] bytes, int length) -> System.IdentityModel.Tokens.Jwt.JwtPayload\n```\n\n----------------------------------------\n\nTITLE: Defining HttpDocumentRetriever Class in C#\nDESCRIPTION: Declares the HttpDocumentRetriever class with methods and properties for retrieving documents via HTTP.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.GetDocumentAsync(string address, System.Threading.CancellationToken cancel) -> System.Threading.Tasks.Task<string>\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpDocumentRetriever() -> void\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpDocumentRetriever(System.Net.Http.HttpClient httpClient) -> void\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersion.get -> System.Version\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersion.set -> void\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.RequireHttps.get -> bool\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.RequireHttps.set -> void\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.SendAdditionalHeaderData.get -> bool\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.SendAdditionalHeaderData.set -> void\n```\n\n----------------------------------------\n\nTITLE: Handling Security Token Exceptions in C#\nDESCRIPTION: API declaration for serialization of security token exceptions. This method ensures proper serialization of exception data when security token operations fail.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SecurityTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Abstract Methods for CryptoProviderCache in C#\nDESCRIPTION: This snippet defines abstract methods for the CryptoProviderCache class, including methods to get cache keys, add and remove signature providers, and retrieve signature providers based on security keys and algorithms.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nabstract Microsoft.IdentityModel.Tokens.CryptoProviderCache.GetCacheKey(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, string algorithm, string typeofProvider) -> string\nabstract Microsoft.IdentityModel.Tokens.CryptoProviderCache.GetCacheKey(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> string\nabstract Microsoft.IdentityModel.Tokens.CryptoProviderCache.TryAdd(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\nabstract Microsoft.IdentityModel.Tokens.CryptoProviderCache.TryGetSignatureProvider(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, string algorithm, string typeofProvider, bool willCreateSignatures, out Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\nabstract Microsoft.IdentityModel.Tokens.CryptoProviderCache.TryRemove(Microsoft.IdentityModel.Tokens.SignatureProvider signatureProvider) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing SecurityKey and SecurityTokenException Methods in C#\nDESCRIPTION: These snippets override methods in the SecurityKey and SecurityTokenException classes, including ToString, Source, and StackTrace operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_32\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SecurityKey.ToString() -> string\noverride Microsoft.IdentityModel.Tokens.SecurityTokenException.Source.get -> string\noverride Microsoft.IdentityModel.Tokens.SecurityTokenException.Source.set -> void\noverride Microsoft.IdentityModel.Tokens.SecurityTokenException.StackTrace.get -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlSubjectEqualityComparer.Equals Method\nDESCRIPTION: Method that compares two SAML subjects for equality. It checks if the subjects contain the same information and returns a boolean indicating whether they are equal.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml.SamlSubjectEqualityComparer.Equals(Microsoft.IdentityModel.Tokens.Saml.SamlSubject subject1, Microsoft.IdentityModel.Tokens.Saml.SamlSubject subject2) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants for Token Operations in C#\nDESCRIPTION: This snippet defines a series of constant strings for log messages related to token operations, cryptographic functions, and security key handling in the Microsoft.IdentityModel.Tokens namespace.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10684 = \"IDX10684: Unable to convert the JsonWebKey to an AsymmetricSecurityKey. Algorithm: '{0}', Key: '{1}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10685 = \"IDX10685: Unable to Sign, Internal SignFunction is not available.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10686 = \"IDX10686: Unable to Verify, Internal VerifyFunction is not available.\"\n```\n\n----------------------------------------\n\nTITLE: Key Unwrap and Authentication Error Constants in C#\nDESCRIPTION: Constants for error messages related to key unwrapping, key validation, and authentication tag verification failures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10618 = \"IDX10618: Key unwrap failed using decryption Keys: '{0}'.\\nExceptions caught:\\n '{1}'.\\ntoken: '{2}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10625 = \"IDX10625: Failed to verify the authenticationTag length, the actual tag length '{0}' does not match the expected tag length '{1}'. authenticationTag: '{2}', algorithm: '{3}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10650 = \"IDX10650: Failed to verify ciphertext with aad '{0}'; iv '{1}'; and authenticationTag '{2}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10665 = \"IDX10665: Data is not authentic\"\n```\n\n----------------------------------------\n\nTITLE: Defining SAML2 Constant Values in C#\nDESCRIPTION: This code snippet defines various constants used by the SAML2 implementation, including XML namespace URIs, claim type identifiers, and serialization prefixes. These constants are used throughout the SAML2 token processing code.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ClaimType2009Namespace = \"http://schemas.xmlsoap.org/ws/2009/09/identity/claims\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ClaimValueTypeSerializationPrefix = \"tn\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ClaimValueTypeSerializationPrefixWithColon = \"tn:\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.GeneratedDateTimeFormat = \"yyyy-MM-ddTHH:mm:ss.fffZ\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.MsIdentityNamespaceUri = \"http://schemas.microsoft.com/ws/2008/06/identity\" -> string\n```\n\n----------------------------------------\n\nTITLE: DelegatingXmlDictionaryWriter Class Implementation in C#\nDESCRIPTION: Implementation of a delegating XmlDictionaryWriter that wraps another XmlDictionaryWriter. This class provides a way to intercept and modify XML writing operations while delegating most functionality to an inner writer.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.DelegatingXmlDictionaryWriter() -> void\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.InnerWriter.get -> System.Xml.XmlDictionaryWriter\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.InnerWriter.set -> void\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.TracingWriter.get -> System.Xml.XmlDictionaryWriter\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.TracingWriter.set -> void\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.UseInnerWriter.get -> System.Xml.XmlDictionaryWriter\n```\n\n----------------------------------------\n\nTITLE: SAML Serialization Utility Methods in C#\nDESCRIPTION: Utility methods for serializing and deserializing SAML tokens, including URI validation and error logging functionality. These methods provide core serialization support for SAML token processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.CanCreateValidUri(string uriString, System.UriKind uriKind) -> bool\n\nstatic Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.LogReadException(string format, params object[] args) -> System.Exception\n\nstatic Microsoft.IdentityModel.Tokens.Saml.SamlSerializer.LogWriteException(string format, System.Exception inner, params object[] args) -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: Validating JWT Tokens using JwtSecurityTokenHandler in C#\nDESCRIPTION: This snippet shows how to validate a JWT token using JwtSecurityTokenHandler. It creates a token handler instance, then validates the token against the provided validation parameters, returning the validated token's ClaimsPrincipal.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar tokenHandler = new JwtSecurityTokenHandler();\nClaimsPrincipal principal = tokenHandler.ValidateToken(token, validationParameters, out SecurityToken validatedToken);\n```\n\n----------------------------------------\n\nTITLE: AAD Protocol Version Enumeration\nDESCRIPTION: Enumeration defining the supported Azure Active Directory protocol versions for token validation. Includes V1, V11, and V2 protocol versions.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Validators.ProtocolVersion.V1 = 0 -> Microsoft.IdentityModel.Validators.ProtocolVersion\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Validators.ProtocolVersion.V11 = 1 -> Microsoft.IdentityModel.Validators.ProtocolVersion\n```\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Validators.ProtocolVersion.V2 = 2 -> Microsoft.IdentityModel.Validators.ProtocolVersion\n```\n\n----------------------------------------\n\nTITLE: Defining AAD Issuer Validator Constants in C#\nDESCRIPTION: Constant definitions for Azure AD issuer validation, including endpoint suffixes, claim types, and authority URLs. These constants are used throughout the AAD validation process.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Validators.AadIssuerValidator.TenantIdTemplate = \"{tenantid}\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidator.V11EndpointSuffix = \"/v1.1\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidator.V11EndpointSuffixWithTrailingSlash = \"/v1.1/\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidator.V2EndpointSuffix = \"/v2.0\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidator.V2EndpointSuffixWithTrailingSlash = \"/v2.0/\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.CloudInstanceNameKey = \"cloud_instance_name\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.Common = \"common\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.FallbackAuthority = \"https://login.microsoftonline.com/\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.OidcEndpoint = \"/.well-known/openid-configuration\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.Organizations = \"organizations\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.TenantId = \"http://schemas.microsoft.com/identity/claims/tenantid\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.Tfp = \"tfp\" -> string\nconst Microsoft.IdentityModel.Validators.AadIssuerValidatorConstants.Tid = \"tid\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Security Token Handler Constants in C#\nDESCRIPTION: Constants used by the SAML security token handler for token processing. These constants support the functionality of the SamlSecurityTokenHandler class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.SamlSecurityTokenHandler.Actor = \"Actor\"\n```\n\n----------------------------------------\n\nTITLE: Implementing LogHelper Class in C#\nDESCRIPTION: Defines the LogHelper class with static methods for logging exceptions, arguments, and various log levels.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Logging.LogHelper\nMicrosoft.IdentityModel.Logging.LogHelper.LogHelper() -> void\nstatic Microsoft.IdentityModel.Logging.LogHelper.FormatInvariant(string format, params object[] args) -> string\nstatic Microsoft.IdentityModel.Logging.LogHelper.IsEnabled(Microsoft.IdentityModel.Abstractions.EventLogLevel level) -> bool\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(string argumentName, string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(string argumentName, string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(string argumentName, System.Exception innerException, string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(string argumentName, System.Exception innerException, string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, string argumentName, string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, string argumentName, string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, string argumentName, System.Exception innerException, string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, string argumentName, System.Exception innerException, string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogArgumentNullException(string argument) -> System.ArgumentNullException\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, System.Exception innerException, string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(System.Diagnostics.Tracing.EventLevel eventLevel, System.Exception innerException, string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(System.Exception innerException, string format, params object[] args) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogException<T>(System.Exception innerException, string message) -> T\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogExceptionMessage(System.Diagnostics.Tracing.EventLevel eventLevel, System.Exception exception) -> System.Exception\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogExceptionMessage(System.Exception exception) -> System.Exception\nstatic Microsoft.IdentityModel.Logging.LogHelper.Logger.get -> Microsoft.IdentityModel.Abstractions.IIdentityLogger\nstatic Microsoft.IdentityModel.Logging.LogHelper.Logger.set -> void\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogInformation(string message, params object[] args) -> void\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogVerbose(string message, params object[] args) -> void\nstatic Microsoft.IdentityModel.Logging.LogHelper.LogWarning(string message, params object[] args) -> void\nstatic Microsoft.IdentityModel.Logging.LogHelper.MarkAsNonPII(object arg) -> object\nstatic Microsoft.IdentityModel.Logging.LogHelper.MarkAsSecurityArtifact(object arg, System.Func<object, string> callback) -> object\nstatic Microsoft.IdentityModel.Logging.LogHelper.MarkAsSecurityArtifact(object arg, System.Func<object, string> callback, System.Func<object, string> callbackUnsafe) -> object\nstatic Microsoft.IdentityModel.Logging.LogHelper.MarkAsUnsafeSecurityArtifact(object arg, System.Func<object, string> callbackUnsafe) -> object\n```\n\n----------------------------------------\n\nTITLE: SAML Attribute Key Comparer in C#\nDESCRIPTION: A utility class that provides functionality to compare SamlAttributes based on their name and namespace, enabling them to be used as keys in collections that require equality comparison.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.AttributeKey(Microsoft.IdentityModel.Tokens.Saml.SamlAttribute attribute) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.Equals(Microsoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey other) -> bool\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.Equals(Microsoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey x, Microsoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey y) -> bool\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.GetHashCode(Microsoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey obj) -> int\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.SamlAttributeKeyComparer() -> void\n```\n\n----------------------------------------\n\nTITLE: SAML 1.0 Type Definition Constants\nDESCRIPTION: Defines type names used in SAML 1.0 token processing for various elements like Action, Assertion, Attribute, and Conditions.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Types.ActionType = \"ActionType\";\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Types.AssertionType = \"AssertionType\";\n```\n\n----------------------------------------\n\nTITLE: Defining SAML 2.0 Attribute Constants in C#\nDESCRIPTION: Declaration of constant string values for SAML 2.0 attributes used in identity tokens and assertions. These constants represent standard attribute names defined in the SAML 2.0 specification.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.IssueInstant = \"IssueInstant\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Method = \"Method\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Name = \"Name\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.NameFormat = \"NameFormat\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.NameQualifier = \"NameQualifier\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Namespace = \"Namespace\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.NotBefore = \"NotBefore\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.NotOnOrAfter = \"NotOnOrAfter\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.OriginalIssuer = \"OriginalIssuer\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Recipient = \"Recipient\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Resource = \"Resource\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.SessionIndex = \"SessionIndex\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.SessionNotOnOrAfter = \"SessionNotOnOrAfter\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.SPNameQualifier = \"SPNameQualifier\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.SPProvidedID = \"SPProvidedID\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Type = \"type\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Version = \"Version\" -> string\n```\n\n----------------------------------------\n\nTITLE: SAML 1.0 Claim Properties Constants\nDESCRIPTION: Defines constant string values for SAML 1.0 claim properties including namespace and various identifiers used in SAML token processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.ClaimProperties.Namespace = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties\";\nconst Microsoft.IdentityModel.Tokens.Saml.ClaimProperties.SamlNameIdentifierFormat = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/format\";\n```\n\n----------------------------------------\n\nTITLE: Defining SAML 2.0 Confirmation Method Constants in C#\nDESCRIPTION: Declaration of constant string values for SAML 2.0 confirmation methods. These constants define standard URNs for bearer, holder-of-key, and sender-vouches confirmation methods used to validate token ownership.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ConfirmationMethods.BearerString = \"urn:oasis:names:tc:SAML:2.0:cm:bearer\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ConfirmationMethods.HolderOfKeyString = \"urn:oasis:names:tc:SAML:2.0:cm:holder-of-key\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.ConfirmationMethods.SenderVouchesString = \"urn:oasis:names:tc:SAML:2.0:cm:sender-vouches\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestInvalidNonceClaimException Class in C#\nDESCRIPTION: This snippet defines the SignedHttpRequestInvalidNonceClaimException class with multiple constructors and a PropertyBag property. It is used when an invalid 'nonce' claim is encountered in a Signed HTTP Request and allows for additional property storage.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidNonceClaimException\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidNonceClaimException.PropertyBag.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidNonceClaimException.PropertyBag.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidNonceClaimException.SignedHttpRequestInvalidNonceClaimException() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidNonceClaimException.SignedHttpRequestInvalidNonceClaimException(string message) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidNonceClaimException.SignedHttpRequestInvalidNonceClaimException(string message, System.Exception innerException) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidNonceClaimException.SignedHttpRequestInvalidNonceClaimException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ExclusiveCanonicalizationTransform Class in C#\nDESCRIPTION: Defines the ExclusiveCanonicalizationTransform class with two constructors for XML canonicalization.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform.ExclusiveCanonicalizationTransform() -> void\nMicrosoft.IdentityModel.Xml.ExclusiveCanonicalizationTransform.ExclusiveCanonicalizationTransform(bool includeComments) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining EcdhKeyExchangeProvider GetEncryptionAlgorithm Method in C#\nDESCRIPTION: This method signature defines a function in the EcdhKeyExchangeProvider class that returns a string representing the encryption algorithm used for ECDH key exchange.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.GetEncryptionAlgorithm() -> string\n```\n\n----------------------------------------\n\nTITLE: Defining ObservabilityConstants in C#\nDESCRIPTION: Defines constant string values for common observability properties such as ActivityId, ClientId, Duration, and Succeeded.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Abstractions.ObservabilityConstants.ActivityId = \"ActivityId\" -> string\nconst Microsoft.IdentityModel.Abstractions.ObservabilityConstants.ClientId = \"ClientId\" -> string\nconst Microsoft.IdentityModel.Abstractions.ObservabilityConstants.Duration = \"Duration\" -> string\nconst Microsoft.IdentityModel.Abstractions.ObservabilityConstants.Succeeded = \"Succeeded\" -> string\n```\n\n----------------------------------------\n\nTITLE: Last Known Good Configuration Cache Options in C#\nDESCRIPTION: LKGConfigurationCacheOptions provides options for configuring the Last Known Good configuration cache. It includes settings for size limits, comparer implementation, and task creation options when using the cache.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.BaseConfigurationComparer.get -> System.Collections.Generic.IEqualityComparer<Microsoft.IdentityModel.Tokens.BaseConfiguration>\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.BaseConfigurationComparer.set -> void\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.LastKnownGoodConfigurationSizeLimit.get -> int\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.LastKnownGoodConfigurationSizeLimit.set -> void\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.LKGConfigurationCacheOptions() -> void\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.RemoveExpiredValues.get -> bool\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.RemoveExpiredValues.set -> void\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.TaskCreationOptions.get -> System.Threading.Tasks.TaskCreationOptions\nMicrosoft.IdentityModel.Tokens.Configuration.LKGConfigurationCacheOptions.TaskCreationOptions.set -> void\n```\n\n----------------------------------------\n\nTITLE: Validating Token Replay in C#\nDESCRIPTION: This method checks if a token has been replayed by comparing its expiration time against the validation parameters and call context.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_55\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Validators.ValidateTokenReplay(System.DateTime? expirationTime, string securityToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationResult<System.DateTime?>\n```\n\n----------------------------------------\n\nTITLE: JsonWebKey Parameter Constants\nDESCRIPTION: ReadOnlySpan<byte> property getters for JsonWebKey parameter names as UTF-8 byte arrays. These constants provide efficient access to standard JWK field names when processing JSON data without string allocations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_52\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyParameterUtf8Bytes.Alg.get -> System.ReadOnlySpan<byte>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyParameterUtf8Bytes.Kty.get -> System.ReadOnlySpan<byte>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyParameterUtf8Bytes.Kid.get -> System.ReadOnlySpan<byte>\n```\n\n----------------------------------------\n\nTITLE: Defining Cnf Class Properties and Methods\nDESCRIPTION: Class definition for handling confirmation claims (Cnf) in signed HTTP requests, including properties for JWK, JWE, JKU, and KID values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Cnf() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Cnf(string json) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Jku.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Jku.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.JsonWebKey.get -> Microsoft.IdentityModel.Tokens.JsonWebKey\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.JsonWebKey.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Jwe.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Jwe.set -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Kid.get -> string\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.Cnf.Kid.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants for Security Key Operations in C#\nDESCRIPTION: This snippet defines constant strings for log messages related to security key operations, including reading issuer signing keys, validating X509 security keys, and handling null or empty issuers. These constants provide detailed information about the security key validation process.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10243 = \"IDX10243: Reading issuer signing keys from validation parameters.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10244 = \"IDX10244: Issuer is null or empty. Using runtime default for creating claims '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10245 = \"IDX10245: Creating claims identity from the validated token: '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10246 = \"IDX10246: ValidateTokenReplay property on ValidationParameters is set to false. Exiting without validating the token replay.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10248 = \"IDX10248: X509SecurityKey validation failed. The associated certificate is not yet valid. ValidFrom (UTC): '{0}', Current time (UTC): '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10249 = \"IDX10249: X509SecurityKey validation failed. The associated certificate has expired. ValidTo (UTC): '{0}', Current time (UTC): '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10250 = \"IDX10250: The associated certificate is valid. ValidFrom (UTC): '{0}', Current time (UTC): '{1}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10251 = \"IDX10251: The associated certificate is valid. ValidTo (UTC): '{0}', Current time (UTC): '{1}'.\"\n```\n\n----------------------------------------\n\nTITLE: SignedHttpRequestValidationException Class Definition in C#\nDESCRIPTION: Defines the SignedHttpRequestValidationException class which is thrown during signed HTTP request validation failures. It includes various constructors for different exception initialization scenarios.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationException\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationException.SignedHttpRequestValidationException() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationException.SignedHttpRequestValidationException(string message) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationException.SignedHttpRequestValidationException(string message, System.Exception innerException) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationException.SignedHttpRequestValidationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WsFederationMessage Class in C#\nDESCRIPTION: Class representing a WS-Federation message with properties for various parameters used in the protocol.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.CreateSignInUrl() -> string\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.CreateSignOutUrl() -> string\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.IsSignInMessage.get -> bool\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.IsSignOutMessage.get -> bool\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.Wa.get -> string\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.Wa.set -> void\n// ... (other properties omitted for brevity)\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.WsFederationMessage()\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.WsFederationMessage(Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMessage wsFederationMessage)\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.WsFederationMessage(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string, string[]>> parameters)\n```\n\n----------------------------------------\n\nTITLE: Defining Static JsonWebKeyParameterNamesUpperCase in C#\nDESCRIPTION: This static readonly field in the JsonWebKeySerializer class defines a FrozenSet of strings containing uppercase JSON Web Key parameter names, likely used for case-insensitive comparisons or validations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Tokens.Json.JsonWebKeySerializer.JsonWebKeyParameterNamesUpperCase -> System.Collections.Frozen.FrozenSet<string>\n```\n\n----------------------------------------\n\nTITLE: Implementing IdentityModelTelemetryUtil Class in C#\nDESCRIPTION: Defines the IdentityModelTelemetryUtil class for managing telemetry data in the Identity Model framework.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Logging.IdentityModelTelemetryUtil\nstatic Microsoft.IdentityModel.Logging.IdentityModelTelemetryUtil.AddTelemetryData(string key, string value) -> bool\nstatic Microsoft.IdentityModel.Logging.IdentityModelTelemetryUtil.ClientSku.get -> string\nstatic Microsoft.IdentityModel.Logging.IdentityModelTelemetryUtil.ClientVer.get -> string\nstatic Microsoft.IdentityModel.Logging.IdentityModelTelemetryUtil.RemoveTelemetryData(string key) -> bool\n```\n\n----------------------------------------\n\nTITLE: Authentication Information Class Definition in C#\nDESCRIPTION: The AuthenticationInformation class provides properties and methods to handle authentication data within SAML assertions, including authentication instant, method, and locality information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.AuthenticationInformation(System.Uri authenticationMethod, System.DateTime authenticationInstant) -> void\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.AuthenticationInstant.get -> System.DateTime\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.AuthenticationInstant.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.AuthenticationMethod.get -> System.Uri\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.AuthorityBindings.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding>\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.DnsName.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.DnsName.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.IPAddress.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.IPAddress.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.NotOnOrAfter.get -> System.DateTime?\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.NotOnOrAfter.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.Session.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.AuthenticationInformation.Session.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Cryptographic Provider Cache in C#\nDESCRIPTION: Implementation of an in-memory cache for cryptographic providers with support for signing and verification operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_37\n\nLANGUAGE: C#\nCODE:\n```\npublic class InMemoryCryptoProviderCache {\n    public InMemoryCryptoProviderCache(CryptoProviderCacheOptions cryptoProviderCacheOptions,\n        TaskCreationOptions options,\n        int tryTakeTimeout = 500) { }\n\n    public CryptoProviderFactory CryptoProviderFactory { get; set; }\n    public long TaskCount { get; }\n    public long EventQueueCountSigning()\n    public long EventQueueCountVerifying()\n}\n```\n\n----------------------------------------\n\nTITLE: SAML Attribute Class Definition in C#\nDESCRIPTION: The SamlAttribute class represents a SAML attribute with a name, namespace, and one or more string values. It's commonly used in attribute statements to convey user information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.AttributeValueXsiType.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.AttributeValueXsiType.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.ClaimType.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.ClaimType.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.Name.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.Name.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.Namespace.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.Namespace.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.OriginalIssuer.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.OriginalIssuer.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.SamlAttribute(string ns, string name, string value) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.SamlAttribute(string ns, string name, System.Collections.Generic.IEnumerable<string> values) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.Values.get -> System.Collections.Generic.ICollection<string>\n```\n\n----------------------------------------\n\nTITLE: Reading WsFederation Metadata Components in C#\nDESCRIPTION: These virtual methods read various components of WsFederation metadata, such as entity descriptors, key descriptors, and endpoints. They are part of the WsFederationMetadataSerializer class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.ReadEntityDescriptor(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration\n\nvirtual Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.ReadKeyDescriptorForSigning(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Xml.KeyInfo\n\nvirtual Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.ReadPassiveRequestorEndpoint(System.Xml.XmlReader reader) -> string\n\nvirtual Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.ReadSecurityTokenServiceEndpoint(System.Xml.XmlReader reader) -> string\n\nvirtual Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.ReadSecurityTokenServiceTypeRoleDescriptor(System.Xml.XmlReader reader) -> Microsoft.IdentityModel.Protocols.WsFederation.SecurityTokenServiceTypeRoleDescriptor\n```\n\n----------------------------------------\n\nTITLE: Declaring SAML-Related Classes and Members in C#\nDESCRIPTION: This code snippet contains declarations for SAML-related classes and members in the Microsoft.IdentityModel.Tokens.Saml namespace. These declarations include class constructors, property accessors, and class names that form the core SAML implementation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.LogMessages\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.CanonicalString.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.XmlTokenStream.get -> Microsoft.IdentityModel.Xml.XmlTokenStream\nMicrosoft.IdentityModel.Tokens.Saml.SamlAssertion.XmlTokenStream.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttribute.SamlAttribute() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.FriendlyName.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.Name.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.NameFormat.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.Namespace.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.OriginalIssuer.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeKeyComparer.AttributeKey.ValueType.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAttributeStatement.SamlAttributeStatement() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAudienceRestrictionCondition.SamlAudienceRestrictionCondition() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthenticationStatement.SamlAuthenticationStatement() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorityBinding.SamlAuthorityBinding() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.SamlAuthorizationDecisionStatement() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlConditions.SamlConditions() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes\n```\n\n----------------------------------------\n\nTITLE: Defining JsonWebToken Constructors in C#\nDESCRIPTION: This snippet defines three constructors for the JsonWebToken class. They accept different combinations of parameters including header, payload, encoded string, and a delegate for reading JWT claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.JsonWebToken(string header, string payload, Microsoft.IdentityModel.Tokens.TryReadJwtClaim tryReadJwtClaim) -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.JsonWebToken(string jwtEncodedString, Microsoft.IdentityModel.Tokens.TryReadJwtClaim tryReadJwtClaim) -> void\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.JsonWebToken(System.ReadOnlyMemory<char> encodedTokenMemory, Microsoft.IdentityModel.Tokens.TryReadJwtClaim tryReadJwtClaim) -> void\n```\n\n----------------------------------------\n\nTITLE: Key Matching and Transform Factory Methods in C#\nDESCRIPTION: Virtual methods for matching security keys and handling transform operations in digital signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Xml.KeyInfo.MatchesKey(Microsoft.IdentityModel.Tokens.SecurityKey key) -> bool\nvirtual Microsoft.IdentityModel.Xml.TransformFactory.GetCanonicalizingTransform(string transform) -> Microsoft.IdentityModel.Xml.CanonicalizingTransfrom\nvirtual Microsoft.IdentityModel.Xml.TransformFactory.GetTransform(string transform) -> Microsoft.IdentityModel.Xml.Transform\nvirtual Microsoft.IdentityModel.Xml.TransformFactory.IsSupportedCanonicalizingTransfrom(string transform) -> bool\nvirtual Microsoft.IdentityModel.Xml.TransformFactory.IsSupportedTransform(string transform) -> bool\n```\n\n----------------------------------------\n\nTITLE: XML Utility Methods in C#\nDESCRIPTION: Static utility methods for XML processing, including canonicalization, hex string generation, and handling of missing XML attributes. These methods provide core functionality for XML document manipulation and validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Xml.CanonicalizingTransfrom.GetString(Microsoft.IdentityModel.Xml.XmlTokenStream tokenStream, bool includeComments, string[] inclusiveNamespacesPrefixList) -> string\nstatic Microsoft.IdentityModel.Xml.XmlUtil.GenerateHexString(byte[] bytes) -> string\nstatic Microsoft.IdentityModel.Xml.XmlUtil.OnRequiredAttributeMissing(string element, string attribute) -> System.Exception\nstatic Microsoft.IdentityModel.Xml.XmlUtil.TokenizeInclusiveNamespacesPrefixList(string inclusiveNamespacesPrefixList) -> string[]\n```\n\n----------------------------------------\n\nTITLE: Utility Classes in C#\nDESCRIPTION: Utility classes including Base64UrlEncoding for handling Base64Url encoding in JWT tokens and AppContextSwitches for runtime configuration.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_35\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Base64UrlEncoding\nMicrosoft.IdentityModel.Tokens.AppContextSwitches\n```\n\n----------------------------------------\n\nTITLE: JWT Header and Payload UTF-8 Byte Properties in C#\nDESCRIPTION: These properties provide UTF-8 byte representations of various JWT header and payload claims. They return ReadOnlySpan<byte> for efficient memory usage.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtHeaderUtf8Bytes.Alg.get -> System.ReadOnlySpan<byte>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtPayloadUtf8Bytes.Acr.get -> System.ReadOnlySpan<byte>\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Collections and Configuration\nDESCRIPTION: Helper methods for working with collections and configuration settings. These utilities provide common operations like checking if a collection is null or empty and accessing configuration settings.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_47\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.AppContextSwitches.UseRfcDefinitionOfEpkAndKid.get -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.CollectionUtilities.IsNullOrEmpty<T>(this System.Collections.Generic.IEnumerable<T> enumerable) -> bool\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.IssuerSigningKeyValidationError.NullParameter(string parameterName, System.Diagnostics.StackFrame stackFrame) -> Microsoft.IdentityModel.Tokens.IssuerSigningKeyValidationError\n```\n\n----------------------------------------\n\nTITLE: Base Configuration Comparer in C#\nDESCRIPTION: Class for comparing BaseConfiguration instances for equality, used in configuration management and caching.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_34\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.BaseConfigurationComparer\nMicrosoft.IdentityModel.Tokens.BaseConfigurationComparer.BaseConfigurationComparer() -> void\nMicrosoft.IdentityModel.Tokens.BaseConfigurationComparer.Equals(Microsoft.IdentityModel.Tokens.BaseConfiguration config1, Microsoft.IdentityModel.Tokens.BaseConfiguration config2) -> bool\nMicrosoft.IdentityModel.Tokens.BaseConfigurationComparer.GetHashCode(Microsoft.IdentityModel.Tokens.BaseConfiguration config) -> int\n```\n\n----------------------------------------\n\nTITLE: Defining SamlAuthorizationDecisionStatement Class in C#\nDESCRIPTION: This code defines the SamlAuthorizationDecisionStatement class with properties for Actions, Decision, Evidence, and Resource, along with constructors for initialization.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.Actions.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml.SamlAction>\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.Decision.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.Decision.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.Evidence.get -> Microsoft.IdentityModel.Tokens.Saml.SamlEvidence\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.Evidence.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.Resource.get -> string\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.Resource.set -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.SamlAuthorizationDecisionStatement(Microsoft.IdentityModel.Tokens.Saml.SamlSubject subject, string resource, string decision, System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlAction> actions) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAuthorizationDecisionStatement.SamlAuthorizationDecisionStatement(Microsoft.IdentityModel.Tokens.Saml.SamlSubject subject, string resource, string decision, System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlAction> actions, Microsoft.IdentityModel.Tokens.Saml.SamlEvidence evidence) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestInvalidBClaimException Class in C#\nDESCRIPTION: This snippet defines the SignedHttpRequestInvalidBClaimException class with multiple constructors for different initialization scenarios. It is used when an invalid 'b' claim is encountered in a Signed HTTP Request.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidBClaimException\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidBClaimException.SignedHttpRequestInvalidBClaimException() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidBClaimException.SignedHttpRequestInvalidBClaimException(string message) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidBClaimException.SignedHttpRequestInvalidBClaimException(string message, System.Exception innerException) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidBClaimException.SignedHttpRequestInvalidBClaimException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Constants in C#\nDESCRIPTION: Predefined constant for an unsigned JWT header in Base64Url encoding format. This represents a header with 'none' algorithm.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.Base64UrlEncodedUnsignedJWSHeader = \"eyJhbGciOiJub25lIn0\" -> string\n```\n\n----------------------------------------\n\nTITLE: XML Token Stream and Reader/Writer Classes\nDESCRIPTION: Classes for XML token stream processing including XmlTokenStream, XmlTokenStreamReader, and XmlTokenStreamWriter. These classes provide methods for reading and writing XML tokens and maintaining a position in a token stream.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.XmlTokenStream.SignatureElement.get -> int\nMicrosoft.IdentityModel.Xml.XmlTokenStream.SignatureElement.set -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStream.XmlTokens.get -> System.Collections.ObjectModel.ReadOnlyCollection<Microsoft.IdentityModel.Xml.XmlToken>\nMicrosoft.IdentityModel.Xml.XmlTokenStreamReader.Read(bool recordSignaturePosition) -> bool\nMicrosoft.IdentityModel.Xml.XmlTokenStreamReader.XmlDictionaryReader.get -> System.Xml.XmlDictionaryReader\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.Count.get -> int\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.IsEmptyElement.get -> bool\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.LocalName.get -> string\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.MoveToFirst() -> bool\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.MoveToFirstAttribute() -> bool\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.MoveToNext() -> bool\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.MoveToNextAttribute() -> bool\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.Namespace.get -> string\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.NodeType.get -> System.Xml.XmlNodeType\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.Position.get -> int\nMicrosoft.IdentityModel.Xml.XmlTokenStreamWriter.Prefix.get -> string\n```\n\n----------------------------------------\n\nTITLE: Defining WsAddressing Constants in C#\nDESCRIPTION: This snippet defines constants for WsAddressing, including element names, namespace, and preferred prefix. These are used in XML processing related to WS-Addressing in the identity model.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.WsAddressing.Elements.Address = \"Address\" -> string\nconst Microsoft.IdentityModel.Xml.WsAddressing.Elements.EndpointReference = \"EndpointReference\" -> string\nconst Microsoft.IdentityModel.Xml.WsAddressing.Namespace = \"http://www.w3.org/2005/08/addressing\" -> string\nconst Microsoft.IdentityModel.Xml.WsAddressing.PreferredPrefix = \"wsa\" -> string\n```\n\n----------------------------------------\n\nTITLE: Creating Claims Identity with Issuer\nDESCRIPTION: Virtual method for creating a ClaimsIdentity object from a JsonWebToken with additional issuer parameter\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_24\n\nLANGUAGE: csharp\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentity(Microsoft.IdentityModel.JsonWebTokens.JsonWebToken jwtToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, string issuer) -> System.Security.Claims.ClaimsIdentity\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlValidationError.CreateException Method\nDESCRIPTION: Method that creates an exception based on the validation error details. It constructs the appropriate exception type with relevant error information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml.SamlValidationError.CreateException() -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: Implementing DateTimeUtil Static Methods in C#\nDESCRIPTION: These snippets define static methods in the DateTimeUtil class for DateTime operations, including adding time spans and converting to universal time.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_40\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.DateTimeUtil.Add(System.DateTime time, System.TimeSpan timespan) -> System.DateTime\nstatic Microsoft.IdentityModel.Tokens.DateTimeUtil.GetMaxValue(System.DateTimeKind kind) -> System.DateTime\nstatic Microsoft.IdentityModel.Tokens.DateTimeUtil.GetMinValue(System.DateTimeKind kind) -> System.DateTime\nstatic Microsoft.IdentityModel.Tokens.DateTimeUtil.ToUniversalTime(System.DateTime value) -> System.DateTime\nstatic Microsoft.IdentityModel.Tokens.DateTimeUtil.ToUniversalTime(System.DateTime? value) -> System.DateTime?\n```\n\n----------------------------------------\n\nTITLE: Defining Token Utility Constant in C#\nDESCRIPTION: This snippet defines a constant string for JSON representation in the Microsoft.IdentityModel.Tokens namespace.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.TokenUtilities.Json = \"JSON\"\n```\n\n----------------------------------------\n\nTITLE: Defining HttpVersionPolicy Getter in HttpDocumentRetriever Class (C#)\nDESCRIPTION: This code snippet defines the getter method for the HttpVersionPolicy property in the HttpDocumentRetriever class. It returns a nullable System.Net.Http.HttpVersionPolicy value.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersionPolicy.get -> System.Net.Http.HttpVersionPolicy?\n```\n\n----------------------------------------\n\nTITLE: Defining WsPolicy Constants in C#\nDESCRIPTION: This snippet defines constants for WsPolicy, including element names, namespace, and preferred prefix. These are used in XML processing related to WS-Policy in the identity model.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.WsPolicy.Elements.AppliesTo = \"AppliesTo\" -> string\nconst Microsoft.IdentityModel.Xml.WsPolicy.Namespace = \"http://schemas.xmlsoap.org/ws/2004/09/policy\" -> string\nconst Microsoft.IdentityModel.Xml.WsPolicy.PreferredPrefix = \"wsp\" -> string\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Byte Arrays and URLs in C#\nDESCRIPTION: Static methods for comparing byte arrays, cloning byte arrays, and checking if a URL uses HTTPS.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_46\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Utility.AreEqual(byte[] a, byte[] b) -> bool\nstatic Microsoft.IdentityModel.Tokens.Utility.CloneByteArray(this byte[] src) -> byte[]\nstatic Microsoft.IdentityModel.Tokens.Utility.IsHttps(string address) -> bool\nstatic Microsoft.IdentityModel.Tokens.Utility.IsHttps(System.Uri uri) -> bool\n```\n\n----------------------------------------\n\nTITLE: IsEnabled Method for Checking Log Levels in C#\nDESCRIPTION: Method to check if a specific log level is enabled in the underlying logger. It takes an EventLogLevel parameter from Microsoft.IdentityModel.Abstractions and returns a boolean indicating if that level is enabled.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.LoggingExtensions/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.LoggingExtensions.IdentityLoggerAdapter.IsEnabled(Microsoft.IdentityModel.Abstractions.EventLogLevel eventLogLevel) -> bool\n```\n\n----------------------------------------\n\nTITLE: Defining Miscellaneous Security Constants in C#\nDESCRIPTION: Various utility constants used in token validation and processing, including the 'none' algorithm identifier, RIPEMD160 digest, and default maximum token size in bytes. These constants are used for special cases and configuration settings.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.None = \"none\" -> string\nconst Microsoft.IdentityModel.Tokens.SecurityAlgorithms.Ripemd160Digest = \"http://www.w3.org/2001/04/xmlenc#ripemd160\" -> string\nconst Microsoft.IdentityModel.Tokens.TokenValidationParameters.DefaultMaximumTokenSizeInBytes = 256000 -> int\nconst Microsoft.IdentityModel.Tokens.Utility.Empty = \"empty\" -> string\nconst Microsoft.IdentityModel.Tokens.Utility.Null = \"null\" -> string\n```\n\n----------------------------------------\n\nTITLE: JwtTokenDecryptionParameters Class in C#\nDESCRIPTION: API signatures for the JwtTokenDecryptionParameters class, which contains parameters for JWT decryption operations including algorithms, keys, and byte arrays for various components.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Alg.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Alg.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.AuthenticationTag.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.AuthenticationTag.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.AuthenticationTagBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.AuthenticationTagBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Ciphertext.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Ciphertext.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.CipherTextBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.CipherTextBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.DecompressionFunction.get -> System.Func<byte[], string, int, string>\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.DecompressionFunction.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Enc.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Enc.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.EncodedHeader.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.EncodedHeader.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.EncodedToken.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.EncodedToken.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.HeaderAsciiBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.HeaderAsciiBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.InitializationVector.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.InitializationVector.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.InitializationVectorBytes.get -> byte[]\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.InitializationVectorBytes.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.JwtTokenDecryptionParameters() -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Keys.get -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.SecurityKey>\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Keys.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.MaximumDeflateSize.get -> int\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.MaximumDeflateSize.set -> void\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Zip.get -> string\nMicrosoft.IdentityModel.JsonWebTokens.JwtTokenDecryptionParameters.Zip.set -> void\n```\n\n----------------------------------------\n\nTITLE: Configuration Manager Properties - Azure AD Identity\nDESCRIPTION: Property declarations for the ConfigurationManager<T> class including background task completion action, telemetry client, and time provider. Also includes HTTP document retriever header data properties.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>._onBackgroundTaskFinish -> System.Action\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.TelemetryClient -> Microsoft.IdentityModel.Telemetry.ITelemetryClient\nMicrosoft.IdentityModel.Protocols.ConfigurationManager<T>.TimeProvider -> System.TimeProvider\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.AdditionalHeaderData.get -> System.Collections.Generic.IDictionary<string, string>\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.AdditionalHeaderData.set -> void\n```\n\n----------------------------------------\n\nTITLE: DSigElement Class Implementation in C#\nDESCRIPTION: Implementation of the DSigElement class representing an XML Digital Signature element. This class serves as a base for XML signature elements with common properties like ID and namespace prefix.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.DSigElement\nMicrosoft.IdentityModel.Xml.DSigElement.DSigElement() -> void\nMicrosoft.IdentityModel.Xml.DSigElement.Id.get -> string\nMicrosoft.IdentityModel.Xml.DSigElement.Id.set -> void\nMicrosoft.IdentityModel.Xml.DSigElement.Prefix.get -> string\nMicrosoft.IdentityModel.Xml.DSigElement.Prefix.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Telemetry Constants in C#\nDESCRIPTION: Constants used for telemetry tracking and logging in the Identity Model, including tags for blocking operations, exceptions, version info, and metadata addresses.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.BlockingTypeTag = \"Blocking\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.ExceptionTypeTag = \"ExceptionType\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.IdentityModelVersionTag = \"IdentityModelVersion\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.MetadataAddressTag = \"MetadataAddress\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.OperationStatusTag = \"OperationStatus\"\n```\n\n----------------------------------------\n\nTITLE: Defining HttpVersionPolicy Property in HttpDocumentRetriever Class (C#)\nDESCRIPTION: This snippet defines the getter and setter for the HttpVersionPolicy property in the HttpDocumentRetriever class. The property is of type System.Net.Http.HttpVersionPolicy? (nullable), which allows controlling the HTTP version used in requests.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI/net6.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersionPolicy.get -> System.Net.Http.HttpVersionPolicy?\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersionPolicy.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Crypto Constants in C#\nDESCRIPTION: Cryptographic constants used for AES-GCM encryption including nonce and tag sizes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.AesGcm.NonceSize = 12\nconst Microsoft.IdentityModel.Tokens.AesGcm.TagSize = 16\nconst Microsoft.IdentityModel.Tokens.Cng.BCRYPT_AES_ALGORITHM = \"AES\"\nconst Microsoft.IdentityModel.Tokens.Cng.BCRYPT_CHAIN_MODE_GCM = \"ChainingModeGCM\"\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken Class Fields in C#\nDESCRIPTION: Private field definitions for the JsonWebToken class that store JWT standard claims and header information. These fields include expiration times, issuer, subject, algorithm, and other JWT-specific properties.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._alg -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._azp -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._cty -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._enc -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._exp -> long?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._expDateTime -> System.DateTime?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._iat -> long?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._iatDateTime -> System.DateTime?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._id -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._iss -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._jti -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._kid -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._nbf -> long?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._nbfDateTime -> System.DateTime?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._sub -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._typ -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._validFrom -> System.DateTime?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._validTo -> System.DateTime?\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._x5t -> string\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken._zip -> string\n```\n\n----------------------------------------\n\nTITLE: Defining LogEntry Class in C#\nDESCRIPTION: Class representing a log entry with properties for correlation ID, event log level, and message.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Abstractions.LogEntry\nMicrosoft.IdentityModel.Abstractions.LogEntry.CorrelationId.get -> string\nMicrosoft.IdentityModel.Abstractions.LogEntry.CorrelationId.set -> void\nMicrosoft.IdentityModel.Abstractions.LogEntry.EventLogLevel.get -> Microsoft.IdentityModel.Abstractions.EventLogLevel\nMicrosoft.IdentityModel.Abstractions.LogEntry.EventLogLevel.set -> void\nMicrosoft.IdentityModel.Abstractions.LogEntry.LogEntry() -> void\nMicrosoft.IdentityModel.Abstractions.LogEntry.Message.get -> string\nMicrosoft.IdentityModel.Abstractions.LogEntry.Message.set -> void\n```\n\n----------------------------------------\n\nTITLE: Static Properties and Fields in JsonWebTokenHandler in C#\nDESCRIPTION: Static properties and fields in the JsonWebTokenHandler class for default claim mapping configurations. These define default behaviors for claim type mapping during token processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.DefaultInboundClaimTypeMap -> System.Collections.Generic.IDictionary<string, string>\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.DefaultMapInboundClaims -> bool\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ShortClaimTypeProperty.get -> string\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ShortClaimTypeProperty.set -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Override Methods for Token Validation and Claims Identity Creation\nDESCRIPTION: These method signatures show the override methods in JsonWebTokenHandler class for creating claims identity and validating tokens asynchronously. They extend the base implementation to provide JWT-specific validation logic.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.CreateClaimsIdentityInternal(Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, string issuer) -> System.Security.Claims.ClaimsIdentity\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(Microsoft.IdentityModel.Tokens.SecurityToken token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\n```\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.ValidateTokenAsync(string token, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedToken>>\n```\n\n----------------------------------------\n\nTITLE: SAML2 Token Processing Methods in C#\nDESCRIPTION: Methods for processing SAML2 tokens including validation of one-time use conditions and proxy restrictions. These methods are specific to SAML2 token handling and validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler.ValidateOneTimeUseCondition(Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityToken samlToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationError\n\nvirtual Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityTokenHandler.ValidateProxyRestriction(Microsoft.IdentityModel.Tokens.Saml2.Saml2SecurityToken samlToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext) -> Microsoft.IdentityModel.Tokens.ValidationError\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Namespace URI Constants in C#\nDESCRIPTION: Constants defining namespace URIs for SAML token processing. These URIs are used for XML serialization and deserialization of SAML tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.ClaimType2009Namespace = \"http://schemas.xmlsoap.org/ws/2009/09/identity/claims\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.MsIdentityNamespaceUri = \"http://schemas.microsoft.com/ws/2008/06/identity\"\n```\n\n----------------------------------------\n\nTITLE: Defining TryReadJwtClaim Property in JsonWebToken Class\nDESCRIPTION: This snippet shows the getter and setter methods for the TryReadJwtClaim property in the JsonWebToken class. The getter returns a Microsoft.IdentityModel.Tokens.TryReadJwtClaim object, while the setter is void.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net8.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryReadJwtClaim.get -> Microsoft.IdentityModel.Tokens.TryReadJwtClaim\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryReadJwtClaim.set -> void\n```\n\n----------------------------------------\n\nTITLE: SAML Advice Class Definition in C#\nDESCRIPTION: The SamlAdvice class contains additional information provided by the issuer of a SAML assertion. It can include references to other assertions or the assertions themselves.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml.SamlAdvice\nMicrosoft.IdentityModel.Tokens.Saml.SamlAdvice.AssertionIdReferences.get -> System.Collections.Generic.ICollection<string>\nMicrosoft.IdentityModel.Tokens.Saml.SamlAdvice.Assertions.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Tokens.Saml.SamlAssertion>\nMicrosoft.IdentityModel.Tokens.Saml.SamlAdvice.SamlAdvice() -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAdvice.SamlAdvice(System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlAssertion> assertions) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAdvice.SamlAdvice(System.Collections.Generic.IEnumerable<string> references) -> void\nMicrosoft.IdentityModel.Tokens.Saml.SamlAdvice.SamlAdvice(System.Collections.Generic.IEnumerable<string> references, System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.Saml.SamlAssertion> assertions) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ITelemetryClient Interface in C#\nDESCRIPTION: Interface for telemetry clients, with methods for initialization, checking if enabled, and tracking events with various property types.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient.ClientId.get -> string\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient.ClientId.set -> void\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient.Initialize() -> void\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient.IsEnabled() -> bool\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient.IsEnabled(string eventName) -> bool\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient.TrackEvent(Microsoft.IdentityModel.Abstractions.TelemetryEventDetails eventDetails) -> void\nMicrosoft.IdentityModel.Abstractions.ITelemetryClient.TrackEvent(string eventName, System.Collections.Generic.IDictionary<string, string> stringProperties = null, System.Collections.Generic.IDictionary<string, long> longProperties = null, System.Collections.Generic.IDictionary<string, bool> boolProperties = null, System.Collections.Generic.IDictionary<string, System.DateTime> dateTimeProperties = null, System.Collections.Generic.IDictionary<string, double> doubleProperties = null, System.Collections.Generic.IDictionary<string, System.Guid> guidProperties = null) -> void\n```\n\n----------------------------------------\n\nTITLE: Writing WsFederation Metadata in C#\nDESCRIPTION: This method writes WsFederation metadata to an XML writer using a provided WsFederationConfiguration object. It's part of the WsFederationMetadataSerializer class.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.WriteMetadata(System.Xml.XmlWriter writer, Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration configuration) -> void\n```\n\n----------------------------------------\n\nTITLE: JwtSecurityToken Property Setters in C#\nDESCRIPTION: Property setters for the JwtSecurityToken class. These setters allow modification of token components like header, payload, raw header, raw payload, raw signature, and inner token.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityToken.Decode(string[] tokenParts, string rawData) -> void\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityToken.Header.set -> void\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityToken.InnerToken.set -> void\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityToken.Payload.set -> void\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawHeader.set -> void\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawPayload.set -> void\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityToken.RawSignature.set -> void\n```\n\n----------------------------------------\n\nTITLE: JwtSecurityTokenHandler Methods and Properties in C#\nDESCRIPTION: Methods and properties for the JwtSecurityTokenHandler class. Includes methods for getting content encryption keys and a property for telemetry client access.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/System.IdentityModel.Tokens.Jwt/InternalAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.GetContentEncryptionKeys(System.IdentityModel.Tokens.Jwt.JwtSecurityToken jwtToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Collections.Generic.IEnumerable<Microsoft.IdentityModel.Tokens.SecurityKey>\nSystem.IdentityModel.Tokens.Jwt.JwtSecurityTokenHandler.TelemetryClient -> Microsoft.IdentityModel.Telemetry.ITelemetryClient\nSystem.IdentityModel.Tokens.Jwt.LogMessages\n```\n\n----------------------------------------\n\nTITLE: SAML 2.0 Claim Properties Constants\nDESCRIPTION: Defines constant string values for SAML 2.0 claim properties including attribute formats and name identifier properties.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.ClaimProperties.Namespace = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties\";\nconst Microsoft.IdentityModel.Tokens.Saml2.ClaimProperties.SamlAttributeFriendlyName = \"http://schemas.xmlsoap.org/ws/2005/05/identity/claimproperties/friendlyname\";\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Element Constants in C#\nDESCRIPTION: String constants for SAML element names used in token XML structure. These provide consistent naming when parsing or creating SAML XML documents.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Action = \"Action\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Advice = \"Advice\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Assertion = \"Assertion\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.AssertionIDReference = \"AssertionIDReference\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Attribute = \"Attribute\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.AttributeStatement = \"AttributeStatement\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.AttributeValue = \"AttributeValue\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Audience = \"Audience\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.AudienceRestrictionCondition = \"AudienceRestrictionCondition\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.AuthenticationStatement = \"AuthenticationStatement\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.AuthorityBinding = \"AuthorityBinding\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.AuthorizationDecisionStatement = \"AuthorizationDecisionStatement\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Conditions = \"Conditions\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.ConfirmationMethod = \"ConfirmationMethod\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.DNSAddress = \"DNSAddress\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.DoNotCacheCondition = \"DoNotCacheCondition\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Evidence = \"Evidence\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.IPAddress = \"IPAddress\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.NameIdentifier = \"NameIdentifier\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.Subject = \"Subject\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.SubjectConfirmation = \"SubjectConfirmation\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.SubjectConfirmationData = \"SubjectConfirmationData\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Elements.SubjectLocality = \"SubjectLocality\"\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadHeaderValue Method in JsonWebToken Class (C#)\nDESCRIPTION: Adds a virtual ReadHeaderValue method to the JsonWebToken class. It takes a Utf8JsonReader by reference and an IDictionary<string, object> for claims, and returns void. This method is likely used for parsing JWT header values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net6.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadHeaderValue(ref System.Text.Json.Utf8JsonReader reader, System.Collections.Generic.IDictionary<string, object> claims) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining WsFederationConfiguration Class in C#\nDESCRIPTION: Class representing the configuration for WS-Federation, including properties for key information and signing credentials.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration.KeyInfos.get -> System.Collections.Generic.ICollection<Microsoft.IdentityModel.Xml.KeyInfo>\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration.Signature.get -> Microsoft.IdentityModel.Xml.Signature\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration.Signature.set -> void\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration.SigningCredentials.get -> Microsoft.IdentityModel.Tokens.SigningCredentials\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration.SigningCredentials.set -> void\nMicrosoft.IdentityModel.Protocols.WsFederation.WsFederationConfiguration.WsFederationConfiguration() -> void\n```\n\n----------------------------------------\n\nTITLE: Defining TelemetryEventDetails Class in C#\nDESCRIPTION: Class representing telemetry event details with properties for event name and various data types. Includes methods for setting properties of different types.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Abstractions.TelemetryEventDetails\nMicrosoft.IdentityModel.Abstractions.TelemetryEventDetails.PropertyValues.get -> System.Collections.Generic.IDictionary<string, object>\nMicrosoft.IdentityModel.Abstractions.TelemetryEventDetails.TelemetryEventDetails() -> void\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.Name.get -> string\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.Name.set -> void\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.Properties.get -> System.Collections.Generic.IReadOnlyDictionary<string, object>\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.SetProperty(string key, bool value) -> void\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.SetProperty(string key, double value) -> void\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.SetProperty(string key, long value) -> void\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.SetProperty(string key, string value) -> void\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.SetProperty(string key, System.DateTime value) -> void\nvirtual Microsoft.IdentityModel.Abstractions.TelemetryEventDetails.SetProperty(string key, System.Guid value) -> void\n```\n\n----------------------------------------\n\nTITLE: Security Token Exception Serialization Override\nDESCRIPTION: Override method for serializing security token exception data using SerializationInfo and StreamingContext\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.SecurityTokenException.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing AAD Issuer Validator Class in C#\nDESCRIPTION: Class definition for AadIssuerValidator, which provides methods for validating Azure AD token issuers. It includes properties for different versions of AAD authorities and configuration managers.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadAuthority.get -> string\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadAuthority.set -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadAuthorityV1.get -> string\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadAuthorityV11.get -> string\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadAuthorityV2.get -> string\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadAuthorityVersion.get -> Microsoft.IdentityModel.Validators.ProtocolVersion\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadAuthorityVersion.set -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadIssuerV1.get -> string\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadIssuerV1.set -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadIssuerV2.get -> string\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadIssuerV2.set -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadIssuerValidator(System.Net.Http.HttpClient httpClient, string aadAuthority) -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.AadIssuerValidator(System.Net.Http.HttpClient httpClient, string aadAuthority, System.Func<string, Microsoft.IdentityModel.Tokens.BaseConfigurationManager> configurationManagerProvider) -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ConfigurationManagerV1.get -> Microsoft.IdentityModel.Tokens.BaseConfigurationManager\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ConfigurationManagerV1.set -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ConfigurationManagerV11.get -> Microsoft.IdentityModel.Tokens.BaseConfigurationManager\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ConfigurationManagerV11.set -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ConfigurationManagerV2.get -> Microsoft.IdentityModel.Tokens.BaseConfigurationManager\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ConfigurationManagerV2.set -> void\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ValidateAsync(string issuer, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.TokenValidationParameters validationParameters) -> System.Threading.Tasks.ValueTask<string>\nMicrosoft.IdentityModel.Validators.AadIssuerValidator.ValidateIssuerAsync(string issuer, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters, Microsoft.IdentityModel.Tokens.CallContext callContext, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedIssuer>>\n```\n\n----------------------------------------\n\nTITLE: Implementing AAD Validation Parameter Extensions in C#\nDESCRIPTION: Static methods for extending token validation parameters with AAD-specific functionality. These methods enable additional checks for issuer signing keys and cloud instance validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Validators.AadValidationParametersExtension.EnableAadSigningKeyIssuerValidation(this Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Validators.AadValidationParametersExtension.EnableEntraIdSigningKeyCloudInstanceValidation(this Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters) -> void\nstatic Microsoft.IdentityModel.Validators.AadValidationParametersExtension.ValidateIssuerSigningKey(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, Microsoft.IdentityModel.Tokens.SecurityToken securityToken, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration) -> bool\nstatic Microsoft.IdentityModel.Validators.AadValidationParametersExtension.ValidateIssuerSigningKeyCertificate(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, Microsoft.IdentityModel.Tokens.ValidationParameters validationParameters) -> Microsoft.IdentityModel.Tokens.ValidationResult<Microsoft.IdentityModel.Tokens.ValidatedSigningKeyLifetime>\nstatic Microsoft.IdentityModel.Validators.AadValidationParametersExtension.ValidateSigningKeyCloudInstance(Microsoft.IdentityModel.Tokens.SecurityKey securityKey, Microsoft.IdentityModel.Tokens.BaseConfiguration configuration) -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken TryReadJwtClaim Property Signatures\nDESCRIPTION: Property accessor signatures for TryReadJwtClaim property that returns Microsoft.IdentityModel.Tokens.TryReadJwtClaim type\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryReadJwtClaim.get -> Microsoft.IdentityModel.Tokens.TryReadJwtClaim\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryReadJwtClaim.set -> void\n```\n\n----------------------------------------\n\nTITLE: Confirmation Claim Types as UTF-8 Byte Constants\nDESCRIPTION: Static property getters that return ReadOnlySpan<byte> representations of confirmation claim types. These provide efficient access to UTF-8 encoded constants used in token validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_48\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ConfirmationClaimTypesUtf8Bytes.Cnf.get -> System.ReadOnlySpan<byte>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ConfirmationClaimTypesUtf8Bytes.Jku.get -> System.ReadOnlySpan<byte>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ConfirmationClaimTypesUtf8Bytes.Jwe.get -> System.ReadOnlySpan<byte>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ConfirmationClaimTypesUtf8Bytes.Jwk.get -> System.ReadOnlySpan<byte>\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.ConfirmationClaimTypesUtf8Bytes.Kid.get -> System.ReadOnlySpan<byte>\n```\n\n----------------------------------------\n\nTITLE: Log Message Constants - Azure AD Identity Protocol\nDESCRIPTION: Collection of constant string messages used for logging various states and errors in Azure AD identity protocol operations. Covers configuration retrieval, document fetching, and validation scenarios.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20000 = \"IDX20000: The parameter '{0}' cannot be a 'null' or an empty object.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20108 = \"IDX20108: The address specified '{0}' is not valid as per HTTPS scheme. Please specify an https address for security reasons. If you want to test with http address, set the RequireHttps property  on IDocumentRetriever to false.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20803 = \"IDX20803: Unable to obtain configuration from: '{0}'. Will retry at '{1}'. Exception: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20804 = \"IDX20804: Unable to retrieve document from: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20805 = \"IDX20805: Obtaining information from metadata endpoint: '{0}'.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20806 = \"IDX20806: Unable to obtain an updated configuration from: '{0}'. Returning the current configuration. Exception: '{1}.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20807 = \"IDX20807: Unable to retrieve document from: '{0}'. HttpResponseMessage: '{1}', HttpResponseMessage.Content: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20808 = \"IDX20808: Network error occurred. Status code: '{0}'. \\nResponse content: '{1}'. \\nAttempting to retrieve document again from: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20809 = \"IDX20809: Unable to retrieve document from: '{0}'. Status code: '{1}'. \\nResponse content: '{2}'.\" -> string\nconst Microsoft.IdentityModel.Protocols.LogMessages.IDX20810 = \"IDX20810: Configuration validation failed, see inner exception for more details. Exception: '{0}'.\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants for Signature Validation in C#\nDESCRIPTION: This snippet defines constant strings for log messages related to signature validation, including failures due to missing security keys, mismatched kid values, and improperly formatted signatures. These constants provide detailed information about the signature validation process and potential issues.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10500 = \"IDX10500: Signature validation failed. No security keys were provided to validate the signature.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10502 = \"IDX10502: Signature validation failed. The token's kid is: '{0}', but did not match any keys in ValidationParameters or Configuration and TryAllIssuerSigningKeys is false. Number of keys in ValidationParameters: '{1}'. \\nNumber of keys in Configuration: '{2}'.\\ntoken: '{3}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10503 = \"IDX10503: Signature validation failed. The token's kid is: '{0}', but did not match any keys in TokenValidationParameters or Configuration. Keys tried: '{1}'. Number of keys in TokenValidationParameters: '{2}'. \\nNumber of keys in Configuration: '{3}'. \\nExceptions caught:\\n '{4}'.\\ntoken: '{5}'. See https://aka.ms/IDX10503 for details.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10504 = \"IDX10504: Unable to validate signature, token does not have a signature: '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10505 = \"IDX10505: Signature validation failed. The user defined 'Delegate' specified on TokenValidationParameters returned null when validating token: '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10506 = \"IDX10506: Signature validation failed. The user defined 'Delegate' specified on TokenValidationParameters did not return a '{0}', but returned a '{1}' when validating token: '{2}'. If you are using ASP.NET Core 8 or later, see https://learn.microsoft.com/en-us/dotnet/core/compatibility/aspnet-core/8.0/securitytoken-events for more details.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10508 = \"IDX10508: Signature validation failed. Signature is improperly formatted.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10509 = \"IDX10509: Token validation failed. The user defined 'Delegate' set on TokenValidationParameters.TokenReader did not return a '{0}', but returned a '{1}' when reading token: '{2}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10510 = \"IDX10510: Token validation failed. The user defined 'Delegate' set on TokenValidationParameters.TokenReader returned null when reading token: '{0}'.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10511 = \"IDX10511: Signature validation failed. Keys tried: '{0}'. \\nNumber of keys in TokenValidationParameters: '{1}'. \\nNumber of keys in Configuration: '{2}'. \\nMatched key was in '{3}'. \\nkid: '{4}'. \\nExceptions caught:\\n '{5}'.\\ntoken: '{6}'. See https://aka.ms/IDX10511 for details.\"\n```\n\n----------------------------------------\n\nTITLE: XML Token Class Definition and Constructors\nDESCRIPTION: The XmlToken class represents XML elements with properties for node type, prefix, local name, namespace, and value. It includes constructors for different XML element types including empty elements and elements with values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.XmlToken\nMicrosoft.IdentityModel.Xml.XmlToken.IsEmptyElement.get -> bool\nMicrosoft.IdentityModel.Xml.XmlToken.IsEmptyElement.set -> void\nMicrosoft.IdentityModel.Xml.XmlToken.LocalName.get -> string\nMicrosoft.IdentityModel.Xml.XmlToken.Namespace.get -> string\nMicrosoft.IdentityModel.Xml.XmlToken.NodeType.get -> System.Xml.XmlNodeType\nMicrosoft.IdentityModel.Xml.XmlToken.Prefix.get -> string\nMicrosoft.IdentityModel.Xml.XmlToken.Value.get -> string\nMicrosoft.IdentityModel.Xml.XmlToken.XmlToken(System.Xml.XmlNodeType nodeType, string prefix, string localName, string namespace, bool isEmptyElement) -> void\nMicrosoft.IdentityModel.Xml.XmlToken.XmlToken(System.Xml.XmlNodeType nodeType, string prefix, string localName, string namespace, string value) -> void\nMicrosoft.IdentityModel.Xml.XmlToken.XmlToken(System.Xml.XmlNodeType nodeType, string value) -> void\n```\n\n----------------------------------------\n\nTITLE: Reading JWT Header Values with System.Text.Json in C#\nDESCRIPTION: Virtual method signature for parsing JWT header values from a Utf8JsonReader into a claims dictionary. Takes a reference to a Utf8JsonReader and a dictionary to store the claims as parameters.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadHeaderValue(ref System.Text.Json.Utf8JsonReader reader, System.Collections.Generic.IDictionary<string, object> claims) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequest Exception Classes in C#\nDESCRIPTION: Exception classes for handling errors related to signed HTTP requests, including creation and invalid 'at' claim exceptions.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationException\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationException.SignedHttpRequestCreationException() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationException.SignedHttpRequestCreationException(string message) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationException.SignedHttpRequestCreationException(string message, System.Exception innerException) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationException.SignedHttpRequestCreationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidAtClaimException\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidAtClaimException.SignedHttpRequestInvalidAtClaimException() -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidAtClaimException.SignedHttpRequestInvalidAtClaimException(string message) -> void\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidAtClaimException.SignedHttpRequestInvalidAtClaimException(string message, System.Exception innerException) -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebTokenHandler Diagnostic Stack Frames\nDESCRIPTION: Static properties for diagnostic stack frame references used in error reporting and debugging. These provide detailed information about various validation failure points in the token processing pipeline.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.ActorReadFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.ActorValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.AudienceValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptedReadFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptionFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptionGetEncryptionKeys -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptionHeaderMissing -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptionKeyUnwrapFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptionNoKeysTried -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptionTokenNull -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.DecryptionValidationParametersNull -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.InvalidTokenLength -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.IssuerSigningKeyValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.IssuerValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.JWEValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.KidNotMatchedNoTryAll -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.LifetimeValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.NoKeysProvided -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.ReadTokenMalformed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.ReadTokenNullOrEmpty -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.ReplayValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.SignatureValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenNotJWT -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenNull -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenStringNull -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenStringReadFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenStringValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenStringValidationParametersNull -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenValidationFailed -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenValidationFailedNullConfigurationManager -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TokenValidationParametersNull -> System.Diagnostics.StackFrame\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JsonWebTokenHandler.StackFrames.TypeValidationFailed -> System.Diagnostics.StackFrame\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlSubjectEqualityComparer.GetHashCode Method\nDESCRIPTION: Method that generates a hash code for a SAML subject, used in equality comparison operations and hash-based collections.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml.SamlSubjectEqualityComparer.GetHashCode(Microsoft.IdentityModel.Tokens.Saml.SamlSubject subject) -> int\n```\n\n----------------------------------------\n\nTITLE: Implementing AbsoluteUriCollection.SetItem Method\nDESCRIPTION: Method for setting a URI at a specific index in a collection of absolute URIs. It handles the update operation and may perform validation on the URI being set.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml2.AbsoluteUriCollection.SetItem(int index, System.Uri item) -> void\n```\n\n----------------------------------------\n\nTITLE: SignUsingSpanDelegate Type Declaration in C#\nDESCRIPTION: Delegate type declaration for signing operations using Span<T>.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.SignUsingSpanDelegate\n```\n\n----------------------------------------\n\nTITLE: WS-Federation Log Message Constants\nDESCRIPTION: Constant string definitions for various error and informational messages related to WS-Federation protocol processing, including metadata validation, token handling, and configuration errors.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.WsFederation.LogMessages.IDX22000 = \"IDX22000: The parameter '{0}' cannot be a 'null' or an empty object.\";\nconst Microsoft.IdentityModel.Protocols.WsFederation.LogMessages.IDX22700 = \"IDX22700: The Issuer property is null or empty.\";\n// ... [additional log message constants]\n```\n\n----------------------------------------\n\nTITLE: Defining SignedHttpRequestInvalidAtClaimException Class in C#\nDESCRIPTION: This snippet defines the SignedHttpRequestInvalidAtClaimException class with a constructor that takes SerializationInfo and StreamingContext parameters. It is used for serialization scenarios when an invalid 'at' claim is encountered in a Signed HTTP Request.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestInvalidAtClaimException.SignedHttpRequestInvalidAtClaimException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: Delegating XML Dictionary Writer and Key Matching\nDESCRIPTION: Property accessors for XML dictionary writer and reader delegation, an EnvelopedSignatureReader for XML token streams, and a KeyInfo method for key matching. These components support XML processing and signature validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.InternalWriter.get -> System.Xml.XmlDictionaryWriter\nMicrosoft.IdentityModel.Xml.DelegatingXmlDictionaryWriter.InternalWriter.set -> void\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader.XmlTokenStream.get -> Microsoft.IdentityModel.Xml.XmlTokenStream\nMicrosoft.IdentityModel.Xml.KeyInfo.MatchesKey(Microsoft.IdentityModel.Tokens.SecurityKey key) -> bool\nMicrosoft.IdentityModel.Xml.LogMessages\n```\n\n----------------------------------------\n\nTITLE: Defining Static AAD Issuer Validator Dictionary in C#\nDESCRIPTION: This code snippet declares a static readonly dictionary that maps strings to AadIssuerValidator instances. It's likely used to store and retrieve issuer validators for different Azure AD tenants or environments.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Validators/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Validators.AadIssuerValidator.s_issuerValidators -> System.Collections.Generic.IDictionary<string, Microsoft.IdentityModel.Validators.AadIssuerValidator>\n```\n\n----------------------------------------\n\nTITLE: Defining Protocol Constants in C#\nDESCRIPTION: Constants defining various protocol states and configurations for the Identity Model, including automatic, manual, and last known good states.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.Protocols.Automatic = \"Automatic\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.Protocols.ConfigurationInvalid = \"ConfigurationInvalid\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.Protocols.ConfigurationRetrievalFailed = \"ConfigurationRetrievalFailed\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.Protocols.FirstRefresh = \"FirstRefresh\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.Protocols.Lkg = \"LastKnownGood\"\nconst Microsoft.IdentityModel.Telemetry.TelemetryConstants.Protocols.Manual = \"Manual\"\n```\n\n----------------------------------------\n\nTITLE: Defining Class Name Constants for JsonWebToken Classes in C#\nDESCRIPTION: Constants that define the fully qualified class names for JsonClaimSet and JsonWebToken classes, used for logging and serialization purposes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet.ClassName = \"Microsoft.IdentityModel.JsonWebTokens.JsonClaimSet\" -> string\nconst Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ClassName = \"Microsoft.IdentityModel.JsonWebTokens.JsonWebToken\" -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing XmlTokenStream Class in C#\nDESCRIPTION: Defines the XmlTokenStream class with methods for manipulating XML token streams.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.XmlTokenStream\nMicrosoft.IdentityModel.Xml.XmlTokenStream.Add(System.Xml.XmlNodeType type, string value) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStream.AddAttribute(string prefix, string localName, string namespace, string value) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStream.AddElement(string prefix, string localName, string namespace, bool isEmptyElement) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStream.SetElementExclusion(string element, string namespace) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStream.WriteTo(System.Xml.XmlWriter writer) -> void\nMicrosoft.IdentityModel.Xml.XmlTokenStream.XmlTokenStream() -> void\n```\n\n----------------------------------------\n\nTITLE: Enveloped Signature Processing in C#\nDESCRIPTION: Methods for handling enveloped signatures, including a placeholder constant and an end-of-root-element event handler.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Xml.EnvelopedSignatureWriter.SignaturePlaceholder -> string\nvirtual Microsoft.IdentityModel.Xml.EnvelopedSignatureReader.OnEndOfRootElement() -> void\n```\n\n----------------------------------------\n\nTITLE: IssuerValidationError Constructor Declaration in C#\nDESCRIPTION: Constructor signature for creating an issuer validation error with message details, exception type, stack trace and invalid issuer information.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.IssuerValidationError.IssuerValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, string invalidIssuer) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Token Handler with Configuration in C#\nDESCRIPTION: Factory method for creating a JwtSecurityTokenHandler with custom configuration. Allows for specifying JWT settings such as maximum token size, MapInboundClaims, and whether to set default time validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Creates a <see cref=\"JwtSecurityTokenHandler\"/>.\n/// </summary>\n/// <param name=\"mapInboundClaims\">Whether to map inbound claims.</param>\n/// <param name=\"maximumTokenSizeInBytes\">Maximum token size in bytes.</param>\n/// <param name=\"setDefaultTimesOnTokenCreation\">Whether to set default times on token creation.</param>\n/// <returns>A <see cref=\"JwtSecurityTokenHandler\"/>.</returns>\npublic static JwtSecurityTokenHandler CreateTokenHandler(\n    bool mapInboundClaims = true,\n    Int32 maximumTokenSizeInBytes = JwtSecurityTokenHandler.DefaultMaximumTokenSizeInBytes,\n    bool setDefaultTimesOnTokenCreation = true)\n{\n    return new JwtSecurityTokenHandler\n    {\n        MapInboundClaims = mapInboundClaims,\n        MaximumTokenSizeInBytes = maximumTokenSizeInBytes,\n        SetDefaultTimesOnTokenCreation = setDefaultTimesOnTokenCreation\n    };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Saml2AttributeKeyComparer.Equals Method\nDESCRIPTION: Method that compares two SAML2 attribute keys for equality. It checks various attribute properties to determine if they represent the same attribute.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AttributeKeyComparer.Equals(Microsoft.IdentityModel.Tokens.Saml2.Saml2AttributeKeyComparer.AttributeKey x, Microsoft.IdentityModel.Tokens.Saml2.Saml2AttributeKeyComparer.AttributeKey y) -> bool\n```\n\n----------------------------------------\n\nTITLE: Telemetry Interface Definition in C#\nDESCRIPTION: Interface definition for telemetry clients that record operational metrics like configuration refresh requests and durations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Telemetry.ITelemetryClient\nMicrosoft.IdentityModel.Telemetry.ITelemetryClient.IncrementConfigurationRefreshRequestCounter(string metadataAddress, string operationStatus) -> void\nMicrosoft.IdentityModel.Telemetry.ITelemetryClient.IncrementConfigurationRefreshRequestCounter(string metadataAddress, string operationStatus, System.Exception exception) -> void\nMicrosoft.IdentityModel.Telemetry.ITelemetryClient.LogBackgroundConfigurationRefreshFailure(string metadataAddress, System.Exception exception) -> void\nMicrosoft.IdentityModel.Telemetry.ITelemetryClient.LogConfigurationRetrievalDuration(string metadataAddress, System.TimeSpan operationDuration) -> void\nMicrosoft.IdentityModel.Telemetry.ITelemetryClient.LogConfigurationRetrievalDuration(string metadataAddress, System.TimeSpan operationDuration, System.Exception exception) -> void\n```\n\n----------------------------------------\n\nTITLE: Declaring SignUsingSpanDelegate in C#\nDESCRIPTION: This line declares a delegate type named SignUsingSpanDelegate in the Microsoft.IdentityModel.Tokens namespace, likely used for signing operations using Span<T>.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.SignUsingSpanDelegate\n```\n\n----------------------------------------\n\nTITLE: WS-Federation Protocol Prefix Constants\nDESCRIPTION: XML namespace prefix constants used in WS-Federation protocol messages and metadata processing.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Prefixes.Fed = \"fed\";\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Prefixes.Md = \"md\";\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Prefixes.Wsa = \"wsa\";\nconst Microsoft.IdentityModel.Protocols.WsFederation.WsFederationConstants.Prefixes.Xsi = \"xsi\";\n```\n\n----------------------------------------\n\nTITLE: Query and Token Helper Methods\nDESCRIPTION: Utility methods for parsing query strings, handling WS-Federation tokens, and processing X509 certificates.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.WsFederation/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Protocols.WsFederation.QueryHelper.ParseNullableQuery(string queryString);\nstatic Microsoft.IdentityModel.Protocols.WsFederation.QueryHelper.ParseQuery(string queryString);\nstatic Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMessage.GetToken(string wresult);\nstatic Microsoft.IdentityModel.Protocols.WsFederation.WsFederationMetadataSerializer.Trim(string stringToTrim);\nstatic Microsoft.IdentityModel.Tokens.CertificateHelper.LoadX509Certificate(string data);\n```\n\n----------------------------------------\n\nTITLE: Defining InvalidConfigurationException Class in C#\nDESCRIPTION: Declares the InvalidConfigurationException class with various constructors for handling invalid configuration scenarios.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.Configuration.InvalidConfigurationException\nMicrosoft.IdentityModel.Protocols.Configuration.InvalidConfigurationException.InvalidConfigurationException() -> void\nMicrosoft.IdentityModel.Protocols.Configuration.InvalidConfigurationException.InvalidConfigurationException(string message) -> void\nMicrosoft.IdentityModel.Protocols.Configuration.InvalidConfigurationException.InvalidConfigurationException(string message, System.Exception innerException) -> void\nMicrosoft.IdentityModel.Protocols.Configuration.InvalidConfigurationException.InvalidConfigurationException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebKey Parameter Names Field\nDESCRIPTION: Static readonly field declaration for storing uppercase JSON Web Key parameter names in a frozen set\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Tokens.Json.JsonWebKeySerializer.JsonWebKeyParameterNamesUpperCase -> System.Collections.Frozen.FrozenSet<string>\n```\n\n----------------------------------------\n\nTITLE: Implementing ReadHeaderValue Method in JsonWebToken Class\nDESCRIPTION: This snippet defines a virtual method ReadHeaderValue in the JsonWebToken class. It takes a Utf8JsonReader by reference and a dictionary of claims as parameters, and returns void. The method is likely used to parse JWT header values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net8.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadHeaderValue(ref System.Text.Json.Utf8JsonReader reader, System.Collections.Generic.IDictionary<string, object> claims) -> void\n```\n\n----------------------------------------\n\nTITLE: Telemetry Client Implementation in C#\nDESCRIPTION: Concrete implementation of the ITelemetryClient interface for collecting and reporting operational metrics.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Telemetry.TelemetryClient\nMicrosoft.IdentityModel.Telemetry.TelemetryClient.ClientVer -> string\nMicrosoft.IdentityModel.Telemetry.TelemetryClient.IncrementConfigurationRefreshRequestCounter(string metadataAddress, string operationStatus) -> void\nMicrosoft.IdentityModel.Telemetry.TelemetryClient.IncrementConfigurationRefreshRequestCounter(string metadataAddress, string operationStatus, System.Exception exception) -> void\nMicrosoft.IdentityModel.Telemetry.TelemetryClient.LogBackgroundConfigurationRefreshFailure(string metadataAddress, System.Exception exception) -> void\nMicrosoft.IdentityModel.Telemetry.TelemetryClient.LogConfigurationRetrievalDuration(string metadataAddress, System.TimeSpan operationDuration) -> void\nMicrosoft.IdentityModel.Telemetry.TelemetryClient.LogConfigurationRetrievalDuration(string metadataAddress, System.TimeSpan operationDuration, System.Exception exception) -> void\nMicrosoft.IdentityModel.Telemetry.TelemetryClient.TelemetryClient() -> void\n```\n\n----------------------------------------\n\nTITLE: Overriding GetException Method in IssuerValidationError Class in C#\nDESCRIPTION: This method overrides the GetException method in the IssuerValidationError class, returning a System.Exception object representing the validation error.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.IssuerValidationError.GetException() -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: JsonWebToken ReadHeaderValue Virtual Method Signature\nDESCRIPTION: Virtual method signature for reading JWT header values using a Utf8JsonReader and storing them in a dictionary of claims\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvirtual Microsoft.IdentityModel.JsonWebTokens.JsonWebToken.ReadHeaderValue(ref System.Text.Json.Utf8JsonReader reader, System.Collections.Generic.IDictionary<string, object> claims) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining Default Time Constants for SignedHttpRequest in C#\nDESCRIPTION: This snippet defines static readonly fields for default time adjustment and signed HTTP request lifetime in the respective parameter classes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/PublicAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestCreationParameters.DefaultTimeAdjustment -> System.TimeSpan\nstatic readonly Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestValidationParameters.DefaultSignedHttpRequestLifetime -> System.TimeSpan\n```\n\n----------------------------------------\n\nTITLE: UnconditionalSuppressMessageAttribute Class Definition for Code Analysis\nDESCRIPTION: Defines the UnconditionalSuppressMessageAttribute class which is used to unconditionally suppress specific static code analysis warnings or messages. This attribute includes properties to specify the category, check ID, and justification.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_59\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category.get -> string\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId.get -> string\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification.get -> string\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification.set -> void\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId.get -> string\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId.set -> void\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope.get -> string\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope.set -> void\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target.get -> string\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target.set -> void\nSystem.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.UnconditionalSuppressMessageAttribute(string category, string checkId) -> void\n```\n\n----------------------------------------\n\nTITLE: DynamicallyAccessedMemberTypes Enum Values for System.Diagnostics.CodeAnalysis\nDESCRIPTION: Defines the enum values for DynamicallyAccessedMemberTypes used for code analysis in the System.Diagnostics.CodeAnalysis namespace. These flags indicate which members of a type are accessible through reflection.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_57\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents = 2048 -> System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\nSystem.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields = 32 -> System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\nSystem.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods = 8 -> System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\nSystem.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes = 128 -> System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\nSystem.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor = 1 -> System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\nSystem.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties = 512 -> System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes\n```\n\n----------------------------------------\n\nTITLE: Defining XML Namespace Constants in C#\nDESCRIPTION: Constants defining XML namespace URIs and preferred prefixes used in XML signature processing. These constants ensure consistent namespace handling across the library for XML canonicalization and signature operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.ExclusiveC14nInclusiveNamespaces = \"InclusiveNamespaces\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.ExclusiveC14nNamespace = \"http://www.w3.org/2001/10/xml-exc-c14n#\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.ExclusiveC14nPrefix = \"ec\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.Namespace = \"http://www.w3.org/2000/09/xmldsig#\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.PreferredPrefix = \"ds\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.SecurityJan2004Namespace = \"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.SecurityJan2004Prefix = \"o\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.TransformationParameters = \"TransformationParameters\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.XmlNamepspacePrefix = \"xmlns\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.XmlNamespace = \"http://www.w3.org/XML/1998/namespace\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.XmlNamespaceNamespace = \"http://www.w3.org/2000/xmlns/\" -> string\nconst Microsoft.IdentityModel.Xml.XmlSignatureConstants.XmlSchemaNamespace = \"http://www.w3.org/2001/XMLSchema-instance\" -> string\n```\n\n----------------------------------------\n\nTITLE: Generating Unique Identifiers in C#\nDESCRIPTION: Static methods for creating random IDs, URIs, and unique IDs with optional prefixes.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Shipped.txt#2025-04-23_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.UniqueId.CreateRandomId() -> string\nstatic Microsoft.IdentityModel.Tokens.UniqueId.CreateRandomId(string prefix) -> string\nstatic Microsoft.IdentityModel.Tokens.UniqueId.CreateRandomUri() -> System.Uri\nstatic Microsoft.IdentityModel.Tokens.UniqueId.CreateUniqueId() -> string\nstatic Microsoft.IdentityModel.Tokens.UniqueId.CreateUniqueId(string prefix) -> string\n```\n\n----------------------------------------\n\nTITLE: IssuerValidationError Constructor Signature in C#\nDESCRIPTION: Constructor signature for the IssuerValidationError class which is used for handling errors during issuer validation. It takes parameters for message details, exception type, stack frame information, and the invalid issuer string.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.IssuerValidationError.IssuerValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, string invalidIssuer) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing IssuerValidationError Constructor in C#\nDESCRIPTION: This constructor initializes an IssuerValidationError object with details about the validation error, including the message, exception type, stack frame, and invalid issuer.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.IssuerValidationError.IssuerValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, string invalidIssuer) -> void\n```\n\n----------------------------------------\n\nTITLE: Override GetException Method\nDESCRIPTION: Override method signature for retrieving the exception from an issuer validation error\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.IssuerValidationError.GetException() -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: Deprecated ClaimsIdentity Constructors\nDESCRIPTION: Lists all deprecated constructor signatures for System.Security.Claims.ClaimsIdentity class. All these constructors should be replaced with Microsoft.IdentityModel.Tokens.CaseSensitiveClaimsIdentity for better claim comparison behavior.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/BannedSymbols.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nClaimsIdentity();\nClaimsIdentity(IIdentity identity);\nClaimsIdentity(IEnumerable<Claim> claims);\nClaimsIdentity(string authenticationType);\nClaimsIdentity(IEnumerable<Claim> claims, string authenticationType);\nClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims);\nClaimsIdentity(string authenticationType, string nameType, string roleType);\nClaimsIdentity(IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType);\nClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType);\nClaimsIdentity(BinaryReader reader);\n```\n\n----------------------------------------\n\nTITLE: Implementing NullIdentityModelLogger in C#\nDESCRIPTION: Null implementation of IIdentityLogger interface, providing no-op methods for logging.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Abstractions.NullIdentityModelLogger\nMicrosoft.IdentityModel.Abstractions.NullIdentityModelLogger.IsEnabled(Microsoft.IdentityModel.Abstractions.EventLogLevel eventLogLevel) -> bool\nMicrosoft.IdentityModel.Abstractions.NullIdentityModelLogger.Log(Microsoft.IdentityModel.Abstractions.LogEntry entry) -> void\nstatic Microsoft.IdentityModel.Abstractions.NullIdentityModelLogger.Instance.get -> Microsoft.IdentityModel.Abstractions.NullIdentityModelLogger\n```\n\n----------------------------------------\n\nTITLE: Signature Provider Error Constants in C#\nDESCRIPTION: Constants for error messages related to signature provider creation, validation, and algorithm support issues.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10621 = \"IDX10621: '{0}' supports: '{1}' of types: '{2}' or '{3}'. SecurityKey received was of type '{4}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10634 = \"IDX10634: Unable to create the SignatureProvider.\\nAlgorithm: '{0}', SecurityKey: '{1}'\\n is not supported. The list of supported algorithms is available here: https://aka.ms/IdentityModel/supported-algorithms\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10636 = \"IDX10636: CryptoProviderFactory.CreateForVerifying returned null for key: '{0}', signatureAlgorithm: '{1}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10637 = \"IDX10637: CryptoProviderFactory.CreateForSigning returned null for key: '{0}', signatureAlgorithm: '{1}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10638 = \"IDX10638: Cannot create the SignatureProvider, 'key.HasPrivateKey' is false, cannot create signatures. Key: {0}.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10640 = \"IDX10640: Algorithm is not supported: '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10642 = \"IDX10642: Creating signature using the input: '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10649 = \"IDX10649: Failed to create a SymmetricSignatureProvider for the algorithm '{0}'.\"\n```\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10652 = \"IDX10652: The algorithm '{0}' is not supported.\"\n```\n\n----------------------------------------\n\nTITLE: Example of Mapped Well-Known OpenID Connect Keys in JWK Format\nDESCRIPTION: This snippet shows the JSON structure of well-known keys mapped to JWK format. It includes fields like kty (key type), use (usage), kid (key ID), x5t (X.509 certificate thumbprint), n (modulus), and e (exponent) for an RSA key.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"keys\": [\n    {\n      \"kty\": \"RSA\",\n      \"use\": \"sig\",\n      \"kid\": \"kriMPdmBvx68skT8-mPAB3BseeA\",\n      \"x5t\": \"kriMPdmBvx68skT8-mPAB3BseeA\",\n      \"n\": \"kSCWg6q9iYxvJE2NIhSyOiKvqoWCO2GFipgH0sTSAs5FalHQosk9ZNTztX0ywS/AHsBeQPqYygfYVJL6/EgzVuwRk5txr9e3n1uml94fLyq/AXbwo9yAduf4dCHTP8CWR1dnDR+Qnz/4PYlWVEuiHHSgMGmFBdKgTG0YcdlHGnTi+PC/E4Yd275kKSQHFxKjcp8NlK+Dwy71L/FLlrzS2JhvKIzjD1m/3yvIm/uL1K+u+B32Yhchtl0VwMKfI5QjmtZxkD0ZhnMkbYRbOj1cl8loeLgMd4KPKWGdUXXRrGYAB8rBmCY8iu/vFVXzFDGehMreOv6Wxg2JI/Mb5svRpA==\",\n      \"e\": \"AQAB\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SAML 2.0 Type Constants in C#\nDESCRIPTION: Declaration of constant string values for SAML 2.0 XML schema types. These constants define the standard type names for elements in the SAML 2.0 XML schema, used for XML serialization and deserialization.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.ActionType = \"ActionType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AdviceType = \"AdviceType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AssertionType = \"AssertionType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AttributeStatementType = \"AttributeStatementType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AttributeType = \"AttributeType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AudienceRestrictionType = \"AudienceRestrictionType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AuthnContextType = \"AuthnContextType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AuthnStatementType = \"AuthnStatementType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.AuthzDecisionStatementType = \"AuthzDecisionStatementType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.BaseIDAbstractType = \"BaseIDAbstractType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.ConditionAbstractType = \"ConditionAbstractType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.ConditionsType = \"ConditionsType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.EncryptedElementType = \"EncryptedElementType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.EvidenceType = \"EvidenceType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.KeyInfoConfirmationDataType = \"KeyInfoConfirmationDataType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.NameIDType = \"NameIDType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.OneTimeUseType = \"OneTimeUseType\" -> string\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Types.ProxyRestrictionType = \"ProxyRestrictionType\" -> string\n```\n\n----------------------------------------\n\nTITLE: Defining Token Utility Constants in C#\nDESCRIPTION: Constants defined in the TokenUtilities class for JSON array and null values, used during token processing and validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.TokenUtilities.JsonArray = \"JSON_ARRAY\" -> string\nconst Microsoft.IdentityModel.Tokens.TokenUtilities.JsonNull = \"JSON_NULL\" -> string\n```\n\n----------------------------------------\n\nTITLE: GetException Method Override in IssuerValidationError Class\nDESCRIPTION: Method signature for the overridden GetException method in the IssuerValidationError class. This method returns an Exception object representing the issuer validation error.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.IssuerValidationError.GetException() -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: Implementing IXmlElementReader Interface in C#\nDESCRIPTION: Defines the IXmlElementReader interface with methods for reading XML elements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.IXmlElementReader\nMicrosoft.IdentityModel.Xml.IXmlElementReader.CanRead(System.Xml.XmlReader reader) -> bool\nMicrosoft.IdentityModel.Xml.IXmlElementReader.Items.get -> System.Collections.Generic.IList<object>\nMicrosoft.IdentityModel.Xml.IXmlElementReader.Read(System.Xml.XmlReader reader) -> void\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Signatures in C# with JwtTokenUtilities\nDESCRIPTION: A static method that creates digital signatures for JWT tokens using the provided signing credentials. It takes a data span to sign, a destination buffer for the signature, signing credentials, and returns the signature length as an out parameter.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateSignature(System.ReadOnlySpan<byte> data, System.Span<byte> destination, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, out int bytesWritten) -> bool\n```\n\n----------------------------------------\n\nTITLE: Setting ValidAudience Property in C# Token Validation\nDESCRIPTION: This method sets a single valid audience value for token validation. It checks if the provided audience is null and adds it to the ValidAudiences collection if not null.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.TestExtensions/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nValidAudience = new[] { audience };\n```\n\n----------------------------------------\n\nTITLE: Defining JsonClaimSet lock field in C#\nDESCRIPTION: Declaration of a thread synchronization lock field in the JsonClaimSet class to ensure thread-safe operations when accessing or modifying claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonClaimSet._claimsLock -> System.Threading.Lock\n```\n\n----------------------------------------\n\nTITLE: JsonWebKeyParameterNamesUpperCase Static Field Declaration\nDESCRIPTION: Static readonly field declaration for the JsonWebKeyParameterNamesUpperCase HashSet in the JsonWebKeySerializer class. This collection likely stores the uppercase versions of valid JSON Web Key parameter names for case-insensitive comparisons.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/netstandard2.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Tokens.Json.JsonWebKeySerializer.JsonWebKeyParameterNamesUpperCase -> System.Collections.Generic.HashSet<string>\n```\n\n----------------------------------------\n\nTITLE: Implementing TextWriterEventListener Class in C#\nDESCRIPTION: Defines the TextWriterEventListener class for writing events to a text writer or file.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Logging.TextWriterEventListener\nMicrosoft.IdentityModel.Logging.TextWriterEventListener.TextWriterEventListener() -> void\nMicrosoft.IdentityModel.Logging.TextWriterEventListener.TextWriterEventListener(string filePath) -> void\nMicrosoft.IdentityModel.Logging.TextWriterEventListener.TextWriterEventListener(System.IO.StreamWriter streamWriter) -> void\noverride Microsoft.IdentityModel.Logging.TextWriterEventListener.Dispose() -> void\noverride Microsoft.IdentityModel.Logging.TextWriterEventListener.OnEventWritten(System.Diagnostics.Tracing.EventWrittenEventArgs eventData) -> void\nstatic readonly Microsoft.IdentityModel.Logging.TextWriterEventListener.DefaultLogFileName -> string\n```\n\n----------------------------------------\n\nTITLE: Defining Default Version Values for Token Formats in C#\nDESCRIPTION: This class defines static constants for default version values used in token validation and creation. It includes version information for JWT tokens and various identity protocols such as WS-Federation and SAML.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI/net9.0/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\n\nnamespace Microsoft.IdentityModel.Tokens\n{\n    /// <summary>\n    /// Constants for JsonWebToken and JWS.\n    /// </summary>\n    public static class DefaultVersions\n    {\n        /// <summary>\n        /// Default scheme for WS-Federation.\n        /// </summary>\n        public const string WsFederationScheme = \"wsfederation\";\n\n        /// <summary>\n        /// Default scheme for SAML.\n        /// </summary>\n        public const string SamlScheme = \"saml\";\n\n        /// <summary>\n        /// Default version for WS-Federation.\n        /// </summary>\n        public const string WsFederationVersion = \"1.3.0\";\n\n        /// <summary>\n        /// Default JWT version.\n        /// </summary>\n        public const string JwtVersion = \"1.0.0\";\n\n        /// <summary>\n        /// Default scheme for OAuth 2.0.\n        /// </summary>\n        public const string OAuth2Scheme = \"oauth2\";\n\n        /// <summary>\n        /// Default OAuth 2.0 version.\n        /// </summary>\n        public const string OAuth2Version = \"2.0\";\n\n        /// <summary>\n        /// Default scheme for OpenId.\n        /// </summary>\n        public const string OpenIdScheme = \"openid\";\n\n        /// <summary>\n        /// Default scheme for OpenId Connect.\n        /// </summary>\n        public const string OpenIdConnectScheme = \"openidconnect\";\n\n        /// <summary>\n        /// Default version for OpenIdConnect.\n        /// </summary>\n        public const string OpenIdConnectVersion = \"1.0\";\n\n        /// <summary>\n        /// Default SAML version.\n        /// </summary>\n        public const string SamlVersion = \"2.0\";\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AbsoluteUriCollection.InsertItem Method\nDESCRIPTION: Method for inserting a URI into a collection of absolute URIs. It handles the insertion operation and may perform validation on the URI being inserted.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml2.AbsoluteUriCollection.InsertItem(int index, System.Uri item) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing AddHClaim Method in SignedHttpRequestHandler\nDESCRIPTION: Method for adding HTTP header claims to a signed HTTP request using a UTF8JsonWriter and SignedHttpRequestDescriptor.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.SignedHttpRequest/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestHandler.AddHClaim(ref System.Text.Json.Utf8JsonWriter writer, Microsoft.IdentityModel.Protocols.SignedHttpRequest.SignedHttpRequestDescriptor signedHttpRequestDescriptor) -> void\n```\n\n----------------------------------------\n\nTITLE: EnvelopedSignatureTransform Class Implementation in C#\nDESCRIPTION: Implementation of the EnvelopedSignatureTransform class for XML signature transformations. This class handles the specific transformation needed for enveloped signatures where the signature is contained within the signed content.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureTransform\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureTransform.EnvelopedSignatureTransform() -> void\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Signature Method in C#\nDESCRIPTION: Static method signature for creating cryptographic signatures for JWT tokens. Takes input data and signing credentials to generate a signature in the provided destination buffer, returning success status and bytes written.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net9.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateSignature(System.ReadOnlySpan<byte> data, System.Span<byte> destination, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, out int bytesWritten) -> bool\n```\n\n----------------------------------------\n\nTITLE: Implementing TryReadJwtClaim Property in JsonWebToken Class (C#)\nDESCRIPTION: Adds a TryReadJwtClaim property to the JsonWebToken class. The getter returns a Microsoft.IdentityModel.Tokens.TryReadJwtClaim object, while the setter is void.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net6.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryReadJwtClaim.get -> Microsoft.IdentityModel.Tokens.TryReadJwtClaim\nMicrosoft.IdentityModel.JsonWebTokens.JsonWebToken.TryReadJwtClaim.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining ISafeLogSecurityArtifact Interface in C#\nDESCRIPTION: Defines the ISafeLogSecurityArtifact interface for safe logging of security artifacts.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/PublicAPI.Shipped.txt#2025-04-23_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Logging.ISafeLogSecurityArtifact\nMicrosoft.IdentityModel.Logging.ISafeLogSecurityArtifact.UnsafeToString() -> string\n```\n\n----------------------------------------\n\nTITLE: ECDH Key Exchange Provider Class Methods\nDESCRIPTION: Core implementation methods for ECDH key exchange operations including constructor and KDF generation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nEcdhKeyExchangeProvider(SecurityKey privateKey, SecurityKey publicKey, string alg, string enc)\nGenerateKdf(string apu = null, string apv = null) -> SecurityKey\nKeyDataLen { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Implementing AttributeKey.Equals Method\nDESCRIPTION: Method that compares the current attribute key with another for equality. It checks if all relevant properties match between the two keys.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.Saml2.Saml2AttributeKeyComparer.AttributeKey.Equals(Microsoft.IdentityModel.Tokens.Saml2.Saml2AttributeKeyComparer.AttributeKey other) -> bool\n```\n\n----------------------------------------\n\nTITLE: SignUsingSpanDelegate Declaration\nDESCRIPTION: Delegate declaration for signing operations using Span<T>\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.SignUsingSpanDelegate\n```\n\n----------------------------------------\n\nTITLE: Implementing SamlValidationError.GetException Method\nDESCRIPTION: Method that retrieves or creates an exception for a SAML validation error. It returns an exception object containing error details.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.Saml.SamlValidationError.GetException() -> System.Exception\n```\n\n----------------------------------------\n\nTITLE: Defining Log Message Constants for Encoding and Key Size Validation in C#\nDESCRIPTION: This snippet defines constant strings for log messages related to Base64url encoding and key size validation. These constants provide information about encoding errors and invalid key size requests.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10400 = \"IDX10400: Unable to decode: '{0}' as Base64url encoded string.\"\nconst Microsoft.IdentityModel.Tokens.LogMessages.IDX10401 = \"IDX10401: Invalid requested key size. Valid key sizes are: 256, 384, and 512.\"\n```\n\n----------------------------------------\n\nTITLE: Key Exchange Method Declaration in C#\nDESCRIPTION: Method signature for getting the encryption algorithm name from an ECDH key exchange provider.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.GetEncryptionAlgorithm() -> string\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Token Validator for TLS Certificate Binding\nDESCRIPTION: This snippet shows how to create a custom token validator class that extends JwtSecurityTokenHandler to implement advanced TLS certificate binding. It overrides the ValidateToken method to perform custom validation logic.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.LoggingExtensions/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomTokenValidator : JwtSecurityTokenHandler\n{\n    public override ClaimsPrincipal ValidateToken(\n        string token,\n        TokenValidationParameters validationParameters,\n        out SecurityToken validatedToken)\n    {\n        // Perform standard token validation\n        var principal = base.ValidateToken(token, validationParameters, out validatedToken);\n        \n        // Get TLS client certificate from the current connection\n        var clientCertificate = GetClientCertificateFromCurrentConnection();\n        \n        if (clientCertificate != null)\n        {\n            // Validate that the certificate thumbprint in the token\n            // matches the client certificate used for TLS\n            var jwtToken = validatedToken as JwtSecurityToken;\n            var x5t256Claim = jwtToken?.Claims.FirstOrDefault(c => c.Type == \"x5t#S256\");\n            \n            if (x5t256Claim != null)\n            {\n                // Calculate thumbprint of the client certificate\n                var certificateThumbprint = CalculateCertificateThumbprint(clientCertificate);\n                \n                // Compare the thumbprints\n                if (!string.Equals(x5t256Claim.Value, certificateThumbprint, StringComparison.OrdinalIgnoreCase))\n                {\n                    throw new SecurityTokenValidationException(\"TLS certificate does not match the certificate bound to the token.\");\n                }\n            }\n        }\n        \n        return principal;\n    }\n    \n    private X509Certificate2 GetClientCertificateFromCurrentConnection()\n    {\n        // Implementation depends on your hosting environment\n        // This is just a placeholder\n        return null;\n    }\n    \n    private string CalculateCertificateThumbprint(X509Certificate2 certificate)\n    {\n        // Calculate SHA-256 thumbprint and encode as Base64Url\n        // This is just a placeholder\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: ContainsNullElement Method for Collection Validation in C#\nDESCRIPTION: A utility method that checks if a collection contains any null elements. It returns true if a null element is found, otherwise false.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.TestExtensions/PublicAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate static bool ContainsNullElement(IEnumerable<string> collection)\n{\n    foreach (var s in collection)\n        if (s == null)\n            return true;\n\n    return false;\n}\n```\n\n----------------------------------------\n\nTITLE: Log Method for Writing Log Entries in C#\nDESCRIPTION: Method to write a log entry to the underlying logger. It takes a LogEntry parameter from Microsoft.IdentityModel.Abstractions which contains the log message and related data.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.LoggingExtensions/PublicAPI.Shipped.txt#2025-04-23_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.LoggingExtensions.IdentityLoggerAdapter.Log(Microsoft.IdentityModel.Abstractions.LogEntry entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Telemetry Support Classes in C#\nDESCRIPTION: Supporting classes for telemetry operations including constants and data recording.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Telemetry.TelemetryConstants\nMicrosoft.IdentityModel.Telemetry.TelemetryConstants.Protocols\nMicrosoft.IdentityModel.Telemetry.TelemetryDataRecorder\nMicrosoft.IdentityModel.Telemetry.TelemetryDataRecorder.TelemetryDataRecorder() -> void\n```\n\n----------------------------------------\n\nTITLE: Validating Audiences in JWT Token Claims\nDESCRIPTION: A method that examines a JWT token's claims to validate audience values. It handles different claim types and structures including single audience strings and collections of audience values.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool ValidateAudience(IEnumerable<Claim> claims, TokenValidationParameters validationParameters, SecurityToken securityToken, out string validatedAudience)\n{\n    bool matched = false;\n    validatedAudience = null;\n\n    if (validationParameters.ValidateAudience == false)\n    {\n        return true;\n    }\n\n    if (claims == null || !claims.Any())\n    {\n        return false;\n    }\n\n    // for a JWE, a claim named 'aud' may not be found.\n    var audiences = claims.Where(c => c.Type == validationParameters.ValidAudience);\n    if (!audiences.Any())\n    {\n        audiences = claims.Where(c => c.Type == ClaimTypes.Audience);\n    }\n\n    if (!audiences.Any())\n    {\n        if (!validationParameters.RequireAudience)\n        {\n            return true;\n        }\n\n        return false;\n    }\n\n    // keep track of exceptions thrown, for later reporting\n    Exception audienceException = null;\n\n    try\n    {\n        foreach (Claim aud in audiences)\n        {\n            if (ValidateAudience(aud.Value, validationParameters, securityToken, out validatedAudience))\n            {\n                matched = true;\n                break;\n            }\n        }\n    }\n    catch (Exception ex)\n    {\n        audienceException = ex;\n    }\n\n    if (!matched && audienceException != null)\n    {\n        throw audienceException;\n    }\n\n    return matched;\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor for IdentityLoggerAdapter in C#\nDESCRIPTION: Constructor for the IdentityLoggerAdapter class that takes an ILogger instance as a parameter, allowing the adapter to wrap the standard Microsoft.Extensions.Logging logger.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.LoggingExtensions/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.LoggingExtensions.IdentityLoggerAdapter.IdentityLoggerAdapter(Microsoft.Extensions.Logging.ILogger logger) -> void\n```\n\n----------------------------------------\n\nTITLE: Cloning IssuerSigningKeyResolverUsingConfiguration Delegate in C#\nDESCRIPTION: Bug fix to ensure the IssuerSigningKeyResolverUsingConfiguration delegate is properly copied when cloning configurations. This addresses issue #1909 in the project repository.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nCopy the IssuerSigningKeyResolverUsingConfiguration delegate in Clone()\n```\n\n----------------------------------------\n\nTITLE: Extending JwtSecurityTokenHandler to disable claim type mapping in C#\nDESCRIPTION: This code demonstrates how to create a custom JwtSecurityTokenHandler that disables claim type mapping. It inherits from the base JwtSecurityTokenHandler class and overrides the CreateClaimsIdentity method to ensure the raw claim types from the JWT are preserved without mapping them to .NET claim types.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net462/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomJwtSecurityTokenHandler : JwtSecurityTokenHandler\n{\n    public override ClaimsIdentity CreateClaimsIdentity(JwtSecurityToken jwtToken, string issuer, TokenValidationParameters validationParameters)\n    {\n        // Create the ClaimsIdentity without mapping the claim types\n        return CreateClaimsIdentity(jwtToken, issuer, validationParameters, mapInboundClaims: false);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: TryReadJwtClaim Property in TokenValidationParameters\nDESCRIPTION: Property accessor definitions for the TryReadJwtClaim property in the TokenValidationParameters class. This property likely controls behavior related to attempting to parse claims from JWT tokens during validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.TokenValidationParameters.TryReadJwtClaim.get\nMicrosoft.IdentityModel.Tokens.TokenValidationParameters.TryReadJwtClaim.set -> void\n```\n\n----------------------------------------\n\nTITLE: Creating Signing Credentials with Symmetric Security Key\nDESCRIPTION: Creates SigningCredentials using a SymmetricSecurityKey with HMAC-SHA256 algorithm. This shows how to use a symmetric key for signing tokens with HMAC.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar signingCredentials = new SigningCredentials(\n    symmetricSecurityKey, \n    SecurityAlgorithms.HmacSha256);\n```\n\n----------------------------------------\n\nTITLE: RequiresUnreferencedCodeAttribute Class Definition for Code Analysis\nDESCRIPTION: Defines the RequiresUnreferencedCodeAttribute class which is used to indicate that the attributed code requires unreferenced code to function correctly. This attribute helps with trimming analysis in .NET.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_58\n\nLANGUAGE: C#\nCODE:\n```\nSystem.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute\nSystem.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message.get -> string\nSystem.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.RequiresUnreferencedCodeAttribute(string message) -> void\nSystem.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url.get -> string\nSystem.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url.set -> void\n```\n\n----------------------------------------\n\nTITLE: Defining EventLogLevel Enum in C#\nDESCRIPTION: Enumerates log levels for events, including LogAlways, Critical, Error, Warning, Informational, and Verbose.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Abstractions.EventLogLevel\nMicrosoft.IdentityModel.Abstractions.EventLogLevel.Critical = 1 -> Microsoft.IdentityModel.Abstractions.EventLogLevel\nMicrosoft.IdentityModel.Abstractions.EventLogLevel.Error = 2 -> Microsoft.IdentityModel.Abstractions.EventLogLevel\nMicrosoft.IdentityModel.Abstractions.EventLogLevel.Informational = 4 -> Microsoft.IdentityModel.Abstractions.EventLogLevel\nMicrosoft.IdentityModel.Abstractions.EventLogLevel.LogAlways = 0 -> Microsoft.IdentityModel.Abstractions.EventLogLevel\nMicrosoft.IdentityModel.Abstractions.EventLogLevel.Verbose = 5 -> Microsoft.IdentityModel.Abstractions.EventLogLevel\nMicrosoft.IdentityModel.Abstractions.EventLogLevel.Warning = 3 -> Microsoft.IdentityModel.Abstractions.EventLogLevel\n```\n\n----------------------------------------\n\nTITLE: Implementing LRU Cache Class Definition in C#\nDESCRIPTION: Generic implementation of an event-based LRU (Least Recently Used) cache with support for key-value pairs, expiration, and custom event handling.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_36\n\nLANGUAGE: C#\nCODE:\n```\npublic class EventBasedLRUCache<TKey, TValue> {\n    public EventBasedLRUCache(int capacity, \n        TaskCreationOptions options = TaskCreationOptions.None,\n        IEqualityComparer<TKey> comparer = null,\n        bool removeExpiredValues = false,\n        int removeExpiredValuesIntervalInSeconds = 300,\n        bool maintainLRU = false,\n        int compactIntervalInSeconds = 20) { }\n\n    public bool TryGetValue(TKey key, out TValue value)\n    public void SetValue(TKey key, TValue value)\n    public bool TryRemove(TKey key)\n    public void RemoveExpiredValues()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ECDH Key Exchange Provider Method\nDESCRIPTION: Method signature for getting the encryption algorithm name from the ECDH key exchange provider\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.EcdhKeyExchangeProvider.GetEncryptionAlgorithm() -> string\n```\n\n----------------------------------------\n\nTITLE: Version 8.2.1 Changelog Entry\nDESCRIPTION: Details the changes in version 8.2.1 including .NET 9 GA update, bug fixes, and token validation logic improvements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n8.2.1\n=====\n### New features\n- Update to use .NET 9 GA. See [2990](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2990).\n\n### Bug fixes\n- Remove dependency on Microsoft.Bcl.TimeProvider for .NET 8+ targets. See [2935](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2935).\n- Update cgmanifest to align with the JSON schema. See [2969](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2969).\n```\n\n----------------------------------------\n\nTITLE: Defining IIdentityLogger Interface in C#\nDESCRIPTION: Interface for identity logging, with methods to check if logging is enabled and to log entries.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Abstractions.IIdentityLogger\nMicrosoft.IdentityModel.Abstractions.IIdentityLogger.IsEnabled(Microsoft.IdentityModel.Abstractions.EventLogLevel eventLogLevel) -> bool\nMicrosoft.IdentityModel.Abstractions.IIdentityLogger.Log(Microsoft.IdentityModel.Abstractions.LogEntry entry) -> void\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicallyAccessedMembers Attribute in C#\nDESCRIPTION: Example of defining the DynamicallyAccessedMembers attribute in multiple assemblies, which causes an internal error. This issue was addressed in a pull request.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n[DynamicallyAccessedMembers(DynamicallyAccessedMemberTypes.PublicConstructors)]\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization Methods in JsonSerializerPrimitives\nDESCRIPTION: Provides methods for reading and writing JSON data using System.Text.Json, including specialized methods for handling strings, collections, and objects. These utilities support the serialization and deserialization of security token components.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_49\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.Json.JsonSerializerPrimitives.ReadStringOrNumberAsString(ref System.Text.Json.Utf8JsonReader reader, string propertyName, string className, bool read = false) -> string\n```\n\n----------------------------------------\n\nTITLE: HTTP Version Policy Property Definition in C#\nDESCRIPTION: Declares get and set accessors for the HttpVersionPolicy property that controls HTTP version behavior in document retrieval. Returns a nullable HttpVersionPolicy enum value.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersionPolicy.get -> System.Net.Http.HttpVersionPolicy?\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersionPolicy.set -> void\n```\n\n----------------------------------------\n\nTITLE: IdentityLoggerAdapter Class Definition in C#\nDESCRIPTION: The namespace and class definition for IdentityLoggerAdapter which serves as a bridge between Microsoft.Extensions.Logging and Microsoft.IdentityModel logging systems.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.LoggingExtensions/PublicAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nMicrosoft.IdentityModel.LoggingExtensions.IdentityLoggerAdapter\n```\n\n----------------------------------------\n\nTITLE: Encoding Utility Functions for String Operations\nDESCRIPTION: Helper methods for performing encoding-dependent operations on strings. These functions provide a generic way to work with encoded data through various callback functions and support different encoding types.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/InternalAPI.Shipped.txt#2025-04-23_snippet_45\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.EncodingUtils.PerformEncodingDependentOperation<T, TX, TY, TZ>(string input, int offset, int length, System.Text.Encoding encoding, TX argx, TY argy, TZ argz, System.Func<byte[], int, TX, TY, TZ, T> action) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.EncodingUtils.PerformEncodingDependentOperation<T, TX>(string input, int offset, int length, System.Text.Encoding encoding, TX parameter, System.Func<byte[], int, TX, T> action) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.EncodingUtils.PerformEncodingDependentOperation<T>(string input, int offset, int length, System.Text.Encoding encoding, System.Func<byte[], int, T> action) -> T\n```\n\nLANGUAGE: C#\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.EncodingUtils.PerformEncodingDependentOperation<T>(string input, System.Text.Encoding encoding, System.Func<byte[], int, T> action) -> T\n```\n\n----------------------------------------\n\nTITLE: IssuerValidationError Constructor Definition\nDESCRIPTION: Constructor signature for creating an issuer validation error with message details, exception type, stack trace information and invalid issuer value\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Tokens.IssuerValidationError.IssuerValidationError(Microsoft.IdentityModel.Tokens.MessageDetail messageDetail, System.Type exceptionType, System.Diagnostics.StackFrame stackFrame, string invalidIssuer) -> void\n```\n\n----------------------------------------\n\nTITLE: Implementing NullTelemetryClient in C#\nDESCRIPTION: Null implementation of ITelemetryClient interface, providing no-op methods for telemetry operations.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Abstractions/PublicAPI.Shipped.txt#2025-04-23_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient.ClientId.get -> string\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient.ClientId.set -> void\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient.Initialize() -> void\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient.IsEnabled() -> bool\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient.IsEnabled(string eventName) -> bool\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient.TrackEvent(Microsoft.IdentityModel.Abstractions.TelemetryEventDetails eventDetails) -> void\nMicrosoft.IdentityModel.Abstractions.NullTelemetryClient.TrackEvent(string eventName, System.Collections.Generic.IDictionary<string, string> stringProperties = null, System.Collections.Generic.IDictionary<string, long> longProperties = null, System.Collections.Generic.IDictionary<string, bool> boolProperties = null, System.Collections.Generic.IDictionary<string, System.DateTime> dateTimeProperties = null, System.Collections.Generic.IDictionary<string, double> doubleProperties = null, System.Collections.Generic.IDictionary<string, System.Guid> guidProperties = null) -> void\nstatic Microsoft.IdentityModel.Abstractions.NullTelemetryClient.Instance.get -> Microsoft.IdentityModel.Abstractions.NullTelemetryClient\n```\n\n----------------------------------------\n\nTITLE: Adding NoWarn Directive for SYSLIB0057 in C# Project\nDESCRIPTION: Update to add a NoWarn directive for SYSLIB0057 due to breaking changes in .NET preview 7. This change was made in a GitHub Actions update.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n<NoWarn>$(NoWarn);SYSLIB0057</NoWarn>\n```\n\n----------------------------------------\n\nTITLE: ECDsa Security Key to JsonWebKey Conversion\nDESCRIPTION: Static conversion method that transforms an ECDsaSecurityKey into a JsonWebKey format\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/netstandard2.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.IdentityModel.Tokens.JsonWebKeyConverter.ConvertFromECDsaSecurityKey(Microsoft.IdentityModel.Tokens.ECDsaSecurityKey key) -> Microsoft.IdentityModel.Tokens.JsonWebKey\n```\n\n----------------------------------------\n\nTITLE: Defining HttpVersionPolicy Setter in HttpDocumentRetriever Class (C#)\nDESCRIPTION: This code snippet defines the setter method for the HttpVersionPolicy property in the HttpDocumentRetriever class. It has a void return type, indicating it doesn't return a value after setting the property.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols/PublicAPI/net8.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Protocols.HttpDocumentRetriever.HttpVersionPolicy.set -> void\n```\n\n----------------------------------------\n\nTITLE: JsonWebKeyParameterNamesUpperCase Field Declaration in C#\nDESCRIPTION: Static readonly field declaration for a HashSet containing uppercase JSON Web Key parameter names.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nstatic readonly Microsoft.IdentityModel.Tokens.Json.JsonWebKeySerializer.JsonWebKeyParameterNamesUpperCase -> System.Collections.Generic.HashSet<string>\n```\n\n----------------------------------------\n\nTITLE: Version 8.1.2 and 8.1.1 Changelog Entries\nDESCRIPTION: Lists bug fixes and improvements in versions 8.1.2 and 8.1.1, including ClaimsIdentity fixes and ConfigurationManager updates.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n8.1.2\n=====\n### Bug fixes\n- CaseSensitiveClaimsIdentity.Clone() now returns a `CaseSensitiveClaimsIdentity` as expected. See [2879](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2879)\n\n8.1.1\n=====\n### Bug fixes\n- Fix bug where ConfigurationManager was updating keys too frequently. See [2866](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/2866) for details.\n```\n\n----------------------------------------\n\nTITLE: Disabling Exception Scrubbing in C#\nDESCRIPTION: Shows how to disable the scrubbing of exception messages for debugging purposes using an AppContext switch. This allows more detailed error information to be logged.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nAppContext.SetSwitch(\"Switch.Microsoft.IdentityModel.DoNotScrubExceptions\", true);\n```\n\n----------------------------------------\n\nTITLE: Retrieving IdP Metadata URL for Kubernetes SAML Configuration\nDESCRIPTION: Shows how to obtain the SP metadata URL with curl by accessing a specific endpoint of the Kubernetes API server authentication URL. This URL is used to establish the SAML connection between Kubernetes and the identity provider.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Protocols.OpenIdConnect/PublicAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -kL https://<kubernetes API server>/apis/authentication.k8s.io/v1/webhook\n```\n\n----------------------------------------\n\nTITLE: SAML 2.0 Attribute Constants\nDESCRIPTION: Defines standard attribute names used in SAML 2.0 token processing including Address, Authentication Instant, and Format.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/PublicAPI.Shipped.txt#2025-04-23_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.Address = \"Address\";\nconst Microsoft.IdentityModel.Tokens.Saml2.Saml2Constants.Attributes.AuthnInstant = \"AuthnInstant\";\n```\n\n----------------------------------------\n\nTITLE: Defining SAML Attribute Constants in C#\nDESCRIPTION: String constants for SAML attribute names used in token serialization and deserialization. These provide consistent naming when working with SAML attributes across the library.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens.Saml/InternalAPI.Shipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.ActionNamespaceAttribute = \"Namespace\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.AssertionID = \"AssertionID\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.AttributeName = \"AttributeName\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.AttributeNamespace = \"AttributeNamespace\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.AuthenticationInstant = \"AuthenticationInstant\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.AuthenticationMethod = \"AuthenticationMethod\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.AuthorityBinding = \"AuthorityBinding\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.AuthorityKind = \"AuthorityKind\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.Binding = \"Binding\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.Decision = \"Decision\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.DNSAddress = \"DNSAddress\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.Format = \"Format\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.IPAddress = \"IPAddress\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.IssueInstant = \"IssueInstant\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.Issuer = \"Issuer\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.Location = \"Location\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.MajorVersion = \"MajorVersion\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.MinorVersion = \"MinorVersion\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.NameQualifier = \"NameQualifier\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.Namespace = \"Namespace\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.NamespaceAttributePrefix = \"xmlns\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.NotBefore = \"NotBefore\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.NotOnOrAfter = \"NotOnOrAfter\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.OriginalIssuer = \"OriginalIssuer\"\nconst Microsoft.IdentityModel.Tokens.Saml.SamlConstants.Attributes.Resource = \"Resource\"\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Version in CocoaPods for ADALiOS\nDESCRIPTION: This snippet demonstrates how to specify a dependency on ADALiOS in a CocoaPods podfile. It ensures that the latest version greater than 1.1 but less than 1.2 will be used.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/RELEASES.md#2025-04-23_snippet_0\n\nLANGUAGE: ruby\nCODE:\n```\npod 'ADALiOS', '~> 1.1'\n```\n\n----------------------------------------\n\nTITLE: EnvelopedSignatureReader Class Implementation in C#\nDESCRIPTION: Implementation of the EnvelopedSignatureReader class for reading XML with enveloped signatures. This class extracts and processes XML digital signatures embedded within the XML content it reads.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Xml/PublicAPI.Shipped.txt#2025-04-23_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader.EnvelopedSignatureReader(System.Xml.XmlReader reader) -> void\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader.EnvelopedSignatureReader(System.Xml.XmlReader reader, Microsoft.IdentityModel.Xml.IXmlElementReader xmlElementReader) -> void\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader.Serializer.get -> Microsoft.IdentityModel.Xml.DSigSerializer\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader.Serializer.set -> void\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader.Signature.get -> Microsoft.IdentityModel.Xml.Signature\nMicrosoft.IdentityModel.Xml.EnvelopedSignatureReader.Signature.set -> void\n```\n\n----------------------------------------\n\nTITLE: Signature Provider Implementations in C#\nDESCRIPTION: Method signatures for cryptographic signature operations that handle signing data with both symmetric and asymmetric keys. These methods support modern span-based buffer operations for performance optimization when generating signatures.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/PublicAPI.Shipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\noverride Microsoft.IdentityModel.Tokens.AsymmetricSignatureProvider.Sign(System.ReadOnlySpan<byte> input, System.Span<byte> signature, out int bytesWritten) -> bool\noverride Microsoft.IdentityModel.Tokens.SymmetricSignatureProvider.Sign(System.ReadOnlySpan<byte> input, System.Span<byte> signature, out int bytesWritten) -> bool\nvirtual Microsoft.IdentityModel.Tokens.SignatureProvider.Sign(System.ReadOnlySpan<byte> data, System.Span<byte> destination, out int bytesWritten) -> bool\n```\n\n----------------------------------------\n\nTITLE: JWT Token Validation with Custom Parameters in C#\nDESCRIPTION: Method for validating a JWT token string against provided validation parameters. Creates a JwtSecurityTokenHandler and performs the validation based on the specified configuration.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net472/InternalAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n/// Validates a Json Web Token (JWT).\n/// </summary>\n/// <param name=\"token\">A 'string' containing the token.</param>\n/// <param name=\"validationParameters\">A <see cref=\"TokenValidationParameters\"/>.</param>\n/// <returns>A <see cref=\"TokenValidationResult\"/>.</returns>\npublic static TokenValidationResult ValidateToken(string token, TokenValidationParameters validationParameters)\n{\n    if (validationParameters == null)\n        throw LogHelper.LogArgumentNullException(nameof(validationParameters));\n\n    if (string.IsNullOrEmpty(token))\n        return new TokenValidationResult\n        {\n            Exception = LogHelper.LogArgumentNullException(nameof(token)),\n            IsValid = false\n        };\n\n    JwtSecurityTokenHandler handler = new JwtSecurityTokenHandler();\n    return handler.ValidateTokenAsync(token, validationParameters).ConfigureAwait(false).GetAwaiter().GetResult();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Bearer Token Authentication in ASP.NET Core\nDESCRIPTION: This code snippet shows how to add and configure JWT Bearer Token authentication to the ASP.NET Core middleware pipeline. It sets up token validation parameters, configures the authority, and specifies the audience for token validation.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Logging/InternalAPI.Unshipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options =>\n    {\n        options.TokenValidationParameters = new TokenValidationParameters\n        {\n            ValidateIssuer = true,\n            ValidateAudience = true,\n            ValidateLifetime = true,\n            ValidateIssuerSigningKey = true,\n            ValidIssuer = Configuration[\"Jwt:Issuer\"],\n            ValidAudience = Configuration[\"Jwt:Audience\"],\n            IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(Configuration[\"Jwt:Key\"]))\n        };\n\n        options.Authority = \"https://login.microsoftonline.com/common/\";\n        options.Audience = \"api://your-client-id\";\n    });\n```\n\n----------------------------------------\n\nTITLE: Checking Valid Audience in JWT Token Validation\nDESCRIPTION: A utility method that checks if an audience value matches any of the valid audiences provided in the validation parameters. It handles both string and collection-based audience claims.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net6.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nprivate bool ValidateAudience(string audience, TokenValidationParameters validationParameters, SecurityToken securityToken, out string validatedAudience)\n{\n    bool matched = false;\n    validatedAudience = null;\n\n    if (string.IsNullOrWhiteSpace(audience))\n        return false;\n\n    // consider the audience valid if the finding was successful\n    if (validationParameters.AudienceValidator != null)\n    {\n        matched = validationParameters.AudienceValidator(audience.SingletonEnumerable(), securityToken, validationParameters);\n        if (matched)\n            validatedAudience = audience;\n    }\n    else\n    {\n        matched = validationParameters.ValidAudiences.Contains(audience);\n        if (matched)\n            validatedAudience = audience;\n    }\n\n    return matched;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JWT Signature with SigningCredentials in C#\nDESCRIPTION: This method creates a digital signature for JWT data using provided signing credentials. It takes input data as a ReadOnlySpan<byte>, writes the signature to a destination Span<byte>, and returns whether the operation was successful along with the number of bytes written.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.JsonWebTokens/PublicAPI/net8.0/InternalAPI.Shipped.txt#2025-04-23_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nstatic Microsoft.IdentityModel.JsonWebTokens.JwtTokenUtilities.CreateSignature(System.ReadOnlySpan<byte> data, System.Span<byte> destination, Microsoft.IdentityModel.Tokens.SigningCredentials signingCredentials, out int bytesWritten) -> bool\n```\n\n----------------------------------------\n\nTITLE: Specifying Dependency Version in NuGet for ADALfordotNet\nDESCRIPTION: This XML snippet shows how to specify a dependency on ADALfordotNet in a NuGet package configuration. It ensures that versions from 1.1.0 up to, but not including, 1.2.0 are included when building the code.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/RELEASES.md#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency\nid=\"ADALfordotNet\"\nversion=\"[1.1,1.2)\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Version 8.1.0 Changelog Entry\nDESCRIPTION: Details performance improvements and new features in version 8.1.0, including issuer validation optimization and key handling updates.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/CHANGELOG.md#2025-04-23_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n8.1.0\n=====\n### Performance improvements\n- Improves performance during issuer validation by replacing string comparison with span comparison. See PR [#2826](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/pull/2826).\n\n### New features\n- Add optional check to prevent using keys that are shared across multiple clouds. See issue [#2832](https://github.com/AzureAD/azure-activedirectory-identitymodel-extensions-for-dotnet/issues/2832) for details.\n```\n\n----------------------------------------\n\nTITLE: Creating an X509 Security Key from Certificate Data\nDESCRIPTION: Creates an X509SecurityKey from a certificate using its raw data. This demonstrates how to work with X.509 certificates in the context of security tokens.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net9.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar x509SecurityKey = new X509SecurityKey(\n    new X509Certificate2(certificateData));\n```\n\n----------------------------------------\n\nTITLE: Building and Running Tests Using Shell Command\nDESCRIPTION: A simple shell command to build the project and run its tests. The command will display build and test failures in red in the console window.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/Contributing.md#2025-04-23_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\n>build\n```\n\n----------------------------------------\n\nTITLE: Setting ValidAudiences Property in C# Token Validation\nDESCRIPTION: This method sets a collection of valid audience values for token validation. It throws an exception if the provided collection contains null elements.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.TestExtensions/PublicAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nif (audiences == null)\n    throw LogHelper.LogArgumentNullException(nameof(audiences));\n\nif (ContainsNullElement(audiences))\n    throw LogHelper.LogExceptionMessage(new ArgumentException(LogMessages.IDX10000));\n\nValidAudiences = audiences;\n```\n\n----------------------------------------\n\nTITLE: Validating JWT Token with Azure AD in C#\nDESCRIPTION: This snippet demonstrates how to validate a JWT token using the configured TokenValidationParameters. It uses the JwtSecurityTokenHandler to validate the token and extract the claims principal.\nSOURCE: https://github.com/azuread/azure-activedirectory-identitymodel-extensions-for-dotnet/blob/dev/src/Microsoft.IdentityModel.Tokens/PublicAPI/net8.0/InternalAPI.Unshipped.txt#2025-04-23_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar handler = new JwtSecurityTokenHandler();\nClaimsPrincipal principal;\n\ntry\n{\n    principal = handler.ValidateToken(token, validationParameters, out var validatedToken);\n}\ncatch (SecurityTokenException ex)\n{\n    // Token validation failed\n    throw new UnauthorizedException(\"Invalid token\", ex);\n}\n```"
  }
]