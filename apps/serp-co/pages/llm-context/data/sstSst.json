[
  {
    "owner": "sst",
    "repo": "sst",
    "content": "TITLE: Linking a Resource to SST Components\nDESCRIPTION: These snippets show how to link a resource (bucket) to various SST components like Next.js, Remix, Astro, and Function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Remix(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Astro(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [bucket]\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying SST to Production\nDESCRIPTION: Command to deploy the SST application to a production environment with a specified stage name.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Standalone Output\nDESCRIPTION: Configuration update in next.config.ts to enable Next.js standalone output mode. This setting is required for properly building the application for deployment in a containerized environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst nextConfig: NextConfig = {\n  /* config options here */\n  output: \"standalone\"\n};\n```\n\n----------------------------------------\n\nTITLE: Create Simple Todo Database Schema\nDESCRIPTION: Defines a `todo` table schema using Drizzle ORM with primary key, title, and description fields. These tables are used to maintain a TODO list.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { text, serial, pgTable } from \"drizzle-orm/pg-core\";\n\nexport const todo = pgTable(\"todo\", {\n  id: serial(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n});\n```\n\n----------------------------------------\n\nTITLE: Express Route for S3 File Upload (JavaScript)\nDESCRIPTION: Defines an Express POST route at \"/\" for file uploads. Utilizes multer for multipart parsing and \"@aws-sdk/lib-storage\" Upload class to push the file to an S3 bucket whose name is dynamically referenced from the SST Resource context. Handles file stream, metadata, and sends a 200 status on success. Assumes AWS SDK and multer are imported and configured.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\napp.post(\\\"/\\\", upload.single(\\\"file\\\"), async (req, res) => {\\n  const file = req.file;\\n  const params = {\\n    Bucket: Resource.MyBucket.name,\\n    ContentType: file.mimetype,\\n    Key: file.originalname,\\n    Body: file.buffer,\\n  };\\n\\n  const upload = new Upload({\\n    params,\\n    client: s3,\\n  });\\n\\n  await upload.done();\\n\\n  res.status(200).send(\\\"File uploaded successfully.\\\");\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Bucket Resource in SST\nDESCRIPTION: This snippet demonstrates how to create a bucket resource in SST that can be linked to other components.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n----------------------------------------\n\nTITLE: Complete Express Redis Configuration in SST\nDESCRIPTION: Full SST configuration for setting up an Express service linked to Redis. Includes VPC setup, Redis instance, and container service configuration with development settings.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  dev: {\n    command: \"node --watch index.mjs\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gateway Authorizers with SST (TypeScript)\nDESCRIPTION: This snippet demonstrates how to enable IAM and JWT authorizers for different routes on an API Gateway using SST AWS constructs. It shows the instantiation of an API Gateway with custom domains and path routing, associating handlers with HTTP methods, and specifying authorization settings for individual routes. Dependencies include the SST AWS library, and parameters such as domain information and JWT issuer/audiences are required. Returns the API gateway URL as output.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst api = new sst.aws.ApiGatewayV2(\"MyApi\", {\n  domain: {\n    name: \"api.ion.sst.sh\",\n    path: \"v1\",\n  },\n});\napi.route(\"GET /\", {\n  handler: \"route.handler\",\n});\napi.route(\"GET /foo\", \"route.handler\", { auth: { iam: true } });\napi.route(\"GET /bar\", \"route.handler\", {\n  auth: {\n    jwt: {\n      issuer:\n        \"https://cognito-idp.us-east-1.amazonaws.com/us-east-1_Rq4d8zILG\",\n      audiences: [\"user@example.com\"],\n    },\n  },\n});\napi.route(\"$default\", \"route.handler\");\n\nreturn {\n  api: api.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Apply Database Migration with Drizzle Kit\nDESCRIPTION: Executes the database migration to apply schema changes to the PostgreSQL database, requiring an active tunnel connection.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm run db migrate\n```\n\n----------------------------------------\n\nTITLE: Creating a Hit Counter App with Bun and Redis on AWS\nDESCRIPTION: This example demonstrates how to create a hit counter app using Bun and Redis, deployed as a Fargate service to ECS and linked to Redis. It includes configuration for local development and production deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"bun dev\",\n  },\n  link: [redis],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"bun dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Amazon VPC and RDS Postgres with DATABASE_URL (TypeScript, sst.config.ts)\nDESCRIPTION: Defines a VPC and a managed Postgres RDS instance using SST's AWS abstractions, and builds a connection string from provisioned resource outputs. Requires SST, appropriate AWS credentials, and dependency modules. Core infrastructure step.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync run() {\\n  const vpc = new sst.aws.Vpc(\\\"MyVpc\\\", { bastion: true });\\n  const rds = new sst.aws.Postgres(\\\"MyPostgres\\\", { vpc });\\n\\n  const DATABASE_URL = $interpolate`postgresql://${rds.username}:${rds.password}@${rds.host}:${rds.port}/${rds.database}`;\\n},\n```\n\n----------------------------------------\n\nTITLE: Creating a New Node.js Project with NPM\nDESCRIPTION: This snippet demonstrates creating a new Node.js project and initializing it using npm. It creates a new directory, navigates into it, and initializes a package.json file with default settings. This setup is foundational for any Node.js application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-worker && cd my-worker\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Mode\nDESCRIPTION: Runs the SST development mode that concurrently starts the SST and Next.js applications. Once started, users can access the web app via a browser. Requires SST initialized project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Querying RDS via Prisma Client in Express Route (TypeScript)\nDESCRIPTION: Updates the Express / route to insert a User into the Postgres DB using PrismaClient, generating a unique email via crypto.randomUUID, and responding with the new record. Requires Prisma Client installed/generated and RDS running with proper schema. Returns JSON of the created user.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { PrismaClient } from '@prisma/client';\\n\\nconst prisma = new PrismaClient();\\n\\napp.get(\\\"/\\\", async (_req, res) => {\\n  const user = await prisma.user.create({\\n    data: {\\n      name: \\\"Alice\\\",\\n      email: `alice-${crypto.randomUUID()}@example.com`\\n    },\\n  });\\n  res.send(JSON.stringify(user));\\n});\n```\n\n----------------------------------------\n\nTITLE: Making an S3 Bucket Property Linkable in TypeScript (sst.config.ts)\nDESCRIPTION: Shows how to use the `sst.Linkable` component to wrap and expose a specific property (in this case, `bucketDomainName`) of a previously looked-up resource (an S3 bucket stored in the `bucket` variable). This makes the specified property easily linkable to other SST resources, such as functions, for runtime access.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst storage = new sst.Linkable(\"MyStorage\", {\n  properties: {\n    domain: bucket.bucketDomainName\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fargate Service, VPC, and Cluster for Hono - JavaScript\nDESCRIPTION: Defines VPC, ECS Cluster, and Fargate Service using SST's AWS constructs in sst.config.ts to containerize and deploy a Hono app. Sets up local development with a custom command and port mapping for load balancing. Requires prior SST setup and Hono app with a dev command.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\\n  const vpc = new sst.aws.Vpc(\\\"MyVpc\\\");\\n  const cluster = new sst.aws.Cluster(\\\"MyCluster\\\", { vpc });\\n\\n  new sst.aws.Service(\\\"MyService\\\", {\\n    cluster,\\n    loadBalancer: {\\n      ports: [{ listen: \\\"80/http\\\", forward: \\\"3000/http\\\" }],\\n    },\\n    dev: {\\n      command: \\\"npm run dev\\\",\\n    },\\n  });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: SST v3 Resource Access in Lambda\nDESCRIPTION: Shows how to access linked resources in Lambda functions using the new Resource module from SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n----------------------------------------\n\nTITLE: Deploying a Basic Static Site in SST AWS\nDESCRIPTION: Demonstrates the simplest way to deploy a static website using S3 and CloudFront in SST. The example shows the minimal configuration needed to serve static files from a directory.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_104\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.StaticSite(\"MySite\", {\n  path: \"site\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Provider to SST via CLI (Bash)\nDESCRIPTION: This command adds a specified Pulumi or Terraform provider to the SST application. It handles adding the provider to the configuration, installing necessary packages, and making the provider's namespace globally available within the SST context, eliminating the need for manual imports in `sst.config.ts`. Requires the SST CLI to be installed.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/all-providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsst add <provider>\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Task with Docker in SST\nDESCRIPTION: This snippet shows how to set up an AWS Task using SST, including configuring a VPC, cluster, and linking resources. It also demonstrates how to run the task locally during development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_113\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nconst task = new sst.aws.Task(\"MyTask\", {\n  cluster,\n  link: [bucket],\n  dev: {\n    command: \"node index.mjs\",\n  },\n});\n\nnew sst.aws.Cron(\"MyCron\", {\n  task,\n  schedule: \"rate(2 minutes)\",\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Linked Resources in Runtime Code\nDESCRIPTION: This snippet demonstrates how to access a linked S3 bucket in the runtime code of a Lambda function using SST's SDK. It shows the separation between infrastructure and runtime code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare KV with SST\nDESCRIPTION: This snippet shows how to create a Cloudflare KV namespace and link it to a worker using SST components. It allows using the SDK to interact with the KV namespace in the worker.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_119\n\nLANGUAGE: typescript\nCODE:\n```\nconst storage = new sst.cloudflare.Kv(\"MyStorage\");\nconst worker = new sst.cloudflare.Worker(\"Worker\", {\n  url: true,\n  link: [storage],\n  handler: \"index.ts\",\n});\n\nreturn {\n  url: worker.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application to Production\nDESCRIPTION: Command to deploy the SST application to a production environment. This builds the Docker image and deploys all the configured resources to AWS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in an Astro Project - Bash\nDESCRIPTION: Runs SST initialization and installs necessary dependencies in an Astro project. Dependencies: npx, SST, and npm. Output includes a new 'sst.config.ts' file essential for SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Mode with SST\nDESCRIPTION: Runs the SST development server alongside the SolidStart app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Provisioning Aurora MySQL Database with SST (TypeScript)\nDESCRIPTION: This shows how to provision an Aurora MySQL database using SST AWS, associating it with a pre-existing VPC. Minimal configuration: specifies 'mysql' engine and VPC context. For full setup, a VPC construct should already be initialized.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst mysql = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"mysql\",\n  vpc,\n});\n```\n\n----------------------------------------\n\nTITLE: Using Bucket.get() Method for Sharing Resources in TypeScript\nDESCRIPTION: Demonstrates how to conditionally create or share a bucket across stages using the static get method of the Bucket component. It uses the $app.stage global to determine the current stage and decide whether to create a new bucket or use an existing one.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/share-across-stages.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = $app.stage === \"frank\"\n  ? sst.aws.Bucket.get(\"MyBucket\", \"app-dev-mybucket-12345678\")\n  : new sst.aws.Bucket(\"MyBucket\");\n```\n\n----------------------------------------\n\nTITLE: Defining Fargate Service in SST Config - TypeScript\nDESCRIPTION: Defines AWS infrastructure for container deployment: provisions a VPC, an ECS Cluster, and a Fargate Service with load-balanced HTTP traffic for the Astro app. Includes a dev-mode override to run Astro locally. Depends on SST, AWS account, and proper permissions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nasync run() {\\n  const vpc = new sst.aws.Vpc(\\\"MyVpc\\\");\\n  const cluster = new sst.aws.Cluster(\\\"MyCluster\\\", { vpc });\\n\\n  new sst.aws.Service(\\\"MyService\\\", {\\n    cluster,\\n    loadBalancer: {\\n      ports: [{ listen: \\\"80/http\\\", forward: \\\"4321/http\\\" }],\\n    },\\n    dev: {\\n      command: \\\"npm run dev\\\",\\n    },\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SST in Development Mode\nDESCRIPTION: The snippet demonstrates how to start the SST in development mode using a shell command. It initiates the local development environment for both SST and the React Router application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Component in SST\nDESCRIPTION: This example shows how to create a Function component in SST, demonstrating the basic structure of component initialization with a name and configuration object.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst function = new sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating and Subscribing to SQS Queues with Dead Letter Queue\nDESCRIPTION: Sets up an SQS queue system with a dead letter queue for handling failed messages. The example shows how to create queues, set up subscriptions, and link a function that can publish to the queue.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// create dead letter queue\nconst dlq = new sst.aws.Queue(\"DeadLetterQueue\");\ndlq.subscribe(\"subscriber.dlq\");\n\n// create main queue\nconst queue = new sst.aws.Queue(\"MyQueue\", {\n  dlq: dlq.arn,\n});\nqueue.subscribe(\"subscriber.main\");\n\nconst app = new sst.aws.Function(\"MyApp\", {\n  handler: \"publisher.handler\",\n  link: [queue],\n  url: true,\n});\n\nreturn {\n  app: app.url,\n  queue: queue.url,\n  dlq: dlq.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-Signed S3 URL in Remix Loader - TypeScript React\nDESCRIPTION: Implements a Remix loader function that generates a pre-signed S3 URL for uploads using AWS SDK v3. Relies on '@aws-sdk/client-s3' and '@aws-sdk/s3-request-presigner' packages, as well as 'crypto.randomUUID()' for unique object keys. Expects availability of the 'Resource.MyBucket.name' reference, injected by SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Database Using SST Resource in Handler (TypeScript)\nDESCRIPTION: This snippet demonstrates creating a database connection pool in an SST Lambda function handler using injected Resource values. Reads host, port, user, password, and database from the SST deployed resource, supporting both local and deployed environments. Requires a compatible Pool client (like node-postgres or similar), and assumes SST has passed the database details as environment variables or context.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst pool = new Pool({\n  host: Resource.MyPostgres.host,\n  port: Resource.MyPostgres.port,\n  user: Resource.MyPostgres.username,\n  password: Resource.MyPostgres.password,\n  database: Resource.MyPostgres.database,\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed URL with AWS SDK in Remix Loader\nDESCRIPTION: Implements a Remix loader function that generates a pre-signed URL for file upload to an S3 bucket. The function creates a random UUID for the file key and uses the AWS SDK to generate a signed URL that clients can use to upload files directly to S3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\n----------------------------------------\n\nTITLE: Adding API Functionality to SST - JavaScript\nDESCRIPTION: Adds an AWS Lambda Function using SST that connects ('links') to the previously defined Email resource, with a public URL enabled. Allows invoking the Lambda via HTTP to trigger email sending. The configuration returns the API's URL in the outputs. `sst`, the email resource instance, and the SST config structure are required.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst api = new sst.aws.Function(\\\"MyApi\\\", {\\n  handler: \\\"sender.handler\\\",\\n  link: [email],\\n  url: true,\\n});\\n\\nreturn {\\n  api: api.url,\\n};\n```\n\n----------------------------------------\n\nTITLE: Create API Handler with Lambda Function\nDESCRIPTION: Defines a Lambda function handler which uses Drizzle ORM to process GET and POST requests for the `todo` API, interacting with the database.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"./drizzle\";\nimport { todo } from \"./todo.sql\";\nimport { APIGatewayProxyEventV2 } from \"aws-lambda\";\n\nexport const handler = async (evt: APIGatewayProxyEventV2) => {\n  if (evt.requestContext.http.method === \"GET\") {\n    const result = await db.select().from(todo).execute();\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result, null, 2),\n    };\n  }\n\n  if (evt.requestContext.http.method === \"POST\") {\n    const result = await db\n      .insert(todo)\n      .values({ title: \"Todo\", description: crypto.randomUUID() })\n      .returning()\n      .execute();\n\n    return {\n      statusCode: 200,\n      body: JSON.stringify(result),\n    };\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Deploying Astro Containerized App Linked to Redis with SST (TypeScript)\nDESCRIPTION: This code instantiates a new SST AWS Service, deploying an Astro app as an ECS Fargate service and linking it with a Redis resource for a hit counter feature. It specifies container networking, port forwarding, and a command for local development. Relies on previously defined 'cluster' and 'redis' resources. The deployed container listens on HTTP port 80 and forwards to application port 3000.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Component in SST\nDESCRIPTION: This snippet demonstrates how to create a basic Next.js component in SST using TypeScript. It shows the simplest form of initialization and a more configured version.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\",\n  path: \"packages/web\",\n  imageOptimization: {\n    memory: \"512 MB\"\n  },\n  buildCommand: \"npm run build\"\n});\n```\n\n----------------------------------------\n\nTITLE: Defining S3 Bucket and Lambda Function in SST\nDESCRIPTION: This snippet demonstrates how to define an S3 bucket and a Lambda function using SST components in the sst.config.ts file. It showcases the basic structure of resource definition in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Function Resource with URL Output - SST TypeScript\nDESCRIPTION: Defines a new AWS Lambda function using SST, configuring the 'url' property to true. The 'handler' specifies the entry point for the lambda. The resulting 'myFunction.url' is an Output<string> representing a URL to be resolved at deploy time. Requires dependencies on SST and its AWS constructs; inputs are the function name and properties, and output is a function resource with an unresolved URL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst myFunction = new sst.aws.Function(\"MyFunction\", {\n  url: true,\n  handler: \"src/lambda.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Node.js Express Project and Installing Dependencies (bash)\nDESCRIPTION: This snippet demonstrates the initialization of a new Node.js project, changing into its directory, and installing Express as a dependency using npm. It sets up the foundational directory structure and dependencies required to build an Express application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir aws-express && cd aws-express\\nnpm init -y\\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: This snippet shows various package manager commands to start the Next.js development server. It includes options for npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend in SST (Next.js)\nDESCRIPTION: Demonstrates how to define a Next.js frontend with a custom domain using SST's AWS component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Default AWS Function Properties in SST\nDESCRIPTION: Demonstrates how to set default properties like runtime and environment variables for all AWS functions in an SST app using the $transform utility. This allows for consistent configuration across multiple functions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_121\n\nLANGUAGE: typescript\nCODE:\n```\n$transform(sst.aws.Function, (args) => {\n  args.runtime = \"nodejs14.x\";\n  args.environment = {\n    FOO: \"BAR\",\n  };\n});\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.ts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying SvelteKit Container with Redis in SST AWS\nDESCRIPTION: Creates a hit counter application using SvelteKit and Redis, deployed as a Fargate service to ECS. The example demonstrates linking a service to Redis in a VPC and setting up local development with tunneling.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_105\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Linkable Resource\nDESCRIPTION: This snippet shows how to create a custom linkable resource using the sst.Linkable component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst myLinkable = new sst.Linkable(\"MyLinkable\", {\n  properties: { foo: \"bar\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Lambda Function with Redis in VPC\nDESCRIPTION: Configures a Lambda function and Redis instance in the same VPC, with bastion and NAT to enable local development and internet access. Links the Lambda to the Redis resource for access.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_80\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true, nat: \"managed\" });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst api = new sst.aws.Function(\"MyFunction\", {\n  vpc,\n  url: true,\n  link: [redis],\n  handler: \"index.handler\"\n});\n\nreturn {\n  url: api.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing SST SDK with npm\nDESCRIPTION: Installs the SST JavaScript SDK for Node.js applications. No prerequisites except npm. The command installs the necessary package for integrating SST SDK into JavaScript projects.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sst\n```\n\n----------------------------------------\n\nTITLE: Example: Adding the Stripe Provider via CLI (Bash)\nDESCRIPTION: This specific example demonstrates using the `sst add` command to integrate the Stripe provider into an SST application. Running this command sets up the necessary dependencies and configuration for using Stripe resources within the application's `sst.config.ts` file. Requires the SST CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/all-providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsst add stripe\n```\n\n----------------------------------------\n\nTITLE: Implementing Remix Streaming in SST AWS\nDESCRIPTION: Demonstrates how to implement data streaming in a Remix application using the defer utility and Suspense/Await components. The example shows how to configure the Remix component in SST to support streaming responses.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_97\n\nLANGUAGE: tsx\nCODE:\n```\nreturn defer({\n  spongebob,\n  friends: friendsPromise,\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<Suspense fallback={<div>Loading...</div>}>\n  <Await resolve={friends}>\n    { /* ... */ }\n  </Await>\n</Suspense>\n```\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.Remix(\"MyWeb\");\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-stage Dockerfile for Next.js Deployment\nDESCRIPTION: A multi-stage Dockerfile that builds and packages a Next.js application for production deployment. It includes stages for installing dependencies, building the application, and creating a production-ready image with the minimal required files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_16\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts-alpine AS base\n\n# Stage 1: Install dependencies\nFROM base AS deps\nWORKDIR /app\nCOPY package.json package-lock.json* ./\nCOPY sst-env.d.ts* ./\nRUN npm ci\n\n# Stage 2: Build the application\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# If static pages need linked resources\n# ARG SST_RESOURCE_MyResource\n\nRUN npm run build\n\n# Stage 3: Production server\nFROM base AS runner\nWORKDIR /app\nENV NODE_ENV=production\nCOPY --from=builder /app/.next/standalone ./\nCOPY --from=builder /app/.next/static ./.next/static\n\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n```\n\n----------------------------------------\n\nTITLE: Using EFS with SQLite in Lambda Functions\nDESCRIPTION: Demonstrates how to mount an EFS file system to a Lambda function for persistence with SQLite. While not recommended for production databases, this example shows how to create the EFS resource and mount it in a function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nconst db = sqlite3(\"/mnt/efs/mydb.sqlite\");\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// NAT Gateways are required for Lambda functions\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"managed\" });\n\n// Create an EFS file system to store the SQLite database\nconst efs = new sst.aws.Efs(\"MyEfs\", { vpc });\n\n// Create a Lambda function that queries the database\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  url: true,\n  volume: {\n    efs,\n    path: \"/mnt/efs\",\n  },\n  handler: \"index.handler\",\n  nodejs: {\n    install: [\"better-sqlite3\"],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Remix Container Service with Redis\nDESCRIPTION: Configuration for deploying a Remix application with Redis using ECS Fargate service.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_96\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Multi-stage Dockerfile for Building and Deploying Remix Application\nDESCRIPTION: A multi-stage Dockerfile that optimizes the build process for a Remix application. It separates dependency installation, production dependency pruning, build process, and final image creation to produce an efficient production container.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_20\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts-alpine as base\nENV NODE_ENV production\n\n# Stage 1: Install all node_modules, including dev dependencies\nFROM base as deps\nWORKDIR /myapp\nADD package.json ./\nRUN npm install --include=dev\n\n# Stage 2: Setup production node_modules\nFROM base as production-deps\nWORKDIR /myapp\nCOPY --from=deps /myapp/node_modules /myapp/node_modules\nADD package.json ./\nRUN npm prune --omit=dev\n\n# Stage 3: Build the app\nFROM base as build\nWORKDIR /myapp\nCOPY --from=deps /myapp/node_modules /myapp/node_modules\nADD . .\nRUN npm run build\n\n# Stage 4: Build the production image\nFROM base\nWORKDIR /myapp\nCOPY --from=production-deps /myapp/node_modules /myapp/node_modules\nCOPY --from=build /myapp/build /myapp/build\nCOPY --from=build /myapp/public /myapp/public\nADD . .\n\nCMD [\"npm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: SST Configuration for Go Lambda with DynamoDB\nDESCRIPTION: SST configuration for a Go Lambda function that interacts with DynamoDB. Sets up a DynamoDB table and links it to a Go function exposed via a URL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new sst.aws.Dynamo(\"Table\", {\n  fields: {\n    PK: \"string\",\n    SK: \"string\",\n  },\n  primaryIndex: { hashKey: \"PK\", rangeKey: \"SK\" },\n});\n\nnew sst.aws.Function(\"GoFunction\", {\n  url: true,\n  runtime: \"go\",\n  handler: \"./src\",\n  link: [table],\n});\n```\n\n----------------------------------------\n\nTITLE: Provisioning VPC, Aurora, and Lambda Function for Local Dev (TypeScript)\nDESCRIPTION: This configuration provisions a VPC with EC2 NAT, an Aurora Postgres database (using provided local dev credentials), and links it to a Lambda function with VPC access. Defines networking and database resources, then links them to a serverless function for local or cloud execution. Requires SST AWS, connection settings, and handler implementation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"ec2\" });\n\nconst database = new sst.aws.Aurora(\"MyPostgres\", {\n  engine: \"postgres\",\n  dev: {\n    username: \"postgres\",\n    password: \"password\",\n    database: \"local\",\n    host: \"localhost\",\n    port: 5432,\n  },\n  vpc,\n});\n\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  url: true,\n  link: [database],\n  handler: \"index.handler\",\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up S3 Bucket Queue Notifications with SST\nDESCRIPTION: This example demonstrates how to create an S3 bucket and subscribe to its events using an SQS queue with SST. It shows the configuration of both the queue and the bucket notifications.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new sst.aws.Queue(\"MyQueue\");\nqueue.subscribe(\"subscriber.handler\");\n\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nbucket.notify({\n  notifications: [\n    {\n      name: \"MySubscriber\",\n      queue,\n      events: [\"s3:ObjectCreated:*\"],\n    },\n  ],\n});\n\nreturn {\n  bucket: bucket.name,\n  queue: queue.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAuth Component in SST - TypeScript\nDESCRIPTION: Integrates the OpenAuth Lambda handler into the SST application in 'sst.config.ts', linking it to the Next.js site. The Auth component references the handler and passes it to the Nextjs construct using the 'link' property. Requires SST's TypeScript configuration file and the previously defined serverless handler.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst auth = new sst.aws.Auth(\\\"MyAuth\\\", {\\n  issuer: \\\"auth/index.handler\\\",\\n});\\n\\nnew sst.aws.Nextjs(\\\"MyWeb\\\", {\\n  link: [auth],\\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SST with Cloudflare and npm\nDESCRIPTION: Initializes a new SST project and installs npm packages. SST is configured to use Cloudflare, creating a configuration file in the process. The commands produce the initial setup for a serverless stack using SST with Cloudflare support.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nextjs-stream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Download Latest File from S3 in Container Service - TypeScript\nDESCRIPTION: Defines a GET handler for '/latest' that lists S3 bucket contents, finds the most recently modified file, and generates a presigned URL for that file, redirecting the client to it. Used in containerized Hono services where file upload/download is handled directly by the app. Assumes S3 and SST Resource setup is already done.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/latest', async (c) => {\\n  const objects = await s3.send(\\n    new ListObjectsV2Command({\\n      Bucket: Resource.MyBucket.name,\\n    }),\\n  );\\n  const latestFile = objects.Contents!.sort(\\n    (a, b) =>\\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\\n  )[0];\\n  const command = new GetObjectCommand({\\n    Key: latestFile.Key,\\n    Bucket: Resource.MyBucket.name,\\n  });\\n  return c.redirect(await getSignedUrl(s3, command));\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Running Drizzle Migrations in CI/CD Pipeline\nDESCRIPTION: Demonstrates how to automatically run Drizzle database migrations as part of the CI/CD deployment process. The example creates a dedicated function for migrations that is invoked on every deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nconst migrator = new sst.aws.Function(\"DatabaseMigrator\", {\n  handler: \"src/migrator.handler\",\n  link: [rds],\n  vpc,\n  copyFiles: [\n    {\n      from: \"migrations\",\n      to: \"./migrations\",\n    },\n  ],\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { db } from \"./drizzle\";\nimport { migrate } from \"drizzle-orm/postgres-js/migrator\";\n\nexport const handler = async (event: any) => {\n  await migrate(db, {\n    migrationsFolder: \"./migrations\",\n  });\n};\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (!$dev){\n  new aws.lambda.Invocation(\"DatabaseMigratorInvocation\", {\n    input: Date.now().toString(),\n    functionName: migrator.name,\n  });\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true, nat: \"ec2\" });\nconst rds = new sst.aws.Postgres(\"MyPostgres\", { vpc, proxy: true });\n\nnew sst.aws.Function(\"MyApi\", {\n  vpc,\n  url: true,\n  link: [rds],\n  handler: \"src/api.handler\",\n});\n\nconst migrator = new sst.aws.Function(\"DatabaseMigrator\", {\n  handler: \"src/migrator.handler\",\n  link: [rds],\n  vpc,\n  copyFiles: [\n    {\n      from: \"migrations\",\n      to: \"./migrations\",\n    },\n  ],\n});\n\nif (!$dev) {\n  new aws.lambda.Invocation(\"DatabaseMigratorInvocation\", {\n    input: Date.now().toString(),\n    functionName: migrator.name,\n  });\n}\n\nnew sst.x.DevCommand(\"Studio\", {\n  link: [rds],\n  dev: {\n    command: \"npx drizzle-kit studio\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Provisioning VPC, Aurora, and Lambda with Output Mapping (TypeScript)\nDESCRIPTION: This configuration combines the setup of a VPC (with NAT and bastion), Aurora MySQL database, and a Lambda function, returning the database connection details as outputs. This facilitates environment setup for downstream consumers and for use in local development. Assumes all named resources are initialized in correct order.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", {\n  nat: \"ec2\",\n  bastion: true,\n});\nconst mysql = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"mysql\",\n  vpc,\n});\nnew sst.aws.Function(\"MyApp\", {\n  handler: \"index.handler\",\n  link: [mysql],\n  url: true,\n  vpc,\n});\n\nreturn {\n  host: mysql.host,\n  port: mysql.port,\n  username: mysql.username,\n  password: mysql.password,\n  database: mysql.database,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Project in SST\nDESCRIPTION: Shows how to use a third-party provider (Vercel) to set up a frontend project in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew vercel.Project(\"MyFrontend\", {\n  name: \"my-nextjs-app\"\n});\n```\n\n----------------------------------------\n\nTITLE: Importing Required AWS SDK and NestJS Modules for S3 (TypeScript, app.controller.ts)\nDESCRIPTION: Provides all necessary import statements to enable S3 operations (Uploads, object listing, presigned URLs), Express/Multer types, NestJS POST/GET hooks, and sst resource references. Dependencies: '@aws-sdk/client-s3', '@aws-sdk/lib-storage', '@aws-sdk/s3-request-presigner', 'sst', 'express', '@nestjs/platform-express', '@nestjs/common'. Establishes the S3 client instance for request lifecycle.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\\n  S3Client,\\n  GetObjectCommand,\\n  ListObjectsV2Command,\\n} from '@aws-sdk/client-s3';\\nimport { Resource } from 'sst';\\nimport { Express } from 'express';\\nimport { Upload } from '@aws-sdk/lib-storage';\\nimport { FileInterceptor } from '@nestjs/platform-express';\\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\\nimport { Post, Redirect, UploadedFile, UseInterceptors } from '@nestjs/common';\\n\\nconst s3 = new S3Client({});\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC with Bastion and NAT for Lambda\nDESCRIPTION: Creates a VPC configuration with bastion host and managed NAT gateway to enable Lambda functions to have internet connectivity while running in a VPC.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Vpc(\"MyVpc\", { bastion: true, nat: \"managed\" });\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed S3 Upload URL - TypeScript\nDESCRIPTION: Defines a GET route handler for the root path '/' in the Hono app, returning a pre-signed S3 URL for file upload. It instantiates a PutObjectCommand for a random key and calls getSignedUrl. Requires AWS SDK's S3, presigner utilities, SST Resource API, and cryptographic UUID generation. Expects properly linked S3 bucket as Resource.MyBucket and authenticated AWS context.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/', async (c) => {\\n  const command = new PutObjectCommand({\\n    Key: crypto.randomUUID(),\\n    Bucket: Resource.MyBucket.name,\\n  });\\n\\n  return c.text(await getSignedUrl(s3, command));\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Adding an R2 Bucket with SST\nDESCRIPTION: Creates an R2 bucket in the SST configuration for file storage. This component is essential for handling file uploads within the Cloudflare Worker environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SST with Realtime Component\nDESCRIPTION: This JavaScript snippet adds a Realtime component to the SST config, linking it with a Next.js app. It defines an authorizer for managing access. Dependencies include SST and AWS services.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const realtime = new sst.aws.Realtime(\"MyRealtime\", {\n    authorizer: \"authorizer.handler\",\n  });\n\n  new sst.aws.Nextjs(\"MyWeb\", {\n    link: [realtime],\n  });\n},\n```\n\n----------------------------------------\n\nTITLE: Deploying Bun App with SST\nDESCRIPTION: Builds the Docker image and deploys the Bun app to AWS using SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nbun sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Setting Up DynamoDB Streams with Filter Patterns\nDESCRIPTION: Creates a DynamoDB table with stream capability and subscribes a Lambda function to process the stream events. The example demonstrates using filter patterns to only process specific record changes.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new sst.aws.Dynamo(\"MyTable\", {\n  fields: {\n    id: \"string\",\n  },\n  primaryIndex: { hashKey: \"id\" },\n  stream: \"new-and-old-images\",\n});\ntable.subscribe(\"MySubscriber\", \"subscriber.handler\", {\n  filters: [\n    {\n      dynamodb: {\n        NewImage: {\n          message: {\n            S: [\"Hello\"],\n          },\n        },\n      },\n    },\n  ],\n});\n\nconst app = new sst.aws.Function(\"MyApp\", {\n  handler: \"publisher.handler\",\n  link: [table],\n  url: true,\n});\n\nreturn {\n  app: app.url,\n  table: table.name,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAuth Server - TypeScript\nDESCRIPTION: Defines an OpenAuth server in 'auth/index.ts' using hono/aws-lambda, sets up providers, issues tokens, and connects to a subjects module. Dependencies include '@openauthjs/openauth', '@openauthjs/openauth/ui/code', '@openauthjs/openauth/provider/code', 'hono/aws-lambda', and a custom 'subjects' module. The exported Lambda handler can be connected to AWS Lambda for serverless authentication. Key parameters involve user email lookup, provider configuration, and secure token issuance.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { handle } from \\\"hono/aws-lambda\\\";\\nimport { issuer } from \\\"@openauthjs/openauth\\\";\\nimport { CodeUI } from \\\"@openauthjs/openauth/ui/code\\\";\\nimport { CodeProvider } from \\\"@openauthjs/openauth/provider/code\\\";\\nimport { subjects } from \\\"./subjects\\\";\\n\\nasync function getUser(email: string) {\\n  // Get user from database and return user ID\\n  return \\\"123\\\";\\n}\\n\\nconst app = issuer({\\n  subjects,\\n  // Remove after setting custom domain\\n  allow: async () => true,\\n  providers: {\\n    code: CodeProvider(\\n      CodeUI({\\n        sendCode: async (email, code) => {\\n          console.log(email, code);\\n        },\\n      }),\\n    ),\\n  },\\n  success: async (ctx, value) => {\\n    if (value.provider === \\\"code\\\") {\\n      return ctx.subject(\\\"user\\\", {\\n        id: await getUser(value.claims.email),\\n      });\\n    }\\n    throw new Error(\\\"Invalid provider\\\");\\n  },\\n});\\n\\nexport const handler = handle(app);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dev Mode for Aurora in SST\nDESCRIPTION: This snippet demonstrates how to configure the Aurora component to use a local database during development instead of deploying a new one. It includes settings for username, password, database name, host, and port.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/aurora-serverless-in-v3.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  dev: {\n    username: \"postgres\",\n    password: \"password\",\n    database: \"local\",\n    host: \"localhost\",\n    port: 5432\n  },\n  vpc\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Deno Project\nDESCRIPTION: Creates a new Deno project using the Deno CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndeno init aws-deno\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Stack to Production - Bash\nDESCRIPTION: Deploys the SST application stack (including all AWS resources and Lambda code) to a specified production stage. Requires correct AWS credentials and previous initialization of the project. The '--stage' parameter lets developers manage different environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle Studio in SST Dev Command\nDESCRIPTION: This snippet demonstrates how to set up a development command for running Drizzle Studio with the correct database credentials using SST's DevCommand component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.x.DevCommand(\"Studio\", {\n  link: [rds],\n  dev: {\n    command: \"npx drizzle-kit studio\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring npm Workspaces in package.json (JSON)\nDESCRIPTION: Defines npm workspaces in the root package.json to include all subdirectories under packages/. This enables Yarn or npm to treat each subdirectory as a separate workspace with independent dependencies. Allows local package resolution and efficient mono-repository management.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"workspaces\": [\n  \"packages/*\"\n]\n```\n\n----------------------------------------\n\nTITLE: Complete SST Configuration for SurrealDB with EFS\nDESCRIPTION: Full configuration example for setting up SurrealDB with EFS storage in SST. Includes VPC setup, EFS creation, container configuration, and Lambda function setup for connecting to the database.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nconst { RandomPassword } = await import(\"@pulumi/random\");\n\n// SurrealDB Credentials\nconst PORT = 8080;\nconst NAMESPACE = \"test\";\nconst DATABASE = \"test\";\nconst USERNAME = \"root\";\nconst PASSWORD = new RandomPassword(\"Password\", {\n  length: 32,\n}).result;\n\n// NAT Gateways are required for Lambda functions\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"managed\" });\n\n// Store SurrealDB data in EFS\nconst efs = new sst.aws.Efs(\"MyEfs\", { vpc });\n\n// Run SurrealDB server in a container\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nconst server = new sst.aws.Service(\"MyService\", {\n  cluster,\n  architecture: \"arm64\",\n  image: \"surrealdb/surrealdb:v2.0.2\",\n  command: [\n    \"start\",\n    \"--bind\",\n    $interpolate`0.0.0.0:${PORT}`,\n    \"--log\",\n    \"info\",\n    \"--user\",\n    USERNAME,\n    \"--pass\",\n    PASSWORD,\n    \"surrealkv://data/data.skv\",\n    \"--allow-scripting\",\n  ],\n  volumes: [{ efs, path: \"/data\" }],\n});\n\n// Lambda client to connect to SurrealDB\nconst config = new sst.Linkable(\"MyConfig\", {\n  properties: {\n    username: USERNAME,\n    password: PASSWORD,\n    namespace: NAMESPACE,\n    database: DATABASE,\n    port: PORT,\n    host: server.service,\n  },\n});\n\nnew sst.aws.Function(\"MyApp\", {\n  handler: \"index.handler\",\n  link: [config],\n  url: true,\n  vpc,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SST Tunnel for Local Database Access (Bash)\nDESCRIPTION: Installs SST's tunneling service using elevated privileges to enable secure VPC database connectivity from the local machine. Required to forward connections into the AWS VPC. Only needs to be performed once per machine.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloudflare Worker in sst.config.ts (JavaScript)\nDESCRIPTION: Defines a Cloudflare Worker resource named \"Hono\" within the `sst.config.ts` file using the SST Cloudflare provider (`sst.cloudflare.Worker`). It configures the worker to have a public URL (`url: true`) and specifies the entry point handler file as `index.ts`. The worker's URL is returned as an output named `api`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nasync run() {\n  const hono = new sst.cloudflare.Worker(\"Hono\", {\n    url: true,\n    handler: \"index.ts\",\n  });\n\n  return {\n    api: hono.url,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Linking a Linkable Resource to an SST Function in TypeScript (sst.config.ts)\nDESCRIPTION: Illustrates how to link a `sst.Linkable` component (named `storage`) to an `sst.aws.Function`. By including `storage` in the `link` array, the properties defined within the `Linkable` component (`domain` in this example) become available to the function's runtime environment through the SST Resource SDK.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [storage]\n});\n```\n\n----------------------------------------\n\nTITLE: Starting SST in Development Mode\nDESCRIPTION: Runs the SST application in development mode, providing live URLs for testing the Lambda functions locally before deploying them onto AWS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed URL for S3 Upload in Next.js\nDESCRIPTION: This component generates a pre-signed URL for S3 file uploads using AWS SDK. It creates a unique key using crypto.randomUUID() and passes the URL to a Form component. The component is configured with force-dynamic to prevent Next.js from caching the URL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Home() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return (\n    <div className={styles.page}>\n      <main className={styles.main}>\n        <Form url={url} />\n      </main>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to SST Service Component - TypeScript\nDESCRIPTION: Associates the previously defined S3 bucket with the main SST Service for Fargate deployment. Ensures the bucket is available to the Remix app and environment in the ECS context. This snippet should be placed in sst.config.ts after the bucket creation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  // ...\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAuth React SPA with SST\nDESCRIPTION: This example shows how to create a full-stack monorepo app with OpenAuth flow for a single-page app and an authenticated API using SST. It includes a React SPA, API with Hono, and OpenAuth implementation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const web = new sst.aws.StaticSite(\"MyWeb\", {\n  path: \"packages/web\",\n  build: {\n    output: \"dist\",\n    command: \"npm run build\",\n  },\n  environment: {\n    VITE_API_URL: api.url,\n    VITE_AUTH_URL: auth.url,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const api = new sst.aws.Function(\"MyApi\", {\n  url: true,\n  link: [auth],\n  handler: \"packages/functions/src/api.handler\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const auth = new sst.aws.Auth(\"MyAuth\", {\n  issuer: \"packages/functions/src/auth.handler\",\n});\n```\n\nLANGUAGE: tsx\nCODE:\n```\n<AuthContext.Provider\n  value={{\n    login,\n    logout,\n    userId,\n    loaded,\n    loggedIn,\n    getToken,\n  }}\n>\n  {children}\n</AuthContext.Provider>\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst auth = useAuth();\n\nreturn !auth.loaded ? (\n  <div>Loading...</div>\n) : (\n  <div>\n    {auth.loggedIn ? (\n      <div>\n        <p>\n          <span>Logged in</span>\n          {auth.userId && <span> as {auth.userId}</span>}\n        </p>\n      </div>\n    ) : (\n      <button onClick={auth.login}>Login with OAuth</button>\n    )}\n  </div>\n);\n```\n\nLANGUAGE: tsx\nCODE:\n```\nawait fetch(`${import.meta.env.VITE_API_URL}me`, {\n  headers: {\n    Authorization: `Bearer ${await auth.getToken()}`,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst authHeader = c.req.header(\"Authorization\");\nconst token = authHeader.split(\" \")[1];\nconst verified = await client.verify(subjects, token);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait import(\"./infra/auth\");\nawait import(\"./infra/api\");\nawait import(\"./infra/web\");\n```\n\n----------------------------------------\n\nTITLE: Configuring a Streaming Lambda Function with URL in SST\nDESCRIPTION: Creates a Lambda function with streaming enabled, a Function URL for direct access, and extended timeout to support longer-running streaming operations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = new sst.aws.Function(\"MyFunction\", {\n  url: true,\n  streaming: true,\n  timeout: \"15 minutes\",\n  handler: \"index.handler\",\n});\n\nreturn {\n  url: fn.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auth for Static Sites in SST AWS\nDESCRIPTION: Creates a static site with basic authentication using CloudFront functions. This example demonstrates checking the basic auth header against environment secrets, useful for protecting development environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_103\n\nLANGUAGE: ts\nCODE:\n```\n{\n  injection: $interpolate`\n    if (\n        !event.request.headers.authorization\n          || event.request.headers.authorization.value !== \"Basic ${basicAuth}\"\n       ) {\n      return {\n        statusCode: 401,\n        headers: {\n          \"www-authenticate\": { value: \"Basic\" }\n        }\n      };\n    }`,\n}\n```\n\nLANGUAGE: bash\nCODE:\n```\nsst secret set USERNAME my-username\nsst secret set PASSWORD my-password\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst username = new sst.Secret(\"USERNAME\");\nconst password = new sst.Secret(\"PASSWORD\");\nconst basicAuth = $resolve([username.value, password.value]).apply(\n  ([username, password]) =>\n    Buffer.from(`${username}:${password}`).toString(\"base64\")\n);\n\nnew sst.aws.StaticSite(\"MySite\", {\n  path: \"site\",\n  // Don't password protect prod\n  edge: $app.stage !== \"production\"\n    ? {\n      viewerRequest: {\n        injection: $interpolate`\n          if (\n              !event.request.headers.authorization\n                || event.request.headers.authorization.value !== \"Basic ${basicAuth}\"\n             ) {\n            return {\n              statusCode: 401,\n              headers: {\n                \"www-authenticate\": { value: \"Basic\" }\n              }\n            };\n          }`,\n      },\n    }\n    : undefined,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket with Public Access in SST - JavaScript\nDESCRIPTION: Defines an AWS S3 bucket resource named 'MyBucket' with public access, using SST infrastructure-as-code in sst.config.ts. Requires 'sst' SDK. The bucket object is available as a resource for linking to other SST components such as the Remix app or containers.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring EFS with Lambda and Containers in SST\nDESCRIPTION: SST configuration for mounting an EFS filesystem to both a Lambda function and a container service. Both services can access the same filesystem mounted at /mnt/efs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// NAT Gateways are required for Lambda functions\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"managed\" });\n\n// Create an EFS file system to store a counter\nconst efs = new sst.aws.Efs(\"MyEfs\", { vpc });\n\n// Create a Lambda function that increments the counter\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"lambda.handler\",\n  url: true,\n  vpc,\n  volume: {\n    efs,\n    path: \"/mnt/efs\",\n  },\n});\n\n// Create a service that increments the same counter\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  volumes: [\n    {\n      efs,\n      path: \"/mnt/efs\",\n    },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Looking up Existing S3 Bucket by Name in TypeScript (sst.config.ts)\nDESCRIPTION: Demonstrates how to retrieve an existing AWS S3 bucket resource within an SST configuration file (`sst.config.ts`) using the `aws.s3.BucketV2.get` static method from the Pulumi AWS provider. It requires a logical name for use within the SST app (\"MyBucket\") and the actual physical bucket name (\"mybucket-xnbmhcvd\"). This retrieves the bucket object as if it were created within the app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst bucket = aws.s3.BucketV2.get(\"MyBucket\", \"mybucket-xnbmhcvd\");\n```\n\n----------------------------------------\n\nTITLE: Deploying SolidStart App to AWS with SST\nDESCRIPTION: Deploys the configured SolidStart app to AWS using SST in production stage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Setting Secrets Using the SST CLI\nDESCRIPTION: Set secret values using the SST CLI command, providing a more secure alternative to storing secrets in .env files that might be accidentally committed to version control.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsst secret set MySecret my-secret-value\n```\n\n----------------------------------------\n\nTITLE: Linking Resources in SST for Environment Variables\nDESCRIPTION: Link database resources like Postgres to Next.js applications instead of using environment variables. This allows components to reference database connection details without manually configuring environment variables.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst rds = new sst.aws.Postgres(\"MyPostgres\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [rds]\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Specific SST Version via Curl\nDESCRIPTION: Installs a specific version of SST CLI globally using the VERSION environment variable with the installation script.\nSOURCE: https://github.com/sst/sst/blob/dev/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://sst.dev/install | VERSION=0.0.403 bash\n```\n\n----------------------------------------\n\nTITLE: Handler to Send Email via SES in SST Lambda - TypeScript\nDESCRIPTION: Implements a Lambda handler for sending emails using SESv2 when the API endpoint is invoked. Utilizes the `Resource.MyEmail.sender` value for both sender and recipient due to SES sandbox restrictions. Depends on SST Resource binding, `@aws-sdk/client-sesv2` package, and a properly configured SES sender email. The handler asynchronously sends an email and returns a standard HTTP 200/OK with a confirmation message. Inputs: HTTP request (event implied by Lambda), Output: email send result and string response body. Limitations: Only works with verified sender/recipient emails unless SES is out of sandbox.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler = async () => {\\n  await client.send(\\n    new SendEmailCommand({\\n      FromEmailAddress: Resource.MyEmail.sender,\\n      Destination: {\\n        ToAddresses: [Resource.MyEmail.sender],\\n      },\\n      Content: {\\n        Simple: {\\n          Subject: {\\n            Data: \\\"Hello World!\\\",\\n          },\\n          Body: {\\n            Text: {\\n              Data: \\\"Sent from my SST app.\\\",\\n            },\\n          },\\n        },\\n      },\\n    })\\n  );\\n\\n  return {\\n    statusCode: 200,\\n    body: \\\"Sent!\\\"\\n  };\\n};\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Client Fetch Function\nDESCRIPTION: Setups up the client to interact with the tRPC server using createTRPCClient with httpBatchLink. Requires @trpc/client package and the server Router type. The function fetches responses by linking to the server's fetch.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async fetch() {\n    const client = createTRPCClient<Router>({\n      links: [\n        httpBatchLink({\n          url: \"http://localhost/\",\n          fetch(req) {\n            return Resource.Trpc.fetch(req);\n          },\n        }),\n      ],\n    });\n    return new Response(\n      await client.greet.query({\n        name: \"Patrick Star\",\n      }),\n    );\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Streaming for Lambda Functions with Hono\nDESCRIPTION: Configures streaming for Lambda functions using Hono. It conditionally enables streaming based on the environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  streaming: true\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler = process.env.SST_LIVE ? handle(app) : streamHandle(app);\n```\n\n----------------------------------------\n\nTITLE: Importing Required AWS SDK Packages for S3 Operations\nDESCRIPTION: Import statements for the necessary AWS SDK packages and components needed to generate pre-signed URLs for S3 operations. This includes the S3Client, PutObjectCommand, and getSignedUrl function from the AWS SDK.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport Form from \"@/components/form\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\n----------------------------------------\n\nTITLE: Implementing File Download in Deno\nDESCRIPTION: Adds a route to download the latest file from the S3 bucket using AWS SDK.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nif (url.pathname === \"/latest\" && req.method === \"GET\") {\n  const objects = await s3.send(\n    new ListObjectsV2Command({\n      Bucket: Resource.MyBucket.name,\n    }),\n  );\n  const latestFile = objects.Contents!.sort(\n    (a, b) =>\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\n  )[0];\n  const command = new GetObjectCommand({\n    Key: latestFile.Key,\n    Bucket: Resource.MyBucket.name,\n  });\n  return Response.redirect(await getSignedUrl(s3, command));\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Lambda Functions to Multiple AWS Regions\nDESCRIPTION: Creates two Lambda functions with Function URLs in different AWS regions - one using the default provider (East) and one using a custom provider for us-west-2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\nconst east = new sst.aws.Function(\"MyEastFunction\", {\n  url: true,\n  handler: \"index.handler\",\n});\n\nconst provider = new aws.Provider(\"MyWestProvider\", { region: \"us-west-2\" });\nconst west = new sst.aws.Function(\n  \"MyWestFunction\",\n  {\n    url: true,\n    handler: \"index.handler\",\n  },\n  { provider }\n);\n\nreturn {\n  east: east.url,\n  west: west.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SNS Topics and Subscriptions in SST\nDESCRIPTION: This snippet shows how to create an SNS topic, publish to it from a function, and subscribe to it with a function and a queue using SST components.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_115\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new sst.aws.Queue(\"MyQueue\");\nqueue.subscribe(\"subscriber.handler\");\n\nconst topic = new sst.aws.SnsTopic(\"MyTopic\");\ntopic.subscribe(\"MySubscriber1\", \"subscriber.handler\", {});\ntopic.subscribeQueue(\"MySubscriber2\", queue.arn);\n\nconst app = new sst.aws.Function(\"MyApp\", {\n  handler: \"publisher.handler\",\n  link: [topic],\n  url: true,\n});\n\nreturn {\n  app: app.url,\n  topic: topic.name,\n};\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Environment (bash)\nDESCRIPTION: Starts the SST local development environment using `npx sst dev`. This command deploys the infrastructure defined in `sst.config.ts` (Worker and R2 bucket) to a development stage on Cloudflare, provides a live URL for testing the Worker API, and watches for code changes to enable live updates during development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Implementing a Streaming Lambda Handler with lambda-stream\nDESCRIPTION: Creates a Lambda handler that implements streaming responses using the lambda-stream package. This allows the function to send partial responses before the entire operation is complete.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nimport { APIGatewayProxyEventV2 } from \"aws-lambda\";\nimport { streamifyResponse, ResponseStream } from \"lambda-stream\";\n\nexport const handler = streamifyResponse(myHandler);\n\nasync function myHandler(\n  _event: APIGatewayProxyEventV2,\n  responseStream: ResponseStream\n): Promise<void> {\n  return new Promise((resolve, _reject) => {\n    responseStream.setContentType('text/plain')\n    responseStream.write('Hello')\n    setTimeout(() => {\n      responseStream.write(' World')\n      responseStream.end()\n      resolve()\n    }, 3000)\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenAuth Subjects - TypeScript\nDESCRIPTION: Defines the shape of valid OpenAuth subjects (authenticated user objects) in 'auth/subjects.ts' using valibot for validation. The 'user' subject must have an ID string. Required dependencies: 'valibot', '@openauthjs/openauth/subject'. Outputs a subjects object for use in issuer configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { object, string } from \\\"valibot\\\";\\nimport { createSubjects } from \\\"@openauthjs/openauth/subject\\\";\\n\\nexport const subjects = createSubjects({\\n  user: object({\\n    id: string(),\\n  }),\\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Bun Elysia API to AWS with SST\nDESCRIPTION: This snippet shows how to deploy a Bun Elysia API to AWS using SST. It includes the configuration of a service, S3 bucket, VPC, and ECS cluster. The example also demonstrates file upload and download functionality.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"bun dev\",\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"bun dev\",\n  },\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SST Workers for tRPC API\nDESCRIPTION: Adds two workers in the SST configuration for handling the tRPC server and client. The SST Cloudflare Worker is used, linking the client to the server. This setup configures the handling and connectivity of API endpoints.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const trpc = new sst.cloudflare.Worker(\"Trpc\", {\n    url: true,\n    handler: \"index.ts\",\n  });\n\n  const client = new sst.cloudflare.Worker(\"Client\", {\n    url: true,\n    link: [trpc],\n    handler: \"client.ts\",\n  });\n\n  return {\n    api: trpc.url,\n    client: client.url,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lambda SQS Retry Handler with Backoff Logic\nDESCRIPTION: Implements the SQS retry handler that processes failed messages and implements an exponential backoff strategy for retries. Includes logic to check retry limits and route messages to DLQ when retries are exhausted.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\nexport const handler: SQSHandler = async (evt) => {\n  for (const record of evt.Records) {\n    const parsed = JSON.parse(record.body);\n    console.log(\"body\", parsed);\n    const functionName = parsed.requestContext.functionArn\n      .replace(\":$LATEST\", \"\")\n      .split(\":\")\n      .pop();\n    if (parsed.responsePayload) {\n      const attempt = (parsed.requestPayload.attempts || 0) + 1;\n\n      const info = await lambda.send(\n        new GetFunctionCommand({\n          FunctionName: functionName,\n        }),\n      );\n      const max =\n        Number.parseInt(\n          info.Configuration?.Environment?.Variables?.RETRIES || \"\",\n        ) || 0;\n      console.log(\"max retries\", max);\n      if (attempt > max) {\n        console.log(`giving up after ${attempt} retries`);\n        // send to dlq\n        await sqs.send(\n          new SendMessageCommand({\n            QueueUrl: Resource.dlq.url,\n            MessageBody: JSON.stringify({\n              requestPayload: parsed.requestPayload,\n              requestContext: parsed.requestContext,\n              responsePayload: parsed.responsePayload,\n            }),\n          }),\n        );\n        return;\n      }\n      const seconds = Math.min(Math.pow(2, attempt), 900);\n      console.log(\n        \"delaying retry by \",\n        seconds,\n        \"seconds for attempt\",\n        attempt,\n      );\n      parsed.requestPayload.attempts = attempt;\n      await sqs.send(\n        new SendMessageCommand({\n          QueueUrl: Resource.retryQueue.url,\n          DelaySeconds: seconds,\n          MessageBody: JSON.stringify({\n            requestPayload: parsed.requestPayload,\n            requestContext: parsed.requestContext,\n          }),\n        }),\n      );\n    }\n\n    if (!parsed.responsePayload) {\n      console.log(\"triggering function\");\n      try {\n        await lambda.send(\n          new InvokeCommand({\n            InvocationType: \"Event\",\n            Payload: Buffer.from(JSON.stringify(parsed.requestPayload)),\n            FunctionName: functionName,\n          }),\n        );\n      } catch (e) {\n        if (e instanceof ResourceNotFoundException) {\n          return;\n        }\n        throw e;\n      }\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Using SST SDK to Run AWS Task in Lambda Function\nDESCRIPTION: This snippet demonstrates how to use the SST SDK to run an AWS Task from within a Lambda function. It imports the necessary resources and uses the task.run method.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_114\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { task } from \"sst/aws/task\";\n\nexport const handler = async () => {\n  const ret = await task.run(Resource.MyTask);\n  return {\n    statusCode: 200,\n    body: JSON.stringify(ret, null, 2),\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring SolidStart WebSocket Endpoint in Container\nDESCRIPTION: Sets up a SolidStart application with WebSocket support deployed as a container to AWS. The example demonstrates enabling experimental WebSocket support in Nitro and configuring the router for WebSocket connections.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_102\n\nLANGUAGE: ts\nCODE:\n```\nexport default defineConfig({\n  server: {\n    experimental: {\n      websocket: true,\n    },\n  },\n}).addRouter({\n  name: \"ws\",\n  type: \"http\",\n  handler: \"./src/ws.ts\",\n  target: \"server\",\n  base: \"/ws\",\n});\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Downloading Latest File from S3 Bucket via NestJS Controller (TypeScript, app.controller.ts)\nDESCRIPTION: Defines a GET endpoint '/latest' which identifies the most recently modified object in the S3 bucket and returns a presigned download URL. Utilizes S3Client with ListObjectsV2Command and GetObjectCommand, sorting objects by LastModified. Dependencies: AWS SDK v3, getSignedUrl, sst resource mapper. Outputs a redirect response with a signed URL to the file. Requires previously established S3 bucket and service linkage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@Get('latest')\\n@Redirect('/', 302)\\nasync getLatestFile() {\\n  const objects = await s3.send(\\n    new ListObjectsV2Command({\\n      Bucket: Resource.MyBucket.name,\\n    }),\\n  );\\n\\n  const latestFile = objects.Contents.sort(\\n    (a, b) => b.LastModified.getTime() - a.LastModified.getTime(),\\n  )[0];\\n\\n  const command = new GetObjectCommand({\\n    Key: latestFile.Key,\\n    Bucket: Resource.MyBucket.name,\\n  });\\n  const url = await getSignedUrl(s3, command);\\n\\n  return { url };\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js Container with Redis using SST AWS Service\nDESCRIPTION: This snippet shows how to deploy a Next.js application as a Fargate service on ECS, linked to Redis. It configures the service with a cluster, links it to Redis, and sets up a load balancer.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kinesis Streams with SST\nDESCRIPTION: Creates a Kinesis stream and subscribes functions to it, including one with filtered events. It also sets up a function to publish events to the stream.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new sst.aws.KinesisStream(\"MyStream\");\n\nstream.subscribe(\"AllSub\", \"subscriber.all\");\n\nstream.subscribe(\"FilteredSub\", \"subscriber.filtered\", {\n  filters: [\n    {\n      data: {\n        type: [\"bar\"],\n      },\n    },\n  ],\n});\n\nconst app = new sst.aws.Function(\"MyApp\", {\n  handler: \"publisher.handler\",\n  link: [stream],\n  url: true,\n});\n\nreturn {\n  app: app.url,\n  stream: stream.name,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Bus Subscriber with DLQ in SST Config\nDESCRIPTION: Creates a bus subscriber that publishes messages to the bus and includes a Dead Letter Queue (DLQ) for messages that continue to fail after retries. Configures retry handling for the SQS queue.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\nconst dlq = new sst.aws.Queue(\"dlq\");\n\nretryQueue.subscribe({\n  handler: \"src/retry.handler\",\n  link: [busSubscriber.nodes.function, retryQueue, dlq],\n  timeout: \"30 seconds\",\n  environment: {\n    RETRIER_QUEUE_URL: retryQueue.url,\n  },\n  permissions: [\n    {\n      actions: [\"lambda:GetFunction\", \"lambda:InvokeFunction\"],\n      resources: [\n        $interpolate`arn:aws:lambda:${aws.getRegionOutput().name}:${\n          aws.getCallerIdentityOutput().accountId\n        }:function:*`,\n      ],\n    },\n  ],\n  transform: {\n    function: {\n      deadLetterConfig: {\n        targetArn: dlq.arn,\n      },\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Using Config Secret in SST Function\nDESCRIPTION: This code shows how to use a previously defined secret in an SST Function. It imports the secret from another stack and passes it to the function using the config option.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/config.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { use, Function, StackContext } as sst from \"@serverless-stack/resources\";\nimport SecretsStack from \"./SecretsStack\";\n\nexport default function MyStack({ stack }: StackContext) {\n  const { STRIPE_KEY } = use(SecretsStack);\n\n  new Function(stack, \"MyFunction\", {\n    handler: \"lambda.handler\",\n    config: [STRIPE_KEY],\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Cloudflare API Credentials\nDESCRIPTION: Configures the Cloudflare API token and account ID for authentication. These environment variables are necessary to interact with Cloudflare services programmatically.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\nexport CLOUDFLARE_DEFAULT_ACCOUNT_ID=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Lambda Function - TypeScript\nDESCRIPTION: Links the created S3 Bucket as an accessible resource for the AWS Lambda function in sst.config.ts. This allows the Lambda to reference and use the bucket via SST's Resource mechanism. Requires existing bucket object from prior instantiation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\\\"Hono\\\", {\\n  url: true,\\n  link: [bucket],\\n  handler: \\\"src/index.handler\\\",\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON from Output Strings with $jsonParse Helper - SST TypeScript\nDESCRIPTION: Replaces manual JSON.parse with the global $jsonParse function. Accepts an Output<string> containing JSON, and returns an Output<object> with the parsed value. Simplifies working with asynchronous JSON configuration in SST projects.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst policy = $jsonParse(policyStr);\n```\n\n----------------------------------------\n\nTITLE: Realtime Client Authorization in JavaScript\nDESCRIPTION: Utilizes the realtime component of the SST SDK to set up an authorization handler in a Node.js application. This requires the SST SDK package with support for realtime clients.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { realtime } from \"sst/aws/realtime\";\n\nexport const handler = realtime.authorizer(async (token) => {\n  // Validate the token\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AWS SDK and SST Resources for S3 - TypeScript\nDESCRIPTION: Imports necessary classes and functions for S3 operations, signed URL generation, and SST's Resource mapping into src/index.ts. Sets up the S3Client instance for use elsewhere in handlers. Required before implementing API endpoints for file interaction with S3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from 'sst'\\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\\nimport {\\n  S3Client,\\n  GetObjectCommand,\\n  PutObjectCommand,\\n  ListObjectsV2Command,\\n} from '@aws-sdk/client-s3'\\n\\nconst s3 = new S3Client();\\n\n```\n\n----------------------------------------\n\nTITLE: Dependency Installation for AWS SDK\nDESCRIPTION: Installs necessary npm packages for using the AWS SDK within the React app. This step is crucial for interacting with AWS S3 through the application code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Adding Amazon ElastiCache Redis Cluster in sst.config.ts\nDESCRIPTION: Configures an Amazon ElastiCache Redis cluster within the SST configuration, linked to the existing VPC.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_14\n\nLANGUAGE: js\nCODE:\n```\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket Policy with SST\nDESCRIPTION: This snippet shows how to create an S3 bucket and transform its bucket policy using SST. It demonstrates the use of the sst.aws.iamEdit helper function to manipulate IAM policies.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  transform: {\n    policy: (args) => {\n      // use sst.aws.iamEdit helper function to manipulate IAM policy\n      // containing Output values from components\n      args.policy = sst.aws.iamEdit(args.policy, (policy) => {\n        policy.Statement.push({\n          Effect: \"Allow\",\n          Principal: { Service: \"ses.amazonaws.com\" },\n          Action: \"s3:PutObject\",\n          Resource: $interpolate`arn:aws:s3:::${args.bucket}/*`,\n        });\n      });\n    },\n  },\n});\n\nreturn {\n  bucket: bucket.name,\n};\n```\n\n----------------------------------------\n\nTITLE: Remix File Upload Form Component - TypeScript React\nDESCRIPTION: Defines a Remix route component with an image upload form, using 'useLoaderData' to retrieve a pre-signed S3 URL from the loader. On form submission, uploads the selected file as a PUT request to S3, then navigates to the uploaded image's URL. Dependencies: '@remix-run/react', supported in Remix app file at 'app/routes/_index.tsx'.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Index() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center gap-8\">\n        <h1 className=\"leading text-2xl font-bold text-gray-800 dark:text-gray-100\">\n          Welcome to Remix\n        </h1>\n        <form\n          className=\"flex flex-row gap-4\"\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n            const image = await fetch(data.url, {\n              body: file,\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": file.type,\n                \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n              },\n            });\n\n            window.location.href = image.url.split(\"?\")[0];\n          }}\n        >\n          <input\n            name=\"file\"\n            type=\"file\"\n            accept=\"image/png, image/jpeg\"\n            className=\"block w-full text-sm text-slate-500\n              file:mr-4 file:py-2 file:px-4\n              file:rounded-full file:border-0\n              file:text-sm file:font-semibold\n              file:bg-violet-50 file:text-violet-700\n              hover:file:bg-violet-100\" />\n          <button className=\"bg-violet-500 hover:bg-violet-700 text-white text-sm\n            font-semibold py-2 px-4 rounded-full\">\n            Upload\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: SST Initialization in TypeScript\nDESCRIPTION: This code snippet initializes the SST within the newly created React app. It installs SST, and modifies the `sst.config.ts` to configure SST to create a React application targeting AWS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\nLANGUAGE: typescript\nCODE:\n```\nasync run() {\n  new sst.aws.React(\"MyWeb\");\n}\n```\n\n----------------------------------------\n\nTITLE: Adding OAuth Callback Route Handler - TypeScript\nDESCRIPTION: Implements the API route 'app/api/callback/route.ts' for the OAuth callback, exchanging authorization codes for tokens and storing them as cookies. On successful authentication, it redirects the user to the app root. Dependencies: Next.js API/handlers, OpenAuth client, setTokens. Inputs are HTTP GET requests with code parameter; outputs are redirects or JSON error responses.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { client, setTokens } from \\\"../../auth\\\";\\nimport { type NextRequest, NextResponse } from \\\"next/server\\\";\\n\\nexport async function GET(req: NextRequest) {\\n  const url = new URL(req.url);\\n  const code = url.searchParams.get(\\\"code\\\");\\n\\n  const exchanged = await client.exchange(code!, `\\${url.origin}/api/callback`);\\n\\n  if (exchanged.err) return NextResponse.json(exchanged.err, { status: 400 });\\n\\n  await setTokens(exchanged.tokens.access, exchanged.tokens.refresh);\\n\\n  return NextResponse.redirect(`\\${url.origin}/`);\\n}\n```\n\n----------------------------------------\n\nTITLE: Wrapping External Resources for Linking\nDESCRIPTION: This snippet demonstrates how to wrap an external resource (AWS DynamoDB Table) to make it linkable in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nLinkable.wrap(aws.dynamodb.Table, (table) => ({\n  properties: { tableName: table.name }\n}));\n```\n\n----------------------------------------\n\nTITLE: Installing Required NPM Packages for File Uploads and AWS Interaction (bash)\nDESCRIPTION: Installs dependencies required for S3 upload and presigned URL functionality, along with multer for handling multipart form data. Should be run after adding file upload/download routes to index.mjs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install multer @aws-sdk/client-s3 @aws-sdk/lib-storage @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Provisioning ECS Cluster and Fargate Service (TypeScript, sst.config.ts)\nDESCRIPTION: Adds a new ECS cluster tied to the VPC and defines a Fargate service linked to the RDS instance, configuring DATABASE_URL and HTTP port mapping, plus a dev command for hot-reloading Express. Tightly integrates infra and app lifecycle.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst cluster = new sst.aws.Cluster(\\\"MyCluster\\\", { vpc });\\n\\nnew sst.aws.Service(\\\"MyService\\\", {\\n  cluster,\\n  link: [rds],\\n  environment: { DATABASE_URL },\\n  loadBalancer: {\\n    ports: [{ listen: \\\"80/http\\\" }],\\n  },\\n  dev: {\\n    command: \\\"node --watch index.mjs\\\",\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming Output Values with .apply - SST TypeScript\nDESCRIPTION: Applies a transformation to an Output<string>, creating a new Output by appending a suffix with the .apply method. This is the canonical pattern for handling unresolved outputs—accepts a callback to operate on the resolved value. Requires the output as input, returns a transformed Output.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUrl = myFunction.url.apply((value) => value + \"/foo\");\n```\n\n----------------------------------------\n\nTITLE: Creating Presigned URL API Endpoint\nDESCRIPTION: Defines a new API endpoint in a Nuxt app that generates presigned URLs for S3 uploads, allowing secure and temporary access to upload files directly.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineEventHandler(async () => {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n\n  return await getSignedUrl(new S3Client({}), command);\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\n----------------------------------------\n\nTITLE: Configuring SST with Lambda Functions in TypeScript\nDESCRIPTION: This TypeScript snippet configures Lambda functions within the SST configuration file. It establishes a tRPC server and client, linking the client's URL to the server for seamless communication.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync run() {\n  const trpc = new sst.aws.Function(\"Trpc\", {\n    url: true,\n    handler: \"index.handler\",\n  });\n\n  const client = new sst.aws.Function(\"Client\", {\n    url: true,\n    link: [trpc],\n    handler: \"client.handler\",\n  });\n\n  return {\n    api: trpc.url,\n    client: client.url,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Aurora Postgres Database with SST\nDESCRIPTION: This snippet demonstrates how to deploy an Aurora Postgres database using SST and link it to a Lambda function. It also shows how to enable a bastion host for local database access.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst postgres = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  vpc,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyApp\", {\n  handler: \"index.handler\",\n  link: [postgres],\n  url: true,\n  vpc,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport postgres from \"postgres\";\nimport { Resource } from \"sst\";\n\nconst sql = postgres({\n  username: Resource.MyDatabase.username,\n  password: Resource.MyDatabase.password,\n  database: Resource.MyDatabase.database,\n  host: Resource.MyDatabase.host,\n  port: Resource.MyDatabase.port,\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", {\n  nat: \"ec2\",\n  bastion: true,\n});\nconst postgres = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  vpc,\n});\nnew sst.aws.Function(\"MyApp\", {\n  handler: \"index.handler\",\n  link: [postgres],\n  url: true,\n  vpc,\n});\n\nreturn {\n  host: postgres.host,\n  port: postgres.port,\n  username: postgres.username,\n  password: postgres.password,\n  database: postgres.database,\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling AWS Lambda Streaming in SST Config\nDESCRIPTION: Configures a Lambda function to use streaming responses by setting the streaming flag to true in the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  streaming: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Auth for AWS Next.js\nDESCRIPTION: This snippet demonstrates how to add basic authentication to a Next.js app deployed on AWS using SST. It injects code into a CloudFront function to check for basic auth headers.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\nconst username = new sst.Secret(\"USERNAME\");\nconst password = new sst.Secret(\"PASSWORD\");\nconst basicAuth = $resolve([username.value, password.value]).apply(\n  ([username, password]) =>\n    Buffer.from(`${username}:${password}`).toString(\"base64\")\n);\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  server: {\n    edge: $app.stage !== \"production\"\n      ? {\n        viewerRequest: {\n          injection: $interpolate`\n            if (\n                !event.request.headers.authorization\n                  || event.request.headers.authorization.value !== \"Basic ${basicAuth}\"\n               ) {\n              return {\n                statusCode: 401,\n                headers: {\n                  \"www-authenticate\": { value: \"Basic\" }\n                }\n              };\n            }`,\n        },\n      }\n      : undefined,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Lambda Retry with Queues Configuration\nDESCRIPTION: Provides the complete SST configuration for Lambda retry with queues example. Includes the setup of DLQ, retry queue, event bus, publisher function, and all necessary event configurations for retry handling.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\nconst dlq = new sst.aws.Queue(\"dlq\");\n\nconst retryQueue = new sst.aws.Queue(\"retryQueue\");\n\nconst bus = new sst.aws.Bus(\"bus\");\n\nconst busSubscriber = bus.subscribe(\"busSubscriber\", {\n  handler: \"src/bus-subscriber.handler\",\n  environment: {\n    RETRIES: \"2\",\n  },\n  link: [retryQueue], // so the function can send messages to the queue\n});\n\nconst publisher = new sst.aws.Function(\"publisher\", {\n  handler: \"src/publisher.handler\",\n  link: [bus],\n  url: true,\n});\n\nnew aws.lambda.FunctionEventInvokeConfig(\"eventConfig\", {\n  functionName: $resolve([busSubscriber.nodes.function.name]).apply(\n    ([name]) => name,\n  ),\n  maximumRetryAttempts: 1,\n  destinationConfig: {\n    onFailure: {\n      destination: retryQueue.arn,\n    },\n  },\n});\n\nretryQueue.subscribe({\n  handler: \"src/retry.handler\",\n  link: [busSubscriber.nodes.function, retryQueue, dlq],\n  timeout: \"30 seconds\",\n  environment: {\n    RETRIER_QUEUE_URL: retryQueue.url,\n  },\n  permissions: [\n    {\n      actions: [\"lambda:GetFunction\", \"lambda:InvokeFunction\"],\n      resources: [\n        $interpolate`arn:aws:lambda:${aws.getRegionOutput().name}:${\n          aws.getCallerIdentityOutput().accountId\n        }:function:*`,\n      ],\n    },\n  ],\n  transform: {\n    function: {\n      deadLetterConfig: {\n        targetArn: dlq.arn,\n      },\n    },\n  },\n});\n\nreturn {\n  publisher: publisher.url,\n  dlq: dlq.url,\n  retryQueue: retryQueue.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring a Cloudflare Worker in SST\nDESCRIPTION: Defines a Cloudflare Worker component using SST. It specifies the handler file and enables a URL for API access. The configuration is essential to deploy the worker with SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const worker = new sst.cloudflare.Worker(\"MyWorker\", {\n    handler: \"./index.ts\",\n    url: true,\n  });\n\n  return {\n    api: worker.url,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Prisma Lambda Function Configuration\nDESCRIPTION: SST configuration for Lambda functions using Prisma, including VPC settings and file copying.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_92\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"managed\" });\nconst rds = new sst.aws.Postgres(\"MyPostgres\", { vpc });\n\nconst api = new sst.aws.Function(\"MyApi\", {\n  vpc,\n  url: true,\n  link: [rds],\n  // For ARM\n  // architecture: \"arm64\",\n  handler: \"index.handler\",\n  copyFiles: [{ from: \"node_modules/.prisma/client/\" }],\n});\n\nreturn {\n  api: api.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Remix Component - JavaScript\nDESCRIPTION: Links the previously defined S3 bucket resource to the Remix SST component for resource injection and environment variable wiring. This is necessary for the Remix app to access the bucket's runtime configuration and credentials. Applied in the sst.config.ts file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nnew sst.aws.Remix(\"MyWeb\", {\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Lambda Implementation\nDESCRIPTION: Lambda function configuration for running Puppeteer with Chromium in both local and deployed environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_93\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new sst.aws.Function(\"MyFunction\", {\n  url: true,\n  memory: \"2 GB\",\n  timeout: \"15 minutes\",\n  handler: \"index.handler\",\n  nodejs: {\n    install: [\"@sparticuz/chromium\"],\n  },\n});\n\nreturn {\n  url: api.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form in Nuxt\nDESCRIPTION: Implements a form in a Nuxt application that uploads files to a previously obtained presigned URL, including the necessary Vue.js template and script setup.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_7\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\n  const file = ref(null);\n  const { data } = await useFetch('/api/presigned');\n\n  async function onSubmit() {\n    const upload = file.value.files[0];\n    const image = await fetch(data.value, {\n      body: upload,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": upload.type,\n        \"Content-Disposition\": `attachment; filename=\"${upload.name}\"`,\n      },\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n  }\n</script>\n<template>\n  <form novalidate @submit.prevent=\"onSubmit\">\n    <input type=\"file\" ref=\"file\" accept=\"image/png, image/jpeg\" />\n    <button type=\"submit\">Upload</button>\n  </form>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed S3 Download URL for Latest File - TypeScript\nDESCRIPTION: Defines a GET route handler for '/latest' in the Hono app, which lists objects in the S3 bucket, sorts them by last modification time, and generates a pre-signed download URL for the newest file. Assumes the resource is present and accessible in Resource.MyBucket, and uses AWS SDK for S3 commands and URL generation. Handles the route's redirection logic to the signed S3 object URL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\napp.get('/latest', async (c) => {\\n  const objects = await s3.send(\\n    new ListObjectsV2Command({\\n      Bucket: Resource.MyBucket.name,\\n    }),\\n  );\\n\\n  const latestFile = objects.Contents!.sort(\\n    (a, b) =>\\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\\n  )[0];\\n\\n  const command = new GetObjectCommand({\\n    Key: latestFile.Key,\\n    Bucket: Resource.MyBucket.name,\\n  });\\n\\n  return c.redirect(await getSignedUrl(s3, command));\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Redis Configuration with VPC\nDESCRIPTION: Setup for Redis ElastiCache with VPC integration and local development configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_95\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"managed\" });\n\nconst redis = new sst.aws.Redis(\"MyRedis\", {\n  dev: {\n    host: \"localhost\",\n    port: 6379,\n  },\n  vpc,\n});\n\nnew sst.aws.Function(\"MyApp\", {\n  vpc,\n  url: true,\n  link: [redis],\n  handler: \"index.handler\",\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS JSX Email in SST\nDESCRIPTION: Sets up an email service using JSX Email and AWS SES. It creates an email component and links it to a function with a URL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nconst email = new sst.aws.Email(\"MyEmail\", {\n  sender: \"email@example.com\",\n});\nconst api = new sst.aws.Function(\"MyApi\", {\n  handler: \"index.handler\",\n  link: [email],\n  url: true,\n});\n\nreturn {\n  api: api.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Lambda Function Error Logging in JavaScript\nDESCRIPTION: Example showing how to log errors in Lambda functions that will be automatically detected by the SST Console's Issues feature. Lambda runtime automatically handles the necessary markers for error detection.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconsole.error(new Error(\"my-error\"));\n```\n\n----------------------------------------\n\nTITLE: Creating Kinesis Stream with Subscriber in SST v3\nDESCRIPTION: Sets up a Kinesis stream and adds a subscriber Lambda function in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new sst.aws.KinesisStream(\"MyStream\");\n\nstream.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n```\n\n----------------------------------------\n\nTITLE: Creating and Deploying a Remix App with SST\nDESCRIPTION: This snippet demonstrates how to create a new SST project using the Remix app template, install dependencies, start the development environment, and deploy to production.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/remixsite-construct.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-sst@latest --template=examples/remix-app my-sst-app\n$ cd my-sst-app\n$ npm install\n$ npx sst start\n\n# Deploy to prod\n$ npx sst deploy --stage prod\n```\n\n----------------------------------------\n\nTITLE: Implementing File Download Route in Hono (TypeScript)\nDESCRIPTION: Adds a GET route (`/`) to the Hono application in `index.ts`. This route retrieves the most recently uploaded file from the \"MyBucket\" R2 bucket. It lists objects using `Resource.MyBucket.list()`, sorts them by upload time to find the latest, fetches its content using `Resource.MyBucket.get()`, sets the appropriate `content-type` header based on the stored metadata, and returns the file body in the HTTP response.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst app = new Hono()\n  // ...\n  .get(\"/\", async (c) => {\n    const first = await Resource.MyBucket.list().then(\n      (res) =>\n        res.objects.sort(\n          (a, b) => a.uploaded.getTime() - b.uploaded.getTime(),\n        )[0],\n    );\n    const result = await Resource.MyBucket.get(first.key);\n    c.header(\"content-type\", result.httpMetadata.contentType);\n    return c.body(result.body);\n  });\n```\n\n----------------------------------------\n\nTITLE: Required Imports and S3 Client Setup for File Uploads (JavaScript)\nDESCRIPTION: Contains all necessary import statements and initializations for handling S3 uploads within the Express app: multer for form parsing, AWS SDK classes for S3 operations, and configuration for the S3 client and multer memory storage. These should be included at the top of index.mjs where upload/download routes are defined.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport multer from \\\"multer\\\";\\nimport { Resource } from \\\"sst\\\";\\nimport { Upload } from \\\"@aws-sdk/lib-storage\\\";\\nimport { getSignedUrl } from \\\"@aws-sdk/s3-request-presigner\\\";\\nimport {\\n  S3Client,\\n  GetObjectCommand,\\n  ListObjectsV2Command,\\n} from \\\"@aws-sdk/client-s3\\\";\\n\\nconst s3 = new S3Client({});\\nconst upload = multer({ storage: multer.memoryStorage() });\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form Component in Svelte (Serverless)\nDESCRIPTION: Provides the Svelte code for the `src/routes/+page.svelte` component. It includes a script section to handle form submission (fetching a pre-signed URL from `data` and performing a PUT request with the file) and a template section with an HTML form containing a file input and submit button. Basic CSS styling is also included.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_6\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n\n  const handleSubmit = async (e) => {\n    const formData = new FormData(e.target);\n    const file = formData.get(\"file\");\n\n    const image = await fetch(data.url, {\n      body: file,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": file.type,\n        \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n      },\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n  };\n</script>\n\n<section>\n  <form on:submit|preventDefault={handleSubmit}>\n    <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n    <button type=\"submit\">Upload</button>\n  </form>\n</section>\n```\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  section {\n    flex: 0.6;\n    display: flex;\n    padding-top: 4rem;\n    align-items: center;\n    flex-direction: column;\n    justify-content: center;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Authorizer Implementation for Realtime Component\nDESCRIPTION: Defines an authorizer in TypeScript that checks tokens to determine who can publish and subscribe to topics. It uses SST Resources for namespacing. Inputs include a token from clients.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { realtime } from \"sst/aws/realtime\";\n\nexport const handler = realtime.authorizer(async (token) => {\n  const prefix = `${Resource.App.name}/${Resource.App.stage}`;\n\n  const isValid = token === \"PLACEHOLDER_TOKEN\";\n\n  return isValid\n    ? {\n      publish: [`${prefix}/*`],\n      subscribe: [`${prefix}/*`],\n    }\n    : {\n      publish: [],\n      subscribe: [],\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Discovery in AWS Cluster\nDESCRIPTION: Demonstrates accessing a service within a VPC using AWS Cloud Map service discovery. The example shows a Lambda function that connects to a service deployed in the same VPC using the service's Cloud Map hostname.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_100\n\nLANGUAGE: ts\nCODE:\n```\nconst reponse = await fetch(`http://${Resource.MyService.service}`);\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"ec2\" });\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nconst service = new sst.aws.Service(\"MyService\", { cluster });\n\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  url: true,\n  link: [service],\n  handler: \"lambda.handler\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying React SPA with Vite using SST\nDESCRIPTION: This snippet shows how to deploy a React single-page application (SPA) built with Vite to S3 and CloudFront using SST's StaticSite component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_117\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.StaticSite(\"Web\", {\n  build: {\n    command: \"pnpm run build\",\n    output: \"dist\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up EventBus with Subscribers in SST v3\nDESCRIPTION: Creates an EventBus and adds multiple subscribers with specific event patterns in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst bus = new sst.aws.EventBus(\"Bus\");\n\nbus.subscribe(\"MySubscriber1\", \"src/function1.handler\", {\n  pattern: {\n    source: [\"myevent\"]\n  }\n});\nbus.subscribe(\"MySubscriber2\", \"src/function2.handler\", {\n  pattern: {\n    source: [\"myevent\"]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with Function URL in SST AWS\nDESCRIPTION: Sets up a router that directs API requests to a Lambda function and other requests to a public bucket. The example shows the configuration for routing paths to different endpoints based on URL patterns.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_99\n\nLANGUAGE: ts\nCODE:\n```\nconst api = new sst.aws.Function(\"MyApi\", {\n  handler: \"api.handler\",\n  url: true,\n});\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\",\n});\nconst router = new sst.aws.Router(\"MyRouter\", {\n  domain: \"router.ion.dev.sst.dev\",\n  routes: {\n    \"/api/*\": api.url,\n    \"/*\": $interpolate`https://${bucket.domain}`,\n  },\n});\n\nreturn {\n  router: router.url,\n  bucket: bucket.domain,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Fargate Service and VPC in SST Configuration (JavaScript)\nDESCRIPTION: Outlines the async run function for sst.config.ts, creating a new VPC and ECS Cluster, then defining a Fargate Service with an HTTP listener on port 80. The \"dev.command\" parameter allows for local dev execution of the Express app. Requires SST API and AWS credentials.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\\n  const vpc = new sst.aws.Vpc(\\\"MyVpc\\\");\\n  const cluster = new sst.aws.Cluster(\\\"MyCluster\\\", { vpc });\\n\\n  new sst.aws.Service(\\\"MyService\\\", {\\n    cluster,\\n    loadBalancer: {\\n      ports: [{ listen: \\\"80/http\\\" }],\\n    },\\n    dev: {\\n      command: \\\"node --watch index.mjs\\\",\\n    },\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Pre-signed URL Lambda Function\nDESCRIPTION: Creates a serverless function that generates an S3 pre-signed URL for direct file uploads. Uses AWS SDK to create a PUT object command with a unique filename and the configured S3 bucket.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\nexport async function handler() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n\n  return {\n    statusCode: 200,\n    body: await getSignedUrl(new S3Client({}), command),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Environment - Bash\nDESCRIPTION: Starts the SST development mode, running functions live for local testing. Provides access to the API endpoint for test requests. Requires SST CLI installed. All project initialization should be completed before running this command.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Client Libraries - Bash\nDESCRIPTION: Installs AWS SDK v3 S3 client libraries and presigner modules using npm. Required to generate signed URLs and S3 commands programmatically. Outputs updated 'node_modules' and package.json with dependencies.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Express Route for Downloading Latest S3 File (JavaScript)\nDESCRIPTION: Implements an Express GET route '/latest' that lists objects in the connected S3 bucket using AWS SDK, sorts by LastModified, and redirects the user to a signed download URL for the most recent file. Requires S3 SDK imports, getSignedUrl, Resource, and proper AWS credentials.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\napp.get(\\\"/latest\\\", async (req, res) => {\\n  const objects = await s3.send(\\n    new ListObjectsV2Command({\\n      Bucket: Resource.MyBucket.name,\\n    }),\\n  );\\n\\n  const latestFile = objects.Contents.sort(\\n    (a, b) => b.LastModified - a.LastModified,\\n  )[0];\\n\\n  const command = new GetObjectCommand({\\n    Key: latestFile.Key,\\n    Bucket: Resource.MyBucket.name,\\n  });\\n  const url = await getSignedUrl(s3, command);\\n\\n  res.redirect(url);\\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Fargate Service with SST - JavaScript\nDESCRIPTION: Sets up a VPC and ECS Cluster with an Amazon Fargate service for deploying a Next.js app using SST. Adjust ports and commands as necessary for different environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n    },\n    dev: {\n      command: \"npm run dev\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MQTT Connection for Chat\nDESCRIPTION: Defines a function to create an MQTT connection with endpoint and authorizer details. Uses placeholder token for authentication. It generates a random client ID for the connection.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nfunction createConnection(endpoint: string, authorizer: string) {\n  return mqtt.connect(`wss://${endpoint}/mqtt?x-amz-customauthorizer-name=${authorizer}`, {\n    protocolVersion: 5,\n    manualConnect: true,\n    username: \"\", // Must be empty for the authorizer\n    password: \"PLACEHOLDER_TOKEN\", // Passed as the token to the authorizer\n    clientId: `client_${window.crypto.randomUUID()}`,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Linked Resources in SST for Go\nDESCRIPTION: Details how to link resources to functions in SST for Go applications. Requires SST configuration with supported syntax for linking resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"./src\",\n  link: [bucket]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Retry with SQS Queue in TypeScript\nDESCRIPTION: Creates a SQS retry queue as a destination for Lambda function failures. This setup configures a retry mechanism where failed Lambda invocations are sent to the retry queue for processing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\nconst retryQueue = new sst.aws.Queue(\"retryQueue\");\n\nconst bus = new sst.aws.Bus(\"bus\");\n\nconst busSubscriber = bus.subscribe(\"busSubscriber\", {\n  handler: \"src/bus-subscriber.handler\",\n  environment: {\n    RETRIES: \"2\", // set the number of retries\n  },\n  link: [retryQueue], // so the function can send messages to the retry queue\n});\n\nnew aws.lambda.FunctionEventInvokeConfig(\"eventConfig\", {\n  functionName: $resolve([busSubscriber.nodes.function.name]).apply(\n    ([name]) => name,\n  ),\n  maximumRetryAttempts: 2, // default is 2, must be between 0 and 2\n  destinationConfig: {\n    onFailure: {\n      destination: retryQueue.arn,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Transforming IAM Role in SST Function Component\nDESCRIPTION: Demonstrates how to use the transform property to customize the IAM role created for a Lambda function in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  transform: {\n    role: (args) => ({\n      name: `${args.name}-MyRole`\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Wrapped External Resource with SST SDK\nDESCRIPTION: This snippet demonstrates how to access a wrapped external resource using the SST SDK in runtime code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyTable.tableName);\n```\n\n----------------------------------------\n\nTITLE: Handling S3 File Upload via NestJS Controller (TypeScript, app.controller.ts)\nDESCRIPTION: Implements a POST endpoint in the NestJS app.controller.ts to handle file uploads. The method uses NestJS's FileInterceptor for handling multipart form uploads, extracts file metadata using Multer's req.file, and uploads to S3 via the AWS SDK's Upload utility. Dependencies: '@aws-sdk/client-s3', 'sst', 'express', '@aws-sdk/lib-storage', 'nestjs/platform-express'. Parameters: file upload as multipart-form, route: POST /. Outputs: Promise resolved to a success message string. Requires valid S3 client, Multer, and bucket linkage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@Post()\\n@UseInterceptors(FileInterceptor('file'))\\nasync uploadFile(@UploadedFile() file: Express.Multer.File): Promise<string> {\\n  const params = {\\n    Bucket: Resource.MyBucket.name,\\n    ContentType: file.mimetype,\\n    Key: file.originalname,\\n    Body: file.buffer,\\n  };\\n\\n  const upload = new Upload({\\n    params,\\n    client: s3,\\n  });\\n\\n  await upload.done();\\n\\n  return 'File uploaded successfully.';\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Task in SST v3\nDESCRIPTION: Demonstrates how to create a Task component within a Cluster in SST v3. It shows the basic configuration and how to customize the Docker image settings.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/tasks-in-v3.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nconst task = new sst.aws.Task(\"MyTask\", { cluster });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Task(\"MyTask\", {\n  cluster,\n  image: {\n    context: \"./app\",\n    dockerfile: \"Dockerfile\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Production Stage with SST (bash)\nDESCRIPTION: Deploys the SST application, including the Hono API Worker and the R2 bucket defined in `sst.config.ts`, to a specified production stage on Cloudflare using `npx sst deploy --stage production`. This command provisions or updates the cloud resources for the production environment, making the application publicly accessible.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed URL for S3 Upload in Astro\nDESCRIPTION: Code snippet that generates a pre-signed URL for file uploads to an S3 bucket. It creates a PutObjectCommand with a random UUID as the key and retrieves the bucket name from SST Resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_19\n\nLANGUAGE: astro\nCODE:\n```\n---\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\nconst command = new PutObjectCommand({\n  Key: crypto.randomUUID(),\n  Bucket: Resource.MyBucket.name,\n});\nconst url = await getSignedUrl(new S3Client({}), command);\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed URL for File Uploads\nDESCRIPTION: This TypeScript code generates a pre-signed URL using AWS SDK for uploading files to S3, providing secure and temporary access to the bucket.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from 'sst';\nimport { PageServerLoad } from '@analogjs/router';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';\n\nexport const load = async ({ }: PageServerLoad) => {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    // @ts-ignore: Generated on deploy\n    Bucket: Resource.MyBucket.name,\n  });\n\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return {\n    url\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining VPC, Redis, Cluster, and Service for Astro App (TypeScript)\nDESCRIPTION: This configuration illustrates creating a VPC (with bastion host), a Redis cluster, and an ECS Cluster using SST AWS constructs. It deploys an Astro app as a Fargate Service, linking it to the Redis resource, specifying container load balancer ports, and a development command. Dependencies include the SST AWS library and knowledge of ECS/VPC/Redis architectures. Suited for deploying real-world production or staging environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"4321/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Manually Passing Environment Variables to Components\nDESCRIPTION: Explicitly pass environment variables to SST components, with optional fallback values for when the environment variable is not set.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n   environment: {\n     SOME_ENV_VAR: process.env.SOME_ENV_VAR ?? \"fallback value\",\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Project - Bash\nDESCRIPTION: Initializes SST in an existing Hono app project, downloads dependencies, and sets up base config files (sst.config.ts). Requires Node.js, npm, and SST CLI. No parameters required; guided by prompts for cloud provider.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\\nnpm install\\n\n```\n\n----------------------------------------\n\nTITLE: Defining SST VPC, Cluster and Service for Fargate/ECS - JavaScript\nDESCRIPTION: Defines a VPC, ECS Cluster, and SST Service using AWS Fargate for deploying a Remix app in containers. The run function uses SST's 'aws' components and sets up internal networking, load balancer ports, and dev-mode commands for local Remix development. Prerequisite: appropriated AWS credentials, sst.config.ts context.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_12\n\nLANGUAGE: js\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n    },\n    dev: {\n      command: \"npm run dev\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket in sst.config.ts for Public Access\nDESCRIPTION: This code configures a public S3 Bucket for file uploads within the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an SST Cluster in an Existing VPC in TypeScript (sst.config.ts)\nDESCRIPTION: Illustrates configuring an `sst.aws.Cluster` component to utilize a pre-existing VPC. This setup requires providing more detailed VPC information compared to a function, including the VPC `id`, `securityGroups`, `containerSubnets`, and `loadBalancerSubnets` within the `vpc` configuration property.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.Cluster(\"MyCluster\", {\n  vpc: {\n    id: \"vpc-0be8fa4de860618bb\",\n    securityGroups: [\"sg-0be8fa4de860618bb\"],\n    containerSubnets: [\"subnet-0be8fa4de860618bb\"],\n    loadBalancerSubnets: [\"subnet-8be8fa4de850618ff\"]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Infrastructure for Hono Service\nDESCRIPTION: Sets up a VPC, Redis cluster, and ECS cluster for the Hono service. It then configures the service with the necessary links and load balancer settings.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Linked Resources with the SST JavaScript SDK\nDESCRIPTION: Access linked database resources in a Next.js application using the SST JavaScript SDK. This demonstrates how to use the linked resource properties to configure a database connection.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nexport const db = drizzle(client, {\n  schema,\n  database: Resource.MyPostgres.database,\n  secretArn: Resource.MyPostgres.secretArn,\n  resourceArn: Resource.MyPostgres.clusterArn\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Hono App Deployment\nDESCRIPTION: This Dockerfile sets up a multi-stage build process for a Hono application. It copies the necessary files, builds the TypeScript app, and creates a minimal production image with proper user permissions and exposed port.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_22\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts-alpine AS base\n\nFROM base AS builder\nRUN apk add --no-cache gcompat\nWORKDIR /app\nCOPY package*json tsconfig.json src ./\n# Copy over generated types\nCOPY sst-env.d.ts* ./\nRUN npm ci && \\\n  npm run build && \\\n  npm prune --production\n\nFROM base AS runner\nWORKDIR /app\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 hono\nCOPY --from=builder --chown=hono:nodejs /app/node_modules /app/node_modules\nCOPY --from=builder --chown=hono:nodejs /app/dist /app/dist\nCOPY --from=builder --chown=hono:nodejs /app/package.json /app/package.json\n\nUSER hono\nEXPOSE 3000\nCMD [\"node\", \"/app/dist/index.js\"]\n```\n\n----------------------------------------\n\nTITLE: Creating VPC, ECS Cluster, and Fargate Service with SST (JavaScript, sst.config.ts)\nDESCRIPTION: Defines a VPC, ECS cluster, and a Fargate service using SST within sst.config.ts's run function. The service exposes port 80 (forwarded to 3000), and in development, executes a custom command to start the NestJS app locally. Dependencies include the SST AWS constructs library and a proper AWS credentials setup. Parameters include cluster configuration and dev command. The output is an AWS service stack ready for deployment or local development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\\n  const vpc = new sst.aws.Vpc(\\\"MyVpc\\\");\\n  const cluster = new sst.aws.Cluster(\\\"MyCluster\\\", { vpc });\\n\\n  new sst.aws.Service(\\\"MyService\\\", {\\n    cluster,\\n    loadBalancer: {\\n      ports: [{ listen: \\\"80/http\\\", forward: \\\"3000/http\\\" }],\\n    },\\n    dev: {\\n      command: \\\"npm run start:dev\\\",\\n    },\\n  });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Expected Error Message for Mismatched Import Properties\nDESCRIPTION: Illustrates the error message received when `sst deploy` fails during an import because the defined resource arguments in the code do not match the properties of the existing AWS resource. The error message provides specific guidance on which arguments need to be adjusted in the `transform` function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_3\n\nLANGUAGE: txt\nCODE:\n```\n✕  Failed\n   inputs to import do not match the existing resource\n\n   Set the following in your transform:\n   - `args.bucket = \"mybucket-xnbmhcvd\";`\n   - `args.forceDestroy = undefined;`\n```\n\n----------------------------------------\n\nTITLE: Deploying an Application Using SST\nDESCRIPTION: This snippet deploys the application to a specified stage using SST. It suggests creating a unique stage for production deployments to manage different environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Lambda Function in SST\nDESCRIPTION: TypeScript configuration for deploying a Python function to AWS Lambda using SST. Demonstrates setting up a containerized Python function with URL support and Python 3.11 runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-python-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst python = new sst.aws.Function(\"MyPythonFunction\", {\n  python: { container: true },\n  handler: \"functions/src/functions/api.handler\",\n  runtime: \"python3.11\",\n  url: true\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload Route in Hono (TypeScript)\nDESCRIPTION: Defines a Hono application (`app`) with a PUT route (`/*`) in `index.ts`. This route handles file uploads by generating a random UUID for the file key, uploading the raw request body to the linked \"MyBucket\" R2 bucket using `Resource.MyBucket.put()`, setting the content type metadata from the request header, and returning a text response with the generated key. Requires `hono` and `sst` packages.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst app = new Hono()\n  .put(\"/*\", async (c) => {\n    const key = crypto.randomUUID();\n    await Resource.MyBucket.put(key, c.req.raw.body, {\n      httpMetadata: {\n        contentType: c.req.header(\"content-type\"),\n      },\n    });\n    return c.text(`Object created with key: ${key}`);\n  });\n\nexport default app;\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda Function in SST\nDESCRIPTION: Shows how to configure an AWS Lambda function with custom timeout and memory settings in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  timeout: \"3 minutes\",\n  memory: \"1024 MB\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a tRPC Client in TypeScript\nDESCRIPTION: Establishes a tRPC client using createTRPCClient and httpBatchLink, which connects to the server through the specified URL and can invoke the greet method to receive a response.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = createTRPCClient<Router>({\n  links: [\n    httpBatchLink({\n      url: Resource.Trpc.url,\n    }),\n  ],\n});\n\nexport async function handler() {\n  return {\n    statusCode: 200,\n    body: await client.greet.query({ name: \"Patrick Star\" }),\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Auth Actions (auth, login, logout) - TypeScript\nDESCRIPTION: Adds Next.js server actions in 'app/actions.ts' to check authentication, initiate login using OpenAuth OAuth flow, and logout by clearing cookies. It uses the OpenAuth client and subject definitions for verification and redirects. Dependencies: Next.js API, OpenAuth client, subjects, and utility modules. Inputs are HTTP cookies and headers; outputs are either user subject objects or redirects. This module is essential for managing user session state during authentication workflows.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n\\\"use server\\\";\\n\\nimport { redirect } from \\\"next/navigation\\\";\\nimport { headers as getHeaders, cookies as getCookies } from \\\"next/headers\\\";\\nimport { subjects } from \\\"../auth/subjects\\\";\\nimport { client, setTokens } from \\\"./auth\\\";\\n\\nexport async function auth() {\\n  const cookies = await getCookies();\\n  const accessToken = cookies.get(\\\"access_token\\\");\\n  const refreshToken = cookies.get(\\\"refresh_token\\\");\\n\\n  if (!accessToken) {\\n    return false;\\n  }\\n\\n  const verified = await client.verify(subjects, accessToken.value, {\\n    refresh: refreshToken?.value,\\n  });\\n\\n  if (verified.err) {\\n    return false;\\n  }\\n  if (verified.tokens) {\\n    await setTokens(verified.tokens.access, verified.tokens.refresh);\\n  }\\n\\n  return verified.subject;\\n}\\n\\nexport async function login() {\\n  const cookies = await getCookies();\\n  const accessToken = cookies.get(\\\"access_token\\\");\\n  const refreshToken = cookies.get(\\\"refresh_token\\\");\\n\\n  if (accessToken) {\\n    const verified = await client.verify(subjects, accessToken.value, {\\n      refresh: refreshToken?.value,\\n    });\\n    if (!verified.err && verified.tokens) {\\n      await setTokens(verified.tokens.access, verified.tokens.refresh);\\n      redirect(\\\"/\\\");\\n    }\\n  }\\n\\n  const headers = await getHeaders();\\n  const host = headers.get(\\\"host\\\");\\n  const protocol = host?.includes(\\\"localhost\\\") ? \\\"http\\\" : \\\"https\\\";\\n  const { url } = await client.authorize(\\n    `\\${protocol}://\\${host}/api/callback`,\\n    \\\"code\\\",\\n  );\\n  redirect(url);\\n}\\n\\nexport async function logout() {\\n  const cookies = await getCookies();\\n  cookies.delete(\\\"access_token\\\");\\n  cookies.delete(\\\"refresh_token\\\");\\n\\n  redirect(\\\"/\\\");\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Linking a Wrapped External Resource\nDESCRIPTION: This snippet shows how to create an instance of a wrapped external resource and link it in an SST app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst table = new aws.dynamodb.Table(\"MyTable\", {\n  attributes: [{ name: \"id\", type: \"S\" }],\n  hashKey: \"id\"\n});\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [table]\n});\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Container Service in SST\nDESCRIPTION: Demonstrates how to link an S3 bucket to a containerized service using SST's link feature.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [bucket],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in SST Config\nDESCRIPTION: Access environment variables in the SST configuration file that were passed during deployment or development. This demonstrates how traditional environment variables are available in the config.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nasync run() {\n  console.log(process.env.SOME_ENV_VAR); // FOO\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Cognito User Pool and Identity Pool in SST v3\nDESCRIPTION: Creates a Cognito User Pool, adds a client, and sets up an Identity Pool with the User Pool in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst userPool = new sst.aws.CognitoUserPool(\"MyUserPool\");\n\nconst client = userPool.addClient(\"MyClient\");\n\nnew sst.aws.CognitoIdentityPool(\"MyIdentityPool\", {\n  userPools: [{\n    userPool: userPool.id,\n    client: client.id\n  }]\n});\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Mode (bash)\nDESCRIPTION: Starts SST's development mode, which sets up local environments and hot-reloads your Express app using the previously defined dev.command. Prerequisites include SST being initialized and the Express app being implemented in index.mjs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Next.js with Additional Behaviors\nDESCRIPTION: This snippet shows how to add additional routes or cache behaviors to the CDN of a Next.js app deployed with OpenNext to AWS. It demonstrates adding a custom origin and cache behavior for a blog path.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\nconst blogOrigin = {\n  domainName: \"blog.example.com\",\n  originId: \"blogCustomOrigin\",\n  customOriginConfig: {\n    httpPort: 80,\n    httpsPort: 443,\n    originSslProtocols: [\"TLSv1.2\"],\n    originProtocolPolicy: \"https-only\",\n  },\n};\n\nconst cacheBehavior = {\n  pathPattern: \"/blog/*\",\n  targetOriginId: blogOrigin.originId,\n  viewerProtocolPolicy: \"redirect-to-https\",\n  allowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n  cachedMethods: [\"GET\", \"HEAD\"],\n  forwardedValues: {\n    queryString: true,\n    cookies: {\n      forward: \"all\",\n    },\n  },\n};\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  transform: {\n    cdn: (options: sst.aws.CdnArgs) => {\n      options.origins = $resolve(options.origins).apply(val => [...val, blogOrigin]);\n\n      options.orderedCacheBehaviors = $resolve(\n        options.orderedCacheBehaviors || []\n      ).apply(val => [...val, cacheBehavior]);\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Aurora MySQL from Lambda Function (TypeScript)\nDESCRIPTION: Inside the Lambda function, this code establishes a connection to an Aurora MySQL database using credentials and endpoint information provided by SST Resources. Uses an async database client (e.g., mysql2/promise), matches Resource property names with MySQL connection parameters. Requires the appropriate MySQL client package in the function deployment package.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst connection = await mysql.createConnection({\n  database: Resource.MyDatabase.database,\n  host: Resource.MyDatabase.host,\n  port: Resource.MyDatabase.port,\n  user: Resource.MyDatabase.username,\n  password: Resource.MyDatabase.password,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an SST Function in an Existing VPC in TypeScript (sst.config.ts)\nDESCRIPTION: Demonstrates configuring an `sst.aws.Function` to run within a pre-existing VPC. This requires specifying the identifiers of existing VPC resources, specifically the `subnets` and `securityGroups` IDs, within the `vpc` configuration property during the function's definition.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  vpc: {\n    subnets: [\"subnet-0be8fa4de860618bb\"],\n    securityGroups: [\"sg-0be8fa4de860618bb\"]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing IAM Permissions Boundaries in SST\nDESCRIPTION: Creates a permissions boundary policy and applies it to all IAM roles in the app using the global $transform function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\nconst permissionsBoundary = new aws.iam.Policy(\"MyPermissionsBoundary\", {\n  policy: aws.iam.getPolicyDocumentOutput({\n    statements: [\n      {\n        actions: [\"s3:ListAllMyBuckets\"],\n        resources: [\"*\"],\n      },\n    ],\n  }).json,\n});\n\n$transform(aws.iam.Role, (args) => {\n  args.permissionsBoundary = permissionsBoundary;\n});\n\nconst app = new sst.aws.Function(\"MyApp\", {\n  handler: \"index.handler\",\n  permissions: [\n    {\n      actions: [\"s3:ListAllMyBuckets\", \"sqs:ListQueues\"],\n      resources: [\"*\"],\n    },\n  ],\n  url: true,\n});\n\nreturn {\n  app: app.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Public S3 Bucket to SST Config\nDESCRIPTION: Configures an S3 bucket with public access in the SST configuration. This bucket will be used for file uploads from the Angular application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring T3 Stack Database Connection in TypeScript\nDESCRIPTION: This snippet shows how to configure the database connection for a T3 Stack application using SST resources. It sets up a connection pool for a Postgres database hosted on AWS RDS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_107\n\nLANGUAGE: typescript\nCODE:\n```\nconst pool = new Pool({\n  host: Resource.MyPostgres.host,\n  port: Resource.MyPostgres.port,\n  user: Resource.MyPostgres.username,\n  password: Resource.MyPostgres.password,\n  database: Resource.MyPostgres.database,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Hono Service with Redis in SST\nDESCRIPTION: Sets up a Hono API as a Fargate service in ECS, linked to Redis. It configures the service with a load balancer and dev settings.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Redis Cluster to SST Container Configuration\nDESCRIPTION: Adds an Amazon ElastiCache Redis cluster to the SST configuration, linking it to the same VPC as the ECS cluster for the Nuxt app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n```\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  // ...\n  link: [redis],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for Streaming RSC\nDESCRIPTION: This snippet demonstrates how to configure Next.js for streaming React Server Components (RSC) using SST. It includes the necessary configuration for OpenNext to enable streaming.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  default: {\n    override: {\n      wrapper: \"aws-lambda-streaming\"\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC with SST Vpc Component\nDESCRIPTION: This code snippet shows how to create a VPC using SST's Vpc component. It includes options for adding a bastion host and a managed NAT gateway.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/container-support.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Vpc(\"MyVpc\", { bastion: true, nat: \"managed\" });\n```\n\n----------------------------------------\n\nTITLE: Linking R2 Bucket to Worker in sst.config.ts (TypeScript)\nDESCRIPTION: Updates the Cloudflare Worker definition in `sst.config.ts` to link the previously defined R2 bucket (`bucket`). The `link: [bucket]` property makes the bucket accessible within the Worker code via SST's Resource binding feature, allowing the Hono application to interact with the bucket.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst hono = new sst.cloudflare.Worker(\"Hono\", {\n  url: true,\n  link: [bucket],\n  handler: \"index.ts\",\n});\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in Cloudflare Worker\nDESCRIPTION: Implements logic for downloading the most recently uploaded file when a GET request is made. It retrieves the file from the R2 bucket based on the stored metadata.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nif (req.method == \"GET\") {\n  const first = await Resource.MyBucket.list().then(\n    (res) =>\n      res.objects.toSorted(\n        (a, b) => a.uploaded.getTime() - b.uploaded.getTime(),\n      )[0],\n  );\n  const result = await Resource.MyBucket.get(first.key);\n  return new Response(result.body, {\n    headers: {\n      \"content-type\": result.httpMetadata.contentType,\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying a tRPC Application on AWS\nDESCRIPTION: Deploys the configured SST project to AWS using the sst deploy command, preparing it for production use under a specified stage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads in Cloudflare Worker\nDESCRIPTION: Defines the logic for the Cloudflare Worker to upload files to the R2 bucket upon receiving a PUT request. It uses the SDK to generate a UUID for each file and save it with metadata.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  async fetch(req: Request) {\n    if (req.method == \"PUT\") {\n      const key = crypto.randomUUID();\n      await Resource.MyBucket.put(key, req.body, {\n        httpMetadata: {\n          contentType: req.headers.get(\"content-type\"),\n        },\n      });\n      return new Response(`Object created with key: ${key}`);\n    }\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Chat UI Component in React\nDESCRIPTION: This React component in TypeScript handles the chat UI, allowing users to publish messages to a specified topic. It manages state for messages and connection. Dependencies include mqtt and CSS styles.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport mqtt from \"mqtt\";\nimport { useState, useEffect } from \"react\";\nimport styles from \"./chat.module.css\";\n\nexport default function Chat(\n  { topic, endpoint, authorizer }: { topic: string, endpoint: string, authorizer: string }\n) {\n  const [messages, setMessages] = useState<string[]>([]);\n  const [connection, setConnection] = useState<mqtt.MqttClient | null>(null);\n\n  return (\n    <div className={styles.chat}>\n      {connection && messages.length > 0 &&\n        <div className={styles.messages}>\n          {messages.map((msg, i) => (\n            <div key={i}>{JSON.parse(msg).message}</div>\n          ))}\n        </div>\n      }\n      <form\n        className={styles.form}\n        onSubmit={async (e) => {\n          e.preventDefault();\n\n          const input = (e.target as HTMLFormElement).message;\n\n          connection!.publish(\n            topic,\n            JSON.stringify({ message: input.value }),\n            { qos: 1 }\n          );\n          input.value = \"\";\n        }}\n      >\n        <input\n          required\n          autoFocus\n          type=\"text\"\n          name=\"message\"\n          placeholder={\n            connection ? \"Ready! Say hello...\" : \"Connecting...\"\n          }\n        />\n        <button type=\"submit\" disabled={connection === null}>Send</button>\n      </form>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration in SST - TypeScript\nDESCRIPTION: This snippet imports the configuration file necessary for setting up and initializing SST with custom paths and settings. 'config.ts' serves as a centralized configuration file. No specific inputs or outputs; it alerts developers to central config references.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/enterprise.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from '../../../../config.ts';\n```\n\n----------------------------------------\n\nTITLE: SST Configuration for S3 Presigned URL Go Lambda\nDESCRIPTION: SST configuration for a Go Lambda function that generates S3 presigned URLs. Links the Lambda function to an S3 bucket and exposes it via API Gateway.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"Bucket\");\n\nconst api = new sst.aws.ApiGatewayV2(\"Api\");\n\napi.route(\"GET /upload-url\", {\n  handler: \"src/\",\n  runtime: \"go\",\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Add Postgres Database in SST Config\nDESCRIPTION: Configures an Amazon RDS PostgreSQL database in the `sst.config.ts` file with VPC and proxy settings. Enables connection from serverless applications and local machines.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true, nat: \"ec2\" });\n  const rds = new sst.aws.Postgres(\"MyPostgres\", { vpc, proxy: true });\n},\n```\n\n----------------------------------------\n\nTITLE: Linking Multiple Secrets in SST Configuration\nDESCRIPTION: This snippet demonstrates a pattern for managing and linking multiple secrets in an SST configuration. It creates an object with all secrets and links them to resources at once.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_120\n\nLANGUAGE: typescript\nCODE:\n```\n// Manage all secrets together\nconst secrets = {\n  secret1: new sst.Secret(\"Secret1\", \"some-secret-value-1\"),\n  secret2: new sst.Secret(\"Secret2\", \"some-secret-value-2\"),\n};\nconst allSecrets = Object.values(secrets);\n\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nconst api = new sst.aws.Function(\"MyApi\", {\n  link: [bucket, ...allSecrets],\n  handler: \"index.handler\",\n  url: true,\n});\n\nreturn {\n  url: api.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Service in SST (Container)\nDESCRIPTION: Shows how to set up a containerized service with a load balancer in SST using AWS components.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Conditional AWS Profiles in SST Config\nDESCRIPTION: This snippet shows how to configure the sst.config.ts file to use different AWS profiles based on the deployment stage. It conditionally selects 'acme-production' profile for production deployments and 'acme-dev' for all other environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/aws-accounts.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default $config({\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      home: \"aws\",\n      providers: {\n        aws: {\n          profile: input.stage === \"production\" ? \"acme-production\" : \"acme-dev\"\n        }\n      }\n    };\n  },\n  async run() {\n    // Your resources\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Stringifying JSON from Output Objects with .apply - SST TypeScript\nDESCRIPTION: Shows the use of .apply to stringify Output<object> values, producing an Output<string>. This approach enables serialization of asynchronously-resolved objects, such as policies, within an SST stack.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst policy = policyObj.apply((policy) =>\n  JSON.stringify(policy)\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC with Bastion Host - TypeScript\nDESCRIPTION: This code snippet is for configuring a VPC using SST with a bastion host enabled. The 'bastion: true' option is included, allowing for secure access when creating a VPC. This setup is necessary for enabling a local development environment to connect with VPC resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/live.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew sst.aws.Vpc(\"MyVpc\", { bastion: true });\n```\n\n----------------------------------------\n\nTITLE: SQS Queue Subscription Setup\nDESCRIPTION: Configuration for creating and subscribing to SQS queues in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_94\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new sst.aws.Queue(\"MyQueue\");\nqueue.subscribe(\"subscriber.handler\");\n\nconst app = new sst.aws.Function(\"MyApp\", {\n  handler: \"publisher.handler\",\n  link: [queue],\n  url: true,\n});\n\nreturn {\n  app: app.url,\n  queue: queue.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Running FFmpeg in Lambda via Child Process\nDESCRIPTION: Code for running FFmpeg in a Lambda function by spawning a child process. The ffmpeg binary path is provided by the ffmpeg-static package.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nspawnSync(ffmpeg, ffmpegParams, { stdio: \"pipe\" });\n```\n\n----------------------------------------\n\nTITLE: Refactored Function Stack with Cross-Stack References (TypeScript)\nDESCRIPTION: This code demonstrates a refactored function stack that references the queue stack and sets up the consumer function. It shows how to structure dependencies to avoid deployment issues.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nfunction FnStack() {\n  const q = use(QStack);\n\n  const fn = new Function({\n    environment: {\n      q: q.url,\n    },\n  });\n\n  q.consumer = new Function({\n    environment: {\n      fn: fn.url,\n    }\n  });\n\n  return fn;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAuth Client in Next.js - TypeScript\nDESCRIPTION: Sets up the OpenAuth client in 'app/auth.ts', linking it dynamically to the deployed server URL using SST's resource metadata. It creates cookies for storing access and refresh tokens securely using Next.js cookies API. Requires '@openauthjs/openauth/client', 'sst', and Next.js 13+ app directory conventions. Expects token values as input, stores them as HTTP-only cookies. Used by subsequent authentication-related functions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \\\"sst\\\";\\nimport { createClient } from \\\"@openauthjs/openauth/client\\\";\\nimport { cookies as getCookies } from \\\"next/headers\\\";\\n\\nexport const client = createClient({\\n  clientID: \\\"nextjs\\\",\\n  issuer: Resource.MyAuth.url,\\n});\\n\\nexport async function setTokens(access: string, refresh: string) {\\n  const cookies = await getCookies();\\n\\n  cookies.set({\\n    name: \\\"access_token\\\",\\n    value: access,\\n    httpOnly: true,\\n    sameSite: \\\"lax\\\",\\n    path: \\\"/\\\",\\n    maxAge: 34560000,\\n  });\\n  cookies.set({\\n    name: \\\"refresh_token\\\",\\n    value: refresh,\\n    httpOnly: true,\\n    sameSite: \\\"lax\\\",\\n    path: \\\"/\\\",\\n    maxAge: 34560000,\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cloudflare DNS Adapter in SST\nDESCRIPTION: This snippet shows how to use the Cloudflare DNS adapter to set up a custom domain in SST, assuming the required environment variables are configured.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/custom-domains.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.cloudflare.dns()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing AWS Cluster Services through API Gateway with VPC Link\nDESCRIPTION: Demonstrates how to expose an ECS service via API Gateway HTTP API using a VPC link instead of a load balancer. This approach can be more cost-effective for low-traffic services as API Gateway charges per request.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst service = new sst.aws.Service(\"MyService\", {\n  cluster,\n  serviceRegistry: {\n    port: 80,\n  },\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nvpc: {\n  az: [\"eu-west-3a\", \"eu-west-3c\"]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", {\n  // Pick at least two AZs that support VPC link\n  // az: [\"eu-west-3a\", \"eu-west-3c\"],\n});\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nconst service = new sst.aws.Service(\"MyService\", {\n  cluster,\n  serviceRegistry: {\n    port: 80,\n  },\n});\n\nconst api = new sst.aws.ApiGatewayV2(\"MyApi\", { vpc });\napi.routePrivate(\"$default\", service.nodes.cloudmapService.arn);\n```\n\n----------------------------------------\n\nTITLE: Adding an S3 Bucket AWS Resource to SST Configuration (TypeScript)\nDESCRIPTION: Adds a new S3 bucket resource within sst.config.ts, enabling later linkage to the Fargate container for file uploads. Requires SST library imported as sst and correct placement after the VPC definition inside the SST configuration file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\\\"MyBucket\\\");\n```\n\n----------------------------------------\n\nTITLE: Creating a Stage-Specific .env File for SST\nDESCRIPTION: Create a stage-specific environment file (.env.dev) that will be loaded when deploying to that specific stage, overriding variables from the default .env file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nSOME_ENV_VAR=BAR\n```\n\n----------------------------------------\n\nTITLE: Dynamically Importing Infrastructure Modules in sst.config.ts (TypeScript)\nDESCRIPTION: Illustrates an asynchronous function for importing and initializing multiple infrastructure modules at runtime. The function accesses resources (like storage.bucket) and returns their properties as deployment outputs. Requires all referenced modules to be correctly defined and exported.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nasync run() {\n  const storage = await import(\"./infra/storage\");\n  await import(\"./infra/api\");\n\n  return {\n    MyBucket: storage.bucket.name\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS Provider for Multi-Region Deployment\nDESCRIPTION: Creates an AWS provider pointing to a specific region (us-west-2) to enable multi-region deployment of SST resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_81\n\nLANGUAGE: typescript\nCODE:\n```\nconst provider = new aws.Provider(\"MyProvider\", { region: \"us-west-2\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Task Cron Job in SST\nDESCRIPTION: This snippet demonstrates how to set up a cron job using SST's Cron component to run a task every 2 minutes. It also shows how to configure the task for local development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_112\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Cron(\"MyCron\", {\n  task,\n  schedule: \"rate(2 minutes)\"\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndev: {\n  command: \"node index.mjs\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying the Application to Production using SST (Bash)\nDESCRIPTION: This command deploys the entire application (TanStack Start frontend and associated AWS resources like the S3 bucket defined in `sst.config.ts`) to AWS using the Serverless Stack Toolkit (SST). The `--stage production` flag specifies the deployment stage name, allowing for environment separation (e.g., dev, staging, production).\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Running a Task from a Lambda Function in SST v3\nDESCRIPTION: Demonstrates how to use the Task SDK to run a task from within a Lambda function in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/tasks-in-v3.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { task } from \"sst/aws/task\";\n\nconst runRet = await task.run(Resource.MyTask);\nconst taskArn = runRet.tasks[0].taskArn;\n```\n\n----------------------------------------\n\nTITLE: Implementing Hit Counter Display in Nuxt App\nDESCRIPTION: Sets up a Nuxt component to fetch and display the current hit counter stored in Redis, incrementing on each page refresh.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_14\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nconst { data: counter } = await useFetch(\"/api/counter\")\n</script>\n\n<template>\n  <p>Hit counter: {{ counter }}</p>\n</template>\n```\n\n----------------------------------------\n\nTITLE: IAM Permissions for Live Lambda Development\nDESCRIPTION: IAM policy that grants permissions for SST's Live Lambda development feature. These permissions allow the CLI to connect to AWS IoT for real-time function invocation and feedback during development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/iam-credentials.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"LiveLambdaSocketConnection\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"iot:DescribeEndpoint\",\n    \"iot:Connect\",\n    \"iot:Subscribe\",\n    \"iot:Publish\",\n    \"iot:Receive\"\n  ],\n  \"Resource\": [\n    \"*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Public Access S3 Bucket in sst.config.ts\nDESCRIPTION: Configures a new S3 bucket with public access permissions in the SST configuration file. The bucket is intended for file uploads in a Nuxt app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SolidStart Project with npm\nDESCRIPTION: This code initializes a new SolidStart application with npm, creating a project named `aws-solid-start`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init solid@latest aws-solid-start\ncd aws-solid-start\n```\n\n----------------------------------------\n\nTITLE: Adding Public Access S3 Bucket in JavaScript\nDESCRIPTION: This JavaScript code block creates an S3 Bucket with public access using SST, and is intended for enabling file uploads to the bucket in the React Router app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Subscribing External Lambda ARN to an SST Queue in TypeScript (sst.config.ts)\nDESCRIPTION: Shows how to add a subscriber to an SST-managed queue (`sst.aws.Queue`). Instead of defining a new function, it uses the `subscribe` method on the queue instance, passing the ARN of a pre-existing, externally managed Lambda function as the subscriber.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst queue = new sst.aws.Queue(\"MyQueue\");\n\nqueue.subscribe(\"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n```\n\n----------------------------------------\n\nTITLE: Containerized Nuxt App Configuration with ECS and Fargate\nDESCRIPTION: Configures an SST setup to run a containerized Nuxt app using AWS ECS Fargate. The configuration creates a VPC, an ECS Cluster, and a Fargate service for the application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n    },\n    dev: {\n      command: \"npm run dev\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Stage-Based Configuration in SST Config\nDESCRIPTION: Configure environment-specific values directly in the SST configuration file based on the current stage, eliminating the need for different .env files per environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst SENTRY_DSN = $app.stage !== \"prod\"\n   ? \"https://foo@sentry.io/bar\"\n   : \"https://baz@sentry.io/qux\";\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form Component in Svelte (Container)\nDESCRIPTION: Provides the Svelte code for the `src/routes/+page.svelte` component in the container example. It includes a script section to handle form submission (fetching a pre-signed URL from `data` and performing a PUT request with the file) and a template section with an HTML form. Basic CSS styling is also included. This is identical to the Serverless example's form.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_18\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n  /** @type {import('./$types').PageData} */\n  export let data;\n\n  const handleSubmit = async (e) => {\n    const formData = new FormData(e.target);\n    const file = formData.get(\"file\");\n\n    const image = await fetch(data.url, {\n      body: file,\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": file.type,\n        \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n      },\n    });\n\n    window.location.href = image.url.split(\"?\")[0];\n  };\n</script>\n\n<section>\n  <form on:submit|preventDefault={handleSubmit}>\n    <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n    <button type=\"submit\">Upload</button>\n  </form>\n</section>\n```\n\nLANGUAGE: css\nCODE:\n```\n<style>\n  section {\n    flex: 0.6;\n    display: flex;\n    padding-top: 4rem;\n    align-items: center;\n    flex-direction: column;\n    justify-content: center;\n  }\n</style>\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Pre-Signed URL in Astro Page - Astro (with JavaScript)\nDESCRIPTION: Executes JavaScript in an Astro page to generate a pre-signed URL using AWS SDK v3 clients. Requires installed dependencies: '@aws-sdk/client-s3', '@aws-sdk/s3-request-presigner', and Astro's 'Resource'. Key parameters are unique object key and S3 bucket name. Outputs an authenticated URL for direct S3 uploads.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_8\n\nLANGUAGE: astro\nCODE:\n```\n---\\nimport { Resource } from \\\"sst\\\";\\nimport { getSignedUrl } from \\\"@aws-sdk/s3-request-presigner\\\";\\nimport { S3Client, PutObjectCommand } from \\\"@aws-sdk/client-s3\\\";\\n\\nconst command = new PutObjectCommand({\\n  Key: crypto.randomUUID(),\\n  Bucket: Resource.MyBucket.name,\\n});\\nconst url = await getSignedUrl(new S3Client({}), command);\\n---\n```\n\n----------------------------------------\n\nTITLE: Remix File Upload Form Component for Container App - TypeScript React\nDESCRIPTION: Implements a file upload form identical to the serverless example but intended for use within the Remix app deployed as a container via SST. Uses useLoaderData to consume loader output for the upload S3 URL, and triggers a file upload PUT request. Used in app/routes/_index.tsx.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Index() {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center gap-8\">\n        <h1 className=\"leading text-2xl font-bold text-gray-800 dark:text-gray-100\">\n          Welcome to Remix\n        </h1>\n        <form\n          className=\"flex flex-row gap-4\"\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n            const image = await fetch(data.url, {\n              body: file,\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": file.type,\n                \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n              },\n            });\n\n            window.location.href = image.url.split(\"?\")[0];\n          }}\n        >\n          <input\n            name=\"file\"\n            type=\"file\"\n            accept=\"image/png, image/jpeg\"\n            className=\"block w-full text-sm text-slate-500\n              file:mr-4 file:py-2 file:px-4\n              file:rounded-full file:border-0\n              file:text-sm file:font-semibold\n              file:bg-violet-50 file:text-violet-700\n              hover:file:bg-violet-100\" />\n          <button className=\"bg-violet-500 hover:bg-violet-700 text-white text-sm\n            font-semibold py-2 px-4 rounded-full\">\n            Upload\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Secrets in SST with the Secret Component\nDESCRIPTION: Create and link a secret to a Next.js application using SST's Secret component. This provides a secure way to manage sensitive information without storing it in environment files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst secret = new sst.Secret(\"MySecret\");\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [secret]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Cluster with Fargate Spot Capacity in SST\nDESCRIPTION: Sets up an AWS Fargate cluster that uses spot instances for non-production environments, helping to reduce costs. The example demonstrates how to conditionally configure capacity types based on deployment stage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  capacity: $app.stage === \"production\" ? undefined : \"spot\",\n});\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Bucket to SST Configuration\nDESCRIPTION: Adds an S3 Bucket to the SST configuration for file uploads and links it to the Fargate service.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Service(\"MyService\", {\n  // ...\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Express Service with Redis in SST\nDESCRIPTION: SST configuration that shows how to link an Express service with Redis. The service is deployed as a Fargate service to ECS with Redis access.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  dev: {\n    command: \"node --watch index.mjs\",\n  },\n  link: [redis],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SurrealDB with EFS in SST\nDESCRIPTION: Configuration for running SurrealDB in a container with EFS for storage. The SurrealDB server is hosted in an AWS Service container with data persisted in EFS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nconst server = new sst.aws.Service(\"MyService\", {\n  cluster,\n  architecture: \"arm64\",\n  image: \"surrealdb/surrealdb:v2.0.2\",\n  // ...\n  volumes: [\n    { efs, path: \"/data\" },\n  ],\n});\n```\n\n----------------------------------------\n\nTITLE: Outputting Bucket Name in SST Config\nDESCRIPTION: Shows how to output the bucket name in the SST configuration file. This is useful for retrieving the auto-generated bucket name, which can be used when sharing the bucket across stages.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/share-across-stages.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n  bucket: bucket.name\n};\n```\n\n----------------------------------------\n\nTITLE: Defining a Public S3 Bucket in SST Config - JavaScript\nDESCRIPTION: Creates a new S3 bucket with public access using SST's infrastructure-as-code API. Depends on SST AWS constructs. Key parameter: 'access', set to 'public', making files in the bucket accessible to anyone.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\\\"MyBucket\\\", {\\n  access: \\\"public\\\"\\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Streaming Lambda Function in SST\nDESCRIPTION: Sets up a streaming Lambda function with a Function URL and extended timeout.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\nconst hono = new sst.aws.Function(\"Hono\", {\n  url: true,\n  streaming: true,\n  timeout: \"15 minutes\",\n  handler: \"index.handler\",\n});\nreturn {\n  api: hono.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Using SST Go SDK to Access Linked Resources\nDESCRIPTION: This snippet shows how to use the new SST Go SDK to access linked resources in Go functions or container applications. It demonstrates importing the SDK and retrieving a resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/go-runtime-support.mdx#2025-04-22_snippet_1\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/sst/sst/v3/sdk/golang/resource\"\n)\n\nresource.Get(\"MyBucket\", \"name\")\n```\n\n----------------------------------------\n\nTITLE: Defining Fargate Service in SST Config (Container)\nDESCRIPTION: Defines the necessary AWS infrastructure for a containerized deployment in `sst.config.ts`. It creates a VPC, an ECS Cluster, and an ECS Fargate Service (`sst.aws.Service`). The service is configured with a load balancer listening on port 80 and forwarding to the container's port 3000. The `dev.command` specifies how to run the app locally during `sst dev`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n    },\n    dev: {\n      command: \"npm run dev\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SST Provider Command\nDESCRIPTION: Command syntax for installing an SST provider. Use this command followed by the provider name to add a new provider to your SST project. For example, 'sst add auth0' to add Auth0 support.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/all-providers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsst add <provider>\n```\n\n----------------------------------------\n\nTITLE: Linking Next.js App to Postgres Database in SST Config\nDESCRIPTION: This snippet shows how to link a Next.js application to a Postgres database using SST's configuration. It creates an RDS instance and links it to the Next.js app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\nconst rds = new sst.aws.Postgres(\"MyPostgres\", { vpc, proxy: true });\n\nnew sst.aws.Nextjs(\"MyWeb\", {\n  vpc,\n  link: [rds]\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an S3 Bucket in SST Config (Serverless)\nDESCRIPTION: Defines an S3 bucket resource named 'MyBucket' within the `sst.config.ts` file using SST's AWS constructs. The `access: \"public\"` property configures the bucket for public read access, suitable for hosting uploaded files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Lambda Function in SST\nDESCRIPTION: TypeScript configuration for deploying a Python function to AWS Lambda with SST. Sets up a function with Python 3.11 runtime and URL endpoint.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-fastapi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst python = new sst.aws.Function(\"MyPythonFunction\", {\n  handler: \"functions/src/functions/api.handler\",\n  runtime: \"python3.11\",\n  url: true\n});\n```\n\n----------------------------------------\n\nTITLE: Updating SST Component Import Configuration with Args (TypeScript)\nDESCRIPTION: Demonstrates updating the SST `Bucket` component's `transform` function based on the feedback from the deployment error. It sets specific `args` properties (`args.bucket`, `args.forceDestroy`) to match the configuration of the existing S3 bucket, alongside the `opts.import` instruction.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Bucket(\"MyBucket\", {\n  transform: {\n    bucket: (args, opts) => {\n      args.bucket = \"mybucket-xnbmhcvd\";\n      args.forceDestroy = undefined;\n\n      opts.import = \"mybucket-xnbmhcvd\";\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating tRPC Server with Context and Router\nDESCRIPTION: Defines a tRPC server with a router and a 'greet' query procedure. Dependencies include zod and @trpc/server packages. The setup processes requests and generates responses based on the input name.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst t = initTRPC.context().create();\n\nconst router = t.router({\n  greet: t.procedure\n    .input(z.object({ name: z.string() }))\n    .query(({ input }) => {\n      return `Hello ${input.name}!`;\n    }),\n});\n\nexport type Router = typeof router;\n\nexport default {\n  async fetch(request: Request): Promise<Response> {\n    return fetchRequestHandler({\n      router,\n      req: request,\n      endpoint: \"/\",\n      createContext: (opts) => opts,\n    });\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a File Upload Form Component (TSX)\nDESCRIPTION: This TSX code defines a React functional component named `Form`. It renders an HTML form with a file input and a submit button. On submission, it prevents the default form action, retrieves the selected file, and uses the `fetch` API to upload the file via PUT request to a pre-signed URL passed as the `url` prop. After a successful upload, it redirects the user to the uploaded file's URL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport './Form.css'\n\nexport default function Form({ url }: { url: string }) {\n  return (\n    <form\n      className='form'\n      onSubmit={async (e) => {\n        e.preventDefault()\n\n        const file = (e.target as HTMLFormElement).file.files?.[0] ?? null\n\n        const image = await fetch(url, {\n          body: file,\n          method: 'PUT',\n          headers: {\n            'Content-Type': file.type,\n            'Content-Disposition': `attachment filename='${file.name}'`,\n          },\n        })\n\n        window.location.href = image.url.split('?')[0]\n      }}\n    >\n      <input name='file' type='file' accept='image/png, image/jpeg' />\n      <button type='submit'>Upload</button>\n    </form>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting a Task to a Cron Job in SST v3\nDESCRIPTION: Shows how to connect a Task to a Cron component in SST v3, enabling scheduled task execution.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/tasks-in-v3.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Cron(\"MyCronJob\", {\n  task,\n  schedule: \"rate(1 day)\",\n});\n```\n\n----------------------------------------\n\nTITLE: Modifying Astro Config for SST Adapter - JavaScript\nDESCRIPTION: Shows the required changes for 'astro.config.mjs' to integrate the SST AWS adapter. Requires the 'astro-sst' package. Modifies output and adds the AWS adapter, enabling server-side deployment targeting AWS Lambda or similar serverless services.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n+ import aws from \\\"astro-sst\\\";\\n\\nexport default defineConfig({\\n+  output: \\\"server\\\",\\n+  adapter: aws()\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Lambda Stream Package for Local Testing\nDESCRIPTION: Installs the lambda-stream package to enable local testing of Lambda streaming since SST dev doesn't support streaming natively.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_73\n\nLANGUAGE: bash\nCODE:\n```\nnpm install lambda-stream\n```\n\n----------------------------------------\n\nTITLE: Invoking a Job in SST\nDESCRIPTION: This snippet demonstrates how to invoke a Job in SST. It uses the Job.run method to start the job with a typesafe payload.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/long-running-jobs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Job } from \"@serverless-stack/node/job\";\n\nfunction someFunction() {\n  await Job.run(\"MyJob\", {\n    payload: {\n      foo: \"Hello World\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SST v3 Application in TypeScript\nDESCRIPTION: Demonstrates the new structure of the SST config file in v3, showing how to define the app's configuration and resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/sst-v3.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default $config({\n  // Your app's config\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      home: \"aws\"\n    };\n  },\n  // Your app's resources\n  async run() { }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Route 53 Domain with Hosted Zone in SST\nDESCRIPTION: This snippet illustrates how to configure a custom domain using AWS Route 53 with a specific hosted zone ID in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/custom-domains.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.aws.dns({\n      zone: \"Z2FDTNDATAQYW2\"\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Next.js\nDESCRIPTION: Access environment variables that have been passed to a Next.js application from the SST configuration within a React component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function Home() {\n  return <p>Hello {process.env.SOME_ENV_VAR}</p>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lambda Function with S3 Bucket Link\nDESCRIPTION: Defines an AWS Lambda function with a public URL and links it to the S3 bucket. This function will generate pre-signed URLs for direct file uploads to S3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst pre = new sst.aws.Function(\"MyFunction\", {\n  url: true,\n  link: [bucket],\n  handler: \"functions/presigned.handler\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Angular File Upload Component\nDESCRIPTION: Implements a standalone Angular component for file uploads that uses the pre-signed URL from the API to upload files directly to S3. Includes HTTP client injection and form handling.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'app-file-upload',\n  standalone: true,\n  imports: [FormsModule],\n  template: `\n    <form (ngSubmit)=\"onSubmit($event)\">\n      <input type=\"file\" name=\"file\">\n      <button type=\"submit\">Upload</button>\n    </form>\n  `,\n})\nexport class FileUploadComponent {\n  private http = inject(HttpClient);\n\n  presignedApi = import.meta.env['NG_APP_PRESIGNED_API'];\n\n  async onSubmit(event: Event): Promise<void> {\n    const file = (event.target as HTMLFormElement)['file'].files?.[0]!;\n\n    this.http.get(this.presignedApi, { responseType: 'text' }).subscribe({\n      next: async (url: string) => {\n        const image = await fetch(url, {\n          body: file,\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type,\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n          },\n        });\n\n        window.location.href = image.url.split(\"?\")[0];\n      },\n    });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Routing with Unresolved Output in Router - SST TypeScript\nDESCRIPTION: Demonstrates setting up an SST Router that uses an Output<string> (the unresolved function URL) as a route target. This establishes a dependency chain: the router waits for the function's deployment. Route definitions use the unresolved URL as the handler, enabling resource concurrency. Requires the previously defined 'myFunction'; input is the route map, output is a new router resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/api\": myFunction.url\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Node.js App\nDESCRIPTION: This snippet initializes SST within an existing Node.js application. It installs necessary dependencies and creates an SST configuration file in the project. Prerequisites include a Node.js environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to React Router App\nDESCRIPTION: This snippet links the previously created S3 Bucket to the React Router application using SST. The bucket is linked via the 'link' property within the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew sst.aws.React(\"MyWeb\", {\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Fargate vs Spot Capacity Weights in SST\nDESCRIPTION: This code snippet shows how to configure the percentage of regular Fargate vs Spot capacity for a service using the 'capacity' prop. It sets equal weights for both Fargate and Spot capacity.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/container-spot-capacity.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncapacity: {\n  fargate: { weight: 1 },\n  spot: { weight: 1 }\n}\n```\n\n----------------------------------------\n\nTITLE: Implement Lambda API with Database Connection\nDESCRIPTION: Defines a Lambda function acting as an API in the `sst.config.ts`, linking it to the RDS instance to enable database querying via HTTP.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyApi\", {\n  vpc,\n  url: true,\n  link: [rds],\n  handler: \"src/api.handler\",\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a New SST v3 App\nDESCRIPTION: Initializes a new SST v3 app in the project root. Requires SST CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Bash\nCODE:\n```\nnpx sst init\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket with ECS Service in SST (TypeScript)\nDESCRIPTION: Extends the configuration for the ECS service by providing a \"link\" property containing the bucket reference. This makes the bucket resource accessible to the containerized Express app. Should be used in conjunction with the bucket previously defined.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\\\"MyService\\\", {\\n  // ...\\n  link: [bucket],\\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Deno\nDESCRIPTION: Adds functionality to handle POST requests for file uploads to the S3 bucket using AWS SDK.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nif (url.pathname === \"/\" && req.method === \"POST\") {\n  const formData: FormData = await req.formData();\n  const file: File | null = formData?.get(\"file\") as File;\n\n  const params = {\n    Bucket: Resource.MyBucket.name,\n    ContentType: file.type,\n    Key: file.name,\n    Body: file,\n  };\n  const upload = new Upload({\n    params,\n    client: s3,\n  });\n  await upload.done();\n\n  return new Response(\"File uploaded successfully.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AWS S3 BucketV2 Component using Provider Namespace (TypeScript)\nDESCRIPTION: Demonstrates creating a new AWS S3 bucket component using the aws provider namespace in application code (likely in sst.config.ts). The snippet instantiates a BucketV2 resource with a bucket name and tags, leveraging the provider's component models. Requires AWS provider to be declared in configuration and available in the global namespace.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nnew aws.s3.BucketV2(\"b\", {\n  bucket: \"mybucket\",\n  tags: {\n    Name: \"My bucket\"\n  }\n});\n\n```\n\n----------------------------------------\n\nTITLE: Concatenating Outputs with $concat Helper - SST TypeScript\nDESCRIPTION: Illustrates usage of the global $concat helper to join Output<string> values and literals efficiently. This function handles output resolution and concatenation internally, simplifying output manipulation. Requires outputs or strings as variadic parameters, returns a concatenated Output.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUrl = $concat(myFunction.url, \"/foo\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Cloud Infrastructure with Ion\nDESCRIPTION: Example configuration showing how to set up a full-stack application using Ion with AWS, OpenAI, and Cloudflare services. Demonstrates resource creation and linking across multiple cloud providers using type-safe configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = new aws.dynamodb.Table(\"Movies\");\n\nconst bucket = new sst.Bucket(\"Assets\");\n\nconst vector = new sst.Vector(\"Vector\", {\n  openAiApiKey: new sst.Secret(\"OpenAiApiKey\").value,\n});\n\nconst site = new sst.Nextjs(\"Web\", {\n  link: [db, bucket, vector],\n});\n\nnew cloudflare.cdn(\"Cdn\", {\n  domain: \"movies.sst.dev\",\n  route: {\n    \"/\": site.url,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for SvelteKit Applications\nDESCRIPTION: A Dockerfile that builds a SvelteKit application in a multi-stage build process. It first creates a builder stage to install dependencies and build the app, then creates a deployer stage that copies the built application and runs it in production mode on port 3000.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_21\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18.18.0-alpine AS builder\n\nWORKDIR /app\nCOPY package*.json .\nRUN npm install\nCOPY . .\nRUN npm run build\nRUN npm prune --prod\n\nFROM builder AS deployer\n\nWORKDIR /app\nCOPY --from=builder /app/build build/\nCOPY --from=builder /app/package.json .\nEXPOSE 3000\nENV NODE_ENV=production\nCMD [ \"node\", \"build\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS CLI for SSO\nDESCRIPTION: This snippet shows how to configure the AWS CLI to use SSO for authentication. It includes setting up the SSO session and profiles for dev and production environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/aws-accounts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[sso-session acme]\nsso_start_url = https://acme.awsapps.com/start\nsso_region = us-east-1\n\n[profile acme-dev]\nsso_session = acme\nsso_account_id = <account-id>\nsso_role_name = AdministratorAccess\nregion = us-east-1\n\n[profile acme-production]\nsso_session = acme\nsso_account_id = <account-id>\nsso_role_name = AdministratorAccess\nregion = us-east-1\n```\n\n----------------------------------------\n\nTITLE: Transforming Component Configuration in SST\nDESCRIPTION: These snippets demonstrate how to use the transform prop to modify the underlying resources of a component, specifically a Function component's role.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  transform: {\n    role: {\n      name: \"MyRole\"\n    }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  transform: {\n    role: (args, opts) => {\n      args.name = `${args.name}-MyRole`;\n      opts.retainOnDelete = true;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-Signed URL for File Uploads\nDESCRIPTION: This TSX snippet generates a pre-signed URL that allows for secure file uploads to the S3 Bucket. It includes setting up the 'loader' function and necessary imports to accomplish this operation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport async function loader() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\n----------------------------------------\n\nTITLE: Using an Added Provider Resource in SST Config (TypeScript)\nDESCRIPTION: Demonstrates how to instantiate a resource from an externally added provider (Stripe in this case) within the `run` function of the `sst.config.ts` file. After a provider is added using `sst add`, its resources (like `stripe.Product`) become globally available and can be used directly without manual imports. This example creates a Stripe Product resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/all-providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default $config({\n  // ...\n  async run() {\n    new stripe.Product(\"MyStripeProduct\", {\n      name: \"SST Paid Plan\",\n      description: \"This is how SST makes money\",\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Import for Pulumi S3 Bucket Resource (TypeScript)\nDESCRIPTION: Shows the initial setup for importing an existing S3 bucket using a low-level Pulumi resource (`aws.s3.BucketV2`) within an SST app. The `import` option is passed in the third argument (resource options) with the name of the existing bucket. An example argument (`objectLockEnabled`) is included to demonstrate potential configuration mismatches.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nnew aws.s3.BucketV2(\"MyBucket\",\n  {\n    objectLockEnabled: undefined\n  },\n  {\n    import: \"mybucket-xnbmhcvd\"\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed URL for S3 in SolidStart\nDESCRIPTION: Defines an async function to generate pre-signed URLs for S3 uploads and export it as part of route configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync function presignedUrl() {\n  \"use server\";\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  return await getSignedUrl(new S3Client({}), command);\n}\n\nexport const route = {\n  load: () => presignedUrl(),\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Linkable Parameter in SST v3\nDESCRIPTION: Creates a Linkable parameter with properties in SST v3. This allows binding of values that can be accessed in functions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nconst secret = new sst.Linkable(\"MyParameter\", {\n  properties: { version: \"1.2.0\" }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Cluster and Service in SST v3\nDESCRIPTION: Sets up an ECS cluster with specific VPC settings and creates a service with load balancer configuration in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst cluster = new sst.aws.Cluster(\"MyCluster\", {\n  vpc: {\n    id: \"vpc-0d19d2b8ca2b268a1\",\n    securityGroups: [\"sg-0399348378a4c256c\"],\n    publicSubnets: [\"subnet-0b6a2b73896dc8c4c\", \"subnet-021389ebee680c2f0\"],\n    privateSubnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"]\n  }\n});\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    domain: \"my-app.com\",\n    ports: [\n      { listen: \"80/http\" }\n    ]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up S3 Bucket Topic Notifications with SNS\nDESCRIPTION: This example demonstrates how to create an S3 bucket and subscribe to its events using an SNS topic with SST. It shows the configuration of both the SNS topic and the bucket notifications.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst topic = new sst.aws.SnsTopic(\"MyTopic\");\ntopic.subscribe(\"MySubscriber\", \"subscriber.handler\");\n\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nbucket.notify({\n  notifications: [\n    {\n      name: \"MySubscriber\",\n      topic,\n      events: [\"s3:ObjectCreated:*\"],\n    },\n  ],\n});\n\nreturn {\n  bucket: bucket.name,\n  topic: topic.name,\n};\n```\n\n----------------------------------------\n\nTITLE: Linking an Aurora Resource to Lambda Using SST (TypeScript)\nDESCRIPTION: This snippet links a previously created Aurora MySQL database resource to a Lambda function using SST, specifying handler, link, url exposure, and VPC. Ensures the handler has access to the Aurora's credentials and endpoint. Must be placed after both database and VPC definitions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew sst.aws.Function(\"MyApp\", {\n  handler: \"index.handler\",\n  link: [mysql],\n  url: true,\n  vpc,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Node.js Project\nDESCRIPTION: Initializes the SST project within the Node.js application, installing required SST dependencies. This setup is necessary for creating Lambda functions and managing infrastructure.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: SST Configuration for Go API with API Gateway V2\nDESCRIPTION: SST configuration for deploying a Go API with API Gateway V2. Sets up an API with a default route handler using Go runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new sst.aws.ApiGatewayV2(\"GoApi\");\n\napi.route(\"$default\", {\n  handler: \"src/\",\n  runtime: \"go\",\n});\n```\n\n----------------------------------------\n\nTITLE: Defining an SST Bucket Resource in Infrastructure (TypeScript)\nDESCRIPTION: Defines and exports an AWS S3 bucket resource using the SST library within an infrastructure definition file. The bucket is assigned the identifier 'MyBucket' and can be imported by other infrastructure modules. Requires SST, TypeScript, and proper credentials for deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nexport const bucket = new sst.aws.Bucket(\"MyBucket\");\n```\n\n----------------------------------------\n\nTITLE: Fetching AWS Account Identity (Async) via Provider Function (TypeScript)\nDESCRIPTION: Shows how to use an asynchronous provider function to retrieve AWS account identity information. The function aws.getCallerIdentity returns a promise with account details, which are then destructured and assigned to variables. Invoking this blocks further deployment until the promise resolves—useful for imperative config but not recommended for Outputs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst current = await aws.getCallerIdentity({});\n\nconst accountId = current.accountId;\nconst callerArn = current.arn;\nconst callerUser = current.userId;\n\n```\n\n----------------------------------------\n\nTITLE: Configuring EventBus with Rules and Targets in SST v2\nDESCRIPTION: Sets up an EventBus with rules and multiple targets in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nnew EventBus(stack, \"Bus\", {\n  rules: {\n    myRule: {\n      pattern: { source: [\"myevent\"] },\n      targets: {\n        myTarget1: \"src/function1.handler\",\n        myTarget2: \"src/function2.handler\"\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding SES Email Resource in SST Config - JavaScript\nDESCRIPTION: Defines an SST email resource backed by Amazon SES within `sst.config.ts`. The snippet shows how to instantiate the Email construct, providing the sender email address as a key parameter. SST and AWS credentials are required. This enables email sending capability in the SST application, and sender verification by SES will be necessary.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\\n  const email = new sst.aws.Email(\\\"MyEmail\\\", {\\n    sender: \\\"email@example.com\\\",\\n  });\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vector Search with OpenAI in SST\nDESCRIPTION: This snippet demonstrates how to set up a vector search component using SST, including configuration for OpenAI API key, vector database, and functions for seeding and searching.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_116\n\nLANGUAGE: typescript\nCODE:\n```\nconst OpenAiApiKey = new sst.Secret(\"OpenAiApiKey\");\nconst vector = new sst.aws.Vector(\"MyVectorDB\", {\n  dimension: 1536,\n});\n\nconst seeder = new sst.aws.Function(\"Seeder\", {\n  handler: \"index.seeder\",\n  link: [OpenAiApiKey, vector],\n  copyFiles: [\n    { from: \"iron-man.jpg\", to: \"iron-man.jpg\" },\n    {\n      from: \"black-widow.jpg\",\n      to: \"black-widow.jpg\",\n    },\n    {\n      from: \"spider-man.jpg\",\n      to: \"spider-man.jpg\",\n    },\n    { from: \"thor.jpg\", to: \"thor.jpg\" },\n    {\n      from: \"captain-america.jpg\",\n      to: \"captain-america.jpg\",\n    },\n  ],\n  url: true,\n});\n\nconst app = new sst.aws.Function(\"MyApp\", {\n  handler: \"index.app\",\n  link: [OpenAiApiKey, vector],\n  url: true,\n});\n\nreturn { seeder: seeder.url, app: app.url };\n```\n\n----------------------------------------\n\nTITLE: Implementing File Upload in Bun App\nDESCRIPTION: Adds functionality to handle POST requests for file uploads to the S3 bucket.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nif (url.pathname === \"/\" && req.method === \"POST\") {\n  const formData = await req.formData();\n  const file = formData.get(\"file\")! as File;\n  const params = {\n    Bucket: Resource.MyBucket.name,\n    ContentType: file.type,\n    Key: file.name,\n    Body: file,\n  };\n  const upload = new Upload({\n    params,\n    client: s3,\n  });\n  await upload.done();\n\n  return new Response(\"File uploaded successfully.\");\n}\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to SvelteKit App in SST Config (Serverless)\nDESCRIPTION: Updates the `sst.aws.SvelteKit` component definition in `sst.config.ts` to link the previously defined S3 bucket (`bucket`). This makes the bucket's details available to the SvelteKit application code via SST's resource binding.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Aurora Serverless v2 Scaling in SST\nDESCRIPTION: This snippet shows how to configure scaling options for an Aurora Serverless v2 database in SST. It sets minimum and maximum Aurora Capacity Units (ACUs) for the database.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/aurora-serverless-in-v3.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  scaling: {\n    min: \"2 ACU\",\n    max: \"128 ACU\"\n  },\n  vpc\n});\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Pre-signed URL in SvelteKit Server Route (Serverless)\nDESCRIPTION: Shows the TypeScript code for a SvelteKit server-side load function in `src/routes/+page.server.ts`. It uses the AWS SDK v3 (`@aws-sdk/client-s3` and `@aws-sdk/s3-request-presigner`) to generate a pre-signed PUT URL for uploading an object to the linked S3 bucket (`Resource.MyBucket.name`). The generated URL is returned to the page component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport async function load() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining an S3 Bucket in SST Config (Container)\nDESCRIPTION: Defines an S3 bucket resource named 'MyBucket' within the `sst.config.ts` file using SST's AWS constructs. The `access: \"public\"` property configures the bucket for public read access. This bucket will be used for file uploads in the containerized application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in SvelteKit Project (Serverless)\nDESCRIPTION: Initializes the SST framework within the existing SvelteKit project using `npx sst@latest init`. It then installs necessary npm dependencies. This command sets up the `sst.config.ts` file required for defining infrastructure.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring Home Provider in SST\nDESCRIPTION: This code snippet illustrates how to set the home provider in your SST configuration file. It specifies which cloud provider's services will be used for storing the application state. Supported providers currently include AWS and Cloudflare. The code also demonstrates setting up AWS as the home provider and linking it with the application's internal settings. Dependencies include the SST library, and the inputs and outputs follow the standard SST configuration format.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/state.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  home: \"aws\"\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  home: \"aws\",\n  providers: {\n    aws: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Current AWS Account Information\nDESCRIPTION: Uses AWS provider functions to get information about the current AWS account, including region and account ID.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nreturn {\n  region: aws.getRegionOutput().name,\n  account: aws.getCallerIdentityOutput({}).accountId,\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Subdomain for SST Nextjs Component\nDESCRIPTION: This example shows how to configure a custom subdomain for an SST Nextjs component using the 'domain' property in the configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/custom-domains.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"app.example.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Passing API URL to Angular Environment\nDESCRIPTION: Configures the StaticSite component to pass the Lambda function URL to the Angular application as an environment variable. This allows the app to access the pre-signed URL endpoint.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nenvironment: {\n  NG_APP_PRESIGNED_API: pre.url\n}\n```\n\n----------------------------------------\n\nTITLE: Multi-region Provider Example with Multiple Resources (TypeScript)\nDESCRIPTION: Provides an end-to-end example of creating a custom AWS provider (for 'us-east-1' region), deploying functions in the default region, and attaching a certificate resource to the new provider. This demonstrates using multiple provider instances to achieve cross-region infrastructure within SST, passing provider context explicitly to certain resource constructors. Prerequisites: knowledge of region-specific requirements and access rights.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst useast1 = new aws.Provider(\"useast1\", { region: \"us-east-1\" });\n\nnew sst.aws.Function(\"MyFunction, \"src/lambda.handler\");\n\nnew aws.acm.Certificate(\"cert\", {\n  domainName: \"foo.com\",\n  validationMethod: \"EMAIL\",\n}, { provider: useast1 });\n\n```\n\n----------------------------------------\n\nTITLE: Setting up API Gateway v1 in SST v3\nDESCRIPTION: Configures an API Gateway v1 with routes and deployment in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_50\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new sst.aws.ApiGatewayV1(\"MyApi\", {\n  domain: \"api.example.com\"\n});\n\napi.route(\"GET /\", \"src/get.handler\");\napi.route(\"POST /\", \"src/post.handler\");\napi.deploy();\n```\n\n----------------------------------------\n\nTITLE: Configuring Dockerfile for SST SolidStart Project\nDESCRIPTION: This Dockerfile sets up a production environment for a Node.js application. It uses a base image, sets environment variables, copies the build output, and specifies the command to run the server.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_22\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM base\n\nENV PORT=3000\nENV NODE_ENV=production\n\nCOPY --from=build /src/.output /src/.output\n\nCMD [ \"node\", \".output/server/index.mjs\" ]\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Adapter for Node (Container)\nDESCRIPTION: Shows the required modification in `svelte.config.mjs` to use the `@sveltejs/adapter-node` instead of the default adapter. This prepares the SvelteKit application for deployment as a Node.js service within a container.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n- import adapter from '@sveltejs/adapter-auto';\n+ import adapter from '@sveltejs/adapter-node';\n```\n\n----------------------------------------\n\nTITLE: Linking R2 Bucket to Cloudflare Worker\nDESCRIPTION: Modifies the worker configuration to include a link to the R2 bucket, enabling the worker to access the bucket for file operations. This is crucial to integrate the storage into the API functionality.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst worker = new sst.cloudflare.Worker(\"MyWorker\", {\n  handler: \"./index.ts\",\n  link: [bucket],\n  url: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Attaching SST Function to External SQS Queue via ARN in TypeScript (sst.config.ts)\nDESCRIPTION: Shows how to use the static `subscribe` method of the `sst.aws.Queue` component to attach a new Lambda function handler (defined by its path `src/subscriber.handler`) to an existing, externally managed SQS queue. The external queue is identified by its ARN. This allows attaching functionality without managing the queue itself within SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nsst.aws.Queue.subscribe(\"arn:aws:sqs:us-east-1:123456789012:MyQueue\", \"src/subscriber.handler\");\n```\n\n----------------------------------------\n\nTITLE: Installing SST Tunnel for Local VPC Access\nDESCRIPTION: Installs the SST tunnel which allows local development access to resources in a VPC. Requires sudo permissions to create the necessary network interface.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_78\n\nLANGUAGE: bash\nCODE:\n```\nsudo sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Define Database Schema with Drizzle\nDESCRIPTION: Sets up the Drizzle configuration file to specify PostgreSQL as the dialect and defines the schema location, allowing for database schema management.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  dialect: \"postgresql\",\n  schema: [\"./src/**/*.sql.ts\"],\n  out: \"./migrations\",\n  dbCredentials: {\n    host: Resource.MyPostgres.host,\n    port: Resource.MyPostgres.port,\n    user: Resource.MyPostgres.username,\n    password: Resource.MyPostgres.password,\n    database: Resource.MyPostgres.database,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel Domains in SST Router\nDESCRIPTION: Shows how to create an SST router that uses domains purchased and hosted through Vercel. Requires VERCEL_API_TOKEN and VERCEL_TEAM_ID environment variables to be set for authentication.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_122\n\nLANGUAGE: typescript\nCODE:\n```\nconst router = new sst.aws.Router(\"MyRouter\", {\n  domain: {\n    name: \"ion.sst.moe\",\n    dns: sst.vercel.dns({ domain: \"sst.moe\" }),\n  },\n  routes: {\n    \"/*\": \"https://sst.dev\",\n  },\n});\nreturn {\n  router: router.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Exporting Function with Environment Variable Checking - JavaScript\nDESCRIPTION: This code snippet exports a function that checks the 'SST_DEV' environment variable to determine whether the function should return 'Hello, Live!' or 'Hello, World!'. This is useful for distinguishing between live and production environments. It outputs a response body and a status code of 200.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/live.mdx#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nexport async function main(event) {\n  const body = process.env.SST_DEV ? \"Hello, Live!\" : \"Hello, World!\";\n\n  return {\n    body,\n    statusCode: 200,\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Database Host Determination Based on Environment - JavaScript\nDESCRIPTION: This code snippet sets the database host depending on the 'SST_DEV' environment variable. If 'SST_DEV' is true, the local database host is used; otherwise, a production database host is configured. This enables seamless switching between local and remote environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/live.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst dbHost = process.env.SST_DEV\n  ? \"localhost\"\n  : \"amazon-string.rds.amazonaws.com\";\n```\n\n----------------------------------------\n\nTITLE: Setting Up Deno with Redis in AWS ECS\nDESCRIPTION: Creates a hit counter application using Deno and Redis, deployed as a Fargate service in ECS. The example shows how to link a service to Redis, configure local development with tunneling, and deploy using a Dockerfile.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"8000/http\" }],\n  },\n  dev: {\n    command: \"deno task dev\",\n  },\n});\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo sst tunnel install\n```\n\nLANGUAGE: bash\nCODE:\n```\nsst dev\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\nconst redis = new sst.aws.Redis(\"MyRedis\", { vpc });\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"8000/http\" }],\n  },\n  dev: {\n    command: \"deno task dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: IAM Permissions for Managing SST Secrets\nDESCRIPTION: IAM policy that grants permissions to manage SST secrets through SSM Parameter Store. These permissions allow the CLI to create, retrieve, and delete parameters used for storing secrets.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/iam-credentials.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Sid\": \"ManageSecrets\",\n  \"Effect\": \"Allow\",\n  \"Action\": [\n    \"ssm:DeleteParameter\",\n    \"ssm:GetParameter\",\n    \"ssm:GetParameters\",\n    \"ssm:GetParametersByPath\",\n    \"ssm:PutParameter\"\n  ],\n  \"Resource\": [\n    \"arn:aws:ssm:us-east-1:112233445566:parameter/sst/*\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Nuxt App in SST\nDESCRIPTION: Integrates the previously configured S3 bucket with the Nuxt application by referencing it within the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nuxt(\"MyWeb\", {\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Using SST Go SDK for Linked Resources\nDESCRIPTION: Illustrates using the SST Go SDK to access linked resources in Go applications. The snippet shows dependency requirements and basic function usage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_4\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/sst/sst/v3/sdk/golang/resource\"\n)\n\nresource.Get(\"MyBucket\", \"name\")\n```\n\nLANGUAGE: go\nCODE:\n```\nresource.Get(\"App\", \"name\")\nresource.Get(\"App\", \"stage\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Lambda Function in SST\nDESCRIPTION: TypeScript configuration for deploying a Python function to AWS Lambda with SST. Sets up a function with Python 3.11 runtime and URL endpoint.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst python = new sst.aws.Function(\"MyPythonFunction\", {\n  handler: \"functions/src/functions/api.handler\",\n  runtime: \"python3.11\",\n  url: true\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying SST to Production Environment\nDESCRIPTION: Command to deploy an SST application to the production environment using the '--stage' flag. This will trigger the conditional logic in the config file to use the production AWS profile.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/aws-accounts.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Configuring AppSync API with Data Source and Resolver in SST v3\nDESCRIPTION: Creates an AppSync API, adds a Lambda data source, and configures a resolver in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new sst.aws.AppSync(\"MyApi\", {\n  schema: \"schema.graphql\",\n  domain: \"api.domain.com\"\n});\n\nconst lambdaDS = api.addDataSource({\n  name: \"lambdaDS\",\n  lambda: \"src/lambda.handler\"\n});\napi.addResolver(\"Query user\", {\n  dataSource: lambdaDS.name\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Lambda Function with Hono - JavaScript\nDESCRIPTION: Defines an SST AWS Lambda function for serving a Hono API by updating sst.config.ts. Enables function URL for external API access, assigns the entrypoint handler, and leverages the SST AWS Construct Library. Requires SST set up and existing handler in src/index.handler.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\\n  new sst.aws.Function(\\\"Hono\\\", {\\n    url: true,\\n    handler: \\\"src/index.handler\\\",\\n  });\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Global Transformation of Function Components in SST\nDESCRIPTION: This snippet shows how to use the global $transform function to set default properties for all Function components created after this call.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n$transform(sst.aws.Function, (args, opts) => {\n  // Set the default if it's not set by the component\n  args.runtime ??= \"nodejs18.x\";\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Settings for Autodeploy Runner\nDESCRIPTION: Configuration for running Autodeploy builds within a specific VPC. This allows builds to access private resources within your VPC by specifying the VPC ID, security groups, and subnets.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconsole: {\n  autodeploy: {\n    runner: {\n      vpc: {\n        id: \"vpc-0be8fa4de860618bb\",\n        securityGroups: [\"sg-0399348378a4c256c\"],\n        subnets: [\"subnet-0b6a2b73896dc8c4c\", \"subnet-021389ebee680c2f0\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Environment (Bash)\nDESCRIPTION: This command starts the SST development environment using `npx sst dev`. This typically launches a local development server for the frontend application (TanStack Start) and connects to AWS for backend resources defined in `sst.config.ts`, enabling live local development and testing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Adding Public Access S3 Bucket\nDESCRIPTION: This JavaScript code adds a publicly accessible S3 bucket for file uploads in the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Drizzle Scripts in package.json\nDESCRIPTION: Adds a script in the `package.json` to integrate with `sst shell` and Drizzle Kit for database management. Specifies how the shell will pass credentials to Drizzle Kit.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"db\": \"sst shell drizzle-kit\"\n},\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Hono Container Service - TypeScript\nDESCRIPTION: Links the created S3 Bucket as a resource accessible by the ECS/Fargate Service in sst.config.ts. This is required for the app running inside the container to interact with S3. Expects bucket to be previously defined.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\\\"MyService\\\", {\\n  // ...\\n  link: [bucket],\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Private Load Balancer for ECS Service with SST\nDESCRIPTION: This snippet demonstrates how to add a private load balancer to a service by setting the loadBalancer.public prop to false. This allows creating internal services that can only be accessed inside a VPC.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    public: false,\n    ports: [{ listen: \"80/http\" }],\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Pulumi Resource Import Configuration with Args (TypeScript)\nDESCRIPTION: Shows how to update the Pulumi resource definition (`aws.s3.BucketV2`) by setting the arguments (like `objectLockEnabled`) according to the error message received during the failed import attempt. This ensures the code definition matches the existing resource. The `import` option is retained for this step.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nnew aws.s3.BucketV2(\"MyBucket\",\n  {\n    objectLockEnabled: undefined\n  },\n  {\n    import: \"mybucket-xnbmhcvd\"\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Remix App to AWS - Bash\nDESCRIPTION: Deploys the configured SST infrastructure and Remix application to AWS via the CLI. The '--stage' flag is used to target a production stage (or custom). Dependencies: AWS credentials must be properly configured.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Development Mode Configuration in SST Config\nDESCRIPTION: Set different configuration values based on whether the application is running in development mode (sst dev) or deployment mode (sst deploy).\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst SENTRY_DSN = $dev === true\n   ? \"https://foo@sentry.io/bar\"\n   : \"https://baz@sentry.io/qux\";\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Bucket Notifications with Lambda Function\nDESCRIPTION: This snippet shows how to create an S3 bucket and subscribe to its events using a Lambda function with SST. It demonstrates the configuration of bucket notifications for specific S3 events.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nbucket.notify({\n  notifications: [\n    {\n      name: \"MySubscriber\",\n      function: \"subscriber.handler\",\n      events: [\"s3:ObjectCreated:*\"],\n    },\n  ],\n});\n\nreturn {\n  bucket: bucket.name,\n};\n```\n\n----------------------------------------\n\nTITLE: Start Drizzle Studio with Dev Command\nDESCRIPTION: Adds a command to start Drizzle Studio automatically when SST runs in development mode, allowing database schema and data examination.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.x.DevCommand(\"Studio\", {\n  link: [rds],\n  dev: {\n    command: \"npx drizzle-kit studio\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Pinning a Specific Provider Version (TypeScript)\nDESCRIPTION: Shows the configuration pattern for setting a specific version of a provider (here, aws) using the version property in sst.config.ts. This approach overrides the default behavior of always installing the latest provider version, ensuring deterministic deployments. The configuration must be updated manually for version changes.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: {\n    aws: {\n      version: \"6.27.0\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Refactored Queue Stack to Avoid Cyclical Dependencies (TypeScript)\nDESCRIPTION: This snippet shows a refactored version of the queue stack that avoids cyclical dependencies by removing cross-stack references. It allows the queue stack to be deployed independently.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nfunction QStack() {\n  const q = new SQS();\n\n  return q;\n}\n```\n\n----------------------------------------\n\nTITLE: Provisioning an S3 Bucket with SST - JavaScript\nDESCRIPTION: Creates an AWS S3 Bucket resource using SST's AWS Construct Library in sst.config.ts. No parameters are necessary apart from a bucket name. This bucket is referenced in subsequent API and Lambda configurations for file upload/download use cases.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\\\"MyBucket\\\");\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Angular App to AWS with SST\nDESCRIPTION: Deploys the complete Angular application with SST infrastructure to AWS using a production stage. This command builds the Angular app and provisions all required AWS resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Postgres for Local Development\nDESCRIPTION: This snippet shows how to configure SST's Postgres component for local development. It sets up a local Postgres instance using Docker and configures the SST Postgres component to use it during development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_90\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\", { nat: \"ec2\" });\n\nconst rds = new sst.aws.Postgres(\"MyPostgres\", {\n  dev: {\n    username: \"postgres\",\n    password: \"password\",\n    database: \"local\",\n    host: \"localhost\",\n    port: 5432,\n  },\n  vpc,\n});\n\nnew sst.aws.Function(\"MyFunction\", {\n  vpc,\n  url: true,\n  link: [rds],\n  handler: \"index.handler\",\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying Containerized Applications with SST Cluster and Service Components\nDESCRIPTION: This snippet demonstrates how to use SST's new Cluster and Service components to deploy containerized applications on AWS using ECS and Fargate. It includes configuration for load balancing and development settings.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/container-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Pulumi Resource Import Configuration (TypeScript Diff)\nDESCRIPTION: Illustrates the final cleanup step after successfully importing a resource using a Pulumi definition. The `import` option (and its containing options object, if otherwise empty) is removed from the resource constructor. The adjusted arguments must remain for continued management by SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\nnew aws.s3.BucketV2(\"MyBucket\",\n  {\n    objectLockEnabled: undefined\n  },\n-  {\n-    import: \"mybucket-xnbmhcvd\"\n-  }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Bun App\nDESCRIPTION: Sets up a Dockerfile to containerize the Bun app for deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM oven/bun\n\nCOPY bun.lock . \nCOPY package.json . \n\nRUN bun install --frozen-lockfile\n\nCOPY . .\n\nEXPOSE 3000\nCMD [\"bun\", \"index.ts\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a Job Construct in SST\nDESCRIPTION: This snippet demonstrates how to create a new Job construct in SST. It specifies the source path and handler function for the job.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/long-running-jobs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Job } from \"@serverless-stack/resources\";\n\nconst job = new Job(stack, \"MyJob\", {\n  srcPath: \"services\",\n  handler: \"functions/myJob.handler\",\n});\n```\n\n----------------------------------------\n\nTITLE: Successful Import Confirmation Message (Bash)\nDESCRIPTION: Shows the expected output message in the console after a successful `sst deploy` command, indicating that the specified AWS resource (in this case, an S3 Bucket) has been successfully imported into the SST application's management.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n|  Imported    MyBucket aws:s3:BucketV2\n```\n\n----------------------------------------\n\nTITLE: Using Sharp Image Processing in Lambda\nDESCRIPTION: Demonstrates how to use the Sharp image processing library in a Lambda function without requiring a Lambda layer. The example shows configuration for both development and deployment environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_101\n\nLANGUAGE: json\nCODE:\n```\n{\n  nodejs: { install: [\"sharp\"] }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"dependencies\": {\n    \"sharp\": \"^0.33.5\"\n  }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\nconst func = new sst.aws.Function(\"MyFunction\", {\n  url: true,\n  handler: \"index.handler\",\n  nodejs: { install: [\"sharp\"] },\n  copyFiles: [{ from: \"logo.png\" }],\n});\n\nreturn {\n  url: func.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Hono App Project - Bash\nDESCRIPTION: Creates a new Hono app using the npm initializer and changes into the created directory. No dependencies required beyond Node.js and npm. The input argument specifies the template or output directory for the project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create hono@latest aws-hono\\ncd aws-hono\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Linked Resources in SST Application\nDESCRIPTION: Shows how to use SST's SDK to access linked resources (like an S3 bucket) in an application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n----------------------------------------\n\nTITLE: Adding an S3 Bucket Resource in SST Config (TypeScript, sst.config.ts)\nDESCRIPTION: Instantiates an SST S3 Bucket construct, assigning it to a variable for usage and later linkage to the ECS service. Requires the SST AWS SDK and is placed within the sst.config.ts configuration script. Output is a Bucket object named 'MyBucket'.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\\\"MyBucket\\\");\\n\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Mode with Astro - Bash\nDESCRIPTION: Starts SST and the Astro development server concurrently. Precondition: Project is set up per previous steps. Output: Local development environment running with AWS resources mocked or proxied.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Setting up AppSync API with Data Source and Resolver in SST v2\nDESCRIPTION: Configures an AppSync API, adds a Lambda data source, and sets up a resolver in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new AppSyncApi(stack, \"MyApi\", {\n  schema: \"graphql/schema.graphql\",\n  customDomain: \"api.example.com\"\n});\n\napi.addDataSources(stack, {\n  lambdaDS: \"src/lambda.handler\"\n});\napi.addResolvers(stack, {\n  \"Query user\": \"lambdaDS\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Single Provider in sst.config.ts (TypeScript)\nDESCRIPTION: Shows how to add a single provider (planetscale) to the providers object in sst.config.ts. The configuration maps the provider package name to a version string, which ensures that SST manages and locks the provider version. This static object is expected in your sst.config.ts and does not require any import statements.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: {\n    planetscale: \"0.0.7\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Cloudflare R2 Bucket in sst.config.ts (TypeScript)\nDESCRIPTION: Defines a Cloudflare R2 Bucket resource named \"MyBucket\" within the `sst.config.ts` file using `sst.cloudflare.Bucket`. This statement creates an R2 storage bucket that can be linked to and accessed by other Cloudflare resources like Workers defined in the same configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nconst bucket = new sst.cloudflare.Bucket(\"MyBucket\");\n```\n\n----------------------------------------\n\nTITLE: Configuring SQS Queue with Swift Lambda Function\nDESCRIPTION: Example of creating an AWS SQS queue and subscribing a Swift Lambda function to it using SST. The code demonstrates how to set up the runtime, architecture, and handler for the function.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-swift/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst queue = new sst.aws.Queue(\"SwiftQueue\", {});\nqueue.subscribe({\n  runtime: \"provided.al2023\",\n  architecture: process.arch === \"arm64\" ? \"arm64\" : \"x86_64\",\n  bundle: build(\"queue\"),\n  handler: \"bootstrap\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Bucket with Public Access for Container App - TypeScript\nDESCRIPTION: Defines a public S3 bucket in Typescript for use with SST in a Remix container app. To be included below the VPC resource in sst.config.ts. This object can be linked to services for resource sharing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Static Site in SST v3\nDESCRIPTION: Configures a static site with a custom domain in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.StaticSite(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Function Environment Variables using Async Output Functions (TypeScript)\nDESCRIPTION: Uses Output-returning functions aws.getCallerIdentityOutput and aws.getRegionOutput to set environment variables in an sst.aws.Function. This allows retrieval of provider information as outputs that do not block resource deployment, suitable for referencing dynamic values in stack definitions. Requires the SST AWS Function component and provider to be available.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction, {\n  handler: \"src/lambda.handler\",\n  environment: {\n    ACCOUNT: aws.getCallerIdentityOutput({}).accountId,\n    REGION: aws.getRegionOutput().name\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Deploying Swift Application to Lambda in SST AWS\nDESCRIPTION: Demonstrates deploying a Swift application to AWS Lambda using the AL2023 runtime. The example shows the configuration required for building and deploying Swift code to Lambda, noting that Docker is required for the build process.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_106\n\nLANGUAGE: ts\nCODE:\n```\nconst swift = new sst.aws.Function(\"Swift\", {\n  runtime: \"provided.al2023\",\n  architecture: process.arch === \"arm64\" ? \"arm64\" : \"x86_64\",\n  bundle: build(\"app\"),\n  handler: \"bootstrap\",\n  url: true,\n});\nconst router = new sst.aws.Router(\"SwiftRouter\", {\n  routes: {\n    \"/*\": swift.url,\n  },\n  domain: \"swift.dev.sst.dev\",\n});\nreturn {\n  url: router.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Go API with API Gateway V2 Integration\nDESCRIPTION: Go code for creating an API using the aws-lambda-go-api-proxy package to handle API Gateway V2 events. The code sets up a simple HTTP server with a hello world endpoint.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_46\n\nLANGUAGE: go\nCODE:\n```\nimport (\n \"github.com/aws/aws-lambda-go/lambda\"\n \"github.com/awslabs/aws-lambda-go-api-proxy/httpadapter\"\n)\n\nfunc router() *http.ServeMux {\n  mux := http.NewServeMux()\n\n  mux.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    w.WriteHeader(http.StatusOK)\n    w.Write([]byte(`{\"message\": \"hello world\"}`))  \n  })\n\n  return mux\n}\n\nfunc main() {\n  lambda.Start(httpadapter.NewV2(router()).ProxyWithContext)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring app.config.ts for AWS Lambda\nDESCRIPTION: Updates the app configuration to use AWS Lambda preset with streaming enabled.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  server: {\n    preset: \"aws-lambda\",\n    awsLambda: {\n      streaming: true,\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Pre-signed URL for Upload - TypeScript\nDESCRIPTION: Generate a pre-signed URL for uploading files to an S3 bucket. This involves creating and executing a command to secure upload access. Ensure proper AWS SDK packages are installed.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dynamic = \"force-dynamic\";\n\nexport default async function Home() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return (\n    <div className={styles.page}>\n      <main className={styles.main}>\n        <Form url={url} />\n      </main>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile for Express + Prisma App (Dockerfile)\nDESCRIPTION: Defines a Docker container build for the Express/Prisma app using a Node.js 18 image, copying app files, installing dependencies, and running 'prisma generate' before launching the app. Ensures the containerized app has all generated Prisma artifacts.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_14\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:18-bullseye-slim\\n\\nWORKDIR /app/\\n\\nCOPY package.json index.mjs prisma /app/\\nRUN npm install\\n\\nRUN npx prisma generate\\n\\nENTRYPOINT [\\\"node\\\", \\\"index.mjs\\\"]\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Astro Site - JavaScript\nDESCRIPTION: Demonstrates how to link an existing SST-defined S3 bucket resource to the Astro AWS site for access within the application. The 'link' property allows the deployment system to provide secrets/configs to the app as environment variables.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnew sst.aws.Astro(\\\"MyWeb\\\", {\\n  link: [bucket],\\n});\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Pre-signed URL and Loading Route Data (TypeScript)\nDESCRIPTION: This TypeScript snippet, intended for `src/routes/index.tsx`, defines a server function `getPresignedUrl` using TanStack Start's `createServerFn`. This function generates a pre-signed S3 PUT URL using the AWS SDK v3 (`@aws-sdk/client-s3`, `@aws-sdk/s3-request-presigner`) for uploading an object with a random UUID key to the linked 'MyBucket' (accessed via `Resource.MyBucket.name`). A TanStack Router route loader (`loader`) calls this server function to fetch the URL, which is then passed to the `RouteComponent` via `useLoaderData` for use by the upload form.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport const getPresignedUrl = createServerFn().handler(async () => {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name\n  })\n  return await getSignedUrl(new S3Client({}), command)\n})\n\nexport const Route = createFileRoute('/')({\n  component: RouteComponent,\n  loader: async () => {\n    return { url: await getPresignedUrl() }\n  }\n})\n\nfunction RouteComponent() {\n  const { url } = Route.useLoaderData()\n  return (\n    <main>\n      <Form url={url} />\n    </main>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Dockerizing the NestJS Application (Dockerfile)\nDESCRIPTION: Defines a multi-step Dockerfile for building and running the NestJS app as a container, based on the node:22 image. Copies project files, installs dependencies, builds the app, exposes port 3000, and runs the server from its build output. Must be used with Docker (Docker Desktop recommended).\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:22\\n\\nWORKDIR /usr/src/app\\nCOPY package*.json ./\\nRUN npm install\\nCOPY . .\\nRUN npm run build\\n\\nEXPOSE 3000\\nCMD [\\\"node\\\", \\\"dist/main\\\"]\\n\n```\n\n----------------------------------------\n\nTITLE: Access App Information in JavaScript\nDESCRIPTION: Shows default properties available in the Resource object to access SST app details. Requires SST SDK package installed in the environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.App.name, Resource.App.stage);\n```\n\n----------------------------------------\n\nTITLE: SST Configuration for API Gateway\nDESCRIPTION: TypeScript configuration for SST to set up API Gateway and Lambda function with Docker build process\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-dart-api/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"./.sst/platform/config.d.ts\" />\n\nexport default $config({\n  app(input) {\n    return {\n      name: \"aws-dart-api\",\n      removal: input?.stage === \"production\" ? \"retain\" : \"remove\",\n      home: \"aws\",\n    };\n  },\n  async run() {\n    const api = new sst.aws.ApiGatewayV2(\"MyApi\");\n    api.route(\"GET /\", {\n      runtime: \"provided.al2023\",\n      architecture: process.arch === \"arm64\" ? \"arm64\" : \"x86_64\",\n      bundle: build(),\n      handler: \"hello\",\n    });\n  },\n});\n\nfunction build() {\n  require(\"child_process\").execSync(`\nmkdir -p .build\ndocker run -v $PWD:/app -w /app --entrypoint ./build.sh dart:stable-sdk\n`);\n  return `.build/`;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Secret in SST Stack\nDESCRIPTION: This snippet demonstrates how to define a secret in an SST stack using the Config.Secret construct. It creates a STRIPE_KEY secret and exports it for use in other stacks.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/config.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config, StackContext } from \"@serverless-stack/resources\";\n\nexport default function SecretsStack({ stack }: StackContext) {\n  const STRIPE_KEY = new Config.Secret(stack, \"STRIPE_KEY\");\n\n  return { STRIPE_KEY };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parameter in SST v2\nDESCRIPTION: Creates a Config Parameter with a value in SST v2. This allows setting of values that can be accessed in functions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nconst secret = new Config.Parameter(stack, \"MyParameter\", {\n  value: \"1.2.0\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Express Application Server (JavaScript)\nDESCRIPTION: Defines an Express server in index.mjs which listens on port 80 and serves a basic \"/\" GET route with a 'Hello World!' response. This snippet is the foundational server logic for running the Express app locally or in a container, requiring express to be installed beforehand.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from \\\"express\\\";\\n\\nconst PORT = 80;\\n\\nconst app = express();\\n\\napp.get(\\\"/\\\", (req, res) => {\\n  res.send(\\\"Hello World!\\\")\\n});\\n\\napp.listen(PORT, () => {\\n  console.log(`Server is running on http://localhost:${PORT}`);\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for tRPC Server\nDESCRIPTION: Installs the necessary npm packages, zod for validation and @trpc/server for creating the server. Required for running the tRPC server with the defined functionality in the project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zod @trpc/server@next\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to ECS Container Service (TypeScript, sst.config.ts)\nDESCRIPTION: Demonstrates how to link a previously defined S3 bucket to a containerized service in SST, granting the container permissions and environment for accessing the bucket. Appends a 'link' property with a bucket dependency in the Service definition.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\\\"MyService\\\", {\\n  // ...\\n  link: [bucket],\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Function Components with Global Transform Applied\nDESCRIPTION: This example demonstrates creating two Function components after applying a global transform, showing how the transform affects the runtime of the functions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunctionA\", {\n  handler: \"src/lambdaA.handler\"\n});\n\nnew sst.aws.Function(\"MyFunctionB\", {\n  handler: \"src/lambdaB.handler\",\n  runtime: \"nodejs20.x\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Module Exports in package.json (JSON)\nDESCRIPTION: Specifies export paths in the core package's package.json for exposing internal modules using the Node.js exports field. This configuration enables consumers to access modules (e.g., Example) using @monorepo-template/core/example. Wildcards capture matching TypeScript entry points. Requires Node.js >12.7 and appropriate project structure.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"exports\": {\n  \"./*\": [\n    \"./src/*/index.ts\",\n    \"./src/*.ts\"\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SST v3 Run Output\nDESCRIPTION: Example showing how to output values from SST v3 configuration using the run method, replacing the previous stack.addOutputs functionality.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nasync run() {\n  const auth = await import(\"./infra/auth\");\n\n  return {\n    UserPool: auth.userPool.id,\n    IdentityPool: auth.identityPool.id,\n    UserPoolClient: auth.userPoolClient.id\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Profile in SST Config File\nDESCRIPTION: Demonstrates how to set the AWS profile in the SST configuration file, including conditional profile selection based on deployment stage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/iam-credentials.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: {\n    aws: {\n      profile: \"staging\"\n    }\n  }\n}\n```\n\nLANGUAGE: ts\nCODE:\n```\napp(input) {\n  return {\n    // ...\n    providers: {\n      aws: {\n        profile: input?.stage === \"staging\" ? \"staging\" : \"default\"\n      }\n    }\n  };\n},\n```\n\n----------------------------------------\n\nTITLE: Configuring Stage-Specific Autodeploy Runner Settings\nDESCRIPTION: Example showing how to configure different runner settings based on the deployment stage. This configuration sets a 3-hour timeout specifically for production deployments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconsole: {\n  autodeploy: {\n    runner(stage) {\n      if (stage === \"production\") return { timeout: \"3 hours\" };\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a File Upload Form in SolidStart\nDESCRIPTION: Defines a form component in SolidStart app for uploading files using pre-signed URLs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Home() {\n  const url = createAsync(() => presignedUrl());\n\n  return (\n    <main>\n      <h1>Hello world!</h1>\n      <form\n        onSubmit={async (e) => {\n          e.preventDefault();\n\n          const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n          const image = await fetch(url() as string, {\n            body: file,\n            method: \"PUT\",\n            headers: {\n              \"Content-Type\": file.type,\n              \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n            },\n          });\n\n          window.location.href = image.url.split(\"?\")[0];\n        }}\n      >\n        <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n        <button type=\"submit\">Upload</button>\n      </form>\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Making DynamoDB Requests in Go Lambda\nDESCRIPTION: Go code for making a PutItem request to DynamoDB from a Go Lambda function. Uses the DynamoDB client to insert data into a table.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_52\n\nLANGUAGE: go\nCODE:\n```\n_, err = r.client.PutItem(ctx, &dynamodb.PutItemInput{\n  TableName: tableName.(string),\n\t Item:      item,\n})\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to TanStackStart Component in SST (TypeScript)\nDESCRIPTION: This TypeScript snippet, part of `sst.config.ts`, demonstrates linking the previously defined S3 bucket resource (`bucket`) to the `TanStackStart` component named 'MyWeb'. This linking mechanism makes the bucket's details (like name or ARN) available to the TanStack Start application code at runtime via SST's resource binding feature.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.TanStackStart(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n----------------------------------------\n\nTITLE: Initialize SST in Node.js App\nDESCRIPTION: This snippet initializes SST within the Node.js app and installs necessary dependencies. The setup configures AWS settings by creating a `sst.config.ts` file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Provisioning an S3 Bucket for Hono Service Container - TypeScript\nDESCRIPTION: Creates an S3 Bucket resource using SST inside sst.config.ts, intended for file uploads from the containerized Hono app. Expects execution inside the AWS project via SST and the referenced variable to be available for linking.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\\\"MyBucket\\\");\\n\n```\n\n----------------------------------------\n\nTITLE: Creating SvelteKit Site in SST v3\nDESCRIPTION: Sets up a SvelteKit site with a custom domain in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.SvelteKit(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Importing AWS SDK Dependencies for S3 Pre-signed URLs in Remix\nDESCRIPTION: Adds the necessary imports for working with AWS S3 and generating pre-signed URLs in a Remix application. Includes SST resource management, Remix data loading hooks, and AWS SDK components for S3 operations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\n----------------------------------------\n\nTITLE: Use Drizzle ORM for Database Queries\nDESCRIPTION: Configures Drizzle ORM with PostgreSQL connection details, allowing queries to be made via a connection pool.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport { Pool } from \"pg\";\nimport { Resource } from \"sst\";\nimport * as schema from \"./todo.sql\";\n\nconst pool = new Pool({\n  host: Resource.MyPostgres.host,\n  port: Resource.MyPostgres.port,\n  user: Resource.MyPostgres.username,\n  password: Resource.MyPostgres.password,\n  database: Resource.MyPostgres.database,\n});\n\nexport const db = drizzle(pool, { schema });\n```\n\n----------------------------------------\n\nTITLE: Implementing File Download in Bun App\nDESCRIPTION: Adds a route to download the latest file from the S3 bucket.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nif (url.pathname === \"/latest\" && req.method === \"GET\") {\n  const objects = await s3.send(\n    new ListObjectsV2Command({\n      Bucket: Resource.MyBucket.name,\n    }),\n  );\n  const latestFile = objects.Contents!.sort(\n    (a, b) =>\n      (b.LastModified?.getTime() ?? 0) - (a.LastModified?.getTime() ?? 0),\n  )[0];\n  const command = new GetObjectCommand({\n    Key: latestFile.Key,\n    Bucket: Resource.MyBucket.name,\n  });\n  return Response.redirect(await getSignedUrl(s3, command));\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules in SolidStart\nDESCRIPTION: Imports libraries and SDK modules required for the SolidStart app to interact with AWS services and handle routing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { createAsync } from \"@solidjs/router\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\n----------------------------------------\n\nTITLE: Access Linked Resources in JavaScript\nDESCRIPTION: Demonstrates importing and using the SST SDK Resource component to access linked resources within a JavaScript function. Requires a configured SST environment with linked resources and the SST SDK package.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\nLANGUAGE: js\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [bucket]\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodeploy for Branch-Based Deployments in SST\nDESCRIPTION: Configuration example for setting up Autodeploy in SST to target specific stages based on git branch events. This example configures deploys to the production stage when code is pushed to the main branch.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default $config({\n  // Your app's config\n  app(input) { },\n  // Your app's resources\n  async run() { },\n  // Your app's Console config\n  console: {\n    autodeploy: {\n      target(event) {\n        if (event.type === \"branch\" && event.branch === \"main\" && event.action === \"pushed\") {\n          return { stage: \"production\" };\n        }\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Pre-signed URL in SvelteKit Server Route (Container)\nDESCRIPTION: Shows the TypeScript code for a SvelteKit server-side load function in `src/routes/+page.server.ts` for the container example. It uses the AWS SDK v3 to generate a pre-signed PUT URL for uploading to the linked S3 bucket (`Resource.MyBucket.name`). The generated URL is returned to the page. This code is identical to the Serverless example's server route.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n/** @type {import('./$types').PageServerLoad} */\nexport async function load() {\n  const command = new PutObjectCommand({\n    Key: crypto.randomUUID(),\n    Bucket: Resource.MyBucket.name,\n  });\n  const url = await getSignedUrl(new S3Client({}), command);\n\n  return { url };\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Prisma User Model Schema (Prisma)\nDESCRIPTION: Creates a basic Prisma schema with a User model: auto-incremented int id, optional name, and unique email. This .prisma file enables codegen and migration for storing user data. Requires Prisma migration and DB access afterwards.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_10\n\nLANGUAGE: prisma\nCODE:\n```\nmodel User {\\n  id    Int     @id @default(autoincrement())\\n  name  String?\\n  email String  @unique\\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application to AWS Using Production Stage (bash)\nDESCRIPTION: Provides the shell command for deploying the application via SST to the AWS environment using a production stage. Requires fully configured sst.config.ts and Docker image; will output the deployed ECS service address on completion.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Adding S3 Bucket to SST Configuration\nDESCRIPTION: Adds an S3 bucket to the SST configuration for file uploads and links it to the service.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Service(\"MyService\", {\n  // ...\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in SvelteKit Project (Container)\nDESCRIPTION: Initializes the SST framework within the existing SvelteKit project using `npx sst@latest init`. It then installs necessary npm dependencies. This command sets up the `sst.config.ts` file required for defining infrastructure for the container-based deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Environment - Bash\nDESCRIPTION: Runs SST in development mode, enabling live updates and executing stack-defined resources locally for rapid iteration. Requires previous configuration of SST and AWS credentials. No inputs other than base setup.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Provider via SST CLI (bash)\nDESCRIPTION: Demonstrates how to add a cloud provider to an SST project using the command-line interface. The command updates the sst.config.ts file, installs necessary provider packages, and makes the provider available under the global namespace. No code-level dependencies are required; the command must be run in the project root, and <provider> should be replaced with the specific provider name. No output is produced directly; it modifies the project configuration as a side effect.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsst add <provider>\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Custom Linked Resource with SST SDK\nDESCRIPTION: This snippet shows how to access a custom linked resource using the SST SDK in runtime code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyLinkable.foo);\n```\n\n----------------------------------------\n\nTITLE: Connecting to SurrealDB from a Lambda function\nDESCRIPTION: Code for connecting to a SurrealDB instance from a Lambda function using the SurrealDB client. The endpoint is constructed using configuration values from the Resource object.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst endpoint = `http://${Resource.MyConfig.host}:${Resource.MyConfig.port}`;\n\nconst db = new Surreal();\nawait db.connect(endpoint);\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Next.js App - JavaScript\nDESCRIPTION: Link a previously defined S3 bucket to a Next.js app using SST's configuration file. Ensure the bucket configuration is present before linking.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  link: [bucket]\n});\n```\n\n----------------------------------------\n\nTITLE: Generating S3 Presigned URL in Go Lambda\nDESCRIPTION: Go code for retrieving bucket information from SST resources and generating a presigned URL for S3 PutObject operations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_49\n\nLANGUAGE: go\nCODE:\n```\nbucketName, err := resource.Get(\"Bucket\", \"name\")\nif err != nil {\n  panic(err)\n}\nurl, err := presignedClient.PresignPutObject(context.TODO(), &s3.PutObjectInput{\n  Bucket: aws.String(bucket.(string)),\n  Key:    aws.String(key),\n})\n```\n\n----------------------------------------\n\nTITLE: Setting up Next.js Site in SST v3\nDESCRIPTION: Configures a Next.js site with a custom domain in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Region in SST\nDESCRIPTION: Demonstrates how to specify the AWS region for an SST application in the configuration file. Sets up the app name and AWS provider region.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default $config({\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      providers: {\n        aws: { region: \"us-west-2\" }\n      }\n    };\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configure Linked Resources in SST for Rust\nDESCRIPTION: Explains how to set up linked resources in SST for use with Rust applications. Involves setting up an SST environment with specified runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\nconst openai = new sst.Secret(\"OpenaiSecret\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"./\",\n  link: [bucket, openai],\n  runtime: \"rust\"\n});\n```\n\n----------------------------------------\n\nTITLE: Interpolating Outputs with $interpolate Helper - SST TypeScript\nDESCRIPTION: Shows use of template literal-style interpolation for outputs with the $interpolate tag. This helper creates a new Output by inserting unresolved values into a string template. Requires at least one Output in the template; input is a template string, output is the fully interpolated Output.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUrl = $interpolate`${myFunction.url}/foo`;\n```\n\n----------------------------------------\n\nTITLE: Linking Resources in SST Configuration\nDESCRIPTION: This code snippet shows how to link an S3 bucket to a Lambda function in the SST configuration. Linking allows the function to access the bucket's properties at runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"index.handler\",\n  link: [bucket]\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis Cluster in VPC from Lambda\nDESCRIPTION: Implements a Redis client connection in a Lambda function that connects to a Redis cluster in the same VPC. The code configures TLS and authentication for the connection.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_79\n\nLANGUAGE: typescript\nCODE:\n```\nconst redis = new Cluster(\n  [{ host: Resource.MyRedis.host, port: Resource.MyRedis.port }],\n  {\n    dnsLookup: (address, callback) => callback(null, address),\n    redisOptions: {\n      tls: {},\n      username: Resource.MyRedis.username,\n      password: Resource.MyRedis.password,\n    },\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining .dockerignore for Build Context (Bash)\nDESCRIPTION: This .dockerignore ensures node_modules is excluded from Docker build context, reducing image bloat and avoiding local node_modules copying. Place this in root alongside Dockerfile for clean builds.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Configuring Initial Import for SST Bucket Component (TypeScript)\nDESCRIPTION: Shows the initial step for importing an existing S3 bucket into an SST `Bucket` component. It uses the `transform` property to specify the `opts.import` option with the name of the existing bucket. This setup attempts to map the SST component to the pre-existing AWS resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Bucket(\"MyBucket\", {\n  transform: {\n    bucket: (args, opts) => {\n      opts.import = \"mybucket-xnbmhcvd\";\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies with npm (Bash)\nDESCRIPTION: Installs all npm dependencies for the project, including those specified in workspace packages. Requires a valid package.json file and an internet connection. The command prepares the project for development or build steps by ensuring all packages are available.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing SST Tunnel for Local Redis Access\nDESCRIPTION: Command to install an SST tunnel for accessing a Redis instance running in a VPC from a local development environment. Requires sudo to create a network interface.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_40\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Configuring SST App with sst.config.ts\nDESCRIPTION: Demonstrates how to configure an SST app using the new sst.config.ts file in SST v2. It replaces the old sst.json configuration and allows for more flexible TypeScript-based configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/sst-v2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  config(_input) {\n    return {\n      name: \"my-sst-app\",\n      region: \"us-east-1\",\n    };\n  },\n  stacks(app) {\n    app.stack(Database).stack(Api).stack(Web);\n  },\n} satisfies SSTConfig;\n```\n\n----------------------------------------\n\nTITLE: Defining Dockerfile for Nuxt App Container Deployment\nDESCRIPTION: Creates a multi-stage Dockerfile to prepare and deploy the Nuxt application in a production environment using Docker.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_15\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts AS base\n\nWORKDIR /src\n\n# Build\nFROM base as build\n\nCOPY --link package.json package-lock.json ./\nRUN npm install\n\nCOPY --link . .\n\nRUN npm run build\n\n# Run\nFROM base\n\nENV PORT=3000\nENV NODE_ENV=production\n\nCOPY --from=build /src/.output /src/.output\n\nCMD [ \"node\", \".output/server/index.mjs\" ]\n```\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Install Drizzle ORM and Dependencies\nDESCRIPTION: Installs Drizzle ORM, Drizzle Kit, and the PostgreSQL package to manage the database. These packages are crucial for database interactions and migrations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install pg @types/pg drizzle-orm drizzle-kit\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to ECS Service - TypeScript\nDESCRIPTION: Links the defined bucket as a resource dependency to the ECS Service container, making bucket credentials or references available to the running Astro app. Place within the 'Service' definition for proper linkage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nnew sst.aws.Service(\\\"MyService\\\", {\\n  // ...\\n  link: [bucket],\\n});\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Mode - Bash\nDESCRIPTION: Launches SST in development mode to run both SST's services and the Remix app locally. Requires SST and dependencies already set up. Expected output: local Remix app accessible via SST sidebar. Limitations: Assumes default port and endpoint settings, and AWS credentials are configured.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nextjs-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Testing Email API Endpoint with cURL - Bash\nDESCRIPTION: Sends a GET request to the deployed SST API URL in order to trigger the Lambda and verify email delivery. Requires API URL (output from SST dev or deploy), cURL installed, and verified SES sender. Expects the Lambda to return a 'Sent!' message.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://wwwrwteda6kbpquppdz5i3lg4a0nvmbf.lambda-url.us-east-1.on.aws\n```\n\n----------------------------------------\n\nTITLE: Deploying with SST Deploy Command (Bash)\nDESCRIPTION: Performs deployment of the full stack, provisioning AWS resources, building containers, and deploying to Fargate under specified stage. Outputs the production service endpoint on success. Requires AWS credentials, Docker running, and project bootstrapped.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Configuring DynamoDB Client in Go Lambda\nDESCRIPTION: Go code for setting up a DynamoDB client in a Lambda function. Imports the SST SDK for resource linking and configures the AWS SDK client.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_51\n\nLANGUAGE: go\nCODE:\n```\nimport (\n  \"github.com/sst/sst/v3/sdk/golang/resource\"\n)\n\nfunc main() {\n  cfg, err := config.LoadDefaultConfig(context.Background())\n if err != nil {\n   panic(err)\n }\n client := dynamodb.NewFromConfig(cfg)\n\n\n tableName, err := resource.Get(\"Table\", \"name\")\n if err != nil {\n   panic(err)\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Spot Capacity for Fargate Service in SST\nDESCRIPTION: This snippet demonstrates how to enable Spot capacity for a Fargate service using the 'capacity' prop in the SST Cluster component. It sets up a cluster and service with Spot capacity enabled.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/container-spot-capacity.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  loadBalancer: {\n    ports: [{ listen: \"80/http\" }],\n  },\n  capacity: \"spot\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Project using npx - Bash\nDESCRIPTION: Initialize a new Next.js project using the specified TypeScript template and navigate into the created directory. Ensure npm is installed to run npx commands.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest aws-nextjs\ncd aws-nextjs\n```\n\n----------------------------------------\n\nTITLE: Creating an Additional Provider Instance (TypeScript)\nDESCRIPTION: Instantiates an additional AWS provider instance for multi-region or multi-account deployments. By passing a distinct name ('AnotherAWS'), this allows simultaneous use of multiple provider configurations within the same SST project. Provider options can include configuration such as region or credentials.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst useast1 = new aws.Provider(\"AnotherAWS\");\n\n```\n\n----------------------------------------\n\nTITLE: Configuring S3 Presigned URLs in Go Lambda\nDESCRIPTION: Go code for setting up AWS SDK clients to generate presigned URLs for S3 operations. Configures both the standard S3 client and the presigned client.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_48\n\nLANGUAGE: go\nCODE:\n```\ncfg, err := config.LoadDefaultConfig(context.TODO())\nif err != nil {\n   panic(err)\n}\n\nclient := s3.NewFromConfig(cfg)\npresignedClient := s3.NewPresignClient(client)\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Adapter for SST (Serverless)\nDESCRIPTION: Shows the required modification in `svelte.config.mjs` to use the SST-specific SvelteKit adapter (`svelte-kit-sst`) instead of the default `@sveltejs/adapter-auto`. This adapter is necessary for deploying the SvelteKit app as a serverless function via SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import adapter from '@sveltejs/adapter-auto';\n+ import adapter from \"svelte-kit-sst\";\n```\n\n----------------------------------------\n\nTITLE: Starting Development Mode with SST - Bash\nDESCRIPTION: Start the development mode for both SST and the Next.js app using npx. This will launch a local development environment. Ensure the SST configuration file is correctly set.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Importing Loader and AWS SDK Modules in Remix Route - TypeScript React\nDESCRIPTION: Imports SST resource references, Remix loader utilities, and necessary AWS SDK modules for use in the upload form and loader. These imports are vital to enable SSR data fetching, S3 URL generation, and link SST-deployed resources in Remix route files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\nimport { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n```\n\n----------------------------------------\n\nTITLE: Implementing Angular App Component with File Upload\nDESCRIPTION: Replaces the default Angular app component with a custom implementation that includes the file upload component. Sets up the basic layout and styling for the application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { FileUploadComponent } from './file-upload.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet, FileUploadComponent],\n  template: `\n    <main>\n      <app-file-upload></app-file-upload>\n    </main>\n    <router-outlet></router-outlet>\n  `,\n  styles: [`\n    main {\n      margin: auto;\n      padding: 1.5rem;\n      max-width: 60ch;\n    }\n  `],\n})\nexport class AppComponent { }\n```\n\n----------------------------------------\n\nTITLE: Deploying to AWS using SST (Bash)\nDESCRIPTION: Runs the SST deploy command to launch or update the described AWS infrastructure with a specific (production) stage. Prerequisite: all resources, configs, and Docker image creation steps must be completed. Outputs deployed app's endpoint after successful deployment. Uses npx for SST invocation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\\n\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Analog App\nDESCRIPTION: This JavaScript snippet links the previously created S3 bucket to the Analog app in the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nnew sst.aws.Analog(\"MyWeb\", {\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Authenticated Home Page - CSS\nDESCRIPTION: Provides CSS rules for styling the button components in 'app/page.module.css', enabling a visually appealing login/logout interface. It defines styles for .ctas, .primary, and .secondary classes with custom colors, border-radius, and transitions. No dependencies but expects the use of certain CSS variables in the project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_12\n\nLANGUAGE: css\nCODE:\n```\n.ctas button {\\n  appearance: none;\\n  background: transparent;\\n  border-radius: 128px;\\n  height: 48px;\\n  padding: 0 20px;\\n  border: none;\\n  border: 1px solid transparent;\\n  transition:\\n    background 0.2s,\\n    color 0.2s,\\n    border-color 0.2s;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: 16px;\\n  line-height: 20px;\\n  font-weight: 500;\\n}\\n\\nbutton.primary {\\n  background: var(--foreground);\\n  color: var(--background);\\n  gap: 8px;\\n}\\n\\nbutton.secondary {\\n  border-color: var(--gray-alpha-200);\\n  min-width: 180px;\\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in the Project (Bash)\nDESCRIPTION: Runs the SST initialization command and installs dependencies, setting up the sst.config.ts configuration file as the foundation for infrastructure-as-code provisioning. SST enables AWS infrastructure deployment in the project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding Public S3 Bucket - JavaScript\nDESCRIPTION: Configuration to allow public access to an S3 bucket using the SST framework. Add this configuration within the SST config file above where the Next.js component is defined.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Install Tunnel for Local Database Connection\nDESCRIPTION: Installs an SST tunnel for accessing the RDS database from a local development machine, essential for environments utilizing VPCs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Domain for SST Nextjs Component\nDESCRIPTION: This snippet demonstrates how to set a custom domain for an SST Nextjs component using the 'domain' property in the configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/custom-domains.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  domain: \"example.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Project Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the NestJS project\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nestjs-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Defining sst.config.ts in SST v3\nDESCRIPTION: Defines the sst.config.ts configuration for an SST v3 app, setting application name and home. Dependencies include SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default $config({\n  // Your app's config\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      home: \"aws\"\n    };\n  },\n  // Your app's resources\n  async run() { }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Mode (Bash)\nDESCRIPTION: Launches the SST development workflow. This command deploys infrastructure, sets up tunnels for VPC access, and spins up developer-focused tasks (e.g., local Express, Prisma Studio) in separate tabs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. After execution, the application will be accessible at http://localhost:3000.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ECS Service in SST v2\nDESCRIPTION: Creates an ECS service with custom domain, path, port, and VPC configuration in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nnew Service(stack, \"MyService\", {\n  customDomain: \"my-app.com\",\n  path: \"./service\",\n  port: 80,\n  cdk: {\n    vpc: Vpc.fromLookup(stack, \"VPC\", {\n      vpcId: \"vpc-0d19d2b8ca2b268a1\"\n    })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependencies for Containerization - Bash\nDESCRIPTION: Installs all required AWS SDK modules to support file upload, download, and multipart upload in container-based Hono applications. Should be executed in the source directory of the Hono project set up for container deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/lib-storage @aws-sdk/s3-request-presigner\\n\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAuth and Related Dependencies - Bash\nDESCRIPTION: Installs the necessary npm packages for using OpenAuth, valibot, and hono for both server and validation functionality. Should be run at the root of the Next.js/SST project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @openauthjs/openauth valibot hono\n```\n\n----------------------------------------\n\nTITLE: Conditional Spot Capacity Configuration Based on Stage in SST\nDESCRIPTION: This snippet demonstrates how to conditionally set Spot capacity based on the application stage. It uses Spot capacity for non-production stages and default (Fargate) capacity for production.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/container-spot-capacity.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncapacity: $app.stage === \"production\" ? undefined : \"spot\";\n```\n\n----------------------------------------\n\nTITLE: Generating and Running Migration using SST Shell (Bash)\nDESCRIPTION: Performs schema migration by running prisma migrate via an SST shell targeted at the Prisma component, passing the DB URL. Ensures Prisma CLI has access to RDS connections securely. Requires SST dev/tunnel to be active.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst shell --target Prisma -- npx prisma migrate dev --name init\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Building and Running SolidStart App\nDESCRIPTION: Defines a Dockerfile for building and running the SolidStart app within a container environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_20\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts AS base\n\nWORKDIR /src\n\n# Build\nFROM base as build\n\nCOPY --link package.json package-lock.json ./\nRUN npm install\n\nCOPY --link . .\n\nRUN npm run build\n\nRUN npm prune --omit=dev\n\n# Run\nFROM base\n\nCOPY --link --from=build /src/node_modules ./node_modules\nCOPY --link --from=build /src/build ./build\nCOPY --link --from=build /src/package.json ./\n```\n\nLANGUAGE: dockerfile\nCODE:\n```\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n\n----------------------------------------\n\nTITLE: Writing to EFS Filesystem in Node.js\nDESCRIPTION: Example of writing to an EFS filesystem mounted at /mnt/efs from a Node.js application. The code updates a counter value stored in the filesystem.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nawait writeFile(\"/mnt/efs/counter\", newValue.toString());\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Packages - Bash\nDESCRIPTION: Installs AWS S3 client libraries for Node.js projects that manage S3 uploads and generate signed URLs. Required dependencies include @aws-sdk/client-s3 and @aws-sdk/s3-request-presigner, installed using npm.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Initializing Express App (JavaScript -- ESM)\nDESCRIPTION: Sets up a basic Express web server listening on port 80, responding with 'Hello World!' at the root route. No database connections yet; serves as a starting web backend. Requires express installed and ESM support enabled.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport express from \\\"express\\\";\\n\\nconst PORT = 80;\\n\\nconst app = express();\\n\\napp.get(\\\"/\\\", (req, res) => {\\n  res.send(\\\"Hello World!\\\")\\n});\\n\\napp.listen(PORT, () => {\\n  console.log(`Server is running on http://localhost:${PORT}`);\\n});\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to SolidStart App\nDESCRIPTION: Links the configured S3 bucket to the SolidStart app within the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nnew sst.aws.SolidStart(\"MyWeb\", {\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Adding SSO Login Script to package.json\nDESCRIPTION: This snippet demonstrates how to add an SSO login script to the package.json file for easy access in Node.js projects.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/aws-accounts.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"sso\": \"aws sso login --sso-session=acme\"\n}\n```\n\n----------------------------------------\n\nTITLE: SST v3 Function Transform Configuration\nDESCRIPTION: Demonstrates how to use $transform to apply default configurations to AWS Lambda functions, replacing previous default function methods.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n$transform(sst.aws.Function, (args, opts) => {\n  // Set the default if it's not set by the component\n  if (args.runtime === undefined) {\n    args.runtime = \"nodejs18.x\";\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Fargate Service - TypeScript\nDESCRIPTION: Integrate an S3 bucket reference into a service definition for a containerized Next.js app deployment. Ensure the bucket and service are correctly defined in SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  // ...\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Creating an Upload Form in Angular\nDESCRIPTION: This TypeScript component in Angular allows users to upload files to the S3 bucket using a server-generated pre-signed URL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Component } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { injectLoad } from '@analogjs/router';\nimport { toSignal } from '@angular/core/rxjs-interop';\n\nimport { load } from './index.server';\n\n@Component({\n  selector: 'app-home',\n  standalone: true,\n  imports: [FormsModule],\n  template: `\n    <form (ngSubmit)=\"onSubmit($event)\">\n      <input type=\"file\" name=\"file\">\n      <button type=\"submit\">Upload</button>\n    </form>\n  `,\n})\nexport default class HomeComponent {\n  data = toSignal(injectLoad<typeof load>(), { requireSync: true });\n\n  async onSubmit(event: Event): Promise<void> {\n    const file = (event.target as HTMLFormElement)['file'].files?.[0]!;\n\n    const image = await fetch(this.data().url, {\n      body: file,\n      method: 'PUT',\n      headers: {\n        'Content-Type': file.type,\n        'Content-Disposition': `attachment; filename=\"${file.name}\"`,\n      },\n    });\n\n    window.location.href = image.url.split('?')[0];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in a Node.js Project\nDESCRIPTION: Initializes SST within the project to enable deployment to Cloudflare. It uses the npx command to ensure the latest version of SST is used and installs project dependencies. This creates essential configuration files for setting up a Cloudflare app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Implementing Authenticated Home Page - TSX\nDESCRIPTION: Replaces the default Next.js 'Home' component in 'app/page.tsx' to integrate authentication-based UI rendering using the previously defined server actions. Displays different UI for authenticated/unauthenticated users and wires up login/logout forms to corresponding actions. Requires 'auth, login, logout' server actions and appropriate CSS classes for UI elements.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { auth, login, logout } from \\\"./actions\\\";\\n\\nexport default async function Home() {\\n  const subject = await auth();\\n\\n  return (\\n    <div className={styles.page}>\\n      <main className={styles.main}>\\n        <Image\\n          className={styles.logo}\\n          src=\\\"/next.svg\\\"\\n          alt=\\\"Next.js logo\\\"\\n          width={180}\\n          height={38}\\n          priority\\n        />\\n        <ol>\\n          {subject ? (\\n            <>\\n              <li>\\n                Logged in as <code>{subject.properties.id}</code>.\\n              </li>\\n              <li>\\n                And then check out <code>app/page.tsx</code>.\\n              </li>\\n            </>\\n          ) : (\\n            <>\\n              <li>Login with your email and password.</li>\\n              <li>\\n                And then check out <code>app/page.tsx</code>.\\n              </li>\\n            </>\\n          )}\\n        </ol>\\n\\n        <div className={styles.ctas}>\\n          {subject ? (\\n            <form action={logout}>\\n              <button className={styles.secondary}>Logout</button>\\n            </form>\\n          ) : (\\n            <form action={login}>\\n              <button className={styles.primary}>Login with OpenAuth</button>\\n            </form>\\n          )}\\n        </div>\\n      </main>\\n    </div>\\n  );\\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying SST App to Production\nDESCRIPTION: Command to deploy the Astro application to a production environment using SST. This builds the Docker image and deploys it to AWS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Migrating to Previous Versioned Component with Vpc.v1 - SST Diff\nDESCRIPTION: Demonstrates how to explicitly reference and instantiate a prior version of an SST component (Vpc.v1) for backwards compatibility. The diff pattern shows renaming to retain old behavior; requires SST with v1 versioned components. Useful when maintaining legacy infrastructure.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n- const vpc = new sst.aws.Vpc(\"MyVpc\");\n+ const vpc = new sst.aws.Vpc.v1(\"MyVpc\");\n```\n\n----------------------------------------\n\nTITLE: Linking S3 Bucket to Fargate Service in SST Config (Container)\nDESCRIPTION: Updates the `sst.aws.Service` definition in `sst.config.ts` to link the previously defined S3 bucket (`bucket`). This makes the bucket's details accessible as environment variables within the running container, allowing the SvelteKit application to interact with it.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  // ...\n  link: [bucket],\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Linkable Parameter in SST v3 Lambda Function\nDESCRIPTION: Demonstrates how to access a Linkable parameter's properties in a Lambda function using SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyParameter.version);\n```\n\n----------------------------------------\n\nTITLE: Configuring Router with Static Bucket in SST AWS\nDESCRIPTION: Creates a router that serves static files from a bucket's public folder. The example demonstrates bucket creation with CloudFront access, uploading an image to the bucket, and configuring the router with path rewriting.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_98\n\nLANGUAGE: ts\nCODE:\n```\n// Create a bucket that CloudFront can access\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"cloudfront\",\n});\n\n// Upload the image to the `public` folder\nnew aws.s3.BucketObjectv2(\"MyImage\", {\n  bucket: bucket.name,\n  key: \"public/spongebob.svg\",\n  contentType: \"image/svg+xml\",\n  source: $asset(\"spongebob.svg\"),\n});\n\nconst router = new sst.aws.Router(\"MyRouter\", {\n  routes: {\n    \"/*\": {\n      bucket,\n      rewrite: { regex: \"^/(.*)$\", to: \"/public/$1\" },\n    },\n  },\n});\n\nreturn {\n  image: $interpolate`${router.url}/spongebob.svg`,\n};\n```\n\n----------------------------------------\n\nTITLE: Installing npm Packages for SolidStart AWS Integration\nDESCRIPTION: Installs required npm packages for router and AWS S3 interaction in the SolidStart app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @solidjs/router @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application to Production\nDESCRIPTION: Command to deploy the SST application to production environment. This uses the SST CLI to build the Docker image and deploy it to AWS with the stage name 'production'.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Importing Hono and SST Resource Modules (TypeScript)\nDESCRIPTION: Imports the `Hono` class from the 'hono' library and the `Resource` object from the 'sst' library in `index.ts`. These imports are essential prerequisites for creating the Hono application instance and interacting with the linked SST resources (like the R2 bucket `MyBucket`).\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { Hono } from \"hono\";\nimport { Resource } from \"sst\";\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependencies (Container)\nDESCRIPTION: Installs the necessary AWS SDK v3 packages (`@aws-sdk/client-s3` and `@aws-sdk/s3-request-presigner`) using npm for the container example. These are required by the server-side code within the container that generates S3 pre-signed URLs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Lambda Function in SST\nDESCRIPTION: This snippet demonstrates how to set up a Go Lambda function in SST by specifying the runtime and handler directory in the SST configuration file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/go-runtime-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  runtime: \"go\",\n  link: [bucket],\n  handler: \"./src\"\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in a Nuxt Project\nDESCRIPTION: This snippet installs and initializes the latest SST in the existing Nuxt project. It creates an SST configuration file and sets up AWS-specific defaults.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Deploying SvelteKit Application to Production (Serverless)\nDESCRIPTION: Deploys the entire application stack (SvelteKit app, S3 bucket, etc.) defined in `sst.config.ts` to AWS using the specified stage name 'production'. SST handles the provisioning and configuration of all cloud resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: SST Aurora Component Local Dev Credentials (TypeScript)\nDESCRIPTION: This shows the configuration for connecting to a locally running Postgres during development using the SST Aurora component's 'dev' property. Specifies local DB credentials and port for the SST pipeline to connect locally instead of deploying cloud resources. Intended to be placed in 'sst.config.ts', requires PostgreSQL running locally.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ndev: {\n  username: \"postgres\",\n  password: \"password\",\n  database: \"local\",\n  port: 5432,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SST for Deno Deployment\nDESCRIPTION: Updates the SST configuration to deploy the Deno app using AWS Fargate and ECS, including VPC and cluster setup.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"8000/http\" }],\n    },\n    dev: {\n      command: \"deno task dev\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying SST App to AWS\nDESCRIPTION: Deploys the SST application to AWS using the production stage. This command publishes all project resources to the specified cloud environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Passing Provider Credentials via sst.config.ts (TypeScript)\nDESCRIPTION: Shows how to provide the API token for Cloudflare directly in the configuration file under the provider's config object. This is an alternative to environment variables and is useful for supporting non-standard credential workflows. However, keep security best practices in mind when storing credentials in configuration files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: {\n    cloudflare: {\n      apiToken: \"aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SST Project with create sst CLI in Bash\nDESCRIPTION: This command uses npm to run the create sst CLI, which bootstraps a full-stack serverless application with end-to-end type safety. The generated project includes options for RDS or DynamoDB, GraphQL API with Pothos, and a React frontend.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/create-sst.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm init sst\n```\n\n----------------------------------------\n\nTITLE: Running a Local Postgres Container for Development (Bash)\nDESCRIPTION: This command runs a local Postgres 16.4 Docker container for development, mounting a persistent data folder. Sets up user credentials and exposes the default Postgres port. Useful for developing against a database locally with parity to cloud configuration. Requires Docker CLI and sufficient local permissions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run \\\n  --rm \\\n  -p 5432:5432 \\\n  -v $(pwd)/.sst/storage/postgres:/var/lib/postgresql/data \\\n  -e POSTGRES_USER=postgres \\\n  -e POSTGRES_PASSWORD=password \\\n  -e POSTGRES_DB=local \\\n  postgres:16.4\n```\n\n----------------------------------------\n\nTITLE: Creating EC2 Instances with Pulumi in SST\nDESCRIPTION: Demonstrates how to use raw Pulumi resources within SST to create an EC2 instance with a security group. The example configures a simple web server using Ubuntu and exposes it to the internet.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// Notice you don't need to import pulumi, it is already part of sst.\nconst securityGroup = new aws.ec2.SecurityGroup(\"web-secgrp\", {\n  ingress: [\n    {\n      protocol: \"tcp\",\n      fromPort: 80,\n      toPort: 80,\n      cidrBlocks: [\"0.0.0.0/0\"],\n    },\n  ],\n});\n\n// Find the latest Ubuntu AMI\nconst ami = aws.ec2.getAmi({\n  filters: [\n    {\n      name: \"name\",\n      values: [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"],\n    },\n  ],\n  mostRecent: true,\n  owners: [\"099720109477\"], // Canonical\n});\n\n// User data to set up a simple web server\nconst userData = `#!/bin/bash\nho \"Hello, World!\" > index.html\nhup python3 -m http.server 80 &`;\n\n// Create an EC2 instance\nconst server = new aws.ec2.Instance(\"web-server\", {\n  instanceType: \"t2.micro\",\n  ami: ami.then((ami) => ami.id),\n  userData: userData,\n  vpcSecurityGroupIds: [securityGroup.id],\n  associatePublicIpAddress: true,\n});\n\nreturn {\n  app: server.publicIp,\n};\n```\n\n----------------------------------------\n\nTITLE: Styling the Astro Upload Form - Astro\nDESCRIPTION: Provides CSS styles within an Astro component to visually format and layout the upload form and its elements. Style rules target 'main', 'form', and 'button' for improved UI. No dependencies; used directly inside Astro pages.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_7\n\nLANGUAGE: astro\nCODE:\n```\n<style>\\n  main {\\n    margin: auto;\\n    padding: 1.5rem;\\n    max-width: 60ch;\\n  }\\n  form {\\n    color: white;\\n    padding: 2rem;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    background-color: #23262d;\\n    background-image: none;\\n    background-size: 400%;\\n    border-radius: 0.6rem;\\n    background-position: 100%;\\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\\n  }\\n  button {\\n    appearance: none;\\n    border: 0;\\n    font-weight: 500;\\n    border-radius: 5px;\\n    font-size: 0.875rem;\\n    padding: 0.5rem 0.75rem;\\n    background-color: white;\\n    color: #111827;\\n  }\\n  button:active:enabled {\\n    background-color: #EEE;\\n  }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: SST v2 Handler Migration\nDESCRIPTION: Example of using v2 handlers in v3 projects by importing through an alias.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApiHandler } from \"sstv2/node/api\";\n\nexport const handler = ApiHandler((event) => { });\n```\n\n----------------------------------------\n\nTITLE: Adding Imports for tRPC Server in index.ts\nDESCRIPTION: Imports required packages and types for the tRPC server setup in index.ts including zod for schema validation and @trpc/server for creating the server. Ensures that all external dependencies are defined for the server configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { z } from \"zod\";\nimport { initTRPC } from \"@trpc/server\";\nimport { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\n```\n\n----------------------------------------\n\nTITLE: Configuring SST for AWS Deployment\nDESCRIPTION: Updates sst.config.ts to add a VPC, ECS Cluster, and Fargate service for deploying the Bun app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\");\n\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n    },\n    dev: {\n      command: \"bun dev\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Aurora Serverless v2 Database in SST\nDESCRIPTION: This snippet demonstrates how to add an Aurora Serverless v2 database to your SST app using the new Aurora component. It includes setting up a VPC and configuring the database engine.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/aurora-serverless-in-v3.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst vpc = new sst.aws.Vpc(\"MyVpc\");\n\nconst database = new sst.aws.Aurora(\"MyDatabase\", {\n  engine: \"postgres\",\n  vpc\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Autodeploy Runner Timeout in SST Config\nDESCRIPTION: Configuration for adjusting the timeout of the Autodeploy runner to 2 hours. This extends the default timeout for all autodeploy builds.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconsole: {\n  autodeploy: {\n    runner: { timeout: \"2 hours\" }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload API with cURL (bash)\nDESCRIPTION: Provides a shell command using cURL to make a POST request with a file attached to the previously defined Express file upload endpoint. Useful for manual or automated testing during development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -F file=@package.json http://localhost:80/\n```\n\n----------------------------------------\n\nTITLE: Configuring Autodeploy Workflow in SST Config (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the 'autodeploy.workflow' prop in the SST configuration file to customize the build process. It shows how to install dependencies and run different commands based on the event action.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/configure-autodeploy-workflow.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default $config({\n  app(input) { /* ... */ },\n  async run() { /* ... */ },\n  console: {\n    autodeploy: {\n      async workflow({ $, event }) {\n        await $`npm i`;\n        event.action === \"removed\"\n          ? await $`npm sst remove`\n          : await $`npm sst deploy`;\n      }\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying SST App\nDESCRIPTION: This command deploys the SST app, creating all the required infrastructure and Config, including storing secrets and parameters in AWS SSM.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/testing-in-sst.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ npm run deploy\n```\n\n----------------------------------------\n\nTITLE: Deploying Nuxt Application to AWS\nDESCRIPTION: Deploys the Nuxt application to AWS using the SST deployment command, specifying the production stage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload in Hono Container with curl - Bash\nDESCRIPTION: Uploads package.json to the containerized Hono API via a POST form file upload to the root route. Verifies end-to-end S3 upload via local development endpoint. No extra prerequisites beyond running SST/dev locally and correct port exposure.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\ncurl -F file=@package.json http://localhost:3000/\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Astro Project with npm - Bash\nDESCRIPTION: This snippet initializes a new Astro project using npm and navigates into the project directory. Prerequisite: Node.js and npm installed. Expected input: command line execution, outputs: new file structure with Astro project template in 'aws-astro'.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest aws-astro\\ncd aws-astro\n```\n\n----------------------------------------\n\nTITLE: Documenting SST Config with JSDoc Comments\nDESCRIPTION: Example of JSDoc comment block used in sst.config.ts files to generate documentation. Shows how to document AWS account related functionality using provider functions.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * ## Current AWS account\n *\n * You can use the `aws.getXXXXOutput()` provider functions to get info about the current\n * AWS account.\n * Learn more about [provider functions](/docs/providers/#functions).\n */\n```\n\n----------------------------------------\n\nTITLE: Configuring Kinesis Stream with Consumer in SST v2\nDESCRIPTION: Creates a Kinesis stream and adds a consumer Lambda function in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\nconst stream = new KinesisStream(stack, \"MyStream\");\n\nstream.addConsumers(stack, {\n  consumer: \"src/subscriber.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Building and Deploying Docker Image with SST\nDESCRIPTION: This bash command uses SST to build the Docker image and deploy the application to the production stage. It demonstrates how to use SST for container-based deployments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Instantiating Astro App with SST (TypeScript)\nDESCRIPTION: This simple snippet deploys an Astro frontend using the SST AWS Astro construct. No parameters are specified; it assumes default settings. Suitable for deploying basic sites leveraging Astro's SSR and streaming capabilities. Requires SST AWS library and Astro project setup.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew sst.aws.Astro(\"MyWeb\");\n```\n\n----------------------------------------\n\nTITLE: Imports for Container-Based Hono S3 Upload/Download - TSX\nDESCRIPTION: Imports all necessary AWS SDK libraries, S3 client tools, SST Resource API, and the Upload class for multi-part uploads to S3. Sets up S3Client for reuse in API handlers. Needs to be placed at the top of src/index.tsx. Prerequisite for all S3 interactions in the containerized route handlers.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Resource } from 'sst'\\nimport {\\n  S3Client,\\n  GetObjectCommand,\\n  ListObjectsV2Command,\\n} from '@aws-sdk/client-s3'\\nimport { Upload } from '@aws-sdk/lib-storage'\\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\\n\\nconst s3 = new S3Client();\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint with React Plugin for TypeScript in Vite\nDESCRIPTION: This snippet demonstrates how to configure ESLint with the React plugin for a TypeScript project using Vite. It includes setting the React version, adding the React plugin, and enabling recommended rules.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/packages/web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// eslint.config.js\nimport react from 'eslint-plugin-react'\n\nexport default tseslint.config({\n  // Set the react version\n  settings: { react: { version: '18.3' } },\n  plugins: {\n    // Add the react plugin\n    react,\n  },\n  rules: {\n    // other rules...\n    // Enable its recommended rules\n    ...react.configs.recommended.rules,\n    ...react.configs['jsx-runtime'].rules,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing AWS SDK for S3 Operations\nDESCRIPTION: Imports necessary modules from AWS SDK for S3 operations in the Bun app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport {\n  S3Client,\n  GetObjectCommand,\n  ListObjectsV2Command,\n} from \"@aws-sdk/client-s3\";\nimport { Upload } from \"@aws-sdk/lib-storage\";\nimport { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n\nconst s3 = new S3Client();\n```\n\n----------------------------------------\n\nTITLE: Creating a .dockerignore File for Next.js Application\nDESCRIPTION: A .dockerignore file that excludes unnecessary files and directories when building the Docker image for the Next.js application. This helps reduce the image size and build time.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n.git\n.next\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Creating and Subscribing to S3 Bucket in SST v3\nDESCRIPTION: Demonstrates how to create an S3 bucket and subscribe a Lambda function to its events in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nbucket.subscribe(\"src/subscriber.handler\");\n```\n\n----------------------------------------\n\nTITLE: Connecting to Redis from SolidStart App\nDESCRIPTION: Configures the `/` route to increment a counter in Redis, using Clusters from `ioredis`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { Cluster } from \"ioredis\";\nimport { createAsync, cache } from \"@solidjs/router\";\n\nconst getCounter = cache(async () => {\n  \"use server\";\n  const redis = new Cluster(\n    [{ host: Resource.MyRedis.host, port: Resource.MyRedis.port }],\n    {\n      dnsLookup: (address, callback) => callback(null, address),\n      redisOptions: {\n        tls: {},\n        username: Resource.MyRedis.username,\n        password: Resource.MyRedis.password,\n      },\n    }\n  );\n\n  return await redis.incr(\"counter\");\n}, \"counter\");\n\nexport const route = {\n  load: () => getCounter(),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Tunnel for Redis VPC Access\nDESCRIPTION: Installs the SST tunnel for accessing the Redis cluster within the VPC from the local machine.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Configuring Production Resource Retention\nDESCRIPTION: Configuration to retain critical resources like buckets and databases when removing the production stage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nremoval: input?.stage === \"production\" ? \"retain\" : \"remove\",\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with sst shell and tsx (Bash)\nDESCRIPTION: Executes a TypeScript script within the scripts package using the sst shell CLI and tsx. The command runs a script at src/example.ts, enabling development scripts and utilities to run in the monorepo environment. Requires sst and tsx to be installed in the project dependencies.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm run shell src/example.ts\n```\n\n----------------------------------------\n\nTITLE: Setting SST App Default Removal Policy\nDESCRIPTION: Set the default removal policy to retain resources for the production stage in SST v2 app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.setDefaultRemovalPolicy(\"retain\");\n```\n\n----------------------------------------\n\nTITLE: File Upload Handler via POST to S3 - TypeScript\nDESCRIPTION: Implements a POST route in the Hono app to accept file uploads, extract file data from the multipart request, and upload the file directly to S3 using the @aws-sdk/lib-storage Upload class. Ensures that ContentType, Key, and Body are properly set, and returns a confirmation message on success. Requires linking the S3 bucket as Resource.MyBucket and importing the relevant AWS SDK modules.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\napp.post('/', async (c) => {\\n  const body = await c.req.parseBody();\\n  const file = body['file'] as File;\\n\\n  const params = {\\n    Bucket: Resource.MyBucket.name,\\n    ContentType: file.type,\\n    Key: file.name,\\n    Body: file,\\n  };\\n  const upload = new Upload({\\n    params,\\n    client: s3,\\n  });\\n  await upload.done();\\n\\n  return c.text('File uploaded successfully.');\\n});\\n\n```\n\n----------------------------------------\n\nTITLE: Stringifying JSON from Output Objects with $jsonStringify Helper - SST TypeScript\nDESCRIPTION: Utilizes the $jsonStringify helper for serializing Output<object> values. This function abstracts the serialization logic behind an easy-to-use global, returning an Output<string> representing the JSON string of the input.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst policy = $jsonStringify(policyObj);\n```\n\n----------------------------------------\n\nTITLE: Accessing Linked Resources in Go Lambda Function\nDESCRIPTION: Demonstrates how to use the SST Go SDK to access linked resources within a Go Lambda function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_67\n\nLANGUAGE: go\nCODE:\n```\nfunc handler() (string, error) {\n  bucket, err := resource.Get(\"MyBucket\", \"name\")\n  if err != nil {\n    return \"\", err\n  }\n  return bucket.(string), nil\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting and Utilizing Redis Cluster in Nuxt App\nDESCRIPTION: Configures a Nuxt API to increment a counter in Redis, using ioredis for interaction with the Redis cluster.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport { Cluster } from \"ioredis\";\n\nconst redis = new Cluster(\n  [{ host: Resource.MyRedis.host, port: Resource.MyRedis.port }],\n  {\n    dnsLookup: (address, callback) => callback(null, address),\n    redisOptions: {\n      tls: {},\n      username: Resource.MyRedis.username,\n      password: Resource.MyRedis.password,\n    },\n  }\n);\n\nexport default defineEventHandler(async () => {\n  return await redis.incr(\"counter\");\n})\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up SST Component Import Configuration (TypeScript Diff)\nDESCRIPTION: Illustrates the final step after successfully importing a resource into an SST component. The `opts.import` line is removed from the `transform` function, as it's only needed for the initial import operation. The adjusted `args` must be kept to ensure SST correctly manages the resource going forward.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\nnew sst.aws.Bucket(\"MyBucket\", {\n  transform: {\n    bucket: (args, opts) => {\n      args.bucket = \"mybucket-xnbmhcvd\";\n      args.forceDestroy = undefined;\n\n-      opts.import = \"mybucket-xnbmhcvd\";\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Development Script to package.json\nDESCRIPTION: Adds a 'dev' script to package.json for running the Bun app with file watching.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  \"dev\": \"bun run --watch index.ts\"\n},\n```\n\n----------------------------------------\n\nTITLE: Deploying Updated Pulumi Resource Import Configuration (Bash)\nDESCRIPTION: Command to redeploy the SST application after correcting the Pulumi resource arguments to match the existing AWS resource. This deployment should successfully import the resource into SST management.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy\n```\n\n----------------------------------------\n\nTITLE: Installing SST Tunnel for Database Access (Bash)\nDESCRIPTION: Executes the 'sst tunnel install' command with root privileges to create network support for locally accessing a VPC-bounded Aurora database. Required once per machine; must be run prior to local SST dev commands if using private networking or tunnel-enabled VPCs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_15\n\nLANGUAGE: Bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Deno HTTP Server\nDESCRIPTION: Sets up a simple HTTP server using Deno's built-in serve function, handling GET requests to the root path.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nDeno.serve(async (req) => {\n  const url = new URL(req.url);\n\n  if (url.pathname === \"/\" && req.method === \"GET\") {\n    return new Response(\"Hello World!\");\n  }\n\n  return new Response(\"404!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for Building Express App Container (dockerfile)\nDESCRIPTION: Defines a Dockerfile for building a container image suitable for AWS Fargate deployment. The image uses node:lts-alpine, sets up a work directory, installs npm dependencies, adds the application files, and defines the entrypoint. Docker Desktop is required for building and deploying this image.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_12\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts-alpine\\n\\nWORKDIR /app/\\n\\nCOPY package.json /app\\nRUN npm install\\n\\nCOPY index.mjs /app\\n\\nENTRYPOINT [\\\"node\\\", \\\"index.mjs\\\"]\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependencies\nDESCRIPTION: Installs required AWS SDK packages for S3 operations in the Bun app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbun install @aws-sdk/client-s3 @aws-sdk/lib-storage @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Rendering Streaming Data in Astro Component (Astro)\nDESCRIPTION: This Astro component asynchronously loads a list of 'friends' characters after a 3-second delay and renders them as cards. Demonstrates how to utilize Astro's streaming in SSR mode: the section will render after the data promise resolves, showing delayed content. No external dependencies except Astro, but must be used in an environment supporting HTML streaming.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_6\n\nLANGUAGE: Astro\nCODE:\n```\n---\nimport type { Character } from \"./character\";\n\nconst friends: Character[] = await new Promise((resolve) => setTimeout(() => {\n  setTimeout(() => {\n    resolve(\n      [\n        { name: \"Patrick Star\", image: \"patrick.png\" },\n        { name: \"Sandy Cheeks\", image: \"sandy.png\" },\n        { name: \"Squidward Tentacles\", image: \"squidward.png\" },\n        { name: \"Mr. Krabs\", image: \"mr-krabs.png\" },\n      ]\n    );\n  }, 3000);\n}));\n---\n<div class=\"grid\">\n  {friends.map((friend) => (\n    <div class=\"card\">\n      <img class=\"img\" src={friend.image} alt={friend.name} />\n      <p>{friend.name}</p>\n    </div>\n  ))}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro Site in SST v3\nDESCRIPTION: Sets up an Astro site with a custom domain in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Astro(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SST Tunnel for Local Development\nDESCRIPTION: Installs the SST tunnel to connect to a Redis cluster in a VPC from a local machine. This command requires sudo privileges.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_55\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Running SST Deployment via CLI\nDESCRIPTION: This command initiates the deployment process using the SST Command Line Interface. It deploys the infrastructure defined in the `sst.config.ts` file using the configured engine (potentially Pulumi in the new model discussed). Requires the SST CLI to be installed globally.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsst deploy\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Environment - Bash\nDESCRIPTION: Runs SST's local development environment, which launches the SST runtime, Next.js dev server, and the OpenAuth server together. Outputs Lambda URLs and local endpoints for testing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Defining an S3 Bucket Resource in SST (TypeScript)\nDESCRIPTION: This TypeScript code snippet within `sst.config.ts` defines an AWS S3 Bucket resource named 'MyBucket' using the SST AWS construct library. The `access: \"public\"` configuration makes the objects within the bucket publicly readable, suitable for scenarios like hosting website assets or public downloads, although caution is advised regarding security implications.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  access: \"public\"\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Redis to ECS Service\nDESCRIPTION: Links the Redis cluster to the ECS Fargate service within SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  // ...\n  link: [redis],\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing IAM Policy Template for CloudFormation Stack in JSON\nDESCRIPTION: This code shows the changes needed to customize IAM permissions for the CloudFormation stack by replacing the default AdministratorAccess policy with more specific permissions including ReadOnlyAccess and targeted actions for S3, EventBridge, IAM, CloudWatch Logs, and Lambda functions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n    \"SSTRole\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        ...\n        \"ManagedPolicyArns\": [\n-         \"arn:aws:iam::aws:policy/AdministratorAccess\"\n+         \"arn:aws:iam::aws:policy/ReadOnlyAccess\"\n+       ],\n+       \"Policies\": [\n+         {\n+           \"PolicyName\": \"SSTPolicy\",\n+           \"PolicyDocument\": {\n+             \"Version\": \"2012-10-17\",\n+             \"Statement\": [\n+               {\n+                 \"Effect\": \"Allow\",\n+                 \"Action\": [\n+                   \"s3:PutBucketNotification\"\n+                 ],\n+                 \"Resource\": [\n+                   \"arn:aws:s3:::sstbootstrap-*\"\n+                 ]\n+               },\n+               {\n+                 \"Effect\": \"Allow\",\n+                 \"Action\": [\n+                   \"events:PutRule\",\n+                   \"events:PutTargets\"\n+                 ],\n+                 \"Resource\": {\n+                   \"Fn::Sub\": \"arn:aws:events:*:${AWS::AccountId}:rule/SSTConsole*\"\n+                 }\n+               },\n+               {\n+                 \"Effect\": \"Allow\",\n+                 \"Action\": [\n+                   \"iam:CreateRole\",\n+                   \"iam:DeleteRole\",\n+                   \"iam:DeleteRolePolicy\",\n+                   \"iam:PassRole\",\n+                   \"iam:PutRolePolicy\"\n+                 ],\n+                 \"Resource\": {\n+                   \"Fn::Sub\": \"arn:aws:iam::${AWS::AccountId}:role/SSTConsolePublisher*\"\n+                 }\n+               },\n+               {\n+                 \"Effect\": \"Allow\",\n+                 \"Action\": [\n+                   \"logs:CreateLogGroup\",\n+                   \"logs:PutSubscriptionFilter\"\n+                 ],\n+                 \"Resource\": {\n+                   \"Fn::Sub\": \"arn:aws:logs:*:${AWS::AccountId}:log-group:*\"\n+                 }\n+               },\n+               {\n+                 \"Effect\": \"Allow\",\n+                 \"Action\": [\n+                   \"lambda:InvokeFunction\"\n+                 ],\n+                 \"Resource\": {\n+                   \"Fn::Sub\": \"arn:aws:lambda:*:${AWS::AccountId}:function:*\"\n+                 }\n+               }\n+             ]\n+           }\n+         }\n        ]\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Example Output of 'sst dev' Command (bash)\nDESCRIPTION: Shows typical console output from the `npx sst dev` command after a successful deployment to the development environment. It confirms completion and provides the public URL (e.g., `https://my-hono-api-jayair-honoscript.sst-15d.workers.dev`) where the deployed Hono API is accessible for testing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n✓  Complete\n   Hono: https://my-hono-api-jayair-honoscript.sst-15d.workers.dev\n```\n\n----------------------------------------\n\nTITLE: Installing MQTT Package\nDESCRIPTION: Installs the MQTT npm package required for creating realtime connections in the chat application. Ensures that the application can publish and subscribe to topics.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install mqtt\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js Site in SST v2\nDESCRIPTION: Sets up a Next.js site with a custom domain in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\nnew NextjsSite(stack, \"MyWeb\", {\n  customDomain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing SST Tunnel for Local Redis Connection\nDESCRIPTION: This bash command installs the SST tunnel, which is necessary for connecting to a Redis cluster in a VPC from a local machine. It requires sudo privileges to create a network interface.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_85\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Resolving Multiple Outputs Together with $resolve - SST TypeScript\nDESCRIPTION: Combines a list of Output values into a single Output using $resolve, then applies a callback to the resolved values. Useful for when multiple unresolved outputs need to be synchronized and operated on simultaneously. Inputs are an array of Outputs; output is an Output with a tuple or array of resolved values.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n$resolve([bucket.name, worker.url]).apply(([bucketName, workerUrl]) => {\n  console.log(`Bucket: ${bucketName}`);\n  console.log(`Worker: ${workerUrl}`);\n})\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Packages for S3 Operations\nDESCRIPTION: Command to install the required AWS SDK packages for S3 operations. This includes the S3 client library and the package for generating pre-signed URLs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Declaring DevCommand for Prisma Studio (TypeScript, sst.config.ts)\nDESCRIPTION: Creates a DevCommand in SST to optionally start Prisma Studio in dev mode, passing in the runtime DATABASE_URL. Environment must support shell commands. Enables developers to launch Prisma's GUI for database exploration with correct config.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.x.DevCommand(\\\"Prisma\\\", {\\n  environment: { DATABASE_URL },\\n  dev: {\\n    autostart: false,\\n    command: \\\"npx prisma studio\\\",\\n  },\\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for SST App\nDESCRIPTION: These commands navigate to the newly created SST app directory and install the necessary dependencies.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/testing-in-sst.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cd my-sst-app\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Sample Successful SST Deploy Output (bash)\nDESCRIPTION: Sample output shown after running sst deploy, indicating successful application deployment and providing the ECS load balancer endpoint to access the deployed Express app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n✓  Complete\\n   MyService: http://jayair-MyServiceLoadBala-592628062.us-east-1.elb.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Docker Ignore File for Node.js (bash)\nDESCRIPTION: Specifies files or directories (here, node_modules) to be excluded from Docker build context, placed inside a file named .dockerignore. Ensures faster, cleaner Docker image builds.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Creating Cognito Auth in SST v2\nDESCRIPTION: Sets up Cognito authentication using a simplified constructor in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nnew Cognito(stack, \"MyAuth\");\n```\n\n----------------------------------------\n\nTITLE: Creating a TanStack Start Project using Gitpick (Bash)\nDESCRIPTION: This snippet demonstrates how to create a new TanStack Start project using a specific template from the TanStack router examples via `gitpick`. It clones the 'start-bare' example into a directory named 'aws-tanstack-start' and then changes the current directory into the newly created project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx gitpick TanStack/router/tree/main/examples/react/start-bare aws-tanstack-start\ncd aws-tanstack-start\n```\n\n----------------------------------------\n\nTITLE: Accessing Linked Resources with SST SDK\nDESCRIPTION: These snippets demonstrate how to access linked resources using the SST SDK in different frameworks.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyBucket.name);\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro Adapter for HTML Streaming with SST (TypeScript)\nDESCRIPTION: This snippet updates the 'astro.config.mjs' to enable streaming mode for Astro deployments on AWS via the 'astro-sst' adapter. By setting 'responseMode' to 'stream', any components returning promises will have their results streamed to the client, improving page performance. Prerequisites include having the 'astro-sst' package installed and properly configured.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nadapter: aws({\n  responseMode: \"stream\"\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Fargate and ECS Cluster in sst.config.ts\nDESCRIPTION: Configures an ECS Cluster and Fargate service to deploy the SolidStart app in a container with SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_13\n\nLANGUAGE: js\nCODE:\n```\nasync run() {\n  const vpc = new sst.aws.Vpc(\"MyVpc\", { bastion: true });\n  const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n\n  new sst.aws.Service(\"MyService\", {\n    cluster,\n    loadBalancer: {\n      ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n    },\n    dev: {\n      command: \"npm run dev\",\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Importing a Core Module in TypeScript\nDESCRIPTION: Demonstrates an import statement to use the Example module from the core package and invokes its hello function. Assumes that package exports and paths are correctly configured. Key for accessing shared code in a multi-package monorepo workspace.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { Example } from \"@monorepo-template/core/example\";\n\nExample.hello();\n```\n\n----------------------------------------\n\nTITLE: Deploying the App with SST\nDESCRIPTION: Command to build the Docker image and deploy the application using SST to a production environment. This will deploy the Hono app as a Fargate service in AWS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Python Project Configuration with UV\nDESCRIPTION: TOML configuration for Python project using uv package manager. Specifies project metadata and Python version constraint to match Lambda runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-fastapi/README.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"aws-python\"\nversion = \"0.1.0\"\ndescription = \"A SST app\"\nauthors = [\n    {name = \"<your_name_here>\", email = \"<your_email_here>\" },\n]\nrequires-python = \"==3.11.*\"\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting SST Development Server\nDESCRIPTION: This snippet shows how to install project dependencies and start the SST development server. It uses npm to manage packages and run scripts defined in the project's package.json file.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-hono-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Attaching Provider to Function for Regional Deployment\nDESCRIPTION: Creates a Lambda function with a specific regional provider to deploy the function to a different AWS region than the default.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", { handler: \"index.handler\" }, { provider });\n```\n\n----------------------------------------\n\nTITLE: Incorrect Output Usage with Direct Concatenation - SST TypeScript\nDESCRIPTION: Shows an invalid approach to using Output<string> values directly in expressions, such as string concatenation. Since 'myFunction.url' is unresolved at this point, this pattern will not work. Demonstrates a limitation of SST/Pulumi Outputs—requires transformation functions instead of direct arithmetic or string ops.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst newUrl = myFunction.url + \"/foo\";\n```\n\n----------------------------------------\n\nTITLE: Installing SST Tunnel Network Interface (Bash)\nDESCRIPTION: This Bash command uses sudo and the SST CLI to install a tunnel network interface on the local machine, required for accessing cloud resources (like a VPC-isolated Redis) during local development. Needs 'npx', 'sst', and root privileges. Should be run once before local development to ensure networking parity with deployed environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Monorepo Directory Structure Overview (Text)\nDESCRIPTION: Illustrates the hierarchical directory structure of a typical SST monorepo. Serves as a visual reference for organizing configuration, shared code, scripts, and infrastructure directories. Conveys overall project organization for developers and maintainers.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_2\n\nLANGUAGE: txt\nCODE:\n```\nmy-sst-app\n├─ sst.config.ts\n├─ package.json\n├─ packages\n│  ├─ functions\n│  ├─ scripts\n│  └─ core\n└─ infra\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings in CMake\nDESCRIPTION: Sets up the installation configuration including bundle directory, installation prefix, and cleaning of previous build artifacts.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_9\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n```\n\n----------------------------------------\n\nTITLE: Access Linked Resources in Rust with SST SDK\nDESCRIPTION: Provides an example of accessing linked resources in Rust using the SST SDK. Includes setup instructions in Cargo.toml and demonstrates type-safe struct access using the SDK.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference/sdk.mdx#2025-04-22_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\nsst_sdk = \"0.1.0\"\n```\n\nLANGUAGE: rust\nCODE:\n```\nuse sst_sdk::Resource;\n\n#[derive(serde::Deserialize, Debug)]\nstruct Bucket {\n    name: String,\n}\n\nfn main() {\n    let resource = Resource::init().unwrap();\n    // access your linked resources as a typesafe struct that implements Deserialize\n    let Bucket { name } = resource.get(\"MyBucket\").unwrap();\n    // or as a weakly typed json value (that also implements Deserialize)\n    let openai_key: serde_json::Value = resource.get(\"OpenaiSecret\").unwrap();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating tsconfig.json for Building the TypeScript App\nDESCRIPTION: These modifications to the tsconfig.json file configure the TypeScript compiler to output compiled files to the dist directory and exclude node_modules from compilation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_24\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"outDir\": \"./dist\"\n  },\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Latest SST Component with New Name - SST Diff\nDESCRIPTION: Shows the diff to migrate a component to the latest version by renaming and instantiating the updated SST component. This results in deletion and recreation of resources, possibly leading to downtime. Inputs are the old and new names; output is the updated resource stack.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n- const vpc = new sst.aws.Vpc(\"MyVpc\");\n+ const vpc = new sst.aws.Vpc(\"MyNewVpc\");\n```\n\n----------------------------------------\n\nTITLE: Subscribing to MQTT Topics and Handling Messages\nDESCRIPTION: Allows the Chat component to subscribe to a specific MQTT topic and updates message state upon receiving data. Handles connection events and sets up necessary callbacks.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nuseEffect(() => {\n  const connection = createConnection(endpoint, authorizer);\n\n  connection.on(\"connect\", async () => {\n    try {\n      await connection.subscribeAsync(topic, { qos: 1 });\n      setConnection(connection);\n    } catch (e) { }\n  });\n  connection.on(\"message\", (_fullTopic, payload) => {\n    const message = new TextDecoder(\"utf8\").decode(new Uint8Array(payload));\n    setMessages((prev) => [...prev, message]);\n  });\n  connection.on(\"error\", console.error);\n\n  connection.connect();\n\n  return () => {\n    connection.end();\n    setConnection(null);\n  };\n}, [topic, endpoint, authorizer]);\n```\n\n----------------------------------------\n\nTITLE: Updating SST to Version 3\nDESCRIPTION: Updates SST packages to version 3 using npm. It requires Node.js and npm installed.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpm update sst\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with SST Shell in Bash\nDESCRIPTION: Command to run a script using the SST shell CLI and tsx, demonstrating how to execute scripts in the project.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run shell src/example.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Site in SST v2\nDESCRIPTION: Creates a Remix site with a custom domain in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nnew RemixSite(stack, \"MyWeb\", {\n  customDomain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Error Logging for SST Console Issues Detection in Node.js\nDESCRIPTION: Example of how to properly log errors so they are detected by the SST Console's Issues feature. This requires logging error objects with console.error() for both Lambda functions and containers (with the additional SDK import for containers).\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconsole.error(new Error(\"my-error\"));\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies for S3 and Routing (TypeScript)\nDESCRIPTION: This TypeScript snippet lists the necessary import statements for the functionality shown in the previous S3 pre-signed URL generation and route handling example (likely within `src/routes/index.tsx`, though the title indicates `+page.server.ts`). It imports `Resource` from SST for accessing linked resources, the `Form` component, TanStack Start/Router utilities (`createServerFn`, `createFileRoute`), and AWS SDK v3 components (`getSignedUrl`, `S3Client`, `PutObjectCommand`) for S3 interaction.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from 'sst'\nimport Form from '~/components/Form'\nimport { createServerFn } from '@tanstack/react-start'\nimport { createFileRoute } from '@tanstack/react-router'\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner'\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3'\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Scripts for SST Shell Commands\nDESCRIPTION: This snippet shows how to update the package.json scripts to use SST's shell command for running Drizzle Kit operations with the correct credentials.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n\"db:generate\": \"sst shell drizzle-kit generate\",\n\"db:migrate\": \"sst shell drizzle-kit migrate\",\n\"db:push\": \"sst shell drizzle-kit push\",\n\"db:studio\": \"sst shell drizzle-kit studio\",\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload via API Endpoint - Bash\nDESCRIPTION: Uses curl to upload a file (package.json) via HTTP PUT to the Hono Lambda server, with the upload URL obtained dynamically via a GET to the API root. Should be run from the client or server environment where the API is accessible. Demonstrates chaining curl commands for dynamic upload management.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl --upload-file package.json \\\"$(curl https://gyrork2ll35rsuml2yr4lifuqu0tsjft.lambda-url.us-east-1.on.aws)\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Start SST Dev Mode\nDESCRIPTION: Runs the SST development server, which sets up local development resources and connects to remote AWS resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Install Tunnel for Local Environment Access - Bash\nDESCRIPTION: This Bash command installs a network tunnel on the local machine. The command uses 'sudo' to acquire the necessary privileges for network configuration, allowing local applications to access resources within a VPC.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/live.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nsudo sst tunnel install\n```\n\n----------------------------------------\n\nTITLE: Defining Object Properties in a TypeScript Method\nDESCRIPTION: Illustrates using object properties with optional nested structures for defining methods in TypeScript, integrating complex parameter structures.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n\nnew Function(stack, \"Function\", {\n  architecture: \"arm_64\",\n})\n\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Mode\nDESCRIPTION: This command starts the SST development mode, which concurrently runs the Nuxt application and SST services.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for AWS Lambda\nDESCRIPTION: This code snippet updates the Vite configuration to use the AWS Lambda preset, required for proper deployment on AWS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nplugins: [analog({\n+  nitro: {\n+    preset: \"aws-lambda\",\n+  }\n})],\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping an SST Project (Bash)\nDESCRIPTION: Initializes an SST (Serverless Stack) setup and installs dependencies via npm. This provides the sst.config.ts configuration file required for further AWS resource definitions in code. Assumes npx and npm are available, and must be run from the root of the NestJS project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\\nnpm install\\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Job Handler in SST\nDESCRIPTION: This snippet shows how to implement a Job handler function in SST. It includes type declarations for job types and defines an async handler function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/long-running-jobs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { JobHandler } from \"@serverless-stack/node/job\";\n\ndeclare module \"@serverless-stack/node/job\" {\n  export interface JobTypes {\n    MyJob: {\n      foo: string;\n    };\n  }\n}\n\nexport const handler = JobHandler(\"MyJob\", async (payload) => {\n  // Do the job\n});\n```\n\n----------------------------------------\n\nTITLE: Defining AWS Credentials in ~/.aws/credentials File\nDESCRIPTION: Example of how to structure the AWS credentials file with multiple profiles for different environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/iam-credentials.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n[default]\naws_access_key_id = <DEFAULT_ACCESS_KEY_ID>\naws_secret_access_key = <DEFAULT_SECRET_ACCESS_KEY>\n\n[staging]\naws_access_key_id = <STAGING_ACCESS_KEY_ID>\naws_secret_access_key = <STAGING_SECRET_ACCESS_KEY>\n\n[production]\naws_access_key_id = <PRODUCTION_ACCESS_KEY_ID>\naws_secret_access_key = <PRODUCTION_SECRET_ACCESS_KEY>\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Modes\nDESCRIPTION: Defines build configuration types (Debug, Profile, Release) and handles multi-configuration generators.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating a new Astro project using npm\nDESCRIPTION: Command to create a new Astro project based on the 'basics' template using npm.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/astro5-static/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Creating Static Site in SST v2\nDESCRIPTION: Sets up a static site with a custom domain in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nnew StaticSite(stack, \"MyWeb\", {\n  customDomain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Component in SST v3\nDESCRIPTION: This snippet demonstrates how to set up the new Auth component in SST v3 using OpenAuth. It specifies the domain for the auth service and points to an authorizer handler.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/openauth-beta.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Auth(\"MyAuth\", {\n  domain: \"auth.myapp.com\",\n  authorizer: \"src/auth.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SST Project in TypeScript\nDESCRIPTION: TypeScript configuration for sst.config.ts file to set up deployment settings for the Flutter web application. It defines the app name, removal policy, and static site deployment details.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"./.sst/platform/config.d.ts\" />\n\nexport default $config({\n  app(input) {\n    return {\n      name: \"aws-flutter-web\",\n      removal: input?.stage === \"production\" ? \"retain\" : \"remove\",\n      home: \"aws\",\n    };\n  },\n  async run() {\n    new sst.aws.StaticSite(\"MySite\", {\n      build: {\n        command: \"flutter build web\",\n        output: \"build/web\",\n      },\n    });\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Defining simpleArgs Method with Boolean Arguments in TypeScript\nDESCRIPTION: Specifies a method taking boolean arguments, showcasing how to define methods with simple parameters in TypeScript. The method doesn't return any value.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nsimpleArgs(true, false ,true): void\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Commands to start the Nuxt 3 development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Initializing SST and Installing Dependencies (bash)\nDESCRIPTION: Initializes an SST project in the current directory using the latest version of SST (`npx sst@latest init`). It prompts the user to select Cloudflare as the provider. Afterward, it installs the necessary Node.js dependencies listed in the generated `package.json` file using `npm install`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing SST Project - Bash\nDESCRIPTION: This command initializes the SST (Serverless Stack Toolkit) in your app, setting up the required SST config files for AWS deployment. Select the AWS option when prompted. Prerequisites are a working Node.js environment and an existing Next.js app directory.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\n```\n\n----------------------------------------\n\nTITLE: Initializing a NestJS Project (Bash)\nDESCRIPTION: Scaffolds a new NestJS application and navigates into the created project directory. This step uses the NestJS CLI and assumes it is installed globally (otherwise install with npm). It is mandatory for creating the app structure before integrating SST or AWS infrastructure.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnest new aws-nestjs-container\\ncd aws-nestjs-container\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying SolidStart Containerized App on AWS\nDESCRIPTION: Deploys the Dockerized SolidStart app to AWS using SST with Docker support.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --docker\n```\n\n----------------------------------------\n\nTITLE: Creating Form Component for Upload - TSX\nDESCRIPTION: Defines a client-side form component in a Next.js app for file uploads to a pre-signed URL. Ensure the styles and form submission logic are correctly implemented.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport styles from \"./form.module.css\";\n\nexport default function Form({ url }: { url: string }) {\n  return (\n    <form\n      className={styles.form}\n      onSubmit={async (e) => {\n        e.preventDefault();\n\n        const file = (e.target as HTMLFormElement).file.files?.[0] ?? null;\n\n        const image = await fetch(url, {\n          body: file,\n          method: \"PUT\",\n          headers: {\n            \"Content-Type\": file.type,\n            \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n          },\n        });\n\n        window.location.href = image.url.split(\"?\")[0];\n      }}\n    >\n      <input name=\"file\" type=\"file\" accept=\"image/png, image/jpeg\" />\n      <button type=\"submit\">Upload</button>\n    </form>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Astro App Deployment\nDESCRIPTION: A multi-stage Dockerfile to build and deploy an Astro application. It separates production dependencies, build process, and runtime, optimizing the final image size.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_21\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:lts AS base\nWORKDIR /app\n\nCOPY package.json package-lock.json ./\n\nFROM base AS prod-deps\nRUN npm install --omit=dev\n\nFROM base AS build-deps\nRUN npm install\n\nFROM build-deps AS build\nCOPY . .\nRUN npm run build\n\nFROM base AS runtime\nCOPY --from=prod-deps /app/node_modules ./node_modules\nCOPY --from=build /app/dist ./dist\n\nENV HOST=0.0.0.0\nENV PORT=4321\nEXPOSE 4321\nCMD node ./dist/server/entry.mjs\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Server\nDESCRIPTION: Command to start the SST development server locally, which enables local development with remote AWS resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_41\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Setting Cloudflare Credentials via Environment Variables (bash)\nDESCRIPTION: Exports the Cloudflare API token and default account ID as environment variables (`CLOUDFLARE_API_TOKEN` and `CLOUDFLARE_DEFAULT_ACCOUNT_ID`). These variables are required by SST to interact with the Cloudflare API for deployment and resource management. Replace the placeholder values with actual credentials.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\nexport CLOUDFLARE_DEFAULT_ACCOUNT_ID=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n----------------------------------------\n\nTITLE: Docker Build and Run Commands\nDESCRIPTION: Commands for building and running Docker containers using different package managers (npm, pnpm, and bun). Includes instructions for building the image and running the container on port 3000.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-ssr/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\ndocker build -t my-app .\n\n# For pnpm\ndocker build -f Dockerfile.pnpm -t my-app .\n\n# For bun\ndocker build -f Dockerfile.bun -t my-app .\n\n# Run the container\ndocker run -p 3000:3000 my-app\n```\n\n----------------------------------------\n\nTITLE: Linking a Custom Resource to a Function\nDESCRIPTION: This snippet demonstrates how to link a custom linkable resource to an SST function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyApi\", {\n  handler: \"src/lambda.handler\",\n  link: [myLinkable]\n});\n```\n\n----------------------------------------\n\nTITLE: Creating File Upload Form in TSX\nDESCRIPTION: Defines a React component in TSX for the upload form, which includes handling file input and form submission to upload images. It supports PNG and JPEG file types and utilizes signed URLs for secure uploads.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Home({\n  loaderData,\n}: Route.ComponentProps) {\n  const { url } = loaderData;\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center gap-8\">\n        <h1 className=\"leading text-2xl font-bold text-gray-800 dark:text-gray-100\">\n          Welcome to React Router!\n        </h1>\n        <form\n          className=\"flex flex-row gap-4\"\n          onSubmit={async (e) => {\n            e.preventDefault();\n\n            const file = (e.target as HTMLFormElement).file.files?.[0]!;\n\n            const image = await fetch(url, {\n              body: file,\n              method: \"PUT\",\n              headers: {\n                \"Content-Type\": file.type,\n                \"Content-Disposition\": `attachment; filename=\"${file.name}\"`,\n              },\n            });\n\n            window.location.href = image.url.split(\"?\")[0];\n          }}\n        >\n          <input\n            name=\"file\"\n            type=\"file\"\n            accept=\"image/png, image/jpeg\"\n            className=\"block w-full text-sm text-slate-500\n              file:mr-4 file:py-2 file:px-4\n              file:rounded-full file:border-0\n              file:text-sm file:font-semibold\n              file:bg-violet-50 file:text-violet-700\n              hover:file:bg-violet-100\" />\n          <button className=\"bg-violet-500 hover:bg-violet-700 text-white text-sm\n            font-semibold py-2 px-4 rounded-full\">\n            Upload\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SST Framework - Bash\nDESCRIPTION: Installs the latest version of SST into the project and installs all required npm dependencies. This sets up the SST configuration in the project root (`sst.config.ts`) with defaults for AWS. Assumes working directory was previously initialized with npm. Requires npm and network connectivity.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Initializing SST for Containerized Project - Bash\nDESCRIPTION: Initializes SST in a freshly cloned Remix container app directory, adding the sst.config.ts setup for AWS deployments. All dependencies are fetched for local development and deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\n```\n\n----------------------------------------\n\nTITLE: Opening Tunnel to Connect to VPC Redis Cluster\nDESCRIPTION: Installs and necessitates a tunnel setup to connect to a VPC-contained Redis cluster from the local development machine using SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo npx sst tunnel install\n```\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules\nDESCRIPTION: Sets up installation rules for the Flutter application bundle including executable, ICU data, libraries, and assets.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Using a Preloaded Provider Resource (AWS) in SST Config (TypeScript)\nDESCRIPTION: Illustrates the direct usage of a resource from a preloaded provider (AWS) within the `sst.config.ts` file. SST comes with AWS and Cloudflare providers preloaded, so they don't require the `sst add` step. This example creates an AWS App Runner service using the `aws.apprunner.Service` resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/all-providers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nnew aws.apprunner.Service(\"MyService\", {\n  serviceName: \"example\",\n  sourceConfiguration: {\n    imageRepository: {\n      imageConfiguration: {\n        port: \"8000\"\n      },\n      imageIdentifier: \"public.ecr.aws/aws-containers/hello-app-runner:latest\",\n      imageRepositoryType: \"ECR_PUBLIC\"\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Remix Site in SST v3\nDESCRIPTION: Sets up a Remix site with a custom domain in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Remix(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Build Script to package.json\nDESCRIPTION: This modification adds a build script to package.json that uses the TypeScript compiler to build the application, which is required for the Docker build process.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  // ...\n  \"build\": \"tsc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drizzle Kit for T3 Stack in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure Drizzle Kit for a T3 Stack application using SST resources. It sets up the database credentials and other configuration options for Drizzle.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_108\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  schema: \"./src/server/db/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    ssl: {\n      rejectUnauthorized: false,\n    },\n    host: Resource.MyPostgres.host,\n    port: Resource.MyPostgres.port,\n    user: Resource.MyPostgres.username,\n    password: Resource.MyPostgres.password,\n    database: Resource.MyPostgres.database,\n  },\n  tablesFilter: [\"aws-t3_*\"],\n} satisfies Config;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Formatted Inline Code and Links in Markdown\nDESCRIPTION: Illustrates combining Markdown formatting: bold text, inline code using backticks (`), and links, including links containing bold inline code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\nLet's **`bold`** **some** words. Also add some links; a [`short`](/) and [`a long one`](/) and a [**`bold`**](/) one.\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying SST Project\nDESCRIPTION: Standard npm commands to install project dependencies and deploy an SST application. First installs all required node modules using npm install, then deploys the application using npm run deploy.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-hono/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Creating Auth Directory - Bash\nDESCRIPTION: Creates a new directory named 'auth' intended to store authentication logic and modules. No dependencies required, but must be run in the root of the Next.js app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir auth\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Client Provider in Angular\nDESCRIPTION: Adds the HTTP client provider with fetch support to the Angular application configuration, enabling API requests to the pre-signed URL endpoint.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nprovideHttpClient(withFetch())\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SESv2 SDK Dependency - Bash\nDESCRIPTION: Installs the required AWS SDK for SES v2 in the project using npm. This is necessary for TypeScript code to be able to send emails using Amazon SES. Execute this command inside the project root.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-sesv2\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Project - Bash\nDESCRIPTION: These commands create a new Next.js app and navigate into the project directory using npx. They are intended to set up a TypeScript-based Next.js application with a clear project structure. Inputs are shell commands, and outputs are the installed and initiated app files. Prerequisites: Node.js and npm installed.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest aws-auth-nextjs\\ncd aws-auth-nextjs\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore for Astro App\nDESCRIPTION: A .dockerignore file to exclude unnecessary files from the Docker build context for the Astro application, improving build speed and reducing image size.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n.DS_Store\nnode_modules\ndist\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Project Inclusion for SST Types (JSON)\nDESCRIPTION: Modifies tsconfig.json to include the SST environment types for proper type support in the development environment. The snippet is a diff format with a single-line inclusion indicating that sst-env.d.ts is part of the TypeScript project files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\\n+ \\\"include\\\": [\\\"src/**/*\\\", \\\"test/**/*\\\", \\\"sst-env.d.ts\\\"]\\n}\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying SST App to Production - Bash\nDESCRIPTION: Deploys the SST application to AWS using the production stage or any named stage. This command prepares the resources and makes the app globally accessible depending on AWS environment configuration. Assumes all resources, including verified email/domain for SES, are set up.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for Deno Application\nDESCRIPTION: Defines a Dockerfile to containerize the Deno application for deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_6\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM denoland/deno\n\nEXPOSE 8000\n\nUSER deno\n\nWORKDIR /app\n\nADD . /app\n\nRUN deno install --entrypoint main.ts\n\nCMD [\"run\", \"--allow-all\",  \"main.ts\"]\n```\n\n----------------------------------------\n\nTITLE: Defining IAM Policy for SST Deployments\nDESCRIPTION: Comprehensive IAM policy JSON defining the necessary permissions for SST to bootstrap and deploy applications, including managing S3 buckets, ECR repositories, SSM parameters, and other AWS resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/iam-credentials.mdx#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n      {\n          \"Sid\": \"ManageBootstrapStateBucket\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"s3:CreateBucket\",\n              \"s3:PutBucketVersioning\",\n              \"s3:PutBucketNotification\",\n              \"s3:PutBucketPolicy\",\n              \"s3:DeleteObject\",\n              \"s3:GetObject\",\n              \"s3:ListBucket\",\n              \"s3:PutObject\"\n          ],\n          \"Resource\": [\n              \"arn:aws:s3:::sst-state-*\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageBootstrapAssetBucket\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"s3:CreateBucket\",\n              \"s3:PutBucketVersioning\",\n              \"s3:PutBucketNotification\",\n              \"s3:PutBucketPolicy\",\n              \"s3:DeleteObject\",\n              \"s3:GetObject\",\n              \"s3:ListBucket\",\n              \"s3:PutObject\"\n          ],\n          \"Resource\": [\n              \"arn:aws:s3:::sst-asset-*\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageBootstrapECRRepo\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"ecr:CreateRepository\",\n              \"ecr:DescribeRepositories\"\n          ],\n          \"Resource\": [\n              \"arn:aws:ecr:REGION:ACCOUNT:repository/sst-asset\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageBootstrapSSMParameter\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"ssm:GetParameters\",\n              \"ssm:PutParameter\"\n          ],\n          \"Resource\": [\n              \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/passphrase/*\",\n              \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/bootstrap\"\n          ]\n      },\n      {\n          \"Sid\": \"Deployments\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"*\"\n          ],\n          \"Resource\": [\n              \"*\"\n          ]\n      },\n      {\n          \"Sid\": \"ManageSecrets\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"ssm:DeleteParameter\",\n              \"ssm:GetParameter\",\n              \"ssm:GetParameters\",\n              \"ssm:GetParametersByPath\",\n              \"ssm:PutParameter\"\n          ],\n          \"Resource\": [\n              \"arn:aws:ssm:REGION:ACCOUNT:parameter/sst/*\"\n          ]\n      },\n      {\n          \"Sid\": \"LiveLambdaSocketConnection\",\n          \"Effect\": \"Allow\",\n          \"Action\": [\n              \"appsync:EventSubscribe\",\n              \"appsync:EventPublish\",\n              \"appsync:EventConnect\"\n          ],\n          \"Resource\": [\n              \"*\"\n          ]\n      }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON from Output Strings with .apply - SST TypeScript\nDESCRIPTION: Demonstrates resolving an Output<string> containing JSON using .apply and manually calling JSON.parse. This pattern is necessary when outputs need to be interpreted as objects for further processing. Input is an Output<string>, output is an Output<object>.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/components.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst policy = policyStr.apply((policy) =>\n  JSON.parse(policy)\n);\n```\n\n----------------------------------------\n\nTITLE: Opening SST Local Development Environment in Browser\nDESCRIPTION: This command opens the default web browser to access the SST local development environment running on localhost at port 3000. It allows developers to interact with the SST application in their browser.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-hono-redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopen http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Configuring WebSocket API in SST v3\nDESCRIPTION: Creates a WebSocket API with connect and disconnect routes in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new sst.aws.ApiGatewayWebSocket(\"MyApi\", {\n  domain: \"api.example.com\"\n});\n\napi.route(\"$connect\", \"src/connect.handler\");\napi.route(\"$disconnect\", \"src/disconnect.handler\");\n```\n\n----------------------------------------\n\nTITLE: Creating React Router Project Using npm\nDESCRIPTION: This Bash command initializes a new React Router project and navigates into its directory. It uses the package manager npx to create the project with default configurations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-react-router@latest aws-react-router\ncd aws-react-router\n```\n\n----------------------------------------\n\nTITLE: Flutter Tool Backend Custom Command\nDESCRIPTION: Custom command that executes the Flutter tool backend script to generate necessary build artifacts. Uses a phantom output to ensure the command runs on every build.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 for Production\nDESCRIPTION: Commands to build the Nuxt 3 application for production deployment using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt-container/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Configuring API Gateway v1 in SST v2\nDESCRIPTION: Sets up an API Gateway v1 with routes in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new ApiGatewayV1Api(stack, \"MyApi\", {\n  customDomain: \"api.example.com\"\n});\n\napi.addRoutes(stack, {\n  \"GET /\": \"src/get.handler\",\n  \"POST /\": \"src/post.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Displaying Counter in SolidStart Component\nDESCRIPTION: Updates SolidStart component to display Redis counter value when route is loaded.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nexport default function Page() {\n  const counter = createAsync(() => getCounter());\n\n  return <h1>Hit counter: {counter()}</h1>;\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Mode for SST Remix Container App - Bash\nDESCRIPTION: Runs SST development mode for a Remix app configured for containerized deployment, allowing local iterations and previewing the application linked to the SST resource wiring. Requires configuration and AWS CLI credentials.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3\nDESCRIPTION: Commands for installing project dependencies using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/nuxt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Deploying SST/Production App to AWS - Bash\nDESCRIPTION: Runs the SST deploy command with a specified stage ('production'), deploying all defined AWS infrastructure and the Astro site. Outputs new AWS resources and publicly available site.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Installing Core Dependencies: Prisma, TypeScript, Express (Bash)\nDESCRIPTION: Installs Prisma, TypeScript, ts-node, and Express, including development type definitions for Node.js. Assumes a Node.js/npm environment. Required before building or running server code and for schema migration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install prisma typescript ts-node @types/node --save-dev\\nnpm install express\n```\n\n----------------------------------------\n\nTITLE: Test API with cURL for POST Request\nDESCRIPTION: Tests the deployed Lambda API by making a POST request to insert a new todo item, verifying the API's database write capability.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://ouu5vovpxllyn5b6ot2nn6vdsa0hvcuj.lambda-url.us-east-1.on.aws\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Remix Project - Bash\nDESCRIPTION: Installs and sets up SST (Serverless Stack Toolkit) inside an existing Remix project. Required: npm, existing Remix project directory. The 'sst init' command adds necessary SST files (e.g., sst.config.ts) for AWS deployment. 'npm install' ensures all dependencies are resolved.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating and Adding Notifications to S3 Bucket in SST v2\nDESCRIPTION: Shows how to create an S3 bucket and add notifications to a Lambda function in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new Bucket(stack, \"MyBucket\");\n\nbucket.addNotifications(stack, {\n  notification: \"src/notification.main\"\n});\n```\n\n----------------------------------------\n\nTITLE: Styling Chat Component with CSS\nDESCRIPTION: Provides CSS styling for the chat component, defining layout, colors, and responsive design. Dependencies include CSS variables for design consistency.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.chat {\n  gap: 1rem;\n  width: 30rem;\n  display: flex;\n  padding: 1rem;\n  flex-direction: column;\n  border-radius: var(--border-radius);\n  background-color: rgba(var(--callout-rgb), 0.5);\n  border: 1px solid rgba(var(--callout-border-rgb), 0.3);\n}\n\n.messages {\n  padding-bottom: 0.125rem;\n  border-bottom: 1px solid rgba(var(--callout-border-rgb), 0.3);\n}\n.messages > div {\n  line-height: 1.1;\n  padding-bottom: 0.625rem;\n}\n\n.form {\n  display: flex;\n  gap: 0.625rem;\n}\n.form input {\n  flex: 1;\n  font-size: 0.875rem;\n  padding: 0.5rem 0.75rem;\n  border-radius: calc(1rem - var(--border-radius));\n  border: 1px solid rgba(var(--callout-border-rgb), 1);\n}\n.form button {\n  font-weight: 500;\n  font-size: 0.875rem;\n  padding: 0.5rem 0.75rem;\n  border-radius: calc(1rem - var(--border-radius));\n  background: linear-gradient(\n    to bottom right,\n    rgba(var(--tile-start-rgb), 1),\n    rgba(var(--tile-end-rgb), 1)\n  );\n  border: 1px solid rgba(var(--callout-border-rgb), 1);\n}\n.form button:active:enabled {\n  background: linear-gradient(\n    to top left,\n    rgba(var(--tile-start-rgb), 1),\n    rgba(var(--tile-end-rgb), 1)\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Testing API File Upload using cURL (bash)\nDESCRIPTION: Demonstrates how to test the API's file upload functionality from the command line using `curl`. It sends an HTTP PUT request (`-X PUT`) to the API endpoint URL provided by `sst dev`, uploading the contents of the local `package.json` file (`--upload-file package.json`) as the request body. The API should respond with the key of the uploaded object.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X PUT --upload-file package.json https://my-hono-api-jayair-honoscript.sst-15d.workers.dev\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Project - Bash\nDESCRIPTION: Set up the SST framework in the project directory using npx, selecting AWS defaults to create the necessary configuration files. Ensure SST is globally installed or accessible via npx.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\n```\n\n----------------------------------------\n\nTITLE: Starting the Application in Development Mode\nDESCRIPTION: Runs the application in development mode using SST, providing immediate feedback and the API's endpoint URL. Useful for testing the application locally before deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Importing the SST SDK in TypeScript\nDESCRIPTION: Import statement for the SST SDK to enable interactions with the SST infrastructure components. Required for managing resources such as the R2 bucket within the script.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\n```\n\n----------------------------------------\n\nTITLE: Start Development Environment - Bash\nDESCRIPTION: The command 'sst dev' initializes the development environment for SST, starting local services and connecting via the configured tunnel to work with VPC resources. It's essential for running and testing Lambda functions in a local setup.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/live.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nsst dev\n```\n\n----------------------------------------\n\nTITLE: Python Workspace Directory Structure\nDESCRIPTION: Example directory structure for multiple Python workspaces in an SST project, showing organization of source files and configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-fastapi/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n.\n├── workspace_a\n│   ├── pyproject.toml\n│   └── src\n│       └── workspace_a\n│           ├── __init__.py\n│           ├── api_a.py\n│           └── api_b.py\n└── workspace_b\n    ├── pyproject.toml\n    └── src\n        └── workspace_b\n            ├── __init__.py\n            └── index.py\n```\n\n----------------------------------------\n\nTITLE: Markdown Lambda Function Handler Reference\nDESCRIPTION: Demonstrates the syntax for specifying a Lambda function handler using the index.function_name format within the ZipFile property of the Code property.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_29\n\nLANGUAGE: markdown\nCODE:\n```\nindex.function_name\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerignore File for Remix Application\nDESCRIPTION: Creates a .dockerignore file to exclude unnecessary files and directories from the Docker build context. This helps keep the Docker image size smaller and prevents potential issues with local development files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules\n.cache\nbuild\npublic/build\n```\n\n----------------------------------------\n\nTITLE: Configuring Dev Mode for Tasks in SST v3\nDESCRIPTION: Demonstrates how to configure the dev mode command for a Task in SST v3, allowing local testing of tasks.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/tasks-in-v3.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Task(\"MyTask\", {\n  dev: {\n    command: \"node src/tasks.js\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Lambda Function in SST v3\nDESCRIPTION: Defines a Lambda function with a specified handler in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Refreshing the SST State\nDESCRIPTION: The `sst refresh` command is used to synchronize the state of your application's resources with the actual resources in your cloud provider. This is necessary when manual changes to resources on the cloud provider side have caused discrepancies between the state file and actual resource states. Upon execution, this command updates the state file to reflect resource existences and configurations without modifying actual resources in the cloud. It is particularly useful for troubleshooting deployment issues due to out-of-sync states.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/state.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsst refresh\n```\n\n----------------------------------------\n\nTITLE: Creating a New TypeScript Project\nDESCRIPTION: The command initializes a new Node.js project with npm in a new directory named my-trpc-app. This sets up the foundation for the serverless application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-trpc-app && cd my-trpc-app\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application in Different Modes\nDESCRIPTION: Commands for running the NestJS application in development, watch, and production modes\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nestjs-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Environment (Bash)\nDESCRIPTION: This command starts the local development server for the SST application, allowing live reloading and local cloud simulation. Requires 'npx' and the SST CLI. It assumes all required infrastructure (e.g., tunnels) is already set up.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_3\n\nLANGUAGE: Bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Environment\nDESCRIPTION: Command to start the SST application in development mode, which deploys to a personal stage with live function updates.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsst dev\n```\n\n----------------------------------------\n\nTITLE: Adding Imports for tRPC Client in client.ts\nDESCRIPTION: Imports necessary modules and types for client.ts including Resource from SST and createTRPCClient from @trpc/client. Ensures the client has all required dependencies for functionality.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \"sst\";\nimport type { Router } from \"./index\";\nimport { createTRPCClient, httpBatchLink } from \"@trpc/client\";\n```\n\n----------------------------------------\n\nTITLE: Installing AWS and Multer Dependencies (Bash)\nDESCRIPTION: Installs runtime and type dependencies for working with S3 file uploads in a NestJS app. This includes the AWS SDK v3 modules for S3 access, streaming/File upload, presigning URLs, and Multer type support, all required for previous TypeScript code to function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -D @types/multer\\nnpm install @aws-sdk/client-s3 @aws-sdk/lib-storage @aws-sdk/s3-request-presigner\\n\n```\n\n----------------------------------------\n\nTITLE: Installing AWS S3 Dependencies\nDESCRIPTION: Command to install the required AWS SDK packages for S3 operations and pre-signed URL generation in the Astro application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Adding Build Script for SST Hono Project\nDESCRIPTION: Adds a build script to the package.json file to compile TypeScript code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_57\n\nLANGUAGE: json\nCODE:\n```\n\"scripts\": {\n  // ...\n  \"build\": \"tsc\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining sst.config.ts in SST v2\nDESCRIPTION: Configures the sst.config.ts for an SST v2 app, specifying app's name and region. It requires SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default {\n  // Your app's config\n  config(_input) {\n    return {\n      name: \"my-sst-app\",\n      region: \"us-east-1\"\n    };\n  },\n  // Your app's resources\n  stacks(app) { }\n} satisfies SSTConfig;\n```\n\n----------------------------------------\n\nTITLE: Testing Streaming Lambda with curl\nDESCRIPTION: Demonstrates how to test a streaming Lambda function using curl with the --no-buffer option.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_60\n\nLANGUAGE: bash\nCODE:\n```\ncurl --no-buffer https://u3dyblk457ghskwbmzrbylpxoi0ayrbb.lambda-url.us-east-1.on.aws\n```\n\n----------------------------------------\n\nTITLE: Configuring SST v3 Infrastructure Imports\nDESCRIPTION: Example of importing and initializing infrastructure components in SST v3, demonstrating the new modular approach without stack definitions.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nexport default $config({\n  // ...\n\n  async run() {\n    await import(\"./infra/api\");\n    await import(\"./infra/storage\");\n    await import(\"./infra/frontend\");\n    const auth = await import(\"./infra/auth\");\n\n    return {\n      UserPool: auth.userPool.id,\n      Region: aws.getRegionOutput().name,\n      IdentityPool: auth.identityPool.id,\n      UserPoolClient: auth.userPoolClient.id,\n    };\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Container Astro Project - Bash\nDESCRIPTION: Initializes SST and installs necessary dependencies inside a container-targeted Astro project directory. Required before infrastructure definition. The project must exist and be current directory.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Integrating Chat Component in Next.js Page\nDESCRIPTION: Replaces the Home component in a Next.js page with the Chat component, setting up the connection properties. Constants like 'topic' are initialized for chat interaction.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Resource } from \"sst\";\nimport Chat from \"@/components/chat\";\n\nconst topic = \"sst-chat\";\n\nexport default function Home() {\n  return (\n    <main className={styles.main}>\n\n      <div className={styles.center}>\n        <Image\n          className={styles.logo}\n          src=\"/next.svg\"\n          alt=\"Next.js Logo\"\n          width={180}\n          height={37}\n          priority\n        />\n      </div>\n\n      <div>\n        <Chat\n          endpoint={Resource.MyRealtime.endpoint}\n          authorizer={Resource.MyRealtime.authorizer}\n          topic={`${Resource.App.name}/${Resource.App.stage}/${topic}`}\n        />\n      </div>\n\n    </main>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Nuxt Container Project with npm\nDESCRIPTION: Initializes a new Nuxt container project using npm for deployment in a containerized environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init aws-nuxt-container\ncd aws-nuxt-container\n```\n\n----------------------------------------\n\nTITLE: Creating Cloudflare Cron Job with SST\nDESCRIPTION: This snippet demonstrates how to create a Cloudflare Worker that runs on a schedule using SST's Cloudflare Cron component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_118\n\nLANGUAGE: typescript\nCODE:\n```\nconst cron = new sst.cloudflare.Cron(\"Cron\", {\n  job: \"index.ts\",\n  schedules: [\"* * * * *\"]\n});\n\nreturn {};\n```\n\n----------------------------------------\n\nTITLE: Setting prop1 in an Object Property\nDESCRIPTION: Example of setting a simple boolean property in an object. The prop1 property defaults to true and is optional.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  prop1: true\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying Updated SST Component Import Configuration (Bash)\nDESCRIPTION: Command to redeploy the SST application after adjusting the component arguments (`args`) within the `transform` function to match the existing resource. This deployment should succeed and complete the import process.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Queue Stack with Cross-Stack References (TypeScript)\nDESCRIPTION: This code defines a queue stack that references the function stack, illustrating how cross-stack dependencies can lead to cyclical dependency errors in CloudFormation deployments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction QStack() {\n  const fn = use(FnStack);\n\n  const q = new SQS();\n  q.consumer = new Function({\n    environment: {\n      fn: fn.url,\n    }\n  });\n  \n  fn.addEnvironment({\n    q: q.url,\n  });\n  \n  return q;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lambda Function in SST v2\nDESCRIPTION: Defines a Lambda function with a specified handler in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nnew Function(stack, \"MyFunction\", {\n  handler: \"src/lambda.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Importing FFmpeg in Lambda Function\nDESCRIPTION: Code for importing the ffmpeg-static package in a Lambda function. This package contains pre-built binaries for all architectures including arm64.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport ffmpeg from \"ffmpeg-static\";\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Environment (Container)\nDESCRIPTION: Runs the SST development environment using `npx sst dev`. For the container setup, this command executes the `dev.command` specified in the `sst.aws.Service` definition (typically `npm run dev`), running the SvelteKit app locally.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Creating a .dockerignore File\nDESCRIPTION: This .dockerignore file specifies which files and directories should be excluded when building the Docker image, preventing unnecessary files from being included in the container.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules\n.git\n```\n\n----------------------------------------\n\nTITLE: Starting SST Application in Development Mode\nDESCRIPTION: Initiates the SST application in development mode with the npx command. Generates URLs for testing API and client endpoints locally. Provides a way to test the application before deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Styling the Upload Form Component (CSS)\nDESCRIPTION: This CSS code provides basic styling rules for the upload form component defined in `Form.tsx`. It adds padding to the form, sets margins for the input element, and styles the button with specific padding, font weight, size, border radius, border, and background color, including an active state style.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.form {\n  padding: 2rem;\n}\n\n.form input {\n  margin-right: 1rem;\n}\n\n.form button {\n  appearance: none;\n  padding: 0.5rem 0.75rem;\n  font-weight: 500;\n  font-size: 0.875rem;\n  border-radius: 0.375rem;\n  border: 1px solid rgba(68, 107, 158, 0);\n  background-color: rgba(68, 107, 158, 0.1);\n}\n\n.form button:active:enabled {\n  background-color: rgba(68, 107, 158, 0.2);\n}\n```\n\n----------------------------------------\n\nTITLE: Example S3 Bucket Name for Lookup\nDESCRIPTION: Provides an example of a fully qualified S3 bucket name that includes a unique identifier. This format is typically used when looking up an existing S3 bucket using its physical name.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nmybucket-xnbmhcvd\n```\n\n----------------------------------------\n\nTITLE: Configuring Stripe Product in SST\nDESCRIPTION: Demonstrates how to define a Stripe product within the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/index.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew stripe.Product(\"MyStripeProduct\", {\n  name: \"SST Paid Plan\",\n  description: \"This is how SST makes money\",\n});\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependencies (Bash)\nDESCRIPTION: This command uses npm to install the required AWS SDK v3 packages for interacting with S3. Specifically, it installs `@aws-sdk/client-s3` (the S3 client) and `@aws-sdk/s3-request-presigner` (utility for generating pre-signed URLs), which are necessary for the server function that creates upload URLs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Installing SvelteKit Node Adapter (Container)\nDESCRIPTION: Installs the `@sveltejs/adapter-node` development dependency using npm. This adapter is needed to build the SvelteKit application into a standalone Node.js server suitable for running within a Docker container.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm i -D @sveltejs/adapter-node\n```\n\n----------------------------------------\n\nTITLE: Deploying an Empty SST v3 App\nDESCRIPTION: Deploys an empty SST app to check configuration correctness. Requires SST CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_8\n\nLANGUAGE: Bash\nCODE:\n```\nnpx sst deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing SST and Installing NPM Packages (bash)\nDESCRIPTION: Shows the initialization of SST in the project using npx, followed by a full npm install. Prerequisites include that the project directory is already set up. This step readies the environment for AWS resource provisioning using SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/express.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Starting Dev Mode with SST and Tunnel\nDESCRIPTION: Starts the SST development server with a tunnel setup for the Redis VPC access.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Environment (Serverless)\nDESCRIPTION: Runs the SST development environment using `npx sst dev`. This command starts both the SST live lambda development environment and the SvelteKit development server, allowing local testing with live AWS resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Manual Custom Domain Configuration in SST\nDESCRIPTION: This example demonstrates how to manually configure a custom domain in SST by specifying the ACM certificate ARN and disabling automatic DNS management.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/custom-domains.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  domain: {\n    name: \"domain.com\",\n    dns: false,\n    cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Hono App Project for Containerization - Bash\nDESCRIPTION: Creates a new Hono app project ready for container-based deployment and enters the created directory. No special options required other than specifying the template directory.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm create hono@latest aws-hono-container\\ncd aws-hono-container\\n\n```\n\n----------------------------------------\n\nTITLE: Installing Hono Dependency via NPM (bash)\nDESCRIPTION: Installs the `hono` npm package using `npm install hono`. This package provides the Hono web framework, which is required to build the API routes defined in `index.ts` for handling HTTP requests.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install hono\n```\n\n----------------------------------------\n\nTITLE: Setting prop2 Architecture Type\nDESCRIPTION: Simple example of setting the prop2 property with an architecture type value of 'x86_64'. This property accepts either 'x86_64' or 'arm_64' as valid values.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{ prop2: \"x86_64\" }\n```\n\n----------------------------------------\n\nTITLE: Building Svelte Project for Production\nDESCRIPTION: Command to create a production version of the Svelte app. It also mentions how to preview the production build.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/svelte-kit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js App with OpenNext and SST\nDESCRIPTION: This code snippet demonstrates how to create a new Next.js app, set up an SST project, and deploy it using OpenNext. It uses npx commands to streamline the process.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/open-next-v1.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app\nnpx create-sst\nnpx sst deploy\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Upload Form in Astro - Astro (with Embedded JavaScript)\nDESCRIPTION: Implements an HTML form and client script within an Astro page to support direct file uploads to S3 via pre-signed URLs. Dependencies: Works with a pre-assigned 'url' variable; key parameters are file input and POST method. Outputs: Triggers PUT request to S3, then redirects on success. Caution: Requires S3 CORS configuration and presigned-url logic defined elsewhere.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_6\n\nLANGUAGE: astro\nCODE:\n```\n<Layout title=\\\"Astro x SST\\\">\\n  <main>\\n    <form action={url}>\\n      <input name=\\\"file\\\" type=\\\"file\\\" accept=\\\"image/png, image/jpeg\\\" />\\n      <button type=\\\"submit\\\">Upload</button>\\n    </form>\\n    <script>\\n      const form = document.querySelector(\\\"form\\\");\\n      form!.addEventListener(\\\"submit\\\", async (e) => {\\n        e.preventDefault();\\n\\n        const file = form!.file.files?.[0]!;\\n\\n        const image = await fetch(form!.action, {\\n          body: file,\\n          method: \\\"PUT\\\",\\n          headers: {\\n            \\\"Content-Type\\\": file.type,\\n            \\\"Content-Disposition\\\": `attachment; filename=\\\"${file.name}\\\"`,\\n          },\\n        });\\n\\n        window.location.href = image.url.split(\\\"?\\\")[0] || \\\"/\\\";\\n      });\\n    </script>\\n  </main>\\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Node.js Project Setup (Bash)\nDESCRIPTION: Initializes a new Node.js project directory, enters it, and generates a default package.json using npm. No prerequisites beyond having Node.js and npm installed. Creates the base project folder structure and metadata.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir aws-prisma && cd aws-prisma\\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Deploying Initial SST Component Import Configuration (Bash)\nDESCRIPTION: Command to deploy the SST application after setting the initial import configuration for the Bucket component. This deployment attempt is expected to fail if the component's default arguments don't match the existing bucket's configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy\n```\n\n----------------------------------------\n\nTITLE: Configuring NPM Test Script for SST\nDESCRIPTION: This snippet shows how to update the npm test script in package.json to use sst load-config with Vitest for running tests.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/testing-in-sst.mdx#2025-04-22_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n\"test\": \"sst load-config -- vitest run\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm in a Workspace (Bash)\nDESCRIPTION: Invokes npm test for a workspace package, leveraging a pre-configured testing setup (e.g., Vitest). Assumes the test script is properly defined in the corresponding package.json file. Used for unit testing shared modules or application code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Node Preset in app.config.ts\nDESCRIPTION: Sets up the default Node preset in the SolidStart project's app.config.ts file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from \"@solidjs/start/config\";\n\nexport default defineConfig({});\n```\n\n----------------------------------------\n\nTITLE: Initializing TypeScript and Prisma (Bash)\nDESCRIPTION: Runs initialization commands for both TypeScript (creating a tsconfig.json) and Prisma (bootstrapping the prisma directory and schema.prisma). Expects dependencies to be installed, and produces essential config files for ORM and TS compilation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx tsc --init\\nnpx prisma init\n```\n\n----------------------------------------\n\nTITLE: Setting Provider Configuration Options (TypeScript)\nDESCRIPTION: Demonstrates how to pass configuration options (like AWS region) to a provider in sst.config.ts. Options are nested within the provider's entry and allow customization of provider behavior. This snippet requires knowledge of the available settings for each provider and applies only to supported options.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: {\n    aws: {\n      region: \"us-west-2\"\n    }\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SST Application\nDESCRIPTION: Command to create a new SST application project.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsst init\n```\n\n----------------------------------------\n\nTITLE: Creating an Image Upload Form in Astro (Container) - Astro (with Embedded JavaScript)\nDESCRIPTION: Sets up a frontend HTML form and JavaScript logic in an Astro page for uploading images directly to S3 through a presigned URL. The implementation is identical to the serverless scenario and expects the 'url' to be provided as a prop or rendered variable.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_17\n\nLANGUAGE: astro\nCODE:\n```\n<Layout title=\\\"Astro x SST\\\">\\n  <main>\\n    <form action={url}>\\n      <input name=\\\"file\\\" type=\\\"file\\\" accept=\\\"image/png, image/jpeg\\\" />\\n      <button type=\\\"submit\\\">Upload</button>\\n    </form>\\n    <script>\\n      const form = document.querySelector(\\\"form\\\");\\n      form!.addEventListener(\\\"submit\\\", async (e) => {\\n        e.preventDefault();\\n\\n        const file = form!.file.files?.[0]!;\\n\\n        const image = await fetch(form!.action, {\\n          body: file,\\n          method: \\\"PUT\\\",\\n          headers: {\\n            \\\"Content-Type\\\": file.type,\\n            \\\"Content-Disposition\\\": `attachment; filename=\\\"${file.name}\\\"`,\\n          },\\n        });\\n\\n        window.location.href = image.url.split(\\\"?\\\")[0] || \\\"/\\\";\\n      });\\n    </script>\\n  </main>\\n</Layout>\n```\n\n----------------------------------------\n\nTITLE: Installing Angular Environment Builder Package\nDESCRIPTION: Adds the @ngx-env/builder package to the Angular project, enabling access to environment variables defined in the SST config.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nng add @ngx-env/builder\n```\n\n----------------------------------------\n\nTITLE: Accessing Config Secret in Lambda Function\nDESCRIPTION: This TypeScript code shows how to access a Config secret within a Lambda function using the @serverless-stack/node/config library. It logs the value of the STRIPE_KEY secret.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/config.mdx#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"@serverless-stack/node/config\";\n\nexport const handler = async () => {\n  console.log(Config.STRIPE_KEY);\n\n  // ...\n};\n```\n\n----------------------------------------\n\nTITLE: Importing HTTP Client Dependencies\nDESCRIPTION: Imports the required HTTP client modules for making API requests in the Angular application configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { provideHttpClient, withFetch } from '@angular/common/http';\n```\n\n----------------------------------------\n\nTITLE: Starting SolidStart Development Server\nDESCRIPTION: Commands for starting the development server, with an option to automatically open in a browser tab\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/solid-start/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting SST Development Server\nDESCRIPTION: This snippet shows how to install project dependencies using npm and start the SST development server. It assumes Node.js and npm are already installed on the system.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-hono-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore File (Bash)\nDESCRIPTION: Defines patterns for Docker to exclude from build context, preventing the dist and node_modules directories from being copied into the container. Placed in project root to minimize build size and increase speed.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndist\\nnode_modules\\n\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server\nDESCRIPTION: Command to start the Remix development server for local development and testing.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/remix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Lambda with Go Runtime in SST\nDESCRIPTION: Sets up a Lambda function using the Go runtime and links it to an S3 bucket. It demonstrates how to use the SST Go SDK to access linked resources.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\");\n\nnew sst.aws.Function(\"MyFunction\", {\n  url: true,\n  runtime: \"go\",\n  link: [bucket],\n  handler: \"./src\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a .dockerignore File for SvelteKit Projects\nDESCRIPTION: A .dockerignore file that specifies files and directories to exclude when building the Docker image. This file excludes macOS system files and node_modules directory to keep the build context small and efficient.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_22\n\nLANGUAGE: bash\nCODE:\n```\n.DS_Store\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Deploying App to AWS\nDESCRIPTION: This Bash command deploys the configured Analog app to AWS using SST, specifying a production stage.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Starting SST Dev Mode\nDESCRIPTION: This Bash command starts the development mode for SST and the Analog app, allowing for testing and debugging.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Accessing Resource in SST Python SDK\nDESCRIPTION: This snippet demonstrates how to use the SST Python SDK to access a resource in your application. It imports the Resource class from the sst module and prints the name of a bucket resource named 'MyBucket'.\nSOURCE: https://github.com/sst/sst/blob/dev/sdk/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom sst import Resource\n\nprint(Resource.MyBucket.name)\n```\n\n----------------------------------------\n\nTITLE: Creating a New SST App with GraphQL Starter\nDESCRIPTION: This command creates a new SST app using the create-sst tool, prompting the user to select the GraphQL and DynamoDB options.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/testing-in-sst.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx create-sst@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring an SST App in TypeScript\nDESCRIPTION: A TypeScript code block showing an example SST configuration file (`sst.config.ts`). It defines app properties (name, home) and asynchronously sets up an AWS Bucket resource, returning its name.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n```ts title=\"sst.config.ts\"\nexport default $config({\n  app(input) {\n    return {\n      name: \"my-sst-app\",\n      home: \"aws\"\n    };\n  },\n  async run() {\n    const bucket = new sst.aws.Bucket(\"MyBucket\");\n\n    return {\n      bucket: bucket.name\n    };\n  }\n});\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing Astro Container Project with npm - Bash\nDESCRIPTION: Scaffolds an Astro project for the container deployment approach and navigates into the created directory. Intended for setups where ECS/Fargate containers are used instead of serverless Lambda.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm create astro@latest aws-astro-container\\ncd aws-astro-container\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Packages - Bash\nDESCRIPTION: Install necessary AWS SDK packages for handling S3 operations and generating pre-signed URLs in a Next.js application. Ensure npm is installed to manage package dependencies.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Setting Cloudflare API Token and Account ID\nDESCRIPTION: Exports the Cloudflare API token and account ID to environment variables. Required for authenticating with Cloudflare services. This setup is necessary for any operations involving Cloudflare API access.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\nexport CLOUDFLARE_DEFAULT_ACCOUNT_ID=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte project for production\nDESCRIPTION: Commands for creating a production version of a Svelte app and previewing the build. Notes that an adapter may be needed for deployment to specific environments.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-kit/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining a Public S3 Bucket in Container SST Config - TypeScript\nDESCRIPTION: Creates a publicly accessible S3 bucket for uploads as part of containerized infrastructure configuration. Should be inserted after the VPC definition. Relies on SST AWS resource constructors.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\\\"MyBucket\\\", {\\n  access: \\\"public\\\"\\n});\n```\n\n----------------------------------------\n\nTITLE: Deploying React Router App to AWS\nDESCRIPTION: This command deploys the React Router application to AWS using SST, specifying the production environment. It allows for creating different stages, like production, to manage deployments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/react.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: SST Configuration for FFmpeg in Lambda\nDESCRIPTION: SST configuration for a Lambda function that uses FFmpeg. The configuration includes the nodejs.install property to automatically include the ffmpeg-static package.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nconst func = new sst.aws.Function(\"MyFunction\", {\n  url: true,\n  memory: \"2 GB\",\n  timeout: \"15 minutes\",\n  handler: \"index.handler\",\n  copyFiles: [{ from: \"clip.mp4\" }],\n  nodejs: { install: [\"ffmpeg-static\"] },\n});\n\nreturn {\n  url: func.url,\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Linked Resource Property at Runtime in JavaScript (src/lambda.ts)\nDESCRIPTION: Example code for a Lambda function (`src/lambda.ts`) demonstrating how to access a property (`domain`) of a linked resource (`MyStorage`) at runtime. It uses the `Resource` object imported from the `sst` SDK to retrieve the value made available through the `sst.Linkable` component.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/reference-resources.mdx#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nimport { Resource } from \"sst\";\n\nconsole.log(Resource.MyStorage.domain);\n```\n\n----------------------------------------\n\nTITLE: Creating New SolidStart Project with npm\nDESCRIPTION: Commands for initializing a new SolidStart project either in the current directory or in a new directory\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/solid-start/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Opening SST Local Development Environment\nDESCRIPTION: This command opens the local development environment for the SST project in the default web browser. It assumes the development server is running on port 3000.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-hono-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nopen http://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Astro Project Directory Structure Overview\nDESCRIPTION: Illustration of the default directory structure for an Astro basics project. Shows the organization of public assets, source files including components, layouts, and pages directories.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/astro4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── components/\n│   │   └── Card.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests for Analog App\nDESCRIPTION: Command to execute unit tests using Vitest, a testing framework for Vite-based projects.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-analog/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Container Error Logging with SST SDK Import in JavaScript\nDESCRIPTION: For container applications to report errors to SST Console, you need to import the SST JS SDK to apply a polyfill that properly marks errors in the logs. This allows the Console to detect and group errors automatically.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nimport \"sst\";\n\nconsole.error(new Error(\"my-error\"));\n```\n\n----------------------------------------\n\nTITLE: Modifying nuxt.config.ts for AWS Lambda\nDESCRIPTION: Edits the Nuxt configuration to enable AWS Lambda as the deployment preset, essential for serverless deployment. This is a part of SST initialization.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineNuxtConfig({\n  compatibilityDate: '2024-04-03',\n+  nitro: {\n+    preset: 'aws-lambda'\n+  },\n  devtools: { enabled: true }\n})\n```\n\n----------------------------------------\n\nTITLE: Executing NestJS Test Suites\nDESCRIPTION: Commands for running unit tests, end-to-end tests, and generating test coverage reports\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nestjs-redis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n```\n\n----------------------------------------\n\nTITLE: Initializing SST and Installing Dependencies (Bash)\nDESCRIPTION: This command initializes the Serverless Stack Toolkit (SST) within the existing project directory. It sets up the necessary configuration files (like `sst.config.ts`) for deploying to AWS. The subsequent `npm install` command installs any dependencies required by the SST initialization process or defined in the project's `package.json`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Set TypeScript Configuration\nDESCRIPTION: This snippet sets strict type-checking options in the `tsconfig.json` to enhance code reliability and catch type errors early.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running SST Certificate Generation Command\nDESCRIPTION: Command to generate a locally-trusted certificate for Safari and Brave browsers to enable secure local connections between the browser and the SST dev CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsst cert\n```\n\n----------------------------------------\n\nTITLE: Testing File Upload with cURL (Bash)\nDESCRIPTION: Sends a multipart/form-data POST request to the local NestJS server to upload a file, here using the 'file' key and package.json as input. Used for verifying the file upload flow after the server is running locally. Requires curl CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nestjs.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -F file=@package.json http://localhost:3000/\\n\n```\n\n----------------------------------------\n\nTITLE: Initializing SolidStart Project for Container Deployment\nDESCRIPTION: Initializes a SolidStart project for container deployment with TypeScript support.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpm init solid@latest aws-solid-container\ncd aws-solid-container\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in a Project\nDESCRIPTION: This Bash script initializes SST within a project by installing necessary packages and configuration files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3 Project\nDESCRIPTION: Commands to install project dependencies using various package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Fetching AWS Region (Async) via Provider Function (TypeScript)\nDESCRIPTION: Retrieves the current AWS region in use by calling the asynchronous aws.getRegion function and extracting the 'name' property. This information can be used for region-aware resource provisioning and diagnostics. Like other getXXX methods, this is a blocking, promise-based call.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst current = await aws.getRegion({});\n\nconst region = current.name;\n\n```\n\n----------------------------------------\n\nTITLE: Setting up Bun HTTP Server\nDESCRIPTION: Initializes a basic HTTP server using Bun, handling GET requests to the root path.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst server = Bun.serve({\n  async fetch(req) {\n    const url = new URL(req.url);\n\n    if (url.pathname === \"/\" && req.method === \"GET\") {\n      return new Response(\"Hello World!\");\n    }\n\n    return new Response(\"404!\");\n  },\n});\n\nconsole.log(`Listening on ${server.url}`);\n```\n\n----------------------------------------\n\nTITLE: Configuring Removal Policy in SST v3\nDESCRIPTION: Configures removal policy for resources in sst.config.ts in SST v3 based on the stage name.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\napp(input) {\n  return {\n    name: \"my-sst-app\",\n    removal: input?.stage === \"production\" ? \"retain\" : \"remove\"\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Providers in sst.config.ts (TypeScript)\nDESCRIPTION: Shows how to specify multiple cloud providers (aws and cloudflare) with explicit version numbers in sst.config.ts. Each provider is mapped to its version, which SST uses to manage respective packages. No imports are necessary—these are entries in your root config file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: {\n    aws: \"6.27.0\",\n    cloudflare: \"5.37.1\"\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Building Remix Application for Production\nDESCRIPTION: Command to build the Remix application for production deployment, generating optimized assets.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using Bun package manager\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-bun/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for React Router Application\nDESCRIPTION: This command starts the development server with Hot Module Replacement (HMR) for the React Router application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-csr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Nuxt 3 Project\nDESCRIPTION: Commands for installing project dependencies using different package managers including npm, pnpm, yarn, and bun.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm install\n\n# pnpm\npnpm install\n\n# yarn\nyarn install\n\n# bun\nbun install\n```\n\n----------------------------------------\n\nTITLE: Applying Dimmed Text Color using HTML and CSS Variables\nDESCRIPTION: This HTML snippet demonstrates applying a dimmed text color using an inline style attribute. It references a CSS custom property '--color-text-dimmed' defined within the Starlight theme.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"color: var(--color-text-dimmed)\">Line dimmed text color.</p>\n```\n\n----------------------------------------\n\nTITLE: Installing Server Dependencies\nDESCRIPTION: Installs necessary npm packages for creating and handling the tRPC server such as zod and @trpc/server.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm install zod @trpc/server@next\n```\n\n----------------------------------------\n\nTITLE: Implementing Dart Lambda Handler\nDESCRIPTION: Implementation of a basic AWS Lambda handler in Dart that responds to API Gateway events\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-dart-api/README.md#2025-04-22_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:aws_lambda_dart_runtime/aws_lambda_dart_runtime.dart';\nimport 'package:aws_lambda_dart_runtime/runtime/context.dart';\n\nvoid main() async {\n  /// This demo's handling an API Gateway request.\n  hello(Context context, AwsApiGatewayEvent event) async {\n    final response = {\n      \"message\": \"Hello from Dart!\",\n    };\n    return AwsApiGatewayResponse.fromJson(response);\n  }\n\n  /// The Runtime is a singleton. You can define the handlers as you wish.\n  Runtime()\n    ..registerHandler<AwsApiGatewayEvent>(\n      'hello',\n      hello,\n    )\n    ..invoke();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Astro Node Adapter - Bash\nDESCRIPTION: Runs the Astro CLI to add the Node.js adapter to the project. This is prerequisite for running Astro apps in a traditional Node.js/Express environment, suitable for ECS containers.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx astro add node\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Value with SST CLI\nDESCRIPTION: This bash command demonstrates how to set a value for a secret using the SST secrets CLI command. It sets the value of the STRIPE_KEY secret.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/config.mdx#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npx sst secrets set STRIPE_KEY sk_test_abc123\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Rust Project with GitHub Actions\nDESCRIPTION: This YAML configuration sets up a GitHub Actions workflow to deploy an SST Rust project. It includes steps for setting up Node.js, pnpm, Rust, Zig, and Cargo Lambda, as well as caching and deployment commands.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-rust-api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy Prod\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-prod:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: pguyot/arm-runner-action@v2\n\n      - name: use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: latest\n\n      - name: use pnpm\n        uses: pnpm/action-setup@v4\n        with:\n          version: latest\n\n      - name: get pnpm store directory\n        shell: bash\n        run: |\n          echo \"STORE_PATH=$(pnpm store path --silent)\" >> $GITHUB_ENV\n\n      - name: setup pnpm cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.STORE_PATH }}\n          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-pnpm-store-\n\n      - name: use Rust\n        uses: actions-rs/toolchain@v1\n\n      - name: use Rust cache\n        uses: Swatinem/rust-cache@v2\n\n      - name: use Zig\n        uses: korandoru/setup-zig@v1\n        with:\n          zig-version: master\n\n      - name: use Cargo Lambda\n        uses: jaxxstorm/action-install-gh-release@v1.9.0\n        with:\n          repo: cargo-lambda/cargo-lambda\n          platform: linux\n          arch: aarch64 # | x86_64\n\n      - name: pnpm install\n        run: pnpm install --frozen-lockfile\n\n      - name: sst install providers\n        run: |\n          set -euxo pipefail\n          pnpm sst install\n\n      - name: sst deploy\n        run: |\n          set -euxo pipefail\n          pnpm sst deploy --stage prod\n\n    env:\n      STAGE: prod\n      LOG_LEVEL: info\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Initializing SST Project and NPM Package - Bash\nDESCRIPTION: This snippet creates a new project directory, initializes it as an npm package, and prepares it for SST use. Requires Bash, Node.js, and npm installed. The commands will set up the foundation for an SST app where further SST initialization and configuration can take place.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-email-app && cd my-email-app\\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Manually Starting SST Tunnel for Database Access (Bash)\nDESCRIPTION: Explicitly starts the SST tunnel process to forward connections to the RDS database. Can be used instead of relying on SST dev automatic handling, for direct DB access in migrations or debugging.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst tunnel\n```\n\n----------------------------------------\n\nTITLE: Configuring Prisma Schema for Lambda\nDESCRIPTION: Prisma schema configuration specifying binary targets for x86 and ARM architectures.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_91\n\nLANGUAGE: prisma\nCODE:\n```\n// For x86\nbinaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n// For ARM\n// binaryTargets = [\"native\", \"linux-arm64-openssl-3.0.x\"]\n```\n\n----------------------------------------\n\nTITLE: Creating a New Svelte Project using npm\nDESCRIPTION: These commands demonstrate how to create a new Svelte project using npm, either in the current directory or in a new directory named 'my-app'.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm create svelte@latest\n\n# create a new project in my-app\nnpm create svelte@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring TanStack Start Server for AWS Lambda (TypeScript)\nDESCRIPTION: This TypeScript configuration snippet updates the `app.config.ts` file for a TanStack Start application. It sets the server preset to `aws-lambda` and enables streaming, optimizing the application for deployment on AWS Lambda.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/tanstack.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  server: {\n    preset: \"aws-lambda\",\n    awsLambda: {\n      streaming: true\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Parsing Output of SST Dev Command - Bash\nDESCRIPTION: Sample output of a successful development environment start for SST, showing the deployed function's name and its accessible URL. Used to identify the endpoint for further API testing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n\\u2713  Complete\\n   Hono: https://gyrork2ll35rsuml2yr4lifuqu0tsjft.lambda-url.us-east-1.on.aws\\n\n```\n\n----------------------------------------\n\nTITLE: Linking a Task to a Function in SST v3\nDESCRIPTION: Shows how to link a Task to a Function component in SST v3, allowing the function to interact with the task.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/tasks-in-v3.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Function(\"MyFunction\", {\n  handler: \"src/lambda.handler\",\n  link: [task],\n});\n```\n\n----------------------------------------\n\nTITLE: Next.js Custom Domain Configuration\nDESCRIPTION: Comparison of Next.js site configuration between SST v2 and v3, showing how to handle custom domains during migration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MySite\", {\n  domain: {\n   name: \"domain.com\",\n   dns: sst.aws.dns({ override: true })\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to launch a development server for the Analog application. The server will be available at http://localhost:5173/ and supports automatic reloading.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/analog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Project with Bash\nDESCRIPTION: Command to create a new Flutter project named 'aws_flutter_web'.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter create aws_flutter_web\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application to Production\nDESCRIPTION: Deploys the application using SST's deploy command specifying the production stage. The deployment finalizes the setup, allowing the application to run in a production environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Astro Project Directory Structure\nDESCRIPTION: Displays the typical folder and file structure of an Astro project, showing the organization of public assets, components, layouts, and pages directories.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── components/\n│   │   └── Card.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Expected Error Message for Mismatched Pulumi Import Properties\nDESCRIPTION: Illustrates the error output from `sst deploy` when importing a Pulumi resource fails due to a mismatch between the defined arguments and the existing resource's state. The message directs the user on how to adjust the arguments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_11\n\nLANGUAGE: txt\nCODE:\n```\n✕  Failed\n   inputs to import do not match the existing resource\n\n   Set the following:\n   - `objectLockEnabled: undefined,`\n```\n\n----------------------------------------\n\nTITLE: Installing Client Dependency\nDESCRIPTION: Installs the @trpc/client package, required for setting up the tRPC client to communicate with the tRPC server.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @trpc/client@next\n```\n\n----------------------------------------\n\nTITLE: Removing Deployed Website with Bash\nDESCRIPTION: Command to remove the deployed Flutter web application from AWS CloudFront using SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsst remove --stage production\n```\n\n----------------------------------------\n\nTITLE: Deploying Rust Docker Service with SST\nDESCRIPTION: Command to deploy the Rust Docker service to production environment using SST deployment framework. This will build and deploy the Docker image configured in the project.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-rust-cluster/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Illustrating Stack-Level Dependency Between SQS and Lambda (TypeScript)\nDESCRIPTION: This code demonstrates a more subtle dependency issue between an SQS queue and a Lambda function. While not a direct cyclical dependency, it can cause problems when refactoring into separate stacks due to CloudFormation's resource limits.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst q = new SQS();\nconst fn = new Function({\n  environment: {\n    q: q.url,\n  }\n});\n\nq.consumer = new Function({\n  environment: {\n    fn: fn.url,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cyclical Dependency in CloudFront and Lambda Function (TypeScript)\nDESCRIPTION: This snippet shows an attempt to create a Lambda function with a function URL and a CloudFront distribution that points to it. It demonstrates a cyclical dependency issue where the function tries to reference the distribution's URL, which is not possible in CloudFormation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn = new Function();\nconst dist = new CloudFront({\n  route: {\n    \"/my-function\": fn.url,\n  },\n});\n\n// You cannot do this\nfn.addEnvironment({\n  key: \"endpoint\",\n  value: dist.url,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Node.js App Using Next.js\nDESCRIPTION: This snippet initializes a new Next.js application using npm. The command generates a boilerplate project structure, placing it in the directory named 'my-realtime-app'. No prerequisites are required for this command.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/realtime.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-next-app@latest my-realtime-app\ncd my-realtime-app\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Bun Project\nDESCRIPTION: Initializes SST in the Bun project and installs necessary dependencies.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbunx sst init\nbun install\n```\n\n----------------------------------------\n\nTITLE: Configuring SvelteKit Site in SST v2\nDESCRIPTION: Creates a SvelteKit site with a custom domain in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nnew SvelteKitSite(stack, \"MyWeb\", {\n  customDomain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Installing @trpc/client for Client Setup\nDESCRIPTION: Installs the client npm package @trpc/client to enable connection and interaction with the tRPC server. Required for setting up the client and making queries to the server.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @trpc/client@next\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependencies\nDESCRIPTION: Installs the required AWS SDK packages for S3 operations and pre-signed URL generation used in the Lambda function.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Building a Remix Application for Production\nDESCRIPTION: Command to build the Remix application for production deployment. This creates optimized bundles in the build directory.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nextjs-basic-auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Importing S3 Bucket in SST v3\nDESCRIPTION: Example of importing an existing S3 bucket into SST v3 using the transform and import properties to maintain existing configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst bucket = new sst.aws.Bucket(\"MyBucket\", {\n  transform: {\n    bucket: (args, opts) => {\n      args.bucket = \"app-prod-MyBucket\";\n      opts.import = \"app-prod-MyBucket\";\n    },\n    cors: (args, opts) => {\n      opts.import = \"app-prod-MyBucket\";\n    },\n    policy: (args, opts) => {\n      opts.import = \"app-prod-MyBucket\";\n    },\n    publicAccessBlock: (args, opts) => {\n      opts.import = \"app-prod-MyBucket\";\n    }\t\t\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Production Server\nDESCRIPTION: Command to run the Remix application in production mode after building, using the optimized production build.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/remix/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Starting a Svelte Development Server\nDESCRIPTION: Commands for starting a development server for a Svelte project. Includes an option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options in CMake\nDESCRIPTION: Sets the default build type to Debug if not specified and defines the available build types (Debug, Profile, Release) for the Flutter application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Creating Elysia Project with Bun\nDESCRIPTION: Command to initialize a new Elysia project using Bun. This creates a new directory named 'elysia-example' with the Elysia template.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-bun-elysia/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun create elysia ./elysia-example\n```\n\n----------------------------------------\n\nTITLE: Displaying Frameless Tabbed Bash Commands (pnpm)\nDESCRIPTION: Shows a Bash command for creating an Astro project using pnpm, nested within a Starlight `<TabItem>` labeled 'pnpm'. This tab is part of a `<Tabs>` group, and the code block is specifically rendered *without* a frame using `frame=\"none\"`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_23\n\nLANGUAGE: html\nCODE:\n```\n<Tabs>\n...\n<TabItem label=\"pnpm\">\n\n```bash frame=\"none\"\npnpm create astro --template starlight\n```\n\n</TabItem>\n<TabItem label=\"Yarn\">\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash frame=\"none\"\npnpm create astro --template starlight\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying a SvelteKit App with SST CLI\nDESCRIPTION: A command to deploy the SvelteKit application using the SST CLI with the production stage. This command builds the Docker image and deploys it to AWS.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Build Script for Linux Binary\nDESCRIPTION: Shell script to compile the Dart application into a Linux binary for AWS Lambda\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-dart-api/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/sh\n\n# Install dependencies\ndart pub get\n\n# build the binary\ndart compile exe bin/main.dart -o dist/bootstrap\n\n# Exit\nexit\n```\n\n----------------------------------------\n\nTITLE: Creating a SvelteKit Project (Container)\nDESCRIPTION: Uses the `sv create` command to scaffold a new SvelteKit project named 'aws-svelte-container' and navigates into the project directory. This is the initial step for the Container deployment example.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create aws-svelte-container\ncd aws-svelte-container\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Packages for S3 Operations\nDESCRIPTION: Installs the required AWS SDK npm packages for interacting with S3 and generating pre-signed URLs. This includes the S3 client library and the specialized request presigner module.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. Supports npm, yarn, pnpm, and bun.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nextjs-sharp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Deploying Next.js App to AWS - Bash\nDESCRIPTION: Deploy the configured Next.js app to AWS using SST deploy command, specifying the desired stage. Ensure AWS credentials are properly configured in the environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Uploading a File Using cURL\nDESCRIPTION: Demonstrates using cURL to test the file upload functionality by sending a local file to the deployed API endpoint. It serves as a practical example to verify the PUT request handling.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/worker.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl --upload-file package.json https://start-cloudflare-jayair-myworkerscript.sst-15d.workers.dev\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server with Vite\nDESCRIPTION: Command to start the Vite development server for local development of the Remix application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Running Vitest with SST Config Loaded\nDESCRIPTION: This command uses the sst load-config CLI to load the Config of your app and run tests using Vitest.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/testing-in-sst.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sst load-config -- vitest run\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Production Server\nDESCRIPTION: Command to run the built Remix application in production mode, serving optimized assets and server-side rendered content.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-redis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Modifying Built-in Links in SST\nDESCRIPTION: This snippet shows how to modify the built-in links in SST, specifically changing the permissions of a linkable bucket resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/linking.mdx#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsst.Linkable.wrap(sst.aws.Bucket, (bucket) => ({\n  properties: { name: bucket.name },\n  include: [\n    sst.aws.permission({\n      actions: [\"s3:GetObject\"],\n      resources: [bucket.arn]\n    })\n  ]\n}));\n```\n\n----------------------------------------\n\nTITLE: Replacing Monorepo Template Name via npx (Bash)\nDESCRIPTION: Runs a shell command to find and replace instances of 'monorepo-template' with 'MY_APP' project-wide. Requires the replace-in-file npm package to be globally or locally accessible. The command should be executed from the project root, and it will provide verbose output for all matched replacements.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx replace-in-file /monorepo-template/g MY_APP **/*.* --verbose\n```\n\n----------------------------------------\n\nTITLE: Running Database Benchmark Script with Bun\nDESCRIPTION: Command to execute the main benchmark script (index.ts) using Bun runtime. This will start the database benchmark process.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/database-benchmark/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Building Analog App for Production\nDESCRIPTION: Command to build the client/server project for production. Client artifacts are placed in dist/analog/public, and server artifacts in dist/analog/server.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-analog/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Creating a new SolidStart project using npm\nDESCRIPTION: Commands for initializing a new Solid project either in the current directory or in a specified folder using the Solid CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-solid/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Initializing Bun Project\nDESCRIPTION: Creates a new Bun project directory and initializes it.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir aws-bun && cd aws-bun\nbun init -y\n```\n\n----------------------------------------\n\nTITLE: Starting SST Development Mode\nDESCRIPTION: Launches SST in development mode, which starts both the SST infrastructure and the local Angular development server.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst dev\n```\n\n----------------------------------------\n\nTITLE: Python Workspace Directory Structure\nDESCRIPTION: Example directory structure showing multiple Python workspaces organization in an SST project, including source files and configuration placement.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-python-container/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n.\n├── workspace_a\n│   ├── pyproject.toml\n│   └── src\n│       └── workspace_a\n│           ├── __init__.py\n│           ├── api_a.py\n│           └── api_b.py\n└── workspace_b\n    ├── pyproject.toml\n    └── src\n        └── workspace_b\n            ├── __init__.py\n            └── index.py\n```\n\n----------------------------------------\n\nTITLE: Complex Autodeploy Workflow Example (TypeScript)\nDESCRIPTION: This snippet shows a more complex workflow configuration used in the SST Console deployment. It includes installing specific versions of Go, building platform scripts, and using Bun for SST commands.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/configure-autodeploy-workflow.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync workflow({ $, event }) {\n  await $`bun i`;\n  await $`goenv install 1.21.3 && goenv global 1.21.3`;\n  await $`cd ../platform && ./scripts/build`;\n  await $`bun i sst-linux-x64`;\n  event.action === \"removed\"\n    ? await $`bun sst remove`\n    : await $`bun sst deploy`;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a SvelteKit Project (Serverless)\nDESCRIPTION: Uses the `sv create` command (presumably `create-svelte`) to scaffold a new SvelteKit project named 'aws-svelte-kit' and navigates into the project directory. This is the initial step for the Serverless deployment example.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx sv create aws-svelte-kit\ncd aws-svelte-kit\n```\n\n----------------------------------------\n\nTITLE: Linking Dependencies and Setting Output Properties in CMake\nDESCRIPTION: Links the application with Flutter and GTK dependencies, adds build dependencies, and sets output directory properties to prevent running the unbundled copy.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_7\n\nLANGUAGE: CMake\nCODE:\n```\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. This allows developers to run the project locally for development and testing.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Defining a Shared Module in TypeScript\nDESCRIPTION: Example of defining a shared module 'Example' in the core package, which can be used across other packages.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport module Example {\n  export function hello() {\n    return \"Hello, world!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing the Client with CURL\nDESCRIPTION: Utilizes curl to test the client Lambda function by sending a request to the generated client URL, which triggers a response from the server.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://3x4y4kg5zv77jeroxsrnjzde3q0tgxib.lambda-url.us-east-1.on.aws\n```\n\n----------------------------------------\n\nTITLE: Testing SST Application with curl Command\nDESCRIPTION: Tests the deployed client URL using curl to verify the response from the server. Confirms the API's operational status by printing the greeting message received from the server.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://my-trpc-app-jayair-clientscript.sst-15d.workers.dev\n```\n\n----------------------------------------\n\nTITLE: Generating Cloudflare Binding Types\nDESCRIPTION: Command to generate TypeScript types for Cloudflare bindings defined in wrangler.toml. Must be rerun after any changes to wrangler.toml.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix-cf-template/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run typegen\n```\n\n----------------------------------------\n\nTITLE: Creating SolidStart Site in SST v2\nDESCRIPTION: Sets up a SolidStart site with a custom domain in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nnew SolidStartSite(stack, \"MyWeb\", {\n  customDomain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Checking SST Version\nDESCRIPTION: Verifies the installed SST version to ensure version 3 is installed. Prerequisite: Install SST CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_4\n\nLANGUAGE: Bash\nCODE:\n```\nnpx sst version\n```\n\n----------------------------------------\n\nTITLE: Configuring Vercel DNS Adapter in SST\nDESCRIPTION: This code demonstrates how to use the Vercel DNS adapter to configure a custom domain in SST, assuming the necessary environment variables are set.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/custom-domains.mdx#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  domain: {\n    name: \"example.com\",\n    dns: sst.vercel.dns()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Analog App\nDESCRIPTION: Command to install the application dependencies using npm.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-analog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Adding AWS Lambda Dart Runtime Dependency\nDESCRIPTION: YAML configuration to add the aws_lambda_dart_runtime package from a custom fork\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-dart-api/README.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  aws_lambda_dart_runtime:\n    git:\n      url: https://github.com/katallaxie/aws-lambda-dart-runtime\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for React TypeScript Project\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions in ESLint for a React TypeScript project. It sets the ECMAScript version, source type, and specifies the TypeScript configuration files to use.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for SST Hono Project\nDESCRIPTION: Updates the tsconfig.json file to include an outDir for compilation and excludes node_modules.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_56\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n    \"outDir\": \"./dist\"\n  },\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in the SolidStart Application\nDESCRIPTION: This snippet initializes the SST in the SolidStart app, installing necessary dependencies.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Creating a tRPC Server in TypeScript\nDESCRIPTION: Defines a tRPC server in TypeScript using initTRPC and awsLambdaRequestHandler. Includes a greet method that returns a personalized greeting message based on input.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/trpc.mdx#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst t = initTRPC\n  .context<CreateAWSLambdaContextOptions<APIGatewayProxyEvent | APIGatewayProxyEventV2>>()\n  .create();\n\nconst router = t.router({\n  greet: t.procedure\n    .input(z.object({ name: z.string() }))\n    .query(({ input }) => {\n      return `Hello ${input.name}!`;\n    }),\n});\n\nexport type Router = typeof router;\n\nexport const handler = awsLambdaRequestHandler({\n  router: router,\n  createContext: (opts) => opts,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Svelte Project with sv CLI\nDESCRIPTION: Commands to create a new Svelte project using the sv CLI tool. It demonstrates how to create a project in the current directory or in a specified directory.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/svelte-kit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpx sv create\n\n# create a new project in my-app\nnpx sv create my-app\n```\n\n----------------------------------------\n\nTITLE: Running Angular Development Server\nDESCRIPTION: Command to start the Angular development server that hosts the application locally on port 4200 with auto-reload capabilities.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-angular/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nng serve\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 Application for Production\nDESCRIPTION: Commands to build the Nuxt 3 application for production deployment using various package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Including Generated Plugin Rules in CMake\nDESCRIPTION: Includes generated plugin build rules from Flutter which handle building plugins and adding them to the application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_8\n\nLANGUAGE: CMake\nCODE:\n```\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build\nDESCRIPTION: Commands to locally preview the production build of the Nuxt 3 application using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt-container/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Deploying Deno Application with SST\nDESCRIPTION: Command to deploy the Deno application to AWS using SST and Docker.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/deno.mdx#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Initializing npm\nDESCRIPTION: Creates a new directory for the tRPC app and initializes it with npm. No dependencies are required for this step. The command creates a new project directory and an initial package.json file using npm defaults.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/trpc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-trpc-app && cd my-trpc-app\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Initializing Project and Setting Basic Properties in CMake\nDESCRIPTION: Sets up the project with minimum CMake version requirement, project name, language, and defines the binary name and application ID for the Flutter application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\n# Project-level configuration.\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"aws_flutter_web\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.aws_flutter_web\")\n```\n\n----------------------------------------\n\nTITLE: Setting Cloudflare API Credentials in Environment (bash)\nDESCRIPTION: Demonstrates setting a Cloudflare API token as an environment variable prior to running SST commands. Many providers use environment variables to source credentials. The shell command should be executed in your development or CI environment.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/providers.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexport CLOUDFLARE_API_TOKEN=aaaaaaaa_aaaaaaaaaaaa_aaaaaaaa\n\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for TypeScript in React Vite Project\nDESCRIPTION: This snippet shows how to configure the parserOptions in ESLint for a React TypeScript project using Vite. It sets up the parser to use the latest ECMAScript version, specifies the source type as module, and points to the TypeScript configuration files.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Python Project Configuration with pyproject.toml\nDESCRIPTION: TOML configuration for Python project metadata and version constraints. Specifies Python version requirement to match Lambda runtime for compatibility.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"aws-python\"\nversion = \"0.1.0\"\ndescription = \"A SST app\"\nauthors = [\n    {name = \"<your_name_here>\", email = \"<your_email_here>\" },\n]\nrequires-python = \"==3.11.*\"\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Deploying SST Rust Lambda Functions\nDESCRIPTION: A complete GitHub Actions workflow configuration for deploying SST Rust Lambda functions to AWS. The workflow sets up Node.js, pnpm, Rust, Zig, and cargo-lambda before deploying the application to the production stage using arm64 architecture.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-lambda-rust-multiple-binaries/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yml\nCODE:\n```\nname: Deploy Prod\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy-prod:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: pguyot/arm-runner-action@v2\n\n      - name: use Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: latest\n\n      - name: use pnpm\n        uses: pnpm/action-setup@v4\n        with:\n          version: latest\n\n      - name: get pnpm store directory\n        shell: bash\n        run: |\n          echo \"STORE_PATH=$(pnpm store path --silent)\" >> $GITHUB_ENV\n\n      - name: setup pnpm cache\n        uses: actions/cache@v3\n        with:\n          path: ${{ env.STORE_PATH }}\n          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}\n          restore-keys: |\n            ${{ runner.os }}-pnpm-store-\n\n      - name: use Rust\n        uses: actions-rs/toolchain@v1\n\n      - name: use Rust cache\n        uses: Swatinem/rust-cache@v2\n\n      - name: use Zig\n        uses: korandoru/setup-zig@v1\n        with:\n          zig-version: master\n\n      - name: use Cargo Lambda\n        uses: jaxxstorm/action-install-gh-release@v1.9.0\n        with:\n          repo: cargo-lambda/cargo-lambda\n          platform: linux\n          arch: aarch64 # | x86_64\n\n      - name: pnpm install\n        run: pnpm install --frozen-lockfile\n\n      - name: sst install providers\n        run: |\n          set -euxo pipefail\n          pnpm sst install\n\n      - name: sst deploy\n        run: |\n          set -euxo pipefail\n          pnpm sst deploy --stage prod\n\n    env:\n      STAGE: prod\n      LOG_LEVEL: info\n      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}\n      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Creating a Svelte Project with sv CLI\nDESCRIPTION: Commands for creating a new Svelte project either in the current directory or in a specified folder. Uses the sv CLI tool to scaffold a new project.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpx sv create\n\n# create a new project in my-app\nnpx sv create my-app\n```\n\n----------------------------------------\n\nTITLE: Example S3 Bucket Name for Pulumi Import\nDESCRIPTION: Provides an example name for an existing S3 bucket that will be used in the Pulumi resource import example.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_8\n\nLANGUAGE: txt\nCODE:\n```\nmybucket-xnbmhcvd\n```\n\n----------------------------------------\n\nTITLE: Deploying Initial Pulumi Resource Import Configuration (Bash)\nDESCRIPTION: Command to deploy the SST application after defining the Pulumi resource with the `import` option. This deployment is likely to fail if the specified arguments in the code don't match the actual configuration of the existing AWS resource.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy\n```\n\n----------------------------------------\n\nTITLE: Initializing SST v3 with Bash\nDESCRIPTION: Command to initialize SST v3 in the project root folder, selecting AWS as the cloud provider.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsst init\n```\n\n----------------------------------------\n\nTITLE: Running Bun TypeScript Application\nDESCRIPTION: Command to execute the main TypeScript application file using Bun runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/aws-bun/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing AWS SDK Dependencies (Serverless)\nDESCRIPTION: Installs the necessary AWS SDK v3 packages (`@aws-sdk/client-s3` for S3 operations and `@aws-sdk/s3-request-presigner` for generating pre-signed URLs) using npm. These packages are required by the server-side code that interacts with S3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/svelte.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\n```\n\n----------------------------------------\n\nTITLE: Astro Project Directory Structure\nDESCRIPTION: Shows the default directory structure and file organization of an Astro basics project, including public assets, source files, components, layouts, and pages.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro-redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── components/\n│   │   └── Card.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Accessing Angular CLI Help\nDESCRIPTION: Command to display Angular CLI help information and documentation.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-angular/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nng help\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build Locally\nDESCRIPTION: Commands to locally preview the Nuxt 3 production build using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nuxt/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Hugging Face Models Documentation Header\nDESCRIPTION: Markdown header and introduction explaining the purpose of deploying Hugging Face models using SST on AWS Lambda, with specific focus on the TinyStories-33M model and PyTorch CPU runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-python-huggingface/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# ❍ Using Hugging Face Models with Python\n\nDeploy lightweight huggingface models using sst on AWS Lambda.\n\nThis example uses the [transformers](https://github.com/huggingface/transformers) library to generate text using the [TinyStories-33M](https://huggingface.co/roneneldan/TinyStories-33M) model. The backend is the pytorch cpu runtime. This example also shows how it is possible to use custom index resolution to get dependencies from a private pypi server such as the pytorch cpu link. This example also shows how to use a custom Dockerfile to handle complex builds such as installing pytorch and pruning the build size.\n\nNote that this is not a production ready example.\n```\n\n----------------------------------------\n\nTITLE: Deploying NestJS with Mau\nDESCRIPTION: Commands for installing Mau globally and deploying a NestJS application to AWS using the Mau platform\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nestjs-container/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install -g mau\n$ mau deploy\n```\n\n----------------------------------------\n\nTITLE: Creating a New FormatSpecifier Instance in TypeScript\nDESCRIPTION: Instantiates a new FormatSpecifier with optional parameters. It is used for format specification with methods for formatting and prefixing. No dependencies are specified in this context.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nnew FormatSpecifier(\"param1\");\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore File\nDESCRIPTION: Adds a .dockerignore file to exclude unnecessary files from the Docker build context.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/bun.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnode_modules\n.git\n.gitignore\nREADME.md\nDockerfile*\n```\n\n----------------------------------------\n\nTITLE: Displaying SST v2 CLI Output\nDESCRIPTION: Shows the new CLI output in SST v2, which is faster and has a cleaner UI. It displays the app name, stage, console URL, and deployment status of various components.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/sst-v2.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nSST v2.0.38  ready!\n\n→ App:     my-sst-app\n  Stage:   Jay\n  Console: https://console.sst.dev/my-sst-app/Jay\n\n✓ Deployed:\n  Database\n  Api\n  API: https://4f574d6lqc.execute-api.us-east-1.amazonaws.com\n  Web\n  SITE: https://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Creating Standard Compilation Settings Function in CMake\nDESCRIPTION: Defines a function to apply standard compilation settings to targets, including C++14 standard, warning flags, optimization levels, and debug/release definitions.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating a Lambda Function with Architecture Property\nDESCRIPTION: Example of creating a new Function in a stack with the architecture property set to 'arm_64'. This demonstrates practical usage of the architecture property in an SST Function constructor.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nnew Function(stack, \"Function\", {\n  architecture: \"arm_64\",\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Vite Development Server\nDESCRIPTION: Command to run the Vite development server for local development.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix-cf-template/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Deploying to CloudFront with Bash\nDESCRIPTION: Command to deploy the Flutter web application to AWS CloudFront using SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers. This allows developers to run the application locally for development and testing purposes.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nextjs-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Frameless Tabbed Bash Commands (Yarn)\nDESCRIPTION: Shows a Bash command for creating an Astro project using Yarn, nested within a Starlight `<TabItem>` labeled 'Yarn'. This tab is part of a `<Tabs>` group, and the code block is specifically rendered *without* a frame using `frame=\"none\"`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_24\n\nLANGUAGE: html\nCODE:\n```\n<Tabs>\n...\n<TabItem label=\"Yarn\">\n\n```bash frame=\"none\"\nyarn create astro --template starlight\n```\n\n</TabItem>\n</Tabs>\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash frame=\"none\"\nyarn create astro --template starlight\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nextjs-add-behavior/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using Bun package manager.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/aws-bun/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Installing TypeScript as a Development Dependency\nDESCRIPTION: Command to install TypeScript as a development dependency for the project, which is required for compiling the TypeScript code during the build process.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpm install typescript --save-dev\n```\n\n----------------------------------------\n\nTITLE: Passing Configuration to Next.js in SST\nDESCRIPTION: Pass environment variables or configuration values to a Next.js application by specifying them in the environment property of the Nextjs component in SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Nextjs(\"MyWeb\", {\n  environment: {\n    SENTRY_DSN\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Renaming Project Files in Bash\nDESCRIPTION: Command to rename files in the project, replacing 'aws-auth-react' with 'MY_APP' using npx replace-in-file.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx replace-in-file '/aws-auth-react/g' 'MY_APP' '**/*.*' --verbose\n```\n\n----------------------------------------\n\nTITLE: Configuring SST Blog Page with Astro\nDESCRIPTION: This code snippet defines the configuration for the SST blog page. It sets the title, template, description, and pagefind options. It also imports and renders a PostList component to display blog posts.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\n---\ntitle: Blog\ntemplate: splash\ndescription: News and updates from the SST team.\npagefind: false\n---\n\nimport PostList from \"../../../components/PostList.astro\";\n\n<PostList />\n```\n\n----------------------------------------\n\nTITLE: Building Nuxt 3 for Production\nDESCRIPTION: Commands to build the Nuxt 3 application for production deployment using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/nuxt/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run build\n\n# pnpm\npnpm run build\n\n# yarn\nyarn build\n\n# bun\nbun run build\n```\n\n----------------------------------------\n\nTITLE: Creating a SolidStart Project using npm\nDESCRIPTION: Commands to initialize a new Solid project using npm. It provides options for creating a project in the current directory or in a new directory.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-solid-container-ws/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Installing SST Package via NPM\nDESCRIPTION: Installs SST locally as a dependency in a Node.js project using npm package manager.\nSOURCE: https://github.com/sst/sst/blob/dev/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install sst\n```\n\n----------------------------------------\n\nTITLE: Building Remix Application for Production\nDESCRIPTION: Command to build the Remix application for production deployment, optimizing assets and generating server-side code.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables with SST Deploy Command\nDESCRIPTION: Pass environment variables directly to the SST deployment command, which makes them available in the SST configuration file.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nSOME_ENV_VAR=FOO sst deploy\n```\n\n----------------------------------------\n\nTITLE: Starting the SolidStart development server\nDESCRIPTION: Commands for starting the development server after installing dependencies, with an option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-solid/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Plugin Wrapper Library in CMake\nDESCRIPTION: Creates and configures the static library for Flutter plugin wrapper with appropriate settings and dependencies.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/flutter/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Function Stack in Multi-Stack Architecture (TypeScript)\nDESCRIPTION: This snippet shows the definition of a function stack when splitting resources into multiple stacks. It's part of an example demonstrating how stack-level dependencies can lead to deployment issues.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/moving-away-from-cdk.mdx#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfunction FnStack() {\n  const fn = new Function();\n\n  return fn;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for React Router Template\nDESCRIPTION: This command installs the necessary dependencies for the React Router template project.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-csr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Setting up SolidStart Site in SST v3\nDESCRIPTION: Configures a SolidStart site with a custom domain in SST v3.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.SolidStart(\"MyWeb\", {\n  domain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a SolidStart Project with npm\nDESCRIPTION: Commands to initialize a new SolidStart project either in the current directory or in a new folder. Uses the 'npm init solid@latest' command to scaffold a new Solid.js application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-solid-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpm init solid@latest\n\n# create a new project in my-app\nnpm init solid@latest my-app\n```\n\n----------------------------------------\n\nTITLE: Setting Date Format Localization in JavaScript\nDESCRIPTION: A single-line JavaScript code block demonstrating how to dynamically require a language file for date formatting localization based on a variable 'l'.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n```js\ndateformat.i18n = require('./lang/' + l);\n```\n```\n\n----------------------------------------\n\nTITLE: Previewing Nuxt 3 Production Build\nDESCRIPTION: Commands to locally preview the production build before deployment using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/nuxt/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run preview\n\n# pnpm\npnpm run preview\n\n# yarn\nyarn preview\n\n# bun\nbun run preview\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using Bun package manager.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-bun-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Astro Project Structure - Directory Layout\nDESCRIPTION: Shows the default directory structure and file organization of a basic Astro project, including public assets, source files, components, layouts, and pages\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-monorepo/packages/astro/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── components/\n│   │   └── Card.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Deploy Node.js App with SST\nDESCRIPTION: Deploys the entire application using SST with a specified stage, facilitating rollback and different environment configurations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server for Analog App\nDESCRIPTION: Command to run a development server for the Analog app, which will be accessible at http://localhost:5173/.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-analog/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Displaying SST Update Permalink in CLI\nDESCRIPTION: This snippet shows the CLI output when deploying an SST app, demonstrating how the unique permalink is displayed to the user.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/update-permalinks.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n↗  Permalink   https://sst.dev/u/318d3879\n```\n\n----------------------------------------\n\nTITLE: Setting up WebSocket API in SST v2\nDESCRIPTION: Configures a WebSocket API with connect and disconnect routes in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nconst api = new WebSocketApi(stack, \"MyApi\", {\n  customDomain: \"api.example.com\"\n});\n\napi.addRoutes(stack, {\n  $connect: \"src/connect.handler\",\n  $disconnect: \"src/disconnect.handler\"\n});\n```\n\n----------------------------------------\n\nTITLE: Starting a Svelte Development Server\nDESCRIPTION: These commands show how to start a development server for a Svelte project, with an option to automatically open the app in a new browser tab.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Building Remix Project for Production\nDESCRIPTION: Command to build the Remix application for production deployment, optimizing assets and generating server-side code.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/remix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Installing NestJS Project Dependencies\nDESCRIPTION: Command to install all required npm dependencies for the NestJS project\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nestjs-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ npm install\n```\n\n----------------------------------------\n\nTITLE: Loco Server Startup Output\nDESCRIPTION: Complete console output showing the server startup process, including compilation status, environment settings, and ASCII art logo. Shows the server listening on port 5150.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-rust-loco/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n$ cargo loco start\nFinished dev [unoptimized + debuginfo] target(s) in 21.63s\n    Running `target/debug/myapp start`\n\n    :\n    :\n    :\n\ncontroller/app_routes.rs:203: [Middleware] Adding log trace id\n\n                      ▄     ▀\n                                 ▀  ▄\n                  ▄       ▀     ▄  ▄ ▄▀\n                                    ▄ ▀▄▄\n                        ▄     ▀    ▀  ▀▄▀█▄\n                                          ▀█▄\n▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄▄   ▄▄▄▄▄▄▄▄▄▄▄ ▄▄▄▄▄▄▄▄▄ ▀▀█\n ██████  █████   ███ █████   ███ █████   ███ ▀█\n ██████  █████   ███ █████   ▀▀▀ █████   ███ ▄█▄\n ██████  █████   ███ █████       █████   ███ ████▄\n ██████  █████   ███ █████   ▄▄▄ █████   ███ █████\n ██████  █████   ███  ████   ███ █████   ███ ████▀\n   ▀▀▀██▄ ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀▀▀ ██▀\n       ▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀\n                https://loco.rs\n\nenvironment: development\n   database: automigrate\n     logger: debug\ncompilation: debug\n      modes: server\n\nlistening on localhost:5150\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic .env File for SST\nDESCRIPTION: Create a basic .env file at the root of an SST project to define environment variables that will be automatically loaded into the SST configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/environment-variables.mdx#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nSOME_ENV_VAR=FOO\n```\n\n----------------------------------------\n\nTITLE: Including Flutter Library and System Dependencies in CMake\nDESCRIPTION: Adds the Flutter managed directory, system-level dependencies like GTK, and defines the application ID as a preprocessor definition.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: SSO Login Script for Windows with WSL\nDESCRIPTION: This bash script provides a workaround for opening the SSO login browser when using Windows with WSL.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/aws-accounts.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nif grep -q WSL /proc/version; then\n   export BROWSER=wslview\nfi\n\naws sso login --sso-session=acme\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using different package managers. The server can be run using npm, yarn, pnpm, or bun.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-realtime-nextjs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Importing Custom VideoAside Component in Astro\nDESCRIPTION: Imports a custom Astro component named 'VideoAside' from a relative path within the project structure. This component is likely used to display video content in an aside element.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\nimport VideoAside from \"../../../components/VideoAside.astro\";\n```\n\n----------------------------------------\n\nTITLE: Starting a Remix Application in Production Mode\nDESCRIPTION: Command to run the built Remix application in production mode using the built-in Remix app server.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-container/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun for Database Benchmark\nDESCRIPTION: Command to install project dependencies using Bun package manager. This step is necessary before running the benchmark.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/database-benchmark/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for TypeScript in Vite\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions property in the ESLint configuration for a TypeScript project using Vite. It specifies the project files and root directory for TypeScript configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/packages/web/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default tseslint.config({\n  languageOptions: {\n    // other options...\n    parserOptions: {\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\n      tsconfigRootDir: import.meta.dirname,\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Running Remix App in Production Mode\nDESCRIPTION: Command to start the Remix application in production mode after it has been built. This runs the optimized version of the app suitable for deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating a New Astro Project with the Basics Template\nDESCRIPTION: Command to initialize a new Astro project using the npm create command with the basics template. This is the recommended way to start a new Astro project.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/astro4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Installing SST CLI Globally via Curl\nDESCRIPTION: Installs the SST CLI globally on the system using a curl command that downloads and executes the installation script.\nSOURCE: https://github.com/sst/sst/blob/dev/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://sst.dev/install | bash\n```\n\n----------------------------------------\n\nTITLE: Accessing Parameter in SST v2 Lambda Function\nDESCRIPTION: Shows how to access a Config Parameter's value in a Lambda function using SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Config } from \"sst/node/config\";\n\nconsole.log(Config.MyParameter);\n```\n\n----------------------------------------\n\nTITLE: Starting Nuxt 3 Development Server\nDESCRIPTION: Commands to start the development server on http://localhost:3000 using different package managers.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/nuxt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# npm\nnpm run dev\n\n# pnpm\npnpm run dev\n\n# yarn\nyarn dev\n\n# bun\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Diff Syntax with JavaScript Highlighting\nDESCRIPTION: Demonstrates combining `diff` syntax (using `+` for additions and `-` for deletions) with JavaScript syntax highlighting within the same code block by specifying `diff lang=\"js\"`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n```diff lang=\"js\"\n  function thisIsJavaScript() {\n    // This entire block gets highlighted as JavaScript,\n    // and we can still add diff markers to it!\n-   console.log('Old code to be removed')\n+   console.log('New and shiny code!')\n  }\n```\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack Development Server\nDESCRIPTION: Commands for installing dependencies and starting the development server using pnpm package manager. The server rebuilds assets automatically on file changes.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/tanstack-start/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running the TanStack Website for Local Documentation Development\nDESCRIPTION: Commands to navigate to the tanstack.com directory, install dependencies, and start the development server for previewing documentation changes.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-tanstack-start-alpha/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Styling Form Component - CSS\nDESCRIPTION: Provides CSS styling for the upload form component, defining various visual elements such as padding, border, and button appearance. Ensure the styles match any referenced CSS variables.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nextjs.mdx#2025-04-22_snippet_6\n\nLANGUAGE: css\nCODE:\n```\n.form {\n  padding: 2rem;\n  border-radius: 0.5rem;\n  background-color: var(--gray-alpha-100);\n}\n\n.form input {\n  margin-right: 1rem;\n}\n\n.form button {\n  appearance: none;\n  padding: 0.5rem 0.75rem;\n  font-weight: 500;\n  font-size: 0.875rem;\n  border-radius: 0.375rem;\n  background-color: transparent;\n  font-family: var(--font-geist-sans);\n  border: 1px solid var(--gray-alpha-200);\n}\n\n.form button:active:enabled {\n  background-color: var(--gray-alpha-200);\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories\nDESCRIPTION: Commands to navigate to the TanStack directory and clone both the main website repository and a project repository (using form as an example).\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/tanstack-start/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Displaying Astro Project Structure (Text)\nDESCRIPTION: This snippet shows the folder and file structure of a basic Astro project. It includes the public directory for static assets, src directory for components, layouts, and pages, and the package.json file.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro-stream/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── components/\n│   │   └── Card.astro\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cross-Building Root Filesystem in CMake\nDESCRIPTION: Configures the root filesystem for cross-building by setting the system root and find root paths when a Flutter target platform sysroot is specified.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: SST v2 Stack Configuration\nDESCRIPTION: Traditional SST v2 stack configuration showing explicit stack imports and sequential stack initialization.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { SSTConfig } from \"sst\";\nimport { ApiStack } from \"./stacks/ApiStack\";\nimport { AuthStack } from \"./stacks/AuthStack\";\nimport { StorageStack } from \"./stacks/StorageStack\";\nimport { FrontendStack } from \"./stacks/FrontendStack\";\n\nexport default {\n  // ...\n\n  stacks(app) {\n    app\n      .stack(StorageStack)\n      .stack(ApiStack)\n      .stack(AuthStack)\n      .stack(FrontendStack);\n  }\n} satisfies SSTConfig;\n```\n\n----------------------------------------\n\nTITLE: Creating a new Svelte project with sv CLI\nDESCRIPTION: Commands for creating a new Svelte project either in the current directory or in a specified folder. Uses the sv CLI tool from sveltejs.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-kit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# create a new project in the current directory\nnpx sv create\n\n# create a new project in my-app\nnpx sv create my-app\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Build Commands\nDESCRIPTION: Sets up custom build commands for Flutter tool backend integration, including phony targets for forced rebuilds.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/flutter/CMakeLists.txt#2025-04-22_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      ${FLUTTER_TARGET_PLATFORM} $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Running Vite Development Server for Remix\nDESCRIPTION: Command to start the Vite development server for local Remix app development.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-stream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Calling fullArgs Method in TypeScript Script\nDESCRIPTION: Exemplifies calling the fullArgs method within a TypeScript snippet, where the method is used after simple arithmetic operations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nfullArgs(true, false ,true);\n```\n\n----------------------------------------\n\nTITLE: Reporting Errors in Node.js Container Applications\nDESCRIPTION: This snippet demonstrates how to report errors in a Node.js container application using console.error. It shows the basic error logging and the required SST JS SDK import for container applications.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/issues-container-support.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.error(new Error(\"my-error\"));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"sst\";\n\nconsole.error(new Error(\"my-error\"));\n```\n\n----------------------------------------\n\nTITLE: Exporting an Example Module in TypeScript\nDESCRIPTION: Demonstrates how to organize shared TypeScript code into a module, with a named export providing a 'hello' function. Other packages can import and use this Example module if configured in exports. Requires TypeScript support and the module must be included in the package exports field for proper importability.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/set-up-a-monorepo.mdx#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nexport module Example {\n  export function hello() {\n    return \"Hello, world!\";\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TanStack Directory\nDESCRIPTION: Command to create a new directory for TanStack project development.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/tanstack-start/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Starting Remix App in Production Mode\nDESCRIPTION: Command to run the built Remix application in production mode after building.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-stream/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Backing Up SST Configuration\nDESCRIPTION: Backs up the existing sst.config.ts to sst.config.ts.bk. Requires a file system with mv command support.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_5\n\nLANGUAGE: Bash\nCODE:\n```\nmv sst.config.ts sst.config.ts.bk\n```\n\n----------------------------------------\n\nTITLE: Displaying Framed Tabbed Bash Commands (Yarn)\nDESCRIPTION: Shows a Bash command for creating an Astro project using Yarn, nested within a Starlight `<TabItem>` labeled 'Yarn'. This tab is part of a `<Tabs>` group, and the code block is rendered within a frame.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n<Tabs>\n...\n<TabItem label=\"Yarn\">\n\n```bash\nyarn create astro --template starlight\n```\n\n</TabItem>\n</Tabs>\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nyarn create astro --template starlight\n```\n```\n\n----------------------------------------\n\nTITLE: Testing Streaming Lambda with curl Command\nDESCRIPTION: Uses the curl command with --no-buffer option to test a streaming Lambda function URL, preventing buffering of the response.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_75\n\nLANGUAGE: bash\nCODE:\n```\ncurl --no-buffer https://u3dyblk457ghskwbmzrbylpxoi0ayrbb.lambda-url.us-east-1.on.aws\n```\n\n----------------------------------------\n\nTITLE: Starting Elysia Development Server with Bun\nDESCRIPTION: Command to start the development server for the Elysia project. This runs the project and makes it accessible at http://localhost:3000/.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-bun-elysia/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run dev\n```\n\n----------------------------------------\n\nTITLE: Imports and Client Initialization for SES - TypeScript\nDESCRIPTION: Provides required imports and client initialization for the Lambda handler that sends SES emails. Dependencies: `sst` for Resource access, `@aws-sdk/client-sesv2` for email commands. Prepares the SES client object utilized in the preceding handler.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/email.mdx#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Resource } from \\\"sst\\\";\\nimport { SESv2Client, SendEmailCommand } from \\\"@aws-sdk/client-sesv2\\\";\\n\\nconst client = new SESv2Client();\n```\n\n----------------------------------------\n\nTITLE: Generating Angular Components and Resources\nDESCRIPTION: Angular CLI command for scaffolding new application components and other resources like directives, pipes, services, classes, guards, interfaces, enums, and modules.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-angular/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nng generate component component-name\n```\n\n----------------------------------------\n\nTITLE: Starting the SolidStart Development Server\nDESCRIPTION: Commands to start the development server for a SolidStart project. It includes an option to open the app in a new browser tab automatically.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-solid-container-ws/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration in TypeScript\nDESCRIPTION: Imports the default export (presumably a configuration object) from the 'config.ts' file located four directories above the current file's directory. This configuration is likely used somewhere within the application logic related to this page, possibly for environment-specific settings or feature flags, although its specific usage isn't shown in this snippet.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/legal/privacy-policy.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from '../../../../config.ts';\n```\n\n----------------------------------------\n\nTITLE: Removing SST Resources\nDESCRIPTION: Command to remove all resources associated with a specific stage of an SST application.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/workflow.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsst remove --stage <name>\n```\n\n----------------------------------------\n\nTITLE: Displaying SST Deploy Permalink in CLI\nDESCRIPTION: Example of the SST CLI output showing the permalink that can be used to view deploy details in the Console. The permalink provides a unique URL for each update in your app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n↗  Permalink  https://sst.dev/u/318d3879 \n```\n\n----------------------------------------\n\nTITLE: Setting Flutter Library Configuration in CMake\nDESCRIPTION: Configures the core Flutter library settings including paths, headers, and interface library setup for Windows builds.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Marking Insertions/Deletions in JavaScript Code Block\nDESCRIPTION: Illustrates marking text ('return true;') or entire lines as inserted (`ins=\"inserted\"`) or deleted (`del=\"deleted\"`) within a JavaScript code block.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n```js \"return true;\" ins=\"inserted\" del=\"deleted\"\nfunction demo() {\n  console.log('These are inserted and deleted marker types');\n  // The return statement uses the default marker type\n  return true;\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Creating a TypeScript Arrow Function for fullArgs Usage\nDESCRIPTION: Introduces a demo function returning a call to fullArgs with boolean values, demonstrating TypeScript functions and methods seamlessly integrated.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nfunction demo() { return fullArgs(true, false ,true); }\n```\n\n----------------------------------------\n\nTITLE: Using fullArgs Method in TypeScript Example\nDESCRIPTION: Demonstrates using the fullArgs method with boolean parameters within a TypeScript function. Highlights practical method invocations in TypeScript.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n+   return fullArgs(true, false ,true);\n```\n\n----------------------------------------\n\nTITLE: Installing Required AWS SDK Packages - Bash\nDESCRIPTION: Installs the AWS SDK packages for S3 client operations and presigned URL generation. Prerequisite for developing S3 file upload/download capabilities in the Hono app. Should be run inside the Node.js project directory.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/hono.mdx#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @aws-sdk/client-s3 @aws-sdk/s3-request-presigner\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Project Directory and Initializing NPM (bash)\nDESCRIPTION: Creates a new directory named `my-hono-api`, changes the current directory into it, and initializes a new Node.js project with default settings using `npm init -y`. This sets up the basic project structure required before initializing SST.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/cloudflare/hono.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir my-hono-api && cd my-hono-api\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Basics Template via NPM\nDESCRIPTION: Command to create a new Astro project using the basics template through npm create command.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Updating Frontend Dev Scripts\nDESCRIPTION: Updates the frontend development script by removing 'sst bind' from package.json for a Next.js app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\n- \"dev\": \"sst bind next dev\",\n+ \"dev\": \"next dev\",\n```\n\n----------------------------------------\n\nTITLE: Deploying the SST Project in Bash\nDESCRIPTION: Commands to install dependencies and deploy the SST project using npx.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpx sst deploy\n```\n\n----------------------------------------\n\nTITLE: Defining the noop Method in TypeScript\nDESCRIPTION: Declares a noop method that performs no operations. It does not require any parameters or return any values.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nnoop(): void\n```\n\n----------------------------------------\n\nTITLE: SST Deployment Completion Output (Bash)\nDESCRIPTION: Displays a success banner with the deployed service URL, used for accessing the live Fargate Express app post-deploy. This output is a result of the previous deploy command.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/prisma.mdx#2025-04-22_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n✓  Complete\\n   MyService: http://jayair-MyServiceLoadBala-592628062.us-east-1.elb.amazonaws.com\n```\n\n----------------------------------------\n\nTITLE: Highlighting Lines in JavaScript Code Block\nDESCRIPTION: Demonstrates highlighting specific lines (lines 3 and 4) within a JavaScript code block using the `{3-4}` marker syntax.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n```js {3-4}\nfunction demo() {\n  // This line is not highlighted\n  // This line (#2) and the next one are highlighted\n  return 'This is line #3 of this snippet';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Tests with npm in Bash\nDESCRIPTION: Command to run tests using npm, which uses Vitest configured with the sst shell CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Wrapper Sources in CMake\nDESCRIPTION: Sets up the C++ wrapper source files for core functionality, plugins, and application components.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cache Paths for Autodeploy Runner\nDESCRIPTION: Configuration for caching specific directories between Autodeploy builds. This can significantly improve build times by preserving node_modules and other specified directories across deployments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/console.mdx#2025-04-23_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconsole: {\n  autodeploy: {\n    runner: {\n      cache: {\n        paths: [\"node_modules\", \"/path/to/cache\"]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Build in CMake\nDESCRIPTION: This CMake script sets up a Flutter application for Windows. It defines the executable target with all necessary source files, applies build settings, adds version information through compiler definitions, and configures dependencies to the Flutter engine.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/runner/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add preprocessor definitions for the build version.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION=\\\"${FLUTTER_VERSION}\\\"\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MAJOR=${FLUTTER_VERSION_MAJOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_MINOR=${FLUTTER_VERSION_MINOR}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_PATCH=${FLUTTER_VERSION_PATCH}\")\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"FLUTTER_VERSION_BUILD=${FLUTTER_VERSION_BUILD}\")\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_link_libraries(${BINARY_NAME} PRIVATE \"dwmapi.lib\")\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating a New Analog Project\nDESCRIPTION: This Bash script initiates a new Analog project and navigates into the project directory.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/analog.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm create analog@latest\ncd aws-analog\n```\n\n----------------------------------------\n\nTITLE: Cloning TanStack Repositories for Local Documentation Editing\nDESCRIPTION: Commands to enter the tanstack directory and clone both the main website repository and a specific project repository (in this example, 'form').\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-tanstack-start-alpha/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack\ngit clone git@github.com:TanStack/tanstack.com.git\ngit clone git@github.com:TanStack/form.git\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video using Astro Component\nDESCRIPTION: This snippet utilizes the previously imported `YouTube` component (from `@astro-community/astro-embed-youtube`) to embed a specific YouTube video within the MDX page content. It passes the YouTube video ID (`6FzLjpMYcu8`) via the `id` prop and optionally sets the preview thumbnail quality using the `posterQuality` prop ('high' in this case). This demonstrates using a React-like component syntax within MDX for Astro.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/wrapping-up-sst-1-0-conf.mdx#2025-04-22_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<YouTube id=\"6FzLjpMYcu8\" posterQuality=\"high\" />\n```\n\n----------------------------------------\n\nTITLE: Configuring SST v2 Application in TypeScript\nDESCRIPTION: Shows the previous structure of the SST config file in v2 for comparison, highlighting the differences in syntax and organization.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/sst-v3.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default {\n  // Your app's config\n  config(_input) {\n    return {\n      name: \"my-sst-app\",\n      region: \"us-east-1\"\n    };\n  },\n  // Your app's resources\n  stacks(app) { }\n} satisfies SSTConfig;\n```\n\n----------------------------------------\n\nTITLE: Creating Node.js App and Initializing Project\nDESCRIPTION: This snippet demonstrates how to create a Node.js project directory and initialize it using npm. It sets up the basic project structure needed for further development.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir aws-drizzle && cd aws-drizzle\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Docker Deployment Commands for React Router Application\nDESCRIPTION: These commands demonstrate how to build and run Docker containers for the React Router application using different package managers (npm, pnpm, bun).\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-csr/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# For npm\ndocker build -t my-app .\n\n# For pnpm\ndocker build -f Dockerfile.pnpm -t my-app .\n\n# For bun\ndocker build -f Dockerfile.bun -t my-app .\n\n# Run the container\ndocker run -p 3000:3000 my-app\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests using the Karma test runner.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-angular/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nng test\n```\n\n----------------------------------------\n\nTITLE: Starting Svelte Development Server\nDESCRIPTION: Commands to start the Svelte development server. It includes options to run the server normally or to open the app in a new browser tab automatically.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/svelte-kit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Python Workspace Directory Structure\nDESCRIPTION: Example directory structure showing multiple Python workspaces in an SST project, demonstrating workspace organization with separate handlers and modules.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-python/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n.\n├── workspace_a\n│   ├── pyproject.toml\n│   └── src\n│       └── workspace_a\n│           ├── __init__.py\n│           ├── api_a.py\n│           └── api_b.py\n└── workspace_b\n    ├── pyproject.toml\n    └── src\n        └── workspace_b\n            ├── __init__.py\n            └── index.py\n```\n\n----------------------------------------\n\nTITLE: Successful Pulumi Import Confirmation Message (Bash)\nDESCRIPTION: Shows the console output confirming the successful import of the S3 bucket using the direct Pulumi resource definition within the SST app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n|  Imported    MyBucket aws:s3:BucketV2\n```\n\n----------------------------------------\n\nTITLE: List Prepend Function Implementation in CMake\nDESCRIPTION: Custom CMake function that prepends a prefix to each element in a list. Used as a replacement for list(TRANSFORM ... PREPEND ...) for CMake 3.10 compatibility.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/flutter/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Creating Angular Project with CLI\nDESCRIPTION: Initializes a new Angular project using the Angular CLI. This sets up a basic Angular application without server-side rendering, using CSS for styling.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @angular/cli\nng new aws-angular\ncd aws-angular\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application to AWS with Production Stage\nDESCRIPTION: Command to deploy an SST application to AWS with a production stage. The stage name can be customized but using 'production' is recommended for production environments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Displaying Framed Tabbed Bash Commands (npm)\nDESCRIPTION: Shows a Bash command for creating an Astro project using npm, nested within a Starlight `<TabItem>` labeled 'npm'. This tab is part of a `<Tabs>` group, and the code block is rendered within a frame.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n<Tabs>\n<TabItem label=\"npm\">\n\n```bash\nnpm create astro@latest -- --template starlight\n```\n\n</TabItem>\n<TabItem label=\"pnpm\">\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm create astro@latest -- --template starlight\n```\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server\nDESCRIPTION: Command to start the Remix development server for local development and testing.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-redis/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code Block Overflow with JavaScript Object\nDESCRIPTION: A JavaScript object literal defining CORS configuration for a URL. This snippet is used to test how code blocks handle content that might overflow horizontally.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n{\n  url: {\n    cors: {\n      allowOrigins: [\"https://www.example.com\", \"http://localhost:60905\", \"http://localhost:60905\"]\n    }\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Styling the Astro Upload Form (Container) - Astro\nDESCRIPTION: Defines CSS rules for layout and appearance of the upload form in the container-based deployment example. Ensures consistent user experience with the serverless version.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/astro.mdx#2025-04-22_snippet_18\n\nLANGUAGE: astro\nCODE:\n```\n<style>\\n  main {\\n    margin: auto;\\n    padding: 1.5rem;\\n    max-width: 60ch;\\n  }\\n  form {\\n    color: white;\\n    padding: 2rem;\\n    display: flex;\\n    align-items: center;\\n    justify-content: space-between;\\n    background-color: #23262d;\\n    background-image: none;\\n    background-size: 400%;\\n    border-radius: 0.6rem;\\n    background-position: 100%;\\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\\n  }\\n  button {\\n    appearance: none;\\n    border: 0;\\n    font-weight: 500;\\n    border-radius: 5px;\\n    font-size: 0.875rem;\\n    padding: 0.5rem 0.75rem;\\n    background-color: white;\\n    color: #111827;\\n  }\\n  button:active:enabled {\\n    background-color: #EEE;\\n  }\\n</style>\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte Project for Production\nDESCRIPTION: This command creates a production version of the Svelte app. It's noted that you can preview the production build using 'npm run preview'.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-redis/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Defining robots.txt Configuration for SST Project\nDESCRIPTION: This snippet represents the entire contents of the robots.txt file for the SST project. It currently only contains a comment referencing the official documentation, without any specific rules defined.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-rails/public/robots.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# See https://www.robotstxt.org/robotstxt.html for documentation on how to use the robots.txt file\n```\n\n----------------------------------------\n\nTITLE: Using Starlight Tabs Component for Text Content\nDESCRIPTION: Demonstrates using the Starlight `<Tabs>` and `<TabItem>` components to create a tabbed interface displaying simple text content under different labels ('Stars', 'Moons').\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n<Tabs>\n  <TabItem label=\"Stars\">Sirius, Vega, Betelgeuse</TabItem>\n  <TabItem label=\"Moons\">Io, Europa, Ganymede</TabItem>\n</Tabs>\n```\n\n----------------------------------------\n\nTITLE: Running Bun TypeScript Project\nDESCRIPTION: Command to execute the TypeScript project using Bun runtime\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-bun/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Defining fullArgs Method with Complex Parameters in TypeScript\nDESCRIPTION: Illustrates a method with multiple optional and default parameters, returning a FormatSpecifier or null. It involves parameter typing and default values.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nfullArgs(true, false ,true): FormatSpecifier\n```\n\n----------------------------------------\n\nTITLE: Starting Remix Production Server\nDESCRIPTION: Command to run the built Remix application in production mode using the built-in server.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Development Environment\nDESCRIPTION: Commands to enter the TanStack.com directory, install dependencies, and start the development server running on localhost:3000.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/tanstack-start/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncd tanstack.com\npnpm i\n# The app will run on https://localhost:3000 by default\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Building Angular Application\nDESCRIPTION: Command to build the Angular application and output compiled files to the dist directory.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-angular/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nng build\n```\n\n----------------------------------------\n\nTITLE: Setting prop2 Architecture Type (Multi-line Example)\nDESCRIPTION: Multi-line example of setting the prop2 property with an architecture type. This property accepts either 'x86_64' or 'arm_64' as valid values.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  prop2: \"x86_64\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Application and Runtime Dependencies in CMake\nDESCRIPTION: Installs the application executable, Flutter ICU data file, Flutter library, and bundled libraries to their respective directories.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_10\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application\nDESCRIPTION: Command to deploy the SST application to production stage\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-dart-api/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Applying Inline Text Colors using HTML and CSS Variables\nDESCRIPTION: This HTML snippet shows how to apply secondary and dimmed text colors to specific words within a paragraph using `<span>` elements and inline styles referencing CSS custom properties ('--color-text-secondary', '--color-text-dimmed').\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\nNormal <span style=\"color: var(--color-text-secondary)\">secondary</span> <span style=\"color: var(--color-text-dimmed)\">dimmed</span>\n```\n\n----------------------------------------\n\nTITLE: Running Tests in SST App\nDESCRIPTION: This command runs the tests for the SST app using the configured npm test script.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/testing-in-sst.mdx#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Native Assets and Flutter Assets in CMake\nDESCRIPTION: Copies native assets from all packages and Flutter assets to the bundle directory, ensuring old files are removed before installation.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_11\n\nLANGUAGE: CMake\nCODE:\n```\n# Copy the native assets provided by the build.dart from all packages.\nset(NATIVE_ASSETS_DIR \"${PROJECT_BUILD_DIR}native_assets/linux/\")\ninstall(DIRECTORY \"${NATIVE_ASSETS_DIR}\"\n   DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n   COMPONENT Runtime)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Importing and Using a Shared Module in TypeScript\nDESCRIPTION: Example of importing and using the shared 'Example' module from the core package in other packages.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Example } from \"@aws-monorepo/core/example\";\n\nExample.hello();\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies with Version Constraints\nDESCRIPTION: This requirements.txt file specifies exact versions of Python packages needed for a project. It includes Flask 3.0.3 for web server functionality, Pillow 10.4.0 for image processing capabilities, and NumPy 2.0.2 for numerical operations.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/aws-ai-video-generation/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflask==3.0.3\npillow==10.4.0\nnumpy==2.0.2\n```\n\n----------------------------------------\n\nTITLE: Building a Svelte Project for Production\nDESCRIPTION: Commands for creating a production build of a Svelte application and previewing it locally before deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-container/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Remix App for Production\nDESCRIPTION: Command to build the Remix application for production deployment. This step compiles and optimizes the code for a production environment.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting the SolidStart Development Server\nDESCRIPTION: Commands to start the development server after installing dependencies. The second command includes the '--open' flag to automatically open the application in a browser.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-solid-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Displaying Framed JavaScript Code with Title\nDESCRIPTION: A JavaScript code block displaying a simple 'Hello World!' console log message. It's presented within a window-like frame and includes a title 'my-test-file.js' specified in the code block definition.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n```js title=\"my-test-file.js\"\nconsole.log('Hello World!');\n```\n```\n\n----------------------------------------\n\nTITLE: Running Wrangler Development Server\nDESCRIPTION: Commands to build the application and start it using Wrangler for local development with Cloudflare environment.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix-cf-template/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\nnpm run start\n```\n\n----------------------------------------\n\nTITLE: Markdown Horizontal Divider Syntax\nDESCRIPTION: Shows how to create a horizontal divider (HR tag) in Markdown using three dashes.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_26\n\nLANGUAGE: markdown\nCODE:\n```\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Astro Site in SST v2\nDESCRIPTION: Sets up an Astro site with a custom domain in SST v2.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/migrate-from-v2.mdx#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nnew AstroSite(stack, \"MyWeb\", {\n  customDomain: \"my-app.com\"\n});\n```\n\n----------------------------------------\n\nTITLE: Applying Secondary Text Color using HTML and CSS Variables\nDESCRIPTION: This HTML snippet demonstrates applying a secondary text color using an inline style attribute. It references a CSS custom property '--color-text-secondary' defined within the Starlight theme.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<p style=\"color: var(--color-text-secondary)\">Line secondary text color.</p>\n```\n\n----------------------------------------\n\nTITLE: Initializing SST Project\nDESCRIPTION: Command to initialize SST in an existing Dart project\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-dart-api/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsst init\n```\n\n----------------------------------------\n\nTITLE: Responsive Image Display with Dark Mode Support\nDESCRIPTION: This HTML snippet shows how to display a responsive image that changes based on the user's color scheme preference. It uses the picture element to switch between light and dark themed images.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/new-console-logs-ui.mdx#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<picture>\n  <source srcset={logsDark.src} media=\"(prefers-color-scheme: dark)\" />\n  <source srcset={logsLight.src} media=\"(prefers-color-scheme: light)\" />\n  <Image src={logsLight} alt=\"SST Console Logs\" />\n</picture>\n```\n\n----------------------------------------\n\nTITLE: Initializing Remix App Project - Bash\nDESCRIPTION: Bootstraps a new Remix project directory using the 'create-remix' CLI. Required: Node.js and npm. Key parameters include the project name (here 'aws-remix'). After running, you must select default options as prompted. Result: a new project directory with initial files.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest aws-remix\ncd aws-remix\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration in TypeScript\nDESCRIPTION: This TypeScript code imports configuration settings from a relative path (`../../../../config.ts`). The imported configuration is made available under the variable name `config`, likely used by the page or the underlying framework (like Astro or Next.js) to access deployment-specific or site-wide variables.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/legal/terms-of-service.mdx#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from '../../../../config.ts';\n```\n\n----------------------------------------\n\nTITLE: Displaying Astro Project Structure\nDESCRIPTION: This snippet shows the typical folder structure of an Astro project. It includes the public directory for static assets, src directory for source files, and package.json for project configuration.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/astro5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Building Remix App for Production\nDESCRIPTION: Command to build the Remix application for production deployment using npm.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-stream/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Astro Project Directory Structure\nDESCRIPTION: Shows the default folder and file structure of a basic Astro project, including public assets, source files, layouts, and pages.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Setting Standard Compilation Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings including C++17 support and Windows-specific compiler options.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/CMakeLists.txt#2025-04-22_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Displaying Frameless Tabbed Bash Commands (npm)\nDESCRIPTION: Shows a Bash command for creating an Astro project using npm, nested within a Starlight `<TabItem>` labeled 'npm'. This tab is part of a `<Tabs>` group, and the code block is specifically rendered *without* a frame using `frame=\"none\"`.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_22\n\nLANGUAGE: html\nCODE:\n```\n<Tabs>\n<TabItem label=\"npm\">\n\n```bash frame=\"none\"\nnpm create astro@latest -- --template starlight\n```\n\n</TabItem>\n<TabItem label=\"pnpm\">\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash frame=\"none\"\nnpm create astro@latest -- --template starlight\n```\n```\n\n----------------------------------------\n\nTITLE: Running Remix Development Server\nDESCRIPTION: Command to start the development server for a Remix project. This allows for live development and testing of the application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Dynamic Email Link Generation in JSX\nDESCRIPTION: Creates mailto links using JSX template literals to dynamically insert email addresses from a config object. The links are part of various contact-related sections including privacy policy inquiries and promotional communication opt-outs.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/legal/privacy-policy.mdx#2025-04-22_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<a href={`mailto:${config.email}`}>{config.email}</a>\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Project with Basics Template\nDESCRIPTION: This command creates a new Astro project using the basics template. It utilizes npm to run the Astro creation script.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/astro5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Creating Astro Project with Basic Template (Shell)\nDESCRIPTION: This command uses npm to create a new Astro project with the basic template. It's the initial step to set up an Astro project using the starter kit.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro-stream/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Flutter Library Headers Configuration\nDESCRIPTION: Defines the list of Flutter library headers required for the build and configures them with the appropriate path prefix.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/flutter/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\n```\n\n----------------------------------------\n\nTITLE: Displaying Framed Tabbed Bash Commands (pnpm)\nDESCRIPTION: Shows a Bash command for creating an Astro project using pnpm, nested within a Starlight `<TabItem>` labeled 'pnpm'. This tab is part of a `<Tabs>` group, and the code block is rendered within a frame.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<Tabs>\n...\n<TabItem label=\"pnpm\">\n\n```bash\npnpm create astro --template starlight\n```\n\n</TabItem>\n<TabItem label=\"Yarn\">\n...\n```\n\nLANGUAGE: bash\nCODE:\n```\n```bash\npnpm create astro --template starlight\n```\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Application with Bun\nDESCRIPTION: Command to execute the TypeScript application using Bun runtime.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-bun-redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun run index.ts\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with NPM\nDESCRIPTION: Command to install project dependencies using npm package manager.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-ssr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Astro project folder structure overview\nDESCRIPTION: Text representation of the basic folder structure for an Astro project, showing key directories and files.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/astro5-static/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n/\n├── public/\n│   └── favicon.svg\n├── src/\n│   ├── layouts/\n│   │   └── Layout.astro\n│   └── pages/\n│       └── index.astro\n└── package.json\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Inline Code Formatting in Markdown\nDESCRIPTION: An example of JavaScript code formatted inline within a sentence using Markdown backticks (`).\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nvar a = \"some variable name\";\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Basics Template Using NPM\nDESCRIPTION: Command to create a new Astro project using the basics template via npm create command.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: AWS JSX Email Project Header\nDESCRIPTION: Simple markdown header identifying the project name\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-jsx-email/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# aws-jsx-email\n```\n\n----------------------------------------\n\nTITLE: Running SST CLI Commands Locally\nDESCRIPTION: Example of running SST CLI commands on example applications after building from source code.\nSOURCE: https://github.com/sst/sst/blob/dev/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd examples/aws-api\ngo run ../../cmd/sst <command>\n```\n\n----------------------------------------\n\nTITLE: Building the Application\nDESCRIPTION: Command to build both client and server components of the Analog application. Client artifacts will be in dist/analog/public and server artifacts in dist/analog/server.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/analog/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Building Production Bundle\nDESCRIPTION: Command to create an optimized production build of the application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-ssr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Running the Remix Development Server\nDESCRIPTION: Command to start the Remix development server for local development and testing.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-remix-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shellscript\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint Parser Options for React TypeScript Project\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions in ESLint for a React TypeScript project. It sets the ECMAScript version, module type, and specifies TypeScript configuration files.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-vite/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing and Deploying SST Project\nDESCRIPTION: These commands install the necessary dependencies and deploy the SST project. The first command installs all required packages, while the second command initiates the deployment process.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/scrap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Building React Router Application for Production\nDESCRIPTION: This command creates a production build of the React Router application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-csr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Adding Styles to File Upload Component\nDESCRIPTION: Adds CSS styles to the file upload component for a cohesive design with the Angular application. Includes form styling, button appearance, and hover states.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstyles: [`\n  form {\n    color: white;\n    padding: 2rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    background-color: #23262d;\n    background-image: none;\n    background-size: 400%;\n    border-radius: 0.6rem;\n    background-position: 100%;\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);\n  }\n  button {\n    appearance: none;\n    border: 0;\n    font-weight: 500;\n    border-radius: 5px;\n    font-size: 0.875rem;\n    padding: 0.5rem 0.75rem;\n    background-color: white;\n    color: black;\n  }\n  button:active:enabled {\n    background-color: #EEE;\n  }\n`]\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Tests\nDESCRIPTION: Commands for running unit tests, end-to-end tests, and generating test coverage reports\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nestjs-container/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n```\n\n----------------------------------------\n\nTITLE: Creating a More Complex FormatSpecifier in TypeScript\nDESCRIPTION: Demonstrates creating a FormatSpecifier with multiple parameters for more granular format control. Utilizes multiple parameters to expand format specification capabilities.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nnew FormatSpecifier(\"param1\", \"param2\", \"param3\");\n```\n\n----------------------------------------\n\nTITLE: Importing Starlight Tab Components in Astro\nDESCRIPTION: Imports the Tabs and TabItem components from the '@astrojs/starlight/components' library for use within an Astro file. These components are used to create tabbed interfaces in the documentation.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_0\n\nLANGUAGE: astro\nCODE:\n```\nimport { Tabs, TabItem } from '@astrojs/starlight/components';\n```\n\n----------------------------------------\n\nTITLE: Deploying SST Application to Production\nDESCRIPTION: Command to deploy an SST application to the production environment using the SST CLI.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-swift/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsst deploy --stage production\n```\n\n----------------------------------------\n\nTITLE: Defining FormatSpecifier Constructor Signature in TypeScript\nDESCRIPTION: Defines the constructor signature for creating a FormatSpecifier instance. It takes a specifier object and an optional addend parameter that can be a number, string, or boolean.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nnew FormatSpecifier(specifier, addend?): FormatSpecifier\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontmatter for SST About Page in Markdown\nDESCRIPTION: This snippet defines the frontmatter for the About page, including title, template, description, and hero settings. It also disables pagefind indexing.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/about.mdx#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: About\ntemplate: splash\ndescription: Learn about the team behind SST.\npagefind: false\nhero:\n  title: \"n/a\"\n---\n```\n\n----------------------------------------\n\nTITLE: Defining a JavaScript Function for Localization\nDESCRIPTION: A multi-line JavaScript code block defining a function 'lang' that takes a language code 'l', requires the corresponding language file for date formatting, and returns true. Includes a comment explaining the code.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n```js\n// Javascript code with syntax highlighting.\nvar fun = function lang(l) {\n  dateformat.i18n = require('./lang/' + l);\n  return true;\n};\n```\n```\n\n----------------------------------------\n\nTITLE: Importing YouTube Component in MDX/Astro\nDESCRIPTION: This code snippet imports the `YouTube` component from the `@astro-community/astro-embed-youtube` package within an MDX file. This component is specifically designed for Astro projects and allows easy embedding of YouTube videos. It requires the `@astro-community/astro-embed-youtube` package to be installed as a project dependency.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/wrapping-up-sst-1-0-conf.mdx#2025-04-22_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport { YouTube } from '@astro-community/astro-embed-youtube';\n```\n\n----------------------------------------\n\nTITLE: Example S3 Bucket Name for Import\nDESCRIPTION: Provides an example name for an existing S3 bucket that will be used in subsequent import demonstrations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/import-resources.mdx#2025-04-22_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nmybucket-xnbmhcvd\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project Configuration\nDESCRIPTION: Sets up basic CMake project configuration including minimum version requirement and project name with C++ language support.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/windows/CMakeLists.txt#2025-04-22_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(aws_flutter_web LANGUAGES CXX)\n\nset(BINARY_NAME \"aws_flutter_web\")\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute unit tests for the Analog application using Vitest testing framework.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/analog/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Installing AOT Library for Release Builds in CMake\nDESCRIPTION: Installs the AOT (Ahead-of-Time) compiled library only for non-Debug builds (Profile and Release configurations).\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_12\n\nLANGUAGE: CMake\nCODE:\n```\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests\nDESCRIPTION: Command to run end-to-end tests using the configured testing platform.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-angular/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nng e2e\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML block serves as frontmatter for a page, defining key metadata. It sets the page 'title' to 'SST', specifies the layout 'template' as 'splash', and explicitly disables indexing by the Pagefind tool ('pagefind: false'). A nested 'hero' object with a 'title' set to 'n/a' is also included.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/index.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: SST\ntemplate: splash\npagefind: false\nhero:\n  title: \"n/a\"\n---\n```\n\n----------------------------------------\n\nTITLE: Starting Loco Server with Cargo\nDESCRIPTION: Command to start the Loco web server using cargo, which runs the development server with debugging enabled and automigration for the database.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-rust-loco/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncargo loco start\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Basic Template via NPM\nDESCRIPTION: Command to create a new Astro project using the basic template starter kit.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-astro-container/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Configuring Modern CMake Behaviors and RPATH Settings\nDESCRIPTION: Configures modern CMake behaviors to avoid warnings and sets up RPATH settings to load bundled libraries from a relative path.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Highlighting Text Selections in JavaScript Code Block\nDESCRIPTION: Shows how to highlight specific text selections within a JavaScript code block using quoted strings (`\"Individual terms\"`) and regular expressions (`/Even.*supported/`) as markers.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n```js \"Individual terms\" /Even.*supported/\n// Individual terms can be highlighted, too\nfunction demo() {\n  return 'Even regular expressions are supported';\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Markdown Blockquote Syntax\nDESCRIPTION: Shows how to create blockquotes in Markdown using the greater than symbol.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_28\n\nLANGUAGE: markdown\nCODE:\n```\n>\n```\n\n----------------------------------------\n\nTITLE: Setting prop3 with FormatSpecifier\nDESCRIPTION: Example of providing a value for prop3 in an object. This example actually shows setting prop2, which may be a documentation error in the original content.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  prop2: \"x86_64\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FormatSpecifier Property Example in TypeScript\nDESCRIPTION: Shows the structure of a simple object property within a FormatSpecifier, using types and nested keys with booleans and strings.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/tsdoc.mdx#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n{ prop2: \"x86_64\" }\n```\n\n----------------------------------------\n\nTITLE: Displaying Framed Bash Command with Title\nDESCRIPTION: A Bash code block showing the command to create a new SST project. It is rendered inside a window-like frame with the title 'Create a new project'.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n```bash title=\"Create a new project\"\nnpm create sst\n```\n```\n\n----------------------------------------\n\nTITLE: Using Bun Shell in Autodeploy Workflow (TypeScript)\nDESCRIPTION: This example illustrates the use of Bun Shell in the workflow function. It demonstrates installing dependencies, running tests, and handling test failures before deploying or removing the SST app.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/configure-autodeploy-workflow.mdx#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nasync workflow({ $, event }) {\n  await $`npm i -g pnpm`;\n  await $`pnpm i`;\n\n  const { exitCode } = await $`pnpm test`.nothrow();\n  if (exitCode !== 0) {\n    // Process the test report and then fail the build\n    throw new Error(\"Failed to run tests\");\n  }\n\n  event.action === \"removed\"\n    ? await $`pnpm sst remove`\n    : await $`pnpm sst deploy`;\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Framed Bash Command without Title\nDESCRIPTION: A Bash code block showing the command 'npm create sst'. It is rendered inside a standard window-like frame but without a specific title.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n```bash\nnpm create sst\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying NestJS with Redis using SST AWS Service\nDESCRIPTION: This snippet demonstrates how to deploy a NestJS application with Redis using SST's AWS Service construct. It configures the service to use a cluster, links it to Redis, and sets up a load balancer.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/examples.mdx#2025-04-22_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nnew sst.aws.Service(\"MyService\", {\n  cluster,\n  link: [redis],\n  loadBalancer: {\n    ports: [{ listen: \"80/http\", forward: \"3000/http\" }],\n  },\n  dev: {\n    command: \"npm run start:dev\",\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Multiple Inline Code Blocks in Markdown\nDESCRIPTION: Shows how multiple words within a sentence can be individually formatted as inline code using Markdown backticks (`).\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nIf `every` other `word` is `an` inline `code` block `what` does `that` do `for` us.\n```\n\n----------------------------------------\n\nTITLE: Markdown Heading Syntax\nDESCRIPTION: Demonstrates how to create headings in Markdown using hash symbols.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/dummy/markdown.mdx#2025-04-22_snippet_27\n\nLANGUAGE: markdown\nCODE:\n```\n#\n```\n\n----------------------------------------\n\nTITLE: Importing Images in Astro\nDESCRIPTION: This snippet demonstrates how to import images in Astro for use in the blog post. It imports both light and dark themed images for the console logs UI.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/blog/new-console-logs-ui.mdx#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Image } from \"astro:assets\"\n\nimport logsLight from '../../../assets/blog/sst-console-logs-light.png';\nimport logsDark from '../../../assets/blog/sst-console-logs-dark.png';\n```\n\n----------------------------------------\n\nTITLE: SST Deployment Success Output\nDESCRIPTION: Example of successful SST deployment output showing the generated URLs for the deployed resources: MyAuth Lambda URL and MyWeb CloudFront distribution.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/auth.mdx#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n✓  Complete\n   MyAuth: https://vp3honbl3od4gmo7mei37mchky0waxew.lambda-url.us-east-1.on.aws\n   MyWeb: https://d2fjg1rqbqi95t.cloudfront.net\n```\n\n----------------------------------------\n\nTITLE: Importing About Component in Astro\nDESCRIPTION: This snippet imports the About component from a relative path and renders it within the page content.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/about.mdx#2025-04-22_snippet_1\n\nLANGUAGE: astro\nCODE:\n```\nimport About from \"../../components/About.astro\";\n\n<About />\n```\n\n----------------------------------------\n\nTITLE: Initializing Remix App Project for Container Deployment - Bash\nDESCRIPTION: Bootstraps a new Remix app, suited for container-based deployments. Installs Remix in the 'aws-remix-container' directory. Required: Node.js and npm.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/remix.mdx#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-remix@latest aws-remix-container\ncd aws-remix-container\n```\n\n----------------------------------------\n\nTITLE: Creating and Initializing Nuxt Project with npm\nDESCRIPTION: This snippet initializes a new Nuxt project using npm. It uses 'nuxi', the official CLI for creating Nuxt projects, and prepares it for further customizations.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/nuxt.mdx#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx nuxi@latest init aws-nuxt\ncd aws-nuxt\n```\n\n----------------------------------------\n\nTITLE: Configuring 404 Page in YAML for SST Project\nDESCRIPTION: This YAML configuration sets up a 404 error page for an SST project. It specifies the page title, template, search indexing preferences, and hero section content.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/404.mdx#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: '404'\ntemplate: splash\npagefind: false\nhero:\n  title: '404'\n  tagline: Page not found. Check the URL and try again.\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Source Files in CMake\nDESCRIPTION: Defines the executable target for the application, specifies source files to include, and applies standard build settings to the target.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-flutter-web/linux/CMakeLists.txt#2025-04-22_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n```\n\n----------------------------------------\n\nTITLE: Creating .dockerignore File for Node.js Project\nDESCRIPTION: This bash command creates a .dockerignore file in the root directory to exclude the node_modules folder from the Docker build context.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/solid.mdx#2025-04-22_snippet_23\n\nLANGUAGE: bash\nCODE:\n```\necho \"node_modules\" > .dockerignore\n```\n\n----------------------------------------\n\nTITLE: Python Project Configuration with pyproject.toml\nDESCRIPTION: TOML configuration for Python project setup, specifying Python version constraints and project metadata for SST deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-python-container/README.md#2025-04-22_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[project]\nname = \"aws-python\"\nversion = \"0.1.0\"\ndescription = \"A SST app\"\nauthors = [\n    {name = \"<your_name_here>\", email = \"<your_email_here>\" },\n]\nrequires-python = \"==3.11.*\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Running TanStack.com in Development Mode\nDESCRIPTION: Commands to install dependencies and start the development server for TanStack.com. This rebuilds assets automatically when files change.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-tanstack-start-alpha/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm install\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Generate Database Migration\nDESCRIPTION: Uses the Drizzle Kit CLI to create a new migration based on recent database schema changes, facilitating database updates.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/drizzle.mdx#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpm run db generate\n```\n\n----------------------------------------\n\nTITLE: Initializing SST in Angular Project\nDESCRIPTION: Adds SST configuration to the Angular project, creating an sst.config.ts file in the project root to manage AWS deployments.\nSOURCE: https://github.com/sst/sst/blob/dev/www/src/content/docs/docs/start/aws/angular.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx sst@latest init\n```\n\n----------------------------------------\n\nTITLE: Running NestJS Application in Different Modes\nDESCRIPTION: Commands for running the NestJS application in development, watch, and production modes\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-nestjs-redis/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prod\n```\n\n----------------------------------------\n\nTITLE: Installing Astro Basic Template - Shell Command\nDESCRIPTION: Command to create a new Astro project using the basic template via npm\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-monorepo/packages/astro/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm create astro@latest -- --template basics\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository in Bash\nDESCRIPTION: Commands to clone the newly created repository and navigate into its directory.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-auth-react/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone MY_APP\ncd MY_APP\n```\n\n----------------------------------------\n\nTITLE: Deploying to Cloudflare Pages\nDESCRIPTION: Command to deploy the built application to Cloudflare Pages. Note that deployment bindings must be configured manually in the Cloudflare dashboard.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix-cf-template/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run deploy\n```\n\n----------------------------------------\n\nTITLE: Building for Production\nDESCRIPTION: Command to build the application for production deployment.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/cloudflare-remix-cf-template/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run build\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server\nDESCRIPTION: Command to start the development server with Hot Module Replacement (HMR) enabled. The server will be available at http://localhost:5173.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/react-router-7-ssr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for TanStack Projects\nDESCRIPTION: Command to create a new directory called 'tanstack' where project repositories will be cloned.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-tanstack-start-alpha/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmkdir tanstack\n```\n\n----------------------------------------\n\nTITLE: Running a Svelte development server\nDESCRIPTION: Commands for starting a development server after creating a Svelte project and installing dependencies. Includes an option to automatically open the app in a browser tab.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/aws-svelte-kit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n\n# or start the server and open the app in a new browser tab\nnpm run dev -- --open\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with npm\nDESCRIPTION: Command to install all project dependencies for the Analog application.\nSOURCE: https://github.com/sst/sst/blob/dev/examples/internal/playground/sites/analog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```"
  }
]