[
  {
    "owner": "phpstan",
    "repo": "phpstan",
    "content": "TITLE: Implementing Custom Rule to Disallow Assigning Properties Outside of Constructor\nDESCRIPTION: This rule enforces immutability by disallowing property assignments outside of the constructor method. It checks for assignments to object properties and reports an error if they occur in any method other than __construct.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/rules.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nuse PhpParser\\Node;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Reflection\\MethodReflection;\nuse PHPStan\\Rules\\Rule;\nuse PHPStan\\Rules\\RuleErrorBuilder;\n\n/**\n * @implements Rule<Node\\Expr\\Assign>\n */\nclass ImmutableObjectRule implements Rule\n{\n\n\tpublic function getNodeType(): string\n\t{\n\t\t// we're interested only in assignments\n\t\treturn Node\\Expr\\Assign::class;\n\t}\n\n\tpublic function processNode(Node $node, Scope $scope): array\n\t{\n\t\tif (!$scope->isInClass()) {\n\t\t\t// perhaps an error should be reported here too\n\t\t\t// if we want to disallow assigning properties outside of classes\n\t\t\treturn [];\n\t\t}\n\t\tif (!$node->var instanceof Node\\Expr\\PropertyFetch) {\n\t\t\t// we're interested only in property on the left side of assignment\n\t\t\t// so variable assignments and similar are ignored by this rule\n\t\t\treturn [];\n\t\t}\n\t\tif (!$node->var->name instanceof Node\\Identifier) {\n\t\t\t// we're interested only in non-dynamic fetches like $this->foo\n\t\t\treturn [];\n\t\t}\n\t\t$inMethod = $scope->getFunction();\n\t\tif (!$inMethod instanceof MethodReflection) {\n\t\t\treturn [];\n\t\t}\n\t\tif ($inMethod->getName() === '__construct') {\n\t\t\t// nothing should be reported if we're in a constructor\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [\n\t\t\tRuleErrorBuilder::message(sprintf(\n\t\t\t\t'Immutability violated - assigning $%s property outside constructor.',\n\t\t\t\t$node->var->name->toString()\n\t\t\t))->identifier('myCustomRules.propertyAssignment')\n\t\t\t->build(),\n\t\t];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Property Type Declaration with PHPDoc\nDESCRIPTION: Shows how to declare property types using PHPDoc annotations above class properties.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @var Foo\n */\nprivate $bar;\n```\n\n----------------------------------------\n\nTITLE: Basic Method PHPDoc Documentation in PHP\nDESCRIPTION: Demonstrates basic PHPDoc format for functions and methods, including parameter and return type annotations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param Foo $param\n * @return Bar\n */\nfunction foo($param) { ... }\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Return Types\nDESCRIPTION: Shows how to use precise return types to inform calling code about the exact type being returned.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/narrowing-types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction doBar(): Article\n{\n\t// write functions that only return a single precise type\n\t// and not a general \"object\" or \"mixed\"\n\n\t// ...\n\treturn $article;\n}\n```\n\n----------------------------------------\n\nTITLE: Limiting Input Type with Generics in PHP\nDESCRIPTION: Shows how to use generics to return the same type as input while limiting what the type can be using a template type variable bound.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of Foo\n * @param T $p\n * @return T\n */\nfunction foo(Foo $p): Foo\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with Attribute System\nDESCRIPTION: Example demonstrating PHPStan's type checking capabilities when using the attribute system, showing both valid and invalid operations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdoc-types.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$f = new Foo;\n$f->setAttribute('bar', 5); // OK, bar can be 5\n$f->setAttribute('foo', 3); // error, foo cannot be 3\n$f->getAttribute('unknown'); // error, unknown key\n```\n\n----------------------------------------\n\nTITLE: Returning Same Type as Input in PHP\nDESCRIPTION: Demonstrates how to use generics to return the same type that the function accepts as input.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T\n * @param T $p\n * @return T\n */\nfunction foo($p)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implicit Intersection Types with instanceof\nDESCRIPTION: Demonstrates how intersection types are created implicitly when using instanceof checks.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/union-types-vs-intersection-types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function doSomethingUseful(Foo $object)\n{\n    if ($object instanceof BarInterface) {\n        // $foo is Foo&BarInterface here!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with instanceof\nDESCRIPTION: Demonstrates type narrowing using the instanceof operator for class hierarchy checks.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/narrowing-types.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// $exception is Exception\nif ($exception instanceof \\InvalidArgumentException) {\n    // $exception is \\InvalidArgumentException\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Rule to Disallow Comparing DateTime Objects with === and !==\nDESCRIPTION: This rule checks for comparisons of DateTime and DateTimeImmutable objects using === and !==, which is likely a mistake. It suggests using == and != instead for comparing time values.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/rules.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nuse PhpParser\\Node;\nuse PhpParser\\Node\\Expr\\BinaryOp;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Rules\\Rule;\nuse PHPStan\\Type\\ObjectType;\n\n/**\n * @implements Rule<BinaryOp>\n */\nclass CompareDateTimeRule implements Rule\n{\n\n\tpublic function getNodeType(): string\n\t{\n\t\treturn BinaryOp::class;\n\t}\n\n\tpublic function processNode(Node $node, Scope $scope): array\n\t{\n\t\tif (\n\t\t\t!$node instanceof BinaryOp\\Identical\n\t\t\t&& !$node instanceof BinaryOp\\NotIdentical\n\t\t) {\n\t\t\treturn [];\n\t\t}\n\n\t\t$leftType = $scope->getType($node->left);\n\t\t$rightType = $scope->getType($node->right);\n\t\t$dateTimeType = new ObjectType(\\DateTimeInterface::class);\n\n\t\tif (\n\t\t\t!$dateTimeType->isSuperTypeOf($leftType)->yes()\n\t\t\t|| !$dateTimeType->isSuperTypeOf($rightType)->yes()\n\t\t) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn [\n\t\t\tRuleErrorBuilder::message(sprintf(\n\t\t\t\t'Cannot compare DateTime instances with %s.',\n\t\t\t\t$node->getOperatorSigil()\n\t\t\t))->identifier('myCustomRules.dateCompare')\n\t\t\t->build(),\n\t\t];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Generator Implementation Example\nDESCRIPTION: Complete example showing type checking with PHPStan for a Generator implementation, including key-value yields, send operations, and return values. Demonstrates both correct and incorrect type usage.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\nclass Foo {}\nclass Bar {}\n\n/**\n * @return \\Generator<int, string, Foo, Bar>\n */\nfunction foo(): \\Generator\n{\n\tyield 'foo' => new Foo(); // wrong key and value\n\t$send = yield 1 => 'foo'; // correct\n\t// $send is Foo\n\n\tif (rand(0, 1)) {\n\t\treturn $send; // wrong\n\t}\n\n\treturn new Bar(); // correct\n}\n\n$generator = foo();\n$generator->send(1); // wrong, expects Foo\n$generator->getReturn(); // Bar\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Class Implementation in PHP\nDESCRIPTION: Basic structure of a custom PHPStan rule class implementing the Rule interface.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/rules.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse PhpParser\\Node;\nuse PHPStan\\Analyser\\Scope;\n\nclass MyRule implements \\PHPStan\\Rules\\Rule\n{\n\n\tpublic function getNodeType(): string\n\t{\n\t\t// todo\n\t}\n\n\tpublic function processNode(Node $node, Scope $scope): array\n\t{\n\t\t// todo\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using Upper Bounds with Generic Type Variables in PHP\nDESCRIPTION: This snippet demonstrates how to limit the types that can be used with a generic type variable using the 'of' keyword.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @template T of \\Exception\n * @param T $exception\n * @return T\n */\nfunction foo($exception)\n{\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Type Information in PHPStan\nDESCRIPTION: Shows the method signature for getting type information from an AST expression via the Scope object. This is a core operation when working with PHPStan's type system.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-system.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\ngetType()\n```\n\n----------------------------------------\n\nTITLE: Configuring Autoload Paths in PHPStan YAML\nDESCRIPTION: YAML configuration for specifying custom autoload directories and files in PHPStan. The autoload_directories parameter is used for discovering classes, while autoload_files is for loading specific PHP files.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/autoloading.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tautoload_directories:\n\t\t- build\n\tautoload_files:\n\t\t- generated/routes/GeneratedRouteList.php\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis\nDESCRIPTION: Command to run PHPStan analysis on source code directories. This example shows how to analyze both src and tests directories.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/getting-started.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse src tests\n```\n\n----------------------------------------\n\nTITLE: Returning Array of Objects from Class String in PHP\nDESCRIPTION: Shows how to use generics to accept a class string and return an array of objects of that type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of object\n * @param class-string<T> $className\n * @return array<int, T>\n */\nfunction foo(string $className): array\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan via Composer\nDESCRIPTION: Command to install PHPStan as a development dependency using Composer package manager.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/getting-started.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpstan/phpstan\n```\n\n----------------------------------------\n\nTITLE: Creating a Generic Consumer Interface in PHP\nDESCRIPTION: This example shows how to create a generic Consumer interface to allow type-safe implementations with specific message types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @template T of Message\n */\ninterface Consumer\n{\n  /**\n   * @param T $message\n   */\n  function consume(Message $message);\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 5: Using @phpstan-consistent-constructor annotation in PHP\nDESCRIPTION: Adding the @phpstan-consistent-constructor tag to the class tells PHPStan to ensure that any constructor in a child class has the same signature as the parent constructor and a compatible visibility.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-error-unsafe-usage-of-new-static.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/** @phpstan-consistent-constructor */\nclass Foo\n{\n    public function __construct(int $i)\n    {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Undefined Variable Detection in PHP Control Flow\nDESCRIPTION: Example showing how PHPStan handles variable definition in conditional branches with early termination. The code demonstrates a potential undefined variable warning when a redirect occurs in the else branch.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/solving-undefined-variables.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (somethingIsTrue()) {\n\t$foo = true;\n} elseif (orSomethingElseIsTrue()) {\n\t$foo = false;\n} else {\n\t$this->redirect('homepage');\n}\n\ndoFoo($foo); // possibly undefined variable $foo\n```\n\n----------------------------------------\n\nTITLE: Implementing Service Locator Pattern with Generics in PHP\nDESCRIPTION: Shows how to implement a service locator (dependency injection container) pattern using generics to handle class strings and object types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass Container\n{\n\t/**\n\t * @template T of object\n\t * @return ($name is class-string<T> ? T : object)\n\t */\n\tpublic function get(string $name): object\n\t{\n\t\t// ...\n\t}\n}\n\nclass Container\n{\n\t/**\n\t * @template T of object\n\t * @param class-string<T> $name\n\t * @return T\n\t */\n\tpublic function get(string $name): object\n\t{\n\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing TypeNodeResolverExtension Interface in PHP\nDESCRIPTION: The TypeNodeResolverExtension interface that must be implemented to create custom PHPDoc types in PHPStan. It contains a single resolve method that converts PHPDoc Type AST nodes into PHPStan's type system representation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/custom-phpdoc-types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\PhpDoc;\n\nuse PHPStan\\Analyser\\NameScope;\nuse PHPStan\\PhpDocParser\\Ast\\Type\\TypeNode;\nuse PHPStan\\Type\\Type;\n\ninterface TypeNodeResolverExtension\n{\n\n\tpublic function resolve(TypeNode $typeNode, NameScope $nameScope): ?Type;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Interface in PHP\nDESCRIPTION: This snippet demonstrates how to create a generic interface using the @template tag at the class level.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @template T\n */\ninterface Collection\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Basic PHPStan Configuration in YAML\nDESCRIPTION: Demonstrates a simple PHPStan configuration file using NEON format, which is similar to YAML. It sets the analysis level and specifies paths to analyze.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tlevel: 6\n\tpaths:\n\t\t- src\n\t\t- tests\n```\n\n----------------------------------------\n\nTITLE: Using class-string with Generics in PHP\nDESCRIPTION: This example shows how to use the class-string pseudotype with generics to involve class names in type resolution.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @template T\n * @param class-string<T> $className\n * @param int $id\n * @return T|null\n */\nfunction findEntity(string $className, int $id)\n{\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Custom Assertions\nDESCRIPTION: Shows how to use PHPStan assert annotations to properly narrow types in custom checking methods.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/narrowing-types.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function foo(mixed $arg): void\n{\n    if ($this->isStdClass($arg)) {\n        \\PHPStan\\dumpType($arg); // stdClass\n    }\n}\n\n/** @phpstan-assert-if-true \\stdClass $arg */\npublic function isStdClass(mixed $arg): bool\n{\n    return $arg instanceof \\stdClass;\n}\n```\n\n----------------------------------------\n\nTITLE: DynamicMethodReturnTypeExtension Interface Definition in PHP\nDESCRIPTION: Defines the interface for creating dynamic method return type extensions in PHPStan, including methods for class identification, method support checking, and type resolution.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-return-type-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Type;\n\nuse PhpParser\\Node\\Expr\\MethodCall;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Reflection\\MethodReflection;\n\ninterface DynamicMethodReturnTypeExtension\n{\n\tpublic function getClass(): string;\n\n\tpublic function isMethodSupported(MethodReflection $methodReflection): bool;\n\n\tpublic function getTypeFromMethodCall(\n\t\tMethodReflection $methodReflection,\n\t\tMethodCall $methodCall,\n\t\tScope $scope\n\t): ?Type;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Union Types in PHP Function Parameters\nDESCRIPTION: Demonstrates how to use union types in function parameters and handle type checking with instanceof operator.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/union-types-vs-intersection-types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param Foo|Bar $object\n */\npublic function doSomethingUseful($object)\n{\n    if ($object instanceof Foo) {\n        // now we can be sure that $object is just Foo in this branch\n    } elseif ($object instanceof Bar) {\n        // dtto for Bar\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Array Key Type with Generics in PHP\nDESCRIPTION: Demonstrates how to use generics to accept an array and return an array with the same key type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template TKey of array-key\n * @param array<TKey, mixed> $p\n * @return array<TKey, mixed>\n */\nfunction foo(array $p): array\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using List Type in PHP DocBlocks\nDESCRIPTION: Demonstrates the usage of the new list type annotation for arrays with sequential integer keys.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @param list<int> $listOfIntegers */\npublic function doFoo(array $listOfIntegers): void {\n}\n```\n\n----------------------------------------\n\nTITLE: PHPStan Features List\nDESCRIPTION: A comprehensive list of code analysis features that PHPStan performs on PHP codebases, including class existence checks, method accessibility verification, type checking, and variable scope validation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/find-bugs-in-your-code-without-writing-tests.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- Existence of classes used in instanceof, catch, typehints and other language constructs\n- Existence and accessibility of called methods and functions\n- Whether a method returns the same type it declares to return\n- Existence and visibility of accessed properties\n- Correct number of parameters passed to sprintf/printf calls\n- Existence of variables while respecting scopes\n- Useless casting and strict comparisons with different types\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Interface in PHP\nDESCRIPTION: Shows how to define a generic interface using PHPDoc annotations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T\n */\ninterface Collection\n{\n    /** @param T $item */\n    public function add($item): void;\n\n    /** @return T */\n    public function get();\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Type Checking with is_int()\nDESCRIPTION: Example showing basic type checking using PHP's is_int() function to ensure a variable is an integer.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-specifying-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (is_int($variable)) {\n    // here we can be sure that $variable is integer\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Interface Type Hints Using Intersection Types\nDESCRIPTION: Demonstrates how to use intersection types to require multiple interfaces for type safety.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/union-types-vs-intersection-types.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param \\Traversable&\\Countable $object\n */\npublic function doSomethingUseful($object)\n{\n    echo sprintf(\n        'We are going to iterate over %d values!',\n        count($object)\n    );\n    foreach ($object as $foo) {\n\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Precise Type Inference for Regex Matches in PHP\nDESCRIPTION: This snippet shows how PHPStan 1.12 can infer precise types for the $matches array after a preg_match() call. It demonstrates the ability to determine specific array shapes based on the regex pattern used.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-12-road-to-phpstan-2-0.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif (preg_match('/Price: (?<currency>£|€)\\d+/', $s, $matches, PREG_UNMATCHED_AS_NULL)) {\n\t// array{0: string, currency: non-empty-string, 1: non-empty-string}\n\t\\PHPStan\\dumpType($matches);\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Safe Match Expression with PHPStan in PHP 8\nDESCRIPTION: Demonstrates how PHPStan can validate type safety in PHP 8's match expressions by detecting potential errors when using union types in PHPDoc annotations. The function expects a specific set of integer values (1, 2, or 3).\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-is-ready-for-php8.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param 1|2|3 $i\n */\nfunction foo(int $i): void {\n\tmatch ($i) {\n\t\t1 => 'foo',\n\t\t2 => 'bar',\n\t\t3 => 'baz',\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Container with Static Services using Generics in PHP\nDESCRIPTION: Demonstrates how to implement a container with static services using generics to return the correct type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\nclass Container\n{\n\t/**\n\t * @var array<string, class-string>\n\t */\n\tprivate const TYPES = [\n\t\t'foo' => DateTime::class,\n\t\t'bar' => DateTimeImmutable::class,\n\t];\n\n\t/**\n\t * @template T of key-of<self::TYPES>\n\t * @param T $type\n\t *\n\t * @return new<self::TYPES[T]>\n\t */\n\tpublic static function get(string $type) : object\n\t{\n\t\t$class = self::TYPES[$type] ?? throw new InvalidArgumentException('Not found');\n\n\t\treturn new $class();\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Including the Baseline in PHPStan Configuration\nDESCRIPTION: Shows how to include the generated baseline file in the main PHPStan configuration file. This configuration tells PHPStan to ignore errors listed in the baseline during analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstans-baseline-feature-lets-you-hold-new-code-to-a-higher-standard.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\n\t- phpstan-baseline.neon\n\nparameters:\n\t# your usual configuration options\n\nservices:\n\t# your custom extensions\n```\n\n----------------------------------------\n\nTITLE: Deprecation Documentation\nDESCRIPTION: Shows how to mark code as deprecated using @deprecated tag.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/** @deprecated Optional description */\nclass Foo\n{\n}\n\nclass Foo\n{\n\t/** @deprecated */\n\tpublic function doFoo(): void\n\t{\n\t\t// ...\n\t}\n}\n\nclass Bar extends Foo\n{\n\tpublic function doFoo(): void\n\t{\n\t\t// ...\n\t}\n}\n\n$bar = new Bar();\n```\n\n----------------------------------------\n\nTITLE: Conditional Return Types Example in PHP\nDESCRIPTION: Shows how to use conditional return types with generics and type conditions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdoc-types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return ($size is positive-int ? non-empty-array : array)\n */\nfunction fillArray(int $size): array\n{\n\t...\n}\n```\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of int|array<int>\n * @param T $id\n * @return (T is int ? static : array<static>)\n */\npublic function fetch(int|array $id)\n{\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking with isSuperTypeOf\nDESCRIPTION: Demonstrates the proper way to check for specific types using the isSuperTypeOf() method instead of instanceof checks.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-system.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n$type->isSuperTypeOf(Type $type): TrinaryLogic\n```\n\n----------------------------------------\n\nTITLE: Checking Purity of @phpstan-pure Functions\nDESCRIPTION: Illustrates how PHPStan 2.0 enforces the @phpstan-pure annotation by reporting impure code inside marked functions and detecting unnecessary pure method calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-2-0-released-level-10-elephpants.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n// Call to method Foo::pureMethod() on a separate line has no effect.\n$this->pureMethod();\n```\n\nLANGUAGE: PHP\nCODE:\n```\n// Method Foo::add() returns void but does not have any side effects.\nprivate function add(int $a, int $b): void\n{\n    $c = $a + $b;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Return Types in PHP Functions\nDESCRIPTION: Demonstrates how to use conditional return type annotations to specify different return types based on input parameters.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-6-0-with-conditional-return-types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return ($as_float is true ? float : string)\n */\nfunction microtime(bool $as_float): string|float\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Function Parameters and Return Type\nDESCRIPTION: Demonstrates how to obtain function parameter and return type information using ParametersAcceptorSelector for function calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/reflection.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$variant = PHPStan\\Reflection\\ParametersAcceptorSelector::selectFromArgs(\n\t$scope,\n\t$funcCall->getArgs(),\n\t$functionReflection->getVariants()\n);\n$parameters = $variant->getParameters();\n$returnType = $variant->getReturnType();\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Schema in YAML\nDESCRIPTION: Shows how to define a schema for custom parameters using the parametersSchema section in the .neon configuration file, which is required to prevent typos and enforce parameter types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dependency-injection-configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nparametersSchema:\n\tmyExtension: structure([\n\t\tmyOwnParameter: bool()\n\t])\n```\n\n----------------------------------------\n\nTITLE: Defining a Generic Function with Type Variables in PHP\nDESCRIPTION: This example shows how to create a generic function using the @template tag to define a type variable.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @template T\n * @param T $a\n * @return T\n */\nfunction foo($a)\n{\n\treturn $a;\n}\n```\n\n----------------------------------------\n\nTITLE: Array Spread Operator Implementation\nDESCRIPTION: Shows how the array spread operator works for unpacking arrays and iterables, with examples of both literal arrays and generic iterables.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-now-fully-supports-php-7-4.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$array = [1, 2, ...[3, 4, 5], 6, 7];\n\n/** @var Iterator<int> */\n$someIterator = makeIterator();\n$array = [1, 2, ...$someIterator, 4, 5, 6]; // array<int, int>\n```\n\n----------------------------------------\n\nTITLE: Accessing Collected Data in Custom PHPStan Rule\nDESCRIPTION: Sample code showing how to access data gathered by collectors within a custom rule implementation. The rule processes a CollectedDataNode which contains all data from collectors.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/collectors.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function getNodeType(): string\n{\n\treturn CollectedDataNode::class;\n}\n\npublic function processNode(Node $node, Scope $scope): array\n{\n\t$traitDeclarationData = $node->get(TraitDeclarationCollector::class);\n\t// $traitDeclarationData is array<string, list<array{string, int}>>\n\tforeach ($traitDeclarationData as $file => $declarations) {\n\t\tforeach ($declarations as [$name, $line]) {\n\t\t\t// ...\n\t\t}\n\t}\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Native PHP Types\nDESCRIPTION: Example showing native PHP type declarations for properties and functions, including parameter and return types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/troubleshooting-types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprivate int $prop;\n\nfunction foo(Foo $foo): Bar\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Key and Value Types Example in PHP\nDESCRIPTION: Demonstrates the usage of key-of and value-of type annotations with class constants and backed enums.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdoc-types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Foo {\n   public const WHEELER = [\n      'car' => 4,\n      'bike' => 2,\n   ];\n}\n\n/**\n * @param key-of<Foo::WHEELER> $type\n * @param value-of<Foo::WHEELER> $wheels\n */\nfunction repair(string $type, int $wheels): void\n{\n    // $type is 'bike'|'car'\n    // $wheels is 2|4\n}\n```\n\nLANGUAGE: php\nCODE:\n```\nenum Suit: string\n{\n    case Hearts = 'H';\n    case Spades = 'S';\n}\n\n/**\n * @param array<value-of<Suit>, int> $count\n */\nfunction foo(array $count): void\n{\n    // $count is array<'H'|'S', int>\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Generic Interface Type in Parameter in PHP\nDESCRIPTION: Demonstrates how to specify the template type variable of a generic interface in a function parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param Collection<Foo> $c\n */\nfunction foo(Collection $c): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Covariant Collection Interface\nDESCRIPTION: Example showing a Collection interface with covariant template type annotation. Demonstrates the basic structure for generic collections with add and get methods.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/guide-to-call-site-generic-variance.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @template-covariant ItemType */\ninterface Collection\n{\n\t/** @param ItemType $item */\n\tpublic function add(mixed $item): void;\n\n\t/** @return ItemType|null */\n\tpublic function get(int $index): mixed;\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Collection Implementation\nDESCRIPTION: Shows how to implement a generic collection class using templates for both key and value types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template TKey\n * @template TValue\n * @implements \\IteratorAggregate<TKey, TValue>\n */\nclass Collection implements \\IteratorAggregate\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: AssertNotNull Extension Implementation\nDESCRIPTION: Implementation example of a type-specifying extension for PHPUnit's assertNotNull method.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-specifying-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\npublic function getClass(): string\n{\n\treturn \\PHPUnit\\Framework\\Assert::class;\n}\n\npublic function isStaticMethodSupported(\n\tMethodReflection $staticMethodReflection,\n\tStaticCall $node,\n\tTypeSpecifierContext $context\n): bool\n{\n\t// The $context argument tells us if we're in an if condition or not (as in this case).\n\t// Is assertNotNull called with at least 1 argument?\n\treturn $staticMethodReflection->getName() === 'assertNotNull' && $context->null() && isset($node->getArgs()[0]);\n}\n\npublic function specifyTypes(\n\tMethodReflection $staticMethodReflection,\n\tStaticCall $node,\n\tScope $scope,\n\tTypeSpecifierContext $context\n): SpecifiedTypes\n{\n\t$expr = $node->getArgs()[0]->value;\n\t$typeBefore = $scope->getType($expr);\n\t$type = TypeCombinator::removeNull($typeBefore);\n\n\t// Assuming extension implements \\PHPStan\\Analyser\\TypeSpecifierAwareExtension\n\n\treturn $this->typeSpecifier->create($expr, $type, TypeSpecifierContext::createTruthy(), $scope);\n}\n```\n\n----------------------------------------\n\nTITLE: Using @param-out to Narrow Reference Parameter Type in PHP\nDESCRIPTION: This snippet shows how to use the @param-out tag to narrow the type of a nullable parameter that never leaves the function as null.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-out string $p\n */\nfunction foo(?string &$p): void\n{\n\t// No errors\n\t$p = 'foo';\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Interface in PHP\nDESCRIPTION: This example shows how to implement a generic interface while preserving its genericness.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @template T\n * @implements Collection<T>\n */\nclass PersistentCollection implements Collection\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Interface Implementation for Traits with @phpstan-require-implements in PHP\nDESCRIPTION: Demonstrates the use of @phpstan-require-implements PHPDoc tag to enforce interface implementation when using a trait.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_20\n\nLANGUAGE: php\nCODE:\n```\ninterface Bar\n{\n}\n\n/**\n * @phpstan-require-implements Bar\n */\ntrait Foo\n{\n}\n\n// Error: Trait Foo requires using class to implement Bar, but Baz does not.\nclass Baz\n{\n\tuse Foo;\n}\n\n// OK\nclass Lorem implements Bar\n{\n\tuse Foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Read-Only and Write-Only Properties in PHP 8.4\nDESCRIPTION: Shows implementation of properties that can only be read or written using property hooks\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-2-1-support-for-php-8-4-property-hooks-more.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ninterface Foo {\n\tpublic int $i { get; }\n\tpublic int $j { set; }\n}\n\nfunction (Foo $f): void {\n\t$f->i = 42; // invalid\n\techo $f->j; // invalid\t\n};\n```\n\n----------------------------------------\n\nTITLE: Injecting a Service in PHP\nDESCRIPTION: Shows how to inject a service (ReflectionProvider) into a class constructor using PHP. This demonstrates the typical pattern for obtaining services in PHPStan extensions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dependency-injection-configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprivate ReflectionProvider $reflectionProvider;\n\npublic function __construct(\n\tReflectionProvider $reflectionProvider\n)\n{\n\tthis->reflectionProvider = $reflectionProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Scope Type Analysis in PHP Method\nDESCRIPTION: Shows how the Scope object tracks variable types and context within a method, including type narrowing in conditional blocks.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/scope.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function doFoo(?array $list): void\n{\n\t// Scope knows we're in doFoo() method here\n\t// And it knows that $list is either an array or null\n\tif ($list !== null) {\n\t\t// Scope knows that $list is an array\n\t\t$foo = true;\n\t\t// Scope knows that $foo is true\n\t} else {\n\t\t// Scope knows that $list is null\n\t\t$foo = false;\n\t\t// Scope knows that $foo is false\n\t}\n\n\t// Scope knows that $list is either an array or null\n\t// Scope knows that $foo is bool\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Array Type in PHPStan\nDESCRIPTION: Demonstrates the new preferred method for checking if a type is an array in PHPStan. This method returns a TrinaryLogic value.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nType::isArray(): TrinaryLogic\n```\n\n----------------------------------------\n\nTITLE: Extending Generic Class with Specific Type in PHP\nDESCRIPTION: Demonstrates how to extend a generic class with a specific type using the @extends tag.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/** @extends Collection<Foo> */\nclass Bar extends Collection\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rule Error Reports with File and Line Specifications\nDESCRIPTION: Example showing how to create error reports in a rule that uses collected data, specifying the file and line number where the error should be reported.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/collectors.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$errors = [];\nforeach ($declaredTraits as [$file, $name, $line]) {\n\t$errors[] = RuleErrorBuilder::message(sprintf(\n\t\t'Trait %s is used zero times and is not analysed.',\n\t\t$name,\n\t))->file($file)->line($line)->build();\n}\n\nreturn $errors;\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis via Command Line\nDESCRIPTION: Basic command to run PHPStan analysis on specified paths. The command accepts various options and returns an exit code 0 if no errors are found.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/command-line-usage.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse [options] [<paths>...]\n```\n\n----------------------------------------\n\nTITLE: Ignoring Errors with New @phpstan-ignore Annotation in PHP\nDESCRIPTION: Demonstrates how to use the new @phpstan-ignore annotation to ignore specific errors on a line, including specifying multiple identifiers and adding explanatory comments.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Both variants work:\n// @phpstan-ignore echo.nonString\necho [];\n\necho []; // @phpstan-ignore echo.nonString\n```\n\nLANGUAGE: php\nCODE:\n```\necho $foo, $bar;  // @phpstan-ignore variable.undefined, variable.undefined\n```\n\nLANGUAGE: php\nCODE:\n```\n// @phpstan-ignore offsetAccess.notFound (exists, set by a reference)\ndata_set($target[$segment], $segments, $value, $overwrite);\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Test Case in PHP\nDESCRIPTION: PHPUnit test case example for testing a custom PHPStan rule.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/rules.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types = 1);\n\nnamespace App;\n\nuse PHPStan\\Testing\\RuleTestCase;\n\n/**\n * @extends RuleTestCase<MyRule>\n */\nclass MyRuleTest extends RuleTestCase\n{\n\n\tprotected function getRule(): \\PHPStan\\Rules\\Rule\n\t{\n\t\t// getRule() method needs to return an instance of the tested rule\n\t\treturn new MyRule();\n\t}\n\n\tpublic function testRule(): void\n\t{\n\t\t// first argument: path to the example file that contains some errors that should be reported by MyRule\n\t\t// second argument: an array of expected errors,\n\t\t// each error consists of the asserted error message, and the asserted error file line\n\t\t$this->analyse([__DIR__ . '/data/my-rule.php'], [\n\t\t\t[\n\t\t\t\t'X should not be Y', // asserted error message\n\t\t\t\t15, // asserted error line\n\t\t\t],\n\t\t]);\n\n\t\t// the test fails, if the expected error does not occur,\n\t\t// or if there are other errors reported beside the expected one\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Coupling Related Classes with Generics in PHP\nDESCRIPTION: Shows how to use generics to couple related classes together, such as an Event and its EventHandler.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/** @template TDerivative of Derivative */\ninterface Original\n{\n}\n\n/** @implements Original<MyDerivative> */\nclass MyOriginal implements Original\n{\n}\n\n/**\n * @template T of Derivative\n * @param Original<T> $o\n * @return T\n */\nfunction foo(Original $o): Derivative\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type System Query Methods\nDESCRIPTION: Lists key methods available on PHPStan\\Type\\Type interface for querying type capabilities and accessing type members.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-system.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ncanAccessProperties(): TrinaryLogic\nhasProperty(string $propertyName): TrinaryLogic\ngetProperty(string $propertyName, Scope $scope): PropertyReflection\ncanCallMethods(): TrinaryLogic\nhasMethod(string $methodName): TrinaryLogic\ngetMethod(string $methodName, Scope $scope): MethodReflection\ncanAccessConstants(): TrinaryLogic\nhasConstant(string $constantName): TrinaryLogic\ngetConstant(string $constantName): ConstantReflection\n```\n\n----------------------------------------\n\nTITLE: Generating PHPStan Baseline via Command Line\nDESCRIPTION: Command to generate a baseline file for PHPStan. It accepts a path argument and can allow empty baselines with an additional flag.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/command-line-usage.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse --generate-baseline [path]\n```\n\n----------------------------------------\n\nTITLE: Enforcing Class Inheritance for Interfaces with @phpstan-require-extends in PHP\nDESCRIPTION: Illustrates the use of @phpstan-require-extends PHPDoc tag to enforce class inheritance when implementing an interface.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_19\n\nLANGUAGE: php\nCODE:\n```\nclass Bar\n{\n}\n\n/**\n * @phpstan-require-extends Bar\n */\ninterface Foo\n{\n}\n\n// Error: Interface Foo requires implementing class to extend Bar, but Baz does not.\nclass Baz implements Foo\n{\n}\n\n// OK\nclass Lorem extends Bar  implements Foo\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Consumer Interface in PHP\nDESCRIPTION: This snippet demonstrates how to implement a generic Consumer interface with a specific message type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @implements Consumer<SendMailMessage>\n */\nclass SendMailMessageConsumer implements Consumer\n{\n\tfunction consume(Message $message) { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Mixin Usage Example in PHP\nDESCRIPTION: Example showing how to use @mixin PHPDoc tag to delegate property access to another class.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-access-to-undefined-property.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nclass A\n{\n\tpublic string $name = 'Class A';\n}\n\n/**\n * @mixin A\n */\nclass B\n{\n\tpublic function __get(string $name): mixed\n\t{\n\t\treturn (new A())->$name;\n\t}\n}\n\n$b = new B();\necho $b->name; // No error\n```\n\n----------------------------------------\n\nTITLE: Composing PHPStan Configuration from Multiple Files\nDESCRIPTION: Illustrates how to use the 'includes' section in NEON to compose the final configuration from multiple files, allowing for environment-specific overrides.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\n\t- phpstan.neon.dist\n\nparameters:\n\tignoreErrors:\n\t\t- '#Function pcntl_open not found\\.#'\n\tparallel:\n\t\tmaximumNumberOfProcesses: 1\n```\n\n----------------------------------------\n\nTITLE: Illustrating PHPStan's Analysis of Readonly Classes in PHP 8.2\nDESCRIPTION: This code demonstrates PHPStan's ability to detect various issues with readonly classes introduced in PHP 8.2, including uninitialized properties and invalid assignments.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-is-ready-for-php-8-2.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreadonly class Foo\n{\n\n    // Readonly property must have a native type.\n    public $foo;\n\n    // Class Foo has an uninitialized readonly property $bar. Assign it in the constructor.\n    public int $bar;\n\n    public function setBar(int $bar): void\n    {\n        // Readonly property Foo::$bar is assigned outside of the constructor.\n        $this->bar = $bar;\n    }\n\n}\n\n$foo = new Foo();\n\n// Readonly property Foo::$bar is assigned outside of its declaring class.\n$foo->bar = $bar;\n```\n\n----------------------------------------\n\nTITLE: Implementing EntityManagerDynamicReturnTypeExtension in PHP\nDESCRIPTION: Demonstrates the implementation of a dynamic return type extension for Doctrine's EntityManager::merge() method, resolving the return type based on the input argument.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-return-type-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace App\\PHPStan;\n\nuse PhpParser\\Node\\Expr\\MethodCall;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Reflection\\MethodReflection;\nuse PHPStan\\Type\\DynamicMethodReturnTypeExtension;\nuse PHPStan\\Type\\Type;\n\nclass EntityManagerDynamicReturnTypeExtension implements DynamicMethodReturnTypeExtension\n{\n\tpublic function getClass(): string\n\t{\n\t\treturn \\Doctrine\\ORM\\EntityManager::class;\n\t}\n\n\tpublic function isMethodSupported(MethodReflection $methodReflection): bool\n\t{\n\t\treturn $methodReflection->getName() === 'merge';\n\t}\n\n\tpublic function getTypeFromMethodCall(\n\t\tMethodReflection $methodReflection,\n\t\tMethodCall $methodCall,\n\t\tScope $scope\n\t): ?Type\n\t{\n\t\tif (count($methodCall->getArgs()) === 0) {\n\t\t\treturn null;\n\t\t}\n\t\t$arg = $methodCall->getArgs()[0]->value;\n\n\t\treturn $scope->getType($arg);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Named Arguments Usage with PHP 8\nDESCRIPTION: Shows how to use PHP 8's named arguments feature with the in_array function. Named arguments improve readability by explicitly labeling parameter names, especially useful for functions with multiple parameters.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-is-ready-for-php8.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn in_array(needle: $i, haystack: $intList, strict: true);\n```\n\n----------------------------------------\n\nTITLE: Mixin Class Documentation\nDESCRIPTION: Examples of using @mixin to document class delegation patterns.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nclass A\n{\n    public function doA(): void\n    {\n    }\n}\n\n/**\n * @mixin A\n */\nclass B\n{\n    public function doB(): void\n    {\n    }\n\n    public function __call($name, $arguments)\n    {\n        (new A())->$name(...$arguments);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying EntityRepository in PHP with Doctrine ORM\nDESCRIPTION: Demonstrates various methods to query an EntityRepository using Doctrine ORM, including findBy, findOneBy, and count operations. These methods are now checked by PHPStan for unknown entity fields.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstans-doctrine-extension-just-got-a-lot-better.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$entityRepository = $entityManager->getRepository(MyEntity::class);\n$entityRepository->findBy(['title' => $title]);\n$entityRepository->findByTitle($title);\n$entityRepository->findOneBy(['title' => $title]);\n$entityRepository->findOneByTitle($title);\n$entityRepository->count(['title' => $title]);\n$entityRepository->countByTitle($title);\n```\n\n----------------------------------------\n\nTITLE: Registering Dynamic Return Type Extension in PHPStan Configuration\nDESCRIPTION: Shows how to register a custom dynamic return type extension in the PHPStan configuration file using YAML format.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-return-type-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\PHPStan\\EntityManagerDynamicReturnTypeExtension\n\t\ttags:\n\t\t\t- phpstan.broker.dynamicMethodReturnTypeExtension\n```\n\n----------------------------------------\n\nTITLE: Implementing PropertyReflection Interface in PHP\nDESCRIPTION: Interface definition for creating a property reflection implementation that describes the characteristics of magic properties in PHP classes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/class-reflection-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Reflection;\n\nuse PHPStan\\TrinaryLogic;\nuse PHPStan\\Type\\Type;\n\ninterface PropertyReflection\n{\n\n\tpublic function getDeclaringClass(): ClassReflection;\n\n\tpublic function isStatic(): bool;\n\n\tpublic function isPrivate(): bool;\n\n\tpublic function isPublic(): bool;\n\n\tpublic function getDocComment(): ?string;\n\n\tpublic function getReadableType(): Type;\n\n\tpublic function getWritableType(): Type;\n\n\tpublic function canChangeTypeAfterAssignment(): bool;\n\n\tpublic function isReadable(): bool;\n\n\tpublic function isWritable(): bool;\n\n\tpublic function isDeprecated(): TrinaryLogic;\n\n\tpublic function getDeprecatedDescription(): ?string;\n\n\tpublic function isInternal(): TrinaryLogic;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving PHPDoc with FileTypeMapper in PHPStan\nDESCRIPTION: This code demonstrates how to use the FileTypeMapper to resolve a PHPDoc comment. It provides the necessary context information such as file name, class name, trait name, and function name along with the actual PHPDoc comment string.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/reflection.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$resolvedPhpDoc = $this->fileTypeMapper->getResolvedPhpDoc(\n\t$scope->getFile(),\n\t$scope->isInClass() ? $scope->getClassReflection()->getName() : null,\n\t$scope->isInTrait() ? $scope->getTraitReflection()->getName() : null,\n\t$function !== null ? $function->getName() : null,\n\t$docComment\n);\n```\n\n----------------------------------------\n\nTITLE: IteratorAggregate Implementation Example\nDESCRIPTION: Shows proper return type specification for IteratorAggregate interface implementation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** @return \\ArrayIterator<int, Item> */\npublic function getIterator(): \\Traversable\n{\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Type Normalization in PHPStan\nDESCRIPTION: Shows how to properly create and normalize union and intersection types using PHPStan's TypeCombinator class instead of direct type construction.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-system.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$union = new UnionType([$a, $b, $c]);\n$intersection = new IntersectionType([$a, $b, $c]);\n```\n\nLANGUAGE: php\nCODE:\n```\n$union = TypeCombinator::union($a, $b, $c);\n$intersection = TypeCombinator::intersect($a, $b, $c);\n```\n\n----------------------------------------\n\nTITLE: Contravariant Collection Usage Example\nDESCRIPTION: Demonstrates using contravariant type projections with a Collection interface for more flexible type acceptance.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/guide-to-call-site-generic-variance.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @param Collection<contravariant Dog> $collection */\nfunction fill(Collection $collection)\n{\n\twhile ($collection->get(42) === null) {\n\t\t$collection->add(new Dog);\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertion Example in PHPStan Tests\nDESCRIPTION: Example code showing how to write type assertions in test files using the PHPStan\\Testing\\assertType function to verify inferred types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/testing.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace MyTypesTest;\n\nuse function PHPStan\\Testing\\assertType;\n\nclass Foo\n{\n\n\tpublic function doFoo(\\App\\MyContainer $container): void\n\t{\n\t\t// arguments: string with the expected type, actual type\n\t\tassertType(FooService::class, $container->getService('foo'));\n\t\tassertType(BarService::class, $container->getService('bar'));\n\n\t\tassertType('bool', $container->getParameter('isProduction'));\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Type Checking with PHPStan Assertions\nDESCRIPTION: Example of custom type checking function using PHPStan assertion annotations for type narrowing.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/narrowing-types.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\npublic function foo(object $object): void\n{\n    $this->checkType($object);\n    $object->doSomething(); // Call to an undefined method object::doSomething().\n}\n\npublic function checkType(object $object): void\n{\n    if (!$object instanceof BarService) {\n        throw new WrongObjectTypeException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Dead Code with Consistent Return Value Tracking\nDESCRIPTION: Shows how PHPStan's new behavior helps identify dead code by detecting when a condition is always false because it's already been checked.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nif ($product->isGiftCard()) {\n    // do a thing...\n    return;\n}\n\n// PHPStan reports:\n// If condition is always false.\nif ($product->isGiftCard()) {\n    // do a different thing...\n    return;\n}\n```\n\n----------------------------------------\n\nTITLE: Magic Property Declarations\nDESCRIPTION: Shows how to declare magic properties using @property tags for __get/__set methods.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @property int $foo\n * @property-read string $bar\n * @property-write \\stdClass $baz\n */\nclass Foo { ... }\n```\n\n----------------------------------------\n\nTITLE: Inline Variable Type Casting with @var\nDESCRIPTION: Example of inline type casting using @var PHPDoc annotation in variable assignment.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var Foo $foo */\n$foo = createFoo();\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Function Parameters\nDESCRIPTION: Demonstrates proper type narrowing by using precise parameter types to avoid unnecessary type checks in the function body.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/narrowing-types.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction doFoo(Article $a): void\n{\n\t// it only makes sense for this function to accept Articles\n\t// do not make the parameter type unnecessarily wide enough\n}\n```\n\n----------------------------------------\n\nTITLE: Creating TrinaryLogic Objects in PHP\nDESCRIPTION: Static methods for creating TrinaryLogic instances that represent yes, no, or maybe states.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/trinary-logic.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nPHPStan\\TrinaryLogic::createYes(): self\nPHPStan\\TrinaryLogic::createMaybe(): self\nPHPStan\\TrinaryLogic::createNo(): self\nPHPStan\\TrinaryLogic::createFromBoolean(bool $value): self\n```\n\n----------------------------------------\n\nTITLE: Handling Deprecated Methods with @not-deprecated in PHP\nDESCRIPTION: Demonstrates how to use the @not-deprecated PHPDoc tag to break the inheritance chain and un-mark a method as deprecated in a child class.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\nclass Bar extends Foo\n{\n\t/** @not-deprecated */\n\tpublic function doFoo(): void\n\t{\n\t\t// ...\n\t}\n}\n\n$bar = new Bar();\n$bar->doFoo(); // OK\n```\n\n----------------------------------------\n\nTITLE: Combining TrinaryLogic Objects in PHP\nDESCRIPTION: Methods for combining multiple TrinaryLogic instances using logical AND and OR operations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/trinary-logic.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nPHPStan\\TrinaryLogic::and(self ...$operands): self\nPHPStan\\TrinaryLogic::or(self ...$operands): self\n```\n\n----------------------------------------\n\nTITLE: Equality Assertions with Admin Example\nDESCRIPTION: Demonstrates equality assertions and type narrowing with complex conditions using PHPStan annotations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/narrowing-types.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n* @phpstan-assert-if-true =Admin $this->admin\n* @phpstan-assert-if-true =true $this->admin->active\n*/\npublic function isAdmin(): bool\n{\n    return $this->admin !== null && $this->admin->active === true;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generic Traits in PHP\nDESCRIPTION: Demonstrates how to define and use generic traits in PHP, including specifying the template type variable when using the trait.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/** @template T of Foo */\ntrait Part\n{\n    /** @param T $item */\n    public function bar(Foo $item): void\n    {\n        // ...\n    }\n}\n\n/** @template T of Foo */\nclass Bar\n{\n    /** @use Part<T> */\n    use Part;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Classes Named After Internal PHP Types in PHPDoc\nDESCRIPTION: Demonstrates how to use fully-qualified names in PHPDoc to distinguish between internal PHP types and custom classes with the same name.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_22\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param \\My\\Resource $var\n */\npublic function foo(Resource $var): void { ... }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Allowed Subtypes Extension in PHP\nDESCRIPTION: Example implementation of AllowedSubTypesClassReflectionExtension that restricts Foo class to only have Bar and Baz as valid child classes. The extension defines which class it applies to and explicitly lists the allowed subtypes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/allowed-subtypes.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyApp\\PHPStan;\n\nuse PHPStan\\Reflection\\AllowedSubTypesClassReflectionExtension;\nuse PHPStan\\Reflection\\ClassReflection;\nuse PHPStan\\Type\\ObjectType;\n\nclass MySubtypesExtension implements AllowedSubTypesClassReflectionExtension\n{\n\tpublic function supports(ClassReflection $classReflection): bool\n\t{\n\t\treturn $classReflection->getName() === Foo::class;\n\t}\n\n\tpublic function getAllowedSubTypes(ClassReflection $classReflection): array\n\t{\n\t\treturn [\n\t\t\tnew ObjectType(Bar::class),\n\t\t\tnew ObjectType(Baz::class),\n\t\t];\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Static Return Type Documentation\nDESCRIPTION: Example of using @return static with self type hint.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_12\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @return static\n */\npublic function returnStatic(): self\n{\n    return $this;\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Enum Cases in PHP Switch Statements\nDESCRIPTION: Illustrates an issue with enum case handling in a match expression, where a default case is unnecessary and can lead to runtime exceptions when new enum cases are added.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-10-comes-with-lie-detector.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nenum Foo\n{\n\tcase ONE;\n\tcase TWO;\n\n\tpublic function getLabel(): string\n\t{\n\t\treturn match ($this) {\n\t\t\tself::ONE => 'One',\n\t\t\tself::TWO => 'Two',\n\t\t\tdefault => throw new \\Exception('Unexpected case'),\n\t\t};\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Covariant Collection Usage Example\nDESCRIPTION: Shows how to use call-site covariance with a Collection interface by using the covariant keyword in the type annotation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/guide-to-call-site-generic-variance.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/** @param Collection<covariant Animal> $animals */\nfunction foo(Collection $animals): void\n{\n\t$animals->add(new Dog());\n}\n```\n\n----------------------------------------\n\nTITLE: Defining List Type in PHP DocBlock\nDESCRIPTION: Demonstrates how to use the new list type in PHPStan 2.0 to specify an array with sequential integer keys starting at 0 and with no gaps.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-2-0-released-level-10-elephpants.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/** @param list<int> $listOfIntegers */\npublic function doFoo(array $listOfIntegers): void\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Registering a Service in YAML\nDESCRIPTION: Demonstrates how to register a new service object in the .neon configuration file. This is the basic way to add a new extension to PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dependency-injection-configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\MyExtension\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Class Deprecation Extension in PHP\nDESCRIPTION: Example implementation of ClassDeprecationExtension interface to handle custom #[MyDeprecated] attribute for marking classes as deprecated. The extension checks for the attribute and returns a Deprecation object with an optional description.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/custom-deprecations.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace App;\n\nuse App\\MyDeprecated;\nuse PHPStan\\Reflection\\Deprecation\\Deprecation;\nuse PHPStan\\BetterReflection\\Reflection\\Adapter\\ReflectionClass;\nuse PHPStan\\BetterReflection\\Reflection\\Adapter\\ReflectionEnum;\nuse PHPStan\\Reflection\\Deprecation\\ClassDeprecationExtension;\n\nclass CustomDeprecationExtension implements ClassDeprecationExtension\n{\n\n\t/**\n\t * @param ReflectionClass|ReflectionEnum $reflection\n\t */\n\tpublic function getClassDeprecation($reflection): ?Deprecation\n\t{\n\t\tforeach ($reflection->getAttributes(MyDeprecated::class) as $attribute) {\n\t\t\t$description = $attribute->getArguments()[0] ?? $attribute->getArguments()['description'] ?? null;\n\t\t\treturn $description === null\n\t\t\t\t? Deprecation::create()\n\t\t\t\t: Deprecation::createWithDescription($description);\n\t\t}\n\n\t\treturn null;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating improved try-catch analysis with function throw annotations in PHP\nDESCRIPTION: This snippet illustrates how PHPStan now uses function throw annotations to provide more precise analysis of variable definitions in try-catch blocks. It shows how different variables are defined or undefined based on which exceptions might be thrown.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/precise-try-catch-finally-analysis.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @throws \\InvalidArgumentException */\nfunction doBar(): int\n{\n    // ...\n}\n\n/** @throws \\RuntimeException */\nfunction doBaz(): string\n{\n    // ...\n}\n\ntry {\n    // $foo is surely defined in all catch blocks\n    // because the literal 1 doesn't throw anything\n    $foo = 1;\n\n    $bar = doBar(); // might throw InvalidArgumentException\n    $baz = doBaz(); // might throw RuntimeException\n} catch (\\InvalidArgumentException $e) {\n    // $foo is always defined\n    // $bar is never defined\n    // $baz is never defined\n} catch (\\RuntimeException $e) {\n    // $foo is always defined\n    // $bar is always defined\n    // $baz is never defined\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Offset Access with PHPStan Types\nDESCRIPTION: Example showing how to access specific array key types using PHPStan's type system annotations. Demonstrates type checking for array key access patterns.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdoc-types.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @phpstan-type MyArray array{foo: int, bar: string}\n */\nclass HelloWorld\n{\n\n\t/** @return MyArray['bar'] */\n\tpublic function getBar()\n\t{\n\t\t// this needs to return a string...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating the PHPStan 'Unsafe usage of new static()' error in PHP\nDESCRIPTION: This example demonstrates how using 'new static()' can lead to runtime errors when a class is extended with a constructor that has different parameters. The parent class Foo expects an integer parameter while the child class Bar expects a string, causing a type mismatch when doFoo() is called.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-error-unsafe-usage-of-new-static.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types = 1);\n\nclass Foo\n{\n\n    public function __construct(int $i) { }\n\n    public function doFoo(): void\n    {\n        new static(1); // PHPStan reports: Unsafe usage of new static()\n    }\n\n}\n\nclass Bar extends Foo\n{\n\n    public function __construct(string $s) { }\n\n}\n\n(new Foo(1))->doFoo(); // works, returns Foo\n(new Bar('s'))->doFoo(); // crashes with: Argument #1 ($s) must be of type string, int given\n```\n\n----------------------------------------\n\nTITLE: Collection Type Mutation Tracking\nDESCRIPTION: Shows how to use @phpstan-self-out to track type changes in mutable objects after method calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template TValue\n */\nclass Collection {\n\t/**\n\t * @template TItemValue\n\t * @param TItemValue $item\n\t * @phpstan-self-out self<TValue|TItemValue>\n\t */\n\tpublic function add($item): void {\n\t\t// ...\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Generic Interface with Specific Type in PHP\nDESCRIPTION: This snippet demonstrates how to implement a generic interface with a specific type, making the implementing class non-generic.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @implements Collection<Dog>\n */\nclass DogCollection implements Collection\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Constant Names in YAML\nDESCRIPTION: Specifies constant names that can have different values in different environments to prevent false positive comparison errors.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tdynamicConstantNames:\n\t\t- DATABASE_ENGINE\n\t\t- Foo::BAR_CONSTANT # class constants are also supported\n```\n\n----------------------------------------\n\nTITLE: Class-String Type Examples in PHP\nDESCRIPTION: Illustrates the usage of class-string type for type-safe class name handling.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdoc-types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param class-string $className\n */\nfunction foo(string $className): void { ... }\n\nfunction bar(string $name): void\n{\n    if (class_exists($name)) { // or interface_exists()\n        // $name is class-string here\n        foo($name);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Variable Definition Example in PHP\nDESCRIPTION: Example demonstrating PHPStan's handling of conditionally defined variables across code blocks. This pattern is properly understood by PHPStan since version 0.12.64.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/solving-undefined-variables.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ($foo) {\n    $var = rand();\n}\n\n// 200 lines later:\n\nif ($foo) {\n    echo $var; // Variable $var might not be defined.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AlwaysUsedMethodExtension Interface in PHP\nDESCRIPTION: Interface definition that must be implemented to create a custom extension for marking methods as always used in PHPStan. The isAlwaysUsed method takes a MethodReflection parameter and returns a boolean indicating if the method should be considered always used.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/always-used-methods.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Rules\\Methods;\n\nuse PHPStan\\Reflection\\MethodReflection;\n\ninterface AlwaysUsedMethodExtension\n{\n\n\tpublic function isAlwaysUsed(MethodReflection $methodReflection): bool;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Illustrating Too Wide Private Property Type Detection in PHP\nDESCRIPTION: This code snippet demonstrates a new Bleeding Edge feature in PHPStan 1.12 that checks for overly broad union types in private properties. It suggests removing unused types from the union to improve type precision.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-12-road-to-phpstan-2-0.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// if string is never assigned to `$this->a`, we can remove it from the type\nprivate int|string $a;\n```\n\n----------------------------------------\n\nTITLE: Declaring Intersection Types with Union Types in PHPDoc Comments\nDESCRIPTION: This example demonstrates the new PHPDoc syntax for declaring complex type combinations including intersection types with union types. The notation uses parentheses to ensure unambiguity in the type definition.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-9-a-huge-leap-forward.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param (Foo|Bar)&Baz $input\n */\nfunction doSomething($input)\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Call-site Variance Example\nDESCRIPTION: Demonstration of using call-site variance annotation to allow covariant usage while maintaining collection mutability.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/whats-up-with-template-covariant.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @param Collection<covariant Animal> $animals */\nfunction foo(Collection $animals): void\n{\n\t$animals->add(new Dog());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a RuleError with RuleErrorBuilder\nDESCRIPTION: Example of using RuleErrorBuilder to create a RuleError instance. This is the recommended way to generate error messages in PHPStan custom rules.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/using-rule-error-builder.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n\tRuleErrorBuilder::message('This is an error message.')\n\t\t->build(),\n];\n```\n\n----------------------------------------\n\nTITLE: Generating PHP Format Baseline Configuration\nDESCRIPTION: Command to generate a baseline file in PHP format instead of NEON, and the corresponding configuration to include it.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/baseline.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse --generate-baseline phpstan-baseline.php\n```\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\\n\\t- phpstan-baseline.php\\n\\nparameters:\\n\\t# your usual configuration options\n```\n\n----------------------------------------\n\nTITLE: Configuring Implicit Throws Behavior in PHPStan\nDESCRIPTION: Configuration to change how PHPStan interprets functions without @throws tags. When set to false, PHPStan assumes functions without @throws don't throw exceptions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_7\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\texceptions:\n\t\timplicitThrows: false\n```\n\n----------------------------------------\n\nTITLE: Illustrating isset() Behavior with Dynamic Properties in PHP 8.2\nDESCRIPTION: This code demonstrates that isset() will always return false for dynamic properties in PHP 8.2, which PHPStan now correctly identifies.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-is-ready-for-php-8-2.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction (Foo $foo): void {\n    if (isset($foo->test)) {\n        // ...\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Collection Type Annotation in PHP\nDESCRIPTION: Shows how to properly annotate collection types in PHP docblocks for iterables.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/union-types-vs-intersection-types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param Collection|Foo[] $object\n */\npublic function doSomethingUseful($object)\n{\n    foreach ($object as $foo) {\n        // $foo is Foo here\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Code to Check with Custom Rule in PHP\nDESCRIPTION: Sample code showing the situation that needs to be detected by the custom rule - direct instantiation of Person class.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/rules.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n\n\tpublic function doFoo(): void\n\t{\n\t\t$p = new Person();\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Inline PHPDoc @var Tags in PHP\nDESCRIPTION: Demonstrates how PHPStan 1.10 validates inline @var tags against native types, reporting inconsistencies. It shows an example where a @var tag incorrectly allows null for a string return type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-10-comes-with-lie-detector.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction doFoo(): string\n{\n    // ...\n}\n\n/** @var string|null $a */\n$a = doFoo();\n\n// PHPDoc tag @var with type string|null is not subtype of native type string.\n```\n\n----------------------------------------\n\nTITLE: Generic Collection Method Documentation\nDESCRIPTION: Shows documentation for generic collection methods that modify object type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template TValue\n */\nclass Collection\n{\n\t\n\t// ...\n\t\n\t/**\n\t * @template TItemValue\n\t * @param TItemValue $item\n\t * @phpstan-self-out self<TValue|TItemValue>\n\t */\n\tpublic function add($item): void\n\t{\n\t\t// ...\n\t}\n\t\n}\n\n/** @param Collection<int> $c */\nfunction foo(Collection $c, string $s): void\n{\n\t$c->add($s);\n\t\\PHPStan\\dumpType($c); // Collection<int|string>\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Uninitialized Properties in PHP\nDESCRIPTION: Demonstrates how PHPStan reports uninitialized properties with native types when 'checkUninitializedProperties' is set to true.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n// \"Class has an uninitialized property $foo. Give it default value or assign it in the constructor.\"\nprivate int $foo;\n\npublic function setFoo(int $foo): void\n{\n\t$this->foo = $foo;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing ReflectionProvider in PHP Constructor\nDESCRIPTION: Shows how to inject and initialize the ReflectionProvider dependency in a class constructor to enable reflection capabilities.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/reflection.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprivate ReflectionProvider $reflectionProvider;\n\npublic function __construct(\n\tReflectionProvider $reflectionProvider\n)\n{\n\tthis->reflectionProvider = $reflectionProvider;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Parameter Schema in PHPStan YAML Configuration\nDESCRIPTION: Demonstrates how to define the schema for custom parameters using nette/schema library. This is necessary when developing custom PHPStan extensions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nparametersSchema:\n\tearlyTerminatingMethodCalls: arrayOf(listOf(string()))\n\tearlyTerminatingFunctionCalls: listOf(string())\n\tmemoryLimitFile: string()\n\tstaticReflectionClassNamePatterns: listOf(string())\n\tdynamicConstantNames: listOf(string())\n\tcustomRulesetUsed: bool()\n```\n\n----------------------------------------\n\nTITLE: Disabling Dead Catch Reporting for Unchecked Exceptions\nDESCRIPTION: Configuration to disable reporting of dead catch blocks for unchecked exceptions, useful when you don't plan to annotate @throws for unchecked exceptions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_6\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\texceptions:\n\t\treportUncheckedExceptionDeadCatch: false\n```\n\n----------------------------------------\n\nTITLE: Using @readonly PHPDoc Tag for Readonly Properties in PHP\nDESCRIPTION: Illustrates the use of @readonly PHPDoc tag to enforce readonly behavior for properties in PHP versions prior to 8.1.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_23\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n\t/** @readonly */\n\tpublic string $bar;\n}\n\n(new Foo())->bar = 'baz'; // @readonly property Foo::$bar is assigned outside of its declaring class.\n```\n\n----------------------------------------\n\nTITLE: Defining a Function with Type Annotations in PHP\nDESCRIPTION: This snippet demonstrates how to declare a function with PHPDoc type annotations for parameter and return types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @param string $param\n * @return string\n */\nfunction foo($param)\n{\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Using PHPDoc Type Annotations\nDESCRIPTION: Demonstrates combining PHPDoc type annotations with native PHP types to provide additional type information for static analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/troubleshooting-types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @param array<int, Item> $items */\nfunction foo(array $items)\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Always True Conditions in PHP\nDESCRIPTION: Shows how PHPStan can be configured to report always true conditions in the last branch of conditional statements.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_17\n\nLANGUAGE: php\nCODE:\n```\n// $o is A|B\nif ($o instanceof A) {\n    // ...\n} elseif ($o instanceof B) { // \"Instanceof between B and B will always evaluate to true.\" IS NOT reported\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Iterator Generic Type Declarations in PHP\nDESCRIPTION: Examples of generic type declarations for different iterator classes in PHP, showing how to specify key and value types for iterables, traversables, iterators, and iterator aggregates.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\niterable<Value>\niterable<Key, Value>\nTraversable<Value>\nTraversable<Key, Value>\nIterator<Value>\nIterator<Key, Value>\nIteratorAggregate<Value>\nIteratorAggregate<Key, Value>\n```\n\n----------------------------------------\n\nTITLE: Getting Expression Types with Scope\nDESCRIPTION: Demonstrates how to use Scope::getType() to obtain the type of an expression, specifically for a method call.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/scope.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// $methodCall is PhpParser\\Node\\Expr\\MethodCall\n// On which type was the method called?\n$calledOnType = $scope->getType($methodCall->var);\n```\n\n----------------------------------------\n\nTITLE: Analyzing Benevolent Union Types in PHP\nDESCRIPTION: Demonstrates how PHPStan handles benevolent union types like 'array-key' and how stricter analysis can be enabled.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_15\n\nLANGUAGE: php\nCODE:\n```\npublic function requireInt(int $value): void {}\npublic function requireString(string $value): void {}\n\n/**\n * @param array-key  $value1 // array-key is a benevolent union (int|string)\n * @param int|string $value2\n */\npublic function test($value1, int|string $value2): int\n{\n    $this->requireInt($value1);    // No error\n    $this->requireString($value1); // No error\n    $this->requireInt($value2);    // Error\n    $this->requireString($value2); // Error\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline @throws Annotation in PHP\nDESCRIPTION: Example of an inline @throws annotation to override what PHPStan thinks about exceptions thrown by a method call.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/** @throws FooException */\n$a = $this->doSomething();\n```\n\n----------------------------------------\n\nTITLE: Configuring Unchecked Exceptions in PHPStan Using NEON\nDESCRIPTION: Configuration example for marking specific exception classes as unchecked in PHPStan. Uses both regex patterns and class names to define which exceptions should be considered unchecked.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_1\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\texceptions:\n\t\tuncheckedExceptionRegexes:\n\t\t\t- '#^Exception$#' # Mark general Exception as unchecked, subclasses are still checked\n\t\t\t- '#^Foo\\\\Bar\\\\#' # Mark exceptions from Foo\\Bar namespace as unchecked\n\t\tuncheckedExceptionClasses:\n\t\t\t- 'LogicException' # Mark LogicException and child classes as unchecked\n```\n\n----------------------------------------\n\nTITLE: Configuring Class Aliases Bootstrap Files\nDESCRIPTION: YAML configuration for including files with class alias definitions in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    bootstrapFiles:\n        - classAliases.php\n```\n\n----------------------------------------\n\nTITLE: Split Collection Interface Implementation\nDESCRIPTION: Shows how to split a collection interface into readonly (covariant) and full (invariant) interfaces to work around variance restrictions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/guide-to-call-site-generic-variance.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @template-covariant ItemType */\ninterface ReadonlyCollection\n{\n\t/** @return ItemType|null */\n\tpublic function get(int $index): mixed;\n}\n\n/**\n * @template ItemType\n * @extends ReadonlyCollection<ItemType>\n */\ninterface Collection extends ReadonlyCollection\n{\n\t/** @param ItemType $item */\n\tpublic function add(mixed $item): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Trait with Property Access\nDESCRIPTION: Example showing a PHP trait definition with a potentially undefined property access that demonstrates why context-aware analysis is needed.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/how-phpstan-analyses-traits.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntrait FooTrait\n{\n\n\tpublic function doFoo(): int\n\t{\n\t\t// Access to an undefined property FooTrait::$foo.\n\t\t// Or is it?\n\t\treturn $this->foo;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updated ConstantString Handling in PHP\nDESCRIPTION: Recommended approach for handling constant strings in PHPStan 1.10, using getConstantStrings() method. This approach can handle unions of different strings.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/why-is-instanceof-type-wrong-and-getting-deprecated.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif (count($type->getConstantStrings()) === 0) {\n    return []; // no constant strings\n}\n\nforeach ($type->getConstantStrings() as $constantString) {\n    // do something with each value\n}\n```\n\n----------------------------------------\n\nTITLE: Using Prefixed PHPDoc Tags for Advanced Type Handling in PHP\nDESCRIPTION: Shows how to use @phpstan- prefixed tags for advanced type handling, allowing compatibility with IDEs and other PHP tools that might not understand advanced type syntax.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_21\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @phpstan-param Foo $param\n * @phpstan-return Bar\n */\nfunction foo ($param) { ... }\n```\n\n----------------------------------------\n\nTITLE: Type Narrowing with Strict Comparison\nDESCRIPTION: Example of using strict comparison operators for type narrowing with scalar values.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/narrowing-types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($stringOrBool === true) {\n    // $stringOrBool is true here\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Integer Range Type in PHPStan 0.12\nDESCRIPTION: This code example shows how PHPStan can reason about integer values between specified bounds. The analyzer can detect conditions that are always true or false based on the possible range of integer values.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-12-released.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(int $i)\n{\n    if ($i > 2 && $i < 5) {\n        if ($i === 5) { } // error: this is always false\n    }\n\n    if ($i >= 2 && $i < 3) {\n        // PHPStan knows that $i is 2\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: StaticMethodTypeSpecifyingExtension Interface Definition\nDESCRIPTION: Interface definition for implementing static method type specifying extensions in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-specifying-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Type;\n\nuse PhpParser\\Node\\Expr\\StaticCall;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Analyser\\SpecifiedTypes;\nuse PHPStan\\Analyser\\TypeSpecifierContext;\nuse PHPStan\\Reflection\\MethodReflection;\n\ninterface StaticMethodTypeSpecifyingExtension\n{\n\n\tpublic function getClass(): string;\n\n\tpublic function isStaticMethodSupported(\n\t\tMethodReflection $staticMethodReflection,\n\t\tStaticCall $node,\n\t\tTypeSpecifierContext $context\n\t): bool;\n\n\tpublic function specifyTypes(\n\t\tMethodReflection $staticMethodReflection,\n\t\tStaticCall $node,\n\t\tScope $scope,\n\t\tTypeSpecifierContext $context\n\t): SpecifiedTypes;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Throw Type Extension Implementation\nDESCRIPTION: Implementation of the DynamicMethodThrowTypeExtension interface for the getComponent method, specifying when exceptions can be thrown based on the $throw parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-throw-type-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\npublic function isMethodSupported(MethodReflection $methodReflection): bool\n{\n\treturn $methodReflection->getDeclaringClass()->getName() === ComponentContainer::class\n\t\t&& $methodReflection->getName() === 'getComponent';\n}\n\npublic function getThrowTypeFromMethodCall(\n\tMethodReflection $methodReflection,\n\tMethodCall $methodCall,\n\tScope $scope\n): ?Type\n{\n\tif (count($methodCall->getArgs()) < 2) {\n\t\treturn $methodReflection->getThrowType();\n\t}\n\n\t$argType = $scope->getType($methodCall->getArgs()[1]->value);\n\tif ((new ConstantBooleanType(true))->isSuperTypeOf($argType)->yes()) {\n\t\treturn $methodReflection->getThrowType();\n\t}\n\n\treturn null;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference Test Implementation in PHPStan\nDESCRIPTION: Example test case for type inference extensions showing how to test dynamic return types and type specifications. Demonstrates setting up test providers and assertions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/testing.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types = 1);\n\nnamespace App\\PHPStan;\n\nuse PHPStan\\Testing\\TypeInferenceTestCase;\n\nclass MyContainerDynamicReturnTypeExtensionTest extends TypeInferenceTestCase\n{\n\n\t/**\n\t * @return iterable<mixed>\n\t */\n\tpublic static function dataFileAsserts(): iterable\n\t{\n\t\t// path to a file with actual asserts of expected types:\n\t\tyield from self::gatherAssertTypes(__DIR__ . '/data/my-container-types.php');\n\t}\n\n\t/**\n\t * @dataProvider dataFileAsserts\n\t */\n\tpublic function testFileAsserts(\n\t\tstring $assertType,\n\t\tstring $file,\n\t\tmixed ...$args\n\t): void\n\t{\n\t\t$this->assertFileAsserts($assertType, $file, ...$args);\n\t}\n\n\tpublic static function getAdditionalConfigFiles(): array\n\t{\n\t\t// path to your project's phpstan.neon, or extension.neon in case of custom extension packages\n\t\treturn [__DIR__ . '/../extension.neon'];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Overly Broad @param-out Type in PHP\nDESCRIPTION: This example demonstrates how PHPStan detects when a union type in the output parameter type includes unused parts, suggesting ways to narrow the type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(?string &$p): void\n{\n\t// Function foo() never assigns null to &$p so it can be removed from the by-ref type.\n\t// Tip: You can narrow the parameter out type with @param-out PHPDoc tag.\n\t$p = 'foo';\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Usage with Invariant Template\nDESCRIPTION: Example showing a function that accepts a Collection of Animals, demonstrating why Collection<Cat> cannot be passed to Collection<Animal> with regular @template.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/whats-up-with-template-covariant.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @param Collection<Animal> $animals */\nfunction foo(Collection $animals): void\n{\n\t$animals->add(new Dog()); // valid, no harm done\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating New Type Checking for Reference Parameters in PHP\nDESCRIPTION: This code illustrates how PHPStan now checks the type of arguments passed into parameters by reference, which previously didn't trigger warnings.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(string &$p): void\n{\n\t// ...\n}\n\n$v = 1;\nfoo($v);\n```\n\n----------------------------------------\n\nTITLE: Resolving Special Names with Scope\nDESCRIPTION: Shows how to use Scope to resolve special class names like 'self' to their actual class names in static method calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/scope.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// $staticCall is PhpParser\\Node\\Expr\\StaticCall\n$className = $scope->resolveName($staticCall->class);\n```\n\n----------------------------------------\n\nTITLE: Illustrating Type Mismatch in Reference Parameters in PHP\nDESCRIPTION: This example demonstrates that setting a type for a parameter passed by reference doesn't limit the output type, allowing a string parameter to be changed to an integer.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(string &$p): void\n{\n\t$p = 1;\n}\n\n$v = 'foo';\nfoo($v);\nvar_dump($v); // int(1)\n```\n\n----------------------------------------\n\nTITLE: Callable Invocation Documentation\nDESCRIPTION: Examples of documenting callable parameter execution timing using immediately/later invoked annotations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-later-invoked-callable $cb\n */\nfunction acceptCallableAndCallLater(callable $cb): void\n{\n    // ...\n}\n\nclass Foo\n{\n\t/**\n\t * @param-immediately-invoked-callable $cb\n\t */\n\tpublic function acceptAndCallCallableNow(callable $cb): void\n\t{\n\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Using @param-out to Change Reference Parameter Type in PHP\nDESCRIPTION: This example demonstrates how to use the @param-out PHPDoc tag to explicitly change the type of a parameter passed by reference.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-out int $p\n */\nfunction foo(string &$p): void\n{\n\t$p = 1;\n}\n\n$v = 'foo';\nfoo($v);\n\\PHPStan\\dumpType($v); // int\n```\n\n----------------------------------------\n\nTITLE: Implementing MethodReflection Interface in PHP\nDESCRIPTION: Interface definition for creating a method reflection implementation that describes the characteristics of magic methods in PHP classes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/class-reflection-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Reflection;\n\nuse PHPStan\\TrinaryLogic;\nuse PHPStan\\Type\\Type;\n\ninterface MethodReflection\n{\n\n\tpublic function getDeclaringClass(): ClassReflection;\n\n\tpublic function isStatic(): bool;\n\n\tpublic function isPrivate(): bool;\n\n\tpublic function isPublic(): bool;\n\n\tpublic function getDocComment(): ?string;\n\n\tpublic function getName(): string;\n\n\tpublic function getPrototype(): ClassMemberReflection;\n\n\t/**\n\t * @return \\PHPStan\\Reflection\\ParametersAcceptor[]\n\t */\n\tpublic function getVariants(): array;\n\n\tpublic function isDeprecated(): TrinaryLogic;\n\n\tpublic function getDeprecatedDescription(): ?string;\n\n\tpublic function isFinal(): TrinaryLogic;\n\n\tpublic function isInternal(): TrinaryLogic;\n\n\tpublic function getThrowType(): ?Type;\n\n\tpublic function hasSideEffects(): TrinaryLogic;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Syntax in PHP 7.4\nDESCRIPTION: Shows the new arrow function syntax that provides a concise alternative to anonymous functions, with implicit variable scope inheritance.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-now-fully-supports-php-7-4.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfn (int $i): int => $i + 1\n```\n\n----------------------------------------\n\nTITLE: Defining Global Constants for PHPStan\nDESCRIPTION: PHP code example showing how to define global constants that PHPStan needs to be aware of during analysis. Constants must be defined in a separate file that is then referenced in the configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/autoloading.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ndefine('MY_CONSTANT', 1);\ndefine('MY_OTHER_CONSTANT', 2);\n```\n\n----------------------------------------\n\nTITLE: Enforcing Assigned Type for Reference Parameters in PHP\nDESCRIPTION: This snippet shows how PHPStan now enforces the assigned type for parameters passed by reference, providing helpful error messages and tips.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(string &$p): void\n{\n\t// Parameter &$p by-ref type of function foo() expects string, int given.\n\t// Tip: You can change the parameter out type with @param-out PHPDoc tag.\n\t$p = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Using PHPStan-Prefixed Tags for IDE Compatibility in PHP\nDESCRIPTION: This example shows how to use PHPStan-prefixed tags for generics while maintaining compatibility with IDEs that don't support @template tags.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n/**\n * @phpstan-template T of \\Exception\n *\n * @param \\Exception $param\n * @return \\Exception\n *\n * @phpstan-param T $param\n * @phpstan-return T\n */\nfunction foo($param) { ... }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Parameter Passed by Reference in PHP\nDESCRIPTION: This snippet shows how a function can modify a variable passed by reference, changing its value from false to true.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(&$p): void\n{\n\t$p = true;\n}\n\n$v = false;\nfoo($v);\nvar_dump($v); // bool(true)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Override Attribute Check in PHP\nDESCRIPTION: Example showing how PHPStan checks for missing #[Override] attribute on overridden methods when checkMissingOverrideMethodAttribute is enabled.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n\tpublic function doFoo(): void\n\t{\n\n\t}\n}\n\nclass Bar extends Foo\n{\n\tpublic function doFoo(): void\n\t{\n\t\t// missing #[\\Override] above this method\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Animal Class Hierarchy in PHP\nDESCRIPTION: Basic interface and class definitions showing an Animal hierarchy used to demonstrate generic type variance.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/whats-up-with-template-covariant.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface Animal {}\nclass Dog implements Animal {}\nclass Cat implements Animal {}\n```\n\n----------------------------------------\n\nTITLE: Declaring Immutable Classes with @immutable in PHP\nDESCRIPTION: Shows how to use the @immutable PHPDoc tag to make PHPStan treat every property of a class as readonly, effectively creating an immutable class.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_24\n\nLANGUAGE: php\nCODE:\n```\n/** @immutable */\nclass Foo\n{\n\tpublic string $bar;\n}\n\n(new Foo())->bar = 'baz'; // @readonly property Foo::$bar is assigned outside of its declaring class.\n```\n\n----------------------------------------\n\nTITLE: Array Offset Access Examples\nDESCRIPTION: Examples demonstrating potentially nonexistent array offset access scenarios that can be checked with new configuration options.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param array<string, Item> $items\n */\nfunction doFoo(array $items, string $key): void\n{\n    // this might exist but might not\n    $selectedItem = $items[$key];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function doFoo(string $s): void\n{\n    $a = ['foo' => 1];\n    echo $a[$s];\n}\n```\n\n----------------------------------------\n\nTITLE: Generator Generic Type Declaration in PHP\nDESCRIPTION: Demonstrates the generic signature for PHP Generators, which includes types for keys, values, sent values, and return values.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-in-php-using-phpdocs.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\nGenerator<TKey, TValue, TSend, TReturn>\n```\n\n----------------------------------------\n\nTITLE: Generic Collection with Fixed Key Type\nDESCRIPTION: Demonstrates implementing a generic collection with fixed integer keys and generic value type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template TValue\n * @implements \\IteratorAggregate<int, TValue>\n */\nclass Collection implements \\IteratorAggregate\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Type Resolution with dumpType()\nDESCRIPTION: Shows how to use PHPStan's dumpType() function to debug type resolution during analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/troubleshooting-types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\\PHPStan\\dumpType(1 + 1); // Reports: Dumped type: 2\n```\n\n----------------------------------------\n\nTITLE: Getting Method Parameters and Return Type\nDESCRIPTION: Shows how to obtain method parameter and return type information using ParametersAcceptorSelector for method calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/reflection.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$variant = PHPStan\\Reflection\\ParametersAcceptorSelector::selectFromArgs(\n\t$scope,\n\t$methodCall->getArgs(),\n\t$methodReflection->getVariants()\n);\n$parameters = $variant->getParameters();\n$returnType = $variant->getReturnType();\n```\n\n----------------------------------------\n\nTITLE: Fixed Rector Code Using Variables to Preserve State\nDESCRIPTION: Shows how to fix the previous issue by storing object properties in local variables, which prevents PHPStan from forgetting their state after impure method calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param ClassMethod $node\n */\npublic function refactor(Node $node): ?Node\n{\n    // save $node->stmts to a variable so it does not reset\n    // after impure method call\n    $stmts = $node->stmts;\n    if ($stmts === null) {\n        return null;\n    }\n\n    $classMethodStatementCount = count($stmts);\n\n    for ($i = $classMethodStatementCount - 1; $i >= 0; --$i) {\n        // No errors!\n        $stmt = $stmts[$i];\n        $prevStmt = $stmts[$i - 1];\n        if (! $this->isBothMethodCallMatch($stmt, $prevStmt)) {\n            if (count($this->collectedMethodCalls) >= 2) {\n                $this->fluentizeCollectedMethodCalls($node);\n            }\n\n            continue;\n        }\n    }\n\n    return $node;\n}\n```\n\n----------------------------------------\n\nTITLE: Example Usage of Custom 'Pick' Type in PHP\nDESCRIPTION: Demonstration of how a custom 'Pick' utility type (inspired by TypeScript) could be used in PHP code. The example shows how to extract specific fields from a complex array type definition.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/custom-phpdoc-types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @phpstan-type Address array{name: string, surname: string, street: string, city: string, country: Country}\n */\nclass Foo\n{\n\n    /**\n     * @param Pick<Address, 'name' | 'surname'> $personalDetails\n     */\n    public function doFoo(array $personalDetails): void\n    {\n        \\PHPStan\\dumpType($personalDetails); // array{name: string, surname: string}\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Intersection Types in PHPUnit Mocks\nDESCRIPTION: Shows how PHPUnit mock objects inherently use intersection types by combining the mocked class and mock interface.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/union-types-vs-intersection-types.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n    public function doFooStuff()\n    {\n    }\n}\n\nclass SomeTest extends \\PHPUnit\\Framework\\TestCase\n{\n    public function testSomething()\n    {\n        $mockedFoo = $this–>createMock(Foo::class);\n        // $mockedFoo is Foo&PHPUnit_Framework_MockObject_MockObject\n\n        // we can call mock-configuration methods:\n        $mockedFoo->method('doFooStuff')\n            ->will($this->returnValue('fooResult'));\n\n        // and also methods from Foo itself:\n        $mockedFoo->doFooStuff();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Marking Impure Functions with @phpstan-impure in PHP\nDESCRIPTION: Shows how to use the @phpstan-impure tag to inform PHPStan about functions that may return different values on successive calls based on global state.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_18\n\nLANGUAGE: php\nCODE:\n```\n/** @phpstan-impure */\nfunction impureFunction(): bool\n{\n    return rand(0, 1) === 0 ? true : false;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting PHP Version Constraints in YAML\nDESCRIPTION: Examples of configuring PHP version requirements for analysis, including both single version and version range.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    phpVersion: 70400 # PHP 7.4\n```\n\n----------------------------------------\n\nTITLE: Implementing AllowedSubTypesClassReflectionExtension Interface in PHP\nDESCRIPTION: The interface definition for implementing allowed subtypes extension in PHPStan. It requires two methods: supports() to determine if the extension applies to a class, and getAllowedSubTypes() to return the array of allowed subtype objects.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/allowed-subtypes.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Reflection;\n\nuse PHPStan\\Type\\Type;\n\ninterface AllowedSubTypesClassReflectionExtension\n{\n\n\tpublic function supports(ClassReflection $classReflection): bool;\n\n\t/** @return array<Type> */\n\tpublic function getAllowedSubTypes(ClassReflection $classReflection): array;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring All Errors on a Line in PHP\nDESCRIPTION: Shows how to use @phpstan-ignore-line and @phpstan-ignore-next-line to ignore all errors on a specific line in PHP.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\necho $foo; // @phpstan-ignore-line\n\n// @phpstan-ignore-next-line\necho $foo;\n```\n\n----------------------------------------\n\nTITLE: Configuring Editor URL in PHPStan (NEON)\nDESCRIPTION: This snippet demonstrates how to set the 'editorUrl' parameter in the PHPStan configuration file. It shows an example for PhpStorm, using placeholders for file and line number.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/output-format.md#2025-04-21_snippet_1\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\teditorUrl: 'phpstorm://open?file=%%file%%&line=%%line%%'\n```\n\n----------------------------------------\n\nTITLE: New PHPStan Behavior for Assuming Output Type in PHP\nDESCRIPTION: This snippet shows how PHPStan now assumes that the type of a variable passed by reference remains unchanged unless specified otherwise.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(string &$p): void\n{\n\t// ...\n}\n\n$v = 'foo';\nfoo($v);\n\\PHPStan\\dumpType($v); // string\n```\n\n----------------------------------------\n\nTITLE: Adding Property Declaration in PHP\nDESCRIPTION: Example showing how to properly declare a property in a class to fix undefined property access.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-access-to-undefined-property.md#2025-04-21_snippet_2\n\nLANGUAGE: diff-php\nCODE:\n```\n class HelloWorld\n {\n\n+\tprivate string $name;\n+\n \tpublic function setName(string $name): void\n \t{\n \t\t$this->name = $name;\n```\n\n----------------------------------------\n\nTITLE: Defining ReadWritePropertiesExtension Interface in PHP\nDESCRIPTION: This code snippet defines the interface that needs to be implemented for a custom PHPStan extension to handle always-read and written properties. It includes methods for checking if a property is always read, always written, or initialized.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/always-read-written-properties.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Rules\\Properties;\n\nuse PHPStan\\Reflection\\PropertyReflection;\n\ninterface ReadWritePropertiesExtension\n{\n\n\tpublic function isAlwaysRead(PropertyReflection $property, string $propertyName): bool;\n\n\tpublic function isAlwaysWritten(PropertyReflection $property, string $propertyName): bool;\n\n\tpublic function isInitialized(PropertyReflection $property, string $propertyName): bool;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 3: Using an abstract constructor in PHP\nDESCRIPTION: Making the constructor abstract enforces the signature in child classes. The drawback is that child classes must always define their own constructor and cannot inherit the parent implementation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-error-unsafe-usage-of-new-static.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nabstract public function __construct(int $i);\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Method Signature in PHPStan\nDESCRIPTION: The method signature for custom rules in PHPStan showing that rules can return either strings or RuleError instances. This interface method is implemented by custom rule classes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/using-rule-error-builder.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @phpstan-param TNodeType $node\n * @return (string|RuleError)[] errors\n */\npublic function processNode(Node $node, Scope $scope): array;\n```\n\n----------------------------------------\n\nTITLE: Demonstrating basic try-catch-finally block in PHP\nDESCRIPTION: This snippet shows a basic try-catch-finally block structure in PHP, highlighting the previous limitations of PHPStan in determining variable definitions in different blocks.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/precise-try-catch-finally-analysis.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $foo = doFoo();\n    $bar = doBar();\n    $baz = doBaz();\n} catch (\\InvalidArgumentException $e) {\n    // what variables are defined here?\n} catch (\\RuntimeException $e) {\n    // and here?\n} finally {\n    // and finally... here?\n}\n```\n\n----------------------------------------\n\nTITLE: Null Coalesce Assignment Operator Usage\nDESCRIPTION: Demonstrates the new ??= operator that combines null coalescing with assignment, showing how it affects variable assignment and type changes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-now-fully-supports-php-7-4.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$foo ??= $bar;\n\n// the variable will be established with value 'foo'\n$nonexistentVariable ??= 'foo';\n\n// type of possibly-undefined variable will be combined with 'foo'\n$maybeUndefinedVariable ??= 'foo';\n\n// the right side is never used, type of the variable stays the same\n$alwaysDefinedNonNullable ??= 'foo';\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Ineffective and Effective DateTimeImmutable Method Calls in PHP\nDESCRIPTION: This snippet shows how PHPStan detects ineffective function calls, specifically with DateTimeImmutable methods. It illustrates an ineffective call that triggers a warning and a correct usage where the return value is assigned.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-12-released.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$date = new \\DateTimeImmutable();\n\n// \"Call to method DateTimeImmutable::setTime() on a separate line has no effect.\"\n$date->setTime(0, 0, 0);\n\n// OK\n$midnight = $date->setTime(0, 0, 0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Stub Files in PHPStan YAML Configuration\nDESCRIPTION: Example showing how to configure stub files in PHPStan's configuration file. The stubFiles parameter accepts a list of paths to stub files, which can use any file extension though .stub is recommended over .php.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/stub-files.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tstubFiles:\n\t\t- stubs/Foo.stub\n\t\t- stubs/Bar.stub\n```\n\n----------------------------------------\n\nTITLE: Setting PHPStan Rule Level in Configuration\nDESCRIPTION: Demonstrates how to set the desired rule level for PHPStan analysis directly in the configuration file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tlevel: 6\n```\n\n----------------------------------------\n\nTITLE: Checking TrinaryLogic Values in PHP\nDESCRIPTION: Instance methods for checking the state of TrinaryLogic objects and comparing them with other instances.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/trinary-logic.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nPHPStan\\TrinaryLogic::yes(): bool\nPHPStan\\TrinaryLogic::maybe(): bool\nPHPStan\\TrinaryLogic::no(): bool\nPHPStan\\TrinaryLogic::equals(self $other): bool\n```\n\n----------------------------------------\n\nTITLE: Handling Impure Function Values in PHP\nDESCRIPTION: Shows how PHPStan treats function return values and how to handle functions that may return different values based on global state.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\npublic function getRandomNumber(): int\n{\n    return rand();\n}\n\nif ($this->getRandomNumber() === 4) {\n    echo $this->getRandomNumber(); // it's not going to be 4 but PHPStan will think it is\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 2: Making the constructor final in PHP\nDESCRIPTION: Another solution is to make the constructor final, which prevents child classes from overriding it with a different signature while still allowing inheritance of other methods.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-error-unsafe-usage-of-new-static.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfinal public function __construct(int $i) { }\n```\n\n----------------------------------------\n\nTITLE: Array Type Hints with PHPDoc in PHP 7.4\nDESCRIPTION: Shows how to combine PHPDoc annotations with native array typehints to specify array contents. PHPStan interprets both the native type and PHPDoc annotation together.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-now-fully-supports-php-7-4.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var Item[] */\nprivate array $items;\n```\n\n----------------------------------------\n\nTITLE: Detecting Write-Only Properties in PHP\nDESCRIPTION: Example showing a class with a write-only property that is never read, which can be detected as unused code.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Foo {\n\n    private Bar $bar; // only written - never read!\n\n    public function __construct(Bar $bar)\n    {\n        $this->bar = $bar;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Extra Exception Reporting in PHPStan\nDESCRIPTION: Configuration to report exceptions listed in @throws that aren't actually thrown in the function or method body.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_4\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\texceptions:\n\t\tcheck:\n\t\t\ttooWideThrowType: true\n```\n\n----------------------------------------\n\nTITLE: Ignoring Errors with PHPDoc Tags in PHP\nDESCRIPTION: Demonstrates how to use @phpstan-ignore tags to ignore specific errors or all errors on a line in PHP code.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction () {\n\t/** @phpstan-ignore variable.undefined */\n\techo $foo;\n\n\techo $foo; /** @phpstan-ignore variable.undefined */\n\n\t/* @phpstan-ignore variable.undefined */\n\techo $foo;\n\n\techo $foo; /* @phpstan-ignore variable.undefined */\n\n\t// @phpstan-ignore variable.undefined\n\techo $foo;\n\n\techo $foo; // @phpstan-ignore variable.undefined\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying AST structure for PHP code\nDESCRIPTION: This snippet shows the AST representation of the previously shown PHP code, illustrating the hierarchy of objects in the tree structure.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/abstract-syntax-tree.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPhpParser\\Node\\Stmt\\Return_\n└─ expr: PhpParser\\Node\\Expr\\BinaryOp\\BooleanAnd\n   ├─ left:  PhpParser\\Node\\Expr\\PropertyFetch\n   |         ├─ var:  PhpParser\\Node\\Expr\\Variable\n   |         └─ name: PhpParser\\Node\\Identifier\n   └─ right: PhpParser\\Node\\Expr\\StaticCall\n             ├─ class: PhpParser\\Node\\Name\n             ├─ name:  PhpParser\\Node\\Identifier\n             └─ args:  array()\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Files for PHPStan\nDESCRIPTION: Shows how to specify bootstrap files that PHPStan should run before analysis, useful for initializing autoloaders or other runtime dependencies.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tbootstrapFiles:\n\t\t- phpstan-bootstrap.php\n```\n\n----------------------------------------\n\nTITLE: Updating Composer Dependencies for PHPStan 2.0\nDESCRIPTION: Example composer.json configuration showing how to update PHPStan and related packages to version 2.0.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"require-dev\": {\n    \"phpstan/phpstan\": \"^2.0\",\n    \"phpstan/phpstan-deprecation-rules\": \"^2.0\",\n    \"phpstan/phpstan-doctrine\": \"^2.0\",\n    \"phpstan/phpstan-nette\": \"^2.0\",\n    \"phpstan/phpstan-phpunit\": \"^2.0\",\n    \"phpstan/phpstan-strict-rules\": \"^2.0\",\n    \"phpstan/phpstan-symfony\": \"^2.0\",\n    \"phpstan/phpstan-webmozart-assert\": \"^2.0\",\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ErrorFormatter Interface in PHP\nDESCRIPTION: This snippet shows the structure of the ErrorFormatter interface that needs to be implemented for custom error formatters in PHPStan. It includes a method for formatting errors and outputting them to the console.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/error-formatters.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Command\\ErrorFormatter;\n\ninterface ErrorFormatter\n{\n\n\t/**\n\t * Formats the errors and outputs them to the console.\n\t *\n\t * @param \\PHPStan\\Command\\AnalysisResult $analysisResult\n\t * @param \\PHPStan\\Command\\Output $style\n\t * @return int Error code.\n\t */\n\tpublic function formatErrors(\n\t\t\\PHPStan\\Command\\AnalysisResult $analysisResult,\n\t\t\\PHPStan\\Command\\Output $output\n\t): int;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using ParametersAcceptorSelector in PHPStan 2.0\nDESCRIPTION: Example showing how to migrate from selectSingle() to selectFromArgs() when working with function parameters.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$defaultReturnType = ParametersAcceptorSelector::selectFromArgs(\n    $scope,\n    $functionCall->getArgs(),\n    $functionReflection->getVariants()\n)->getReturnType();\n```\n\n----------------------------------------\n\nTITLE: Exception Documentation\nDESCRIPTION: Shows how to document exceptions thrown by functions using @throws tag.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @throws \\InvalidArgumentException\n */\nfunction doFoo(): void\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Doctrine Property Type Mapping in PHPStan 0.12\nDESCRIPTION: This code example shows how PHPStan's Doctrine extension can detect inconsistencies between property types and ORM column definitions. The extension checks for mismatches that could lead to bugs, especially relevant with PHP 7.4's native property types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-12-released.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @ORM\\Column(type=\"string\")\n * @var string|null\n */\nprivate $text; // \"Property $text type mapping mismatch: property can contain string|null but database expects string.\"\n\n/**\n * @ORM\\Column(type=\"string\", nullable=true)\n */\nprivate string $title; // \"Property $one type mapping mismatch: database can contain string|null but property expects string.\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Interface with Specific Type in PHP\nDESCRIPTION: Shows how to implement a generic interface with a specific type and how to make the child class generic as well.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/** @implements Collection<Foo> */\nclass Bar implements Collection\n{\n}\n\n/**\n * @template T\n * @implements Collection<T>\n */\nclass Bar implements Collection\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Parameter Type Assignment by Reference\nDESCRIPTION: Demonstrates using @param-out annotation to specify types for parameters passed by reference.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-out int $i\n */\nfunction foo(mixed &$i): void {\n    $i = 5;\n}\n\nfoo($a);\n\\PHPStan\\dumpType($a); // int\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific Error Types in PHPStan Configuration\nDESCRIPTION: Demonstrates how to ignore specific error types using the identifier key in YAML configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: '#Access to an undefined property [a-zA-Z0-9\\_]+::\\$foo#'\n\t\t\tidentifier: property.notFound\n\t\t\tpath: some/dir/SomeFile.php\n```\n\n----------------------------------------\n\nTITLE: Enabling Custom Ruleset in PHPStan\nDESCRIPTION: Shows how to enable the use of a custom ruleset in PHPStan by setting the 'customRulesetUsed' parameter to true.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tcustomRulesetUsed: true\n```\n\n----------------------------------------\n\nTITLE: Accepting Class String and Returning Object in PHP\nDESCRIPTION: Demonstrates how to use generics to accept a class string and return an object of that type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/generics-by-examples.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of object\n * @param class-string<T> $className\n * @return T\n */\nfunction foo(string $className): object\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing IgnoreErrorExtension in PHP for Controller Action Return Type Errors\nDESCRIPTION: This snippet demonstrates how to create a custom IgnoreErrorExtension class to ignore 'missingType.iterableValue' errors for public Action methods in Controller classes. It checks the error identifier, node type, class and method names, and method visibility to determine if the error should be ignored.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/ignore-error-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\Node;\nuse PHPStan\\Analyser\\Error;\nuse PHPStan\\Analyser\\IgnoreErrorExtension;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Node\\InClassMethodNode;\n\n// This extension will ignore \"missingType.iterableValue\" errors for public Action methods inside Controller classes.\nfinal class ControllerActionReturnTypeIgnoreExtension implements IgnoreErrorExtension\n{\n\tpublic function shouldIgnore(Error $error, Node $node, Scope $scope): bool\n\t{\n\t\tif ($error->getIdentifier() !== 'missingType.iterableValue') {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (! $node instanceof InClassMethodNode) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!str_ends_with($node->getClassReflection()->getName(), 'Controller')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!str_ends_with($node->getMethodReflection()->getName(), 'Action')) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!$node->getMethodReflection()->isPublic()) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Nonexistent Array Offsets in PHP\nDESCRIPTION: Illustrates how PHPStan can be configured to report possibly nonexistent offsets in general arrays and array shapes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_16\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param array<string, int> $array\n */\npublic function doFoo(array $array): int\n{\n    return $array['foo'];\n}\n```\n\nLANGUAGE: php\nCODE:\n```\npublic function doFoo(string $s): void\n{\n    $a = ['foo' => 1];\n    echo $a[$s];\n}\n```\n\n----------------------------------------\n\nTITLE: Excluding Files and Directories in PHPStan Configuration\nDESCRIPTION: Demonstrates how to exclude specific files or directories from analysis using the excludePaths key in YAML configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\texcludePaths:\n\t\t- tests/*/data/*\n\t\t- src/broken\n\t\t- node_modules (?) # optional path, might not exist\n```\n\n----------------------------------------\n\nTITLE: Registering Methods Class Reflection Extension in YAML Configuration\nDESCRIPTION: Configuration example showing how to register a methods class reflection extension in PHPStan's configuration file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/class-reflection-extensions.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\PHPStan\\EnumMethodsClassReflectionExtension\n\t\ttags:\n\t\t\t- phpstan.broker.methodsClassReflectionExtension\n```\n\n----------------------------------------\n\nTITLE: Defining EntityRepository with Generics-like Syntax in PHP DocBlock\nDESCRIPTION: Shows how to use a generics-like syntax in phpDoc to typehint an EntityRepository property. This allows PHPStan to know the entity type the repository represents, enabling better type checking and field validation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstans-doctrine-extension-just-got-a-lot-better.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @var \\Doctrine\\ORM\\EntityRepository<MyEntity> */\nprivate $repository;\n\npublic function __construct(EntityManager $em)\n{\n   $this->repository = $em->getRepository(MyEntity::class);\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Named Parameters for Built-in Methods\nDESCRIPTION: Demonstrates proper resolution of named parameters for built-in PHP methods using the named arguments variants parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/reflection.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$variant = PHPStan\\Reflection\\ParametersAcceptorSelector::selectFromArgs(\n\t$scope,\n\t$methodCall->getArgs(),\n\t$methodReflection->getVariants(),\n\t$methodReflection->getNamedArgumentsVariants(),\n);\n```\n\nLANGUAGE: php\nCODE:\n```\n$pdo->query(query: 'SELECT * FROM users', fetchMode: PDO::FETCH_ASSOC);\n```\n\nLANGUAGE: php\nCODE:\n```\n$parameters = $variant->getParameters();\n$parameterNames = array_map(fn ($parameter) => $parameter->getName(), $parameters);\n```\n\n----------------------------------------\n\nTITLE: Implementing PHP Trait Usage Examples\nDESCRIPTION: Demonstrates two different class implementations using the same trait - one without the required property (causing an error) and one with the property defined (valid usage).\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/how-phpstan-analyses-traits.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n\n\t// there's no property $this–>foo, error should be reported\n\tuse FooTrait;\n\n}\n\nclass Bar\n{\n\n\t// the property exists, do not report the error\n\tuse FooTrait;\n\n\tprivate int $foo;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Errors in Specific Files in PHPStan Configuration\nDESCRIPTION: Shows how to ignore errors in specific files or directories using path and messages keys in YAML configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: '#Access to an undefined property [a-zA-Z0-9\\_]+::\\$foo#'\n\t\t\tpath: some/dir/SomeFile.php\n\t\t-\n\t\t\tmessage: '#Call to an undefined method [a-zA-Z0-9\\_]+::doBar\\(\\)#'\n\t\t\tpaths:\n\t\t\t\t- some/dir/*\n\t\t\t\t- other/dir/*\n\t\t-\n\t\t\tmessages:\n\t\t\t\t- '#Call to an undefined method [a-zA-Z0-9\\_]+::doFooFoo\\(\\)#'\n\t\t\t\t- '#Call to an undefined method [a-zA-Z0-9\\_]+::doFooBar\\(\\)#'\n\t\t\tpath: other/dir/AnotherFile.php\n\t\t-\n\t\t\tmessages:\n\t\t\t\t- '#Call to an undefined method [a-zA-Z0-9\\_]+::doFooFoo\\(\\)#'\n\t\t\t\t- '#Call to an undefined method [a-zA-Z0-9\\_]+::doFooBar\\(\\)#'\n\t\t\tpaths:\n\t\t\t\t- some/foo/dir/*\n\t\t\t\t- other/foo/dir/*\n\t\t-\n\t\t\tmessage: '#Call to an undefined method [a-zA-Z0-9\\_]+::doFoo\\(\\)#'\n\t\t\tpath: other/dir/DifferentFile.php\n\t\t\tcount: 2 # optional\n\t\t- '#Other error to ignore everywhere#'\n```\n\n----------------------------------------\n\nTITLE: Composer Version Constraint Examples\nDESCRIPTION: Examples of how to specify PHPStan version constraints in composer.json, showing both caret version range for flexibility and exact version for stability.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/backward-compatibility-promise.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"phpstan/phpstan\": \"^1.10.60\"\n```\n\nLANGUAGE: json\nCODE:\n```\n\"phpstan/phpstan\": \"1.10.60\"\n```\n\n----------------------------------------\n\nTITLE: PHPStan Debug Command\nDESCRIPTION: Command to run PHPStan with debug options and redirect output to a log file for analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/debugging-performance-identify-slow-files.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan -vvv --debug > phpstan.log\n```\n\n----------------------------------------\n\nTITLE: Exception Handling in Callbacks\nDESCRIPTION: Example showing exception handling considerations when passing callbacks to methods.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n$this->doFoo(function () {\n    if (rand(0, 1)) {\n        throw new MyException();\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Universal Object Crates in PHPStan\nDESCRIPTION: Shows how to configure PHPStan to recognize classes used as universal holders of data, where any property can be set and read.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tuniversalObjectCratesClasses:\n\t\t- Dibi\\Row\n\t\t- Ratchet\\ConnectionInterface\n```\n\n----------------------------------------\n\nTITLE: Forgetting Method Return Values when Passing Objects to Impure Functions\nDESCRIPTION: Demonstrates how passing an object to an impure function causes PHPStan to forget previously remembered method return values for that object.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nif ($person->getName() !== null) {\n    \\PHPStan\\dumpType($person->getName()); // string\n    resetPerson($person);\n    \\PHPStan\\dumpType($person->getName()); // string|null\n}\n```\n\n----------------------------------------\n\nTITLE: Example Method with Conditional Exception Throwing\nDESCRIPTION: Sample PHP method implementation that throws ComponentNotFoundException conditionally based on a boolean parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-throw-type-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/** @throws ComponentNotFoundException */\npublic function getComponent(string $name, bool $throw): ?Component\n{\n\tif (!array_key_exists($name, $this->components)) {\n\t\tif ($throw) {\n\t\t\tthrow new ComponentNotFoundException($name);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\treturn $this->components[$name];\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Generic Attribute Access with PHPStan\nDESCRIPTION: Implementation of a generic attribute system using PHPStan's type system with templates and key-value pair validation. Shows advanced usage of generics and type checking.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdoc-types.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of array<string, mixed>\n */\ntrait AttributeTrait\n{\n\t/** @var T */\n\tprivate array $attributes;\n\n\t/**\n\t * @template K of key-of<T>\n\t * @param K $key\n\t * @param T[K] $val\n\t */\n\tpublic function setAttribute(string $key, $val): void\n\t{\n\t\t// ...\n\t}\n\n\t/**\n\t * @template K of key-of<T>\n\t * @param K $key\n\t * @return T[K]|null\n\t */\n\tpublic function getAttribute(string $key)\n\t{\n\t\treturn $this->attributes[$key] ?? null;\n\t}\n}\n\nclass Foo {\n\n\t/** @use AttributeTrait<array{foo?: string, bar?: 5|6|7, baz?: bool}> */\n\tuse AttributeTrait;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Properties Class Reflection Extension in YAML Configuration\nDESCRIPTION: Configuration example showing how to register a properties class reflection extension in PHPStan's configuration file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/class-reflection-extensions.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\PHPStan\\PropertiesFromAnnotationsClassReflectionExtension\n\t\ttags:\n\t\t\t- phpstan.broker.propertiesClassReflectionExtension\n```\n\n----------------------------------------\n\nTITLE: Error Detection for Disallowed Subtypes in PHP\nDESCRIPTION: Example showing how PHPStan reports an error when a class tries to extend a restricted class with a disallowed subtype. This prevents classes outside the allowed list from extending the restricted class.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/allowed-subtypes.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Error: 'Type Lorem is not allowed to be a subtype of Foo.'\nclass Lorem extends Foo\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Relative File Path for Editor URL in PHPStan (NEON)\nDESCRIPTION: This snippet demonstrates how to use relative file paths in the 'editorUrl' parameter, useful for Docker environments. It also shows how to customize the editor URL title.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/output-format.md#2025-04-21_snippet_3\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\teditorUrl: 'phpstorm://open?file=/path/to/your/project/%%relFile%%&line=%%line%%'\n\teditorUrlTitle: '%%relFile%%:%%line%%'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bleeding Edge Features in PHPStan\nDESCRIPTION: Shows how to enable experimental features like list type support using configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n\t- phar://phpstan.phar/conf/bleedingEdge.neon\n```\n\n----------------------------------------\n\nTITLE: Configuring ResultCacheMetaExtension in YAML\nDESCRIPTION: YAML configuration example showing how to register a custom ResultCacheMetaExtension implementation in PHPStan's configuration file. Uses service tags to identify the extension.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/result-cache-meta-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\ResultCacheMetaExtension\n\t\ttags:\n\t\t\t- phpstan.resultCacheMetaExtension\n```\n\n----------------------------------------\n\nTITLE: Ignoring Multiple Errors with PHPDoc Tags in PHP\nDESCRIPTION: Shows how to ignore multiple errors on a single line using comma-separated identifiers in PHP.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\necho $foo, $bar; // @phpstan-ignore variable.undefined, variable.undefined\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Error Formatter in YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to register a custom error formatter in the PHPStan configuration file. It defines a service for the custom formatter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/error-formatters.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\terrorFormatter.awesome:\n\t\tclass: App\\PHPStan\\AwesomeErrorFormatter\n```\n\n----------------------------------------\n\nTITLE: Validating Inline PHPDoc @var Tag Type\nDESCRIPTION: Shows how PHPStan 2.0 validates inline @var tag types against native types, reporting errors when the PHPDoc type is not a subtype of the native type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-2-0-released-level-10-elephpants.md#2025-04-21_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction doFoo(): string\n{\n    // ...\n}\n\n/** @var string|null $a */\n$a = doFoo();\n\n// PHPDoc tag @var with type string|null is not subtype of native type string.\n```\n\n----------------------------------------\n\nTITLE: Demonstrating EntityManager::merge() Usage in PHP\nDESCRIPTION: Shows how the EntityManager::merge() method is typically used, where the return type matches the input type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-return-type-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$mergedArticle = $this->entityManager->merge($article);\n// $mergedArticle will have the same type as $article\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHPStan Analysis with instanceof Type Refinement in PHP\nDESCRIPTION: This code example shows how PHPStan handles type refinement through instanceof checks. In previous versions, PHPStan would fail to analyze this pattern where an object can be both its original type and an interface type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-9-a-huge-leap-forward.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction doSomething(Foo $foo)\n{\n    if ($foo instanceof Bar) {\n        // you can still call methods from Foo\n        // in case Bar is an interface!\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Type Inference with Allowed Subtypes in PHP\nDESCRIPTION: Example showing how the allowed subtypes extension enhances type inference. After eliminating Bar as a possible type, PHPStan can determine that $foo must be Baz since it's the only remaining allowed subtype of Foo.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/allowed-subtypes.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(Foo $foo): void\n{\n    if ($foo instanceof Bar) {\n        return;\n    }\n\n    // without the extension, $foo could be \"any Foo, but not Bar\"\n    // with the extension, the only remaining possible type is Baz\n    \\PHPStan\\dumpType($foo); // Baz\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Files for Constants\nDESCRIPTION: YAML configuration showing how to include bootstrap files containing constant definitions in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    bootstrapFiles:\n        - constants.php\n```\n\n----------------------------------------\n\nTITLE: Checking for Unhandled Match Error in Try-Catch (Old Version)\nDESCRIPTION: This PHP function demonstrates the old way of checking if an unhandled match error is caught in a surrounding try-catch block. It uses the deprecated parent attribute to traverse the AST.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/preprocessing-ast-for-custom-rules.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nprivate function isUnhandledMatchErrorCaught(Node $node): bool\n{\n    /** @var Node|null $tryCatchNode */\n    $tryCatchNode = $node->getAttribute('parent');\n    while (\n        $tryCatchNode !== null &&\n        !$tryCatchNode instanceof Node\\FunctionLike &&\n        !$tryCatchNode instanceof Node\\Stmt\\TryCatch\n    ) {\n        $tryCatchNode = $tryCatchNode->getAttribute('parent');\n    }\n\n    if ($tryCatchNode === null || $tryCatchNode instanceof Node\\FunctionLike) {\n        // no try-catch\n        return false;\n    }\n\n    foreach ($tryCatchNode->catches as $catch) {\n        // create PHPStan's Type object from the AST caught Name nodes\n        $catchType = TypeCombinator::union(\n            ...array_map(static fn (Node\\Name $class): ObjectType =>\n                new ObjectType($class->toString()), $catch->types)\n        );\n        if ($catchType\n            ->isSuperTypeOf(new ObjectType(UnhandledMatchError::class))->yes()) {\n            // yes, UnhandledMatchError is handled in a surrounding try-catch block\n            return true;\n        }\n    }\n\n    // check if we're in a try-catch block in a try-catch block recursively\n    return $this->isUnhandledMatchErrorCaught($tryCatchNode);\n}\n```\n\n----------------------------------------\n\nTITLE: Ignoring Errors with Reasons in PHP\nDESCRIPTION: Demonstrates how to add a reason for ignoring an error using parentheses after the identifier in PHP.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\necho $foo; // @phpstan-ignore variable.undefined (Because we are lazy)\n```\n\n----------------------------------------\n\nTITLE: Updating MutatingScope Method Parameters in PHP\nDESCRIPTION: The 'callableParameters' parameter is now required for enterAnonymousFunction() and enterArrowFunction() methods in the MutatingScope class.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\nMutatingScope::enterAnonymousFunction($callableParameters)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nMutatingScope::enterArrowFunction($callableParameters)\n```\n\n----------------------------------------\n\nTITLE: Checking Type Relationships in PHPStan\nDESCRIPTION: Demonstrates how to properly check if a type is a string using PHPStan's type system. Shows handling of definite, possible, and negative type relationships using the isSuperTypeOf method.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-system.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nuse PHPStan\\Type\\StringType;\n\n/// ...\n\n$isString = (new StringType())->isSuperTypeOf($type);\nif ($isString->yes()) {\n    // we definitely have a string in $type,\n    // such as StringType or a UnionType of ConstantStringType objects\n} elseif ($isString->maybe()) {\n    // we might have a string in $type\n    // it might be string|null or even mixed\n} else {\n    // we definitely don't have a string in $type\n    // so it's for example an int or something else\n}\n```\n\n----------------------------------------\n\nTITLE: Star Projection Collection Interface\nDESCRIPTION: Shows a collection interface with an additional count method that doesn't reference the template type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/guide-to-call-site-generic-variance.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/** @template ItemType */\ninterface Collection\n{\n\t/** @param ItemType $item */\n\tpublic function add(mixed $item): void;\n\n\t/** @return ItemType|null */\n\tpublic function get(int $index): mixed;\n\n\tpublic function count(): int;\n}\n```\n\n----------------------------------------\n\nTITLE: Specific Collection Implementation with Generics\nDESCRIPTION: Example of implementing IteratorAggregate for a specific type (DogCollection).\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/** @implements \\IteratorAggregate<int, Dog> */\nclass DogCollection implements \\IteratorAggregate\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Parent Node Attribute (Deprecated in PHPStan 1.6.0 with Bleeding Edge)\nDESCRIPTION: This snippet shows how to access the parent node attribute, which will be null in PHPStan 1.6.0 with Bleeding Edge enabled. It demonstrates the need for updating custom rules.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/preprocessing-ast-for-custom-rules.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function processNode(Node $node, Scope $scope): array\n{\n    // will be null in PHPStan 1.6.0 + Bleeding Edge!\n    $parentNode = $node->getAttribute('parent');\n}\n```\n\n----------------------------------------\n\nTITLE: PHPStan Baseline File Structure\nDESCRIPTION: Example of a generated baseline file in NEON format showing ignored errors with their occurrence count and file paths.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/baseline.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\\n\\tignoreErrors:\\n\\t\\t-\\n\\t\\t\\tmessage: \"#^Only numeric types are allowed in pre\\\\-decrement, bool\\\\|float\\\\|int\\\\|string\\\\|null given\\.$#\"\\n\\t\\t\\tcount: 1\\n\\t\\t\\tpath: src/Analyser/Scope.php\\n\\t\\t-\\n\\t\\t\\tmessage: \"#^Anonymous function has an unused use \\\\$container\\.$#\"\\n\\t\\t\\tcount: 2\\n\\t\\t\\tpath: src/Command/CommandHelper.php\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Docker Container\nDESCRIPTION: Docker command to run PHPStan analysis on a specific directory using the Docker image.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker run --rm -v /path/to/app:/app ghcr.io/phpstan/phpstan analyse /app/src\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Collector in PHPStan Configuration\nDESCRIPTION: YAML configuration example showing how to register a custom collector in the PHPStan configuration file using service tags.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/collectors.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\MyCollector\n\t\ttags:\n\t\t\t- phpstan.collector\n```\n\n----------------------------------------\n\nTITLE: Registering TypeNodeResolverExtension in PHPStan Configuration\nDESCRIPTION: YAML configuration required to register a custom TypeNodeResolverExtension in PHPStan. The extension must be tagged with 'phpstan.phpDoc.typeNodeResolverExtension' to be recognized by PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/custom-phpdoc-types.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\MyTypeNodeResolverExtension\n\t\ttags:\n\t\t\t- phpstan.phpDoc.typeNodeResolverExtension\n```\n\n----------------------------------------\n\nTITLE: Foreach Variable Overwrite Detection in PHP\nDESCRIPTION: Shows how phpstan-strict-rules prevents overwriting existing variables in foreach loops.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-11.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$foo = 123;\nforeach ($array as $foo) {\n\t//...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Version-Specific PHP Function Signature in PHPStan Stubs\nDESCRIPTION: Example of using custom #[Until] and #[Since] attributes to mark PHP function signatures that have changed across versions. This approach allows PHPStan to maintain version-specific stubs without duplicating the entire repository.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-6-0-with-conditional-return-types.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n#[Until(\"8.1\")]\\nfunction finfo_open(int $flags = FILEINFO_NONE, ?string $magic_file = null): finfo|false {}\\n\\n#[Since(\"8.1\")]\\nfunction finfo_open(int $flags = FILEINFO_NONE, ?string $magic_file = null): finfo {}\n```\n\n----------------------------------------\n\nTITLE: Modifying TypeSpecifier Usage in PHP\nDESCRIPTION: TypeSpecifier::specifyTypesInCondition() no longer accepts Expr $rootExpr. Instead, use setRootExpr() on the SpecifiedTypes object returned by the method. This change affects how root expressions are specified in type analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n$specifiedTypes = $typeSpecifier->specifyTypesInCondition();\n$newSpecifiedTypes = $specifiedTypes->setRootExpr($rootExpr);\n```\n\n----------------------------------------\n\nTITLE: Generic Collection Usage Example\nDESCRIPTION: Shows how to use a generic collection by specifying the concrete type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/** @param Collection<Dog> */\nfunction foo(Collection $items): void\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan PHP Version\nDESCRIPTION: YAML configuration to set the PHP version for PHPStan analysis in phpstan.neon file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    phpVersion: 70400 # PHP 7.4\n```\n\n----------------------------------------\n\nTITLE: Resolving Named Parameters for Built-in Functions\nDESCRIPTION: Shows how to properly resolve named parameters for built-in PHP functions using the named arguments variants parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/reflection.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$variant = PHPStan\\Reflection\\ParametersAcceptorSelector::selectFromArgs(\n\t$scope,\n\t$funcCall->getArgs(),\n\t$functionReflection->getVariants(),\n\t$functionReflection->getNamedArgumentsVariants(),\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nstrtok(string: 'This is\\tan example\\nstring', token: \" \\n\\t\");\n```\n\nLANGUAGE: php\nCODE:\n```\n$parameters = $variant->getParameters();\n$parameterNames = array_map(fn ($parameter) => $parameter->getName(), $parameters);\n```\n\n----------------------------------------\n\nTITLE: Read-Only Property Detection\nDESCRIPTION: Example of a property that is read but never written, which PHPStan can detect as a potential issue.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nclass Foo {\n\n    private Bar $bar; // only read - never written!\n\n    public function getBar(Bar $bar): Bar\n    {\n        return $this->bar;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up PHPStan Cache in GitHub Actions\nDESCRIPTION: GitHub Actions workflow configuration for caching PHPStan results between runs. Includes steps for restoring cache, running PHPStan, and saving the new cache state.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/result-cache.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n  - name: \"Restore result cache\"\n    uses: actions/cache/restore@v4\n    with:\n      path: tmp\n      key: \"phpstan-result-cache-${{ github.run_id }}\"\n      restore-keys: |\n        phpstan-result-cache-\n\n  - name: \"Run PHPStan\"\n    run: \"vendor/bin/phpstan\"\n\n  - name: \"Save result cache\"\n    uses: actions/cache/save@v4\n    if: ${{ !cancelled() }}\n    with:\n      path: tmp\n      key: \"phpstan-result-cache-${{ github.run_id }}\"\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video with HTML iframe\nDESCRIPTION: HTML iframe configuration for embedding a YouTube video about PHPStan 0.10 features. The iframe includes security attributes and responsive design classes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/whats-new-in-phpstan-0-10.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe\n\theight=\"480\"\n\tsrc=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fnfq2zsazpZM%3Ffeature%3Doembed&url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3Dnfq2zsazpZM&image=https%3A%2F%2Fi.ytimg.com%2Fvi%2Fnfq2zsazpZM%2Fhqdefault.jpg&key=a19fcc184b9711e1b4764040d3dc5c07&type=text%2Fhtml&schema=youtube\"\n\tframeborder=\"0\"\n\tallow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n\tallowfullscreen\n\tclass=\"w-full mb-8\"\n></iframe>\n```\n\n----------------------------------------\n\nTITLE: Generic Mixin Example\nDESCRIPTION: Demonstrates using @mixin with generic types for flexible delegation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_10\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T\n * @mixin T\n */\nclass Delegatee\n{\n\n    /** @var T */\n    private $delegate;\n\n    /**\n     * @param T $delegate\n     */\n    public function __construct($delegate)\n    {\n        $this->delegate = $delegate;\n    }\n\n    public function __call($name, $arguments)\n    {\n        return $this->delegate->$name(...$arguments);\n    }\n\n}\n\n$d = new Delegatee(new \\Exception('My message')); \necho $d->getMessage();\n```\n\n----------------------------------------\n\nTITLE: Registering Deprecation Extension in PHPStan Configuration\nDESCRIPTION: YAML configuration to register the custom deprecation extension with PHPStan using the phpstan.classDeprecationExtension tag.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/custom-deprecations.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\CustomDeprecationExtension\n\t\ttags:\n\t\t\t- phpstan.classDeprecationExtension\n```\n\n----------------------------------------\n\nTITLE: Migrating from Plain Strings to RuleErrorBuilder with Identifiers\nDESCRIPTION: Example of migrating from returning plain string errors to using RuleErrorBuilder with error identifiers. This change is required for PHPStan 2.0 and recommended for compatibility with PHPStan 1.11.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/using-rule-error-builder.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n \tpublic function processNode(Node $node, Scope $scope): array\n \t{\n \t\treturn [\n-\t\t\t'This is an error message.',\n+\t\t\tRuleErrorBuilder::message('This is an error message.')\n+\t\t\t\t->identifier('some.problem')\n+\t\t\t\t->build(),\n \t\t];\n \t}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Extensions for PHPStan Analysis\nDESCRIPTION: Shows how to configure PHPStan to analyze files with extensions other than the default .php extension.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tfileExtensions:\n\t\t- php\n\t\t- module\n\t\t- inc\n```\n\n----------------------------------------\n\nTITLE: Configuring Early Terminating Function Calls in PHPStan\nDESCRIPTION: YAML configuration for defining global functions that terminate execution early. Shows how to configure the redirect() function as an early terminating function.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/solving-undefined-variables.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tearlyTerminatingFunctionCalls:\n\t\t- redirect\n```\n\n----------------------------------------\n\nTITLE: Defining Class Aliases in PHP\nDESCRIPTION: PHP code example demonstrating how to create class aliases that PHPStan needs to recognize.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nclass_alias(\\Foo::class, 'Bar');\n```\n\n----------------------------------------\n\nTITLE: Specifying Service Arguments in YAML\nDESCRIPTION: Demonstrates how to specify which service should be injected when there are multiple services of the same type, using the arguments section in the .neon configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dependency-injection-configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\tserviceOne:\n\t\tclass: App\\MyService\n\n\tserviceTwo:\n\t\tclass: App\\MyService\n\n\t-\n\t\t# App\\MyExtension has \"myService\" constructor parameter\n\t\tclass: App\\MyExtension\n\t\targuments:\n\t\t\tmyService: @serviceTwo\n```\n\n----------------------------------------\n\nTITLE: Example Class with Constructor Restriction in PHP\nDESCRIPTION: A sample Person class demonstrating a case where direct instantiation should be restricted and only allowed through a factory.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/rules.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Person\n{\n\n\t/**\n\t * !!! DO NOT INSTANTIATE Person DIRECTLY! Use PersonFactory instead !!!\n\t */\n\tpublic function __construct(string $email)\n\t{\n\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Variable Variables Usage Detection in PHP\nDESCRIPTION: Demonstrates strict rules checking for variable variables usage, which is disallowed in phpstan-strict-rules.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-11.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = 'bar';\necho $$foo;\necho $object->$$foo;\nFoo::$foo();\nFoo::${$bar} = 123;\n```\n\n----------------------------------------\n\nTITLE: Including Dist Configuration in Local PHPStan Config (NEON)\nDESCRIPTION: This snippet shows how to include a distributed PHPStan configuration file and override specific parameters in a local configuration. It demonstrates including 'phpstan.neon.dist' and setting a custom 'editorUrl'.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/output-format.md#2025-04-21_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n\t- phpstan.neon.dist\n\nparameters:\n\teditorUrl: 'phpstorm://open?file=%%file%%&line=%%line%%'\n```\n\n----------------------------------------\n\nTITLE: Checking String Type in PHPStan\nDESCRIPTION: Shows the new preferred method for checking if a type is a string in PHPStan. This method returns a TrinaryLogic value.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\nType::isString(): TrinaryLogic\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan Extension in YAML\nDESCRIPTION: This YAML configuration snippet shows how to register the custom PHPStan extension in the configuration file. It specifies the class of the extension and tags it as a phpstan.properties.readWriteExtension.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/always-read-written-properties.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\PropertiesExtension\n\t\ttags:\n\t\t\t- phpstan.properties.readWriteExtension\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Extension with Composer\nDESCRIPTION: Commands to install the PHPStan extension installer plugin and a specific extension (beberlei-assert) using Composer\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/extension-library.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpstan/extension-installer && \\\ncomposer require --dev phpstan/phpstan-beberlei-assert\n```\n\n----------------------------------------\n\nTITLE: Using Environment Variables in PHPStan YAML Configuration\nDESCRIPTION: Demonstrates how to reference environment variables in PHPStan configuration. This allows for dynamic configuration based on system settings.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    tmpDir: %env.PHPSTAN_TMP_DIR%\n```\n\n----------------------------------------\n\nTITLE: Implementing CI-Aware Custom Error Formatter in PHP\nDESCRIPTION: This PHP snippet shows how to create a custom error formatter that is aware of CI environments. It uses the CiDetectedErrorFormatter to output special formats when running in supported CI environments.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/error-formatters.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse PHPStan\\Command\\ErrorFormatter\\CiDetectedErrorFormatter;\n\nfinal class MyCustomErrorFormat implements ErrorFormatter\n{\n    public function __construct(\n        private CiDetectedErrorFormatter $ciDetectedErrorFormatter,\n    ) {\n    }\n\n    public function formatErrors(AnalysisResult $analysisResult, Output $output) : int\n    {\n        // Output special CI format when supported CI is detected\n        $this->ciDetectedErrorFormatter->formatErrors($analysisResult, $output);\n\n        // Custom format here...\n\n        return 0;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring External Code Scanning in PHPStan\nDESCRIPTION: YAML configuration for scanning external files and directories that aren't part of Composer dependencies but need to be recognized by PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    scanFiles:\n      - Foo.class.php\n    scanDirectories:\n      - classes\n```\n\n----------------------------------------\n\nTITLE: Implementing ResultCacheMetaExtension Interface in PHP\nDESCRIPTION: Interface definition for custom result cache meta extensions. Requires implementing getKey() to identify the meta entry source and getHash() to represent the current state that determines cache invalidation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/result-cache-meta-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\ninterface ResultCacheMetaExtension\n{\n\t/**\n\t * Returns unique key for this result cache meta entry. This describes the source of the metadata.\n\t */\n\tpublic function getKey(): string;\n\t/**\n\t * Returns hash of the result cache meta entry. This represents the current state of the additional meta source.\n\t */\n\tpublic function getHash(): string;\n}\n```\n\n----------------------------------------\n\nTITLE: Execute PHP Parser Script\nDESCRIPTION: Command to run the PHP script that parses the PHPStan debug log.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/debugging-performance-identify-slow-files.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nphp parse.php\n```\n\n----------------------------------------\n\nTITLE: Installing PHP Extensions in PHPStan Docker Image\nDESCRIPTION: Dockerfile instructions to add PHP extensions (soap and intl) to the PHPStan Docker image.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_7\n\nLANGUAGE: docker\nCODE:\n```\nFROM ghcr.io/phpstan/phpstan:latest\nRUN apk --update --progress --no-cache add icu-dev libxml2-dev \\\n\t&& docker-php-ext-install intl soap\n```\n\n----------------------------------------\n\nTITLE: Combining Generics with Conditional Return Types\nDESCRIPTION: Shows how to use conditional return types with generic type parameters for flexible type handling.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-6-0-with-conditional-return-types.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T of object\n * @param class-string<T> $class\n * @return ($throw is true ? T : T|null)\n */\nfunction getService(string $class, bool $throw = true): ?object\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom TryCatchTypeVisitor for AST Traversal\nDESCRIPTION: This PHP class implements a custom node visitor that sets the tryCatchTypes attribute during AST traversal. It efficiently passes specific information for rules to use without causing memory leaks.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/preprocessing-ast-for-custom-rules.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\Node;\nuse PhpParser\\NodeVisitorAbstract;\n\nfinal class TryCatchTypeVisitor extends NodeVisitorAbstract\n{\n    public const ATTRIBUTE_NAME = 'tryCatchTypes';\n\n    /** @var array<int, array<int, string>|null> */\n    private array $typeStack = [];\n\n    public function beforeTraverse(array $nodes): ?array\n    {\n        $this->typeStack = [];\n        return null;\n    }\n\n    public function enterNode(Node $node): ?Node\n    {\n        if ($node instanceof Node\\Stmt || $node instanceof Node\\Expr\\Match_) {\n            if (count($this->typeStack) > 0) {\n                // set the attribute for each statement\n                // and match expression inside a try-catch block\n                $node->setAttribute(\n                    self::ATTRIBUTE_NAME,\n                    $this->typeStack[count($this->typeStack) - 1],\n                );\n            }\n        }\n\n        if ($node instanceof Node\\FunctionLike) {\n            // we're entering a function boundary (including closures)\n            // the stack needs to be reset - we're not in a try-catch\n            $this->typeStack[] = null;\n        }\n\n        if ($node instanceof Node\\Stmt\\TryCatch) {\n            // we're entering a new try-catch block\n            $types = [];\n\n            // reverse the stack because we're interested in the closest try-catch, not the top-most one\n            foreach (array_reverse($this->typeStack) as $stackTypes) {\n                if ($stackTypes === null) {\n                    // there's a function boundary, we can stop\n                    break;\n                }\n\n                // add information from outer try-catch blocks to this one too\n                foreach ($stackTypes as $type) {\n                    $types[] = $type;\n                }\n            }\n\n            // go through the catch blocks of the current try-catch\n            // and add each caught exception type name\n            foreach ($node->catches as $catch) {\n                foreach ($catch->types as $type) {\n                    $types[] = $type->toString();\n                }\n            }\n\n            $this->typeStack[] = $types;\n        }\n\n        return null;\n    }\n\n    public function leaveNode(Node $node): ?Node\n    {\n        if (\n            !$node instanceof Node\\Stmt\\TryCatch\n            && !$node instanceof Node\\FunctionLike\n        ) {\n            return null;\n        }\n\n        // pop the stack - we're leaving TryCatch and FunctionLike\n        // which are the two node types that are pushing items\n        // to the stack in enterNode()\n        array_pop($this->typeStack);\n\n        return null;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing whole project with PHPStan CLI\nDESCRIPTION: Shows how to run PHPStan to analyze your entire project by simply using the 'vendor/bin/phpstan' command, provided you have proper configuration files set up with 'paths' and 'level' parameters.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/why-you-should-always-analyse-whole-project.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan Extension\nDESCRIPTION: YAML configuration to include a PHPStan extension in the phpstan.neon file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\n\t- /composer/vendor/phpstan/phpstan-phpunit/extension.neon\n```\n\n----------------------------------------\n\nTITLE: Array Type Documentation\nDESCRIPTION: Shows how to document array types with PHPDoc annotations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param User[] $users\n */\nfunction foo(array $users) { ... }\n\n/**\n * @param array<int, User> $users\n */\nfunction foo(array $users) { ... }\n```\n\n----------------------------------------\n\nTITLE: Registering the AlwaysUsedClassConstantsExtension in PHPStan configuration\nDESCRIPTION: This YAML configuration snippet shows how to register your custom AlwaysUsedClassConstantsExtension implementation in the PHPStan configuration file. The extension needs to be registered with the phpstan.constants.alwaysUsedClassConstantsExtension tag.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/always-used-class-constants.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\ConstantsExtension\n\t\ttags:\n\t\t\t- phpstan.constants.alwaysUsedClassConstantsExtension\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Docker Image\nDESCRIPTION: Command to pull the PHPStan Docker image for PHP 8.3 from GitHub Container Registry.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker pull ghcr.io/phpstan/phpstan:2-php8.3\n```\n\n----------------------------------------\n\nTITLE: Updating NodeScopeResolver Method Parameters in PHP\nDESCRIPTION: The 'context' parameter of type StatementContext is now required for the processStmtNodes() method in the NodeScopeResolver class.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\nNodeScopeResolver::processStmtNodes(StatementContext $context)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dynamic Properties Check\nDESCRIPTION: Configuration for enabling strict checking of dynamic properties in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-6-0-with-conditional-return-types.md#2025-04-21_snippet_4\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n    checkDynamicProperties: true\n```\n\n----------------------------------------\n\nTITLE: Pure Expression Usage Examples in PHP\nDESCRIPTION: Examples of pure expressions that must be used and not left standalone, as they have no side effects.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$a + $b;\nnew ClassWithNoConstructor();\n$cb = static function () {\n    return 1 + 1;\n};\n$cb(); // does not do anything\n```\n\n----------------------------------------\n\nTITLE: Checking for Unhandled Match Error in Try-Catch (New Version)\nDESCRIPTION: This updated PHP function checks if an unhandled match error is caught using the new custom tryCatchTypes node attribute. It's more efficient and compatible with PHPStan 1.6.0's Bleeding Edge feature.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/preprocessing-ast-for-custom-rules.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nprivate function isUnhandledMatchErrorCaught(Node $node): bool\n{\n    /** @var string[]|null $tryCatchTypes */\n    $tryCatchTypes = $node->getAttribute(TryCatchTypeVisitor::ATTRIBUTE_NAME); // 'tryCatchTypes'\n    if ($tryCatchTypes === null) {\n        return false;\n    }\n\n    $tryCatchType = TypeCombinator::union(\n        ...array_map(static fn (string $class) =>\n            new ObjectType($class), $tryCatchTypes)\n    );\n\n    return $tryCatchType\n        ->isSuperTypeOf(new ObjectType(UnhandledMatchError::class))->yes();\n}\n```\n\n----------------------------------------\n\nTITLE: Including Baseline in PHPStan Configuration\nDESCRIPTION: NEON configuration showing how to include the baseline file in PHPStan's configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/baseline.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\\n\\t- phpstan-baseline.neon\\n\\nparameters:\\n\\t# your usual configuration options\n```\n\n----------------------------------------\n\nTITLE: Call-Site Variance Collection Interface\nDESCRIPTION: Demonstrates an invariant collection interface designed for call-site variance usage with both add and get methods.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/guide-to-call-site-generic-variance.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @template ItemType */\ninterface Collection\n{\n\t/** @param ItemType $item */\n\tpublic function add(mixed $item): void;\n\n\t/** @return ItemType|null */\n\tpublic function get(int $index): mixed;\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Registration Configuration\nDESCRIPTION: YAML configuration for registering a custom properties extension in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\PropertiesExtension\n\t\ttags:\n\t\t\t- phpstan.properties.readWriteExtension\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Ignoring in PHPStan YAML Configuration\nDESCRIPTION: Shows how to use error identifiers in the PHPStan configuration file to ignore specific errors or all errors of a certain type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: '#Access to an undefined property Foo::\\$[a-zA-Z0-9\\_]#'\n\t\t\tidentifier: property.notFound\n```\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tidentifier: property.notFound\n```\n\n----------------------------------------\n\nTITLE: Demonstrating StringType Usage in PHP\nDESCRIPTION: Example of a PHP function that takes a string input, used to illustrate how developers might use var_dump() to determine the type of an expression in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/why-is-instanceof-type-wrong-and-getting-deprecated.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function doFoo(string $input): void {\n    // yeah, the type of expr in PhpParser\\Node\\Stmt\\Echo_ is PHPStan\\Type\\StringType\n    echo $input;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan Cache Directory in YAML\nDESCRIPTION: Sets up the temporary directory for PHPStan's result cache storage in the configuration file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/result-cache.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\ttmpDir: tmp\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis with Specific Level in Bash\nDESCRIPTION: This command runs PHPStan analysis on the 'src' and 'tests' directories using rule level 6. The level is specified using the '-l' or '--level' option.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/rule-levels.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse -l 6 src tests\n```\n\n----------------------------------------\n\nTITLE: Checking for DateTime Types in PHP\nDESCRIPTION: Example of using isSuperTypeOf() to check if a type is a DateTime or its subclass. This method is more reliable than using instanceof.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/why-is-instanceof-type-wrong-and-getting-deprecated.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// is YES for DateTimeInterface, DateTime, DateTimeImmutable\n$isDateTime = (new ObjectType(DateTimeInterface::class))->isSuperTypeOf($type);\n```\n\n----------------------------------------\n\nTITLE: Implementing Collector Interface in PHP for Trait Declaration Collection\nDESCRIPTION: Example implementation of a Collector that gathers information about trait declarations in the codebase. The collector returns arrays containing trait names and their line numbers for later analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/collectors.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nuse PhpParser\\Node;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Collectors\\Collector;\n\n/**\n * @implements Collector<Node\\Stmt\\Trait_, array{string, int}>\n */\nclass TraitDeclarationCollector implements Collector\n{\n\n\tpublic function getNodeType(): string\n\t{\n\t\treturn Node\\Stmt\\Trait_::class;\n\t}\n\n\tpublic function processNode(Node $node, Scope $scope)\n\t{\n\t\tif ($node->namespacedName === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\t// returns an array with trait name and line - array{string, int}\n\t\treturn [$node->namespacedName->toString(), $node->getLine()];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Error Format in PHPStan Configuration (NEON)\nDESCRIPTION: This snippet shows how to set the error format in the PHPStan configuration file. It demonstrates setting the 'errorFormat' parameter to 'json'.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/output-format.md#2025-04-21_snippet_0\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\terrorFormat: json\n```\n\n----------------------------------------\n\nTITLE: Star Projection Usage Example\nDESCRIPTION: Demonstrates using star projection syntax for cases where the collection's item type is irrelevant.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/guide-to-call-site-generic-variance.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/** @param Collection<*> $collection */\nfunction printSize(Collection $collection): int\n{\n\t$item = $collection->get(0);\n\t// $item is mixed\n}\n```\n\n----------------------------------------\n\nTITLE: Closure Binding Documentation\nDESCRIPTION: Shows how to document closure binding context using @param-closure-this.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-closure-this Bar $cb\n */\nfunction doFoo(Closure $cb)\n{\n\t$cb->bindTo(new Bar());\n\t// ...\n}\n\ndoFoo(function () {\n\t// $this is Bar\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Bleeding Edge Features in PHPStan Configuration\nDESCRIPTION: This snippet shows how to opt in to bleeding edge features in PHPStan by including the bleedingEdge.neon configuration file in your phpstan.neon config file. This allows users to test new features before they're officially released in the next major version.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/what-is-bleeding-edge.md#2025-04-21_snippet_0\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n\t- phar://phpstan.phar/conf/bleedingEdge.neon\n```\n\n----------------------------------------\n\nTITLE: Clearing PHPStan Result Cache via Command Line\nDESCRIPTION: Command to clear the current state of PHPStan's result cache. Useful when developing custom extensions or when the cache becomes stale.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/command-line-usage.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan clear-result-cache [options]\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Processing Parameters in YAML\nDESCRIPTION: Default configuration for PHPStan's parallel processing settings including job size and process limits.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tparallel:\n\t\tjobSize: 20\n\t\tmaximumNumberOfProcesses: 32\n\t\tminimumNumberOfJobsPerProcess: 2\n```\n\n----------------------------------------\n\nTITLE: Generating PHPStan Baseline via CLI\nDESCRIPTION: Command to generate a baseline file containing current PHPStan errors using the command line interface. It analyzes source code at level 7 and generates a baseline file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/baseline.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse --level 7 \\n  --configuration phpstan.neon \\n  src/ tests/ --generate-baseline\n```\n\n----------------------------------------\n\nTITLE: Configuring Path-Specific Error Ignoring in PHPStan YAML\nDESCRIPTION: Demonstrates how to configure PHPStan to ignore specific errors globally or for particular file paths using YAML configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-11.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t- '#Variable property access on PhpParser\\\\Node\\.#'\n\t\t-\n\t\t\tmessage: '#Dynamic call to static method#'\n\t\t\tpath: %rootDir%/src/Foo/Bar.php\n```\n\n----------------------------------------\n\nTITLE: Implementing MethodsClassReflectionExtension Interface in PHP\nDESCRIPTION: Interface definition for creating a methods class reflection extension to handle magic methods from the __call method in PHP classes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/class-reflection-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Reflection;\n\ninterface MethodsClassReflectionExtension\n{\n\n\tpublic function hasMethod(ClassReflection $classReflection, string $methodName): bool;\n\n\tpublic function getMethod(ClassReflection $classReflection, string $methodName): MethodReflection;\n\n}\n```\n\n----------------------------------------\n\nTITLE: PHPStan Bleeding Edge Configuration\nDESCRIPTION: YAML configuration to enable bleeding edge features in PHPStan for detecting unused code elements.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\n\t- vendor/phpstan/phpstan/conf/bleedingEdge.neon\n```\n\n----------------------------------------\n\nTITLE: Variadic Function Documentation\nDESCRIPTION: Shows how to document variadic functions with variable parameters.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_13\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param string $arg\n * @param string ...$additional\n */\nfunction foo($arg, ...$additional)\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Checked Exceptions with @throws Annotation in PHP\nDESCRIPTION: Example of how to declare a method that throws a checked exception using the @throws PHPDoc annotation. This indicates that the exception should be handled by the caller.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/** @throws ProductVariantNotAvailableForUserException */\npublic function addVariantToCart(int $userId, int $variantId): void\n{\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nested Parameter Schema in PHPStan YAML Configuration\nDESCRIPTION: Shows how to define schema for nested array parameters using the 'structure' keyword in nette/schema.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nparametersSchema:\n\tsymfony: structure([\n\t\tcontainer_xml_path: schema(string(), nullable())\n\t\tconstant_hassers: bool()\n\t\tconsole_application_loader: schema(string(), nullable())\n\t])\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Diagnostics via Command Line\nDESCRIPTION: Command to diagnose PHPStan's behavior and output useful information about the current environment and configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/command-line-usage.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan diagnose [options]\n```\n\n----------------------------------------\n\nTITLE: Doctrine Entity Example\nDESCRIPTION: Example of a Doctrine entity where properties are managed by the framework rather than direct assignment.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nuse Doctrine\\ORM\\Mapping as ORM;\n\n/**\n * @ORM\\Entity()\n */\nclass Article\n{\n    /**\n     * @ORM\\Id()\n     * @ORM\\GeneratedValue()\n     * @ORM\\Column(type=\"integer\")\n     *\n     * @var int\n     */\n    private $id;\n\n    public function getId(): int\n    {\n        return $this->id;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: PHPStan Baseline Output Format\nDESCRIPTION: Example of the generated baseline file (phpstan-baseline.neon) showing the YAML structure that tracks ignored errors with their message patterns, occurrence counts, and file paths.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstans-baseline-feature-lets-you-hold-new-code-to-a-higher-standard.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tmessage: \"#^Only numeric types are allowed in pre\\\\-decrement, bool\\\\|float\\\\|int\\\\|string\\\\|null given\\.$#\"\n\t\t\tcount: 1\n\t\t\tpath: src/Analyser/Scope.php\n\t\t-\n\t\t\tmessage: \"#^Anonymous function has an unused use \\\\$container\\\\.$#\"\n\t\t\tcount: 2\n\t\t\tpath: src/Command/CommandHelper.php\n```\n\n----------------------------------------\n\nTITLE: Configuring Unmatched Error Reporting\nDESCRIPTION: Configuration option to disable reporting of unmatched ignored errors in the baseline.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/baseline.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\\n\\treportUnmatchedIgnoredErrors: false\n```\n\n----------------------------------------\n\nTITLE: PHP Script for Parsing PHPStan Debug Log\nDESCRIPTION: PHP script that parses the PHPStan debug log file and sorts files by analysis duration, showing the top 20 slowest files.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/debugging-performance-identify-slow-files.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types=1);\n\n$log = new SplFileObject(\"phpstan.log\");\n\n$logs = [];\n$file = null;\nwhile (!$log->eof()) {\n    $line = trim($log->fgets());\n    if ($line === '') {\n        continue;\n    }\n    if ($file === null) {\n        $file = $line;\n        continue;\n    }\n    if (preg_match('/took (?<seconds>[\\d.]+) s/', $line, $matches) !== 1) {\n        continue;\n    }\n\n    $logs[] = [(float) $matches['seconds'], $file];\n    $file = null;\n}\n\nusort($logs, fn(array $left, array $right) => $right[0] <=> $left[0]);\n$logs = array_slice($logs, 0, 20);\n\necho \"Slowest files\" . PHP_EOL;\nforeach ($logs as $log) {\n    echo sprintf(\"%.2f seconds: %s\", $log[0], $log[1]) . PHP_EOL;\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling Reporting of Unused Ignores in PHPStan Configuration\nDESCRIPTION: Shows how to disable reporting of unused ignore patterns globally or for specific entries in YAML configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\treportUnmatchedIgnoredErrors: false\n\tignoreErrors:\n\t\t- '#This message will not be reported as unmatched#'\n\t\t- '#This message will not be reported as unmatched either#'\n\t\t-\n\t\t\tmessage: '#But this one will be reported#'\n\t\t\treportUnmatched: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Code with Mixed Functions and Side-Effects in PHP\nDESCRIPTION: A code example showing a PHP file that mixes function declarations with side-effects (function calls). This type of file was problematic for earlier versions of PHPStan that relied on runtime reflection.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/zero-config-analysis-with-static-reflection.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction doSomething(): void\n{\n    // ...\n}\n\ndoSomething();\n```\n\n----------------------------------------\n\nTITLE: PHPStan Debug Output Example\nDESCRIPTION: Sample output showing memory consumption and execution time for each analyzed file when running PHPStan with debug options.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/debugging-performance-identify-slow-files.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n/var/www/src/Database/Eloquent/Relations/MorphToMany.php\n--- consumed 6 MB, total 200 MB, took 0.11 s\n/var/www/src/Database/Eloquent/Relations/HasOneThrough.php\n--- consumed 0 B, total 200 MB, took 0.06 s\n/var/www/src/Database/Eloquent/Relations/MorphPivot.php\n--- consumed 0 B, total 200 MB, took 0.06 s\n/var/www/src/Database/Eloquent/Relations/Pivot.php\n--- consumed 2 MB, total 202 MB, took 0.09 s\n/var/www/src/Database/Eloquent/Relations/HasOneOrMany.php\n--- consumed 0 B, total 202 MB, took 0.15 s\n/var/www/src/Database/Eloquent/Relations/BelongsTo.php\n--- consumed 0 B, total 202 MB, took 0.15 s\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan Extension in Docker\nDESCRIPTION: Dockerfile instructions to extend the PHPStan image and add a PHPStan extension using Composer.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: docker\nCODE:\n```\nFROM ghcr.io/phpstan/phpstan:latest\nRUN composer global require phpstan/phpstan-phpunit\n```\n\n----------------------------------------\n\nTITLE: Universal Object Crates Configuration in YAML\nDESCRIPTION: YAML configuration example for specifying universal object crate classes in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-access-to-undefined-property.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tuniversalObjectCratesClasses:\n\t\t- Dibi\\Row\n\t\t- Ratchet\\ConnectionInterface\n```\n\n----------------------------------------\n\nTITLE: Configuring PHP Version in PHPStan Docker\nDESCRIPTION: YAML configuration for specifying the PHP version when running PHPStan in Docker. This allows analysis of codebases written for older PHP versions while running in a PHP 8-based container.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-is-ready-for-php8.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    phpVersion: 70400 # PHP 7.4\n```\n\n----------------------------------------\n\nTITLE: Implementing PropertiesClassReflectionExtension Interface in PHP\nDESCRIPTION: Interface definition for creating a properties class reflection extension to handle magic properties from __get and __set methods in PHP classes.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/class-reflection-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Reflection;\n\ninterface PropertiesClassReflectionExtension\n{\n\n\tpublic function hasProperty(ClassReflection $classReflection, string $propertyName): bool;\n\n\tpublic function getProperty(ClassReflection $classReflection, string $propertyName): PropertyReflection;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Additional Constructors in PHPStan YAML\nDESCRIPTION: Specifies methods to treat as constructors to avoid errors with readonly properties. This is useful for dependency injection or immutable object methods.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tadditionalConstructors:\n\t\t- PHPUnit\\Framework\\TestCase::setUp\n```\n\n----------------------------------------\n\nTITLE: Parser Script Output Example\nDESCRIPTION: Sample output from the parsing script showing the top slowest files analyzed by PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/debugging-performance-identify-slow-files.md#2025-04-21_snippet_4\n\nLANGUAGE: text\nCODE:\n```\nSlowest files\n4.46 seconds: /var/www/src/Collections/LazyCollection.php\n2.71 seconds: /var/www/src/Support/Str.php\n2.56 seconds: /var/www/src/Console/Command.php\n2.45 seconds: /var/www/src/Validation/Validator.php\n2.44 seconds: /var/www/src/Database/Query/Builder.php\n2.41 seconds: /var/www/src/Collections/Collection.php\n2.12 seconds: /var/www/src/Database/Eloquent/Builder.php\n2.10 seconds: /var/www/src/Foundation/Testing/TestCase.php\n2.01 seconds: /var/www/src/Database/Eloquent/Model.php\n...\n```\n\n----------------------------------------\n\nTITLE: Setting PHPStan Pro Temporary Directory in YAML\nDESCRIPTION: Configuration for changing PHPStan Pro's temporary directory location.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tpro:\n\t\ttmpDir: tmp\n```\n\n----------------------------------------\n\nTITLE: Using Type Casting Functions in PHPStan YAML Configuration\nDESCRIPTION: Illustrates the use of special functions for lossless type casting in YAML configuration files.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    parallel:\n        maximumNumberOfProcesses: int(%env.PHPSTAN_CPU%)\n```\n\n----------------------------------------\n\nTITLE: Extension Registration in PHPStan Configuration\nDESCRIPTION: YAML configuration for registering the dynamic throw type extension in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-throw-type-extensions.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\PHPStan\\GetComponentThrowTypeExtension\n\t\ttags:\n\t\t\t- phpstan.dynamicMethodThrowTypeExtension\n```\n\n----------------------------------------\n\nTITLE: Configuring Missing Generic Type Ignores\nDESCRIPTION: NEON configuration example showing how to ignore missing generic type errors in PHPStan 2.0.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tidentifier: missingType.generics\n```\n\n----------------------------------------\n\nTITLE: PHP Token Generation Function Reference\nDESCRIPTION: PHP built-in function reference for token generation used by CodeSniffer for parsing PHP code.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/three-pillars-of-static-analysis-in-php.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntoken_get_all\n```\n\n----------------------------------------\n\nTITLE: Legacy Type Checking in PHPStan\nDESCRIPTION: Illustrates the old method of type checking in PHPStan using instanceof, which is being phased out.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n$type instanceof *Type\n```\n\n----------------------------------------\n\nTITLE: Ignoring Errors in PHPStan Configuration\nDESCRIPTION: Demonstrates how to ignore errors globally or in specific files using the ignoreErrors configuration in YAML.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t- '#Call to an undefined method [a-zA-Z0-9\\_]+::doFoo\\(\\)#'\n\t\t- '#Call to an undefined method [a-zA-Z0-9\\_]+::doBar\\(\\)#'\n```\n\n----------------------------------------\n\nTITLE: Enabling Bleeding Edge Features in PHPStan\nDESCRIPTION: Configuration to enable bleeding edge features in PHPStan, which includes dead catch reporting even for multi-catch statements.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_5\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n\t- vendor/phpstan/phpstan/conf/bleedingEdge.neon\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHPDoc Type Assertions in PHP\nDESCRIPTION: Shows how to use @phpstan-assert annotations to specify type narrowing in custom type checking functions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-9-0-with-phpdoc-asserts-list-type.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\npublic function foo(object $object): void {\n    $this->checkType($object);\n    $object->doSomething(); // No error\n    \\PHPStan\\dumpType($object); // BarService\n}\n\n/** @phpstan-assert BarService $object */\npublic function checkType(object $object): void {\n    if (!$object instanceof BarService) {\n        throw new WrongObjectTypeException();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Tagging a Service in YAML\nDESCRIPTION: Shows how to tag a service in the .neon configuration file. Tags are used to identify different types of extensions in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dependency-injection-configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\MyExtension\n\t\ttags:\n\t\t\t- phpstan.broker.dynamicMethodReturnTypeExtension\n```\n\n----------------------------------------\n\nTITLE: Solution 4: Enforcing constructor signature through an interface in PHP\nDESCRIPTION: Using an interface to define the constructor signature achieves the same effect as an abstract constructor while allowing child classes to inherit the parent implementation if they don't define their own.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-error-unsafe-usage-of-new-static.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ninterface FooInterface\n{\n    public function __construct(int $i);\n}\n\nclass Foo implements FooInterface\n{\n\n    public function __construct(int $i) { ... }\n\n    ...\n```\n\n----------------------------------------\n\nTITLE: Uninitialized Typed Properties Example\nDESCRIPTION: Example demonstrating PHP 7.4's typed properties and initialization requirements.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nclass Foo {\n\n    private int $count;\n\n    public function setCount(int $count): void\n    {\n        $this->count = $count;\n    }\n\n    public function getCount(): int\n    {\n        return $this->count;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bleeding Edge Features in PHPStan\nDESCRIPTION: Configuration example for enabling bleeding edge features in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-6-0-with-conditional-return-types.md#2025-04-21_snippet_3\n\nLANGUAGE: neon\nCODE:\n```\nincludes:\n    - vendor/phpstan/phpstan/conf/bleedingEdge.neon\n```\n\n----------------------------------------\n\nTITLE: Embedding Author's Twitter Tweet in HTML\nDESCRIPTION: This snippet shows how to embed the author's own Twitter tweet using the Twitter widget script and a blockquote element. It includes the tweet content and metadata.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/website-improvement-social-post-preview-image.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<blockquote class=\"twitter-tweet\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">A short tale about how <a href=\"https://twitter.com/VotrubaT?ref_src=twsrc%5Etfw\">@VotrubaT</a>&#39;s tweet inspired me to improve PHPStan&#39;s statically generated website.<a href=\"https://t.co/ivmHJeGCze\">https://t.co/ivmHJeGCze</a></p>&mdash; Ondřej Mirtes (@OndrejMirtes) <a href=\"https://twitter.com/OndrejMirtes/status/1635298779510472705?ref_src=twsrc%5Etfw\">March 13, 2023</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Registering AlwaysUsedMethodExtension in YAML Configuration\nDESCRIPTION: YAML configuration snippet showing how to register the custom AlwaysUsedMethodExtension implementation in PHPStan's service container. The extension must be tagged with 'phpstan.methods.alwaysUsedMethodExtension'.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/always-used-methods.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\MethodsExtension\n\t\ttags:\n\t\t\t- phpstan.methods.alwaysUsedMethodExtension\n```\n\n----------------------------------------\n\nTITLE: Enabling NodeConnectingVisitor in PHPStan Configuration\nDESCRIPTION: This YAML configuration snippet shows how to temporarily enable the NodeConnectingVisitor in PHPStan 1.6.0 with Bleeding Edge, allowing time to rewrite custom rules. This is a forward-compatible solution but goes against memory optimization goals.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/preprocessing-ast-for-custom-rules.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nconditionalTags:\n    PhpParser\\NodeVisitor\\NodeConnectingVisitor:\n        phpstan.parser.richParserNodeVisitor: true\n```\n\n----------------------------------------\n\nTITLE: Property PHPDoc Declaration Example\nDESCRIPTION: Example showing how to declare magic properties using PHPDoc annotations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-access-to-undefined-property.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @property int $foo\n * @property-read string $bar\n * @property-write \\stdClass $baz\n */\nclass Foo { ... }\n```\n\n----------------------------------------\n\nTITLE: Configuring AllowedSubTypesClassReflectionExtension in YAML\nDESCRIPTION: YAML configuration to register the custom AllowedSubTypesClassReflectionExtension in PHPStan's service container. The extension must be tagged with 'phpstan.broker.allowedSubTypesClassReflectionExtension'.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/allowed-subtypes.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\MySubtypesExtension\n\t\ttags:\n\t\t\t- phpstan.broker.allowedSubTypesClassReflectionExtension\n```\n\n----------------------------------------\n\nTITLE: Invalid Collection Usage with Covariant Template\nDESCRIPTION: Example showing why adding elements becomes invalid when using @template-covariant.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/whats-up-with-template-covariant.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @param Collection<Animal> $animals */\nfunction foo(Collection $animals): void\n{\n\t$animals->add(new Dog());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Checked Exceptions in PHPStan Using NEON\nDESCRIPTION: Configuration for marking all exceptions as unchecked by default, with specific exceptions marked as checked. This is the inverse approach to the default behavior.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_2\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\texceptions:\n\t\tcheckedExceptionRegexes:\n\t\t\t- '#^Foo\\\\Bar\\\\#' # Mark exceptions from Foo\\Bar namespace as checked\n\t\tcheckedExceptionClasses:\n\t\t\t- 'RuntimeException' # Mark RuntimeException and child classes as checked\n```\n\n----------------------------------------\n\nTITLE: Implementing a 'Pick' Utility Type in PHP\nDESCRIPTION: Complete implementation of a TypeNodeResolverExtension that creates a 'Pick' utility type for PHPStan. This type extracts specific keys from an array type, similar to TypeScript's Pick utility type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/custom-phpdoc-types.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nnamespace MyApp\\PHPStan;\n\nuse PHPStan\\Analyser\\NameScope;\nuse PHPStan\\PhpDoc\\TypeNodeResolver;\nuse PHPStan\\PhpDoc\\TypeNodeResolverAwareExtension;\nuse PHPStan\\PhpDoc\\TypeNodeResolverExtension;\nuse PHPStan\\PhpDocParser\\Ast\\Type\\GenericTypeNode;\nuse PHPStan\\PhpDocParser\\Ast\\Type\\TypeNode;\nuse PHPStan\\Type\\Constant\\ConstantArrayTypeBuilder;\nuse PHPStan\\Type\\Type;\nuse PHPStan\\Type\\TypeCombinator;\n\nclass MyTypeNodeResolverExtension implements TypeNodeResolverExtension, TypeNodeResolverAwareExtension\n{\n\n\tprivate TypeNodeResolver $typeNodeResolver;\n\n\tpublic function setTypeNodeResolver(TypeNodeResolver $typeNodeResolver): void\n\t{\n\t\t$this->typeNodeResolver = $typeNodeResolver;\n\t}\n\n\tpublic function resolve(TypeNode $typeNode, NameScope $nameScope): ?Type\n\t{\n\t\tif (!$typeNode instanceof GenericTypeNode) {\n\t\t\t// returning null means this extension is not interested in this node\n\t\t\treturn null;\n\t\t}\n\n\t\t$typeName = $typeNode->type;\n\t\tif ($typeName->name !== 'Pick') {\n\t\t\treturn null;\n\t\t}\n\n\t\t$arguments = $typeNode->genericTypes;\n\t\tif (count($arguments) !== 2) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$arrayType = $this->typeNodeResolver->resolve($arguments[0], $nameScope);\n\t\t$keysType = $this->typeNodeResolver->resolve($arguments[1], $nameScope);\n\n\t\t$constantArrays = $arrayType->getConstantArrays();\n\t\tif (count($constantArrays) === 0) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$newTypes = [];\n\t\tforeach ($constantArrays as $constantArray) {\n\t\t\t$newTypeBuilder = ConstantArrayTypeBuilder::createEmpty();\n\t\t\tforeach ($constantArray->getKeyTypes() as $i => $keyType) {\n\t\t\t\tif (!$keysType->isSuperTypeOf($keyType)->yes()) {\n\t\t\t\t\t// eliminate keys that aren't in the Pick type\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$valueType = $constantArray->getValueTypes()[$i];\n\t\t\t\t$newTypeBuilder->setOffsetValueType(\n\t\t\t\t\t$keyType,\n\t\t\t\t\t$valueType,\n\t\t\t\t\t$constantArray->isOptionalKey($i),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$newTypes[] = $newTypeBuilder->getArray();\n\t\t}\n\n\t\treturn TypeCombinator::union(...$newTypes);\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing PHPStan via Composer in PHP Project\nDESCRIPTION: Command to install PHPStan as a development dependency in a PHP project using Composer. This ensures consistent PHPStan versions across all environments.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-reports-different-errors-locally-ci-what-should-i-do.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer require --dev phpstan/phpstan\n```\n\n----------------------------------------\n\nTITLE: PHPUnit Assert Not Null Example\nDESCRIPTION: Example demonstrating type assertion using PHPUnit's assertNotNull method.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-specifying-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// using PHPUnit's asserts\n\nself::assertNotNull($variable);\n// here we can be sure that $variable is not null\n```\n\n----------------------------------------\n\nTITLE: Disabling Symbol Discovery Tips\nDESCRIPTION: YAML configuration to disable the symbol discovery error tip in PHPStan 2.1.12 and above.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    tips:\n        discoveringSymbols: false\n```\n\n----------------------------------------\n\nTITLE: Defining Global Constants for PHPStan\nDESCRIPTION: PHP code example showing how to define global constants that need to be recognized by PHPStan during analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\ndefine('MY_CONSTANT', 1);\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Parameters in YAML\nDESCRIPTION: Demonstrates how to define and use custom parameters for a PHPStan extension in the .neon configuration file.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dependency-injection-configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tmyExtension:\n\t\tmyOwnParameter: true\n\nservices:\n\t-\n\t\t# App\\MyExtension has \"myOwnParameter\" constructor parameter\n\t\tclass: App\\MyExtension\n\t\targuments:\n\t\t\tmyOwnParameter: %myExtension.myOwnParameter%\n```\n\n----------------------------------------\n\nTITLE: Interface Property Declaration with PHPDoc\nDESCRIPTION: Example demonstrating property declaration on interfaces using PHPDoc and require-extends annotation for PHP 8.2+ compatibility.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-access-to-undefined-property.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @property string $bar\n * @phpstan-require-extends Model\n */\ninterface Foo\n{\n}\n\nclass Model\n{\n    public function __get(string $name): mixed\n    {\n        // some magic logic for dynamic properties\n    }\n}\n\nfunction (Foo $foo): void {\n    // OK - No error\n    echo $foo->bar;\n};\n```\n\n----------------------------------------\n\nTITLE: Unreachable Branch Detection in PHP\nDESCRIPTION: Example of how PHPStan detects unreachable code branches in conditional statements.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-11.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif ($alwaysTrue) {\n\t// ...\n} else {\n\t// dead branch - reported on level 4!\n}\n```\n\n----------------------------------------\n\nTITLE: Previous PHPStan Behavior with Reference Parameters in PHP\nDESCRIPTION: This snippet shows how PHPStan previously discarded the type of a variable passed into a parameter by reference, resulting in a 'mixed' type inference.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(string &$p): void\n{\n\t$p = 1;\n}\n\n$v = 'foo';\nfoo($v);\n\\PHPStan\\dumpType($v); // mixed\n```\n\n----------------------------------------\n\nTITLE: PHP Command Line Syntax Check\nDESCRIPTION: Basic PHP syntax check command using the -l flag, referenced as part of the PHP-Parallel-Lint tool explanation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/three-pillars-of-static-analysis-in-php.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nphp -l\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on Single Test File With 'use' Statements\nDESCRIPTION: Demonstrates successful PHPStan analysis on a single test file (ClassATestWithUse.php) that includes 'use' statements to import dependencies. This works without errors.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/e2e/autoloader-require/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ vendor/bin/phpstan analyse tests/ClassATestWithUse.php\nNote: Using configuration file /Volumes/Work/git/phpstan-autoload-error-example/phpstan.neon.\n 1/1 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%\n\n\n\n [OK] No errors\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Node Visitor in PHPStan Configuration\nDESCRIPTION: This YAML configuration snippet shows how to register the custom TryCatchTypeVisitor in PHPStan. This allows the visitor to set the custom 'tryCatchTypes' node attribute during AST traversal.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/preprocessing-ast-for-custom-rules.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n    -\n        # Sets custom 'tryCatchTypes' node attribute\n        class: App\\PHPStan\\TryCatchTypeVisitor\n        tags:\n            - phpstan.parser.richParserNodeVisitor\n```\n\n----------------------------------------\n\nTITLE: Injecting Built-in Parameters in YAML\nDESCRIPTION: Shows how to inject a built-in PHPStan parameter into a service using the arguments section in the .neon configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dependency-injection-configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\t# App\\MyExtension has \"checkUninitializedProperties\" constructor parameter\n\t\tclass: App\\MyExtension\n\t\targuments:\n\t\t\tcheckUninitializedProperties: %checkUninitializedProperties%\n```\n\n----------------------------------------\n\nTITLE: Manual PHPStan Extension Configuration\nDESCRIPTION: YAML configuration showing how to manually include a PHPStan extension without using the extension-installer plugin\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/extension-library.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\n\t- vendor/phpstan/phpstan-beberlei-assert/extension.neon\n```\n\n----------------------------------------\n\nTITLE: Configuring Advanced Path Exclusion in PHPStan\nDESCRIPTION: Extended PHPStan configuration that excludes both analysis and symbol discovery for specific directories using analyseAndScan parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    paths:\n        - src\n    excludePaths:\n        analyse:\n            - src/thirdparty\n        analyseAndScan:\n            - src/broken\n```\n\n----------------------------------------\n\nTITLE: Custom Rule Test Implementation in PHPStan\nDESCRIPTION: Example test case for custom PHPStan rules extending RuleTestCase. Shows how to test rule error reporting with assertions for error messages and line numbers.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/testing.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php declare(strict_types = 1);\n\nnamespace App\\PHPStan;\n\nuse PHPStan\\Testing\\RuleTestCase;\n\n/**\n * @extends RuleTestCase<MyRule>\n */\nclass MyRuleTest extends RuleTestCase\n{\n\n\tprotected function getRule(): \\PHPStan\\Rules\\Rule\n\t{\n\t\t// getRule() method needs to return an instance of the tested rule\n\t\treturn new MyRule();\n\t}\n\n\tpublic function testRule(): void\n\t{\n\t\t// first argument: path to the example file that contains some errors that should be reported by MyRule\n\t\t// second argument: an array of expected errors,\n\t\t// each error consists of the asserted error message, and the asserted error file line\n\t\t$this->analyse([__DIR__ . '/data/my-rule.php'], [\n\t\t\t[\n\t\t\t\t'X should not be Y', // asserted error message\n\t\t\t\t15, // asserted error line\n\t\t\t],\n\t\t]);\n\n\t\t// the test fails, if the expected error does not occur,\n\t\t// or if there are other errors reported beside the expected one\n\t}\n\n\tpublic static function getAdditionalConfigFiles(): array\n\t{\n\t\t// path to your project's phpstan.neon, or extension.neon in case of custom extension packages\n\t\t// this is only necessary if your custom rule relies on some extra configuration and other extensions\n\t\treturn [__DIR__ . '/../extension.neon'];\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Cache Directory for PHPStan\nDESCRIPTION: Demonstrates how to override the default cache directory used by PHPStan for storing its cache files.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\ttmpDir: tmp\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHPStan's Inconsistent Return Value Tracking\nDESCRIPTION: This example shows how PHPStan previously handled remembering the return values of method calls inconsistently across different types of conditionals.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$person = new Person();\n\nif ($person->getName()) {\n    \\PHPStan\\dumpType($person->getName()); // string|null\n}\n\nif ($person->getName() !== null) {\n    \\PHPStan\\dumpType($person->getName()); // string\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Property Name Typo in PHP\nDESCRIPTION: Example showing how to fix a property access error by correcting a typo in the property name from 'nama' to 'name'.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-access-to-undefined-property.md#2025-04-21_snippet_0\n\nLANGUAGE: diff-php\nCODE:\n```\n \tpublic function getName(): string\n \t{\n-\t\treturn $this->nama;\n+\t\treturn $this->name;\n \t}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Template Type Intersection in PHP\nDESCRIPTION: Example showing how a template type can result in an IntersectionType when narrowed down, explaining why instanceof checks can be problematic.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/why-is-instanceof-type-wrong-and-getting-deprecated.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T\n * @param T $b\n * @return T\n */\npublic function sayHello($b)\n{\n    if ($b === true) {\n        // T&true = IntersectionType\n        \\PHPStan\\dumpType($b);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Path Exclusion in PHPStan\nDESCRIPTION: Basic PHPStan configuration that analyzes the src directory while excluding the src/thirdparty directory from analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/ignoring-errors.md#2025-04-21_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    paths:\n        - src\n    excludePaths:\n        analyse:\n            - src/thirdparty\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on Git Diff (Anti-Pattern)\nDESCRIPTION: Example of an incorrect approach to running PHPStan only on changed files. This method is discouraged as it can miss errors in dependent files.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/from-minutes-to-seconds-massive-performance-gains-in-phpstan.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Don't do this!\ngit diff --name-only origin/master..HEAD -- *.php | xargs vendor/bin/phpstan analyse\n```\n\n----------------------------------------\n\nTITLE: Rule Error Builder Implementation\nDESCRIPTION: Example showing how to migrate from returning plain string errors to using RuleErrorBuilder in custom rules.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    RuleErrorBuilder::message('My error')\n        ->identifier('my.error')\n        ->build(),\n];\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on Entire Project\nDESCRIPTION: Demonstrates successful PHPStan analysis on the entire project without errors. This works because PHPStan encounters the dependencies by scanning the 'src/' directory.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/e2e/autoloader-require/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ vendor/bin/phpstan analyse\n\nvendor/bin/phpstan analyse\nNote: Using configuration file /Volumes/Work/git/phpstan-autoload-error-example/phpstan.neon.\n 5/5 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%\n\n\n\n [OK] No errors\n```\n\n----------------------------------------\n\nTITLE: Uninitialized Properties Check Configuration\nDESCRIPTION: YAML configuration to enable checking for uninitialized properties in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    checkUninitializedProperties: true\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan Analysis on Single Test File Without 'use' Statements\nDESCRIPTION: Shows PHPStan failing to analyze a single test file (ClassATest.php) that doesn't use 'use' statements. The error occurs because PHPStan can't find the required file 'ClassA.php'.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/e2e/autoloader-require/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ vendor/bin/phpstan analyse tests/ClassATest.php\nNote: Using configuration file /Volumes/Work/git/phpstan-autoload-error-example/phpstan.neon.\n 1/1 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%\n\n ------ ---------------------------------------------------------------------------------------------------------------\n  Line   ClassATest.php\n ------ ---------------------------------------------------------------------------------------------------------------\n         Internal error: Failed opening required '/Volumes/Work/git/phpstan-autoload-error-example/src/ClassA.php'\n         (include_path='.:/usr/local/Cellar/php/8.0.3/share/php/pear')\n         Run PHPStan with --debug option and post the stack trace to:\n         https://github.com/phpstan/phpstan/issues/new?template=Bug_report.md\n ------ ---------------------------------------------------------------------------------------------------------------\n\n\n [ERROR] Found 1 error\n```\n\n----------------------------------------\n\nTITLE: Updating List Type Handling in PHP\nDESCRIPTION: List type is now enabled for all users. Static methods from AccessoryArrayListType class have been removed. Use TypeCombinator for intersecting types with AccessoryArrayListType.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\nuse PHPStan\\Type\\TypeCombinator;\nuse PHPStan\\Type\\Accessory\\AccessoryArrayListType;\n\n$intersectedType = TypeCombinator::intersect($type, new AccessoryArrayListType());\n```\n\n----------------------------------------\n\nTITLE: Array Type Specification Example\nDESCRIPTION: Shows how to properly specify array types using PHPDoc annotations to resolve the PHPStan error.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param array<int, Item> $items\n */\nfunction foo(array $items): void\n{\n\tforeach ($items as $item) {\n\t\t// $item is Item\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a PHPStan Baseline with CLI Command\nDESCRIPTION: This bash command demonstrates how to generate a baseline file using PHPStan's CLI. It runs analysis at level 7 against source and test directories, generating a baseline of current errors.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstans-baseline-feature-lets-you-hold-new-code-to-a-higher-standard.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse --level 7 \\\n\t--configuration phpstan.neon \\\n\tsrc/ tests/ --generate-baseline\n```\n\n----------------------------------------\n\nTITLE: Reporting Always True Conditions in PHP\nDESCRIPTION: Shows how PHPStan 1.10 changes the reporting of 'always true' conditions, encouraging more precise code without unnecessary checks.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-10-comes-with-lie-detector.md#2025-04-21_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction doFoo(\\Exception $o): void\n{\n\t// not reported\n\tif ($o instanceof \\Exception) {\n\t\t// code inside always executed\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Runtime Type Assertion Example\nDESCRIPTION: Alternative to inline @var using assert() for runtime type checking.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$foo = createFoo();\nassert($foo instanceof Foo);\n```\n\n----------------------------------------\n\nTITLE: Running PHPStan with Custom Configuration File\nDESCRIPTION: Shows how to run PHPStan from the command line while specifying a custom configuration file using the -c option.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse -c phpstan.neon\n```\n\n----------------------------------------\n\nTITLE: Enabling Missing Checked Exception Reporting in PHPStan\nDESCRIPTION: Configuration to enable reporting of missing @throws annotations for checked exceptions in function or method PHPDocs.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/bring-your-exceptions-under-control.md#2025-04-21_snippet_3\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\texceptions:\n\t\tcheck:\n\t\t\tmissingCheckedExceptionInThrows: true\n```\n\n----------------------------------------\n\nTITLE: Non-Empty Array Analysis in PHP\nDESCRIPTION: Shows how PHPStan analyzes non-empty arrays and variable scope in foreach loops when array emptiness is checked.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-11.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (count($array) === 0) {\n\treturn;\n}\n\nforeach ($array as $value) {\n\t$item = $value;\n}\n\necho $item; // no longer reported as an undefined variable!\n```\n\n----------------------------------------\n\nTITLE: Reference Parameter Type Documentation\nDESCRIPTION: Demonstrates using @param-out for parameters passed by reference.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_14\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-out int $i\n */\nfunction foo(mixed &$i): void\n{\n    $i = 5;\n}\n\nfoo($a);\n\\PHPStan\\dumpType($a); // int\n```\n\n----------------------------------------\n\nTITLE: Forgetting Method Return Values after Impure Method Calls\nDESCRIPTION: Shows how calling an impure method on an object causes PHPStan to forget previously remembered method return values for that object.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nif ($person->getName() !== null) {\n    \\PHPStan\\dumpType($person->getName()); // string\n    $person->setName('John Doe');\n    \\PHPStan\\dumpType($person->getName()); // string|null\n}\n```\n\n----------------------------------------\n\nTITLE: Property Extension Interface\nDESCRIPTION: Interface definition for extending PHPStan's property analysis capabilities.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ninterface ReadWritePropertiesExtension {\n\n\tpublic function isAlwaysRead(PropertyReflection $property, string $propertyName): bool;\n\n\tpublic function isAlwaysWritten(PropertyReflection $property, string $propertyName): bool;\n\n\tpublic function isInitialized(PropertyReflection $property, string $propertyName): bool;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PHPStan in Bash\nDESCRIPTION: Shows how to set an environment variable that can be used in PHPStan configuration.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nexport PHPSTAN_TMP_DIR=/home/ondrej/phpstan-temp\n```\n\n----------------------------------------\n\nTITLE: Updating Function and Method Reflection in PHP\nDESCRIPTION: The acceptsNamedArguments() method in FunctionReflection, ExtendedMethodReflection, and CallableParametersAcceptor interfaces now returns TrinaryLogic instead of bool.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_15\n\nLANGUAGE: PHP\nCODE:\n```\npublic function acceptsNamedArguments(): TrinaryLogic\n```\n\n----------------------------------------\n\nTITLE: Callable Type Hint Documentation in PHP\nDESCRIPTION: Example of documenting callable parameter types with PHPDoc to specify input and return types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param callable(int, int): string $cb\n */\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Function Signature Changes in PHP 8.2 Stubs\nDESCRIPTION: This snippet shows how function signatures are updated in PHP 8.2 stubs using special Since and Until attributes for version-specific definitions.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-is-ready-for-php-8-2.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n#[\\Until('8.2')]\nfunction restore_error_handler() : bool\n{\n}\n#[\\Since('8.2')]\nfunction restore_error_handler() : true\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Deprecated Dynamic Properties in PHP 8.2\nDESCRIPTION: This snippet shows how dynamic properties are now deprecated in PHP 8.2, a behavior that PHPStan has always reported as incorrect.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-is-ready-for-php-8-2.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Foo\n{\n\n}\n\n$foo = new Foo();\n$foo->test = 'oh my';\necho $foo->test;\n```\n\n----------------------------------------\n\nTITLE: Custom Autoloader Configuration\nDESCRIPTION: YAML configuration showing how to include custom autoloader files in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    bootstrapFiles:\n        - my_autoloader.php\n```\n\n----------------------------------------\n\nTITLE: Replacing Broker with ReflectionProvider in PHP\nDESCRIPTION: PHPStan\\Broker\\Broker has been removed. Use PHPStan\\Reflection\\ReflectionProvider instead. This affects broker-aware extensions and test cases using createBroker().\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\nuse PHPStan\\Reflection\\ReflectionProvider;\n\nclass CustomExtension\n{\n    public function __construct(ReflectionProvider $reflectionProvider)\n    {\n        // Use $reflectionProvider instead of Broker\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extension Registration in PHPStan Configuration\nDESCRIPTION: YAML configuration for registering the type-specifying extension in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/type-specifying-extensions.md#2025-04-21_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: App\\PHPStan\\AssertNotNullTypeSpecifyingExtension\n\t\ttags:\n\t\t\t- phpstan.typeSpecifier.staticMethodTypeSpecifyingExtension\n```\n\n----------------------------------------\n\nTITLE: HTML Sponsor List for $30+ Tier\nDESCRIPTION: HTML unordered list containing links to $30+ tier sponsors with their GitHub profiles and usernames.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/BACKERS.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n<li><a href=\"https://github.com/martin-georgiev\">Martin Georgiev (martin-georgiev)</a></li>\n<li><a href=\"https://github.com/polylang\">Polylang (polylang)</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Configuring Early Terminating Method Calls in PHPStan\nDESCRIPTION: YAML configuration example showing how to specify early terminating method calls for specific classes in PHPStan. This configuration helps PHPStan understand that certain methods like redirect() stop execution flow.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/solving-undefined-variables.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tearlyTerminatingMethodCalls:\n\t\tNette\\Application\\UI\\Presenter:\n\t\t\t- redirect\n\t\t\t- redirectUrl\n\t\t\t- sendJson\n\t\t\t- sendResponse\n```\n\n----------------------------------------\n\nTITLE: Including Constants File in PHPStan Config\nDESCRIPTION: YAML configuration showing how to include the constants definition file in PHPStan's autoload_files parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/autoloading.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tautoload_files:\n\t\t- constants.php\n```\n\n----------------------------------------\n\nTITLE: Iterator Implementation Example\nDESCRIPTION: Demonstrates how to specify return types for Iterator interface implementation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @return Item */\npublic function current()\n{\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: PHPUnit PHAR Configuration\nDESCRIPTION: YAML configuration for including PHPUnit PHAR file in PHPStan's bootstrap process.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    bootstrapFiles:\n        - tools/phpunit.phar\n```\n\n----------------------------------------\n\nTITLE: Complex Method Usage Detection Example\nDESCRIPTION: Demonstrates a case where static analysis needs to track usage through callbacks and generators.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/detecting-unused-private-properties-methods-constants.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nclass Test {\n\n    public static function foo(): Generator\n    {\n        yield static fn (self $test) => $test->bar();\n    }\n\n    private function bar()\n    {\n    }\n}\n\n$test = new Test();\nforeach ($test->foo() as $callback) {\n    $callback($test);\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting FileTypeMapper in PHPStan Extension Constructor\nDESCRIPTION: This snippet shows how to inject the FileTypeMapper dependency into a PHPStan extension constructor. The FileTypeMapper is used to resolve and parse PHPDoc comments.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/reflection.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nprivate FileTypeMapper $fileTypeMapper;\n\npublic function __construct(FileTypeMapper $fileTypeMapper)\n{\n\tthis->fileTypeMapper = $fileTypeMapper;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Missing Iterable Value Type Ignores\nDESCRIPTION: NEON configuration example showing how to ignore missing iterable value type errors in PHPStan 2.0.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_1\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\tignoreErrors:\n\t\t-\n\t\t\tidentifier: missingType.iterableValue\n```\n\n----------------------------------------\n\nTITLE: Enabling Bleeding Edge Features in PHPStan\nDESCRIPTION: Illustrates how to enable bleeding edge features in PHPStan, which provides a preview of the next major version's rules and behavior.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nincludes:\n\t- phar://phpstan.phar/conf/bleedingEdge.neon\n```\n\n----------------------------------------\n\nTITLE: Excluding Paths from PHPStan Analysis\nDESCRIPTION: Illustrates how to exclude certain paths from PHPStan analysis using the 'excludePaths' parameter, which uses fnmatch() patterns.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\texcludePaths:\n\t\t- tests/*/data/*\n```\n\n----------------------------------------\n\nTITLE: Implementing DynamicMethodThrowTypeExtension Interface in PHP\nDESCRIPTION: Interface definition for creating dynamic throw type extensions in PHPStan. It includes methods for checking if a method is supported and determining throw types from method calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/dynamic-throw-type-extensions.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Type;\n\nuse PhpParser\\Node\\Expr\\MethodCall;\nuse PHPStan\\Analyser\\Scope;\nuse PHPStan\\Reflection\\MethodReflection;\n\ninterface DynamicMethodThrowTypeExtension\n{\n\n\tpublic function isMethodSupported(MethodReflection $methodReflection): bool;\n\n\tpublic function getThrowTypeFromMethodCall(\n\t\tMethodReflection $methodReflection,\n\t\tMethodCall $methodCall,\n\t\tScope $scope\n\t): ?Type;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Incorrect Property Access Example\nDESCRIPTION: Example demonstrating an incorrect property access on an object with undefined type.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-access-to-undefined-property.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// $object is object\necho $object->a;\n```\n\n----------------------------------------\n\nTITLE: Deprecated ConstantStringType Check in PHP\nDESCRIPTION: Example of a deprecated way to check for a constant string type using instanceof ConstantStringType. This approach will be deprecated in PHPStan 1.10.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/why-is-instanceof-type-wrong-and-getting-deprecated.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif (!$type instanceof ConstantStringType) {\n  return [];\n}\n\n// do something with $type->getValue() (which is 'lorem ipsum')\n```\n\n----------------------------------------\n\nTITLE: Updating Type Handling for ConstantArrayType in PHP\nDESCRIPTION: ConstantArrayType no longer extends ArrayType. Type::getArrays() now returns a list of ArrayType or ConstantArrayType. This change affects type checking and comparison operations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\nType::getArrays() // Now returns list<ArrayType|ConstantArrayType>\n```\n\n----------------------------------------\n\nTITLE: PHPStan's Consistent Return Value Tracking with Bleeding Edge Mode\nDESCRIPTION: Shows how PHPStan's behavior becomes consistent when the bleeding edge mode is enabled, remembering values in both conditional check types.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// With PHPStan 0.12.83 + bleeding edge\n\n$person = new Person();\n\nif ($person->getName()) {\n    \\PHPStan\\dumpType($person->getName()); // string\n}\n\nif ($person->getName() !== null) {\n    \\PHPStan\\dumpType($person->getName()); // string\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing PHPStan Result Cache\nDESCRIPTION: Command sequence to clear PHPStan's result cache and run a fresh analysis. Used when you need to bypass the caching mechanism.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/from-minutes-to-seconds-massive-performance-gains-in-phpstan.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan clear-result-cache -c phpstan.neon && \\\nvendor/bin/phpstan analyse -c phpstan.neon -l 8 src/ tests/\n```\n\n----------------------------------------\n\nTITLE: Configuring PHPStan Pro DNS Servers in YAML\nDESCRIPTION: Configuration example for overriding DNS servers used by PHPStan Pro.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tpro:\n\t\tdnsServers:\n\t\t\t- '8.8.8.8'\n```\n\n----------------------------------------\n\nTITLE: PHAR Directory Scanning Configuration\nDESCRIPTION: YAML configuration for scanning PHAR files as directories in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/discovering-symbols.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n    scanDirectories:\n        - phar://%currentWorkingDirectory%/bin/robo.phar\n```\n\n----------------------------------------\n\nTITLE: Detecting Filesystem Caching Issues with is_dir()\nDESCRIPTION: Demonstrates how PHPStan can help identify bugs related to PHP's internal filesystem cache, showing that is_dir() won't re-check the filesystem unless clearstatcache() is called.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nif (is_dir($dir)) {\n    return;\n}\n\n\\PHPStan\\dumpType(is_dir($dir)); // false\n\nclearstatcache();\n\n\\PHPStan\\dumpType(is_dir($dir)); // bool\n\n```\n\n----------------------------------------\n\nTITLE: Using Custom Error Formatter in CLI Command\nDESCRIPTION: This bash snippet shows how to use a custom error formatter when running PHPStan analysis from the command line. It specifies the formatter using the --error-format option.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/error-formatters.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvendor/bin/phpstan analyse -c phpstan.neon \\\n\t-l 4 \\\n\t--error-format awesome \\\n\tsrc tests\n```\n\n----------------------------------------\n\nTITLE: Updating ConstantArrayType Constructor Parameters in PHP\nDESCRIPTION: The 'isList' parameter in the ConstantArrayType constructor now only accepts TrinaryLogic, not bool. The 'nextAutoIndexes' parameter now only accepts a non-empty list of integers.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\nnew ConstantArrayType(TrinaryLogic $isList, array $nextAutoIndexes)\n```\n\n----------------------------------------\n\nTITLE: Magic Method Declarations\nDESCRIPTION: Demonstrates declaring magic methods using @method tags for __call functionality.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/writing-php-code/phpdocs-basics.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @method int computeSum(int $a, int $b)\n * @method void doSomething()\n * @method static int staticMethod()\n * @method int doMagic(int $a, int $b = 123)\n */\nclass Foo { ... }\n```\n\n----------------------------------------\n\nTITLE: Registering IgnoreErrorExtension in PHPStan Configuration YAML\nDESCRIPTION: This YAML snippet shows how to register a custom IgnoreErrorExtension in the PHPStan configuration file. It specifies the class name and tags it as a phpstan.ignoreErrorExtension.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/ignore-error-extensions.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n\t-\n\t\tclass: MyApp\\PHPStan\\ControllerActionReturnTypeIgnoreExtension\n\t\ttags:\n\t\t\t- phpstan.ignoreErrorExtension\n```\n\n----------------------------------------\n\nTITLE: Demonstrating PHP code for AST representation\nDESCRIPTION: This snippet shows a simple PHP code example that will be used to demonstrate AST structure.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/abstract-syntax-tree.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn $this->foo && self::bar();\n```\n\n----------------------------------------\n\nTITLE: Deprecated StringType instanceof Check in PHP\nDESCRIPTION: Example of a deprecated way to check if a type is a string using instanceof StringType. This approach is error-prone and will be deprecated in PHPStan 1.10.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/why-is-instanceof-type-wrong-and-getting-deprecated.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nif (!$type instanceof StringType) {\n  return [];\n}\n\n// ...\n```\n\n----------------------------------------\n\nTITLE: Enforcing @param-out Type for Reference Parameters in PHP\nDESCRIPTION: This example illustrates how PHPStan enforces the type specified in the @param-out tag for parameters passed by reference.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-out string $p\n */\nfunction foo(string &$p): void\n{\n\t// Parameter &$p @param-out type of function foo() expects string, int given.\n\t$p = 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PHPStan Shell Alias\nDESCRIPTION: Bash command to create a shell alias for using PHPStan Docker image conveniently.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nalias phpstan='docker run -v $PWD:/app --rm ghcr.io/phpstan/phpstan'\n```\n\n----------------------------------------\n\nTITLE: Configuring Web Crawler Permissions in robots.txt\nDESCRIPTION: This snippet defines rules for web crawlers, allowing access to most of the site but restricting access to the '/r/' directory. It applies to all user agents.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/robots.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow: /r/\n```\n\n----------------------------------------\n\nTITLE: Specifying Paths for PHPStan Analysis in Configuration\nDESCRIPTION: Shows how to specify the paths to be analyzed by PHPStan in the configuration file, saving keystrokes when running the analysis.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/config-reference.md#2025-04-21_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nparameters:\n\tpaths:\n\t\t- src\n\t\t- tests\n```\n\n----------------------------------------\n\nTITLE: Implementing AlwaysUsedClassConstantsExtension interface in PHP\nDESCRIPTION: This code snippet shows the PHPStan interface that needs to be implemented to mark class constants as always used. The interface requires a single method isAlwaysUsed() which determines whether a given constant should be considered used even if static analysis cannot detect usage.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/always-used-class-constants.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nnamespace PHPStan\\Rules\\Constants;\n\nuse PHPStan\\Reflection\\ConstantReflection;\n\ninterface AlwaysUsedClassConstantsExtension\n{\n\n\tpublic function isAlwaysUsed(ConstantReflection $constant): bool;\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Error Format in NEON Configuration\nDESCRIPTION: This NEON snippet demonstrates how to set the error format in the PHPStan configuration file using the errorFormat parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/error-formatters.md#2025-04-21_snippet_3\n\nLANGUAGE: neon\nCODE:\n```\nparameters:\n\terrorFormat: awesome\n```\n\n----------------------------------------\n\nTITLE: Detecting Mismatched @param-out Type in PHP\nDESCRIPTION: This snippet shows how PHPStan can detect when the @param-out type differs from the input type without reassignment.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/enhancements-in-handling-parameters-passed-by-reference.md#2025-04-21_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-out int $p\n */\nfunction foo(string &$p): void // Parameter &$p @param-out type of function foo() expects int, string given.\n{\n\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Twitter Tweet in HTML\nDESCRIPTION: This snippet demonstrates how to embed a Twitter tweet using the Twitter widget script and a blockquote element. It includes the tweet content and metadata.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/website-improvement-social-post-preview-image.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<blockquote class=\"twitter-tweet\" data-lang=\"en\" data-dnt=\"true\"><p lang=\"en\" dir=\"ltr\">Want to ensure your codebase is rock-solid? 💪 <br><br>Measure your type coverage and improve your code&#39;s reliability! 🚀 <a href=\"https://t.co/d3ZU1bXyek\">https://t.co/d3ZU1bXyek</a></p>&mdash; Tomas Votruba (@VotrubaT) <a href=\"https://twitter.com/VotrubaT/status/1634863819896901638?ref_src=twsrc%5Etfw\">March 12, 2023</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n```\n\n----------------------------------------\n\nTITLE: Adding a Rule Type Declaration to Custom Rule Class\nDESCRIPTION: Example showing how to update a custom rule class with proper type declaration using the @implements annotation. This removes the need for parameter type declarations in the processNode method.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/using-rule-error-builder.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n+/**\n+ * @implements Rule<StaticCall>\n+ */\n class MyRule implements Rule\n {\n \tpublic function getNodeType(): string\n \t{\n \t\treturn StaticCall::class;\n \t}\n\n-\t/**\n-\t * @param StaticCall $node\n-\t * @param Scope $scope\n-\t * @return string[]\n-\t */\n \tpublic function processNode(Node $node, Scope $scope): array\n \t{\n \t\t// ...\n \t}\n```\n\n----------------------------------------\n\nTITLE: Copying PHPStan to Custom Docker Image\nDESCRIPTION: Dockerfile instruction to copy PHPStan from the official image to a custom Docker image.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/user-guide/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: docker\nCODE:\n```\nCOPY --from=ghcr.io/phpstan/phpstan:[TAG] /composer/vendor/phpstan/phpstan/phpstan.phar /app/phpstan.phar\n```\n\n----------------------------------------\n\nTITLE: Basic Array Type Error Example\nDESCRIPTION: Demonstrates the basic scenario where PHPStan reports an error due to unspecified value type in an array parameter.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-no-value-type-specified-in-iterable-type.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction foo(array $items): void\n{\n\tforeach ($items as $item) {\n\t\t// type of $item is unknown here, static analysis can't find any bugs\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Type Acceptance Methods in PHP\nDESCRIPTION: Several methods related to type acceptance now return AcceptsResult or IsSuperTypeOfResult instead of TrinaryLogic or bool.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_16\n\nLANGUAGE: PHP\nCODE:\n```\nType::accepts(): AcceptsResult\n```\n\nLANGUAGE: PHP\nCODE:\n```\nCompoundType::isAcceptedBy(): AcceptsResult\n```\n\nLANGUAGE: PHP\nCODE:\n```\nType::isSuperTypeOf(): IsSuperTypeOfResult\n```\n\nLANGUAGE: PHP\nCODE:\n```\nCompoundType::isSubTypeOf(): IsSuperTypeOfResult\n```\n\nLANGUAGE: PHP\nCODE:\n```\nTemplateType::isValidVariance(): IsSuperTypeOfResult\n```\n\nLANGUAGE: PHP\nCODE:\n```\nRuleLevelHelper::accepts(): RuleLevelHelperAcceptsResult\n```\n\n----------------------------------------\n\nTITLE: Migrating Legacy Ignore Comments in PHP\nDESCRIPTION: Illustrates the difference between old and new ignore comment syntax, which can be automatically updated using PHPStan Pro's migration wizard.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n- // @phpstan-ignore-next-line\n+ // @phpstan-ignore argument.type\n  $this->requireInt($string);\n```\n\n----------------------------------------\n\nTITLE: Problematic Rector Code with Object State Tracking\nDESCRIPTION: Shows code from the Rector codebase where PHPStan loses track of the non-null state of node->stmts after an impure method call, causing type errors.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param ClassMethod $node\n */\npublic function refactor(Node $node): ?Node\n{\n    if ($node->stmts === null) {\n        return null;\n    }\n\n    // $node->stmts cannot be null here\n\n    $classMethodStatementCount = count($node->stmts);\n\n    for ($i = $classMethodStatementCount - 1; $i >= 0; --$i) {\n        // PHPStan reports:\n        // Offset int does not exist on array<PhpParser\\Node\\Stmt>|null.\n        $stmt = $node->stmts[$i];\n        $prevStmt = $node->stmts[$i - 1];\n        if (! $this->isBothMethodCallMatch($stmt, $prevStmt)) {\n            if (count($this->collectedMethodCalls) >= 2) {\n                // this is an impure method\n                // it will reset that $node->stmts isn't null\n                $this->fluentizeCollectedMethodCalls($node);\n            }\n\n            continue;\n        }\n    }\n\n    return $node;\n}\n```\n\n----------------------------------------\n\nTITLE: Foreach Variable Scope Analysis in PHP\nDESCRIPTION: Demonstrates strict rules for variable usage after foreach loops, even when the loop is guaranteed to run.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-0-11.md#2025-04-21_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nforeach ([1, 2, 3] as $value) {\n\t$item = $value;\n}\n\necho $item; // reported in phpstan-strict-rules!\n```\n\n----------------------------------------\n\nTITLE: Implementing ExpressionTypeResolverExtension in PHP\nDESCRIPTION: The scopeClass config parameter has been removed. As a replacement, implement the PHPStan\\Type\\ExpressionTypeResolverExtension interface and register it as a service. This change affects custom scope class implementations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\nuse PHPStan\\Type\\ExpressionTypeResolverExtension;\n\nclass CustomResolver implements ExpressionTypeResolverExtension\n{\n    // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Solution 1: Making the class final in PHP\nDESCRIPTION: One solution to the 'Unsafe usage of new static()' error is to make the class final, preventing inheritance entirely. This solution is appropriate when the class shouldn't be extended in the first place.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-error-unsafe-usage-of-new-static.md#2025-04-21_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfinal class Foo\n{\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Type Comparison Methods in PHP\nDESCRIPTION: Several Type comparison methods now require a PhpVersion argument, including getSmallerType(), getSmallerOrEqualType(), getGreaterType(), getGreaterOrEqualType(), isSmallerThan(), and isSmallerThanOrEqual().\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\nType::getSmallerType(PhpVersion $phpVersion)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nType::getSmallerOrEqualType(PhpVersion $phpVersion)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nType::getGreaterType(PhpVersion $phpVersion)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nType::getGreaterOrEqualType(PhpVersion $phpVersion)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nType::isSmallerThan(PhpVersion $phpVersion)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nType::isSmallerThanOrEqual(PhpVersion $phpVersion)\n```\n\n----------------------------------------\n\nTITLE: Updating CompoundType Comparison Methods in PHP\nDESCRIPTION: The isGreaterThan() and isGreaterThanOrEqual() methods of CompoundType now require a PhpVersion argument.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/UPGRADING.md#2025-04-21_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\nCompoundType::isGreaterThan(PhpVersion $phpVersion)\n```\n\nLANGUAGE: PHP\nCODE:\n```\nCompoundType::isGreaterThanOrEqual(PhpVersion $phpVersion)\n```\n\n----------------------------------------\n\nTITLE: HTML Sponsor List for $100+ Tier\nDESCRIPTION: HTML unordered list containing links to $100+ tier sponsors, including company websites and GitHub profiles with their usernames.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/BACKERS.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ul>\n<li><a href=\"https://packagist.com/\">Private Packagist</a></li>\n<li><a href=\"https://www.startupjobs.cz/startup/shipmonk\">Shipmonk</a></li>\n<li><a href=\"https://www.contentkingapp.com/?ref=php-developer&utm_source=phpstan&utm_medium=referral&utm_campaign=sponsorship\">ContentKing</a></li>\n<li><a href=\"https://www.shopware.com/en/\">Shopware</a></li>\n<li><a href=\"https://www.campoint.net\">campoint AG</a></li>\n</ul>\n```\n\n----------------------------------------\n\nTITLE: Property Hook Type Validation Example in PHP\nDESCRIPTION: Demonstrates type validation behavior in property hooks where set hook parameter type can be wider than the actual property type\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-2-1-support-for-php-8-4-property-hooks-more.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nclass Foo {\n\tpublic int $i {\n\t\tget {\n\t\t\treturn $this->i - 10;\n\t\t}\n\t\tset (int|string $value) {\n\t\t\t$this->i = $value; // string not allowed\n\t\t}\n\t}\n}\n\n$f = new Foo();\n$f->i = rand(0,1) ? '10' : 'foo'; // string allowed\n```\n\n----------------------------------------\n\nTITLE: Rule Registration in PHPStan Configuration\nDESCRIPTION: YAML configuration showing how to register a custom rule in PHPStan.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/rules.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrules:\n\t- App\\MyRule\n```\n\n----------------------------------------\n\nTITLE: Using @phpstan-impure Annotation for Functions with Random Results\nDESCRIPTION: Demonstrates how to mark a function as impure using the @phpstan-impure annotation, which prevents PHPStan from remembering its return value for subsequent calls.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/remembering-and-forgetting-returned-values.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @phpstan-impure */\nfunction impureFunction(): bool\n{\n    return rand(0, 1) === 0 ? true : false;\n}\n\nif (impureFunction()) {\n    \\PHPStan\\dumpType(impureFunction()); // bool\n}\n```\n\n----------------------------------------\n\nTITLE: Testing PHPStan Collectors with Custom Rules\nDESCRIPTION: Example of testing a rule that uses collectors, demonstrating how to override the getCollectors() method to provide necessary collectors for the test case.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/developing-extensions/collectors.md#2025-04-21_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nprotected function getRule(): Rule\n{\n\treturn new NotAnalysedTraitRule();\n}\n\nprotected function getCollectors(): array\n{\n\treturn [\n\t\tnew TraitDeclarationCollector(),\n\t\tnew TraitUseCollector(),\n\t];\n}\n\npublic function testRule(): void\n{\n\t$this->analyse([__DIR__ . '/data/not-analysed-trait.php'], [\n\t\t[\n\t\t\t'Trait NotAnalysedTrait\\Bar is used zero times and is not analysed.',\n\t\t\t10,\n\t\t],\n\t]);\n}\n```\n\n----------------------------------------\n\nTITLE: Covariant Collection Implementation\nDESCRIPTION: Complete implementation of a Collection class using @template-covariant, showing both valid and invalid usage patterns.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/whats-up-with-template-covariant.md#2025-04-21_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template-covariant TItem\n */\nclass Collection\n{\n\n\t/** @var TItem[] */\n\tprivate array $items = [];\n\n\t/** @param TItem $item */\n\tpublic function add($item): void\n\t{\n\t\t// you can pass Collection<Cat> to Collection<Animal>, but you can't have \"TItem\" in parameter position\n\t\t$this->items[] = $item;\n\t}\n\n\t/** @return TItem|null */\n\tpublic function get(int $index)\n\t{\n\t\treturn $this->items[$index] ?? null;\n\t}\n\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Typed Properties in PHP 7.4\nDESCRIPTION: Demonstrates the new typed properties feature in PHP 7.4 with both simple and nullable types. Shows how PHPStan validates class name references and handles combination of PHPDoc with native typehints.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-now-fully-supports-php-7-4.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nprivate string $name;\n\nprivate ?Address $optionalAddress;\n```\n\n----------------------------------------\n\nTITLE: Generic Function Definition with Template Type in PHP\nDESCRIPTION: Example of a generic PHP function using @template annotation to define a type variable T. The function takes an array of type T and returns either T or null. Demonstrates proper PHPDoc template type documentation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/solving-phpstan-error-unable-to-resolve-template-type.md#2025-04-21_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @template T\n * @param T[] $arg\n * @return T|null\n */\nfunction firstOrNull(array $arg)\n{\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using Integer Masks for Function Configuration\nDESCRIPTION: Demonstrates how to use integer masks to configure function behavior with bitwise operations.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-6-0-with-conditional-return-types.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nconst FOO = 1;\nconst BAR = 2;\nconst BAZ = 4;\n\n/** @param int-mask<FOO, BAR, BAZ> $flag */\nfunction test(int $flag): void\n{\n    $isFoo = ($flag & FOO) !== 0;\n    $isBar = ($flag & BAR) !== 0;\n    $isBaz = ($flag & BAZ) !== 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Incompatible Type Declaration Example\nDESCRIPTION: Demonstrates how PHPStan detects incompatible type declarations between PHPDoc and native types, showing error detection capabilities.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-now-fully-supports-php-7-4.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n/** @var Bar */\nprivate Foo $lorem;\n```\n\n----------------------------------------\n\nTITLE: Exception Handling with Property Hooks\nDESCRIPTION: Demonstrates how property access can now throw exceptions with property hooks in PHP 8.4\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-2-1-support-for-php-8-4-property-hooks-more.md#2025-04-21_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ninterface Foo {\n\tpublic int $i { get; }\n}\n\nfunction (Foo $f): void {\n\ttry {\n\t\techo $f->i;\n\t} catch (MyCustomException) { // dead catch on PHP 8.3-, but not on 8.4+\n\t\t\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Closure This Binding Documentation\nDESCRIPTION: Example of documenting closure binding behavior using the @param-closure-this annotation.\nSOURCE: https://github.com/phpstan/phpstan/blob/2.1.x/website/src/_posts/phpstan-1-11-errors-identifiers-phpstan-pro-reboot.md#2025-04-21_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n/**\n * @param-closure-this \\stdClass $cb\n */\nfunction doFoo(callable $cb): void\n{\n    $cb->bindTo(new \\stdClass());\n    // ...\n}\n```"
  }
]