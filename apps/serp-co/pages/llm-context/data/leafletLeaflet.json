[
  {
    "owner": "leaflet",
    "repo": "leaflet",
    "content": "TITLE: Initializing Leaflet Map with OpenStreetMap Tiles in JavaScript\nDESCRIPTION: Creates a Leaflet map instance, sets the view to specific coordinates, and adds OpenStreetMap tiles. It also exports map objects to the global scope for debugging purposes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/example-basic.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer} from 'leaflet';\n\nconst map = new Map('map').setView([51.505, -0.09], 13);\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Installing Leaflet via CDN with Import Maps\nDESCRIPTION: HTML setup for including Leaflet via CDN using import maps, including both the CSS and JavaScript files with integrity checks.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/download.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@{{ site.latest_leaflet_version }}/dist/leaflet.css\" integrity=\"{{site.integrity_hash_css}}\" crossorigin=\"anonymous\" />\n\n<script type=\"importmap\">\n{\n\t\"imports\": {\n\t\t\"leaflet\": \"https://unpkg.com/leaflet@{{ site.latest_leaflet_version }}/dist/leaflet.js\"\n\t},\n\t\"integrity\": {\n\t\t\"https://unpkg.com/leaflet@{{ site.latest_leaflet_version }}/dist/leaflet.js\": \"{{site.integrity_hash_uglified}}\"\n\t}\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating Leaflet Map Container in HTML\nDESCRIPTION: Defines a div element to contain the Leaflet map, setting its width and height.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/example-basic.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div id='map' style='width: 600px; height: 400px;'></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Icons\nDESCRIPTION: This code initializes a Leaflet map centered on London, adds a tile layer, creates custom leaf-shaped icons, and places markers with these icons on the map. It demonstrates how to extend the Icon class and create multiple icon variants.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons/example.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, Icon} from 'leaflet';\nconst map = new Map('map').setView([51.5, -0.09], 13);\n\nnew TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(map);\n\nconst LeafIcon = Icon.extend({\n\toptions: {\n\t\tshadowUrl: 'leaf-shadow.png',\n\t\ticonSize:     [38, 95],\n\t\tshadowSize:   [50, 64],\n\t\ticonAnchor:   [22, 94],\n\t\tshadowAnchor: [4, 62],\n\t\tpopupAnchor:  [-3, -76]\n\t}\n});\n\nconst greenIcon = new LeafIcon({iconUrl: 'leaf-green.png'});\nconst redIcon = new LeafIcon({iconUrl: 'leaf-red.png'});\nconst orangeIcon = new LeafIcon({iconUrl: 'leaf-orange.png'});\n\nconst mGreen = new Marker([51.5, -0.09], {icon: greenIcon}).bindPopup('I am a green leaf.').addTo(map);\nconst mRed = new Marker([51.495, -0.083], {icon: redIcon}).bindPopup('I am a red leaf.').addTo(map);\nconst mOrange = new Marker([51.49, -0.1], {icon: orangeIcon}).bindPopup('I am an orange leaf.').addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Leaflet Map Initialization and Feature Implementation\nDESCRIPTION: Initializes a Leaflet map with OpenStreetMap tiles and demonstrates various map features including markers, circles, polygons, and interactive popups. Includes click event handling and debugging exports.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/example.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, Circle, Polygon, Popup} from 'leaflet';\n\n\tconst map = new Map('map').setView([51.505, -0.09], 13);\n\n\tconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\t\tmaxZoom: 19,\n\t\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t}).addTo(map);\n\n\tconst marker = new Marker([51.5, -0.09]).addTo(map)\n\t\t.bindPopup('<b>Hello world!</b><br />I am a popup.').openPopup();\n\n\tconst circle = new Circle([51.508, -0.11], {\n\t\tcolor: 'red',\n\t\tfillColor: '#f03',\n\t\tfillOpacity: 0.5,\n\t\tradius: 500\n\t}).addTo(map).bindPopup('I am a circle.');\n\n\tconst polygon = new Polygon([\n\t\t[51.509, -0.08],\n\t\t[51.503, -0.06],\n\t\t[51.51, -0.047]\n\t]).addTo(map).bindPopup('I am a polygon.');\n\n\n\tconst popup = new Popup()\n\t\t.setLatLng([51.513, -0.09])\n\t\t.setContent('I am a standalone popup.')\n\t\t.openOn(map);\n\n\tfunction onMapClick(e) {\n\t\tpopup\n\t\t\t.setLatLng(e.latlng)\n\t\t\t.setContent(`You clicked the map at ${e.latlng.toString()}`)\n\t\t\t.openOn(map);\n\t}\n\n\tmap.on('click', onMapClick);\n\n\tglobalThis.L = L; // only for debugging in the developer console\n\tglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Handling Map Click Events in Leaflet\nDESCRIPTION: Shows how to listen for map click events and display the clicked coordinates in a popup.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new Popup();\n\nfunction onMapClick(e) {\n\tpopup\n\t\t.setLatLng(e.latlng)\n\t\t.setContent(\"You clicked the map at \" + e.latlng.toString())\n\t\t.openOn(map);\n}\n\nmap.on('click', onMapClick);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom GridLayer for Debugging Tile Coordinates in JavaScript\nDESCRIPTION: Shows how to create a custom GridLayer that displays tile coordinates for debugging purposes. It overrides createTile() to generate div elements with coordinate information.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-2-layers.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nGridLayer.DebugCoords = GridLayer.extend({\n\tcreateTile(coords) {\n\t\tconst tile = document.createElement('div');\n\t\ttile.innerHTML = [coords.x, coords.y, coords.z].join(', ');\n\t\ttile.style.outline = '1px solid red';\n\t\treturn tile;\n\t}\n});\n\nmap.addLayer(new GridLayer.DebugCoords() );\n```\n\n----------------------------------------\n\nTITLE: Basic Leaflet Map Initialization\nDESCRIPTION: Initialize a basic Leaflet map with OpenStreetMap tiles and add GeoJSON state data.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map').setView([37.8, -96], 4);\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nnew GeoJSON(statesData).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Adding Marker, Circle, and Polygon to Leaflet Map\nDESCRIPTION: Demonstrates how to add a marker, circle, and polygon to the Leaflet map with custom styling options.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst marker = new Marker([51.5, -0.09]).addTo(map);\n\nconst circle = new Circle([51.508, -0.11], {\n\tcolor: 'red',\n\tfillColor: '#f03',\n\tfillOpacity: 0.5,\n\tradius: 500\n}).addTo(map);\n\nconst polygon = new Polygon([\n\t[51.509, -0.08],\n\t[51.503, -0.06],\n\t[51.51, -0.047]\n]).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Adding Layers with Custom Pane in Leaflet\nDESCRIPTION: This code demonstrates how to add tile layers to a Leaflet map, including a label layer using a custom pane. It also shows how to add a GeoJSON layer and set up popups for each feature.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/map-panes/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png', {\n    attribution: '©OpenStreetMap, ©CartoDB'\n}).addTo(map);\n\nconst positronLabels = new TileLayer('https://{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}.png', {\n    attribution: '©OpenStreetMap, ©CartoDB',\n    pane: 'labels'\n}).addTo(map);\n\nconst geojson = new GeoJSON(GeoJsonData, geoJsonOptions).addTo(map);\n\ngeojson.eachLayer(layer => layer.bindPopup(layer.feature.properties.name));\n\nmap.fitBounds(geojson.getBounds());\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with GeoJSON Layers\nDESCRIPTION: Creates a Leaflet map instance and configures multiple GeoJSON layers with custom styling, markers, and interactive features. Includes functionality for bicycle rental locations, campus areas, free bus routes, and a baseball field marker.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson/example.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, Icon, GeoJSON, CircleMarker} from 'leaflet';\n\nconst map = new Map('map').setView([39.74739, -105], 13);\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst baseballIcon = new Icon({\n\ticonUrl: 'baseball-marker.png',\n\ticonSize: [32, 37],\n\ticonAnchor: [16, 37],\n\tpopupAnchor: [0, -28]\n});\n\nfunction onEachFeature(feature, layer) {\n\tlet popupContent = `<p>I started out as a GeoJSON ${feature.geometry.type}, but now I'm a Leaflet vector!</p>`;\n\n\tif (feature.properties && feature.properties.popupContent) {\n\t\tpopupContent += feature.properties.popupContent;\n\t}\n\n\tlayer.bindPopup(popupContent);\n}\n\nconst bicycleRentalLayer = new GeoJSON([bicycleRental, campus], {\n\tstyle(feature) {\n\t\treturn feature.properties && feature.properties.style;\n\t},\n\tonEachFeature,\n\tpointToLayer(feature, latlng) {\n\t\treturn new CircleMarker(latlng, {\n\t\t\tradius: 8,\n\t\t\tfillColor: '#ff7800',\n\t\t\tcolor: '#000',\n\t\t\tweight: 1,\n\t\t\topacity: 1,\n\t\t\tfillOpacity: 0.8\n\t\t});\n\t}\n}).addTo(map);\n\nconst freeBusLayer = new GeoJSON(freeBus, {\n\tfilter(feature, layer) {\n\t\tif (feature.properties) {\n\t\t\treturn feature.properties.underConstruction !== undefined ? !feature.properties.underConstruction : true;\n\t\t}\n\t\treturn false;\n\t},\n\tonEachFeature\n}).addTo(map);\n\nconst coorsLayer = new GeoJSON(coorsField, {\n\tpointToLayer(feature, latlng) {\n\t\treturn new Marker(latlng, {icon: baseballIcon});\n\t},\n\tonEachFeature\n}).addTo(map);\n\nglobalThis.L = L;\nglobalThis.map = map;\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Overlay with Controls in Leaflet Map\nDESCRIPTION: Creates a Leaflet map with a video overlay and custom play/pause controls. The video is positioned using geographical bounds, includes fallback sources, and features custom control buttons for playback manipulation. Includes error handling and video configuration options like autoplay and muting.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/example-video.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, LatLngBounds, VideoOverlay, Control, DomUtil, DomEvent} from 'leaflet';\n\nconst map = new Map('map');\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst videoUrls = [\n\t'https://www.mapbox.com/bites/00188/patricia_nasa.webm',\n\t'https://www.mapbox.com/bites/00188/patricia_nasa.mp4'\n];\nconst errorOverlayUrl = 'https://cdn-icons-png.flaticon.com/512/110/110686.png';\nconst bounds = new LatLngBounds([[32, -130], [13, -100]]);\n\nmap.fitBounds(bounds);\n\nconst videoOverlay = new VideoOverlay(videoUrls, bounds, {\n\topacity: 0.8,\n\terrorOverlayUrl,\n\tinteractive: true,\n\tautoplay: true,\n\tmuted: true,\n\tplaysInline: true\n}).addTo(map);\n\nvideoOverlay.on('load', () => {\n\tconst MyPauseControl = Control.extend({\n\t\tonAdd() {\n\t\t\tconst button = DomUtil.create('button');\n\t\t\tbutton.title = 'Pause';\n\t\t\tbutton.innerHTML = '<span aria-hidden=\"true\">⏸</span>';\n\t\t\tDomEvent.on(button, 'click', () => {\n\t\t\t\tvideoOverlay.getElement().pause();\n\t\t\t});\n\t\t\treturn button;\n\t\t}\n\t});\n\tconst MyPlayControl = Control.extend({\n\t\tonAdd() {\n\t\t\tconst button = DomUtil.create('button');\n\t\t\tbutton.title = 'Play';\n\t\t\tbutton.innerHTML = '<span aria-hidden=\"true\">▶️</span>';\n\t\t\tL.DomEvent.on(button, 'click', () => {\n\t\t\t\tvideoOverlay.getElement().play();\n\t\t\t});\n\t\t\treturn button;\n\t\t}\n\t});\n\n\tconst pauseControl = (new MyPauseControl()).addTo(map);\n\tconst playControl = (new MyPlayControl()).addTo(map);\n});\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Creating Standalone Popup in Leaflet\nDESCRIPTION: Demonstrates how to create a standalone popup and add it to the map at a specific location.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst popup = new Popup()\n\t.setLatLng([51.513, -0.09])\n\t.setContent(\"I am a standalone popup.\")\n\t.openOn(map);\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Layer Control\nDESCRIPTION: This snippet sets up a Leaflet map with multiple base layers (OpenStreetMap, OpenStreetMap HOT, OpenTopoMap) and overlay layers (Cities, Parks). It also creates a layer control to allow switching between these layers.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/example.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, LayerGroup, Control} from 'leaflet';\nconst cities = new LayerGroup();\nconst mLittleton = new Marker([39.61, -105.02]).bindPopup('This is Littleton, CO.').addTo(cities);\nconst mDenver = new Marker([39.74, -104.99]).bindPopup('This is Denver, CO.').addTo(cities);\nconst mAurora = new Marker([39.73, -104.8]).bindPopup('This is Aurora, CO.').addTo(cities);\nconst mGolden = new Marker([39.77, -105.23]).bindPopup('This is Golden, CO.').addTo(cities);\nconst osm = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n});\n\nconst osmHOT = new TileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Tiles style by <a href=\"https://www.hotosm.org/\" target=\"_blank\">Humanitarian OpenStreetMap Team</a> hosted by <a href=\"https://openstreetmap.fr/\" target=\"_blank\">OpenStreetMap France</a>'\n});\n\nconst map = new Map('map', {\n\tcenter: [39.73, -104.99],\n\tzoom: 10,\n\tlayers: [osm, cities]\n});\n\nconst baseLayers = {\n\t'OpenStreetMap': osm,\n\t'OpenStreetMap.HOT': osmHOT\n};\n\nconst overlays = {\n\t'Cities': cities\n};\n\nconst layerControl = new Control.Layers(baseLayers, overlays).addTo(map);\n\nconst crownHill = new Marker([39.75, -105.09]).bindPopup('This is Crown Hill Park.');\nconst rubyHill = new Marker([39.68, -105.00]).bindPopup('This is Ruby Hill Park.');\n\nconst parks = new LayerGroup([crownHill, rubyHill]);\n\nconst openTopoMap = new TileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: 'Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n});\nlayerControl.addBaseLayer(openTopoMap, 'OpenTopoMap');\nlayerControl.addOverlay(parks, 'Parks');\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Styling GeoJSON Features in Leaflet\nDESCRIPTION: Examples of styling GeoJSON features using both static styles and dynamic styling based on feature properties.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst myLines = [{\n\t\"type\": \"LineString\",\n\t\"coordinates\": [[-100, 40], [-105, 45], [-110, 55]]\n}, {\n\t\"type\": \"LineString\",\n\t\"coordinates\": [[-105, 40], [-110, 45], [-115, 55]]\n}];\n\nconst myStyle = {\n\t\"color\": \"#ff7800\",\n\t\"weight\": 5,\n\t\"opacity\": 0.65\n};\n\nnew GeoJSON(myLines, {\n\tstyle: myStyle\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with CRS.Simple\nDESCRIPTION: Sets up a Leaflet map using the CRS.Simple coordinate system, which is ideal for non-geographic maps. It imports necessary Leaflet components, creates a map instance, adds an image overlay, and places a marker.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple-example2.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, CRS, ImageOverlay, LatLng, Marker} from 'leaflet';\n\nconst map = new Map('map', {\n\tcrs: CRS.Simple,\n\tminZoom: -3\n});\n\nconst bounds = [[-26.5, -25], [1021.5, 1023]];\nconst image = new ImageOverlay('uqm_map_full.png', bounds).addTo(map);\n\nconst sol = new LatLng([145, 175]);\nconst marker = new Marker(sol).addTo(map);\n\nmap.setView([70, 120], 1);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Map View Control Methods\nDESCRIPTION: Enhanced map view control methods with options object support for precise zoom/pan control and animation management.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nmap.setView(center, zoom, options)\nmap.panTo(latlng, options)\nmap.setZoom(zoom, options)\nmap.fitBounds(bounds, {padding: [x, y]})\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map and Adding Features in JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize a Leaflet map, add a tile layer, create various map features like polygons, markers, and rectangles, and bind popups to these features. It also shows how to enable editing for a polygon and add a scale control to the map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar map = L.map('map').setView([51.503, -0.09], 13);\n\nL.tileLayer(MB_URL, {attribution: MB_ATTR, id: 'examples.map-i875mjb7'}).addTo(map);\n\nvar polygon = L.polygon([\n\t[51.509, -0.08],\n\t[51.503, -0.06],\n\t[51.51, -0.047]\n], {color: 'red'}).addTo(map).bindPopup('I am an editable polygon.');\n\npolygon.editing.enable();\n\nL.control.scale().addTo(map);\n\nL.marker([51.5, -0.095]).addTo(map)\n\t.bindPopup(\"<b>Hello world!</b><br />I am a popup.\").openPopup();\n\nL.marker([51.505, -0.115]).addTo(map).bindPopup(\"I am a second popup.\");\nL.marker([51.496, -0.13]).addTo(map).bindPopup(\"I am a third popup.\");\n\nL.rectangle([\n\t[51.505, -0.03],\n\t[51.5, -0.045]\n], {weight: 1, opacity: 0.8}).addTo(map).bindPopup('I am a rectangle.');\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with WMS Layer\nDESCRIPTION: This snippet creates a Leaflet map centered on specific coordinates and adds a WMS layer from the mundialis service. It uses ES6 module imports for Leaflet components and sets up global variables for debugging.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms-example2.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, CRS, TileLayer} from 'leaflet';\n\nconst map = new Map('map', {\n\tcenter: [-17, -67],\n\tzoom: 3\n});\n\nconst wmsLayer = new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\tlayers: 'SRTM30-Colored-Hillshade'\n}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map and Adding Tile Layer\nDESCRIPTION: Creates a new Leaflet map instance, sets its view to London, and adds an OpenStreetMap tile layer.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n<script type=\"module\">\n\timport {Map, TileLayer, Marker, Circle, Polygon, Popup} from 'leaflet';\n\tconst map = new Map('map').setView([51.505, -0.09], 13);\n\n\tnew TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\t\tmaxZoom: 19,\n\t\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t}).addTo(map);\n\n\t// ...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Zoom and Controls\nDESCRIPTION: This snippet creates a Leaflet map with restricted zoom levels and disabled dragging. It adds a CARTO basemap layer and a scale control. The map view alternates between two locations using setInterval.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-scale.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, Control} from 'leaflet';\n\nconst map = new Map('map', {\n\tminZoom: 1,\n\tmaxZoom: 1,\n\tdragging: false\n});\n\nconst cartodbAttribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>';\n\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n\tattribution: cartodbAttribution\n}).addTo(map);\n\nconst scaleControl = new Control.Scale({maxWidth: 150}).addTo(map);\n\nsetInterval(() => {\n\tmap.setView([0, 0], 0, {duration: 1, animate: true});\n\tsetTimeout(() => {\n\t\tmap.setView([60, 0], 0, {duration: 1, animate: true});\n\t}, 2000);\n}, 4000);\n\nmap.setView([0, 0], 0);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Creating Interactive Choropleth Map with Leaflet\nDESCRIPTION: This JavaScript code creates an interactive choropleth map using Leaflet. It sets up the map, adds a tile layer, creates info and legend controls, and defines functions for styling, highlighting, and interacting with map features based on US population density data.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, Control, DomUtil, GeoJSON} from 'leaflet';\n\n\tconst map = new Map('map').setView([37.8, -96], 4);\n\n\tconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\t\tmaxZoom: 19,\n\t\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t}).addTo(map);\n\n\t// control that shows state info on hover\n\tconst info = new Control();\n\n\tinfo.onAdd = function (map) {\n\t\tthis._div = DomUtil.create('div', 'info');\n\t\tthis.update();\n\t\treturn this._div;\n\t};\n\n\tinfo.update = function (props) {\n\t\tconst contents = props ? `<b>${props.name}</b><br />${props.density} people / mi<sup>2</sup>` : 'Hover over a state';\n\t\tthis._div.innerHTML = `<h4>US Population Density</h4>${contents}`;\n\t};\n\n\tinfo.addTo(map);\n\n\n\t// get color depending on population density value\n\tfunction getColor(d) {\n\t\treturn d > 1000 ? '#800026' :\n\t\t\td > 500  ? '#BD0026' :\n\t\t\td > 200  ? '#E31A1C' :\n\t\t\td > 100  ? '#FC4E2A' :\n\t\t\td > 50   ? '#FD8D3C' :\n\t\t\td > 20   ? '#FEB24C' :\n\t\t\td > 10   ? '#FED976' : '#FFEDA0';\n\t}\n\n\tfunction style(feature) {\n\t\treturn {\n\t\t\tweight: 2,\n\t\t\topacity: 1,\n\t\t\tcolor: 'white',\n\t\t\tdashArray: '3',\n\t\t\tfillOpacity: 0.7,\n\t\t\tfillColor: getColor(feature.properties.density)\n\t\t};\n\t}\n\n\tfunction highlightFeature(e) {\n\t\tconst layer = e.target;\n\n\t\tlayer.setStyle({\n\t\t\tweight: 5,\n\t\t\tcolor: '#666',\n\t\t\tdashArray: '',\n\t\t\tfillOpacity: 0.7\n\t\t});\n\n\t\tlayer.bringToFront();\n\n\t\tinfo.update(layer.feature.properties);\n\t}\n\n\t/* global statesData */\n\tconst geojson = new GeoJSON(statesData, {\n\t\tstyle,\n\t\tonEachFeature\n\t}).addTo(map);\n\n\tfunction resetHighlight(e) {\n\t\tgeojson.resetStyle(e.target);\n\t\tinfo.update();\n\t}\n\n\tfunction zoomToFeature(e) {\n\t\tmap.fitBounds(e.target.getBounds());\n\t}\n\n\tfunction onEachFeature(feature, layer) {\n\t\tlayer.on({\n\t\t\tmouseover: highlightFeature,\n\t\t\tmouseout: resetHighlight,\n\t\t\tclick: zoomToFeature\n\t\t});\n\t}\n\n\tmap.attributionControl.addAttribution('Population data &copy; <a href=\"http://census.gov/\">US Census Bureau</a>');\n\n\n\tconst legend = new Control({position: 'bottomright'});\n\n\tlegend.onAdd = function (map) {\n\n\t\tconst div = DomUtil.create('div', 'info legend');\n\t\tconst grades = [0, 10, 20, 50, 100, 200, 500, 1000];\n\t\tconst labels = [];\n\t\tlet from, to;\n\n\t\tfor (let i = 0; i < grades.length; i++) {\n\t\t\tfrom = grades[i];\n\t\t\tto = grades[i + 1];\n\n\t\t\tlabels.push(`<i style=\"background:${getColor(from + 1)}\"></i> ${from}${to ? `&ndash;${to}` : '+'}`);\n\t\t}\n\n\t\tdiv.innerHTML = labels.join('<br>');\n\t\treturn div;\n\t};\n\n\tlegend.addTo(map);\n\n\tglobalThis.L = L; // only for debugging in the developer console\n\tglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Markers with Custom Icons to Leaflet Map\nDESCRIPTION: Creates three markers with different custom icons, adds them to the map at specified coordinates, and binds a popup to each marker with a custom message.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nnew Marker([51.5, -0.09], {icon: greenIcon}).addTo(map).bindPopup(\"I am a green leaf.\");\nnew Marker([51.495, -0.083], {icon: redIcon}).addTo(map).bindPopup(\"I am a red leaf.\");\nnew Marker([51.49, -0.1], {icon: orangeIcon}).addTo(map).bindPopup(\"I am an orange leaf.\");\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with US States GeoJSON Data\nDESCRIPTION: This snippet sets up a Leaflet map centered on the US, adds an OpenStreetMap tile layer, and overlays GeoJSON data for US states. It also exposes the Leaflet library and map object globally for debugging purposes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example-basic.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, GeoJSON} from 'leaflet';\n\nconst map = new Map('map').setView([37.8, -96], 4);\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\n/* global statesData */\nconst geojson = new GeoJSON(statesData).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Configuring Layer Control Objects in Leaflet\nDESCRIPTION: Defines base maps and overlay maps objects for the layers control.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseMaps = {\n\t\"OpenStreetMap\": osm,\n\t\"OpenStreetMap.HOT\": osmHOT\n};\n\nconst overlayMaps = {\n\t\"Cities\": cities\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Zoom and Tile Layer\nDESCRIPTION: This snippet creates a Leaflet map with custom zoom settings, adds a CARTO Positron tile layer, and sets the initial view. It also exposes the Leaflet object and map instance globally for debugging.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-zero.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer} from 'leaflet';\n\nconst map = new Map('map', {\n\tminZoom: 0,\n\tmaxZoom: 0\n});\n\nconst cartodbAttribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>';\n\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n\tattribution: cartodbAttribution\n}).addTo(map);\n\nmap.setView([0, 0], 0);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Implementing Image Overlay in Leaflet Map\nDESCRIPTION: Creates a Leaflet map with an OpenStreetMap base layer and adds a historical image overlay of Newark from 1922. Includes error handling with a fallback image, proper attribution, interactive controls, and visible bounds rectangle.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/example-image.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, LatLngBounds, ImageOverlay, Rectangle} from 'leaflet';\n\n\tconst map = new Map('map').setView([37.8, -96], 4);\n\n\tconst osm = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\t\tmaxZoom: 19,\n\t\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t}).addTo(map);\n\n\tconst imageUrl = 'https://maps.lib.utexas.edu/maps/historical/newark_nj_1922.jpg';\n\tconst errorOverlayUrl = 'https://cdn-icons-png.flaticon.com/512/110/110686.png';\n\tconst altText = 'Image of Newark, N.J. in 1922. Source: The University of Texas at Austin, UT Libraries Map Collection.';\n\tconst latLngBounds = new LatLngBounds([[40.799311, -74.118464], [40.68202047785919, -74.33]]);\n\n\tconst imageOverlay = new ImageOverlay(imageUrl, latLngBounds, {\n\t\topacity: 0.8,\n\t\terrorOverlayUrl,\n\t\talt: altText,\n\t\tinteractive: true\n\t}).addTo(map);\n\n\tnew Rectangle(latLngBounds).addTo(map);\n\tmap.fitBounds(latLngBounds);\n\n\tglobalThis.L = L; // only for debugging in the developer console\n\tglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: GeoJSON Style Configuration\nDESCRIPTION: Style function for GeoJSON layer defining appearance properties including fill color, weight, and opacity.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction style(feature) {\n\treturn {\n\t\tfillColor: getColor(feature.properties.density),\n\t\tweight: 2,\n\t\topacity: 1,\n\t\tcolor: 'white',\n\t\tdashArray: '3',\n\t\tfillOpacity: 0.7\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Map Container in HTML\nDESCRIPTION: Adds a div element with a specific id to serve as the container for the Leaflet map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div id=\"map\"></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with WMS Layer\nDESCRIPTION: This snippet creates a Leaflet map centered on specific coordinates and adds a WMS layer from a mundialis service. It also makes the Leaflet object and map instance globally accessible for debugging.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms-example1.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, CRS, TileLayer} from 'leaflet';\n\nconst map = new Map('map', {\n\tcenter: [-17, -67],\n\tzoom: 3\n});\n\nconst wmsLayer = new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\tlayers: 'TOPO-OSM-WMS'\n}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Zoom Controls\nDESCRIPTION: Creates a Leaflet map with disabled zoom snapping (zoomSnap: 0) and custom zoom delta increments of 0.25. This configuration allows for completely fluid zoom levels with precise control over zoom step sizes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\tzoomDelta: 0.25,\n\tzoomSnap: 0\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with MarkerClusterGroup\nDESCRIPTION: This code initializes a Leaflet map, creates a MarkerClusterGroup, populates it with markers from an array of address points, and adds the cluster group to the map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-08-20-guest-post-markerclusterer-0-1-released.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar mapbox = new L.TileLayer(MB_URL, {maxZoom: 18, attribution: MB_ATTR, id: 'examples.map-i875mjb7'}),\n\tlatlng = new L.LatLng(-37.820, 175.217);\n\nvar map = new L.Map('map', {center: latlng, zoom: 15, layers: [mapbox]});\n\nmap.attributionControl.addAttribution(\"Points &copy 2012 LINZ\");\n\nvar markers = new L.MarkerClusterGroup();\n\nfor (var i = 0; i < addressPoints.length; i++) {\n\tvar a = addressPoints[i];\n\tvar title = a[2];\n\tvar marker = new L.Marker(new L.LatLng(a[0], a[1]), { title: title });\n\tmarker.bindPopup(title);\n\tmarkers.addLayer(marker);\n}\n\nmap.addLayer(markers);\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Draw Controls\nDESCRIPTION: Basic setup code to create a Leaflet map with drawing controls. Initializes the map, adds OpenStreetMap tiles, creates a FeatureGroup for editable layers, and adds the draw control.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2013-02-20-guest-post-draw.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// create a map in the \"map\" div, set the view to a given place and zoom\nvar map = L.map('map').setView([175.30867, -37.77914], 13);\n\n// add an OpenStreetMap tile layer\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(map);\n\n// Initialize the FeatureGroup to store editable layers\nvar drawnItems = new L.FeatureGroup();\nmap.addLayer(drawnItems);\n\n// Initialize the draw control and pass it the FeatureGroup of editable layers\nvar drawControl = new L.Control.Draw({\n\tedit: {\n\t\tfeatureGroup: drawnItems\n\t}\n});\nmap.addControl(drawControl);\n```\n\n----------------------------------------\n\nTITLE: Adding GeoJSON to Leaflet Map\nDESCRIPTION: Shows different ways to add GeoJSON data to a Leaflet map, including direct addition and using a layer variable.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew GeoJSON(geojsonFeature).addTo(map);\n\nconst myLayer = new GeoJSON().addTo(map);\nmyLayer.addData(geojsonFeature);\n```\n\n----------------------------------------\n\nTITLE: Creating VideoOverlay in Leaflet\nDESCRIPTION: Demonstrates how to create and add a VideoOverlay to a Leaflet map, including setting up the map, defining video URLs, and specifying options like autoplay and muting.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map').setView([37.8, -96], 4);\n\nconst osm = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst videoUrls = [\n\t'https://www.mapbox.com/bites/00188/patricia_nasa.webm',\n\t'https://www.mapbox.com/bites/00188/patricia_nasa.mp4'\n];\nconst errorOverlayUrl = 'https://cdn-icons-png.flaticon.com/512/110/110686.png';\nconst latLngBounds = new LatLngBounds([[32, -130], [13, -100]]);\n\nconst videoOverlay = new VideoOverlay(videoUrls, latLngBounds, {\n\topacity: 0.8,\n\terrorOverlayUrl: errorOverlayUrl,\n\tinteractive: true,\n\tautoplay: true,\n\tmuted: true,\n\tplaysInline: true\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Leaflet Map with Custom Icons\nDESCRIPTION: Creates a Leaflet map instance with a custom leaf-shaped marker icon including shadow effects. Demonstrates ES module imports, map initialization with OpenStreetMap tiles, custom icon class extension, and marker placement.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons/example-one-icon.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, Icon} from 'leaflet';\nconst map = new Map('map').setView([51.5, -0.09], 13);\n\nnew TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(map);\n\nconst LeafIcon = Icon.extend({\n\toptions: {\n\t\tshadowUrl: 'leaf-shadow.png',\n\t\ticonSize:     [38, 95],\n\t\tshadowSize:   [50, 64],\n\t\ticonAnchor:   [22, 94],\n\t\tshadowAnchor: [4, 62],\n\t\tpopupAnchor:  [-3, -76]\n\t}\n});\n\nconst greenIcon = new LeafIcon({iconUrl: 'leaf-green.png'});\n\nconst mGreen = new Marker([51.5, -0.09], {icon: greenIcon}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Class with Options\nDESCRIPTION: Example of creating a class with initialization and options handling using L.setOptions\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-1-classes.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyBoxClass = Class.extend({\n    options: {\n        width: 1,\n        height: 1\n    },\n\n    initialize(name, options) {\n        this.name = name;\n        Util.setOptions(this, options);\n    }\n});\n\nconst instance = new MyBoxClass('Red', {width: 10});\n\nconsole.log(instance.name); // Outputs \"Red\"\nconsole.log(instance.options.width); // Outputs \"10\"\nconsole.log(instance.options.height); // Outputs \"1\", the default\n```\n\n----------------------------------------\n\nTITLE: Handling Leaflet Draw Events\nDESCRIPTION: Event handlers for managing drawn, edited, and deleted layers. Includes specific handling for marker creation and general layer management within the FeatureGroup.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2013-02-20-guest-post-draw.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmap.on('draw:created', function (e) {\n\tvar type = e.layerType,\n\t\tlayer = e.layer;\n\n\tif (type === 'marker') {\n\t\t// Do marker specific actions\n\t}\n\n\t// Do whatever else you need to. (save to db, add to map etc)\n\tdrawnItems.addLayer(layer);\n});\n\nmap.on('draw:edited', function () {\n\t// Update db to save latest changes.\n});\n\nmap.on('draw:deleted', function () {\n\t// Update db to save latest changes.\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Leaflet Map with Layers and Shapes in JavaScript\nDESCRIPTION: This code snippet initializes a Leaflet map, adds a tile layer from OpenStreetMap, and creates various shapes including a marker, circle, and polygon. It demonstrates basic Leaflet functionality for map creation and customization.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/example-overlays.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, Circle, Polygon} from 'leaflet';\n\nconst map = new Map('map').setView([51.505, -0.09], 13);\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst marker = new Marker([51.5, -0.09]).addTo(map);\n\nconst circle = new Circle([51.508, -0.11], {\n\tcolor: 'red',\n\tfillColor: '#f03',\n\tfillOpacity: 0.5,\n\tradius: 500\n}).addTo(map);\n\nconst polygon = new Polygon([\n\t[51.509, -0.08],\n\t[51.503, -0.06],\n\t[51.51, -0.047]\n]).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Video Overlay in JavaScript\nDESCRIPTION: This code snippet creates a Leaflet map, adds an OpenStreetMap tile layer, and overlays a NASA video on specific geographic coordinates. It demonstrates the use of Leaflet's Map, TileLayer, LatLngBounds, and VideoOverlay classes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/example-nocontrols.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, LatLngBounds, VideoOverlay} from 'leaflet';\n\nconst map = new Map('map');\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst videoUrls = [\n\t'https://www.mapbox.com/bites/00188/patricia_nasa.webm',\n\t'https://www.mapbox.com/bites/00188/patricia_nasa.mp4'\n];\nconst errorOverlayUrl = 'https://cdn-icons-png.flaticon.com/512/110/110686.png';\nconst bounds = new LatLngBounds([[32, -130], [13, -100]]);\n\nmap.fitBounds(bounds);\n\nconst videoOverlay = new VideoOverlay(videoUrls, bounds, {\n\topacity: 0.8,\n\terrorOverlayUrl,\n\tinteractive: true,\n\tautoplay: true,\n\tmuted: true,\n\tplaysInline: true\n}).addTo(map);\n\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Creating Leaflet Map with CRS.Simple and Image Overlay\nDESCRIPTION: This snippet initializes a Leaflet map using CRS.Simple, adds an image overlay, and fits the map to the bounds of the image. It also exports map and L objects to the global scope for debugging purposes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple-example1.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, CRS, ImageOverlay} from 'leaflet';\n\nconst map = new Map('map', {\n\tcrs: CRS.Simple\n});\n\nconst bounds = [[0, 0], [1000, 1000]];\nconst image = new ImageOverlay('uqm_map_full.png', bounds).addTo(map);\n\nmap.fitBounds(bounds);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Zoom Controls\nDESCRIPTION: Sets up a Leaflet map with minimum and maximum zoom levels, adds a tile layer from CARTO, and creates a zoom animation that alternates between zoom levels 0 and 1 every 4 seconds.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-setzoom.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, Control, DomUtil} from 'leaflet';\n\nconst map = new Map('map', {\n\tminZoom: 0,\n\tmaxZoom: 1\n});\n\nconst cartodbAttribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>';\n\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n\tattribution: cartodbAttribution\n}).addTo(map);\n\nsetInterval(() => {\n\n\tmap.setZoom(0);\n\n\tsetTimeout(() => {\n\t\tmap.setZoom(1);\n\t}, 2000);\n\n}, 4000);\n\nmap.setView([0, 0], 0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom CRS\nDESCRIPTION: Sets up a Leaflet map using CRS.Simple coordinate system with custom image bounds, markers, and polylines. Includes a helper function for coordinate conversion and adds interactive elements like popups.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple-example3.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, CRS, ImageOverlay, LatLng, Marker, Polyline} from 'leaflet';\n\nconst map = new Map('map', {\n\tcrs: CRS.Simple,\n\tminZoom: -3\n});\n\nconst Yx = LatLng;\n\nfunction xy(x, y) {\n\tif (Array.isArray(x)) { // When doing xy([x, y]);\n\t\treturn new Yx(x[1], x[0]);\n\t}\n\treturn new Yx(y, x); // When doing xy(x, y);\n}\n\nconst bounds = [xy(-25, -26.5), xy(1023, 1021.5)];\nconst image = new ImageOverlay('uqm_map_full.png', bounds).addTo(map);\n\nconst sol      = xy(175.2, 145.0);\nconst mizar    = xy(41.6, 130.1);\nconst kruegerZ = xy(13.4, 56.5);\nconst deneb    = xy(218.7, 8.3);\n\nconst mSol = new Marker(sol).addTo(map).bindPopup('Sol');\nconst mMizar = new Marker(mizar).addTo(map).bindPopup('Mizar');\nconst mKruegerZ = new Marker(kruegerZ).addTo(map).bindPopup('Krueger-Z');\nconst mDeneb = new Marker(deneb).addTo(map).bindPopup('Deneb');\n\nconst travel = new Polyline([sol, deneb]).addTo(map);\n\nmap.setView(xy(120, 70), 1);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Map Pane in Leaflet\nDESCRIPTION: This snippet shows how to create a custom map pane for labels and set its z-index to control its position in the layer stack. It also disables pointer events for the label pane to allow interaction with underlying layers.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/map-panes/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map');\nmap.createPane('labels');\n\nmap.getPane('labels').style.zIndex = 650;\nmap.getPane('labels').style.pointerEvents = 'none';\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Leaflet Class Extension\nDESCRIPTION: Demonstrates how to create a new class extending L.Class with properties and methods\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-1-classes.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyDemoClass = Class.extend({\n    // A property with initial value = 42\n    myDemoProperty: 42,   \n    // A method \n    myDemoMethod() { return this.myDemoProperty; }\n});\n\nconst myDemoInstance = new MyDemoClass();\n\n// This will output \"42\" to the development console\nconsole.log( myDemoInstance.myDemoMethod() );\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Layers and Panes\nDESCRIPTION: This snippet sets up a Leaflet map with custom panes, tile layers, and a GeoJSON layer for European countries. It demonstrates how to create a map with separate layers for base map and labels, and how to add interactivity to GeoJSON features.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/map-panes/example.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, GeoJSON} from 'leaflet';\nconst map = new Map('map');\n\nmap.createPane('labels');\n\n// This pane is above markers but below popups\nmap.getPane('labels').style.zIndex = 650;\n\n// Layers in this pane are non-interactive and do not obscure mouse/touch events\nmap.getPane('labels').style.pointerEvents = 'none';\n\nconst cartodbAttribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>';\n\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}.png', {\n\tattribution: cartodbAttribution\n}).addTo(map);\n\nconst positronLabels = new TileLayer('http://{s}.basemaps.cartocdn.com/light_only_labels/{z}/{x}/{y}.png', {\n\tattribution: cartodbAttribution,\n\tpane: 'labels'\n}).addTo(map);\n\n/* global euCountries */\nconst geojson = new GeoJSON(euCountries).addTo(map);\n\ngeojson.eachLayer((layer) => {\n\tlayer.bindPopup(layer.feature.properties.name);\n});\n\nmap.setView({lat: 47.040182144806664, lng: 9.667968750000002}, 4);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom TileLayer for Random Kitten Images in JavaScript\nDESCRIPTION: Demonstrates how to extend L.TileLayer to create a custom layer that displays random kitten images from CATAAS. It overrides getTileUrl() to generate random image URLs and getAttribution() to provide proper attribution.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-2-layers.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nTileLayer.Kitten = TileLayer.extend({\n\tgetTileUrl(coords) {\n\t\tconst i = Math.ceil(Math.random() * 4) - 1;\n\t\tconst tag = ['orange', 'hat', 'cute', 'small'];\n\t\treturn `https://cataas.com/cat/${tag[i]}?width=256&height=256`;\n\t},\n\tgetAttribution() {\n\t\treturn '<a href=\"https://cataas.com/\">CATAAS - Cat as a service</a>';\n\t}\n});\n\nnew TileLayer.Kitten().addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Zoom Viewer Control in Leaflet\nDESCRIPTION: Extends Leaflet's Control class to create a custom ZoomViewer that displays the current zoom level. The viewer updates in real-time as the map's zoom level changes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-setzoom.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst ZoomViewer = Control.extend({\n\tonAdd() {\n\t\tconst gauge = DomUtil.create('div');\n\t\tgauge.style.width = '200px';\n\t\tgauge.style.background = 'rgba(255,255,255,0.5)';\n\t\tgauge.style.textAlign = 'left';\n\t\tmap.on('zoomstart zoom zoomend', (ev) => {\n\t\t\tgauge.innerHTML = `Zoom level: ${map.getZoom()}`;\n\t\t});\n\t\treturn gauge;\n\t}\n});\n\nconst zoomViewer = (new ZoomViewer()).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with WMS Layers\nDESCRIPTION: This snippet creates a Leaflet map centered on South America and sets up multiple WMS layers as basemaps. It also adds a layer control for switching between different basemap options.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms-example3.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, CRS, TileLayer, Control} from 'leaflet';\n\nconst map = new Map('map', {\n\tcenter: [-17, -67],\n\tzoom: 3\n});\n\nconst basemaps = {\n\tTopography: new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'TOPO-WMS'\n\t}),\n\n\tPlaces: new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'OSM-Overlay-WMS'\n\t}),\n\n\t'Topography, then places': new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'TOPO-WMS,OSM-Overlay-WMS'\n\t}),\n\n\t'Places, then topography': new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'OSM-Overlay-WMS,TOPO-WMS'\n\t})\n};\n\nconst layerControl = new Control.Layers(basemaps, {}, {collapsed: false}).addTo(map);\n\nbasemaps.Topography.addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Adding GeoJSON Data to the Map\nDESCRIPTION: Creates a GeoJSON layer using the statesData (assumed to be defined elsewhere) and adds it to the map. The style function is applied to customize the appearance of each feature.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example-color.md#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n/* global statesData */\nconst geojson = new GeoJSON(statesData, {\n\tstyle,\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Grid Layer in Leaflet\nDESCRIPTION: This code snippet creates a custom GridLayer that displays the x, y, and z coordinates of each tile. It also adds a random delay to tile creation to simulate asynchronous loading. The custom layer is then added to a Leaflet map centered at [0, 0] with zoom level 0.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/gridcoords.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, GridLayer} from 'leaflet';\n\nconst map = new Map('map', {\n\tcenter: [0, 0],\n\tzoom: 0\n});\n\nGridLayer.DebugCoords = GridLayer.extend({\n\tcreateTile(coords, done) {\n\t\tconst tile = document.createElement('div');\n\t\ttile.innerHTML = [coords.x, coords.y, coords.z].join(', ');\n\t\ttile.style.outline = '1px solid red';\n\n\t\tsetTimeout(() => {\n\t\t\tdone(null, tile); // Syntax is 'done(error, tile)'\n\t\t}, 500 + Math.random() * 1500);\n\n\t\treturn tile;\n\t}\n});\n\nconst debugCoordsGrid = new GridLayer.DebugCoords();\nmap.addLayer(debugCoordsGrid);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Handler to Leaflet Maps\nDESCRIPTION: This snippet shows how to attach a custom handler to all Leaflet maps using the addInitHook method. It also demonstrates how to enable the handler by default using a map option.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-3-controls.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nMap.addInitHook('addHandler', 'tilt', TiltHandler);\n\nconst map = new Map('mapDiv', { tilt: true });\n```\n\n----------------------------------------\n\nTITLE: Binding Popups to Map Objects in Leaflet\nDESCRIPTION: Shows how to attach popups with HTML content to markers, circles, and polygons on the Leaflet map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nmarker.bindPopup(\"<b>Hello world!</b><br>I am a popup.\").openPopup();\ncircle.bindPopup(\"I am a circle.\");\npolygon.bindPopup(\"I am a polygon.\");\n```\n\n----------------------------------------\n\nTITLE: Handling Geolocation Success\nDESCRIPTION: Event handler for successful geolocation that adds a marker and accuracy circle to the map at the user's location.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onLocationFound(e) {\n\tconst radius = e.accuracy;\n\n\tnew Marker(e.latlng).addTo(map)\n\t\t.bindPopup(\"You are within \" + radius + \" meters from this point\").openPopup();\n\n\tnew Circle(e.latlng, radius).addTo(map);\n}\n\nmap.on('locationfound', onLocationFound);\n```\n\n----------------------------------------\n\nTITLE: Event Handling Methods\nDESCRIPTION: New event handling methods added to all event-enabled objects for better event management and one-time event listening.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nobject.cleanAllEventListeners()\nobject.addOneTimeEventListener(eventName, fn, context)\n// Aliased as:\nobject.off()\nobject.once(eventName, fn, context)\n```\n\n----------------------------------------\n\nTITLE: Creating a Watermark Control for Leaflet\nDESCRIPTION: This code implements a custom control that adds a watermark image to the map. It demonstrates how to create and return an HTML element in the onAdd method.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-3-controls.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nControl.Watermark = Control.extend({\n\tonAdd(map) {\n\t\tconst img = DomUtil.create('img');\n\n\t\timg.src = '../../docs/images/logo.png';\n\t\timg.style.width = '200px';\n\n\t\treturn img;\n\t},\n\n\tonRemove(map) {\n\t\t// Nothing to do here\n\t}\n});\n\nnew Control.Watermark({ position: 'bottomleft' }).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Initializing Base Layers and Map in Leaflet\nDESCRIPTION: Creates tile layers for OpenStreetMap and OSM HOT, then initializes the map with default layers.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst osm = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n});\n\nconst osmHOT = new TileLayer('https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, Tiles style by <a href=\"https://www.hotosm.org/\" target=\"_blank\">Humanitarian OpenStreetMap Team</a> hosted by <a href=\"https://openstreetmap.fr/\" target=\"_blank\">OpenStreetMap France</a>'});\n\nconst map = new Map('map', {\n\tcenter: [39.73, -104.99],\n\tzoom: 10,\n\tlayers: [osm, cities]\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Tilt Handler for Leaflet Maps\nDESCRIPTION: This code creates a custom handler that pans the map based on device orientation. It uses the deviceorientation event to adjust the map view.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-3-controls.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst TiltHandler = Handler.extend({\n\taddHooks() {\n\t\tDomEvent.on(window, 'deviceorientation', this._tilt, this);\n\t},\n\n\tremoveHooks() {\n\t\tDomEvent.off(window, 'deviceorientation', this._tilt, this);\n\t},\n\n\t_tilt(ev) {\n\t\t// Treat Gamma angle as horizontal pan (1 degree = 1 pixel) and Beta angle as vertical pan\n\t\tthis._map.panBy( new Point( ev.gamma, ev.beta ) );\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Adding a Marker with Custom Icon to Leaflet Map\nDESCRIPTION: Creates a new Marker object with a custom icon and adds it to the map at the specified coordinates.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst marker = new Marker([51.5, -0.09], {icon: greenIcon}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Zoom Level Viewer Control\nDESCRIPTION: Extends Leaflet's Control class to create a custom control that displays the current zoom level. The control updates in real-time as the map zoom changes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-delta.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst ZoomViewer = Control.extend({\n\t\tonAdd() {\n\t\t\tconst container = DomUtil.create('div');\n\t\t\tconst gauge = DomUtil.create('div');\n\t\t\tcontainer.style.width = '200px';\n\t\t\tcontainer.style.background = 'rgba(255,255,255,0.5)';\n\t\t\tcontainer.style.textAlign = 'left';\n\t\t\tmap.on('zoomstart zoom zoomend', (ev) => {\n\t\t\t\tgauge.innerHTML = `Zoom level: ${map.getZoom()}`;\n\t\t\t});\n\t\t\tcontainer.appendChild(gauge);\n\t\t\treturn container;\n\t\t}\n\t});\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with WMS Layer in JavaScript\nDESCRIPTION: This snippet creates a Leaflet map centered at [0, 0] with zoom level 1 and EPSG4326 CRS. It then adds a WMS layer from mundialis.de displaying topographic OSM data.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms-example-crs.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, CRS, TileLayer} from 'leaflet';\n\nconst map = new Map('map', {\n\tcenter: [0, 0],\n\tzoom: 1,\n\tcrs: CRS.EPSG4326\n});\n\nconst wmsLayer = new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\tlayers: 'TOPO-OSM-WMS'\n}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Icon Class in Leaflet\nDESCRIPTION: Extends the Icon class to create a custom LeafIcon class with shared options for multiple leaf icons. This allows for easy creation of similar icons with different colors.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst LeafIcon = Icon.extend({\n\toptions: {\n\t\tshadowUrl: 'leaf-shadow.png',\n\t\ticonSize:     [38, 95],\n\t\tshadowSize:   [50, 64],\n\t\ticonAnchor:   [22, 94],\n\t\tshadowAnchor: [4, 62],\n\t\tpopupAnchor:  [-3, -76]\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Layer with onAdd and onRemove Methods in JavaScript\nDESCRIPTION: Demonstrates the basic structure of a custom Leaflet layer. It shows how to implement onAdd and onRemove methods, create and position HTML elements, and handle map events for updating the layer.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-2-layers.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomLayer = Layer.extend({\n\tonAdd(map) {\n\t\tconst pane = map.getPane(this.options.pane);\n\t\tthis._container = DomUtil.create(…);\n\n\t\tpane.appendChild(this._container);\n\n\t\t// Calculate initial position of container with `L.Map.latLngToLayerPoint()`, `getPixelOrigin()` and/or `getPixelBounds()`\n\n\t\tDomUtil.setPosition(this._container, point);\n\n\t\t// Add and position children elements if needed\n\n\t\tmap.on('zoomend viewreset', this._update, this);\n\t},\n\n\tonRemove(map) {\n\t\tthis._container.remove();\n\t\tmap.off('zoomend viewreset', this._update, this);\n\t},\n\n\t_update() {\n\t\t// Recalculate position of container\n\n\t\tDomUtil.setPosition(this._container, point);        \n\n\t\t// Add/remove/reposition children elements if needed\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Red Polyline by Extending Leaflet Polyline\nDESCRIPTION: Creates a subclass of L.Polyline that forces the color option to red before calling the parent's onAdd method. Demonstrates how to extend existing Leaflet components while reusing parent functionality.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-2-layers.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nPolyline.Red = Polyline.extend({\n\tonAdd(map) {\n\t\tthis.options.color = 'red';\n\t\tPolyline.prototype.onAdd.call(this, map);\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Info Control Implementation\nDESCRIPTION: Creation of a custom control to display state information on hover.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = new Control();\n\ninfo.onAdd = function (map) {\n\tthis._div = DomUtil.create('div', 'info');\n\tthis.update();\n\treturn this._div;\n};\n\ninfo.update = function (props) {\n\tthis._div.innerHTML = '<h4>US Population Density</h4>' +  (props ?\n\t\t'<b>' + props.name + '</b><br />' + props.density + ' people / mi<sup>2</sup>'\n\t\t: 'Hover over a state');\n};\n\ninfo.addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating an Asynchronous GridLayer with Delayed Tile Generation in JavaScript\nDESCRIPTION: Demonstrates how to implement an asynchronous GridLayer that artificially delays tile creation. It uses setTimeout to simulate asynchronous behavior and calls the done callback when the tile is ready.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-2-layers.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\ncreateTile(coords, done) {\n\tconst tile = document.createElement('div');\n\ttile.innerHTML = [coords.x, coords.y, coords.z].join(', ');\n\ttile.style.outline = '1px solid red';\n\n\t// Syntax is 'done(error, tile)'\n\tsetTimeout(() => done(null, tile), 500 + Math.random() * 1500);\n\n\treturn tile;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Point Styling with CircleMarker\nDESCRIPTION: Shows how to customize point features using pointToLayer option to create circle markers instead of default markers.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst geojsonMarkerOptions = {\n\tradius: 8,\n\tfillColor: \"#ff7800\",\n\tcolor: \"#000\",\n\tweight: 1,\n\topacity: 1,\n\tfillOpacity: 0.8\n};\n\nnew GeoJSON(someGeojsonFeature, {\n\tpointToLayer(feature, latlng) {\n\t\treturn new CircleMarker(latlng, geojsonMarkerOptions);\n\t}\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Including Additional Functionality in Leaflet Class\nDESCRIPTION: Shows how to add or modify properties and methods of an existing Leaflet class using include()\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-1-classes.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nMyDemoClass.include({\n    // Adding a new property to the class\n    _myPrivateProperty: 78,\n    \n    // Redefining a method\n    myDemoMethod() { return this._myPrivateProperty; }\n});\n\nconst mySecondDemoInstance = new MyDemoClass();\n\n// This will output \"78\"\nconsole.log( mySecondDemoInstance.myDemoMethod() );\n\n// However, properties and methods from before still exist\n// This will output \"42\"\nconsole.log( mySecondDemoInstance.myDemoProperty );\n```\n\n----------------------------------------\n\nTITLE: Dynamically Adding Layers to Leaflet Control\nDESCRIPTION: Shows how to dynamically add new base layers and overlays to an existing layers control.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst crownHill = new Marker([39.75, -105.09]).bindPopup('This is Crown Hill Park.'),\n    rubyHill = new Marker([39.68, -105.00]).bindPopup('This is Ruby Hill Park.');\n    \nconst parks = new LayerGroup([crownHill, rubyHill]);\nconst openTopoMap = new TileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: 'Map data: &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, <a href=\"http://viewfinderpanoramas.org\">SRTM</a> | Map style: &copy; <a href=\"https://opentopomap.org\">OpenTopoMap</a> (<a href=\"https://creativecommons.org/licenses/by-sa/3.0/\">CC-BY-SA</a>)'\n});\n\nlayerControl.addBaseLayer(openTopoMap, \"OpenTopoMap\");\nlayerControl.addOverlay(parks, \"Parks\");\n```\n\n----------------------------------------\n\nTITLE: Adding a Scale Control to a Leaflet Map\nDESCRIPTION: This code adds a scale control to the map and uses setInterval to automatically pan between the equator and 60 degrees north, demonstrating how the scale changes with latitude.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nnew Control.Scale().addTo(map);\n\nsetInterval(function(){\n\tmap.setView([0, 0]);\n\tsetTimeout(function(){\n\t\tmap.setView([60, 0]);\n\t}, 2000);\n}, 4000);\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Geolocation in JavaScript\nDESCRIPTION: JavaScript code to create a Leaflet map, add a tile layer, and set up geolocation functionality. It includes handlers for successful location finding and errors.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile/example.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, Circle} from 'leaflet';\n\tconst map = new Map('map').fitWorld();\n\n\tconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\t\tmaxZoom: 19,\n\t\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n\t}).addTo(map);\n\n\tfunction onLocationFound(e) {\n\t\tconst radius = e.accuracy / 2;\n\n\t\tconst locationMarker = new Marker(e.latlng).addTo(map)\n\t\t\t.bindPopup(`You are within ${radius} meters from this point`).openPopup();\n\n\t\tconst locationCircle = new Circle(e.latlng, radius).addTo(map);\n\t}\n\n\tfunction onLocationError(e) {\n\t\talert(e.message);\n\t}\n\n\tmap.on('locationfound', onLocationFound);\n\tmap.on('locationerror', onLocationError);\n\n\tmap.locate({setView: true, maxZoom: 16});\n\n\tglobalThis.L = L; // only for debugging in the developer console\n\tglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Creating Basic GeoJSON Feature in JavaScript\nDESCRIPTION: Demonstrates how to create a simple GeoJSON Feature object representing a baseball stadium with point geometry and properties.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst geojsonFeature = {\n\t\"type\": \"Feature\",\n\t\"properties\": {\n\t\t\"name\": \"Coors Field\",\n\t\t\"amenity\": \"Baseball Stadium\",\n\t\t\"popupContent\": \"This is where the Rockies play!\"\n\t},\n\t\"geometry\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [-104.99404, 39.75621]\n\t}\n};\n```\n\n----------------------------------------\n\nTITLE: Color Generation Function\nDESCRIPTION: Function to determine state colors based on population density thresholds.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction getColor(d) {\n\treturn d > 1000 ? '#800026' :\n\t       d > 500  ? '#BD0026' :\n\t       d > 200  ? '#E31A1C' :\n\t       d > 100  ? '#FC4E2A' :\n\t       d > 50   ? '#FD8D3C' :\n\t       d > 20   ? '#FEB24C' :\n\t       d > 10   ? '#FED976' :\n\t                  '#FFEDA0';\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Features Implementation\nDESCRIPTION: Event handlers for mouseover, mouseout, and click events on map features.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction highlightFeature(e) {\n\tconst layer = e.target;\n\n\tlayer.setStyle({\n\t\tweight: 5,\n\t\tcolor: '#666',\n\t\tdashArray: '',\n\t\tfillOpacity: 0.7\n\t});\n\n\tlayer.bringToFront();\n}\n\nfunction resetHighlight(e) {\n\tgeojson.resetStyle(e.target);\n}\n\nfunction zoomToFeature(e) {\n\tmap.fitBounds(e.target.getBounds());\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple WMS Layers Control\nDESCRIPTION: Demonstrates how to create multiple WMS layers and implement a layer control for toggling between different layer combinations.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst basemaps = {\n\tTopography: new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'TOPO-WMS'\n\t}),\n\n\tPlaces: new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'OSM-Overlay-WMS'\n\t}),\n\n\t'Topography, then places': new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'TOPO-WMS,OSM-Overlay-WMS'\n\t}),\n\n\t'Places, then topography': new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\t\tlayers: 'OSM-Overlay-WMS,TOPO-WMS'\n\t})\n};\n\nnew Control.Layers(basemaps).addTo(map);\n\nbasemaps.Topography.addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Defining Color Function for Choropleth\nDESCRIPTION: Creates a function that returns a color based on the population density value. This is used to color-code different regions on the map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example-color.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction getColor(d) {\n\treturn d > 1000 ? '#800026' :\n\t\td > 500  ? '#BD0026' :\n\t\td > 200  ? '#E31A1C' :\n\t\td > 100  ? '#FC4E2A' :\n\t\td > 50   ? '#FD8D3C' :\n\t\td > 20   ? '#FEB24C' :\n\t\td > 10   ? '#FED976' : '#FFEDA0';\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Icons from Custom Icon Class in Leaflet\nDESCRIPTION: Instantiates three different colored leaf icons using the custom LeafIcon class. Each icon uses a different image URL for its color variant.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst greenIcon = new LeafIcon({iconUrl: 'leaf-green.png'}),\n\tredIcon = new LeafIcon({iconUrl: 'leaf-red.png'}),\n\torangeIcon = new LeafIcon({iconUrl: 'leaf-orange.png'});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Handler Skeleton in JavaScript\nDESCRIPTION: This snippet demonstrates the basic structure for creating a custom handler in Leaflet. It includes methods for adding and removing event hooks.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-3-controls.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst CustomHandler = Handler.extend({\n\taddHooks() {\n\t\tDomEvent.on(document, 'eventname', this._doSomething, this);\n\t},\n\n\tremoveHooks() {\n\t\tDomEvent.off(document, 'eventname', this._doSomething, this);\n\t},\n\n\t_doSomething(event) { … }\n});\n```\n\n----------------------------------------\n\nTITLE: Extending Leaflet FeatureGroup\nDESCRIPTION: Example showing how to call parent class methods when extending Leaflet classes\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-1-classes.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst FeatureGroup = LayerGroup.extend({\n    addLayer(layer) {\n        …\n        LayerGroup.prototype.addLayer.call(this, layer);\n    },\n    \n    removeLayer(layer) {\n        …\n        LayerGroup.prototype.removeLayer.call(this, layer);\n    },\n    …\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Style Function for GeoJSON Features\nDESCRIPTION: Sets up a style function for GeoJSON features, determining how each state will be displayed on the map. It uses the getColor function to set the fill color based on density.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example-color.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction style(feature) {\n\treturn {\n\t\tweight: 2,\n\t\topacity: 1,\n\t\tcolor: 'white',\n\t\tdashArray: '3',\n\t\tfillOpacity: 0.7,\n\t\tfillColor: getColor(feature.properties.density)\n\t};\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Image Overlay with Bounds\nDESCRIPTION: Adds an image overlay to the map with specified bounds and fits the map view to those bounds.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounds = [[0,0], [1000,1000]];\nconst image = new ImageOverlay('uqm_map_full.png', bounds).addTo(map);\nmap.fitBounds(bounds);\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Accessible Marker\nDESCRIPTION: Creates a Leaflet map centered on Kyiv with OpenStreetMap tiles and adds an accessible marker with alt text and popup content. Includes ES module imports and global debugging variables.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/accessibility/example.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, Icon} from 'leaflet';\n\nconst map = new Map('map').setView([50.4501, 30.5234], 4);\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst marker = new Marker([50.4501, 30.5234], {alt: 'Kyiv'}).addTo(map)\n\t.bindPopup('Kyiv, Ukraine is the birthplace of Leaflet!');\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with OpenStreetMap Tiles\nDESCRIPTION: JavaScript code to initialize a Leaflet map instance that fits to the world view and adds OpenStreetMap tile layer.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst map =  new Map('map').fitWorld();\n\nnew TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating SVGOverlay in Leaflet\nDESCRIPTION: Demonstrates how to create an SVG element and add it as an SVGOverlay to a Leaflet map, including setting up the map and specifying options like opacity and interactivity.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\nsvgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\nsvgElement.setAttribute('viewBox', '0 0 200 200');\nsvgElement.innerHTML = '<rect width=\"200\" height=\"200\"/><rect x=\"75\" y=\"23\" width=\"50\" height=\"50\" style=\"fill:red\"/><rect x=\"75\" y=\"123\" width=\"50\" height=\"50\" style=\"fill:#0013ff\"/>';\n\nconst latLngBounds = new LatLngBounds([[32, -130], [13, -100]]);\nmap.fitBounds(latLngBounds);\n\nconst svgOverlay = new SVGOverlay(svgElement, latLngBounds, {\n\topacity: 0.7,\n\tinteractive: true\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Implementing Tilt Handler for Leaflet Map in JavaScript\nDESCRIPTION: Extends Leaflet's Handler class to create a TiltHandler that responds to device orientation events. It pans the map based on the device's gamma and beta angles. The handler is then added to the Map's initialization process.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/tilt.md#2025-04-20_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, Handler, Point, DomEvent, TileLayer} from 'leaflet';\n\nconst trd = [63.41, 10.41];\n\nconst TiltHandler = Handler.extend({\n\taddHooks() {\n\t\tDomEvent.on(window, 'deviceorientation', this._tilt, this);\n\t},\n\n\tremoveHooks() {\n\t\tDomEvent.off(window, 'deviceorientation', this._tilt, this);\n\t},\n\n\t_tilt(ev) {\n\t\t// Treat Gamma angle as horizontal pan (1 degree = 1 pixel) and Beta angle as vertical pan\n\t\tconst offset = new Point(ev.gamma, ev.beta);\n\t\tlet info;\n\t\tif (offset) {\n\t\t\tthis._map.panBy(offset);\n\t\t\tinfo = `${ev.gamma},${ev.beta}`;\n\t\t} else {\n\t\t\tinfo = 'Device orientation not detected';\n\t\t}\n\t\tdocument.getElementById('info').innerHTML = info;\n\t}\n});\n\nMap.addInitHook('addHandler', 'tilt', TiltHandler);\n```\n\n----------------------------------------\n\nTITLE: Implementing a Canvas-based GridLayer for Drawing Circles in JavaScript\nDESCRIPTION: Shows how to create a GridLayer that uses HTML5 Canvas to draw circles. The size of the circles increases with the zoom level. It demonstrates how to work with canvas context within a custom layer.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-2-layers.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGridLayer.CanvasCircles = GridLayer.extend({\n\tcreateTile(coords) {\n\t\tconst tile = document.createElement('canvas');\n\n\t\tconst tileSize = this.getTileSize();\n\t\ttile.setAttribute('width', tileSize.x);\n\t\ttile.setAttribute('height', tileSize.y);\n\n\t\tconst ctx = tile.getContext('2d');\n\n\t\t// Draw whatever is needed in the canvas context\n\t\t// For example, circles which get bigger as we zoom in\n\t\tctx.beginPath();\n\t\tctx.arc(tileSize.x/2, tileSize.x/2, 4 + coords.z*4, 0, 2*Math.PI, false);\n\t\tctx.fill();\n\n\t\treturn tile;\n\t}\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing SVG Overlay in Leaflet Map\nDESCRIPTION: Creates a Leaflet map with an OpenStreetMap tile layer and adds an SVG overlay containing two colored rectangles. The SVG is positioned using latitude/longitude bounds and includes opacity and interaction settings.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/example-svg.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, LatLngBounds, SVGOverlay} from 'leaflet';\n\nconst map = new Map('map');\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst svgElement = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\nsvgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\nsvgElement.setAttribute('viewBox', '0 0 200 200');\nsvgElement.innerHTML = '<rect width=\"200\" height=\"200\"/><rect x=\"75\" y=\"23\" width=\"50\" height=\"50\" style=\"fill:red\"/><rect x=\"75\" y=\"123\" width=\"50\" height=\"50\" style=\"fill:#0013ff\"/>';\nconst latLngBounds = new LatLngBounds([[32, -130], [13, -100]]);\n\nmap.fitBounds(latLngBounds);\n\nconst svgOverlay = new SVGOverlay(svgElement, latLngBounds, {\n\topacity: 0.7,\n\tinteractive: true\n}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Creating a Layer Group in Leaflet\nDESCRIPTION: Combines multiple markers into a single layer group for easier management.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/index.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cities = new LayerGroup([littleton, denver, aurora, golden]);\n```\n\n----------------------------------------\n\nTITLE: Interactive Map Implementation\nDESCRIPTION: Complete implementation of an interactive map with drawing capabilities, including marker popup functionality.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2013-02-20-guest-post-draw.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvar map = L.map('map').setView([-37.77914, 175.30867], 16);\n\nL.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\n}).addTo(map);\n\nvar drawnItems = new L.FeatureGroup();\nmap.addLayer(drawnItems);\n\nvar drawControl = new L.Control.Draw({\n\tedit: {\n\t\tfeatureGroup: drawnItems\n\t}\n});\nmap.addControl(drawControl);\n\nmap.on('draw:created', function (e) {\n\tvar layer = e.layer;\n\n\tif (e.layerType === 'marker') {\n\t\tlayer.bindPopup('A popup!');\n\t}\n\n\tdrawnItems.addLayer(layer);\n});\n```\n\n----------------------------------------\n\nTITLE: Alternating Zoom Levels in Leaflet Map\nDESCRIPTION: This snippet demonstrates how to programmatically alternate between zoom levels 0 and 1 using setInterval and setTimeout functions.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/index.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetInterval(function(){\n\tmap.setZoom(0);\n\tsetTimeout(function(){\n\t\tmap.setZoom(1);\n\t}, 2000);\n}, 4000);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Video Controls in Leaflet\nDESCRIPTION: Shows how to create custom play and pause controls for a VideoOverlay in Leaflet using L.Control extension and DOM manipulation.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nvideoOverlay.on('load', function () {\n\tconst MyPauseControl = Control.extend({\n\t\tonAdd() {\n\t\t\tconst button = DomUtil.create('button');\n\t\t\tbutton.title = 'Pause';\n\t\t\tbutton.innerHTML = '<span aria-hidden=\"true\">⏸</span>';\n\t\t\tDomEvent.on(button, 'click', function () {\n\t\t\t\tvideoOverlay.getElement().pause();\n\t\t\t});\n\t\t\treturn button;\n\t\t}\n\t});\n\tconst MyPlayControl = Control.extend({\n\t\tonAdd() {\n\t\t\tconst button = DomUtil.create('button');\n\t\t\tbutton.title = 'Play';\n\t\t\tbutton.innerHTML = '<span aria-hidden=\"true\">▶️</span>';\n\t\t\tDomEvent.on(button, 'click', function () {\n\t\t\t\tvideoOverlay.getElement().play();\n\t\t\t});\n\t\t\treturn button;\n\t\t}\n\t});\n\n\tconst pauseControl = (new MyPauseControl()).addTo(map);\n\tconst playControl = (new MyPlayControl()).addTo(map);\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Layers Control to Leaflet Map\nDESCRIPTION: Creates and adds a layers control to the map using the defined base and overlay maps.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst layerControl = new Control.Layers(baseMaps, overlayMaps).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Filtering GeoJSON Features\nDESCRIPTION: Shows how to filter GeoJSON features using a filter function based on feature properties.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst someFeatures = [{\n\t\"type\": \"Feature\",\n\t\"properties\": {\n\t\t\"name\": \"Coors Field\",\n\t\t\"show_on_map\": true\n\t},\n\t\"geometry\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [-104.99404, 39.75621]\n\t}\n}, {\n\t\"type\": \"Feature\",\n\t\"properties\": {\n\t\t\"name\": \"Busch Field\",\n\t\t\"show_on_map\": false\n\t},\n\t\"geometry\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [-104.98404, 39.74621]\n\t}\n}];\n\nnew GeoJSON(someFeatures, {\n\tfilter(feature, layer) {\n\t\treturn feature.properties.show_on_map;\n\t}\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Markers and Polyline\nDESCRIPTION: Demonstrates adding multiple markers with popups and connecting them with a polyline using the coordinate wrapper.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst sol      = xy(175.2, 145.0);\nconst mizar    = xy( 41.6, 130.1);\nconst kruegerZ = xy( 13.4,  56.5);\nconst deneb    = xy(218.7,   8.3);\n\nnew Marker(     sol).addTo(map).bindPopup(      'Sol');\nnew Marker(   mizar).addTo(map).bindPopup(    'Mizar');\nnew Marker(kruegerZ).addTo(map).bindPopup('Krueger-Z');\nnew Marker(   deneb).addTo(map).bindPopup(    'Deneb');\n\nconst travel = new Polyline([sol, deneb]).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Initializing MarkerClusterGroup in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a MarkerClusterGroup, add markers to it, and add it to a Leaflet map. It also shows how to bind event listeners to the cluster group.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-08-20-guest-post-markerclusterer-0-1-released.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar markers = new L.MarkerClusterGroup();\n\nmarkers.addLayer(L.marker([175.3107, -37.7784]));\n// add more markers here...\n\nmap.addLayer(markers);\n\nmarkers.on('clusterclick', function (a) { alert('Cluster Clicked'); });\nmarkers.on('click', function (a) { alert('Marker Clicked'); });\n```\n\n----------------------------------------\n\nTITLE: Custom Legend Control Implementation\nDESCRIPTION: Creation of a legend control showing density ranges and corresponding colors.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst legend = new Control({position: 'bottomright'});\n\nlegend.onAdd = function (map) {\n\tconst div = DomUtil.create('div', 'info legend'),\n\t\tgrades = [0, 10, 20, 50, 100, 200, 500, 1000];\n\n\tfor (let i = 0; i < grades.length; i++) {\n\t\tdiv.innerHTML +=\n\t\t\t'<i style=\"background:' + getColor(grades[i] + 1) + '\"></i> ' +\n\t\t\tgrades[i] + (grades[i + 1] ? '&ndash;' + grades[i + 1] + '<br>' : '+');\n\t}\n\n\treturn div;\n};\n\nlegend.addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Adding Popups to GeoJSON Features\nDESCRIPTION: Demonstrates how to add popups to GeoJSON features using the onEachFeature option.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onEachFeature(feature, layer) {\n\tif (feature.properties && feature.properties.popupContent) {\n\t\tlayer.bindPopup(feature.properties.popupContent);\n\t}\n}\n\nconst geojsonFeature = {\n\t\"type\": \"Feature\",\n\t\"properties\": {\n\t\t\"name\": \"Coors Field\",\n\t\t\"amenity\": \"Baseball Stadium\",\n\t\t\"popupContent\": \"This is where the Rockies play!\"\n\t},\n\t\"geometry\": {\n\t\t\"type\": \"Point\",\n\t\t\"coordinates\": [-104.99404, 39.75621]\n\t}\n};\n\nnew GeoJSON(geojsonFeature, {\n\tonEachFeature: onEachFeature\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Map Method Extensions in Leaflet\nDESCRIPTION: New map methods including whenReady(), zoomIn(delta), zoomOut(delta), and eachLayer() for map control and layer iteration.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nmap.whenReady()\nmap.zoomIn(delta)\nmap.zoomOut(delta)\nmap.eachLayer()\n```\n\n----------------------------------------\n\nTITLE: WMS Layer with Custom CRS\nDESCRIPTION: Shows how to initialize a WMS layer with a custom coordinate reference system (CRS) using EPSG4326.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\tcrs: L.CRS.EPSG4326\n});\n\nconst wmsLayer = new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\tlayers: 'TOPO-OSM-WMS'\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: HTML Map Container Setup\nDESCRIPTION: Defines the HTML container element for the Leaflet map with specific dimensions.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/example.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<div id='map' style='width: 600px; height: 400px;'></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Basic Fractional Zoom\nDESCRIPTION: Creates a new Leaflet map instance with fractional zoom enabled using zoomSnap value of 0.25. This allows the map to use non-integer zoom levels like 0.25, 0.5, 0.75, etc.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/index.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\tzoomSnap: 0.25\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Icon in Leaflet\nDESCRIPTION: Defines a new Icon object with custom properties for a green leaf marker. Specifies the icon and shadow image URLs, sizes, anchor points, and popup anchor.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst greenIcon = new Icon({\n\ticonUrl: 'leaf-green.png',\n\tshadowUrl: 'leaf-shadow.png',\n\ticonSize:     [38, 95], // size of the icon\n\tshadowSize:   [50, 64], // size of the shadow\n\ticonAnchor:   [22, 94], // point of the icon which will correspond to marker's location\n\tshadowAnchor: [4, 62],  // the same for the shadow\n\tpopupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WMS Layer with Single Layer\nDESCRIPTION: Shows how to initialize a WMS layer with a specific layer name (TOPO-OSM-WMS). The layers option is required when creating a WMS layer.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst wmsLayer = new TileLayer.WMS('http://ows.mundialis.de/services/service?', {\n\tlayers: 'TOPO-OSM-WMS'\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating an Accessible Marker in Leaflet\nDESCRIPTION: This snippet demonstrates how to create a marker with an accessible name using the 'alt' option. It also shows how to bind a popup to the marker with additional information.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/accessibility/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst marker = new Marker([50.4501, 30.5234],\n  {alt: 'Kyiv'}).addTo(map) // \"Kyiv\" is the accessible name of this marker\n  .bindPopup('Kyiv, Ukraine is the birthplace of Leaflet!');\n```\n\n----------------------------------------\n\nTITLE: Setting Up Leaflet Map Container in HTML\nDESCRIPTION: This HTML snippet creates a container div for the Leaflet map. It sets a specific width and height for the map display area.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/example-overlays.md#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id='map' style='width: 600px; height: 400px;'></div>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Zoom Settings\nDESCRIPTION: Creates a new Leaflet map instance with custom zoom constraints including minimum and maximum zoom levels, zoom snap settings, and zoom delta increments.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-delta.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\t\tminZoom: 0,\n\t\tmaxZoom: 18,\n\t\tzoomSnap: 0,\n\t\tzoomDelta: 0.25\n\t});\n```\n\n----------------------------------------\n\nTITLE: Initializing Simple CRS Map in Leaflet\nDESCRIPTION: Creates a new Leaflet map instance using CRS.Simple coordinate system for non-geographical mapping.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\tcrs: CRS.Simple\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring TMS Layer in Leaflet\nDESCRIPTION: Demonstrates how to create a TMS layer using L.TileLayer with the tms option set to true for proper y-coordinate handling.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst tms_example = new TileLayer('http://base_url/tms/1.0.0/example_layer@png/{z}/{x}/{y}.png', {\n\ttms: true\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating ImageOverlay in Leaflet\nDESCRIPTION: Demonstrates how to create and add an ImageOverlay to a Leaflet map, including setting up the map, defining the image URL, and specifying options like opacity and error handling.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map').setView([37.8, -96], 4);\n\nconst osm = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nconst imageUrl = 'https://maps.lib.utexas.edu/maps/historical/newark_nj_1922.jpg';\nconst errorOverlayUrl = 'https://cdn-icons-png.flaticon.com/512/110/110686.png';\nconst altText = 'Image of Newark, N.J. in 1922. Source: The University of Texas at Austin, UT Libraries Map Collection.';\nconst latLngBounds = new LatLngBounds([[40.799311, -74.118464], [40.68202047785919, -74.33]]);\n\nconst imageOverlay = new ImageOverlay(imageUrl, latLngBounds, {\n\topacity: 0.8,\n\terrorOverlayUrl: errorOverlayUrl,\n\talt: altText,\n\tinteractive: true\n}).addTo(map);\n\nconst rectangle = new Rectangle(latLngBounds).addTo(map);\nmap.fitBounds(latLngBounds);\n```\n\n----------------------------------------\n\nTITLE: Initializing Basic WMS Layer in Leaflet\nDESCRIPTION: Creates a map instance and adds a WMS layer using L.TileLayer.WMS. This demonstrates the basic setup for displaying a WMS service in Leaflet.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map(mapDiv, mapOptions);\n\nconst wmsLayer = new TileLayer.WMS('http://ows.mundialis.de/services/service?', wmsOptions).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Alternative TMS Layer Configuration\nDESCRIPTION: Shows an alternative way to configure a TMS layer using the {-y} template instead of the tms option.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/wms/wms.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst layer = new TileLayer('http://base_url/tms/1.0.0/tileset/{z}/{x}/{-y}.png');\n```\n\n----------------------------------------\n\nTITLE: Adding Markers with Adjusted Bounds\nDESCRIPTION: Demonstrates adding markers and setting proper image bounds with correct coordinates.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst bounds = [[-26.5,-25], [1021.5,1023]];\nconst image = new ImageOverlay('uqm_map_full.png', bounds).addTo(map);\n\nconst sol = new LatLng([ 145, 175.2 ]);\nnew Marker(sol).addTo(map);\nmap.setView( [70, 120], 1);\n```\n\n----------------------------------------\n\nTITLE: Creating Markers for Layer Group in Leaflet\nDESCRIPTION: Creates multiple marker objects with popups for different cities in Colorado.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst littleton = new Marker([39.61, -105.02]).bindPopup('This is Littleton, CO.'),\n\t\tdenver    = new Marker([39.74, -104.99]).bindPopup('This is Denver, CO.'),\n\t\taurora    = new Marker([39.73, -104.8]).bindPopup('This is Aurora, CO.'),\n    \tgolden    = new Marker([39.77, -105.23]).bindPopup('This is Golden, CO.');\n```\n\n----------------------------------------\n\nTITLE: Implementing Coordinate System Wrapper\nDESCRIPTION: Creates wrapper functions to handle x,y coordinates instead of lat,lng for better readability.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst yx = LatLng;\n\nconst xy = function(x, y) {\n\tif (Array.isArray(x)) {    // When doing xy([x, y]);\n\t\treturn new yx(x[1], x[0]);\n\t}\n\treturn new yx(y, x);  // When doing xy(x, y);\n};\n```\n\n----------------------------------------\n\nTITLE: Leaflet Map Initialization and Coordinate Display\nDESCRIPTION: JavaScript code that initializes a Leaflet map and demonstrates coordinate system relationships. Shows pixel origins, marker positions, and offset calculations with visual indicators.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/pixelorigin.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, Marker, DivIcon, Polyline, DomUtil} from 'leaflet';\n\nconst trd = [63.41, 10.41];\n\nconst map = new Map('map', {\n\tcenter: [40, 0],\n\tzoom: 1\n});\n\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n\tattribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>'\n}).addTo(map);\n\nconst marker = new Marker(trd).addTo(map);\n\nconst pane = map.getPane('markerPane');\n\nconst paneCorner = document.createElement('div');\npaneCorner.style.width = '12px';\npaneCorner.style.height = '12px';\npaneCorner.style.borderTop = '2px red solid';\npaneCorner.style.borderLeft = '2px red solid';\n\npane.appendChild(paneCorner);\n\nmarker._icon.style.border = '1px solid blue';\n\nconst crsMarker = new Marker(map.unproject([0, 0]), {\n\ticon: new DivIcon({\n\t\tclassName: 'crsMarker',\n\t\ticonAnchor: [0, 0]\n\t})\n}).addTo(map);\n\nconst markerOffsetLine = new Polyline([[0, 0], [0, 0]], {color: 'skyblue'}).addTo(map);\nconst iconOffsetLine = new Polyline([[0, 0], [0, 0]], {color: 'blue'}).addTo(map);\n\nfunction info() {\n\tconst pixelOrigin = map.getPixelOrigin();\n\tconst markerPixelCoords = map.project(trd, map.getZoom());\n\tconst markerAnchor = marker.options.icon.options.iconAnchor;\n\tconst markerOffset = DomUtil.getPosition(marker._icon);\n\n\tdocument.getElementById('info').innerHTML =\n\t\t'<div style=\"color: green\">CRS origin: 0,0</div>' +\n\t\t`<div style=\"color: red\">px origin: &Delta;${pixelOrigin.x},${pixelOrigin.y}</div>` +\n\t\t`<div style=\"color: blue\">marker px coords:${markerPixelCoords.x.toFixed(2)},${markerPixelCoords.y.toFixed(2)}</div>` +\n\t\t`<div style=\"color: blue\">marker anchor: &Delta;${markerAnchor[0]},${markerAnchor[1]}</div>` +\n\t\t`<div style=\"color: skyblue\">marker pane offset: &Delta;${markerOffset.x},${markerOffset.y}</div>`;\n\n\tmarkerOffsetLine.setLatLngs([map.unproject(pixelOrigin), map.unproject(pixelOrigin.add(markerOffset))]);\n\ticonOffsetLine.setLatLngs([map.unproject(pixelOrigin.add(markerOffset)), map.unproject(pixelOrigin.add(markerOffset).subtract(markerAnchor))]);\n}\n\nmap.on('load move moveend zoomend viewreset', info);\n\ninfo();\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Handling Geolocation Error\nDESCRIPTION: Event handler for geolocation errors that displays an alert with the error message.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile/index.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction onLocationError(e) {\n\talert(e.message);\n}\n\nmap.on('locationerror', onLocationError);\n```\n\n----------------------------------------\n\nTITLE: Configuring Map with Negative Zoom\nDESCRIPTION: Sets up a map with CRS.Simple and enables negative zoom levels to handle large images.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/crs-simple/crs-simple.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\tcrs: CRS.Simple,\n\tminZoom: -5\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing a Leaflet Map with Fixed Zoom Level\nDESCRIPTION: This snippet demonstrates how to create a Leaflet map with a fixed zoom level of 0, showing the entire world as a single tile. It also adds a CARTO basemap layer.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/index.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\tminZoom: 0,\n\tmaxZoom: 0\n});\n\nconst cartodbAttribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>';\n\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n\tattribution: cartodbAttribution\n}).addTo(map);\n\nmap.setView([0, 0], 0);\n```\n\n----------------------------------------\n\nTITLE: Initializing Map View and Debug Settings\nDESCRIPTION: Sets the initial map view coordinates and zoom level, and exposes map objects to the global scope for debugging purposes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-delta.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmap.setView([0, 0], 0);\n\n\tglobalThis.L = L; // only for debugging in the developer console\n\tglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Basic Leaflet Map Initialization with ES Modules\nDESCRIPTION: JavaScript code showing how to import Leaflet components and create a basic map with a tile layer using ES modules syntax.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/download.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {Map, TileLayer} from 'leaflet';\n\nconst map = new Map('map').setView([51.505, -0.09], 13);\n\nnew TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet 1.0 beta 2 via CDN in HTML\nDESCRIPTION: This snippet demonstrates how to include the Leaflet 1.0 beta 2 CSS and JavaScript files in an HTML document using a Content Delivery Network (CDN). It links the stylesheet and script file necessary for using Leaflet in a web application.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2015-10-14-leaflet-1.0-beta2-released.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet/v1.0.0-beta.2/leaflet.css\" />\n<script src=\"http://cdn.leafletjs.com/leaflet/v1.0.0-beta.2/leaflet.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Zoom Settings\nDESCRIPTION: Creates a new Leaflet map instance with specific zoom constraints including minZoom, maxZoom, and zoomSnap settings. Disables dragging for the demo.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-fractional.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst map = new Map('map', {\n\t\tminZoom: 0,\n\t\tmaxZoom: 1,\n\t\tzoomSnap: 0.25,\n\t\tdragging: false\n\t});\n```\n\n----------------------------------------\n\nTITLE: Improved Event Handling in Leaflet 0.4 JavaScript\nDESCRIPTION: Demonstrates the enhanced event handling capabilities in Leaflet 0.4, including multiple event binding and object-based event assignment.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nmap.on('click dblclick moveend', doStuff);\n\nmarker.on({\n\tclick: onMarkerClick,\n\tdragend: onMarkerDragEnd\n});\n\nmap.off('click');\n```\n\n----------------------------------------\n\nTITLE: Implementing Zoom Animation Cycle\nDESCRIPTION: Creates a function that cycles through different zoom levels using setTimeout to create a smooth animation sequence. Zoom levels change every second from 0 to 1 and back.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-fractional.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction zoomCycle() {\n\t\tmap.setZoom(0);\n\t\tconst timeouts = [];\n\t\ttimeouts.push(setTimeout(() => { map.setZoom(0.25); }, 1000));\n\t\ttimeouts.push(setTimeout(() => { map.setZoom(0.50); }, 2000));\n\t\ttimeouts.push(setTimeout(() => { map.setZoom(0.75); }, 3000));\n\t\ttimeouts.push(setTimeout(() => { map.setZoom(1.00); }, 4000));\n\t\ttimeouts.push(setTimeout(() => { map.setZoom(0.75); }, 5000));\n\t\ttimeouts.push(setTimeout(() => { map.setZoom(0.50); }, 6000));\n\t\ttimeouts.push(setTimeout(() => { map.setZoom(0.25); }, 7000));\n\t}\n```\n\n----------------------------------------\n\nTITLE: Adding CARTO Tile Layer to Leaflet Map\nDESCRIPTION: Configures and adds a CARTO positron tile layer to the map with appropriate attribution for OpenStreetMap and CARTO contributors.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-delta.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst cartodbAttribution = '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors, &copy; <a href=\"https://carto.com/attribution\">CARTO</a>';\n\n\tconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n\t\tattribution: cartodbAttribution\n\t}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Zoom Level Display Control\nDESCRIPTION: Extends Leaflet's Control class to create a custom control that displays the current zoom level. Updates the display whenever the zoom level changes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-fractional.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst ZoomViewer = Control.extend({\n\t\tonAdd() {\n\t\t\tconst container = DomUtil.create('div');\n\t\t\tconst gauge = DomUtil.create('div');\n\t\t\tcontainer.style.width = '200px';\n\t\t\tcontainer.style.background = 'rgba(255,255,255,0.5)';\n\t\t\tcontainer.style.textAlign = 'left';\n\t\t\tmap.on('zoomstart zoom zoomend', (ev) => {\n\t\t\t\tgauge.innerHTML = `Zoom level: ${map.getZoom()}`;\n\t\t\t});\n\t\t\tcontainer.appendChild(gauge);\n\t\t\treturn container;\n\t\t}\n\t});\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Tilt Handler and OpenStreetMap Tiles\nDESCRIPTION: Creates a new Leaflet Map instance centered at [0, 0] with zoom level 1 and tilt enabled. Adds an OpenStreetMap tile layer to the map. Also exposes the map and Leaflet objects globally for debugging purposes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/tilt.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst map = new Map('map', {\n\tcenter: [0, 0],\n\tzoom: 1,\n\ttilt: true\n});\n\nconst osm = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Implementing Layer Group Methods\nDESCRIPTION: New methods added to LayerGroup including hasLayer, getLayers, getLayer, and improved removeLayer functionality. These methods enhance layer management capabilities.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\nLayerGroup.hasLayer(layer)\nLayerGroup.getLayers()\nLayerGroup.getLayer(id)\nLayerGroup.removeLayer(layer|id)\n```\n\n----------------------------------------\n\nTITLE: Adding CartoDB Tile Layer to Leaflet Map\nDESCRIPTION: Configures and adds a CartoDB light theme tile layer to the map with proper attribution.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-fractional.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst positron = new TileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {\n\t\tattribution: cartodbAttribution\n\t}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Local Leaflet Installation HTML Setup\nDESCRIPTION: HTML configuration for using a locally downloaded version of Leaflet with import maps.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/download.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"/path/to/leaflet.css\" />\n<script type=\"importmap\">\n{\n  \"imports\": {\n    \"leaflet\": \"/path/to/leaflet.js\"\n  }\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Importing Leaflet and Setting Up the Map\nDESCRIPTION: Imports necessary Leaflet components and initializes the map with a specific view and tile layer. It also sets up attribution for OpenStreetMap.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example-color.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, TileLayer, GeoJSON} from 'leaflet';\n\nconst map = new Map('map').setView([37.8, -96], 4);\n\nconst tiles = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Configuring L.TileLayer URL Generation\nDESCRIPTION: Example showing the use of zoom parameter in L.TileLayer's getTileUrl method for generating tile URLs.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nL.TileLayer.getTileUrl(zoom)\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet JavaScript with Import Map\nDESCRIPTION: Adds the Leaflet JavaScript file using an import map. This allows for module-based imports and integrity checks.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- Make sure you put this AFTER Leaflet's CSS -->\n<script type=\"importmap\">\n{\n\t\"imports\": {\n\t\t\"leaflet\": \"https://unpkg.com/leaflet@{{ site.latest_leaflet_version}}/dist/leaflet.js\"\n\t},\n\t\"integrity\": {\n\t\t\"https://unpkg.com/leaflet@{{ site.latest_leaflet_version}}/dist/leaflet.js\": \"{{site.integrity_hash_uglified}}\"\n\t}\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Enabling Polygon Editing in Leaflet 0.4 JavaScript\nDESCRIPTION: Demonstrates how to enable the new polygon editing feature in Leaflet 0.4, allowing users to interactively modify polygon shapes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\npolygon.editing.enable();\n```\n\n----------------------------------------\n\nTITLE: Mobile Viewport Meta Configuration\nDESCRIPTION: HTML meta tag to disable unwanted scaling and set proper viewport settings for mobile browsers.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n```\n\n----------------------------------------\n\nTITLE: Adding Map.panInside Method in Leaflet 1.4.0\nDESCRIPTION: An API addition that introduces the Map.panInside method to the Leaflet library. This method allows panning the map to keep a specified target inside the map's boundaries.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nMap.panInside\n```\n\n----------------------------------------\n\nTITLE: Defining Leaflet Class Hierarchy for yuml.me Diagram Generation\nDESCRIPTION: This code snippet defines the class inheritance and relationships for the Leaflet library. It uses a specific syntax understood by yuml.me for generating class diagrams. The structure includes core classes, map components, layers, controls, and handlers.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/class-diagram.txt#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Class inheritances in a format that\n// http://www.yuml.me/diagram/class/draw\n// understands and draws things from\n\n\n[L.Util]\n[L.Browser]\n[L.LatLng|lat;lng]\n[L.LatLngBounds] has 2 -.-> [L.LatLng]\n[L.Point|x;y]\n[L.Bounds] has 2 -.-> [L.Point]\n[L.DomUtil]\n[L.DomEvent]\n\n\n\n[L.Class|options|extend();include();initialize()]\n\n[L.Class] ^- [L.Control|onAdd();onRemove()]\n[L.Control] ^- [L.Control.Attribution;L.Control.Layers;L.Control.Scale;L.Control.Zoom]\n\n// L.Control] ^- L.Control.Attribution]\n// L.Control] ^- L.Control.Layers]\n// L.Control] ^- L.Control.Scale]\n// L.Control] ^- L.Control.Zoom]\n\n\n[L.Class] ^- [L.Evented]\n[L.Evented|on();off();fire()]\n\n\n[L.CRS]          ^- [L.CRS.Earth]\n[L.CRS]          ^- [L.CRS.Simple]\n[L.CRS.Earth]    ^- [L.CRS.EPSG3395;L.CRS.EPSG3857;L.CRS.EPSG4326]\n\n// L.CRS]          ^-  L.CRS.Earth]\n// L.CRS]          ^-  L.CRS.Simple]\n// L.CRS.Earth]    ^-  L.CRS.EPSG3395]\n// L.CRS.Earth]    ^-  L.CRS.EPSG3857]\n// L.CRS.EPSG3857] ^-  L.CRS.EPSG900913]\n// L.CRS.Earth]    ^-  L.CRS.EPSG4326]\n\n[L.Evented] ^- [L.Layer]\n\n[L.Layer|onAdd();onRemove();getEvents();getAttribution();beforeAdd()]\n\n[L.Evented] ^- [L.Map|addHandler();addControl();removeControl();addLayer();removeLayer()]\n[L.Map] contains -.-> [L.Layer]\n[L.Map] contains -.-> [L.Control]\n[L.Map] contains -.-> [L.Handler]\n[L.Map] has one -.-> [L.CRS]\n\n[L.Class] ^- [L.Handler|addHooks();removeHooks()]\n[L.Handler] ^- [L.Map.BoxZoom;L.Map.DoubleClickZoom;L.Map.Drag;L.Map.Keyboard;L.Map.ScrollWheelZoom;L.Map.Tap;L.Map.PinchZoom]\n\n// L.Handler] ^- L.Map.BoxZoom]\n// L.Handler] ^- L.Map.DoubleClickZoom]\n// L.Handler] ^- L.Map.Drag]\n// L.Handler] ^- L.Map.Keyboard]\n// L.Handler] ^- L.Map.ScrollWheelZoom]\n// L.Handler] ^- L.Map.Tap]\n// L.Handler] ^- L.Map.PinchZoom] \n\n[L.Layer] ^- [L.Marker]\n[L.Icon] ^- [L.Icon.Default]\n[L.Icon] ^- [L.DivIcon]\n\n[L.Marker] drawn as a -.-> [L.Icon]\n\n\n[L.Layer] ^- [L.GridLayer|createTile()]\n[L.GridLayer] ^- [L.TileLayer|getTileUrl()]\n[L.TileLayer] ^- [L.TileLayer.WMS]\n\n\n[L.Layer] ^- [L.Renderer]\n[L.Renderer] ^- [L.Canvas]\n[L.Renderer] ^- [L.SVG]\n\n[L.Layer] ^- [L.Path]\n[L.CircleMarker] ^- [L.Circle]\n[L.Path] ^- [L.CircleMarker]\n[L.Path] ^- [L.Polyline]\n[L.Polyline] ^- [L.Polygon]\n[L.Polygon] ^- [L.Rectangle]\n[L.Path] drawn in a -.-> [L.Renderer]\n\n\n[L.Layer] ^- [L.LayerGroup]\n[L.LayerGroup] ^- [L.FeatureGroup]\n[L.FeatureGroup] ^- [L.GeoJSON]\n\n[L.Layer] ^- [L.DivOverlay]\n[L.DivOverlay] ^- [L.Popup]\n[L.DivOverlay] ^- [L.Tooltip]\n\n[L.Layer] ^- [L.ImageOverlay]\n```\n\n----------------------------------------\n\nTITLE: Styling Choropleth Map and Info Panel with CSS\nDESCRIPTION: This CSS snippet defines styles for the map container, info panel, and legend. It sets dimensions, fonts, colors, and layout properties for various elements of the choropleth map interface.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example.md#2025-04-20_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#map {\n\t\t\twidth: 800px;\n\t\t\theight: 500px;\n\t\t}\n\n\t\t.info {\n\t\t\tpadding: 6px 8px;\n\t\t\tfont: 14px/16px Arial, Helvetica, sans-serif;\n\t\t\tbackground: white;\n\t\t\tbackground: rgba(255,255,255,0.8);\n\t\t\tbox-shadow: 0 0 15px rgba(0,0,0,0.2);\n\t\t\tborder-radius: 5px;\n\t\t}\n\t\t.info h4 {\n\t\t\tmargin: 0 0 5px;\n\t\t\tcolor: #777;\n\t\t}\n\n\t\t.legend {\n\t\t\ttext-align: left;\n\t\t\tline-height: 18px;\n\t\t\tcolor: #555;\n\t\t}\n\t\t.legend i {\n\t\t\twidth: 18px;\n\t\t\theight: 18px;\n\t\t\tfloat: left;\n\t\t\tmargin-right: 8px;\n\t\t\topacity: 0.7;\n\t\t}\n```\n\n----------------------------------------\n\nTITLE: Creating Div-based Icons in Leaflet 0.4 JavaScript\nDESCRIPTION: Illustrates the use of the new DivIcon class for creating lightweight, customizable div-based markers on a Leaflet map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nL.marker([50.505, 30.57], {\n\ticon: L.divIcon({className: 'my-div-icon'})\n}).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Setting up Fullscreen Mobile Map CSS\nDESCRIPTION: CSS styles to create a fullscreen map container that fills the entire viewport on mobile devices. Uses percentage-based height for better compatibility with mobile Chrome.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile/index.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\nbody {\n\tpadding: 0;\n\tmargin: 0;\n}\nhtml, body, #map {\n\theight: 100%;\n\twidth: 100vw;\n}\n```\n\n----------------------------------------\n\nTITLE: Supporting Linked SVG Elements in IE11\nDESCRIPTION: A fix to add support for IE11 linked SVG elements in the DomUtil.getClass function, ensuring proper class handling for SVG elements in Internet Explorer 11.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nDomUtil.getClass\n```\n\n----------------------------------------\n\nTITLE: Styling Layer Control Labels in Leaflet\nDESCRIPTION: Demonstrates how to style layer control labels using HTML formatting.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control/index.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst baseMaps = {\n\t\"OpenStreetMap\": osm,\n\t\"<span style='color: red'>OpenStreetMap.HOT</span>\": osmHOT\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Leaflet Factory Function\nDESCRIPTION: Shows how to create a factory function for instantiating Leaflet classes\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-1-classes.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction myBoxClass(name, options) {\n    return new MyBoxClass(name, options);\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing L.Evented singleclick event in Leaflet\nDESCRIPTION: This code demonstrates the syntax for the singleclick event extension that can be added to Leaflet. It extends the L.Evented class to fire a singleclick event when a user performs a single click action.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/events/singleclick.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>L.Evented</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>singleclick</code>\n```\n\n----------------------------------------\n\nTITLE: Inheriting Options in Leaflet Subclass\nDESCRIPTION: Demonstrates options inheritance when extending a Leaflet class\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/extending-1-classes.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst MyCubeClass = MyBoxClass.extend({\n    options: {\n        depth: 1\n    }\n});\n\nconst instance = new MyCubeClass('Blue');\n\nconsole.log(instance.options.width); // Outputs \"1\", parent class default\nconsole.log(instance.options.height); // Outputs \"1\", parent class default\nconsole.log(instance.options.depth); // Outputs \"1\"\n```\n\n----------------------------------------\n\nTITLE: Setting URL in TileLayer Without Unnecessary Redrawing\nDESCRIPTION: An optimization to avoid redrawing tiles when the URL hasn't changed in the TileLayer.setUrl() method. This improves performance by preventing unnecessary tile reloading.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nTileLayer.setUrl()\n```\n\n----------------------------------------\n\nTITLE: Package.json with NPM Build Script for Leaflet Plugin\nDESCRIPTION: Example package.json snippet showing how to configure a prepublish script to build/minify your plugin automatically before publishing to NPM.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/PLUGIN-GUIDE.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-leaflet-plugin\",\n  ...\n  \"scripts\": {\n    \"prepublish\": \"grunt build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Global Variables for Debugging\nDESCRIPTION: Assigns Leaflet and map objects to global scope for easier debugging in the browser's developer console.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/example-color.md#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Lowercase Shortcuts for Leaflet 0.4 Class Creation\nDESCRIPTION: Demonstrates the new lowercase shortcuts for creating Leaflet objects without the 'new' keyword, enabling cleaner chained code.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nL.map('map').fitWorld(); // same as\n(new L.Map('map')).fitWorld();\n```\n\n----------------------------------------\n\nTITLE: Enhanced Leaflet Utility Functions\nDESCRIPTION: New utility functions added to Leaflet including L.extend, L.bind, L.stamp, L.setOptions, and L.Util.isArray.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nL.extend()\nL.bind()\nL.stamp()\nL.setOptions()\nL.Util.isArray()\n```\n\n----------------------------------------\n\nTITLE: Adding Scale Control in Leaflet 0.4 JavaScript\nDESCRIPTION: Shows how to add the new scale control to a Leaflet map, displaying the current map scale in metric and/or imperial units.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nL.control.scale().addTo(map);\n```\n\n----------------------------------------\n\nTITLE: Advanced Plugin Repository Structure Example\nDESCRIPTION: Example of a more complex file structure for a sophisticated Leaflet plugin repository, showing organization of source files, distribution files, tests, and examples.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/PLUGIN-GUIDE.md#2025-04-20_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/src        - JS source files\n/dist       - minified plugin JS, CSS, images\n/spec       - test files\n/lib        - any external libraries/plugins if necessary\n/examples   - HTML examples of plugin usage\nREADME.md\nLICENSE\npackage.json\n```\n\n----------------------------------------\n\nTITLE: Exposing Leaflet and Map Objects Globally\nDESCRIPTION: Assigns the Leaflet library and map instance to the global scope for debugging purposes in the developer console.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/zoom-levels/example-setzoom.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Simplified LatLng Object Creation in Leaflet 0.4 JavaScript\nDESCRIPTION: Shows how Leaflet 0.4 allows the use of simple arrays instead of explicit LatLng object creation, simplifying coordinate input.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmap.panTo([50, 30]); // the same as:\nmap.panTo(new L.LatLng(50, 30));\n```\n\n----------------------------------------\n\nTITLE: Initializing Class Constructor Hooks in JavaScript\nDESCRIPTION: Example showing the new Class.addInitHook method for adding constructor hooks to any classes, providing extension points for plugin authors.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nClass.addInitHook()\n```\n\n----------------------------------------\n\nTITLE: Setting Map Container Height in CSS\nDESCRIPTION: Defines the height of the map container using CSS to ensure the map is visible.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_3\n\nLANGUAGE: css\nCODE:\n```\n#map { height: 180px; }\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet 1.0 beta 1 via CDN in HTML\nDESCRIPTION: This snippet shows how to include the Leaflet 1.0 beta 1 CSS and JavaScript files in an HTML document using a CDN. It demonstrates the correct URLs for the stylesheet and script file.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2015-07-15-leaflet-1.0-beta1-released.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet-1.0.0-b1/leaflet.css\" />\n<script src=\"http://cdn.leafletjs.com/leaflet-1.0.0-b1/leaflet.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Control Styling CSS\nDESCRIPTION: CSS styles for the custom info and legend controls.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_7\n\nLANGUAGE: css\nCODE:\n```\n.info {\n\tpadding: 6px 8px;\n\tfont: 14px/16px Arial, Helvetica, sans-serif;\n\tbackground: white;\n\tbackground: rgba(255,255,255,0.8);\n\tbox-shadow: 0 0 15px rgba(0,0,0,0.2);\n\tborder-radius: 5px;\n}\n.info h4 {\n\tmargin: 0 0 5px;\n\tcolor: #777;\n}\n.legend {\n\tline-height: 18px;\n\tcolor: #555;\n}\n.legend i {\n\twidth: 18px;\n\theight: 18px;\n\tfloat: left;\n\tmargin-right: 8px;\n\topacity: 0.7;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Rectangle Layers in Leaflet 0.4 JavaScript\nDESCRIPTION: Shows how to use the new Rectangle class to easily create rectangular area layers on a Leaflet map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nL.rectangle([[51.505, -0.03], [51.5, -0.045]]).addTo(map);\n```\n\n----------------------------------------\n\nTITLE: GeoJSON State Data Structure\nDESCRIPTION: Example structure of GeoJSON data for representing state information including name and population density.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth/index.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"type\": \"Feature\",\n\t\"properties\": {\n\t\t\"name\": \"Alabama\",\n\t\t\"density\": 94.65\n\t},\n\t\"geometry\": ...\n\t...\n}\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet 0.7.5 via CDN\nDESCRIPTION: HTML code snippets showing how to include Leaflet 0.7.5 CSS and JavaScript files from the CDN. These are the required files to integrate Leaflet maps into a web page.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2015-09-01-leaflet-0.7.4-released.md#2025-04-20_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"cdn.leafletjs.com/leaflet-0.7.5/leaflet.css\" />\n<script src=\"http://cdn.leafletjs.com/leaflet-0.7.5/leaflet.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet 1.0-rc1 CSS and JavaScript in HTML\nDESCRIPTION: This snippet shows how to include the Leaflet 1.0-rc1 CSS and JavaScript files in an HTML document using CDN links. It includes both the minified and non-minified versions of the JavaScript file.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-04-18-leaflet-1.0-rc1.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"http://cdn.leafletjs.com/leaflet/v1.0.0-rc.1/leaflet.css\" />\n<script src=\"http://cdn.leafletjs.com/leaflet/v1.0.0-rc.1/leaflet.js\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"http://cdn.leafletjs.com/leaflet/v1.0.0-rc.1/leaflet-src.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Chaining Methods in Leaflet 0.4 JavaScript\nDESCRIPTION: Demonstrates the new method chaining capability in Leaflet 0.4, allowing for more concise code when creating and manipulating map elements.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nL.marker([51.5, -0.09])\n\t.addTo(map)\n\t.bindPopup('Hello world!')\n\t.openPopup();\n```\n\n----------------------------------------\n\nTITLE: Using section Instead of form in Layers Control\nDESCRIPTION: A semantic HTML improvement that replaces form elements with section elements in the layers control component for better accessibility and semantics.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nsection\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet CSS and JavaScript via CDN\nDESCRIPTION: HTML code snippets showing how to include Leaflet's minified CSS and JavaScript files from the CDN for version 1.0.0-rc.2.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-07-16-leaflet-1.0-rc2.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.0.0-rc.2/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet@1.0.0-rc.2/dist/leaflet.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet CSS in HTML\nDESCRIPTION: Adds the Leaflet CSS file to the head section of the HTML document. This step is necessary for styling Leaflet map elements.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start/index.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@{{ site.latest_leaflet_version}}/dist/leaflet.css\"\n\tintegrity=\"{{site.integrity_hash_css}}\"\n\tcrossorigin=\"\"/>\n```\n\n----------------------------------------\n\nTITLE: Handling Double Click Events in Leaflet\nDESCRIPTION: Browser-specific code for handling double click events, showing a special case for Edge browser where native dblclick events are not fired for touchscreen interactions.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-03-20-debugging-touch-interactions.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    // On some platforms (notably, chrome on win10 + touchscreen + mouse),\n    // the browser doesn't fire touchend/pointerup events but does fire\n    // native dblclicks. See #4127.\n    if (!L.Browser.edge) {\n    \tobj.addEventListener('dblclick', handler, false);\n    }\n```\n\n----------------------------------------\n\nTITLE: Including Leaflet Non-Minified JavaScript via CDN\nDESCRIPTION: HTML code snippet showing how to include the non-minified version of Leaflet's JavaScript file from the CDN for version 1.0.0-rc.2.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-07-16-leaflet-1.0-rc2.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leaflet@1.0.0-rc.2/dist/leaflet-src.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Installing Leaflet 1.0-rc3 via CDN\nDESCRIPTION: Code snippets showing how to include Leaflet CSS and JavaScript files via CDN. Includes both minified and non-minified JavaScript versions.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-08-05-leaflet-1.0-rc3.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.css\" />\n<script src=\"https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet.js\"></script>\n```\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/leaflet@1.0.0-rc.3/dist/leaflet-src.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Styling Full-Screen Map with CSS\nDESCRIPTION: CSS code to ensure the map takes up the full viewport height and width, with no padding or margins on the body.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile/example.md#2025-04-20_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\nbody {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n\t#map {\n\t\theight: 100%;\n\t\twidth: 100vw;\n\t}\n```\n\n----------------------------------------\n\nTITLE: CSS Tap Highlight Color Addition\nDESCRIPTION: Addition of CSS rule to control the tap highlight color on WebKit browsers, addressing mobile tap highlight issues.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_10\n\nLANGUAGE: CSS\nCODE:\n```\n-webkit-tap-highlight-color: transparent;\n```\n\n----------------------------------------\n\nTITLE: Simulating Complex Touch Gestures\nDESCRIPTION: Code showing how to program complex touch gestures using prosthetic-hand, including movement patterns, timing, and touch events.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-03-20-debugging-touch-interactions.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nf1.wait(100).moveTo(250, 200, 0)\n\t.down().wait(500).moveBy(-200, 0, 1000).wait(500).up().wait(500)\n\t.down().wait(500).moveBy( 200, 0, 1000).wait(500).up().wait(500);\n\nf2.wait(100).moveTo(350, 200, 0)\n\t.down().wait(500).moveBy( 200, 0, 1000).wait(500).up().wait(500)\n\t.down().wait(500).moveBy(-200, 0, 1000).wait(500).up().wait(500);\n```\n\n----------------------------------------\n\nTITLE: Styling Map Info Panel and CRS Marker in CSS\nDESCRIPTION: Defines CSS styles for an information panel and a CRS marker on the map. The info panel is positioned absolutely at the top-right corner with semi-transparent background.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/tilt.md#2025-04-20_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\n#info {\n\tposition:absolute; \n\ttop:0; \n\tright:0; \n\twidth: 20em; \n\theight: 7.5em; \n\tbackground: rgba(255,255,255,.5); \n\tz-index:500; \n\tfont: 12px Sans;\n}\n\n.crsMarker {\n\tborder-top: 2px green solid;\n\tborder-left: 2px green solid;\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Code References in Plugin Description\nDESCRIPTION: HTML code snippets showing the plugin's components: ScalarField for static data visualization and VectorFieldAnim for animated field visualization.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/basemap-formats/leaflet-canvaslayer-field.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>ScalarField</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>VectorFieldAnim</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"https://ihcantabria.github.io/Leaflet.CanvasLayer.Field/\">examples</a>\n```\n\n----------------------------------------\n\nTITLE: Setting Map Container Width\nDESCRIPTION: Code for setting div width parameter for getBoundsZoom inside option.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ngetBoundsZoom({inside: true})\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Metadata in YAML Frontmatter\nDESCRIPTION: This YAML frontmatter section defines the required and optional metadata for a Leaflet plugin documentation. It includes fields for name, category, repository, author information, demo link, and version compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/template.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: required\ncategory: required (same name as directory)\nrepo: required\nauthor: required\nauthor-url:\ndemo: \ncompatible-v0:\ncompatible-v1: true\n---\n```\n\n----------------------------------------\n\nTITLE: Styling Grid Coordinate Display\nDESCRIPTION: CSS styles for the information panel and coordinate markers on the map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/pixelorigin.md#2025-04-20_snippet_0\n\nLANGUAGE: css\nCODE:\n```\n#info {\n\tposition:absolute; \n\ttop:0; \n\tright:0; \n\twidth: 20em; \n\theight: 7.5em; \n\tbackground: rgba(255,255,255,.5); \n\tz-index:500; \n\tfont: 12px Sans;\n}\n\n.crsMarker {\n\tborder-top: 2px green solid;\n\tborder-left: 2px green solid;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Leaflet Routing Machine Plugin Metadata in Markdown\nDESCRIPTION: This markdown snippet defines metadata for the Leaflet Routing Machine plugin, including its name, category, repository, author information, demo link, and version compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/routing/leaflet-routing-machine.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Leaflet Routing Machine\ncategory: routing\nrepo: https://github.com/perliedman/leaflet-routing-machine\nauthor: Per Liedman\nauthor-url: https://github.com/perliedman\ndemo: https://www.liedman.net/leaflet-routing-machine/\ncompatible-v0:\ncompatible-v1: true\n---\n```\n\n----------------------------------------\n\nTITLE: Creating SVG Element in HTML\nDESCRIPTION: Shows how to create an SVG element directly in HTML that can be used for an SVGOverlay in Leaflet.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/index.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<svg id=\"svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 200 200\"><rect width=\"200\" height=\"200\"/><rect x=\"75\" y=\"23\" width=\"50\" height=\"50\" style=\"fill:red\"/><rect x=\"75\" y=\"123\" width=\"50\" height=\"50\" style=\"fill:#0013ff\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Referencing L.Circle Class in Leaflet\nDESCRIPTION: This code snippet demonstrates how to reference the L.Circle class in Leaflet, which is extended by the Leaflet-semicircle plugin to enable semicircle drawing.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/markers-renderers/leafletsemicircle.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>L.Circle</code>\n```\n\n----------------------------------------\n\nTITLE: Styling Map Tiles in HTML\nDESCRIPTION: This HTML and CSS snippet demonstrates how to style and display map tiles side by side, including a combined view of basemap and label tiles.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/map-panes/index.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<style>\n.tiles img {\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n</style>\n\n<div class='tiles'>\n<div style='display: inline-block'>\n<img src=\"https://a.basemaps.cartocdn.com/light_nolabels/4/8/5.png\" class=\"bordered-img\" /><br/>\nBasemap tile with no labels\n</div>\n\n<div style='display: inline-block'>\n<img src=\"https://a.basemaps.cartocdn.com/light_only_labels/4/8/5.png\" class=\"bordered-img\" /><br/>\nTransparent labels-only tile\n</div>\n\n<div style='display: inline-block; position:relative;'>\n<img src=\"https://a.basemaps.cartocdn.com/light_nolabels/4/8/5.png\" class=\"bordered-img\" />\n<img src=\"https://a.basemaps.cartocdn.com/light_only_labels/4/8/5.png\"  style='position:absolute; left:0; top:0;'/><br/>\nLabels on top of basemap\n</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Touch Fingers in Prosthetic-Hand\nDESCRIPTION: Code demonstrating how to create virtual touch fingers using the prosthetic-hand library for testing touch interactions.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-03-20-debugging-touch-interactions.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar f1 = h.growFinger('touch');\nvar f2 = h.growFinger('touch');\n```\n\n----------------------------------------\n\nTITLE: Plugin API Usage Example - Bad Practice\nDESCRIPTION: Example showing an anti-pattern for plugin method implementation with too many positional arguments.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2013-06-28-leaflet-plugin-authoring-guide.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmarker.myPlugin('bla', 'foo', null, {}, 5, 0);\n```\n\n----------------------------------------\n\nTITLE: Plugin Metadata Definition in Markdown\nDESCRIPTION: YAML frontmatter defining metadata for the Leaflet.SpeechBubble plugin, including repository information, author details, demo link and version compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/markers-renderers/leaflet-speechbubble.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Leaflet.SpeechBubble\ncategory: markers-renderers\nrepo: https://github.com/sybri/Leaflet.SpeechBubble/\nauthor: Sylvain BRISSY\nauthor-url: https://github.com/sybri\ndemo: https://sybri.github.io/demo/Leaflet.SpeechBubble/demo.html\ncompatible-v0:\ncompatible-v1: true\n---\n```\n\n----------------------------------------\n\nTITLE: Embedding Video in HTML\nDESCRIPTION: Shows how to embed a video in HTML using the <video> element with multiple source formats for compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/overlays/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<video width=\"500\" controls>\n\t<source src=\"https://www.mapbox.com/bites/00188/patricia_nasa.webm\" type=\"video/webm\">\n\t<source src=\"https://www.mapbox.com/bites/00188/patricia_nasa.mp4\" type=\"video/mp4\">\n</video>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Bad vs Good Function Parameter Patterns in JavaScript\nDESCRIPTION: Code comparison showing the recommended approach for handling multiple parameters in plugin functions, using an options object instead of multiple individual parameters.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/PLUGIN-GUIDE.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// bad\nmarker.myPlugin('bla', 'foo', null, {}, 5, 0);\n\n // good\nmarker.myPlugin('bla', {\n\toptionOne: 'foo',\n\toptionThree: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Prosthetic-Hand for Touch Testing\nDESCRIPTION: Code snippet showing how to initialize the prosthetic-hand library with specific timing mode for touch event simulation.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2016-03-20-debugging-touch-interactions.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar h = new Hand({ timing: 'frame' });\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents in HTML\nDESCRIPTION: HTML structure for creating a multi-column table of contents with links to different plugin categories.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/plugins.md#2025-04-20_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div id=\"toc\" class=\"clearfix\">\n\t<div class=\"toc-col\">\n\t\t<h4>Tile &amp; image layers</h4>\n\t\t<ul>\n\t\t\t<li> <a href='#basemap-providers'>Basemap providers</a></li>\n\t\t\t<li> <a href='#basemap-formats'>Basemap formats</a></li>\n\t\t\t<li> <a href='#non-map-base-layers'>Non-map base layers</a></li>\n\t\t\t<li> <a href='#tileimage-display'>Tile/image display</a></li>\n\t\t\t<li> <a href='#tile-load'>Tile load</a></li>\n\t\t\t<li> <a href='#vector-tiles'>Vector tiles</a></li>\n\t\t</ul>\n\t\t<!-- More categories omitted for brevity -->\n\t</div>\n\t<!-- More columns omitted for brevity -->\n</div>\n```\n\n----------------------------------------\n\nTITLE: Leaflet Draw CSS Customization\nDESCRIPTION: Custom CSS styles for the Leaflet draw controls, removing default borders from the control bar.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2013-02-20-guest-post-draw.md#2025-04-20_snippet_2\n\nLANGUAGE: css\nCODE:\n```\n.leaflet-bar {\n\tborder: none;\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in HTML\nDESCRIPTION: This snippet embeds a YouTube video about the history of Leaflet into the blog post using an iframe. The video is set to 640x480 pixels and allows fullscreen viewing.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2015-07-01-leaflet-is-alive-and-kicking.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<iframe width=\"640\" height=\"480\" src=\"https://www.youtube.com/embed/NLbyHffKQuU\" frameborder=\"0\" allowfullscreen></iframe>\n```\n\n----------------------------------------\n\nTITLE: Plugin API Usage Example - Good Practice\nDESCRIPTION: Recommended approach for plugin method implementation using an options object for better readability and maintainability.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2013-06-28-leaflet-plugin-authoring-guide.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmarker.myPlugin('bla', {\n\toptionOne: 'foo',\n\toptionThree: 5\n});\n```\n\n----------------------------------------\n\nTITLE: Including Tutorial Link in Markdown\nDESCRIPTION: This snippet demonstrates how to include a tutorial link using a custom Jekyll include tag. It specifies the page URL, thumbnail image, title, and description for each tutorial.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% include tutorial_link.html\npage=\"quick-start/\"\nthumbnail=\"quick-start/thumbnail.png\"\ntitle=\"Leaflet Quick Start Guide\"\ndescription=\"A simple step-by-step guide that will quickly get you started with Leaflet basics, including setting up a Leaflet map (with OpenStreetMap tiles) on your page, working with markers, polylines and popups, and dealing with events.\"\n%}\n```\n\n----------------------------------------\n\nTITLE: Creating a Decorative Map with HTML Inert Attribute\nDESCRIPTION: This HTML snippet shows how to create a purely decorative map that is hidden from assistive technologies using the 'inert' attribute. This prevents unnecessary interaction for screen reader and keyboard users.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/accessibility/index.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!-- This map is for aesthetic purposes only, and can not be interacted with due to the 'inert' property! -->\n<div id='decorative-map' inert></div>\n```\n\n----------------------------------------\n\nTITLE: HTML Range Slider Element\nDESCRIPTION: HTML code snippet showing the range input element used by the Leaflet.Slider plugin to create an interactive slider control.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/user-interface/leaflet-slider.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"range\">\n```\n\n----------------------------------------\n\nTITLE: Installing Leaflet via NPM\nDESCRIPTION: Command to install Leaflet using the NPM package manager.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/download.md#2025-04-20_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install leaflet\n```\n\n----------------------------------------\n\nTITLE: Loading Repository Data for Leaflet Plugins\nDESCRIPTION: This JavaScript function loads repository data for Leaflet plugins listed in tables on the page. It extracts repository information from URLs, generates badge URLs for GitHub and GitLab repositories, and adds these badges to the plugin information.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/plugins.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nfunction loadRepoData() {\n\tconst regexpGithubCom = /^https?:\\/\\/(?:www\\.)?github\\.com\\/([\\w\\d-_.]+)\\/([\\w\\d-_.]+)\\/?/;\n\tconst regexpGithubIO = /^https?:\\/\\/([\\w\\d-_.]+)\\.github\\.io\\/([\\w\\d-_.]+)\\/?/;\n\tconst regexpGitlabCom = /^https?:\\/\\/(?:www\\.)?gitlab\\.com\\/([\\w\\d-_.]+)\\/([\\w\\d-_.]+)\\/?/;\n\n\tconst rows = document.querySelectorAll('table.plugins tr');\n\trows.forEach((row) => {\n\t\ttry {\n\t\t\tconst repoData = row.querySelector('.repo-data');\n\t\t\tif (repoData) {\n\t\t\t\tconst link = row.querySelector('.plugin-repo-url').href;\n\t\t\t\tlet badges = [];\n\n\t\t\t\tconst matchGithubCom = link.match(regexpGithubCom);\n\t\t\t\tif (matchGithubCom) {\n\t\t\t\t\tconst repo = `${matchGithubCom[1]}/${matchGithubCom[2]}`;\n\t\t\t\t\tbadges = [\n\t\t\t\t\t\t`https://badgen.net/github/stars/${repo}`,\n\t\t\t\t\t\t`https://badgen.net/github/last-commit/${repo}`\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tconst matchGithubIO = link.match(regexpGithubIO);\n\t\t\t\tif (matchGithubIO) {\n\t\t\t\t\tconst repo = `${matchGithubIO[1]}/${matchGithubIO[2]}`;\n\t\t\t\t\tbadges = [\n\t\t\t\t\t\t`https://badgen.net/github/stars/${repo}`,\n\t\t\t\t\t\t`https://badgen.net/github/last-commit/${repo}`\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tconst matchGitlabCom = link.match(regexpGitlabCom);\n\t\t\t\tif (matchGitlabCom) {\n\t\t\t\t\tconst repo = `${matchGitlabCom[1]}/${matchGitlabCom[2]}`;\n\t\t\t\t\tbadges = [\n\t\t\t\t\t\t`https://badgen.net/gitlab/stars/${repo}`,\n\t\t\t\t\t\t`https://badgen.net/gitlab/last-commit/${repo}`\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tbadges.forEach((badge) => {\n\t\t\t\t\trepoData.innerHTML += `<img src=\"${badge}\" alt=\"\"/>`;\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(e);\n\t\t}\n\t});\n}\nloadRepoData();\n```\n\n----------------------------------------\n\nTITLE: Jekyll Front Matter Redirect Configuration (YAML)\nDESCRIPTION: YAML front matter configuration for a Jekyll page that sets up a redirect to the quick-start directory. Disables sitemap inclusion and specifies the redirect target path.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  quick-start/\n---\n```\n\n----------------------------------------\n\nTITLE: Switching Leaflet Rendering Backend from SVG to Canvas in JavaScript\nDESCRIPTION: Code reference for switching Leaflet's default rendering backend from SVG to Canvas to improve performance when handling large amounts of vector data. This is provided as a reference link to the Leaflet documentation.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/FAQ.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[switching from SVG to Canvas as the default rendering back-end](http://leafletjs.com/reference.html#global)\n```\n\n----------------------------------------\n\nTITLE: Plugin Definition in Markdown\nDESCRIPTION: YAML frontmatter defining the plugin metadata including name, category, repository, author information, and version compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/markers-renderers/leaflet-label.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Leaflet.label\ncategory: markers-renderers\nrepo: https://github.com/Leaflet/Leaflet.label\nauthor: Jacob Toye\nauthor-url: https://github.com/jacobtoye\ndemo: \ncompatible-v0:\ncompatible-v1: true\n---\n```\n\n----------------------------------------\n\nTITLE: Sample package.json for Leaflet Plugin\nDESCRIPTION: Example package.json file for a Leaflet plugin, showing proper structure with name, version, description, main file, author, license, and Leaflet as a peer dependency.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/PLUGIN-GUIDE.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"my-leaflet-plugin\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A simple leaflet plugin.\",\n  \"main\": \"my-plugin.js\",\n  \"author\": \"You\",\n  \"license\": \"IST\",\n  \"peerDependencies\": {\n    \"leaflet\": \"^1.0.0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Jekyll Page Redirect Configuration in YAML\nDESCRIPTION: YAML front matter configuration for Jekyll that sets up a page redirect to the choropleth directory. Disables sitemap inclusion and specifies the redirect target path.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  choropleth/\n---\n```\n\n----------------------------------------\n\nTITLE: Building Leaflet from Source\nDESCRIPTION: Command to build Leaflet from source after installing dependencies.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/download.md#2025-04-20_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Plugin Metadata Declaration in Markdown\nDESCRIPTION: YAML frontmatter defining the plugin's metadata including name, category, repository, author information, demo link and version compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/tile-image-display/leaflet-multispectral.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: Leaflet.Multispectral\ncategory: tile-image-display\nrepo: https://github.com/publiclab/leaflet-multispectral\nauthor: Public Lab\nauthor-url: https://publiclab.org/\ndemo: https://publiclab.github.io/leaflet-multispectral/\ncompatible-v0:\ncompatible-v1: true\n---\n```\n\n----------------------------------------\n\nTITLE: Basic Plugin Repository Structure Example\nDESCRIPTION: Example of a minimal file structure for a simple Leaflet plugin repository, showing the essential files needed.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/PLUGIN-GUIDE.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nmy-plugin.js\nREADME.md\n```\n\n----------------------------------------\n\nTITLE: L.LayerGroup Iteration\nDESCRIPTION: Using eachLayer method for iterating over layers in LayerGroup.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nL.LayerGroup.eachLayer()\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect in YAML\nDESCRIPTION: This YAML configuration sets up a redirect using Jekyll front matter. It disables sitemap inclusion and specifies the target URL for redirection.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control-example.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  layers-control/example.html\n---\n```\n\n----------------------------------------\n\nTITLE: Leaflet Version 1.8.0 Release Notes\nDESCRIPTION: Comprehensive changelog documenting breaking changes, API improvements, and other updates for Leaflet version 1.8.0. Includes details about touch event handling improvements, class modifications, and new API features.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.8.0 (2022-04-18)\n\n### ⚠️ Breaking Changes\n\n* Improve reliability of `contextmenu` event simulation on mobile Safari by introducing a new `TapHold` handler, replacing legacy `Tap` ([#7026](https://github.com/Leaflet/Leaflet/pull/7026) by [@johnd0e](https://github.com/johnd0e))\n* Reorganize `DivOverlay`/`Popup`/`Tooltip` APIs ([#7540](https://github.com/Leaflet/Leaflet/pull/7540) by [@johnd0e](https://github.com/johnd0e))\n    * Move `Popup` related options from `DivOverlay` to `Popup` ([#7778](https://github.com/Leaflet/Leaflet/pull/7778) by [@Falke-Design](https://github.com/Falke-Design))\n    * Change `Tooltip` class from `leaflet-clickable` to `leaflet-interactive` ([#7719](https://github.com/Leaflet/Leaflet/pull/7719) by [@Falke-Design](https://github.com/Falke-Design))\n    * `Map.closeTooltip` now requires a layer as argument ([#7533](https://github.com/Leaflet/Leaflet/pull/7533) by [@johnd0e](https://github.com/johnd0e))\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Front Matter for Leaflet Blog Page\nDESCRIPTION: Sets up the Jekyll front matter for the Leaflet blog page, specifying the layout, title, and body class.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/blog.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: v2\ntitle: Blog\nbodyclass: blog-page\n---\n```\n\n----------------------------------------\n\nTITLE: Ember-Leaflet Package Definition in Markdown\nDESCRIPTION: Package metadata for the ember-leaflet framework, defining its category, repository, author information, and Leaflet version compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/frameworks-build-systems/emberleaflet.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\nname: ember-leaflet\ncategory: frameworks-build-systems\nrepo: https://miguelcobain.github.io/ember-leaflet/\nauthor: Miguel Andrade\nauthor-url: https://github.com/miguelcobain\ndemo: \ncompatible-v0:\ncompatible-v1: true\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Custom Icons Page\nDESCRIPTION: This YAML front matter sets up a redirect to the 'custom-icons/' page. It disables sitemap inclusion and specifies the layout as 'redirected'.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  custom-icons/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for GeoJSON Page\nDESCRIPTION: This YAML front matter sets up a Jekyll page redirect to a GeoJSON page. It uses the 'redirected' layout, disables sitemap indexing, and specifies the redirect target.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  geojson/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Redirect in YAML\nDESCRIPTION: YAML front matter configuration block that sets up a page redirect to /index.html. Uses Jekyll's redirect functionality with layout and redirect_to properties.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/404.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nredirect_to: /index.html\n---\n```\n\n----------------------------------------\n\nTITLE: New Method Counterparts in Leaflet 0.4 JavaScript\nDESCRIPTION: Illustrates the new counterpart methods introduced in Leaflet 0.4, allowing for more intuitive layer and control manipulation.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2012-07-30-leaflet-0-4-released.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmarker.addTo(map);  // same as map.addLayer(marker)\ncontrol.addTo(map); //         map.addControl(control)\npopup.openOn(map);  //         map.openPopup(popup)\n```\n\n----------------------------------------\n\nTITLE: Referencing Leaflet TileLayer Component\nDESCRIPTION: Shows the reference to the Leaflet TileLayer component that was affected by the bugfix\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_posts/2018-01-18-leaflet-1.3.1.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nL.TileLayer\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirection in YAML Front Matter\nDESCRIPTION: This YAML front matter sets up a page redirection using Jekyll. It disables sitemap inclusion and specifies the target URL for redirection.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  mobile/\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect in Jekyll for Leaflet GeoJSON Example\nDESCRIPTION: This YAML front matter block sets up a page redirect using Jekyll. It disables sitemap inclusion and specifies the target URL for the GeoJSON example page.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/geojson-example.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  geojson/example.html\n---\n```\n\n----------------------------------------\n\nTITLE: Generating Blog Post List with Jekyll and Liquid\nDESCRIPTION: Uses Jekyll and Liquid templating to loop through blog posts and display them with formatted dates, titles, and descriptions.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/blog.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% for post in site.posts %}\n<div class=\"clearfix\">\n\t<div class=\"post-date\">\n\t\t{{ post.date | date_to_string }}\n\t</div>\n\t<div class=\"post-info\">\n\t\t<h3 class=\"post-title\"><a href=\"{{ post.url }}\">{{ post.title }}</a></h3>\n\t\t<p>{{ post.description }} <span class=\"quiet\">&hellip;</span></p>\n\t</div>\n</div>\n{% unless forloop.last %}<hr />{% endunless %}\n{% endfor %}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect in YAML for Leaflet Project\nDESCRIPTION: This YAML front matter configures a page redirect. It sets the layout to 'redirected', excludes the page from the sitemap, and specifies the target URL for redirection.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/map-panes.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  map-panes/\n---\n```\n\n----------------------------------------\n\nTITLE: HTML5 Type Attribute Removal\nDESCRIPTION: Removal of type attribute in HTML5 files to follow HTML5 standards where the type attribute is not required.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_9\n\nLANGUAGE: HTML\nCODE:\n```\n<script src=\"leaflet.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog Entry\nDESCRIPTION: Version release notes formatted in Markdown, detailing bug fixes, improvements, accessibility changes and API updates for Leaflet map library.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 1.9.4 (2023-05-18)\n\n### 🐞 Bug fixes\n\n- Fix tile gaps in Chromium-based browsers\n- Fix vector drifts when zoomAnimation is false and zooming via flyTo or pinch\n- Ensure toGeoJSON() still works with an empty array\n- Ensure LineUtil and PolyUtil only iterate over array values and not properties\n```\n\n----------------------------------------\n\nTITLE: Configuring YAML Front Matter Redirect\nDESCRIPTION: YAML front matter block that configures a static page redirect. Sets the layout to 'redirected', disables sitemap indexing, and specifies the target redirect URL.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/map-panes-example.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  map-panes/example.html\n---\n```\n\n----------------------------------------\n\nTITLE: Documenting Leaflet API Fixes\nDESCRIPTION: While this file contains extensive documentation of Leaflet bug fixes, it does not contain any actual code snippets to parse. The content consists entirely of textual descriptions of fixes made to the Leaflet mapping library's codebase.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/CHANGELOG.md#2025-04-20_snippet_11\n\n\n\n----------------------------------------\n\nTITLE: Accessing Leaflet.GridLayer.GoogleMutant Plugin Reference in Markdown\nDESCRIPTION: Reference to the GoogleMutant plugin that allows adding Google Maps API as a Leaflet layer. This snippet shows the GitLab repository URL where users can find the plugin that enables Google Maps integration with Leaflet.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/FAQ.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[GoogleMutant plugin](https://gitlab.com/IvanSanchez/Leaflet.GridLayer.GoogleMutant)\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirect in YAML Front Matter for Leaflet Documentation\nDESCRIPTION: This YAML front matter snippet configures a page redirect. It sets the layout to 'redirected', disables sitemap inclusion, and specifies the target URL for redirection to the Leaflet quick start example page.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/quick-start-example.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  quick-start/example.html\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Redirect for Mobile Example Page\nDESCRIPTION: This YAML front matter configures a Jekyll page to redirect to a mobile example page. It sets the layout to 'redirected', excludes the page from the sitemap, and specifies the target URL for redirection.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/mobile-example.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  mobile/example.html\n---\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Redirection in YAML for Leaflet Documentation\nDESCRIPTION: This YAML front matter configures a page redirection for Leaflet documentation. It sets the layout to 'redirected', excludes the page from the sitemap, and specifies the target URL for redirection.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/layers-control.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  layers-control/\n---\n```\n\n----------------------------------------\n\nTITLE: Initializing Leaflet Map with Custom Canvas Circles Layer in JavaScript\nDESCRIPTION: This snippet sets up a Leaflet map and creates a custom GridLayer that renders circles on canvas tiles. The circles' size increases with the zoom level. It also exposes the map and Leaflet objects globally for debugging purposes.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/canvascircles.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, GridLayer} from 'leaflet';\n\nconst map = new Map('map', {\n\tcenter: [0, 0],\n\tzoom: 0\n});\n\nGridLayer.CanvasCircles = GridLayer.extend({\n\tcreateTile(coords) {\n\t\tconst tile = document.createElement('canvas');\n\n\t\tconst tileSize = this.getTileSize();\n\t\ttile.setAttribute('width', tileSize.x);\n\t\ttile.setAttribute('height', tileSize.y);\n\n\t\tconst ctx = tile.getContext('2d');\n\n\t\t// Draw whatever is needed in the canvas context\n\t\t// For example, circles which get bigger as we zoom in\n\t\tctx.arc(tileSize.x / 2, tileSize.x / 2, 4 + coords.z * 4, 0, 2 * Math.PI, false);\n\t\tctx.fill();\n\n\t\treturn tile;\n\t}\n});\n\nconst cavasGridLayer = new GridLayer.CanvasCircles();\nmap.addLayer(cavasGridLayer);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Watermark Control in Leaflet\nDESCRIPTION: Creates a custom map control that displays a watermark logo image in the bottom-left corner of a Leaflet map. The code initializes a map with OpenStreetMap tiles and defines a new Control.Watermark class that adds an image element to the map.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/watermark.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport L, {Map, TileLayer, Control, DomUtil} from 'leaflet';\n\nconst map = new Map('map', {\n\tcenter: [40, 0],\n\tzoom: 1\n});\n\nconst osm = new TileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {\n\tmaxZoom: 19,\n\tattribution: '&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n}).addTo(map);\n\nControl.Watermark = Control.extend({\n\tonAdd(map) {\n\t\tconst img = DomUtil.create('img');\n\n\t\timg.src = '../../docs/images/logo.png';\n\t\timg.style.width = '200px';\n\n\t\treturn img;\n\t},\n\n\tonRemove(map) {\n\t\t// Nothing to do here\n\t}\n});\n\nconst watermarkControl = new Control.Watermark({position: 'bottomleft'}).addTo(map);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom KittenLayer in Leaflet\nDESCRIPTION: This snippet extends Leaflet's TileLayer to create a custom layer that displays random kitten images. It overrides the getTileUrl method to fetch images from CATAAS API and sets a custom attribution.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/extending/kittenlayer.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport L, {Map, CRS, TileLayer} from 'leaflet';\n\nconst map = new Map('map', {\n\tcrs: CRS.Simple,\n\tcenter: [0, 0],\n\tzoom: 5\n});\n\nTileLayer.Kitten = TileLayer.extend({\n\tgetTileUrl(coords) {\n\t\tconst i = Math.ceil(Math.random() * 4) - 1;\n\t\tconst tag = ['orange', 'hat', 'cute', 'small'];\n\t\treturn `https://cataas.com/cat/${tag[i]}?width=256&height=256`;\n\t},\n\tgetAttribution() {\n\t\treturn '<a href=\"https://cataas.com/\">CATAAS - Cat as a service</a>';\n\t}\n});\n\nconst kittenTiles = new TileLayer.Kitten();\nmap.addLayer(kittenTiles);\n\nglobalThis.L = L; // only for debugging in the developer console\nglobalThis.map = map; // only for debugging in the developer console\n```\n\n----------------------------------------\n\nTITLE: Defining CartoDB Leaflet Plugin Metadata in YAML\nDESCRIPTION: YAML front matter that defines metadata for the CartoDB Leaflet plugin, including name, category, repository URL, author information, and version compatibility.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/basemap-formats/cartodbleaflet.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nname: cartodb-leaflet\ncategory: basemap-formats\nrepo: https://github.com/vizzuality/cartodb-leaflet/\nauthor: Vizzuality\nauthor-url: https://www.vizzuality.com/\ndemo: \ncompatible-v0:\ncompatible-v1: true\n---\n```\n\n----------------------------------------\n\nTITLE: Using HTML Code Elements for Leaflet Classes\nDESCRIPTION: HTML code tags used to highlight Leaflet class names in the plugin description. These tags identify the L.Polyline class that gets extended by the plugin and mention the LatLng objects that remain unchanged despite the visual offset.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/_plugins/markers-renderers/leaflet-polyline-offset.md#2025-04-20_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<code>L.Polyline</code>\n```\n\nLANGUAGE: html\nCODE:\n```\n<code>LatLng</code>\n```\n\n----------------------------------------\n\nTITLE: Styling Plugin Table in HTML/CSS\nDESCRIPTION: CSS styles for formatting the plugin table, including margin adjustments for paragraphs and styling for repository data.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/plugins.md#2025-04-20_snippet_0\n\nLANGUAGE: CSS\nCODE:\n```\ntable.plugins td > p {\n\tmargin-top: 0;\n\tmargin-bottom: 0;\n}\n.repo-data{\n\tmargin-top: 10px;\n\twhite-space: nowrap;\n}\n\n.repo-data > img {\n\theight: 20px;\n\tmax-width: none;\n\tmargin-right: 5px;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Jekyll Page Redirect in YAML\nDESCRIPTION: Front matter configuration in YAML format that sets up a page redirect to a choropleth example. Specifies layout type, disables sitemap inclusion, and defines the target redirect URL.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/choropleth-example.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  choropleth/example.html\n---\n```\n\n----------------------------------------\n\nTITLE: Jekyll Page Redirect Configuration in YAML\nDESCRIPTION: YAML frontmatter configuration that disables sitemap inclusion and sets up a page redirect to 'custom-icons/example.html'. Uses the redirected layout template.\nSOURCE: https://github.com/leaflet/leaflet/blob/main/docs/examples/custom-icons-example.md#2025-04-20_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\nlayout: redirected\nsitemap: false\nredirect_to:  custom-icons/example.html\n---\n```"
  }
]