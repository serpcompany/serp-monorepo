[
  {
    "owner": "nostr-protocol",
    "repo": "nips",
    "content": "TITLE: Defining Subscription Filters in JSON for Nostr Protocol\nDESCRIPTION: JSON schema for filter objects used in subscription requests. Filters can include event IDs, authors, kinds, tag values, timestamps, and result limits. Multiple conditions within a filter are treated as AND operations, while multiple filters are treated as OR operations.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"ids\": <a list of event ids>,\n  \"authors\": <a list of lowercase pubkeys, the pubkey of an event must be one of these>,\n  \"kinds\": <a list of a kind numbers>,\n  \"#<single-letter (a-zA-Z)>\": <a list of tag values, for #e — a list of event ids, for #p — a list of pubkeys, etc.>,\n  \"since\": <an integer unix timestamp in seconds. Events must have a created_at >= to this to pass>,\n  \"until\": <an integer unix timestamp in seconds. Events must have a created_at <= to this to pass>,\n  \"limit\": <maximum number of events relays SHOULD return in the initial query>\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Nostr Event Structure in JSON\nDESCRIPTION: The fundamental event structure used in the Nostr protocol. Each event includes a hex-encoded ID, public key, timestamp, kind, tags array, content string, and signature. This structure is the basic unit of communication in the protocol.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": <32-bytes lowercase hex-encoded sha256 of the serialized event data>,\n  \"pubkey\": <32-bytes lowercase hex-encoded public key of the event creator>,\n  \"created_at\": <unix timestamp in seconds>,\n  \"kind\": <integer between 0 and 65535>,\n  \"tags\": [\n    [<arbitrary string>...],\n    // ...\n  ],\n  \"content\": <arbitrary string>,\n  \"sig\": <64-bytes lowercase hex of the signature of the sha256 hash of the serialized event data, which is the same as the \"id\" field>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nostr Tags Structure\nDESCRIPTION: Example of the tags array structure in a Nostr event. This demonstrates the standard tag formats including event references (e), pubkey references (p), addressable event references (a), and alternative text (alt). Tags enable rich interconnections between events and users.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"tags\": [\n    [\"e\", \"5c83da77af1dec6d7289834998ad7aafbd9e2191396d75ec3cc27f5a77226f36\", \"wss://nostr.example.com\"],\n    [\"p\", \"f7234bd4c1394dda46d09f35bd384dd30cc552ad5541990f98844fb06676e9ca\"],\n    [\"a\", \"30023:f7234bd4c1394dda46d09f35bd384dd30cc552ad5541990f98844fb06676e9ca:abcd\", \"wss://nostr.example.com\"],\n    [\"alt\", \"reply\"],\n    // ...\n  ],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Serializing Nostr Event Data for ID Generation\nDESCRIPTION: The serialization structure used to generate a Nostr event ID. This array format is hashed with SHA-256 to produce the event ID. Specific serialization rules must be followed to ensure consistent ID generation across implementations.\n\nLANGUAGE: json\nCODE:\n```\n[\n  0,\n  <pubkey, as a lowercase hex string>,\n  <created_at, as a number>,\n  <kind, as a number>,\n  <tags, as an array of arrays of non-null strings>,\n  <content, as a string>\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Conversation Keys for End-to-End Encryption\nDESCRIPTION: Function to derive a shared conversation key between two users using their public-private key pairs. It uses ECDH key exchange and HKDF extraction for secure key derivation.\n\nLANGUAGE: python\nCODE:\n```\n# Calculates long-term key between users A and B: `get_key(Apriv, Bpub) == get_key(Bpriv, Apub)`\ndef get_conversation_key(private_key_a, public_key_b):\n  shared_x = secp256k1_ecdh(private_key_a, public_key_b)\n  return hkdf_extract(IKM=shared_x, salt=utf8_encode('nip44-v2'))\n```\n\n----------------------------------------\n\nTITLE: Core window.nostr Methods Implementation in JavaScript\nDESCRIPTION: Defines the required core methods that must be implemented in the window.nostr object. These include getPublicKey() which returns a hex-encoded public key and signEvent() which takes an event object and adds id, pubkey, and signature properties.\n\nLANGUAGE: javascript\nCODE:\n```\nasync window.nostr.getPublicKey(): string // returns a public key as hex\nasync window.nostr.signEvent(event: { created_at: number, kind: number, tags: string[][], content: string }): Event // takes an event object, adds `id`, `pubkey` and `sig` and returns it\n```\n\n----------------------------------------\n\nTITLE: Implementing NIP-44 Version 2 Encryption and Decryption in Python\nDESCRIPTION: Pseudocode implementation of the NIP-44 version 2 encryption protocol, which uses secp256k1 ECDH, HKDF, ChaCha20, and HMAC-SHA256. This implementation demonstrates the complete encryption and decryption flow including conversation key calculation, message key derivation, padding, and authentication.\n\nLANGUAGE: python\nCODE:\n```\n```py\n\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Message Schema in Nostr (Kind 14)\nDESCRIPTION: JSON structure for a kind 14 direct message event in Nostr. It includes sender and receiver public keys, timestamps, tags for replies and conversation subjects, and plaintext content. This event must never be signed directly to maintain privacy.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": \"<usual hash>\",\n  \"pubkey\": \"<sender-pubkey>\",\n  \"created_at\": \"<current-time>\",\n  \"kind\": 14,\n  \"tags\": [\n    [\"p\", \"<receiver-1-pubkey>\", \"<relay-url>\"],\n    [\"p\", \"<receiver-2-pubkey>\", \"<relay-url>\"],\n    [\"e\", \"<kind-14-id>\", \"<relay-url>\"] // if this is a reply\n    [\"subject\", \"<conversation-title>\"],\n    // rest of tags...\n  ],\n  \"content\": \"<message-in-plain-text>\",\n}\n```\n\n----------------------------------------\n\nTITLE: HMAC with Additional Associated Data (AAD) Implementation\nDESCRIPTION: Function to compute HMAC with Additional Associated Data (AAD), which enhances security by binding the integrity of the message to associated metadata.\n\nLANGUAGE: python\nCODE:\n```\ndef hmac_aad(key, message, aad):\n  if len(aad) != 32: raise Exception('AAD associated data must be 32 bytes');\n  return hmac(sha256, key, concat(aad, message));\n```\n\n----------------------------------------\n\nTITLE: NIP-44 Usage Example\nDESCRIPTION: Example demonstrating how to use the encryption/decryption functions. It shows the generation of a conversation key, creating a nonce, encrypting a message, and decrypting it.\n\nLANGUAGE: python\nCODE:\n```\n# Usage:\n#   conversation_key = get_conversation_key(sender_privkey, recipient_pubkey)\n#   nonce = secure_random_bytes(32)\n#   payload = encrypt('hello world', conversation_key, nonce)\n#   'hello world' == decrypt(payload, conversation_key)\n```\n\n----------------------------------------\n\nTITLE: Decoding Encrypted Message Payload with Validation\nDESCRIPTION: Function to decode the base64-encoded encrypted message payload. It extracts the version, nonce, ciphertext, and MAC values while performing validation checks on lengths and format.\n\nLANGUAGE: python\nCODE:\n```\n# metadata: always 65b (version: 1b, nonce: 32b, max: 32b)\n# plaintext: 1b to 0xffff\n# padded plaintext: 32b to 0xffff\n# ciphertext: 32b+2 to 0xffff+2\n# raw payload: 99 (65+32+2) to 65603 (65+0xffff+2)\n# compressed payload (base64): 132b to 87472b\ndef decode_payload(payload):\n  plen = len(payload)\n  if plen == 0 or payload[0] == '#': raise Exception('unknown version')\n  if plen < 132 or plen > 87472: raise Exception('invalid payload size')\n  data = base64_decode(payload)\n  dlen = len(d)\n  if dlen < 99 or dlen > 65603: raise Exception('invalid data size');\n  vers = data[0]\n  if vers != 2: raise Exception('unknown version ' + vers)\n  nonce = data[1:33]\n  ciphertext = data[33:dlen - 32]\n  mac = data[dlen - 32:dlen]\n  return (nonce, ciphertext, mac)\n```\n\n----------------------------------------\n\nTITLE: NIP-44 Test Vector Example\nDESCRIPTION: A JSON example of a test vector for validating NIP-44 implementations. It includes private keys, a conversation key, nonce, plaintext, and the expected encrypted payload.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"sec1\": \"0000000000000000000000000000000000000000000000000000000000000001\",\n  \"sec2\": \"0000000000000000000000000000000000000000000000000000000000000002\",\n  \"conversation_key\": \"c41c775356fd92eadc63ff5a0dc1da211b268cbea22316767095b2871ea1412d\",\n  \"nonce\": \"0000000000000000000000000000000000000000000000000000000000000001\",\n  \"plaintext\": \"a\",\n  \"payload\": \"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABee0G5VSK0/9YypIObAtDKfYEAjD35uVkHyB0F4DwrcNaCXlCWZKaArsGrY6M9wnuTMxWfp1RTN9Xga8no+kF5Vsb\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NIP-11 Relay Information Document Structure in JSON\nDESCRIPTION: The core JSON structure that relays should return when receiving an HTTP request with the 'Accept' header of 'application/nostr+json'. This document contains fields for relay identification, contact information, and supported capabilities.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": <string identifying relay>,\n  \"description\": <string with detailed information>,\n  \"banner\": <a link to an image (e.g. in .jpg, or .png format)>,\n  \"icon\": <a link to an icon (e.g. in .jpg, or .png format>,\n  \"pubkey\": <administrative contact pubkey>,\n  \"contact\": <administrative alternate contact>,\n  \"supported_nips\": <a list of NIP numbers supported by the relay>,\n  \"software\": <string identifying relay software URL>,\n  \"version\": <string version identifier>\n}\n```\n\n----------------------------------------\n\nTITLE: Padding and Unpadding Functions for Message Encryption\nDESCRIPTION: Two functions for converting between padded and unpadded text. The padding function adds necessary bytes to meet length requirements, while unpadding extracts the original plaintext with validation checks.\n\nLANGUAGE: python\nCODE:\n```\n# Converts unpadded plaintext to padded bytearray\ndef pad(plaintext):\n  unpadded = utf8_encode(plaintext)\n  unpadded_len = len(plaintext)\n  if (unpadded_len < c.min_plaintext_size or\n      unpadded_len > c.max_plaintext_size): raise Exception('invalid plaintext length')\n  prefix = write_u16_be(unpadded_len)\n  suffix = zeros(calc_padded_len(unpadded_len) - unpadded_len)\n  return concat(prefix, unpadded, suffix)\n```\n\nLANGUAGE: python\nCODE:\n```\n# Converts padded bytearray to unpadded plaintext\ndef unpad(padded):\n  unpadded_len = read_uint16_be(padded[0:2])\n  unpadded = padded[2:2+unpadded_len]\n  if (unpadded_len == 0 or\n      len(unpadded) != unpadded_len or\n      len(padded) != 2 + calc_padded_len(unpadded_len)): raise Exception('invalid padding')\n  return utf8_decode(unpadded)\n```\n\n----------------------------------------\n\nTITLE: Client to Relay Message Types in Nostr Protocol\nDESCRIPTION: Documents the message types sent from clients to relays in the Nostr protocol. Includes EVENT for publishing events, REQ for requesting events and subscribing to updates, CLOSE for stopping subscriptions, AUTH for authentication, and COUNT for requesting event counts.\n\nLANGUAGE: markdown\nCODE:\n```\n| type    | description                                         | NIP         |\n| ------- | --------------------------------------------------- | ----------- |\n| `EVENT` | used to publish events                              | [01](01.md) |\n| `REQ`   | used to request events and subscribe to new updates | [01](01.md) |\n| `CLOSE` | used to stop previous subscriptions                 | [01](01.md) |\n| `AUTH`  | used to send authentication events                  | [42](42.md) |\n| `COUNT` | used to request event counts                        | [45](45.md) |\n```\n\n----------------------------------------\n\nTITLE: Example Nostr Relay Information Document\nDESCRIPTION: Complete example of a Nostr relay information document from eden.nostr.land showing basic relay details, supported NIPs, limitations, and payment requirements. This serves as a real-world implementation reference.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"description\": \"nostr.land family of relays (us-or-01)\",\n  \"name\": \"nostr.land\",\n  \"pubkey\": \"52b4a076bcbbbdc3a1aefa3735816cf74993b1b8db202b01c883c58be7fad8bd\",\n  \"software\": \"custom\",\n  \"supported_nips\": [\n    1,\n    2,\n    4,\n    9,\n    11,\n    12,\n    16,\n    20,\n    22,\n    28,\n    33,\n    40\n  ],\n  \"version\": \"1.0.1\",\n  \"limitation\": {\n    \"payment_required\": true,\n    \"max_message_length\": 65535,\n    \"max_event_tags\": 2000,\n    \"max_subscriptions\": 20,\n    \"auth_required\": false\n  },\n  \"payments_url\": \"https://eden.nostr.land\",\n  \"fees\": {\n    \"subscription\": [\n      {\n        \"amount\": 2500000,\n        \"unit\": \"msats\",\n        \"period\": 2592000\n      }\n    ]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Nostr Relay Information Using curl\nDESCRIPTION: Bash command for retrieving relay metadata from a Nostr relay using the Accept header for application/nostr+json format and piping the result through jq for pretty-printing.\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -H \"Accept: application/nostr+json\" https://eden.nostr.land | jq\n```\n\n----------------------------------------\n\nTITLE: Relay to Client Message Types in Nostr Protocol\nDESCRIPTION: Documents the message types sent from relays to clients in the Nostr protocol. Includes EOSE to indicate all stored events have been sent, EVENT for sending requested events, NOTICE for human-readable messages, OK for event success notifications, CLOSED for subscription end notifications, AUTH for authentication challenges, and COUNT for returning event counts.\n\nLANGUAGE: markdown\nCODE:\n```\n| type     | description                                             | NIP         |\n| -------- | ------------------------------------------------------- | ----------- |\n| `EOSE`   | used to notify clients all stored events have been sent | [01](01.md) |\n| `EVENT`  | used to send events requested to clients                | [01](01.md) |\n| `NOTICE` | used to send human-readable messages to clients         | [01](01.md) |\n| `OK`     | used to notify clients if an EVENT was successful       | [01](01.md) |\n| `CLOSED` | used to notify clients that a REQ was ended and why     | [01](01.md) |\n| `AUTH`   | used to send authentication challenges                  | [42](42.md) |\n| `COUNT`  | used to send requested event counts to clients          | [45](45.md) |\n```\n\n----------------------------------------\n\nTITLE: Implementing Kind:31989 Recommendation Event in Nostr\nDESCRIPTION: This code snippet demonstrates the structure of a kind:31989 event which is used by users to recommend applications that can handle specific event kinds. The event includes tags for the supported event kind and application references with relay hints and platform information.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 31989,\n  \"pubkey\": <recommender-user-pubkey>,\n  \"tags\": [\n    [\"d\", <supported-event-kind>],\n    [\"a\", \"31990:app1-pubkey:<d-identifier>\", \"wss://relay1\", \"ios\"],\n    [\"a\", \"31990:app2-pubkey:<d-identifier>\", \"wss://relay2\", \"web\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Server Limitations in NIP-11 Relay Information Document\nDESCRIPTION: Extended JSON structure showing how relays can communicate their operational limitations to clients. This includes constraints on message sizes, subscription counts, content length, and authentication requirements.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"limitation\": {\n    \"max_message_length\": 16384,\n    \"max_subscriptions\": 20,\n    \"max_filters\": 100,\n    \"max_limit\": 5000,\n    \"max_subid_length\": 100,\n    \"max_event_tags\": 100,\n    \"max_content_length\": 8196,\n    \"min_pow_difficulty\": 30,\n    \"auth_required\": true,\n    \"payment_required\": true,\n    \"restricted_writes\": true,\n    \"created_at_lower_limit\": 31536000,\n    \"created_at_upper_limit\": 3\n  },\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Protocol Flow for REQ Messages\nDESCRIPTION: Demonstrates the protocol flow when a relay requires authentication before serving a subscription request (REQ), showing the challenge-response pattern and subsequent successful data retrieval.\n\nLANGUAGE: json\nCODE:\n```\nrelay: [\"AUTH\", \"<challenge>\"]\nclient: [\"REQ\", \"sub_1\", {\"kinds\": [4]}]\nrelay: [\"CLOSED\", \"sub_1\", \"auth-required: we can't serve DMs to unauthenticated users\"]\nclient: [\"AUTH\", {\"id\": \"abcdef...\", ...}]\nrelay: [\"OK\", \"abcdef...\", true, \"\"]\nclient: [\"REQ\", \"sub_1\", {\"kinds\": [4]}]\nrelay: [\"EVENT\", \"sub_1\", {...}]\nrelay: [\"EVENT\", \"sub_1\", {...}]\nrelay: [\"EVENT\", \"sub_1\", {...}]\nrelay: [\"EVENT\", \"sub_1\", {...}]\n...\n```\n\n----------------------------------------\n\nTITLE: Defining File Metadata Structure in Nostr using Event Kind 1063\nDESCRIPTION: This snippet demonstrates the structure of a Nostr event with kind 1063 for file metadata. It includes tags for file URL, MIME type, hash values, file dimensions, and optional metadata like thumbnails, magnet links, and accessibility descriptions.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1063,\n  \"tags\": [\n    [\"url\",<string with URI of file>],\n    [\"m\", <MIME type>],\n    [\"x\", <Hash SHA-256>],\n    [\"ox\", <Hash SHA-256>],\n    [\"size\", <size of file in bytes>],\n    [\"dim\", <size of file in pixels>],\n    [\"magnet\", <magnet URI> ],\n    [\"i\", <torrent infohash>],\n    [\"blurhash\", <value>],\n    [\"thumb\", <string with thumbnail URI>, <Hash SHA-256>],\n    [\"image\", <string with preview URI>, <Hash SHA-256>],\n    [\"summary\", <excerpt>],\n    [\"alt\", <description>]\n  ],\n  \"content\": \"<caption>\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Event Retention Policies in NIP-11 Relay Information Document\nDESCRIPTION: JSON structure showing how relays can specify their event retention policies based on event kinds, time periods, and count limits. This helps clients understand how long different types of data will be stored by the relay.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"retention\": [\n    {\"kinds\": [0, 1, [5, 7], [40, 49]], \"time\": 3600},\n    {\"kinds\": [[40000, 49999]], \"time\": 100},\n    {\"kinds\": [[30000, 39999]], \"count\": 1000},\n    {\"time\": 3600, \"count\": 10000}\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Signing Nostr Events via Content Resolver in Kotlin\nDESCRIPTION: Method to sign a Nostr event through Android's content resolver. It passes the event JSON and logged-in user's pubkey as parameters and retrieves both the signature and the signed event JSON.\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = context.contentResolver.query(\n    Uri.parse(\"content://com.example.signer.SIGN_EVENT\"),\n    listOf(\"$eventJson\", \"\", \"${logged_in_user_pubkey}\"),\n    null,\n    null,\n    null\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nif (result == null) return\n\nif (it.getColumnIndex(\"rejected\") > -1) return\n\nif (result.moveToFirst()) {\n    val index = it.getColumnIndex(\"result\")\n    val indexJson = it.getColumnIndex(\"event\")\n    val signature = it.getString(index)\n    val eventJson = it.getString(indexJson)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Community with kind:34550 Event in Nostr\nDESCRIPTION: This snippet demonstrates how to create a community definition event (kind:34550) that specifies community details, moderators, and preferred relays. The event includes community identifiers, metadata, and moderator public keys.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 34550,\n  \"tags\": [\n    [\"d\", \"<community-d-identifier>\"],\n    [\"name\", \"<Community name>\"],\n    [\"description\", \"<Community description>\"],\n    [\"image\", \"<Community image url>\", \"<Width>x<Height>\"],\n\n    //.. other tags relevant to defining the community\n\n    // moderators\n    [\"p\", \"<32-bytes hex of a pubkey1>\", \"<optional recommended relay URL>\", \"moderator\"],\n    [\"p\", \"<32-bytes hex of a pubkey2>\", \"<optional recommended relay URL>\", \"moderator\"],\n    [\"p\", \"<32-bytes hex of a pubkey3>\", \"<optional recommended relay URL>\", \"moderator\"],\n\n    // relays used by the community (w/optional marker)\n    [\"relay\", \"<relay hosting author kind 0>\", \"author\"],\n    [\"relay\", \"<relay where to send and receive requests>\", \"requests\"],\n    [\"relay\", \"<relay where to send and receive approvals>\", \"approvals\"],\n    [\"relay\", \"<relay where to post requests to and fetch approvals from>\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NostrConnect URI Format\nDESCRIPTION: Specifies the URI format for initiating a direct connection from a client to a remote signer, including the client's public key, relay information, and optional parameters.\n\nLANGUAGE: text\nCODE:\n```\nnostrconnect://83f3b2ae6aa368e8275397b9c26cf550101d63ebaab900d19dd4a4429f5ad8f5?relay=wss%3A%2F%2Frelay1.example.com&perms=nip44_encrypt%2Cnip44_decrypt%2Csign_event%3A13%2Csign_event%3A14%2Csign_event%3A1059&name=My+Client&secret=0s8j2djs&relay=wss%3A%2F%2Frelay2.example2.com\n```\n\n----------------------------------------\n\nTITLE: Implementing Media Attachments with imeta Tags in Nostr\nDESCRIPTION: Example of a Nostr event that includes an image URL in the content field along with a corresponding 'imeta' tag containing metadata about the image. The metadata includes information such as MIME type, blurhash, dimensions, alt text, hash, and fallback URLs.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"More image metadata tests don't mind me https://nostr.build/i/my-image.jpg\",\n  \"kind\": 1,\n  \"tags\": [\n    [\n      \"imeta\",\n      \"url https://nostr.build/i/my-image.jpg\",\n      \"m image/jpeg\",\n      \"blurhash eVF$^OI:${M{o#*0-nNFxakD-?xVM}WEWB%iNKxvR-oetmo#R-aen$\",\n      \"dim 3024x4032\",\n      \"alt A scenic photo overlooking the coast of Costa Rica\",\n      \"x <sha256 hash as specified in NIP 94>\",\n      \"fallback https://nostrcheck.me/alt1.jpg\",\n      \"fallback https://void.cat/alt1.jpg\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Geographic Legal Limitations in Nostr Relay Metadata\nDESCRIPTION: JSON configuration for specifying which countries' laws might affect content on a Nostr relay. The relay_countries field uses ISO 3166-1 alpha-2 country codes to indicate jurisdictions that may impact stored content.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"relay_countries\": [ \"CA\", \"US\" ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Web Application Integration with Nostr Signer\nDESCRIPTION: Complete example of a web application that integrates with a Nostr external signer. It handles callback data from the signer and provides a link to initiate the signing process for a simple Nostr event.\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n</head>\n<body>\n    <h1>Test</h1>\n\n    <script>\n        window.onload = function() {\n            var url = new URL(window.location.href);\n            var params = url.searchParams;\n            if (params) {\n                var param1 = params.get(\"event\");\n                if (param1) alert(param1)\n            }\n            let json = {\n                kind: 1,\n                content: \"test\"\n            }\n            let encodedJson = encodeURIComponent(JSON.stringify(json))\n            var newAnchor = document.createElement(\"a\");\n            newAnchor.href = `nostrsigner:${encodedJson}?compressionType=none&returnType=signature&type=sign_event&callbackUrl=https://example.com/?event=`;\n            newAnchor.textContent = \"Open External Signer\";\n            document.body.appendChild(newAnchor)\n        }\n    </script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Example of a Nostr Mute List with Public and Private Items\nDESCRIPTION: This JSON example demonstrates a kind 10000 event that implements a mute list according to NIP-51. It contains two public pubkeys in the tags array and additional encrypted items in the content field using NIP-04 encryption.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"a92a316b75e44cfdc19986c634049158d4206fcc0b7b9c7ccbcdabe28beebcd0\",\n  \"pubkey\": \"854043ae8f1f97430ca8c1f1a090bdde6488bd5115c7a45307a2a212750ae4cb\",\n  \"created_at\": 1699597889,\n  \"kind\": 10000,\n  \"tags\": [\n    [\"p\", \"07caba282f76441955b695551c3c5c742e5b9202a3784780f8086fdcdc1da3a9\"],\n    [\"p\", \"a55c15f5e41d5aebd236eca5e0142789c5385703f1a7485aa4b38d94fd18dcc4\"]\n  ],\n  \"content\": \"TJob1dQrf2ndsmdbeGU+05HT5GMnBSx3fx8QdDY/g3NvCa7klfzgaQCmRZuo1d3WQjHDOjzSY1+MgTK5WjewFFumCcOZniWtOMSga9tJk1ky00tLoUUzyLnb1v9x95h/iT/KpkICJyAwUZ+LoJBUzLrK52wNTMt8M5jSLvCkRx8C0BmEwA/00pjOp4eRndy19H4WUUehhjfV2/VV/k4hMAjJ7Bb5Hp9xdmzmCLX9+64+MyeIQQjQAHPj8dkSsRahP7KS3MgMpjaF8nL48Bg5suZMxJayXGVp3BLtgRZx5z5nOk9xyrYk+71e2tnP9IDvSMkiSe76BcMct+m7kGVrRcavDI4n62goNNh25IpghT+a1OjjkpXt9me5wmaL7fxffV1pchdm+A7KJKIUU3kLC7QbUifF22EucRA9xiEyxETusNludBXN24O3llTbOy4vYFsq35BeZl4v1Cse7n2htZicVkItMz3wjzj1q1I1VqbnorNXFgllkRZn4/YXfTG/RMnoK/bDogRapOV+XToZ+IvsN0BqwKSUDx+ydKpci6htDRF2WDRkU+VQMqwM0CoLzy2H6A2cqyMMMD9SLRRzBg==?iv=S3rFeFr1gsYqmQA7bNnNTQ==\",\n  \"sig\": \"1173822c53261f8cffe7efbf43ba4a97a9198b3e402c2a1df130f42a8985a2d0d3430f4de350db184141e45ca844ab4e5364ea80f11d720e36357e1853dba6ca\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Server API with NIP-96 JSON Configuration\nDESCRIPTION: JSON configuration file that file storage servers should make available at '/.well-known/nostr/nip96.json' to opt-in to the nostr ecosystem. Defines API endpoints, supported content types, and storage plans.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // Required\n  // File upload and deletion are served from this url\n  // Also downloads if \"download_url\" field is absent or empty string\n  \"api_url\": \"https://your-file-server.example/custom-api-path\",\n  // Optional\n  // If absent, downloads are served from the api_url\n  \"download_url\": \"https://a-cdn.example/a-path\",\n  // Optional\n  // Note: This field is not meant to be set by HTTP Servers.\n  // Use this if you are a nostr relay using your /.well-known/nostr/nip96.json\n  // just to redirect to someone else's http file storage server's /.well-known/nostr/nip96.json\n  // In this case, \"api_url\" field must be an empty string\n  \"delegated_to_url\": \"https://your-file-server.example\",\n  // Optional\n  \"supported_nips\": [60],\n  // Optional\n  \"tos_url\": \"https://your-file-server.example/terms-of-service\",\n  // Optional\n  \"content_types\": [\"image/jpeg\", \"video/webm\", \"audio/*\"],\n  // Optional\n  \"plans\": {\n    // \"free\" is the only standardized plan key and\n    // clients may use its presence to learn if server offers free storage\n    \"free\": {\n      \"name\": \"Free Tier\",\n      // Default is true\n      // All plans MUST support NIP-98 uploads\n      // but some plans may also allow uploads without it\n      \"is_nip98_required\": true,\n      \"url\": \"https://...\", // plan's landing page if there is one\n      \"max_byte_size\": 10485760,\n      // Range in days / 0 for no expiration\n      // [7, 0] means it may vary from 7 days to unlimited persistence,\n      // [0, 0] means it has no expiration\n      // early expiration may be due to low traffic or any other factor\n      \"file_expiration\": [14, 90],\n      \"media_transformations\": {\n        \"image\": [\n          \"resizing\"\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-04 Decryption via Content Resolver in Kotlin\nDESCRIPTION: Method to decrypt text encrypted with NIP-04 standard through Android's content resolver. It takes the encrypted text, the other party's public key, and user's public key as parameters and returns the decrypted content.\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = context.contentResolver.query(\n    Uri.parse(\"content://com.example.signer.NIP04_DECRYPT\"),\n    listOf(\"$encryptedText\", \"${hex_pub_key}\", \"${logged_in_user_pubkey}\"),\n    null,\n    null,\n    null\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nif (result == null) return\n\nif (it.getColumnIndex(\"rejected\") > -1) return\n\nif (result.moveToFirst()) {\n    val index = it.getColumnIndex(\"result\")\n    val encryptedText = it.getString(index)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Nostr Encrypted Messaging with NIP-44 in JavaScript\nDESCRIPTION: A comprehensive implementation of Nostr encrypted messaging using the NIP-44 standard. The code includes functions for creating rumors (unsigned events with IDs), sealing them with encryption for a specific recipient, wrapping events for additional security, and the corresponding decryption functions. It also demonstrates a complete test case of the messaging flow.\n\nLANGUAGE: javascript\nCODE:\n```\nimport {bytesToHex} from \"@noble/hashes/utils\"\nimport type {EventTemplate, UnsignedEvent, Event} from \"nostr-tools\"\nimport {getPublicKey, getEventHash, nip19, nip44, finalizeEvent, generateSecretKey} from \"nostr-tools\"\n\ntype Rumor = UnsignedEvent & {id: string}\n\nconst TWO_DAYS = 2 * 24 * 60 * 60\n\nconst now = () => Math.round(Date.now() / 1000)\nconst randomNow = () => Math.round(now() - (Math.random() * TWO_DAYS))\n\nconst nip44ConversationKey = (privateKey: Uint8Array, publicKey: string) =>\n  nip44.v2.utils.getConversationKey(bytesToHex(privateKey), publicKey)\n\nconst nip44Encrypt = (data: EventTemplate, privateKey: Uint8Array, publicKey: string) =>\n  nip44.v2.encrypt(JSON.stringify(data), nip44ConversationKey(privateKey, publicKey))\n\nconst nip44Decrypt = (data: Event, privateKey: Uint8Array) =>\n  JSON.parse(nip44.v2.decrypt(data.content, nip44ConversationKey(privateKey, data.pubkey)))\n\nconst createRumor = (event: Partial<UnsignedEvent>, privateKey: Uint8Array) => {\n  const rumor = {\n    created_at: now(),\n    content: \"\",\n    tags: [],\n    ...event,\n    pubkey: getPublicKey(privateKey),\n  } as any\n\n  rumor.id = getEventHash(rumor)\n\n  return rumor as Rumor\n}\n\nconst createSeal = (rumor: Rumor, privateKey: Uint8Array, recipientPublicKey: string) => {\n  return finalizeEvent(\n    {\n      kind: 13,\n      content: nip44Encrypt(rumor, privateKey, recipientPublicKey),\n      created_at: randomNow(),\n      tags: [],\n    },\n    privateKey\n  ) as Event\n}\n\nconst createWrap = (event: Event, recipientPublicKey: string) => {\n  const randomKey = generateSecretKey()\n\n  return finalizeEvent(\n    {\n      kind: 1059,\n      content: nip44Encrypt(event, randomKey, recipientPublicKey),\n      created_at: randomNow(),\n      tags: [[\"p\", recipientPublicKey]],\n    },\n    randomKey\n  ) as Event\n}\n\n// Test case using the above example\nconst senderPrivateKey = nip19.decode(`nsec1p0ht6p3wepe47sjrgesyn4m50m6avk2waqudu9rl324cg2c4ufesyp6rdg`).data\nconst recipientPrivateKey = nip19.decode(`nsec1uyyrnx7cgfp40fcskcr2urqnzekc20fj0er6de0q8qvhx34ahazsvs9p36`).data\nconst recipientPublicKey = getPublicKey(recipientPrivateKey)\n\nconst rumor = createRumor(\n  {\n    kind: 1,\n    content: \"Are you going to the party tonight?\",\n  },\n  senderPrivateKey\n)\n\nconst seal = createSeal(rumor, senderPrivateKey, recipientPublicKey)\nconst wrap = createWrap(seal, recipientPublicKey)\n\n// Recipient unwraps with their private key.\n\nconst unwrappedSeal = nip44Decrypt(wrap, recipientPrivateKey)\nconst unsealedRumor = nip44Decrypt(unwrappedSeal, recipientPrivateKey)\n```\n\n----------------------------------------\n\nTITLE: Decoding Private Key Example (Nostr bech32 Format)\nDESCRIPTION: Example showing how the hex private key should be encoded to and decoded from bech32 format with the 'nsec' prefix.\n\nLANGUAGE: markdown\nCODE:\n```\nnsec1vl029mgpspedva04g90vltkh6fvh240zqtv9k0t9af8935ke9laqsnlfe5 should decode into the private key hex 67dea2ed018072d675f5415ecfaed7d2597555e202d85b3d65ea4e58d2d92ffa and vice-versa\n```\n\n----------------------------------------\n\nTITLE: Defining Picture Event Structure using JSON in Nostr (Kind 20)\nDESCRIPTION: This snippet defines the JSON structure for a Nostr picture event (kind 20). It includes fields for content description, title tag, image metadata with the 'imeta' tag format, content warnings, user tags, media type specifications, and location information.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": <32-bytes lowercase hex-encoded SHA-256 of the the serialized event data>,\n  \"pubkey\": <32-bytes lowercase hex-encoded public key of the event creator>,\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 20,\n  \"content\": \"<description of post>\",\n  \"tags\": [\n    [\"title\", \"<short title of post>\"],\n\n    // Picture Data\n    [\n      \"imeta\",\n      \"url https://nostr.build/i/my-image.jpg\",\n      \"m image/jpeg\",\n      \"blurhash eVF$^OI:${M{o#*0-nNFxakD-?xVM}WEWB%iNKxvR-oetmo#R-aen$\",\n      \"dim 3024x4032\",\n      \"alt A scenic photo overlooking the coast of Costa Rica\",\n      \"x <sha256 hash as specified in NIP 94>\",\n      \"fallback https://nostrcheck.me/alt1.jpg\",\n      \"fallback https://void.cat/alt1.jpg\"\n    ],\n    [\n      \"imeta\",\n      \"url https://nostr.build/i/my-image2.jpg\",\n      \"m image/jpeg\",\n      \"blurhash eVF$^OI:${M{o#*0-nNFxakD-?xVM}WEWB%iNKxvR-oetmo#R-aen$\",\n      \"dim 3024x4032\",\n      \"alt Another scenic photo overlooking the coast of Costa Rica\",\n      \"x <sha256 hash as specified in NIP 94>\",\n      \"fallback https://nostrcheck.me/alt2.jpg\",\n      \"fallback https://void.cat/alt2.jpg\",\n\n      \"annotate-user <32-bytes hex of a pubkey>:<posX>:<posY>\" // Tag users in specific locations in the picture\n    ],\n\n    [\"content-warning\", \"<reason>\"], // if NSFW\n\n    // Tagged users\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\"],\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\"],\n\n    // Specify the media type for filters to allow clients to filter by supported kinds\n    [\"m\", \"image/jpeg\"],\n\n    // Hashes of each image to make them queryable\n    [\"x\", \"<sha256>\"]\n\n    // Hashtags\n    [\"t\", \"<tag>\"],\n    [\"t\", \"<tag>\"],\n\n    // location\n    [\"location\", \"<location>\"], // city name, state, country\n    [\"g\", \"<geohash>\"],\n\n    // When text is written in the image, add the tag to represent the language\n    [\"L\", \"ISO-639-1\"],\n    [\"l\", \"en\", \"ISO-639-1\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Upload Response in NIP-96\nDESCRIPTION: JSON response format for file uploads, including status information, download URL, and file metadata in NIP-94 event format. Contains the original file hash and optional transformed file hash.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // \"success\" if successful or \"error\" if not\n  \"status\": \"success\",\n  // Free text success, failure or info message\n  \"message\": \"Upload successful.\",\n  // Optional. See \"Delayed Processing\" section\n  \"processing_url\": \"...\",\n  // This uses the NIP-94 event format but DO NOT need\n  // to fill some fields like \"id\", \"pubkey\", \"created_at\" and \"sig\"\n  //\n  // This holds the download url (\"url\"),\n  // the ORIGINAL file hash before server transformations (\"ox\")\n  // and, optionally, all file metadata the server wants to make available\n  //\n  // nip94_event field is absent if unsuccessful upload\n  \"nip94_event\": {\n    // Required tags: \"url\" and \"ox\"\n    \"tags\": [\n      // Can be same from /.well-known/nostr/nip96.json's \"download_url\" field\n      // (or \"api_url\" field if \"download_url\" is absent or empty) with appended\n      // original file hash.\n      //\n      // Note we appended .png file extension to the `ox` value\n      // (it is optional but extremely recommended to add the extension as it will help nostr clients\n      // with detecting the file type by using regular expression)\n      //\n      // Could also be any url to download the file\n      // (using or not using the /.well-known/nostr/nip96.json's \"download_url\" prefix),\n      // for load balancing purposes for example.\n      [\"url\", \"https://your-file-server.example/custom-api-path/719171db19525d9d08dd69cb716a18158a249b7b3b3ec4bbdec5698dca104b7b.png\"],\n      // SHA-256 hash of the ORIGINAL file, before transformations.\n      // The server MUST store it even though it represents the ORIGINAL file because\n      // users may try to download/delete the transformed file using this value\n      [\"ox\", \"719171db19525d9d08dd69cb716a18158a249b7b3b3ec4bbdec5698dca104b7b\"],\n      // Optional. SHA-256 hash of the saved file after any server transformations.\n      // The server can but does not need to store this value.\n      [\"x\", \"543244319525d9d08dd69cb716a18158a249b7b3b3ec4bbde5435543acb34443\"],\n      // Optional. Recommended for helping clients to easily know file type before downloading it.\n      [\"m\", \"image/png\"],\n      // Optional. Recommended for helping clients to reserve an adequate UI space to show the file before downloading it.\n      [\"dim\", \"800x600\"]\n      // ... other optional NIP-94 tags\n    ],\n    \"content\": \"\"\n  },\n  // ... other custom fields (please consider adding them to this NIP or to NIP-94 tags)\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-04 Encryption via Content Resolver in Kotlin\nDESCRIPTION: Method to encrypt text using NIP-04 standard through Android's content resolver. It takes plaintext, recipient's public key, and sender's public key as parameters and returns the encrypted content.\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = context.contentResolver.query(\n    Uri.parse(\"content://com.example.signer.NIP04_ENCRYPT\"),\n    listOf(\"$plainText\", \"${hex_pub_key}\", \"${logged_in_user_pubkey}\"),\n    null,\n    null,\n    null\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nif (result == null) return\n\nif (it.getColumnIndex(\"rejected\") > -1) return\n\nif (result.moveToFirst()) {\n    val index = it.getColumnIndex(\"result\")\n    val encryptedText = it.getString(index)\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Messages using ChaCha20 and HMAC Authentication\nDESCRIPTION: Function to encrypt plaintext messages using the derived conversation key and a nonce. It performs padding, ChaCha20 encryption, and MAC generation for authentication.\n\nLANGUAGE: python\nCODE:\n```\ndef encrypt(plaintext, conversation_key, nonce):\n  (chacha_key, chacha_nonce, hmac_key) = get_message_keys(conversation_key, nonce)\n  padded = pad(plaintext)\n  ciphertext = chacha20(key=chacha_key, nonce=chacha_nonce, data=padded)\n  mac = hmac_aad(key=hmac_key, message=ciphertext, aad=nonce)\n  return base64_encode(concat(write_u8(2), nonce, ciphertext, mac))\n```\n\n----------------------------------------\n\nTITLE: Handling Delayed Processing Status Response in NIP-96\nDESCRIPTION: JSON response format for a processing status check endpoint. The server returns this when a file is still being processed, including the current status, a descriptive message, and the completion percentage.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // It should be \"processing\". If \"error\" it would mean the processing failed.\n  \"status\": \"processing\",\n  \"message\": \"Processing. Please check again later for updated status.\",\n  \"percentage\": 15 // Processing percentage. An integer between 0 and 100.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Event Structure in JSONC\nDESCRIPTION: Demonstrates the structure of a request event (kind 24133) sent from client to remote signer, including encryption of the content field using NIP-44.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 24133,\n    \"pubkey\": <local_keypair_pubkey>,\n    \"content\": <nip44(<request>)>,\n    \"tags\": [[\"p\", <remote-signer-pubkey>]],\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Messages with MAC Verification\nDESCRIPTION: Function to decrypt encrypted messages using the conversation key. It extracts components from the payload, verifies the MAC for integrity, and then decrypts and unpads the message.\n\nLANGUAGE: python\nCODE:\n```\ndef decrypt(payload, conversation_key):\n  (nonce, ciphertext, mac) = decode_payload(payload)\n  (chacha_key, chacha_nonce, hmac_key) = get_message_keys(conversation_key, nonce)\n  calculated_mac = hmac_aad(key=hmac_key, message=ciphertext, aad=nonce)\n  if not is_equal_ct(calculated_mac, mac): raise Exception('invalid MAC')\n  padded_plaintext = chacha20(key=chacha_key, nonce=chacha_nonce, data=ciphertext)\n  return unpad(padded_plaintext)\n```\n\n----------------------------------------\n\nTITLE: Defining Nostr Event Format for Custom App Data\nDESCRIPTION: Specification of the Nostr event format for storing application-specific data. It uses event kind 30078 (an addressable event) with a 'd' tag containing reference to the app name and context.\n\nLANGUAGE: markdown\nCODE:\n```\n## Nostr event\n\nThis NIP specifies the use of event kind `30078` (an _addressable_ event) with a `d` tag containing some reference to the app name and context -- or any other arbitrary string. `content` and other `tags` can be anything or in any format.\n```\n\n----------------------------------------\n\nTITLE: Example Badge Definition Event in Nostr (jsonc)\nDESCRIPTION: A sample Badge Definition event (kind 30009) that defines a 'Medal of Bravery' badge. It includes tags for the badge identifier, name, description, high-resolution image URL with dimensions, and a thumbnail image URL with dimensions.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"pubkey\": \"alice\",\n  \"kind\": 30009,\n  \"tags\": [\n    [\"d\", \"bravery\"],\n    [\"name\", \"Medal of Bravery\"],\n    [\"description\", \"Awarded to users demonstrating bravery\"],\n    [\"image\", \"https://nostr.academy/awards/bravery.png\", \"1024x1024\"],\n    [\"thumb\", \"https://nostr.academy/awards/bravery_256x256.png\", \"256x256\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: File Listing Response in NIP-96\nDESCRIPTION: JSON response format for listing files associated with a user's public key. The response includes pagination details and an array of NIP-94 events representing the files with their metadata.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"count\": 1, // server page size, eg. max(1, min(server_max_page_size, arg_count))\n  \"total\": 1, // total number of files\n  \"page\": 0, // the current page number\n  \"files\": [\n    {\n      \"tags\": [\n        [\"ox\", \"719171db19525d9d08dd69cb716a18158a249b7b3b3ec4bbdec5698dca104b7b\"],\n        [\"x\", \"5d2899290e0e69bcd809949ee516a4a1597205390878f780c098707a7f18e3df\"],\n        [\"size\", \"123456\"],\n        [\"alt\", \"a meme that makes you laugh\"],\n        [\"expiration\",  \"1715691139\"],\n        // ...other metadata\n      ],\n      \"content\": \"haha funny meme\", // caption\n      \"created_at\": 1715691130 // upload timestamp\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Event Structure in JSON\nDESCRIPTION: Shows the structure of a response event (kind 24133) sent from remote signer to client, including the encrypted content field.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": <id>,\n    \"kind\": 24133,\n    \"pubkey\": <remote-signer-pubkey>,\n    \"content\": <nip44(<response>)>,\n    \"tags\": [[\"p\", <client-pubkey>]],\n    \"created_at\": <unix timestamp in seconds>\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Structure for a Nostr Note with Profile Mention\nDESCRIPTION: This snippet demonstrates the JSON structure of a Nostr event (note) that includes a profile mention. The mention appears in human-readable form as '@mattn' but is stored in the content as a nostr:nprofile URL. The example also shows the corresponding p-tag that enables notification functionality.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"hello nostr:nprofile1qqszclxx9f5haga8sfjjrulaxncvkfekj097t6f3pu65f86rvg49ehqj6f9dh\",\n  \"created_at\": 1679790774,\n  \"id\": \"f39e9b451a73d62abc5016cffdd294b1a904e2f34536a208874fe5e22bbd47cf\",\n  \"kind\": 1,\n  \"pubkey\": \"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\n  \"sig\": \"f8c8bab1b90cc3d2ae1ad999e6af8af449ad8bb4edf64807386493163e29162b5852a796a8f474d6b1001cddbaac0de4392838574f5366f03cc94cf5dfb43f4d\",\n  \"tags\": [\n    [\n      \"p\",\n      \"2c7cc62a697ea3a7826521f3fd34f0cb273693cbe5e9310f35449f43622a5cdc\"\n    ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-47 Info Event Example in Nostr Protocol\nDESCRIPTION: Example of a NIP-47 info event (kind 13194) in the Nostr protocol. This event advertises supported capabilities of a wallet service, including payment operations, balance queries, and notification types that can be subscribed to.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": \"df467db0a9f9ec77ffe6f561811714ccaa2e26051c20f58f33c3d66d6c2b4d1c\",\n  \"pubkey\": \"c04ccd5c82fc1ea3499b9c6a5c0a7ab627fbe00a0116110d4c750faeaecba1e2\",\n  \"created_at\": 1713883677,\n  \"kind\": 13194,\n  \"tags\": [\n    [\n      \"notifications\",\n      \"payment_received payment_sent\"\n    ]\n  ],\n  \"content\": \"pay_invoice pay_keysend get_balance get_info make_invoice lookup_invoice list_transactions multi_pay_invoice multi_pay_keysend sign_message notifications\",\n  \"sig\": \"31f57b369459b5306a5353aa9e03be7fbde169bc881c3233625605dd12f53548179def16b9fe1137e6465d7e4d5bb27ce81fd6e75908c46b06269f4233c845d8\"\n}\n```\n\n----------------------------------------\n\nTITLE: Remote Signer Metadata in NIP-05 Well-Known JSON Format\nDESCRIPTION: Shows how a remote-signer can publish its metadata through a NIP-05 well-known JSON file. The file includes the signer's public key, relay information, and an optional URL template for redirecting users to the connection flow.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"names\":{\n        \"_\": <remote-signer-app-pubkey>,\n    },\n    \"nip46\": {\n        \"relays\": [\"wss://relay1\",\"wss://relay2\"...],\n        \"nostrconnect_url\": \"https://remote-signer-domain.example/<nostrconnect>\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Comment Structure in Nostr\nDESCRIPTION: Defines the basic structure of a comment event in Nostr using kind:1111. The example shows how to properly tag root and parent events, including their authors and kinds. Comments can reference events, addresses, or external identifiers.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  kind: 1111,\n  content: '<comment>',\n  tags: [\n    // root scope: event addresses, event ids, or I-tags.\n    [\"<A, E, I>\", \"<address, id or I-value>\", \"<relay or web page hint>\", \"<root event's pubkey, if an E tag>\"],\n    // the root item kind\n    [\"K\", \"<root kind>\"],\n\n    // pubkey of the author of the root scope event\n    [\"P\", \"<root-pubkey>\", \"relay-url-hint\"],\n\n    // parent item: event addresses, event ids, or i-tags.\n    [\"<a, e, i>\", \"<address, id or i-value>\", \"<relay or web page hint>\", \"<parent event's pubkey, if an e tag>\"],\n    // parent item kind\n    [\"k\", \"<parent comment kind>\"],\n\n    // parent item pubkey\n    [\"p\", \"<parent-pubkey>\", \"relay-url-hint\"]\n  ]\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Robust Relay Discovery Event Example (Kind 30166)\nDESCRIPTION: Demonstrates a comprehensive Relay Discovery event with multiple tags for filtering, including network type, supported NIPs, authentication requirements, geolocation, and round-trip time metrics.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<eventid>\",\n  \"pubkey\": \"<monitor's pubkey>\",\n  \"created_at\": \"<created_at  [some recent date ...]>\",\n  \"signature\": \"<signature>\",\n  \"content\": \"{}\",\n  \"kind\": 30166,\n  \"tags\": [  \n    [\"d\",\"wss://some.relay/\"],\n    [\"n\", \"clearnet\"],\n    [\"N\", \"40\"],\n    [\"N\", \"33\"],\n    [\"R\", \"!payment\"],\n    [\"R\", \"auth\"],\n    [\"g\", \"ww8p1r4t8\"],\n    [\"p\", \"somehexkey...\"],\n    [\"l\", \"en\", \"ISO-639-1\"],\n    [\"t\", \"nsfw\" ],\n    [\"rtt-open\", 234 ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Like Event in Swift for Nostr Protocol\nDESCRIPTION: A Swift function that creates a 'like' reaction event (kind 7) for the Nostr protocol. The function takes the user's public and private keys along with the event being liked, then constructs a properly formatted reaction event with appropriate tags and signs it.\n\nLANGUAGE: swift\nCODE:\n```\nfunc make_like_event(pubkey: String, privkey: String, liked: NostrEvent) -> NostrEvent {\n    tags.append([\"e\", liked.id, liked.source_relays.first ?? \"\"])\n    tags.append([\"p\", liked.pubkey])\n    tags.append([\"k\", String(liked.kind)])\n    let ev = NostrEvent(content: \"+\", pubkey: pubkey, kind: 7, tags: tags)\n    ev.calculate_id()\n    ev.sign(privkey: privkey)\n    return ev\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Invoice Lookup in Nostr Lightning API\nDESCRIPTION: The response for lookup_invoice returns complete invoice details including payment status, amount, creation time, and settlement time if paid. It includes all invoice metadata and the settlement status with preimage if the invoice has been paid.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"lookup_invoice\",\n    \"result\": {\n        \"type\": \"incoming\", // \"incoming\" for invoices, \"outgoing\" for payments\n        \"invoice\": \"string\", // encoded invoice, optional\n        \"description\": \"string\", // invoice's description, optional\n        \"description_hash\": \"string\", // invoice's description hash, optional\n        \"preimage\": \"string\", // payment's preimage, optional if unpaid\n        \"payment_hash\": \"string\", // Payment hash for the payment\n        \"amount\": 123, // value in msats\n        \"fees_paid\": 123, // value in msats\n        \"created_at\": unixtimestamp, // invoice/payment creation time\n        \"expires_at\": unixtimestamp, // invoice expiration time, optional if not applicable\n        \"settled_at\": unixtimestamp, // invoice/payment settlement time, optional if unpaid\n        \"metadata\": {} // generic metadata that can be used to add things like zap/boostagram details for a payer name/comment/etc.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for NWC Request\nDESCRIPTION: A JSON-RPC structure for client requests to wallet services. It contains a method name and parameters specific to the requested operation.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"pay_invoice\", // method, string\n    \"params\": { // params, object\n        \"invoice\": \"lnbc50n1...\" // command-related data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Kind 40 in Nostr\nDESCRIPTION: Demonstrates how to create a public chat channel using event kind 40. The content field includes essential metadata such as name, description, picture URL, and recommended relays for the channel.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"content\": \"{\\\"name\\\": \\\"Demo Channel\\\", \\\"about\\\": \\\"A test channel.\\\", \\\"picture\\\": \\\"https://placekitten.com/200/200\\\", \\\"relays\\\": [\\\"wss://nos.lol\\\", \\\"wss://nostr.mom\\\"]}\",\n // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Transaction History in Nostr Lightning API\nDESCRIPTION: The list_transactions method returns a paginated list of invoices and payments within a specified time range. Filters can be applied for transaction type, payment status, and time range, with results returned in descending chronological order.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"list_transactions\",\n    \"params\": {\n        \"from\": 1693876973, // starting timestamp in seconds since epoch (inclusive), optional\n        \"until\": 1703225078, // ending timestamp in seconds since epoch (inclusive), optional\n        \"limit\": 10, // maximum number of invoices to return, optional\n        \"offset\": 0, // offset of the first invoice to return, optional\n        \"unpaid\": true, // include unpaid invoices, optional, default false\n        \"type\": \"incoming\", // \"incoming\" for invoices, \"outgoing\" for payments, undefined for both\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for NWC Response\nDESCRIPTION: A JSON-RPC structure for wallet service responses to client requests. It includes the request type, error information (if applicable), and operation results.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"pay_invoice\", //indicates the structure of the result field\n    \"error\": { //object, non-null in case of error\n        \"code\": \"UNAUTHORIZED\", //string error code, see below\n        \"message\": \"human readable error message\"\n    },\n    \"result\": { // result, object. null in case of error.\n        \"preimage\": \"0123456789abcdef...\" // command-related data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example NWC Connection URI\nDESCRIPTION: A sample Nostr Wallet Connect URI used for establishing connection between clients and wallet services. It includes the wallet service's public key, relay information, and a secret for the client.\n\nLANGUAGE: sh\nCODE:\n```\nnostr+walletconnect://b889ff5b1513b641e2a139f661a661364979c5beee91842f8f0ef42ab558e9d4?relay=wss%3A%2F%2Frelay.damus.io&secret=71a8c14c1407c113601079c4302dab36460f0ccd0ad506f1f2dc73b5100e4f3c\n```\n\n----------------------------------------\n\nTITLE: Relay Monitor Announcement Event Example (Kind 10166)\nDESCRIPTION: Shows a comprehensive Relay Monitor Announcement event that specifies monitoring frequency, timeout values for different checks, and the types of checks performed by the monitor.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<eventid>\",\n  \"pubkey\": \"<monitor's pubkey>\",\n  \"created_at\": \"<created_at  [some recent date ...]>\",\n  \"signature\": \"<signature>\",\n  \"content\": \"\",\n  \"tags\": [  \n\n    [ \"timeout\", \"open\", \"5000\"  ],\n    [ \"timeout\", \"read\", \"3000\"  ],\n    [ \"timeout\", \"write\", \"3000\" ],\n    [ \"timeout\", \"nip11\", \"3000\" ],\n\n    [ \"frequency\", \"3600\" ],\n\n    [ \"c\", \"ws\" ],\n    [ \"c\", \"nip11\" ],\n    [ \"c\", \"ssl\" ],\n    [ \"c\", \"dns\" ],\n    [ \"c\", \"geo\" ]\n\n    [ \"g\", \"ww8p1r4t8\" ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the 'delegation' Tag Format in JSON\nDESCRIPTION: The format of the 'delegation' tag that is used to specify a delegated event signing relationship. It includes the delegator's public key, a conditions query string, and a delegation token signature.\n\nLANGUAGE: json\nCODE:\n```\n[\n  \"delegation\",\n  <pubkey of the delegator>,\n  <conditions query string>,\n  <delegation token: 64-byte Schnorr signature of the sha256 hash of the delegation string>\n]\n```\n\n----------------------------------------\n\nTITLE: Making Keysend Payments in Nostr Lightning API\nDESCRIPTION: The pay_keysend method allows direct payments to a node using the recipient's public key without an invoice. Required parameters include the amount in millisatoshis and the recipient's public key, with optional preimage and TLV records for additional data.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"pay_keysend\",\n    \"params\": {\n        \"amount\": 123, // invoice amount in msats, required\n        \"pubkey\": \"03...\", // payee pubkey, required\n        \"preimage\": \"0123456789abcdef...\", // preimage of the payment, optional\n        \"tlv_records\": [ // tlv records, optional\n            {\n                \"type\": 5482373484, // tlv type\n                \"value\": \"0123456789abcdef\" // hex encoded tlv value\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for NWC Notification\nDESCRIPTION: A JSON-RPC structure for wallet service notifications to clients. It specifies the notification type and contains data relevant to the notification.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"notification_type\": \"payment_received\", //indicates the structure of the notification field\n    \"notification\": {\n        \"payment_hash\": \"0123456789abcdef...\" // notification-related data\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nostr URI for a public key (npub)\nDESCRIPTION: An example of a 'nostr:' URI containing an 'npub' identifier, which represents a user's public key in bech32 format.\n\nLANGUAGE: plaintext\nCODE:\n```\nnostr:npub1sn0wdenkukak0d9dfczzeacvhkrgz92ak56egt7vdgzn8pv2wfqqhrjdv9\n```\n\n----------------------------------------\n\nTITLE: Response Format for Keysend Payments in Nostr Lightning API\nDESCRIPTION: The response for pay_keysend includes the payment preimage and optional fees paid in millisatoshis. This confirms the successful completion of the keysend payment to the specified node.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"pay_keysend\",\n    \"result\": {\n        \"preimage\": \"0123456789abcdef...\", // preimage of the payment\n        \"fees_paid\": 123, // value in msats, optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing search filter field in Nostr REQ messages\nDESCRIPTION: Example of the search filter field in a REQ message JSON structure. The search field contains a human-readable query string that relays should interpret to return matching events.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  // other fields on filter object...\n  \"search\": <string>\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Public Key Example (Nostr bech32 Format)\nDESCRIPTION: Example showing how the hex public key should be encoded to and decoded from bech32 format with the 'npub' prefix.\n\nLANGUAGE: markdown\nCODE:\n```\nnpub10elfcs4fr0l0r8af98jlmgdh9c8tcxjvz9qkw038js35mp4dma8qzvjptg should decode into the public key hex 7e7e9c42a91bfef19fa929e5fda1b72e0ebc1a4c1141673e2794234d86addf4e and vice-versa\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Metadata Event in Nostr (kind:39000)\nDESCRIPTION: Defines the structure of a group metadata event (kind:39000) which contains basic display information about a Nostr group. This event must be generated and signed by the relay where the group exists. It includes tags for group ID, name, picture, about text, and visibility settings.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 39000,\n  \"content\": \"\",\n  \"tags\": [\n    [\"d\", \"<group-id>\"],\n    [\"name\", \"Pizza Lovers\"],\n    [\"picture\", \"https://pizza.com/pizza.png\"],\n    [\"about\", \"a group for people who love pizza\"],\n    [\"public\"], // or [\"private\"]\n    [\"open\"] // or [\"closed\"]\n  ]\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Bunker Connection URI Format\nDESCRIPTION: Specifies the URI format for initiating a direct connection from a remote signer to a client, including the remote signer's public key and relay information.\n\nLANGUAGE: text\nCODE:\n```\nbunker://<remote-signer-pubkey>?relay=<wss://relay-to-connect-on>&relay=<wss://another-relay-to-connect-on>&secret=<optional-secret-value>\n```\n\n----------------------------------------\n\nTITLE: Requesting Multiple Invoice Payments in Nostr Lightning API\nDESCRIPTION: The multi_pay_invoice method allows payment of multiple Lightning Network invoices in a single request. Each invoice requires an ID for tracking responses and a BOLT11 invoice string, with an optional amount parameter in millisatoshis.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"multi_pay_invoice\",\n    \"params\": {\n        \"invoices\": [\n          {\"id\":\"4da52c32a1\", \"invoice\": \"lnbc1...\", \"amount\": 123}, // bolt11 invoice and amount in msats, amount is optional\n          {\"id\":\"3da52c32a1\", \"invoice\": \"lnbc50n1...\"},\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Flags for Multiple Signing Operations\nDESCRIPTION: Code for adding flags to an intent to ensure multiple signing operations are handled efficiently without opening the signer application multiple times. This is useful when sending multiple intents without waiting for responses.\n\nLANGUAGE: kotlin\nCODE:\n```\nintent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP or Intent.FLAG_ACTIVITY_CLEAR_TOP)\n```\n\n----------------------------------------\n\nTITLE: Implementing Citation Tags in Nostr Direct Messages\nDESCRIPTION: JSON structure for citation tags (q tags) that can be used in direct messages when referencing other events using NIP-21. These tags include the event ID or address, relay URL, and optionally the pubkey for regular events.\n\nLANGUAGE: json\nCODE:\n```\n[\"q\", \"<event-id> or <event-address>\", \"<relay-url>\", \"<pubkey-if-a-regular-event>\"]\n```\n\n----------------------------------------\n\nTITLE: Checking CORS Configuration for NIP-05 Endpoints\nDESCRIPTION: Bash command to verify that a server is properly configured with CORS headers to allow JavaScript applications to access the NIP-05 endpoint. This is essential for browser-based Nostr clients.\n\nLANGUAGE: bash\nCODE:\n```\n$ curl -sI https://example.com/.well-known/nostr.json?name=bob | grep -i ^Access-Control\nAccess-Control-Allow-Origin: *\n```\n\n----------------------------------------\n\nTITLE: Implementing get_public_key Method for Nostr Signer\nDESCRIPTION: Code for requesting a public key from a Nostr signer application. This includes setting up the intent with default permissions the user can authorize permanently, including sign_event and nip44_decrypt permissions.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:\"))\nintent.putExtra(\"type\", \"get_public_key\")\n// You can send some default permissions for the user to authorize for ever\nval permissions = listOf(\n  Permission(\n      type = \"sign_event\",\n      kind = 22242\n  ),\n  Permission(\n      type = \"nip44_decrypt\"\n  )\n)\nintent.putExtra(\"permissions\", permissions.toJson())\ncontext.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: Implementing File Message Schema in Nostr (Kind 15)\nDESCRIPTION: JSON structure for a kind 15 file message event in Nostr. It includes encryption details, file metadata, and URL. This event type is used for encrypted file sharing in direct messages and must never be signed directly.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": \"<usual hash>\",\n  \"pubkey\": \"<sender-pubkey>\",\n  \"created_at\": \"<current-time>\",\n  \"kind\": 15,\n  \"tags\": [\n    [\"p\", \"<receiver-1-pubkey>\", \"<relay-url>\"],\n    [\"p\", \"<receiver-2-pubkey>\", \"<relay-url>\"],\n    [\"e\", \"<kind-14-id>\", \"<relay-url>\", \"reply\"], // if this is a reply\n    [\"subject\", \"<conversation-title>\"],\n    [\"file-type\", \"<file-mime-type>\"],\n    [\"encryption-algorithm\", \"<encryption-algorithm>\"],\n    [\"decryption-key\", \"<decryption-key>\"],\n    [\"decryption-nonce\", \"<decryption-nonce>\"],\n    [\"x\", \"<the SHA-256 hexencoded string of the file>\"],\n    // rest of tags...\n  ],\n  \"content\": \"<file-url>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Repository Announcement Event Structure in Nostr (NIP-34)\nDESCRIPTION: Defines the event format for announcing git repositories on Nostr. This event includes repository identifiers, metadata, and URLs for cloning and browsing. It also specifies relays that will monitor for patches and issues related to the repository.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 30617,\n  \"content\": \"\",\n  \"tags\": [\n    [\"d\", \"<repo-id>\"], // usually kebab-case short name\n    [\"name\", \"<human-readable project name>\"],\n    [\"description\", \"brief human-readable project description>\"],\n    [\"web\", \"<url for browsing>\", ...], // a webpage url, if the git server being used provides such a thing\n    [\"clone\", \"<url for git-cloning>\", ...], // a url to be given to `git clone` so anyone can clone it\n    [\"relays\", \"<relay-url>\", ...], // relays that this repository will monitor for patches and issues\n    [\"r\", \"<earliest-unique-commit-id>\", \"euc\"],\n    [\"maintainers\", \"<other-recognized-maintainer>\", ...],\n    [\"t\", \"<arbitrary string>\"], // hashtags labelling the repository\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nostr Event with Expiration Tag in JSON\nDESCRIPTION: This example shows a Nostr event of kind 1 with an expiration tag set to Unix timestamp 1600000000. The event demonstrates how to properly format the expiration tag in a Nostr event structure.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pubkey\": \"<pub-key>\",\n  \"created_at\": 1000000000,\n  \"kind\": 1,\n  \"tags\": [\n    [\"expiration\", \"1600000000\"]\n  ],\n  \"content\": \"This message will expire at the specified timestamp and be deleted by relays.\\n\",\n  \"id\": \"<event-id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Recommended NIP-05 Response with Relays Information\nDESCRIPTION: Enhanced NIP-05 response format that includes recommended relays for each public key. This helps clients discover where to find events from specific users and is the recommended implementation.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"names\": {\n    \"bob\": \"b0635d6a9851d3aed0cd6c495b282167acf761729078d975fc341b22650b07b9\"\n  },\n  \"relays\": {\n    \"b0635d6a9851d3aed0cd6c495b282167acf761729078d975fc341b22650b07b9\": [ \"wss://relay.example.com\", \"wss://relay2.example.com\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing nip04_encrypt Response\nDESCRIPTION: Code for handling the response from a nip04_encrypt request to a Nostr signer. This extracts the encrypted text and the tracking ID from the intent data.\n\nLANGUAGE: kotlin\nCODE:\n```\nval encryptedText = intent.data?.getStringExtra(\"result\")\n// the id you sent\nval id = intent.data?.getStringExtra(\"id\")\n```\n\n----------------------------------------\n\nTITLE: Torrent Representation Structure in Nostr using kind 2003\nDESCRIPTION: JSON structure for representing a torrent in Nostr protocol. The example shows a torrent event with BitTorrent info hash, file listings, trackers, categorization tags, and external database references. This structure enables searchable torrent indexing without storing the torrent files themselves.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 2003,\n  \"content\": \"<long-description-pre-formatted>\",\n  \"tags\": [\n    [\"title\", \"<torrent-title>\"],\n    [\"x\", \"<bittorrent-info-hash>\"],\n    [\"file\", \"<file-name>\", \"<file-size-in-bytes>\"],\n    [\"file\", \"<file-name>\", \"<file-size-in-bytes>\"],\n    [\"tracker\", \"udp://mytacker.com:1337\"],\n    [\"tracker\", \"http://1337-tracker.net/announce\"],\n    [\"i\", \"tcat:video,movie,4k\"],\n    [\"i\", \"newznab:2045\"],\n    [\"i\", \"imdb:tt15239678\"],\n    [\"i\", \"tmdb:movie:693134\"],\n    [\"i\", \"ttvdb:movie:290272\"],\n    [\"t\", \"movie\"],\n    [\"t\", \"4k\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nostr User Metadata Event with NIP-05 Identifier\nDESCRIPTION: Example of a Nostr event of kind 0 (user metadata) that includes a NIP-05 identifier in the content field. The client uses this identifier to verify the association between the pubkey and the identifier.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"pubkey\": \"b0635d6a9851d3aed0cd6c495b282167acf761729078d975fc341b22650b07b9\",\n  \"kind\": 0,\n  \"content\": \"{\\\"name\\\": \\\"bob\\\", \\\"nip05\\\": \\\"bob@example.com\\\"}\"\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing nip44_encrypt Method for Nostr Signer\nDESCRIPTION: Code for requesting NIP-44 encryption from a Nostr signer application. This includes the plaintext to encrypt, an ID for tracking, the current user's public key, and the recipient's public key for encryption.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:$plaintext\"))\nintent.`package` = \"com.example.signer\"\nintent.putExtra(\"type\", \"nip44_encrypt\")\n// to control the result in your application in case you are not waiting the result before sending another intent\nintent.putExtra(\"id\", \"some_id\")\n// Send the current logged in user pubkey\nintent.putExtra(\"current_user\", account.keyPair.pubkey)\n// Send the hex pubkey that will be used for encrypting the data\nintent.putExtra(\"pubkey\", pubkey)\n\ncontext.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: Implementing DM Relay Preferences in Nostr (Kind 10050)\nDESCRIPTION: JSON structure for kind 10050 event that specifies a user's preferred relays for receiving direct messages. Clients use this information to determine where to publish encrypted messages for a specific recipient.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 10050,\n  \"tags\": [\n    [\"relay\", \"wss://inbox.nostr.wine\"],\n    [\"relay\", \"wss://myrelay.nostr1.com\"],\n  ],\n  \"content\": \"\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-44 Encryption via Content Resolver in Kotlin\nDESCRIPTION: Method to encrypt text using NIP-44 standard through Android's content resolver. It takes plaintext, recipient's public key, and sender's public key as parameters and returns the encrypted content.\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = context.contentResolver.query(\n    Uri.parse(\"content://com.example.signer.NIP44_ENCRYPT\"),\n    listOf(\"$plainText\", \"${hex_pub_key}\", \"${logged_in_user_pubkey}\"),\n    null,\n    null,\n    null\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nif (result == null) return\n\nif (it.getColumnIndex(\"rejected\") > -1) return\n\nif (result.moveToFirst()) {\n    val index = it.getColumnIndex(\"result\")\n    val encryptedText = it.getString(index)\n}\n```\n\n----------------------------------------\n\nTITLE: Nostr GiftWrap Message for Receiver in JSON\nDESCRIPTION: JSON representation of a GiftWrap (kind 1059) event sent to the receiver of a private message. This event contains encrypted content intended for the recipient with pubkey starting with 918e2d.\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":\"2886780f7349afc1344047524540ee716f7bdc1b64191699855662330bf235d8\",\n   \"pubkey\":\"8f8a7ec43b77d25799281207e1a47f7a654755055788f7482653f9c9661c6d51\",\n   \"created_at\":1703128320,\n   \"kind\":1059,\n   \"tags\":[\n      [ \"p\", \"918e2da906df4ccd12c8ac672d8335add131a4cf9d27ce42b3bb3625755f0788\"]\n   ],\n   \"content\":\"AsqzdlMsG304G8h08bE67dhAR1gFTzTckUUyuvndZ8LrGCvwI4pgC3d6hyAK0Wo9gtkLqSr2rT2RyHlE5wRqbCOlQ8WvJEKwqwIJwT5PO3l2RxvGCHDbd1b1o40ZgIVwwLCfOWJ86I5upXe8K5AgpxYTOM1BD+SbgI5jOMA8tgpRoitJedVSvBZsmwAxXM7o7sbOON4MXHzOqOZpALpS2zgBDXSAaYAsTdEM4qqFeik+zTk3+L6NYuftGidqVluicwSGS2viYWr5OiJ1zrj1ERhYSGLpQnPKrqDaDi7R1KrHGFGyLgkJveY/45y0rv9aVIw9IWF11u53cf2CP7akACel2WvZdl1htEwFu/v9cFXD06fNVZjfx3OssKM/uHPE9XvZttQboAvP5UoK6lv9o3d+0GM4/3zP+yO3C0NExz1ZgFmbGFz703YJzM+zpKCOXaZyzPjADXp8qBBeVc5lmJqiCL4solZpxA1865yPigPAZcc9acSUlg23J1dptFK4n3Tl5HfSHP+oZ/QS/SHWbVFCtq7ZMQSRxLgEitfglTNz9P1CnpMwmW/Y4Gm5zdkv0JrdUVrn2UO9ARdHlPsW5ARgDmzaxnJypkfoHXNfxGGXWRk0sKLbz/ipnaQP/eFJv/ibNuSfqL6E4BnN/tHJSHYEaTQ/PdrA2i9laG3vJti3kAl5Ih87ct0w/tzYfp4SRPhEF1zzue9G/16eJEMzwmhQ5Ec7jJVcVGa4RltqnuF8unUu3iSRTQ+/MNNUkK6Mk+YuaJJs6Fjw6tRHuWi57SdKKv7GGkr0zlBUU2Dyo1MwpAqzsCcCTeQSv+8qt4wLf4uhU9Br7F/L0ZY9bFgh6iLDCdB+4iABXyZwT7Ufn762195hrSHcU4Okt0Zns9EeiBOFxnmpXEslYkYBpXw70GmymQfJlFOfoEp93QKCMS2DAEVeI51dJV1e+6t3pCSsQN69Vg6jUCsm1TMxSs2VX4BRbq562+VffchvW2BB4gMjsvHVUSRl8i5/ZSDlfzSPXcSGALLHBRzy+gn0oXXJ/447VHYZJDL3Ig8+QW5oFMgnWYhuwI5QSLEyflUrfSz+Pdwn/5eyjybXKJftePBD9Q+8NQ8zulU5sqvsMeIx/bBUx0fmOXsS3vjqCXW5IjkmSUV7q54GewZqTQBlcx+90xh/LSUxXex7UwZwRnifvyCbZ+zwNTHNb12chYeNjMV7kAIr3cGQv8vlOMM8ajyaZ5KVy7HpSXQjz4PGT2/nXbL5jKt8Lx0erGXsSsazkdoYDG3U\",\n   \"sig\":\"a3c6ce632b145c0869423c1afaff4a6d764a9b64dedaf15f170b944ead67227518a72e455567ca1c2a0d187832cecbde7ed478395ec4c95dd3e71749ed66c480\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic NIP-05 Response JSON Format\nDESCRIPTION: Example of a basic response from the NIP-05 well-known endpoint that maps usernames to public keys. The client verifies if the pubkey in this response matches the one from the user metadata event.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"names\": {\n    \"bob\": \"b0635d6a9851d3aed0cd6c495b282167acf761729078d975fc341b22650b07b9\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing nip04_decrypt Response\nDESCRIPTION: Code for handling the response from a nip04_decrypt request to a Nostr signer. This extracts the plaintext and the tracking ID from the intent data.\n\nLANGUAGE: kotlin\nCODE:\n```\nval plainText = intent.data?.getStringExtra(\"result\")\n// the id you sent\nval id = intent.data?.getStringExtra(\"id\")\n```\n\n----------------------------------------\n\nTITLE: Defining q tag structure for Quote Reposts in nostr\nDESCRIPTION: Shows the standard format for q tags in nostr quote reposts. The tag contains the event ID, relay URL, and pubkey of the quoted content, allowing clients to properly link and display quoted content.\n\nLANGUAGE: markdown\nCODE:\n```\n[\"q\", <event-id>, <relay-url>, <pubkey>]\n```\n\n----------------------------------------\n\nTITLE: Example Signature Request in JSONC\nDESCRIPTION: Provides a complete example of a signature request event from client to remote signer, including the NIP-44 encrypted content field with event details.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 24133,\n    \"pubkey\": \"eff37350d839ce3707332348af4549a96051bd695d3223af4aabce4993531d86\",\n    \"content\": nip44({\n        \"id\": <random_string>,\n        \"method\": \"sign_event\",\n        \"params\": [json_stringified(<{\n            content: \"Hello, I'm signing remotely\",\n            kind: 1,\n            tags: [],\n            created_at: 1714078911\n        }>)]\n    }),\n    \"tags\": [[\"p\", \"fa984bd7dbb282f07e16e7ae87b26a2a7b9b90b7246a44771f0cf5ae58018f52\"]], // p-tags the remote-signer-pubkey\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing decrypt_zap_event Method for Nostr Signer\nDESCRIPTION: Code for requesting zap event decryption from a Nostr signer application. This includes the encrypted event JSON, an ID for tracking, and the current user's public key.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:$eventJson\"))\nintent.`package` = \"com.example.signer\"\nintent.putExtra(\"type\", \"decrypt_zap_event\")\n// to control the result in your application in case you are not waiting the result before sending another intent\nintent.putExtra(\"id\", \"some_id\")\n// Send the current logged in user pubkey\nintent.putExtra(\"current_user\", account.keyPair.pubkey)\ncontext.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: Top-Level Comment on a Blog Post\nDESCRIPTION: Example of a top-level comment on a blog post in Nostr. Shows how to reference the root post using event addresses and includes proper tagging of the root event kind and author.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  kind: 1111,\n  content: 'Great blog post!',\n  tags: [\n    // top-level comments scope to event addresses or ids\n    [\"A\", \"30023:3c9849383bdea883b0bd16fece1ed36d37e37cdde3ce43b17ea4e9192ec11289:f9347ca7\", \"wss://example.relay\"],\n    // the root kind\n    [\"K\", \"30023\"],\n    // author of root event\n    [\"P\", \"3c9849383bdea883b0bd16fece1ed36d37e37cdde3ce43b17ea4e9192ec11289\", \"wss://example.relay\"]\n\n    // the parent event address (same as root for top-level comments)\n    [\"a\", \"30023:3c9849383bdea883b0bd16fece1ed36d37e37cdde3ce43b17ea4e9192ec11289:f9347ca7\", \"wss://example.relay\"],\n    // when the parent event is replaceable or addressable, also include an `e` tag referencing its id\n    [\"e\", \"5b4fc7fed15672fefe65d2426f67197b71ccc82aa0cc8a9e94f683eb78e07651\", \"wss://example.relay\"],\n    // the parent event kind\n    [\"k\", \"30023\"],\n    // author of the parent event\n    [\"p\", \"3c9849383bdea883b0bd16fece1ed36d37e37cdde3ce43b17ea4e9192ec11289\", \"wss://example.relay\"]\n  ]\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key via URL Scheme in JavaScript\nDESCRIPTION: Method to request a user's public key through the nostrsigner URL scheme in web applications. It can optionally include a callback URL to receive the result.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.href = `nostrsigner:?compressionType=none&returnType=signature&type=get_public_key&callbackUrl=https://example.com/?event=`;\n```\n\n----------------------------------------\n\nTITLE: Top-Level Comment on a NIP-94 File\nDESCRIPTION: Example of a comment on a file event (kind:1063) in Nostr. Shows proper tagging for file comments, including root and parent event references with their corresponding kinds and authors.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  kind: 1111,\n  content: 'Great file!',\n  tags: [\n    // top-level comments have the same scope and reply to addresses or ids\n    [\"E\", \"768ac8720cdeb59227cf95e98b66560ef03d8bc9a90d721779e76e68fb42f5e6\", \"wss://example.relay\", \"3721e07b079525289877c366ccab47112bdff3d1b44758ca333feb2dbbbbe5bb\"],\n    // the root kind\n    [\"K\", \"1063\"],\n    // author of the root event\n    [\"P\", \"3721e07b079525289877c366ccab47112bdff3d1b44758ca333feb2dbbbbe5bb\"],\n\n    // the parent event id (same as root for top-level comments)\n    [\"e\", \"768ac8720cdeb59227cf95e98b66560ef03d8bc9a90d721779e76e68fb42f5e6\", \"wss://example.relay\", \"3721e07b079525289877c366ccab47112bdff3d1b44758ca333feb2dbbbbe5bb\"],\n    // the parent kind\n    [\"k\", \"1063\"],\n    [\"p\", \"3721e07b079525289877c366ccab47112bdff3d1b44758ca333feb2dbbbbe5bb\"]\n  ]\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Content Structure in JSONC\nDESCRIPTION: Shows the JSON-RPC-like structure of the encrypted content field in a request event, including ID, method name, and parameters.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"id\": <random_string>,\n    \"method\": <method_name>,\n    \"params\": [array_of_strings]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing decrypt_zap_event Response\nDESCRIPTION: Code for handling the response from a decrypt_zap_event request to a Nostr signer. This extracts the decrypted event JSON and the tracking ID from the intent data.\n\nLANGUAGE: kotlin\nCODE:\n```\nval eventJson = intent.data?.getStringExtra(\"result\")\n// the id you sent\nval id = intent.data?.getStringExtra(\"id\")\n```\n\n----------------------------------------\n\nTITLE: Comment on a Website URL\nDESCRIPTION: Example of creating a comment on a web article or URL. This format uses 'I' and 'i' tags to reference external web content rather than Nostr events, with 'K' and 'k' tags specifying the domain.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  kind: 1111,\n  content: 'Nice article!',\n  tags: [\n    // referencing the root url\n    [\"I\", \"https://abc.com/articles/1\"],\n    // the root \"kind\": for an url, the kind is its domain\n    [\"K\", \"https://abc.com\"],\n\n    // the parent reference (same as root for top-level comments)\n    [\"i\", \"https://abc.com/articles/1\"],\n    // the parent \"kind\": for an url, the kind is its domain\n    [\"k\", \"https://abc.com\"]\n  ]\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Response Content Structure in JSON\nDESCRIPTION: Shows the JSON-RPC-like structure of the encrypted content field in a response event, including ID, result, and optional error.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": <request_id>,\n    \"result\": <results_string>,\n    \"error\": <optional_error_string>\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Public Key via Content Resolver in Kotlin\nDESCRIPTION: Method to retrieve a user's public key through Android's content resolver. It queries the signer provider and extracts the pubkey from the result cursor.\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = context.contentResolver.query(\n    Uri.parse(\"content://com.example.signer.GET_PUBLIC_KEY\"),\n    listOf(\"login\"),\n    null,\n    null,\n    null\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nif (result == null) return\n\nif (it.getColumnIndex(\"rejected\") > -1) return\n\nif (result.moveToFirst()) {\n    val index = it.getColumnIndex(\"result\")\n    if (index < 0) return\n    val pubkey = it.getString(index)\n}\n```\n\n----------------------------------------\n\nTITLE: Top-Level Podcast Comment in Nostr\nDESCRIPTION: Example of commenting on a podcast episode. Uses external identifier tags ('I' and 'i') to reference podcast content by GUID, with hints to the location where the podcast can be accessed.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  id: \"80c48d992a38f9c445b943a9c9f1010b396676013443765750431a9004bdac05\",\n  pubkey: \"252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111\",\n  kind: 1111,\n  content: \"This was a great episode!\",\n  tags: [\n    // podcast episode reference\n    [\"I\", \"podcast:item:guid:d98d189b-dc7b-45b1-8720-d4b98690f31f\", \"https://fountain.fm/episode/z1y9TMQRuqXl2awyrQxg\"],\n    // podcast episode type\n    [\"K\", \"podcast:item:guid\"],\n\n    // same value as \"I\" tag above, because it is a top-level comment (not a reply to a comment)\n    [\"i\", \"podcast:item:guid:d98d189b-dc7b-45b1-8720-d4b98690f31f\", \"https://fountain.fm/episode/z1y9TMQRuqXl2awyrQxg\"],\n    [\"k\", \"podcast:item:guid\"]\n  ]\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Draft Event Structure in JavaScript for nostr Protocol\nDESCRIPTION: Defines the structure of a kind 31234 draft event that contains an encrypted draft of another event. The draft is encrypted using NIP-44 to the signer's public key and includes tags for identifying the draft type, related events, and other metadata.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"kind\": 31234,\n  \"tags\": [\n    [\"d\", \"<identifier>\"],\n    [\"k\", \"<kind of the draft event>\"],\n    [\"e\", \"<anchor event event id>\", \"<relay-url>\"],\n    [\"a\", \"<anchor event address>\", \"<relay-url>\"],\n  ],\n  \"content\": nip44Encrypt(JSON.stringify(draft_event)),\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Reply to a Podcast Comment in Nostr\nDESCRIPTION: Example of replying to an existing podcast comment. Maintains the original podcast reference while also linking to the parent comment event using 'e' and 'p' tags for the comment being replied to.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  kind: 1111,\n  content: \"I'm replying to the above comment.\",\n  tags: [\n    // podcast episode reference\n    [\"I\", \"podcast:item:guid:d98d189b-dc7b-45b1-8720-d4b98690f31f\", \"https://fountain.fm/episode/z1y9TMQRuqXl2awyrQxg\"],\n    // podcast episode type\n    [\"K\", \"podcast:item:guid\"],\n\n    // this is a reference to the above comment\n    [\"e\", \"80c48d992a38f9c445b943a9c9f1010b396676013443765750431a9004bdac05\", \"wss://example.relay\", \"252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111\"],\n    // the parent comment kind\n    [\"k\", \"1111\"]\n    [\"p\", \"252f10c83610ebca1a059c0bae8255eba2f95be4d1d7bcfa89d7248a82d9f111\"]\n  ]\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response Event in JSONC\nDESCRIPTION: Provides a complete example of a response event from remote signer to client, including the NIP-44 encrypted content field with the signed event.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 24133,\n    \"pubkey\": \"fa984bd7dbb282f07e16e7ae87b26a2a7b9b90b7246a44771f0cf5ae58018f52\",\n    \"content\": nip44({\n        \"id\": <random_string>,\n        \"result\": json_stringified(<signed-event>)\n    }),\n    \"tags\": [[\"p\", \"eff37350d839ce3707332348af4549a96051bd695d3223af4aabce4993531d86\"]], // p-tags the client-pubkey\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-44 Decryption via Content Resolver in Kotlin\nDESCRIPTION: Method to decrypt text encrypted with NIP-44 standard through Android's content resolver. It takes the encrypted text, the other party's public key, and user's public key as parameters and returns the decrypted content.\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = context.contentResolver.query(\n    Uri.parse(\"content://com.example.signer.NIP44_DECRYPT\"),\n    listOf(\"$encryptedText\", \"${hex_pub_key}\", \"${logged_in_user_pubkey}\"),\n    null,\n    null,\n    null\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nif (result == null) return\n\nif (it.getColumnIndex(\"rejected\") > -1) return\n\nif (result.moveToFirst()) {\n    val index = it.getColumnIndex(\"result\")\n    val encryptedText = it.getString(index)\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nostr Long-form Content Event (JSON)\nDESCRIPTION: A sample JSON event for a long-form content post (kind:30023) demonstrating proper structure with metadata tags including title, publication timestamp, topics, and references to other Nostr entities. The content includes markdown with Nostr references following NIP-27 conventions.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 30023,\n  \"created_at\": 1675642635,\n  \"content\": \"Lorem [ipsum][nostr:nevent1qqst8cujky046negxgwwm5ynqwn53t8aqjr6afd8g59nfqwxpdhylpcpzamhxue69uhhyetvv9ujuetcv9khqmr99e3k7mg8arnc9] dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n\\nRead more at nostr:naddr1qqzkjurnw4ksz9thwden5te0wfjkccte9ehx7um5wghx7un8qgs2d90kkcq3nk2jry62dyf50k0h36rhpdtd594my40w9pkal876jxgrqsqqqa28pccpzu.\",\n  \"tags\": [\n    [\"d\", \"lorem-ipsum\"],\n    [\"title\", \"Lorem Ipsum\"],\n    [\"published_at\", \"1296962229\"],\n    [\"t\", \"placeholder\"],\n    [\"e\", \"b3e392b11f5d4f28321cedd09303a748acfd0487aea5a7450b3481c60b6e4f87\", \"wss://relay.example.com\"],\n    [\"a\", \"30023:a695f6b60119d9521934a691347d9f78e8770b56da16bb255ee286ddf9fda919:ipsum\", \"wss://relay.nostr.org\"]\n  ],\n  \"pubkey\": \"...\",\n  \"id\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Challenge Response Format in JSON\nDESCRIPTION: Defines the JSON structure that a remote-signer sends to request authentication from a user. The response includes a request ID, a result field set to 'auth_url', and an error field containing the URL that should be displayed to the user for authentication.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": <request_id>,\n    \"result\": \"auth_url\",\n    \"error\": <URL_to_display_to_end_user>\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-04 Decryption via URL Scheme in JavaScript\nDESCRIPTION: Method to decrypt text encrypted with NIP-04 standard through the nostrsigner URL scheme in web applications. It takes the encrypted text and the other party's public key as parameters.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.href = `nostrsigner:${encryptedText}?pubkey=${hex_pub_key}&compressionType=none&returnType=signature&type=nip04_decrypt&callbackUrl=https://example.com/?event=`;\n```\n\n----------------------------------------\n\nTITLE: Website Reaction Event Structure in JSONC for Nostr Protocol\nDESCRIPTION: A JSONC example of a kind 17 event structure for reacting to a website in the Nostr protocol. The example shows the required format with a star emoji as content and an 'r' tag containing the target website URL.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 17,\n  \"content\": \"⭐\",\n  \"tags\": [\n    [\"r\", \"https://example.com/\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Job Result Format in Nostr (kind:6000-6999)\nDESCRIPTION: Defines the structure for service providers to publish job results. It includes references to the original request, the customer's pubkey, and optional payment information for the service provided.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"pubkey\": \"<service-provider pubkey>\",\n  \"content\": \"<payload>\",\n  \"kind\": 6xxx,\n  \"tags\": [\n    [\"request\", \"<job-request>\"],\n    [\"e\", \"<job-request-id>\", \"<relay-hint>\"],\n    [\"i\", \"<input-data>\"],\n    [\"p\", \"<customer's-pubkey>\"],\n    [\"amount\", \"requested-payment-amount\", \"<optional-bolt11>\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Emoji Reaction Event Structure in JSONC for Nostr Protocol\nDESCRIPTION: A JSONC example showing how to format a Nostr reaction event with a custom emoji. It uses NIP-30 shortcode format in the content and includes an emoji tag with the shortcode and image URL for rendering.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 7,\n  \"content\": \":soapbox:\",\n  \"tags\": [\n    [\"emoji\", \"soapbox\", \"https://gleasonator.com/emoji/Gleasonator/soapbox.png\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing sign_event Method for Nostr Signer\nDESCRIPTION: Code for requesting event signing from a Nostr signer application. This includes setting the target package, the event type, an ID for tracking, and the current user's public key.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:$eventJson\"))\nintent.`package` = \"com.example.signer\"\nintent.putExtra(\"type\", \"sign_event\")\n// To handle results when not waiting between intents\nintent.putExtra(\"id\", event.id)\n// Send the current logged in user pubkey\nintent.putExtra(\"current_user\", pubkey)\n\ncontext.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: Defining Wallet Event Structure in Nostr (NIP-60)\nDESCRIPTION: Structure for a replaceable kind:17375 wallet event that stores encrypted wallet configuration including private keys and mint URLs. Private keys stored here are exclusively for the wallet and not associated with the user's Nostr keys.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 17375,\n    \"content\": nip44_encrypt([\n        [ \"privkey\", \"hexkey\" ],\n        [ \"mint\", \"https://mint1\" ],\n        [ \"mint\", \"https://mint2\" ]\n    ]),\n    \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a Delegation String in Nostr\nDESCRIPTION: The structured string format that is hashed and signed to create a delegation token. It includes the prefix, delegatee's public key, and the conditions query string.\n\nLANGUAGE: plaintext\nCODE:\n```\nnostr:delegation:<pubkey of publisher (delegatee)>:<conditions query string>\n```\n\n----------------------------------------\n\nTITLE: Setting Up Activity Result Launcher for Signer Intents\nDESCRIPTION: Kotlin code for setting up a result launcher to handle responses from the Nostr signer application. This handles the activity result and processes the returned data including signature results or rejection status.\n\nLANGUAGE: kotlin\nCODE:\n```\nval launcher = rememberLauncherForActivityResult(\n    contract = ActivityResultContracts.StartActivityForResult(),\n    onResult = { result ->\n        if (result.resultCode != Activity.RESULT_OK) {\n            Toast.makeText(\n                context,\n                \"Sign request rejected\",\n                Toast.LENGTH_SHORT\n            ).show()\n        } else {\n            val result = activityResult.data?.getStringExtra(\"result\")\n            // Do something with result ...\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Token Event Structure in Nostr (NIP-60)\nDESCRIPTION: Structure for kind:7375 token events that store encrypted unspent Cashu proofs. These events include the mint URL, proof details, and references to token events that were consumed in the creation of this token to help with state transitions.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 7375,\n    \"content\": nip44_encrypt({\n        \"mint\": \"https://stablenut.umint.cash\",\n        \"proofs\": [\n            // one or more proofs in the default cashu format\n            {\n                \"id\": \"005c2502034d4f12\",\n                \"amount\": 1,\n                \"secret\": \"z+zyxAVLRqN9lEjxuNPSyRJzEstbl69Jc1vtimvtkPg=\",\n                \"C\": \"0241d98a8197ef238a192d47edf191a9de78b657308937b4f7dd0aa53beae72c46\"\n            }\n        ],\n        // tokens that were destroyed in the creation of this token (helps on wallet state transitions)\n        \"del\": [ \"token-event-id-1\", \"token-event-id-2\" ]\n    }),\n    \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Example Delegation String with Time-Limited Note Publishing Authorization\nDESCRIPTION: A complete example delegation string that grants authorization to publish notes (kind=1) to a specific delegatee within a defined timeframe, using the 'created_at' field constraints.\n\nLANGUAGE: json\nCODE:\n```\nnostr:delegation:477318cfb5427b9cfc66a9fa376150c1ddbc62115ae27cef72417eb959691396:kind=1&created_at>1674834236&created_at<1677426236\n```\n\n----------------------------------------\n\nTITLE: Format for Date-Based Calendar Event in Nostr (kind 31922)\nDESCRIPTION: This snippet shows the structure for a date-based calendar event using kind 31922. It includes required tags like 'd' (UUID), 'title', and 'start' date, along with optional tags for end date, location, participants, and categorization tags.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": <32-bytes lowercase hex-encoded SHA-256 of the the serialized event data>,\n  \"pubkey\": <32-bytes lowercase hex-encoded public key of the event creator>,\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 31922,\n  \"content\": \"<description of calendar event>\",\n  \"tags\": [\n    [\"d\", \"<UUID>\"],\n\n    [\"title\", \"<title of calendar event>\"],\n\n    // Dates\n    [\"start\", \"<YYYY-MM-DD>\"],\n    [\"end\", \"<YYYY-MM-DD>\"],\n\n    // Location\n    [\"location\", \"<location>\"],\n    [\"g\", \"<geohash>\"],\n\n    // Participants\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\", \"<role>\"],\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\", \"<role>\"],\n\n    // Hashtags\n    [\"t\", \"<tag>\"],\n    [\"t\", \"<tag>\"],\n\n    // Reference links\n    [\"r\", \"<url>\"],\n    [\"r\", \"<url>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Delegated Event Example in JSON\nDESCRIPTION: A full example of a Nostr event published by a delegatee on behalf of a delegator. The event includes the delegation tag with necessary fields and is signed by the delegatee's key.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"e93c6095c3db1c31d15ac771f8fc5fb672f6e52cd25505099f62cd055523224f\",\n  \"pubkey\": \"477318cfb5427b9cfc66a9fa376150c1ddbc62115ae27cef72417eb959691396\",\n  \"created_at\": 1677426298,\n  \"kind\": 1,\n  \"tags\": [\n    [\n      \"delegation\",\n      \"8e0d3d3eb2881ec137a11debe736a9086715a8c8beeeda615780064d68bc25dd\",\n      \"kind=1&created_at>1674834236&created_at<1677426236\",\n      \"6f44d7fe4f1c09f3954640fb58bd12bae8bb8ff4120853c4693106c82e920e2b898f1f9ba9bd65449a987c39c0423426ab7b53910c0c6abfb41b30bc16e5f524\"\n    ]\n  ],\n  \"content\": \"Hello, world!\",\n  \"sig\": \"633db60e2e7082c13a47a6b19d663d45b2a2ebdeaf0b4c35ef83be2738030c54fc7fd56d139652937cdca875ee61b51904a1d0d0588a6acd6168d7be2909d693\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Nostr Signer Intent\nDESCRIPTION: Code for creating an Intent using the 'nostrsigner' scheme to communicate with a Nostr signer application. This is the basic intent creation pattern used for all signer operations.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:$content\"))\n```\n\n----------------------------------------\n\nTITLE: Defining Spending History Event Structure in Nostr (NIP-60)\nDESCRIPTION: Structure for kind:7376 spending history events that record transactions. These events include direction (in/out), amount, and references to token events through e-tags that can be marked as created, destroyed, or redeemed.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 7376,\n    \"content\": nip44_encrypt([\n        [ \"direction\", \"in\" ], // in = received, out = sent\n        [ \"amount\", \"1\" ],\n        [ \"e\", \"<event-id-of-created-token>\", \"\", \"created\" ]\n    ]),\n    \"tags\": [\n        [ \"e\", \"<event-id-of-created-token>\", \"\", \"redeemed\" ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Reply Message with Kind 42 in Nostr\nDESCRIPTION: Shows how to create a reply to another message in a channel using event kind 42. The example uses NIP-10 tagging to specify both the root channel and the message being replied to, along with the author of the original message.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"content\": <string>,\n  \"tags\": [\n      [\"e\", <kind_40_event_id>, <relay-url>, \"root\"],\n      [\"e\", <kind_42_event_id>, <relay-url>, \"reply\"],\n      [\"p\", <pubkey>, <relay-url>],\n      // rest of tags...\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: AndroidManifest Configuration for Signer Application\nDESCRIPTION: Configuration to add to the AndroidManifest.xml for signer applications to support the single-top launch mode. This enables the signer to properly handle multiple intents without creating multiple instances.\n\nLANGUAGE: xml\nCODE:\n```\nandroid:launchMode=\"singleTop\"\n```\n\n----------------------------------------\n\nTITLE: Quote Event Structure in Nostr (NIP-60)\nDESCRIPTION: Optional kind:7374 event structure for tracking Lightning payment quotes. Contains an encrypted quote ID with expiration and mint URL tags. Should only be used when local state persistence isn't sufficient.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 7374,\n    \"content\": nip44_encrypt(\"quote-id\"),\n    \"tags\": [\n        [ \"expiration\", \"<expiration-timestamp>\" ],\n        [ \"mint\", \"<mint-url>\" ]\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding a Message with Kind 43 in Nostr\nDESCRIPTION: Demonstrates how a user can hide a specific message using event kind 43. The event includes an optional reason and references the message to be hidden through its event ID.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"content\": \"{\\\"reason\\\": \\\"Dick pic\\\"}\",\n  \"tags\": [[\"e\", <kind_42_event_id>]],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Members Event in Nostr (kind:39002)\nDESCRIPTION: Defines the structure of a group members event (kind:39002) which lists the public keys of group members. Relays may restrict access to this information or only display a subset of members. Clients should not assume this event will always contain a complete list.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 39002,\n  \"content\": \"list of members for the pizza lovers group\",\n  \"tags\": [\n    [\"d\", \"<group-id>\"],\n    [\"p\", \"<admin1>\"],\n    [\"p\", \"<member-pubkey1>\"],\n    [\"p\", \"<member-pubkey2>\"],\n    // other pubkeys...\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Roles Event in Nostr (kind:39003)\nDESCRIPTION: Defines the structure of a group roles event (kind:39003) which is optionally published by the relay to inform users about the supported roles and their capabilities. Role implementation and handling of moderation events is specific to each relay and not standardized.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 39003,\n  \"content\": \"list of roles supported by this group\",\n  \"tags\": [\n    [\"d\", \"<group-id>\"],\n    [\"role\", \"<role-name>\", \"<optional-description>\"],\n    [\"role\", \"<role-name>\", \"<optional-description>\"],\n    // other roles...\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Zap Events via Content Resolver in Kotlin\nDESCRIPTION: Method to decrypt zap events through Android's content resolver. It takes the event JSON and user's public key as parameters and returns the decrypted event as a JSON string.\n\nLANGUAGE: kotlin\nCODE:\n```\nval result = context.contentResolver.query(\n    Uri.parse(\"content://com.example.signer.DECRYPT_ZAP_EVENT\"),\n    listOf(\"$eventJson\", \"\", \"${logged_in_user_pubkey}\"),\n    null,\n    null,\n    null\n)\n```\n\nLANGUAGE: kotlin\nCODE:\n```\nif (result == null) return\n\nif (it.getColumnIndex(\"rejected\") > -1) return\n\nif (result.moveToFirst()) {\n    val index = it.getColumnIndex(\"result\")\n    val eventJson = it.getString(index)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Chess Note Structure in Nostr\nDESCRIPTION: A simple example of a kind:64 note representing a chess game with minimal information. This shows the basic structure required for a Nostr chess note, containing just a single move.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 64,\n  \"content\": \"1. e4 *\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Emoji Tag Format\nDESCRIPTION: The standard format for emoji tags in Nostr events. Each tag includes the 'emoji' identifier, the shortcode (alphanumeric plus underscore characters), and the URL to the image file.\n\nLANGUAGE: plaintext\nCODE:\n```\n[\"emoji\", <shortcode>, <image-url>]\n```\n\n----------------------------------------\n\nTITLE: Signing Nostr Events via URL Scheme in JavaScript\nDESCRIPTION: Method to sign a Nostr event through the nostrsigner URL scheme in web applications. It passes the event JSON and configuration parameters, with an optional callback URL.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.href = `nostrsigner:${eventJson}?compressionType=none&returnType=signature&type=sign_event&callbackUrl=https://example.com/?event=`;\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Chess Note with Metadata in Nostr\nDESCRIPTION: A complete example of a kind:64 note representing a famous chess game between Fischer and Spassky. This includes metadata tags and the full PGN content with moves, annotations, and game result.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 64,\n  \"tags\": [\n    [\"alt\", \"Fischer vs. Spassky in Belgrade on 1992-11-04 (F/S Return Match, Round 29)\"],\n    // rest of tags...\n  ],\n  \"content\": \"[Event \\\"F/S Return Match\\\"]\\n[Site \\\"Belgrade, Serbia JUG\\\"]\\n[Date \\\"1992.11.04\\\"]\\n[Round \\\"29\\\"]\\n[White \\\"Fischer, Robert J.\\\"]\\n[Black \\\"Spassky, Boris V.\\\"]\\n[Result \\\"1/2-1/2\\\"]\\n\\n1. e4 e5 2. Nf3 Nc6 3. Bb5 {This opening is called the Ruy Lopez.} 3... a6\\n4. Ba4 Nf6 5. O-O Be7 6. Re1 b5 7. Bb3 d6 8. c3 O-O 9. h3 Nb8 10. d4 Nbd7\\n11. c4 c6 12. cxb5 axb5 13. Nc3 Bb7 14. Bg5 b4 15. Nb1 h6 16. Bh4 c5 17. dxe5\\nNxe4 18. Bxe7 Qxe7 19. exd6 Qf6 20. Nbd2 Nxd6 21. Nc4 Nxc4 22. Bxc4 Nb6\\n23. Ne5 Rae8 24. Bxf7+ Rxf7 25. Nxf7 Rxe1+ 26. Qxe1 Kxf7 27. Qe3 Qg5 28. Qxg5\\nhxg5 29. b3 Ke6 30. a3 Kd6 31. axb4 cxb4 32. Ra5 Nd5 33. f3 Bc8 34. Kf2 Bf5\\n35. Ra7 g6 36. Ra6+ Kc5 37. Ke1 Nf4 38. g3 Nxh3 39. Kd2 Kb5 40. Rd6 Kc5 41. Ra6\\nNf2 42. g4 Bd3 43. Re6 1/2-1/2\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Issue Reporting Event in Nostr (NIP-34)\nDESCRIPTION: Defines the event format for reporting issues against repositories on Nostr. Issues contain Markdown text describing bug reports, feature requests, or other discussions related to the repository, and can include labels and a subject line.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1621,\n  \"content\": \"<markdown text>\",\n  \"tags\": [\n    [\"a\", \"30617:<base-repo-owner-pubkey>:<base-repo-id>\"],\n    [\"p\", \"<repository-owner>\"]\n    [\"subject\", \"<issue-subject>\"]\n    [\"t\", \"<issue-label>\"]\n    [\"t\", \"<another-issue-label>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Structure for Nostr Peer-to-peer Order Event\nDESCRIPTION: Example JSON structure for a peer-to-peer order event in Nostr using kind 38383. The event includes mandatory tags like order ID, type, currency, and status, as well as optional tags like premium, source, and expiration date.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"84fad0d29cb3529d789faeff2033e88fe157a48e071c6a5d1619928289420e31\",\n  \"pubkey\": \"dbe0b1be7aafd3cfba92d7463edbd4e33b2969f61bd554d37ac56f032e13355a\",\n  \"created_at\": 1702548701,\n  \"kind\": 38383,\n  \"tags\": [\n    [\"d\", \"ede61c96-4c13-4519-bf3a-dcf7f1e9d842\"],\n    [\"k\", \"sell\"],\n    [\"f\", \"VES\"],\n    [\"s\", \"pending\"],\n    [\"amt\", \"0\"],\n    [\"fa\", \"100\"],\n    [\"pm\", \"face to face\", \"bank transfer\"],\n    [\"premium\", \"1\"],\n    [\n      \"rating\",\n      \"{\\\"total_reviews\\\":1,\\\"total_rating\\\":3.0,\\\"last_rating\\\":3,\\\"max_rate\\\":5,\\\"min_rate\\\":1}\"\n    ],\n    [\"source\", \"https://t.me/p2plightning/xxxxxxx\"],\n    [\"network\", \"mainnet\"],\n    [\"layer\", \"lightning\"],\n    [\"name\", \"Nakamoto\"],\n    [\"g\", \"<geohash>\"],\n    [\"bond\", \"0\"],\n    [\"expiration\", \"1719391096\"],\n    [\"y\", \"lnp2pbot\"],\n    [\"z\", \"order\"]\n  ],\n  \"content\": \"\",\n  \"sig\": \"7e8fe1eb644f33ff51d8805c02a0e1a6d034e6234eac50ef7a7e0dac68a0414f7910366204fa8217086f90eddaa37ded71e61f736d1838e37c0b73f6a16c4af2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Relay-to-Client AUTH Message Format\nDESCRIPTION: Defines the format of the AUTH message when sent from a relay to a client, containing a challenge string that the client must sign to authenticate.\n\nLANGUAGE: json\nCODE:\n```\n[\"AUTH\", <challenge-string>]\n```\n\n----------------------------------------\n\nTITLE: Decrypting Zap Events via URL Scheme in JavaScript\nDESCRIPTION: Method to decrypt zap events through the nostrsigner URL scheme in web applications. It passes the event JSON and configuration parameters, with an optional callback URL.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.href = `nostrsigner:${eventJson}?compressionType=none&returnType=signature&type=decrypt_zap_event&callbackUrl=https://example.com/?event=`;\n```\n\n----------------------------------------\n\nTITLE: Partial Chess Game with Player Information in PGN\nDESCRIPTION: A PGN example with player information and the beginning of a game featuring the Ruy Lopez opening. The game is not completed as indicated by the asterisk at the end.\n\nLANGUAGE: pgn\nCODE:\n```\n[White \"Fischer, Robert J.\"]\n[Black \"Spassky, Boris V.\"]\n\n1. e4 e5 2. Nf3 Nc6 3. Bb5 {This opening is called the Ruy Lopez.} *\n```\n\n----------------------------------------\n\nTITLE: Client-to-Relay AUTH Message Format\nDESCRIPTION: Defines the format of the AUTH message when sent from a client to a relay, containing a signed event JSON that proves the client's identity.\n\nLANGUAGE: json\nCODE:\n```\n[\"AUTH\", <signed-event-json>]\n```\n\n----------------------------------------\n\nTITLE: Processing get_public_key Response\nDESCRIPTION: Code for handling the response from a get_public_key request to a Nostr signer. This extracts the public key and the package name of the signer application from the intent data.\n\nLANGUAGE: kotlin\nCODE:\n```\nval pubkey = intent.data?.getStringExtra(\"result\")\n// The package name of the signer application\nval packageName = intent.data?.getStringExtra(\"package\")\n```\n\n----------------------------------------\n\nTITLE: Example imeta Tags Implementation for Video Events in Nostr\nDESCRIPTION: Example JSON array showing how to structure imeta tags for video content with multiple resolution variants. Each variant includes dimensions, URLs, hashes, media types, preview images, fallback sources, and service information.\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\"imeta\",\n    \"dim 1920x1080\",\n    \"url https://myvideo.com/1080/12345.mp4\",\n    \"x 3093509d1e0bc604ff60cb9286f4cd7c781553bc8991937befaacfdc28ec5cdc\",\n    \"m video/mp4\",\n    \"image https://myvideo.com/1080/12345.jpg\",\n    \"image https://myotherserver.com/1080/12345.jpg\",\n    \"fallback https://myotherserver.com/1080/12345.mp4\",\n    \"fallback https://andanotherserver.com/1080/12345.mp4\",\n    \"service nip96\",\n  ],\n  [\"imeta\",\n    \"dim 1280x720\",\n    \"url https://myvideo.com/720/12345.mp4\",\n    \"x e1d4f808dae475ed32fb23ce52ef8ac82e3cc760702fca10d62d382d2da3697d\",\n    \"m video/mp4\",\n    \"image https://myvideo.com/720/12345.jpg\",\n    \"image https://myotherserver.com/720/12345.jpg\",\n    \"fallback https://myotherserver.com/720/12345.mp4\",\n    \"fallback https://andanotherserver.com/720/12345.mp4\",\n    \"service nip96\",\n  ],\n  [\"imeta\",\n    \"dim 1280x720\",\n    \"url https://myvideo.com/720/12345.m3u8\",\n    \"x 704e720af2697f5d6a198ad377789d462054b6e8d790f8a3903afbc1e044014f\",\n    \"m application/x-mpegURL\",\n    \"image https://myvideo.com/720/12345.jpg\",\n    \"image https://myotherserver.com/720/12345.jpg\",\n    \"fallback https://myotherserver.com/720/12345.m3u8\",\n    \"fallback https://andanotherserver.com/720/12345.m3u8\",\n    \"service nip96\",\n  ],\n]\n```\n\n----------------------------------------\n\nTITLE: Authentication Protocol Flow for EVENT Messages\nDESCRIPTION: Demonstrates the protocol flow when a relay requires authentication before accepting an event publication, showing the challenge-response pattern and subsequent successful event submission.\n\nLANGUAGE: json\nCODE:\n```\nrelay: [\"AUTH\", \"<challenge>\"]\nclient: [\"EVENT\", {\"id\": \"012345...\", ...}]\nrelay: [\"OK\", \"012345...\", false, \"auth-required: we only accept events from registered users\"]\nclient: [\"AUTH\", {\"id\": \"abcdef...\", ...}]\nrelay: [\"OK\", \"abcdef...\", true, \"\"]\nclient: [\"EVENT\", {\"id\": \"012345...\", ...}]\nrelay: [\"OK\", \"012345...\", true, \"\"]\n```\n\n----------------------------------------\n\nTITLE: Nostr GiftWrap Message for Sender in JSON\nDESCRIPTION: JSON representation of a GiftWrap (kind 1059) event sent back to the original sender of the private message. This contains the encrypted content intended for the sender's own records with pubkey starting with 44900.\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"id\":\"162b0611a1911cfcb30f8a5502792b346e535a45658b3a31ae5c178465509721\",\n   \"pubkey\":\"626be2af274b29ea4816ad672ee452b7cf96bbb4836815a55699ae402183f512\",\n   \"created_at\":1702711587,\n   \"kind\":1059,\n   \"tags\":[\n      [ \"p\", \"44900586091b284416a0c001f677f9c49f7639a55c3f1e2ec130a8e1a7998e1b\"]\n   ],\n   \"content\":\"AsTClTzr0gzXXji7uye5UB6LYrx3HDjWGdkNaBS6BAX9CpHa+Vvtt5oI2xJrmWLen+Fo2NBOFazvl285Gb3HSM82gVycrzx1HUAaQDUG6HI7XBEGqBhQMUNwNMiN2dnilBMFC3Yc8ehCJT/gkbiNKOpwd2rFibMFRMDKai2mq2lBtPJF18oszKOjA+XlOJV8JRbmcAanTbEK5nA/GnG3eGUiUzhiYBoHomj3vztYYxc0QYHOx0WxiHY8dsC6jPsXC7f6k4P+Hv5ZiyTfzvjkSJOckel1lZuE5SfeZ0nduqTlxREGeBJ8amOykgEIKdH2VZBZB+qtOMc7ez9dz4wffGwBDA7912NFS2dPBr6txHNxBUkDZKFbuD5wijvonZDvfWq43tZspO4NutSokZB99uEiRH8NAUdGTiNb25m9JcDhVfdmABqTg5fIwwTwlem5aXIy8b66lmqqz2LBzJtnJDu36bDwkILph3kmvaKPD8qJXmPQ4yGpxIbYSTCohgt2/I0TKJNmqNvSN+IVoUuC7ZOfUV9lOV8Ri0AMfSr2YsdZ9ofV5o82ClZWlWiSWZwy6ypa7CuT1PEGHzywB4CZ5ucpO60Z7hnBQxHLiAQIO/QhiBp1rmrdQZFN6PUEjFDloykoeHe345Yqy9Ke95HIKUCS9yJurD+nZjjgOxZjoFCsB1hQAwINTIS3FbYOibZnQwv8PXvcSOqVZxC9U0+WuagK7IwxzhGZY3vLRrX01oujiRrevB4xbW7Oxi/Agp7CQGlJXCgmRE8Rhm+Vj2s+wc/4VLNZRHDcwtfejogjrjdi8p6nfUyqoQRRPARzRGUnnCbh+LqhigT6gQf3sVilnydMRScEc0/YYNLWnaw9nbyBa7wFBAiGbJwO40k39wj+xT6HTSbSUgFZzopxroO3f/o4+ubx2+IL3fkev22mEN38+dFmYF3zE+hpE7jVxrJpC3EP9PLoFgFPKCuctMnjXmeHoiGs756N5r1Mm1ffZu4H19MSuALJlxQR7VXE/LzxRXDuaB2u9days/6muP6gbGX1ASxbJd/ou8+viHmSC/ioHzNjItVCPaJjDyc6bv+gs1NPCt0qZ69G+JmgHW/PsMMeL4n5bh74g0fJSHqiI9ewEmOG/8bedSREv2XXtKV39STxPweceIOh0k23s3N6+wvuSUAJE7u1LkDo14cobtZ/MCw/QhimYPd1u5HnEJvRhPxz0nVPz0QqL/YQeOkAYk7uzgeb2yPzJ6DBtnTnGDkglekhVzQBFRJdk740LEj6swkJ\",\n   \"sig\":\"c94e74533b482aa8eeeb54ae72a5303e0b21f62909ca43c8ef06b0357412d6f8a92f96e1a205102753777fd25321a58fba3fb384eee114bd53ce6c06a1c22bab\"\n}\n```\n\n----------------------------------------\n\nTITLE: COUNT Response Format in Nostr Protocol\nDESCRIPTION: Shows the response format for COUNT requests, returning the count as an integer. Relays may include an 'approximate' flag if using probabilistic counting methods.\n\nLANGUAGE: json\nCODE:\n```\n[\"COUNT\", <subscription_id>, {\"count\": <integer>}]\n```\n\n----------------------------------------\n\nTITLE: Defining Code Snippet Event Format in JSON for Nostr Protocol\nDESCRIPTION: This code snippet demonstrates the JSON structure for a code snippet event (kind 1337) in the Nostr protocol. It includes the standard Nostr event fields along with specialized tags for code-related metadata such as language, extension, name, description, runtime, license, and repository reference.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<32-bytes lowercase hex-encoded SHA-256 of the the serialized event data>\",\n  \"pubkey\": \"<32-bytes lowercase hex-encoded public key of the event creator>\",\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 1337,\n  \"content\": \"function helloWorld() {\\n  console.log('Hello, Nostr!');\\n}\\n\\nhelloWorld();\",\n  \"tags\": [\n    [\"l\", \"javascript\"],\n    [\"extension\", \"js\"],\n    [\"name\", \"hello-world.js\"],\n    [\"description\", \"A basic JavaScript function that prints 'Hello, Nostr!' to the console\"],\n    [\"runtime\", \"node v18.15.0\"],\n    [\"license\", \"MIT\"],\n    [\"repo\", \"https://github.com/nostr-protocol/nostr\"]\n  ],\n  \"sig\": \"<64-bytes signature of the id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Video Event Structure in Nostr\nDESCRIPTION: Full JSONC structure of a Nostr video event (kind 21 or 22), including all possible metadata tags such as title, published_at, imeta for video data, duration, text-tracks, content warnings, segments, participants, hashtags, and reference links.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": <32-bytes lowercase hex-encoded SHA-256 of the the serialized event data>,\n  \"pubkey\": <32-bytes lowercase hex-encoded public key of the event creator>,\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 21 | 22,\n  \"content\": \"<summary / description of video>\",\n  \"tags\": [\n    [\"title\", \"<title of video>\"],\n    [\"published_at\", \"<unix timestamp>\"],\n    [\"alt\", <description>],\n\n    // video Data\n    [\"imeta\",\n      \"dim 1920x1080\",\n      \"url https://myvideo.com/1080/12345.mp4\",\n      \"x 3093509d1e0bc604ff60cb9286f4cd7c781553bc8991937befaacfdc28ec5cdc\",\n      \"m video/mp4\",\n      \"image https://myvideo.com/1080/12345.jpg\",\n      \"image https://myotherserver.com/1080/12345.jpg\",\n      \"fallback https://myotherserver.com/1080/12345.mp4\",\n      \"fallback https://andanotherserver.com/1080/12345.mp4\",\n      \"service nip96\",\n    ],\n\n    [\"duration\", <duration of video in seconds>],\n    [\"text-track\", \"<encoded `kind 6000` event>\", \"<recommended relay urls>\"],\n    [\"content-warning\", \"<reason>\"],\n    [\"segment\", <start>, <end>, \"<title>\", \"<thumbnail URL>\"],\n\n    // participants\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\"],\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\"],\n\n    // hashtags\n    [\"t\", \"<tag>\"],\n    [\"t\", \"<tag>\"],\n\n    // reference links\n    [\"r\", \"<url>\"],\n    [\"r\", \"<url>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Counting Followers in Nostr\nDESCRIPTION: Demonstrates how to count follower events (kind 3) that reference a specific pubkey, with the corresponding count response.\n\nLANGUAGE: json\nCODE:\n```\n[\"COUNT\", <subscription_id>, {\"kinds\": [3], \"#p\": [<pubkey>]}]\n[\"COUNT\", <subscription_id>, {\"count\": 238}]\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Chat Message in Nostr\nDESCRIPTION: A basic chat message in Nostr is represented as a kind 9 event. The message content is stored in the content field, with an empty tags array.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 9,\n  \"content\": \"GM\",\n  \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Webpages with i and k Tags in Nostr\nDESCRIPTION: Example showing how to reference a webpage URL in Nostr using the 'i' tag for the normalized URL without fragment and 'k' tag with value 'web'.\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  [\"i\", \"https://myblog.example.com/post/2012-03-27/hello-world\"],\n  [\"k\", \"web\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Example: Counting Posts and Reactions in Nostr\nDESCRIPTION: Shows how to count both posts (kind 1) and reactions (kind 7) from a specific author, with the corresponding count response.\n\nLANGUAGE: json\nCODE:\n```\n[\"COUNT\", <subscription_id>, {\"kinds\": [1, 7], \"authors\": [<pubkey>]}]\n[\"COUNT\", <subscription_id>, {\"count\": 5}]\n```\n\n----------------------------------------\n\nTITLE: File Deletion Success Response in NIP-96\nDESCRIPTION: JSON response format for a successful file deletion operation. The server returns this after a file has been successfully deleted, including a status field and an informative message.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"status\": \"success\",\n  \"message\": \"File deleted.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Multi-Invoice Payment in Nostr Lightning API\nDESCRIPTION: The response for multi_pay_invoice provides payment confirmation including the preimage and optional fees paid. Each invoice in the request receives a separate response event tagged with the invoice ID for correlation.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"multi_pay_invoice\",\n    \"result\": {\n        \"preimage\": \"0123456789abcdef...\", // preimage of the payment\n        \"fees_paid\": 123, // value in msats, optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kind 3 Follow List Event in Nostr\nDESCRIPTION: Defines the structure of a kind 3 'follow list' event where each entry in the tags array represents a followed profile with their hex key, relay URL, and optional petname.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 3,\n  \"tags\": [\n    [\"p\", \"91cf9..4e5ca\", \"wss://alicerelay.com/\", \"alice\"],\n    [\"p\", \"14aeb..8dad4\", \"wss://bobrelay.com/nostr\", \"bob\"],\n    [\"p\", \"612ae..e610f\", \"ws://carolrelay.com/ws\", \"carol\"]\n  ],\n  \"content\": \"\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Bitcoin Transaction in Nostr\nDESCRIPTION: Example showing how to reference a Bitcoin transaction in Nostr using the 'i' tag with the blockchain prefix and transaction ID and 'k' tag for the transaction type.\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  [\"i\", \"bitcoin:tx:a1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\"],\n  [\"k\", \"bitcoin:tx\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Keysend Payments in Nostr Lightning API\nDESCRIPTION: The multi_pay_keysend method allows sending multiple keysend payments in a batch. Each payment requires a recipient public key and amount, with optional ID, preimage, and TLV records for additional metadata or routing information.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"multi_pay_keysend\",\n    \"params\": {\n        \"keysends\": [\n          {\"id\": \"4c5b24a351\", \"pubkey\": \"03...\", \"amount\": 123},\n          {\"id\": \"3da52c32a1\", \"pubkey\": \"02...\", \"amount\": 567, \"preimage\": \"abc123..\", \"tlv_records\": [{\"type\": 696969, \"value\": \"77616c5f6872444873305242454d353736\"}]},\n        ],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining User's Internal Follow List for Petname Scheme\nDESCRIPTION: Shows a user's internal follow list with a single entry identifying a profile with a hex key and a petname 'erin'. Used as part of the petname scheme explanation.\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\"p\", \"21df6d143fb96c2ec9d63726bf9edc71\", \"\", \"erin\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Referencing Bitcoin Address in Nostr\nDESCRIPTION: Example showing how to reference a Bitcoin address in Nostr using the 'i' tag with the blockchain prefix and address and 'k' tag for the address type.\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  [\"i\", \"bitcoin:address:1HQ3Go3ggs8pFnXuHVHRytPCq5fGG8Hbhx\"],\n  [\"k\", \"bitcoin:address\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Response Format for Multiple Keysend Payments in Nostr Lightning API\nDESCRIPTION: The response for multi_pay_keysend returns individual results for each payment in the batch. Each response includes a reference to the original payment ID (or pubkey if no ID was provided), the payment preimage, and optional fees paid.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"multi_pay_keysend\",\n    \"result\": {\n        \"preimage\": \"0123456789abcdef...\", // preimage of the payment\n        \"fees_paid\": 123, // value in msats, optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spending History Event Example in Nostr (NIP-60)\nDESCRIPTION: Example of a spending history event created after spending tokens, showing the outgoing direction, amount spent, and references to the destroyed and created token events.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 7376,\n    \"content\": nip44_encrypt([\n        [ \"direction\", \"out\" ],\n        [ \"amount\", \"4\" ],\n        [ \"e\", \"<event-id-1>\", \"\", \"destroyed\" ],\n        [ \"e\", \"<event-id-2>\", \"\", \"created\" ],\n    ]),\n    \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Lightning Invoices in Nostr Lightning API\nDESCRIPTION: The make_invoice method generates a new Lightning Network invoice. Required parameters include the amount in millisatoshis, with optional description, description hash, and expiry time in seconds from creation.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"make_invoice\",\n    \"params\": {\n        \"amount\": 123, // value in msats\n        \"description\": \"string\", // invoice's description, optional\n        \"description_hash\": \"string\", // invoice's description hash, optional\n        \"expiry\": 213 // expiry in seconds from time invoice is created, optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Follow List from a Specific User in Petname Chain\nDESCRIPTION: A follow list received from a user identified by the hex key 21df6d143fb96c2ec9d63726bf9edc71, containing a reference to another user with the petname 'david'.\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\"p\", \"a8bb3d884d5d90b413d9891fe4c4e46d\", \"\", \"david\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Required Tags for Nostr Zap Goal\nDESCRIPTION: Example of a minimal Nostr Zap Goal event (kind:9041) with required tags including 'amount' for target funding in millisats and 'relays' for zap tracking.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 9041,\n  \"tags\": [\n    [\"relays\", \"wss://alicerelay.example.com\", \"wss://bobrelay.example.com\", /*...*/],\n    [\"amount\", \"210000\"],\n  ],\n  \"content\": \"Nostrasia travel expenses\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Invoice Creation in Nostr Lightning API\nDESCRIPTION: The response for make_invoice returns the created invoice details including the encoded BOLT11 invoice string, payment hash, amount, creation time, and expiration time. The type field identifies this as an incoming payment.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"make_invoice\",\n    \"result\": {\n        \"type\": \"incoming\", // \"incoming\" for invoices, \"outgoing\" for payments\n        \"invoice\": \"string\", // encoded invoice, optional\n        \"description\": \"string\", // invoice's description, optional\n        \"description_hash\": \"string\", // invoice's description hash, optional\n        \"preimage\": \"string\", // payment's preimage, optional if unpaid\n        \"payment_hash\": \"string\", // Payment hash for the payment\n        \"amount\": 123, // value in msats\n        \"fees_paid\": 123, // value in msats\n        \"created_at\": unixtimestamp, // invoice/payment creation time\n        \"expires_at\": unixtimestamp, // invoice expiration time, optional if not applicable\n        \"metadata\": {} // generic metadata that can be used to add things like zap/boostagram details for a payer name/comment/etc.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OpenTimestamps Attestation Event Structure in JSON for Nostr Protocol\nDESCRIPTION: This snippet shows the JSON structure for a Nostr event of kind 1040 that contains an OpenTimestamps attestation. The event references another event via its ID in the tags and includes the base64-encoded OpenTimestamps file data in the content field.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 1040\n  \"tags\": [\n    [\"e\", <event-id>, <relay-url>],\n    [\"alt\", \"opentimestamps attestation\"]\n  ],\n  \"content\": <base64-encoded OTS file data>\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Response Format for Nostr Relay Management\nDESCRIPTION: Defines the standard JSON structure for responses from the Relay Management API. The response includes a result object with the operation outcome and an optional error message if the call failed.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\"<arbitrary>\": \"<value>\"},\n  \"error\": \"<optional error message, if the call has errored>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Node Information in Nostr Lightning API\nDESCRIPTION: The response for get_info returns complete details about the Lightning node and its capabilities. It includes node identity, blockchain status, supported API methods, and available notification types for event subscriptions.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"get_info\",\n    \"result\": {\n            \"alias\": \"string\",\n            \"color\": \"hex string\",\n            \"pubkey\": \"hex string\",\n            \"network\": \"string\", // mainnet, testnet, signet, or regtest\n            \"block_height\": 1,\n            \"block_hash\": \"hex string\",\n            \"methods\": [\"pay_invoice\", \"get_balance\", \"make_invoice\", \"lookup_invoice\", \"list_transactions\", \"get_info\"], // list of supported methods for this connection\n            \"notifications\": [\"payment_received\", \"payment_sent\"], // list of supported notifications for this connection, optional.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Complete Fischer vs. Spassky Chess Game in PGN\nDESCRIPTION: A complete PGN representation of a famous chess game between Fischer and Spassky in Belgrade, 1992. The notation includes all game metadata, move sequences, annotations, and the final result (draw).\n\nLANGUAGE: pgn\nCODE:\n```\n[Event \"F/S Return Match\"]\n[Site \"Belgrade, Serbia JUG\"]\n[Date \"1992.11.04\"]\n[Round \"29\"]\n[White \"Fischer, Robert J.\"]\n[Black \"Spassky, Boris V.\"]\n[Result \"1/2-1/2\"]\n\n1. e4 e5 2. Nf3 Nc6 3. Bb5 {This opening is called the Ruy Lopez.} 3... a6\n4. Ba4 Nf6 5. O-O Be7 6. Re1 b5 7. Bb3 d6 8. c3 O-O 9. h3 Nb8 10. d4 Nbd7\n11. c4 c6 12. cxb5 axb5 13. Nc3 Bb7 14. Bg5 b4 15. Nb1 h6 16. Bh4 c5 17. dxe5\nNxe4 18. Bxe7 Qxe7 19. exd6 Qf6 20. Nbd2 Nxd6 21. Nc4 Nxc4 22. Bxc4 Nb6\n23. Ne5 Rae8 24. Bxf7+ Rxf7 25. Nxf7 Rxe1+ 26. Qxe1 Kxf7 27. Qe3 Qg5 28. Qxg5\nhxg5 29. b3 Ke6 30. a3 Kd6 31. axb4 cxb4 32. Ra5 Nd5 33. f3 Bc8 34. Kf2 Bf5\n35. Ra7 g6 36. Ra6+ Kc5 37. Ke1 Nf4 38. g3 Nxh3 39. Kd2 Kb5 40. Rd6 Kc5 41. Ra6\nNf2 42. g4 Bd3 43. Re6 1/2-1/2\n```\n\n----------------------------------------\n\nTITLE: Payment Received Notification in Nostr Lightning API\nDESCRIPTION: The payment_received notification is sent when a Lightning payment is successfully received by the wallet. It includes complete details about the invoice, payment amount, timestamps, and any associated metadata including zaps or boostagram information.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"notification_type\": \"payment_received\",\n    \"notification\": {\n        \"type\": \"incoming\",\n        \"invoice\": \"string\", // encoded invoice\n        \"description\": \"string\", // invoice's description, optional\n        \"description_hash\": \"string\", // invoice's description hash, optional\n        \"preimage\": \"string\", // payment's preimage\n        \"payment_hash\": \"string\", // Payment hash for the payment\n        \"amount\": 123, // value in msats\n        \"fees_paid\": 123, // value in msats\n        \"created_at\": unixtimestamp, // invoice/payment creation time\n        \"expires_at\": unixtimestamp, // invoice expiration time, optional if not applicable\n        \"settled_at\": unixtimestamp, // invoice/payment settlement time\n        \"metadata\": {} // generic metadata that can be used to add things like zap/boostagram details for a payer name/comment/etc.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying OpenTimestamps Proof in Nostr using CLI Tools\nDESCRIPTION: This bash command example demonstrates how to verify an OpenTimestamps proof in a Nostr event. It uses the 'nak' tool to request an event, 'jq' to extract the content, and 'ots' to verify the OpenTimestamps attestation against the Bitcoin blockchain.\n\nLANGUAGE: bash\nCODE:\n```\n~> nak req -i e71c6ea722987debdb60f81f9ea4f604b5ac0664120dd64fb9d23abc4ec7c323 wss://nostr-pub.wellorder.net | jq -r .content | ots verify\n> using an esplora server at https://blockstream.info/api\n- sequence ending on block 810391 is valid\ntimestamp validated at block [810391]\n```\n\n----------------------------------------\n\nTITLE: Creating a Poll Event in Nostr (kind:1068)\nDESCRIPTION: Example of a JSON event for creating a poll on Nostr. The event uses kind:1068 and includes options, relay specifications, poll type, and end time. The content field contains the poll question.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"Pineapple on pizza\",\n  \"created_at\": 1719888496,\n  \"id\": \"9d1b6b9562e66f2ecf35eb0a3c2decc736c47fddb13d6fb8f87185a153ea3634\",\n  \"kind\": 1068,\n  \"pubkey\": \"dee45a23c4f1d93f3a2043650c5081e4ac14a778e0acbef03de3768e4f81ac7b\",\n  \"sig\": \"7fa93bf3c430eaef784b0dacc217d3cd5eff1c520e7ef5d961381bc0f014dde6286618048d924808e54d1be03f2f2c2f0f8b5c9c2082a4480caf45a565ca9797\",\n  \"tags\": [\n    [\"option\", \"qj518h583\", \"Yay\"],\n    [\"option\", \"gga6cdnqj\", \"Nay\"],\n    [\"relay\", \"<relay url1>\"],\n    [\"relay\", \"<relay url2>\"],\n    [\"polltype\", \"singlechoice\"],\n    [\"endsAt\", \"<unix timestamp in seconds>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Memory Requirements Table for scrypt Parameters in Nostr Key Encryption\nDESCRIPTION: A table showing the relationship between LOG_N values (scrypt complexity parameter), memory requirements, and approximate execution time on a fast computer for Nostr private key encryption.\n\nLANGUAGE: plaintext\nCODE:\n```\n| LOG_N | MEMORY REQUIRED | APPROX TIME ON FAST COMPUTER |\n|-------|-----------------|----------------------------- |\n| 16    | 64 MiB          | 100 ms                       |\n| 18    | 256 MiB         |                              |\n| 20    | 1 GiB           | 2 seconds                    |\n| 21    | 2 GiB           |                              |\n| 22    | 4 GiB           |                              |\n```\n\n----------------------------------------\n\nTITLE: Implementing Encrypted Direct Messages with AES-256-CBC in JavaScript\nDESCRIPTION: This code demonstrates how to create an encrypted direct message event in Nostr using AES-256-CBC encryption. It generates a shared secret using ECDH, creates and encrypts the message with the recipient's public key, and formats the event according to the NIP-04 specification.\n\nLANGUAGE: javascript\nCODE:\n```\nimport crypto from 'crypto'\nimport * as secp from '@noble/secp256k1'\n\nlet sharedPoint = secp.getSharedSecret(ourPrivateKey, '02' + theirPublicKey)\nlet sharedX = sharedPoint.slice(1, 33)\n\nlet iv = crypto.randomFillSync(new Uint8Array(16))\nvar cipher = crypto.createCipheriv(\n  'aes-256-cbc',\n  Buffer.from(sharedX),\n  iv\n)\nlet encryptedMessage = cipher.update(text, 'utf8', 'base64')\nencryptedMessage += cipher.final('base64')\nlet ivBase64 = Buffer.from(iv.buffer).toString('base64')\n\nlet event = {\n  pubkey: ourPubKey,\n  created_at: Math.floor(Date.now() / 1000),\n  kind: 4,\n  tags: [['p', theirPublicKey]],\n  content: encryptedMessage + '?iv=' + ivBase64\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Poll Results in Typescript with Nostr Pool\nDESCRIPTION: Function to fetch vote events for a poll from specified relays. It creates a filter for kind:1018 events referencing the poll ID, with optional filtering by pubkeys and respecting the poll expiration time.\n\nLANGUAGE: typescript\nCODE:\n```\nconst fetchVoteEvents = (filterPubkeys: string[]) => {\n  let resultFilter: Filter = {\n    \"#e\": [pollEvent.id],\n    kinds: [1018],\n  };\n  if (filterPubkeys?.length) {\n    resultFilter.authors = filterPubkeys;\n  }\n  if (pollExpiration) {\n    resultFilter.until = Number(pollExpiration);\n  }\n  pool.subscribeMany(relays, [resultFilter], {\n    onevent: handleResultEvent,\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Format for Time-Based Calendar Event in Nostr (kind 31923)\nDESCRIPTION: This snippet demonstrates the structure for a time-based calendar event using kind 31923. It includes timestamps with timezone support, along with tags for title, summary, location, participants, and various categorization options.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": <32-bytes lowercase hex-encoded SHA-256 of the the serialized event data>,\n  \"pubkey\": <32-bytes lowercase hex-encoded public key of the event creator>,\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 31923,\n  \"content\": \"<description of calendar event>\",\n  \"tags\": [\n    [\"d\", \"<UUID>\"],\n\n    [\"title\", \"<title of calendar event>\"],\n    [\"summary\", \"<brief description of the calendar event>\"],\n    [\"image\", \"<string with image URI>\"],\n\n    // Timestamps\n    [\"start\", \"<Unix timestamp in seconds>\"],\n    [\"end\", \"<Unix timestamp in seconds>\"],\n\n    [\"start_tzid\", \"<IANA Time Zone Database identifier>\"],\n    [\"end_tzid\", \"<IANA Time Zone Database identifier>\"],\n\n    // Location\n    [\"location\", \"<location>\"],\n    [\"g\", \"<geohash>\"],\n\n    // Participants\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\", \"<role>\"],\n    [\"p\", \"<32-bytes hex of a pubkey>\", \"<optional recommended relay URL>\", \"<role>\"],\n\n    // Labels (example using com.cornychat namespace denoting the event as an audiospace)\n    [\"L\", \"com.cornychat\"],\n    [\"l\", \"audiospace\", \"com.cornychat\"],\n\n    // Hashtags\n    [\"t\", \"<tag>\"],\n    [\"t\", \"<tag>\"],\n\n    // Reference links\n    [\"r\", \"<url>\"],\n    [\"r\", \"<url>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example of a Live Streaming Chat Message in Nostr\nDESCRIPTION: Complete example of a kind:1311 event for a chat message in a live streaming activity. This message references the parent live event using the 'a' tag with the proper format for linking to the live activity.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"97aa81798ee6c5637f7b21a411f89e10244e195aa91cb341bf49f718e36c8188\",\n  \"pubkey\": \"3f770d65d3a764a9c5cb503ae123e62ec7598ad035d836e2a810f3877a745b24\",\n  \"created_at\": 1687286726,\n  \"kind\": 1311,\n  \"tags\": [\n    [\"a\", \"30311:1597246ac22f7d1375041054f2a4986bd971d8d196d7997e48973263ac9879ec:demo-cf-stream\", \"\", \"root\"]\n  ],\n  \"content\": \"Zaps to live streams is beautiful.\",\n  \"sig\": \"997f62ddfc0827c121043074d50cfce7a528e978c575722748629a4137c45b75bdbc84170bedc723ef0a5a4c3daebf1fef2e93f5e2ddb98e5d685d022c30b622\"\n}\n```\n\n----------------------------------------\n\nTITLE: Nostr Event Deletion Request Example in JSONC\nDESCRIPTION: Example of a deletion request event with kind 5 that references multiple events for deletion. The example includes e-tags for specific event references, an a-tag for parameterized replaceable events, k-tags to specify kinds of events being deleted, and a content field explaining the deletion reason.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 5,\n  \"pubkey\": <32-bytes hex-encoded public key of the event creator>,\n  \"tags\": [\n    [\"e\", \"dcd59..464a2\"],\n    [\"e\", \"968c5..ad7a4\"],\n    [\"a\", \"<kind>:<pubkey>:<d-identifier>\"],\n    [\"k\", \"1\"],\n    [\"k\", \"30023\"]\n  ],\n  \"content\": \"these posts were published by accident\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Example Classified Listing Event in Nostr Protocol (JSONC)\nDESCRIPTION: A sample implementation of a kind:30402 classified listing event in the Nostr protocol. The event includes mandatory fields like content, created_at, and pubkey, along with structured metadata tags for title, price, location, and other attributes defined in NIP-99.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 30402,\n  \"created_at\": 1675642635,\n  // Markdown content\n  \"content\": \"Lorem [ipsum][nostr:nevent1qqst8cujky046negxgwwm5ynqwn53t8aqjr6afd8g59nfqwxpdhylpcpzamhxue69uhhyetvv9ujuetcv9khqmr99e3k7mg8arnc9] dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\n\\nRead more at nostr:naddr1qqzkjurnw4ksz9thwden5te0wfjkccte9ehx7um5wghx7un8qgs2d90kkcq3nk2jry62dyf50k0h36rhpdtd594my40w9pkal876jxgrqsqqqa28pccpzu.\",\n  \"tags\": [\n    [\"d\", \"lorem-ipsum\"],\n    [\"title\", \"Lorem Ipsum\"],\n    [\"published_at\", \"1296962229\"],\n    [\"t\", \"electronics\"],\n    [\"image\", \"https://url.to.img\", \"256x256\"],\n    [\"summary\", \"More lorem ipsum that is a little more than the title\"],\n    [\"location\", \"NYC\"],\n    [\"price\", \"100\", \"USD\"],\n    [\n      \"e\",\n      \"b3e392b11f5d4f28321cedd09303a748acfd0487aea5a7450b3481c60b6e4f87\",\n      \"wss://relay.example.com\"\n    ],\n    [\n      \"a\",\n      \"30023:a695f6b60119d9521934a691347d9f78e8770b56da16bb255ee286ddf9fda919:ipsum\",\n      \"wss://relay.nostr.org\"\n    ]\n  ],\n  \"pubkey\": \"...\",\n  \"id\": \"...\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AndroidManifest.xml for Nostr Signer Integration\nDESCRIPTION: XML configuration to add to the AndroidManifest.xml file to enable communication with Nostr signer applications. This allows the app to query and interact with applications that handle the 'nostrsigner' scheme.\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"nostrsigner\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Defining Citation Tags in Nostr (q Tags)\nDESCRIPTION: JSON structure for 'q' tags used when citing events in the content with NIP-21. The tag includes the event ID or address, relay URL, and the public key of the event author if it's a regular event.\n\nLANGUAGE: json\nCODE:\n```\n[\"q\", \"<event-id> or <event-address>\", \"<relay-url>\", \"<pubkey-if-a-regular-event>\"]\n```\n\n----------------------------------------\n\nTITLE: Final Follow List in Petname Chain Example\nDESCRIPTION: A follow list from the user identified by hex key a8bb3d884d5d90b413d9891fe4c4e46d, containing a reference to another user with the petname 'frank', demonstrating the chaining of petnames.\n\nLANGUAGE: json\nCODE:\n```\n[\n  [\"p\", \"f57f54057d2a7af0efecc8b0b66f5708\", \"\", \"frank\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Checking if Nostr Signer is Installed in Kotlin\nDESCRIPTION: Function to check if a Nostr signer application is installed on the device. It creates an intent with the 'nostrsigner' scheme and queries the package manager to find activities that can handle it.\n\nLANGUAGE: kotlin\nCODE:\n```\nfun isExternalSignerInstalled(context: Context): Boolean {\n  val intent =\n    Intent().apply {\n      action = Intent.ACTION_VIEW\n      data = Uri.parse(\"nostrsigner:\")\n    }\n  val infos = context.packageManager.queryIntentActivities(intent, 0)\n  return infos.size > 0\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Signer Package Name in Intent\nDESCRIPTION: Code for setting the specific package name of the Nostr signer application in an intent. This ensures the intent is directed to the correct signer application after receiving its package name from a get_public_key operation.\n\nLANGUAGE: kotlin\nCODE:\n```\nintent.`package` = \"com.example.signer\"\n```\n\n----------------------------------------\n\nTITLE: Defining Marked E Tags in Nostr\nDESCRIPTION: JSON structure for marked 'e' tags in Nostr, which are used for replies to other kind 1 events. The structure includes the event ID being referenced, a recommended relay URL, an optional marker ('reply' or 'root'), and optionally the public key of the referenced event's author.\n\nLANGUAGE: json\nCODE:\n```\n[\"e\", <event-id>, <relay-url>, <marker>, <pubkey>]\n```\n\n----------------------------------------\n\nTITLE: Demonstrating #[index] Notation for Mentions in Nostr\nDESCRIPTION: Shows the format for referencing a pubkey mention using the #[index] notation, where 'index' refers to the 0-based position in the tags array. This allows clients to replace mentions with the actual pubkey or event ID referenced in the tags.\n\nLANGUAGE: markdown\nCODE:\n```\n#[index]\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Permission Results in Signer\nDESCRIPTION: Code for a signer application to return multiple permission results in a structured format. This handles returning event signatures with package information and request IDs for correlation.\n\nLANGUAGE: kotlin\nCODE:\n```\nval results = listOf(\n  Result(\n    package = signerPackageName,\n    result = eventSignture,\n    id = intentId\n  )\n)\n\nval json = results.toJson()\n\nintent.putExtra(\"results\", json)\n```\n\n----------------------------------------\n\nTITLE: Defining Deprecated Positional E Tags in Nostr\nDESCRIPTION: JSON structure for positional 'e' tags in Nostr, which are deprecated but maintained for backward compatibility. The structure includes the event ID being referenced and a recommended relay URL associated with the reference.\n\nLANGUAGE: json\nCODE:\n```\n[\"e\", <event-id>, <relay-url>]\n```\n\n----------------------------------------\n\nTITLE: Configuring Community Preferences for Nostr Relays\nDESCRIPTION: JSON configuration for defining community preferences on a Nostr relay, including language preferences, content tags, and posting policies. This helps users find relays that align with their interests and expectations.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"language_tags\": [\"en\", \"en-419\"],\n  \"tags\": [\"sfw-only\", \"bitcoin-only\", \"anime\"],\n  \"posting_policy\": \"https://example.com/posting-policy.html\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Launching Signer Intent\nDESCRIPTION: Simple code to launch a prepared intent using the previously set up activity result launcher. This sends the request to the signer application and prepares to receive the result.\n\nLANGUAGE: kotlin\nCODE:\n```\nlauncher.launch(intent)\n```\n\n----------------------------------------\n\nTITLE: Processing sign_event Response\nDESCRIPTION: Code for handling the response from a sign_event request to a Nostr signer. This extracts the signature, the tracking ID, and the complete signed event JSON from the intent data.\n\nLANGUAGE: kotlin\nCODE:\n```\nval signature = intent.data?.getStringExtra(\"result\")\n// The id you sent\nval id = intent.data?.getStringExtra(\"id\")\nval signedEventJson = intent.data?.getStringExtra(\"event\")\n```\n\n----------------------------------------\n\nTITLE: Example JSON Note Structure with Nonce Tag for Mining\nDESCRIPTION: Demonstrates the structure of a nostr note with a nonce tag for mining. The tag includes the nonce value and target difficulty.\n\nLANGUAGE: json\nCODE:\n```\n{\"content\": \"It's just me mining my own business\", \"tags\": [[\"nonce\", \"1\", \"21\"]]}\n```\n\n----------------------------------------\n\nTITLE: C Implementation for Calculating Proof of Work Difficulty\nDESCRIPTION: Reference C code for calculating the number of leading zero bits in a nostr event ID, which determines the proof of work difficulty. Includes helper functions for counting bits in bytes.\n\nLANGUAGE: c\nCODE:\n```\nint zero_bits(unsigned char b)\n{\n        int n = 0;\n\n        if (b == 0)\n                return 8;\n\n        while (b >>= 1)\n                n++;\n\n        return 7-n;\n}\n\n/* find the number of leading zero bits in a hash */\nint count_leading_zero_bits(unsigned char *hash)\n{\n        int bits, total, i;\n        for (i = 0, total = 0; i < 32; i++) {\n                bits = zero_bits(hash[i]);\n                total += bits;\n                if (bits != 8)\n                        break;\n        }\n        return total;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing nip04_encrypt Method for Nostr Signer\nDESCRIPTION: Code for requesting NIP-04 encryption from a Nostr signer application. This includes the plaintext to encrypt, an ID for tracking, the current user's public key, and the recipient's public key for encryption.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:$plaintext\"))\nintent.`package` = \"com.example.signer\"\nintent.putExtra(\"type\", \"nip04_encrypt\")\n// to control the result in your application in case you are not waiting the result before sending another intent\nintent.putExtra(\"id\", \"some_id\")\n// Send the current logged in user pubkey\nintent.putExtra(\"current_user\", account.keyPair.pubkey)\n// Send the hex pubkey that will be used for encrypting the data\nintent.putExtra(\"pubkey\", pubkey)\n\ncontext.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: Example of a Mined Nostr Note with Proof of Work\nDESCRIPTION: A complete mined nostr note example showing all required fields including the mined ID with leading zeros, nonce tag with the final nonce value and target difficulty, and the signature.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"000006d8c378af1779d2feebc7603a125d99eca0ccf1085959b307f64e5dd358\",\n  \"pubkey\": \"a48380f4cfcc1ad5378294fcac36439770f9c878dd880ffa94bb74ea54a6f243\",\n  \"created_at\": 1651794653,\n  \"kind\": 1,\n  \"tags\": [\n    [\"nonce\", \"776797\", \"20\"]\n  ],\n  \"content\": \"It's just me mining my own business\",\n  \"sig\": \"284622fc0a3f4f1303455d5175f7ba962a3300d136085b9566801bc2e0699de0c7e31e44c81fb40ad9049173742e904713c3594a1da0fc5d2382a25c11aba977\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Stall in Nostr Marketplace (JSON Event Content)\nDESCRIPTION: JSON structure for event content when creating or updating a stall (kind 30017). Includes stall ID, name, description, currency, and shipping options with zones and costs.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": <string, id generated by the merchant. Sequential IDs (`0`, `1`, `2`...) are discouraged>,\n  \"name\": <string, stall name>,\n  \"description\": <string (optional), stall description>,\n  \"currency\": <string, currency used>,\n  \"shipping\": [\n    {\n      \"id\": <string, id of the shipping zone, generated by the merchant>,\n      \"name\": <string (optional), zone name>,\n      \"cost\": <float, base cost for shipping. The currency is defined at the stall level>,\n      \"regions\": [<string, regions included in this zone>]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing nip44_encrypt Response\nDESCRIPTION: Code for handling the response from a nip44_encrypt request to a Nostr signer. This extracts the encrypted text (from the signature field) and the tracking ID from the intent data.\n\nLANGUAGE: kotlin\nCODE:\n```\nval encryptedText = intent.data?.getStringExtra(\"signature\")\n// the id you sent\nval id = intent.data?.getStringExtra(\"id\")\n```\n\n----------------------------------------\n\nTITLE: Implementing nip04_decrypt Method for Nostr Signer\nDESCRIPTION: Code for requesting NIP-04 decryption from a Nostr signer application. This includes the encrypted text to decrypt, an ID for tracking, the current user's public key, and the sender's public key for decryption.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:$encryptedText\"))\nintent.`package` = \"com.example.signer\"\nintent.putExtra(\"type\", \"nip04_decrypt\")\n// to control the result in your application in case you are not waiting the result before sending another intent\nintent.putExtra(\"id\", \"some_id\")\n// Send the current logged in user pubkey\nintent.putExtra(\"current_user\", account.keyPair.pubkey)\n// Send the hex pubkey that will be used for decrypting the data\nintent.putExtra(\"pubkey\", pubkey)\n\ncontext.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation for Calculating Proof of Work Difficulty\nDESCRIPTION: JavaScript function for counting the number of leading zero bits in a hexadecimal string representation of a nostr event ID, used to validate proof of work difficulty.\n\nLANGUAGE: javascript\nCODE:\n```\n// hex should be a hexadecimal string (with no 0x prefix)\nfunction countLeadingZeroes(hex) {\n  let count = 0;\n\n  for (let i = 0; i < hex.length; i++) {\n    const nibble = parseInt(hex[i], 16);\n    if (nibble === 0) {\n      count += 4;\n    } else {\n      count += Math.clz32(nibble) - 28;\n      break;\n    }\n  }\n\n  return count;\n}\n```\n\n----------------------------------------\n\nTITLE: Stall Event Tags in Nostr Marketplace\nDESCRIPTION: JSON structure for event tags when creating or updating a stall. The 'd' tag is required and must match the stall ID in the content.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [[\"d\", <string, id of stall]]],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing nip44_decrypt Method for Nostr Signer\nDESCRIPTION: Code for requesting NIP-44 decryption from a Nostr signer application. This includes the encrypted text to decrypt, an ID for tracking, the current user's public key, and the sender's public key for decryption.\n\nLANGUAGE: kotlin\nCODE:\n```\nval intent = Intent(Intent.ACTION_VIEW, Uri.parse(\"nostrsigner:$encryptedText\"))\nintent.`package` = \"com.example.signer\"\nintent.putExtra(\"type\", \"nip04_decrypt\")\n// to control the result in your application in case you are not waiting the result before sending another intent\nintent.putExtra(\"id\", \"some_id\")\n// Send the current logged in user pubkey\nintent.putExtra(\"current_user\", account.keyPair.pubkey)\n// Send the hex pubkey that will be used for decrypting the data\nintent.putExtra(\"pubkey\", pubkey)\n\ncontext.startActivity(intent)\n```\n\n----------------------------------------\n\nTITLE: Subject Tag Format in JSON for Nostr Text Events\nDESCRIPTION: Defines the JSON format for the subject tag in Nostr text events (kind: 1). The subject tag allows clients to display threaded messages by subject rather than content, similar to email clients. Subjects should typically be under 80 characters.\n\nLANGUAGE: json\nCODE:\n```\n[\"subject\": <string>]\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating a Product in Nostr Marketplace (JSON Event Content)\nDESCRIPTION: JSON structure for event content when creating or updating a product (kind 30018). Includes product details like ID, name, price, quantity, specifications, and shipping costs per zone.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": <string, id generated by the merchant (sequential ids are discouraged)>,\n  \"stall_id\": <string, id of the stall to which this product belong to>,\n  \"name\": <string, product name>,\n  \"description\": <string (optional), product description>,\n  \"images\": <[string], array of image URLs, optional>,\n  \"currency\": <string, currency used>,\n  \"price\": <float, cost of product>,\n  \"quantity\": <int or null, available items>,\n  \"specs\": [\n    [<string, spec key>, <string, spec value>]\n  ],\n  \"shipping\": [\n    {\n      \"id\": <string, id of the shipping zone (must match one of the zones defined for the stall)>,\n      \"cost\": <float, extra cost for shipping. The currency is defined at the stall level>\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Processing nip44_decrypt Response\nDESCRIPTION: Code for handling the response from a nip44_decrypt request to a Nostr signer. This extracts the plaintext and the tracking ID from the intent data.\n\nLANGUAGE: kotlin\nCODE:\n```\nval plainText = intent.data?.getStringExtra(\"result\")\n// the id you sent\nval id = intent.data?.getStringExtra(\"id\")\n```\n\n----------------------------------------\n\nTITLE: NIP-04 Encryption via URL Scheme in JavaScript\nDESCRIPTION: Method to encrypt text using NIP-04 standard through the nostrsigner URL scheme in web applications. It takes plaintext and recipient's public key as parameters.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.href = `nostrsigner:${plainText}?pubkey=${hex_pub_key}&compressionType=none&returnType=signature&type=nip04_encrypt&callbackUrl=https://example.com/?event=`;\n```\n\n----------------------------------------\n\nTITLE: Product Event Tags in Nostr Marketplace\nDESCRIPTION: JSON structure for event tags when creating or updating a product. Requires a 'd' tag matching the product ID and allows optional 't' tags for searchable product categories.\n\nLANGUAGE: json\nCODE:\n```\n  \"tags\": [\n    [\"d\", <string, id of product],\n    [\"t\", <string (optional), product category],\n    [\"t\", <string (optional), product category],\n    // other fields...\n  ],\n  ...\n```\n\n----------------------------------------\n\nTITLE: Merchant Payment Request JSON in Nostr Marketplace\nDESCRIPTION: JSON structure for a merchant payment request (type 1) sent via NIP-04 encrypted direct message. Contains payment options that may include URLs, Bitcoin addresses, Lightning invoices, or LNURL-pay links.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": <string, id of the order>,\n  \"type\": 1,\n  \"message\": <string, message to customer, optional>,\n  \"payment_options\": [\n    {\n      \"type\": <string, option type>,\n      \"link\": <string, url, btc address, ln invoice, etc>\n    },\n    {\n      \"type\": <string, option type>,\n      \"link\": <string, url, btc address, ln invoice, etc>\n    },\n    {\n      \"type\": <string, option type>,\n      \"link\": <string, url, btc address, ln invoice, etc>\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-44 Encryption via URL Scheme in JavaScript\nDESCRIPTION: Method to encrypt text using NIP-44 standard through the nostrsigner URL scheme in web applications. It takes plaintext and recipient's public key as parameters.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.href = `nostrsigner:${plainText}?pubkey=${hex_pub_key}&compressionType=none&returnType=signature&type=nip44_encrypt&callbackUrl=https://example.com/?event=`;\n```\n\n----------------------------------------\n\nTITLE: Creating a Root Channel Message with Kind 42 in Nostr\nDESCRIPTION: Illustrates sending a root message to a channel using event kind 42. The 'e' tag links to the channel's creation event and marks it as a root message.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"content\": <string>,\n  \"tags\": [[\"e\", <kind_40_event_id>, <relay-url>, \"root\"]],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Merchant Order Status Update JSON in Nostr Marketplace\nDESCRIPTION: JSON structure for a merchant order status update (type 2) sent via NIP-04 encrypted direct message. Includes payment and shipping status flags with an optional message to the customer.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": <string, id of the order>,\n  \"type\": 2,\n  \"message\": <string, message to customer>,\n  \"paid\": <bool: has received payment>,\n  \"shipped\": <bool: has been shipped>,\n}\n```\n\n----------------------------------------\n\nTITLE: NIP-44 Decryption via URL Scheme in JavaScript\nDESCRIPTION: Method to decrypt text encrypted with NIP-44 standard through the nostrsigner URL scheme in web applications. It takes the encrypted text and the other party's public key as parameters.\n\nLANGUAGE: javascript\nCODE:\n```\nwindow.href = `nostrsigner:${encryptedText}?pubkey=${hex_pub_key}&compressionType=none&returnType=signature&type=nip44_decrypt&callbackUrl=https://example.com/?event=`;\n```\n\n----------------------------------------\n\nTITLE: Implementing Zap Request HTTP Flow in JavaScript\nDESCRIPTION: Example JavaScript implementation that demonstrates how to create and sign a zap request event, send it to the recipient's LNURL callback URL, and retrieve the Lightning invoice for payment.\n\nLANGUAGE: javascript\nCODE:\n```\nconst senderPubkey // The sender's pubkey\nconst recipientPubkey = // The recipient's pubkey\nconst callback = // The callback received from the recipients lnurl pay endpoint\nconst lnurl = // The recipient's lightning address, encoded as a lnurl\nconst sats = 21\n\nconst amount = sats * 1000\nconst relays = ['wss://nostr-pub.wellorder.net']\nconst event = encodeURI(JSON.stringify(await signEvent({\n  kind: 9734,\n  content: \"\",\n  pubkey: senderPubkey,\n  created_at: Math.round(Date.now() / 1000),\n  tags: [\n    [\"relays\", ...relays],\n    [\"amount\", amount.toString()],\n    [\"lnurl\", lnurl],\n    [\"p\", recipientPubkey],\n  ],\n})))\n\nconst {pr: invoice} = await fetchJson(`${callback}?amount=${amount}&nostr=${event}&lnurl=${lnurl}`)\n```\n\n----------------------------------------\n\nTITLE: Muting a User with Kind 44 in Nostr\nDESCRIPTION: Shows how to mute messages from a specific user using event kind 44. The event includes an optional reason and references the user's public key to be muted.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"content\": \"{\\\"reason\\\": \\\"Posting dick pics\\\"}\",\n  \"tags\": [[\"p\", <pubkey>]],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Auction Products with Event 30020\nDESCRIPTION: JSON schema for creating or updating products sold as auctions. This includes product details (ID, name, description), auction parameters (starting bid, start date, duration), product specifications, and shipping information.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": <String, UUID generated by the merchant. Sequential IDs (`0`, `1`, `2`...) are discouraged>,\n    \"stall_id\": <String, UUID of the stall to which this product belong to>,\n    \"name\": <String, product name>,\n    \"description\": <String (optional), product description>,\n    \"images\": <[String], array of image URLs, optional>,\n    \"starting_bid\": <int>,\n    \"start_date\": <int (optional) UNIX timestamp, date the auction started / will start>,\n    \"duration\": <int, number of seconds the auction will run for, excluding eventual time extensions that might happen>,\n    \"specs\": [\n        [<String, spec key>, <String, spec value>]\n    ],\n    \"shipping\": [\n        {\n            \"id\": <String, UUID of the shipping zone. Must match one of the zones defined for the stall>,\n            \"cost\": <float, extra cost for shipping. The currency is defined at the stall level>\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Zap Receipt Event (JSON Structure)\nDESCRIPTION: A complete example of a JSON-formatted zap receipt event created when a lightning invoice is paid. This example shows all required fields including the bolt11 invoice, preimage, and references to the original zap request.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"id\": \"67b48a14fb66c60c8f9070bdeb37afdfcc3d08ad01989460448e4081eddda446\",\n    \"pubkey\": \"9630f464cca6a5147aa8a35f0bcdd3ce485324e732fd39e09233b1d848238f31\",\n    \"created_at\": 1674164545,\n    \"kind\": 9735,\n    \"tags\": [\n      [\"p\", \"32e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245\"],\n      [\"P\", \"97c70a44366a6535c145b333f973ea86dfdc2d7a99da618c40c64705ad98e322\"],\n      [\"e\", \"3624762a1274dd9636e0c552b53086d70bc88c165bc4dc0f9e836a1eaf86c3b8\"],\n      [\"bolt11\", \"lnbc10u1p3unwfusp5t9r3yymhpfqculx78u027lxspgxcr2n2987mx2j55nnfs95nxnzqpp5jmrh92pfld78spqs78v9euf2385t83uvpwk9ldrlvf6ch7tpascqhp5zvkrmemgth3tufcvflmzjzfvjt023nazlhljz2n9hattj4f8jq8qxqyjw5qcqpjrzjqtc4fc44feggv7065fqe5m4ytjarg3repr5j9el35xhmtfexc42yczarjuqqfzqqqqqqqqlgqqqqqqgq9q9qxpqysgq079nkq507a5tw7xgttmj4u990j7wfggtrasah5gd4ywfr2pjcn29383tphp4t48gquelz9z78p4cq7ml3nrrphw5w6eckhjwmhezhnqpy6gyf0\"],\n      [\"description\", \"{\\\"pubkey\\\":\\\"97c70a44366a6535c145b333f973ea86dfdc2d7a99da618c40c64705ad98e322\\\",\\\"content\\\":\\\"\\\",\\\"id\\\":\\\"d9cc14d50fcb8c27539aacf776882942c1a11ea4472f8cdec1dea82fab66279d\\\",\\\"created_at\\\":1674164539,\\\"sig\\\":\\\"77127f636577e9029276be060332ea565deaf89ff215a494ccff16ae3f757065e2bc59b2e8c113dd407917a010b3abd36c8d7ad84c0e3ab7dab3a0b0caa9835d\\\",\\\"kind\\\":9734,\\\"tags\\\":[[\\\"e\\\",\\\"3624762a1274dd9636e0c552b53086d70bc88c165bc4dc0f9e836a1eaf86c3b8\\\"],[\\\"p\\\",\\\"32e1827635450ebb3c5a7d12c1f8e7b2b514439ac10a67eef3d9fd9c5c68e245\\\"],[\\\"relays\\\",\\\"wss://relay.damus.io\\\",\\\"wss://nostr-relay.wlvs.space\\\",\\\"wss://nostr.fmt.wiz.biz\\\",\\\"wss://relay.nostr.bg\\\",\\\"wss://nostr.oxtr.dev\\\",\\\"wss://nostr.v0l.io\\\",\\\"wss://brb.io\\\",\\\"wss://nostr.bitcoiner.social\\\",\\\"ws://monad.jb55.com:8080\\\",\\\"wss://relay.snort.social\\\"]]}\"],\n      [\"preimage\", \"5d006d2cf1e73c7148e7519a4c68adc81642ce0e25a432b2434c99f97344c15f\"]\n    ],\n    \"content\": \"\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Leave Request Event Format in Nostr Groups (JSON)\nDESCRIPTION: Defines the structure of a kind 9022 event that users send to leave a Nostr group. The relay automatically processes this request by issuing a kind 9001 event to remove the user from the group.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 9022,\n  \"content\": \"optional reason\",\n  \"tags\": [\n    [\"h\", \"<group-id>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Encrypted Message Wrapping in Nostr\nDESCRIPTION: JSON structure showing the encryption process for direct messages using NIP-59 seal (kind 13) and gift wrap (kind 1059). This demonstrates how messages are double-encrypted to protect metadata and content from public view.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": \"<usual hash>\",\n  \"pubkey\": randomPublicKey,\n  \"created_at\": randomTimeUpTo2DaysInThePast(),\n  \"kind\": 1059, // gift wrap\n  \"tags\": [\n    [\"p\", receiverPublicKey, \"<relay-url>\"] // receiver\n  ],\n  \"content\": nip44Encrypt(\n    {\n      \"id\": \"<usual hash>\",\n      \"pubkey\": senderPublicKey,\n      \"created_at\": randomTimeUpTo2DaysInThePast(),\n      \"kind\": 13, // seal\n      \"tags\": [], // no tags\n      \"content\": nip44Encrypt(unsignedKind14, senderPrivateKey, receiverPublicKey),\n      \"sig\": \"<signed by senderPrivateKey>\"\n    },\n    randomPrivateKey, receiverPublicKey\n  ),\n  \"sig\": \"<signed by randomPrivateKey>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Zap Split Configuration with Tags (JSON)\nDESCRIPTION: Example JSON showing how to configure zap splits across multiple recipients using the 'zap' tag with weights. This structure allows clients to distribute zaps proportionally based on specified weights.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tags\": [\n        [ \"zap\", \"82341f882b6eabcd2ba7f1ef90aad961cf074af15b9ef44a09f9d2a8fbfbe6a2\", \"wss://nostr.oxtr.dev\", \"1\" ],  // 25%\n        [ \"zap\", \"fa984bd7dbb282f07e16e7ae87b26a2a7b9b90b7246a44771f0cf5ae58018f52\", \"wss://nostr.wine/\",    \"1\" ],  // 25%\n        [ \"zap\", \"460c25e682fda7832b52d1f22d3d22b3176d972f60dcdc3212ed8c92ef85065c\", \"wss://nos.lol/\",       \"2\" ]   // 50%\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Example Badge Award Event in Nostr (jsonc)\nDESCRIPTION: A sample Badge Award event (kind 8) that awards the 'bravery' badge to two users (Bob and Charlie). It references the Badge Definition through an 'a' tag and includes a 'p' tag for each recipient, along with a relay URL.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": \"<badge award event id>\",\n  \"kind\": 8,\n  \"pubkey\": \"alice\",\n  \"tags\": [\n    [\"a\", \"30009:alice:bravery\"],\n    [\"p\", \"bob\", \"wss://relay\"],\n    [\"p\", \"charlie\", \"wss://relay\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Moderation Event Format in Nostr Groups (JSON)\nDESCRIPTION: Defines the general structure of moderation events (kinds 9000-9020) in Nostr groups. These events are sent by authorized administrators to perform various group management functions, with specific kind numbers indicating the moderation action.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 90xx,\n  \"content\": \"optional reason\",\n  \"tags\": [\n    [\"h\", \"<group-id>\"],\n    [\"previous\", /*...*/]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Citation Tag Format for Comments\nDESCRIPTION: Demonstrates how to use 'q' tags to cite other events within a comment's content using NIP-21 references. This format allows linking to specific events when discussing them in the comment text.\n\nLANGUAGE: json\nCODE:\n```\n[\"q\", \"<event-id> or <event-address>\", \"<relay-url>\", \"<pubkey-if-a-regular-event>\"]\n```\n\n----------------------------------------\n\nTITLE: Example Profile Badges Event in Nostr (jsonc)\nDESCRIPTION: A sample Profile Badges event (kind 30008) for user Bob that displays two badges ('bravery' and 'honor'). It pairs 'a' tags referencing Badge Definitions with 'e' tags referencing Badge Award events, establishing the order for display in the profile.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 30008,\n  \"pubkey\": \"bob\",\n  \"tags\": [\n    [\"d\", \"profile_badges\"],\n    [\"a\", \"30009:alice:bravery\"],\n    [\"e\", \"<bravery badge award event id>\", \"wss://nostr.academy\"],\n    [\"a\", \"30009:alice:honor\"],\n    [\"e\", \"<honor badge award event id>\", \"wss://nostr.academy\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Group Admins Event in Nostr (kind:39001)\nDESCRIPTION: Defines the structure of a group admins event (kind:39001) which lists the administrators of a Nostr group along with their assigned roles. The roles should correspond with those supported by the relay as advertised in the kind:39003 event.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 39001,\n  \"content\": \"list of admins for the pizza lovers group\",\n  \"tags\": [\n    [\"d\", \"<group-id>\"],\n    [\"p\", \"<pubkey1-as-hex>\", \"ceo\"],\n    [\"p\", \"<pubkey2-as-hex>\", \"secretary\", \"gardener\"],\n    // other pubkeys...\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Reply to a Comment in Nostr\nDESCRIPTION: Example of replying to an existing comment in Nostr. Shows how to maintain the original root reference while also linking to the specific parent comment being replied to.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  kind: 1111,\n  content: 'This is a reply to \"Great file!\"',\n  tags: [\n    // nip-94 file event id\n    [\"E\", \"768ac8720cdeb59227cf95e98b66560ef03d8bc9a90d721779e76e68fb42f5e6\", \"wss://example.relay\", \"fd913cd6fa9edb8405750cd02a8bbe16e158b8676c0e69fdc27436cc4a54cc9a\"],\n    // the root kind\n    [\"K\", \"1063\"],\n    [\"P\", \"fd913cd6fa9edb8405750cd02a8bbe16e158b8676c0e69fdc27436cc4a54cc9a\"],\n\n    // the parent event\n    [\"e\", \"5c83da77af1dec6d7289834998ad7aafbd9e2191396d75ec3cc27f5a77226f36\", \"wss://example.relay\", \"93ef2ebaaf9554661f33e79949007900bbc535d239a4c801c33a4d67d3e7f546\"],\n    // the parent kind\n    [\"k\", \"1111\"],\n    [\"p\", \"93ef2ebaaf9554661f33e79949007900bbc535d239a4c801c33a4d67d3e7f546\"]\n  ]\n  // other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Seal Event Structure in JSON\nDESCRIPTION: This code snippet demonstrates the structure of a seal event (kind 13) in the Gift Wrap protocol. The seal wraps an encrypted rumor and is signed by the real author, hiding the recipient's identity but revealing the author.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<id>\",\n  \"pubkey\": \"<real author's pubkey>\",\n  \"content\": \"<encrypted rumor>\",\n  \"kind\": 13,\n  \"created_at\": 1686840217,\n  \"tags\": [],\n  \"sig\": \"<real author's pubkey signature>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Token Event Example Before Spending in Nostr (NIP-60)\nDESCRIPTION: Example of a token event before spending tokens, showing a token with multiple proofs of different amounts that will be partially spent.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 7375,\n    \"id\": \"event-id-1\",\n    \"content\": nip44_encrypt({\n        \"mint\": \"https://stablenut.umint.cash\",\n        \"proofs\": [\n            { \"id\": \"1\", \"amount\": 1 },\n            { \"id\": \"2\", \"amount\": 2 },\n            { \"id\": \"3\", \"amount\": 4 },\n            { \"id\": \"4\", \"amount\": 8 },\n        ]\n    }),\n    \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Labeling Multiple Pubkeys with a Topic in Nostr\nDESCRIPTION: Example of a kind 1985 event that associates multiple public keys with the 'permies' topic using the '#t' namespace.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1985,\n  \"tags\": [\n    [\"L\", \"#t\"],\n    [\"l\", \"permies\", \"#t\"],\n    [\"p\", <pubkey1>, <relay_url>],\n    [\"p\", <pubkey2>, <relay_url>]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Channel Metadata with Kind 41 in Nostr\nDESCRIPTION: Shows how to update a channel's metadata using event kind 41. The example includes updated channel information and demonstrates the use of 'e' tags to reference the original channel, plus 't' tags for categorization.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"content\": \"{\\\"name\\\": \\\"Updated Demo Channel\\\", \\\"about\\\": \\\"Updating a test channel.\\\", \\\"picture\\\": \\\"https://placekitten.com/201/201\\\", \\\"relays\\\": [\\\"wss://nos.lol\\\", \\\"wss://nostr.mom\\\"]}\",\n  \"tags\": [\n    [\"e\", <channel_create_event_id>, <relay-url>, \"root\"],\n    [\"t\", <category_name-1>],\n    [\"t\", <category_name-2>],\n    [\"t\", <category_name-3>],\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Minimal Chess Game Notation in PGN\nDESCRIPTION: A minimal PGN example representing a game with no known information. The asterisk indicates an unknown result, representing a game that may still be in progress, abandoned, or with an otherwise unknown outcome.\n\nLANGUAGE: pgn\nCODE:\n```\n// A game where nothing is known. Game still in progress, game abandoned, or result otherwise unknown. \n// Maybe players died before a move has been made.\n*\n```\n\n----------------------------------------\n\nTITLE: Flagging Content for Violence in Nostr\nDESCRIPTION: Example of a kind 1985 event that flags content for violence against humans using a custom ontology namespace.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1985,\n  \"tags\": [\n    [\"L\", \"com.example.ontology\"],\n    [\"l\", \"VI-hum\", \"com.example.ontology\"],\n    [\"p\", <pubkey1>, <relay_url>],\n    [\"p\", <pubkey2>, <relay_url>]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Join Request Event Format in Nostr Groups (JSON)\nDESCRIPTION: Defines the structure of a kind 9021 event that users send to request admission to a Nostr group. Includes the group ID in the h tag and an optional invite code for pre-authorized access to closed groups.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 9021,\n  \"content\": \"optional reason\",\n  \"tags\": [\n    [\"h\", \"<group-id>\"],\n    [\"code\", \"<optional-invite-code>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Relay Discovery Event Format (Kind 30166)\nDESCRIPTION: Defines the minimum required format for a Relay Discovery event (kind 30166), which signals that a relay was online at a specific timestamp as reported by a pubkey.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 30166,\n  \"created_at\": 1722173222,  \n  \"content\": \"{}\",\n  \"tags\": [\n    [ \"d\", \"wss://somerelay.abc/\" ]\n  ],\n  \"pubkey\": \"<pubkey>\", \n  \"sig\": \"<signature>\",\n  \"id\": \"<eventid>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Gnosis Chain Transaction in Nostr\nDESCRIPTION: Example showing how to reference a Gnosis Chain (EVM-compatible) transaction in Nostr using the 'i' tag with the Ethereum prefix, chain ID 100, and transaction hash, and 'k' tag for the transaction type.\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  [\"i\", \"ethereum:100:tx:0x98f7812be496f97f80e2e98d66358d1fc733cf34176a8356d171ea7fbbe97ccd\"],\n  [\"k\", \"ethereum:tx\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Self-labeling a Note with Geographic Location in Nostr\nDESCRIPTION: Example of a kind 1 event where the author self-labels their note as being related to Milan, Italy using the ISO 3166-2 standard.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1,\n  \"tags\": [\n    [\"L\", \"ISO-3166-2\"],\n    [\"l\", \"IT-MI\", \"ISO-3166-2\"]\n  ],\n  \"content\": \"It's beautiful here in Milan!\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Emoji in Kind 0 (Metadata) Event\nDESCRIPTION: Example of custom emoji implementation in a kind 0 (metadata) event where the 'name' field should be emojified. The shortcode ':soapbox:' in the content will be replaced with the image from the URL.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 0,\n  \"content\": \"{\\\"name\\\":\\\"Alex Gleason :soapbox:\\\"}\",\n  \"tags\": [\n    [\"emoji\", \"soapbox\", \"https://gleasonator.com/emoji/Gleasonator/soapbox.png\"]\n  ],\n  \"pubkey\": \"79c2cae114ea28a981e7559b4fe7854a473521a8d22a66bbab9fa248eb820ff6\",\n  \"created_at\": 1682790000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Optional Tags for Nostr Zap Goal\nDESCRIPTION: Extended Nostr Zap Goal event with both required and optional tags, including closed_at timestamp, image URL, and summary for enhanced goal presentation.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 9041,\n  \"tags\": [\n    [\"relays\", \"wss://alicerelay.example.com\", \"wss://bobrelay.example.com\", /*...*/],\n    [\"amount\", \"210000\"],\n    [\"closed_at\", \"<unix timestamp in seconds>\"],\n    [\"image\", \"<image URL>\"],\n    [\"summary\", \"<description of the goal>\"],\n  ],\n  \"content\": \"Nostrasia travel expenses\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Repository State Announcement Event in Nostr (NIP-34)\nDESCRIPTION: Defines an optional event format for tracking branch and tag states within a git repository on Nostr. The event links to a repository and provides information about branch heads, tags, and the HEAD reference.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 30618,\n  \"content\": \"\",\n  \"tags\": [\n    [\"d\", \"<repo-id>\"], // matches the identifier in the coresponding repository announcement\n    [\"refs/<heads|tags>/<branch-or-tag-name>\",\"<commit-id>\"]\n    [\"HEAD\", \"ref: refs/heads/<branch-name>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Emoji in Kind 1 (Text Note) Event\nDESCRIPTION: Example of custom emoji implementation in a kind 1 (text note) event. Multiple custom emoji shortcodes are defined in tags and used in the content field where they should be replaced with their corresponding images.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 1,\n  \"content\": \"Hello :gleasonator: 😂 :ablobcatrainbow: :disputed: yolo\",\n    \"tags\": [\n    [\"emoji\", \"ablobcatrainbow\", \"https://gleasonator.com/emoji/blobcat/ablobcatrainbow.png\"],\n    [\"emoji\", \"disputed\", \"https://gleasonator.com/emoji/Fun/disputed.png\"],\n    [\"emoji\", \"gleasonator\", \"https://gleasonator.com/emoji/Gleasonator/gleasonator.png\"]\n  ],\n  \"pubkey\": \"79c2cae114ea28a981e7559b4fe7854a473521a8d22a66bbab9fa248eb820ff6\",\n  \"created_at\": 1682630000\n}\n```\n\n----------------------------------------\n\nTITLE: Linking to a Zap Goal from Addressable Events\nDESCRIPTION: Example of an addressable event linking to a zap goal using the 'goal' tag with an event ID and optional relay hint.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 3xxxx,\n  \"tags\": [\n    [\"goal\", \"<event id>\", \"<Relay URL (optional)>\"],\n    // rest of tags...\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Kind:31990 Handler Information Event in Nostr\nDESCRIPTION: This snippet shows the structure of a kind:31990 event which is published by applications to define how they handle specific event kinds. It includes supported platform tags with URL patterns and the kinds of events the application supports.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 31990,\n  \"pubkey\": \"<application-pubkey>\",\n  \"content\": \"<optional-kind:0-style-metadata>\",\n  \"tags\": [\n    [\"d\", <random-id>],\n    [\"k\", <supported-event-kind>],\n    [\"web\", \"https://..../a/<bech32>\", \"nevent\"],\n    [\"web\", \"https://..../p/<bech32>\", \"nprofile\"],\n    [\"web\", \"https://..../e/<bech32>\"],\n    [\"ios\", \".../<bech32>\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Patch Submission Event in Nostr (NIP-34)\nDESCRIPTION: Defines the event format for submitting git patches to repositories on Nostr. The event includes the patch content in git format-patch format, references to the target repository, and optional metadata for ensuring consistent commit IDs.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1617,\n  \"content\": \"<patch>\", // contents of <git format-patch>\n  \"tags\": [\n    [\"a\", \"30617:<base-repo-owner-pubkey>:<base-repo-id>\"],\n    [\"r\", \"<earliest-unique-commit-id-of-repo>\"] // so clients can subscribe to all patches sent to a local git repo\n    [\"p\", \"<repository-owner>\"],\n    [\"p\", \"<other-user>\"], // optionally send the patch to another user to bring it to their attention\n\n    [\"t\", \"root\"], // omitted for additional patches in a series\n    // for the first patch in a revision\n    [\"t\", \"root-revision\"],\n\n    // optional tags for when it is desirable that the merged patch has a stable commit id\n    // these fields are necessary for ensuring that the commit resulting from applying a patch\n    // has the same id as it had in the proposer's machine -- all these tags can be omitted\n    // if the maintainer doesn't care about these things\n    [\"commit\", \"<current-commit-id>\"],\n    [\"r\", \"<current-commit-id>\"] // so clients can find existing patches for a specific commit\n    [\"parent-commit\", \"<parent-commit-id>\"],\n    [\"commit-pgp-sig\", \"-----BEGIN PGP SIGNATURE-----...\"], // empty string for unsigned commit\n    [\"committer\", \"<name>\", \"<email>\", \"<timestamp>\", \"<timezone offset in minutes>\"],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Emoji in Kind 7 (Reaction) Event\nDESCRIPTION: Example of custom emoji implementation in a kind 7 (reaction) event. A single custom emoji ':dezh:' is defined to be used as a reaction, with the image sourced from a raw GitHub URL.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 7,\n  \"content\": \":dezh:\",\n  \"tags\": [\n    [\"emoji\", \"dezh\", \"https://raw.githubusercontent.com/dezh-tech/brand-assets/main/dezh/logo/black-normal.svg\"]\n  ],\n  \"pubkey\": \"79c2cae114ea28a981e7559b4fe7854a473521a8d22a66bbab9fa248eb820ff6\",\n  \"created_at\": 1682630000\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Client Tag in Standard Nostr Events\nDESCRIPTION: This code demonstrates how regular Nostr events (like kind:1) can include a 'client' tag to identify the client that published the note. The tag includes the client name, handler reference, and a relay hint for finding the handler event.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1,\n  \"tags\": [\n    [\"client\", \"My Client\", \"31990:app1-pubkey:<d-identifier>\", \"wss://relay1\"]\n  ]\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Event with Content Warning Implementation in Nostr\nDESCRIPTION: This example demonstrates a Nostr event (kind 1) that implements the content-warning tag along with supporting tags. It shows how to mark content as sensitive with an optional reason and how to use 'l' and 'L' tags from NIP-32 for additional classification.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"pubkey\": \"<pub-key>\",\n  \"created_at\": 1000000000,\n  \"kind\": 1,\n  \"tags\": [\n    [\"t\", \"hastag\"],\n    [\"L\", \"content-warning\"],\n    [\"l\", \"reason\", \"content-warning\"],\n    [\"L\", \"social.nos.ontology\"],\n    [\"l\", \"NS-nud\", \"social.nos.ontology\"],\n    [\"content-warning\", \"<optional reason>\"]\n  ],\n  \"content\": \"sensitive content with #hastag\\n\",\n  \"id\": \"<event-id>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Moderating Chat Events in Nostr\nDESCRIPTION: Example of a kind 1985 event that approves a chat event (kind 40) as part of a moderation system using the 'nip28.moderation' namespace.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1985,\n  \"tags\": [\n    [\"L\", \"nip28.moderation\"],\n    [\"l\", \"approve\", \"nip28.moderation\"],\n    [\"e\", <kind40_event_id>, <relay_url>]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypted Job Result Format\nDESCRIPTION: Shows how service providers should format encrypted job results when responding to encrypted job requests. The output is encrypted and placed in the content field with appropriate tags to indicate encryption.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"pubkey\": \"<service-provider pubkey>\",\n  \"content\": \"<encrypted payload>\",\n  \"kind\": 6xxx,\n  \"tags\": [\n    [\"request\", \"<job-request>\"],\n    [\"e\", \"<job-request-id>\", \"<relay-hint>\"],\n    [\"p\", \"<customer's-pubkey>\"],\n    [\"amount\", \"requested-payment-amount\", \"<optional-bolt11>\"],\n    [\"encrypted\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NIP-89 Service Provider Announcement in Nostr\nDESCRIPTION: This snippet demonstrates how to create a NIP-89 announcement event to advertise a service provider's capabilities in the nostr protocol. The example shows a DVM (Distributed Virtual Machine) that specializes in translating Bitcoin content, supporting job kind 5005 (translation) with a specific tag for Bitcoin content.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 31990,\n  \"pubkey\": \"<pubkey>\",\n  \"content\": \"{\n    \\\"name\\\": \\\"Translating DVM\\\",\n    \\\"about\\\": \\\"I'm a DVM specialized in translating Bitcoin content.\\\"  \n  }\",\n  \"tags\": [\n    [\"k\", \"5005\"], // e.g. translation\n    [\"t\", \"bitcoin\"] // e.g. optionally advertises it specializes in bitcoin audio transcription that won't confuse \"Drivechains\" with \"Ridechains\"\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Canonical Authentication Event Structure\nDESCRIPTION: Specifies the required format for authentication events, which must be kind 22242 and include relay and challenge tags. These events are ephemeral and not meant to be published.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 22242,\n  \"tags\": [\n    [\"relay\", \"wss://relay.example.com/\"],\n    [\"challenge\", \"challengestringhere\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning a License to an Event in Nostr\nDESCRIPTION: Example of a kind 1985 event that assigns the MIT license to another event using the 'license' namespace.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1985,\n  \"tags\": [\n    [\"L\", \"license\"],\n    [\"l\", \"MIT\", \"license\"],\n    [\"e\", <event_id>, <relay_url>]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Server Selection Event Structure in NIP-96\nDESCRIPTION: JSON structure for a kind 10096 replaceable event used to specify file servers a user wants to upload to. The event includes server URLs as tags for client reference.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 10096,\n  \"content\": \"\",\n  \"tags\": [\n    [\"server\", \"https://file.server.one\"],\n    [\"server\", \"https://file.server.two\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Basic COUNT Request Syntax in Nostr Protocol\nDESCRIPTION: Defines the basic syntax for the COUNT verb in Nostr protocol. It accepts a subscription ID and JSON filters similar to the REQ verb from NIP-01.\n\nLANGUAGE: json\nCODE:\n```\n[\"COUNT\", <subscription_id>, <filters JSON>...]\n```\n\n----------------------------------------\n\nTITLE: Self-labeling a Note with Language in Nostr\nDESCRIPTION: Example of a kind 1 event where the author self-labels the language of their note as English using the ISO-639-1 standard.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1,\n  \"tags\": [\n    [\"L\", \"ISO-639-1\"],\n    [\"l\", \"en\", \"ISO-639-1\"]\n  ],\n  \"content\": \"English text\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: HTTP Authorization Header Example for Nostr Authentication\nDESCRIPTION: Example of how to structure the HTTP Authorization header using the Nostr scheme with a base64-encoded kind 27235 event.\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Nostr \neyJpZCI6ImZlOTY0ZTc1ODkwMzM2MGYyOGQ4NDI0ZDA5MmRhODQ5NGVkMjA3Y2JhODIzMTEwYmUzYTU3ZGZlNGI1Nzg3MzQiLCJwdWJrZXkiOiI2M2ZlNjMxOGRjNTg1ODNjZmUxNjgxMGY4NmRkMDllMThiZmQ3NmFhYmMyNGEwMDgxY2UyODU2ZjMzMDUwNGVkIiwiY29udGVudCI6IiIsImtpbmQiOjI3MjM1LCJjcmVhdGVkX2F0IjoxNjgyMzI3ODUyLCJ0YWdzIjpbWyJ1IiwiaHR0cHM6Ly9hcGkuc25vcnQuc29jaWFsL2FwaS92MS9uNXNwL2xpc3QiXSxbIm1ldGhvZCIsIkdFVCJdXSwic2lnIjoiNWVkOWQ4ZWM5NThiYzg1NGY5OTdiZGMyNGFjMzM3ZDAwNWFmMzcyMzI0NzQ3ZWZlNGEwMGUyNGY0YzMwNDM3ZmY0ZGQ4MzA4Njg0YmVkNDY3ZDlkNmJlM2U1YTUxN2JiNDNiMTczMmNjN2QzMzk0OWEzYWFmODY3MDVjMjIxODQifQ\n```\n\n----------------------------------------\n\nTITLE: Customer Order JSON Structure in Nostr Marketplace\nDESCRIPTION: JSON structure for a customer order (type 0) sent via NIP-04 encrypted direct message. Contains order details including customer information, items being ordered, and shipping selection.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": <string, id generated by the customer>,\n  \"type\": 0,\n  \"name\": <string (optional), ???>,\n  \"address\": <string (optional), for physical goods an address should be provided>,\n  \"message\": <string (optional), message for merchant>,\n  \"contact\": {\n    \"nostr\": <32-bytes hex of a pubkey>,\n    \"phone\": <string (optional), if the customer wants to be contacted by phone>,\n    \"email\": <string (optional), if the customer wants to be contacted by email>\n  },\n  \"items\": [\n    {\n      \"product_id\": <string, id of the product>,\n      \"quantity\": <int, how many products the customer is ordering>\n    }\n  ],\n  \"shipping_id\": <string, id of the shipping zone>\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Approximate Post Count in Nostr\nDESCRIPTION: Demonstrates a request to count all posts (kind 1) with a response indicating the count is approximate, which may be used for performance reasons.\n\nLANGUAGE: json\nCODE:\n```\n[\"COUNT\", <subscription_id>, {\"kinds\": [1]}]\n[\"COUNT\", <subscription_id>, {\"count\": 93412452, \"approximate\": true}]\n```\n\n----------------------------------------\n\nTITLE: Extended Repository State Tracking in Nostr (NIP-34)\nDESCRIPTION: Shows an optional extension to the refs tag that enables clients to identify how many commits ahead a reference is by including parent commit information in the repository state announcement.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"tags\": [\n    [\"refs/<heads|tags>/<branch-or-tag-name>\", \"<commit-id>\", \"<shorthand-parent-commit-id>\", \"<shorthand-grandparent>\", ...],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating/Updating Marketplace UI/UX with Event 30019\nDESCRIPTION: JSON schema for creating or updating a marketplace's UI and UX settings. This event uses naddr to enable comprehensive customization, including market name, description, visual elements like logo and banner, theme settings, and merchant lists.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"name\": <string (optional), market name>,\n  \"about\": <string (optional), market description>,\n  \"ui\": {\n    \"picture\": <string (optional), market logo image URL>,\n    \"banner\": <string (optional), market logo banner URL>,\n    \"theme\": <string (optional), market theme>,\n    \"darkMode\": <bool, true/false>\n  },\n  \"merchants\": [array of pubkeys (optional)],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Nostr Event with ActivityPub Proxy Tag\nDESCRIPTION: Example of a Nostr event (kind 1) that includes a proxy tag referencing an ActivityPub object. This demonstrates how to properly format the proxy tag with the source object URL and protocol identifier.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 1,\n  \"content\": \"I'm vegan btw\",\n  \"tags\": [\n    [\n      \"proxy\",\n      \"https://gleasonator.com/objects/8f6fac53-4f66-4c6e-ac7d-92e5e78c3e79\",\n      \"activitypub\"\n    ]\n  ],\n  \"pubkey\": \"79c2cae114ea28a981e7559b4fe7854a473521a8d22a66bbab9fa248eb820ff6\",\n  \"created_at\": 1691091365,\n  \"id\": \"55920b758b9c7b17854b6e3d44e6a02a83d1cb49e1227e75a30426dea94d4cb2\",\n  \"sig\": \"a72f12c08f18e85d98fb92ae89e2fe63e48b8864c5e10fbdd5335f3c9f936397a6b0a7350efe251f8168b1601d7012d4a6d0ee6eec958067cf22a14f5a5ea579\"\n}\n```\n\n----------------------------------------\n\nTITLE: Status Management Event in Nostr (NIP-34)\nDESCRIPTION: Defines events for managing the status of patches and issues in the Nostr git collaboration workflow. Different kinds represent various states (Open, Applied/Merged, Closed, Draft) and the event includes references to the original item and optional metadata about merge commits.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1630, // Open\n  \"kind\": 1631, // Applied / Merged for Patches; Resolved for Issues\n  \"kind\": 1632, // Closed\n  \"kind\": 1633, // Draft\n  \"content\": \"<markdown text>\",\n  \"tags\": [\n    [\"e\", \"<issue-or-original-root-patch-id-hex>\", \"\", \"root\"],\n    [\"e\", \"<accepted-revision-root-id-hex>\", \"\", \"reply\"], // for when revisions applied\n    [\"p\", \"<repository-owner>\"],\n    [\"p\", \"<root-event-author>\"],\n    [\"p\", \"<revision-author>\"],\n\n    // optional for improved subscription filter efficiency\n    [\"a\", \"30617:<base-repo-owner-pubkey>:<base-repo-id>\", \"<relay-url>\"],\n    [\"r\", \"<earliest-unique-commit-id-of-repo>\"]\n\n    // optional for `1631` status\n    [\"e\", \"<applied-or-merged-patch-event-id>\", \"\", \"mention\"], // for each\n    // when merged\n    [\"merge-commit\", \"<merge-commit-id>\"]\n    [\"r\", \"<merge-commit-id>\"]\n    // when applied\n    [\"applied-as-commits\", \"<commit-id-in-master-branch>\", ...]\n    [\"r\", \"<applied-commit-id>\"] // for each\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Placing Bids with Event 1021\nDESCRIPTION: JSONC schema for placing bids on auction items. The bid includes the bid amount in the content field and references the auction being bid on through event tags.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"content\": <int, amount of sats>,\n    \"tags\": [[\"e\", <event ID of the auction to bid on>]],\n    // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Confirming Bids with Event 1022\nDESCRIPTION: JSON schema for bid confirmation events. Merchants confirm bids with statuses (accepted, rejected, pending, winner), optional messages, and can extend auction duration. The event tags reference both the bid and the auction.\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"status\": <String, \"accepted\" | \"rejected\" | \"pending\" | \"winner\">,\n    \"message\": <String (optional)>,\n    \"duration_extended\": <int (optional), number of seconds>\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n  \"tags\": [[\"e\" <event ID of the bid being confirmed>], [\"e\", <event ID of the auction>]],\n```\n\n----------------------------------------\n\nTITLE: Creating a Curation Set for Articles in Nostr (Kind 30004)\nDESCRIPTION: A JSON example of a Nostr event with kind 30004, representing a curation set of articles about yaks. It includes metadata tags for name, picture, and about information, along with references to other Nostr events.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"567b41fc9060c758c4216fe5f8d3df7c57daad7ae757fa4606f0c39d4dd220ef\",\n  \"pubkey\": \"d6dc95542e18b8b7aec2f14610f55c335abebec76f3db9e58c254661d0593a0c\",\n  \"created_at\": 1695327657,\n  \"kind\": 30004,\n  \"tags\": [\n    [\"d\", \"jvdy9i4\"],\n    [\"name\", \"Yaks\"],\n    [\"picture\", \"https://cdn.britannica.com/40/188540-050-9AC748DE/Yak-Himalayas-Nepal.jpg\"],\n    [\"about\", \"The domestic yak, also known as the Tartary ox, grunting ox, or hairy cattle, is a species of long-haired domesticated cattle found throughout the Himalayan region of the Indian subcontinent, the Tibetan Plateau, Gilgit-Baltistan, Tajikistan and as far north as Mongolia and Siberia.\"],\n    [\"a\", \"30023:26dc95542e18b8b7aec2f14610f55c335abebec76f3db9e58c254661d0593a0c:95ODQzw3ajNoZ8SyMDOzQ\"],\n    [\"a\", \"30023:54af95542e18b8b7aec2f14610f55c335abebec76f3db9e58c254661d0593a0c:1-MYP8dAhramH9J5gJWKx\"],\n    [\"a\", \"30023:f8fe95542e18b8b7aec2f14610f55c335abebec76f3db9e58c254661d0593a0c:D2Tbd38bGrFvU0bIbvSMt\"],\n    [\"e\", \"d78ba0d5dce22bfff9db0a9e996c9ef27e2c91051de0c4e1da340e0326b4941e\"]\n  ],\n  \"content\": \"\",\n  \"sig\": \"a9a4e2192eede77e6c9d24ddfab95ba3ff7c03fbd07ad011fff245abea431fb4d3787c2d04aad001cb039cb8de91d83ce30e9a94f82ac3c5a2372aa1294a96bd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Private Relay List in JavaScript for nostr Protocol\nDESCRIPTION: Defines the structure of a kind 10013 event that specifies a user's preferred relays for storing private content like drafts. The relay list is encrypted using NIP-44 to the signer's keys and placed in the content field.\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  \"kind\": 10013,\n  \"tags\": [],\n  \"content\": nip44Encrypt(JSON.stringify([\n    [\"relay\", \"wss://myrelay.mydomain.com\"]\n  ]))\n  //...other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Decoding Profile with TLV Example (Nostr bech32 Format)\nDESCRIPTION: Example showing how a profile with TLV (Type-Length-Value) encoded metadata including pubkey and relay information should be decoded from the bech32 format with the 'nprofile' prefix.\n\nLANGUAGE: markdown\nCODE:\n```\nnprofile1qqsrhuxx8l9ex335q7he0f09aej04zpazpl0ne2cgukyawd24mayt8gpp4mhxue69uhhytnc9e3k7mgpz4mhxue69uhkg6nzv9ejuumpv34kytnrdaksjlyr9p should decode into a profile with the following TLV items:\n  - pubkey: 3bf0c63fcb93463407af97a5e5ee64fa883d107ef9e558472c4eb9aaaefa459d\n  - relay: wss://r.x.com\n  - relay: wss://djbas.sadkb.com\n```\n\n----------------------------------------\n\nTITLE: Defining Release Artifacts in Nostr (Kind 30063)\nDESCRIPTION: A JSONC example of a Nostr event with kind 30063, representing a release artifact set for an example app. It includes references to different binary formats for various platforms and contains release notes in markdown format.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": \"567b41fc9060c758c4216fe5f8d3df7c57daad7ae757fa4606f0c39d4dd220ef\",\n  \"pubkey\": \"d6dc95542e18b8b7aec2f14610f55c335abebec76f3db9e58c254661d0593a0c\",\n  \"created_at\": 1695327657,\n  \"kind\": 30063,\n  \"content\": \"Release notes in markdown\",\n  \"tags\": [\n    [\"d\", \"com.example.app@0.0.1\"],\n    [\"e\", \"d78ba0d5dce22bfff9db0a9e996c9ef27e2c91051de0c4e1da340e0326b4941e\"], // Windows exe\n    [\"e\", \"f27e2c91051de0c4e1da0d5dce22bfff9db0a9340e0326b4941ed78bae996c9e\"], // MacOS dmg\n    [\"e\", \"9d24ddfab95ba3ff7c03fbd07ad011fff245abea431fb4d3787c2d04aad02332\"], // Linux AppImage\n    [\"e\", \"340e0326b340e0326b4941ed78ba340e0326b4941ed78ba340e0326b49ed78ba\"], // PWA\n    [\"a\", \"32267:d6dc95542e18b8b7aec2f14610f55c335abebec76f3db9e58c254661d0593a0c:com.example.app\"] // Reference to parent software application\n  ],\n  \"content\": \"Example App is a decentralized marketplace for apps\",\n  \"sig\": \"a9a4e2192eede77e6c9d24ddfab95ba3ff7c03fbd07ad011fff245abea431fb4d3787c2d04aad001cb039cb8de91d83ce30e9a94f82ac3c5a2372aa1294a96bd\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing General User Status in Nostr\nDESCRIPTION: Example of a general status event in Nostr using kind:30315. This demonstrates how to structure a basic status update with a link to a website. The 'd' tag indicates this is a general status type.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 30315,\n  \"content\": \"Sign up for nostrasia!\",\n  \"tags\": [\n    [\"d\", \"general\"],\n    [\"r\", \"https://nostr.world\"]\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nostr URI for a profile (nprofile)\nDESCRIPTION: An example of a 'nostr:' URI containing an 'nprofile' identifier, which represents a user profile with additional routing information.\n\nLANGUAGE: plaintext\nCODE:\n```\nnostr:nprofile1qqsrhuxx8l9ex335q7he0f09aej04zpazpl0ne2cgukyawd24mayt8gpp4mhxue69uhhytnc9e3k7mgpz4mhxue69uhkg6nzv9ejuumpv34kytnrdaksjlyr9p\n```\n\n----------------------------------------\n\nTITLE: Example Nostr URI for a note ID (note)\nDESCRIPTION: An example of a 'nostr:' URI containing a 'note' identifier, which represents a specific note/event ID in bech32 format.\n\nLANGUAGE: plaintext\nCODE:\n```\nnostr:note1fntxtkcy9pjwucqwa9mddn7v03wwwsu9j330jj350nvhpky2tuaspk6nqc\n```\n\n----------------------------------------\n\nTITLE: Encrypting Private Items in Nostr using NIP-04\nDESCRIPTION: Scala pseudocode demonstrating the encryption process for private items in a Nostr event. It uses NIP-04 encryption to encode private information such as pubkeys and other event references before adding them to the event content.\n\nLANGUAGE: scala\nCODE:\n```\nval private_items = [\n  [\"p\", \"07caba282f76441955b695551c3c5c742e5b9202a3784780f8086fdcdc1da3a9\"],\n  [\"a\", \"a55c15f5e41d5aebd236eca5e0142789c5385703f1a7485aa4b38d94fd18dcc4\"],\n]\nval base64blob = nip04.encrypt(json.encode_to_string(private_items))\nevent.content = base64blob\n```\n\n----------------------------------------\n\nTITLE: Implementing Music User Status in Nostr with Expiration\nDESCRIPTION: Example of a music status event with an expiration time. This demonstrates how to share what music a user is listening to, with a link to the track and an expiration timestamp when the track will finish playing.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 30315,\n  \"content\": \"Intergalatic - Beastie Boys\",\n  \"tags\": [\n    [\"d\", \"music\"],\n    [\"r\", \"spotify:search:Intergalatic%20-%20Beastie%20Boys\"],\n    [\"expiration\", \"1692845589\"]\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Example Nostr URI for an event with additional data (nevent)\nDESCRIPTION: An example of a 'nostr:' URI containing an 'nevent' identifier, which represents a note/event with additional routing information.\n\nLANGUAGE: plaintext\nCODE:\n```\nnostr:nevent1qqstna2yrezu5wghjvswqqculvvwxsrcvu7uc0f78gan4xqhvz49d9spr3mhxue69uhkummnw3ez6un9d3shjtn4de6x2argwghx6egpr4mhxue69uhkummnw3ez6ur4vgh8wetvd3hhyer9wghxuet5nxnepm\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Structure for Nostr Calendar Event Response (kind 31925)\nDESCRIPTION: This JSON structure defines the format for a nostr calendar event response (kind 31925). It includes required fields like event ID, public key, timestamp, and tags that specify the response status (accepted/declined/tentative) and availability (free/busy). The example demonstrates how to reference the original calendar event and provide response metadata.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": <32-bytes lowercase hex-encoded SHA-256 of the the serialized event data>,\n  \"pubkey\": <32-bytes lowercase hex-encoded public key of the event creator>,\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 31925,\n  \"content\": \"<note>\",\n  \"tags\": [\n    [\"e\", \"<kind 31922 or 31923 event id\", \"<optional recommended relay URL>\"]\n    [\"a\", \"<31922 or 31923>:<calendar event author pubkey>:<d-identifier of calendar event>\", \"<optional recommended relay URL>\"],\n    [\"d\", \"<UUID>\"],\n    [\"status\", \"<accepted/declined/tentative>\"],\n    [\"fb\", \"<free/busy>\"],\n    [\"p\", \"<hex pubkey of kind 31922 or 31923 event>\", \"<optional recommended relay URL>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing External Identity Tags in Nostr Profile Metadata using JSONC\nDESCRIPTION: This example demonstrates how to include external identity verification in a Nostr kind 0 metadata event using the 'i' tag. The snippet shows verification for GitHub, Twitter, Mastodon, and Telegram accounts with their respective proof formats.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"id\": <id>,\n  \"pubkey\": <pubkey>,\n  \"tags\": [\n    [\"i\", \"github:semisol\", \"9721ce4ee4fceb91c9711ca2a6c9a5ab\"],\n    [\"i\", \"twitter:semisol_public\", \"1619358434134196225\"],\n    [\"i\", \"mastodon:bitcoinhackers.org/@semisol\", \"109775066355589974\"]\n    [\"i\", \"telegram:1087295469\", \"nostrdirectory/770\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Live Event Structure in Nostr (kind:30311)\nDESCRIPTION: Example structure for a Live Event (kind:30311) in Nostr that tracks participants with their roles. This event type stores metadata about the activity including title, description, status, and participant information with optional proof of participation agreement.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 30311,\n  \"tags\": [\n    [\"d\", \"<unique identifier>\"],\n    [\"title\", \"<name of the event>\"],\n    [\"summary\", \"<description>\"],\n    [\"image\", \"<preview image url>\"],\n    [\"t\", \"hashtag\"]\n    [\"streaming\", \"<url>\"],\n    [\"recording\", \"<url>\"], // used to place the edited video once the activity is over\n    [\"starts\", \"<unix timestamp in seconds>\"],\n    [\"ends\", \"<unix timestamp in seconds>\"],\n    [\"status\", \"<planned, live, ended>\"],\n    [\"current_participants\", \"<number>\"],\n    [\"total_participants\", \"<number>\"],\n    [\"p\", \"91cf9..4e5ca\", \"wss://provider1.com/\", \"Host\", \"<proof>\"],\n    [\"p\", \"14aeb..8dad4\", \"wss://provider2.com/nostr\", \"Speaker\"],\n    [\"p\", \"612ae..e610f\", \"ws://provider3.com/ws\", \"Participant\"],\n    [\"relays\", \"wss://one.com\", \"wss://two.com\", /*...*/],\n    [\"pinned\", \"<event id of pinned live chat message>\"],\n  ],\n  \"content\": \"\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Padded Length for Encryption in Python\nDESCRIPTION: Function to calculate the appropriate padded length for a byte array based on the unpadded length. It determines the padding chunk size based on the original length to ensure proper alignment.\n\nLANGUAGE: python\nCODE:\n```\ndef calc_padded_len(unpadded_len):\n  next_power = 1 << (floor(log2(unpadded_len - 1))) + 1\n  if next_power <= 256:\n    chunk = 32\n  else:\n    chunk = next_power / 8\n  if unpadded_len <= 32:\n    return 32\n  else:\n    return chunk * (floor((len - 1) / chunk) + 1)\n```\n\n----------------------------------------\n\nTITLE: Creating Live Chat Messages in Nostr (kind:1311)\nDESCRIPTION: Structure for Live Chat Message events (kind:1311) that reference a live activity. These events must include an 'a' tag referencing the parent activity and can optionally include 'e' tags for replies to specific messages.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1311,\n  \"tags\": [\n    [\"a\", \"30311:<Community event author pubkey>:<d-identifier of the community>\", \"<Optional relay url>\", \"root\"],\n  ],\n  \"content\": \"Zaps to live streams is beautiful.\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Example: Relay Rejecting COUNT Request in Nostr\nDESCRIPTION: Shows how a relay rejects a COUNT request for direct messages (kind 4) with an authentication error, using the CLOSED message format.\n\nLANGUAGE: json\nCODE:\n```\n[\"COUNT\", <subscription_id>, {\"kinds\": [4], \"authors\": [<pubkey>], \"#p\": [<pubkey>]}]\n[\"CLOSED\", <subscription_id>, \"auth-required: cannot count other people's DMs\"]\n```\n\n----------------------------------------\n\nTITLE: Reporting Profile Impersonation\nDESCRIPTION: Example of a report event targeting a user for impersonating another user. The report tags the impersonator's pubkey with the 'impersonation' report type and includes clarifying information about the victim in the content field.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1984,\n  \"tags\": [\n    [\"p\", \"<impersonator pubkey>\", \"impersonation\"]\n  ],\n  \"content\": \"Profile is impersonating nostr:<victim bech32 pubkey>\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Pay Invoice Request JSON Structure\nDESCRIPTION: A JSON-RPC request structure for the pay_invoice method. It includes the invoice to be paid and an optional amount parameter.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"pay_invoice\",\n    \"params\": {\n        \"invoice\": \"lnbc50n1...\", // bolt11 invoice\n        \"amount\": 123, // invoice amount in msats, optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting a Blob for Malware with Server Reference\nDESCRIPTION: Example of a report event targeting a blob (file) for containing malware. The report includes the blob hash, the event containing the blob, and a server tag pointing to where the blob might be found for verification purposes.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1984,\n  \"tags\": [\n    [\"x\", \"<blob hash>\", \"malware\"],\n    [\"e\", \"<event id which contains the blob on x tag>\", \"malware\"],\n    [\"server\", \"https://you-may-find-the-blob-here.com/path-to-url.ext\"]\n  ],\n  \"content\": \"This file contains malware software in it.\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Pay Invoice Response JSON Structure\nDESCRIPTION: A JSON-RPC response structure for the pay_invoice method. It includes the payment preimage and optional information about fees paid.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"pay_invoice\",\n    \"result\": {\n        \"preimage\": \"0123456789abcdef...\", // preimage of the payment\n        \"fees_paid\": 123, // value in msats, optional\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Gift Wrap Event with Encrypted Seal in JSON\nDESCRIPTION: This example demonstrates the final step in the Gift Wrap protocol, creating a kind 1059 (gift wrap) event that contains the encrypted seal. It's signed with an ephemeral key and includes a p tag for routing to the recipient.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"AhC3Qj/QsKJFWuf6xroiYip+2yK95qPwJjVvFujhzSguJWb/6TlPpBW0CGFwfufCs2Zyb0JeuLmZhNlnqecAAalC4ZCugB+I9ViA5pxLyFfQjs1lcE6KdX3euCHBLAnE9GL/+IzdV9vZnfJH6atVjvBkNPNzxU+OLCHO/DAPmzmMVx0SR63frRTCz6Cuth40D+VzluKu1/Fg2Q1LSst65DE7o2efTtZ4Z9j15rQAOZfE9jwMCQZt27rBBK3yVwqVEriFpg2mHXc1DDwHhDADO8eiyOTWF1ghDds/DxhMcjkIi/o+FS3gG1dG7gJHu3KkGK5UXpmgyFKt+421m5o++RMD/BylS3iazS1S93IzTLeGfMCk+7IKxuSCO06k1+DaasJJe8RE4/rmismUvwrHu/HDutZWkvOAhd4z4khZo7bJLtiCzZCZ74lZcjOB4CYtuAX2ZGpc4I1iOKkvwTuQy9BWYpkzGg3ZoSWRD6ty7U+KN+fTTmIS4CelhBTT15QVqD02JxfLF7nA6sg3UlYgtiGw61oH68lSbx16P3vwSeQQpEB5JbhofW7t9TLZIbIW/ODnI4hpwj8didtk7IMBI3Ra3uUP7ya6vptkd9TwQkd/7cOFaSJmU+BIsLpOXbirJACMn+URoDXhuEtiO6xirNtrPN8jYqpwvMUm5lMMVzGT3kMMVNBqgbj8Ln8VmqouK0DR+gRyNb8fHT0BFPwsHxDskFk5yhe5c/2VUUoKCGe0kfCcX/EsHbJLUUtlHXmTqaOJpmQnW1tZ/siPwKRl6oEsIJWTUYxPQmrM2fUpYZCuAo/29lTLHiHMlTbarFOd6J/ybIbICy2gRRH/LFSryty3Cnf6aae+A9uizFBUdCwTwffc3vCBae802+R92OL78bbqHKPbSZOXNC+6ybqziezwG+OPWHx1Qk39RYaF0aFsM4uZWrFic97WwVrH5i+/Nsf/OtwWiuH0gV/SqvN1hnkxCTF/+XNn/laWKmS3e7wFzBsG8+qwqwmO9aVbDVMhOmeUXRMkxcj4QreQkHxLkCx97euZpC7xhvYnCHarHTDeD6nVK+xzbPNtzeGzNpYoiMqxZ9bBJwMaHnEoI944Vxoodf51cMIIwpTmmRvAzI1QgrfnOLOUS7uUjQ/IZ1Qa3lY08Nqm9MAGxZ2Ou6R0/Z5z30ha/Q71q6meAs3uHQcpSuRaQeV29IASmye2A2Nif+lmbhV7w8hjFYoaLCRsdchiVyNjOEM4VmxUhX4VEvw6KoCAZ/XvO2eBF/SyNU3Of4SO\",\n  \"kind\": 1059,\n  \"created_at\": 1703021488,\n  \"pubkey\": \"18b1a75918f1f2c90c23da616bce317d36e348bcf5f7ba55e75949319210c87c\",\n  \"id\": \"5c005f3ccf01950aa8d131203248544fb1e41a0d698e846bd419cec3890903ac\",\n  \"sig\": \"35fabdae4634eb630880a1896a886e40fd6ea8a60958e30b89b33a93e6235df750097b04f9e13053764251b8bc5dd7e8e0794a3426a90b6bcc7e5ff660f54259\",\n  \"tags\": [[\"p\", \"166bf3765ebd1fc55decfe395beff2ea3b2a4e0a8946e7eb578512b555737c99\"]]\n}\n```\n\n----------------------------------------\n\nTITLE: Looking Up Invoice Details in Nostr Lightning API\nDESCRIPTION: The lookup_invoice method retrieves details about an existing invoice using either its payment hash or the full BOLT11 invoice string. This allows checking the status and details of previously created invoices.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"lookup_invoice\",\n    \"params\": {\n        \"payment_hash\": \"31afdf1..\", // payment hash of the invoice, one of payment_hash or invoice is required\n        \"invoice\": \"lnbc50n1...\" // invoice to lookup\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Token Event Example After Spending in Nostr (NIP-60)\nDESCRIPTION: Example of a token event after spending 4 sats, showing how unspent proofs are rolled over to a new event and the original event is referenced in the 'del' array.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 7375,\n    \"id\": \"event-id-2\",\n    \"content\": nip44_encrypt({\n        \"mint\": \"https://stablenut.umint.cash\",\n        \"proofs\": [\n            { \"id\": \"1\", \"amount\": 1 },\n            { \"id\": \"2\", \"amount\": 2 },\n            { \"id\": \"4\", \"amount\": 8 },\n        ],\n        \"del\": [ \"event-id-1\" ]\n    }),\n    \"tags\": []\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Transaction List in Nostr Lightning API\nDESCRIPTION: The response for list_transactions returns an array of transaction objects, each containing complete details about invoices or payments matching the query parameters. Each transaction includes payment status, amount, timestamps, and metadata.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"list_transactions\",\n    \"result\": {\n        \"transactions\": [\n            {\n               \"type\": \"incoming\", // \"incoming\" for invoices, \"outgoing\" for payments\n               \"invoice\": \"string\", // encoded invoice, optional\n               \"description\": \"string\", // invoice's description, optional\n               \"description_hash\": \"string\", // invoice's description hash, optional\n               \"preimage\": \"string\", // payment's preimage, optional if unpaid\n               \"payment_hash\": \"string\", // Payment hash for the payment\n               \"amount\": 123, // value in msats\n               \"fees_paid\": 123, // value in msats\n               \"created_at\": unixtimestamp, // invoice/payment creation time\n               \"expires_at\": unixtimestamp, // invoice expiration time, optional if not applicable\n               \"settled_at\": unixtimestamp, // invoice/payment settlement time, optional if unpaid\n               \"metadata\": {} // generic metadata that can be used to add things like zap/boostagram details for a payer name/comment/etc.\n           }\n        ],\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Global Request to Vanish in Nostr (Kind 62)\nDESCRIPTION: JSON structure for a Kind 62 event that requests ALL relays to delete all data associated with the sender's public key. It uses a special 'ALL_RELAYS' value in the relay tag to indicate global deletion.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 62,\n  \"pubkey\": <32-byte hex-encoded public key of the event creator>,\n  \"tags\": [\n    [\"relay\", \"ALL_RELAYS\"]\n  ],\n  \"content\": \"<reason>\",\n  //...other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Wallet Balance in Nostr Lightning API\nDESCRIPTION: The get_balance method returns the current wallet balance in millisatoshis. This provides a simple way to check available funds without requiring authentication or additional parameters.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"get_balance\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Single Move Chess Game Notation in PGN\nDESCRIPTION: A simple PGN example showing a game with only one move recorded. The asterisk indicates the game is not completed or the result is unknown.\n\nLANGUAGE: pgn\nCODE:\n```\n1. e4 *\n```\n\n----------------------------------------\n\nTITLE: Response Format for Balance Query in Nostr Lightning API\nDESCRIPTION: The response for get_balance returns the current wallet balance in millisatoshis. This simple response provides the exact amount available for payments in the user's Lightning wallet.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"result_type\": \"get_balance\",\n    \"result\": {\n        \"balance\": 10000, // user's balance in msats\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Lichess Chess Games in PGN Format\nDESCRIPTION: A PGN database containing two Lichess chess games with comprehensive metadata including player ratings, time controls, and game termination reasons. This demonstrates the format for storing multiple games in a single PGN file.\n\nLANGUAGE: pgn\nCODE:\n```\n[Event \"Hourly HyperBullet Arena\"]\n[Site \"https://lichess.org/wxx4GldJ\"]\n[Date \"2017.04.01\"]\n[White \"T_LUKE\"]\n[Black \"decidement\"]\n[Result \"1-0\"]\n[UTCDate \"2017.04.01\"]\n[UTCTime \"11:56:14\"]\n[WhiteElo \"2047\"]\n[BlackElo \"1984\"]\n[WhiteRatingDiff \"+10\"]\n[BlackRatingDiff \"-7\"]\n[Variant \"Standard\"]\n[TimeControl \"30+0\"]\n[ECO \"B00\"]\n[Termination \"Abandoned\"]\n\n1. e4 1-0\n\n\n[Event \"Hourly HyperBullet Arena\"]\n[Site \"https://lichess.org/rospUdSk\"]\n[Date \"2017.04.01\"]\n[White \"Bastel\"]\n[Black \"oslochess\"]\n[Result \"1-0\"]\n[UTCDate \"2017.04.01\"]\n[UTCTime \"11:55:56\"]\n[WhiteElo \"2212\"]\n[BlackElo \"2000\"]\n[WhiteRatingDiff \"+6\"]\n[BlackRatingDiff \"-4\"]\n[Variant \"Standard\"]\n[TimeControl \"30+0\"]\n[ECO \"A01\"]\n[Termination \"Normal\"]\n\n1. b3 d5 2. Bb2 c6 3. Nc3 Bf5 4. d4 Nf6 5. e3 Nbd7 6. f4 Bg6 7. Nf3 Bh5 8. Bd3 e6 9. O-O Be7 10. Qe1 O-O 11. Ne5 Bg6 12. Nxg6 hxg6 13. e4 dxe4 14. Nxe4 Nxe4 15. Bxe4 Nf6 16. c4 Bd6 17. Bc2 Qc7 18. f5 Be7 19. fxe6 fxe6 20. Qxe6+ Kh8 21. Qh3+ Kg8 22. Bxg6 Qd7 23. Qe3 Bd6 24. Bf5 Qe7 25. Be6+ Kh8 26. Qh3+ Nh7 27. Bf5 Rf6 28. Qxh7# 1-0\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Information in Nostr Lightning API\nDESCRIPTION: The get_info method returns details about the Lightning node including its alias, color, public key, network, and block height. It also lists the supported API methods and notifications available for the current connection.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"method\": \"get_info\",\n    \"params\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing kind:10002 Relay List in Nostr\nDESCRIPTION: Example of a kind:10002 event that specifies a user's preferred relays with read/write markers. This event format defines which relays should be used to discover a user's content and where to broadcast events that mention them.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 10002,\n  \"tags\": [\n    [\"r\", \"wss://alicerelay.example.com\"],\n    [\"r\", \"wss://brando-relay.com\"],\n    [\"r\", \"wss://expensive-relay.example2.com\", \"write\"],\n    [\"r\", \"wss://nostr-relay.example.com\", \"read\"]\n  ],\n  \"content\": \"\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Payment Sent Notification Structure in Nostr Protocol\nDESCRIPTION: JSON structure for the payment_sent notification in Nostr protocol. This notification is sent when a payment is successfully processed by the wallet, containing details such as invoice information, payment hash, amounts, timestamps, and optional metadata.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"notification_type\": \"payment_sent\",\n    \"notification\": {\n        \"type\": \"outgoing\",\n        \"invoice\": \"string\", // encoded invoice\n        \"description\": \"string\", // invoice's description, optional\n        \"description_hash\": \"string\", // invoice's description hash, optional\n        \"preimage\": \"string\", // payment's preimage\n        \"payment_hash\": \"string\", // Payment hash for the payment\n        \"amount\": 123, // value in msats\n        \"fees_paid\": 123, // value in msats\n        \"created_at\": unixtimestamp, // invoice/payment creation time\n        \"expires_at\": unixtimestamp, // invoice expiration time, optional if not applicable\n        \"settled_at\": unixtimestamp, // invoice/payment settlement time\n        \"metadata\": {} // generic metadata that can be used to add things like zap/boostagram details for a payer name/comment/etc.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing NIP-70 Protected Events Communication Flow in Nostr\nDESCRIPTION: This code snippet demonstrates the complete authentication and event publishing flow for protected events between a client and relay in Nostr. It shows how a relay rejects a protected event, requests authentication via NIP-42, and only accepts the event after successful authentication by the author.\n\nLANGUAGE: jsonc\nCODE:\n```\n/* client: */\n[\"EVENT\",{\"id\":\"cb8feca582979d91fe90455867b34dbf4d65e4b86e86b3c68c368ca9f9eef6f2\",\"pubkey\":\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\"created_at\":1707409439,\"kind\":1,\"tags\":[[\"--\"]]},\"content\":\"hello members of the secret group\",\"sig\":\"fa163f5cfb75d77d9b6269011872ee22b34fb48d23251e9879bb1e4ccbdd8aaaf4b6dc5f5084a65ef42c52fbcde8f3178bac3ba207de827ec513a6aa39fa684c\"}]\n/* relay: */\n[\"AUTH\", \"<challenge>\"]\n[\"OK\", \"cb8feca582979d91fe90455867b34dbf4d65e4b86e86b3c68c368ca9f9eef6f2\", false, \"auth-required: this event may only be published by its author\"]\n/* client: */\n[\"AUTH\", {}]\n[\"EVENT\",{\"id\":\"cb8feca582979d91fe90455867b34dbf4d65e4b86e86b3c68c368ca9f9eef6f2\",\"pubkey\":\"79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\",\"created_at\":1707409439,\"kind\":1,\"tags\":[[\"--\"]]},\"content\":\"hello members of the secret group\",\"sig\":\"fa163f5cfb75d77d9b6269011872ee22b34fb48d23251e9879bb1e4ccbdd8aaaf4b6dc5f5084a65ef42c52fbcde8f3178bac3ba207de827ec513a6aa39fa684c\"}]\n[\"OK\", \"cb8feca582979d91fe90455867b34dbf4d65e4b86e86b3c68c368ca9f9eef6f2\", true, \"\"]\n```\n\n----------------------------------------\n\nTITLE: Implementing Proxy Tags Format in Nostr\nDESCRIPTION: Defines the structure of a 'proxy' tag that can be used in Nostr events to reference content bridged from other protocols. The tag includes the source object ID and protocol name.\n\nLANGUAGE: plaintext\nCODE:\n```\n[\"proxy\", <id>, <protocol>]\n```\n\n----------------------------------------\n\nTITLE: Posting to a Nostr Community with a Tagged Event\nDESCRIPTION: This snippet shows how to post content to a Nostr community by tagging any event with the community's 'a' tag. The tag includes the community event type (34550), author pubkey, and identifier.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1,\n  \"tags\": [\n    [\"a\", \"34550:<community event author pubkey>:<community-d-identifier>\", \"<optional-relay-url>\"],\n  ],\n  \"content\": \"hello world\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Format for Calendar Collection in Nostr (kind 31924)\nDESCRIPTION: This snippet shows the structure for a calendar collection that groups multiple calendar events using kind 31924. It requires a UUID ('d' tag), title, and includes references to calendar events through 'a' tags.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": <32-bytes lowercase hex-encoded SHA-256 of the the serialized event data>,\n  \"pubkey\": <32-bytes lowercase hex-encoded public key of the event creator>,\n  \"created_at\": <Unix timestamp in seconds>,\n  \"kind\": 31924,\n  \"content\": \"<description of calendar>\",\n  \"tags\": [\n    [\"d\", \"<UUID>\"],\n    [\"title\", \"<calendar title>\"],\n    [\"a\", \"<31922 or 31923>:<calendar event author pubkey>:<d-identifier of calendar event>\", \"<optional relay url>\"],\n    [\"a\", \"<31922 or 31923>:<calendar event author pubkey>:<d-identifier of calendar event>\", \"<optional relay url>\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing Ethereum Address in Nostr\nDESCRIPTION: Example showing how to reference an Ethereum address in Nostr using the 'i' tag with the blockchain name, chain ID, and lowercase address, and 'k' tag for the address type.\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  [\"i\", \"ethereum:1:address:0xd8da6bf26964af9d7eed9e03e53415d37aa96045\"],\n  [\"k\", \"ethereum:address\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Example of a Live Streaming Event in Nostr\nDESCRIPTION: Complete example of a kind:30311 event for a live streaming activity with metadata including title, summary, streaming URL, timestamps, status, and tags. This demonstrates how a streaming service would structure the live event data.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"57f28dbc264990e2c61e80a883862f7c114019804208b14da0bff81371e484d2\",\n  \"pubkey\": \"1597246ac22f7d1375041054f2a4986bd971d8d196d7997e48973263ac9879ec\",\n  \"created_at\": 1687182672,\n  \"kind\": 30311,\n  \"tags\": [\n    [\"d\", \"demo-cf-stream\"],\n    [\"title\", \"Adult Swim Metalocalypse\"],\n    [\"summary\", \"Live stream from IPTV-ORG collection\"],\n    [\"streaming\", \"https://adultswim-vodlive.cdn.turner.com/live/metalocalypse/stream.m3u8\"],\n    [\"starts\", \"1687182672\"],\n    [\"status\", \"live\"],\n    [\"t\", \"animation\"],\n    [\"t\", \"iptv\"],\n    [\"image\", \"https://i.imgur.com/CaKq6Mt.png\"]\n  ],\n  \"content\": \"\",\n  \"sig\": \"5bc7a60f5688effa5287244a24768cbe0dcd854436090abc3bef172f7f5db1410af4277508dbafc4f70a754a891c90ce3b966a7bc47e7c1eb71ff57640f3d389\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Structure for Attribution Tags in Highlight Events\nDESCRIPTION: Shows how to include p tags to attribute the original authors of highlighted material. Multiple authors can be tagged, optionally specifying roles such as 'author' or 'editor' as the last value of the tag.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"tags\": [\n    [\"p\", \"<pubkey-hex>\", \"<relay-url>\", \"author\"],\n    [\"p\", \"<pubkey-hex>\", \"<relay-url>\", \"author\"],\n    [\"p\", \"<pubkey-hex>\", \"<relay-url>\", \"editor\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic Wiki Article in Nostr Protocol\nDESCRIPTION: JSON structure for a basic wiki article in Nostr protocol using kind:30818. The example shows how to create an article titled 'Wiki' with appropriate d-tag normalization and content formatting.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"A wiki is a hypertext publication collaboratively edited and managed by its own audience.\",\n  \"tags\": [\n    [\"d\", \"wiki\"],\n    [\"title\", \"Wiki\"],\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: JSON-RPC Request Format for Nostr Relay Management\nDESCRIPTION: Defines the standard JSON structure for making requests to the Relay Management API. The request includes a method name and an array of parameters specific to each method.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"method\": \"<method-name>\",\n  \"params\": [\"<array>\", \"<of>\", \"<parameters>\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Merge Requests for Wiki Articles in Nostr\nDESCRIPTION: JSON structure for a kind:818 event that represents a merge request from one wiki article to another. The example shows the format for requesting changes to be merged, including references to both source and target articles.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"I added information about how to make hot ice-creams\",\n  \"kind\": 818,\n  \"tags\": [\n    [ \"a\", \"30818:<destination-pubkey>:hot-ice-creams\", \"<relay-url>\" ],\n    [ \"e\", \"<version-against-which-the-modification-was-made>\", \"<relay-url>\" ],\n    [ \"p\", \"<destination-pubkey>\" ],\n    [ \"e\", \"<version-to-be-merged>\", \"<relay-url>\", \"source\" ]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Response Event for Nostr Polls (kind:1018)\nDESCRIPTION: Example of a JSON event for responding to a poll on Nostr. The event uses kind:1018 and includes an 'e' tag referencing the original poll, plus one or more 'response' tags with the selected option IDs.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"\",\n  \"created_at\": 1720097117,\n  \"id\": \"60a005e32e9596c3f544a841a9bc4e46d3020ca3650d6a739c95c1568e33f6d8\",\n  \"kind\": 1018,\n  \"pubkey\": \"1bc70a0148b3f316da33fe7e89f23e3e71ac4ff998027ec712b905cd24f6a411\",\n  \"sig\": \"30071a633c65db8f3a075c7a8de757fbd8ce65e3607f4ba287fe6d7fbf839a380f94ff4e826fbba593f6faaa13683b7ea9114ade140720ecf4927010ebf3e44f\",\n  \"tags\": [\n    [\"e\", \"1fc80cf813f1af33d5a435862b7ef7fb96b47e68a48f1abcadf8081f5a545550\"],\n    [\"response\", \"gga6cdnqj\"],\n    [\"response\", \"m3agjsdq1\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting a Profile for Nudity with Taxonomy Tags\nDESCRIPTION: Example of a report event targeting a user's profile for nudity content. This example includes optional L and l tags as defined in NIP-32 to support further qualification and querying.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1984,\n  \"tags\": [\n    [\"p\", \"<pubkey>\", \"nudity\"],\n    [\"L\", \"social.nos.ontology\"],\n    [\"l\", \"NS-nud\", \"social.nos.ontology\"]\n  ],\n  \"content\": \"\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing One-Vote-Per-Pubkey Logic for Nostr Polls\nDESCRIPTION: Function that processes an array of vote events and ensures only one vote per pubkey is counted. When multiple votes exist from the same pubkey, it selects the most recent vote before the poll expiration.\n\nLANGUAGE: typescript\nCODE:\n```\nconst oneVotePerPubkey = (events: Event[]) => {\n  const eventMap = new Map<string, Event>();\n\n  events.forEach((event) => {\n    if (\n      !eventMap.has(event.pubkey) ||\n      event.created_at > eventMap.get(event.pubkey)!.created_at\n    ) {\n      eventMap.set(event.pubkey, event);\n    }\n  });\n\n  return Array.from(eventMap.values());\n};\n```\n\n----------------------------------------\n\nTITLE: Reporting an Event for Illegal Content\nDESCRIPTION: Example of a report event targeting a specific event (note) for illegal content. The report includes both the event ID being reported and the pubkey of its author, along with explanatory content about the nature of the violation.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 1984,\n  \"tags\": [\n    [\"e\", \"<eventId>\", \"illegal\"],\n    [\"p\", \"<pubkey>\"]\n  ],\n  \"content\": \"He's insulting the king!\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Example of User Recommending a Kind:31337 Handler in Nostr\nDESCRIPTION: This example shows a user recommending Zapstr as a handler for kind:31337 (tracks) events. The event includes tags specifying the supported event kind and a reference to the application's handler information event.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 31989,\n  \"tags\": [\n    [\"d\", \"31337\"],\n    [\"a\", \"31990:1743058db7078661b94aaf4286429d97ee5257d14a86d6bfa54cb0482b876fb0:abcd\", <relay-url>, \"web\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting a Zap Request Event in JSON\nDESCRIPTION: Example of a properly formatted 'zap request' event (kind 9734) that includes required tags like relays, amount, lnurl, and recipient pubkey, along with optional tags like event reference.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 9734,\n  \"content\": \"Zap!\",\n  \"tags\": [\n    [\"relays\", \"wss://nostr-pub.wellorder.com\", \"wss://anotherrelay.example.com\"],\n    [\"amount\", \"21000\"],\n    [\"lnurl\", \"lnurl1dp68gurn8ghj7um5v93kketj9ehx2amn9uh8wetvdskkkmn0wahz7mrww4excup0dajx2mrv92x9xp\"],\n    [\"p\", \"04c915daefee38317fa734444acee390a8269fe5810b2241e5e6dd343dfbecc9\"],\n    [\"e\", \"9ae37aa68f48645127299e9453eb5d908a0cbb6058ff340d528ed4d37c8994fb\"]\n  ],\n  \"pubkey\": \"97c70a44366a6535c145b333f973ea86dfdc2d7a99da618c40c64705ad98e322\",\n  \"created_at\": 1679673265,\n  \"id\": \"30efed56a035b2549fcaeec0bf2c1595f9a9b3bb4b1a38abaf8ee9041c4b7d93\",\n  \"sig\": \"f2cb581a84ed10e4dc84937bd98e27acac71ab057255f6aa8dfa561808c981fe8870f4a03c1e3666784d82a9c802d3704e174371aa13d63e2aeaf24ff5374d9d\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structuring a Job Request in Nostr (kind:5000-5999)\nDESCRIPTION: Defines the format for a job request event where customers specify what computation they need performed. It includes tags for input data, desired output format, bid amount, and relay information for service providers to respond to.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n    \"kind\": 5xxx, // kind in 5000-5999 range\n    \"content\": \"\",\n    \"tags\": [\n        [ \"i\", \"<data>\", \"<input-type>\", \"<relay>\", \"<marker>\" ],\n        [ \"output\", \"<mime-type>\" ],\n        [ \"relays\", \"wss://...\" ],\n        [ \"bid\", \"<msat-amount>\" ],\n        [ \"t\", \"bitcoin\" ]\n    ],\n    // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Gift Wrap Event Structure in JSON\nDESCRIPTION: This code snippet shows the structure of a gift wrap event (kind 1059) that encapsulates a seal event. It uses a random one-time-use public key for signing and includes tags for routing to the intended recipient.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"<id>\",\n  \"pubkey\": \"<random, one-time-use pubkey>\",\n  \"content\": \"<encrypted kind 13>\",\n  \"kind\": 1059,\n  \"created_at\": 1686840217,\n  \"tags\": [[\"p\", \"<recipient pubkey>\"]],\n  \"sig\": \"<random, one-time-use pubkey signature>\"\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypted Content Format for Job Requests\nDESCRIPTION: Demonstrates how encrypted parameters are formatted in the job request event, with the encrypted content in the content field and appropriate tags to indicate encryption and the service provider's public key.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"content\": \"BE2Y4xvS6HIY7TozIgbEl3sAHkdZoXyLRRkZv4fLPh3R7LtviLKAJM5qpkC7D6VtMbgIt4iNcMpLtpo...\",\n  \"tags\": [\n    [\"p\", \"04f74530a6ede6b24731b976b8e78fb449ea61f40ff10e3d869a3030c4edc91f\"],\n    [\"encrypted\"]\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Unsigned Rumor Event in JSON\nDESCRIPTION: This example shows creating an unsigned kind 1 event (rumor) containing a message. This represents the first step in the Gift Wrap protocol, where an event is created but not signed to provide deniability.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"created_at\": 1691518405,\n  \"content\": \"Are you going to the party tonight?\",\n  \"tags\": [],\n  \"kind\": 1,\n  \"pubkey\": \"611df01bfcf85c26ae65453b772d8f1dfd25c264621c0277e1fc1518686faef9\",\n  \"id\": \"9dd003c6d3b73b74a85a9ab099469ce251653a7af76f523671ab828acd2a0ef9\"\n}\n```\n\n----------------------------------------\n\nTITLE: Job Feedback Format in Nostr (kind:7000)\nDESCRIPTION: Defines the structure for service providers to give feedback about job processing status. It includes status information, payment requests, and references to the original job request and customer.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 7000,\n  \"content\": \"<empty-or-payload>\",\n  \"tags\": [\n    [\"status\", \"<status>\", \"<extra-info>\"],\n    [\"amount\", \"requested-payment-amount\", \"<bolt11>\"],\n    [\"e\", \"<job-request-id>\", \"<relay-hint>\"],\n    [\"p\", \"<customer's-pubkey>\"],\n  ],\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Sealed Event with Encrypted Rumor in JSON\nDESCRIPTION: This example demonstrates the second step in the Gift Wrap protocol, creating a kind 13 (seal) event that contains the encrypted rumor. The seal is signed by the author's key but hides the content and recipient.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"content\": \"AqBCdwoS7/tPK+QGkPCadJTn8FxGkd24iApo3BR9/M0uw6n4RFAFSPAKKMgkzVMoRyR3ZS/aqATDFvoZJOkE9cPG/TAzmyZvr/WUIS8kLmuI1dCA+itFF6+ULZqbkWS0YcVU0j6UDvMBvVlGTzHz+UHzWYJLUq2LnlynJtFap5k8560+tBGtxi9Gx2NIycKgbOUv0gEqhfVzAwvg1IhTltfSwOeZXvDvd40rozONRxwq8hjKy+4DbfrO0iRtlT7G/eVEO9aJJnqagomFSkqCscttf/o6VeT2+A9JhcSxLmjcKFG3FEK3Try/WkarJa1jM3lMRQqVOZrzHAaLFW/5sXano6DqqC5ERD6CcVVsrny0tYN4iHHB8BHJ9zvjff0NjLGG/v5Wsy31+BwZA8cUlfAZ0f5EYRo9/vKSd8TV0wRb9DQ=\",\n  \"kind\": 13,\n  \"created_at\": 1703015180,\n  \"pubkey\": \"611df01bfcf85c26ae65453b772d8f1dfd25c264621c0277e1fc1518686faef9\",\n  \"tags\": [],\n  \"id\": \"28a87d7c074d94a58e9e89bb3e9e4e813e2189f285d797b1c56069d36f59eaa7\",\n  \"sig\": \"02fc3facf6621196c32912b1ef53bac8f8bfe9db51c0e7102c073103586b0d29c3f39bdaa1e62856c20e90b6c7cc5dc34ca8bb6a528872cf6e65e6284519ad73\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Nostr Event for HTTP Authentication (JSON)\nDESCRIPTION: Example of a kind 27235 Nostr event used for HTTP authentication. The event includes the necessary tags (absolute URL and HTTP method) and a signature for verification.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"fe964e758903360f28d8424d092da8494ed207cba823110be3a57dfe4b578734\",\n  \"pubkey\": \"63fe6318dc58583cfe16810f86dd09e18bfd76aabc24a0081ce2856f330504ed\",\n  \"content\": \"\",\n  \"kind\": 27235,\n  \"created_at\": 1682327852,\n  \"tags\": [\n    [\"u\", \"https://api.snort.social/api/v1/n5sp/list\"],\n    [\"method\", \"GET\"]\n  ],\n  \"sig\": \"5ed9d8ec958bc854f997bdc24ac337d005af372324747efe4a00e24f4c30437ff4dd8308684bed467d9d6be3e5a517bb43b1732cc7d33949a3aaf86705c22184\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Targeted Request to Vanish in Nostr (Kind 62)\nDESCRIPTION: JSON structure for a Kind 62 event that requests a specific relay to delete all data associated with the sender's public key. The request must include at least one relay tag specifying the target relay URL.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"kind\": 62,\n  \"pubkey\": <32-byte hex-encoded public key of the event creator>,\n  \"tags\": [\n    [\"relay\", \"<relay url>\"]\n  ],\n  \"content\": \"<reason or note>\",\n  //...other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Moderation Approval Event in Nostr (kind:4550)\nDESCRIPTION: This snippet illustrates how to create an approval event (kind:4550) for moderating community content. It includes tags for the community, the approved post, the post author, and the original post's kind, with the full approved event in the content field.\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"pubkey\": \"<32-bytes lowercase hex-encoded public key of the event creator>\",\n  \"kind\": 4550,\n  \"tags\": [\n    [\"a\", \"34550:<event-author-pubkey>:<community-d-identifier>\", \"<optional-relay-url>\"],\n    [\"e\", \"<post-id>\", \"<optional-relay-url>\"],\n    [\"p\", \"<port-author-pubkey>\", \"<optional-relay-url>\"],\n    [\"k\", \"<post-request-kind>\"]\n  ],\n  \"content\": \"<the full approved event, JSON-encoded>\",\n  // other fields...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Thread Event in Nostr\nDESCRIPTION: Demonstrates how to create a kind 11 event that represents a thread in Nostr. Threads should include a 'subject' tag providing a summary of the thread's topic.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 11,\n  \"content\": \"Good morning\",\n  \"tags\": [\n    [\"subject\", \"GM\"]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Replying to a Thread in Nostr\nDESCRIPTION: Shows how to create a reply to a thread using NIP-22 kind 1111 comments. Replies must reference the root kind 11 event to avoid nested reply hierarchies.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 1111,\n  \"content\": \"Cool beans\",\n  \"tags\": [\n    [\"K\", \"11\"],\n    [\"E\", <event-id>, <relay-url>, <pubkey>]\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypted Parameters Example for Job Requests\nDESCRIPTION: Shows how to encrypt job parameters using NIP-04 encryption when a customer wants to keep input parameters secret. The encrypted data is added to the content field with appropriate tags to signal encryption.\n\nLANGUAGE: jsonc\nCODE:\n```\n[\n  [\"i\", \"what is the capital of France? \", \"text\"],\n  [\"param\", \"model\", \"LLaMA-2\"],\n  [\"param\", \"max_tokens\", \"512\"],\n  [\"param\", \"temperature\", \"0.5\"],\n  [\"param\", \"top-k\", \"50\"],\n  [\"param\", \"top-p\", \"0.7\"],\n  [\"param\", \"frequency_penalty\", \"1\"]\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Reply Messages in Nostr\nDESCRIPTION: A reply to a chat message is also a kind 9 event, but includes a 'q' tag that references the parent message. The parent event is quoted in the content field, followed by the reply text.\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"kind\": 9,\n  \"content\": \"nostr:nevent1...\\nyes\",\n  \"tags\": [\n    [\"q\", <event-id>, <relay-url>, <pubkey>]\n  ]\n}\n```"
  }
]