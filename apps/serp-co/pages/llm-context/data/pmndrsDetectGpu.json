[
  {
    "owner": "pmndrs",
    "repo": "detect-gpu",
    "content": "TITLE: Configuration options for getGPUTier function in TypeScript\nDESCRIPTION: Detailed API documentation for the getGPUTier function, including all available configuration options such as benchmarksURL, glContext, failIfMajorPerformanceCaveat, mobileTiers, desktopTiers, and override options.\nSOURCE: https://github.com/pmndrs/detect-gpu/blob/master/README.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetGPUTier({\n  /**\n   * URL of directory where benchmark data is hosted.\n   *\n   * @default https://unpkg.com/detect-gpu@{version}/dist/benchmarks\n   */\n  benchmarksURL?: string;\n  /**\n   * Optionally pass in a WebGL context to avoid creating a temporary one\n   * internally.\n   */\n  glContext?: WebGLRenderingContext | WebGL2RenderingContext;\n  /**\n   * Whether to fail if the system performance is low or if no hardware GPU is\n   * available.\n   *\n   * @default false\n   */\n  failIfMajorPerformanceCaveat?: boolean;\n  /**\n   * Framerate per tier for mobile devices.\n   *\n   * @defaultValue [0, 15, 30, 60]\n   */\n  mobileTiers?: number[];\n  /**\n   * Framerate per tier for desktop devices.\n   *\n   * @defaultValue [0, 15, 30, 60]\n   */\n  desktopTiers?: number[];\n  /**\n   * Optionally override specific parameters. Used mainly for testing.\n   */\n  override?: {\n    renderer?: string;\n    /**\n     * Override whether device is an iPad.\n     */\n    isIpad?: boolean;\n    /**\n     * Override whether device is a mobile device.\n     */\n    isMobile?: boolean;\n    /**\n     * Override device screen size.\n     */\n    screenSize?: { width: number; height: number };\n    /**\n     * Override how benchmark data is loaded\n     */\n    loadBenchmarks?: (file: string) => Promise<ModelEntry[]>;\n  };\n})\n```\n\n----------------------------------------\n\nTITLE: Asynchronous GPU Detection API Example - TypeScript\nDESCRIPTION: Demonstrates the asynchronous usage pattern for getGPUTier function with expanded configuration options including custom benchmark URLs and override capabilities. Returns a Promise with detailed GPU information.\nSOURCE: https://github.com/pmndrs/detect-gpu/blob/master/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGPUTier } from 'detect-gpu';\n\n(async () => {\n  const gpuTier = await getGPUTier({\n    benchmarksURL?: string; // (Default, \"https://unpkg.com/detect-gpu@${PKG_VERSION}/dist/benchmarks\") Provide location of where to access benchmark data\n    failIfMajorPerformanceCaveat?: boolean; // (Default, false) Fail to detect if the WebGL implementation determines the performance would be dramatically lower than the equivalent OpenGL\n    glContext?: WebGLRenderingContext | WebGL2RenderingContext; // (Default, undefined) Optionally pass in a WebGL context to avoid creating a temporary one internally\n    desktopTiers?: number[]; // (Default, [0, 15, 30, 60]) Framerate per tier\n    mobileTiers?: number[]; // (Default, [0, 15, 30, 60]) Framerate per tier\n    override?: { // (Default, false) Override specific functionality, useful for development\n      renderer?: string; // Manually override reported GPU renderer string\n      isIpad?: boolean; // Manually report device as being an iPad\n      isMobile?: boolean; // Manually report device as being a mobile device\n      screenSize?: { width: number; height: number }; // Manually adjust reported screenSize\n      loadBenchmarks?: (file: string) => Promise<TModelEntry[] | undefined>; // Optionally modify method for loading benchmark data\n    };\n  })\n})();\n```\n\n----------------------------------------\n\nTITLE: Using getGPUTier function in TypeScript\nDESCRIPTION: Demonstrates how to import and use the getGPUTier function from the detect-gpu library. The function returns an object with GPU information including tier, mobility, type, fps, and GPU name.\nSOURCE: https://github.com/pmndrs/detect-gpu/blob/master/README.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGPUTier } from 'detect-gpu';\n\n(async () => {\n  const gpuTier = await getGPUTier();\n\n  // Example output:\n  // {\n  //   \"tier\": 1,\n  //   \"isMobile\": false,\n  //   \"type\": \"BENCHMARK\",\n  //   \"fps\": 21,\n  //   \"gpu\": \"intel iris graphics 6100\"\n  // }\n})();\n```\n\n----------------------------------------\n\nTITLE: Synchronous GPU Detection API Example - TypeScript\nDESCRIPTION: Shows the synchronous usage pattern for getGPUTier function with configuration options for mobile/desktop benchmarks and development overrides. Returns GPU tier and type information.\nSOURCE: https://github.com/pmndrs/detect-gpu/blob/master/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getGPUTier } from 'detect-gpu';\n\nconst GPUTier = getGPUTier({\n  glContext: gl, // Optionally pass in a WebGL context to avoid creating a temporary one internally\n  mobileBenchmarkPercentages: [0, 50, 30, 20], // (Default) [TIER_0, TIER_1, TIER_2, TIER_3]\n  desktopBenchmarkPercentages: [0, 50, 30, 20], // (Default) [TIER_0, TIER_1, TIER_2, TIER_3]\n  failIfMajorPerformanceCaveat: true, // (Default) Fail to detect if the WebGL implementation determines the performance would be dramatically lower than the equivalent OpenGL implementation\n  forceRendererString: 'Apple A11 GPU', // (Development) Force a certain renderer string\n  forceMobile: true, // (Development) Force the use of mobile benchmarking scores\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Benchmark Loading Example - TypeScript\nDESCRIPTION: Shows how to configure custom benchmark data loading from a local server instead of using the default unpkg.com source.\nSOURCE: https://github.com/pmndrs/detect-gpu/blob/master/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Application\nimport { getGPUTier } from '../src';\n\n(async () => {\n  const data = await getGPUTier({\n    benchmarksURL: '/benchmarks',\n  });\n})();\n```\n\n----------------------------------------\n\nTITLE: Installing detect-gpu via npm\nDESCRIPTION: Command to install the detect-gpu package using npm. Requires Node.js to be installed on the system.\nSOURCE: https://github.com/pmndrs/detect-gpu/blob/master/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n $ npm install detect-gpu\n```"
  }
]