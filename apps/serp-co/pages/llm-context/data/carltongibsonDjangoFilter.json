[
  {
    "owner": "carltongibson",
    "repo": "django-filter",
    "content": "TITLE: Setting Default Filter Backends\nDESCRIPTION: This snippet shows how to configure the DEFAULT_FILTER_BACKENDS setting to include DjangoFilterBackend. This makes django-filter the default filtering mechanism for the DRF application.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/rest_framework.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# settings.py\nINSTALLED_APPS = [\n    # ...\n    'rest_framework',\n    'django_filters',\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': (\n        'django_filters.rest_framework.DjangoFilterBackend',\n        # ...\n    ),\n}\n```\n\n----------------------------------------\n\nTITLE: Django View for Product List\nDESCRIPTION: This code defines a Django view function `product_list` that instantiates the `ProductFilter` with the request's GET parameters and the `Product` queryset. It then renders a template with the filter object, allowing the template to display the filter form and filtered results.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef product_list(request):\n    f = ProductFilter(request.GET, queryset=Product.objects.all())\n    return render(request, 'my_app/template.html', {'filter': f})\n```\n\n----------------------------------------\n\nTITLE: Declare Filters Declaratively\nDESCRIPTION: This example shows how to declare filters with more flexibility by explicitly defining filter types (e.g., `NumberFilter`, `CharFilter`) and lookup expressions.  It shows how to filter the `price` and `release_date` fields using different lookup expressions such as 'gt' (greater than), 'lt' (less than), 'year', and 'year__gt'.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    price = django_filters.NumberFilter()\n    price__gt = django_filters.NumberFilter(field_name='price', lookup_expr='gt')\n    price__lt = django_filters.NumberFilter(field_name='price', lookup_expr='lt')\n\n    release_year = django_filters.NumberFilter(field_name='release_date', lookup_expr='year')\n    release_year__gt = django_filters.NumberFilter(field_name='release_date', lookup_expr='year__gt')\n    release_year__lt = django_filters.NumberFilter(field_name='release_date', lookup_expr='year__lt')\n\n    manufacturer__name = django_filters.CharFilter(lookup_expr='icontains')\n\n    class Meta:\n        model = Product\n        fields = ['price', 'release_date', 'manufacturer']\n```\n\n----------------------------------------\n\nTITLE: Generate Filters with Meta Fields\nDESCRIPTION: This code demonstrates how to use the `fields` attribute in the `Meta` class to automatically generate filters. It shows two variations: a list of field names for 'exact' lookups and a dictionary to specify multiple lookup expressions for each field.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport django_filters\n\nclass ProductFilter(django_filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = ['price', 'release_date']\n```\n\nLANGUAGE: python\nCODE:\n```\nimport django_filters\n\nclass ProductFilter(django_filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = {\n            'price': ['lt', 'gt'],\n            'release_date': ['exact', 'year__gt'],\n        }\n```\n\n----------------------------------------\n\nTITLE: Customize filtering with Filter.method\nDESCRIPTION: This code demonstrates customizing filter behavior by specifying a `method` to perform filtering. This allows more granular control over how filters are applied and access to the filterset's properties, such as the request.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass F(django_filters.FilterSet):\n    username = CharFilter(method='my_custom_filter')\n\n    class Meta:\n        model = User\n        fields = ['username']\n\n    def my_custom_filter(self, queryset, name, value):\n        return queryset.filter(**{\n            name: value,\n        })\n```\n\n----------------------------------------\n\nTITLE: Callable Custom Filter Method in Django FilterSet\nDESCRIPTION: This code snippet illustrates how to use a callable function as a custom filter method within a Django FilterSet. It defines a function outside the class scope that takes a queryset, field name, and value, and then filters the queryset based on the provided criteria. The FilterSet then uses this function as the 'method' for a BooleanFilter.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Callables may also be defined out of the class scope.\ndef filter_not_empty(queryset, name, value):\n    lookup = '__'.join([name, 'isnull'])\n    return queryset.filter(**{lookup: False})\n\nclass F(FilterSet):\n    \"\"\"Filter for Books by if books are published or not\"\"\"\n    published = BooleanFilter(field_name='published_on', method=filter_not_empty)\n\n    class Meta:\n        model = Book\n        fields = ['published']\n```\n\n----------------------------------------\n\nTITLE: Declaring filterable fields in django-filter (Python)\nDESCRIPTION: This snippet demonstrates two ways to declare filterable fields using the `fields` option in the `Meta` class. The first example uses a list of field names to create exact lookup filters. The second example uses a dictionary to define specific lookup expressions for each field.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UserFilter(django_filters.FilterSet):\n    class Meta:\n        model = User\n        fields = ['username', 'last_login']\n\n# or\n\nclass UserFilter(django_filters.FilterSet):\n    class Meta:\n        model = User\n        fields = {\n            'username': ['exact', 'contains'],\n            'last_login': ['exact', 'year__gt'],\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Full-Text Search in Django-Filter using Filter.method\nDESCRIPTION: This code shows how to add a full-text search filter to a Django-Filter FilterSet using the `Filter.method` feature.  It defines a `search_fulltext` method that annotates the queryset with a `SearchVector` and filters it using a `SearchQuery` based on the user's input.  Dependencies: django.contrib.postgres.search.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.search import SearchVector, SearchQuery\n\nclass ProductFilter(django_filters.FilterSet):\n    # The model `field_name` is the field you want to search on and is passed to your `method`.\n    # The `method` argument is the name of the method to call to perform filtering.\n    search = django_filters.CharFilter(field_name=\"description\", method=\"search_fulltext\")\n\n    def search_fulltext(self, queryset, field_name, value):\n        if not value:\n            return queryset\n        return queryset.annotate(\n            search=SearchVector(\"name\", \"description\")\n        ).filter(search=SearchQuery(value))\n\n    class Meta:\n        model = Product\n        fields = [\"search\", \"price\", \"manufacturer\"]\n```\n\n----------------------------------------\n\nTITLE: ChoiceFilter Usage Example with Choices in Django Filters\nDESCRIPTION: This code snippet demonstrates the usage of ChoiceFilter in Django filters. It defines a User model with a status field having predefined choices, and then creates a FilterSet that includes a ChoiceFilter for the status field. The choices are passed explicitly when declaring the filter on the FilterSet.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass User(models.Model):\n    username = models.CharField(max_length=255)\n    first_name = SubCharField(max_length=100)\n    last_name = SubSubCharField(max_length=100)\n\n    status = models.IntegerField(choices=STATUS_CHOICES, default=0)\n\nSTATUS_CHOICES = (\n    (0, 'Regular'),\n    (1, 'Manager'),\n    (2, 'Admin'),\n)\n\nclass F(FilterSet):\n    status = ChoiceFilter(choices=STATUS_CHOICES)\n    class Meta:\n        model = User\n        fields = ['status']\n```\n\n----------------------------------------\n\nTITLE: Filter Override Example\nDESCRIPTION: This snippet illustrates how to override default filters for specific model field types using `filter_overrides` in the `Meta` class. It modifies `CharField` to use `icontains` lookup and adds a `CheckboxInput` widget for `BooleanField`.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n\n    class Meta:\n        model = Product\n        fields = {\n            'name': ['exact'],\n            'release_date': ['isnull'],\n        }\n        filter_overrides = {\n            models.CharField: {\n                'filter_class': django_filters.CharFilter,\n                'extra': lambda f: {\n                    'lookup_expr': 'icontains',\n                },\n            },\n            models.BooleanField: {\n                'filter_class': django_filters.BooleanFilter,\n                'extra': lambda f: {\n                    'widget': forms.CheckboxInput,\n                },\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Django Filter with TimeRangeFilter\nDESCRIPTION: This example shows how to use the `TimeRangeFilter` in Django. It defines a `Comment` model with `date` and `time` fields, and a `FilterSet` to filter comments by time range. The code then demonstrates filtering comments for times between 8:00 and 10:00, after 8:00, and before 10:00.  Requires Django and `django-filter` library.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nclass Comment(models.Model):\n    date = models.DateField()\n    time = models.TimeField()\n\nclass F(FilterSet):\n    time = TimeRangeFilter()\n\n    class Meta:\n        model = Comment\n        fields = ['time']\n\n# Range: Comments added between 8:00 and 10:00\nf = F({'time_after': '8:00', 'time_before': '10:00'})\n\n# Min-Only: Comments added after 8:00\nf = F({'time_after': '8:00'})\n\n# Max-Only: Comments added before 10:00\nf = F({'time_before': '10:00'})\n```\n\n----------------------------------------\n\nTITLE: ModelChoiceFilter with Callable QuerySet in Python\nDESCRIPTION: This snippet illustrates how to use a callable queryset with ModelChoiceFilter. The `departments` function retrieves a queryset based on the request object. This allows filtering based on properties of the request without overriding FilterSet.__init__.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef departments(request):\n    if request is None:\n        return Department.objects.none()\n\n    company = request.user.company\n    return company.department_set.all()\n\nclass EmployeeFilter(filters.FilterSet):\n    department = filters.ModelChoiceFilter(queryset=departments)\n    ...\n```\n\n----------------------------------------\n\nTITLE: RangeFilter Example in Python\nDESCRIPTION: Demonstrates use of the RangeFilter to filter Book objects based on price using min and max values. The code shows how to define the FilterSet and how to apply the filter with different combinations of min and max values.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass F(FilterSet):\n    \"\"\"Filter for Books by Price\"\"\"\n    price = RangeFilter()\n\n    class Meta:\n        model = Book\n        fields = ['price']\n\nqs = Book.objects.all().order_by('title')\n\n# Range: Books between 5€ and 15€\nf = F({'price_min': '5', 'price_max': '15'}, queryset=qs)\n\n# Min-Only: Books costing more the 11€\nf = F({'price_min': '11'}, queryset=qs)\n\n# Max-Only: Books costing less than 19€\nf = F({'price_max': '19'}, queryset=qs)\n```\n\n----------------------------------------\n\nTITLE: Filtering by relative times using NumberFilter\nDESCRIPTION: This example demonstrates how to filter data based on relative times using a `NumberFilter` and a custom method. It calculates a time threshold based on the input hours and filters the queryset accordingly.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils import timezone\nfrom datetime import timedelta\n...\n\nclass DataModel(models.Model):\n    time_stamp = models.DateTimeField()\n\n\nclass DataFilter(django_filters.FilterSet):\n    hours = django_filters.NumberFilter(\n        field_name='time_stamp', method='get_past_n_hours', label=\"Past n hours\")\n\n    def get_past_n_hours(self, queryset, field_name, value):\n        time_threshold = timezone.now() - timedelta(hours=int(value))\n        return queryset.filter(time_stamp__gte=time_threshold)\n\n    class Meta:\n        model = DataModel\n        fields = ('hours',)\n```\n\n----------------------------------------\n\nTITLE: Django Filter OrderingFilter Example\nDESCRIPTION: This code defines a `UserFilter` with an `OrderingFilter` to allow ordering the queryset based on different fields. It demonstrates how to specify fields for ordering and customize their labels. Also it shows how ordering filter choices are automatically generated. Requires `django-filter` and Django ORM.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nclass UserFilter(FilterSet):\n    account = CharFilter(field_name='username')\n    status = NumberFilter(field_name='status')\n\n    o = OrderingFilter(\n        # tuple-mapping retains order\n        fields=(\n            ('username', 'account'),\n            ('first_name', 'first_name'),\n            ('last_name', 'last_name'),\n        ),\n\n        # labels do not need to retain order\n        field_labels={\n            'username': 'User account',\n        }\n    )\n\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name']\n\n>>> UserFilter().filters['o'].field.choices\n[\n    ('account', 'User account'),\n    ('-account', 'User account (descending)'),\n    ('first_name', 'First name'),\n    ('-first_name', 'First name (descending)'),\n    ('last_name', 'Last name'),\n    ('-last_name', 'Last name (descending)'),\n]\n```\n\n----------------------------------------\n\nTITLE: Filtering Related Queryset for ModelChoiceFilter\nDESCRIPTION: This example demonstrates using a callable for the `queryset` argument in `ModelChoiceFilter` to filter the related queryset based on the request. This allows for request-based filtering of choices in a ModelChoice field.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef departments(request):\n    if request is None:\n        return Department.objects.none()\n\n    company = request.user.company\n    return company.department_set.all()\n\nclass EmployeeFilter(filters.FilterSet):\n    department = filters.ModelChoiceFilter(queryset=departments)\n    ...\n```\n\n----------------------------------------\n\nTITLE: Configuring filterset_fields with lookup_expr\nDESCRIPTION: This example shows how to configure lookup expressions when using the `filterset_fields` shortcut in Django REST Framework with DjangoFilterBackend. It allows defining multiple lookup expressions for a single field.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfilterset_fields = {\n    \"price\": [\"gt\", \"exact\"],\n}\n```\n\n----------------------------------------\n\nTITLE: Adding FilterSet with filterset_class\nDESCRIPTION: This snippet demonstrates how to create a FilterSet and add it to a DRF view using the filterset_class attribute. The FilterSet defines the available filters for the view's queryset.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/rest_framework.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import generics\nfrom django_filters import rest_framework as filters\nfrom myapp import Product\n\n\nclass ProductFilter(filters.FilterSet):\n    min_price = filters.NumberFilter(field_name=\"price\", lookup_expr='gte')\n    max_price = filters.NumberFilter(field_name=\"price\", lookup_expr='lte')\n\n    class Meta:\n        model = Product\n        fields = ['category', 'in_stock']\n\n\nclass ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = (filters.DjangoFilterBackend,)\n    filterset_class = ProductFilter\n```\n\n----------------------------------------\n\nTITLE: Incorrect price filter configuration leading to FieldError\nDESCRIPTION: This code demonstrates how a misconfigured filter can lead to a FieldError.  The filter instance will have a field name of price__gt and an exact lookup type, which will result in an incorrect query.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nProduct.objects.filter(price__gt__exact=value)\n```\n\n----------------------------------------\n\nTITLE: Correctly configured isnull and in filters\nDESCRIPTION: This example demonstrates how to correctly configure `isnull` and `in` filters. It uses `BooleanFilter` for `isnull` and a custom `NumberInFilter` to allow filtering by multiple category IDs.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    categories = NumberInFilter(field_name='category', lookup_expr='in')\n    uncategorized = django_filters.BooleanFilter(field_name='category', lookup_expr='isnull')\n```\n\n----------------------------------------\n\nTITLE: Custom BaseInFilter for Number Filtering\nDESCRIPTION: This example defines a custom `NumberInFilter` by inheriting from `django_filters.BaseInFilter` and `django_filters.NumberFilter`. This allows filtering for multiple numeric values using the `in` lookup.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass NumberInFilter(django_filters.BaseInFilter, django_filters.NumberFilter):\n    pass\n```\n\n----------------------------------------\n\nTITLE: Django Filter with BaseInFilter Example\nDESCRIPTION: This snippet demonstrates how to use `BaseInFilter` in combination with `NumberFilter` to create a custom filter that allows filtering based on a comma-separated list of IDs. It creates User objects and filters them based on their IDs being 'in' a given list. Requires `django-filter` and Django ORM.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nclass NumberInFilter(BaseInFilter, NumberFilter):\n    pass\n\nclass F(FilterSet):\n    id__in = NumberInFilter(field_name='id', lookup_expr='in')\n\n    class Meta:\n        model = User\n\nUser.objects.create(username='alex')\nUser.objects.create(username='jacob')\nUser.objects.create(username='aaron')\nUser.objects.create(username='carl')\n\n# In: User with IDs 1 and 3.\nf = F({'id__in': '1,3'})\nassert len(f.qs) == 2\n```\n\n----------------------------------------\n\nTITLE: Adding DjangoFilterBackend to View\nDESCRIPTION: This snippet shows how to add the DjangoFilterBackend to the filter_backends of a DRF view. This enables filtering on the view using django-filter.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/rest_framework.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom django_filters import rest_framework as filters\n\nclass ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    serializer_class = ProductSerializer\n    filter_backends = (filters.DjangoFilterBackend,)\n    filterset_fields = ('category', 'in_stock')\n```\n\n----------------------------------------\n\nTITLE: Custom OrderingFilter Subclass in Django Filter\nDESCRIPTION: This code shows how to create a custom `OrderingFilter` subclass to sort by non-model fields, specifically a computed 'relevance' factor. It overrides the `__init__` method to add custom choices and the `filter` method to handle the custom sorting logic. Requires `django-filter` and Django ORM.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nclass CustomOrderingFilter(django_filters.OrderingFilter):\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.extra['choices'] += [\n            ('relevance', 'Relevance'),\n            ('-relevance', 'Relevance (descending)'),\n        ]\n\n\n    def filter(self, qs, value):\n        # OrderingFilter is CSV-based, so `value` is a list\n        if any(v in ['relevance', '-relevance'] for v in value):\n            # sort queryset by relevance\n            return ...\n\n        return super().filter(qs, value)\n```\n\n----------------------------------------\n\nTITLE: TypedChoiceFilter Example with Coerce in Django Filters\nDESCRIPTION: This code snippet showcases how to use TypedChoiceFilter with the `coerce` parameter to convert input values before matching against choices. It utilizes the `strtobool` function from `distutils.util` to convert string representations of boolean values ('true', 'false') to actual boolean values.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport django_filters\nfrom distutils.util import strtobool\n\nBOOLEAN_CHOICES = (('false', 'False'), ('true', 'True'),)\n\nclass YourFilterSet(django_filters.FilterSet):\n    ...\n    flag = django_filters.TypedChoiceFilter(choices=BOOLEAN_CHOICES,\n                                            coerce=strtobool)\n```\n\n----------------------------------------\n\nTITLE: Creating Django Model Instances with Date Values in Python\nDESCRIPTION: This snippet creates three instances of the `Article` model with different published date values.  The dates are represented as strings in 'YYYY-MM-DD HH:MM' format. This is a preliminary step for demonstrating filtering based on date ranges. No dependencies are explicitly listed, but it relies on Django's ORM.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nArticle.objects.create(published='2016-01-01 8:00')\nArticle.objects.create(published='2016-01-01 9:30')\nArticle.objects.create(published='2016-01-02 8:00')\n```\n\n----------------------------------------\n\nTITLE: Custom CharFilter with Empty Value Handling\nDESCRIPTION: This defines a custom `CharFilter` that overrides the `filter()` method to check for a magic value representing an empty string. If the magic value is detected, the filter applies an empty string filter to the queryset.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass MyCharFilter(filters.CharFilter):\n    empty_value = 'EMPTY'\n\n    def filter(self, qs, value):\n        if value != self.empty_value:\n            return super().filter(qs, value)\n\n        qs = self.get_method(qs)(**{'%s__%s' % (self.field_name, self.lookup_expr): \"\"})\n        return qs.distinct() if self.distinct else qs\n```\n\n----------------------------------------\n\nTITLE: DateFromToRangeFilter with DateField in Python\nDESCRIPTION: Illustrates how to use DateFromToRangeFilter with a DateField. It defines a FilterSet 'F' for the Comment model, filtering by the 'date' field. Examples are provided to filter comments added between specific dates, after a certain date, and before a certain date.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass Comment(models.Model):\n    date = models.DateField()\n    time = models.TimeField()\n\nclass F(FilterSet):\n    date = DateFromToRangeFilter()\n\n    class Meta:\n        model = Comment\n        fields = ['date']\n\n# Range: Comments added between 2016-01-01 and 2016-02-01\nf = F({'date_after': '2016-01-01', 'date_before': '2016-02-01'})\n\n# Min-Only: Comments added after 2016-01-01\nf = F({'date_after': '2016-01-01'})\n\n# Max-Only: Comments added before 2016-02-01\nf = F({'date_before': '2016-02-01'})\n```\n\n----------------------------------------\n\nTITLE: Correctly configured price filter in django-filter\nDESCRIPTION: This example shows the correct way to configure a price filter by explicitly specifying both `field_name` and `lookup_expr`.  `field_name` specifies the model field, and `lookup_expr` specifies the lookup type.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    price__gt = django_filters.NumberFilter(field_name='price', lookup_expr='gt')\n```\n\n----------------------------------------\n\nTITLE: Filtering Primary Queryset\nDESCRIPTION: This code demonstrates how to override the `qs` property of a `FilterSet` to filter the primary queryset based on the request object. This allows you to apply custom filtering logic based on properties of the request, such as the logged-in user.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ArticleFilter(django_filters.FilterSet):\n\n    class Meta:\n        model = Article\n        fields = [...]\n\n    @property\n    def qs(self):\n        parent = super().qs\n        author = getattr(self.request, 'user', None)\n\n        return parent.filter(is_published=True) \\\n            | parent.filter(author=author)\n```\n\n----------------------------------------\n\nTITLE: DateFromToRangeFilter with DateTimeField in Python\nDESCRIPTION: Shows how to use DateFromToRangeFilter with a DateTimeField. It defines a FilterSet 'F' for the Article model, filtering by the 'published' field. The example includes creating some Article objects and then filtering articles published between specific dates, after a certain date, and before a certain date, asserting the length of the filtered queryset in each case.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nclass Article(models.Model):\n    published = models.DateTimeField()\n\nclass F(FilterSet):\n    published = DateFromToRangeFilter()\n\n    class Meta:\n        model = Article\n        fields = ['published']\n\nArticle.objects.create(published='2016-01-01 8:00')\nArticle.objects.create(published='2016-01-20 10:00')\nArticle.objects.create(published='2016-02-10 12:00')\n\n# Range: Articles published between 2016-01-01 and 2016-02-01\nf = F({'published_after': '2016-01-01', 'published_before': '2016-02-01'})\nassert len(f.qs) == 2\n\n# Min-Only: Articles published after 2016-01-01\nf = F({'published_after': '2016-01-01'})\nassert len(f.qs) == 3\n\n# Max-Only: Articles published before 2016-02-01\nf = F({'published_before': '2016-02-01'})\nassert len(f.qs) == 2\n```\n\n----------------------------------------\n\nTITLE: Customise filter generation with filter_overrides (Python)\nDESCRIPTION: This snippet demonstrates how to customize filter generation using the `filter_overrides` option in the `Meta` class. It overrides the default filter class for `CharField` and `BooleanField` model fields, specifying a custom lookup expression and widget, respectively.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n\n    class Meta:\n        model = Product\n        fields = ['name', 'release_date']\n        filter_overrides = {\n            models.CharField: {\n                'filter_class': django_filters.CharFilter,\n                'extra': lambda f: {\n                    'lookup_expr': 'icontains',\n                },\n            },\n            models.BooleanField: {\n                'filter_class': django_filters.BooleanFilter,\n                'extra': lambda f: {\n                    'widget': forms.CheckboxInput,\n                },\n            }\n        }\n```\n\n----------------------------------------\n\nTITLE: Django Filter with BaseRangeFilter Example\nDESCRIPTION: This example illustrates the use of `BaseRangeFilter` in conjunction with `NumberFilter` to create a custom range filter. It creates User objects and filters them based on an ID range specified as a comma-separated string.  Requires `django-filter` and Django ORM.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nclass NumberRangeFilter(BaseRangeFilter, NumberFilter):\n    pass\n\nclass F(FilterSet):\n    id__range = NumberRangeFilter(field_name='id', lookup_expr='range')\n\n    class Meta:\n        model = User\n\nUser.objects.create(username='alex')\nUser.objects.create(username='jacob')\nUser.objects.create(username='aaron')\nUser.objects.create(username='carl')\n\n# Range: User with IDs between 1 and 3.\nf = F({'id__range': '1,3'})\nassert len(f.qs) == 3\n```\n\n----------------------------------------\n\nTITLE: ModelChoiceFilter with null_label\nDESCRIPTION: This snippet demonstrates how to filter by null values using a `ModelChoiceFilter` and the `null_label` parameter. This adds a choice to the filter's dropdown that represents null values, allowing users to easily filter for uncategorized products.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    category = django_filters.ModelChoiceFilter(\n        field_name='category', lookup_expr='isnull',\n        null_label='Uncategorized',\n        queryset=Category.objects.all(),\n    )\n```\n\n----------------------------------------\n\nTITLE: Setting Input Formats for IsoDateTimeField in Python\nDESCRIPTION: This code snippet demonstrates how to set the input formats for an IsoDateTimeField. It shows how to include the ISO_8601 format (defined as a class-level attribute) along with other DateTimeField input formats.  This configures the field to parse dates in both ISO 8601 format and any other formats defined in DateTimeField.input_formats.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/fields.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nf = IsoDateTimeField()\nf.input_formats = [IsoDateTimeField.ISO_8601] + DateTimeField.input_formats\n```\n\n----------------------------------------\n\nTITLE: Django Filter with IsoDateTimeFromToRangeFilter\nDESCRIPTION: This example defines an `Article` model and a `FilterSet` using `IsoDateTimeFromToRangeFilter` to filter articles based on ISO 8601 formatted datetime values.  The code creates three `Article` instances and then demonstrates filtering by date range, minimum date, and maximum date, asserting the correct number of filtered results. Requires `django-filter` and Django ORM.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass Article(models.Model):\n    published = django_filters.IsoDateTimeField()\n\nclass F(FilterSet):\n    published = IsoDateTimeFromToRangeFilter()\n\n    class Meta:\n        model = Article\n        fields = ['published']\n\nArticle.objects.create(published='2016-01-01T8:00:00+01:00')\nArticle.objects.create(published='2016-01-01T9:30:00+01:00')\nArticle.objects.create(published='2016-01-02T8:00:00+01:00')\n\n# Range: Articles published 2016-01-01 between 8:00 and 10:00\nf = F({'published_after': '2016-01-01T8:00:00+01:00', 'published_before': '2016-01-01T10:00:00+01:00'})\nassert len(f.qs) == 2\n\n# Min-Only: Articles published after 2016-01-01 8:00\nf = F({'published_after': '2016-01-01T8:00:00+01:00'})\nassert len(f.qs) == 3\n\n# Max-Only: Articles published before 2016-01-01 10:00\nf = F({'published_before': '2016-01-01T10:00:00+0100'})\nassert len(f.qs) == 2\n```\n\n----------------------------------------\n\nTITLE: Automatic filter generation with model in django-filter (Python)\nDESCRIPTION: This snippet shows how to automatically generate filters for a Django model using the `model` and `fields` options within the `Meta` class of a `FilterSet`. The `UserFilter` will generate filters for 'username' and 'last_login' based on the User model.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass UserFilter(django_filters.FilterSet):\n    class Meta:\n        model = User\n        fields = ['username', 'last_login']\n```\n\n----------------------------------------\n\nTITLE: Extending FilterSet to add help_text to filters in Django\nDESCRIPTION: This code defines a custom FilterSet class, `HelpfulFilterSet`, that overrides the `filter_for_field` method to add the `help_text` attribute from the model field to the filter's `extra` dictionary. This allows the help text to be displayed in the filter form.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nclass HelpfulFilterSet(django_filters.FilterSet):\n    @classmethod\n    def filter_for_field(cls, f, name, lookup_expr):\n        filter = super(HelpfulFilterSet, cls).filter_for_field(f, name, lookup_expr)\n        filter.extra['help_text'] = f.help_text\n        return filter\n```\n\n----------------------------------------\n\nTITLE: Adding django-filter to INSTALLED_APPS\nDESCRIPTION: This code snippet demonstrates how to add 'django_filters' to the INSTALLED_APPS setting in Django's settings.py file. This step is essential for Django to recognize and load django-filter's template tags, filters, and other components.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/install.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'django_filters',\n]\n```\n\n----------------------------------------\n\nTITLE: Importing DRF Filters\nDESCRIPTION: This snippet demonstrates how to import the DRF-specific filters module from django_filters. This is the first step in integrating django-filter with DRF.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/rest_framework.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django_filters import rest_framework as filters\n```\n\n----------------------------------------\n\nTITLE: Accessing QuerySet after Filtering in Python\nDESCRIPTION: This code snippet illustrates how to access the filtered queryset after applying a FilterSet. In older versions, the FilterSet object was iterable directly. Now, you must access the `.qs` property to iterate over the filtered queryset.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/migration.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nf = UserFilter(request.GET, queryset=User.objects.all())\n\n# 0.x\nfor obj in f:\n    ...\n\n# 1.0\nfor obj in f.qs:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Date Range Filter with RangeWidget in Django Filters\nDESCRIPTION: This snippet shows how to use the RangeWidget with a DateFromToRangeFilter in django-filters. The RangeWidget generates two form input elements for start/end date values. The `attrs` parameter is used to set HTML attributes on the input elements, such as a placeholder. To use it, pass it to ``widget`` argument of a :class:`~django_filters.filters.RangeFilter`.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/widgets.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndate_range = DateFromToRangeFilter(widget=RangeWidget(attrs={'placeholder': 'YYYY/MM/DD'}))\n```\n\n----------------------------------------\n\nTITLE: EmptyStringFilter for filtering by empty strings\nDESCRIPTION: This defines a custom `BooleanFilter` that allows filtering by empty strings. It checks if the input value is considered empty using `EMPTY_VALUES` and applies a filter for empty strings based on the value.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom django.core.validators import EMPTY_VALUES\n\nclass EmptyStringFilter(filters.BooleanFilter):\n    def filter(self, qs, value):\n        if value in EMPTY_VALUES:\n            return qs\n\n        exclude = self.exclude ^ (value is False)\n        method = qs.exclude if exclude else qs.filter\n\n        return method(**{self.field_name: \"\"})\n\n\nclass MyFilterSet(filters.FilterSet):\n    myfield__isempty = EmptyStringFilter(field_name='myfield')\n\n    class Meta:\n        model = MyModel\n        fields = []\n```\n\n----------------------------------------\n\nTITLE: Using filterset_factory to dynamically create FilterSets (Python)\nDESCRIPTION: This example shows how to use the `filterset_factory` function to dynamically create a `FilterSet` class for a model. It demonstrates passing a customized `FilterSet` class to be used as a base for the created `FilterSet`.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass CustomFilterSet(django_filters.FilterSet):\n    class Meta:\n        form = CustomFilterSetForm\n\n\nfilterset = filterset_factory(Product, filterset=CustomFilterSet)\n```\n\n----------------------------------------\n\nTITLE: Define a Django Model\nDESCRIPTION: This code defines a simple Django model called `Product` with fields for name, price, description, release date, and manufacturer. It uses `CharField`, `DecimalField`, `TextField`, `DateField`, and `ForeignKey` to define the data types and relationships.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    description = models.TextField()\n    release_date = models.DateField()\n    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)\n```\n\n----------------------------------------\n\nTITLE: Moving FilterSet options to Meta in Python\nDESCRIPTION: This code snippet demonstrates moving `FilterSet` options such as `filter_overrides`, `strict`, and `order_by_field` into the `Meta` class. This prevents potential conflicts with declared filter names. It shows the old and the new way to configure these options.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/migration.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# 0.x\nclass UserFilter(FilterSet):\n    filter_overrides = {}\n    strict = STRICTNESS.RAISE_VALIDATION_ERROR\n    order_by_field = 'order'\n    ...\n\n# 1.0\nclass UserFilter(FilterSet):\n    ...\n\n    class Meta:\n        filter_overrides = {}\n        strict = STRICTNESS.RAISE_VALIDATION_ERROR\n        order_by_field = 'order'\n```\n\n----------------------------------------\n\nTITLE: Explicitly Defining Filters in Python\nDESCRIPTION: This code snippet demonstrates how to explicitly define filters for all model fields using `Meta.fields = '__all__'` or exclude specific fields using `Meta.exclude`.  Older versions would autogenerate filters when `Meta.fields` was not specified, which is no longer the default behavior.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/migration.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass UserFilter(FilterSet):\n    class Meta:\n        model = User\n        fields = '__all__'\n\n# or\nclass UserFilter(FilterSet):\n    class Meta:\n        model = User\n        exclude = ['password']\n```\n\n----------------------------------------\n\nTITLE: Defining FilterSet with IsoDateTimeFilter in Python\nDESCRIPTION: This snippet demonstrates how to use IsoDateTimeFilter to filter Book objects based on the 'published' date field, which is formatted in ISO 8601 format. It defines a FilterSet named 'F' and specifies the model and fields to be filtered.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass F(FilterSet):\n    \"\"\"Filter for Books by date published, using ISO 8601 formatted dates\"\"\"\n    published = IsoDateTimeFilter()\n\n    class Meta:\n        model = Book\n        fields = ['published']\n```\n\n----------------------------------------\n\nTITLE: Misconfigured price filter in django-filter\nDESCRIPTION: This example demonstrates a common mistake where the `field_name` and `lookup_expr` are not explicitly configured, leading to unexpected behavior. The default `lookup_expr` is `exact`, causing a `FieldError` when combined with `price__gt`.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    price__gt = django_filters.NumberFilter()\n```\n\n----------------------------------------\n\nTITLE: Custom ModelMultipleChoiceFilter in Python\nDESCRIPTION: This snippet demonstrates how to create a custom ModelMultipleChoiceFilter to add annotated fields. It overrides `get_filter_predicate` and `filter` methods to include a custom field annotation. This allows filtering based on an annotated field.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass MyMultipleChoiceFilter(django_filters.ModelMultipleChoiceFilter):\n    def get_filter_predicate(self, v):\n        return {'annotated_field': v.annotated_field}\n\n    def filter(self, qs, value):\n        if value:\n            qs = qs.annotate_with_custom_field()\n            qs = super().filter(qs, value)\n        return qs\n\nfoo = MyMultipleChoiceFilter(\n    to_field_name='annotated_field',\n    queryset=Model.objects.annotate_with_custom_field(),\n)\n```\n\n----------------------------------------\n\nTITLE: ModelChoiceFilter with QuerySet in Python\nDESCRIPTION: This snippet shows how to use ModelChoiceFilter to filter books by author. It demonstrates how to provide a queryset to the filter to restrict the available choices. The FilterSet 'F' is defined with 'author' field filtered using ModelChoiceFilter.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass F(FilterSet):\n    \"\"\"Filter for books by author\"\"\"\n    author = ModelChoiceFilter(queryset=Author.objects.all())\n\n    class Meta:\n        model = Book\n        fields = ['author']\n```\n\n----------------------------------------\n\nTITLE: HTTP Query Parameters with SuffixedMultiWidget\nDESCRIPTION: This snippet demonstrates the query parameter format when using a custom RangeWidget with SuffixedMultiWidget. It shows how the suffixes defined in the RangeWidget class are used to create more ergonomic query parameter names. The query names are now a little more ergonomic.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/widgets.txt#_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nGET /products?price_min=10&price_max=25 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Using filterset_fields Shortcut\nDESCRIPTION: This snippet shows how to use the filterset_fields shortcut to define filters directly on the view class without creating a separate FilterSet. This is useful for simple filtering scenarios.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/rest_framework.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import generics\nfrom django_filters import rest_framework as filters\nfrom myapp import Product\n\n\nclass ProductList(generics.ListAPIView):\n    queryset = Product.objects.all()\n    filter_backends = (filters.DjangoFilterBackend,)\n    filterset_fields = ('category', 'in_stock')\n\n\n# Equivalent FilterSet:\nclass ProductFilter(filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = ('category', 'in_stock')\n```\n\n----------------------------------------\n\nTITLE: Incorrectly configured isnull filter\nDESCRIPTION: This code demonstrates an incorrect configuration of an `isnull` filter using `NumberFilter`. Although the underlying `category` field is an integer (ForeignKey), `isnull` expects a boolean. Using `NumberFilter` to filter a boolean lookup is incorrect.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    uncategorized = django_filters.NumberFilter(field_name='category', lookup_expr='isnull')\n```\n\n----------------------------------------\n\nTITLE: Installing Django Filter using pip\nDESCRIPTION: This command demonstrates how to install the django-filter package using pip, the Python package installer. It is a necessary first step to use django-filter in a Django project. No specific prerequisites are required besides having pip installed.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/README.rst#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npip install django-filter\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Filter Class for Full-Text Search in Django-Filter\nDESCRIPTION: This code demonstrates how to create a custom filter class, `FullTextSearchFilter`, for integrating PostgreSQL full-text search with Django-Filter. This custom filter allows for reusable full-text search queries. Dependencies: django.contrib.postgres.search.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom django.contrib.postgres.search import SearchVector, SearchQuery\n\nclass FullTextSearchFilter(django_filters.CharFilter):\n    def filter(self, queryset, value):\n        if not value:\n            return queryset\n        return queryset.annotate(\n            search=SearchVector(\"name\", \"description\")\n        ).filter(search=SearchQuery(value))\n\nclass ProductFilter(django_filters.FilterSet):\n    search = FullTextSearchFilter(field_name=\"description\")\n\n    class Meta:\n        model = Product\n        fields = [\"search\", \"price\", \"manufacturer\"]\n```\n\n----------------------------------------\n\nTITLE: Handling unknown fields in django-filter (Python)\nDESCRIPTION: This snippet shows how to use the `unknown_field_behavior` option to specify how unknown fields are handled in a FilterSet. Setting it to `UnknownFieldBehavior.WARN` will issue a warning and ignore unknown fields.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django_filters import UnknownFieldBehavior\n\nclass UserFilter(django_filters.FilterSet):\n    class Meta:\n        model = User\n        fields = ['username', 'last_login']\n        unknown_field_behavior = UnknownFieldBehavior.WARN\n```\n\n----------------------------------------\n\nTITLE: Default Verbose Lookups Configuration (Python)\nDESCRIPTION: This snippet shows the default dictionary that defines the verbose output for generated filter labels. This dictionary maps lookup expressions (e.g., 'exact', 'contains') to their verbose descriptions (e.g., '', 'contains'). The setting 'FILTERS_VERBOSE_LOOKUPS' controls whether these verbose descriptions are used in the filter labels.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/settings.txt#_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n    # refer to 'django_filters.conf.DEFAULTS'\n    'VERBOSE_LOOKUPS': {\n        'exact': _(''),\n        'iexact': _(''),\n        'contains': _('contains'),\n        'icontains': _('contains'),\n        ...\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom RangeWidget with SuffixedMultiWidget\nDESCRIPTION: This code defines a custom RangeWidget that extends SuffixedMultiWidget to append suffixes instead of indices to form field names. This allows for more human-readable query parameters. The suffixes 'min' and 'max' are used to create the field names. By using ``SuffixedMultiWidget`` instead, you can provide human-friendly suffixes.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/widgets.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass RangeWidget(SuffixedMultiWidget):\n    suffixes = ['min', 'max']\n```\n\n----------------------------------------\n\nTITLE: Activating the virtual environment and installing test requirements\nDESCRIPTION: This snippet activates the virtual environment 'venv' and then installs the necessary test dependencies using pip. The dependencies are specified in the 'requirements/test.txt' file. Activating the virtual environment ensures that the installed packages are isolated to the project.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ source venv/bin/activate\n$ pip install -r requirements/test.txt\n```\n\n----------------------------------------\n\nTITLE: Customizing Verbose Lookups (Python)\nDESCRIPTION: This snippet demonstrates how to customize the verbose lookups by defining a callable that extends or overrides the default lookup terms. The callable should return a dictionary with the desired lookup mappings. In this example, it adds a verbose output for the 'exact' lookup.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/settings.txt#_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n    # settings.py\n    def FILTERS_VERBOSE_LOOKUPS():\n        from django_filters.conf import DEFAULTS\n\n        verbose_lookups = DEFAULTS['VERBOSE_LOOKUPS'].copy()\n        verbose_lookups.update({\n            'exact': 'is equal to',\n        })\n        return verbose_lookups\n```\n\n----------------------------------------\n\nTITLE: Filtering Articles by Date Range using Django Filter\nDESCRIPTION: This snippet demonstrates filtering `Article` objects based on a date range using the `F` (likely a FilterSet) object. It filters articles published between '2016-01-01 8:00' and '2016-01-01 10:00', then after '2016-01-01 8:00', then before '2016-01-01 10:00', asserting the number of results match the expectation in each case. Requires the `django-filter` library and a Django model named `Article` with a `published` field.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Range: Articles published 2016-01-01 between 8:00 and 10:00\nf = F({'published_after': '2016-01-01 8:00', 'published_before': '2016-01-01 10:00'})\nassert len(f.qs) == 2\n\n# Min-Only: Articles published after 2016-01-01 8:00\nf = F({'published_after': '2016-01-01 8:00'})\nassert len(f.qs) == 3\n\n# Max-Only: Articles published before 2016-01-01 10:00\nf = F({'published_before': '2016-01-01 10:00'})\nassert len(f.qs) == 2\n```\n\n----------------------------------------\n\nTITLE: BooleanFilter with BooleanWidget in Django Filters\nDESCRIPTION: This snippet demonstrates how to use the BooleanWidget with a BooleanFilter in django-filters. It allows the filter to convert string inputs (True/False variations) into Python boolean values. To use it, pass this into the ``widgets`` argument of the :class:`~django_filters.filters.BooleanFilter`.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/widgets.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nactive = BooleanFilter(widget=BooleanWidget())\n```\n\n----------------------------------------\n\nTITLE: FileField filter overrides example (Python)\nDESCRIPTION: This example presents a possible override to filter on a :class:`~django.db.models.FileField` using `filter_overrides`.  The `QuestionnaireFilter` overrides the default filter for `FileField` to use a `CharFilter` with an exact lookup expression.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass Questionnaire(models.Model):\n    file = models.FileField(upload_to=questionnaire_path)\n\nclass QuestionnaireFilter(FilterSet):\n    class Meta:\n        model = Questionnaire\n        fields = ['file']\n        filter_overrides = {\n            models.FileField: {\n                'filter_class': CharFilter,\n                'extra': lambda f: {'lookup_expr': 'exact'},\n            },\n        }\n```\n\n----------------------------------------\n\nTITLE: Initializing MyFilterSet with a Queryset in Django\nDESCRIPTION: This snippet shows how to initialize a filterset with a queryset in Django using django-filter. It instantiates `MyFilterSet` with a queryset that orders the `MyModel` objects by the 'field' attribute. This is the standard usage for applying filters to a model's data.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/migration.txt#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfilterset = MyFilterSet(queryset=MyModel.objects.order_by('field'))\n```\n\n----------------------------------------\n\nTITLE: Declaring filterable fields and overwriting in django-filter (Python)\nDESCRIPTION: This code snippet illustrates the error that occurs when including declared filters (with `field_name` specified) in the `Meta.fields` dictionary.  It demonstrates that `Meta.fields` should only include fields directly defined on the model, not alias filters.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass UserFilter(django_filters.FilterSet):\n    username = filters.CharFilter()\n    login_timestamp = filters.IsoDateTimeFilter(field_name='last_login')\n\n    class Meta:\n        model = User\n        fields = {\n            'username': ['exact', 'contains'],\n            'login_timestamp': ['exact'],\n        }\n\n    TypeError(\"'Meta.fields' contains fields that are not defined on this FilterSet: login_timestamp\")\n```\n\n----------------------------------------\n\nTITLE: HTTP Query Parameters Example\nDESCRIPTION: This snippet illustrates the default query parameter format produced by Django's MultiWidget when used in a range filter. It shows that by default, the resulting query params would look like the following.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/widgets.txt#_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET /products?price_0=10&price_1=25 HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: BooleanFilter with isnull and exclude parameters\nDESCRIPTION: This example uses a BooleanFilter with `isnull` lookup and the `exclude` parameter set to `True`. It allows filtering for products that *do* have a category assigned. The `exclude=True` parameter reverses the logic of the filter.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    has_category = django_filters.BooleanFilter(field_name='category', lookup_expr='isnull', exclude=True)\n```\n\n----------------------------------------\n\nTITLE: Testing Module Imports with Tox\nDESCRIPTION: This snippet installs 'tox' and then runs it with the 'isort' environment specified. This tests the module imports using the isort utility within a tox managed environment.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install tox\n$ tox -e isort\n```\n\n----------------------------------------\n\nTITLE: Checking and Diffing Imports with isort\nDESCRIPTION: This snippet installs isort, then checks and displays differences for import order in django_filters and tests directories. The `--check` option verifies if the imports are sorted according to isort's configuration, and `--diff` shows the changes that would be made.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install isort\n$ isort --check --diff django_filters tests\n```\n\n----------------------------------------\n\nTITLE: Overriding FilterSet Creation\nDESCRIPTION: This snippet shows how to override the FilterSet creation process by customizing the filter backend.  This allows for dynamic FilterSet customization based on the request or view context.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/rest_framework.txt#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass MyFilterBackend(filters.DjangoFilterBackend):\n    def get_filterset_kwargs(self, request, queryset, view):\n        kwargs = super().get_filterset_kwargs(request, queryset, view)\n\n        # merge filterset kwargs provided by view class\n        if hasattr(view, 'get_filterset_kwargs'):\n            kwargs.update(view.get_filterset_kwargs())\n\n        return kwargs\n\n\nclass BookFilter(filters.FilterSet):\n    def __init__(self, *args, author=None, **kwargs):\n        super().__init__(*args, **kwargs)\n        # do something w/ author\n\n\nclass BookViewSet(viewsets.ModelViewSet):\n    filter_backends = [MyFilterBackend]\n    filterset_class = BookFilter\n\n    def get_filterset_kwargs(self):\n        return {\n            'author': self.get_author(),\n        }\n```\n\n----------------------------------------\n\nTITLE: Intermediate Class for super() override in django-filter (Python)\nDESCRIPTION: This snippet shows how to implement the workaround using an intermediate class in order to use super() calls in older python versions when overriding classmethods.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nclass Intermediate(django_filters.FilterSet):\n\n    @classmethod\n    def method(cls, arg):\n        super(Intermediate, cls).method(arg)\n        ...\n\nclass ProductFilter(Intermediate):\n    class Meta:\n        model = Product\n        fields = ['...']\n```\n\n----------------------------------------\n\nTITLE: Create a Django FilterSet\nDESCRIPTION: This code creates a `FilterSet` called `ProductFilter` using django-filter. It defines a `CharFilter` for the `name` field with an 'iexact' lookup expression and specifies the `model` and `fields` in the `Meta` class. This FilterSet allows filtering `Product` objects based on name, price, and release date.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport django_filters\n\nclass ProductFilter(django_filters.FilterSet):\n    name = django_filters.CharFilter(lookup_expr='iexact')\n\n    class Meta:\n        model = Product\n        fields = ['price', 'release_date']\n```\n\n----------------------------------------\n\nTITLE: Cloning the django-filter repository using Git\nDESCRIPTION: This command clones the django-filter repository from GitHub to your local machine. It requires Git to be installed. The cloned repository will be placed in a directory named 'django-filter'.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/carltongibson/django-filter.git\n```\n\n----------------------------------------\n\nTITLE: Configuring object_filter in urls.py (Deprecated)\nDESCRIPTION: Illustrates the deprecated usage of `object_filter` in `urls.py`. It involves importing `object_filter` and providing the model as an argument in the URL pattern. This method is not recommended for new projects.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\nfrom django.urls import path\nfrom django_filters.views import object_filter\nfrom myapp.models import Product\n\nurlpatterns = [\n    path(\"list/\", object_filter, {'model': Product}, name=\"product-list\"),\n]\n```\n\n----------------------------------------\n\nTITLE: Navigating to the django-filter directory\nDESCRIPTION: This command changes the current working directory to the 'django-filter' directory, which is assumed to be the location where the django-filter repository was cloned. This step is necessary to execute subsequent commands within the project's context.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cd django-filter\n```\n\n----------------------------------------\n\nTITLE: Migrating MethodFilter to Filter.method in Python\nDESCRIPTION: This code snippet demonstrates how to migrate from the deprecated `MethodFilter` and `Filter.action` to the `Filter.method` parameter in django-filter. It shows how to define a filter method and its corresponding filter in a FilterSet.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/migration.txt#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# 0.x\nclass UserFilter(FilterSet):\n    last_login = filters.MethodFilter()\n\n    def filter_last_login(self, qs, value):\n        # try to convert value to datetime, which may fail.\n        if value and looks_like_a_date(value):\n            value = datetime(value)\n\n        return qs.filter(last_login=value})}\n\n\n# 1.0\nclass UserFilter(FilterSet):\n    last_login = filters.CharFilter(method='filter_last_login')\n\n    def filter_last_login(self, qs, name, value):\n        return qs.filter(**{name: value})\n```\n\n----------------------------------------\n\nTITLE: Creating a FilterSet for Django REST Framework\nDESCRIPTION: This snippet demonstrates how to create a FilterSet for use with Django REST Framework.  It imports django_filters.rest_framework as filters and inherits from filters.FilterSet. The Meta class specifies the model and fields to filter, similar to the Django example. This is a specialized FilterSet for DRF integration.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/README.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom django_filters import rest_framework as filters\n\nclass ProductFilter(filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = ('category', 'in_stock')\n```\n\n----------------------------------------\n\nTITLE: Using FilterSet in a Django view\nDESCRIPTION: This code demonstrates how to use a FilterSet in a Django view to filter a queryset based on request parameters. It instantiates the FilterSet with request.GET and the queryset, and then passes the filter object to the template. The expected input is a request object, and the output is a rendered template with the filtered data.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/README.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef product_list(request):\n    filter = ProductFilter(request.GET, queryset=Product.objects.all())\n    return render(request, 'my_app/template.html', {'filter': filter})\n```\n\n----------------------------------------\n\nTITLE: Django Filter OrderingFilter with Custom Choices\nDESCRIPTION: This code demonstrates how to provide custom choices to the `OrderingFilter` in Django. It also shows how to link fields attribute to exposed ordering parameter. This is used to disable ordering filter by descending sort options. Requires `django-filter` and Django ORM.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nclass UserFilter(FilterSet):\n    account = CharFilter(field_name='username')\n    status = NumberFilter(field_name='status')\n\n    o = OrderingFilter(\n        choices=(\n            ('account', 'Account'),\n        ),\n        fields={\n            'username': 'account',\n        },\n    )\n```\n\n----------------------------------------\n\nTITLE: Custom QuerySet for ModelMultipleChoiceFilter in Python\nDESCRIPTION: This snippet defines a custom QuerySet with an `annotate_with_custom_field` method. This method annotates the queryset with a custom field based on conditions. The custom QuerySet is then used as the model's manager.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass CustomQuerySet(models.QuerySet):\n    def annotate_with_custom_field(self):\n        return self.annotate(\n            custom_field=Case(\n                When(foo__isnull=False,\n                     then=F('foo__uuid')),\n                When(bar__isnull=False,\n                     then=F('bar__uuid')),\n                default=None,\n            ),\n        )\n\nclass MyModel(models.Model):\n    objects = CustomQuerySet.as_manager()\n```\n\n----------------------------------------\n\nTITLE: Creating a basic FilterSet\nDESCRIPTION: This code demonstrates how to create a basic FilterSet for a Django model (Product in this case).  It inherits from django_filters.FilterSet and defines the Meta class to specify the model and fields to filter. This snippet is used to define the filtering logic.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/README.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport django_filters\n\nclass ProductFilter(django_filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = ['name', 'price', 'manufacturer']\n```\n\n----------------------------------------\n\nTITLE: BooleanFilter with isnull lookup\nDESCRIPTION: This example demonstrates the usage of `BooleanFilter` with the `isnull` lookup expression to filter by null values. The filter class validates the input, and the type of the model field is irrelevant.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    uncategorized = django_filters.BooleanFilter(field_name='category', lookup_expr='isnull')\n```\n\n----------------------------------------\n\nTITLE: Installing django-filter with pip\nDESCRIPTION: This command installs the django-filter package from PyPI using pip. It's the first step to integrate django-filter into a Django project. The django-filter package allows users to easily filter Django QuerySets.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/install.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install django-filter\n```\n\n----------------------------------------\n\nTITLE: Django Template for Filter Form\nDESCRIPTION: This is a Django template snippet that renders the filter form and displays the filtered objects. It iterates over `filter.qs` to display the results and uses `filter.form.as_p` to render the form fields within paragraph tags.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_9\n\nLANGUAGE: django\nCODE:\n```\n{% extends \"base.html\" %}\n\n{% block content %}\n    <form method=\"get\">\n        {{ filter.form.as_p }}\n        <input type=\"submit\" />\n    </form>\n    {% for obj in filter.qs %}\n        {{ obj.name }} - ${{ obj.price }}<br />\n    {% endfor %}\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing django-crispy-forms\nDESCRIPTION: This snippet shows how to install django-crispy-forms, which enhances the presentation of filter forms in the browsable API.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/rest_framework.txt#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install django-crispy-forms\n```\n\n----------------------------------------\n\nTITLE: Product Model with Category ForeignKey\nDESCRIPTION: This defines a simple Product model with a foreign key relationship to a Category model. The `category` field is nullable, enabling the possibility of uncategorized products.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass Product(models.Model):\n    category = models.ForeignKey(Category, null=True)\n```\n\n----------------------------------------\n\nTITLE: BaseFilterSet with initial value handling\nDESCRIPTION: This example shows how to mimic the pre-1.0 behavior of django-filter by using initial values as defaults for missing or empty filter parameters. It copies the QueryDict to make it mutable and applies the initial value if a filter parameter is missing or empty.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/tips.txt#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass BaseFilterSet(FilterSet):\n\n    def __init__(self, data=None, *args, **kwargs):\n        # if filterset is bound, use initial values as defaults\n        if data is not None:\n            # get a mutable copy of the QueryDict\n            data = data.copy()\n\n            for name, f in self.base_filters.items():\n                initial = f.extra.get('initial')\n\n                # filter param is either missing or empty, use initial as default\n                if not data.get(name) and initial:\n                    data[name] = initial\n\n        super().__init__(data, *args, **kwargs)\n```\n\n----------------------------------------\n\nTITLE: Installing and Running Tests with Tox\nDESCRIPTION: This snippet installs the 'tox' testing tool and then executes it. Tox is used to run tests against multiple versions of Python and Django, ensuring compatibility across different environments. Tox uses a configuration file (usually tox.ini) to define the testing environments.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ pip install tox\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Raising Python exceptions for warnings in bash\nDESCRIPTION: This code snippet demonstrates how to enable warnings within Python using the `-W` flag set to 'error' when running a Django test suite. This configuration raises a full exception when a warning occurs, providing a complete stack trace for debugging.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/migration.txt#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ python -W error manage.py test\n```\n\n----------------------------------------\n\nTITLE: Creating a virtual environment\nDESCRIPTION: This command creates a new virtual environment named 'venv'. Virtual environments isolate project dependencies, preventing conflicts with other projects. The 'virtualenv' package needs to be installed.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ virtualenv venv\n```\n\n----------------------------------------\n\nTITLE: Executing the test runner\nDESCRIPTION: This command runs the test suite for the django-filter project using the 'runtests.py' script. This script is responsible for configuring the test environment and executing the tests. It assumes that the necessary dependencies have been installed in the virtual environment.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ python runtests.py\n```\n\n----------------------------------------\n\nTITLE: Configuring FilterView in urls.py\nDESCRIPTION: Demonstrates how to use `FilterView` in Django's `urls.py` to enable filtering for a given model. It requires importing `FilterView` from `django_filters.views` and defining a URL pattern with `FilterView.as_view(model=Product)`. The model must be specified.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/usage.txt#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# urls.py\nfrom django.urls import path\nfrom django_filters.views import FilterView\nfrom myapp.models import Product\n\nurlpatterns = [\n    path(\"list/\", FilterView.as_view(model=Product), name=\"product-list\"),\n]\n```\n\n----------------------------------------\n\nTITLE: FilterSet Ordering Example (Django)\nDESCRIPTION: Illustrates how ordering was handled in django-filter before version 0.12.0 and how it changed.  Before 0.12.0, ordering was done using the field 'username'. From 0.12.0 onwards, ordering should be done using the filter name 'account'.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/CHANGES.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass F(FilterSet):\n account = CharFilter(name='username')\n class Meta:\n model = User\n fields = ['account', 'status']\n order_by = True\n\n# Before, ordering was like `?o=username`. Since 0.12.0 it's `o=account`.\n```\n\n----------------------------------------\n\nTITLE: Override filter_for_lookup for specific lookups (Python)\nDESCRIPTION: This snippet demonstrates overriding the `filter_for_lookup` method to provide custom filters based on field type and lookup expression. It overrides date range lookups to use a `DateRangeFilter` and otherwise uses default behavior.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass ProductFilter(django_filters.FilterSet):\n    class Meta:\n        model = Product\n        fields = {\n            'release_date': ['exact', 'range'],\n        }\n\n    @classmethod\n    def filter_for_lookup(cls, f, lookup_type):\n        # override date range lookups\n        if isinstance(f, models.DateField) and lookup_type == 'range':\n            return django_filters.DateRangeFilter, {}\n\n        # use default behavior otherwise\n        return super().filter_for_lookup(f, lookup_type)\n```\n\n----------------------------------------\n\nTITLE: Disable filter fields with exclude in django-filter (Python)\nDESCRIPTION: This snippet shows how to use the `exclude` option in the `Meta` class to prevent automatic filter generation for specified fields. In this case, a filter for the 'password' field will not be generated, while other fields will still have filters created.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filterset.txt#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass UserFilter(django_filters.FilterSet):\n    class Meta:\n        model = User\n        exclude = ['password']\n```\n\n----------------------------------------\n\nTITLE: Enabling Python warnings in bash\nDESCRIPTION: This code snippet demonstrates how to enable warnings within Python using the `-W` flag when running a Django test suite. It will print warnings once when they first occur, which can be helpful to identify deprecations or other issues in your code.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/guide/migration.txt#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ python -W once manage.py test\n```\n\n----------------------------------------\n\nTITLE: Sorting Imports Recursively with isort\nDESCRIPTION: This command sorts the imports recursively within the 'django_filters' and 'tests' directories using the isort utility. The `--recursive` option ensures that all Python files within the specified directories are processed.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/dev/tests.txt#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ isort --recursive django_filters tests\n```\n\n----------------------------------------\n\nTITLE: Adding django_filters to INSTALLED_APPS\nDESCRIPTION: This snippet shows how to add 'django_filters' to the INSTALLED_APPS setting in your Django project's settings.py file. This is required to enable django-filter for use in your project.  It needs to be placed inside the INSTALLED_APPS list.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/README.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nINSTALLED_APPS = [\n    ...\n    'django_filters',\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Filter Method Example in Django FilterSet\nDESCRIPTION: This code snippet demonstrates how to define a custom filter method within a Django FilterSet. It shows how to filter a queryset based on a specific condition (in this case, checking if a 'published_on' field is not null) and returns the filtered queryset.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass F(FilterSet):\n    \"\"\"Filter for Books by if books are published or not\"\"\"\n    published = BooleanFilter(field_name='published_on', method='filter_published')\n\n    def filter_published(self, queryset, name, value):\n        # construct the full lookup expression.\n        lookup = '__'.join([name, 'isnull'])\n        return queryset.filter(**{lookup: False})\n\n        # alternatively, you could opt to hardcode the lookup. e.g.,\n        # return queryset.filter(published_on__isnull=False)\n\n    class Meta:\n        model = Book\n        fields = ['published']\n```\n\n----------------------------------------\n\nTITLE: DateTimeFromToRangeFilter Example in Python\nDESCRIPTION: This example demonstrates the use of DateTimeFromToRangeFilter with a DateTimeField. It defines a FilterSet 'F' for the Article model, filtering by the 'published' field.\nSOURCE: https://github.com/carltongibson/django-filter/blob/main/docs/ref/filters.txt#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nclass Article(models.Model):\n    published = models.DateTimeField()\n\nclass F(FilterSet):\n    published = DateTimeFromToRangeFilter()\n\n    class Meta:\n        model = Article\n        fields = ['published']\n```"
  }
]