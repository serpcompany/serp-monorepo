[
  {
    "owner": "ohmyzsh",
    "repo": "ohmyzsh",
    "content": "TITLE: Installing Oh My Zsh using wget (Shell)\nDESCRIPTION: Command to install Oh My Zsh using wget. This fetches the installation script from the official repository and executes it.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsh -c \"$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Aliases with Oh My Zsh - Shell\nDESCRIPTION: This snippet presents a Markdown-formatted table listing various Oh My Zsh aliases mapped to their full kubectl command equivalents and explanations. It enables shell users to quickly execute complex or repetitive kubectl commands through short aliases, promoting efficient Kubernetes administration. Aliases cover a breadth of Kubernetes management areas, such as pods, services, ingress, namespaces, ConfigMaps, secrets, and deployments, with groupings for organization; inputs are shell commands and outputs are improved command-line workflows.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n| Alias    | Command                                            | Description                                                                                      |\\n| :------- | :------------------------------------------------- | :----------------------------------------------------------------------------------------------- |\\n| k        | `kubectl`                                          | The kubectl command                                                                              |\\n| kca      | `kubectl --all-namespaces`                         | The kubectl command targeting all namespaces                                                     |\\n| kaf      | `kubectl apply -f`                                 | Apply a YML file                                                                                 |\\n| keti     | `kubectl exec -ti`                                 | Drop into an interactive terminal on a container                                                 |\\n|          |                                                    | **Manage configuration quickly to switch contexts between local, dev and staging**               |\\n| kcuc     | `kubectl config use-context`                       | Set the current-context in a kubeconfig file                                                     |\\n| kcsc     | `kubectl config set-context`                       | Set a context entry in kubeconfig                                                                |\\n| kcdc     | `kubectl config delete-context`                    | Delete the specified context from the kubeconfig                                                 |\\n| kccc     | `kubectl config current-context`                   | Display the current-context                                                                      |\\n| kcgc     | `kubectl config get-contexts`                      | List of contexts available                                                                       |\\n|          |                                                    | **General aliases**                                                                              |\\n| kdel     | `kubectl delete`                                   | Delete resources by filenames, stdin, resources and names, or by resources and label selector    |\\n| kdelf    | `kubectl delete -f`                                | Delete a pod using the type and name specified in -f argument                                    |\\n|          |                                                    | **Pod management**                                                                               |\\n| kgp      | `kubectl get pods`                                 | List all pods in ps output format                                                                |\\n| kgpl     | `kgp -l`                                           | Get pods by label. Example: `kgpl \\\"app=myapp\\\" -n myns`                                           |\\n| kgpn     | `kgp -n`                                           | Get pods by namespace. Example: `kgpn kube-system`                                               |\\n| kgpsl    | `kubectl get pods --show-labels`                   | List all pods in ps output format with labels                                                    |\\n| kgpw     | `kgp --watch`                                      | After listing/getting the requested object, watch for changes                                    |\\n| kgpwide  | `kgp -o wide`                                      | Output in plain-text format with any additional information. For pods, the node name is included |\\n| kep      | `kubectl edit pods`                                | Edit pods from the default editor                                                                |\\n| kdp      | `kubectl describe pods`                            | Describe all pods                                                                                |\\n| kdelp    | `kubectl delete pods`                              | Delete all pods matching passed arguments                                                        |\\n|          |                                                    | **Service management**                                                                           |\\n| kgs      | `kubectl get svc`                                  | List all services in ps output format                                                            |\\n| kgsw     | `kgs --watch`                                      | After listing all services, watch for changes                                                    |\\n| kgswide  | `kgs -o wide`                                      | After listing all services, output in plain-text format with any additional information          |\\n| kes      | `kubectl edit svc`                                 | Edit services(svc) from the default editor                                                       |\\n| kds      | `kubectl describe svc`                             | Describe all services in detail                                                                  |\\n| kdels    | `kubectl delete svc`                               | Delete all services matching passed argument                                                     |\\n|          |                                                    | **Ingress management**                                                                           |\\n| kgi      | `kubectl get ingress`                              | List ingress resources in ps output format                                                       |\\n| kei      | `kubectl edit ingress`                             | Edit ingress resource from the default editor                                                    |\\n| kdi      | `kubectl describe ingress`                         | Describe ingress resource in detail                                                              |\\n| kdeli    | `kubectl delete ingress`                           | Delete ingress resources matching passed argument                                                |\\n|          |                                                    | **Namespace management**                                                                         |\\n| kgns     | `kubectl get namespaces`                           | List the current namespaces in a cluster                                                         |\\n| kcn      | `kubectl config set-context --current --namespace` | Change current namespace                                                                         |\\n| kens     | `kubectl edit namespace`                           | Edit namespace resource from the default editor                                                  |\\n| kdns     | `kubectl describe namespace`                       | Describe namespace resource in detail                                                            |\\n| kdelns   | `kubectl delete namespace`                         | Delete the namespace. WARNING! This deletes everything in the namespace                          |\\n|          |                                                    | **ConfigMap management**                                                                         |\\n| kgcm     | `kubectl get configmaps`                           | List the configmaps in ps output format                                                          |\\n| kecm     | `kubectl edit configmap`                           | Edit configmap resource from the default editor                                                  |\\n| kdcm     | `kubectl describe configmap`                       | Describe configmap resource in detail                                                            |\\n| kdelcm   | `kubectl delete configmap`                         | Delete the configmap                                                                             |\\n|          |                                                    | **Secret management**                                                                            |\\n| kgsec    | `kubectl get secret`                               | Get secret for decoding                                                                          |\\n| kdsec    | `kubectl describe secret`                          | Describe secret resource in detail                                                               |\\n| kdelsec  | `kubectl delete secret`                            | Delete the secret                                                                                |\\n|          |                                                    | **Deployment management**                                                                        |\\n| kgd      | `kubectl get deployment`                           | Get the deployment                                                                               |\\n| kgdw     | `kgd --watch`                                      | After getting the deployment, watch for changes                                                  |\\n| kgdwide  | `kgd -o wide`                                      | After getting the deployment, output in plain-text format with any additional information        |\\n| ked      | `kubectl edit deployment`                          | Edit deployment resource from the default editor                                                 |\\n| kdd      | `kubectl describe deployment`                      | Describe deployment resource in detail                                                           |\\n| kdeld    | `kubectl delete deployment`                        | Delete the deployment                                                                            |\\n| ksd      | `kubectl scale deployment`                         | Scale a deployment                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Manual Installation Steps for Oh My Zsh\nDESCRIPTION: Steps to manually install Oh My Zsh including cloning the repository, optionally backing up the existing .zshrc file, creating a new zsh configuration file, changing the default shell, and initializing the new configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/ohmyzsh/ohmyzsh.git ~/.oh-my-zsh\n```\n\nLANGUAGE: sh\nCODE:\n```\ncp ~/.zshrc ~/.zshrc.orig\n```\n\nLANGUAGE: sh\nCODE:\n```\ncp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc\n```\n\nLANGUAGE: sh\nCODE:\n```\nchsh -s $(which zsh)\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Structure via is_json Command (Console)\nDESCRIPTION: Shows how to validate JSON content from a file using the 'is_json' command. Outputs 'true' or 'false' and returns an exit code indicating the validity. Useful for schema conformance checks in pipelines; requires a supported backend and reads from stdin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n# validate if file's content conforms to a valid JSON schema\\n$ is_json < data.json\\ntrue\\n# shows true / false and returns the proper exit code\\n$ echo $?\\n0\n```\n\n----------------------------------------\n\nTITLE: Installing Oh My Zsh using fetch (Shell)\nDESCRIPTION: Command to install Oh My Zsh using fetch. This fetches the installation script from the official repository and executes it.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsh -c \"$(fetch -o - https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Option Stacking in Zsh\nDESCRIPTION: Configuration to enable option stacking for Docker commands in Zsh. This allows combining multiple options but may cause some completion issues.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzstyle ':completion:*:*:docker:*' option-stacking yes\nzstyle ':completion:*:*:docker-*:*' option-stacking yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Oh My Zsh Plugins (Shell)\nDESCRIPTION: Example configuration for enabling multiple plugins in Oh My Zsh. This is added to the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(\n  git\n  bundler\n  dotenv\n  macos\n  rake\n  rbenv\n  ruby\n)\n```\n\n----------------------------------------\n\nTITLE: Git Branch Management Functions - Shell\nDESCRIPTION: Core functions for managing Git branches including current branch detection, main/develop branch identification, and branch renaming operations.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurrent_branch() # Returns name of current branch\ngit_current_user_email() # Returns user.email config\ngit_current_user_name() # Returns user.name config\ngit_develop_branch() # Returns development branch name\ngit_main_branch() # Returns main branch name\ngrename <old> <new> # Renames branch including on remote\ngbda # Deletes all merged branches\ngbds # Deletes all squash-merged branches\n```\n\n----------------------------------------\n\nTITLE: Enabling Docker Plugin in Oh My Zsh\nDESCRIPTION: Shows how to add the Docker plugin to Oh My Zsh configuration in zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... docker)\n```\n\n----------------------------------------\n\nTITLE: Binding Arrow Keys for history-substring-search - Zsh - Shell\nDESCRIPTION: Binds the UP and DOWN arrow keys to the respective history-substring-search functions in Zsh, allowing substring-based navigation through command history using the keyboard. No external dependencies are required; Zsh must support the bindkey command and the history-substring-search functions must be available (typically via plugin sourcing). Inputs are the arrow key codes; outputs are key bindings affecting command line behavior. Limitations may arise if key codes differ by terminal or OS.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nbindkey '^[[A' history-substring-search-up # or '\\eOA'\nbindkey '^[[B' history-substring-search-down # or '\\eOB'\n```\n\n----------------------------------------\n\nTITLE: Using GNU ls in macOS and FreeBSD\nDESCRIPTION: This snippet configures Oh My Zsh to use GNU ls instead of the default BSD ls in macOS and FreeBSD by setting a zstyle-based configuration before sourcing oh-my-zsh.sh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:lib:theme-and-appearance' gnu-ls yes\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Installation Directory for Oh My Zsh\nDESCRIPTION: This snippet demonstrates how to set a custom directory for Oh My Zsh installation by using the ZSH environment variable. The custom directory is set prior to running the install script.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nZSH=\"$HOME/.dotfiles/oh-my-zsh\" sh install.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Zsh Aliases for Git Commands\nDESCRIPTION: Defines a collection of Zsh shell aliases to shorten and simplify frequently used Git commands. These aliases cover a wide range of Git operations including staging, committing, branching, checking out, cloning, amending commits, bisecting, and navigating the repository structure (e.g., `grt` changes to the Git root). They are intended for use within an Oh My Zsh environment and depend on the `git` command-line tool and potentially Oh My Zsh helper functions (e.g., `git_current_branch`, `git_develop_branch`, `git_main_branch`).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nalias grt='cd \"$(git rev-parse --show-toplevel || echo .)\"'\nalias ggpnp='ggl && ggp'\nalias ggpur='ggu'\nalias g='git'\nalias ga='git add'\nalias gaa='git add --all'\nalias gapa='git add --patch'\nalias gau='git add --update'\nalias gav='git add --verbose'\nalias gwip='git add -A; git rm $(git ls-files --deleted) 2> /dev/null; git commit --no-verify --no-gpg-sign --message \"--wip-- [skip ci]\"'\nalias gam='git am'\nalias gama='git am --abort'\nalias gamc='git am --continue'\nalias gamscp='git am --show-current-patch'\nalias gams='git am --skip'\nalias gap='git apply'\nalias gapt='git apply --3way'\nalias gbs='git bisect'\nalias gbsb='git bisect bad'\nalias gbsg='git bisect good'\nalias gbsn='git bisect new'\nalias gbso='git bisect old'\nalias gbsr='git bisect reset'\nalias gbss='git bisect start'\nalias gbl='git blame -w'\nalias gb='git branch'\nalias gba='git branch --all'\nalias gbd='git branch --delete'\nalias gbD='git branch --delete --force'\nalias gbgd='LANG=C git branch --no-color -vv | grep \": gone]\" | cut -c 3- | awk '\\''{print $1}'\\'' | xargs git branch -d'\nalias gbgD='LANG=C git branch --no-color -vv | grep \": gone]\" | cut -c 3- | awk '\\''{print $1}'\\'' | xargs git branch -D'\nalias gbm='git branch --move'\nalias gbnm='git branch --no-merged'\nalias gbr='git branch --remote'\nalias ggsup='git branch --set-upstream-to=origin/$(git_current_branch)'\nalias gbg='LANG=C git branch -vv | grep \": gone]\"'\nalias gco='git checkout'\nalias gcor='git checkout --recurse-submodules'\nalias gcb='git checkout -b'\nalias gcB='git checkout -B'\nalias gcd='git checkout $(git_develop_branch)'\nalias gcm='git checkout $(git_main_branch)'\nalias gcp='git cherry-pick'\nalias gcpa='git cherry-pick --abort'\nalias gcpc='git cherry-pick --continue'\nalias gclean='git clean --interactive -d'\nalias gcl='git clone --recurse-submodules'\nalias gclf='git clone --recursive --shallow-submodules --filter=blob:none --also-filter-submodules'\nalias gccd='git clone --recurse-submodules \"$@\" && cd \"$(basename $_ .git)\"'\nalias gcam='git commit --all --message'\nalias gcas='git commit --all --signoff'\nalias gcasm='git commit --all --signoff --message'\nalias gcmsg='git commit --message'\nalias gcsm='git commit --signoff --message'\nalias gc='git commit --verbose'\nalias gca='git commit --verbose --all'\nalias gca!='git commit --verbose --all --amend'\nalias gcan!='git commit --verbose --all --no-edit --amend'\nalias gcans!='git commit --verbose --all --signoff --no-edit --amend'\nalias gcann!='git commit --verbose --all --date=now --no-edit --amend'\nalias gc!='git commit --verbose --amend'\n```\n\n----------------------------------------\n\nTITLE: Manual Update of Oh My Zsh\nDESCRIPTION: Instructions for manually updating Oh My Zsh by using the omz command or by directly calling the upgrade script. This allows for immediate updates outside the scheduled checks.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nomz update\n\n# Automate via script\n$ZSH/tools/upgrade.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Oh My Zsh using curl (Shell)\nDESCRIPTION: Command to install Oh My Zsh using curl. This fetches the installation script from the official repository and executes it.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins Array with NVM in Oh My Zsh - Zsh\nDESCRIPTION: This snippet shows how to add the nvm plugin to the plugins array in your .zshrc file for Oh My Zsh, enabling its autocompletion and automatic sourcing features. No external dependencies are required beyond Oh My Zsh and a proper installation of nvm. To include nvm, add its name in the parentheses alongside other plugins; the updated plugins array is then used by Oh My Zsh on startup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... nvm)\n```\n\n----------------------------------------\n\nTITLE: Loading Docker Compose Plugin in Oh My Zsh\nDESCRIPTION: Instructions for enabling the Docker Compose plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker-compose/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... docker-compose)\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resource Management Commands\nDESCRIPTION: Collection of kubectl command aliases for managing various Kubernetes resources including deployments, replicasets, pods, services, and more. Each alias provides a shorthand for common kubectl operations.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nkrsd=\"kubectl rollout status deployment\"\nkres=\"kubectl set env $@ REFRESHED_AT=...\"\nkgrs=\"kubectl get replicaset\"\nkdrs=\"kubectl describe replicaset\"\nkers=\"kubectl edit replicaset\"\nkrh=\"kubectl rollout history\"\nkru=\"kubectl rollout undo\"\nkpf=\"kubectl port-forward\"\nkga=\"kubectl get all\"\nkgaa=\"kubectl get all --all-namespaces\"\nkl=\"kubectl logs\"\nklf=\"kubectl logs -f\"\nkcp=\"kubectl cp\"\n```\n\n----------------------------------------\n\nTITLE: URL Encoding JSON String via urlencode_json Command (Console)\nDESCRIPTION: Demonstrates URL encoding a JSON string directly from the command line using 'urlencode_json'. Converts structured JSON to a percent-encoded string suitable for transmission over URLs. Accepts data from stdin; backend requirement applies.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n# json data directly from the command line\\n$ echo '{\"b\":2, \"a\":1}' | urlencode_json\\n%7B%22b%22:2,%20%22a%22:1%7D\n```\n\n----------------------------------------\n\nTITLE: Setting Up Extract Plugin in Zsh\nDESCRIPTION: This snippet demonstrates how to add the 'extract' plugin to the plugins array in the Zsh configuration file (zshrc). By adding 'extract', users can leverage a unified command to extract a wide range of archive types without needing to remember specific commands for each type.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/extract/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... extract)\n```\n\n----------------------------------------\n\nTITLE: Git Work in Progress Commands - Shell\nDESCRIPTION: Commands for managing work-in-progress states, allowing temporary commits and branch switching.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngwip # Commit wip branch\ngunwip # Uncommit wip branch\ngunwipall # Uncommit all recent --wip-- commits\nwork_in_progress # Echo warning if current branch is wip\n```\n\n----------------------------------------\n\nTITLE: Setting fzf Installation Path via FZF_BASE (Zsh)\nDESCRIPTION: Demonstrates setting the `FZF_BASE` environment variable to explicitly specify the installation directory path for `fzf`. This variable should be defined in the `.zshrc` file before Oh My Zsh is sourced to ensure the plugin can locate the fzf executable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nexport FZF_BASE=/path/to/fzf/install/dir\n```\n\n----------------------------------------\n\nTITLE: Manually Initializing pyenv in .zshrc (Zsh)\nDESCRIPTION: This Zsh code snippet demonstrates how to manually initialize `pyenv` within the `.zshrc` file. It sets the `PYENV_ROOT` environment variable, updates the system `PATH` to include pyenv's binaries, and runs `pyenv init`. This is often necessary to place before the Oh My Zsh `plugins=(...)` line to resolve 'badly configured' errors by ensuring pyenv is set up before the plugin loads.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pyenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init --path)\"\n```\n\n----------------------------------------\n\nTITLE: Formatting Conventional Commits for Oh-My-Zsh\nDESCRIPTION: Demonstrates the format for writing commit messages according to the Conventional Commits specification used by Oh-My-Zsh. Shows the syntax with type, scope, breaking change indicator, and subject format.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ntype(scope)!: subject\n```\n\n----------------------------------------\n\nTITLE: Installing Terraform Plugin in Oh My Zsh\nDESCRIPTION: Instructions for adding the Terraform plugin to Oh My Zsh configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terraform/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... terraform)\n```\n\n----------------------------------------\n\nTITLE: Enabling the History Plugin in Oh My Zsh - zsh\nDESCRIPTION: This snippet demonstrates how to activate the 'history' plugin in Oh My Zsh by adding it to the 'plugins' array within your .zshrc configuration file. No additional dependencies are required beyond an existing Oh My Zsh installation. Users need to edit their .zshrc file and add 'history' to the list of plugins, after which reloading the shell makes available several convenient history examination aliases.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... history)\n```\n\n----------------------------------------\n\nTITLE: Enabling Lazy Loading for NVM Plugin via zstyle - Zsh\nDESCRIPTION: This zsh snippet enables the lazy loading feature for the nvm plugin via a zstyle configuration. By deferring nvm's initialization until it is actually used, this setting speeds up shell startup. To activate the lazy behavior, add the provided zstyle line to your .zshrc prior to sourcing Oh My Zsh. The only requirements are a functional Oh My Zsh installation and the nvm plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:nvm' lazy yes\n```\n\n----------------------------------------\n\nTITLE: Using Global Aliases in Zsh\nDESCRIPTION: These examples demonstrate how to use global aliases in Zsh commands. Global aliases can be used in any position in the command line, allowing for quick piping to less or silencing stderr output.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/common-aliases/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ ls -l /var/log L\n# will run\n$ ls -l /var/log | less\n```\n\nLANGUAGE: zsh\nCODE:\n```\n$ find . -type f NE\n# will run\n$ find . -type f 2>/dev/null\n```\n\n----------------------------------------\n\nTITLE: Command Examples with Sudo\nDESCRIPTION: Example commands showing the result after pressing escape twice to add sudo prefix.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ sudo apt-get install build-essential\n```\n\nLANGUAGE: console\nCODE:\n```\n$ sudo -e /etc/hosts\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rm some-system-file.txt\n-su: some-system-file.txt: Permission denied\n$ sudo rm some-system-file.txt\nPassword:\n$\n```\n\n----------------------------------------\n\nTITLE: Using Git Aliases for Commit Messages in Zsh\nDESCRIPTION: This syntax snippet shows how to use git aliases with the git-commit plugin to create standardized commit messages based on the conventional commits specification. It outlines the various types of commits that can be specified and details optional parameters such as scope and attention. Ensure the correct format as incorrect syntax may result in unintended commit messages.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-commit/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ngit <type> [(-s, --scope) \"<scope>\"] [(-a, --attention)] \"<message>\"\n```\n\n----------------------------------------\n\nTITLE: Loading the SSH Plugin in Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the SSH plugin by adding it to the plugins array in the zshrc file. Once enabled, the plugin provides host completion and SSH key management utilities.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ssh)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fancy Ctrl-Z Plugin in Oh My Zsh - Zsh\nDESCRIPTION: This snippet demonstrates how to enable the 'fancy-ctrl-z' plugin by adding it to the plugins array in your .zshrc configuration file. The plugin allows users to suspend a running job (such as Vim) with Ctrl-Z and quickly return to it by pressing Ctrl-Z again, eliminating the need for manual 'fg' commands. No additional dependencies are required other than having Oh My Zsh and the 'fancy-ctrl-z' plugin installed; edits are made directly in the .zshrc file, with 'fancy-ctrl-z' specified among other plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fancy-ctrl-z/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fancy-ctrl-z)\n```\n\n----------------------------------------\n\nTITLE: Toggle Async Git Prompt in Oh My Zsh\nDESCRIPTION: Provides settings to control the experimental async prompt feature in Oh My Zsh. It can be turned on or off using zstyle configurations in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nzstyle ':omz:alpha:lib:git' async-prompt no\nzstyle ':omz:alpha:lib:git' async-prompt force\n```\n\n----------------------------------------\n\nTITLE: Enabling HTTPie Plugin in Oh My Zsh (zsh)\nDESCRIPTION: This snippet demonstrates how to add the 'httpie' plugin to the list of plugins in the .zshrc configuration file for Oh My Zsh. By including 'httpie' in the 'plugins' array, users enable shell autocompletion for the HTTPie command line client. No additional dependencies beyond Oh My Zsh and optionally zsh-completions are needed. The configuration expects users to edit .zshrc directly; input is the plugin name and output is enhanced shell completion for HTTPie commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/httpie/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... httpie)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Web-Search Plugin in ZSH Configuration\nDESCRIPTION: Shows how to enable the web-search plugin in the .zshrc configuration file. Add 'web-search' to the plugins array in your .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=( ... web-search)\n```\n\n----------------------------------------\n\nTITLE: Renaming and Formatting Kubernetes Context Names via Mapping (Zsh)\nDESCRIPTION: This set of snippets demonstrates how to use the kubectx_mapping associative array to rename and reformat display names of Kubernetes contexts in your prompt. Entries use prompt expansion (e.g., coloring with %F{color}) and can include special formatting or emoji for specific context names. These lines go into your .zshrc, support advanced customizations, and ensure that your prompt displays human-friendly cluster identifiers instead of raw context names.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nkubectx_mapping[minikube]=\"mini\"\nkubectx_mapping[context_name_from_kubeconfig]=\"$emoji[wolf_face]\"\nkubectx_mapping[production_cluster]=\"%{$fg[yellow]%}prod!%{$reset_color%}\"\n# contexts with spaces\nkubectx_mapping[context\\ with\\ spaces]=\"%F{red}spaces%f\"\n# don't use quotes as it will break the prompt\nkubectx_mapping[\"context with spaces\"]=\"%F{red}spaces%f\" # ti\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Array for Oh My Zsh in Zsh\nDESCRIPTION: This snippet shows how to include the 'direnv' plugin by adding it to the plugins array in your .zshrc file. It enables integrated Direnv support in the Zsh shell. Users must have the direnv binary installed on their system for the plugin to function, and should list 'direnv' among other desired plugins in the plugins assignment. This configuration will be read automatically on Zsh startup, activating the Direnv plugin for session use.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/direnv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... direnv)\n```\n\n----------------------------------------\n\nTITLE: Including Gems to be Wrapped in Bundler Plugin\nDESCRIPTION: This snippet demonstrates how to add gems to the list of wrapped commands in the Bundler plugin. It shows the syntax for setting the BUNDLED_COMMANDS variable before the plugin list in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bundler/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nBUNDLED_COMMANDS=(rubocop)\nplugins=(... bundler ...)\n```\n\n----------------------------------------\n\nTITLE: Git Tag and Worktree Operations - Shell\nDESCRIPTION: Commands for managing Git tags and worktree operations including listing, moving, and removing worktrees.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngtl(){ git tag --sort=-v:refname -n --list ${1}\\* }; noglob gtl\ngwtls # git worktree list\ngwtmv # git worktree move\ngwtrm # git worktree remove\n```\n\n----------------------------------------\n\nTITLE: Bulk Defining Context Name Mappings for kubectx (Zsh)\nDESCRIPTION: This snippet shows the recommended way to declare and assign multiple context display-name mappings for the kubectx_prompt_info function all at once. It utilizes Zsh's associative array feature (typeset -A) followed by a value assignment block for flexibility and readability. Used in the .zshrc file, this allows multiple contextual formatting rules—including coloring and emoji—to be specified compactly for prompt customization.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\ntypeset -A kubectx_mapping\nkubectx_mapping=(\n  minikube                      \"mini\"\n  context_name_from_kubeconfig  \"$emoji[wolf_face]\"\n  production_cluster            \"%{$fg[yellow]%}prod!%{$reset_color%}\"\n  \"context with spaces\"         \"%F{red}spaces%f\"\n)\n```\n\n----------------------------------------\n\nTITLE: RSync Command Aliases\nDESCRIPTION: Set of predefined rsync command aliases including copy, move, update, and synchronize operations. Each alias includes progress indicators and human-readable output formatting.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rsync/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nrsync -avz --progress -h\nrsync -avz --progress -h --remove-source-files\nrsync -avzu --progress -h\nrsync -avzu --delete --progress -h\n```\n\n----------------------------------------\n\nTITLE: Installing Latest Zsh-z Version for Oh My Zsh\nDESCRIPTION: Commands to manually install the latest version of Zsh-z from GitHub into the Oh My Zsh custom plugins directory.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/agkozak/zsh-z ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Node Management Commands\nDESCRIPTION: Kubectl command aliases specifically for managing Kubernetes nodes, including listing, editing, describing, and deleting nodes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nkgno=\"kubectl get nodes\"\nkgnosl=\"kubectl get nodes --show-labels\"\nkeno=\"kubectl edit node\"\nkdno=\"kubectl describe node\"\nkdelno=\"kubectl delete node\"\n```\n\n----------------------------------------\n\nTITLE: Setting Oh My Zsh Theme (Shell)\nDESCRIPTION: Example of how to set a specific theme in Oh My Zsh by modifying the ZSH_THEME variable in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nZSH_THEME=\"robbyrussell\"\n```\n\n----------------------------------------\n\nTITLE: Enabling ASDF Plugin in Oh My Zsh\nDESCRIPTION: Shows how to enable the ASDF plugin by adding it to the plugins array in .zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/asdf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(asdf)\n```\n\n----------------------------------------\n\nTITLE: Binding Keys to n-cd and n-kill Widgets in Zsh\nDESCRIPTION: This Zsh configuration snippet shows how to bind `Ctrl+B` to the `n-cd` directory bookmark widget and `Ctrl+Y` to the `n-kill` process killing widget. It assumes the widgets are already autoloaded (e.g., by the plugin's main file).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzle -N znt-cd-widget\nbindkey \"^B\" znt-cd-widget\nzle -N znt-kill-widget\nbindkey \"^Y\" znt-kill-widget\n```\n\n----------------------------------------\n\nTITLE: Configuring Magic Enter Plugin in Oh My Zsh - zsh\nDESCRIPTION: This snippet demonstrates how to set up the Magic Enter plugin by defining default commands for the Enter key in Git and non-Git directories within the .zshrc file. Dependencies include Oh My Zsh with the magic-enter plugin installed and enabled. The key parameters are MAGIC_ENTER_GIT_COMMAND (used in Git repositories) and MAGIC_ENTER_OTHER_COMMAND (used elsewhere), as well as the plugin activation line. Input consists of configuration lines in the .zshrc file; expected output is the automatic running of the commands depending on directory context when pressing Enter. The configuration is constrained to zsh/Oh My Zsh environments, and must be evaluated before the plugins line in .zshrc.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/magic-enter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\n# defaults\\nMAGIC_ENTER_GIT_COMMAND='git status -u .'\\nMAGIC_ENTER_OTHER_COMMAND='ls -lh .'\\n\\nplugins=(... magic-enter)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oh My Zsh Update Frequency and Mode\nDESCRIPTION: Snippet detailing how to set the update check frequency and mode for Oh My Zsh using zstyle settings in the .zshrc file. It enables configuring automatic updates and reminder modes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nzstyle ':omz:update' mode auto\nzstyle ':omz:update' mode reminder\nzstyle ':omz:update' mode disabled\n\n# Control how often to check for updates\nzstyle ':omz:update' frequency 7\n```\n\n----------------------------------------\n\nTITLE: Sample .env File with Export Statements\nDESCRIPTION: This example demonstrates the format of a .env file using export statements. It includes environment variables for AWS S3 token, secret key, MongoDB URI, and port number.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nexport AWS_S3_TOKEN=d84a83539134f28f412c652b09f9f98eff96c9a\nexport SECRET_KEY=7c6c72d959416d5aa368a409362ec6e2ac90d7f\nexport MONGO_URI=mongodb://127.0.0.1:27017\nexport PORT=3001\n```\n\n----------------------------------------\n\nTITLE: Unattended Installation of Oh My Zsh\nDESCRIPTION: This snippet shows how to perform an unattended installation of Oh My Zsh. It uses the --unattended flag to avoid changing the default shell and running zsh post-install.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" \"\" --unattended\n```\n\n----------------------------------------\n\nTITLE: Binding Arrow and Control Keys for History Navigation - Zsh - Shell\nDESCRIPTION: Shows assigning keyboard shortcuts (UP, DOWN arrows; optionally Control-P/N for emacs mode) to history-substring-search functions, facilitating history navigation via substring search. Requires correct keycodes determined from the user's terminal, as well as plugin functions loaded. Inputs: bindkey commands with codes; outputs: custom shell navigation key bindings.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nbindkey '^[[A' history-substring-search-up\nbindkey '^[[B' history-substring-search-down\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing JSON via pp_json Command (Console)\nDESCRIPTION: Demonstrates how to use the 'pp_json' tool to pretty print JSON data fetched from a URL using 'curl'. The JSON output is formatted for readability in the terminal. The tool requires a working backend (node, python3, or ruby) and reads piped data from stdin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n# curl json data and pretty print the results\\ncurl https://coderwall.com/bobwilliams.json | pp_json\n```\n\n----------------------------------------\n\nTITLE: Executing Frontend Documentation Searches via Alias (Zsh)\nDESCRIPTION: This snippet illustrates usage patterns for performing frontend documentation searches via the plugin's commands or aliases. The examples show two variations: a direct context search and an explicit call to the 'frontend' command. Both approaches require the frontend-search plugin to be enabled and function as aliases to open a browser with search results. Inputs are the context and search terms; outputs involve launching the documentation site. Limitations: only supported contexts are recognized, and additional configuration may be needed for fallback behavior.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/frontend-search/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ angular dependency injection\n# Will turn into ...\n$ frontend angular dependency injection\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Git-Flow Plugin in ZSH\nDESCRIPTION: The code snippet shows how to add the 'git-flow' plugin to the plugin list in a ZSH configuration file. This enables autocompletion and shorthand aliases for git-flow commands. This requires Oh My Zsh to be installed and configured as the shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-flow/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... git-flow)\n```\n\n----------------------------------------\n\nTITLE: Warping to a directory using a warp point\nDESCRIPTION: Command to navigate to the directory associated with the warp point 'foo'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_18\n\nLANGUAGE: zsh\nCODE:\n```\nwd foo\n```\n\n----------------------------------------\n\nTITLE: ASDF Version Management Commands\nDESCRIPTION: Demonstrates common ASDF commands for managing runtime versions, including adding plugins, installing/uninstalling versions, and setting version preferences at different scopes (current directory, parent directory, and global).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/asdf/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Add plugin to asdf\nasdf plugin add nodejs\n\n# Install the latest available version\nasdf install nodejs latest\n\n# Uninstall the latest version\nasdf uninstall nodejs latest\n\n# Install a specific version\nasdf install nodejs 16.5.0\n\n# Set the latest version in .tool-versions of the `current directory`\nasdf set nodejs latest\n\n# Set a specific version in the `parent directory`\nasdf set -p nodejs 16.5.0   # -p is shorthand for --parent\n\n# Set a global version under `$HOME`\nasdf set -u nodejs 16.5.0   # -u is shorthand for --home\n```\n\n----------------------------------------\n\nTITLE: Configuring fzf Default Command via FZF_DEFAULT_COMMAND (Zsh)\nDESCRIPTION: Illustrates setting the `FZF_DEFAULT_COMMAND` environment variable to define the default command `fzf` should use when its input is a TTY (terminal). This setting should be placed in `.zshrc` before Oh My Zsh sourcing. If not set, the plugin defaults to using `fd`, `rg`, or `ag` if available.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nexport FZF_DEFAULT_COMMAND='<your fzf default command>'\n```\n\n----------------------------------------\n\nTITLE: Loading multiple SSH identities with ssh-agent plugin\nDESCRIPTION: Configure multiple SSH identities to be loaded automatically. This has no effect if the lazy setting is enabled.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent identities id_rsa id_rsa2 id_github\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Array for Oh My Zsh in Zsh\nDESCRIPTION: This snippet demonstrates how to include the 'kubectl' plugin in the plugins array within the .zshrc configuration file for Oh My Zsh. By adding 'kubectl' to the array, users enable autocompletion for kubectl commands and access predefined aliases for Kubernetes management. No external dependencies are required beyond Oh My Zsh and the presence of the kubectl binary; edit .zshrc and restart the shell session to activate changes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... kubectl)\n```\n\n----------------------------------------\n\nTITLE: Setting maximum lifetime for SSH identities\nDESCRIPTION: Configure the maximum lifetime for loaded SSH identities, specified in seconds or using time formats as described in sshd_config(5).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent lifetime 4h\n```\n\n----------------------------------------\n\nTITLE: Enabling the .NET Core CLI Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to enable the '.NET Core CLI' plugin within the Oh My Zsh framework. By adding 'dotnet' to the `plugins` array in the user's `.zshrc` file, Zsh will load the plugin, providing command completions and aliases for the `dotnet` command-line interface.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotnet/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... dotnet)\n```\n\n----------------------------------------\n\nTITLE: Enabling the macOS Plugin in Zsh Configuration\nDESCRIPTION: This Zsh configuration snippet demonstrates how to enable the 'macos' plugin within Oh My Zsh by adding it to the plugins array in the ~/.zshrc file. Ensure 'macos' is included in the parentheses alongside any other desired plugins to activate its functionalities.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/macos/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... macos)\n```\n\n----------------------------------------\n\nTITLE: AWS roles configuration in ~/.aws/config\nDESCRIPTION: Example configuration for AWS profiles including a source profile with MFA settings and a role-based profile with source profile reference. This setup enables role assumption with MFA authentication.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aws/README.md#2025-04-22_snippet_2\n\nLANGUAGE: ini\nCODE:\n```\n[profile source-profile-name]\nmfa_serial = arn:aws:iam::111111111111:mfa/myuser\nregion = us-east-1\noutput = json\n\n[profile profile-with-role]\nrole_arn = arn:aws:iam::9999999999999:role/myrole\nmfa_serial = arn:aws:iam::111111111111:mfa/myuser\nsource_profile = source-profile-name\nregion = us-east-1\noutput = json\n```\n\n----------------------------------------\n\nTITLE: Enabling Proxy with Environment Variables (Method 1)\nDESCRIPTION: Setting up proxy configuration by defining environment variables for proxy URL and no-proxy domains, then enabling the proxy with a command. This method uses direct environment variable configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nSHELLPROXY_URL=\"http://127.0.0.1:8123\"\nSHELLPROXY_NO_PROXY=\"localhost,127.0.0.1\"\nproxy enable\n```\n\n----------------------------------------\n\nTITLE: Pacaur Package Manager Commands\nDESCRIPTION: A collection of shell aliases for the Pacaur package manager, providing shortcuts for common package management operations like installing, removing, updating, and querying packages.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npacclean=\"pacaur -Sc\"\npacclr=\"pacaur -Scc\"\npain=\"pacaur -S\"\npains=\"pacaur -U\"\npainsd=\"pacaur -S --asdeps\"\npaloc=\"pacaur -Qi\"\npalocs=\"pacaur -Qs\"\npalst=\"pacaur -Qe\"\npamir=\"pacaur -Syy\"\npaorph=\"pacaur -Qtd\"\npare=\"pacaur -R\"\nparem=\"pacaur -Rns\"\nparep=\"pacaur -Si\"\npareps=\"pacaur -Ss\"\npaupd=\"pacaur -Sy\"\npaupg=\"pacaur -Syua\"\npasu=\"pacaur -Syua --no-confirm\"\nupgrade=\"pacaur -Syu\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Yarn Plugin for Yarn Berry Support\nDESCRIPTION: This snippet sets a zstyle to configure the Yarn plugin for use with Yarn Berry (version 2 or higher). It should be added to the .zshrc file to enable Berry-specific aliases.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yarn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:yarn' berry yes\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resource Wrappers\nDESCRIPTION: Output formatting wrappers for kubectl that provide colored JSON and YAML output using external tools like jq, fx, and yh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectl/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nkj=\"kubectl output in JSON, colorized with jq\"\nkjx=\"kubectl output in JSON, colorized with fx\"\nky=\"kubectl output in YAML, colorized with yh\"\n```\n\n----------------------------------------\n\nTITLE: Enabling Gitfast Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet demonstrates how to enable the 'gitfast' plugin within an Oh My Zsh configuration. By adding 'gitfast' to the plugins array in the user's `.zshrc` file, the faster Git completion provided by this plugin is activated.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gitfast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gitfast)\n```\n\n----------------------------------------\n\nTITLE: Warping to a subdirectory within a warp point\nDESCRIPTION: Command to navigate to a specific subdirectory path within a warp point target, with autocompletion support.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_19\n\nLANGUAGE: zsh\nCODE:\n```\nwd foo some/inner/path\n```\n\n----------------------------------------\n\nTITLE: Configuring alias-finder with zstyle options\nDESCRIPTION: Example configuration for enabling alias-finder features using zstyle. This shows how to autoload the plugin for every command and enable options for longer suggestions, exact matching, and cheaper alternatives.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n# ~/.zshrc\n\nzstyle ':omz:plugins:alias-finder' autoload yes # disabled by default\nzstyle ':omz:plugins:alias-finder' longer yes # disabled by default\nzstyle ':omz:plugins:alias-finder' exact yes # disabled by default\nzstyle ':omz:plugins:alias-finder' cheaper yes # disabled by default\n```\n\n----------------------------------------\n\nTITLE: Loading the VS Code Plugin in Oh My Zsh Configuration\nDESCRIPTION: Shows how to add the VS Code plugin to the plugins array in the .zshrc file to enable its functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vscode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... vscode)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Prompt Plugin in Oh My Zsh - Zsh Shell\nDESCRIPTION: This snippet demonstrates how to enable the git-prompt plugin in your Oh My Zsh configuration by adding it to the plugins array in your .zshrc file. The plugin provides detailed information about the current Git repository's status in your prompt. Ensure that Oh My Zsh is already installed and configured, and that python3 is available on your system as a dependency.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-prompt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... git-prompt)\n```\n\n----------------------------------------\n\nTITLE: AWS credentials configuration in ~/.aws/credentials\nDESCRIPTION: Example configuration for AWS source profile credentials containing the access key ID and secret access key, which are required for authentication with AWS services.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aws/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[source-profile-name]\naws_access_key_id = ...\naws_secret_access_key = ...\n```\n\n----------------------------------------\n\nTITLE: Activating git-auto-fetch Plugin in Oh My Zsh (Shell)\nDESCRIPTION: This shell code snippet demonstrates how to enable the git-auto-fetch plugin by adding it to the plugins array in your .zshrc file. There are no additional dependencies beyond Oh My Zsh. The snippet shows an example syntax; users should ensure 'git-auto-fetch' is included alongside any other desired plugins. Input is direct modification to the configuration file, and output is automatic fetching in git-enabled directories. There are no special constraints aside from using Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-auto-fetch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... git-auto-fetch)\n```\n\n----------------------------------------\n\nTITLE: Enabling fzf Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: Shows how to activate the `fzf` plugin by adding its name to the `plugins` array within the `.zshrc` configuration file. This step is required for Oh My Zsh to load the plugin's functionality, including fuzzy auto-completion and key bindings.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fzf)\n```\n\n----------------------------------------\n\nTITLE: Using opswd Command for GitHub Credentials\nDESCRIPTION: This example demonstrates how to use the 'opswd' command to retrieve GitHub credentials. It will copy the username, password, and TOTP (if available) to the clipboard sequentially, with user confirmations between each step.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/1password/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nopswd github.com\n```\n\n----------------------------------------\n\nTITLE: Listing all warp points\nDESCRIPTION: Command to display all warp points stored in the configuration file (default: ~/.warprc).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_22\n\nLANGUAGE: zsh\nCODE:\n```\nwd list\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using bgnotify Plugin in Zsh\nDESCRIPTION: This snippet demonstrates how to configure the bgnotify plugin, including customizing the notification threshold, disabling the terminal bell, and defining a custom notification format function. It also shows how to add the plugin to the Oh My Zsh configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bgnotify/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nbgnotify_bell=false   ## disable terminal bell\nbgnotify_threshold=4  ## set your own notification threshold\n\nfunction bgnotify_formatted {\n  ## $1=exit_status, $2=command, $3=elapsed_time\n\n  # Humanly readable elapsed time\n  local elapsed=\"$(( $3 % 60 ))s\"\n  (( $3 < 60 ))   || elapsed=\"$((( $3 % 3600) / 60 ))m $elapsed\"\n  (( $3 < 3600 )) || elapsed=\"$((  $3 / 3600 ))h $elapsed\"\n\n  [ $1 -eq 0 ] && title=\"Holy Smokes Batman\" || title=\"Holy Graf Zeppelin\"\n  [ $1 -eq 0 ] && icon=\"$HOME/icons/success.png\" || icon=\"$HOME/icons/fail.png\"\n  bgnotify \"$title - took ${elapsed}\" \"$2\" \"$icon\"\n}\n\nplugins=(git bgnotify)  ## add to plugins list\nsource $ZSH/oh-my-zsh.sh  ## existing source call\n```\n\n----------------------------------------\n\nTITLE: Enabling Flutter Plugin in Oh My Zsh Configuration (Zsh)\nDESCRIPTION: This Zsh configuration snippet demonstrates how to activate the Oh My Zsh Flutter plugin by adding 'flutter' to the plugins array within the user's `.zshrc` file. This modification enables Flutter-specific aliases and completions in the Zsh shell. Requires Oh My Zsh to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/flutter/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... flutter)\n```\n\n----------------------------------------\n\nTITLE: Configuring n-list Appearance via n-list.conf (Zsh)\nDESCRIPTION: This snippet provides an example configuration from `n-list.conf`, demonstrating how to set appearance options for Zsh Navigation Tools. It shows how to define local Zsh variables for `bold`, `colorpair`, `border`, and available `themes`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n# Should the list (text, borders) be drawn in bold\nlocal bold=0\n\n# Main color pair (foreground/background)\nlocal colorpair=\"white/black\"\n\n# Should draw the border?\nlocal border=1\n\n# Combinations of colors to try out with Ctrl-T and Ctrl-G\n# The last number is the bold option, 0 or 1\nlocal -a themes\nthemes=( \"white/black/1\" \"green/black/0\" \"green/black/1\" \"white/blue/0\" \"white/blue/1\"\n         \"magenta/black/0\" \"magenta/black/1\" )\n```\n\n----------------------------------------\n\nTITLE: Using the Web-Search Plugin with Examples\nDESCRIPTION: Demonstrates the two equivalent ways to use the web-search plugin: either with the web_search function or directly with the search context alias.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ web_search google oh-my-zsh\n$ google oh-my-zsh\n```\n\n----------------------------------------\n\nTITLE: Enabling lazy loading of SSH identities\nDESCRIPTION: Prevent loading any identities on start, which is useful when combined with the AddKeysToAgent feature in OpenSSH 7.2+.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent lazy yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh FPATH for Homebrew Hub Completions\nDESCRIPTION: This Zsh snippet checks whether the Homebrew `hub` completions directory is included in the FPATH, and adds it if it's not. This is necessary for users who have installed `hub` via Homebrew and are using the system `zsh`. No external dependencies required.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/github/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nif (( ! ${fpath[(I)/usr/local/share/zsh/site-functions]} )); then\n  FPATH=/usr/local/share/zsh/site-functions:$FPATH\nfi\n```\n\n----------------------------------------\n\nTITLE: Enabling frontend-search Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet demonstrates how to activate the frontend-search plugin by editing the plugins array in your ~/.zshrc configuration file. You must add 'frontend-search' to the plugin list and then reload the shell for changes to take effect. The dependency is Oh My Zsh, and the key parameter is the plugins array, which should already exist. The output is enabling additional aliases and commands for quick frontend documentation searching. No parameters are taken at runtime; only the edited configuration matters.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/frontend-search/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=( ... frontend-search)\n\n```\n\n----------------------------------------\n\nTITLE: Debugging Jira Plugin Configuration via Shell Command\nDESCRIPTION: This shell command (`jira dumpconfig`) is used for debugging the Jira plugin's configuration. Executing it displays the effective settings currently being used by the plugin, such as the resolved JIRA URL, prefix, and other variables. This is primarily intended for developers.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\njira dumpconfig   # displays the effective configuration\n```\n\n----------------------------------------\n\nTITLE: Installing mise and Enabling as a Plugin in Zsh\nDESCRIPTION: This snippet demonstrates how to download and install the mise runtime executor, as well as how to enable it as a plugin in the Zsh configuration file. Dependencies include internet access for downloading the installer script. Key parameters include the plugin name to be added to the Zsh configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mise/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://mise.jdx.dev/install.sh | sh\n```\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(mise)\n```\n\n----------------------------------------\n\nTITLE: Configuring Completion for Multiple Pass Repositories - Zsh\nDESCRIPTION: Defines custom completion and aliasing for a secondary pass repository within Zsh. It uses 'compdef' to link completion functions, utilizes 'zstyle' to specify a custom repository path, and defines a shell function 'workpass' for seamless access. Dependencies include Oh My Zsh with the 'pass' plugin and the pass command-line tool. The new function allows users to access a non-default password store by running 'workpass', passing all arguments through while correctly setting 'PASSWORD_STORE_DIR'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pass/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ncompdef _pass workpass\nzstyle ':completion::complete:workpass::' prefix \"$HOME/work/pass\"\nworkpass() {\n  PASSWORD_STORE_DIR=$HOME/work/pass pass $@\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Auto-Fetch Interval with Environment Variable (sh)\nDESCRIPTION: This snippet sets the fetch interval, in seconds, for git-auto-fetch by defining the GIT_AUTO_FETCH_INTERVAL variable in your .zshrc. No external dependencies are required beyond the environment variable support in the shell. The key parameter is the interval value (1200 seconds in this example). Input is the integer value of update interval, and output is the adjusted auto-fetch timing. Ensure the line is placed in the appropriate shell configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-auto-fetch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nGIT_AUTO_FETCH_INTERVAL=1200 # in seconds\n```\n\n----------------------------------------\n\nTITLE: Configuring Oh My Zsh with Macports Plugin - Zsh\nDESCRIPTION: Demonstrates how to enable the Macports plugin by adding it to the plugins array in your .zshrc configuration file. This step is required in order to load Macports completions and custom aliases after starting a new shell session. The `plugins` array should include 'macports' alongside any other desired plugins. No other setup or parameters are needed; the plugin will load at shell startup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/macports/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... macports)\n```\n\n----------------------------------------\n\nTITLE: Configuring oh-my-zsh Plugins (zsh)\nDESCRIPTION: This snippet demonstrates how to enable the Python plugin in oh-my-zsh by adding 'python' to the plugins array in your .zshrc configuration file. The plugins array allows customization of which oh-my-zsh plugins are active in each shell session. Only the specified plugins will be loaded, and the configuration must be set before oh-my-zsh is sourced. This snippet contains a single line and is required for enabling Python-related aliases and functions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/python/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... python)\n```\n\n----------------------------------------\n\nTITLE: Enabling Autojump Plugin in Oh My Zsh Configuration\nDESCRIPTION: Configuration snippet showing how to enable the autojump plugin in the Oh My Zsh plugins array within the .zshrc file. The autojump tool must be installed separately before enabling this plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/autojump/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... autojump)\n```\n\n----------------------------------------\n\nTITLE: Enabling the per-directory-history Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This code snippet demonstrates how to enable the 'per-directory-history' plugin within an Oh My Zsh configuration. To activate it, add 'per-directory-history' to the 'plugins' array located in the user's '.zshrc' file. This ensures the plugin is loaded when Zsh starts.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/per-directory-history/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... per-directory-history)\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing NDJSON Objects via pp_ndjson Command (Console)\nDESCRIPTION: Illustrates how to pretty print multiple JSON objects provided as NDJSON (newline-delimited JSON) using 'pp_ndjson'. Each input line is treated as a separate JSON object and formatted accordingly. Reads piped NDJSON from stdin and outputs formatted results; backend dependency applies.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_5\n\nLANGUAGE: console\nCODE:\n```\n# echo two separate json objects and pretty print both\\n$ echo '{\"a\": \"b\"}\\\\n{\"c\": [1,2,3]}' | pp_ndjson\\n{\\n    \"a\": \"b\"\\n}\\n{\\n    \"c\": [\\n        1,\\n        2,\\n        3\\n    ]\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom .env Filename in Zsh\nDESCRIPTION: This snippet demonstrates how to set a custom filename for the .env file using the ZSH_DOTENV_FILE variable in the zshrc file. In this example, it's set to '.dotenv'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n# in ~/.zshrc, before Oh My Zsh is sourced:\nZSH_DOTENV_FILE=.dotenv\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Plugin in zsh\nDESCRIPTION: This snippet shows how to add the Gradle plugin to the zsh configuration. By adding \"gradle\" to the plugins array, users integrate Gradle functionality such as aliases and command completions into their shell environment. The plugins array is modified in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gradle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gradle)\n```\n\n----------------------------------------\n\nTITLE: Binding Ctrl+R to n-history Widget in Zsh\nDESCRIPTION: This configuration snippet demonstrates how to bind the `Ctrl+R` key combination to the `n-history` incremental search widget in Zsh. It requires autoloading the widget function, registering it with the Zsh Line Editor (zle), and then creating the keybinding.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nautoload znt-history-widget\nzle -N znt-history-widget\nbindkey \"^R\" znt-history-widget\n```\n\n----------------------------------------\n\nTITLE: Using macOS keychain with ssh-agent plugin\nDESCRIPTION: Configure the ssh-agent plugin to use the macOS keychain when loading SSH identities, enabling password storage in the system keychain.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_11\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent ssh-add-args --apple-load-keychain\n```\n\n----------------------------------------\n\nTITLE: Defining Additional Lazy-Load Trigger Commands for NVM - Zsh\nDESCRIPTION: This zsh snippet demonstrates how to specify extra commands that will also trigger lazy loading of the nvm plugin. By appending commands (such as eslint, prettier, typescript) to the lazy-cmd option with zstyle, you can customize which commands cause nvm to initialize. It is necessary for the zstyle options to be placed before sourcing Oh My Zsh in your .zshrc. The settings assume that lazy loading is already enabled.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:nvm' lazy-cmd eslint prettier typescript ...\n```\n\n----------------------------------------\n\nTITLE: Installing Sudo Plugin in Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to enable the sudo plugin in Oh My Zsh by adding it to the plugins array in zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sudo)\n```\n\n----------------------------------------\n\nTITLE: Implementing SVN Prompt Function for Agnoster Theme\nDESCRIPTION: This function displays SVN repository information in the agnoster theme prompt. It shows the revision number, branch name, and indicates if there are uncommitted changes using different colors.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nprompt_svn() {\n    local rev branch\n    if in_svn; then\n        rev=$(svn_get_rev_nr)\n        branch=$(svn_get_branch_name)\n        if [[ $(svn_dirty_choose_pwd 1 0) -eq 1 ]]; then\n            prompt_segment yellow black\n            echo -n \"$rev@$branch\"\n            echo -n \"±\"\n        else\n            prompt_segment green black\n            echo -n \"$rev@$branch\"\n        fi\n    fi\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub CLI Plugin in Zsh\nDESCRIPTION: This snippet illustrates how to activate the GitHub CLI plugin within a Zsh environment by updating the plugins array in the zshrc file. There are no additional dependencies, and the configuration does not introduce new aliases. The key purpose is to enable command completion for GitHub CLI commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gh/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gh)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Laravel Plugin in Oh My Zsh (Shell)\nDESCRIPTION: This snippet demonstrates how to enable the Laravel plugin in an oh-my-zsh environment by adding 'laravel' to the plugins array in your .zshrc configuration file. There are no external code dependencies but requires oh-my-zsh to be installed and sourced in the shell startup. You can include additional plugins by separating their names with spaces inside the parentheses. After updating, reload your shell or source your .zshrc to activate the plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/laravel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... laravel)\n```\n\n----------------------------------------\n\nTITLE: Setting Python Plugin Virtual Environment Names and Sourcing oh-my-zsh (sh)\nDESCRIPTION: This snippet shows how to configure preferred virtual environment names and load oh-my-zsh in your .zshrc file. It sets the 'PYTHON_VENV_NAME' and 'PYTHON_VENV_NAMES' shell variables, customizing how the plugin creates and detects virtual environments for activation. The configuration must be done before sourcing oh-my-zsh to ensure the variables are used correctly by the plugin's utilities. Inputs are the preferred virtual environment names, and output is an active oh-my-zsh shell with these Python plugin settings.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/python/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nPYTHON_VENV_NAME=\".venv\"\nPYTHON_VENV_NAMES=($PYTHON_VENV_NAME venv)\n...\nplugins=(... python)\nsource \"$ZSH/oh-my-zsh.sh\"\n```\n\n----------------------------------------\n\nTITLE: URL Decoding JSON String via urldecode_json Command (Console)\nDESCRIPTION: Shows how to decode a percent-encoded JSON string to its original format using 'urldecode_json'. Useful for processing web-passed JSON data back into readable JSON; it expects input from stdin and relies on a supported backend.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: console\nCODE:\n```\n# url encoded string to decode\\n$ echo '%7B%22b%22:2,%20%22a%22:1%7D' | urldecode_json\\n{\"b\":2, \"a\":1}\n```\n\n----------------------------------------\n\nTITLE: Adding vi-mode to Oh My Zsh Plugins Array\nDESCRIPTION: Shows how to enable the vi-mode plugin by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... vi-mode)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Jira Plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to enable the Jira plugin by adding its name (`jira`) to the `plugins` array within the Oh My Zsh configuration file (`.zshrc`). This makes the `jira` command available in the shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jira)\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Tab Completion for Zsh-z Alias - Shell\nDESCRIPTION: When setopt COMPLETE_ALIASES disables tab completion for command aliases, this compdef line reassigns completion to Zsh-z. It should be placed directly under the setopt command in .zshrc and uses variable expansion to determine the Zsh-z alias.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\ncompdef _zshz ${ZSHZ_CMD:-${_Z_CMD:-z}}\n```\n\n----------------------------------------\n\nTITLE: Using Z Command for Directory Navigation in Bash\nDESCRIPTION: Example demonstrating how to use the z command to quickly navigate to a previously visited directory using a partial match.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/usr/bin$ z plug  # Even 'z p' might suffice\n~/.oh-my-zsh/plugins$\n```\n\n----------------------------------------\n\nTITLE: Configuring Random Theme Candidates (Shell)\nDESCRIPTION: Configuration to specify a list of favorite themes for Oh My Zsh to randomly select from.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nZSH_THEME_RANDOM_CANDIDATES=(\n  \"robbyrussell\"\n  \"agnoster\"\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling .nvmrc Autoload and Silent Output for NVM Plugin - Zsh\nDESCRIPTION: These zsh snippets enable automatic loading of a Node.js version as specified by a .nvmrc file in the current directory using the nvm plugin. The autoload option activates the feature, and the silent-autoload hides output produced by nvm during autoload (but does not suppress other nvm output). Both settings are enabled via zstyle commands that should be placed before Oh My Zsh is sourced. Dependencies include a valid nvm installation and the nvm plugin enabled in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nvm/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:nvm' autoload yes\nzstyle ':omz:plugins:nvm' silent-autoload yes # optionally remove the output generated by NVM when autoloading\n```\n\n----------------------------------------\n\nTITLE: Migrating autojump Database to Zsh-z Compatible Format - Awk\nDESCRIPTION: This AWK command transforms an autojump.txt database file to the format expected by Zsh-z, producing an output suitable for use as ~/.z. It extracts key fields, formats them with pipes as delimiters, and sets timestamps to the current date, requiring AWK and access to a valid autojump.txt file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_24\n\nLANGUAGE: awk\nCODE:\n```\nawk -F \"\\t\" '{printf(\"%s|%0.f|%s\\n\", $2, $1, '\"$(date +%s)\"')}' < /path/to/autojump.txt > ~/.z\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Paths for Allowed and Disallowed Lists\nDESCRIPTION: This example shows how to set custom file paths for the allowed and disallowed lists using ZSH_DOTENV_ALLOWED_LIST and ZSH_DOTENV_DISALLOWED_LIST variables in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\n# in ~/.zshrc, before Oh My Zsh is sourced:\nZSH_DOTENV_ALLOWED_LIST=/path/to/dotenv/allowed/list\nZSH_DOTENV_DISALLOWED_LIST=/path/to/dotenv/disallowed/list\n```\n\n----------------------------------------\n\nTITLE: Enabling Oh My Zsh npm Plugin in Zsh\nDESCRIPTION: This snippet shows how to enable the npm plugin by adding 'npm' to the 'plugins' array within the user's .zshrc configuration file. This activation makes the plugin's aliases and completion features available in the Zsh shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/npm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... npm)\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Plugin in ZSH\nDESCRIPTION: Configuration snippet showing how to enable the React Native plugin in Oh My Zsh by adding it to the plugins array in zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/react-native/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... react-native)\n```\n\n----------------------------------------\n\nTITLE: Decoding Base64 Data with decode64/d64 (console)\nDESCRIPTION: These console commands demonstrate decoding a base64 string using the decode64 function and its alias d64. The commands support both direct parameter input and data piped into the function, outputting the original decoded text. Both aliases depend on the encode64 plugin being active in the Zsh shell and expect the base64 string as input, returning the decoded text on STDOUT.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ decode64 b2gtbXktenNo\noh-my-zsh%\n$ d64 b2gtbXktenNo\noh-my-zsh%\n```\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"b2gtbXktenNoCg==\" | decode64\noh-my-zsh\n$ echo \"b2gtbXktenNoCg==\" | d64\noh-my-zsh\n```\n\n----------------------------------------\n\nTITLE: Configuring jsontools Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: Shows how to enable the 'jsontools' plugin by adding it to the plugins array in a .zshrc configuration file, making its command-line JSON functions available in your Zsh environment. No additional parameters are required, but you must ensure one supported backend ('node', 'python3', or 'ruby') is in your PATH.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jsontools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jsontools)\n```\n\n----------------------------------------\n\nTITLE: Disabling fzf Key Bindings via DISABLE_FZF_KEY_BINDINGS (Zsh)\nDESCRIPTION: Shows how to prevent the `fzf` plugin from setting up its default key bindings (CTRL-T, CTRL-R, ALT-C) by setting the `DISABLE_FZF_KEY_BINDINGS` environment variable to \"true\". Place this command in your `.zshrc` file before sourcing Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nDISABLE_FZF_KEY_BINDINGS=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GNU Coreutils Plugin\nDESCRIPTION: This snippet shows how to enable the gnu-utils plugin in oh-my-zsh by adding it to the plugins array in the ~/.zshrc file. This setup alters command paths to prioritize GNU coreutils over the default BSD versions in environments like macOS.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gnu-utils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gnu-utils)\n```\n\n----------------------------------------\n\nTITLE: Adding virtualenvwrapper Plugin to Oh My Zsh\nDESCRIPTION: Shows how to enable the virtualenvwrapper plugin by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... virtualenvwrapper)\n```\n\n----------------------------------------\n\nTITLE: Configuring Ignored Random Themes (Shell)\nDESCRIPTION: Configuration to specify a list of themes to be ignored when Oh My Zsh is set to use random themes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nZSH_THEME_RANDOM_IGNORED=(pygmalion tjkirch_mod)\n```\n\n----------------------------------------\n\nTITLE: Installing safe-paste Plugin in Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the safe-paste plugin by adding it to the plugins array in the zshrc configuration file. This allows users to safely paste and review code before execution.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/safe-paste/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... safe-paste)\n```\n\n----------------------------------------\n\nTITLE: Enabling the 'man' Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This configuration snippet demonstrates how to enable the 'man' plugin within an Oh My Zsh setup. By adding `man` to the `plugins` array in the `~/.zshrc` file, the user activates the plugin's functionality. This plugin provides a shortcut (<kbd>Esc</kbd> + man) to prepend 'man ' before the previous command in the shell history, making it easy to look up the manual page for that command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/man/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... man)\n```\n\n----------------------------------------\n\nTITLE: Creating a Widget to Toggle Path Shrinking with Keyboard Shortcut\nDESCRIPTION: Definition of a Zsh widget that toggles path shrinking and binds it to a keyboard shortcut (ALT+SHIFT+S).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\n# Widget definition\nshrink-path-toggle() {\n  zstyle -t ':prompt:shrink_path' expand \\\n    && zstyle -d ':prompt:shrink_path' expand \\\n    || zstyle ':prompt:shrink_path' expand true\n  zle reset-prompt\n}\nzle -N shrink-path-toggle\n# Key binding to ALT+SHIFT+S\nbindkey \"^[S\" shrink-path-toggle\n```\n\n----------------------------------------\n\nTITLE: Example of command-not-found plugin in action on Ubuntu\nDESCRIPTION: This example demonstrates how the plugin works on Ubuntu when trying to run a command that isn't installed. It suggests packages that contain the command and provides installation instructions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/command-not-found/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ mutt\nThe program 'mutt' can be found in the following packages:\n * mutt\n * mutt-kz\n * mutt-patched\nTry: sudo apt install <selected package>\n```\n\n----------------------------------------\n\nTITLE: Executing Gradle Commands\nDESCRIPTION: These examples demonstrate how to execute common Gradle tasks using the zsh plugin. The wrapper function `gradle-or-gradlew` checks for the presence of a gradlew file, deciding whether to use gradle or gradlew, allowing for seamless execution of tasks such as \"test\" and \"build\".\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gradle/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ngradle test\ngradle build\n```\n\n----------------------------------------\n\nTITLE: Using Jump Plugin Keybinding (After Expansion) (zsh)\nDESCRIPTION: Displays the result of pressing `CTRL+G` after typing a mark name (`mymark`) in a command, as shown in the previous example. The 'jump' plugin replaces the mark name with the actual directory path it points to (`/path/to/my/mark`), demonstrating the path expansion feature.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jump/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n$ cp /tmp/file /path/to/my/mark\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Plugin in Zsh\nDESCRIPTION: This code snippet demonstrates how to configure the Poetry plugin within a Zshrc file. The Poetry plugin simplifies management of Python dependencies and environments, automatically updating completions as Poetry versions change. To activate the plugin, add 'poetry' to the plugins array in the Zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/poetry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... poetry)\n```\n\n----------------------------------------\n\nTITLE: Setting VI_MODE_RESET_PROMPT_ON_MODE_CHANGE Option\nDESCRIPTION: Controls whether the prompt is redrawn when switching to a different input mode. When set to true, the prompt will be redrawn when changing modes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nVI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true\n```\n\n----------------------------------------\n\nTITLE: Enabling the command-not-found plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to enable the command-not-found plugin by adding it to the plugins array in your zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/command-not-found/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... command-not-found)\n```\n\n----------------------------------------\n\nTITLE: Configuring Pip Plugin for Oh My Zsh - Zsh\nDESCRIPTION: This snippet demonstrates adding the pip plugin to the plugins array in a .zshrc file, enabling pip command completions and aliases in the shell. The user should add 'pip' along with other desired plugins within parentheses. After saving the .zshrc file and reloading the shell, the pip plugin functionality becomes available. Prerequisite: Oh My Zsh installed with plugin infrastructure enabled.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pip/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pip)\n```\n\n----------------------------------------\n\nTITLE: Configuring Poetry Environment Plugin in zsh\nDESCRIPTION: This snippet demonstrates how to add the 'poetry-env' plugin to the zshrc file to enable automatic switching of poetry environments. Ensure 'poetry-env' is included in the plugins array of your zshrc configuration. The script relies on the presence of a pyproject.toml file to detect a poetry environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/poetry-env/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... poetry-env)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenTofu Prompt Functions in Zsh\nDESCRIPTION: This configuration snippet shows how to integrate OpenTofu prompt functions into the Zsh theme. It uses `tofu_prompt_info` to display the current workspace and `tofu_version_prompt_info` for the current version, with customizable prefix and suffix strings.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/opentofu/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nPROMPT='$(tofu_prompt_info)'\nRPROMPT='$(tofu_version_prompt_info)'\n```\n\nLANGUAGE: shell\nCODE:\n```\n# for tofu_prompt_info\nZSH_THEME_TOFU_PROMPT_PREFIX=\"%{$fg[white]%}\"\nZSH_THEME_TOFU_PROMPT_SUFFIX=\"%{$reset_color%}\"\n# for tofu_version_prompt_info\nZSH_THEME_TOFU_VERSION_PROMPT_PREFIX=\"%{$fg[white]%}\"\nZSH_THEME_TOFU_VERSION_PROMPT_SUFFIX=\"%{$reset_color%}\"\n```\n\n----------------------------------------\n\nTITLE: Loading the AWS plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to add the aws plugin to the Oh My Zsh configuration by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aws/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... aws)\n```\n\n----------------------------------------\n\nTITLE: Yay Package Manager Commands\nDESCRIPTION: A collection of shell aliases for the Yay package manager, providing shortcuts for common package management operations and system maintenance tasks.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nyaconf=\"yay -Pg\"\nyaclean=\"yay -Sc\"\nyaclr=\"yay -Scc\"\nyain=\"yay -S\"\nyains=\"yay -U\"\nyainsd=\"yay -S --asdeps\"\nyaloc=\"yay -Qi\"\nyalocs=\"yay -Qs\"\nyalst=\"yay -Qe\"\nyamir=\"yay -Syy\"\nyaorph=\"yay -Qtd\"\nyare=\"yay -R\"\nyarem=\"yay -Rns\"\nyarep=\"yay -Si\"\nyareps=\"yay -Ss\"\nyaupd=\"yay -Sy\"\nyaupg=\"yay -Syu\"\nyasu=\"yay -Syu --no-confirm\"\nupgrade=\"yay -Syu\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Plugin for Oh My Zsh\nDESCRIPTION: This snippet explains how to enable the node plugin in Oh My Zsh by adding 'node' to the plugins array in the zshrc file. The plugin facilitates quick access to specific sections in Node.js documentation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... node)\n```\n\n----------------------------------------\n\nTITLE: Enabling dotenv Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the dotenv plugin in the Oh My Zsh configuration file (zshrc). Add 'dotenv' to the plugins array to activate the plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(... dotenv)\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Timer Plugin in Oh My Zsh\nDESCRIPTION: Demonstrates how to use the timer plugin in Oh My Zsh. The example shows execution times for sleep commands and demonstrates how to customize the timer format and precision. It also shows the timer working with a more complex command that reads from /dev/urandom.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/timer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nme@here:~$ sleep 1                                         /1.0s\nme@here:~$ sleep 73                                     /1m13.0s\nme@here:~$ TIMER_FORMAT='[%d]'; TIMER_PRECISION=2        [0.00s]\nme@here:~$ head -c50 < /dev/urandom | hexdump\n0000000 b2 16 20 f0 29 1f 61 2d 8a 29 20 8c 8c 39 5a ab\n0000010 21 47 0e f9 ee a4 76 46 71 9e 4f 6b a4 c4 51 cb\n0000020 f9 1f 7e b9 6f 2c ae dd cf 40 6d 64 a8 fb d3 db\n0000030 09 37\n0000032                                                  [0.02s]\n```\n\n----------------------------------------\n\nTITLE: Command Examples without Sudo\nDESCRIPTION: Example commands showing typical usage scenarios before applying sudo prefix.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ apt-get install build-essential\n```\n\nLANGUAGE: console\nCODE:\n```\n$ vim /etc/hosts\n```\n\nLANGUAGE: console\nCODE:\n```\n$ rm some-system-file.txt\n-su: some-system-file.txt: Permission denied\n$\n```\n\n----------------------------------------\n\nTITLE: Powerline10k compatibility settings for ssh-agent plugin\nDESCRIPTION: Configure the ssh-agent plugin to work with Powerline10k's instant prompt feature by enabling quiet and lazy modes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_10\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent quiet yes\nzstyle :omz:plugins:ssh-agent lazy yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperlink Creation ('hyperlink') in Zsh\nDESCRIPTION: Sets the 'hyperlink' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `--hyperlink` flag to `eza` commands, embedding clickable hyperlinks in the output using terminal escape codes. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_10\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'hyperlink' yes|no\n```\n\n----------------------------------------\n\nTITLE: Configuring Time Style ('time-style') in Zsh\nDESCRIPTION: Sets the 'time-style' option for the eza plugin using `zstyle`, controlling the format of timestamps. The value `$TIME_STYLE` should be replaced with a valid time style option accepted by `eza` (e.g., 'iso', 'long-iso', 'full-iso', 'relative'). Consult `man eza` for valid options. If not set, the `eza` default is used. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_9\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'time-style' $TIME_STYLE\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Specific Jira URL via Shell\nDESCRIPTION: Demonstrates how to set a project-specific JIRA instance URL using shell commands. By navigating into the project directory (`cd`) and appending the URL to a `.jira-url` file, this configuration takes precedence over global settings (like `$JIRA_URL` or `~/.jira-url`) for commands run within that directory.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd to/my/project\necho \"https://jira.atlassian.com\" >> .jira-url\n```\n\n----------------------------------------\n\nTITLE: Customizing Jira Issue Extraction from Git Branch Name in Zsh\nDESCRIPTION: Provides an example Zsh function definition for `jira_branch`. This function overrides the plugin's default behavior for extracting a Jira issue key from the current Git branch name. It's intended for users with custom branch naming conventions (e.g., 'type/KEY-123/description') and should be defined in `.zshrc` after sourcing Oh My Zsh. The function uses `git rev-parse` to get the branch name and parameter expansion to isolate the key.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jira/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n# Determine branch name from naming convention 'type/KEY-123/description'.\nfunction jira_branch() {\n  # Get name of the branch\n  issue_arg=$(git rev-parse --abbrev-ref HEAD)\n  # Strip prefixes like feature/ or bugfix/\n  issue_arg=${issue_arg#*/}\n  # Strip suffixes like /some-branch-description\n  issue_arg=${issue_arg%%/*}\n  # Return the value\n  echo $issue_arg\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling fzf Auto-Completion via DISABLE_FZF_AUTO_COMPLETION (Zsh)\nDESCRIPTION: Provides the command to disable the loading of `fzf`'s fuzzy auto-completion feature by setting the `DISABLE_FZF_AUTO_COMPLETION` environment variable to \"true\". This configuration must be set in `.zshrc` before Oh My Zsh is sourced.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fzf/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nDISABLE_FZF_AUTO_COMPLETION=\"true\"\n```\n\n----------------------------------------\n\nTITLE: Limit Oh My Zsh Update Verbosity\nDESCRIPTION: Demonstrates how to adjust the verbosity of update prompts in Oh My Zsh using zstyle settings, allowing for default prompts, minimal updates, or silent mode for only errors.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nzstyle ':omz:update' verbose default\nzstyle ':omz:update' verbose minimal\nzstyle ':omz:update' verbose silent\n```\n\n----------------------------------------\n\nTITLE: Manual Inspection of Oh My Zsh Install Script (Shell)\nDESCRIPTION: Commands to download and manually inspect the Oh My Zsh installation script before running it.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nwget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh\nsh install.sh\n```\n\n----------------------------------------\n\nTITLE: Using the 'pj' Command with Path Precedence (Zsh)\nDESCRIPTION: This Zsh command-line example illustrates how the `pj` command works when multiple directories share the same name across different paths listed in `$PROJECT_PATHS`. It demonstrates that the command prioritizes the directory found in the path listed earlier in the `$PROJECT_PATHS` array. The example assumes `$PROJECT_PATHS` is set and shows the resulting `cd` action.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pj/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nPROJECT_PATHS=(~/code ~/work)\n$ ls ~/code    # ~/code/blog ~/code/react\n$ ls ~/work    # ~/work/blog ~/work/project\n$ pj blog      # <-- will cd to ~/code/blog\n```\n\n----------------------------------------\n\nTITLE: Setting Cursor Styles for Different Vi Modes\nDESCRIPTION: Defines the cursor style to use in each active vim mode with customizable numeric values for different cursor appearances.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\n# defaults\nVI_MODE_CURSOR_NORMAL=2\nVI_MODE_CURSOR_VISUAL=6\nVI_MODE_CURSOR_INSERT=6\nVI_MODE_CURSOR_OPPEND=0\n```\n\n----------------------------------------\n\nTITLE: Creating a Dynamic Proxy Configuration Script (Method 2)\nDESCRIPTION: Creating an executable configuration script at $HOME/.config/proxy to dynamically determine proxy settings based on the operating system. The script returns the proxy URL and no-proxy domains.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n#!/bin/bash\n\n# HTTP Proxy\nif [[ \"$(uname)\" = Darwin ]]; then\n  echo \"http://127.0.0.1:6152\" # Surge Mac\nelse\n  echo \"http://127.0.0.1:8123\" # polipo\nfi\n\n# No Proxy\necho \"localhost,127.0.0.1\"\n```\n\n----------------------------------------\n\nTITLE: Fish-style Working Directory in Command Prompt\nDESCRIPTION: Configuration to add a fish-style working directory in your command prompt by modifying your theme or zshrc.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nsetopt prompt_subst\nPS1='%n@%m $(shrink_path -f)>'\n```\n\n----------------------------------------\n\nTITLE: Configuring Key Bindings for npm Toggle in Zsh\nDESCRIPTION: These commands demonstrate how to set custom key bindings for the `npm_toggle_install_uninstall` function provided by the npm plugin. It uses the `bindkey` command for different Zsh keymaps (emacs, vi command mode, vi insert mode). The user needs to replace '<seq>' with their desired key sequence.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/npm/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nbindkey -M emacs '<seq>' npm_toggle_install_uninstall\nbindkey -M vicmd '<seq>' npm_toggle_install_uninstall\nbindkey -M viins '<seq>' npm_toggle_install_uninstall\n```\n\n----------------------------------------\n\nTITLE: Configuring Icon Display ('icons') in Zsh\nDESCRIPTION: Sets the 'icons' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `--icons` flag to `eza` commands, displaying icons next to file and folder names. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'icons' yes|no\n```\n\n----------------------------------------\n\nTITLE: Activating zsh-history-substring-search in Oh-my-zsh Config (Zsh)\nDESCRIPTION: Modifies the 'plugins' array within the ~/.zshrc file to include 'zsh-history-substring-search', thereby enabling the plugin within an Oh-my-zsh environment. Replace '[plugins...]' with any existing plugins already listed in the array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=( [plugins...] zsh-history-substring-search)\n```\n\n----------------------------------------\n\nTITLE: Sample .env File without Export Statements\nDESCRIPTION: This example shows an alternative format for a .env file without using export statements. It includes the same environment variables as the previous example.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dotenv/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nAWS_S3_TOKEN=d84a83539134f28f412c652b09f9f98eff96c9a\nSECRET_KEY=7c6c72d959416d5aa368a409362ec6e2ac90d7f\nMONGO_URI=mongodb://127.0.0.1:27017\nPORT=3001\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Git Prompt Structure - Text Representation\nDESCRIPTION: This text snippet illustrates the default structure of the shell prompt after enabling the git-prompt plugin. The format is '(branch and tracking info|local status)', where placeholders are replaced at runtime by relevant branch names, tracking status, and working directory state. Inputs (such as git actions) dynamically update these fields. No external dependencies are required for interpreting this output, though understanding the symbols requires reading the related documentation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-prompt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n(<branch><branch tracking>|<local status>)\n```\n\n----------------------------------------\n\nTITLE: Displaying Node Version in Zsh Prompt using nodenv_prompt_info (Zsh)\nDESCRIPTION: Demonstrates how to use the `nodenv_prompt_info` function provided by the nodenv plugin within the Zsh prompt configuration. By assigning its command substitution `$(nodenv_prompt_info)` to `RPROMPT` (right prompt), the currently active Node.js version (managed by nodenv or global) will be displayed. Requires the nodenv plugin to be enabled.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nodenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nRPROMPT='$(nodenv_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Configuring Perms Plugin in Zsh\nDESCRIPTION: The snippet shows how to add the perms plugin to the plugins array in the zshrc configuration file, which enables commands for managing file permissions through this plugin. No external dependencies are needed other than having Zsh installed. This setup allows the use of predefined functions for setting permissions on files and directories.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/perms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... perms)\n```\n\n----------------------------------------\n\nTITLE: Enabling iTerm2 Shell Integration via zstyle Configuration - Shell\nDESCRIPTION: This snippet configures the iTerm2 plugin to enable its shell integration features by adding a zstyle command before sourcing Oh My Zsh in your zshrc. Setting 'zstyle :omz:plugins:iterm2 shell-integration yes' ensures that shell integration is activated, which provides advanced session features in iTerm2. Place this line before the line that sources oh-my-zsh to ensure proper effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/iterm2/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nzstyle :omz:plugins:iterm2 shell-integration yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Mix Plugin in Zsh\nDESCRIPTION: This snippet demonstrates how to enable the Mix plugin in the Oh My Zsh configuration by adding 'mix' to the plugins array in the .zshrc file. No additional dependencies are required aside from having Oh My Zsh installed. The inputs involve editing the .zshrc file to include the plugin name. This setup allows for completions associated with the Mix tool.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mix/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... mix)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in oh-my-zsh\nDESCRIPTION: This snippet demonstrates how to add the 'gcloud' plugin to your oh-my-zsh configuration to support Google Cloud SDK CLI completion. Ensure that the Google Cloud SDK is installed. If installed in a non-standard location, set the 'CLOUDSDK_HOME' variable. For environments without 'python2', set the 'CLOUDSDK_PYTHON' variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gcloud/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gcloud)\n```\n\n----------------------------------------\n\nTITLE: Overriding Package Manager Preferences for Debian Plugin - Shell Script\nDESCRIPTION: This snippet illustrates how to set the $apt_pref and $apt_upgr shell variables to override the default behavior of the Debian plugin in Oh My Zsh before it is sourced. By assigning alternative commands (e.g., 'apt' for package manager and 'full-upgrade' for the upgrade command), users can customize which tool the plugin's aliases and scripts will use. Only supported within the context of Oh My Zsh and a POSIX-compatible shell; variables must be defined before sourcing the framework.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/debian/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\napt_pref='apt'\napt_upgr='full-upgrade'\n```\n\n----------------------------------------\n\nTITLE: Customizing Color Settings for Less Pager\nDESCRIPTION: Shows how to customize the color settings by modifying the less_termcap array after Oh My Zsh is sourced\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colored-man-pages/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nless_termcap[md]=\"${fg_bold[blue]}\" # this tells less to print bold text in bold blue\n```\n\n----------------------------------------\n\nTITLE: Default kube-ps1 Prompt Structure\nDESCRIPTION: Illustrates the default output format for the `kube-ps1` prompt segment, including the symbol, context name, and namespace name, enclosed in parentheses and separated by configured delimiters. `<symbol>` is the configured icon (defaulting to ⎈).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n(<symbol>|<context>:<namespace>)\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom VS Code Executable in Oh My Zsh\nDESCRIPTION: Demonstrates how to manually specify which VS Code flavor to use by setting the VSCODE environment variable in .zshrc. This allows users to choose between code, code-insiders, or codium.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vscode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_THEME=...\n\n# Choose between one [code, code-insiders or codium]\n# The following line will make the plugin to open VS Code Insiders\n# Invalid entries will be ignored, no aliases will be added\nVSCODE=code-insiders\n\nplugins=(... vscode)\n\nsource $ZSH/oh-my-zsh.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Terraform Workspace Prompt\nDESCRIPTION: Configuration for displaying Terraform workspace information in shell prompt using prompt functions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terraform/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nRPROMPT='$(tf_prompt_info)'\nRPROMPT='$(tf_version_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Example Git Plugin Conventional Commit Format\nDESCRIPTION: Example of a properly formatted commit message for adding functionality to the git plugin. Shows the proper scope naming convention.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(git): add alias for `git commit`\n```\n\n----------------------------------------\n\nTITLE: Implementing Battery Percentage in Oh My Zsh Theme\nDESCRIPTION: This code demonstrates how to add the battery_pct_prompt function to a custom Oh My Zsh theme. It allows for displaying battery percentage information in the right prompt (RPROMPT).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nRPROMPT='$(battery_pct_prompt) ...'\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Search Engines to Web-Search Plugin\nDESCRIPTION: Shows how to customize the web-search plugin by adding additional search engines using the ZSH_WEB_SEARCH_ENGINES variable. This must be set before Oh My Zsh is sourced.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_WEB_SEARCH_ENGINES=(\n    <context> <URL>\n    <context> <URL>\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Common Aliases Plugin in Oh My Zsh\nDESCRIPTION: This code snippet shows how to enable the Common Aliases plugin in the Oh My Zsh configuration file (zshrc). It adds 'common-aliases' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/common-aliases/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... common-aliases)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Jump Plugin in Oh My Zsh (zsh)\nDESCRIPTION: Demonstrates how to enable the 'jump' plugin by adding its name to the `plugins` array within the `.zshrc` configuration file. This activates the plugin's functionality, including commands like `jump`, `mark`, `unmark`, `marks`, and the CTRL+G keybinding.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jump/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jump)\n```\n\n----------------------------------------\n\nTITLE: Enabling Golang Plugin in Oh My Zsh\nDESCRIPTION: This snippet demonstrates how to activate the Oh My Zsh `golang` plugin by adding its name to the `plugins` array within the user's `.zshrc` configuration file. This enables Go command completions and aliases defined by the plugin. Requires Oh My Zsh to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/golang/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... golang)\n```\n\n----------------------------------------\n\nTITLE: Generating Passwords with ZSH Plugin\nDESCRIPTION: This code snippet allows users to add the genpass plugin to their ZSH configuration to use the password generators interactively. By including 'genpass' in the plugins array within zshrc, these generators become accessible from the command line.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nplugins=(... genpass)\n```\n\n----------------------------------------\n\nTITLE: Setting Oh My Zsh Theme to Agnoster (Shell)\nDESCRIPTION: Example of how to set the Agnoster theme in Oh My Zsh by modifying the ZSH_THEME variable in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nZSH_THEME=\"agnoster\" # (this is one of the fancy ones)\n# see https://github.com/ohmyzsh/ohmyzsh/wiki/Themes#agnoster\n```\n\n----------------------------------------\n\nTITLE: Using isodate Aliases for Date Formatting - Zsh Shell\nDESCRIPTION: Lists and documents the primary date formatting aliases provided by the isodate plugin. These aliases map common date commands to convenient shell shortcuts conforming to ISO 8601 standards or locale/unix timestamp formats. Each alias takes no arguments and prints the date in a specific format directly to standard output.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/isodate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nisodate       # date +%Y-%m-%dT%H:%M:%S%z\n```\n\nLANGUAGE: zsh\nCODE:\n```\nisodate_utc   # date -u +%Y-%m-%dT%H:%M:%SZ\n```\n\nLANGUAGE: zsh\nCODE:\n```\nisodate_basic # date -u +%Y%m%dT%H%M%SZ\n```\n\nLANGUAGE: zsh\nCODE:\n```\nunixstamp     # date +%s\n```\n\nLANGUAGE: zsh\nCODE:\n```\ndate_locale   # date +\"%c\"\n```\n\n----------------------------------------\n\nTITLE: Configuring kube-ps1 for Zsh (Manual Source)\nDESCRIPTION: Sources the `kube-ps1.sh` script and prepends the `kube_ps1` function output to the Zsh `PROMPT` variable. This method requires manually cloning the repository and specifying the correct path to `kube-ps1.sh` in the `.zshrc` file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nsource /path/to/kube-ps1.sh\nPROMPT='$(kube_ps1)'$PROMPT\n```\n\n----------------------------------------\n\nTITLE: Activating Zsh-z in Oh My Zsh\nDESCRIPTION: Configuration example for activating the built-in Zsh-z plugin in Oh My Zsh by adding it to the plugins array in .zshrc.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nplugins=( git z )\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Proxy Config Location (Method 3)\nDESCRIPTION: Setting a custom location for the proxy configuration script by defining the SHELLPROXY_CONFIG environment variable. This allows keeping the configuration in a different location than the default.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nSHELLPROXY_CONFIG=\"$HOME/.dotfiles/proxy-config\"\n```\n\n----------------------------------------\n\nTITLE: Configuring knife_ssh Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet demonstrates how to include the 'knife_ssh' plugin within the plugins array in your .zshrc configuration file for Oh My Zsh. Enabling this plugin introduces the knife_ssh function and related completion utilities, streamlining SSH connections to Chef-managed servers. Prerequisites include having Oh My Zsh and the 'knife' CLI installed. The plugins array should be edited to append 'knife_ssh' (and any other desired plugins).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/knife_ssh/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... knife_ssh)\n```\n\n----------------------------------------\n\nTITLE: Filtering Alias Expansion in Zsh\nDESCRIPTION: This example shows how to prevent specific aliases from being expanded by 'globalias'. By setting `GLOBALIAS_FILTER_VALUES=(l)` in `.zshrc`, the alias `l` will not be expanded when SPACE is pressed, while other aliases like `la` will still expand as usual. This requires defining the aliases `l='ls -lh'` and `la='ls --color=auto -lah'` beforehand.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\n# .zshrc\nalias l='ls -lh'\nalias la='ls --color=auto -lah'\nGLOBALIAS_FILTER_VALUES=(l)\n\n$ l<space>\n# does not expand\n$ la<space>\n# expands to:\n$ ls --color=auto -lah\n```\n\n----------------------------------------\n\nTITLE: Customizing Mercurial Prompt Theme Variables in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to redefine the appearance of Mercurial prompt elements by customizing plugin variables. Users can tweak color codes and symbols for the Mercurial prompt's prefix, suffix, dirty, and clean states. Requires Oh My Zsh's Mercurial plugin to be installed and sourced. Place these settings after sourcing Oh My Zsh in your .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mercurial/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_THEME_HG_PROMPT_PREFIX=\"%{$fg_bold[magenta]%}hg:(%{$fg[red]%}\"\nZSH_THEME_HG_PROMPT_SUFFIX=\"%{$reset_color%}\"\nZSH_THEME_HG_PROMPT_DIRTY=\"%{$fg[magenta]%}) %{$fg[yellow]%}✗%{$reset_color%}\"\nZSH_THEME_HG_PROMPT_CLEAN=\"%{$fg[magenta]%})\"\n```\n\n----------------------------------------\n\nTITLE: Customizing conda environment display in prompt\nDESCRIPTION: Example configuration for customizing how conda environment information appears in the prompt. This sets a green color for the environment name and places it in the right prompt (RPROMPT).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/conda-env/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nZSH_THEME_CONDA_PREFIX='conda:%F{green}'\nZSH_THEME_CONDA_SUFFIX='%f'\nRPROMPT='$(conda_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Scale Mode ('color-scale-mode') in Zsh\nDESCRIPTION: Sets the 'color-scale-mode' option for the eza plugin using `zstyle`. Choose between 'gradient' (default) for gradient coloring or 'fixed' for fixed coloring when using color scaling. This corresponds to the `--color-scale-mode` flag in `eza`. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'color-scale-mode' gradient|fixed\n```\n\n----------------------------------------\n\nTITLE: Customizing Prompt with Kubernetes Context via kubectx (Zsh)\nDESCRIPTION: This snippet illustrates how to integrate the kubectx_prompt_info function into your Zsh shell prompt configuration. It configures both right (RPS1) and left (PROMPT) sides of the prompt to call kubectx_prompt_info, which will display the currently active Kubernetes context. To use, insert these lines into your .zshrc; the function returns a string with the context name and works alongside other prompt content.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n# right prompt\nRPS1='$(kubectx_prompt_info)'\n# left prompt\nPROMPT=\"$PROMPT\"'$(kubectx_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Hostname-based Configuration File Loading\nDESCRIPTION: This text snippet illustrates the order in which configuration files are loaded based on the parts of the hostname. The system checks for configuration files in the $ZSH_CUSTOM/profiles directory corresponding to increasingly specific parts of the domain name, starting from the top-level domain to the full hostname.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/profiles/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n$ZSH_CUSTOM/profiles/com\n$ZSH_CUSTOM/profiles/domain.com\n$ZSH_CUSTOM/profiles/host.domain.com\n```\n\n----------------------------------------\n\nTITLE: Enabling the virtualenv plugin in Oh My Zsh configuration\nDESCRIPTION: This snippet shows how to add the virtualenv plugin to the plugins array in your .zshrc file to activate the plugin's functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... virtualenv)\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Plugin in Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Ruby plugin by adding it to the plugins array in the zshrc file. This allows access to all Ruby-related aliases defined by the plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ruby/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ruby)\n```\n\n----------------------------------------\n\nTITLE: Remapping Key Bindings Example\nDESCRIPTION: Example of how to remap vi-mode key bindings when using a low $KEYTIMEOUT value, specifically remapping 'vv' to 'V' for the edit-command-line function.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\nbindkey -M vicmd 'V' edit-command-line # this remaps `vv` to `V` (but overrides `visual-mode`)\n```\n\n----------------------------------------\n\nTITLE: Passing additional arguments to ssh-add command\nDESCRIPTION: Configure additional arguments to be passed to the ssh-add command when adding identities on startup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_9\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent ssh-add-args -K -c -a /run/user/1000/ssh-auth\n```\n\n----------------------------------------\n\nTITLE: Using Colored Command with Git Help\nDESCRIPTION: Demonstrates how to use the colored prefix to colorize other help pages\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colored-man-pages/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ncolored git help clone\n```\n\n----------------------------------------\n\nTITLE: Defining Project Paths for 'pj' Plugin (Zsh)\nDESCRIPTION: This Zsh snippet demonstrates how to define the `$PROJECT_PATHS` environment variable in your `.zshrc` file. This array variable lists the directories where the 'pj' plugin will search for project folders. Paths with spaces need to be quoted.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pj/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nPROJECT_PATHS=(~/src ~/work ~/\"dir with spaces\")\n```\n\n----------------------------------------\n\nTITLE: Adding procs Plugin to oh-my-zsh Configuration - Shell\nDESCRIPTION: This snippet demonstrates how to include the procs plugin in your oh-my-zsh configuration by adding it to the plugins array within your .zshrc file. This is required to enable completions for procs. The plugins array may contain additional plugins, so procs should be added alongside others. No additional dependencies are needed beyond a working oh-my-zsh installation and the procs utility.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/procs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... procs)\n```\n\n----------------------------------------\n\nTITLE: Adding Mode Indicators to Prompt Manually\nDESCRIPTION: Examples of how to add mode indicators to PROMPT or RPROMPT manually using the vi_mode_prompt_info function.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nsource $ZSH/oh-my-zsh.sh\n\nPROMPT=\"$PROMPT\\$(vi_mode_prompt_info)\"\nRPROMPT=\"\\$(vi_mode_prompt_info)$RPROMPT\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Mode Indicators\nDESCRIPTION: Example showing how to customize the appearance of mode indicators for normal and insert modes using Prompt Expansion sequences.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nMODE_INDICATOR=\"%F{white}+%f\"\nINSERT_MODE_INDICATOR=\"%F{yellow}+%f\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Color Scaling ('color-scale') in Zsh\nDESCRIPTION: Sets the 'color-scale' option for the eza plugin using `zstyle`, controlling field highlighting. Specify 'all', 'age', 'size', or a comma-separated list. This corresponds to the `--color-scale` flag in `eza`. The default is 'none'. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'color-scale' all|age|size\n```\n\n----------------------------------------\n\nTITLE: Configuring Pygments Style for Colorize\nDESCRIPTION: This snippet shows how to set a custom style for Pygments syntax highlighting using the ZSH_COLORIZE_STYLE environment variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_COLORIZE_STYLE=\"colorful\"\n```\n\n----------------------------------------\n\nTITLE: Adding Composer Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the Composer plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'composer' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/composer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... composer)\n```\n\n----------------------------------------\n\nTITLE: Enabling Oh My Zsh Debian Plugin - Zsh\nDESCRIPTION: This snippet demonstrates how to activate the Debian plugin within the Oh My Zsh framework by adding it to the plugins array inside the .zshrc configuration file. No additional dependencies besides Oh My Zsh are required; the snippet simply appends 'debian' to the array. This enables all related aliases and functions on the next shell session. It accepts any existing plugin entries and adds the debian plugin for extended functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/debian/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... debian)\n```\n\n----------------------------------------\n\nTITLE: Enabling Yarn Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the Yarn plugin to the plugins array in the zshrc file to enable it in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yarn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... yarn)\n```\n\n----------------------------------------\n\nTITLE: Provisioning Dependencies for oh-my-zsh Azure Plugin (bash)\nDESCRIPTION: This set of commands installs critical dependencies in an Ubuntu environment, including curl, jq, zsh, git, and vim, followed by the oh-my-zsh installer and the Azure CLI installation script. These ensure all required tools are available for using and developing the oh-my-zsh Azure plugin. The inputs are the APT package manager and remote installation scripts; outputs include installed utilities and a configured shell. Internet connectivity and permissions to install system packages are prerequisites.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napt install -y curl jq zsh git vim\nsh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\ncurl -sL https://aka.ms/InstallAzureCLIDeb | bash\n```\n\n----------------------------------------\n\nTITLE: Enabling Arch Linux Plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to enable the Arch Linux plugin in the Oh My Zsh configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... archlinux)\n```\n\n----------------------------------------\n\nTITLE: Encoding File Content to Base64 with encodefile64/ef64 (console)\nDESCRIPTION: These commands show encoding an input file's contents to base64 using encodefile64 (and its alias ef64), saving the result to a new file with a .txt extension. The function requires a filename as a parameter and will create a new file containing the base64-encoded contents. This operation is subject to the prerequisites of file existence and plugin configuration within Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ encodefile64 ohmyzsh.icn\nohmyzsh.icn's content encoded in base64 and saved as ohmyzsh.icn.txt\n$ ef64 \"oh-my-zsh\"\nohmyzsh.icn's content encoded in base64 and saved as ohmyzsh.icn.txt\n```\n\n----------------------------------------\n\nTITLE: Customizing Zsh Prompt to Include Mercurial Status (Zsh)\nDESCRIPTION: This example demonstrates how to modify the PROMPT variable in .zshrc to include Mercurial repository information using 'hg_prompt_info'. It assumes the use of the 'robbyrussell' theme and appends Mercurial details after the existing Git information. Requires Oh My Zsh, enabled git and mercurial plugins, and use of a compatible theme. Input: existing PROMPT variable, Output: extended prompt with Mercurial info.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mercurial/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nPROMPT='${ret_status}%{$fg_bold[green]%}%p %{$fg[cyan]%}%c %{$fg_bold[blue]%}$(git_prompt_info)$(hg_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}'\n```\n\n----------------------------------------\n\nTITLE: Defining LANDO_ZSH_WRAPPED_COMMANDS\nDESCRIPTION: This snippet defines the commands to be wrapped by Lando, listed as a string of commands separated by spaces. Users can modify this to include or exclude specific commands as required by their projects.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nLANDO_ZSH_WRAPPED_COMMANDS=\"mysql php composer test artisan\"\n```\n\n----------------------------------------\n\nTITLE: Commands for Enabling/Disabling kube-ps1\nDESCRIPTION: Lists and explains the `kubeon` and `kubeoff` commands used to control the visibility of the `kube-ps1` prompt segment within the shell. `kubeon` and `kubeoff` affect the current shell only, while the `-g` flag makes the change persistent across future shell sessions by modifying a configuration file (`~/.kube/kube-ps1`).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nkubeon     : turn on kube-ps1 status for this shell.  Takes precedence over\n             global setting for current session\nkubeon -g  : turn on kube-ps1 status globally\nkubeoff    : turn off kube-ps1 status for this shell. Takes precedence over\n             global setting for current session\nkubeoff -g : turn off kube-ps1 status globally\n```\n\n----------------------------------------\n\nTITLE: Setting Up Plugins in Oh My Zsh\nDESCRIPTION: This snippet shows how to add the git-commit plugin to the plugins array in your zshrc file. This is necessary to enable the use of git aliases for conventional commit messages when using Oh My Zsh. Make sure to edit the correct configuration file and adjust for any existing plugins in use.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-commit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... git-commit)\n```\n\n----------------------------------------\n\nTITLE: Adding a warp point to a specific directory with custom name\nDESCRIPTION: Command to add a warp point named 'bar' pointing to the '/foo/' directory.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_16\n\nLANGUAGE: zsh\nCODE:\n```\nwd addcd /foo/ bar\n```\n\n----------------------------------------\n\nTITLE: Configuring File Size Prefix ('size-prefix') in Zsh\nDESCRIPTION: Sets the 'size-prefix' option for the eza plugin using `zstyle`, controlling how file sizes are displayed. Options are 'binary' (Ki, Mi), 'none' (bytes), or 'si' (k, M - default). This corresponds to the `--size-prefix` flag in `eza`. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_8\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'size-prefix' (binary|none|si)\n```\n\n----------------------------------------\n\nTITLE: Configuring Header Display ('header') in Zsh\nDESCRIPTION: Sets the 'header' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `-h` flag to `eza` commands, displaying a header row for each column. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'header' yes|no\n```\n\n----------------------------------------\n\nTITLE: Installing zsh-history-substring-search via Homebrew (Shell)\nDESCRIPTION: Installs the zsh-history-substring-search plugin using the Homebrew package manager and configures Zsh to load it by appending the source command to the user's ~/.zshrc file. Requires Homebrew to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nbrew install zsh-history-substring-search\necho 'source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh' >> ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Reloading Zsh Configuration (Shell)\nDESCRIPTION: Executes 'exec zsh' to replace the current shell process with a new Zsh instance. This effectively reloads the Zsh configuration files (like ~/.zshrc) and applies any recent changes, such as activating newly added plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nexec zsh\n```\n\n----------------------------------------\n\nTITLE: Adding MicroK8s Plugin to Oh My Zsh\nDESCRIPTION: This snippet shows how to add the MicroK8s plugin to the plugins array in the zshrc file. This allows the use of convenient aliases and autocompletion for MicroK8s commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/microk8s/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... microk8s)\n```\n\n----------------------------------------\n\nTITLE: scd Usage Examples\nDESCRIPTION: Demonstrates common usage patterns of the scd command including indexing directories, pattern matching, and creating aliases.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# Index recursively some paths for the very first run\nscd -ar ~/Documents/\n\n# Change to a directory path matching \"doc\"\nscd doc\n\n# Change to a path matching all of \"a\", \"b\" and \"c\"\nscd a b c\n\n# Change to a directory path that ends with \"ts\"\nscd \"ts$\"\n\n# Show selection menu and ranking of 20 most likely directories\nscd -v\n\n# Alias current directory as \"xray\"\nscd --alias=xray\n\n# Jump to a previously defined aliased directory\nscd xray\n```\n\n----------------------------------------\n\nTITLE: Installing Rake Plugin in Oh My Zsh\nDESCRIPTION: Instructions for adding the Rake plugin to Oh My Zsh configuration by modifying the plugins array in zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rake)\n```\n\n----------------------------------------\n\nTITLE: Adding the Systemd Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the systemd plugin in the Oh My Zsh configuration file (zshrc).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... systemd)\n```\n\n----------------------------------------\n\nTITLE: Adding Reddit Search Engine Example\nDESCRIPTION: Specific example showing how to add Reddit as a custom search engine to the web-search plugin. This creates both a web_search context and an alias.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/web-search/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_WEB_SEARCH_ENGINES=(reddit \"https://www.reddit.com/search/?q=\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Vim-Style Smartcase for Zsh-z - Shell\nDESCRIPTION: This shell line sets Zsh-z to interpret lowercase patterns as case-insensitive and mixed/uppercase ones as case-sensitive, mimicking Vim's smartcase behavior. Append to your .zshrc to change default search logic.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nZSHZ_CASE=smart\n```\n\n----------------------------------------\n\nTITLE: Adding Pre-commit Plugin to Zsh Configuration\nDESCRIPTION: This snippet shows how to add the pre-commit plugin to the list of plugins in your zshrc file. It requires that you have ohmyzsh installed and you need to add 'pre-commit' to the plugins array. The input should be your existing plugins array in your zshrc file, and the output is the updated array with the pre-commit plugin included.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pre-commit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pre-commit)\n```\n\n----------------------------------------\n\nTITLE: Encrypting and uploading directories with symmetric cipher\nDESCRIPTION: Command to encrypt and upload a directory with symmetric cipher and gpg output using the transfer plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\ntransfer directory -ca\n```\n\n----------------------------------------\n\nTITLE: Configuring SSH for Separate Last-Working-Dir Files\nDESCRIPTION: This snippet demonstrates how to configure the SSH server to allow separate last-working-dir files for different SSH users by enabling the use of environment variables. The configuration requires updates to the sshd_config file and authorized_keys entries.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/last-working-dir/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nPermitUserEnvironment yes\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nenvironment=\\\"SSH_USER=a.test@example.com\\\" ssh-ed25519 AAAAC3Nz...\n```\n\n----------------------------------------\n\nTITLE: Skipping Aliases in Oh My Zsh\nDESCRIPTION: Shows how to disable default aliases in Oh My Zsh by using zstyle configurations in the .zshrc file. The configuration must be set before sourcing Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n# Skip all aliases, in lib files and enabled plugins\nzstyle ':omz:*' aliases no\n\n# Skip all aliases in lib files\nzstyle ':omz:lib:*' aliases no\n# Skip only aliases defined in the directories.zsh lib file\nzstyle ':omz:lib:directories' aliases no\n\n# Skip all plugin aliases\nzstyle ':omz:plugins:*' aliases no\n# Skip only the aliases from the git plugin\nzstyle ':omz:plugins:git' aliases no\n```\n\n----------------------------------------\n\nTITLE: Adding Aliases Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the 'aliases' plugin in the Oh My Zsh configuration file (zshrc). It requires adding 'aliases' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/aliases/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(aliases)\n```\n\n----------------------------------------\n\nTITLE: Batch Add Git Working Directories to Zsh-z Database - Shell\nDESCRIPTION: This loop will recursively search for Git repositories under the present working directory using find, extract each repository's parent directory, and add it to the Zsh-z database by calling z --add. Requires that find, dirname (or Zsh parameter expansion), and Zsh-z are installed and accessible.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nfor i in $(find $PWD -maxdepth 3 -name .git -type d); do\n  z --add ${i:h}\ndone\n```\n\n----------------------------------------\n\nTITLE: Enabling the cp Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh configuration snippet demonstrates how to enable the 'cp' plugin in Oh My Zsh. By adding 'cp' to the 'plugins' array within the '.zshrc' file, the user activates the plugin's features, including the 'cpv' command which uses 'rsync' with predefined options. This modification requires editing the '.zshrc' file and assumes Oh My Zsh is already installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... cp)\n```\n\n----------------------------------------\n\nTITLE: Configuring Directory Grouping ('dirs-first') in Zsh\nDESCRIPTION: Sets the 'dirs-first' option for the eza plugin using `zstyle`. Setting it to 'yes' groups directories before files in the output. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'dirs-first' yes|no\n```\n\n----------------------------------------\n\nTITLE: Adding Volta Plugin to Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to enable the Volta plugin by adding it to the plugins array in the user's zshrc file. This allows for Volta command completion in the terminal.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/volta/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... volta)\n```\n\n----------------------------------------\n\nTITLE: Enabling Bazel Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to enable the Bazel plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'bazel' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bazel/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... bazel)\n```\n\n----------------------------------------\n\nTITLE: Enabling kubectx Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to add the 'kubectx' plugin to the Oh My Zsh plugins array inside your .zshrc file. The plugin enhances your prompt by displaying the active Kubernetes cluster context via the kubectx_prompt_info function. No external dependencies are required beyond Oh My Zsh and the kubectx plugin; after editing the plugins array, reload your shell or source your .zshrc for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kubectx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... kubectx)\n```\n\n----------------------------------------\n\nTITLE: Expanding Regular and Global Aliases in Zsh\nDESCRIPTION: This example demonstrates the expansion of both regular and global aliases using 'globalias'. It assumes a regular alias `l='ls --color=auto -lah'` and a global alias `alias -g G=\"| grep --color=auto -P\"` are defined in `.zshrc`. Typing `l<space>G<space>` expands both aliases in place.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\n# .zshrc:\nalias -g G=\"| grep --color=auto -P\"\nalias l='ls --color=auto -lah'\n\n$ l<space>G<space>\n# expands to\n$ ls --color=auto -lah | grep --color=auto -P\n```\n\n----------------------------------------\n\nTITLE: Encrypting and uploading files with symmetric cipher\nDESCRIPTION: Command to encrypt and upload a file with symmetric cipher and create ASCII armored output using the transfer plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ntransfer file -ca\n```\n\n----------------------------------------\n\nTITLE: Configuring Agents for Keychain Plugin\nDESCRIPTION: This configuration style sets the agents managed by the keychain plugin to both gpg and ssh, modifying the default behavior of only managing gpg. It should be placed before sourcing oh-my-zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:keychain agents gpg,ssh\n```\n\n----------------------------------------\n\nTITLE: Configuring encode64 Plugin in Oh My Zsh (zsh)\nDESCRIPTION: This code snippet demonstrates how to add the encode64 plugin to the plugins array in the .zshrc configuration file. Adding the plugin enables a set of base64 encoding and decoding aliases and functions in the Zsh shell environment. The only prerequisite is the encode64 plugin being available within the Oh My Zsh plugins directory, and no additional parameters are required.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... encode64)\n```\n\n----------------------------------------\n\nTITLE: Encoding Data to Base64 with encode64/e64 Aliases (console)\nDESCRIPTION: These snippets illustrate encoding the string 'oh-my-zsh' to base64 using the encode64 function and its e64 alias from the command line. The commands can accept input as either a direct parameter or via piped input. Both forms require that the encode64 plugin is loaded in Zsh, and output the base64-encoded string to STDOUT. The commands return the base64 string, with or without padding, depending on the input method.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/encode64/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ encode64 \"oh-my-zsh\"\nb2gtbXktenNo\n$ e64 \"oh-my-zsh\"\nb2gtbXktenNo\n```\n\nLANGUAGE: console\nCODE:\n```\n$ echo \"oh-my-zsh\" | encode64\nb2gtbXktenNo==\n$ echo \"oh-my-zsh\" | e64\nb2gtbXktenNo==\n```\n\n----------------------------------------\n\nTITLE: Enabling Z Plugin in Zsh Configuration\nDESCRIPTION: Instructions for adding the z plugin to the plugins array in your .zshrc file to enable the functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... z)\n```\n\n----------------------------------------\n\nTITLE: Customizing Cluster Name Display in kube-ps1\nDESCRIPTION: Defines a shell function `get_cluster_short` that extracts the first part of a dot-separated cluster name (e.g., 'sandbox' from 'sandbox.k8s.example.com') and assigns this function's name to the `KUBE_PS1_CLUSTER_FUNCTION` environment variable. This causes `kube-ps1` to use the custom function to format the cluster name in the prompt. The function must be defined in the shell configuration before `kube_ps1` is called.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nfunction get_cluster_short() {\n  echo \"$1\" | cut -d . -f1\n}\n\nKUBE_PS1_CLUSTER_FUNCTION=get_cluster_short\n```\n\n----------------------------------------\n\nTITLE: Cloning zsh-history-substring-search for Oh-my-zsh (Shell)\nDESCRIPTION: Clones the zsh-history-substring-search plugin repository from GitHub into the custom plugins directory of an Oh-my-zsh installation ($ZSH_CUSTOM/plugins/ or ~/.oh-my-zsh/custom/plugins/ by default). This is the first step for manual installation with Oh-my-zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-history-substring-search\n```\n\n----------------------------------------\n\nTITLE: Customizing Terraform Prompt Theme\nDESCRIPTION: Variables for customizing the appearance of Terraform workspace and version information in the prompt with color formatting.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terraform/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nZSH_THEME_TF_PROMPT_PREFIX=\"%{$fg[white]%}\"\nZSH_THEME_TF_PROMPT_SUFFIX=\"%{$reset_color%}\"\nZSH_THEME_TF_VERSION_PROMPT_PREFIX=\"%{$fg[white]%}\"\nZSH_THEME_TF_VERSION_PROMPT_SUFFIX=\"%{$reset_color%}\"\n```\n\n----------------------------------------\n\nTITLE: Installing the Shell-Proxy Plugin in Zsh\nDESCRIPTION: Instructions for adding the shell-proxy plugin to the Oh My Zsh configuration. This is done by adding the plugin name to the plugins array in the user's zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shell-proxy/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... shell-proxy)\n```\n\n----------------------------------------\n\nTITLE: Using rbwpw Function Syntax\nDESCRIPTION: Example usage of the rbwpw wrapper function that copies passwords to clipboard and automatically clears after 20 seconds.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbw/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nrbwpw <service>\n```\n\n----------------------------------------\n\nTITLE: Configuring mongocli Plugin in Oh My Zsh - Zsh\nDESCRIPTION: This snippet demonstrates how to register the mongocli plugin by adding it to the plugins array in the .zshrc file for Oh My Zsh. The plugin must be listed among other desired plugins to enable various mongocli-related aliases and command shortcuts in the shell environment. The configuration should be placed within the .zshrc startup script for Zsh. No additional dependencies are needed beyond Oh My Zsh and the mongocli plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mongocli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... mongocli)\n```\n\n----------------------------------------\n\nTITLE: Running wd commands silently\nDESCRIPTION: Command to execute a wd command without any output being displayed, useful for scripts.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_30\n\nLANGUAGE: zsh\nCODE:\n```\nwd --quiet <command>\n```\n\n----------------------------------------\n\nTITLE: Overriding Agnoster Theme's build_prompt Function\nDESCRIPTION: This function overrides the default agnoster theme build_prompt function to include SVN information alongside git information in the command prompt.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nbuild_prompt() {\n    RETVAL=$?\n    prompt_status\n    prompt_context\n    prompt_dir\n    prompt_git\n    prompt_svn\n    prompt_end\n}\n```\n\n----------------------------------------\n\nTITLE: Using .venv File to Override Default Virtualenv Selection\nDESCRIPTION: Example showing how to create a .venv file to specify a different virtualenv name for a directory.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n➜  github $ cat ansible/.venv\nmyvirtualenv\n➜  github $ cd ansible\n(myvirtualenv) ➜  ansible git:(devel) $ cd ..\n➜  github $\n```\n\n----------------------------------------\n\nTITLE: Configuring Geeknote Plugin in Oh My Zsh - Zsh\nDESCRIPTION: This snippet shows how to enable the Geeknote plugin in the Oh My Zsh framework by adding 'geeknote' to the plugins array within the .zshrc configuration file. There are no external code dependencies beyond Oh My Zsh, and the user simply needs to edit their .zshrc file and restart the shell for changes to take effect. The plugins array accepts multiple plugin names, and this snippet includes Geeknote as part of that list.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/geeknote/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=( ... geeknote ...)\n```\n\n----------------------------------------\n\nTITLE: Enabling the mongo-atlas Plugin in Zsh\nDESCRIPTION: This Zsh configuration snippet shows how to enable the `mongo-atlas` plugin within Oh My Zsh. Add `mongo-atlas` to the `plugins` array in your `~/.zshrc` file to activate command-line completion for the MongoDB Atlas CLI. Oh My Zsh must be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mongo-atlas/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... mongo-atlas)\n```\n\n----------------------------------------\n\nTITLE: Trizen Package Manager Commands\nDESCRIPTION: A collection of shell aliases for the Trizen package manager, providing shortcuts for common package management operations and configuration tasks.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/archlinux/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ntrconf=\"trizen -C\"\ntrclean=\"trizen -Sc\"\ntrclr=\"trizen -Scc\"\ntrin=\"trizen -S\"\ntrins=\"trizen -U\"\ntrinsd=\"trizen -S --asdeps\"\ntrloc=\"trizen -Qi\"\ntrlocs=\"trizen -Qs\"\ntrlst=\"trizen -Qe\"\ntrmir=\"trizen -Syy\"\ntrorph=\"trizen -Qtd\"\ntrre=\"trizen -R\"\ntrrem=\"trizen -Rns\"\ntrrep=\"trizen -Si\"\ntrreps=\"trizen -Ss\"\ntrupd=\"trizen -Sy\"\ntrupg=\"trizen -Syua\"\ntrsu=\"trizen -Syua --no-confirm\"\nupgrade=\"trizen -Syu\"\n```\n\n----------------------------------------\n\nTITLE: Customizing Sudo Plugin Key Bindings\nDESCRIPTION: Commands to customize the key bindings for the sudo plugin across different editing modes (emacs, vicmd, and viins).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sudo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nbindkey -M emacs '<seq>' sudo-command-line\nbindkey -M vicmd '<seq>' sudo-command-line\nbindkey -M viins '<seq>' sudo-command-line\n```\n\n----------------------------------------\n\nTITLE: Displaying wd help information\nDESCRIPTION: Command to show the usage information and available commands for the wd plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_27\n\nLANGUAGE: zsh\nCODE:\n```\nwd help\n```\n\n----------------------------------------\n\nTITLE: Enabling the 'mvn' Plugin in Oh My Zsh Configuration - zsh\nDESCRIPTION: This snippet demonstrates how to activate the 'mvn' plugin by adding it to the 'plugins' array in your .zshrc file. The plugin enriches your terminal experience with Maven command aliases and completions. To enable it, insert 'mvn' within the parentheses alongside other plugins; no additional dependencies beyond Oh My Zsh are required. After saving, reload your shell or source your .zshrc to apply the change.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mvn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... mvn)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Helm Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh configuration snippet demonstrates how to enable the Helm plugin in Oh My Zsh. To activate the plugin's features, including completions and aliases, add the `helm` identifier to the `plugins` array within your `~/.zshrc` configuration file. Oh My Zsh must be installed as a prerequisite.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/helm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... helm)\n```\n\n----------------------------------------\n\nTITLE: Decrypting downloaded directories\nDESCRIPTION: Command to decrypt and extract a directory archive that was previously encrypted using gpg with the transfer plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\ngpg -d your_archive.tgz.gpg | tar xz\n```\n\n----------------------------------------\n\nTITLE: Disabling Grunt Options Cache Update on File Change in Zsh\nDESCRIPTION: Uses `zstyle` in `.zshrc` to modify the grunt completion caching behavior. Setting `no_update_options yes` prevents the completion system from automatically updating the cached options even if the target Gruntfile has been modified.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':completion::complete:grunt::options:' no_update_options yes\n```\n\n----------------------------------------\n\nTITLE: Using the wake Command to Wake a Device\nDESCRIPTION: Demonstrates how to use the 'wake' command provided by the plugin to wake up a configured device by specifying its name.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ wake leto\n```\n\n----------------------------------------\n\nTITLE: Adding WP-CLI Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the WP-CLI plugin in Oh My Zsh by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wp-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... wp-cli)\n```\n\n----------------------------------------\n\nTITLE: Expanding Glob Path Expression in Zsh\nDESCRIPTION: This example illustrates the expansion of a file path glob pattern using 'globalias'. Typing `ls **/*.json` and pressing SPACE expands the command to list all `.json` files found in the current directory and its subdirectories, replacing the glob pattern with the actual matching filenames.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n$ ls **/*.json<space>\n# expands to\n$ ls folder/file.json anotherfolder/another.json\n```\n\n----------------------------------------\n\nTITLE: Custom Key Binding for Piping Last Command Output in Foot - INI\nDESCRIPTION: This configuration snippet sets up a custom key binding in the foot terminal emulator. When Control+Shift+g is pressed, the output of the last shell command is written to a temporary file, which is then opened in emacsclient (terminal mode) within a new footclient instance. After the emacsclient session ends, the temporary file is removed. Dependencies include foot, footclient, emacsclient, sh, and mktemp. The snippet should be placed under the [key-bindings] section of your foot configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/foot/README.md#2025-04-22_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[key-bindings]\npipe-command-output=[sh -c \"f=$(mktemp); cat - > $f; footclient emacsclient -nw $f; rm $f\"] Control+Shift+g\n```\n\n----------------------------------------\n\nTITLE: Configuring Phing Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to enable the Phing plugin by adding \"phing\" to the plugins array in your \".zshrc\" file. No external dependencies are required other than Oh My Zsh and the Phing plugin already being included. This configuration enables autocompletion for Phing targets when using the terminal. The \"plugins\" array can contain multiple plugin names, and you should list \"phing\" alongside any other plugins used. This must be done in the user’s \".zshrc\" shell configuration file, without any constraints assuming Oh My Zsh is installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/phing/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... phing)\n```\n\n----------------------------------------\n\nTITLE: Loading SSH identities using brace expansion\nDESCRIPTION: A simplified way to specify multiple SSH identities from the same location using brace expansion.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent identities ~/.config/ssh/{id_rsa,id_rsa2,id_github}\n```\n\n----------------------------------------\n\nTITLE: Adding Vault Plugin to Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the Vault plugin to the plugins array in the zshrc file. This enables Vault completion functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vault/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... vault)\n```\n\n----------------------------------------\n\nTITLE: Integrating OpenTofu Plugin in Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to include the OpenTofu plugin in the Zsh configuration by adding it to the plugins array in `~/.zshrc`. OpenTofu is a community-driven fork of Terraform adding support for the `tofu` command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/opentofu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... opentofu)\n```\n\n----------------------------------------\n\nTITLE: Customization of JJ Prompt in ZSH Theme\nDESCRIPTION: The snippet customizes the prompt in zsh using the Jujutsu CLI's template syntax. It defines a function to display a shortened change ID in the command prompt. This customization requires the jj CLI to function properly, and jj_prompt_template is used to escape special characters.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jj/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n_my_theme_jj_info() {\n  jj_prompt_template 'self.change_id().shortest(3)'\n}\n\nPROMPT='$(_my_theme_jj_info) $'\n```\n\n----------------------------------------\n\nTITLE: Activating Custom Zsh-z in Oh My Zsh\nDESCRIPTION: Configuration example for activating the manually installed Zsh-z plugin in Oh My Zsh by adding it to the plugins array in .zshrc.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nplugins=( git zsh-z )\n```\n\n----------------------------------------\n\nTITLE: Loading Rails Plugin in Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to enable the Rails plugin in Oh My Zsh by adding it to the plugins array in zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rails/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rails)\n```\n\n----------------------------------------\n\nTITLE: Loading Zsh-z with Znap Plugin Manager - Shell\nDESCRIPTION: This command-line snippet sources Zsh-z using the Znap plugin manager. Place it in .zshrc after sourcing Znap itself. Znap will fetch, cache, and source the plugin script.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nznap source agkozak/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Excluding Gems from Being Wrapped in Bundler Plugin\nDESCRIPTION: This snippet shows how to exclude gems from being wrapped by the Bundler plugin. It demonstrates the syntax for setting the UNBUNDLED_COMMANDS variable before the plugin list in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bundler/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUNBUNDLED_COMMANDS=(foreman spin)\nplugins=(... bundler ...)\n```\n\n----------------------------------------\n\nTITLE: Customizing Battery Charging Indicator in Oh My Zsh\nDESCRIPTION: This snippet shows how to customize the battery charging indicator by setting the BATTERY_CHARGING variable. Users can change the icon to their preference.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nBATTERY_CHARGING=\"⚡️\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins Array for Oh My Zsh - Zsh\nDESCRIPTION: This snippet demonstrates how to activate the ember-cli plugin by adding it to the plugins array within the .zshrc configuration file. By including 'ember-cli', users enable Ember CLI-specific command completion and aliases in their Oh My Zsh environment. No additional dependencies are required beyond having Oh My Zsh installed; users simply update their .zshrc and reload their shell session for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ember-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ember-cli)\n```\n\n----------------------------------------\n\nTITLE: Loading Multiple Identities with Keychain Plugin\nDESCRIPTION: This snippet configures the keychain plugin to load multiple identities, such as SSH keys and GPG key IDs, by specifying them in the identities style. Ensure the specified IDs are valid for your system setup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:keychain identities id_ed25519 id_github 2C5879C2\n```\n\n----------------------------------------\n\nTITLE: Configuring wd after AUR installation\nDESCRIPTION: Function to add to .zshrc after installing wd from AUR to load the plugin from the system location.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nwd() {\n    . /usr/share/wd/wd.sh\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dbt Plugin in Oh My Zsh Configuration\nDESCRIPTION: Instructions for adding the dbt plugin to Oh My Zsh's configuration file. Users need to add 'dbt' to their plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dbt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... dbt)\n```\n\n----------------------------------------\n\nTITLE: Accessing Specific Emoji by Name in Zsh\nDESCRIPTION: Demonstrates the general syntax for printing a specific Unicode emoji character by accessing the `$emoji` associative array with the desired emoji's name. This requires the `emoji` plugin to be loaded, which defines the `$emoji` variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\n$> echo $emoji[<name>]\n```\n\n----------------------------------------\n\nTITLE: Enabling Mercurial Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to enable the Mercurial plugin by adding 'mercurial' to the 'plugins' array in your .zshrc configuration file. No additional dependencies are needed besides Oh My Zsh. Once enabled, users gain access to Mercurial aliases and prompt hooks. The plugin should be listed among other plugins in the array. No inputs besides the plugin name are required.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mercurial/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... mercurial)\n```\n\n----------------------------------------\n\nTITLE: Modifying robbyrussell Theme to Add Branch Prompt Info - Oh My Zsh - Diff\nDESCRIPTION: Provides a unified diff for altering the 'robbyrussell' Zsh theme to use 'branch_prompt_info' instead of 'git_prompt_info'. Assumes familiarity with Zsh prompt customization and access to Oh My Zsh themes. Replace or update relevant PROMPT lines as shown to display current branch/bookmark info in the terminal prompt.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\ndiff --git a/themes/robbyrussell.zsh-theme b/themes/robbyrussell.zsh-theme\nindex 2fd5f2cd..9d89a464 100644\n--- a/themes/robbyrussell.zsh-theme\n+++ b/themes/robbyrussell.zsh-theme\n@@ -1,5 +1,5 @@\n PROMPT=\"%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )\"\n-PROMPT+=' %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'\n+PROMPT+=' %{$fg[cyan]%}%c%{$reset_color%} $(branch_prompt_info)'\n\n ZSH_THEME_GIT_PROMPT_PREFIX=\"%{$fg_bold[blue]%}git:(%{$fg[red]%}\"\n ZSH_THEME_GIT_PROMPT_SUFFIX=\"%{$reset_color%} \"\n```\n\n----------------------------------------\n\nTITLE: Expanding Regular Alias in Zsh\nDESCRIPTION: This snippet provides a simple example of regular alias expansion with 'globalias'. Assuming the alias `S=\"sudo systemctl\"` is defined in `.zshrc`, typing `S<space>` will expand it to `sudo systemctl`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\n# .zsrc:\nalias S=\"sudo systemctl\"\n\n$ S<space>\n# expands to:\n$ sudo systemctl\n```\n\n----------------------------------------\n\nTITLE: Adding a warp point to current directory\nDESCRIPTION: Command to add a new warp point named 'foo' to the current working directory.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_15\n\nLANGUAGE: zsh\nCODE:\n```\nwd add foo\n```\n\n----------------------------------------\n\nTITLE: Activating K9s Plugin in Oh My Zsh Plugins Array - zsh\nDESCRIPTION: This snippet shows users how to add the 'k9s' plugin to the Oh My Zsh plugins array for Zsh. To use this functionality, users must be using Oh My Zsh and have access to a `.zshrc` file. The 'plugins' array accepts plugin names, and by including 'k9s', users enable command completion for the K9s CLI. No additional dependencies are required beyond Oh My Zsh and K9s itself; input is an array of plugin names and the output is enhanced shell functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/k9s/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... k9s)\n```\n\n----------------------------------------\n\nTITLE: Enabling Globalias Plugin in Zsh\nDESCRIPTION: This snippet shows how to enable the 'globalias' plugin within Oh My Zsh by adding its name to the `plugins` array in the `.zshrc` configuration file. This is the standard method for activating Oh My Zsh plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... globalias)\n```\n\n----------------------------------------\n\nTITLE: Adding Invoke Plugin to Oh My Zsh Plugin Array - Zsh\nDESCRIPTION: This code snippet shows the syntax required to include the invoke plugin in the list of active plugins within the user's \".zshrc\" configuration file for Oh My Zsh. To use it, simply add \"invoke\" into the existing plugins array. This enables autocompletion support for the pyinvoke tool. It assumes that Oh My Zsh is already installed and that the \".zshrc\" file is being edited; users should reload or restart their shell for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/invoke/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... invoke)\n```\n\n----------------------------------------\n\nTITLE: Adding Stack Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to enable the Stack plugin in Oh My Zsh by adding it to the plugins array in your zshrc file. The plugin provides command completion for Stack commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/stack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... stack)\n```\n\n----------------------------------------\n\nTITLE: Adding fnm Plugin to Oh My Zsh Configuration - Zsh\nDESCRIPTION: This snippet demonstrates how to include the fnm plugin in the Oh My Zsh plugins array within the .zshrc file to enable autocompletion for fnm commands. No additional dependencies beyond Oh My Zsh and the fnm tool are required. The 'plugins' array should contain 'fnm' alongside any existing plugins. Intended input is the .zshrc configuration file; there is no explicit output, but users receive extended CLI functionality via autocompletion.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fnm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fnm)\n```\n\n----------------------------------------\n\nTITLE: Expanding Subcommand in Zsh\nDESCRIPTION: This snippet shows how 'globalias' expands command substitutions (subcommands enclosed in backticks). Typing `mkdir \"`date -R`\"` followed by SPACE executes the `date -R` command and substitutes its output into the `mkdir` command line before execution.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n$ mkdir \"`date -R`\"\n# expands to\n$ mkdir Tue,\\ 04\\ Oct\\ 2016\\ 13:54:03\\ +0300\n```\n\n----------------------------------------\n\nTITLE: Loading Zsh-z with Zinit Plugin Manager - Shell\nDESCRIPTION: By adding this line to .zshrc, users load Zsh-z with the Zinit plugin manager. Zinit will automatically clone the repository and source the plugin script on shell startup. No extra configuration required unless customizing plugin options.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nzinit load agkozak/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Installing TaskWarrior Plugin in Oh My Zsh Configuration\nDESCRIPTION: Configuration snippet showing how to enable the TaskWarrior plugin in the Oh My Zsh plugins array within the .zshrc file. This enables TaskWarrior command completion functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/taskwarrior/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... taskwarrior)\n```\n\n----------------------------------------\n\nTITLE: Configuring Starship Plugin in Zsh Configuration\nDESCRIPTION: Shows how to enable the Starship plugin in the Oh My Zsh configuration by adding it to the plugins array in .zshrc file. Note that enabling this plugin will unset the ZSH_THEME variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/starship/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... starship)\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying a Random Vehicle Emoji in Zsh\nDESCRIPTION: Shows a practical use case of the `random_emoji` function to output a random emoji belonging to the 'vehicles' group, which must be present in `$emoji_groups`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\n$> random_emoji vehicles\n```\n\n----------------------------------------\n\nTITLE: Vim Split Navigation Commands\nDESCRIPTION: Examples of commands for loading files into specific split windows using wincmd navigation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n# Do a ':wincmd h' first\n> vh /tmp/myfile.scala\n\n# Do a ':wincmd j' first\n> vj /tmp/myfile.scala\n\n# Do a ':wincmd k' first\n> vk /tmp/myfile.scala\n\n# Do a ':wincmd l' first\n> vl /tmp/myfile.scala\n```\n\n----------------------------------------\n\nTITLE: Opening .zshrc File for Editing (Shell)\nDESCRIPTION: Command to open the .zshrc file in the vi text editor for customization.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nvi ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Loading Zsh-z with Zplug Plugin Manager - Shell\nDESCRIPTION: This snippet should be added to .zshrc before the zplug load call. The Zplug manager uses this line to clone and register Zsh-z. To activate changes, run zplug install then zplug load.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nzplug \"agkozak/zsh-z\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins Array in Zsh - Oh My Zsh - Zsh\nDESCRIPTION: Shows how to enable the branch plugin by modifying the plugins array in your .zshrc file. No dependencies beyond an existing Oh My Zsh installation are required. The user should insert 'branch' into the plugins array to activate branch information in the prompt. This is a standard configuration step for plugin usage.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... branch)\n```\n\n----------------------------------------\n\nTITLE: Unloading Zsh-z with Zinit - Shell\nDESCRIPTION: This command removes the Zsh-z module if loaded through Zinit, restoring the shell to its prior state. Useful for testing or temporary deactivation. Can be run interactively or scripted.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nzinit unload agkozak/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Adding The Fuck Plugin to Oh My Zsh Configuration\nDESCRIPTION: Configuration snippet showing how to add The Fuck plugin to the plugins array in your zshrc file. This enables the plugin's functionality in your Oh My Zsh setup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/thefuck/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... thefuck)\n```\n\n----------------------------------------\n\nTITLE: Configuring hitokoto Plugin in zsh\nDESCRIPTION: This snippet shows how to add the hitokoto plugin to the plugins array in your .zshrc file to enable fetching random quotes. Ensure oh-my-zsh is installed as a prerequisite. The .zshrc file must be updated, and zsh must be restarted for changes to take effect. This command outputs a random quote each time you run the hitokoto command in zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hitokoto/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... hitokoto)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Array in Zsh\nDESCRIPTION: This snippet demonstrates how to include the Fig plugin in the Zsh configuration. It assumes the user has access to their .zshrc file and contains instructions for adding 'fig' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fig/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fig)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis-CLI Plugin in Oh My Zsh\nDESCRIPTION: Code snippet showing how to enable the redis-cli plugin by adding it to the plugins array in the zshrc configuration file. This enables Redis CLI command completion functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/redis-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... redis-cli)\n```\n\n----------------------------------------\n\nTITLE: Adding a warp point with default name\nDESCRIPTION: Command to add a warp point to a specific directory using the directory's name as the warp point name.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_17\n\nLANGUAGE: zsh\nCODE:\n```\nwd addcd /foo/\n```\n\n----------------------------------------\n\nTITLE: Configuring Systemd Prompt Variables\nDESCRIPTION: This example demonstrates how to configure the appearance of systemd unit status in the command prompt by setting specific environment variables.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nZSH_THEME_SYSTEMD_PROMPT_PREFIX=\"[\"\nZSH_THEME_SYSTEMD_PROMPT_SUFFIX=\"]\"\nZSH_THEME_SYSTEMD_PROMPT_ACTIVE=\"+\"\nZSH_THEME_SYSTEMD_PROMPT_NOTACTIVE=\"X\"\nZSH_THEME_SYSTEMD_PROMPT_CAPS=1\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Emojis with Names in Zsh\nDESCRIPTION: Shows the usage of the `display_emoji` function without arguments. This function, provided by the plugin, prints a list of all available emoji characters along with their corresponding human-readable names.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_9\n\nLANGUAGE: zsh\nCODE:\n```\n$> display_emoji\n```\n\n----------------------------------------\n\nTITLE: Basic CallVim Usage Command\nDESCRIPTION: Shows the basic usage syntax for the callvim function, including available options for running commands before and after file loading.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nusage: callvim [-b cmd] [-a cmd] [file ... fileN]\n```\n\n----------------------------------------\n\nTITLE: Integrating Heroku CLI Plugin in Zsh\nDESCRIPTION: This snippet shows how to add the Heroku plugin to the list of active plugins in a Zsh configuration file. It assumes that you have Zsh installed and a .zshrc file available for customization. To enable Heroku CLI completion, add 'heroku' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/heroku/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... heroku)\n```\n\n----------------------------------------\n\nTITLE: Configuring isodate Plugin in Oh My Zsh - Zsh Shell\nDESCRIPTION: Demonstrates how to enable the isodate plugin by adding it to the plugins array in the .zshrc configuration file. This setup step is required to use the isodate command aliases provided by the plugin. The input 'isodate' should be added among other plugins as shown; after saving, reload the shell or source .zshrc for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/isodate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... isodate)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Tig Plugin in Oh My Zsh\nDESCRIPTION: This code snippet shows how to enable the tig plugin in Oh My Zsh by adding it to the plugins array in your zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tig/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... tig)\n```\n\n----------------------------------------\n\nTITLE: Configuring kube-ps1 to use the 'oc' Binary\nDESCRIPTION: Sets the `KUBE_PS1_BINARY` environment variable to `oc`. This instructs `kube-ps1` to use the OpenShift CLI tool (`oc`) instead of the default `kubectl` for querying cluster information. This line should be added to the shell configuration file (`.zshrc` or `.bashrc`).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nKUBE_PS1_BINARY=oc\n```\n\n----------------------------------------\n\nTITLE: Command Usage for port-livecheck-maintainer - Text\nDESCRIPTION: Documents the available usage patterns and options for the 'port-livecheck-maintainer' command, which checks for updates to Macports packages maintained by specified maintainers or the current user. Inputs can either be omitted, a list of maintainer IDs passed, or help flags used; the outputs are update check results or help text. No dependencies beyond the Oh My Zsh plugin mechanism and zsh are required. The maintainer id is determined from the MACPORTS_MAINTAINER environment variable or the USER variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/macports/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nUsage:\\n  port-livecheck-maintainer\\n  port-livecheck-maintainer (maintainer)+\\n  port-livecheck-maintainer -h|--help\\n\\nCheck\\n\\nOptions:\\n  maintainer  maintainer id\\n  -h          print this help message and exit\n```\n\n----------------------------------------\n\nTITLE: Configuring kube-ps1 for Bash (Manual Source)\nDESCRIPTION: Sources the `kube-ps1.sh` script and integrates the `kube_ps1` function output into the Bash `PS1` prompt variable. This method requires manually cloning the repository and specifying the correct path to `kube-ps1.sh` in the `.bashrc` file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nsource /path/to/kube-ps1.sh\nPS1='[\\u@\\h \\W $(kube_ps1)]\\$ '\n```\n\n----------------------------------------\n\nTITLE: Running Hanami Command Aliases in Console - Console\nDESCRIPTION: This example illustrates how to use a Hanami alias (such as HED) in conjunction with another alias (like hdd) within a shell session. It executes the equivalent full command with the HANAMI_ENV environment variable set to 'development', in this case dropping the development database. This snippet assumes the Hanami Oh My Zsh plugin is properly configured and loaded in the terminal session.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hanami/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ HED hdd # equivalent to 'HANAMI_ENV=development hanami db drop'\n```\n\n----------------------------------------\n\nTITLE: Removing a warp point\nDESCRIPTION: Command to delete the warp point named 'foo' from the warp points list.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_21\n\nLANGUAGE: zsh\nCODE:\n```\nwd rm foo\n```\n\n----------------------------------------\n\nTITLE: Enabling the git-hubflow Plugin in Oh My Zsh Configuration\nDESCRIPTION: This Zsh configuration snippet shows how to enable the `git-hubflow` plugin by adding its name to the `plugins` array within the user's `.zshrc` file. Activating this plugin requires Oh My Zsh and the HubFlow tool to be installed separately. It provides command-line completions and aliases for HubFlow commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-hubflow/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... git-hubflow)\n```\n\n----------------------------------------\n\nTITLE: Accessing Shortcut with Fastfile Prefix\nDESCRIPTION: This snippet demonstrates accessing a previously created shortcut using the Fastfile prefix. Commands like `cd §pjdb` or `subl §pjdb` utilize the Fastfile alias to refer to the directory path.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fastfile/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n$ cd §pjdb\n$ subl §pjdb\n```\n\n----------------------------------------\n\nTITLE: Configuring kube-ps1 using zplugin for Zsh\nDESCRIPTION: Instructs the `zplugin` Zsh plugin manager to load the `kube-ps1` plugin from the specified GitHub repository and prepends the `kube_ps1` function output to the Zsh `PROMPT`. Requires `zplugin` to be installed and configured in `.zshrc`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzplugin light jonmosco/kube-ps1\nPROMPT='$(kube_ps1)'$PROMPT\n```\n\n----------------------------------------\n\nTITLE: Enabling Pipenv Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to enable the Pipenv plugin within the Oh My Zsh framework. By adding `pipenv` to the `plugins` array in the `.zshrc` file, the plugin's features (completion, auto-shell, aliases) become available in the Zsh shell. Oh My Zsh must be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pipenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pipenv ...)\n```\n\n----------------------------------------\n\nTITLE: Initializing Argo CD Plugin in Zsh Configuration - Zsh\nDESCRIPTION: This snippet demonstrates how to enable the Argo CD plugin by adding 'argocd' to the 'plugins' array within the '.zshrc' configuration file. No additional dependencies are required other than Oh My Zsh itself and the Argo CD plugin. Users should insert 'argocd' among other plugins in the array. The output is Zsh completion for Argo CD commands whenever a new terminal is started. There are no aliases or additional configurations provided by this plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/argocd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... argocd)\n```\n\n----------------------------------------\n\nTITLE: Adding the chezmoi Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the chezmoi plugin by adding it to the plugins array in your zshrc file. This allows zsh to provide completion for the chezmoi dotfile manager.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chezmoi/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... chezmoi)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gulp Plugin in Oh My Zsh - Shell\nDESCRIPTION: This shell configuration snippet demonstrates how to activate the Gulp plugin for Oh My Zsh by adding 'gulp' to the plugins array inside the .zshrc file. There are no external dependencies other than Oh My Zsh being installed, and the presence of a gulpfile.js in the project directory for task detection. This enables autocompletion for 'gulp' tasks in the terminal that use this configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gulp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... gulp)\n```\n\n----------------------------------------\n\nTITLE: Customizing chruby Plugin Path in Oh My Zsh\nDESCRIPTION: This snippet demonstrates how to specify custom paths for loading chruby and its auto-switching functionality. It uses zstyle commands to set the paths for the chruby.sh and auto.sh files.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chruby/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:chruby path /local/path/to/chruby.sh\nzstyle :omz:plugins:chruby auto /local/path/to/auto.sh\n```\n\n----------------------------------------\n\nTITLE: Fallback Mechanism for JJ and Git in Prompt\nDESCRIPTION: This code offers a fallback mechanism that tries to use Jujutsu CLI's features in the prompt, and if it fails, falls back to using Git's information. This strategy ensures compatibility with themes that may not natively support jj. It relies on both jj and git_prompt_info functions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jj/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n_my_theme_vcs_info() {\n  jj_prompt_template 'self.change_id().shortest(3)' \\\n  || git_prompt_info\n}\n\nPROMPT='$(_my_theme_vcs_info) $'\n```\n\n----------------------------------------\n\nTITLE: Defining Jump Target Entries for n-list in Zsh\nDESCRIPTION: This Zsh code shows how to set up specific entries as jump targets within `n-list`, navigable using the `[` and `]` keys. It uses the `NLIST_HOP_INDEXES` array, populated with the 1-based indices of the target entries.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\ntypeset -a NLIST_HOP_INDEXES\nNLIST_HOP_INDEXES=( 1 10 )\n```\n\n----------------------------------------\n\nTITLE: Configuring Please Plugin for Oh My Zsh\nDESCRIPTION: The example code snippet demonstrates how to enable the Please plugin in Oh My Zsh by adding it to the plugins array in your zshrc file. This configuration allows users to utilize autocomplete features and predefined aliases for the Please command line tool.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/please/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... please)\n```\n\n----------------------------------------\n\nTITLE: Setting Shrink-Path Options via Zstyle\nDESCRIPTION: Example of how to configure shrink-path options using the zstyle command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :prompt:shrink_path fish yes\n```\n\n----------------------------------------\n\nTITLE: Adding the wakeonlan Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the wakeonlan plugin by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... wakeonlan)\n```\n\n----------------------------------------\n\nTITLE: Uploading a File using the Droplr Plugin (Zsh)\nDESCRIPTION: This command demonstrates how to upload a local file to Droplr using the `droplr` command-line tool provided by the plugin. Replace `./path/to/file/` with the actual path to the file you want to upload. Requires the Droplr.app to be installed, running, and logged in on MacOS.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/droplr/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ndroplr ./path/to/file/\n```\n\n----------------------------------------\n\nTITLE: Fixing Underline in Linux VT via Terminfo (Shell)\nDESCRIPTION: This shell command addresses potential underline display issues in the Linux virtual terminal (`TERM=linux`). It fetches the terminfo entry using `infocmp`, modifies the `ncv` capability to 0 (which might result in color highlighting instead of true underline), and compiles the new entry using `tic`, placing it in `~/.terminfo` for automatic use.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\n{ infocmp -x linux; printf '\\t%s\\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t\n```\n\n----------------------------------------\n\nTITLE: Customizing the Right Prompt to Show Azure Subscription (zsh)\nDESCRIPTION: This snippet sets the Zsh right-hand prompt (RPROMPT) to display the current selected Azure subscription using the azure_prompt_info function, which is provided by the oh-my-zsh Azure plugin. This relies on the plugin being loaded and may use additional variables (e.g., ZSH_THEME_AZURE_PREFIX and ZSH_THEME_azure_SUFFIX) for customizing appearance. There are no inputs, and the output is a dynamic display of the subscription in the prompt. Ensure that the plugin is installed and configured for this to work.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nRPROMPT='$(azure_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Enabling the Screen Plugin in Oh My Zsh\nDESCRIPTION: This code snippet demonstrates how to add the screen plugin to the plugins array in your zshrc file to enable it. Once enabled, the plugin will automatically set the title and hardstatus of tab windows in screen.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/screen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... screen)\n```\n\n----------------------------------------\n\nTITLE: Loading RSync Plugin in Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to enable the rsync plugin in Oh My Zsh by adding it to the plugins array in zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rsync/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rsync)\n```\n\n----------------------------------------\n\nTITLE: Enabling Meteor Plugin in Oh My Zsh - Zsh\nDESCRIPTION: This snippet demonstrates how to enable the Meteor plugin by adding 'meteor' to the plugins array in your .zshrc configuration file. This setup is necessary for activating Meteor-specific aliases and command completions. The plugins array can include multiple plugins, and the ellipsis (...) indicates additional plugins may already be present. No external dependencies are needed aside from Oh My Zsh being installed and .zshrc being correctly sourced.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/meteor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... meteor)\n```\n\n----------------------------------------\n\nTITLE: Using Jump Plugin Keybinding (Before Expansion) (zsh)\nDESCRIPTION: Shows an example command line input before using the `CTRL+G` keybinding provided by the 'jump' plugin. The user has typed a mark name (`mymark`) which is intended to be expanded into its full path.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jump/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ cp /tmp/file mymark<C-g>\n```\n\n----------------------------------------\n\nTITLE: Using mise for Node.js Version Management in Bash\nDESCRIPTION: This snippet illustrates how to manage Node.js versions using mise commands. It showcases installing and setting different versions of Node.js. Required prerequisites are having mise installed and configured. The commands involve specifying version numbers or using the system's default version.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mise/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmise install node         Install the current version specified in .tool-versions/.mise.toml\nmise use -g node@system   Use system node as global default\nmise install node@20.0.0  Install a specific version number\nmise use -g node@20       Use node-20.x as global default\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Legacy Completion for Docker\nDESCRIPTION: Configuration to enable legacy completion mode for Docker commands, useful when current completion doesn't work well or when using Podman's Docker wrapper.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/docker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:docker' legacy-completion yes\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin List in Zshrc - Bash\nDESCRIPTION: This snippet demonstrates how to add the mix-fast plugin to the list of active plugins in the .zshrc configuration file. No external dependencies are required, but the mix-fast plugin should be installed in your Oh-My-Zsh plugin directory. Modify the plugins array to include 'mix-fast' alongside any existing plugins. This enables the faster autocompletion functionality when opening a new Zsh session.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mix-fast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(foo bar mix-fast)\n```\n\n----------------------------------------\n\nTITLE: Enabling Bridgetown Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the Bridgetown plugin to the plugins array in the zshrc file. This enables the plugin and its features in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bridgetown/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... bridgetown)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Drush Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet demonstrates how to enable the Drush plugin within the Oh My Zsh configuration file (`.zshrc`). It involves adding the identifier `drush` to the `plugins` array. This activation step is required to make the plugin's aliases and functions available in the Zsh shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/drush/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... drush)\n```\n\n----------------------------------------\n\nTITLE: Enabling Cabal Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to add the Cabal plugin to the plugins array in the zshrc file. This enables Cabal completion and the cabal_sandbox_info function in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cabal/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... cabal)\n```\n\n----------------------------------------\n\nTITLE: Enabling the git-lfs Oh My Zsh Plugin (Zsh)\nDESCRIPTION: This Zsh code snippet demonstrates how to activate the `git-lfs` plugin within Oh My Zsh. It requires adding the string `git-lfs` to the `plugins` array within the user's `.zshrc` configuration file. Once added and the shell is reloaded, the aliases and functions defined by the plugin become available.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-lfs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... git-lfs)\n```\n\n----------------------------------------\n\nTITLE: Checking wd version\nDESCRIPTION: Command to display the currently running version of the wd plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_28\n\nLANGUAGE: zsh\nCODE:\n```\nwd --version\n```\n\n----------------------------------------\n\nTITLE: Combined Usage with zsh-syntax-highlighting - Zsh - Shell\nDESCRIPTION: Demonstrates sourcing the zsh-syntax-highlighting plugin before zsh-history-substring-search to ensure compatibility and proper highlighting order. Requires both script files. Inputs are file names; outputs are that both plugins are loaded and interact as intended.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nsource zsh-syntax-highlighting.zsh\nsource zsh-history-substring-search.zsh\n```\n\n----------------------------------------\n\nTITLE: Disabling a kube-ps1 Feature via Environment Variable\nDESCRIPTION: Demonstrates how to disable a specific visual component of the `kube-ps1` prompt, such as the separator between the symbol and the context name, by setting its corresponding environment variable (`KUBE_PS1_SEPARATOR` in this case) to an empty string in the shell configuration file (`.zshrc` or `.bashrc`).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nKUBE_PS1_SEPARATOR=''\n```\n\n----------------------------------------\n\nTITLE: Enabling the Dirpersist Plugin in Oh My Zsh\nDESCRIPTION: This code shows how to activate the dirpersist plugin in your zshrc configuration file. The plugin must be added to the plugins array in your zshrc file to enable directory persistence functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirpersist/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... dirpersist)\n```\n\n----------------------------------------\n\nTITLE: Configuring last-working-dir Plugin in Zsh\nDESCRIPTION: This snippet shows how to enable the `last-working-dir` plugin in Zsh by adding it to the plugins array in the .zshrc configuration file. This setup allows automatically jumping to the last working directory when a new shell starts.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/last-working-dir/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... last-working-dir)\n```\n\n----------------------------------------\n\nTITLE: Activating the minikube plugin in Oh My Zsh configuration\nDESCRIPTION: This Zsh configuration snippet demonstrates how to enable the `minikube` plugin in Oh My Zsh. By adding `minikube` to the `plugins` array within your `.zshrc` file, you activate command-line completion features for the `minikube` tool.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/minikube/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... minikube)\n```\n\n----------------------------------------\n\nTITLE: Setting Cache Expiration for Grunt Completions in Zsh\nDESCRIPTION: Configures the cache expiration period for grunt command completions using `zstyle` in `.zshrc`. The `expire 1` setting specifies that the cache for grunt options should expire after 1 day, overriding the default of 7 days.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':completion::complete:grunt::options:' expire 1\n```\n\n----------------------------------------\n\nTITLE: Basic Sourcing of Zsh-z Plugin in Zsh\nDESCRIPTION: The simplest way to install Zsh-z is by sourcing the plugin file in your .zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nsource /path/to/zsh-z.plugin.zsh\n```\n\n----------------------------------------\n\nTITLE: Usage Instructions for Textastic Plugin Commands\nDESCRIPTION: Documents the three main usage patterns for the 'tt' command that integrates with Textastic editor: launching the editor, opening directories, and opening specific files.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/textastic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n * If `tt` command is called without an argument, launch Textastic\n\n * If `tt` is passed a directory, cd to it and open it in Textastic\n\n * If `tt` is passed a file, open it in Textastic\n```\n\n----------------------------------------\n\nTITLE: Setting Character Set for Emotty Function in Zsh\nDESCRIPTION: Specify a different set of emoji characters for the emotty plugin by setting the environment variable 'emotty_set' to the desired character set name. The available predefined sets include modes like 'nature', 'stellar', and 'zodiac'. By default, the 'emoji' set is used.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emotty/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nemotty_set=nature\n```\n\n----------------------------------------\n\nTITLE: Using node-docs Function in Zsh\nDESCRIPTION: This snippet demonstrates using the node-docs function to open specific API documentation pages on the Node.js website. The function uses the parameter to determine the documentation section to open, such as 'fs' for file system or 'path'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/node/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n# Opens https://nodejs.org/docs/latest-v10.x/api/fs.html\n$ node-docs fs\n# Opens https://nodejs.org/docs/latest-v10.x/api/path.html\n$ node-docs path\n```\n\n----------------------------------------\n\nTITLE: Configuring Perl Plugin in Oh My Zsh - Zsh\nDESCRIPTION: This Zsh configuration snippet demonstrates how to enable the Perl plugin by adding 'perl' to the plugins array in the .zshrc file. Prerequisite: Oh My Zsh must be installed and sourced in your shell startup script. The 'plugins' array in .zshrc is used by Oh My Zsh to load optional plugins, and adding 'perl' activates its aliases and functions the next time the shell starts. No additional parameters are required; the plugin is loaded if specified in the array. Limitations: Any user custom changes to the array should be preserved.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/perl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... perl)\n```\n\n----------------------------------------\n\nTITLE: Enabling Keychain Plugin in oh-my-zsh\nDESCRIPTION: This snippet adds the keychain plugin to the oh-my-zsh plugins list to automatically start the keychain tool for managing gpg and ssh credentials. Requires oh-my-zsh to be installed and configured.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... keychain)\n```\n\n----------------------------------------\n\nTITLE: Using alias-finder with shortest gs alias\nDESCRIPTION: Usage example showing that alias-finder provides no suggestions when using the shortest 'gs' shell alias since there are no shorter alternatives.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n╭─tim@fox ~/repo/gitopolis ‹main› \n╰─$ gs\n         # <=== no suggestions alias-finder because this is the shortest\n## main...origin/main\n```\n\n----------------------------------------\n\nTITLE: Sprunge Basic Text Upload Example\nDESCRIPTION: Example showing the output of uploading a simple string to sprunge.us using the plugin, which returns a unique URL.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sprunge/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ sprunge \"hello\"\nhttp://sprunge.us/XxjnKz\n```\n\n----------------------------------------\n\nTITLE: Enabling the DirCycle Plugin in .zshrc\nDESCRIPTION: This code shows how to enable the DirCycle plugin by adding it to the plugins array in your .zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(\n    # all your enabled plugins\n    dircycle\n)\n```\n\n----------------------------------------\n\nTITLE: Adding the wd plugin in oh-my-zsh configuration\nDESCRIPTION: Shows how to enable the wd plugin in oh-my-zsh by adding it to the plugins list in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... wd)\n```\n\n----------------------------------------\n\nTITLE: Installing zsh-interactive-cd Plugin in ZSH Configuration\nDESCRIPTION: This code snippet shows how to add the zsh-interactive-cd plugin to the plugins list in the ~/.zshrc configuration file. This enables the interactive directory navigation functionality after the next shell restart or source of the configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-interactive-cd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... zsh-interactive-cd)\n```\n\n----------------------------------------\n\nTITLE: Configuring zsh-history-substring-search with zplug (Zsh)\nDESCRIPTION: Adds a line to the ~/.zshrc file to instruct the zplug plugin manager to load the 'zsh-users/zsh-history-substring-search' repository as a plugin. This configuration line should be placed within the zplug section of the ~/.zshrc file. Requires zplug to be set up.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nzplug \"zsh-users/zsh-history-substring-search\", as: plugin\n```\n\n----------------------------------------\n\nTITLE: Installing wd using zplug\nDESCRIPTION: Configuration code to install the wd plugin using the zplug plugin manager for zsh, specifying it as a command and providing a hook to load it.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\nzplug \"mfaerevaag/wd\", as:command, use:\"wd.sh\", hook-load:\"wd() { . $ZPLUG_REPOS/mfaerevaag/wd/wd.sh }\"\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Plugin to Oh-My-Zsh Configuration\nDESCRIPTION: Shows how to enable the Rust plugin by adding it to the plugins array in the zshrc configuration file. This enables command completion for Rust tools.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rust/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rust)\n```\n\n----------------------------------------\n\nTITLE: Installing Dirhistory Plugin in Zsh\nDESCRIPTION: Configuration snippet showing how to enable the dirhistory plugin in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... dirhistory)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in ZSH\nDESCRIPTION: This snippet shows how to include the 'lando' plugin in the ZSH plugins configuration. Users should add 'lando' to their plugins array in their .zshrc file to enable this functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... lando)\n```\n\n----------------------------------------\n\nTITLE: Enabling Autoenv Plugin in Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the Autoenv plugin to the plugins array in the zshrc file. This enables the Autoenv functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/autoenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... autoenv)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Kind Plugin in Oh My Zsh Configuration (zsh)\nDESCRIPTION: Adds the 'kind' plugin to the Oh My Zsh plugins array within the .zshrc configuration file. This step is necessary to activate the plugin's features, including command completions and aliases, in the Zsh environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kind/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... kind)\n```\n\n----------------------------------------\n\nTITLE: Activating gitignore Plugin in Oh My Zsh Configuration (Zsh)\nDESCRIPTION: This snippet demonstrates how to activate the gitignore plugin by adding it to the plugins array within your .zshrc configuration file. The plugin enables command-line interaction with gitignore.io, requiring both Oh My Zsh and an active internet connection. No additional dependencies besides Oh My Zsh are necessary. Users should ensure 'gitignore' is present in the array for functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gitignore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gitignore)\n```\n\n----------------------------------------\n\nTITLE: Enabling the pyenv Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to add the `pyenv` plugin to the `plugins` array within the user's `.zshrc` file. This action enables the Oh My Zsh pyenv plugin, allowing it to manage pyenv integration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pyenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pyenv)\n```\n\n----------------------------------------\n\nTITLE: Enabling Cpanm Plugin in Oh My Zsh Configuration\nDESCRIPTION: Shows how to add the cpanm plugin to the Oh My Zsh plugins array in the zshrc configuration file. This enables completion functionality for Cpanminus commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cpanm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... cpanm)\n```\n\n----------------------------------------\n\nTITLE: Disabling Color for a kube-ps1 Element\nDESCRIPTION: Example of disabling color for a specific segment of the `kube-ps1` prompt (the context name in this case) by setting its corresponding color environment variable (`KUBE_PS1_CTX_COLOR`) to an empty string. This customization is typically applied in shell configuration files (`.zshrc`, `.bashrc`).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nKUBE_PS1_CTX_COLOR=''\n```\n\n----------------------------------------\n\nTITLE: Adding Battery Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the battery plugin to the list of plugins in the .zshrc file. It enables the battery-related functions for use in custom themes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... battery)\n```\n\n----------------------------------------\n\nTITLE: Adding Arduino CLI Plugin to Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to enable the Arduino CLI plugin by adding it to the plugins array in the zshrc file. The plugin provides command completion for arduino-cli commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/arduino-cli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... arduino-cli)\n```\n\n----------------------------------------\n\nTITLE: Adding NATS Plugin to Zshrc\nDESCRIPTION: This snippet demonstrates how to enable the NATS plugin for Zsh by adding it to the plugins array in the zshrc configuration file. It provides autocompletion for tools from NATS, such as nsc and natscli. There are no dependencies other than having a Zsh shell where you can configure plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nats/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... nats)\n```\n\n----------------------------------------\n\nTITLE: Setting Colorize Tool in Zsh Environment\nDESCRIPTION: This snippet demonstrates how to set the ZSH_COLORIZE_TOOL environment variable to use chroma instead of the default pygmentize.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_COLORIZE_TOOL=chroma\n```\n\n----------------------------------------\n\nTITLE: Disabling Global Scripts Directory Addition in Yarn Plugin\nDESCRIPTION: This code sets a zstyle to disable the feature that adds Yarn's global scripts directory to the $PATH. It should be added to the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yarn/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:yarn' global-path no\n```\n\n----------------------------------------\n\nTITLE: Underlying Command for Text QR Code Generation (Shell)\nDESCRIPTION: The actual `curl` command executed by the `qrcode` alias. It sends the provided 'text' as POST data (`-d \"text\"`) to the `qrcode.show` web service. The service processes the text and returns a text-based representation of the corresponding QR code to standard output.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncurl -d \"text\" qrcode.show\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Cloud Foundry CLI Help Commands in Bash\nDESCRIPTION: This snippet shows how to use the Cloud Foundry CLI help commands. It includes examples for listing all commands, getting general help, and obtaining specific command help.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cloudfoundry/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncf help # List the most popular and commonly used commands\ncf help -a # Complete list of all possible commands\ncf <COMMAND_NAME> --help # Help on a specific command including arguments and examples\n```\n\n----------------------------------------\n\nTITLE: Installing Copybuffer Plugin in Oh My Zsh\nDESCRIPTION: Demonstrates how to enable the copybuffer plugin in Oh My Zsh by adding it to the plugins array in .zshrc configuration file. The plugin allows copying current command line text using ctrl-o shortcut.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/copybuffer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... copybuffer)\n```\n\n----------------------------------------\n\nTITLE: Configuring eecms Plugin in Zsh\nDESCRIPTION: The code snippet demonstrates how to include the eecms plugin in your Zsh configuration by modifying the plugins array in your .zshrc file. This setup enables auto-completion for eecms console commands and defines an alias for running the eecms file with PHP. Ensure that the ExpressionEngine project is available in the current environment for the commands to function as expected.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eecms/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... eecms)\n```\n\n----------------------------------------\n\nTITLE: Configuring Grunt Completion to Show File Path in Zsh\nDESCRIPTION: Uses `zstyle` to configure the Zsh completion for the `grunt` command. This specific setting, `show_grunt_path yes`, instructs the completion system to display the path to the relevant Gruntfile during completion suggestions for grunt options. This should be added to `.zshrc`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':completion::complete:grunt::options:' show_grunt_path yes\n```\n\n----------------------------------------\n\nTITLE: Enabling the eza Plugin in Zsh\nDESCRIPTION: Adds the 'eza' plugin to the list of enabled plugins in the Oh My Zsh configuration file (`.zshrc`). This command needs to be placed within the `plugins` array definition.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... eza)\n```\n\n----------------------------------------\n\nTITLE: Directory Navigation Example Commands\nDESCRIPTION: Example sequence of commands demonstrating the directory navigation pattern that builds up the directory stack.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd ~\ncd /usr\ncd share\ncd doc\n```\n\n----------------------------------------\n\nTITLE: Enabling Watson Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to add the Watson plugin to the plugins array in the zshrc file. This enables Watson command completion in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/watson/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... watson)\n```\n\n----------------------------------------\n\nTITLE: Adding CodeClimate Plugin to Zsh Plugins Array\nDESCRIPTION: This snippet shows how to modify the Zsh configuration to include the CodeClimate plugin for CLI autocompletion. Ensure your .zshrc file is editable and that the CodeClimate CLI is installed. The plugins array should already exist in your .zshrc, with other plugins included as needed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/codeclimate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... codeclimate)\n```\n\n----------------------------------------\n\nTITLE: Enabling ssh-agent plugin in oh-my-zsh\nDESCRIPTION: Add ssh-agent to your plugins array in your zshrc file to enable the plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ssh-agent)\n```\n\n----------------------------------------\n\nTITLE: Loading Tmux Plugin in Zsh Configuration\nDESCRIPTION: Shows how to enable the tmux plugin by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tmux/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... tmux)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zsh Completion Caching via zstyle\nDESCRIPTION: Configures the Zsh completion system to use caching by setting the `use-cache` style to `yes` for all completions (`:completion:*`). This setting should be placed in the `.zshrc` file to improve completion performance for plugins like grunt.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':completion:*' use-cache yes\n```\n\n----------------------------------------\n\nTITLE: Setting LANDO_ZSH_SITES_DIRECTORY Variable\nDESCRIPTION: This snippet configures the directory path where the plugin will stop searching for the .lando.yml or equivalent configuration file. Users should set this variable to point to a directory, ensuring it aligns with their project's structure.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nLANDO_ZSH_SITES_DIRECTORY=\"$HOME/Code\"\n```\n\n----------------------------------------\n\nTITLE: Basic scd Command Syntax\nDESCRIPTION: Shows the basic command syntax for the scd function including optional patterns and parameters.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nscd [options] [pattern1 pattern2 ...]\n```\n\n----------------------------------------\n\nTITLE: Rebinding DirCycle Functions to Custom Keys\nDESCRIPTION: This code shows how to rebind the DirCycle functions to alternative key sequences (Alt+Shift+arrow keys) in xterm-256color.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nbindkey '^[[1;4D' insert-cycledleft\nbindkey '^[[1;4C' insert-cycledright\nbindkey \"\\e[1;4A\" insert-cycledup\nbindkey \"\\e[1;4B\" insert-cycleddown\n```\n\n----------------------------------------\n\nTITLE: Enabling Celery Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to add the Celery plugin to the plugins array in the zshrc file. This enables Celery completion functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/celery/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... celery)\n```\n\n----------------------------------------\n\nTITLE: Using Tab Completion with the wake Command\nDESCRIPTION: Shows how to use tab completion to see available device names that can be woken up with the wake command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ wake <tab>\n```\n\n----------------------------------------\n\nTITLE: Enabling Unique Search Results - Zsh - Shell\nDESCRIPTION: Sets the HIST_SUBSTRING_SEARCH_ENSURE_UNIQUE shell variable to enable unique search results when using history-substring-search in Zsh. Requires the plugin script to be loaded. This ensures that only unique entries are shown when cycling through history searches. Input is an environment variable assignment; no output is produced except for altering command search behavior.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nHISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1\n```\n\n----------------------------------------\n\nTITLE: Enabling Homebrew Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the Homebrew plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'brew' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/brew/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... brew)\n```\n\n----------------------------------------\n\nTITLE: Enabling Apache2 MacPorts Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to enable the apache2-macports plugin in the Oh My Zsh configuration file. It demonstrates adding the plugin name to the plugins array in the user's zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/apache2-macports/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... apache2-macports)\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying the Mouse Face Emoji in Zsh\nDESCRIPTION: Provides a specific example of displaying an emoji. It uses the `$emoji` associative array, provided by the plugin, to retrieve and print the mouse face emoji (🐭) to the standard output.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$> echo $emoji[mouse_face]\n```\n\n----------------------------------------\n\nTITLE: Adding the UFW Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to enable the UFW plugin in the Oh My Zsh configuration by adding it to the plugins array in the user's zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ufw/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ufw)\n```\n\n----------------------------------------\n\nTITLE: Enabling n98-magerun Plugin in Zsh\nDESCRIPTION: This snippet demonstrates how to enable the n98-magerun plugin by adding it to the plugins array in the zshrc configuration file. This setup allows the use of predefined aliases and completion features for n98-magerun commands in Zsh. Prerequisite: OhMyZsh installation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/n98-magerun/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... n98-magerun)\n```\n\n----------------------------------------\n\nTITLE: Enabling 1Password Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the 1Password plugin to the list of plugins in the .zshrc file. This is required to enable the plugin's functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/1password/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... 1password)\n```\n\n----------------------------------------\n\nTITLE: Enabling Oh My Zsh Grunt Plugin in Zsh\nDESCRIPTION: Adds the 'grunt' plugin to the Oh My Zsh plugins array within the `.zshrc` configuration file. This makes the grunt completions and potentially other plugin features available in the Zsh shell. The `...` indicates other plugins might already be present.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... grunt)\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example for Path Shrinking\nDESCRIPTION: Example directory tree used to demonstrate how the shrink-path plugin behaves with different options.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n/home/\n  me/\n    f o o/     # The prefix f is ambiguous between \"f o o\" and \"f i g\".\n      bar/\n        quux/\n      biz/     # The prefix b is ambiguous between bar and biz.\n    f i g/\n      baz/\n```\n\n----------------------------------------\n\nTITLE: Enabling Toolbox Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the toolbox plugin to the plugins array in the .zshrc file, enabling its functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/toolbox/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... toolbox)\n```\n\n----------------------------------------\n\nTITLE: Configuring tmux-cssh Plugin in oh-my-zsh\nDESCRIPTION: This code snippet demonstrates how to enable the tmux-cssh plugin by adding it to the plugins array in the .zshrc configuration file. The plugin provides autocompletion for the tmux-cssh command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tmux-cssh/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... tmux-cssh)\n```\n\n----------------------------------------\n\nTITLE: Adding the SVN-Fast-Info Plugin to Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to add the svn-fast-info plugin to the Oh My Zsh plugins array in your zshrc file, enabling its functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn-fast-info/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... svn-fast-info)\n```\n\n----------------------------------------\n\nTITLE: Installing OpenShift CLI using Homebrew\nDESCRIPTION: Installs the `openshift-cli` package, which provides the `oc` command-line tool, using Homebrew on macOS. This is necessary if you want to use `kube-ps1` with OpenShift clusters via the `oc` binary.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nbrew install openshift-cli\n```\n\n----------------------------------------\n\nTITLE: Installing the TLDR Plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to enable the tldr plugin by adding it to the plugins array in your zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tldr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... tldr)\n```\n\n----------------------------------------\n\nTITLE: Bundling zsh-history-substring-search with antigen (Zsh)\nDESCRIPTION: Configures the antigen plugin manager within ~/.zshrc to bundle the 'zsh-users/zsh-history-substring-search' plugin. This line should be added before the 'antigen apply' command. The 'antigen apply' command then processes the configuration and loads the specified plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\nantigen bundle zsh-users/zsh-history-substring-search\nantigen apply\n```\n\n----------------------------------------\n\nTITLE: Enabling autopep8 Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the autopep8 plugin to the plugins array in the zshrc file. This enables the autopep8 completion functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/autopep8/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... autopep8)\n```\n\n----------------------------------------\n\nTITLE: Enabling the 'pj' Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh snippet shows how to add the 'pj' plugin to the `plugins` array in your `.zshrc` file to enable its functionality within Oh My Zsh. This step is necessary before using the `pj` or `pjo` commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pj/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pj)\n```\n\n----------------------------------------\n\nTITLE: Enabling Foot Plugin in Oh My Zsh via .zshrc - Zsh\nDESCRIPTION: This snippet shows how to add the 'foot' plugin to your list of active Oh My Zsh plugins by editing the .zshrc configuration file. The 'plugins' array should include 'foot' alongside any other plugins in use. No external dependencies beyond Oh My Zsh and the foot plugin are required. After modification, restarting your terminal session will load the plugin and enable its features.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/foot/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... foot)\n```\n\n----------------------------------------\n\nTITLE: Customizing Namespace Display in kube-ps1\nDESCRIPTION: Defines a shell function `get_namespace_upper` that converts the provided namespace name (input as `$1`) to uppercase using `tr`. It then exports the `KUBE_PS1_NAMESPACE_FUNCTION` environment variable set to the function's name, instructing `kube-ps1` to use this custom logic for displaying the namespace in the prompt. The function must be defined before `kube_ps1` is called.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nfunction get_namespace_upper() {\n    echo \"$1\" | tr '[:lower:]' '[:upper:]'\n}\n\nexport KUBE_PS1_NAMESPACE_FUNCTION=get_namespace_upper\n```\n\n----------------------------------------\n\nTITLE: Using 'qrcode' Alias for Text QR Code Generation (Shell)\nDESCRIPTION: Invokes the `qrcode` alias with the desired text (replace `[text]` with actual content). This alias executes `curl -d \"text\" qrcode.show`, sending the text to the qrcode.show service via a POST request to generate and display a text-based QR code in the terminal. Requires the `curl` utility to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nqrcode [text]\n```\n\n----------------------------------------\n\nTITLE: Adding the Spring Boot Plugin to Oh-My-Zsh\nDESCRIPTION: Configuration snippet that shows how to enable the Spring Boot plugin in your .zshrc file by adding it to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/spring/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... spring)\n```\n\n----------------------------------------\n\nTITLE: Adding zbell Plugin to Oh My Zsh\nDESCRIPTION: Code snippet showing how to add the zbell plugin to the plugins array in your zshrc file to enable it.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zbell/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... zbell)\n```\n\n----------------------------------------\n\nTITLE: Adding Menu Selection to Completion System\nDESCRIPTION: Zstyle configuration to enable menu selection for completion, providing a nicer visual interface when using tab completion with Zsh-z.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nzstyle ':completion:*' menu select\n```\n\n----------------------------------------\n\nTITLE: Enabling svcat Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to enable the svcat plugin in the Oh My Zsh configuration file (zshrc). The plugin provides tab completion for the Kubernetes service catalog CLI commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svcat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... svcat)\n```\n\n----------------------------------------\n\nTITLE: Adding Symfony Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Symfony plugin by adding it to the plugins array in the zshrc file. The ellipsis indicates that other plugins can be included alongside symfony.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/symfony/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... symfony)\n```\n\n----------------------------------------\n\nTITLE: Enabling Prezto Module Directory - Shell\nDESCRIPTION: This code configures Prezto's module directory path in the user's ~/.zpreztorc file using the zstyle utility. It ensures Prezto recognizes contributed modules stored in ~/.zprezto-contrib and is required for the system to find and load the Zsh-z module. The snippet should be placed among the initial style settings, and the line must be uncommented.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nzstyle ':prezto:load' pmodule-dirs $HOME/.zprezto-contrib\n```\n\n----------------------------------------\n\nTITLE: Loading the shrink-path Plugin in Zsh\nDESCRIPTION: Code snippet showing how to add the shrink-path plugin to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... shrink-path)\n```\n\n----------------------------------------\n\nTITLE: Loading zsh-history-substring-search with Zinit - Zsh - Shell\nDESCRIPTION: Illustrates two ways of loading the zsh-history-substring-search plugin using Zinit in .zshrc. The first zinit load command fetches the plugin from GitHub, and the zinit ice command sets loading options like waiting and running additional configuration functions. Requires Zinit and network access. Inputs are plugin repository identifiers and configuration flags; the outputs are that the plugin is installed and configured on shell start.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nzinit load 'zsh-users/zsh-history-substring-search\nzinit ice wait atload'_history_substring_search_config'\n```\n\n----------------------------------------\n\nTITLE: Displaying a Random Emoji in Zsh\nDESCRIPTION: Shows how to execute the `random_emoji` function, provided by the plugin, to print a single random Unicode emoji character from the entire collection to the standard output.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n$> random_emoji\n```\n\n----------------------------------------\n\nTITLE: Installing wd using Antigen\nDESCRIPTION: Configuration code to install the wd plugin using the Antigen plugin manager for zsh in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nantigen bundle mfaerevaag/wd\n```\n\n----------------------------------------\n\nTITLE: Using the cf command to compile Coffeescript in Zsh\nDESCRIPTION: Demonstrates how to use the 'cf' command provided by the Oh My Zsh Coffeescript plugin to compile Coffeescript code into JavaScript directly in the terminal.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/coffee/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\n$ cf 'if a then b else c'\nif (a) {\n  b;\n} else {\n  c;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding zoxide Plugin to Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the zoxide plugin to the plugins array in the .zshrc file. This enables the zoxide functionality in the Oh My Zsh environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zoxide/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... zoxide)\n```\n\n----------------------------------------\n\nTITLE: Setting Chroma Formatter for Terminal Output\nDESCRIPTION: This snippet demonstrates how to configure the Chroma formatter for 256-color terminal output using the ZSH_COLORIZE_CHROMA_FORMATTER environment variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_COLORIZE_CHROMA_FORMATTER=terminal256\n```\n\n----------------------------------------\n\nTITLE: Binding Arrow Keys via Terminfo Variables - Zsh - Shell\nDESCRIPTION: Binds history-substring-search functions to keys using terminfo variables, which may better accommodate terminal differences in key coding. Requires Zsh with terminfo support and the functions for history-substring-search present. Input: terminfo variable expansion in bindkey; Output: more portable key bindings.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nbindkey \"$terminfo[kcuu1]\" history-substring-search-up\nbindkey \"$terminfo[kcud1]\" history-substring-search-down\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying a Random Face Emoji in Zsh\nDESCRIPTION: Provides an example call to the `random_emoji` function, requesting a random emoji from the 'faces' group defined within the `$emoji_groups` variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\n$> random_emoji faces\n```\n\n----------------------------------------\n\nTITLE: Using Emojis in the Zsh Prompt (PROMPT variable)\nDESCRIPTION: Provides examples of customizing the Zsh prompt (`PROMPT` variable) using emojis provided by the plugin. It shows setting a static emoji via `$emoji`, using command substitution (`$(...)`) with `random_emoji` for a dynamic emoji, and assigning an emoji to a variable for reuse.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_12\n\nLANGUAGE: zsh\nCODE:\n```\nPROMPT=\"$emoji[penguin]  > \"\nPROMPT='$(random_emoji fruits)  > '\nsurfer=$emoji[surfer]\nPROMPT=\"$surfer  > \"\n```\n\n----------------------------------------\n\nTITLE: Adding Bun Plugin to Oh-My-Zsh Configuration\nDESCRIPTION: This snippet shows how to add the Bun plugin to the plugins array in your zshrc file to enable Bun completions in your shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bun/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... bun)\n```\n\n----------------------------------------\n\nTITLE: Enabling Knife Plugin in Oh My Zsh - zsh - Shell Scripting\nDESCRIPTION: This code snippet demonstrates how to include the knife plugin in the plugins array within the .zshrc configuration file for Oh My Zsh. By adding 'knife' to this array, users enable Knife-specific command completion functionality in their terminal. The array can contain multiple plugin names, and this change requires restarting or reloading the shell session for changes to take effect. No additional dependencies are needed beyond Oh My Zsh and the plugin itself.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/knife/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... knife)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fasd Plugin in Zshrc\nDESCRIPTION: This snippet shows how to add 'fasd' to the plugins array in the .zshrc configuration file for Oh My Zsh. This operation integrates Fasd as a shell plugin enhancing file navigation. The configuration requires the 'fasd' command-line tool to be installed before adding it to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fasd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fasd)\n```\n\n----------------------------------------\n\nTITLE: Directory History State Example\nDESCRIPTION: Example showing the internal state of directory history variables.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n➜  /usr typeset -pm dirhistory_\\*\ntypeset -ax dirhistory_past=( /home/user /usr )\ntypeset -ax dirhistory_future=( /usr/share/doc /usr/share )\n```\n\n----------------------------------------\n\nTITLE: Using a custom config file for wd\nDESCRIPTION: Command to specify a custom configuration file for wd instead of the default ~/.warprc, useful for testing.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_29\n\nLANGUAGE: zsh\nCODE:\n```\nwd --config ./file <command>\n```\n\n----------------------------------------\n\nTITLE: Cleaning invalid warp points\nDESCRIPTION: Command to remove warp points that point to non-existent directories. Requires confirmation unless --force is used.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_26\n\nLANGUAGE: zsh\nCODE:\n```\nwd clean\n```\n\n----------------------------------------\n\nTITLE: Configuring Emacs Plugin in Oh My Zsh\nDESCRIPTION: The code snippet shows the configuration required to add the Emacs plugin to the plugins array in the zshrc file. It requires knowledge of Zsh and assumes Emacs 24+ is available. This setup allows quick access to Emacs functionality using a set of aliases.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emacs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... emacs)\n```\n\n----------------------------------------\n\nTITLE: Named Colors Available for kube-ps1 Customization\nDESCRIPTION: Lists the standard color names (black, red, green, yellow, blue, magenta, cyan) that can be assigned as values to the various `KUBE_PS1_*_COLOR` environment variables for basic color customization of the prompt elements.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nblack, red, green, yellow, blue, magenta, cyan\n```\n\n----------------------------------------\n\nTITLE: Adding GRC Plugin to Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to add the Generic Colouriser plugin ('grc') to the plugins array in a Zsh configuration file ('zshrc') to enhance terminal command outputs with color. Pre-requisite includes having the 'grc' package installed on the system. This specifically modifies the Zsh configuration to utilize the color capabilities of the 'grc'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... grc)\n```\n\n----------------------------------------\n\nTITLE: Enabling Bundler Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the Bundler plugin to the Oh My Zsh configuration file. It demonstrates the syntax for including the plugin in the plugins array of the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bundler/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... bundler)\n```\n\n----------------------------------------\n\nTITLE: Integrating Homestead Plugin in Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to enable the Homestead plugin by adding it to the plugins array in the zshrc file. The plugin enhances command-line completion for Laravel's Homestead. Ensure you have Oh My Zsh installed with plugin management enabled.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/homestead/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... homestead)\n```\n\n----------------------------------------\n\nTITLE: Configuring JJ Plugin in Oh My Zsh\nDESCRIPTION: This snippet demonstrates how to add the jj plugin to your zshrc file to enable autocompletion for the Jujutsu CLI. For this setup, the jj plugin must be included in the plugins array of the zshrc file. This plugin enhances the shell with jj-specific capabilities.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jj/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jj)\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying a Random Fruit Emoji in Zsh\nDESCRIPTION: A concrete example of using the `random_emoji` function to display a random emoji specifically from the 'fruits' group. Requires the 'fruits' group to be defined in `$emoji_groups`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\n$> random_emoji fruits\n```\n\n----------------------------------------\n\nTITLE: Enabling the Juju Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to add the 'juju' plugin to the `plugins` array within the user's `.zshrc` file. This step is necessary to activate the aliases and functions provided by the Oh My Zsh juju plugin. Requires Oh My Zsh to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/juju/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... juju)\n```\n\n----------------------------------------\n\nTITLE: Listing Active Prezto Modules for Loading - Shell\nDESCRIPTION: This snippet defines the set of Prezto modules to load via zstyle in ~/.zpreztorc. Each module is listed as a single-quoted string, using a backslash to indicate continuation. The configuration determines which functionalities are enabled in the shell; users extend it to include Zsh-z by adding 'zsh-z' as shown elsewhere.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nzstyle ':prezto:load' pmodule \\\n    'environment' \\\n    'terminal' \\\n    'editor' \\\n    'history' \\\n    'directory' \\\n    'spectrum' \\\n    'utility' \\\n    'completion' \\\n    'prompt'\n```\n\n----------------------------------------\n\nTITLE: Setting up jenv Plugin in Zsh Configuration\nDESCRIPTION: This code snippet shows how to include the jenv plugin in your Zsh configuration by adding it to the plugins array. This step is necessary to initialize jenv and use its features in your Zsh environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jenv)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Dnote Book Name Completion\nDESCRIPTION: Shows how to use tab completion to view books that start with 'j' in Dnote.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n$ dnote view j(press <TAB> here)\n```\n\n----------------------------------------\n\nTITLE: Example: Displaying a Random Animal Emoji in Zsh\nDESCRIPTION: A specific example demonstrating the `random_emoji` function retrieving and printing a random emoji from the 'animals' group, as defined in `$emoji_groups`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\n$> random_emoji animals\n```\n\n----------------------------------------\n\nTITLE: Configuring Oh My Zsh Plugins Array (Zsh)\nDESCRIPTION: This snippet demonstrates how to add the 'octozen' plugin to the plugins array in a Zsh configuration file. Activating the plugin will invoke the display_octozen function to fetch and display a GitHub Octocat zen quote during shell startup. Requires an active internet connection for the fetch operation, which times out after two seconds. No additional dependencies except a functioning Oh My Zsh setup are needed. Inputs: the desired plugins list. Outputs: zen quote display upon terminal startup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/octozen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... octozen)\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Automatic Virtualenv Activation in Git Repositories\nDESCRIPTION: Example showing how virtualenvs are automatically activated when navigating into git repositories with matching names and deactivated when leaving them.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n➜  github $ cd ansible\n(ansible) ➜  ansible git:(devel) $ cd docs\n(ansible) ➜  docs git:(devel) $ cd ..\n(ansible) ➜  ansible git:(devel) $ cd ..\n➜  github $\n```\n\n----------------------------------------\n\nTITLE: Configuring Heroku-alias Plugin in oh-my-zsh - Zsh\nDESCRIPTION: This snippet demonstrates how to add the 'heroku-alias' plugin to the oh-my-zsh plugins array in a Zsh configuration file (zshrc). This is a prerequisite for using the custom Heroku CLI aliases defined by the plugin. The user must edit their zshrc file and include 'heroku-alias' in the plugins list; upon restarting the shell, the new aliases become available globally. No additional parameters are required beyond editing the configuration file. The only dependency is oh-my-zsh and the Heroku CLI installed on the system.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/heroku-alias/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... heroku-alias)\n```\n\n----------------------------------------\n\nTITLE: Enabling the 'oc' Plugin in Oh My Zsh Configuration (Bash/Zsh)\nDESCRIPTION: This configuration snippet demonstrates how to activate the 'oc' plugin within the Oh My Zsh framework by adding 'oc' to the plugins array in the user's `.zshrc` file. This enables autocompletion for OpenShift CLI commands. Requires Oh My Zsh to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/oc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... oc)\n```\n\n----------------------------------------\n\nTITLE: Binding Keys in Vicmd Mode for History Navigation - Zsh - Shell\nDESCRIPTION: Binds 'k' and 'j' keys in vicmd (vi command) mode to customize command history navigation using history-substring-search in Zsh. Requires plugin functions loaded and knowledge of vi key maps. Inputs: vicmd binding specifications; output: VI-style history navigation via substring search.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nbindkey -M vicmd 'k' history-substring-search-up\nbindkey -M vicmd 'j' history-substring-search-down\n```\n\n----------------------------------------\n\nTITLE: Configuring Ubuntu Plugin in Oh My Zsh\nDESCRIPTION: Shows how to enable the Ubuntu plugin by adding it to the plugins array in the zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ubuntu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ubuntu)\n```\n\n----------------------------------------\n\nTITLE: Adding mysql-macports Plugin to Oh My Zsh Configuration - Shell - zsh\nDESCRIPTION: This snippet demonstrates how to add the mysql-macports plugin to the plugins array in your .zshrc configuration file. It requires that Oh My Zsh is already installed and that MySQL is set up via MacPorts. The plugins array can contain multiple plugins, so the ellipsis (...) represents any other plugins the user may have enabled. After updating this line, restart your terminal or source the .zshrc file to enable the plugin and its aliases.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mysql-macports/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... mysql-macports)\n```\n\n----------------------------------------\n\nTITLE: Configuring GlassFish Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This code snippet demonstrates how to enable the GlassFish plugin by adding it to the plugins array in your zshrc configuration file. The plugin provides tab-completion support for the 'asadmin' command used in managing Oracle GlassFish servers. To apply the change, save the file and reload your shell or source the updated .zshrc; no additional dependencies are required aside from having Oh My Zsh installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/glassfish/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... glassfish)\n```\n\n----------------------------------------\n\nTITLE: Adding Vundle Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Vundle plugin in Oh My Zsh by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vundle/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... vundle)\n```\n\n----------------------------------------\n\nTITLE: Enabling gpg-agent Plugin in Oh My Zsh\nDESCRIPTION: This code snippet demonstrates how to activate the gpg-agent plugin in Oh My Zsh by adding it to the plugins array in the zshrc file. The gpg-agent manages private keys independently. Ensure that Oh My Zsh is correctly installed and configured.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gpg-agent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gpg-agent)\n```\n\n----------------------------------------\n\nTITLE: Traditional Escaped Rake Command Example\nDESCRIPTION: Shows the traditional way of running rake tasks with arguments using escaped square brackets, which the plugin helps avoid.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nrake namespace:task\\['argument'\\]\n```\n\n----------------------------------------\n\nTITLE: Enabling the transfer plugin in ohmyzsh\nDESCRIPTION: How to enable the transfer plugin by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... transfer)\n```\n\n----------------------------------------\n\nTITLE: Zim Installation Command - Shell\nDESCRIPTION: Running this shell command applies new .zimrc changes, downloading and enabling any new modules such as Zsh-z. Prerequisite is that zimfw is installed and executable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nzimfw install\n```\n\n----------------------------------------\n\nTITLE: Installing rbw Plugin in Oh My Zsh\nDESCRIPTION: Instructions for adding the rbw plugin to Oh My Zsh configuration by modifying the plugins array in zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbw/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rbw)\n```\n\n----------------------------------------\n\nTITLE: Defining Religion Emoji Unicode Characters\nDESCRIPTION: This snippet defines Unicode characters for various religious symbols and emojis. It includes both fully-qualified and unqualified versions for compatibility with different systems.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_52\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: religion\n1F6D0                                      ; fully-qualified     # 🛐 place of worship\n269B FE0F                                  ; fully-qualified     # ⚛️ atom symbol\n269B                                       ; unqualified         # ⚛ atom symbol\n1F549 FE0F                                 ; fully-qualified     # 🕉️ om\n1F549                                      ; unqualified         # 🕉 om\n2721 FE0F                                  ; fully-qualified     # ✡️ star of David\n2721                                       ; unqualified         # ✡ star of David\n2638 FE0F                                  ; fully-qualified     # ☸️ wheel of dharma\n2638                                       ; unqualified         # ☸ wheel of dharma\n262F FE0F                                  ; fully-qualified     # ☯️ yin yang\n262F                                       ; unqualified         # ☯ yin yang\n271D FE0F                                  ; fully-qualified     # ✝️ latin cross\n271D                                       ; unqualified         # ✝ latin cross\n2626 FE0F                                  ; fully-qualified     # ☦️ orthodox cross\n2626                                       ; unqualified         # ☦ orthodox cross\n262A FE0F                                  ; fully-qualified     # ☪️ star and crescent\n262A                                       ; unqualified         # ☪ star and crescent\n262E FE0F                                  ; fully-qualified     # ☮️ peace symbol\n262E                                       ; unqualified         # ☮ peace symbol\n1F54E                                      ; fully-qualified     # 🕎 menorah\n1F52F                                      ; fully-qualified     # 🔯 dotted six-pointed star\n```\n\n----------------------------------------\n\nTITLE: Remote Console Command Definition\nDESCRIPTION: Command for running Ruby console in production environment on a remote server, taking server and directory parameters.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rails/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nremote_console <server> <directory>\n```\n\n----------------------------------------\n\nTITLE: Using alias-finder with git status command\nDESCRIPTION: Usage example showing how alias-finder suggests the 'gst' alias when running the unaliased 'git status' command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n╭─tim@fox ~/repo/gitopolis ‹main› \n╰─$ git status\n\ngst='git status'         # <=== shorter suggestion from alias-finder\n\nOn branch main\nYour branch is up-to-date with 'origin/main'.\nnothing to commit, working tree clean\n```\n\n----------------------------------------\n\nTITLE: Adding Dnote Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Dnote plugin by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(dnote)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Droplr Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet shows how to enable the 'droplr' plugin by adding its name to the `$plugins` array within the `.zshrc` configuration file. This step is necessary to make the `droplr` command available in the Zsh shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/droplr/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... droplr)\n```\n\n----------------------------------------\n\nTITLE: Configuring Postgres Plugin in Oh My Zsh - Shell (zsh)\nDESCRIPTION: This snippet shows how to enable the Postgres plugin by adding it to the plugins list in the .zshrc configuration file. This enables a collection of Postgres-focused command aliases for shell usage. Prerequisites include having Oh My Zsh and Postgres (installed via Homebrew) set up on OSX. The plugins array must include 'postgres' for activation. Input is the edited plugins list; output is access to the defined Postgres aliases upon relaunching the shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/postgres/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... postgres)\n```\n\n----------------------------------------\n\nTITLE: Enabling the sfffe Plugin in Oh My Zsh (zsh)\nDESCRIPTION: Shows how to add the 'sfffe' plugin to the plugins array in the .zshrc file to activate its functionality within an Oh My Zsh environment. This enables the use of functions like ajs, acss, fjs, and fcss, which require the 'ack' tool to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sfffe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sfffe)\n```\n\n----------------------------------------\n\nTITLE: Cloning Zsh-z Plugin with Git - Shell\nDESCRIPTION: This snippet demonstrates how to clone the Zsh-z repository into the custom module directory for prezto users using the git command-line tool. It assumes git is installed and the ~/.zprezto-contrib directory exists or will be created. The result is a local copy of the zsh-z plugin for manual management and activation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/agkozak/zsh-z.git ~/.zprezto-contrib/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Enabling Tugboat Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the Tugboat plugin to the plugins array in the Oh My Zsh configuration file. It enables autocompletion for Tugboat commands in the Zsh shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tugboat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... tugboat)\n```\n\n----------------------------------------\n\nTITLE: Clearing Grunt Completion Cache and Restarting Zsh\nDESCRIPTION: Provides the necessary commands to apply changes made to `zstyle` settings for grunt completions. `rm ~/.zcompcache/grunt` removes the specific cache file for grunt, and `exec zsh` replaces the current shell process with a new one, effectively restarting Zsh and loading the updated configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grunt/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\n$ rm ~/.zcompcache/grunt\n$ exec zsh\n```\n\n----------------------------------------\n\nTITLE: Listing Emojis from the 'faces' Group in Zsh\nDESCRIPTION: Example of using the `display_emoji` function with a group name ('faces') as an argument. It lists only the emoji characters and their names that belong to the specified group.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_10\n\nLANGUAGE: zsh\nCODE:\n```\n$> display_emoji faces\n```\n\n----------------------------------------\n\nTITLE: Installing the copyfile plugin in Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to enable the copyfile plugin in Oh My Zsh by adding it to the plugins array in your .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/copyfile/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... copyfile)\n```\n\n----------------------------------------\n\nTITLE: Installing and Activating Plugins with Zplug - Shell\nDESCRIPTION: These commands install and then load any Zplug-managed plugins, including Zsh-z if registered. Run manually after updating .zshrc configuration lines.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nzplug install\nzplug load\n```\n\n----------------------------------------\n\nTITLE: Adding Doctl Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Doctl plugin by adding it to the plugins array in the zshrc configuration file. The ellipsis indicates preservation of any existing plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/doctl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... doctl)\n```\n\n----------------------------------------\n\nTITLE: Configuring Gem Plugin for Oh My Zsh - Zsh\nDESCRIPTION: Demonstrates how to enable the Gem plugin by adding it to the plugins array within a .zshrc configuration file. No external dependencies beyond Oh My Zsh are required. The plugins array can contain multiple plugin names; in this example, \\\"gem\\\" is added to enable Rubygems-specific completions and aliases.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gem/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gem)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fabric Plugin in Zshrc\nDESCRIPTION: The snippet shows how to add the Fabric plugin to the plugins array of the Zsh configuration file. This configuration is necessary for Zsh to provide command completion functionality for Fabric. No additional dependencies are required apart from having Fabric installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fabric/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fabric)\n```\n\n----------------------------------------\n\nTITLE: Enabling Tailscale Plugin in Oh My Zsh\nDESCRIPTION: This code snippet shows how to add the Tailscale plugin to the plugins array in your zshrc file to enable command completion for the Tailscale CLI tool.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tailscale/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nplugins=(... tailscale)\n```\n\n----------------------------------------\n\nTITLE: Configuring Fastfile Plugin in Zsh\nDESCRIPTION: This snippet shows how to add the Fastfile plugin to the Oh My Zsh configuration by including it in the plugins array in the zshrc file. The syntax `plugins=(... fastfile)` is used within the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fastfile/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fastfile)\n```\n\n----------------------------------------\n\nTITLE: Installing kube-ps1 via Homebrew on macOS\nDESCRIPTION: Updates Homebrew package lists and installs the `kube-ps1` package. This is the recommended installation method for macOS users. Requires Homebrew to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n$ brew update\n$ brew install kube-ps1\n```\n\n----------------------------------------\n\nTITLE: Configuring Colemak Plugin in Zsh\nDESCRIPTION: This snippet provides the configuration steps to enable the Colemak plugin and vi mode in Zsh. It requires editing the `~/.zshrc` file to include the plugin and bind the vi mode key. The input must be the `~/.zshrc` file and the output is the customized Zsh environment with Colemak layout support.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colemak/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... colemak)\n```\n\nLANGUAGE: shell\nCODE:\n```\nbindkey -v\n```\n\n----------------------------------------\n\nTITLE: Enabling the repo Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the repo plugin to the plugins array in your zshrc file to enable its functionality. Once added, all the repo-related aliases and autocompletion will become available.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/repo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... repo)\n```\n\n----------------------------------------\n\nTITLE: Samtools Plugin README Documentation\nDESCRIPTION: Documentation explaining the samtools plugin functionality for Oh My Zsh, which provides command autocompletion for the samtools bioinformatics toolkit.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/samtools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Samtools plugin\n\nThis plugin adds support for [samtools](http://www.htslib.org/):\n\n* Adds autocomplete options for all samtools sub commands.\n```\n\n----------------------------------------\n\nTITLE: Adding Chuck Norris Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Chuck Norris plugin by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chucknorris/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... chucknorris)\n```\n\n----------------------------------------\n\nTITLE: Installing Torrent Plugin in Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to enable the torrent plugin in the Oh My Zsh framework by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/torrent/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... torrent)\n```\n\n----------------------------------------\n\nTITLE: Adding Xcode Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the Xcode plugin to your Oh My Zsh configuration by modifying the plugins array in your .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/xcode/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... xcode)\n```\n\n----------------------------------------\n\nTITLE: Snap Command Aliases in Markdown Table\nDESCRIPTION: A markdown table defining the mapping between short aliases and their corresponding snap commands. These aliases provide shortcuts for common operations like version checking, package finding, installation, removal, and package management.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/snap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Alias | Full command |\n| --- | ---|\n| sv | snap version |\n| sf | snap find |\n| si | snap install |\n| sin | snap info |\n| sr | snap remove |\n| sref | snap refresh |\n| srev | snap revert |\n| sl | snap list |\n| sd | snap disable |\n| se | snap enable |\n```\n\n----------------------------------------\n\nTITLE: Enabling the Scaleway CLI Plugin in Oh My Zsh\nDESCRIPTION: This code snippet shows how to add the Scaleway CLI plugin to the plugins array in your zshrc configuration file. This enables command completion for the Scaleway CLI tool.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scw/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... scw)\n```\n\n----------------------------------------\n\nTITLE: Directory Navigation Example with dirs Command\nDESCRIPTION: This example demonstrates navigating through directories and viewing the directory stack with the dirs -v command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n~$ cd Projects\n~/Projects$ cd Hacktoberfest\n~/Projects/Hacktoberfest$ cd oh-my-zsh\n~/Projects/Hacktoberfest/oh-my-zsh$ dirs -v\n0       ~/Projects/Hacktoberfest/oh-my-zsh\n1       ~/Projects/Hacktoberfest\n2       ~/Projects\n3       ~\n```\n\n----------------------------------------\n\nTITLE: Enabling Grails Plugin in Oh My Zsh Configuration - Zsh\nDESCRIPTION: This code snippet instructs users to activate the Grails plugin by including it in the plugins array within their .zshrc file. No external dependencies are required beyond Oh My Zsh and the Grails plugin. The 'plugins' array determines which plugins are loaded for Zsh; adding 'grails' enables command completion for Grails CLI commands. Users may include 'grails' alongside other plugins as needed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/grails/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... grails)\n```\n\n----------------------------------------\n\nTITLE: Configuring Emotty Plugin in Zsh\nDESCRIPTION: To configure the emotty plugin, add 'emotty' to the plugins array in the .zshrc file. This configuration is necessary to enable the plugin's functionality in the Zsh prompt. Ensure the emoji plugin is also installed, as it is a prerequisite.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emotty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... emotty)\n```\n\n----------------------------------------\n\nTITLE: Example kube-ps1 Output When Context is Not Set\nDESCRIPTION: Displays the prompt structure shown by `kube-ps1` when the `kubectl` current-context is not set or cannot be determined via the configured binary. `<symbol>` represents the configured or default symbol.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n(<symbol>|N/A:N/A)\n```\n\n----------------------------------------\n\nTITLE: Loading SUSE Plugin in Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to enable the SUSE plugin in Oh My Zsh by adding it to the plugins array in .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/suse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... suse)\n```\n\n----------------------------------------\n\nTITLE: Loading Zsh-z with Zim Plugin Manager - Shell\nDESCRIPTION: This snippet registers the Zsh-z plugin as a Zim module in the user's .zimrc file. It points to the GitHub URL, allowing Zim to download and keep the plugin updated. Requires running zimfw install afterwards for activation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nzmodule https://github.com/agkozak/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Enabling JFrog Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh configuration snippet demonstrates how to activate the `jfrog` plugin within the Oh My Zsh framework. By adding `jfrog` to the `plugins` array in the user's `.zshrc` file, Zsh will load the plugin upon startup, enabling command-line completion features for the JFrog CLI. The ellipsis (`...`) represents other potential plugins already present in the configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jfrog/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jfrog)\n```\n\n----------------------------------------\n\nTITLE: Reloading Zsh Shell Session - Shell\nDESCRIPTION: Runs the Zsh shell executable, typically after updating .zshrc or plugins, to apply new configuration to the current session. No dependencies beyond Zsh; no input or output parameters. Limitations: All unsaved shell state is lost and subshells may be spawned if not run as exec.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nexec zsh\n```\n\n----------------------------------------\n\nTITLE: Installing RVM Plugin in Oh My Zsh\nDESCRIPTION: Configuration snippet showing how to enable the RVM plugin in Oh My Zsh by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rvm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rvm)\n```\n\n----------------------------------------\n\nTITLE: Initializing Fortune Data with strfile Command\nDESCRIPTION: Command to generate the fortune database for the Chuck Norris quotes after installing the fortune program.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chucknorris/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nstrfile $ZSH/plugins/chucknorris/fortunes/chucknorris\\n\n```\n\n----------------------------------------\n\nTITLE: Expanding Glob Range Expression in Zsh\nDESCRIPTION: This example demonstrates how the 'globalias' plugin expands a numeric range glob expression. Typing `touch {1..10}` followed by the SPACE key automatically expands the command to `touch 1 2 3 4 5 6 7 8 9 10`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/globalias/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ touch {1..10}<space>\n# expands to\n$ touch 1 2 3 4 5 6 7 8 9 10\n```\n\n----------------------------------------\n\nTITLE: Adding vagrant-prompt Plugin to Oh My Zsh\nDESCRIPTION: Shows how to enable the vagrant-prompt plugin in the Oh My Zsh configuration file by adding it to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant-prompt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... vagrant-prompt)\n```\n\n----------------------------------------\n\nTITLE: Installing Conda Plugin in Oh My Zsh\nDESCRIPTION: Instructions for enabling the conda plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/conda/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... conda)\n```\n\n----------------------------------------\n\nTITLE: Configuring Group Ownership Display ('show-group') in Zsh\nDESCRIPTION: Sets the 'show-group' option for the eza plugin using `zstyle`. Setting it to 'yes' (the default) makes the plugin always add the `-g` flag to `eza` commands, displaying the group ownership of files. Setting it to 'no' omits this flag. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'show-group' yes|no\n```\n\n----------------------------------------\n\nTITLE: Adding Ant Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Ant plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file. The plugin caches ant targets in a .ant_targets file for improved performance.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ant/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ant)\n```\n\n----------------------------------------\n\nTITLE: Binding Control Keys in Emacs Mode - Zsh - Shell\nDESCRIPTION: Shows how to bind Control-P and Control-N specifically in emacs keymap mode to facilitate up/down history navigation with history-substring-search. Requires history-substring-search functions loaded into Zsh. Input: emacs keymap specifications and key codes; Output: customized history navigation in emacs editing mode.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nbindkey -M emacs '^P' history-substring-search-up\nbindkey -M emacs '^N' history-substring-search-down\n```\n\n----------------------------------------\n\nTITLE: Installing Termux API Package for Battery Plugin on Android\nDESCRIPTION: This command installs the termux-api package within Termux on Android. It's required for the battery plugin to function correctly on Android devices using Termux.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npkg install termux-api\n```\n\n----------------------------------------\n\nTITLE: Configuring Yii Plugin in Oh My Zsh\nDESCRIPTION: This code snippet shows how to enable the Yii plugin by adding it to the plugins array in the zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yii/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... yii)\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins Array in Oh My Zsh - Zsh\nDESCRIPTION: This snippet demonstrates how to add the Hanami plugin to the plugins array in your .zshrc file, enabling the use of provided Hanami aliases in your terminal. Requires Oh My Zsh to be installed; no additional dependencies are necessary beyond the plugin repository. The plugins array can include multiple entries, with 'hanami' appended to activate this plugin's features.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hanami/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... hanami)\n```\n\n----------------------------------------\n\nTITLE: Fixing Underline in tmux/screen via Terminfo (Shell)\nDESCRIPTION: This shell command provides a fix for potential underline display issues in terminals identified as `screen-256color` (common in tmux/screen). It retrieves the existing terminfo entry using `infocmp`, modifies the `ncv` capability to disable specific video attributes (like underline limitations), and compiles the modified entry using `tic`, storing it in `~/.terminfo`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\n{ infocmp -x screen-256color; printf '\\t%s\\n' 'ncv@,'; } > /tmp/t && tic -x /tmp/t\n```\n\n----------------------------------------\n\nTITLE: Plugin Configuration ohmyzsh\nDESCRIPTION: This snippet shows how to enable the emoji-clock plugin by adding it to the plugins array in the zshrc file. The plugin displays the current time using a clock emoji with precision up to half an hour. No additional dependencies are required; just insert the plugin name into the array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji-clock/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nplugins=(... emoji-clock)\n```\n\n----------------------------------------\n\nTITLE: Enabling pm2 Plugin in oh-my-zsh Configuration (zsh)\nDESCRIPTION: This snippet demonstrates how to enable the pm2 plugin by modifying the plugins array in your .zshrc file. Users must add 'pm2' as an entry to activate the plugin and gain access to its aliases and completions. The plugins array can contain multiple plugin names within the parentheses.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pm2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pm2)\n```\n\n----------------------------------------\n\nTITLE: Configuring Sublime Text Plugin in Oh My Zsh\nDESCRIPTION: This code shows how to enable the Sublime Text plugin by adding it to the plugins array in your zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sublime/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sublime)\n```\n\n----------------------------------------\n\nTITLE: Adding Buf Plugin to Oh My Zsh Configuration\nDESCRIPTION: Instructions for enabling the Buf plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file. This enables command completion for the Buf CLI tool which is used for working with Protocol Buffers.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/buf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... buf)\n```\n\n----------------------------------------\n\nTITLE: Configuring Git Status Display ('git-status') in Zsh\nDESCRIPTION: Sets the 'git-status' option for the eza plugin using `zstyle`. Setting it to 'yes' makes the plugin always add the `--git` flag to `eza` commands, showing Git status for tracked files/repositories. The default is 'no'. This configuration must be set before Oh My Zsh loads plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/eza/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:eza' 'git-status' yes|no\n```\n\n----------------------------------------\n\nTITLE: Restarting the Zsh Shell\nDESCRIPTION: This command restarts the Zsh shell to apply changes after enabling the DirCycle plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dircycle/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nexec zsh\n```\n\n----------------------------------------\n\nTITLE: Setting up keybinding for wd browse feature\nDESCRIPTION: Configuration to add to .zshrc to set up a keyboard shortcut (Ctrl+B by default) for the fzf-powered browse feature of wd.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_14\n\nLANGUAGE: zsh\nCODE:\n```\n# ctrl-b to open the fzf browser\nbindkey ${FZF_WD_BINDKEY:-'^B'} wd_browse_widget\n```\n\n----------------------------------------\n\nTITLE: Adding Hitchhiker Plugin to Oh My Zsh\nDESCRIPTION: This snippet shows how to add the hitchhiker plugin to the list of plugins in the Zsh configuration file. It is necessary to include it in the plugins array for activation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hitchhiker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... hitchhiker)\n```\n\n----------------------------------------\n\nTITLE: Commit Message with Issue Reference Example\nDESCRIPTION: Example of referencing issues in commit messages to automatically link them in the changelog.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(archlinux): add support for aura AUR helper (#9467)\n```\n\n----------------------------------------\n\nTITLE: Enabling Kitty Plugin in Oh My Zsh Configuration (Zsh)\nDESCRIPTION: This configuration snippet shows how to enable the Kitty plugin within Oh My Zsh by adding its name (`kitty`) to the `plugins` array in the user's `.zshrc` file. The `...` indicates that other plugins might already be present in the array. Activating this plugin makes its specific aliases and functions available in the shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kitty/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... kitty)\n```\n\n----------------------------------------\n\nTITLE: Disabling Pipenv Auto-Shell Activation in Oh My Zsh (Zsh)\nDESCRIPTION: This configuration snippet demonstrates how to disable the automatic activation and deactivation of the Pipenv virtual environment shell managed by the plugin. Setting the `auto-shell` zstyle for the `:omz:plugins:pipenv` context to `no` in the `.zshrc` file, before sourcing Oh My Zsh itself, prevents the plugin from automatically entering or exiting the pipenv shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pipenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle ':omz:plugins:pipenv' auto-shell no\n```\n\n----------------------------------------\n\nTITLE: Activating the Leiningen Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh code snippet demonstrates how to enable the Leiningen plugin for Oh My Zsh. It involves editing the `.zshrc` file and adding the string `lein` to the `plugins` array, which activates the Leiningen-specific completions in the Zsh shell. Ensure Oh My Zsh is installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lein/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... lein)\n```\n\n----------------------------------------\n\nTITLE: Loading Zsh-z with Zgen Plugin Manager - Shell\nDESCRIPTION: This code snippet is intended for use in .zshrc files managed by zgen. Adding it above the zgen save call ensures the Zsh-z plugin is loaded each session. Dependencies include Zgen and access to GitHub repositories. To fully activate, run zgen reset and restart the shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nzgen load agkozak/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Installing rbenv Plugin in Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the rbenv plugin by adding it to the plugins array in the zshrc configuration file. This enables Ruby version and gemset information in the shell prompt.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rbenv)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Human Gesture Emojis\nDESCRIPTION: Defines Unicode code point sequences for emojis representing human gestures with gender and skin tone modifiers. Each sequence includes the base emoji code point followed by optional skin tone and gender modifier code points.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_17\n\nLANGUAGE: unicode\nCODE:\n```\n1F9CF 200D 2642 FE0F                       ; fully-qualified     # 🧏‍♂️ deaf man\n1F9CF 200D 2642                            ; minimally-qualified # 🧏‍♂ deaf man\n1F9CF 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧏🏻‍♂️ deaf man: light skin tone\n1F9CF 1F3FB 200D 2642                      ; minimally-qualified # 🧏🏻‍♂ deaf man: light skin tone\n1F647                                      ; fully-qualified     # 🙇 person bowing\n1F926                                      ; fully-qualified     # 🤦 person facepalming\n1F937                                      ; fully-qualified     # 🤷 person shrugging\n```\n\n----------------------------------------\n\nTITLE: Enabling chruby Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the chruby plugin to the plugins array in the zshrc file. This enables the plugin's functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chruby/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... chruby)\n```\n\n----------------------------------------\n\nTITLE: Installing Symfony2 Plugin in Oh My Zsh\nDESCRIPTION: Instructions for enabling the Symfony2 plugin in Oh My Zsh by adding it to the plugins array in the zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/symfony2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... symfony2)\n```\n\n----------------------------------------\n\nTITLE: Enabling Systemadmin Plugin in Oh My Zsh\nDESCRIPTION: This code snippet shows how to enable the Systemadmin plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding the 'systemadmin' plugin to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemadmin/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... systemadmin)\n```\n\n----------------------------------------\n\nTITLE: Configuring Oh My Zsh Plugins Array (Zsh)\nDESCRIPTION: This Zsh code snippet demonstrates how to enable the `lpass` plugin within an Oh My Zsh configuration. Users need to add `lpass` to the `plugins` array in their `.zshrc` file. This modification instructs Oh My Zsh to load the specified plugin upon shell startup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lpass/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... lpass)\n```\n\n----------------------------------------\n\nTITLE: Warping back to previous directories\nDESCRIPTION: Commands to navigate back to previous directories using dot syntax, which is a wrapper for the zsh dirs function.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_20\n\nLANGUAGE: zsh\nCODE:\n```\nwd ..\nwd ...\n```\n\n----------------------------------------\n\nTITLE: Activating Zsh-z Module in Prezto - Shell\nDESCRIPTION: This updated snippet adds 'zsh-z' to the end of the Prezto module loading list, ensuring the plugin is included and initialized on shell startup. Preserve the backslash at the end of the previous line to allow adding new modules. Edit ~/.zpreztorc or equivalent files accordingly.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nzstyle ':prezto:load' pmodule \\\n    'environment' \\\n    'terminal' \\\n    'editor' \\\n    'history' \\\n    'directory' \\\n    'spectrum' \\\n    'utility' \\\n    'completion' \\\n    'prompt' \\\n    'zsh-z'\n```\n\n----------------------------------------\n\nTITLE: Enabling Pass Plugin in Oh My Zsh - Shell\nDESCRIPTION: Demonstrates how to add the 'pass' plugin to the list of enabled plugins in the Oh My Zsh configuration. This step is necessary to activate password manager completion features. No additional dependencies are required beyond Oh My Zsh itself; the snippet should be placed in the '.zshrc' file, replacing '...' with any other desired plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pass/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... pass)\n```\n\n----------------------------------------\n\nTITLE: Enabling Scala Plugin in Oh My Zsh Configuration\nDESCRIPTION: Configuration snippet showing how to enable the Scala plugin in Oh My Zsh by adding it to the plugins array in the zshrc file\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/scala/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... scala)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Human Activity Emoji with Gender and Skin Tone Modifiers\nDESCRIPTION: This code snippet defines Unicode code point sequences for various human activity emoji (rowing, swimming, bouncing ball, lifting weights) with different gender and skin tone modifiers. Each line includes the hexadecimal code points, qualification status (fully-qualified, minimally-qualified, or unqualified), and a visual representation of the resulting emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_28\n\nLANGUAGE: unicode\nCODE:\n```\n1F6A3 1F3FF 200D 2642                      ; minimally-qualified # 🚣🏿‍♂ man rowing boat: dark skin tone\n1F6A3 200D 2640 FE0F                       ; fully-qualified     # 🚣‍♀️ woman rowing boat\n1F6A3 200D 2640                            ; minimally-qualified # 🚣‍♀ woman rowing boat\n1F6A3 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚣🏻‍♀️ woman rowing boat: light skin tone\n1F6A3 1F3FB 200D 2640                      ; minimally-qualified # 🚣🏻‍♀ woman rowing boat: light skin tone\n1F6A3 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚣🏼‍♀️ woman rowing boat: medium-light skin tone\n1F6A3 1F3FC 200D 2640                      ; minimally-qualified # 🚣🏼‍♀ woman rowing boat: medium-light skin tone\n1F6A3 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚣🏽‍♀️ woman rowing boat: medium skin tone\n1F6A3 1F3FD 200D 2640                      ; minimally-qualified # 🚣🏽‍♀ woman rowing boat: medium skin tone\n1F6A3 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚣🏾‍♀️ woman rowing boat: medium-dark skin tone\n1F6A3 1F3FE 200D 2640                      ; minimally-qualified # 🚣🏾‍♀ woman rowing boat: medium-dark skin tone\n1F6A3 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚣🏿‍♀️ woman rowing boat: dark skin tone\n1F6A3 1F3FF 200D 2640                      ; minimally-qualified # 🚣🏿‍♀ woman rowing boat: dark skin tone\n1F3CA                                      ; fully-qualified     # 🏊 person swimming\n1F3CA 1F3FB                                ; fully-qualified     # 🏊🏻 person swimming: light skin tone\n1F3CA 1F3FC                                ; fully-qualified     # 🏊🏼 person swimming: medium-light skin tone\n1F3CA 1F3FD                                ; fully-qualified     # 🏊🏽 person swimming: medium skin tone\n1F3CA 1F3FE                                ; fully-qualified     # 🏊🏾 person swimming: medium-dark skin tone\n1F3CA 1F3FF                                ; fully-qualified     # 🏊🏿 person swimming: dark skin tone\n1F3CA 200D 2642 FE0F                       ; fully-qualified     # 🏊‍♂️ man swimming\n1F3CA 200D 2642                            ; minimally-qualified # 🏊‍♂ man swimming\n1F3CA 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🏊🏻‍♂️ man swimming: light skin tone\n1F3CA 1F3FB 200D 2642                      ; minimally-qualified # 🏊🏻‍♂ man swimming: light skin tone\n1F3CA 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🏊🏼‍♂️ man swimming: medium-light skin tone\n1F3CA 1F3FC 200D 2642                      ; minimally-qualified # 🏊🏼‍♂ man swimming: medium-light skin tone\n1F3CA 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🏊🏽‍♂️ man swimming: medium skin tone\n1F3CA 1F3FD 200D 2642                      ; minimally-qualified # 🏊🏽‍♂ man swimming: medium skin tone\n1F3CA 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🏊🏾‍♂️ man swimming: medium-dark skin tone\n1F3CA 1F3FE 200D 2642                      ; minimally-qualified # 🏊🏾‍♂ man swimming: medium-dark skin tone\n1F3CA 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🏊🏿‍♂️ man swimming: dark skin tone\n1F3CA 1F3FF 200D 2642                      ; minimally-qualified # 🏊🏿‍♂ man swimming: dark skin tone\n1F3CA 200D 2640 FE0F                       ; fully-qualified     # 🏊‍♀️ woman swimming\n1F3CA 200D 2640                            ; minimally-qualified # 🏊‍♀ woman swimming\n1F3CA 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🏊🏻‍♀️ woman swimming: light skin tone\n1F3CA 1F3FB 200D 2640                      ; minimally-qualified # 🏊🏻‍♀ woman swimming: light skin tone\n1F3CA 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🏊🏼‍♀️ woman swimming: medium-light skin tone\n1F3CA 1F3FC 200D 2640                      ; minimally-qualified # 🏊🏼‍♀ woman swimming: medium-light skin tone\n1F3CA 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🏊🏽‍♀️ woman swimming: medium skin tone\n1F3CA 1F3FD 200D 2640                      ; minimally-qualified # 🏊🏽‍♀ woman swimming: medium skin tone\n1F3CA 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🏊🏾‍♀️ woman swimming: medium-dark skin tone\n1F3CA 1F3FE 200D 2640                      ; minimally-qualified # 🏊🏾‍♀ woman swimming: medium-dark skin tone\n1F3CA 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🏊🏿‍♀️ woman swimming: dark skin tone\n1F3CA 1F3FF 200D 2640                      ; minimally-qualified # 🏊🏿‍♀ woman swimming: dark skin tone\n26F9 FE0F                                  ; fully-qualified     # ⛹️ person bouncing ball\n26F9                                       ; unqualified         # ⛹ person bouncing ball\n26F9 1F3FB                                 ; fully-qualified     # ⛹🏻 person bouncing ball: light skin tone\n26F9 1F3FC                                 ; fully-qualified     # ⛹🏼 person bouncing ball: medium-light skin tone\n26F9 1F3FD                                 ; fully-qualified     # ⛹🏽 person bouncing ball: medium skin tone\n26F9 1F3FE                                 ; fully-qualified     # ⛹🏾 person bouncing ball: medium-dark skin tone\n26F9 1F3FF                                 ; fully-qualified     # ⛹🏿 person bouncing ball: dark skin tone\n26F9 FE0F 200D 2642 FE0F                   ; fully-qualified     # ⛹️‍♂️ man bouncing ball\n26F9 200D 2642 FE0F                        ; unqualified         # ⛹‍♂️ man bouncing ball\n26F9 FE0F 200D 2642                        ; unqualified         # ⛹️‍♂ man bouncing ball\n26F9 200D 2642                             ; unqualified         # ⛹‍♂ man bouncing ball\n26F9 1F3FB 200D 2642 FE0F                  ; fully-qualified     # ⛹🏻‍♂️ man bouncing ball: light skin tone\n26F9 1F3FB 200D 2642                       ; minimally-qualified # ⛹🏻‍♂ man bouncing ball: light skin tone\n26F9 1F3FC 200D 2642 FE0F                  ; fully-qualified     # ⛹🏼‍♂️ man bouncing ball: medium-light skin tone\n26F9 1F3FC 200D 2642                       ; minimally-qualified # ⛹🏼‍♂ man bouncing ball: medium-light skin tone\n26F9 1F3FD 200D 2642 FE0F                  ; fully-qualified     # ⛹🏽‍♂️ man bouncing ball: medium skin tone\n26F9 1F3FD 200D 2642                       ; minimally-qualified # ⛹🏽‍♂ man bouncing ball: medium skin tone\n26F9 1F3FE 200D 2642 FE0F                  ; fully-qualified     # ⛹🏾‍♂️ man bouncing ball: medium-dark skin tone\n26F9 1F3FE 200D 2642                       ; minimally-qualified # ⛹🏾‍♂ man bouncing ball: medium-dark skin tone\n26F9 1F3FF 200D 2642 FE0F                  ; fully-qualified     # ⛹🏿‍♂️ man bouncing ball: dark skin tone\n26F9 1F3FF 200D 2642                       ; minimally-qualified # ⛹🏿‍♂ man bouncing ball: dark skin tone\n26F9 FE0F 200D 2640 FE0F                   ; fully-qualified     # ⛹️‍♀️ woman bouncing ball\n26F9 200D 2640 FE0F                        ; unqualified         # ⛹‍♀️ woman bouncing ball\n26F9 FE0F 200D 2640                        ; unqualified         # ⛹️‍♀ woman bouncing ball\n26F9 200D 2640                             ; unqualified         # ⛹‍♀ woman bouncing ball\n26F9 1F3FB 200D 2640 FE0F                  ; fully-qualified     # ⛹🏻‍♀️ woman bouncing ball: light skin tone\n26F9 1F3FB 200D 2640                       ; minimally-qualified # ⛹🏻‍♀ woman bouncing ball: light skin tone\n26F9 1F3FC 200D 2640 FE0F                  ; fully-qualified     # ⛹🏼‍♀️ woman bouncing ball: medium-light skin tone\n26F9 1F3FC 200D 2640                       ; minimally-qualified # ⛹🏼‍♀ woman bouncing ball: medium-light skin tone\n26F9 1F3FD 200D 2640 FE0F                  ; fully-qualified     # ⛹🏽‍♀️ woman bouncing ball: medium skin tone\n26F9 1F3FD 200D 2640                       ; minimally-qualified # ⛹🏽‍♀ woman bouncing ball: medium skin tone\n26F9 1F3FE 200D 2640 FE0F                  ; fully-qualified     # ⛹🏾‍♀️ woman bouncing ball: medium-dark skin tone\n26F9 1F3FE 200D 2640                       ; minimally-qualified # ⛹🏾‍♀ woman bouncing ball: medium-dark skin tone\n26F9 1F3FF 200D 2640 FE0F                  ; fully-qualified     # ⛹🏿‍♀️ woman bouncing ball: dark skin tone\n26F9 1F3FF 200D 2640                       ; minimally-qualified # ⛹🏿‍♀ woman bouncing ball: dark skin tone\n1F3CB FE0F                                 ; fully-qualified     # 🏋️ person lifting weights\n1F3CB                                      ; unqualified         # 🏋 person lifting weights\n1F3CB 1F3FB                                ; fully-qualified     # 🏋🏻 person lifting weights: light skin tone\n1F3CB 1F3FC                                ; fully-qualified     # 🏋🏼 person lifting weights: medium-light skin tone\n1F3CB 1F3FD                                ; fully-qualified     # 🏋🏽 person lifting weights: medium skin tone\n1F3CB 1F3FE                                ; fully-qualified     # 🏋🏾 person lifting weights: medium-dark skin tone\n1F3CB 1F3FF                                ; fully-qualified     # 🏋🏿 person lifting weights: dark skin tone\n1F3CB FE0F 200D 2642 FE0F                  ; fully-qualified     # 🏋️‍♂️ man lifting weights\n1F3CB 200D 2642 FE0F                       ; unqualified         # 🏋‍♂️ man lifting weights\n1F3CB FE0F 200D 2642                       ; unqualified         # 🏋️‍♂ man lifting weights\n1F3CB 200D 2642                            ; unqualified         # 🏋‍♂ man lifting weights\n1F3CB 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🏋🏻‍♂️ man lifting weights: light skin tone\n1F3CB 1F3FB 200D 2642                      ; minimally-qualified # 🏋🏻‍♂ man lifting weights: light skin tone\n1F3CB 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🏋🏼‍♂️ man lifting weights: medium-light skin tone\n1F3CB 1F3FC 200D 2642                      ; minimally-qualified # 🏋🏼‍♂ man lifting weights: medium-light skin tone\n1F3CB 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🏋🏽‍♂️ man lifting weights: medium skin tone\n```\n\n----------------------------------------\n\nTITLE: Sky & Weather Emoji Unicode Definitions\nDESCRIPTION: Unicode code point definitions for sky and weather related emoji including celestial bodies and weather phenomena\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_43\n\nLANGUAGE: unicode\nCODE:\n```\n1F311                                      ; fully-qualified     # 🌑 new moon\n1F312                                      ; fully-qualified     # 🌒 waxing crescent moon\n1F313                                      ; fully-qualified     # 🌓 first quarter moon\n```\n\n----------------------------------------\n\nTITLE: Adding alias-finder to Oh My Zsh plugins\nDESCRIPTION: Configuration example showing how to enable the alias-finder plugin in your zshrc file by adding it to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... alias-finder)\n```\n\n----------------------------------------\n\nTITLE: Keycap Unicode Definitions\nDESCRIPTION: Unicode codepoint definitions for numeric keycap symbols (0-9, #, *) and the number 10. Each keycap is defined with both fully-qualified (with FE0F variant selector) and unqualified versions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_57\n\nLANGUAGE: unicode\nCODE:\n```\n0023 FE0F 20E3                             ; fully-qualified     # #️⃣ keycap: #\n0023 20E3                                  ; unqualified         # #⃣ keycap: #\n002A FE0F 20E3                             ; fully-qualified     # *️⃣ keycap: *\n002A 20E3                                  ; unqualified         # *⃣ keycap: *\n0030 FE0F 20E3                             ; fully-qualified     # 0️⃣ keycap: 0\n```\n\n----------------------------------------\n\nTITLE: Passing Options to Keychain Program\nDESCRIPTION: This configuration adds additional options to the keychain program call, allowing customization of its behavior, such as enabling quiet mode. Modify options based on desired behavior for keychain.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/keychain/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:keychain options --quiet\n```\n\n----------------------------------------\n\nTITLE: Shortening a Link using the Droplr Plugin (Zsh)\nDESCRIPTION: This command shows how to shorten a given URL using the `droplr` command-line tool. Replace `https://example.com` with the URL you wish to shorten. Requires the Droplr.app to be installed, running, and logged in on MacOS.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/droplr/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\ndroplr https://example.com\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Branch Prompt Info Script - Branch Plugin - Console\nDESCRIPTION: Shows the performance benchmark of running the branch plugin directly as a Zsh script. Useful for validating the speed improvement of the branch plugin over native VCS commands. Assumes Oh My Zsh and the plugin are installed; test script should exist at the given path. Similar output metrics as the Mercurial benchmark.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ time zsh /tmp/branch_prompt_info_test.zsh\n0.00s user 0.01s system 78% cpu 0.014 total\n```\n\n----------------------------------------\n\nTITLE: Decrypting downloaded files\nDESCRIPTION: Command to decrypt a file that was previously encrypted using gpg with the transfer plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/transfer/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\ngpg -d file -ca\n```\n\n----------------------------------------\n\nTITLE: Enabling the fbterm Plugin in Oh My Zsh (zsh)\nDESCRIPTION: This zsh configuration snippet shows how to enable the `fbterm` plugin in Oh My Zsh. By adding `fbterm` to the `plugins` array within the user's `.zshrc` file, the plugin gets activated. This specific plugin automatically starts the `fbterm` terminal emulator if the shell session is initiated on a real TTY (e.g., `/dev/tty*`). The ellipsis (`...`) indicates that other plugins might already be listed in the array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fbterm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fbterm)\n```\n\n----------------------------------------\n\nTITLE: Enabling Tmuxinator Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the tmuxinator plugin to the plugins array in the zshrc file. This enables the plugin's functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/tmuxinator/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... tmuxinator)\n```\n\n----------------------------------------\n\nTITLE: Enabling Multipass Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to add the `multipass` plugin to the `plugins` array in the `.zshrc` file for Oh My Zsh. Activating this plugin enables command completion and aliases for Multipass commands within the Zsh shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/multipass/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... multipass)\n```\n\n----------------------------------------\n\nTITLE: Updating Zsh Prompt to Display Java Version\nDESCRIPTION: This code snippet demonstrates how to use the jenv_prompt_info function to display the current Java version in the right-hand side of the prompt by modifying the RPROMPT variable. It requires the jenv plugin to be set up in Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jenv/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nPROMPT=\"%~$ \"\nRPROMPT='$(jenv_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Sequences for Sports and Activity Emojis\nDESCRIPTION: This snippet defines Unicode sequences for various sports and activity emojis, including cartwheeling, wrestling, water polo, handball, and juggling. It provides sequences for different genders and skin tones, along with their qualification status (fully-qualified or minimally-qualified).\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_30\n\nLANGUAGE: Unicode\nCODE:\n```\n1F938 1F3FD 200D 2642                      ; minimally-qualified # 🤸🏽‍♂ man cartwheeling: medium skin tone\n1F938 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤸🏾‍♂️ man cartwheeling: medium-dark skin tone\n1F938 1F3FE 200D 2642                      ; minimally-qualified # 🤸🏾‍♂ man cartwheeling: medium-dark skin tone\n1F938 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤸🏿‍♂️ man cartwheeling: dark skin tone\n1F938 1F3FF 200D 2642                      ; minimally-qualified # 🤸🏿‍♂ man cartwheeling: dark skin tone\n1F938 200D 2640 FE0F                       ; fully-qualified     # 🤸‍♀️ woman cartwheeling\n1F938 200D 2640                            ; minimally-qualified # 🤸‍♀ woman cartwheeling\n1F938 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤸🏻‍♀️ woman cartwheeling: light skin tone\n1F938 1F3FB 200D 2640                      ; minimally-qualified # 🤸🏻‍♀ woman cartwheeling: light skin tone\n1F938 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤸🏼‍♀️ woman cartwheeling: medium-light skin tone\n1F938 1F3FC 200D 2640                      ; minimally-qualified # 🤸🏼‍♀ woman cartwheeling: medium-light skin tone\n1F938 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤸🏽‍♀️ woman cartwheeling: medium skin tone\n1F938 1F3FD 200D 2640                      ; minimally-qualified # 🤸🏽‍♀ woman cartwheeling: medium skin tone\n1F938 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤸🏾‍♀️ woman cartwheeling: medium-dark skin tone\n1F938 1F3FE 200D 2640                      ; minimally-qualified # 🤸🏾‍♀ woman cartwheeling: medium-dark skin tone\n1F938 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤸🏿‍♀️ woman cartwheeling: dark skin tone\n1F938 1F3FF 200D 2640                      ; minimally-qualified # 🤸🏿‍♀ woman cartwheeling: dark skin tone\n1F93C                                      ; fully-qualified     # 🤼 people wrestling\n1F93C 200D 2642 FE0F                       ; fully-qualified     # 🤼‍♂️ men wrestling\n1F93C 200D 2642                            ; minimally-qualified # 🤼‍♂ men wrestling\n1F93C 200D 2640 FE0F                       ; fully-qualified     # 🤼‍♀️ women wrestling\n1F93C 200D 2640                            ; minimally-qualified # 🤼‍♀ women wrestling\n1F93D                                      ; fully-qualified     # 🤽 person playing water polo\n1F93D 1F3FB                                ; fully-qualified     # 🤽🏻 person playing water polo: light skin tone\n1F93D 1F3FC                                ; fully-qualified     # 🤽🏼 person playing water polo: medium-light skin tone\n1F93D 1F3FD                                ; fully-qualified     # 🤽🏽 person playing water polo: medium skin tone\n1F93D 1F3FE                                ; fully-qualified     # 🤽🏾 person playing water polo: medium-dark skin tone\n1F93D 1F3FF                                ; fully-qualified     # 🤽🏿 person playing water polo: dark skin tone\n1F93D 200D 2642 FE0F                       ; fully-qualified     # 🤽‍♂️ man playing water polo\n1F93D 200D 2642                            ; minimally-qualified # 🤽‍♂ man playing water polo\n1F93D 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🤽🏻‍♂️ man playing water polo: light skin tone\n1F93D 1F3FB 200D 2642                      ; minimally-qualified # 🤽🏻‍♂ man playing water polo: light skin tone\n1F93D 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🤽🏼‍♂️ man playing water polo: medium-light skin tone\n1F93D 1F3FC 200D 2642                      ; minimally-qualified # 🤽🏼‍♂ man playing water polo: medium-light skin tone\n1F93D 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤽🏽‍♂️ man playing water polo: medium skin tone\n1F93D 1F3FD 200D 2642                      ; minimally-qualified # 🤽🏽‍♂ man playing water polo: medium skin tone\n1F93D 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤽🏾‍♂️ man playing water polo: medium-dark skin tone\n1F93D 1F3FE 200D 2642                      ; minimally-qualified # 🤽🏾‍♂ man playing water polo: medium-dark skin tone\n1F93D 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤽🏿‍♂️ man playing water polo: dark skin tone\n1F93D 1F3FF 200D 2642                      ; minimally-qualified # 🤽🏿‍♂ man playing water polo: dark skin tone\n1F93D 200D 2640 FE0F                       ; fully-qualified     # 🤽‍♀️ woman playing water polo\n1F93D 200D 2640                            ; minimally-qualified # 🤽‍♀ woman playing water polo\n1F93D 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤽🏻‍♀️ woman playing water polo: light skin tone\n1F93D 1F3FB 200D 2640                      ; minimally-qualified # 🤽🏻‍♀ woman playing water polo: light skin tone\n1F93D 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤽🏼‍♀️ woman playing water polo: medium-light skin tone\n1F93D 1F3FC 200D 2640                      ; minimally-qualified # 🤽🏼‍♀ woman playing water polo: medium-light skin tone\n1F93D 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤽🏽‍♀️ woman playing water polo: medium skin tone\n1F93D 1F3FD 200D 2640                      ; minimally-qualified # 🤽🏽‍♀ woman playing water polo: medium skin tone\n1F93D 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤽🏾‍♀️ woman playing water polo: medium-dark skin tone\n1F93D 1F3FE 200D 2640                      ; minimally-qualified # 🤽🏾‍♀ woman playing water polo: medium-dark skin tone\n1F93D 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤽🏿‍♀️ woman playing water polo: dark skin tone\n1F93D 1F3FF 200D 2640                      ; minimally-qualified # 🤽🏿‍♀ woman playing water polo: dark skin tone\n1F93E                                      ; fully-qualified     # 🤾 person playing handball\n1F93E 1F3FB                                ; fully-qualified     # 🤾🏻 person playing handball: light skin tone\n1F93E 1F3FC                                ; fully-qualified     # 🤾🏼 person playing handball: medium-light skin tone\n1F93E 1F3FD                                ; fully-qualified     # 🤾🏽 person playing handball: medium skin tone\n1F93E 1F3FE                                ; fully-qualified     # 🤾🏾 person playing handball: medium-dark skin tone\n1F93E 1F3FF                                ; fully-qualified     # 🤾🏿 person playing handball: dark skin tone\n1F93E 200D 2642 FE0F                       ; fully-qualified     # 🤾‍♂️ man playing handball\n1F93E 200D 2642                            ; minimally-qualified # 🤾‍♂ man playing handball\n1F93E 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🤾🏻‍♂️ man playing handball: light skin tone\n1F93E 1F3FB 200D 2642                      ; minimally-qualified # 🤾🏻‍♂ man playing handball: light skin tone\n1F93E 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🤾🏼‍♂️ man playing handball: medium-light skin tone\n1F93E 1F3FC 200D 2642                      ; minimally-qualified # 🤾🏼‍♂ man playing handball: medium-light skin tone\n1F93E 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤾🏽‍♂️ man playing handball: medium skin tone\n1F93E 1F3FD 200D 2642                      ; minimally-qualified # 🤾🏽‍♂ man playing handball: medium skin tone\n1F93E 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤾🏾‍♂️ man playing handball: medium-dark skin tone\n1F93E 1F3FE 200D 2642                      ; minimally-qualified # 🤾🏾‍♂ man playing handball: medium-dark skin tone\n1F93E 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤾🏿‍♂️ man playing handball: dark skin tone\n1F93E 1F3FF 200D 2642                      ; minimally-qualified # 🤾🏿‍♂ man playing handball: dark skin tone\n1F93E 200D 2640 FE0F                       ; fully-qualified     # 🤾‍♀️ woman playing handball\n1F93E 200D 2640                            ; minimally-qualified # 🤾‍♀ woman playing handball\n1F93E 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤾🏻‍♀️ woman playing handball: light skin tone\n1F93E 1F3FB 200D 2640                      ; minimally-qualified # 🤾🏻‍♀ woman playing handball: light skin tone\n1F93E 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤾🏼‍♀️ woman playing handball: medium-light skin tone\n1F93E 1F3FC 200D 2640                      ; minimally-qualified # 🤾🏼‍♀ woman playing handball: medium-light skin tone\n1F93E 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤾🏽‍♀️ woman playing handball: medium skin tone\n1F93E 1F3FD 200D 2640                      ; minimally-qualified # 🤾🏽‍♀ woman playing handball: medium skin tone\n1F93E 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤾🏾‍♀️ woman playing handball: medium-dark skin tone\n1F93E 1F3FE 200D 2640                      ; minimally-qualified # 🤾🏾‍♀ woman playing handball: medium-dark skin tone\n1F93E 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤾🏿‍♀️ woman playing handball: dark skin tone\n1F93E 1F3FF 200D 2640                      ; minimally-qualified # 🤾🏿‍♀ woman playing handball: dark skin tone\n1F939                                      ; fully-qualified     # 🤹 person juggling\n1F939 1F3FB                                ; fully-qualified     # 🤹🏻 person juggling: light skin tone\n1F939 1F3FC                                ; fully-qualified     # 🤹🏼 person juggling: medium-light skin tone\n1F939 1F3FD                                ; fully-qualified     # 🤹🏽 person juggling: medium skin tone\n1F939 1F3FE                                ; fully-qualified     # 🤹🏾 person juggling: medium-dark skin tone\n1F939 1F3FF                                ; fully-qualified     # 🤹🏿 person juggling: dark skin tone\n1F939 200D 2642 FE0F                       ; fully-qualified     # 🤹‍♂️ man juggling\n1F939 200D 2642                            ; minimally-qualified # 🤹‍♂ man juggling\n```\n\n----------------------------------------\n\nTITLE: Transport-Air Emoji Unicode Definitions\nDESCRIPTION: Unicode code point definitions for airplane and air transport related emoji including qualifiers and descriptions\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_40\n\nLANGUAGE: unicode\nCODE:\n```\n2708 FE0F                                  ; fully-qualified     # ✈️ airplane\n2708                                       ; unqualified         # ✈ airplane\n1F6E9 FE0F                                 ; fully-qualified     # 🛩️ small airplane\n1F6E9                                      ; unqualified         # 🛩 small airplane\n1F6EB                                      ; fully-qualified     # 🛫 airplane departure\n```\n\n----------------------------------------\n\nTITLE: Configuring Kitchen Plugin in Zsh\nDESCRIPTION: This snippet demonstrates how to configure the kitchen plugin in Zsh by adding it to the plugins array in the zshrc file. This enables completion support for Test Kitchen. Ensure that the zshrc file is sourced after modifications.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kitchen/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... kitchen)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ubuntu Environment for Azure Plugin Development (bash)\nDESCRIPTION: This code snippet uses Docker to quickly start a Bash shell in an Ubuntu container, mounting the current directory and starting at /mnt. It is intended for developing or testing oh-my-zsh plugins in a clean Linux environment. The main dependency is Docker; it pulls the Ubuntu image and opens an interactive shell with mounted source code. There are no direct inputs or outputs beyond establishing the working container for development.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n docker run -it -v $(pwd):/mnt -w /mnt ubuntu bash\n```\n\n----------------------------------------\n\nTITLE: Enabling Terminitor Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to add the Terminitor plugin to the plugins array in the zshrc file. This enables the Terminitor completions in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/terminitor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... terminitor)\n```\n\n----------------------------------------\n\nTITLE: Configuring zbell_ignore Array\nDESCRIPTION: Example configuration for the zbell_ignore array, which specifies which programs to ignore when determining whether to ring the bell. By default, it includes the editor and pager.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zbell/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzbell_ignore=($EDITOR $PAGER)\n```\n\n----------------------------------------\n\nTITLE: Listing warp points to current directory\nDESCRIPTION: Command to show all warp points that point to the current directory or optionally display the path to a specific warp point.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_25\n\nLANGUAGE: zsh\nCODE:\n```\nwd show\n```\n\n----------------------------------------\n\nTITLE: Enabling Kate Plugin in oh-my-zsh via zshrc (Markdown)\nDESCRIPTION: Documents the command to add the 'kate' plugin to the oh-my-zsh plugins array in a Markdown code block. This step ensures the Kate plugin's aliases and functions are enabled in the user's shell session by adding \"kate\" to the plugins listed in the .zshrc file. No additional dependencies are required beyond oh-my-zsh and the Kate plugin itself.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\nplugins=(... kate)\n```\n```\n\n----------------------------------------\n\nTITLE: Adding CakePHP Completion Plugin to Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the CakePHP completion plugin to the Oh My Zsh configuration. It demonstrates the syntax for including the 'cake' plugin in the plugins array of the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cake/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... cake)\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Place and Building Emoji\nDESCRIPTION: Maps Unicode values to building and place-related emoji, including stadiums, houses, office buildings, and landmarks. Each entry includes both fully-qualified (with FE0F modifier) and unqualified versions where applicable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_37\n\nLANGUAGE: txt\nCODE:\n```\n1F3DF FE0F                                 ; fully-qualified     # 🏟️ stadium\n1F3DF                                      ; unqualified         # 🏟 stadium\n1F3DB FE0F                                 ; fully-qualified     # 🏛️ classical building\n1F3DB                                      ; unqualified         # 🏛 classical building\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Codepoint Reference for Human Figures\nDESCRIPTION: A structured listing of Unicode codepoints that define emoji for human figures in various poses, with different skin tones and gender variations. Each line contains the hexadecimal code sequence, qualification status (fully-qualified or minimally-qualified), and the visual representation of the emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n1F9CD 1F3FB                                ; fully-qualified     # 🧍🏻 person standing: light skin tone\n1F9CD 1F3FC                                ; fully-qualified     # 🧍🏼 person standing: medium-light skin tone\n1F9CD 1F3FD                                ; fully-qualified     # 🧍🏽 person standing: medium skin tone\n1F9CD 1F3FE                                ; fully-qualified     # 🧍🏾 person standing: medium-dark skin tone\n1F9CD 1F3FF                                ; fully-qualified     # 🧍🏿 person standing: dark skin tone\n1F9CD 200D 2642 FE0F                       ; fully-qualified     # 🧍‍♂️ man standing\n1F9CD 200D 2642                            ; minimally-qualified # 🧍‍♂ man standing\n1F9CD 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧍🏻‍♂️ man standing: light skin tone\n1F9CD 1F3FB 200D 2642                      ; minimally-qualified # 🧍🏻‍♂ man standing: light skin tone\n1F9CD 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧍🏼‍♂️ man standing: medium-light skin tone\n1F9CD 1F3FC 200D 2642                      ; minimally-qualified # 🧍🏼‍♂ man standing: medium-light skin tone\n1F9CD 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧍🏽‍♂️ man standing: medium skin tone\n1F9CD 1F3FD 200D 2642                      ; minimally-qualified # 🧍🏽‍♂ man standing: medium skin tone\n1F9CD 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧍🏾‍♂️ man standing: medium-dark skin tone\n1F9CD 1F3FE 200D 2642                      ; minimally-qualified # 🧍🏾‍♂ man standing: medium-dark skin tone\n1F9CD 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧍🏿‍♂️ man standing: dark skin tone\n1F9CD 1F3FF 200D 2642                      ; minimally-qualified # 🧍🏿‍♂ man standing: dark skin tone\n1F9CD 200D 2640 FE0F                       ; fully-qualified     # 🧍‍♀️ woman standing\n1F9CD 200D 2640                            ; minimally-qualified # 🧍‍♀ woman standing\n1F9CD 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧍🏻‍♀️ woman standing: light skin tone\n1F9CD 1F3FB 200D 2640                      ; minimally-qualified # 🧍🏻‍♀ woman standing: light skin tone\n1F9CD 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧍🏼‍♀️ woman standing: medium-light skin tone\n1F9CD 1F3FC 200D 2640                      ; minimally-qualified # 🧍🏼‍♀ woman standing: medium-light skin tone\n1F9CD 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧍🏽‍♀️ woman standing: medium skin tone\n1F9CD 1F3FD 200D 2640                      ; minimally-qualified # 🧍🏽‍♀ woman standing: medium skin tone\n1F9CD 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧍🏾‍♀️ woman standing: medium-dark skin tone\n1F9CD 1F3FE 200D 2640                      ; minimally-qualified # 🧍🏾‍♀ woman standing: medium-dark skin tone\n1F9CD 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧍🏿‍♀️ woman standing: dark skin tone\n1F9CD 1F3FF 200D 2640                      ; minimally-qualified # 🧍🏿‍♀ woman standing: dark skin tone\n1F9CE                                      ; fully-qualified     # 🧎 person kneeling\n1F9CE 1F3FB                                ; fully-qualified     # 🧎🏻 person kneeling: light skin tone\n1F9CE 1F3FC                                ; fully-qualified     # 🧎🏼 person kneeling: medium-light skin tone\n1F9CE 1F3FD                                ; fully-qualified     # 🧎🏽 person kneeling: medium skin tone\n1F9CE 1F3FE                                ; fully-qualified     # 🧎🏾 person kneeling: medium-dark skin tone\n1F9CE 1F3FF                                ; fully-qualified     # 🧎🏿 person kneeling: dark skin tone\n1F9CE 200D 2642 FE0F                       ; fully-qualified     # 🧎‍♂️ man kneeling\n1F9CE 200D 2642                            ; minimally-qualified # 🧎‍♂ man kneeling\n1F9CE 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧎🏻‍♂️ man kneeling: light skin tone\n1F9CE 1F3FB 200D 2642                      ; minimally-qualified # 🧎🏻‍♂ man kneeling: light skin tone\n1F9CE 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧎🏼‍♂️ man kneeling: medium-light skin tone\n1F9CE 1F3FC 200D 2642                      ; minimally-qualified # 🧎🏼‍♂ man kneeling: medium-light skin tone\n1F9CE 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧎🏽‍♂️ man kneeling: medium skin tone\n1F9CE 1F3FD 200D 2642                      ; minimally-qualified # 🧎🏽‍♂ man kneeling: medium skin tone\n1F9CE 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧎🏾‍♂️ man kneeling: medium-dark skin tone\n1F9CE 1F3FE 200D 2642                      ; minimally-qualified # 🧎🏾‍♂ man kneeling: medium-dark skin tone\n1F9CE 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧎🏿‍♂️ man kneeling: dark skin tone\n1F9CE 1F3FF 200D 2642                      ; minimally-qualified # 🧎🏿‍♂ man kneeling: dark skin tone\n1F9CE 200D 2640 FE0F                       ; fully-qualified     # 🧎‍♀️ woman kneeling\n1F9CE 200D 2640                            ; minimally-qualified # 🧎‍♀ woman kneeling\n1F9CE 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧎🏻‍♀️ woman kneeling: light skin tone\n1F9CE 1F3FB 200D 2640                      ; minimally-qualified # 🧎🏻‍♀ woman kneeling: light skin tone\n1F9CE 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧎🏼‍♀️ woman kneeling: medium-light skin tone\n1F9CE 1F3FC 200D 2640                      ; minimally-qualified # 🧎🏼‍♀ woman kneeling: medium-light skin tone\n1F9CE 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧎🏽‍♀️ woman kneeling: medium skin tone\n1F9CE 1F3FD 200D 2640                      ; minimally-qualified # 🧎🏽‍♀ woman kneeling: medium skin tone\n1F9CE 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧎🏾‍♀️ woman kneeling: medium-dark skin tone\n1F9CE 1F3FE 200D 2640                      ; minimally-qualified # 🧎🏾‍♀ woman kneeling: medium-dark skin tone\n1F9CE 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧎🏿‍♀️ woman kneeling: dark skin tone\n1F9CE 1F3FF 200D 2640                      ; minimally-qualified # 🧎🏿‍♀ woman kneeling: dark skin tone\n1F468 200D 1F9AF                           ; fully-qualified     # 👨‍🦯 man with probing cane\n1F468 1F3FB 200D 1F9AF                     ; fully-qualified     # 👨🏻‍🦯 man with probing cane: light skin tone\n1F468 1F3FC 200D 1F9AF                     ; fully-qualified     # 👨🏼‍🦯 man with probing cane: medium-light skin tone\n1F468 1F3FD 200D 1F9AF                     ; fully-qualified     # 👨🏽‍🦯 man with probing cane: medium skin tone\n1F468 1F3FE 200D 1F9AF                     ; fully-qualified     # 👨🏾‍🦯 man with probing cane: medium-dark skin tone\n1F468 1F3FF 200D 1F9AF                     ; fully-qualified     # 👨🏿‍🦯 man with probing cane: dark skin tone\n1F469 200D 1F9AF                           ; fully-qualified     # 👩‍🦯 woman with probing cane\n1F469 1F3FB 200D 1F9AF                     ; fully-qualified     # 👩🏻‍🦯 woman with probing cane: light skin tone\n1F469 1F3FC 200D 1F9AF                     ; fully-qualified     # 👩🏼‍🦯 woman with probing cane: medium-light skin tone\n1F469 1F3FD 200D 1F9AF                     ; fully-qualified     # 👩🏽‍🦯 woman with probing cane: medium skin tone\n1F469 1F3FE 200D 1F9AF                     ; fully-qualified     # 👩🏾‍🦯 woman with probing cane: medium-dark skin tone\n1F469 1F3FF 200D 1F9AF                     ; fully-qualified     # 👩🏿‍🦯 woman with probing cane: dark skin tone\n1F468 200D 1F9BC                           ; fully-qualified     # 👨‍🦼 man in motorized wheelchair\n1F468 1F3FB 200D 1F9BC                     ; fully-qualified     # 👨🏻‍🦼 man in motorized wheelchair: light skin tone\n1F468 1F3FC 200D 1F9BC                     ; fully-qualified     # 👨🏼‍🦼 man in motorized wheelchair: medium-light skin tone\n1F468 1F3FD 200D 1F9BC                     ; fully-qualified     # 👨🏽‍🦼 man in motorized wheelchair: medium skin tone\n1F468 1F3FE 200D 1F9BC                     ; fully-qualified     # 👨🏾‍🦼 man in motorized wheelchair: medium-dark skin tone\n1F468 1F3FF 200D 1F9BC                     ; fully-qualified     # 👨🏿‍🦼 man in motorized wheelchair: dark skin tone\n1F469 200D 1F9BC                           ; fully-qualified     # 👩‍🦼 woman in motorized wheelchair\n1F469 1F3FB 200D 1F9BC                     ; fully-qualified     # 👩🏻‍🦼 woman in motorized wheelchair: light skin tone\n1F469 1F3FC 200D 1F9BC                     ; fully-qualified     # 👩🏼‍🦼 woman in motorized wheelchair: medium-light skin tone\n1F469 1F3FD 200D 1F9BC                     ; fully-qualified     # 👩🏽‍🦼 woman in motorized wheelchair: medium skin tone\n1F469 1F3FE 200D 1F9BC                     ; fully-qualified     # 👩🏾‍🦼 woman in motorized wheelchair: medium-dark skin tone\n1F469 1F3FF 200D 1F9BC                     ; fully-qualified     # 👩🏿‍🦼 woman in motorized wheelchair: dark skin tone\n1F468 200D 1F9BD                           ; fully-qualified     # 👨‍🦽 man in manual wheelchair\n1F468 1F3FB 200D 1F9BD                     ; fully-qualified     # 👨🏻‍🦽 man in manual wheelchair: light skin tone\n1F468 1F3FC 200D 1F9BD                     ; fully-qualified     # 👨🏼‍🦽 man in manual wheelchair: medium-light skin tone\n1F468 1F3FD 200D 1F9BD                     ; fully-qualified     # 👨🏽‍🦽 man in manual wheelchair: medium skin tone\n1F468 1F3FE 200D 1F9BD                     ; fully-qualified     # 👨🏾‍🦽 man in manual wheelchair: medium-dark skin tone\n1F468 1F3FF 200D 1F9BD                     ; fully-qualified     # 👨🏿‍🦽 man in manual wheelchair: dark skin tone\n1F469 200D 1F9BD                           ; fully-qualified     # 👩‍🦽 woman in manual wheelchair\n1F469 1F3FB 200D 1F9BD                     ; fully-qualified     # 👩🏻‍🦽 woman in manual wheelchair: light skin tone\n```\n\n----------------------------------------\n\nTITLE: Enabling CakePHP 3 Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the CakePHP 3 plugin to the plugins array in the zshrc file. This enables the plugin's functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cakephp3/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... cakephp3)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Emoji Characters\nDESCRIPTION: This snippet defines Unicode codepoints for various emoji characters. It includes professions like detectives, guards, and construction workers, as well as royalty such as princes and princesses. Each emoji is defined with different skin tone modifiers and gender variations.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_21\n\nLANGUAGE: Unicode\nCODE:\n```\n1F575 1F3FB 200D 2640                      ; minimally-qualified # 🕵🏻‍♀ woman detective: light skin tone\n1F575 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🕵🏼‍♀️ woman detective: medium-light skin tone\n1F575 1F3FC 200D 2640                      ; minimally-qualified # 🕵🏼‍♀ woman detective: medium-light skin tone\n1F575 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🕵🏽‍♀️ woman detective: medium skin tone\n1F575 1F3FD 200D 2640                      ; minimally-qualified # 🕵🏽‍♀ woman detective: medium skin tone\n1F575 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🕵🏾‍♀️ woman detective: medium-dark skin tone\n1F575 1F3FE 200D 2640                      ; minimally-qualified # 🕵🏾‍♀ woman detective: medium-dark skin tone\n1F575 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🕵🏿‍♀️ woman detective: dark skin tone\n1F575 1F3FF 200D 2640                      ; minimally-qualified # 🕵🏿‍♀ woman detective: dark skin tone\n1F482                                      ; fully-qualified     # 💂 guard\n1F482 1F3FB                                ; fully-qualified     # 💂🏻 guard: light skin tone\n1F482 1F3FC                                ; fully-qualified     # 💂🏼 guard: medium-light skin tone\n1F482 1F3FD                                ; fully-qualified     # 💂🏽 guard: medium skin tone\n1F482 1F3FE                                ; fully-qualified     # 💂🏾 guard: medium-dark skin tone\n1F482 1F3FF                                ; fully-qualified     # 💂🏿 guard: dark skin tone\n1F482 200D 2642 FE0F                       ; fully-qualified     # 💂‍♂️ man guard\n1F482 200D 2642                            ; minimally-qualified # 💂‍♂ man guard\n1F482 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 💂🏻‍♂️ man guard: light skin tone\n1F482 1F3FB 200D 2642                      ; minimally-qualified # 💂🏻‍♂ man guard: light skin tone\n1F482 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 💂🏼‍♂️ man guard: medium-light skin tone\n1F482 1F3FC 200D 2642                      ; minimally-qualified # 💂🏼‍♂ man guard: medium-light skin tone\n1F482 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 💂🏽‍♂️ man guard: medium skin tone\n1F482 1F3FD 200D 2642                      ; minimally-qualified # 💂🏽‍♂ man guard: medium skin tone\n1F482 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 💂🏾‍♂️ man guard: medium-dark skin tone\n1F482 1F3FE 200D 2642                      ; minimally-qualified # 💂🏾‍♂ man guard: medium-dark skin tone\n1F482 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 💂🏿‍♂️ man guard: dark skin tone\n1F482 1F3FF 200D 2642                      ; minimally-qualified # 💂🏿‍♂ man guard: dark skin tone\n1F482 200D 2640 FE0F                       ; fully-qualified     # 💂‍♀️ woman guard\n1F482 200D 2640                            ; minimally-qualified # 💂‍♀ woman guard\n1F482 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 💂🏻‍♀️ woman guard: light skin tone\n1F482 1F3FB 200D 2640                      ; minimally-qualified # 💂🏻‍♀ woman guard: light skin tone\n1F482 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 💂🏼‍♀️ woman guard: medium-light skin tone\n1F482 1F3FC 200D 2640                      ; minimally-qualified # 💂🏼‍♀ woman guard: medium-light skin tone\n1F482 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 💂🏽‍♀️ woman guard: medium skin tone\n1F482 1F3FD 200D 2640                      ; minimally-qualified # 💂🏽‍♀ woman guard: medium skin tone\n1F482 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 💂🏾‍♀️ woman guard: medium-dark skin tone\n1F482 1F3FE 200D 2640                      ; minimally-qualified # 💂🏾‍♀ woman guard: medium-dark skin tone\n1F482 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 💂🏿‍♀️ woman guard: dark skin tone\n1F482 1F3FF 200D 2640                      ; minimally-qualified # 💂🏿‍♀ woman guard: dark skin tone\n1F477                                      ; fully-qualified     # 👷 construction worker\n1F477 1F3FB                                ; fully-qualified     # 👷🏻 construction worker: light skin tone\n1F477 1F3FC                                ; fully-qualified     # 👷🏼 construction worker: medium-light skin tone\n1F477 1F3FD                                ; fully-qualified     # 👷🏽 construction worker: medium skin tone\n1F477 1F3FE                                ; fully-qualified     # 👷🏾 construction worker: medium-dark skin tone\n1F477 1F3FF                                ; fully-qualified     # 👷🏿 construction worker: dark skin tone\n1F477 200D 2642 FE0F                       ; fully-qualified     # 👷‍♂️ man construction worker\n1F477 200D 2642                            ; minimally-qualified # 👷‍♂ man construction worker\n1F477 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 👷🏻‍♂️ man construction worker: light skin tone\n1F477 1F3FB 200D 2642                      ; minimally-qualified # 👷🏻‍♂ man construction worker: light skin tone\n1F477 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 👷🏼‍♂️ man construction worker: medium-light skin tone\n1F477 1F3FC 200D 2642                      ; minimally-qualified # 👷🏼‍♂ man construction worker: medium-light skin tone\n1F477 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 👷🏽‍♂️ man construction worker: medium skin tone\n1F477 1F3FD 200D 2642                      ; minimally-qualified # 👷🏽‍♂ man construction worker: medium skin tone\n1F477 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 👷🏾‍♂️ man construction worker: medium-dark skin tone\n1F477 1F3FE 200D 2642                      ; minimally-qualified # 👷🏾‍♂ man construction worker: medium-dark skin tone\n1F477 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 👷🏿‍♂️ man construction worker: dark skin tone\n1F477 1F3FF 200D 2642                      ; minimally-qualified # 👷🏿‍♂ man construction worker: dark skin tone\n1F477 200D 2640 FE0F                       ; fully-qualified     # 👷‍♀️ woman construction worker\n1F477 200D 2640                            ; minimally-qualified # 👷‍♀ woman construction worker\n1F477 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 👷🏻‍♀️ woman construction worker: light skin tone\n1F477 1F3FB 200D 2640                      ; minimally-qualified # 👷🏻‍♀ woman construction worker: light skin tone\n1F477 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 👷🏼‍♀️ woman construction worker: medium-light skin tone\n1F477 1F3FC 200D 2640                      ; minimally-qualified # 👷🏼‍♀ woman construction worker: medium-light skin tone\n1F477 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 👷🏽‍♀️ woman construction worker: medium skin tone\n1F477 1F3FD 200D 2640                      ; minimally-qualified # 👷🏽‍♀ woman construction worker: medium skin tone\n1F477 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 👷🏾‍♀️ woman construction worker: medium-dark skin tone\n1F477 1F3FE 200D 2640                      ; minimally-qualified # 👷🏾‍♀ woman construction worker: medium-dark skin tone\n1F477 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 👷🏿‍♀️ woman construction worker: dark skin tone\n1F477 1F3FF 200D 2640                      ; minimally-qualified # 👷🏿‍♀ woman construction worker: dark skin tone\n1F934                                      ; fully-qualified     # 🤴 prince\n1F934 1F3FB                                ; fully-qualified     # 🤴🏻 prince: light skin tone\n1F934 1F3FC                                ; fully-qualified     # 🤴🏼 prince: medium-light skin tone\n1F934 1F3FD                                ; fully-qualified     # 🤴🏽 prince: medium skin tone\n1F934 1F3FE                                ; fully-qualified     # 🤴🏾 prince: medium-dark skin tone\n1F934 1F3FF                                ; fully-qualified     # 🤴🏿 prince: dark skin tone\n1F478                                      ; fully-qualified     # 👸 princess\n1F478 1F3FB                                ; fully-qualified     # 👸🏻 princess: light skin tone\n1F478 1F3FC                                ; fully-qualified     # 👸🏼 princess: medium-light skin tone\n1F478 1F3FD                                ; fully-qualified     # 👸🏽 princess: medium skin tone\n1F478 1F3FE                                ; fully-qualified     # 👸🏾 princess: medium-dark skin tone\n1F478 1F3FF                                ; fully-qualified     # 👸🏿 princess: dark skin tone\n1F473                                      ; fully-qualified     # 👳 person wearing turban\n1F473 1F3FB                                ; fully-qualified     # 👳🏻 person wearing turban: light skin tone\n1F473 1F3FC                                ; fully-qualified     # 👳🏼 person wearing turban: medium-light skin tone\n1F473 1F3FD                                ; fully-qualified     # 👳🏽 person wearing turban: medium skin tone\n1F473 1F3FE                                ; fully-qualified     # 👳🏾 person wearing turban: medium-dark skin tone\n1F473 1F3FF                                ; fully-qualified     # 👳🏿 person wearing turban: dark skin tone\n1F473 200D 2642 FE0F                       ; fully-qualified     # 👳‍♂️ man wearing turban\n1F473 200D 2642                            ; minimally-qualified # 👳‍♂ man wearing turban\n1F473 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 👳🏻‍♂️ man wearing turban: light skin tone\n1F473 1F3FB 200D 2642                      ; minimally-qualified # 👳🏻‍♂ man wearing turban: light skin tone\n1F473 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 👳🏼‍♂️ man wearing turban: medium-light skin tone\n1F473 1F3FC 200D 2642                      ; minimally-qualified # 👳🏼‍♂ man wearing turban: medium-light skin tone\n1F473 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 👳🏽‍♂️ man wearing turban: medium skin tone\n```\n\n----------------------------------------\n\nTITLE: Configuring JHBuild Plugin in Oh My Zsh - Zsh\nDESCRIPTION: This code snippet demonstrates how to enable the JHBuild plugin within Oh My Zsh by adding 'jhbuild' to the plugins array in your .zshrc configuration file. This setup step is required to utilize the defined JHBuild aliases for command-line efficiency. The 'plugins' array should include 'jhbuild' alongside any other plugins used; no arguments or special formatting are required beyond appending the plugin name.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jhbuild/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jhbuild)\n```\n\n----------------------------------------\n\nTITLE: Directory History After CD Command\nDESCRIPTION: Example showing how the cd command affects directory history state.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n➜  /u/bin typeset -pm dirhistory_\\*\ntypeset -ax dirhistory_past=( /home/user /usr )\ntypeset -ax dirhistory_future=( /usr/bin )\n```\n\n----------------------------------------\n\nTITLE: Starting Zsh with Minimal Configuration (Debugging)\nDESCRIPTION: Commands (`zsh -f` or `zsh --no-rcs`) to launch the Zsh shell without sourcing any of its usual startup files (like `.zshrc`, `.zshenv`, `.zprofile`, `.zlogin`). This provides a minimal Zsh environment useful for debugging scripts like `kube-ps1` and isolating potential conflicts with user-specific configurations.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_16\n\nLANGUAGE: zsh\nCODE:\n```\nzsh -f\nor\nzsh --no-rcs\n```\n\n----------------------------------------\n\nTITLE: Manual installation step 1: Cloning the wd repository\nDESCRIPTION: Command to clone the wd repository from GitHub to a local directory for manual installation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_9\n\nLANGUAGE: zsh\nCODE:\n```\ngit clone git@github.com:mfaerevaag/wd.git ~/.local/wd --depth 1\n```\n\n----------------------------------------\n\nTITLE: Documenting BBEdit Plugin Commands in Markdown\nDESCRIPTION: This snippet describes the various commands available in the BBEdit plugin for Oh My Zsh. It includes usage instructions for the 'bb', 'bbpb', and 'bbd' commands, explaining how they interact with BBEdit.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bbedit/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Usage\n\n * If the `bb` command is called without an argument, launch BBEdit\n\n * If `bb` is passed a directory, cd to it and open it in BBEdit\n\n * If `bb` is passed a file, open it in BBEdit\n\n * If `bbpb` create a new BBEdit document with the contents of the clipboard\n\n * If `bbd` alias for BBEdit diff tool\n```\n\n----------------------------------------\n\nTITLE: Adding Vagrant Plugin to Oh My Zsh Configuration\nDESCRIPTION: Code snippet showing how to enable the Vagrant plugin in Oh My Zsh by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... vagrant)\n```\n\n----------------------------------------\n\nTITLE: Configuring Nmap Plugin in Zshrc\nDESCRIPTION: The snippet demonstrates how to add the Nmap plugin to the array of plugins in the zshrc configuration file for Oh My Zsh. This setup requires no external dependencies beyond having Oh My Zsh installed, and it adds a variety of Nmap-related aliases. To configure, add the 'nmap' entry to the plugins array. This setup allows for simplified invocation of Nmap scans through easy-to-remember aliases.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nmap/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... nmap)\n```\n\n----------------------------------------\n\nTITLE: Adding Toolbox Prompt Information to RPROMPT\nDESCRIPTION: This code demonstrates how to use the toolbox_prompt_info() function in the RPROMPT variable to display the toolbox indicator when inside a toolbox container.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/toolbox/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nRPROMPT='$(toolbox_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Mapping - Light and Video Equipment\nDESCRIPTION: Unicode codepoint mappings for light sources and video equipment emoji symbols.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_50\n\nLANGUAGE: txt\nCODE:\n```\n# subgroup: light & video\n1F3A5                                      ; fully-qualified     # 🎥 movie camera\n1F39E FE0F                                 ; fully-qualified     # 🎞️ film frames\n1F39E                                      ; unqualified         # 🎞 film frames\n```\n\n----------------------------------------\n\nTITLE: Integrating vagrant_prompt_info with Command Prompt\nDESCRIPTION: Demonstrates how to include Vagrant VM status information in either the main prompt or right prompt by adding the vagrant_prompt_info function to the appropriate prompt variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant-prompt/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nPROMPT=\"$PROMPT\"' $(vagrant_prompt_info)'\n# or\nRPROMPT='$(vagrant_prompt_info)'\n```\n\n----------------------------------------\n\nTITLE: Using Official and Alias Emoji Names in Zsh\nDESCRIPTION: Illustrates that the plugin supports both official Unicode names (e.g., 'grinning_face_with_smiling_eyes') and shorter aliases derived from Gemoji (e.g., 'smile') for the same emoji character (😄). Both commands access the `$emoji` variable and produce identical output.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_14\n\nLANGUAGE: zsh\nCODE:\n```\necho $emoji[grinning_face_with_smiling_eyes]\necho $emoji[smile]\n```\n\n----------------------------------------\n\nTITLE: Activating catimg Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh configuration snippet demonstrates how to enable the `catimg` plugin within an Oh My Zsh setup. By adding `catimg` to the `plugins` array located in the user's `.zshrc` file, the plugin's functionality, including the `catimg` command for displaying images, becomes available in the shell. Note that this plugin requires `magick convert` (from ImageMagick) to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/catimg/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... catimg)\n```\n\n----------------------------------------\n\nTITLE: Configuring FirewallD Plugin in Zsh Script\nDESCRIPTION: Defines the addition of FirewallD to the plugins array, enhancing command-line functionality with pre-defined aliases for common FirewallD operations. This integration is achieved by adding \\\"firewalld\\\" to the plugins list, simplifying the execution of firewall commands with shorthand notations and functions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/firewalld/README.md#2025-04-22_snippet_0\n\nLANGUAGE: Zsh\nCODE:\n```\nplugins=(... firewalld)\n```\n\n----------------------------------------\n\nTITLE: Installing wd using Home Manager for NixOS\nDESCRIPTION: Configuration to add to home.nix file to install wd via Home Manager in NixOS using fetchFromGitHub.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_5\n\nLANGUAGE: nix\nCODE:\n```\nprograms.zsh.plugins = [\n  {\n    name = \"wd\";\n    src = pkgs.fetchFromGitHub {\n      owner = \"mfaerevaag\";\n      repo = \"wd\";\n      rev = \"v0.5.2\";\n      sha256 = \"sha256-4yJ1qhqhNULbQmt6Z9G22gURfDLe30uV1ascbzqgdhg=\";\n    };\n  }\n];\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Specific Book Name Completion\nDESCRIPTION: Shows another example of tab completion with a more specific partial book name 'ja'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\n$ dnote edit ja(press <TAB> here)\n```\n\n----------------------------------------\n\nTITLE: Installing wd from Arch Linux AUR\nDESCRIPTION: Command to install the wd plugin from the Arch User Repository using an AUR helper like yay.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nyay -S zsh-plugin-wd-git\n# or use any other AUR helper\n```\n\n----------------------------------------\n\nTITLE: Configuring Gas Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet demonstrates how to add the 'gas' plugin to your Oh My Zsh configuration by editing the plugins array in your .zshrc file. To activate autocompletion for the 'gas' command (a git author switcher tool), users must append 'gas' to their active plugin list. The plugins array should include any additional plugins you wish to enable alongside 'gas'.\nRequired: Oh My Zsh installation, the gas plugin present in the plugins directory, and appropriate permissions to update .zshrc. The snippet expects users to be editing their configuration in Zsh; no output is generated except the updated configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/gas/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... gas)\n```\n\n----------------------------------------\n\nTITLE: Geometric Shapes Unicode Mapping\nDESCRIPTION: Unicode mappings for geometric shape emoji including circles, squares, diamonds, and triangles of various colors and sizes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_59\n\nLANGUAGE: plaintext\nCODE:\n```\n1F534                                      ; fully-qualified     # 🔴 red circle\n1F7E0                                      ; fully-qualified     # 🟠 orange circle\n1F7E1                                      ; fully-qualified     # 🟡 yellow circle\n```\n\n----------------------------------------\n\nTITLE: Adding Ionic Plugin to Zsh\nDESCRIPTION: This snippet demonstrates how to add the Ionic CLI plugin to the plugins array in a Zsh configuration file. This inclusion enables command completion and shorthand aliases for frequently used Ionic commands, enhancing the command line experience for developers working with the Ionic framework in Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ionic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ionic)\n```\n\n----------------------------------------\n\nTITLE: Displaying a Random Emoji from a Group in Zsh\nDESCRIPTION: Illustrates using the `random_emoji` function with an argument specifying an emoji group name (e.g., `fruits`, `animals`). This prints a random emoji belonging only to the specified group. Group definitions are stored in the `$emoji_groups` variable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\n$> random_emoji <group>\n```\n\n----------------------------------------\n\nTITLE: Benchmarking Mercurial Branch Command - Mercurial - Console\nDESCRIPTION: Demonstrates timing of the 'hg branch' command within a console environment. This output helps compare the performance difference between vanilla VCS commands and the branch plugin. Requires Mercurial to be installed and the benchmark to be run inside a Mercurial repository. Output includes user/system time and actual elapsed time.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/branch/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ time hg branch\n0.11s user 0.14s system 70% cpu 0.355 total\n```\n\n----------------------------------------\n\nTITLE: CDE Usage Example Commands\nDESCRIPTION: Example commands demonstrating the setup for using the cde feature.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ~\ncd /usr\ncd share\ncd doc\n\n# <Alt + Left>\n# <Alt + Left>\n```\n\n----------------------------------------\n\nTITLE: Directory History After CDE Command\nDESCRIPTION: Example showing how the cde command preserves directory history state.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n➜  /u/bin typeset -pm dirhistory_\\*\ntypeset -ax dirhistory_past=( /home/user /usr /usr/bin )\ntypeset -ax dirhistory_future=( /usr/share/doc /usr/share )\n```\n\n----------------------------------------\n\nTITLE: Installing Zsh-z with Antigen\nDESCRIPTION: Command for installing Zsh-z using the Antigen plugin manager. This should be added to .zshrc before the 'antigen apply' line.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nantigen bundle agkozak/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Breaking Change Commit Message Example\nDESCRIPTION: Complete example of a commit message introducing breaking changes, including the breaking change indicator and explanatory text in the commit body.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\nstyle(agnoster)!: change dirty git repo glyph\n\nBREAKING CHANGE: the glyph to indicate when a git repository is dirty has\nchanged from a Powerline character to a standard UTF-8 emoji. You can\nchange it back by setting `ZSH_THEME_DIRTY_GLYPH`.\n\nFixes #420\n\nCo-authored-by: Username <email>\n```\n\n----------------------------------------\n\nTITLE: Manual installation step 3: Installing manpage\nDESCRIPTION: Commands to install the wd manpage into the system manpage directory and update the manpage database.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_11\n\nLANGUAGE: zsh\nCODE:\n```\nsudo install -m 644 ~/.local/wd/wd.1 /usr/share/man/man1/wd.1\nsudo mandb /usr/share/man/man1\n```\n\n----------------------------------------\n\nTITLE: Customizing Vagrant Prompt Appearance\nDESCRIPTION: Shows the customization variables that can be set in .zshrc to control the appearance of the Vagrant status information in the prompt, including prefix, suffix, and symbols for different VM states.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vagrant-prompt/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nZSH_THEME_VAGRANT_PROMPT_PREFIX=\"%{$fg_bold[blue]%}[\"\nZSH_THEME_VAGRANT_PROMPT_SUFFIX=\"%{$fg_bold[blue]%}]%{$reset_color%} \"\nZSH_THEME_VAGRANT_PROMPT_RUNNING=\"%{$fg_no_bold[green]%}●\"\nZSH_THEME_VAGRANT_PROMPT_POWEROFF=\"%{$fg_no_bold[red]%}●\"\nZSH_THEME_VAGRANT_PROMPT_SUSPENDED=\"%{$fg_no_bold[yellow]%}●\"\nZSH_THEME_VAGRANT_PROMPT_NOT_CREATED=\"%{$fg_no_bold[white]%}○\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Pylint Plugin in Oh My Zsh - Zsh Shell\nDESCRIPTION: This snippet demonstrates how to enable the Pylint plugin by adding 'pylint' to the plugins array in a .zshrc configuration file. This setup provides autocompletion and command aliases for Pylint within Zsh. To activate the changes, the user must reload or restart the shell session. No extra dependencies are required beyond Oh My Zsh and the Pylint Python package.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pylint/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pylint)\n```\n\n----------------------------------------\n\nTITLE: Creating a Device Configuration File for wakeonlan\nDESCRIPTION: Shows the format for a device configuration file that should be placed in ~/.wakeonlan/. The file contains the MAC address and network broadcast address for the target device.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wakeonlan/README.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n00:11:22:33:44:55:66 192.168.0.255\n```\n\n----------------------------------------\n\nTITLE: Unicode Country Flag Code Points\nDESCRIPTION: Maps Unicode code point pairs to country flag emoji with fully-qualified status indicators. Each entry includes hexadecimal Unicode values and the corresponding country name.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_61\n\nLANGUAGE: unicode\nCODE:\n```\n1F1E6 1F1E8                                ; fully-qualified     # 🇦🇨 flag: Ascension Island\n1F1E6 1F1E9                                ; fully-qualified     # 🇦🇩 flag: Andorra\n1F1E6 1F1EA                                ; fully-qualified     # 🇦🇪 flag: United Arab Emirates\n[...truncated for brevity...]\n1F1EE 1F1F2                                ; fully-qualified     # 🇮🇲 flag: Isle of Man\n1F1EE 1F1F3                                ; fully-qualified     # 🇮🇳 flag: India\n```\n\n----------------------------------------\n\nTITLE: Enabling Qodana Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh code snippet shows how to activate the Qodana plugin by adding its name to the `plugins` array within the Oh My Zsh configuration file (`.zshrc`). This step is necessary to enable command-line completions for the JetBrains Qodana CLI. Requires Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qodana/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... qodana)\n```\n\n----------------------------------------\n\nTITLE: Using the open_lighthouse_ticket Alias (lho) (Console)\nDESCRIPTION: Demonstrates using the `lho` alias (for `open_lighthouse_ticket`) to open Lighthouse ticket #23. The command reads the project URL from the required `.lighthouse-url` file in the current directory, appends the ticket number (23 in this case), prints a confirmation message, and opens the constructed URL in the default web browser.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lighthouse/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ lho 23\nOpening ticket #23\n# The browser goes to https://rails.lighthouseapp.com/projects/8994/tickets/23\n```\n\n----------------------------------------\n\nTITLE: Adding Sigstore Plugin to Oh My Zsh Configuration\nDESCRIPTION: Demonstrates how to enable the Sigstore plugin by adding it to the plugins array in the zshrc configuration file. This enables completion for Cosign, Sget, and Rekor CLI tools.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sigstore/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sigstore)\n```\n\n----------------------------------------\n\nTITLE: Defining Emotion-Related Emojis (Unicode)\nDESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'emotion'. Includes various heart symbols, symbols like 'anger', 'collision', 'dizzy', speech/thought bubbles, and others. Contains both fully-qualified and unqualified variants for some emojis. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\n# subgroup: emotion\n1F48B                                      ; fully-qualified     # 💋 kiss mark\n1F48C                                      ; fully-qualified     # 💌 love letter\n1F498                                      ; fully-qualified     # 💘 heart with arrow\n1F49D                                      ; fully-qualified     # 💝 heart with ribbon\n1F496                                      ; fully-qualified     # 💖 sparkling heart\n1F497                                      ; fully-qualified     # 💗 growing heart\n1F493                                      ; fully-qualified     # 💓 beating heart\n1F49E                                      ; fully-qualified     # 💞 revolving hearts\n1F495                                      ; fully-qualified     # 💕 two hearts\n1F49F                                      ; fully-qualified     # 💟 heart decoration\n2763 FE0F                                  ; fully-qualified     # ❣️ heart exclamation\n2763                                       ; unqualified         # ❣ heart exclamation\n1F494                                      ; fully-qualified     # 💔 broken heart\n2764 FE0F                                  ; fully-qualified     # ❤️ red heart\n2764                                       ; unqualified         # ❤ red heart\n1F9E1                                      ; fully-qualified     # 🧡 orange heart\n1F49B                                      ; fully-qualified     # 💛 yellow heart\n1F49A                                      ; fully-qualified     # 💚 green heart\n1F499                                      ; fully-qualified     # 💙 blue heart\n1F49C                                      ; fully-qualified     # 💜 purple heart\n1F90E                                      ; fully-qualified     # 🤎 brown heart\n1F5A4                                      ; fully-qualified     # 🖤 black heart\n1F90D                                      ; fully-qualified     # 🤍 white heart\n1F4AF                                      ; fully-qualified     # 💯 hundred points\n1F4A2                                      ; fully-qualified     # 💢 anger symbol\n1F4A5                                      ; fully-qualified     # 💥 collision\n1F4AB                                      ; fully-qualified     # 💫 dizzy\n1F4A6                                      ; fully-qualified     # 💦 sweat droplets\n1F4A8                                      ; fully-qualified     # 💨 dashing away\n1F573 FE0F                                 ; fully-qualified     # 🕳️ hole\n1F573                                      ; unqualified         # 🕳 hole\n1F4A3                                      ; fully-qualified     # 💣 bomb\n1F4AC                                      ; fully-qualified     # 💬 speech balloon\n1F441 FE0F 200D 1F5E8 FE0F                 ; fully-qualified     # 👁️‍🗨️ eye in speech bubble\n1F441 200D 1F5E8 FE0F                      ; unqualified         # 👁‍🗨️ eye in speech bubble\n1F441 FE0F 200D 1F5E8                      ; unqualified         # 👁️‍🗨 eye in speech bubble\n1F441 200D 1F5E8                           ; unqualified         # 👁‍🗨 eye in speech bubble\n1F5E8 FE0F                                 ; fully-qualified     # 🗨️ left speech bubble\n1F5E8                                      ; unqualified         # 🗨 left speech bubble\n1F5EF FE0F                                 ; fully-qualified     # 🗯️ right anger bubble\n1F5EF                                      ; unqualified         # 🗯 right anger bubble\n1F4AD                                      ; fully-qualified     # 💭 thought balloon\n1F4A4                                      ; fully-qualified     # 💤 zzz\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Emoji for Person Gesturing NO\nDESCRIPTION: This snippet defines Unicode codepoints for the 'person gesturing NO' emoji, including variations for different skin tones and genders. It includes both fully-qualified and minimally-qualified versions of the emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_14\n\nLANGUAGE: Unicode\nCODE:\n```\n1F645                                      ; fully-qualified     # 🙅 person gesturing NO\n1F645 1F3FB                                ; fully-qualified     # 🙅🏻 person gesturing NO: light skin tone\n1F645 1F3FC                                ; fully-qualified     # 🙅🏼 person gesturing NO: medium-light skin tone\n1F645 1F3FD                                ; fully-qualified     # 🙅🏽 person gesturing NO: medium skin tone\n1F645 1F3FE                                ; fully-qualified     # 🙅🏾 person gesturing NO: medium-dark skin tone\n1F645 1F3FF                                ; fully-qualified     # 🙅🏿 person gesturing NO: dark skin tone\n1F645 200D 2642 FE0F                       ; fully-qualified     # 🙅‍♂️ man gesturing NO\n1F645 200D 2642                            ; minimally-qualified # 🙅‍♂ man gesturing NO\n1F645 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🙅🏻‍♂️ man gesturing NO: light skin tone\n1F645 1F3FB 200D 2642                      ; minimally-qualified # 🙅🏻‍♂ man gesturing NO: light skin tone\n```\n\n----------------------------------------\n\nTITLE: Example Multi-plugin Style Commit Format\nDESCRIPTION: Example of a commit message affecting multiple plugins or sections, showing that the scope can be omitted when changes are not specific to one section.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nstyle: fix inline declaration of arrays\n```\n\n----------------------------------------\n\nTITLE: Result of Basic Dnote Command Completion\nDESCRIPTION: Shows the result after tab completion is performed on a partial Dnote command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\n$ dnote add\n```\n\n----------------------------------------\n\nTITLE: Adding LXD Plugin to Oh My Zsh\nDESCRIPTION: This snippet demonstrates how to add the LXD plugin to the plugins array in the Zsh configuration file. This setup enables command completions and aliases for LXC in Oh My Zsh. No external dependencies are required aside from having Oh My Zsh installed. To activate, insert 'lxd' into the plugins array within the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lxd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... lxd)\n```\n\n----------------------------------------\n\nTITLE: Defining Country Flag Emojis Using Unicode\nDESCRIPTION: This snippet shows the Unicode definition format for country flag emojis. Each line contains the Unicode code points for the flag, followed by a qualification status and a description of the flag.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_62\n\nLANGUAGE: Unicode\nCODE:\n```\n1F1EE 1F1F4                                ; fully-qualified     # 🇮🇴 flag: British Indian Ocean Territory\n1F1EE 1F1F6                                ; fully-qualified     # 🇮🇶 flag: Iraq\n1F1EE 1F1F7                                ; fully-qualified     # 🇮🇷 flag: Iran\n1F1EE 1F1F8                                ; fully-qualified     # 🇮🇸 flag: Iceland\n1F1EE 1F1F9                                ; fully-qualified     # 🇮🇹 flag: Italy\n```\n\n----------------------------------------\n\nTITLE: Formatting Unicode Emoji Test Data - Unicode Emoji Specification - Plain Text\nDESCRIPTION: This snippet presents the official data structure and format for Unicode emoji test data as specified for UTS #51 version 12.0. No dependencies are required, but users should be familiar with Unicode and text file manipulation. Key parameters include lists of Unicode code points, statuses (such as 'fully-qualified' or 'unqualified'), group/subgroup annotations as comments, and descriptive emoji names. Expected input is a structured text file following this convention, and the output is consistent reference data for emoji testing; it is not intended for programmatic parsing but rather as human-readable or reference data for further processing. Limitations include a lack of syntax for machine-checked integrity—parsing logic must be built separately.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\n# emoji-data.txt\\n# (Originally emoji-test.txt)\\n# (Retrieved from https://unicode.org/Public/emoji/12.0/emoji-test.txt)\\n\\n# Date: 2019-01-27, 15:43:01 GMT\\n# \\u00a9 2019 Unicode\\u00ae, Inc.\\n# Unicode and the Unicode Logo are registered trademarks of Unicode, Inc. in the U.S. and other countries.\\n# For terms of use, see http://www.unicode.org/terms_of_use.html\\n#\\n# Emoji Keyboard/Display Test Data for UTS #51\\n# Version: 12.0\\n#\\n# For documentation and usage, see http://www.unicode.org/reports/tr51\\n#\\n# This file provides data for testing which emoji forms should be in keyboards and which should also be displayed/processed.\\n# Format: code points; status # emoji name\\n#     Code points \\u2014 list of one or more hex code points, separated by spaces\\n#     Status\\n#       component           \\u2014 an Emoji_Component,\\n#                             excluding Regional_Indicators, ASCII, and non-Emoji.\\n#       fully-qualified     \\u2014 a fully-qualified emoji (see ED-18 in UTS #51),\\n#                             excluding Emoji_Component\\n#       minimally-qualified \\u2014 a minimally-qualified emoji (see ED-18a in UTS #51)\\n#       unqualified         \\u2014 a unqualified emoji (See ED-19 in UTS #51)\\n# Notes:\\n#   \\u2022 This includes the emoji components that need emoji presentation (skin tone and hair)\\n#     when isolated, but omits the components that need not have an emoji\\n#     presentation when isolated.\\n#   \\u2022 The RGI set is covered by the listed fully-qualified emoji. \\n#   \\u2022 The listed minimally-qualified and unqualified cover all cases where an\\n#     element of the RGI set is missing one or more emoji presentation selectors.\\n#   \\u2022 The file is in CLDR order, not codepoint order. This is recommended (but not required!) for keyboard palettes.\\n#   \\u2022 The groups and subgroups are illustrative. See the Emoji Order chart for more information.\\n\\n\\n# group: Smileys & Emotion\\n\\n# subgroup: face-smiling\\n1F600                                      ; fully-qualified     # \\ud83d\\ude00 grinning face\\n1F603                                      ; fully-qualified     # \\ud83d\\ude03 grinning face with big eyes\\n1F604                                      ; fully-qualified     # \\ud83d\\ude04 grinning face with smiling eyes\\n1F601                                      ; fully-qualified     # \\ud83d\\ude01 beaming face with smiling eyes\\n1F606                                      ; fully-qualified     # \\ud83d\\ude06 grinning squinting face\\n1F605                                      ; fully-qualified     # \\ud83d\\ude05 grinning face with sweat\\n1F923                                      ; fully-qualified     # \\ud83e\\udd23 rolling on the floor laughing\\n1F602                                      ; fully-qualified     # \\ud83d\\ude02 face with tears of joy\\n1F642                                      ; fully-qualified     # \\ud83d\\ude42 slightly smiling face\\n1F643                                      ; fully-qualified     # \\ud83d\\ude43 upside-down face\\n1F609                                      ; fully-qualified     # \\ud83d\\ude09 winking face\\n1F60A                                      ; fully-qualified     # \\ud83d\\ude0a smiling face with smiling eyes\\n1F607                                      ; fully-qualified     # \\ud83d\\ude07 smiling face with halo\\n\\n# subgroup: face-affection\\n1F970                                      ; fully-qualified     # \\ud83e\\udd70 smiling face with hearts\\n1F60D                                      ; fully-qualified     # \\ud83d\\ude0d smiling face with heart-eyes\\n1F929                                      ; fully-qualified     # \\ud83e\\udd29 star-struck\\n1F618                                      ; fully-qualified     # \\ud83d\\ude18 face blowing a kiss\\n1F617                                      ; fully-qualified     # \\ud83d\\ude17 kissing face\\n263A FE0F                                  ; fully-qualified     # \\u263a\\ufe0f smiling face\\n263A                                       ; unqualified         # \\u263a smiling face\\n1F61A                                      ; fully-qualified     # \\ud83d\\ude1a kissing face with closed eyes\\n1F619                                      ; fully-qualified     # \\ud83d\\ude19 kissing face with smiling eyes\\n\\n# subgroup: face-tongue\\n1F60B                                      ; fully-qualified     # \\ud83d\\ude0b face savoring food\\n1F61B                                      ; fully-qualified     # \\ud83d\\ude1b face with tongue\\n1F61C                                      ; fully-qualified     # \\ud83d\\ude1c winking face with tongue\\n1F92A                                      ; fully-qualified     # \\ud83e\\udd2a zany face\\n1F61D                                      ; fully-qualified     # \\ud83d\\ude1d squinting face with tongue\\n1F911                                      ; fully-qualified     # \\ud83e\\udd11 money-mouth face\\n\\n# subgroup: face-hand\\n1F917                                      ; fully-qualified     # \\ud83e\\udd17 hugging face\\n1F92D                                      ; fully-qualified     # \\ud83e\\udd2d face with hand over mouth\\n1F92B                                      ; fully-qualified     # \\ud83e\\udd2b shushing face\\n1F914                                      ; fully-qualified     # \\ud83e\\udd14 thinking face\\n\\n# subgroup: face-neutral-skeptical\\n1F910                                      ; fully-qualified     # \\ud83e\\udd10 zipper-mouth face\\n1F928                                      ; fully-qualified     # \\ud83e\\udd28 face with raised eyebrow\\n1F610                                      ; fully-qualified     # \\ud83d\\ude10 neutral face\\n1F611                                      ; fully-qualified     # \\ud83d\\ude11 expressionless face\\n1F636                                      ; fully-qualified     # \\ud83d\\ude36 face without mouth\\n1F60F                                      ; fully-qualified     # \\ud83d\\ude0f smirking face\\n1F612                                      ; fully-qualified     # \\ud83d\\ude12 unamused face\\n1F644                                      ; fully-qualified     # \\ud83d\\ude44 face with rolling eyes\\n1F62C                                      ; fully-qualified     # \\ud83d\\ude2c grimacing face\\n1F925                                      ; fully-qualified     # \\ud83e\\udd25 lying face\\n\\n# subgroup: face-sleepy\\n1F60C                                      ; fully-qualified     # \\ud83d\\ude0c relieved face\\n1F614                                      ; fully-qualified     # \\ud83d\\ude14 pensive face\\n1F62A                                      ; fully-qualified     # \\ud83d\\ude2a sleepy face\\n1F924                                      ; fully-qualified     # \\ud83e\\udd24 drooling face\\n1F634                                      ; fully-qualified     # \\ud83d\\ude34 sleeping face\\n\\n# subgroup: face-unwell\\n1F637                                      ; fully-qualified     # \\ud83d\\ude37 face with medical mask\\n1F912                                      ; fully-qualified     # \\ud83e\\udd12 face with thermometer\\n1F915                                      ; fully-qualified     # \\ud83e\\udd15 face with head-bandage\\n1F922                                      ; fully-qualified     # \\ud83e\\udd22 nauseated face\\n1F92E                                      ; fully-qualified     # \\ud83e\\udd2e face vomiting\\n1F927                                      ; fully-qualified     # \\ud83e\\udd27 sneezing face\\n1F975                                      ; fully-qualified     # \\ud83e\\udd75 hot face\\n1F976                                      ; fully-qualified     # \\ud83e\\udd76 cold face\\n1F974                                      ; fully-qualified     # \\ud83e\\udd74 woozy face\\n1F635                                      ; fully-qualified     # \\ud83d\\ude35 dizzy face\\n1F92F                                      ; fully-qualified     # \\ud83e\\udd2f exploding head\\n\\n# subgroup: face-hat\\n1F920                                      ; fully-qualified     # \\ud83e\\udd20 cowboy hat face\\n1F973                                      ; fully-qualified     # \\ud83e\\udd73 partying face\\n\\n# subgroup: face-glasses\\n1F60E                                      ; fully-qualified     # \\ud83d\\ude0e smiling face with sunglasses\\n1F913                                      ; fully-qualified     # \\ud83e\\udd13 nerd face\\n1F9D0                                      ; fully-qualified     # \\ud83e\\udd50 face with monocle\\n\\n# subgroup: face-concerned\\n1F615                                      ; fully-qualified     # \\ud83d\\ude15 confused face\\n1F61F                                      ; fully-qualified     # \\ud83d\\ude1f worried face\\n1F641                                      ; fully-qualified     # \\ud83d\\ude41 slightly frowning face\\n2639 FE0F                                  ; fully-qualified     # \\u2639\\ufe0f frowning face\\n2639                                       ; unqualified         # \\u2639 frowning face\\n1F62E                                      ; fully-qualified     # \\ud83d\\ude2e face with open mouth\\n1F62F                                      ; fully-qualified     # \\ud83d\\ude2f hushed face\\n1F632                                      ; fully-qualified     # \\ud83d\\ude32 astonished face\\n1F633                                      ; fully-qualified     # \\ud83d\\ude33 flushed face\\n1F97A                                      ; fully-qualified     # \\ud83e\\udd7a pleading face\\n1F626                                      ; fully-qualified     # \\ud83d\\ude26 frowning face with open mouth\\n1F627                                      ; fully-qualified     # \\ud83d\\ude27 anguished face\\n1F628                                      ; fully-qualified     # \\ud83d\\ude28 fearful face\\n1F630                                      ; fully-qualified     # \\ud83d\\ude30 anxious face with sweat\\n1F625                                      ; fully-qualified     # \\ud83d\\ude25 sad but relieved face\\n1F622                                      ; fully-qualified     # \\ud83d\\ude22 crying face\\n1F62D                                      ; fully-qualified     # \\ud83d\\ude2d loudly crying face\\n1F631                                      ; fully-qualified     # \\ud83d\\ude31 face screaming in fear\\n1F616                                      ; fully-qualified     # \\ud83d\\ude16 confounded face\\n1F623                                      ; fully-qualified     # \\ud83d\\ude23 persevering face\\n1F61E                                      ; fully-qualified     # \\ud83d\\ude1e disappointed face\\n1F613                                      ; fully-qualified     # \\ud83d\\ude13 downcast face with sweat\\n1F629                                      ; fully-qualified     # \\ud83d\\ude29 weary face\\n1F62B                                      ; fully-qualified     # \\ud83d\\ude2b tired face\\n1F971                                      ; fully-qualified     # \\ud83e\\udd71 yawning face\n```\n\n----------------------------------------\n\nTITLE: Systemd Unit Status Prompt Format Example\nDESCRIPTION: This example shows the output format of the systemd_prompt_info function which can be used in the command prompt to display systemd unit statuses.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n<prefix><unit>:<active|notactive><suffix>\n```\n\n----------------------------------------\n\nTITLE: Sourcing zsh-history-substring-search Script - Zsh - Shell\nDESCRIPTION: Sources the primary zsh-history-substring-search plugin script into the current interactive Zsh session, making its functions available. Requires the script file to be present in the current directory or specified path. Input: script filename; Output: plugin functions loaded for use.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nsource zsh-history-substring-search.zsh\n```\n\n----------------------------------------\n\nTITLE: Querying Dash with Keywords\nDESCRIPTION: This command queries the Dash application for a specific term or documentation related to a specified keyword, such as 'python:tuple'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\ndash python:tuple\n```\n\n----------------------------------------\n\nTITLE: Adding Colorize Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the colorize plugin in the Oh My Zsh configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colorize/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... colorize)\n```\n\n----------------------------------------\n\nTITLE: Unicode Person Emoji Definitions\nDESCRIPTION: Comprehensive list of Unicode codepoint combinations for human emojis with various skin tones and attributes. Each line contains the Unicode values and a description of the represented emoji, marked as either fully-qualified or minimally-qualified.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_10\n\nLANGUAGE: unicode\nCODE:\n```\n1F476                                      ; fully-qualified     # 👶 baby\n1F476 1F3FB                                ; fully-qualified     # 👶🏻 baby: light skin tone\n1F476 1F3FC                                ; fully-qualified     # 👶🏼 baby: medium-light skin tone\n1F9D1                                      ; fully-qualified     # 🧑 person\n1F468 200D 1F9B0                           ; fully-qualified     # 👨‍🦰 man: red hair\n1F468 1F3FB 200D 1F9B0                     ; fully-qualified     # 👨🏻‍🦰 man: light skin tone, red hair\n1F471 200D 2640 FE0F                       ; fully-qualified     # 👱‍♀️ woman: blond hair\n1F471 200D 2640                            ; minimally-qualified # 👱‍♀ woman: blond hair\n```\n\n----------------------------------------\n\nTITLE: Enabling the Hasura Plugin in Oh My Zsh Configuration (zsh)\nDESCRIPTION: This snippet shows how to enable the Hasura plugin for Oh My Zsh. The `hasura` identifier needs to be added to the `plugins` array within the user's `~/.zshrc` file. This activates the Hasura CLI autocompletion features provided by the plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hasura/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... hasura)\n```\n\n----------------------------------------\n\nTITLE: Adding Ngrok to Zsh Plugins\nDESCRIPTION: This snippet shows how to add the Ngrok plugin to your Zsh configuration file to enable command line completion for Ngrok CLI commands. The plugins must be listed in the plugins array of your .zshrc file, and this requires Oh My Zsh framework installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ngrok/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ngrok)\n```\n\n----------------------------------------\n\nTITLE: Creating a Shortcut with Fastfile\nDESCRIPTION: This command generates a shortcut using the Fastfile plugin. Here `fastfile pjdb /code/project/backend/database` creates a shortcut 'pjdb' for the specified directory. This requires Fastfile plugin to be enabled in zsh configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fastfile/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ fastfile pjdb /code/project/backend/database\n```\n\n----------------------------------------\n\nTITLE: Setting Zsh-z Case Sensitivity - Shell\nDESCRIPTION: This shell snippet modifies Zsh-z's search case sensitivity to 'ignore' mode, providing simple case-insensitive matching. Set this environment variable in .zshrc as needed. No dependencies beyond Zsh-z itself.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\nZSHZ_CASE=ignore\n```\n\n----------------------------------------\n\nTITLE: Manual installation step 2: Adding wd function to shell configuration\nDESCRIPTION: Function to add to .zshrc or .profile to load the wd plugin after manual installation.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_10\n\nLANGUAGE: zsh\nCODE:\n```\nwd() {\n    . ~/.local/wd/wd.sh\n}\n```\n\n----------------------------------------\n\nTITLE: Installing the Yum Plugin in Oh My Zsh\nDESCRIPTION: This code shows how to enable the Yum plugin by adding it to the plugins array in your zshrc configuration file. The plugin provides various aliases for Yum package management commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/yum/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... yum)\n```\n\n----------------------------------------\n\nTITLE: Installing rand-quote Plugin in Oh My Zsh Configuration\nDESCRIPTION: Instructions for adding the rand-quote plugin to the Oh My Zsh plugins array in the .zshrc configuration file. After adding the plugin, users need to restart zsh for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rand-quote/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rand-quote)\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Mapping - Clothing Items\nDESCRIPTION: Unicode codepoint mappings for clothing and accessory related emoji symbols, including qualification status for each entry.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_44\n\nLANGUAGE: txt\nCODE:\n```\n# subgroup: clothing\n1F453                                      ; fully-qualified     # 👓 glasses\n1F576 FE0F                                 ; fully-qualified     # 🕶️ sunglasses\n1F576                                      ; unqualified         # 🕶 sunglasses\n```\n\n----------------------------------------\n\nTITLE: Using Profiles Plugin in Zshrc\nDESCRIPTION: This snippet demonstrates how to include the 'profiles' plugin in the Zsh configuration file (zshrc) to enable hostname-based customization. The plugin must be added to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/profiles/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(... profiles)\n```\n\n----------------------------------------\n\nTITLE: Configuring ohmyzsh Plugins Array for powify (Shell Script)\nDESCRIPTION: This code snippet demonstrates how to enable the `powify` plugin within the ohmyzsh framework. It requires adding the string `powify` to the `plugins` array located in the user's `.zshrc` configuration file. The ellipsis (`...`) indicates that other plugins may already exist in the array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/powify/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(... powify)\n```\n\n----------------------------------------\n\nTITLE: Automatic installation of wd using curl\nDESCRIPTION: Command to automatically download and install wd using curl. This method doesn't provide the manpage and runs remote code.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\ncurl -L https://github.com/mfaerevaag/wd/raw/master/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Enabling Stripe Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to enable the Stripe plugin by adding it to the plugins array in your zshrc file. The plugin provides command-line completion for the Stripe CLI.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/stripe/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... stripe)\n```\n\n----------------------------------------\n\nTITLE: Vim File Loading Examples\nDESCRIPTION: Collection of example commands showing different ways to load files into Vim, including splits and post-load commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> v /tmp/myfile.scala\n\n> vvsp /tmp/myfile.scala\nor\n> v -b':vsp' /tmp/myfile.scala\n\n> vhsp -aG /tmp/myfile.scala\nor\n> v -b':sp' -aG /tmp/myfile.scala\n\n> v -a':1t$' /tmp/myfile.scala\n\n> v *.txt\n```\n\n----------------------------------------\n\nTITLE: Enabling Dash Plugin in Zsh\nDESCRIPTION: Add the 'dash' plugin to the plugins array in your zshrc file to enable it. This step is necessary for querying the Dash application from the command line.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... dash)\n```\n\n----------------------------------------\n\nTITLE: Result of Dnote Book Name Completion\nDESCRIPTION: Shows the list of matching book names that appear when tab completion is performed on a partial book name.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\n$ dnote v j\njavascript  job         js\n```\n\n----------------------------------------\n\nTITLE: Enabling the Lighthouse Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: Adds the 'lighthouse' plugin to the Oh My Zsh plugins array within the `.zshrc` configuration file. This step is necessary to activate the plugin's commands and functionality within the Zsh shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lighthouse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... lighthouse)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Ansible Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to enable the Ansible plugin in your Oh My Zsh configuration by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ansible/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ansible)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Laravel 4 Plugin in Oh My Zsh\nDESCRIPTION: This Zsh configuration snippet demonstrates how to enable the 'laravel4' plugin within Oh My Zsh by adding its name to the `plugins` array in the user's `.zshrc` configuration file. This step is necessary to activate the aliases provided by the plugin, such as `la4`, `la4dump`, `la4cache`, and `la4routes`.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/laravel4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... laravel4)\n```\n\n----------------------------------------\n\nTITLE: Commit Message with Inline Code Formatting\nDESCRIPTION: Example of using backticks in commit messages to format inline code that will be highlighted in the changelog.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nfeat(shell-proxy): enable unexported `DEFAULT_PROXY` setting (#9774)\n```\n\n----------------------------------------\n\nTITLE: Rebuilding zcompdump for completion\nDESCRIPTION: Command to force a rebuild of zcompdump to ensure proper functioning of zsh completions for wd.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_13\n\nLANGUAGE: zsh\nCODE:\n```\nrm -f ~/.zcompdump; compinit\n```\n\n----------------------------------------\n\nTITLE: Loading Supervisor Plugin in Oh My Zsh Configuration\nDESCRIPTION: Configuration snippet showing how to enable the Supervisor plugin by adding it to the plugins array in the zshrc file. This enables tab completion for supervisord and supervisorctl commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/supervisor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... supervisor)\n```\n\n----------------------------------------\n\nTITLE: Listing Emojis from the 'people' Group in Zsh\nDESCRIPTION: Demonstrates calling the `display_emoji` function to list emojis specifically belonging to the 'people' group, including their names.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_11\n\nLANGUAGE: zsh\nCODE:\n```\n$> display_emoji people\n```\n\n----------------------------------------\n\nTITLE: Defining Arrow Emoji Unicode Characters\nDESCRIPTION: This snippet defines Unicode characters for various arrow emojis, including directional arrows and special arrow buttons. It specifies both fully-qualified and unqualified versions of each emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_51\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: arrow\n2B06 FE0F                                  ; fully-qualified     # ⬆️ up arrow\n2B06                                       ; unqualified         # ⬆ up arrow\n2197 FE0F                                  ; fully-qualified     # ↗️ up-right arrow\n2197                                       ; unqualified         # ↗ up-right arrow\n27A1 FE0F                                  ; fully-qualified     # ➡️ right arrow\n27A1                                       ; unqualified         # ➡ right arrow\n2198 FE0F                                  ; fully-qualified     # ↘️ down-right arrow\n2198                                       ; unqualified         # ↘ down-right arrow\n2B07 FE0F                                  ; fully-qualified     # ⬇️ down arrow\n2B07                                       ; unqualified         # ⬇ down arrow\n2199 FE0F                                  ; fully-qualified     # ↙️ down-left arrow\n2199                                       ; unqualified         # ↙ down-left arrow\n2B05 FE0F                                  ; fully-qualified     # ⬅️ left arrow\n2B05                                       ; unqualified         # ⬅ left arrow\n2196 FE0F                                  ; fully-qualified     # ↖️ up-left arrow\n2196                                       ; unqualified         # ↖ up-left arrow\n2195 FE0F                                  ; fully-qualified     # ↕️ up-down arrow\n2195                                       ; unqualified         # ↕ up-down arrow\n2194 FE0F                                  ; fully-qualified     # ↔️ left-right arrow\n2194                                       ; unqualified         # ↔ left-right arrow\n21A9 FE0F                                  ; fully-qualified     # ↩️ right arrow curving left\n21A9                                       ; unqualified         # ↩ right arrow curving left\n21AA FE0F                                  ; fully-qualified     # ↪️ left arrow curving right\n21AA                                       ; unqualified         # ↪ left arrow curving right\n2934 FE0F                                  ; fully-qualified     # ⤴️ right arrow curving up\n2934                                       ; unqualified         # ⤴ right arrow curving up\n2935 FE0F                                  ; fully-qualified     # ⤵️ right arrow curving down\n2935                                       ; unqualified         # ⤵ right arrow curving down\n1F503                                      ; fully-qualified     # 🔃 clockwise vertical arrows\n1F504                                      ; fully-qualified     # 🔄 counterclockwise arrows button\n1F519                                      ; fully-qualified     # 🔙 BACK arrow\n1F51A                                      ; fully-qualified     # 🔚 END arrow\n1F51B                                      ; fully-qualified     # 🔛 ON! arrow\n1F51C                                      ; fully-qualified     # 🔜 SOON arrow\n1F51D                                      ; fully-qualified     # 🔝 TOP arrow\n```\n\n----------------------------------------\n\nTITLE: Using alias-finder with git st alias\nDESCRIPTION: Usage example showing how alias-finder suggests the 'gs' alias when running the 'git st' alias from .gitconfig.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/alias-finder/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n╭─tim@fox ~/repo/gitopolis ‹main› \n╰─$ git st\ngs='git st'         # <=== shorter suggestion from alias-finder\n## main...origin/main\n```\n\n----------------------------------------\n\nTITLE: Configuring FluxCD Plugin in Oh My Zsh Initialization - zsh\nDESCRIPTION: This snippet demonstrates how to enable the FluxCD plugin in Oh My Zsh by including 'fluxcd' in the plugins array within the user's .zshrc file. The configuration enables shell completions and related utilities for FluxCD, requiring Oh My Zsh to be installed and sourced by the user's shell. The plugins array accepts multiple plugins; '...' represents other active plugins. Users must reload or source their .zshrc for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/fluxcd/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... fluxcd)\n\n```\n\n----------------------------------------\n\nTITLE: Starting Bash with Minimal Configuration (Debugging)\nDESCRIPTION: Command to launch the Bash shell while explicitly preventing it from reading and executing the user's initialization files (like `.bashrc`, `.bash_profile`). This is useful for debugging shell scripts like `kube-ps1` in a clean environment, isolating issues caused by user customizations.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nbash --norc\n```\n\n----------------------------------------\n\nTITLE: Listing files in a warp point target\nDESCRIPTION: Command to list all files in the directory associated with the warp point 'foo'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_23\n\nLANGUAGE: zsh\nCODE:\n```\nwd ls foo\n```\n\n----------------------------------------\n\nTITLE: Querying Dash without Keywords\nDESCRIPTION: This command queries the Dash application for information related to the specified term, such as 'golang'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\ndash golang\n```\n\n----------------------------------------\n\nTITLE: Loading Zsh-z with Zcomet Plugin Manager - Shell\nDESCRIPTION: This snippet loads the Zsh-z plugin via the zcomet plugin manager in the user's .zshrc. It must be placed after sourcing zcomet itself and before running compinit through zcomet. No additional parameters are required, and zcomet will clone, source, and activate the module as needed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nzcomet load agkozak/zsh-z\n```\n\n----------------------------------------\n\nTITLE: Installing the conda-env plugin in Oh My Zsh\nDESCRIPTION: Adding the conda-env plugin to the plugins array in your zshrc file enables the plugin functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/conda-env/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(... conda-env)\n```\n\n----------------------------------------\n\nTITLE: Enabling the Compleat Plugin in Oh My Zsh Configuration\nDESCRIPTION: Code snippet showing how to add the compleat plugin to the plugins array in the zshrc file. This enables the compleat functionality that loads completions from the compleat tool.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/compleat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... compleat)\n```\n\n----------------------------------------\n\nTITLE: Example .lighthouse-url File Content (Console)\nDESCRIPTION: Shows an example `.lighthouse-url` file content using the `cat` command. This file must exist in the directory where the `lho` command is run and should contain the base URL of the specific Lighthouse project to interact with.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lighthouse/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ cat .lighthouse-url\nhttps://rails.lighthouseapp.com/projects/8994\n```\n\n----------------------------------------\n\nTITLE: Enabling the Podman Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet demonstrates how to add the 'podman' plugin to the plugins array in the .zshrc configuration file for Oh My Zsh. The purpose is to activate Podman-specific auto-completion and aliases in the Zsh shell environment. The only dependency is Oh My Zsh with Podman support; after modifying this line, users should source their .zshrc or restart their shell for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/podman/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... podman)\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel 5 Zsh Plugin\nDESCRIPTION: This snippet demonstrates how to add the Laravel 5 plugin to your list of active zsh plugins. The configuration is done by appending 'laravel5' to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/laravel5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... laravel5)\n```\n\n----------------------------------------\n\nTITLE: Example Output of the `drnew` Function (Text)\nDESCRIPTION: This snippet shows the example terminal output after the `drnew` function successfully completes the installation of a new Drupal website. It displays the default administrative username (`admin`) and a randomly generated password, which are needed for the initial site login.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/drush/README.md#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nInstallation complete.  User name: admin  User password: cf7t8yqNEm\n```\n\n----------------------------------------\n\nTITLE: Executing Dash Commands\nDESCRIPTION: This command opens and switches to the Dash application. Dash must be installed on macOS for this command to work.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dash/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\ndash\n```\n\n----------------------------------------\n\nTITLE: Enabling Bower Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the Bower plugin to the plugins array in the zshrc file. This enables the Bower plugin functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/bower/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... bower)\n```\n\n----------------------------------------\n\nTITLE: Adding Rebar Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Rebar plugin by adding it to the plugins array in the zshrc configuration file. This enables command completion support for the Rebar Erlang build tool.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rebar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rebar)\n```\n\n----------------------------------------\n\nTITLE: Configuring Localstack Plugin in Oh My Zsh - zsh\nDESCRIPTION: This snippet configures the Localstack plugin by specifying it within the plugins array in your .zshrc configuration file. Including 'localstack' enables CLI support for Localstack commands via the 'lsk' utility. There are no external dependencies beyond Oh My Zsh and the presence of the localstack plugin. The plugins array should be adjusted to include other desired plugins alongside 'localstack', and proper shell quoting should be used to avoid syntax errors. This setup is required to access Localstack CLI features in your zsh session.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/localstack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... localstack)\n```\n\n----------------------------------------\n\nTITLE: Example Output of the chuck_cow Command\nDESCRIPTION: Displays a sample output of the chuck_cow command which shows a Chuck Norris fortune in a cowthink bubble with ASCII art.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/chucknorris/README.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nLast login: Fri Jan 30 23:12:26 on ttys001\n ______________________________________\n( When Chuck Norris plays Monopoly, it )\n( affects the actual world economy.    )\n --------------------------------------\n        o   ^__^\n         o  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n----------------------------------------\n\nTITLE: Installing Rake Fast Plugin in Zsh\nDESCRIPTION: Shows how to add the rake-fast plugin to the zsh configuration file (.zshrc). The plugin should be added to the plugins array in the configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake-fast/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rake-fast)\n```\n\n----------------------------------------\n\nTITLE: Installing Themes Plugin in Oh My Zsh Configuration\nDESCRIPTION: Configuration snippet showing how to enable the themes plugin by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/themes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... themes)\n```\n\n----------------------------------------\n\nTITLE: Activating Capistrano Plugin in Zshrc\nDESCRIPTION: This snippet demonstrates how to add the Capistrano plugin to the Zsh configuration by modifying the plugins array in the zshrc file. Execution relies on the Oh My Zsh framework being installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/capistrano/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... capistrano)\n```\n\n----------------------------------------\n\nTITLE: Specifying LANDO_ZSH_CONFIG_FILE\nDESCRIPTION: This code sets up the configuration file name that the plugin checks to confirm the presence of Lando. Changing this allows users to specify a different configuration if needed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lando/README.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nLANDO_ZSH_CONFIG_FILE=\".lando.dev.yml\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins Array in oh-my-zsh Shell Script\nDESCRIPTION: This snippet demonstrates how to enable the Mosh plugin in the oh-my-zsh environment by adding 'mosh' to the plugins array within the .zshrc configuration file. No external dependencies are required other than oh-my-zsh being installed, and the user must place 'mosh' among other desired plugins. On reload of the shell, this will activate SSH tab completion for Mosh hostnames. The only input is the plugins array, and after sourcing .zshrc, the plugin becomes active.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/mosh/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... mosh)\n```\n\n----------------------------------------\n\nTITLE: Adding Rclone Plugin to Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the Rclone plugin by adding it to the plugins array in the zshrc configuration file. This enables command completion for Rclone commands in the terminal.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rclone/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rclone)\n```\n\n----------------------------------------\n\nTITLE: Alphanumeric Symbols Unicode Mapping\nDESCRIPTION: Unicode mappings for alphanumeric-related emoji symbols including input buttons, blood type indicators, and Japanese service buttons.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_58\n\nLANGUAGE: plaintext\nCODE:\n```\n1F520                                      ; fully-qualified     # 🔠 input latin uppercase\n1F521                                      ; fully-qualified     # 🔡 input latin lowercase\n1F522                                      ; fully-qualified     # 🔢 input numbers\n```\n\n----------------------------------------\n\nTITLE: Adding Skaffold Plugin to Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to enable the Skaffold autocompletion plugin in Oh My Zsh by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/skaffold/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... skaffold)\n```\n\n----------------------------------------\n\nTITLE: Adding Operator SDK Plugin to Oh My Zsh Configuration (Shell)\nDESCRIPTION: This shell configuration snippet shows how to add the `operator-sdk` plugin to the `plugins` array within an Oh My Zsh configuration file (`.zshrc`). This enables features provided by the plugin, such as autocompletions, for users working with the Operator SDK. The ellipsis (...) represents other plugins that might already be in the array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/operator-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(... operator-sdk)\n```\n\n----------------------------------------\n\nTITLE: Hotel Emoji Unicode Definitions\nDESCRIPTION: Unicode code point definitions for hotel related emoji including bellhop bell and luggage\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_41\n\nLANGUAGE: unicode\nCODE:\n```\n1F6CE FE0F                                 ; fully-qualified     # 🛎️ bellhop bell\n1F6CE                                      ; unqualified         # 🛎 bellhop bell\n1F9F3                                      ; fully-qualified     # 🧳 luggage\n```\n\n----------------------------------------\n\nTITLE: Loading Completion System for Zsh-z\nDESCRIPTION: Command to load the Zsh completion system required for Zsh-z tab completion to work properly when not using a framework.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nautoload -U compinit; compinit\n```\n\n----------------------------------------\n\nTITLE: Plugin and Theme Commit Scope Examples\nDESCRIPTION: Correct and incorrect examples of scope naming conventions for plugin and theme changes in commit messages.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n- ✅ `fix(agnoster): commit subject`\n- ❌ `fix(theme/agnoster): commit subject`\n```\n\n----------------------------------------\n\nTITLE: Enabling the 'otp' Plugin in Oh My Zsh Configuration (Zsh)\nDESCRIPTION: This Zsh code snippet demonstrates how to activate the 'otp' plugin within the Oh My Zsh framework. It involves modifying the 'plugins' array in the user's '.zshrc' configuration file to include 'otp', allowing Zsh to load the plugin upon startup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/otp/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... otp)\n```\n\n----------------------------------------\n\nTITLE: Adding lol Plugin to oh-my-zsh Configuration\nDESCRIPTION: This snippet shows how to enable the 'lol' plugin by adding it to the plugins array within the zshrc file. The plugin provides amusing aliases for common shell commands. Ensure oh-my-zsh is installed and update the plugins array to include 'lol'. No specific parameters are required.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lol/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... lol)\n```\n\n----------------------------------------\n\nTITLE: Adding Git-Flow AVH Plugin to Zsh Plugins Array\nDESCRIPTION: This snippet demonstrates how to add the git-flow AVH Edition plugin to the plugins array in your .zshrc file to enable its functionality. Ensure that the git-flow tool is installed separately, and you're using Zsh's native git completion.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-flow-avh/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... git-flow-avh)\n```\n\n----------------------------------------\n\nTITLE: Adding the Charm Plugin to Oh My Zsh\nDESCRIPTION: Instructions for adding the Charm plugin to the plugins array in your zshrc file. This enables completion functionality for the Charm CLI in your Z shell environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/charm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... charm)\n```\n\n----------------------------------------\n\nTITLE: Configuring ForkLift Plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to add the ForkLift plugin to the plugins array in the zshrc configuration file. The ForkLift plugin provides command-line functionalities to interact with the ForkLift FTP application on macOS. The main prerequisite is having the ForkLift application installed on the system. By adding 'forklift' to your Zsh plugins, you enable the use of its specific commands in the shell.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/forklift/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... forklift)\n```\n\n----------------------------------------\n\nTITLE: Installing ACPI Tools on Debian/Ubuntu for Battery Plugin\nDESCRIPTION: This command installs the necessary ACPI tools on Debian/Ubuntu systems to enable the battery plugin functionality. Users need to run this with sudo privileges.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/battery/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsudo apt install acpi\n```\n\n----------------------------------------\n\nTITLE: Enabling the SVN Plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to add the SVN plugin to the plugins array in your .zshrc file to enable Subversion integration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/svn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... svn)\n```\n\n----------------------------------------\n\nTITLE: Configuring pep8 Plugin in Oh My Zsh - Shell\nDESCRIPTION: Shows how to enable the pep8 plugin by editing the plugins array in the .zshrc file. The pep8 plugin adds completions for the pep8 command, a tool for enforcing Python's PEP 8 style guide. To activate, the user should append \\\"pep8\\\" to the plugins=() array; no additional dependencies are required beyond having pep8 installed. This configuration makes the plugin available in the Zsh shell, enhancing productivity for Python developers.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pep8/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... pep8)\n```\n\n----------------------------------------\n\nTITLE: Installing Colored Man Pages Plugin in Zsh\nDESCRIPTION: Shows how to enable the colored-man-pages plugin in the Zsh configuration file\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/colored-man-pages/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... colored-man-pages)\n```\n\n----------------------------------------\n\nTITLE: Enabling Zeus Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to add the Zeus plugin to the plugins array in the zshrc file. This enables the Zeus plugin functionality in Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zeus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... zeus)\n```\n\n----------------------------------------\n\nTITLE: Usage Examples for Catspeak Aliases with oh-my-zsh in Shell\nDESCRIPTION: This snippet provides usage examples for the 'lol' plugin aliases in the shell. Users can execute commands such as making a directory, terminating processes, and modifying file permissions using catspeak aliases. Expected input includes standard shell command parameters following each alias, resulting in the execution of the mapped command.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/lol/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# mkdir new-directory\nicanhas new-directory\n\n# killall firefox\nnomnom firefox\n\n# chmod u=r,go= some.file\nnowai u=r,go= some.file\n\n# ssh root@catserver.org\npwned root@catserver.org\n\n# git commit -m \"$(curl -s https://whatthecommit.com/index.txt)\"\nyolo\n```\n\n----------------------------------------\n\nTITLE: Installing the Copypath Plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to enable the copypath plugin by adding it to the plugins array in your zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/copypath/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... copypath)\n```\n\n----------------------------------------\n\nTITLE: Enabling the pod Plugin in Oh My Zsh Configuration\nDESCRIPTION: This configuration snippet demonstrates how to activate the `pod` plugin within Oh My Zsh by adding its name to the `plugins` array in the user's `.zshrc` file. Enabling this plugin provides command-line completion features for CocoaPods commands. Requires Oh My Zsh to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/pod/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... pod)\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure Plugin in oh-my-zsh (zsh)\nDESCRIPTION: This code snippet demonstrates how to include the Azure plugin in the plugins array within your .zshrc configuration to enable command completions and utilities for Azure CLI. No external dependencies besides oh-my-zsh are required for this line, but the plugin's full capabilities may require installing jq and the Azure CLI. The main parameter is 'azure', which enables all associated features upon shell startup. There are no direct inputs or outputs with this snippet; it is a configuration instruction.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/azure/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... azure)\n```\n\n----------------------------------------\n\nTITLE: Enabling Roswell Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to add the Roswell plugin to the plugins array in the user's zshrc file. This enables Roswell completions and aliases in the Oh My Zsh environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ros/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ros)\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Mapping - Phone Devices\nDESCRIPTION: Unicode codepoint mappings for phone and communication device emoji symbols.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_48\n\nLANGUAGE: txt\nCODE:\n```\n# subgroup: phone\n1F4F1                                      ; fully-qualified     # 📱 mobile phone\n1F4F2                                      ; fully-qualified     # 📲 mobile phone with arrow\n260E FE0F                                  ; fully-qualified     # ☎️ telephone\n```\n\n----------------------------------------\n\nTITLE: Defining Cat-Face Emojis (Unicode)\nDESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'cat-face'. Includes various cat expressions like 'grinning cat', 'cat with tears of joy', and 'pouting cat'. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\n# subgroup: cat-face\n1F63A                                      ; fully-qualified     # 😺 grinning cat\n1F638                                      ; fully-qualified     # 😸 grinning cat with smiling eyes\n1F639                                      ; fully-qualified     # 😹 cat with tears of joy\n1F63B                                      ; fully-qualified     # 😻 smiling cat with heart-eyes\n1F63C                                      ; fully-qualified     # 😼 cat with wry smile\n1F63D                                      ; fully-qualified     # 😽 kissing cat\n1F640                                      ; fully-qualified     # 🙀 weary cat\n1F63F                                      ; fully-qualified     # 😿 crying cat\n1F63E                                      ; fully-qualified     # 😾 pouting cat\n```\n\n----------------------------------------\n\nTITLE: Displaying Hitchhiker Quotes in Console\nDESCRIPTION: This snippet illustrates the output of the 'hitchhiker_cow' command, showing a quote from The Hitchhiker's Guide to the Galaxy formatted using the 'cowthink' program. Required dependencies include 'fortune,' 'strfile,' and 'cowthink.'\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/hitchhiker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ hitchhiker_cow\n _______________________________________\n( \"OK, so ten out of ten for style, but )\n( minus several million for good        )\n( thinking, yeah? \"                     )\n ---------------------------------------\n        o   ^__^\n         o  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n```\n\n----------------------------------------\n\nTITLE: Loading the DNF Plugin in Oh My Zsh\nDESCRIPTION: This code shows how to enable the dnf plugin by adding it to the plugins array in your zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnf/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... dnf)\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Transportation Emoji\nDESCRIPTION: Maps Unicode values to various transportation-related emoji, including ground vehicles, trains, cars, and water vessels. Includes both fully-qualified and unqualified versions with variation selectors.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_39\n\nLANGUAGE: txt\nCODE:\n```\n1F682                                      ; fully-qualified     # 🚂 locomotive\n1F683                                      ; fully-qualified     # 🚃 railway car\n1F684                                      ; fully-qualified     # 🚄 high-speed train\n```\n\n----------------------------------------\n\nTITLE: Defining Face-Costume Emojis (Unicode)\nDESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'face-costume'. Includes emojis like 'pile of poo', 'clown face', 'ghost', and 'robot'. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n# subgroup: face-costume\n1F4A9                                      ; fully-qualified     # 💩 pile of poo\n1F921                                      ; fully-qualified     # 🤡 clown face\n1F479                                      ; fully-qualified     # 👹 ogre\n1F47A                                      ; fully-qualified     # 👺 goblin\n1F47B                                      ; fully-qualified     # 👻 ghost\n1F47D                                      ; fully-qualified     # 👽 alien\n1F47E                                      ; fully-qualified     # 👾 alien monster\n1F916                                      ; fully-qualified     # 🤖 robot\n```\n\n----------------------------------------\n\nTITLE: Configuring Percol Plugin in Zshrc - Zsh\nDESCRIPTION: This snippet demonstrates how to enable the percol plugin by adding it to the plugins array in your .zshrc file. The percol plugin allows enhanced searching through your Zsh history and, if enabled, jump bookmarks via percol's fuzzy finder utility. Ensure you have percol installed via pip, and, if desired, the jump plugin enabled before percol. No additional parameters are required; simply append \"percol\" within the plugins array to activate functionality when you reload your Zsh configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/percol/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... percol)\n```\n\n----------------------------------------\n\nTITLE: Enabling Cursor Style Changes with VI_MODE_SET_CURSOR\nDESCRIPTION: Controls whether the cursor style changes when switching between input modes. Set to true to enable this feature.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vi-mode/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nVI_MODE_SET_CURSOR=true\n```\n\n----------------------------------------\n\nTITLE: Enabling Symfony6 Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet demonstrates how to add the symfony6 plugin to the plugins array in your zshrc file. This enables native completion for Symfony 6.2 and above in your Oh My Zsh environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/symfony6/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... symfony6)\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Mapping - Computer Equipment\nDESCRIPTION: Unicode codepoint mappings for computer and technology related emoji symbols.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_49\n\nLANGUAGE: txt\nCODE:\n```\n# subgroup: computer\n1F50B                                      ; fully-qualified     # 🔋 battery\n1F50C                                      ; fully-qualified     # 🔌 electric plug\n1F4BB                                      ; fully-qualified     # 💻 laptop computer\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Mapping - Musical Instruments\nDESCRIPTION: Unicode codepoint mappings for musical instrument emoji symbols including various instruments.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_47\n\nLANGUAGE: txt\nCODE:\n```\n# subgroup: musical-instrument\n1F3B7                                      ; fully-qualified     # 🎷 saxophone\n1F3B8                                      ; fully-qualified     # 🎸 guitar\n1F3B9                                      ; fully-qualified     # 🎹 musical keyboard\n```\n\n----------------------------------------\n\nTITLE: Example kube-ps1 Output When Binary is Missing\nDESCRIPTION: Displays the default prompt structure shown by `kube-ps1` when the configured Kubernetes command-line tool (`kubectl` or `oc`, specified by `KUBE_PS1_BINARY`) cannot be found in the system's PATH. `<symbol>` represents the configured or default symbol.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kube-ps1/README.md#2025-04-22_snippet_6\n\nLANGUAGE: text\nCODE:\n```\n(<symbol>|BINARY-N/A:N/A)\n```\n\n----------------------------------------\n\nTITLE: Adding istioctl to Oh My Zsh Plugins (Shell)\nDESCRIPTION: This shell snippet shows how to enable the `istioctl` Oh My Zsh plugin by adding its name to the `plugins` array within the user's `.zshrc` configuration file. This makes `istioctl` related aliases and completions available in the Zsh shell. Ellipsis (...) indicates potentially existing plugins.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/istioctl/README.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplugins=(... istioctl)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Emoji for Person Gesturing OK\nDESCRIPTION: This snippet defines Unicode codepoints for the 'person gesturing OK' emoji, including variations for different skin tones. It shows the beginning of the definition set for this emoji group.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_15\n\nLANGUAGE: Unicode\nCODE:\n```\n1F646                                      ; fully-qualified     # 🙆 person gesturing OK\n1F646 1F3FB                                ; fully-qualified     # 🙆🏻 person gesturing OK: light skin tone\n1F646 1F3FC                                ; fully-qualified     # 🙆🏼 person gesturing OK: medium-light skin tone\n1F646 1F3FD                                ; fully-qualified     # 🙆🏽 person gesturing OK: medium skin tone\n```\n\n----------------------------------------\n\nTITLE: Using 'qrsvg' Alias for SVG QR Code Generation (Shell)\nDESCRIPTION: Invokes the `qrsvg` alias with the desired text (replace `[text]` with actual content). This alias executes `curl -d \"text\" qrcode.show -H \"Accept: image/svg+xml\"`, sending the text to the qrcode.show service via POST and specifically requesting an SVG format QR code using the Accept HTTP header. The raw SVG content is outputted to standard output. Requires the `curl` utility.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nqrsvg  [text]\n```\n\n----------------------------------------\n\nTITLE: Enabling the ng Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This Zsh configuration snippet demonstrates how to activate the `ng` plugin within Oh My Zsh to enable command-line autocompletion for the Angular CLI (`ng`). Add `ng` to the `plugins` array in your `~/.zshrc` file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ng/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... ng)\n```\n\n----------------------------------------\n\nTITLE: Adding JRuby Plugin to oh-my-zsh Plugins Array - Zsh\nDESCRIPTION: This snippet demonstrates how to enable the JRuby plugin by adding 'jruby' to the 'plugins' array in your .zshrc configuration file for oh-my-zsh. Prerequisites include an existing oh-my-zsh installation and JRuby available in the user\\'s $PATH. The key parameter is the plugin name within the array, which activates predefined aliases. The output is extended shell functionality for JRuby via new command aliases; users must reload their shell configuration after editing.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jruby/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... jruby)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Sequences for Climbing Person Emoji\nDESCRIPTION: Unicode code point sequences that define climbing person emoji with various gender and skin tone modifiers. Each entry includes hexadecimal code points and qualifiers, followed by the rendered emoji and its description.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_27\n\nLANGUAGE: unicode\nCODE:\n```\n1F9D7 200D 2642 FE0F                       ; fully-qualified     # 🧗‍♂️ man climbing\n1F9D7 200D 2642                            ; minimally-qualified # 🧗‍♂ man climbing\n1F9D7 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧗🏻‍♂️ man climbing: light skin tone\n1F9D7 1F3FB 200D 2642                      ; minimally-qualified # 🧗🏻‍♂ man climbing: light skin tone\n1F9D7 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧗🏼‍♂️ man climbing: medium-light skin tone\n1F9D7 1F3FC 200D 2642                      ; minimally-qualified # 🧗🏼‍♂ man climbing: medium-light skin tone\n1F9D7 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧗🏽‍♂️ man climbing: medium skin tone\n1F9D7 1F3FD 200D 2642                      ; minimally-qualified # 🧗🏽‍♂ man climbing: medium skin tone\n1F9D7 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧗🏾‍♂️ man climbing: medium-dark skin tone\n1F9D7 1F3FE 200D 2642                      ; minimally-qualified # 🧗🏾‍♂ man climbing: medium-dark skin tone\n1F9D7 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧗🏿‍♂️ man climbing: dark skin tone\n1F9D7 1F3FF 200D 2642                      ; minimally-qualified # 🧗🏿‍♂ man climbing: dark skin tone\n1F9D7 200D 2640 FE0F                       ; fully-qualified     # 🧗‍♀️ woman climbing\n1F9D7 200D 2640                            ; minimally-qualified # 🧗‍♀ woman climbing\n1F9D7 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧗🏻‍♀️ woman climbing: light skin tone\n1F9D7 1F3FB 200D 2640                      ; minimally-qualified # 🧗🏻‍♀ woman climbing: light skin tone\n1F9D7 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧗🏼‍♀️ woman climbing: medium-light skin tone\n1F9D7 1F3FC 200D 2640                      ; minimally-qualified # 🧗🏼‍♀ woman climbing: medium-light skin tone\n1F9D7 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧗🏽‍♀️ woman climbing: medium skin tone\n1F9D7 1F3FD 200D 2640                      ; minimally-qualified # 🧗🏽‍♀ woman climbing: medium skin tone\n1F9D7 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧗🏾‍♀️ woman climbing: medium-dark skin tone\n1F9D7 1F3FE 200D 2640                      ; minimally-qualified # 🧗🏾‍♀ woman climbing: medium-dark skin tone\n1F9D7 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧗🏿‍♀️ woman climbing: dark skin tone\n1F9D7 1F3FF 200D 2640                      ; minimally-qualified # 🧗🏿‍♀ woman climbing: dark skin tone\n```\n\n----------------------------------------\n\nTITLE: Zgen Refresh and Shell Restart - Shell\nDESCRIPTION: These commands refresh the zgen plugin manager's state and re-initialize the shell, updating loaded plugins. Must be run after modifying the .zshrc to include or reorder plugins for changes to take effect.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/z/MANUAL.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nzgen reset\nzsh\n```\n\n----------------------------------------\n\nTITLE: Enabling Sprunge Plugin in Oh My Zsh Configuration\nDESCRIPTION: Instructions for adding the Sprunge plugin to the Oh My Zsh plugins list in the user's .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sprunge/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sprunge)\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Code Points for Human Gestures\nDESCRIPTION: Defines Unicode code points for emoji sequences representing human gestures with various skin tones and gender modifiers. Includes both fully-qualified and minimally-qualified sequences.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_16\n\nLANGUAGE: unicode\nCODE:\n```\n1F646 1F3FE                                ; fully-qualified     # 🙆🏾 person gesturing OK: medium-dark skin tone\n1F646 1F3FF                                ; fully-qualified     # 🙆🏿 person gesturing OK: dark skin tone\n1F646 200D 2642 FE0F                       ; fully-qualified     # 🙆‍♂️ man gesturing OK\n1F646 200D 2642                            ; minimally-qualified # 🙆‍♂ man gesturing OK\n```\n\n----------------------------------------\n\nTITLE: Unicode Codepoint Definitions for Family Emoji\nDESCRIPTION: Defines Unicode sequences for emoji representing people holding hands and kissing with various skin tone combinations. Each line contains the Unicode codepoints and a description of the resulting emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_31\n\nLANGUAGE: unicode\nCODE:\n```\n1F9D1 200D 1F91D 200D 1F9D1                ; fully-qualified     # 🧑‍🤝‍🧑 people holding hands\n1F9D1 1F3FB 200D 1F91D 200D 1F9D1 1F3FB    ; fully-qualified     # 🧑🏻‍🤝‍🧑🏻 people holding hands: light skin tone\n1F9D1 1F3FC 200D 1F91D 200D 1F9D1 1F3FB    ; fully-qualified     # 🧑🏼‍🤝‍🧑🏻 people holding hands: medium-light skin tone, light skin tone\n# [Additional lines omitted for brevity]\n```\n\n----------------------------------------\n\nTITLE: Adding Git Extras Plugin to Zsh Configuration\nDESCRIPTION: This snippet shows how to add the git-extras plugin to the plugins list in the zsh configuration file, allowing Zsh to augment git command completions with those provided by git-extras. Ensure git-extras is installed before enabling this plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/git-extras/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... git-extras)\n```\n\n----------------------------------------\n\nTITLE: Underlying Command for SVG QR Code Generation (Shell)\nDESCRIPTION: The actual `curl` command executed by the `qrsvg` alias. It sends the provided 'text' as POST data (`-d \"text\"`) to the `qrcode.show` service. Crucially, it includes an HTTP header (`-H \"Accept: image/svg+xml\"`) to specify that the desired response format is Scalable Vector Graphics (SVG). The service returns the QR code as SVG data.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/qrcode/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncurl -d \"text\" qrcode.show -H \"Accept: image/svg+xml\"\n```\n\n----------------------------------------\n\nTITLE: Enabling URLTools Plugin in Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to add the URLTools plugin to the plugins array in the Oh My Zsh configuration file (~/.zshrc). This enables the URL encoding and decoding functionality provided by the plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/urltools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... urltools)\n```\n\n----------------------------------------\n\nTITLE: Installing the Singlechar Plugin in Oh My Zsh\nDESCRIPTION: This code snippet demonstrates how to add the Singlechar plugin to the Oh My Zsh configuration by adding it to the plugins array in the zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/singlechar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... singlechar)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Skin Tones and Hair Styles\nDESCRIPTION: This snippet defines Unicode codepoints for emoji components representing different skin tones and hair styles. These are used as modifiers for other emojis to represent diversity.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_35\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: skin-tone\n1F3FB                                      ; component           # 🏻 light skin tone\n1F3FC                                      ; component           # 🏼 medium-light skin tone\n1F3FD                                      ; component           # 🏽 medium skin tone\n1F3FE                                      ; component           # 🏾 medium-dark skin tone\n1F3FF                                      ; component           # 🏿 dark skin tone\n\n# subgroup: hair-style\n1F9B0                                      ; component           # 🦰 red hair\n1F9B1                                      ; component           # 🦱 curly hair\n1F9B3                                      ; component           # 🦳 white hair\n1F9B2                                      ; component           # 🦲 bald\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Relationship Emojis\nDESCRIPTION: This snippet defines Unicode codepoints for emojis representing various types of relationships, including kisses and couples with heart. It specifies both fully-qualified and minimally-qualified versions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_32\n\nLANGUAGE: Unicode\nCODE:\n```\n1F469 200D 2764 200D 1F48B 200D 1F468      ; minimally-qualified # 👩‍❤‍💋‍👨 kiss: woman, man\n1F468 200D 2764 FE0F 200D 1F48B 200D 1F468 ; fully-qualified     # 👨‍❤️‍💋‍👨 kiss: man, man\n1F468 200D 2764 200D 1F48B 200D 1F468      ; minimally-qualified # 👨‍❤‍💋‍👨 kiss: man, man\n1F469 200D 2764 FE0F 200D 1F48B 200D 1F469 ; fully-qualified     # 👩‍❤️‍💋‍👩 kiss: woman, woman\n1F469 200D 2764 200D 1F48B 200D 1F469      ; minimally-qualified # 👩‍❤‍💋‍👩 kiss: woman, woman\n1F491                                      ; fully-qualified     # 💑 couple with heart\n1F469 200D 2764 FE0F 200D 1F468            ; fully-qualified     # 👩‍❤️‍👨 couple with heart: woman, man\n1F469 200D 2764 200D 1F468                 ; minimally-qualified # 👩‍❤‍👨 couple with heart: woman, man\n1F468 200D 2764 FE0F 200D 1F468            ; fully-qualified     # 👨‍❤️‍👨 couple with heart: man, man\n1F468 200D 2764 200D 1F468                 ; minimally-qualified # 👨‍❤‍👨 couple with heart: man, man\n1F469 200D 2764 FE0F 200D 1F469            ; fully-qualified     # 👩‍❤️‍👩 couple with heart: woman, woman\n1F469 200D 2764 200D 1F469                 ; minimally-qualified # 👩‍❤‍👩 couple with heart: woman, woman\n```\n\n----------------------------------------\n\nTITLE: Installing rbfu Plugin in Oh My Zsh Configuration\nDESCRIPTION: Shows how to enable the rbfu plugin by adding it to the plugins array in the zshrc configuration file. Note that this plugin is deprecated and should not be used.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rbfu/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... rbfu)\n```\n\n----------------------------------------\n\nTITLE: Configuring the SDK plugin in Oh My Zsh\nDESCRIPTION: This snippet shows how to enable the SDK plugin by adding it to the plugins array in your zshrc file. The plugin provides autocompletion for all SDKMAN commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sdk)\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Mapping - Sound Equipment\nDESCRIPTION: Unicode codepoint mappings for sound-related emoji symbols including speakers and audio devices.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_45\n\nLANGUAGE: txt\nCODE:\n```\n# subgroup: sound\n1F507                                      ; fully-qualified     # 🔇 muted speaker\n1F508                                      ; fully-qualified     # 🔈 speaker low volume\n1F509                                      ; fully-qualified     # 🔉 speaker medium volume\n```\n\n----------------------------------------\n\nTITLE: Other Symbol Unicode Definitions\nDESCRIPTION: Unicode codepoint definitions for various symbols including medical symbols, mathematical operators, and special characters. Each symbol is defined with both fully-qualified (with FE0F variant selector) and unqualified versions where applicable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_56\n\nLANGUAGE: unicode\nCODE:\n```\n2695 FE0F                                  ; fully-qualified     # ⚕️ medical symbol\n2695                                       ; unqualified         # ⚕ medical symbol\n267E FE0F                                  ; fully-qualified     # ♾️ infinity\n267E                                       ; unqualified         # ♾ infinity\n267B FE0F                                  ; fully-qualified     # ♻️ recycling symbol\n```\n\n----------------------------------------\n\nTITLE: Adding Thor Plugin to Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to enable the Thor plugin in the Oh My Zsh configuration file (zshrc). It demonstrates adding 'thor' to the plugins array.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/thor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... thor)\n```\n\n----------------------------------------\n\nTITLE: Adding ZNT Plugin to Oh My Zsh Configuration (Zsh)\nDESCRIPTION: This snippet shows how to enable the Zsh Navigation Tools plugin by adding `zsh-navigation-tools` to the `plugins` array within the `.zshrc` file for Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... zsh-navigation-tools)\n```\n\n----------------------------------------\n\nTITLE: Automatic installation of wd using wget\nDESCRIPTION: Command to automatically download and install wd using wget. This method doesn't provide the manpage and runs remote code.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_8\n\nLANGUAGE: zsh\nCODE:\n```\nwget --no-check-certificate https://github.com/mfaerevaag/wd/raw/master/install.sh -O - | sh\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Code Points for Person-Activity Emoji Subgroup\nDESCRIPTION: A comprehensive list of Unicode code points for emoji representing people engaged in various activities. The file includes fully-qualified and minimally-qualified variants with different skin tones and gender modifiers for each base emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_24\n\nLANGUAGE: unicode\nCODE:\n```\n# subgroup: person-activity\n1F486                                      ; fully-qualified     # 💆 person getting massage\n1F486 1F3FB                                ; fully-qualified     # 💆🏻 person getting massage: light skin tone\n1F486 1F3FC                                ; fully-qualified     # 💆🏼 person getting massage: medium-light skin tone\n1F486 1F3FD                                ; fully-qualified     # 💆🏽 person getting massage: medium skin tone\n1F486 1F3FE                                ; fully-qualified     # 💆🏾 person getting massage: medium-dark skin tone\n1F486 1F3FF                                ; fully-qualified     # 💆🏿 person getting massage: dark skin tone\n1F486 200D 2642 FE0F                       ; fully-qualified     # 💆‍♂️ man getting massage\n1F486 200D 2642                            ; minimally-qualified # 💆‍♂ man getting massage\n1F486 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 💆🏻‍♂️ man getting massage: light skin tone\n1F486 1F3FB 200D 2642                      ; minimally-qualified # 💆🏻‍♂ man getting massage: light skin tone\n1F486 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 💆🏼‍♂️ man getting massage: medium-light skin tone\n1F486 1F3FC 200D 2642                      ; minimally-qualified # 💆🏼‍♂ man getting massage: medium-light skin tone\n1F486 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 💆🏽‍♂️ man getting massage: medium skin tone\n1F486 1F3FD 200D 2642                      ; minimally-qualified # 💆🏽‍♂ man getting massage: medium skin tone\n1F486 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 💆🏾‍♂️ man getting massage: medium-dark skin tone\n1F486 1F3FE 200D 2642                      ; minimally-qualified # 💆🏾‍♂ man getting massage: medium-dark skin tone\n1F486 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 💆🏿‍♂️ man getting massage: dark skin tone\n1F486 1F3FF 200D 2642                      ; minimally-qualified # 💆🏿‍♂ man getting massage: dark skin tone\n1F486 200D 2640 FE0F                       ; fully-qualified     # 💆‍♀️ woman getting massage\n1F486 200D 2640                            ; minimally-qualified # 💆‍♀ woman getting massage\n1F486 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 💆🏻‍♀️ woman getting massage: light skin tone\n1F486 1F3FB 200D 2640                      ; minimally-qualified # 💆🏻‍♀ woman getting massage: light skin tone\n1F486 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 💆🏼‍♀️ woman getting massage: medium-light skin tone\n1F486 1F3FC 200D 2640                      ; minimally-qualified # 💆🏼‍♀ woman getting massage: medium-light skin tone\n1F486 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 💆🏽‍♀️ woman getting massage: medium skin tone\n1F486 1F3FD 200D 2640                      ; minimally-qualified # 💆🏽‍♀ woman getting massage: medium skin tone\n1F486 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 💆🏾‍♀️ woman getting massage: medium-dark skin tone\n1F486 1F3FE 200D 2640                      ; minimally-qualified # 💆🏾‍♀ woman getting massage: medium-dark skin tone\n1F486 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 💆🏿‍♀️ woman getting massage: dark skin tone\n1F486 1F3FF 200D 2640                      ; minimally-qualified # 💆🏿‍♀ woman getting massage: dark skin tone\n1F487                                      ; fully-qualified     # 💇 person getting haircut\n1F487 1F3FB                                ; fully-qualified     # 💇🏻 person getting haircut: light skin tone\n1F487 1F3FC                                ; fully-qualified     # 💇🏼 person getting haircut: medium-light skin tone\n1F487 1F3FD                                ; fully-qualified     # 💇🏽 person getting haircut: medium skin tone\n1F487 1F3FE                                ; fully-qualified     # 💇🏾 person getting haircut: medium-dark skin tone\n1F487 1F3FF                                ; fully-qualified     # 💇🏿 person getting haircut: dark skin tone\n1F487 200D 2642 FE0F                       ; fully-qualified     # 💇‍♂️ man getting haircut\n1F487 200D 2642                            ; minimally-qualified # 💇‍♂ man getting haircut\n1F487 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 💇🏻‍♂️ man getting haircut: light skin tone\n1F487 1F3FB 200D 2642                      ; minimally-qualified # 💇🏻‍♂ man getting haircut: light skin tone\n1F487 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 💇🏼‍♂️ man getting haircut: medium-light skin tone\n1F487 1F3FC 200D 2642                      ; minimally-qualified # 💇🏼‍♂ man getting haircut: medium-light skin tone\n1F487 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 💇🏽‍♂️ man getting haircut: medium skin tone\n1F487 1F3FD 200D 2642                      ; minimally-qualified # 💇🏽‍♂ man getting haircut: medium skin tone\n1F487 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 💇🏾‍♂️ man getting haircut: medium-dark skin tone\n1F487 1F3FE 200D 2642                      ; minimally-qualified # 💇🏾‍♂ man getting haircut: medium-dark skin tone\n1F487 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 💇🏿‍♂️ man getting haircut: dark skin tone\n1F487 1F3FF 200D 2642                      ; minimally-qualified # 💇🏿‍♂ man getting haircut: dark skin tone\n1F487 200D 2640 FE0F                       ; fully-qualified     # 💇‍♀️ woman getting haircut\n1F487 200D 2640                            ; minimally-qualified # 💇‍♀ woman getting haircut\n1F487 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 💇🏻‍♀️ woman getting haircut: light skin tone\n1F487 1F3FB 200D 2640                      ; minimally-qualified # 💇🏻‍♀ woman getting haircut: light skin tone\n1F487 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 💇🏼‍♀️ woman getting haircut: medium-light skin tone\n1F487 1F3FC 200D 2640                      ; minimally-qualified # 💇🏼‍♀ woman getting haircut: medium-light skin tone\n1F487 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 💇🏽‍♀️ woman getting haircut: medium skin tone\n1F487 1F3FD 200D 2640                      ; minimally-qualified # 💇🏽‍♀ woman getting haircut: medium skin tone\n1F487 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 💇🏾‍♀️ woman getting haircut: medium-dark skin tone\n1F487 1F3FE 200D 2640                      ; minimally-qualified # 💇🏾‍♀ woman getting haircut: medium-dark skin tone\n1F487 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 💇🏿‍♀️ woman getting haircut: dark skin tone\n1F487 1F3FF 200D 2640                      ; minimally-qualified # 💇🏿‍♀ woman getting haircut: dark skin tone\n1F6B6                                      ; fully-qualified     # 🚶 person walking\n1F6B6 1F3FB                                ; fully-qualified     # 🚶🏻 person walking: light skin tone\n1F6B6 1F3FC                                ; fully-qualified     # 🚶🏼 person walking: medium-light skin tone\n1F6B6 1F3FD                                ; fully-qualified     # 🚶🏽 person walking: medium skin tone\n1F6B6 1F3FE                                ; fully-qualified     # 🚶🏾 person walking: medium-dark skin tone\n1F6B6 1F3FF                                ; fully-qualified     # 🚶🏿 person walking: dark skin tone\n1F6B6 200D 2642 FE0F                       ; fully-qualified     # 🚶‍♂️ man walking\n1F6B6 200D 2642                            ; minimally-qualified # 🚶‍♂ man walking\n1F6B6 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🚶🏻‍♂️ man walking: light skin tone\n1F6B6 1F3FB 200D 2642                      ; minimally-qualified # 🚶🏻‍♂ man walking: light skin tone\n1F6B6 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🚶🏼‍♂️ man walking: medium-light skin tone\n1F6B6 1F3FC 200D 2642                      ; minimally-qualified # 🚶🏼‍♂ man walking: medium-light skin tone\n1F6B6 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🚶🏽‍♂️ man walking: medium skin tone\n1F6B6 1F3FD 200D 2642                      ; minimally-qualified # 🚶🏽‍♂ man walking: medium skin tone\n1F6B6 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🚶🏾‍♂️ man walking: medium-dark skin tone\n1F6B6 1F3FE 200D 2642                      ; minimally-qualified # 🚶🏾‍♂ man walking: medium-dark skin tone\n1F6B6 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🚶🏿‍♂️ man walking: dark skin tone\n1F6B6 1F3FF 200D 2642                      ; minimally-qualified # 🚶🏿‍♂ man walking: dark skin tone\n1F6B6 200D 2640 FE0F                       ; fully-qualified     # 🚶‍♀️ woman walking\n1F6B6 200D 2640                            ; minimally-qualified # 🚶‍♀ woman walking\n1F6B6 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚶🏻‍♀️ woman walking: light skin tone\n1F6B6 1F3FB 200D 2640                      ; minimally-qualified # 🚶🏻‍♀ woman walking: light skin tone\n1F6B6 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚶🏼‍♀️ woman walking: medium-light skin tone\n1F6B6 1F3FC 200D 2640                      ; minimally-qualified # 🚶🏼‍♀ woman walking: medium-light skin tone\n1F6B6 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚶🏽‍♀️ woman walking: medium skin tone\n1F6B6 1F3FD 200D 2640                      ; minimally-qualified # 🚶🏽‍♀ woman walking: medium skin tone\n1F6B6 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚶🏾‍♀️ woman walking: medium-dark skin tone\n1F6B6 1F3FE 200D 2640                      ; minimally-qualified # 🚶🏾‍♀ woman walking: medium-dark skin tone\n1F6B6 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚶🏿‍♀️ woman walking: dark skin tone\n1F6B6 1F3FF 200D 2640                      ; minimally-qualified # 🚶🏿‍♀ woman walking: dark skin tone\n1F9CD                                      ; fully-qualified     # 🧍 person standing\n```\n\n----------------------------------------\n\nTITLE: Setting Oh My Zsh Theme to Random (Shell)\nDESCRIPTION: Configuration to set Oh My Zsh to use a random theme each time a new terminal window is opened.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nZSH_THEME=\"random\" # (...please let it be pie... please be some pie..)\n```\n\n----------------------------------------\n\nTITLE: Adding iTerm2 Plugin in Oh My Zsh Configuration - Shell\nDESCRIPTION: This snippet demonstrates how to add the iTerm2 plugin to the plugins array in your .zshrc configuration file. To enable the plugin, append 'iterm2' to the plugins array, ensuring that the corresponding plugin functions are loaded when the shell initializes. No external dependencies are required, but Oh My Zsh should be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/iterm2/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nplugins=(... iterm2)\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Mapping - Musical Notation\nDESCRIPTION: Unicode codepoint mappings for music notation and audio equipment emoji symbols.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_46\n\nLANGUAGE: txt\nCODE:\n```\n# subgroup: music\n1F3BC                                      ; fully-qualified     # 🎼 musical score\n1F3B5                                      ; fully-qualified     # 🎵 musical note\n1F3B6                                      ; fully-qualified     # 🎶 musical notes\n```\n\n----------------------------------------\n\nTITLE: Adding Timoni Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet demonstrates how to add the Timoni plugin to the plugins array in the zshrc file. This enables completion support for Timoni commands in the Oh My Zsh shell environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/timoni/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... timoni)\n```\n\n----------------------------------------\n\nTITLE: Installing the Arcanist Plugin in ZSH\nDESCRIPTION: This snippet shows how to enable the arcanist plugin by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/arcanist/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... arcanist)\n```\n\n----------------------------------------\n\nTITLE: Invoking genpass-apple Command\nDESCRIPTION: This snippet shows how to directly invoke the genpass-apple generator to create a pronounceable pseudoword passphrase using the 'cvccvc' pattern. Users can specify a number to generate multiple passwords at once.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\n~/.oh-my-zsh/plugins/genpass/genpass-apple 3\n```\n\nLANGUAGE: Shell\nCODE:\n```\n% genpass-apple\n```\n\nLANGUAGE: Shell\nCODE:\n```\n% genpass-apple 3\n```\n\n----------------------------------------\n\nTITLE: Installation from a Forked Repository\nDESCRIPTION: Shows how to install Oh My Zsh from a forked repository by setting the REPO, REMOTE, and BRANCH variables. This allows installation from different repository owners or clones hosted on different platforms.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nREPO=apjanke/oh-my-zsh BRANCH=edge sh install.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Emoji for Person Frowning Gestures\nDESCRIPTION: This snippet defines Unicode codepoints for the 'person frowning' emoji, including variations for different skin tones and genders. It includes both fully-qualified and minimally-qualified versions of the emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_12\n\nLANGUAGE: Unicode\nCODE:\n```\n1F64D                                      ; fully-qualified     # 🙍 person frowning\n1F64D 1F3FB                                ; fully-qualified     # 🙍🏻 person frowning: light skin tone\n1F64D 1F3FC                                ; fully-qualified     # 🙍🏼 person frowning: medium-light skin tone\n1F64D 1F3FD                                ; fully-qualified     # 🙍🏽 person frowning: medium skin tone\n1F64D 1F3FE                                ; fully-qualified     # 🙍🏾 person frowning: medium-dark skin tone\n1F64D 1F3FF                                ; fully-qualified     # 🙍🏿 person frowning: dark skin tone\n1F64D 200D 2642 FE0F                       ; fully-qualified     # 🙍‍♂️ man frowning\n1F64D 200D 2642                            ; minimally-qualified # 🙍‍♂ man frowning\n1F64D 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🙍🏻‍♂️ man frowning: light skin tone\n1F64D 1F3FB 200D 2642                      ; minimally-qualified # 🙍🏻‍♂ man frowning: light skin tone\n```\n\n----------------------------------------\n\nTITLE: Defining Hand Finger Partial Emojis in Unicode\nDESCRIPTION: A structured list of Unicode codepoints for hand gesture emojis including OK hand, pinching hand, victory hand, crossed fingers, love-you gesture, sign of the horns, and call me hand, with skin tone variations.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# subgroup: hand-fingers-partial\n1F44C                                      ; fully-qualified     # 👌 OK hand\n1F44C 1F3FB                                ; fully-qualified     # 👌🏻 OK hand: light skin tone\n1F44C 1F3FC                                ; fully-qualified     # 👌🏼 OK hand: medium-light skin tone\n1F44C 1F3FD                                ; fully-qualified     # 👌🏽 OK hand: medium skin tone\n1F44C 1F3FE                                ; fully-qualified     # 👌🏾 OK hand: medium-dark skin tone\n1F44C 1F3FF                                ; fully-qualified     # 👌🏿 OK hand: dark skin tone\n1F90F                                      ; fully-qualified     # 🤏 pinching hand\n1F90F 1F3FB                                ; fully-qualified     # 🤏🏻 pinching hand: light skin tone\n1F90F 1F3FC                                ; fully-qualified     # 🤏🏼 pinching hand: medium-light skin tone\n1F90F 1F3FD                                ; fully-qualified     # 🤏🏽 pinching hand: medium skin tone\n1F90F 1F3FE                                ; fully-qualified     # 🤏🏾 pinching hand: medium-dark skin tone\n1F90F 1F3FF                                ; fully-qualified     # 🤏🏿 pinching hand: dark skin tone\n270C FE0F                                  ; fully-qualified     # ✌️ victory hand\n270C                                       ; unqualified         # ✌ victory hand\n270C 1F3FB                                 ; fully-qualified     # ✌🏻 victory hand: light skin tone\n270C 1F3FC                                 ; fully-qualified     # ✌🏼 victory hand: medium-light skin tone\n270C 1F3FD                                 ; fully-qualified     # ✌🏽 victory hand: medium skin tone\n270C 1F3FE                                 ; fully-qualified     # ✌🏾 victory hand: medium-dark skin tone\n270C 1F3FF                                 ; fully-qualified     # ✌🏿 victory hand: dark skin tone\n1F91E                                      ; fully-qualified     # 🤞 crossed fingers\n1F91E 1F3FB                                ; fully-qualified     # 🤞🏻 crossed fingers: light skin tone\n1F91E 1F3FC                                ; fully-qualified     # 🤞🏼 crossed fingers: medium-light skin tone\n1F91E 1F3FD                                ; fully-qualified     # 🤞🏽 crossed fingers: medium skin tone\n1F91E 1F3FE                                ; fully-qualified     # 🤞🏾 crossed fingers: medium-dark skin tone\n1F91E 1F3FF                                ; fully-qualified     # 🤞🏿 crossed fingers: dark skin tone\n1F91F                                      ; fully-qualified     # 🤟 love-you gesture\n1F91F 1F3FB                                ; fully-qualified     # 🤟🏻 love-you gesture: light skin tone\n1F91F 1F3FC                                ; fully-qualified     # 🤟🏼 love-you gesture: medium-light skin tone\n1F91F 1F3FD                                ; fully-qualified     # 🤟🏽 love-you gesture: medium skin tone\n1F91F 1F3FE                                ; fully-qualified     # 🤟🏾 love-you gesture: medium-dark skin tone\n1F91F 1F3FF                                ; fully-qualified     # 🤟🏿 love-you gesture: dark skin tone\n1F918                                      ; fully-qualified     # 🤘 sign of the horns\n1F918 1F3FB                                ; fully-qualified     # 🤘🏻 sign of the horns: light skin tone\n1F918 1F3FC                                ; fully-qualified     # 🤘🏼 sign of the horns: medium-light skin tone\n1F918 1F3FD                                ; fully-qualified     # 🤘🏽 sign of the horns: medium skin tone\n1F918 1F3FE                                ; fully-qualified     # 🤘🏾 sign of the horns: medium-dark skin tone\n1F918 1F3FF                                ; fully-qualified     # 🤘🏿 sign of the horns: dark skin tone\n1F919                                      ; fully-qualified     # 🤙 call me hand\n1F919 1F3FB                                ; fully-qualified     # 🤙🏻 call me hand: light skin tone\n1F919 1F3FC                                ; fully-qualified     # 🤙🏼 call me hand: medium-light skin tone\n1F919 1F3FD                                ; fully-qualified     # 🤙🏽 call me hand: medium skin tone\n1F919 1F3FE                                ; fully-qualified     # 🤙🏾 call me hand: medium-dark skin tone\n1F919 1F3FF                                ; fully-qualified     # 🤙🏿 call me hand: dark skin tone\n```\n\n----------------------------------------\n\nTITLE: Adding SFDX Plugin to Oh My Zsh Configuration in ZSH\nDESCRIPTION: This code snippet shows how to enable the sfdx plugin in your Oh My Zsh configuration by adding it to the plugins array in your zshrc file. This allows for Salesforce DX CLI autocompletion functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sfdx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sfdx)\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Emoji for Person Pouting Gestures\nDESCRIPTION: This snippet defines Unicode codepoints for the 'person pouting' emoji, including variations for different skin tones and genders. It includes both fully-qualified and minimally-qualified versions of the emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_13\n\nLANGUAGE: Unicode\nCODE:\n```\n1F64E                                      ; fully-qualified     # 🙎 person pouting\n1F64E 1F3FB                                ; fully-qualified     # 🙎🏻 person pouting: light skin tone\n1F64E 1F3FC                                ; fully-qualified     # 🙎🏼 person pouting: medium-light skin tone\n1F64E 1F3FD                                ; fully-qualified     # 🙎🏽 person pouting: medium skin tone\n1F64E 1F3FE                                ; fully-qualified     # 🙎🏾 person pouting: medium-dark skin tone\n1F64E 1F3FF                                ; fully-qualified     # 🙎🏿 person pouting: dark skin tone\n1F64E 200D 2642 FE0F                       ; fully-qualified     # 🙎‍♂️ man pouting\n1F64E 200D 2642                            ; minimally-qualified # 🙎‍♂ man pouting\n1F64E 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🙎🏻‍♂️ man pouting: light skin tone\n1F64E 1F3FB 200D 2642                      ; minimally-qualified # 🙎🏻‍♂ man pouting: light skin tone\n```\n\n----------------------------------------\n\nTITLE: Installing the swiftpm Plugin in Oh My Zsh\nDESCRIPTION: Shows how to add the swiftpm plugin to the Oh My Zsh configuration. Users need to add 'swiftpm' to their plugins array in the .zshrc file to enable this functionality.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/swiftpm/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... swiftpm)\n```\n\n----------------------------------------\n\nTITLE: Unicode Code Points for Emoji Characters\nDESCRIPTION: Defines the Unicode code point sequences for emoji characters with variations for different skin tones and hair styles. Each line contains the hexadecimal code points and qualification status, followed by the visual representation and description.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_11\n\nLANGUAGE: unicode\nCODE:\n```\n1F471 1F3FE 200D 2640                      ; minimally-qualified # 👱🏾‍♀ woman: medium-dark skin tone, blond hair\n1F471 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 👱🏿‍♀️ woman: dark skin tone, blond hair\n1F471 1F3FF 200D 2640                      ; minimally-qualified # 👱🏿‍♀ woman: dark skin tone, blond hair\n1F469 200D 1F9B0                           ; fully-qualified     # 👩‍🦰 woman: red hair\n1F469 1F3FB 200D 1F9B0                     ; fully-qualified     # 👩🏻‍🦰 woman: light skin tone, red hair\n1F469 1F3FC 200D 1F9B0                     ; fully-qualified     # 👩🏼‍🦰 woman: medium-light skin tone, red hair\n1F469 1F3FD 200D 1F9B0                     ; fully-qualified     # 👩🏽‍🦰 woman: medium skin tone, red hair\n1F469 1F3FE 200D 1F9B0                     ; fully-qualified     # 👩🏾‍🦰 woman: medium-dark skin tone, red hair\n1F469 1F3FF 200D 1F9B0                     ; fully-qualified     # 👩🏿‍🦰 woman: dark skin tone, red hair\n1F469 200D 1F9B1                           ; fully-qualified     # 👩‍🦱 woman: curly hair\n1F469 1F3FB 200D 1F9B1                     ; fully-qualified     # 👩🏻‍🦱 woman: light skin tone, curly hair\n1F469 1F3FC 200D 1F9B1                     ; fully-qualified     # 👩🏼‍🦱 woman: medium-light skin tone, curly hair\n1F469 1F3FD 200D 1F9B1                     ; fully-qualified     # 👩🏽‍🦱 woman: medium skin tone, curly hair\n1F469 1F3FE 200D 1F9B1                     ; fully-qualified     # 👩🏾‍🦱 woman: medium-dark skin tone, curly hair\n1F469 1F3FF 200D 1F9B1                     ; fully-qualified     # 👩🏿‍🦱 woman: dark skin tone, curly hair\n1F469 200D 1F9B3                           ; fully-qualified     # 👩‍🦳 woman: white hair\n1F469 1F3FB 200D 1F9B3                     ; fully-qualified     # 👩🏻‍🦳 woman: light skin tone, white hair\n1F469 1F3FC 200D 1F9B3                     ; fully-qualified     # 👩🏼‍🦳 woman: medium-light skin tone, white hair\n1F469 1F3FD 200D 1F9B3                     ; fully-qualified     # 👩🏽‍🦳 woman: medium skin tone, white hair\n1F469 1F3FE 200D 1F9B3                     ; fully-qualified     # 👩🏾‍🦳 woman: medium-dark skin tone, white hair\n1F469 1F3FF 200D 1F9B3                     ; fully-qualified     # 👩🏿‍🦳 woman: dark skin tone, white hair\n1F469 200D 1F9B2                           ; fully-qualified     # 👩‍🦲 woman: bald\n1F469 1F3FB 200D 1F9B2                     ; fully-qualified     # 👩🏻‍🦲 woman: light skin tone, bald\n1F469 1F3FC 200D 1F9B2                     ; fully-qualified     # 👩🏼‍🦲 woman: medium-light skin tone, bald\n1F469 1F3FD 200D 1F9B2                     ; fully-qualified     # 👩🏽‍🦲 woman: medium skin tone, bald\n1F469 1F3FE 200D 1F9B2                     ; fully-qualified     # 👩🏾‍🦲 woman: medium-dark skin tone, bald\n1F469 1F3FF 200D 1F9B2                     ; fully-qualified     # 👩🏿‍🦲 woman: dark skin tone, bald\n1F9D3                                      ; fully-qualified     # 🧓 older person\n1F9D3 1F3FB                                ; fully-qualified     # 🧓🏻 older person: light skin tone\n1F9D3 1F3FC                                ; fully-qualified     # 🧓🏼 older person: medium-light skin tone\n1F9D3 1F3FD                                ; fully-qualified     # 🧓🏽 older person: medium skin tone\n1F9D3 1F3FE                                ; fully-qualified     # 🧓🏾 older person: medium-dark skin tone\n1F9D3 1F3FF                                ; fully-qualified     # 🧓🏿 older person: dark skin tone\n1F474                                      ; fully-qualified     # 👴 old man\n1F474 1F3FB                                ; fully-qualified     # 👴🏻 old man: light skin tone\n1F474 1F3FC                                ; fully-qualified     # 👴🏼 old man: medium-light skin tone\n1F474 1F3FD                                ; fully-qualified     # 👴🏽 old man: medium skin tone\n1F474 1F3FE                                ; fully-qualified     # 👴🏾 old man: medium-dark skin tone\n1F474 1F3FF                                ; fully-qualified     # 👴🏿 old man: dark skin tone\n1F475                                      ; fully-qualified     # 👵 old woman\n1F475 1F3FB                                ; fully-qualified     # 👵🏻 old woman: light skin tone\n1F475 1F3FC                                ; fully-qualified     # 👵🏼 old woman: medium-light skin tone\n1F475 1F3FD                                ; fully-qualified     # 👵🏽 old woman: medium skin tone\n1F475 1F3FE                                ; fully-qualified     # 👵🏾 old woman: medium-dark skin tone\n1F475 1F3FF                                ; fully-qualified     # 👵🏿 old woman: dark skin tone\n```\n\n----------------------------------------\n\nTITLE: URL Encoding and Decoding Examples in Zsh\nDESCRIPTION: These examples demonstrate the usage of the 'urlencode' and 'urldecode' commands provided by the URLTools plugin. The first example encodes a URL, while the second example decodes a previously encoded URL.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/urltools/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nurlencode 'https://github.com/ohmyzsh/ohmyzsh/search?q=urltools&type=Code'\n# returns https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh%2Fsearch%3Fq%3Durltools%26type%3DCode\n\nurldecode 'https%3A%2F%2Fgithub.com%2Fohmyzsh%2Fohmyzsh%2Fsearch%3Fq%3Durltools%26type%3DCode'\n# returns https://github.com/ohmyzsh/ohmyzsh/search?q=urltools&type=Code\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Sequences for Person-Role Emojis with Skin Tone Variations\nDESCRIPTION: This code snippet defines Unicode sequences for emojis representing people in various professional roles (health worker, student, teacher, judge, farmer, cook) with different skin tone modifiers. Each line includes the hexadecimal Unicode sequence, qualification status (fully-qualified or minimally-qualified), and the visual representation with description.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_19\n\nLANGUAGE: unicode\nCODE:\n```\n# subgroup: person-role\n1F468 200D 2695 FE0F                       ; fully-qualified     # 👨‍⚕️ man health worker\n1F468 200D 2695                            ; minimally-qualified # 👨‍⚕ man health worker\n1F468 1F3FB 200D 2695 FE0F                 ; fully-qualified     # 👨🏻‍⚕️ man health worker: light skin tone\n1F468 1F3FB 200D 2695                      ; minimally-qualified # 👨🏻‍⚕ man health worker: light skin tone\n1F468 1F3FC 200D 2695 FE0F                 ; fully-qualified     # 👨🏼‍⚕️ man health worker: medium-light skin tone\n1F468 1F3FC 200D 2695                      ; minimally-qualified # 👨🏼‍⚕ man health worker: medium-light skin tone\n1F468 1F3FD 200D 2695 FE0F                 ; fully-qualified     # 👨🏽‍⚕️ man health worker: medium skin tone\n1F468 1F3FD 200D 2695                      ; minimally-qualified # 👨🏽‍⚕ man health worker: medium skin tone\n1F468 1F3FE 200D 2695 FE0F                 ; fully-qualified     # 👨🏾‍⚕️ man health worker: medium-dark skin tone\n1F468 1F3FE 200D 2695                      ; minimally-qualified # 👨🏾‍⚕ man health worker: medium-dark skin tone\n1F468 1F3FF 200D 2695 FE0F                 ; fully-qualified     # 👨🏿‍⚕️ man health worker: dark skin tone\n1F468 1F3FF 200D 2695                      ; minimally-qualified # 👨🏿‍⚕ man health worker: dark skin tone\n1F469 200D 2695 FE0F                       ; fully-qualified     # 👩‍⚕️ woman health worker\n1F469 200D 2695                            ; minimally-qualified # 👩‍⚕ woman health worker\n1F469 1F3FB 200D 2695 FE0F                 ; fully-qualified     # 👩🏻‍⚕️ woman health worker: light skin tone\n1F469 1F3FB 200D 2695                      ; minimally-qualified # 👩🏻‍⚕ woman health worker: light skin tone\n1F469 1F3FC 200D 2695 FE0F                 ; fully-qualified     # 👩🏼‍⚕️ woman health worker: medium-light skin tone\n1F469 1F3FC 200D 2695                      ; minimally-qualified # 👩🏼‍⚕ woman health worker: medium-light skin tone\n1F469 1F3FD 200D 2695 FE0F                 ; fully-qualified     # 👩🏽‍⚕️ woman health worker: medium skin tone\n1F469 1F3FD 200D 2695                      ; minimally-qualified # 👩🏽‍⚕ woman health worker: medium skin tone\n1F469 1F3FE 200D 2695 FE0F                 ; fully-qualified     # 👩🏾‍⚕️ woman health worker: medium-dark skin tone\n1F469 1F3FE 200D 2695                      ; minimally-qualified # 👩🏾‍⚕ woman health worker: medium-dark skin tone\n1F469 1F3FF 200D 2695 FE0F                 ; fully-qualified     # 👩🏿‍⚕️ woman health worker: dark skin tone\n1F469 1F3FF 200D 2695                      ; minimally-qualified # 👩🏿‍⚕ woman health worker: dark skin tone\n1F468 200D 1F393                           ; fully-qualified     # 👨‍🎓 man student\n1F468 1F3FB 200D 1F393                     ; fully-qualified     # 👨🏻‍🎓 man student: light skin tone\n1F468 1F3FC 200D 1F393                     ; fully-qualified     # 👨🏼‍🎓 man student: medium-light skin tone\n1F468 1F3FD 200D 1F393                     ; fully-qualified     # 👨🏽‍🎓 man student: medium skin tone\n1F468 1F3FE 200D 1F393                     ; fully-qualified     # 👨🏾‍🎓 man student: medium-dark skin tone\n1F468 1F3FF 200D 1F393                     ; fully-qualified     # 👨🏿‍🎓 man student: dark skin tone\n1F469 200D 1F393                           ; fully-qualified     # 👩‍🎓 woman student\n1F469 1F3FB 200D 1F393                     ; fully-qualified     # 👩🏻‍🎓 woman student: light skin tone\n1F469 1F3FC 200D 1F393                     ; fully-qualified     # 👩🏼‍🎓 woman student: medium-light skin tone\n1F469 1F3FD 200D 1F393                     ; fully-qualified     # 👩🏽‍🎓 woman student: medium skin tone\n1F469 1F3FE 200D 1F393                     ; fully-qualified     # 👩🏾‍🎓 woman student: medium-dark skin tone\n1F469 1F3FF 200D 1F393                     ; fully-qualified     # 👩🏿‍🎓 woman student: dark skin tone\n1F468 200D 1F3EB                           ; fully-qualified     # 👨‍🏫 man teacher\n1F468 1F3FB 200D 1F3EB                     ; fully-qualified     # 👨🏻‍🏫 man teacher: light skin tone\n1F468 1F3FC 200D 1F3EB                     ; fully-qualified     # 👨🏼‍🏫 man teacher: medium-light skin tone\n1F468 1F3FD 200D 1F3EB                     ; fully-qualified     # 👨🏽‍🏫 man teacher: medium skin tone\n1F468 1F3FE 200D 1F3EB                     ; fully-qualified     # 👨🏾‍🏫 man teacher: medium-dark skin tone\n1F468 1F3FF 200D 1F3EB                     ; fully-qualified     # 👨🏿‍🏫 man teacher: dark skin tone\n1F469 200D 1F3EB                           ; fully-qualified     # 👩‍🏫 woman teacher\n1F469 1F3FB 200D 1F3EB                     ; fully-qualified     # 👩🏻‍🏫 woman teacher: light skin tone\n1F469 1F3FC 200D 1F3EB                     ; fully-qualified     # 👩🏼‍🏫 woman teacher: medium-light skin tone\n1F469 1F3FD 200D 1F3EB                     ; fully-qualified     # 👩🏽‍🏫 woman teacher: medium skin tone\n1F469 1F3FE 200D 1F3EB                     ; fully-qualified     # 👩🏾‍🏫 woman teacher: medium-dark skin tone\n1F469 1F3FF 200D 1F3EB                     ; fully-qualified     # 👩🏿‍🏫 woman teacher: dark skin tone\n1F468 200D 2696 FE0F                       ; fully-qualified     # 👨‍⚖️ man judge\n1F468 200D 2696                            ; minimally-qualified # 👨‍⚖ man judge\n1F468 1F3FB 200D 2696 FE0F                 ; fully-qualified     # 👨🏻‍⚖️ man judge: light skin tone\n1F468 1F3FB 200D 2696                      ; minimally-qualified # 👨🏻‍⚖ man judge: light skin tone\n1F468 1F3FC 200D 2696 FE0F                 ; fully-qualified     # 👨🏼‍⚖️ man judge: medium-light skin tone\n1F468 1F3FC 200D 2696                      ; minimally-qualified # 👨🏼‍⚖ man judge: medium-light skin tone\n1F468 1F3FD 200D 2696 FE0F                 ; fully-qualified     # 👨🏽‍⚖️ man judge: medium skin tone\n1F468 1F3FD 200D 2696                      ; minimally-qualified # 👨🏽‍⚖ man judge: medium skin tone\n1F468 1F3FE 200D 2696 FE0F                 ; fully-qualified     # 👨🏾‍⚖️ man judge: medium-dark skin tone\n1F468 1F3FE 200D 2696                      ; minimally-qualified # 👨🏾‍⚖ man judge: medium-dark skin tone\n1F468 1F3FF 200D 2696 FE0F                 ; fully-qualified     # 👨🏿‍⚖️ man judge: dark skin tone\n1F468 1F3FF 200D 2696                      ; minimally-qualified # 👨🏿‍⚖ man judge: dark skin tone\n1F469 200D 2696 FE0F                       ; fully-qualified     # 👩‍⚖️ woman judge\n1F469 200D 2696                            ; minimally-qualified # 👩‍⚖ woman judge\n1F469 1F3FB 200D 2696 FE0F                 ; fully-qualified     # 👩🏻‍⚖️ woman judge: light skin tone\n1F469 1F3FB 200D 2696                      ; minimally-qualified # 👩🏻‍⚖ woman judge: light skin tone\n1F469 1F3FC 200D 2696 FE0F                 ; fully-qualified     # 👩🏼‍⚖️ woman judge: medium-light skin tone\n1F469 1F3FC 200D 2696                      ; minimally-qualified # 👩🏼‍⚖ woman judge: medium-light skin tone\n1F469 1F3FD 200D 2696 FE0F                 ; fully-qualified     # 👩🏽‍⚖️ woman judge: medium skin tone\n1F469 1F3FD 200D 2696                      ; minimally-qualified # 👩🏽‍⚖ woman judge: medium skin tone\n1F469 1F3FE 200D 2696 FE0F                 ; fully-qualified     # 👩🏾‍⚖️ woman judge: medium-dark skin tone\n1F469 1F3FE 200D 2696                      ; minimally-qualified # 👩🏾‍⚖ woman judge: medium-dark skin tone\n1F469 1F3FF 200D 2696 FE0F                 ; fully-qualified     # 👩🏿‍⚖️ woman judge: dark skin tone\n1F469 1F3FF 200D 2696                      ; minimally-qualified # 👩🏿‍⚖ woman judge: dark skin tone\n1F468 200D 1F33E                           ; fully-qualified     # 👨‍🌾 man farmer\n1F468 1F3FB 200D 1F33E                     ; fully-qualified     # 👨🏻‍🌾 man farmer: light skin tone\n1F468 1F3FC 200D 1F33E                     ; fully-qualified     # 👨🏼‍🌾 man farmer: medium-light skin tone\n1F468 1F3FD 200D 1F33E                     ; fully-qualified     # 👨🏽‍🌾 man farmer: medium skin tone\n1F468 1F3FE 200D 1F33E                     ; fully-qualified     # 👨🏾‍🌾 man farmer: medium-dark skin tone\n1F468 1F3FF 200D 1F33E                     ; fully-qualified     # 👨🏿‍🌾 man farmer: dark skin tone\n1F469 200D 1F33E                           ; fully-qualified     # 👩‍🌾 woman farmer\n1F469 1F3FB 200D 1F33E                     ; fully-qualified     # 👩🏻‍🌾 woman farmer: light skin tone\n1F469 1F3FC 200D 1F33E                     ; fully-qualified     # 👩🏼‍🌾 woman farmer: medium-light skin tone\n1F469 1F3FD 200D 1F33E                     ; fully-qualified     # 👩🏽‍🌾 woman farmer: medium skin tone\n1F469 1F3FE 200D 1F33E                     ; fully-qualified     # 👩🏾‍🌾 woman farmer: medium-dark skin tone\n1F469 1F3FF 200D 1F33E                     ; fully-qualified     # 👩🏿‍🌾 woman farmer: dark skin tone\n1F468 200D 1F373                           ; fully-qualified     # 👨‍🍳 man cook\n1F468 1F3FB 200D 1F373                     ; fully-qualified     # 👨🏻‍🍳 man cook: light skin tone\n1F468 1F3FC 200D 1F373                     ; fully-qualified     # 👨🏼‍🍳 man cook: medium-light skin tone\n1F468 1F3FD 200D 1F373                     ; fully-qualified     # 👨🏽‍🍳 man cook: medium skin tone\n1F468 1F3FE 200D 1F373                     ; fully-qualified     # 👨🏾‍🍳 man cook: medium-dark skin tone\n1F468 1F3FF 200D 1F373                     ; fully-qualified     # 👨🏿‍🍳 man cook: dark skin tone\n1F469 200D 1F373                           ; fully-qualified     # 👩‍🍳 woman cook\n1F469 1F3FB 200D 1F373                     ; fully-qualified     # 👩🏻‍🍳 woman cook: light skin tone\n1F469 1F3FC 200D 1F373                     ; fully-qualified     # 👩🏼‍🍳 woman cook: medium-light skin tone\n1F469 1F3FD 200D 1F373                     ; fully-qualified     # 👩🏽‍🍳 woman cook: medium skin tone\n1F469 1F3FE 200D 1F373                     ; fully-qualified     # 👩🏾‍🍳 woman cook: medium-dark skin tone\n```\n\n----------------------------------------\n\nTITLE: Time Emoji Unicode Definitions\nDESCRIPTION: Unicode code point definitions for time-related emoji including clocks, watches and time indicators\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_42\n\nLANGUAGE: unicode\nCODE:\n```\n231B                                       ; fully-qualified     # ⌛ hourglass done\n23F3                                       ; fully-qualified     # ⏳ hourglass not done\n231A                                       ; fully-qualified     # ⌚ watch\n```\n\n----------------------------------------\n\nTITLE: Applying Skin Tone Modifier to an Emoji in Zsh (Experimental)\nDESCRIPTION: Demonstrates the experimental feature of applying a skin tone modifier. It retrieves the base emoji ('waving_hand') from `$emoji` and appends a skin tone variation selector ('5') retrieved from the experimental `$emoji_skintone` associative array. The effectiveness depends on terminal and font support for Unicode 8.0+ features.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_13\n\nLANGUAGE: zsh\nCODE:\n```\necho $emoji[waving_hand]$emoji_skintone[5]\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Family Emojis\nDESCRIPTION: This snippet defines Unicode codepoints for emojis representing various family structures, including different combinations of adults and children. All definitions are fully-qualified.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_33\n\nLANGUAGE: Unicode\nCODE:\n```\n1F46A                                      ; fully-qualified     # 👪 family\n1F468 200D 1F469 200D 1F466                ; fully-qualified     # 👨‍👩‍👦 family: man, woman, boy\n1F468 200D 1F469 200D 1F467                ; fully-qualified     # 👨‍👩‍👧 family: man, woman, girl\n1F468 200D 1F469 200D 1F467 200D 1F466     ; fully-qualified     # 👨‍👩‍👧‍👦 family: man, woman, girl, boy\n1F468 200D 1F469 200D 1F466 200D 1F466     ; fully-qualified     # 👨‍👩‍👦‍👦 family: man, woman, boy, boy\n1F468 200D 1F469 200D 1F467 200D 1F467     ; fully-qualified     # 👨‍👩‍👧‍👧 family: man, woman, girl, girl\n1F468 200D 1F468 200D 1F466                ; fully-qualified     # 👨‍👨‍👦 family: man, man, boy\n1F468 200D 1F468 200D 1F467                ; fully-qualified     # 👨‍👨‍👧 family: man, man, girl\n1F468 200D 1F468 200D 1F467 200D 1F466     ; fully-qualified     # 👨‍👨‍👧‍👦 family: man, man, girl, boy\n1F468 200D 1F468 200D 1F466 200D 1F466     ; fully-qualified     # 👨‍👨‍👦‍👦 family: man, man, boy, boy\n1F468 200D 1F468 200D 1F467 200D 1F467     ; fully-qualified     # 👨‍👨‍👧‍👧 family: man, man, girl, girl\n1F469 200D 1F469 200D 1F466                ; fully-qualified     # 👩‍👩‍👦 family: woman, woman, boy\n1F469 200D 1F469 200D 1F467                ; fully-qualified     # 👩‍👩‍👧 family: woman, woman, girl\n1F469 200D 1F469 200D 1F467 200D 1F466     ; fully-qualified     # 👩‍👩‍👧‍👦 family: woman, woman, girl, boy\n1F469 200D 1F469 200D 1F466 200D 1F466     ; fully-qualified     # 👩‍👩‍👦‍👦 family: woman, woman, boy, boy\n1F469 200D 1F469 200D 1F467 200D 1F467     ; fully-qualified     # 👩‍👩‍👧‍👧 family: woman, woman, girl, girl\n1F468 200D 1F466                           ; fully-qualified     # 👨‍👦 family: man, boy\n1F468 200D 1F466 200D 1F466                ; fully-qualified     # 👨‍👦‍👦 family: man, boy, boy\n1F468 200D 1F467                           ; fully-qualified     # 👨‍👧 family: man, girl\n1F468 200D 1F467 200D 1F466                ; fully-qualified     # 👨‍👧‍👦 family: man, girl, boy\n1F468 200D 1F467 200D 1F467                ; fully-qualified     # 👨‍👧‍👧 family: man, girl, girl\n1F469 200D 1F466                           ; fully-qualified     # 👩‍👦 family: woman, boy\n1F469 200D 1F466 200D 1F466                ; fully-qualified     # 👩‍👦‍👦 family: woman, boy, boy\n1F469 200D 1F467                           ; fully-qualified     # 👩‍👧 family: woman, girl\n1F469 200D 1F467 200D 1F466                ; fully-qualified     # 👩‍👧‍👦 family: woman, girl, boy\n1F469 200D 1F467 200D 1F467                ; fully-qualified     # 👩‍👧‍👧 family: woman, girl, girl\n```\n\n----------------------------------------\n\nTITLE: Defining AV Symbol Emoji Unicode Characters\nDESCRIPTION: This snippet defines Unicode characters for audio-visual control symbols and emojis. It includes both fully-qualified and unqualified versions for various playback and volume control buttons.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_54\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: av-symbol\n1F500                                      ; fully-qualified     # 🔀 shuffle tracks button\n1F501                                      ; fully-qualified     # 🔁 repeat button\n1F502                                      ; fully-qualified     # 🔂 repeat single button\n25B6 FE0F                                  ; fully-qualified     # ▶️ play button\n25B6                                       ; unqualified         # ▶ play button\n23E9                                       ; fully-qualified     # ⏩ fast-forward button\n23ED FE0F                                  ; fully-qualified     # ⏭️ next track button\n23ED                                       ; unqualified         # ⏭ next track button\n23EF FE0F                                  ; fully-qualified     # ⏯️ play or pause button\n23EF                                       ; unqualified         # ⏯ play or pause button\n25C0 FE0F                                  ; fully-qualified     # ◀️ reverse button\n25C0                                       ; unqualified         # ◀ reverse button\n23EA                                       ; fully-qualified     # ⏪ fast reverse button\n23EE FE0F                                  ; fully-qualified     # ⏮️ last track button\n23EE                                       ; unqualified         # ⏮ last track button\n1F53C                                      ; fully-qualified     # 🔼 upwards button\n23EB                                       ; fully-qualified     # ⏫ fast up button\n1F53D                                      ; fully-qualified     # 🔽 downwards button\n23EC                                       ; fully-qualified     # ⏬ fast down button\n23F8 FE0F                                  ; fully-qualified     # ⏸️ pause button\n23F8                                       ; unqualified         # ⏸ pause button\n23F9 FE0F                                  ; fully-qualified     # ⏹️ stop button\n23F9                                       ; unqualified         # ⏹ stop button\n23FA FE0F                                  ; fully-qualified     # ⏺️ record button\n23FA                                       ; unqualified         # ⏺ record button\n23CF FE0F                                  ; fully-qualified     # ⏏️ eject button\n23CF                                       ; unqualified         # ⏏ eject button\n1F3A6                                      ; fully-qualified     # 🎦 cinema\n1F505                                      ; fully-qualified     # 🔅 dim button\n1F506                                      ; fully-qualified     # 🔆 bright button\n1F4F6                                      ; fully-qualified     # 📶 antenna bars\n1F4F3                                      ; fully-qualified     # 📳 vibration mode\n1F4F4                                      ; fully-qualified     # 📴 mobile phone off\n```\n\n----------------------------------------\n\nTITLE: Installing SBT Plugin in Oh My Zsh\nDESCRIPTION: Shows how to enable the SBT plugin by adding it to the plugins array in the zshrc configuration file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/sbt/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... sbt)\n```\n\n----------------------------------------\n\nTITLE: MacVim Post-Call Focus Function\nDESCRIPTION: Example function definition for bringing MacVim window focus after loading a file using AppleScript.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/vim-interaction/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nfunction postCallVim\n{\n  osascript -e 'tell application \"MacVim\" to activate'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Person Symbols\nDESCRIPTION: This snippet defines Unicode codepoints for emojis representing person symbols, including speaking head, busts in silhouette, and footprints. It includes both fully-qualified and unqualified versions where applicable.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_34\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: person-symbol\n1F5E3 FE0F                                 ; fully-qualified     # 🗣️ speaking head\n1F5E3                                      ; unqualified         # 🗣 speaking head\n1F464                                      ; fully-qualified     # 👤 bust in silhouette\n1F465                                      ; fully-qualified     # 👥 busts in silhouette\n1F463                                      ; fully-qualified     # 👣 footprints\n```\n\n----------------------------------------\n\nTITLE: Defining Hand-Fingers-Open Emojis (Unicode)\nDESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'hand-fingers-open'. Includes gestures like 'waving hand', 'raised back of hand', 'hand with fingers splayed', 'raised hand', and 'vulcan salute'. Crucially, it lists the base emoji and its five skin tone modifier variants (light, medium-light, medium, medium-dark, dark). Each line follows the format: <Unicode sequence> ; <qualification> # <description>.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n# subgroup: hand-fingers-open\n1F44B                                      ; fully-qualified     # 👋 waving hand\n1F44B 1F3FB                                ; fully-qualified     # 👋🏻 waving hand: light skin tone\n1F44B 1F3FC                                ; fully-qualified     # 👋🏼 waving hand: medium-light skin tone\n1F44B 1F3FD                                ; fully-qualified     # 👋🏽 waving hand: medium skin tone\n1F44B 1F3FE                                ; fully-qualified     # 👋🏾 waving hand: medium-dark skin tone\n1F44B 1F3FF                                ; fully-qualified     # 👋🏿 waving hand: dark skin tone\n1F91A                                      ; fully-qualified     # 🤚 raised back of hand\n1F91A 1F3FB                                ; fully-qualified     # 🤚🏻 raised back of hand: light skin tone\n1F91A 1F3FC                                ; fully-qualified     # 🤚🏼 raised back of hand: medium-light skin tone\n1F91A 1F3FD                                ; fully-qualified     # 🤚🏽 raised back of hand: medium skin tone\n1F91A 1F3FE                                ; fully-qualified     # 🤚🏾 raised back of hand: medium-dark skin tone\n1F91A 1F3FF                                ; fully-qualified     # 🤚🏿 raised back of hand: dark skin tone\n1F590 FE0F                                 ; fully-qualified     # 🖐️ hand with fingers splayed\n1F590                                      ; unqualified         # 🖐 hand with fingers splayed\n1F590 1F3FB                                ; fully-qualified     # 🖐🏻 hand with fingers splayed: light skin tone\n1F590 1F3FC                                ; fully-qualified     # 🖐🏼 hand with fingers splayed: medium-light skin tone\n1F590 1F3FD                                ; fully-qualified     # 🖐🏽 hand with fingers splayed: medium skin tone\n1F590 1F3FE                                ; fully-qualified     # 🖐🏾 hand with fingers splayed: medium-dark skin tone\n1F590 1F3FF                                ; fully-qualified     # 🖐🏿 hand with fingers splayed: dark skin tone\n270B                                       ; fully-qualified     # ✋ raised hand\n270B 1F3FB                                 ; fully-qualified     # ✋🏻 raised hand: light skin tone\n270B 1F3FC                                 ; fully-qualified     # ✋🏼 raised hand: medium-light skin tone\n270B 1F3FD                                 ; fully-qualified     # ✋🏽 raised hand: medium skin tone\n270B 1F3FE                                 ; fully-qualified     # ✋🏾 raised hand: medium-dark skin tone\n270B 1F3FF                                 ; fully-qualified     # ✋🏿 raised hand: dark skin tone\n1F596                                      ; fully-qualified     # 🖖 vulcan salute\n1F596 1F3FB                                ; fully-qualified     # 🖖🏻 vulcan salute: light skin tone\n1F596 1F3FC                                ; fully-qualified     # 🖖🏼 vulcan salute: medium-light skin tone\n1F596 1F3FD                                ; fully-qualified     # 🖖🏽 vulcan salute: medium skin tone\n1F596 1F3FE                                ; fully-qualified     # 🖖🏾 vulcan salute: medium-dark skin tone\n1F596 1F3FF                                ; fully-qualified     # 🖖🏿 vulcan salute: dark skin tone\n```\n\n----------------------------------------\n\nTITLE: Listing Available Emoji Group Names in Zsh\nDESCRIPTION: Demonstrates how to list the names (keys) of all defined emoji groups. It uses Zsh parameter expansion (`${(k)...}`) to extract the keys from the `$emoji_groups` associative array provided by the plugin.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/README.md#2025-04-22_snippet_8\n\nLANGUAGE: zsh\nCODE:\n```\necho ${(k)emoji_groups}\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Sequences for Sports and Activities Emojis\nDESCRIPTION: This code block defines Unicode sequences for various sports and activities emojis, including weightlifting, biking, mountain biking, and cartwheeling. Each emoji is presented with different qualifications (fully-qualified, minimally-qualified, unqualified) and includes variations for skin tones and gender-specific versions.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_29\n\nLANGUAGE: Unicode\nCODE:\n```\n1F3CB 1F3FD 200D 2642                      ; minimally-qualified # 🏋🏽‍♂ man lifting weights: medium skin tone\n1F3CB 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🏋🏾‍♂️ man lifting weights: medium-dark skin tone\n1F3CB 1F3FE 200D 2642                      ; minimally-qualified # 🏋🏾‍♂ man lifting weights: medium-dark skin tone\n1F3CB 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🏋🏿‍♂️ man lifting weights: dark skin tone\n1F3CB 1F3FF 200D 2642                      ; minimally-qualified # 🏋🏿‍♂ man lifting weights: dark skin tone\n1F3CB FE0F 200D 2640 FE0F                  ; fully-qualified     # 🏋️‍♀️ woman lifting weights\n1F3CB 200D 2640 FE0F                       ; unqualified         # 🏋‍♀️ woman lifting weights\n1F3CB FE0F 200D 2640                       ; unqualified         # 🏋️‍♀ woman lifting weights\n1F3CB 200D 2640                            ; unqualified         # 🏋‍♀ woman lifting weights\n1F3CB 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🏋🏻‍♀️ woman lifting weights: light skin tone\n1F3CB 1F3FB 200D 2640                      ; minimally-qualified # 🏋🏻‍♀ woman lifting weights: light skin tone\n1F3CB 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🏋🏼‍♀️ woman lifting weights: medium-light skin tone\n1F3CB 1F3FC 200D 2640                      ; minimally-qualified # 🏋🏼‍♀ woman lifting weights: medium-light skin tone\n1F3CB 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🏋🏽‍♀️ woman lifting weights: medium skin tone\n1F3CB 1F3FD 200D 2640                      ; minimally-qualified # 🏋🏽‍♀ woman lifting weights: medium skin tone\n1F3CB 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🏋🏾‍♀️ woman lifting weights: medium-dark skin tone\n1F3CB 1F3FE 200D 2640                      ; minimally-qualified # 🏋🏾‍♀ woman lifting weights: medium-dark skin tone\n1F3CB 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🏋🏿‍♀️ woman lifting weights: dark skin tone\n1F3CB 1F3FF 200D 2640                      ; minimally-qualified # 🏋🏿‍♀ woman lifting weights: dark skin tone\n1F6B4                                      ; fully-qualified     # 🚴 person biking\n1F6B4 1F3FB                                ; fully-qualified     # 🚴🏻 person biking: light skin tone\n1F6B4 1F3FC                                ; fully-qualified     # 🚴🏼 person biking: medium-light skin tone\n1F6B4 1F3FD                                ; fully-qualified     # 🚴🏽 person biking: medium skin tone\n1F6B4 1F3FE                                ; fully-qualified     # 🚴🏾 person biking: medium-dark skin tone\n1F6B4 1F3FF                                ; fully-qualified     # 🚴🏿 person biking: dark skin tone\n1F6B4 200D 2642 FE0F                       ; fully-qualified     # 🚴‍♂️ man biking\n1F6B4 200D 2642                            ; minimally-qualified # 🚴‍♂ man biking\n1F6B4 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🚴🏻‍♂️ man biking: light skin tone\n1F6B4 1F3FB 200D 2642                      ; minimally-qualified # 🚴🏻‍♂ man biking: light skin tone\n1F6B4 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🚴🏼‍♂️ man biking: medium-light skin tone\n1F6B4 1F3FC 200D 2642                      ; minimally-qualified # 🚴🏼‍♂ man biking: medium-light skin tone\n1F6B4 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🚴🏽‍♂️ man biking: medium skin tone\n1F6B4 1F3FD 200D 2642                      ; minimally-qualified # 🚴🏽‍♂ man biking: medium skin tone\n1F6B4 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🚴🏾‍♂️ man biking: medium-dark skin tone\n1F6B4 1F3FE 200D 2642                      ; minimally-qualified # 🚴🏾‍♂ man biking: medium-dark skin tone\n1F6B4 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🚴🏿‍♂️ man biking: dark skin tone\n1F6B4 1F3FF 200D 2642                      ; minimally-qualified # 🚴🏿‍♂ man biking: dark skin tone\n1F6B4 200D 2640 FE0F                       ; fully-qualified     # 🚴‍♀️ woman biking\n1F6B4 200D 2640                            ; minimally-qualified # 🚴‍♀ woman biking\n1F6B4 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚴🏻‍♀️ woman biking: light skin tone\n1F6B4 1F3FB 200D 2640                      ; minimally-qualified # 🚴🏻‍♀ woman biking: light skin tone\n1F6B4 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚴🏼‍♀️ woman biking: medium-light skin tone\n1F6B4 1F3FC 200D 2640                      ; minimally-qualified # 🚴🏼‍♀ woman biking: medium-light skin tone\n1F6B4 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚴🏽‍♀️ woman biking: medium skin tone\n1F6B4 1F3FD 200D 2640                      ; minimally-qualified # 🚴🏽‍♀ woman biking: medium skin tone\n1F6B4 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚴🏾‍♀️ woman biking: medium-dark skin tone\n1F6B4 1F3FE 200D 2640                      ; minimally-qualified # 🚴🏾‍♀ woman biking: medium-dark skin tone\n1F6B4 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚴🏿‍♀️ woman biking: dark skin tone\n1F6B4 1F3FF 200D 2640                      ; minimally-qualified # 🚴🏿‍♀ woman biking: dark skin tone\n1F6B5                                      ; fully-qualified     # 🚵 person mountain biking\n1F6B5 1F3FB                                ; fully-qualified     # 🚵🏻 person mountain biking: light skin tone\n1F6B5 1F3FC                                ; fully-qualified     # 🚵🏼 person mountain biking: medium-light skin tone\n1F6B5 1F3FD                                ; fully-qualified     # 🚵🏽 person mountain biking: medium skin tone\n1F6B5 1F3FE                                ; fully-qualified     # 🚵🏾 person mountain biking: medium-dark skin tone\n1F6B5 1F3FF                                ; fully-qualified     # 🚵🏿 person mountain biking: dark skin tone\n1F6B5 200D 2642 FE0F                       ; fully-qualified     # 🚵‍♂️ man mountain biking\n1F6B5 200D 2642                            ; minimally-qualified # 🚵‍♂ man mountain biking\n1F6B5 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🚵🏻‍♂️ man mountain biking: light skin tone\n1F6B5 1F3FB 200D 2642                      ; minimally-qualified # 🚵🏻‍♂ man mountain biking: light skin tone\n1F6B5 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🚵🏼‍♂️ man mountain biking: medium-light skin tone\n1F6B5 1F3FC 200D 2642                      ; minimally-qualified # 🚵🏼‍♂ man mountain biking: medium-light skin tone\n1F6B5 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🚵🏽‍♂️ man mountain biking: medium skin tone\n1F6B5 1F3FD 200D 2642                      ; minimally-qualified # 🚵🏽‍♂ man mountain biking: medium skin tone\n1F6B5 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🚵🏾‍♂️ man mountain biking: medium-dark skin tone\n1F6B5 1F3FE 200D 2642                      ; minimally-qualified # 🚵🏾‍♂ man mountain biking: medium-dark skin tone\n1F6B5 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🚵🏿‍♂️ man mountain biking: dark skin tone\n1F6B5 1F3FF 200D 2642                      ; minimally-qualified # 🚵🏿‍♂ man mountain biking: dark skin tone\n1F6B5 200D 2640 FE0F                       ; fully-qualified     # 🚵‍♀️ woman mountain biking\n1F6B5 200D 2640                            ; minimally-qualified # 🚵‍♀ woman mountain biking\n1F6B5 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🚵🏻‍♀️ woman mountain biking: light skin tone\n1F6B5 1F3FB 200D 2640                      ; minimally-qualified # 🚵🏻‍♀ woman mountain biking: light skin tone\n1F6B5 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🚵🏼‍♀️ woman mountain biking: medium-light skin tone\n1F6B5 1F3FC 200D 2640                      ; minimally-qualified # 🚵🏼‍♀ woman mountain biking: medium-light skin tone\n1F6B5 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🚵🏽‍♀️ woman mountain biking: medium skin tone\n1F6B5 1F3FD 200D 2640                      ; minimally-qualified # 🚵🏽‍♀ woman mountain biking: medium skin tone\n1F6B5 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🚵🏾‍♀️ woman mountain biking: medium-dark skin tone\n1F6B5 1F3FE 200D 2640                      ; minimally-qualified # 🚵🏾‍♀ woman mountain biking: medium-dark skin tone\n1F6B5 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🚵🏿‍♀️ woman mountain biking: dark skin tone\n1F6B5 1F3FF 200D 2640                      ; minimally-qualified # 🚵🏿‍♀ woman mountain biking: dark skin tone\n1F938                                      ; fully-qualified     # 🤸 person cartwheeling\n1F938 1F3FB                                ; fully-qualified     # 🤸🏻 person cartwheeling: light skin tone\n1F938 1F3FC                                ; fully-qualified     # 🤸🏼 person cartwheeling: medium-light skin tone\n1F938 1F3FD                                ; fully-qualified     # 🤸🏽 person cartwheeling: medium skin tone\n1F938 1F3FE                                ; fully-qualified     # 🤸🏾 person cartwheeling: medium-dark skin tone\n1F938 1F3FF                                ; fully-qualified     # 🤸🏿 person cartwheeling: dark skin tone\n1F938 200D 2642 FE0F                       ; fully-qualified     # 🤸‍♂️ man cartwheeling\n1F938 200D 2642                            ; minimally-qualified # 🤸‍♂ man cartwheeling\n1F938 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🤸🏻‍♂️ man cartwheeling: light skin tone\n1F938 1F3FB 200D 2642                      ; minimally-qualified # 🤸🏻‍♂ man cartwheeling: light skin tone\n1F938 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🤸🏼‍♂️ man cartwheeling: medium-light skin tone\n1F938 1F3FC 200D 2642                      ; minimally-qualified # 🤸🏼‍♂ man cartwheeling: medium-light skin tone\n1F938 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤸🏽‍♂️ man cartwheeling: medium skin tone\n```\n\n----------------------------------------\n\nTITLE: Setting an external helper for password management in ssh-agent\nDESCRIPTION: Configure an external helper program to ask for SSH passwords and possibly store them in the system keychain.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent helper ksshaskpass\n```\n\n----------------------------------------\n\nTITLE: Setting up fpath for zsh completion\nDESCRIPTION: Configuration line to add to .zshrc for enabling zsh-completion features when not using oh-my-zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_12\n\nLANGUAGE: zsh\nCODE:\n```\nfpath=(~/path/to/wd $fpath)\n```\n\n----------------------------------------\n\nTITLE: Defining Face-Negative Emojis (Unicode)\nDESCRIPTION: Lists Unicode code points, qualification status, and descriptions for emojis categorized under 'face-negative'. Includes emojis like 'pouting face', 'angry face', 'skull', and variants like 'skull and crossbones'. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n# subgroup: face-negative\n1F624                                      ; fully-qualified     # 😤 face with steam from nose\n1F621                                      ; fully-qualified     # 😡 pouting face\n1F620                                      ; fully-qualified     # 😠 angry face\n1F92C                                      ; fully-qualified     # 🤬 face with symbols on mouth\n1F608                                      ; fully-qualified     # 😈 smiling face with horns\n1F47F                                      ; fully-qualified     # 👿 angry face with horns\n1F480                                      ; fully-qualified     # 💀 skull\n2620 FE0F                                  ; fully-qualified     # ☠️ skull and crossbones\n2620                                       ; unqualified         # ☠ skull and crossbones\n```\n\n----------------------------------------\n\nTITLE: Shrink-Path Command Output Examples\nDESCRIPTION: Table showing the results of calling shrink_path with various options on a sample path.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nOption        Result\n<none>        /h/m/f o/ba/q\n-l|--last     /h/m/f o/ba/q\n-s|--short    /h/m/f/b/q\n-t|--tilde    ~/f o/ba/q\n-f|--fish     ~/f/b/quux\n-g|--glob     /h*/m*/f o*/ba*/q*\n-3            /hom/me/f o/bar/quu\n-e '$' -3     /hom$/me/f o$/bar/quu$\n-q            /h/m/f\\ o/ba/q\n-g -q         /h*/m*/f\\ o*/ba*/q*\n-x            /home/me/foo/bar/quux\n```\n\n----------------------------------------\n\nTITLE: Adding TextMate Plugin to Oh My Zsh Configuration\nDESCRIPTION: This snippet shows how to enable the TextMate plugin in your Oh My Zsh configuration by adding it to the plugins array in your zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/textmate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... textmate)\n```\n\n----------------------------------------\n\nTITLE: Directory Stack Output Display\nDESCRIPTION: Example output showing the directory stack structure after navigation commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dirhistory/README.md#2025-04-22_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ dirs -v\n0       /usr/share/doc\n1       /usr/share\n2       /usr\n3       ~\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Sequences for Professional Emoji with Skin Tone Variations\nDESCRIPTION: This snippet defines Unicode sequences for emoji representing various professions (pilots, astronauts, firefighters, police officers, detectives) with different skin tone variations. Each line includes the Unicode sequence, qualification status, and a text description of the emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_20\n\nLANGUAGE: Unicode\nCODE:\n```\n1F468 1F3FE 200D 2708                      ; minimally-qualified # 👨🏾‍✈ man pilot: medium-dark skin tone\n1F468 1F3FF 200D 2708 FE0F                 ; fully-qualified     # 👨🏿‍✈️ man pilot: dark skin tone\n1F468 1F3FF 200D 2708                      ; minimally-qualified # 👨🏿‍✈ man pilot: dark skin tone\n1F469 200D 2708 FE0F                       ; fully-qualified     # 👩‍✈️ woman pilot\n1F469 200D 2708                            ; minimally-qualified # 👩‍✈ woman pilot\n1F469 1F3FB 200D 2708 FE0F                 ; fully-qualified     # 👩🏻‍✈️ woman pilot: light skin tone\n1F469 1F3FB 200D 2708                      ; minimally-qualified # 👩🏻‍✈ woman pilot: light skin tone\n1F469 1F3FC 200D 2708 FE0F                 ; fully-qualified     # 👩🏼‍✈️ woman pilot: medium-light skin tone\n1F469 1F3FC 200D 2708                      ; minimally-qualified # 👩🏼‍✈ woman pilot: medium-light skin tone\n1F469 1F3FD 200D 2708 FE0F                 ; fully-qualified     # 👩🏽‍✈️ woman pilot: medium skin tone\n1F469 1F3FD 200D 2708                      ; minimally-qualified # 👩🏽‍✈ woman pilot: medium skin tone\n1F469 1F3FE 200D 2708 FE0F                 ; fully-qualified     # 👩🏾‍✈️ woman pilot: medium-dark skin tone\n1F469 1F3FE 200D 2708                      ; minimally-qualified # 👩🏾‍✈ woman pilot: medium-dark skin tone\n1F469 1F3FF 200D 2708 FE0F                 ; fully-qualified     # 👩🏿‍✈️ woman pilot: dark skin tone\n1F469 1F3FF 200D 2708                      ; minimally-qualified # 👩🏿‍✈ woman pilot: dark skin tone\n1F468 200D 1F680                           ; fully-qualified     # 👨‍🚀 man astronaut\n1F468 1F3FB 200D 1F680                     ; fully-qualified     # 👨🏻‍🚀 man astronaut: light skin tone\n1F468 1F3FC 200D 1F680                     ; fully-qualified     # 👨🏼‍🚀 man astronaut: medium-light skin tone\n1F468 1F3FD 200D 1F680                     ; fully-qualified     # 👨🏽‍🚀 man astronaut: medium skin tone\n1F468 1F3FE 200D 1F680                     ; fully-qualified     # 👨🏾‍🚀 man astronaut: medium-dark skin tone\n1F468 1F3FF 200D 1F680                     ; fully-qualified     # 👨🏿‍🚀 man astronaut: dark skin tone\n1F469 200D 1F680                           ; fully-qualified     # 👩‍🚀 woman astronaut\n1F469 1F3FB 200D 1F680                     ; fully-qualified     # 👩🏻‍🚀 woman astronaut: light skin tone\n1F469 1F3FC 200D 1F680                     ; fully-qualified     # 👩🏼‍🚀 woman astronaut: medium-light skin tone\n1F469 1F3FD 200D 1F680                     ; fully-qualified     # 👩🏽‍🚀 woman astronaut: medium skin tone\n1F469 1F3FE 200D 1F680                     ; fully-qualified     # 👩🏾‍🚀 woman astronaut: medium-dark skin tone\n1F469 1F3FF 200D 1F680                     ; fully-qualified     # 👩🏿‍🚀 woman astronaut: dark skin tone\n1F468 200D 1F692                           ; fully-qualified     # 👨‍🚒 man firefighter\n1F468 1F3FB 200D 1F692                     ; fully-qualified     # 👨🏻‍🚒 man firefighter: light skin tone\n1F468 1F3FC 200D 1F692                     ; fully-qualified     # 👨🏼‍🚒 man firefighter: medium-light skin tone\n1F468 1F3FD 200D 1F692                     ; fully-qualified     # 👨🏽‍🚒 man firefighter: medium skin tone\n1F468 1F3FE 200D 1F692                     ; fully-qualified     # 👨🏾‍🚒 man firefighter: medium-dark skin tone\n1F468 1F3FF 200D 1F692                     ; fully-qualified     # 👨🏿‍🚒 man firefighter: dark skin tone\n1F469 200D 1F692                           ; fully-qualified     # 👩‍🚒 woman firefighter\n1F469 1F3FB 200D 1F692                     ; fully-qualified     # 👩🏻‍🚒 woman firefighter: light skin tone\n1F469 1F3FC 200D 1F692                     ; fully-qualified     # 👩🏼‍🚒 woman firefighter: medium-light skin tone\n1F469 1F3FD 200D 1F692                     ; fully-qualified     # 👩🏽‍🚒 woman firefighter: medium skin tone\n1F469 1F3FE 200D 1F692                     ; fully-qualified     # 👩🏾‍🚒 woman firefighter: medium-dark skin tone\n1F469 1F3FF 200D 1F692                     ; fully-qualified     # 👩🏿‍🚒 woman firefighter: dark skin tone\n1F46E                                      ; fully-qualified     # 👮 police officer\n1F46E 1F3FB                                ; fully-qualified     # 👮🏻 police officer: light skin tone\n1F46E 1F3FC                                ; fully-qualified     # 👮🏼 police officer: medium-light skin tone\n1F46E 1F3FD                                ; fully-qualified     # 👮🏽 police officer: medium skin tone\n1F46E 1F3FE                                ; fully-qualified     # 👮🏾 police officer: medium-dark skin tone\n1F46E 1F3FF                                ; fully-qualified     # 👮🏿 police officer: dark skin tone\n1F46E 200D 2642 FE0F                       ; fully-qualified     # 👮‍♂️ man police officer\n1F46E 200D 2642                            ; minimally-qualified # 👮‍♂ man police officer\n1F46E 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 👮🏻‍♂️ man police officer: light skin tone\n1F46E 1F3FB 200D 2642                      ; minimally-qualified # 👮🏻‍♂ man police officer: light skin tone\n1F46E 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 👮🏼‍♂️ man police officer: medium-light skin tone\n1F46E 1F3FC 200D 2642                      ; minimally-qualified # 👮🏼‍♂ man police officer: medium-light skin tone\n1F46E 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 👮🏽‍♂️ man police officer: medium skin tone\n1F46E 1F3FD 200D 2642                      ; minimally-qualified # 👮🏽‍♂ man police officer: medium skin tone\n1F46E 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 👮🏾‍♂️ man police officer: medium-dark skin tone\n1F46E 1F3FE 200D 2642                      ; minimally-qualified # 👮🏾‍♂ man police officer: medium-dark skin tone\n1F46E 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 👮🏿‍♂️ man police officer: dark skin tone\n1F46E 1F3FF 200D 2642                      ; minimally-qualified # 👮🏿‍♂ man police officer: dark skin tone\n1F46E 200D 2640 FE0F                       ; fully-qualified     # 👮‍♀️ woman police officer\n1F46E 200D 2640                            ; minimally-qualified # 👮‍♀ woman police officer\n1F46E 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 👮🏻‍♀️ woman police officer: light skin tone\n1F46E 1F3FB 200D 2640                      ; minimally-qualified # 👮🏻‍♀ woman police officer: light skin tone\n1F46E 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 👮🏼‍♀️ woman police officer: medium-light skin tone\n1F46E 1F3FC 200D 2640                      ; minimally-qualified # 👮🏼‍♀ woman police officer: medium-light skin tone\n1F46E 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 👮🏽‍♀️ woman police officer: medium skin tone\n1F46E 1F3FD 200D 2640                      ; minimally-qualified # 👮🏽‍♀ woman police officer: medium skin tone\n1F46E 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 👮🏾‍♀️ woman police officer: medium-dark skin tone\n1F46E 1F3FE 200D 2640                      ; minimally-qualified # 👮🏾‍♀ woman police officer: medium-dark skin tone\n1F46E 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 👮🏿‍♀️ woman police officer: dark skin tone\n1F46E 1F3FF 200D 2640                      ; minimally-qualified # 👮🏿‍♀ woman police officer: dark skin tone\n1F575 FE0F                                 ; fully-qualified     # 🕵️ detective\n1F575                                      ; unqualified         # 🕵 detective\n1F575 1F3FB                                ; fully-qualified     # 🕵🏻 detective: light skin tone\n1F575 1F3FC                                ; fully-qualified     # 🕵🏼 detective: medium-light skin tone\n1F575 1F3FD                                ; fully-qualified     # 🕵🏽 detective: medium skin tone\n1F575 1F3FE                                ; fully-qualified     # 🕵🏾 detective: medium-dark skin tone\n1F575 1F3FF                                ; fully-qualified     # 🕵🏿 detective: dark skin tone\n1F575 FE0F 200D 2642 FE0F                  ; fully-qualified     # 🕵️‍♂️ man detective\n1F575 200D 2642 FE0F                       ; unqualified         # 🕵‍♂️ man detective\n1F575 FE0F 200D 2642                       ; unqualified         # 🕵️‍♂ man detective\n1F575 200D 2642                            ; unqualified         # 🕵‍♂ man detective\n1F575 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🕵🏻‍♂️ man detective: light skin tone\n1F575 1F3FB 200D 2642                      ; minimally-qualified # 🕵🏻‍♂ man detective: light skin tone\n1F575 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🕵🏼‍♂️ man detective: medium-light skin tone\n1F575 1F3FC 200D 2642                      ; minimally-qualified # 🕵🏼‍♂ man detective: medium-light skin tone\n1F575 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🕵🏽‍♂️ man detective: medium skin tone\n1F575 1F3FD 200D 2642                      ; minimally-qualified # 🕵🏽‍♂ man detective: medium skin tone\n1F575 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🕵🏾‍♂️ man detective: medium-dark skin tone\n1F575 1F3FE 200D 2642                      ; minimally-qualified # 🕵🏾‍♂ man detective: medium-dark skin tone\n1F575 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🕵🏿‍♂️ man detective: dark skin tone\n1F575 1F3FF 200D 2642                      ; minimally-qualified # 🕵🏿‍♂ man detective: dark skin tone\n1F575 FE0F 200D 2640 FE0F                  ; fully-qualified     # 🕵️‍♀️ woman detective\n1F575 200D 2640 FE0F                       ; unqualified         # 🕵‍♀️ woman detective\n1F575 FE0F 200D 2640                       ; unqualified         # 🕵️‍♀ woman detective\n1F575 200D 2640                            ; unqualified         # 🕵‍♀ woman detective\n1F575 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🕵🏻‍♀️ woman detective: light skin tone\n```\n\n----------------------------------------\n\nTITLE: Enabling quiet mode for ssh-agent plugin\nDESCRIPTION: Silence the output of the ssh-agent plugin to prevent console output.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_8\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent quiet yes\n```\n\n----------------------------------------\n\nTITLE: Showing the path of a warp point\nDESCRIPTION: Command to display the full path of the directory associated with the warp point 'foo'.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_24\n\nLANGUAGE: zsh\nCODE:\n```\nwd path foo\n```\n\n----------------------------------------\n\nTITLE: Generating Go Code Documentation Structure with Go Templates\nDESCRIPTION: This Go template (`text/template`) processes a data structure, assumed to be available as `.PDoc`, which contains parsed documentation elements of a Go package (Constants, Variables, Functions, Types). It iterates through these elements, printing their names. For types, it also lists associated methods, functions, constants, and variables. The template includes comments indicating the sections for each element type. It requires the `text/template` package in Go and a data structure matching the expected fields (`.PDoc`, `.Consts`, `.Vars`, `.Funcs`, `.Types`, `.Name`, `.Methods`). The output is a plain text representation of the code elements.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/golang/templates/package.txt#2025-04-22_snippet_0\n\nLANGUAGE: gotemplate\nCODE:\n```\n{{with .PDoc}}{{/*\n\nConstants \n---------------------------------------\n\n*/}}{{with .Consts}}{{range .}}{{range .Names}}{{.}} {{end}}{{end}}{{end}}{{/*\n\nVariables\n---------------------------------------\n\n*/}}{{with .Vars}}{{range .}}{{range .Names}}{{.}} {{end}}{{end}}{{end}}{{/*\n\nFunctions\n---------------------------------------\n\n*/}}{{with .Funcs}}{{range .}}{{ .Name }} {{end}}{{end}}{{/*\n\nTypes\n---------------------------------------\n\n*/}}{{with .Types}}{{range .}}{{ $TypeName := .Name }}{{ $TypeName }} {{/*\n\n*/}}{{range .Methods}}{{ $TypeName }}.{{.Name}} {{end}}{{/*\n\n*/}}{{range .Funcs}}{{.Name}} {{end}}{{/*\n\n*/}}{{range .Consts}}{{range .Names}}{{.}} {{end}}{{end}}{{/*\n\n*/}}{{range .Vars}}{{range .Names}}{{.}} {{end}}{{end}}{{end}}{{end}}{{end}}\n```\n\n----------------------------------------\n\nTITLE: Unescaped Rake Command Example\nDESCRIPTION: Demonstrates how the plugin allows running rake tasks with arguments using unescaped square brackets.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/rake/README.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nrake namespace:task['argument']\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Sequences for Person Emojis with Variations\nDESCRIPTION: This snippet defines Unicode sequences for various person emojis, including different skin tones, genders, and activities. It covers emojis like people in wheelchairs, running, dancing, and in various settings.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_26\n\nLANGUAGE: Unicode\nCODE:\n```\n1F469 1F3FC 200D 1F9BD                     ; fully-qualified     # 👩🏼‍🦽 woman in manual wheelchair: medium-light skin tone\n1F469 1F3FD 200D 1F9BD                     ; fully-qualified     # 👩🏽‍🦽 woman in manual wheelchair: medium skin tone\n1F469 1F3FE 200D 1F9BD                     ; fully-qualified     # 👩🏾‍🦽 woman in manual wheelchair: medium-dark skin tone\n1F469 1F3FF 200D 1F9BD                     ; fully-qualified     # 👩🏿‍🦽 woman in manual wheelchair: dark skin tone\n1F3C3                                      ; fully-qualified     # 🏃 person running\n1F3C3 1F3FB                                ; fully-qualified     # 🏃🏻 person running: light skin tone\n1F3C3 1F3FC                                ; fully-qualified     # 🏃🏼 person running: medium-light skin tone\n1F3C3 1F3FD                                ; fully-qualified     # 🏃🏽 person running: medium skin tone\n1F3C3 1F3FE                                ; fully-qualified     # 🏃🏾 person running: medium-dark skin tone\n1F3C3 1F3FF                                ; fully-qualified     # 🏃🏿 person running: dark skin tone\n1F3C3 200D 2642 FE0F                       ; fully-qualified     # 🏃‍♂️ man running\n1F3C3 200D 2642                            ; minimally-qualified # 🏃‍♂ man running\n1F3C3 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🏃🏻‍♂️ man running: light skin tone\n1F3C3 1F3FB 200D 2642                      ; minimally-qualified # 🏃🏻‍♂ man running: light skin tone\n1F3C3 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🏃🏼‍♂️ man running: medium-light skin tone\n1F3C3 1F3FC 200D 2642                      ; minimally-qualified # 🏃🏼‍♂ man running: medium-light skin tone\n1F3C3 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🏃🏽‍♂️ man running: medium skin tone\n1F3C3 1F3FD 200D 2642                      ; minimally-qualified # 🏃🏽‍♂ man running: medium skin tone\n1F3C3 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🏃🏾‍♂️ man running: medium-dark skin tone\n1F3C3 1F3FE 200D 2642                      ; minimally-qualified # 🏃🏾‍♂ man running: medium-dark skin tone\n1F3C3 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🏃🏿‍♂️ man running: dark skin tone\n1F3C3 1F3FF 200D 2642                      ; minimally-qualified # 🏃🏿‍♂ man running: dark skin tone\n1F3C3 200D 2640 FE0F                       ; fully-qualified     # 🏃‍♀️ woman running\n1F3C3 200D 2640                            ; minimally-qualified # 🏃‍♀ woman running\n1F3C3 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🏃🏻‍♀️ woman running: light skin tone\n1F3C3 1F3FB 200D 2640                      ; minimally-qualified # 🏃🏻‍♀ woman running: light skin tone\n1F3C3 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🏃🏼‍♀️ woman running: medium-light skin tone\n1F3C3 1F3FC 200D 2640                      ; minimally-qualified # 🏃🏼‍♀ woman running: medium-light skin tone\n1F3C3 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🏃🏽‍♀️ woman running: medium skin tone\n1F3C3 1F3FD 200D 2640                      ; minimally-qualified # 🏃🏽‍♀ woman running: medium skin tone\n1F3C3 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🏃🏾‍♀️ woman running: medium-dark skin tone\n1F3C3 1F3FE 200D 2640                      ; minimally-qualified # 🏃🏾‍♀ woman running: medium-dark skin tone\n1F3C3 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🏃🏿‍♀️ woman running: dark skin tone\n1F3C3 1F3FF 200D 2640                      ; minimally-qualified # 🏃🏿‍♀ woman running: dark skin tone\n1F483                                      ; fully-qualified     # 💃 woman dancing\n1F483 1F3FB                                ; fully-qualified     # 💃🏻 woman dancing: light skin tone\n1F483 1F3FC                                ; fully-qualified     # 💃🏼 woman dancing: medium-light skin tone\n1F483 1F3FD                                ; fully-qualified     # 💃🏽 woman dancing: medium skin tone\n1F483 1F3FE                                ; fully-qualified     # 💃🏾 woman dancing: medium-dark skin tone\n1F483 1F3FF                                ; fully-qualified     # 💃🏿 woman dancing: dark skin tone\n1F57A                                      ; fully-qualified     # 🕺 man dancing\n1F57A 1F3FB                                ; fully-qualified     # 🕺🏻 man dancing: light skin tone\n1F57A 1F3FC                                ; fully-qualified     # 🕺🏼 man dancing: medium-light skin tone\n1F57A 1F3FD                                ; fully-qualified     # 🕺🏽 man dancing: medium skin tone\n1F57A 1F3FE                                ; fully-qualified     # 🕺🏾 man dancing: medium-dark skin tone\n1F57A 1F3FF                                ; fully-qualified     # 🕺🏿 man dancing: dark skin tone\n1F574 FE0F                                 ; fully-qualified     # 🕴️ man in suit levitating\n1F574                                      ; unqualified         # 🕴 man in suit levitating\n1F574 1F3FB                                ; fully-qualified     # 🕴🏻 man in suit levitating: light skin tone\n1F574 1F3FC                                ; fully-qualified     # 🕴🏼 man in suit levitating: medium-light skin tone\n1F574 1F3FD                                ; fully-qualified     # 🕴🏽 man in suit levitating: medium skin tone\n1F574 1F3FE                                ; fully-qualified     # 🕴🏾 man in suit levitating: medium-dark skin tone\n1F574 1F3FF                                ; fully-qualified     # 🕴🏿 man in suit levitating: dark skin tone\n1F46F                                      ; fully-qualified     # 👯 people with bunny ears\n1F46F 200D 2642 FE0F                       ; fully-qualified     # 👯‍♂️ men with bunny ears\n1F46F 200D 2642                            ; minimally-qualified # 👯‍♂ men with bunny ears\n1F46F 200D 2640 FE0F                       ; fully-qualified     # 👯‍♀️ women with bunny ears\n1F46F 200D 2640                            ; minimally-qualified # 👯‍♀ women with bunny ears\n1F9D6                                      ; fully-qualified     # 🧖 person in steamy room\n1F9D6 1F3FB                                ; fully-qualified     # 🧖🏻 person in steamy room: light skin tone\n1F9D6 1F3FC                                ; fully-qualified     # 🧖🏼 person in steamy room: medium-light skin tone\n1F9D6 1F3FD                                ; fully-qualified     # 🧖🏽 person in steamy room: medium skin tone\n1F9D6 1F3FE                                ; fully-qualified     # 🧖🏾 person in steamy room: medium-dark skin tone\n1F9D6 1F3FF                                ; fully-qualified     # 🧖🏿 person in steamy room: dark skin tone\n1F9D6 200D 2642 FE0F                       ; fully-qualified     # 🧖‍♂️ man in steamy room\n1F9D6 200D 2642                            ; minimally-qualified # 🧖‍♂ man in steamy room\n1F9D6 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧖🏻‍♂️ man in steamy room: light skin tone\n1F9D6 1F3FB 200D 2642                      ; minimally-qualified # 🧖🏻‍♂ man in steamy room: light skin tone\n1F9D6 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧖🏼‍♂️ man in steamy room: medium-light skin tone\n1F9D6 1F3FC 200D 2642                      ; minimally-qualified # 🧖🏼‍♂ man in steamy room: medium-light skin tone\n1F9D6 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧖🏽‍♂️ man in steamy room: medium skin tone\n1F9D6 1F3FD 200D 2642                      ; minimally-qualified # 🧖🏽‍♂ man in steamy room: medium skin tone\n1F9D6 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧖🏾‍♂️ man in steamy room: medium-dark skin tone\n1F9D6 1F3FE 200D 2642                      ; minimally-qualified # 🧖🏾‍♂ man in steamy room: medium-dark skin tone\n1F9D6 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧖🏿‍♂️ man in steamy room: dark skin tone\n1F9D6 1F3FF 200D 2642                      ; minimally-qualified # 🧖🏿‍♂ man in steamy room: dark skin tone\n1F9D6 200D 2640 FE0F                       ; fully-qualified     # 🧖‍♀️ woman in steamy room\n1F9D6 200D 2640                            ; minimally-qualified # 🧖‍♀ woman in steamy room\n1F9D6 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧖🏻‍♀️ woman in steamy room: light skin tone\n1F9D6 1F3FB 200D 2640                      ; minimally-qualified # 🧖🏻‍♀ woman in steamy room: light skin tone\n1F9D6 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧖🏼‍♀️ woman in steamy room: medium-light skin tone\n1F9D6 1F3FC 200D 2640                      ; minimally-qualified # 🧖🏼‍♀ woman in steamy room: medium-light skin tone\n1F9D6 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧖🏽‍♀️ woman in steamy room: medium skin tone\n1F9D6 1F3FD 200D 2640                      ; minimally-qualified # 🧖🏽‍♀ woman in steamy room: medium skin tone\n1F9D6 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧖🏾‍♀️ woman in steamy room: medium-dark skin tone\n1F9D6 1F3FE 200D 2640                      ; minimally-qualified # 🧖🏾‍♀ woman in steamy room: medium-dark skin tone\n1F9D6 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧖🏿‍♀️ woman in steamy room: dark skin tone\n1F9D6 1F3FF 200D 2640                      ; minimally-qualified # 🧖🏿‍♀ woman in steamy room: dark skin tone\n1F9D7                                      ; fully-qualified     # 🧗 person climbing\n1F9D7 1F3FB                                ; fully-qualified     # 🧗🏻 person climbing: light skin tone\n1F9D7 1F3FC                                ; fully-qualified     # 🧗🏼 person climbing: medium-light skin tone\n1F9D7 1F3FD                                ; fully-qualified     # 🧗🏽 person climbing: medium skin tone\n1F9D7 1F3FE                                ; fully-qualified     # 🧗🏾 person climbing: medium-dark skin tone\n1F9D7 1F3FF                                ; fully-qualified     # 🧗🏿 person climbing: dark skin tone\n```\n\n----------------------------------------\n\nTITLE: Enabling agent forwarding support in ssh-agent plugin\nDESCRIPTION: Configure the ssh-agent plugin to enable agent forwarding support. This must be placed before the line that sources oh-my-zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent agent-forwarding yes\n```\n\n----------------------------------------\n\nTITLE: Using the n-list Function in Zsh\nDESCRIPTION: This snippet shows the basic syntax for using the `n-list` function. It takes a list of elements as arguments and presents them in an interactive, selectable list.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nn-list {element1} [element2] ... [elementN]\n```\n\n----------------------------------------\n\nTITLE: Loading Oh-my-zsh Plugin with Zinit - Zsh - Shell\nDESCRIPTION: Demonstrates how to pull and source a specific Oh-my-zsh plugin (git plugin) using Zinit's snippet command in the user's .zshrc file. Requires Zinit installed and configured. The string OMZ::plugins/git/git.plugin.zsh specifies the plugin path, and this snippet must be placed in the user's initialization file for effect. Inputs are plugin references; output is that plugins are sourced at shell startup.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/history-substring-search/README.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nzinit snippet OMZ::plugins/git/git.plugin.zsh`\n```\n\n----------------------------------------\n\nTITLE: Result of Specific Book Name Completion\nDESCRIPTION: Shows the result after tab completion is performed on a more specific partial book name.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_6\n\nLANGUAGE: zsh\nCODE:\n```\n$ dnote v javascript\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Animal Emojis\nDESCRIPTION: This snippet defines Unicode codepoints for emojis representing various animals, primarily mammals. It includes a wide range of animals from primates to farm animals and wild creatures.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_36\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: animal-mammal\n1F435                                      ; fully-qualified     # 🐵 monkey face\n1F412                                      ; fully-qualified     # 🐒 monkey\n1F98D                                      ; fully-qualified     # 🦍 gorilla\n1F9A7                                      ; fully-qualified     # 🦧 orangutan\n1F436                                      ; fully-qualified     # 🐶 dog face\n1F415                                      ; fully-qualified     # 🐕 dog\n1F9AE                                      ; fully-qualified     # 🦮 guide dog\n1F415 200D 1F9BA                           ; fully-qualified     # 🐕‍🦺 service dog\n1F429                                      ; fully-qualified     # 🐩 poodle\n1F43A                                      ; fully-qualified     # 🐺 wolf\n1F98A                                      ; fully-qualified     # 🦊 fox\n1F99D                                      ; fully-qualified     # 🦝 raccoon\n1F431                                      ; fully-qualified     # 🐱 cat face\n1F408                                      ; fully-qualified     # 🐈 cat\n1F981                                      ; fully-qualified     # 🦁 lion\n1F42F                                      ; fully-qualified     # 🐯 tiger face\n1F405                                      ; fully-qualified     # 🐅 tiger\n1F406                                      ; fully-qualified     # 🐆 leopard\n1F434                                      ; fully-qualified     # 🐴 horse face\n1F40E                                      ; fully-qualified     # 🐎 horse\n1F984                                      ; fully-qualified     # 🦄 unicorn\n1F993                                      ; fully-qualified     # 🦓 zebra\n1F98C                                      ; fully-qualified     # 🦌 deer\n1F42E                                      ; fully-qualified     # 🐮 cow face\n1F402                                      ; fully-qualified     # 🐂 ox\n1F403                                      ; fully-qualified     # 🐃 water buffalo\n1F404                                      ; fully-qualified     # 🐄 cow\n1F437                                      ; fully-qualified     # 🐷 pig face\n1F416                                      ; fully-qualified     # 🐖 pig\n1F417                                      ; fully-qualified     # 🐗 boar\n1F43D                                      ; fully-qualified     # 🐽 pig nose\n1F40F                                      ; fully-qualified     # 🐏 ram\n1F411                                      ; fully-qualified     # 🐑 ewe\n1F410                                      ; fully-qualified     # 🐐 goat\n1F42A                                      ; fully-qualified     # 🐪 camel\n1F42B                                      ; fully-qualified     # 🐫 two-hump camel\n1F999                                      ; fully-qualified     # 🦙 llama\n1F992                                      ; fully-qualified     # 🦒 giraffe\n1F418                                      ; fully-qualified     # 🐘 elephant\n1F98F                                      ; fully-qualified     # 🦏 rhinoceros\n1F99B                                      ; fully-qualified     # 🦛 hippopotamus\n1F42D                                      ; fully-qualified     # 🐭 mouse face\n1F401                                      ; fully-qualified     # 🐁 mouse\n1F400                                      ; fully-qualified     # 🐀 rat\n1F439                                      ; fully-qualified     # 🐹 hamster\n1F430                                      ; fully-qualified     # 🐰 rabbit face\n1F407                                      ; fully-qualified     # 🐇 rabbit\n1F43F FE0F                                 ; fully-qualified     # 🐿️ chipmunk\n1F43F                                      ; unqualified         # 🐿 chipmunk\n1F994                                      ; fully-qualified     # 🦔 hedgehog\n1F987                                      ; fully-qualified     # 🦇 bat\n1F43B                                      ; fully-qualified     # 🐻 bear\n1F428                                      ; fully-qualified     # 🐨 koala\n1F43C                                      ; fully-qualified     # 🐼 panda\n1F9A5                                      ; fully-qualified     # 🦥 sloth\n1F9A6                                      ; fully-qualified     # 🦦 otter\n1F9A8                                      ; fully-qualified     # 🦨 skunk\n1F998                                      ; fully-qualified     # 🦘 kangaroo\n1F9A1                                      ; fully-qualified     # 🦡 badger\n1F43E                                      ; fully-qualified     # 🐾 paw prints\n```\n\n----------------------------------------\n\nTITLE: Loading SSH identities from custom paths\nDESCRIPTION: Specify absolute paths to SSH identities located outside the default ~/.ssh directory.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/ssh-agent/README.md#2025-04-22_snippet_4\n\nLANGUAGE: zsh\nCODE:\n```\nzstyle :omz:plugins:ssh-agent identities ~/.config/ssh/id_rsa ~/.config/ssh/id_rsa2 ~/.config/ssh/id_github\n```\n\n----------------------------------------\n\nTITLE: Defining Non-Selectable Entries for n-list in Zsh\nDESCRIPTION: This Zsh code demonstrates how to make specific entries in the `n-list` display non-selectable. It involves declaring an array `NLIST_NONSELECTABLE_ELEMENTS` and populating it with the 1-based indices of the entries to disable selection for.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\ntypeset -a NLIST_NONSELECTABLE_ELEMENTS\nNLIST_NONSELECTABLE_ELEMENTS=( 1 )\n```\n\n----------------------------------------\n\nTITLE: Integrating Paver Completion in Zsh\nDESCRIPTION: This snippet shows how to add the Paver plugin to the Zsh configuration to enable task completion for the Paver command-line tool. It requires Oh My Zsh to be installed. Users should add 'paver' to their plugins array in the zshrc file. The configuration supports automatic caching of Paver tasks and updates them when the 'pavement.py' file changes.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/paver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... paver)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Basic Dnote Command Completion\nDESCRIPTION: Shows how tab completion works for Dnote commands, completing 'a' to 'add' when tab is pressed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/dnote/README.md#2025-04-22_snippet_1\n\nLANGUAGE: zsh\nCODE:\n```\n$ dnote a(press <TAB> here)\n```\n\n----------------------------------------\n\nTITLE: Defining Monkey-Face Emojis (Unicode)\nDESCRIPTION: Lists Unicode code points, qualification status, and descriptions for the three 'wise monkey' emojis categorized under 'monkey-face': see-no-evil, hear-no-evil, and speak-no-evil. Each line follows the format: <Unicode sequence> ; <qualification> # <description>.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\n# subgroup: monkey-face\n1F648                                      ; fully-qualified     # 🙈 see-no-evil monkey\n1F649                                      ; fully-qualified     # 🙉 hear-no-evil monkey\n1F64A                                      ; fully-qualified     # 🙊 speak-no-evil monkey\n```\n\n----------------------------------------\n\nTITLE: Unicode Emoji Code Point Definitions for Shrugging Gestures\nDESCRIPTION: Defines the Unicode code point sequences for shrugging emoji with gender and skin tone modifiers. Each line contains the hex code points, qualification status, and the resulting emoji with description.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_18\n\nLANGUAGE: unicode\nCODE:\n```\n1F937 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🤷🏽‍♂️ man shrugging: medium skin tone\n1F937 1F3FD 200D 2642                      ; minimally-qualified # 🤷🏽‍♂ man shrugging: medium skin tone\n1F937 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🤷🏾‍♂️ man shrugging: medium-dark skin tone\n1F937 1F3FE 200D 2642                      ; minimally-qualified # 🤷🏾‍♂ man shrugging: medium-dark skin tone\n1F937 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🤷🏿‍♂️ man shrugging: dark skin tone\n1F937 1F3FF 200D 2642                      ; minimally-qualified # 🤷🏿‍♂ man shrugging: dark skin tone\n1F937 200D 2640 FE0F                       ; fully-qualified     # 🤷‍♀️ woman shrugging\n1F937 200D 2640                            ; minimally-qualified # 🤷‍♀ woman shrugging\n1F937 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🤷🏻‍♀️ woman shrugging: light skin tone\n1F937 1F3FB 200D 2640                      ; minimally-qualified # 🤷🏻‍♀ woman shrugging: light skin tone\n1F937 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🤷🏼‍♀️ woman shrugging: medium-light skin tone\n1F937 1F3FC 200D 2640                      ; minimally-qualified # 🤷🏼‍♀ woman shrugging: medium-light skin tone\n1F937 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🤷🏽‍♀️ woman shrugging: medium skin tone\n1F937 1F3FD 200D 2640                      ; minimally-qualified # 🤷🏽‍♀ woman shrugging: medium skin tone\n1F937 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🤷🏾‍♀️ woman shrugging: medium-dark skin tone\n1F937 1F3FE 200D 2640                      ; minimally-qualified # 🤷🏾‍♀ woman shrugging: medium-dark skin tone\n1F937 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🤷🏿‍♀️ woman shrugging: dark skin tone\n1F937 1F3FF 200D 2640                      ; minimally-qualified # 🤷🏿‍♀ woman shrugging: dark skin tone\n```\n\n----------------------------------------\n\nTITLE: Colorizing n-list Output Using Zsh Patterns\nDESCRIPTION: This Zsh snippet demonstrates how to automatically colorize parts of the `n-list` entries based on Zsh patterns. It sets variables like `NLIST_COLORING_PATTERN` (for the pattern), `NLIST_COLORING_COLOR` (start ANSI code), `NLIST_COLORING_END_COLOR` (end ANSI code), and `NLIST_COLORING_MATCH_MULTIPLE` before calling `n-list`. This example colors numbers blue.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/zsh-navigation-tools/README.md#2025-04-22_snippet_7\n\nLANGUAGE: zsh\nCODE:\n```\nlocal NLIST_COLORING_PATTERN=\"[0-9]##\"\nlocal NLIST_COLORING_COLOR=$'\\x1b[00;34m'\nlocal NLIST_COLORING_END_COLOR=$'\\x1b[0m'\nlocal NLIST_COLORING_MATCH_MULTIPLE=1\n\nn-list \"This is a number 123\" \"This line too has a number: 456\"\n```\n\n----------------------------------------\n\nTITLE: Toggling Path Shrinking with Zstyle\nDESCRIPTION: Commands to toggle path shrinking on and off using zstyle configuration.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/shrink-path/README.md#2025-04-22_snippet_5\n\nLANGUAGE: zsh\nCODE:\n```\n# Toggle off path shrinking\nzstyle ':prompt:shrink_path' expand true\n# Toggle on path shrinking\nzstyle -d ':prompt:shrink_path' expand\n```\n\n----------------------------------------\n\nTITLE: Defining Zodiac Emoji Unicode Characters\nDESCRIPTION: This snippet defines Unicode characters for zodiac sign emojis. All characters in this subgroup are fully-qualified and represent the twelve zodiac signs plus Ophiuchus.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_53\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: zodiac\n2648                                       ; fully-qualified     # ♈ Aries\n2649                                       ; fully-qualified     # ♉ Taurus\n264A                                       ; fully-qualified     # ♊ Gemini\n264B                                       ; fully-qualified     # ♋ Cancer\n264C                                       ; fully-qualified     # ♌ Leo\n264D                                       ; fully-qualified     # ♍ Virgo\n264E                                       ; fully-qualified     # ♎ Libra\n264F                                       ; fully-qualified     # ♏ Scorpio\n2650                                       ; fully-qualified     # ♐ Sagittarius\n2651                                       ; fully-qualified     # ♑ Capricorn\n2652                                       ; fully-qualified     # ♒ Aquarius\n2653                                       ; fully-qualified     # ♓ Pisces\n26CE                                       ; fully-qualified     # ⛎ Ophiuchus\n```\n\n----------------------------------------\n\nTITLE: Installing wd using Antibody\nDESCRIPTION: Configuration code to install the wd plugin using the Antibody plugin manager for zsh in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_2\n\nLANGUAGE: zsh\nCODE:\n```\nantibody bundle mfaerevaag/wd\n```\n\n----------------------------------------\n\nTITLE: Unicode Mapping for Religious Place Emoji\nDESCRIPTION: Defines Unicode values for religious building emoji including churches, mosques, temples, and shrines. Contains both fully-qualified and unqualified versions for specific emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_38\n\nLANGUAGE: txt\nCODE:\n```\n26EA                                       ; fully-qualified     # ⛪ church\n1F54C                                      ; fully-qualified     # 🕌 mosque\n1F6D5                                      ; fully-qualified     # 🛕 hindu temple\n```\n\n----------------------------------------\n\nTITLE: Configuring Nanoc Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: This snippet demonstrates how to add the Nanoc plugin to the list of enabled plugins in your .zshrc file by including \\\"nanoc\\\" within the plugins array. No external dependencies are required aside from Oh My Zsh and the Nanoc plugin itself. The key parameter is the plugin name, which must be added to activate command aliases and autocompletion for Nanoc tasks. The expected result is enhanced shell functionality related to Nanoc sites. Be sure Oh My Zsh and the Nanoc plugin are installed in your environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nanoc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... nanoc)\n```\n\n----------------------------------------\n\nTITLE: Enabling the nodenv Plugin in Oh My Zsh (Zsh)\nDESCRIPTION: Shows how to add the `nodenv` plugin to the `plugins` array within the user's `.zshrc` file. This step activates the nodenv plugin, making its functions available in the Zsh session. Requires Oh My Zsh to be installed.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/nodenv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... nodenv)\n```\n\n----------------------------------------\n\nTITLE: Defining Gender Emoji Unicode Characters\nDESCRIPTION: This snippet defines Unicode characters for gender symbols. It includes both fully-qualified and unqualified versions of the female and male signs.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_55\n\nLANGUAGE: Unicode\nCODE:\n```\n# subgroup: gender\n2640 FE0F                                  ; fully-qualified     # ♀️ female sign\n2640                                       ; unqualified         # ♀ female sign\n2642 FE0F                                  ; fully-qualified     # ♂️ male sign\n2642                                       ; unqualified         # ♂ male sign\n```\n\n----------------------------------------\n\nTITLE: Running wd tests\nDESCRIPTION: Commands to navigate to the test directory and run the tests script to verify wd functionality using shunit2.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/wd/README.md#2025-04-22_snippet_31\n\nLANGUAGE: zsh\nCODE:\n```\ncd ./test\n./tests.sh\n```\n\n----------------------------------------\n\nTITLE: Flag Symbols Unicode Mapping\nDESCRIPTION: Unicode mappings for flag-related emoji including standard flags, pride flags, and specialized flag variants.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_60\n\nLANGUAGE: plaintext\nCODE:\n```\n1F3C1                                      ; fully-qualified     # 🏁 chequered flag\n1F6A9                                      ; fully-qualified     # 🚩 triangular flag\n1F38C                                      ; fully-qualified     # 🎌 crossed flags\n```\n\n----------------------------------------\n\nTITLE: Enabling Cask Plugin in Oh My Zsh Configuration\nDESCRIPTION: This code snippet shows how to enable the Cask plugin in the Oh My Zsh configuration. It demonstrates adding 'cask' to the plugins array in the .zshrc file.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/cask/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... cask)\n```\n\n----------------------------------------\n\nTITLE: Initializing Knative CLI Plugin in Zsh\nDESCRIPTION: This snippet demonstrates how to enable the Knative CLI plugin for autocompletion in Oh My Zsh. Dependencies include Oh My Zsh and the knative client. To use the plugin, add 'kn' to your zshrc file's plugins array. This setup enhances the command-line experience by providing autocompletions for kn commands.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/kn/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... kn)\n```\n\n----------------------------------------\n\nTITLE: Listing Fantasy Character Emoji Unicode Codepoints with Variations\nDESCRIPTION: This code snippet contains Unicode codepoint sequences for various fantasy character emojis including mages, fairies, vampires, and merpeople. Each line provides the hexadecimal Unicode sequence, qualification status, and the resulting emoji with its description including gender and skin tone variants.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_23\n\nLANGUAGE: Unicode\nCODE:\n```\n1F9D9 200D 2640                            ; minimally-qualified # 🧙‍♀ woman mage\n1F9D9 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧙🏻‍♀️ woman mage: light skin tone\n1F9D9 1F3FB 200D 2640                      ; minimally-qualified # 🧙🏻‍♀ woman mage: light skin tone\n1F9D9 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧙🏼‍♀️ woman mage: medium-light skin tone\n1F9D9 1F3FC 200D 2640                      ; minimally-qualified # 🧙🏼‍♀ woman mage: medium-light skin tone\n1F9D9 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧙🏽‍♀️ woman mage: medium skin tone\n1F9D9 1F3FD 200D 2640                      ; minimally-qualified # 🧙🏽‍♀ woman mage: medium skin tone\n1F9D9 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧙🏾‍♀️ woman mage: medium-dark skin tone\n1F9D9 1F3FE 200D 2640                      ; minimally-qualified # 🧙🏾‍♀ woman mage: medium-dark skin tone\n1F9D9 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧙🏿‍♀️ woman mage: dark skin tone\n1F9D9 1F3FF 200D 2640                      ; minimally-qualified # 🧙🏿‍♀ woman mage: dark skin tone\n1F9DA                                      ; fully-qualified     # 🧚 fairy\n1F9DA 1F3FB                                ; fully-qualified     # 🧚🏻 fairy: light skin tone\n1F9DA 1F3FC                                ; fully-qualified     # 🧚🏼 fairy: medium-light skin tone\n1F9DA 1F3FD                                ; fully-qualified     # 🧚🏽 fairy: medium skin tone\n1F9DA 1F3FE                                ; fully-qualified     # 🧚🏾 fairy: medium-dark skin tone\n1F9DA 1F3FF                                ; fully-qualified     # 🧚🏿 fairy: dark skin tone\n1F9DA 200D 2642 FE0F                       ; fully-qualified     # 🧚‍♂️ man fairy\n1F9DA 200D 2642                            ; minimally-qualified # 🧚‍♂ man fairy\n1F9DA 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧚🏻‍♂️ man fairy: light skin tone\n1F9DA 1F3FB 200D 2642                      ; minimally-qualified # 🧚🏻‍♂ man fairy: light skin tone\n1F9DA 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧚🏼‍♂️ man fairy: medium-light skin tone\n1F9DA 1F3FC 200D 2642                      ; minimally-qualified # 🧚🏼‍♂ man fairy: medium-light skin tone\n1F9DA 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧚🏽‍♂️ man fairy: medium skin tone\n1F9DA 1F3FD 200D 2642                      ; minimally-qualified # 🧚🏽‍♂ man fairy: medium skin tone\n1F9DA 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧚🏾‍♂️ man fairy: medium-dark skin tone\n1F9DA 1F3FE 200D 2642                      ; minimally-qualified # 🧚🏾‍♂ man fairy: medium-dark skin tone\n1F9DA 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧚🏿‍♂️ man fairy: dark skin tone\n1F9DA 1F3FF 200D 2642                      ; minimally-qualified # 🧚🏿‍♂ man fairy: dark skin tone\n1F9DA 200D 2640 FE0F                       ; fully-qualified     # 🧚‍♀️ woman fairy\n1F9DA 200D 2640                            ; minimally-qualified # 🧚‍♀ woman fairy\n1F9DA 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧚🏻‍♀️ woman fairy: light skin tone\n1F9DA 1F3FB 200D 2640                      ; minimally-qualified # 🧚🏻‍♀ woman fairy: light skin tone\n1F9DA 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧚🏼‍♀️ woman fairy: medium-light skin tone\n1F9DA 1F3FC 200D 2640                      ; minimally-qualified # 🧚🏼‍♀ woman fairy: medium-light skin tone\n1F9DA 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧚🏽‍♀️ woman fairy: medium skin tone\n1F9DA 1F3FD 200D 2640                      ; minimally-qualified # 🧚🏽‍♀ woman fairy: medium skin tone\n1F9DA 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧚🏾‍♀️ woman fairy: medium-dark skin tone\n1F9DA 1F3FE 200D 2640                      ; minimally-qualified # 🧚🏾‍♀ woman fairy: medium-dark skin tone\n1F9DA 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧚🏿‍♀️ woman fairy: dark skin tone\n1F9DA 1F3FF 200D 2640                      ; minimally-qualified # 🧚🏿‍♀ woman fairy: dark skin tone\n1F9DB                                      ; fully-qualified     # 🧛 vampire\n1F9DB 1F3FB                                ; fully-qualified     # 🧛🏻 vampire: light skin tone\n1F9DB 1F3FC                                ; fully-qualified     # 🧛🏼 vampire: medium-light skin tone\n1F9DB 1F3FD                                ; fully-qualified     # 🧛🏽 vampire: medium skin tone\n1F9DB 1F3FE                                ; fully-qualified     # 🧛🏾 vampire: medium-dark skin tone\n1F9DB 1F3FF                                ; fully-qualified     # 🧛🏿 vampire: dark skin tone\n1F9DB 200D 2642 FE0F                       ; fully-qualified     # 🧛‍♂️ man vampire\n1F9DB 200D 2642                            ; minimally-qualified # 🧛‍♂ man vampire\n1F9DB 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧛🏻‍♂️ man vampire: light skin tone\n1F9DB 1F3FB 200D 2642                      ; minimally-qualified # 🧛🏻‍♂ man vampire: light skin tone\n1F9DB 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧛🏼‍♂️ man vampire: medium-light skin tone\n1F9DB 1F3FC 200D 2642                      ; minimally-qualified # 🧛🏼‍♂ man vampire: medium-light skin tone\n1F9DB 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧛🏽‍♂️ man vampire: medium skin tone\n1F9DB 1F3FD 200D 2642                      ; minimally-qualified # 🧛🏽‍♂ man vampire: medium skin tone\n1F9DB 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧛🏾‍♂️ man vampire: medium-dark skin tone\n1F9DB 1F3FE 200D 2642                      ; minimally-qualified # 🧛🏾‍♂ man vampire: medium-dark skin tone\n1F9DB 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧛🏿‍♂️ man vampire: dark skin tone\n1F9DB 1F3FF 200D 2642                      ; minimally-qualified # 🧛🏿‍♂ man vampire: dark skin tone\n1F9DB 200D 2640 FE0F                       ; fully-qualified     # 🧛‍♀️ woman vampire\n1F9DB 200D 2640                            ; minimally-qualified # 🧛‍♀ woman vampire\n1F9DB 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧛🏻‍♀️ woman vampire: light skin tone\n1F9DB 1F3FB 200D 2640                      ; minimally-qualified # 🧛🏻‍♀ woman vampire: light skin tone\n1F9DB 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧛🏼‍♀️ woman vampire: medium-light skin tone\n1F9DB 1F3FC 200D 2640                      ; minimally-qualified # 🧛🏼‍♀ woman vampire: medium-light skin tone\n1F9DB 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧛🏽‍♀️ woman vampire: medium skin tone\n1F9DB 1F3FD 200D 2640                      ; minimally-qualified # 🧛🏽‍♀ woman vampire: medium skin tone\n1F9DB 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧛🏾‍♀️ woman vampire: medium-dark skin tone\n1F9DB 1F3FE 200D 2640                      ; minimally-qualified # 🧛🏾‍♀ woman vampire: medium-dark skin tone\n1F9DB 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🧛🏿‍♀️ woman vampire: dark skin tone\n1F9DB 1F3FF 200D 2640                      ; minimally-qualified # 🧛🏿‍♀ woman vampire: dark skin tone\n1F9DC                                      ; fully-qualified     # 🧜 merperson\n1F9DC 1F3FB                                ; fully-qualified     # 🧜🏻 merperson: light skin tone\n1F9DC 1F3FC                                ; fully-qualified     # 🧜🏼 merperson: medium-light skin tone\n1F9DC 1F3FD                                ; fully-qualified     # 🧜🏽 merperson: medium skin tone\n1F9DC 1F3FE                                ; fully-qualified     # 🧜🏾 merperson: medium-dark skin tone\n1F9DC 1F3FF                                ; fully-qualified     # 🧜🏿 merperson: dark skin tone\n1F9DC 200D 2642 FE0F                       ; fully-qualified     # 🧜‍♂️ merman\n1F9DC 200D 2642                            ; minimally-qualified # 🧜‍♂ merman\n1F9DC 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧜🏻‍♂️ merman: light skin tone\n1F9DC 1F3FB 200D 2642                      ; minimally-qualified # 🧜🏻‍♂ merman: light skin tone\n1F9DC 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧜🏼‍♂️ merman: medium-light skin tone\n1F9DC 1F3FC 200D 2642                      ; minimally-qualified # 🧜🏼‍♂ merman: medium-light skin tone\n1F9DC 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧜🏽‍♂️ merman: medium skin tone\n1F9DC 1F3FD 200D 2642                      ; minimally-qualified # 🧜🏽‍♂ merman: medium skin tone\n1F9DC 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧜🏾‍♂️ merman: medium-dark skin tone\n1F9DC 1F3FE 200D 2642                      ; minimally-qualified # 🧜🏾‍♂ merman: medium-dark skin tone\n1F9DC 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧜🏿‍♂️ merman: dark skin tone\n1F9DC 1F3FF 200D 2642                      ; minimally-qualified # 🧜🏿‍♂ merman: dark skin tone\n1F9DC 200D 2640 FE0F                       ; fully-qualified     # 🧜‍♀️ mermaid\n1F9DC 200D 2640                            ; minimally-qualified # 🧜‍♀ mermaid\n1F9DC 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🧜🏻‍♀️ mermaid: light skin tone\n1F9DC 1F3FB 200D 2640                      ; minimally-qualified # 🧜🏻‍♀ mermaid: light skin tone\n1F9DC 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🧜🏼‍♀️ mermaid: medium-light skin tone\n1F9DC 1F3FC 200D 2640                      ; minimally-qualified # 🧜🏼‍♀ mermaid: medium-light skin tone\n1F9DC 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🧜🏽‍♀️ mermaid: medium skin tone\n1F9DC 1F3FD 200D 2640                      ; minimally-qualified # 🧜🏽‍♀ mermaid: medium skin tone\n1F9DC 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🧜🏾‍♀️ mermaid: medium-dark skin tone\n1F9DC 1F3FE 200D 2640                      ; minimally-qualified # 🧜🏾‍♀ mermaid: medium-dark skin tone\n```\n\n----------------------------------------\n\nTITLE: Invoking genpass-monkey Command\nDESCRIPTION: This snippet demonstrates the use of the genpass-monkey generator, which creates random strings utilizing Crockford's base32 encoding. Users can request multiple passwords by specifying a numeric argument.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\n% genpass-monkey\n```\n\nLANGUAGE: Shell\nCODE:\n```\n% genpass-monkey 3\n```\n\n----------------------------------------\n\nTITLE: Invoking genpass-xkcd Command\nDESCRIPTION: This snippet explains the genpass-xkcd generator, which produces passphrases inspired by the XKCD comic. Each passphrase starts with a digit and consists of words from '/usr/share/dict/words'. Multiple passphrases can be created by providing a number.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/genpass/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\n% genpass-xkcd\n```\n\nLANGUAGE: Shell\nCODE:\n```\n% genpass-xkcd 3\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Virtualenv Activation\nDESCRIPTION: Shows how to disable the automatic virtualenv activation behavior by setting the DISABLE_VENV_CD variable before sourcing Oh My Zsh.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/virtualenvwrapper/README.md#2025-04-22_snippet_3\n\nLANGUAGE: zsh\nCODE:\n```\nDISABLE_VENV_CD=1\nplugins=(... virtualenvwrapper)\nsource $ZSH/oh-my-zsh.sh\n```\n\n----------------------------------------\n\nTITLE: Defining Unicode Codepoints for Person-Fantasy Emojis\nDESCRIPTION: This code block defines Unicode codepoints for fantasy character emojis with their variations including different skin tones and gender combinations. It includes fully-qualified and minimally-qualified versions of each emoji.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\n# subgroup: person-fantasy\n1F47C                                      ; fully-qualified     # 👼 baby angel\n1F47C 1F3FB                                ; fully-qualified     # 👼🏻 baby angel: light skin tone\n1F47C 1F3FC                                ; fully-qualified     # 👼🏼 baby angel: medium-light skin tone\n1F47C 1F3FD                                ; fully-qualified     # 👼🏽 baby angel: medium skin tone\n1F47C 1F3FE                                ; fully-qualified     # 👼🏾 baby angel: medium-dark skin tone\n1F47C 1F3FF                                ; fully-qualified     # 👼🏿 baby angel: dark skin tone\n1F385                                      ; fully-qualified     # 🎅 Santa Claus\n1F385 1F3FB                                ; fully-qualified     # 🎅🏻 Santa Claus: light skin tone\n1F385 1F3FC                                ; fully-qualified     # 🎅🏼 Santa Claus: medium-light skin tone\n1F385 1F3FD                                ; fully-qualified     # 🎅🏽 Santa Claus: medium skin tone\n1F385 1F3FE                                ; fully-qualified     # 🎅🏾 Santa Claus: medium-dark skin tone\n1F385 1F3FF                                ; fully-qualified     # 🎅🏿 Santa Claus: dark skin tone\n1F936                                      ; fully-qualified     # 🤶 Mrs. Claus\n1F936 1F3FB                                ; fully-qualified     # 🤶🏻 Mrs. Claus: light skin tone\n1F936 1F3FC                                ; fully-qualified     # 🤶🏼 Mrs. Claus: medium-light skin tone\n1F936 1F3FD                                ; fully-qualified     # 🤶🏽 Mrs. Claus: medium skin tone\n1F936 1F3FE                                ; fully-qualified     # 🤶🏾 Mrs. Claus: medium-dark skin tone\n1F936 1F3FF                                ; fully-qualified     # 🤶🏿 Mrs. Claus: dark skin tone\n1F9B8                                      ; fully-qualified     # 🦸 superhero\n1F9B8 1F3FB                                ; fully-qualified     # 🦸🏻 superhero: light skin tone\n1F9B8 1F3FC                                ; fully-qualified     # 🦸🏼 superhero: medium-light skin tone\n1F9B8 1F3FD                                ; fully-qualified     # 🦸🏽 superhero: medium skin tone\n1F9B8 1F3FE                                ; fully-qualified     # 🦸🏾 superhero: medium-dark skin tone\n1F9B8 1F3FF                                ; fully-qualified     # 🦸🏿 superhero: dark skin tone\n1F9B8 200D 2642 FE0F                       ; fully-qualified     # 🦸‍♂️ man superhero\n1F9B8 200D 2642                            ; minimally-qualified # 🦸‍♂ man superhero\n1F9B8 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🦸🏻‍♂️ man superhero: light skin tone\n1F9B8 1F3FB 200D 2642                      ; minimally-qualified # 🦸🏻‍♂ man superhero: light skin tone\n1F9B8 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🦸🏼‍♂️ man superhero: medium-light skin tone\n1F9B8 1F3FC 200D 2642                      ; minimally-qualified # 🦸🏼‍♂ man superhero: medium-light skin tone\n1F9B8 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🦸🏽‍♂️ man superhero: medium skin tone\n1F9B8 1F3FD 200D 2642                      ; minimally-qualified # 🦸🏽‍♂ man superhero: medium skin tone\n1F9B8 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🦸🏾‍♂️ man superhero: medium-dark skin tone\n1F9B8 1F3FE 200D 2642                      ; minimally-qualified # 🦸🏾‍♂ man superhero: medium-dark skin tone\n1F9B8 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🦸🏿‍♂️ man superhero: dark skin tone\n1F9B8 1F3FF 200D 2642                      ; minimally-qualified # 🦸🏿‍♂ man superhero: dark skin tone\n1F9B8 200D 2640 FE0F                       ; fully-qualified     # 🦸‍♀️ woman superhero\n1F9B8 200D 2640                            ; minimally-qualified # 🦸‍♀ woman superhero\n1F9B8 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🦸🏻‍♀️ woman superhero: light skin tone\n1F9B8 1F3FB 200D 2640                      ; minimally-qualified # 🦸🏻‍♀ woman superhero: light skin tone\n1F9B8 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🦸🏼‍♀️ woman superhero: medium-light skin tone\n1F9B8 1F3FC 200D 2640                      ; minimally-qualified # 🦸🏼‍♀ woman superhero: medium-light skin tone\n1F9B8 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🦸🏽‍♀️ woman superhero: medium skin tone\n1F9B8 1F3FD 200D 2640                      ; minimally-qualified # 🦸🏽‍♀ woman superhero: medium skin tone\n1F9B8 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🦸🏾‍♀️ woman superhero: medium-dark skin tone\n1F9B8 1F3FE 200D 2640                      ; minimally-qualified # 🦸🏾‍♀ woman superhero: medium-dark skin tone\n1F9B8 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🦸🏿‍♀️ woman superhero: dark skin tone\n1F9B8 1F3FF 200D 2640                      ; minimally-qualified # 🦸🏿‍♀ woman superhero: dark skin tone\n1F9B9                                      ; fully-qualified     # 🦹 supervillain\n1F9B9 1F3FB                                ; fully-qualified     # 🦹🏻 supervillain: light skin tone\n1F9B9 1F3FC                                ; fully-qualified     # 🦹🏼 supervillain: medium-light skin tone\n1F9B9 1F3FD                                ; fully-qualified     # 🦹🏽 supervillain: medium skin tone\n1F9B9 1F3FE                                ; fully-qualified     # 🦹🏾 supervillain: medium-dark skin tone\n1F9B9 1F3FF                                ; fully-qualified     # 🦹🏿 supervillain: dark skin tone\n1F9B9 200D 2642 FE0F                       ; fully-qualified     # 🦹‍♂️ man supervillain\n1F9B9 200D 2642                            ; minimally-qualified # 🦹‍♂ man supervillain\n1F9B9 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🦹🏻‍♂️ man supervillain: light skin tone\n1F9B9 1F3FB 200D 2642                      ; minimally-qualified # 🦹🏻‍♂ man supervillain: light skin tone\n1F9B9 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🦹🏼‍♂️ man supervillain: medium-light skin tone\n1F9B9 1F3FC 200D 2642                      ; minimally-qualified # 🦹🏼‍♂ man supervillain: medium-light skin tone\n1F9B9 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🦹🏽‍♂️ man supervillain: medium skin tone\n1F9B9 1F3FD 200D 2642                      ; minimally-qualified # 🦹🏽‍♂ man supervillain: medium skin tone\n1F9B9 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🦹🏾‍♂️ man supervillain: medium-dark skin tone\n1F9B9 1F3FE 200D 2642                      ; minimally-qualified # 🦹🏾‍♂ man supervillain: medium-dark skin tone\n1F9B9 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🦹🏿‍♂️ man supervillain: dark skin tone\n1F9B9 1F3FF 200D 2642                      ; minimally-qualified # 🦹🏿‍♂ man supervillain: dark skin tone\n1F9B9 200D 2640 FE0F                       ; fully-qualified     # 🦹‍♀️ woman supervillain\n1F9B9 200D 2640                            ; minimally-qualified # 🦹‍♀ woman supervillain\n1F9B9 1F3FB 200D 2640 FE0F                 ; fully-qualified     # 🦹🏻‍♀️ woman supervillain: light skin tone\n1F9B9 1F3FB 200D 2640                      ; minimally-qualified # 🦹🏻‍♀ woman supervillain: light skin tone\n1F9B9 1F3FC 200D 2640 FE0F                 ; fully-qualified     # 🦹🏼‍♀️ woman supervillain: medium-light skin tone\n1F9B9 1F3FC 200D 2640                      ; minimally-qualified # 🦹🏼‍♀ woman supervillain: medium-light skin tone\n1F9B9 1F3FD 200D 2640 FE0F                 ; fully-qualified     # 🦹🏽‍♀️ woman supervillain: medium skin tone\n1F9B9 1F3FD 200D 2640                      ; minimally-qualified # 🦹🏽‍♀ woman supervillain: medium skin tone\n1F9B9 1F3FE 200D 2640 FE0F                 ; fully-qualified     # 🦹🏾‍♀️ woman supervillain: medium-dark skin tone\n1F9B9 1F3FE 200D 2640                      ; minimally-qualified # 🦹🏾‍♀ woman supervillain: medium-dark skin tone\n1F9B9 1F3FF 200D 2640 FE0F                 ; fully-qualified     # 🦹🏿‍♀️ woman supervillain: dark skin tone\n1F9B9 1F3FF 200D 2640                      ; minimally-qualified # 🦹🏿‍♀ woman supervillain: dark skin tone\n1F9D9                                      ; fully-qualified     # 🧙 mage\n1F9D9 1F3FB                                ; fully-qualified     # 🧙🏻 mage: light skin tone\n1F9D9 1F3FC                                ; fully-qualified     # 🧙🏼 mage: medium-light skin tone\n1F9D9 1F3FD                                ; fully-qualified     # 🧙🏽 mage: medium skin tone\n1F9D9 1F3FE                                ; fully-qualified     # 🧙🏾 mage: medium-dark skin tone\n1F9D9 1F3FF                                ; fully-qualified     # 🧙🏿 mage: dark skin tone\n1F9D9 200D 2642 FE0F                       ; fully-qualified     # 🧙‍♂️ man mage\n1F9D9 200D 2642                            ; minimally-qualified # 🧙‍♂ man mage\n1F9D9 1F3FB 200D 2642 FE0F                 ; fully-qualified     # 🧙🏻‍♂️ man mage: light skin tone\n1F9D9 1F3FB 200D 2642                      ; minimally-qualified # 🧙🏻‍♂ man mage: light skin tone\n1F9D9 1F3FC 200D 2642 FE0F                 ; fully-qualified     # 🧙🏼‍♂️ man mage: medium-light skin tone\n1F9D9 1F3FC 200D 2642                      ; minimally-qualified # 🧙🏼‍♂ man mage: medium-light skin tone\n1F9D9 1F3FD 200D 2642 FE0F                 ; fully-qualified     # 🧙🏽‍♂️ man mage: medium skin tone\n1F9D9 1F3FD 200D 2642                      ; minimally-qualified # 🧙🏽‍♂ man mage: medium skin tone\n1F9D9 1F3FE 200D 2642 FE0F                 ; fully-qualified     # 🧙🏾‍♂️ man mage: medium-dark skin tone\n1F9D9 1F3FE 200D 2642                      ; minimally-qualified # 🧙🏾‍♂ man mage: medium-dark skin tone\n1F9D9 1F3FF 200D 2642 FE0F                 ; fully-qualified     # 🧙🏿‍♂️ man mage: dark skin tone\n1F9D9 1F3FF 200D 2642                      ; minimally-qualified # 🧙🏿‍♂ man mage: dark skin tone\n1F9D9 200D 2640 FE0F                       ; fully-qualified     # 🧙‍♀️ woman mage\n```\n\n----------------------------------------\n\nTITLE: Example Systemd Prompt Output\nDESCRIPTION: Shows how the systemd_prompt_info function would display in the prompt when dhcpd is running and httpd is not, with the custom configuration variables set.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/systemd/README.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[DHCPD: +][HTTPD: X]\n```\n\n----------------------------------------\n\nTITLE: Enabling the UV Plugin in Oh My Zsh\nDESCRIPTION: Code snippet showing how to add the uv plugin to the plugins array in your zshrc file. This enables the plugin's functionality within your Oh My Zsh environment.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/uv/README.md#2025-04-22_snippet_0\n\nLANGUAGE: zsh\nCODE:\n```\nplugins=(... uv)\n```\n\n----------------------------------------\n\nTITLE: Mapping Unicode Codepoints to Body Part Emojis (Text)\nDESCRIPTION: This data block lists Unicode codepoints for body part emojis like biceps, leg, foot, ear, nose, brain, tooth, bone, eyes, tongue, and mouth. It includes fully-qualified codepoints and variations for different skin tones using modifier codepoints (1F3FB to 1F3FF). The format specifies the codepoint(s), qualification status (e.g., 'fully-qualified', 'unqualified'), the rendered emoji, and a textual description.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n# subgroup: body-parts\n1F4AA                                      ; fully-qualified     # 💪 flexed biceps\n1F4AA 1F3FB                                ; fully-qualified     # 💪🏻 flexed biceps: light skin tone\n1F4AA 1F3FC                                ; fully-qualified     # 💪🏼 flexed biceps: medium-light skin tone\n1F4AA 1F3FD                                ; fully-qualified     # 💪🏽 flexed biceps: medium skin tone\n1F4AA 1F3FE                                ; fully-qualified     # 💪🏾 flexed biceps: medium-dark skin tone\n1F4AA 1F3FF                                ; fully-qualified     # 💪🏿 flexed biceps: dark skin tone\n1F9BE                                      ; fully-qualified     # 🦾 mechanical arm\n1F9BF                                      ; fully-qualified     # 🦿 mechanical leg\n1F9B5                                      ; fully-qualified     # 🦵 leg\n1F9B5 1F3FB                                ; fully-qualified     # 🦵🏻 leg: light skin tone\n1F9B5 1F3FC                                ; fully-qualified     # 🦵🏼 leg: medium-light skin tone\n1F9B5 1F3FD                                ; fully-qualified     # 🦵🏽 leg: medium skin tone\n1F9B5 1F3FE                                ; fully-qualified     # 🦵🏾 leg: medium-dark skin tone\n1F9B5 1F3FF                                ; fully-qualified     # 🦵🏿 leg: dark skin tone\n1F9B6                                      ; fully-qualified     # 🦶 foot\n1F9B6 1F3FB                                ; fully-qualified     # 🦶🏻 foot: light skin tone\n1F9B6 1F3FC                                ; fully-qualified     # 🦶🏼 foot: medium-light skin tone\n1F9B6 1F3FD                                ; fully-qualified     # 🦶🏽 foot: medium skin tone\n1F9B6 1F3FE                                ; fully-qualified     # 🦶🏾 foot: medium-dark skin tone\n1F9B6 1F3FF                                ; fully-qualified     # 🦶🏿 foot: dark skin tone\n1F442                                      ; fully-qualified     # 👂 ear\n1F442 1F3FB                                ; fully-qualified     # 👂🏻 ear: light skin tone\n1F442 1F3FC                                ; fully-qualified     # 👂🏼 ear: medium-light skin tone\n1F442 1F3FD                                ; fully-qualified     # 👂🏽 ear: medium skin tone\n1F442 1F3FE                                ; fully-qualified     # 👂🏾 ear: medium-dark skin tone\n1F442 1F3FF                                ; fully-qualified     # 👂🏿 ear: dark skin tone\n1F9BB                                      ; fully-qualified     # 🦻 ear with hearing aid\n1F9BB 1F3FB                                ; fully-qualified     # 🦻🏻 ear with hearing aid: light skin tone\n1F9BB 1F3FC                                ; fully-qualified     # 🦻🏼 ear with hearing aid: medium-light skin tone\n1F9BB 1F3FD                                ; fully-qualified     # 🦻🏽 ear with hearing aid: medium skin tone\n1F9BB 1F3FE                                ; fully-qualified     # 🦻🏾 ear with hearing aid: medium-dark skin tone\n1F9BB 1F3FF                                ; fully-qualified     # 🦻🏿 ear with hearing aid: dark skin tone\n1F443                                      ; fully-qualified     # 👃 nose\n1F443 1F3FB                                ; fully-qualified     # 👃🏻 nose: light skin tone\n1F443 1F3FC                                ; fully-qualified     # 👃🏼 nose: medium-light skin tone\n1F443 1F3FD                                ; fully-qualified     # 👃🏽 nose: medium skin tone\n1F443 1F3FE                                ; fully-qualified     # 👃🏾 nose: medium-dark skin tone\n1F443 1F3FF                                ; fully-qualified     # 👃🏿 nose: dark skin tone\n1F9E0                                      ; fully-qualified     # 🧠 brain\n1F9B7                                      ; fully-qualified     # 🦷 tooth\n1F9B4                                      ; fully-qualified     # 🦴 bone\n1F440                                      ; fully-qualified     # 👀 eyes\n1F441 FE0F                                 ; fully-qualified     # 👁️ eye\n1F441                                      ; unqualified         # 👁 eye\n1F445                                      ; fully-qualified     # 👅 tongue\n1F444                                      ; fully-qualified     # 👄 mouth\n```\n\n----------------------------------------\n\nTITLE: Adding Jake Plugin to Oh My Zsh Configuration (Bash)\nDESCRIPTION: This Bash snippet shows how to add the `jake-node` plugin to the `plugins` array within the `.zshrc` file. This enables Oh My Zsh's completion features for the Jake JavaScript build tool. The `...` indicates that other existing plugins in the array should remain.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/jake-node/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplugins=(... jake-node)\n```\n\n----------------------------------------\n\nTITLE: Defining Single Finger Hand Emojis in Unicode\nDESCRIPTION: A structured list of Unicode codepoints for single finger hand gestures including pointing left, right, up, and down, middle finger, and index pointing up, with all skin tone variations.\nSOURCE: https://github.com/ohmyzsh/ohmyzsh/blob/master/plugins/emoji/emoji-data.txt#2025-04-22_snippet_8\n\nLANGUAGE: text\nCODE:\n```\n# subgroup: hand-single-finger\n1F448                                      ; fully-qualified     # 👈 backhand index pointing left\n1F448 1F3FB                                ; fully-qualified     # 👈🏻 backhand index pointing left: light skin tone\n1F448 1F3FC                                ; fully-qualified     # 👈🏼 backhand index pointing left: medium-light skin tone\n1F448 1F3FD                                ; fully-qualified     # 👈🏽 backhand index pointing left: medium skin tone\n1F448 1F3FE                                ; fully-qualified     # 👈🏾 backhand index pointing left: medium-dark skin tone\n1F448 1F3FF                                ; fully-qualified     # 👈🏿 backhand index pointing left: dark skin tone\n1F449                                      ; fully-qualified     # 👉 backhand index pointing right\n1F449 1F3FB                                ; fully-qualified     # 👉🏻 backhand index pointing right: light skin tone\n1F449 1F3FC                                ; fully-qualified     # 👉🏼 backhand index pointing right: medium-light skin tone\n1F449 1F3FD                                ; fully-qualified     # 👉🏽 backhand index pointing right: medium skin tone\n1F449 1F3FE                                ; fully-qualified     # 👉🏾 backhand index pointing right: medium-dark skin tone\n1F449 1F3FF                                ; fully-qualified     # 👉🏿 backhand index pointing right: dark skin tone\n1F446                                      ; fully-qualified     # 👆 backhand index pointing up\n1F446 1F3FB                                ; fully-qualified     # 👆🏻 backhand index pointing up: light skin tone\n1F446 1F3FC                                ; fully-qualified     # 👆🏼 backhand index pointing up: medium-light skin tone\n1F446 1F3FD                                ; fully-qualified     # 👆🏽 backhand index pointing up: medium skin tone\n1F446 1F3FE                                ; fully-qualified     # 👆🏾 backhand index pointing up: medium-dark skin tone\n1F446 1F3FF                                ; fully-qualified     # 👆🏿 backhand index pointing up: dark skin tone\n1F595                                      ; fully-qualified     # 🖕 middle finger\n1F595 1F3FB                                ; fully-qualified     # 🖕🏻 middle finger: light skin tone\n1F595 1F3FC                                ; fully-qualified     # 🖕🏼 middle finger: medium-light skin tone\n1F595 1F3FD                                ; fully-qualified     # 🖕🏽 middle finger: medium skin tone\n1F595 1F3FE                                ; fully-qualified     # 🖕🏾 middle finger: medium-dark skin tone\n1F595 1F3FF                                ; fully-qualified     # 🖕🏿 middle finger: dark skin tone\n1F447                                      ; fully-qualified     # 👇 backhand index pointing down\n1F447 1F3FB                                ; fully-qualified     # 👇🏻 backhand index pointing down: light skin tone\n1F447 1F3FC                                ; fully-qualified     # 👇🏼 backhand index pointing down: medium-light skin tone\n1F447 1F3FD                                ; fully-qualified     # 👇🏽 backhand index pointing down: medium skin tone\n1F447 1F3FE                                ; fully-qualified     # 👇🏾 backhand index pointing down: medium-dark skin tone\n1F447 1F3FF                                ; fully-qualified     # 👇🏿 backhand index pointing down: dark skin tone\n261D FE0F                                  ; fully-qualified     # ☝️ index pointing up\n261D                                       ; unqualified         # ☝ index pointing up\n261D 1F3FB                                 ; fully-qualified     # ☝🏻 index pointing up: light skin tone\n261D 1F3FC                                 ; fully-qualified     # ☝🏼 index pointing up: medium-light skin tone\n261D 1F3FD                                 ; fully-qualified     # ☝🏽 index pointing up: medium skin tone\n261D 1F3FE                                 ; fully-qualified     # ☝🏾 index pointing up: medium-dark skin tone\n261D 1F3FF                                 ; fully-qualified     # ☝🏿 index pointing up: dark skin tone\n```"
  }
]