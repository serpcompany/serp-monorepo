[
  {
    "owner": "binarywang",
    "repo": "wxjava",
    "content": "TITLE: Configuring wx-java-mp-multi-solon-plugin (Properties)\nDESCRIPTION: This configuration snippet for `app.properties` details how to set up the multi-tenant WeChat MP plugin. It includes essential settings for defining multiple WeChat accounts using tenant IDs (e.g., `tenantId1`, `tenantId2`) with their required `app-id` and `app-secret`. Optional parameters like `token`, `aes-key`, `use-stable-access-token`, `ConfigStorage` type (memory, jedis, etc.) with Redis details, and HTTP client settings (type, proxy, retry) can also be configured here.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-mp-multi-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 公众号配置\n## 应用 1 配置(必填)\nwx.mp.apps.tenantId1.app-id=appId\nwx.mp.apps.tenantId1.app-secret=@secret\n## 选填\nwx.mp.apps.tenantId1.token=@token\nwx.mp.apps.tenantId1.aes-key=@aesKey\nwx.mp.apps.tenantId1.use-stable-access-token=@useStableAccessToken\n## 应用 2 配置(必填)\nwx.mp.apps.tenantId2.app-id=@appId\nwx.mp.apps.tenantId2.app-secret =@secret\n## 选填\nwx.mp.apps.tenantId2.token=@token\nwx.mp.apps.tenantId2.aes-key=@aesKey\nwx.mp.apps.tenantId2.use-stable-access-token=@useStableAccessToken\n\n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson, redis_template\nwx.mp.config-storage.type=memory\n## 相关redis前缀配置: wx:mp:multi(默认)\nwx.mp.config-storage.key-prefix=wx:mp:multi\nwx.mp.config-storage.redis.host=127.0.0.1\nwx.mp.config-storage.redis.port=6379\n\t## 单机和 sentinel 同时存在时，优先使用sentinel配置\n\t# wx.mp.config-storage.redis.sentinel-ips=127.0.0.1:16379,127.0.0.1:26379\n\t# wx.mp.config-storage.redis.sentinel-name=mymaster\n\n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认), ok_http, jodd_http\nwx.mp.config-storage.http-client-type=http_client\nwx.mp.config-storage.http-proxy-host=\nwx.mp.config-storage.http-proxy-port=\nwx.mp.config-storage.http-proxy-username=\nwx.mp.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.mp.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.mp.config-storage.retry-sleep-millis=1000\n\n\t# 公众号地址 host 配置\n\t# wx.mp.hosts.api-host=http://proxy.com/\n\t# wx.mp.hosts.open-host=http://proxy.com/\n\t# wx.mp.hosts.mp-host=http://proxy.com/\n```\n\n----------------------------------------\n\nTITLE: Configuring WxMaService and Router with Multi-Properties Java\nDESCRIPTION: A Spring `@Configuration` class that initializes a map of `WxMaService` instances for multi-MiniApp support and sets up message routers for each instance. It loads configurations from `WxMaProperties` and uses `@PostConstruct` to create and store `WxMaService` objects keyed by app ID. Includes example message handlers for logging, text, image, QR code, and subscribe messages. Requires the `weixin-java-miniapp` library and Spring Boot.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/others/weixin-java-config/README.md#_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableConfigurationProperties(WxMaProperties.class)\npublic class WxMaConfiguration {\n\n    private WxMaProperties properties;\n    private static Map<String, WxMaService> maServices;\n    private static final Map<String, WxMaMessageRouter> routers = Maps.newHashMap();\n\n    @Autowired\n    public WxMaConfiguration(WxMaProperties properties) {\n        this.properties = properties;\n    }\n\n    public static WxMaService getMaService(String appId) {\n        WxMaService wxService = maServices.get(appId);\n        Optional.ofNullable(wxService).orElseThrow(() -> new RuntimeException(\"没有配置appId\"));\n        return wxService;\n    }\n\n    public static WxMaMessageRouter getRouter(String appId) {\n        return routers.get(appId);\n    }\n\n    @PostConstruct\n    public void init() {\n        List<WxMaProperties.Config> configs = this.properties.getConfigs();\n        if (configs == null) {\n            return;\n        }\n\n        maServices = configs.stream().map(a -> {\n                    // 多配置\n                    WxMaDefaultConfigImpl config = new WxMaDefaultConfigImpl();\n                    config.setAppid(a.getAppid());\n                    config.setSecret(a.getSecret());\n                    config.setToken(a.getToken());\n                    config.setAesKey(a.getAesKey());\n                    config.setMsgDataFormat(a.getMsgDataFormat());\n\n                    WxMaService service = new WxMaServiceImpl();\n                    service.setWxMaConfig(config);\n\n                    routers.put(a.getAppid(), this.newRouter(service));\n                    return service;\n                }).collect(Collectors.toMap(s -> s.getWxMaConfig().getAppid(), a -> a));\n    }\n\n    private WxMaMessageRouter newRouter(WxMaService service) {\n        final WxMaMessageRouter router = new WxMaMessageRouter(service);\n        router\n                .rule().handler(logHandler).next()\n                .rule().async(false).content(\"订阅消息\").handler(subscribeMsgHandler).end()\n                .rule().async(false).content(\"文本\").handler(textHandler).end()\n                .rule().async(false).content(\"图片\").handler(picHandler).end()\n                .rule().async(false).content(\"二维码\").handler(qrcodeHandler).end();\n        return router;\n    }\n\n    private final WxMaMessageHandler subscribeMsgHandler = (wxMessage, context, service, sessionManager) -> {\n        service.getMsgService().sendSubscribeMsg(WxMaSubscribeMessage.builder()\n                .templateId(\"此处更换为自己的模板id\")\n                .data(Lists.newArrayList(\n                        new WxMaSubscribeMessage.MsgData(\"keyword1\", \"339208499\")))\n                .toUser(wxMessage.getFromUser())\n                .build());\n        return null;\n    };\n\n    private final WxMaMessageHandler logHandler = (wxMessage, context, service, sessionManager) -> {\n        log.info(\"收到logHandler消息：\" + wxMessage.toString());\n        service.getMsgService().sendKefuMsg(WxMaKefuMessage.newTextBuilder().content(\"收到信息为：\" + wxMessage.toJson())\n                .toUser(wxMessage.getFromUser()).build());\n        return null;\n    };\n\n    private final WxMaMessageHandler textHandler = (wxMessage, context, service, sessionManager) -> {\n        log.info(\"收到textHandler消息：\" + wxMessage.toString());\n        service.getMsgService().sendKefuMsg(WxMaKefuMessage.newTextBuilder().content(\"回复文本消息\")\n                .toUser(wxMessage.getFromUser()).build());\n        return null;\n    };\n\n    private final WxMaMessageHandler picHandler = (wxMessage, context, service, sessionManager) -> {\n        log.info(\"收到picHandler消息：\" + wxMessage.toString());\n        try {\n            WxMediaUploadResult uploadResult = service.getMediaService()\n                    .uploadMedia(\"image\", \"png\",\n                            ClassLoader.getSystemResourceAsStream(\"tmp.png\"));\n            service.getMsgService().sendKefuMsg(\n                    WxMaKefuMessage\n                            .newImageBuilder()\n                            .mediaId(uploadResult.getMediaId())\n                            .toUser(wxMessage.getFromUser())\n                            .build());\n        } catch (WxErrorException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    };\n\n    private final WxMaMessageHandler qrcodeHandler = (wxMessage, context, service, sessionManager) -> {\n        log.info(\"收到qrcodeHandler消息：\" + wxMessage.toString());\n        try {\n            final File file = service.getQrcodeService().createQrcode(\"123\", 430);\n            WxMediaUploadResult uploadResult = service.getMediaService().uploadMedia(\"image\", file);\n            service.getMsgService().sendKefuMsg(\n                    WxMaKefuMessage\n                            .newImageBuilder()\n                            .mediaId(uploadResult.getMediaId())\n                            .toUser(wxMessage.getFromUser())\n                            .build());\n        } catch (WxErrorException e) {\n            e.printStackTrace();\n        }\n\n        return null;\n    };\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple WxCp Accounts in app.properties\nDESCRIPTION: This properties snippet illustrates how to configure multiple WeChat Work accounts (identified by tenant IDs like `tenantId1`, `tenantId2`) and common settings for the plugin in your `app.properties` file. Each account requires `corp-id` and `corp-secret`, with optional fields for `agent-id`, `token`, `aes-key`, and message audit settings. Common settings include storage type and HTTP client configurations.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-cp-multi-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 应用 1 配置\nwx.cp.corps.tenantId1.corp-id = @corp-id\nwx.cp.corps.tenantId1.corp-secret = @corp-secret\n## 选填\nwx.cp.corps.tenantId1.agent-id = @agent-id\nwx.cp.corps.tenantId1.token = @token\nwx.cp.corps.tenantId1.aes-key = @aes-key\nwx.cp.corps.tenantId1.msg-audit-priKey = @msg-audit-priKey\nwx.cp.corps.tenantId1.msg-audit-lib-path = @msg-audit-lib-path\n\n# 应用 2 配置\nwx.cp.corps.tenantId2.corp-id = @corp-id\nwx.cp.corps.tenantId2.corp-secret = @corp-secret\n## 选填\nwx.cp.corps.tenantId2.agent-id = @agent-id\nwx.cp.corps.tenantId2.token = @token\nwx.cp.corps.tenantId2.aes-key = @aes-key\nwx.cp.corps.tenantId2.msg-audit-priKey = @msg-audit-priKey\nwx.cp.corps.tenantId2.msg-audit-lib-path = @msg-audit-lib-path\n\n# 公共配置\n## ConfigStorage 配置（选填）\nwx.cp.config-storage.type=memory # 配置类型: memory(默认), jedis, redisson, redistemplate\n## http 客户端配置（选填）\n## # http客户端类型: http_client(默认), ok_http, jodd_http\nwx.cp.config-storage.http-client-type=http_client\nwx.cp.config-storage.http-proxy-host=\nwx.cp.config-storage.http-proxy-port=\nwx.cp.config-storage.http-proxy-username=\nwx.cp.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.cp.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.cp.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Accessing Weixin Channel Services for Multiple Accounts in Java\nDESCRIPTION: This Java code snippet demonstrates how to inject and use the `WxChannelMultiServices` bean provided by the starter. It shows how to retrieve account-specific `WxChannelService` instances using a tenant ID (`tenantId1`, `tenantId2`, etc.) and then access specific services like `WxFinderLiveService` from the account service. It also includes a check for unconfigured accounts.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-channel-multi-spring-boot-starter/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.binarywang.spring.starter.wxjava.channel.service.WxChannelMultiServices;\nimport me.chanjar.weixin.channel.api.WxChannelService;\nimport me.chanjar.weixin.channel.api.WxFinderLiveService;\nimport me.chanjar.weixin.channel.bean.lead.component.response.FinderAttrResponse;\nimport me.chanjar.weixin.common.error.WxErrorException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoService {\n  @Autowired\n  private WxChannelMultiServices wxChannelMultiServices;\n\n  public void test() throws WxErrorException {\n    // 应用 1 的 WxChannelService\n    WxChannelService wxChannelService1 = wxChannelMultiServices.getWxChannelService(\"tenantId1\");\n    WxFinderLiveService finderLiveService = wxChannelService1.getFinderLiveService();\n    FinderAttrResponse response1 = finderLiveService.getFinderAttrByAppid();\n    // todo ...\n\n    // 应用 2 的 WxChannelService\n    WxChannelService wxChannelService2 = wxChannelMultiServices.getWxChannelService(\"tenantId2\");\n    WxFinderLiveService finderLiveService2 = wxChannelService2.getFinderLiveService();\n    FinderAttrResponse response2 = finderLiveService2.getFinderAttrByAppid();\n    // todo ...\n\n    // 应用 3 的 WxChannelService\n    WxChannelService wxChannelService3 = wxChannelMultiServices.getWxChannelService(\"tenantId3\");\n    // 判断是否为空\n    if (wxChannelService3 == null) {\n      // todo wxChannelService3 为空，请先配置 tenantId3 微信视频号应用参数\n      return;\n    }\n    WxFinderLiveService finderLiveService3 = wxChannelService3.getFinderLiveService();\n    FinderAttrResponse response3 = finderLiveService3.getFinderAttrByAppid();\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Weixin Channel Apps in Spring Boot Properties\nDESCRIPTION: This properties file content shows the configuration structure for the `wx-java-channel-multi-spring-boot-starter`. It allows configuring multiple Weixin Channel accounts using `wx.channel.apps.<tenantId>.*` prefixes and setting global options for config storage (type, key prefix, Redis details) and HTTP client (type, proxy, retry settings). Required parameters include `app-id` and `secret` for each app.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-channel-multi-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 视频号配置\n## 应用 1 配置(必填)\nwx.channel.apps.tenantId1.app-id=@appId\nwx.channel.apps.tenantId1.secret=@secret\n## 选填\nwx.channel.apps.tenantId1.use-stable-access-token=false\nwx.channel.apps.tenantId1.token=\nwx.channel.apps.tenantId1.aes-key=\n## 应用 2 配置(必填)\nwx.channel.apps.tenantId2.app-id=@appId\nwx.channel.apps.tenantId2.secret=@secret\n## 选填\nwx.channel.apps.tenantId2.use-stable-access-token=false\nwx.channel.apps.tenantId2.token=\nwx.channel.apps.tenantId2.aes-key=\n\n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson, redis_template\nwx.channel.config-storage.type=memory\n## 相关redis前缀配置: wx:channel:multi(默认)\nwx.channel.config-storage.key-prefix=wx:channel:multi\nwx.channel.config-storage.redis.host=127.0.0.1\nwx.channel.config-storage.redis.port=6379\nwx.channel.config-storage.redis.password=123456\n\n# redis_template 方式使用spring data redis配置\nspring.data.redis.database=0\nspring.data.redis.host=127.0.0.1\nspring.data.redis.password=123456\nspring.data.redis.port=6379\n\n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认)\nwx.channel.config-storage.http-client-type=http_client\nwx.channel.config-storage.http-proxy-host=\nwx.channel.config-storage.http-proxy-port=\nwx.channel.config-storage.http-proxy-username=\nwx.channel.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.channel.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.channel.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Using WxMpMultiServices for Multi-Tenant Access (Java)\nDESCRIPTION: This Java code snippet demonstrates how to utilize the `WxMpMultiServices` component, which is automatically injected by the plugin. You can retrieve specific `WxMpService` instances for different tenants (identified by their tenant IDs, e.g., \"tenantId1\", \"tenantId2\") using the `getWxMpService` method. The example shows accessing the user service for two configured tenants and checks if a service instance is available for a potentially unconfigured tenant (\"tenantId3\").\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-mp-multi-solon-plugin/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.binarywang.solon.wxjava.mp_multi.service.WxMpMultiServices;\nimport me.chanjar.weixin.mp.api.WxMpService;\nimport me.chanjar.weixin.mp.api.WxMpUserService;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\n\n@Component\npublic class DemoService {\n  @Inject\n  private WxMpMultiServices wxMpMultiServices;\n\n  public void test() {\n    // 应用 1 的 WxMpService\n    WxMpService wxMpService1 = wxMpMultiServices.getWxMpService(\"tenantId1\");\n    WxMpUserService userService1 = wxMpService1.getUserService();\n    userService1.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 2 的 WxMpService\n    WxMpService wxMpService2 = wxMpMultiServices.getWxMpService(\"tenantId2\");\n    WxMpUserService userService2 = wxMpService2.getUserService();\n    userService2.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 3 的 WxMpService\n    WxMpService wxMpService3 = wxMpMultiServices.getWxMpService(\"tenantId3\");\n    // 判断是否为空\n    if (wxMpService3 == null) {\n      // todo wxMpService3 为空，请先配置 tenantId3 微信公众号应用参数\n      return;\n    }\n    WxMpUserService userService3 = wxMpService3.getUserService();\n    userService3.userInfo(\"xxx\");\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple WeChat MP Accounts in Spring Boot (Properties)\nDESCRIPTION: This configuration snippet for application.properties demonstrates how to define multiple WeChat Official Accounts (using tenant IDs) and optional settings for config storage (memory, Redis types) and HTTP client properties (type, proxy, retry).\nIt requires replacing placeholders like `appId`, `secret`, and tenant IDs with actual values for each account.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-mp-multi-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 公众号配置\n## 应用 1 配置(必填)\nwx.mp.apps.tenantId1.app-id=appId\nwx.mp.apps.tenantId1.app-secret=@secret\n## 选填\nwx.mp.apps.tenantId1.token=@token\nwx.mp.apps.tenantId1.aes-key=@aesKey\nwx.mp.apps.tenantId1.use-stable-access-token=@useStableAccessToken\n## 应用 2 配置(必填)\nwx.mp.apps.tenantId2.app-id=@appId\nwx.mp.apps.tenantId2.app-secret =@secret\n## 选填\nwx.mp.apps.tenantId2.token=@token\nwx.mp.apps.tenantId2.aes-key=@aesKey\nwx.mp.apps.tenantId2.use-stable-access-token=@useStableAccessToken\n\n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson, redis_template\nwx.mp.config-storage.type=memory\n## 相关redis前缀配置: wx:mp:multi(默认)\nwx.mp.config-storage.key-prefix=wx:mp:multi\nwx.mp.config-storage.redis.host=127.0.0.1\nwx.mp.config-storage.redis.port=6379\n## 单机和 sentinel 同时存在时，优先使用sentinel配置\n# wx.mp.config-storage.redis.sentinel-ips=127.0.0.1:16379,127.0.0.1:26379\n# wx.mp.config-storage.redis.sentinel-name=mymaster\n\n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认), ok_http, jodd_http\nwx.mp.config-storage.http-client-type=http_client\nwx.mp.config-storage.http-proxy-host=\nwx.mp.config-storage.http-proxy-port=\nwx.mp.config-storage.http-proxy-username=\nwx.mp.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.mp.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.mp.config-storage.retry-sleep-millis=1000\n\n# 公众号地址 host 配置\n# wx.mp.hosts.api-host=http://proxy.com/\n# wx.mp.hosts.open-host=http://proxy.com/\n# wx.mp.hosts.mp-host=http://proxy.com/\n```\n\n----------------------------------------\n\nTITLE: Configuring and Initializing WeChat Work Services and Routers - Java\nDESCRIPTION: This Spring @Configuration class initializes WxCpService and WxCpMessageRouter instances for each configured WeChat Work application using the loaded WxCpProperties. It sets up the WxCpDefaultConfigImpl for each application and defines message routing rules for handling various events and messages, such as logging, menu clicks, subscription changes, location updates, and contact changes.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/others/weixin-java-config/README.md#_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\n@Configuration\n@EnableConfigurationProperties(WxCpProperties.class)\npublic class WxCpConfiguration {\n\n    private LogHandler logHandler;\n    private NullHandler nullHandler;\n    private LocationHandler locationHandler;\n    private MenuHandler menuHandler;\n    private MsgHandler msgHandler;\n    private UnsubscribeHandler unsubscribeHandler;\n    private SubscribeHandler subscribeHandler;\n\n    private WxCpProperties properties;\n\n    private static Map<Integer, WxCpMessageRouter> routers = Maps.newHashMap();\n    private static Map<Integer, WxCpService> cpServices = Maps.newHashMap();\n\n    @Autowired\n    public WxCpConfiguration(LogHandler logHandler, NullHandler nullHandler, LocationHandler locationHandler,\n                             MenuHandler menuHandler, MsgHandler msgHandler, UnsubscribeHandler unsubscribeHandler,\n                             SubscribeHandler subscribeHandler, WxCpProperties properties) {\n        this.logHandler = logHandler;\n        this.nullHandler = nullHandler;\n        this.locationHandler = locationHandler;\n        this.menuHandler = menuHandler;\n        this.msgHandler = msgHandler;\n        this.unsubscribeHandler = unsubscribeHandler;\n        this.subscribeHandler = subscribeHandler;\n        this.properties = properties;\n    }\n\n\n    public static Map<Integer, WxCpMessageRouter> getRouters() {\n        return routers;\n    }\n\n\n    public static WxCpService getCpService(Integer agentId) {\n        WxCpService cpService = cpServices.get(agentId);\n        Optional.ofNullable(cpService).orElseThrow(() -> new RuntimeException(\"cpService不能为空\"));\n        return cpService;\n    }\n\n    @PostConstruct\n    public void initServices() {\n        cpServices = this.properties.getAppConfigs().stream().map(a -> {\n            val configStorage = new WxCpDefaultConfigImpl();\n            configStorage.setCorpId(this.properties.getCorpId());\n            configStorage.setAgentId(a.getAgentId());\n            configStorage.setCorpSecret(a.getSecret());\n            configStorage.setToken(a.getToken());\n            configStorage.setAesKey(a.getAesKey());\n\n            val service = new WxCpServiceImpl();\n            service.setWxCpConfigStorage(configStorage);\n\n            routers.put(a.getAgentId(), this.newRouter(service));\n            return service;\n        }).collect(Collectors.toMap(service -> service.getWxCpConfigStorage().getAgentId(), a -> a));\n    }\n\n    private WxCpMessageRouter newRouter(WxCpService wxCpService) {\n        final val newRouter = new WxCpMessageRouter(wxCpService);\n\n        // 记录所有事件的日志 （异步执行）\n        newRouter.rule().handler(this.logHandler).next();\n\n        // 自定义菜单事件\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxConsts.MenuButtonType.CLICK).handler(this.menuHandler).end();\n\n        // 点击菜单链接事件（这里使用了一个空的处理器，可以根据自己需要进行扩展）\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxConsts.MenuButtonType.VIEW).handler(this.nullHandler).end();\n\n        // 关注事件\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxConsts.EventType.SUBSCRIBE).handler(this.subscribeHandler)\n            .end();\n\n        // 取消关注事件\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxConsts.EventType.UNSUBSCRIBE)\n            .handler(this.unsubscribeHandler).end();\n\n        // 上报地理位置事件\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxConsts.EventType.LOCATION).handler(this.locationHandler)\n            .end();\n\n        // 接收地理位置消息\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.LOCATION)\n            .handler(this.locationHandler).end();\n\n        // 扫码事件（这里使用了一个空的处理器，可以根据自己需要进行扩展）\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxConsts.EventType.SCAN).handler(this.nullHandler).end();\n\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxCpConsts.EventType.CHANGE_CONTACT).handler(new ContactChangeHandler()).end();\n\n        newRouter.rule().async(false).msgType(WxConsts.XmlMsgType.EVENT)\n            .event(WxCpConsts.EventType.ENTER_AGENT).handler(new EnterAgentHandler()).end();\n\n        // 默认\n        newRouter.rule().async(false).handler(this.msgHandler).end();\n\n        return newRouter;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple WxJava Channel Accounts in app.properties (Properties)\nDESCRIPTION: This snippet provides example configuration properties for the `wx-java-channel-multi-solon-plugin` in an `app.properties` file. It demonstrates how to configure parameters for multiple WeChat Channel accounts using a tenant ID prefix (e.g., `tenantId1`, `tenantId2`) and set up the configuration storage type (memory, jedis, redisson) including Redis connection details.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-channel-multi-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 视频号配置\n## 应用 1 配置(必填)\nwx.channel.apps.tenantId1.app-id=@appId\nwx.channel.apps.tenantId1.secret=@secret\n## 选填\nwx.channel.apps.tenantId1.use-stable-access-token=false\nwx.channel.apps.tenantId1.token=\nwx.channel.apps.tenantId1.aes-key=\n## 应用 2 配置(必填)\nwx.channel.apps.tenantId2.app-id=@appId\nwx.channel.apps.tenantId2.secret=@secret\n## 选填\nwx.channel.apps.tenantId2.use-stable-access-token=false\nwx.channel.apps.tenantId2.token=\nwx.channel.apps.tenantId2.aes-key=\n\n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson, redis_template\nwx.channel.config-storage.type=memory\n## 相关redis前缀配置: wx:channel:multi(默认)\nwx.channel.config-storage.key-prefix=wx:channel:multi\nwx.channel.config-storage.redis.host=127.0.0.1\nwx.channel.config-storage.redis.port=6379\nwx.channel.config-storage.redis.password=123456\n\n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认)\nwx.channel.config-storage.http-client-type=http_client\nwx.channel.config-storage.http-proxy-host=\nwx.channel.config-storage.http-proxy-port=\nwx.channel.config-storage.http-proxy-username=\nwx.channel.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.channel.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.channel.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configure Multiple WeChat Mini Apps: Spring Boot Properties\nDESCRIPTION: Configure multiple WeChat Mini App accounts, specifying the `app-id` and `app-secret` for each tenant ID. Optional settings for token, aes-key, stable access token, config storage type (memory, jedis, redisson), Redis connection details, and HTTP client settings can also be provided.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-miniapp-multi-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 公众号配置\n## 应用 1 配置(必填)\nwx.ma.apps.tenantId1.app-id=appId\nwx.ma.apps.tenantId1.app-secret=@secret\n## 选填\nwx.ma.apps.tenantId1.token=@token\nwx.ma.apps.tenantId1.aes-key=@aesKey\nwx.ma.apps.tenantId1.use-stable-access-token=@useStableAccessToken\n## 应用 2 配置(必填)\nwx.ma.apps.tenantId2.app-id=@appId\nwx.ma.apps.tenantId2.app-secret =@secret\n## 选填\nwx.ma.apps.tenantId2.token=@token\nwx.ma.apps.tenantId2.aes-key=@aesKey\nwx.ma.apps.tenantId2.use-stable-access-token=@useStableAccessToken\n   \n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson\nwx.ma.config-storage.type=memory\n## 相关redis前缀配置: wx:ma:multi(默认)\nwx.ma.config-storage.key-prefix=wx:ma:multi\nwx.ma.config-storage.redis.host=127.0.0.1\nwx.ma.config-storage.redis.port=6379\n\t  ## 单机和 sentinel 同时存在时，优先使用sentinel配置\n\t  # wx.ma.config-storage.redis.sentinel-ips=127.0.0.1:16379,127.0.0.1:26379\n\t  # wx.ma.config-storage.redis.sentinel-name=mymaster \n   \n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认), ok_http, jodd_http\nwx.ma.config-storage.http-client-type=http_client\nwx.ma.config-storage.http-proxy-host=\nwx.ma.config-storage.http-proxy-port=\nwx.ma.config-storage.http-proxy-username=\nwx.ma.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.ma.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.ma.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple WeChat Mini Apps in Solon (Properties)\nDESCRIPTION: Configure multiple WeChat Mini App instances by defining properties prefixed with `wx.ma.apps.<tenantId>`. You can specify `app-id`, `app-secret` (required), and optional settings like `token`, `aes-key`, `use-stable-access-token`, `config-storage`, and HTTP client details in your Solon `app.properties` file.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-miniapp-multi-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 公众号配置\n## 应用 1 配置(必填)\nwx.ma.apps.tenantId1.app-id=appId\nwx.ma.apps.tenantId1.app-secret=@secret\n## 选填\nwx.ma.apps.tenantId1.token=@token\nwx.ma.apps.tenantId1.aes-key=@aesKey\nwx.ma.apps.tenantId1.use-stable-access-token=@useStableAccessToken\n## 应用 2 配置(必填)\nwx.ma.apps.tenantId2.app-id=@appId\nwx.ma.apps.tenantId2.app-secret =@secret\n## 选填\nwx.ma.apps.tenantId2.token=@token\nwx.ma.apps.tenantId2.aes-key=@aesKey\nwx.ma.apps.tenantId2.use-stable-access-token=@useStableAccessToken\n   \n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson\nwx.ma.config-storage.type=memory\n## 相关redis前缀配置: wx:ma:multi(默认)\nwx.ma.config-storage.key-prefix=wx:ma:multi\nwx.ma.config-storage.redis.host=127.0.0.1\nwx.ma.config-storage.redis.port=6379\n\t  ## 单机和 sentinel 同时存在时，优先使用sentinel配置\n\t  # wx.ma.config-storage.redis.sentinel-ips=127.0.0.1:16379,127.0.0.1:26379\n\t  # wx.ma.config-storage.redis.sentinel-name=mymaster \n   \n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认), ok_http, jodd_http\nwx.ma.config-storage.http-client-type=http_client\nwx.ma.config-storage.http-proxy-host=\nwx.ma.config-storage.http-proxy-port=\nwx.ma.config-storage.http-proxy-username=\nwx.ma.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.ma.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.ma.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring WxJava Channel Starter Properties\nDESCRIPTION: Explains the required and optional configuration properties to be placed in `application.properties` for the wx-java-channel-spring-boot-starter. It covers essential fields like App ID and secret, optional message server settings, various configuration storage types (memory, redis), and HTTP client proxy configurations.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-channel-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 视频号配置(必填)\n## 视频号小店的appId和secret\nwx.channel.app-id=@appId\nwx.channel.secret=@secret\n# 视频号配置 选填\n## 设置视频号小店消息服务器配置的token\nwx.channel.token=@token\n## 设置视频号小店消息服务器配置的EncodingAESKey\nwx.channel.aes-key=\n## 支持JSON或者XML格式，默认JSON\nwx.channel.msg-data-format=JSON\n## 是否使用稳定版 Access Token\nwx.channel.use-stable-access-token=false\n\n\n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson, redis_template\nwx.channel.config-storage.type=memory\n## 相关redis前缀配置: wx:channel(默认)\nwx.channel.config-storage.key-prefix=wx:channel\nwx.channel.config-storage.redis.host=127.0.0.1\nwx.channel.config-storage.redis.port=6379\nwx.channel.config-storage.redis.password=123456\n\n# redis_template 方式使用spring data redis配置\nspring.data.redis.database=0\nspring.data.redis.host=127.0.0.1\nspring.data.redis.password=123456\nspring.data.redis.port=6379\n\n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认)\nwx.channel.config-storage.http-client-type=http_client\nwx.channel.config-storage.http-proxy-host=\nwx.channel.config-storage.http-proxy-port=\nwx.channel.config-storage.http-proxy-username=\nwx.channel.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.channel.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.channel.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring WeChat Services Multi-Properties YAML\nDESCRIPTION: Demonstrates the YAML structure for configuring multiple instances of WeChat Pay, MiniApp, and WeCom within a Spring Boot application. It shows how to define lists of configurations for Pay and MiniApp, and a list of agent configurations for WeCom, including required credentials and paths.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/others/weixin-java-config/README.md#_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nwechat:\n  pay: #微信服务商支付\n    configs:\n    - appId: wxe97b2x9c2b3d #spAppId\n      mchId: 16486610 #服务商商户\n      subAppId: wx118cexxe3c07679 #子appId\n      subMchId: 16496705 #子商户\n      apiV3Key: Dc1DBwSc094jAKDGR5aqqb7PTHr #apiV3密钥\n      privateKeyPath: classpath:cert/apiclient_key.pem #服务商证书文件，apiclient_key.pem证书文件的绝对路径或者以classpath:开头的类路径（可以配置绝对路径）\n      privateCertPath: classpath:cert/apiclient_cert.pem #apiclient_cert.pem证书文件的绝对路径或者以classpath:开头的类路径\n  miniapp: #小程序\n    configs:\n    - appid: wx118ce3xxc76ccg\n      secret: 8a132a276ee2f8fb58b1ed8f2\n      token: #微信小程序消息服务器配置的token\n      aesKey: #微信小程序消息服务器配置的EncodingAESKey\n      msgDataFormat: JSON\n  cp: #企业微信\n    corpId: wwa3be8efd2addfgj\n    appConfigs:\n    - agentId: 10001 #客户联系\n      secret: T5fTj1n-sBAT4rKNW5c9IYNfPdXZ8-oGol5tX\n      token: 2bSNqTcLtFYBUa1u2\n      aesKey: AXazu2Xyw44SNY1x8go2phn9p9B2O9oiEfqPN\n    - agentId: 10003 #会话内容存档\n      secret: xIpum7Yt4NMXcyxdzcQ2l_46BG4QIQDR57MhA\n      token:\n      aesKey:\n    - agentId: 3010011 #打卡\n      secret: 3i2Mhfusifaw_-04bMYI8OoKGxPe9mDALUxV\n      token:\n      aesKey:\n    - agentId: 19998 #通讯录同步\n      secret: rNyDae0Pg-3d-wqTd_ozMSJfF0DEjTCz3b_pr\n      token: xUke8yZciAZqImGZ\n      aesKey: EUTVyArqJcfnpFiudxjRpuOexNqBoPbwrNG3R\n    - agentId: 20000 #微盘\n      secret: D-TVMvUji7PZZdjhZOSgiy2MTuBd0OCdvI_zi\n      token:\n      aesKey:\n```\n\n----------------------------------------\n\nTITLE: Configuring Wx-Java-CP Properties (Spring Boot properties)\nDESCRIPTION: This configuration block illustrates how to set up the `wx-java-cp-spring-boot-starter` properties in a Spring Boot `application.properties` file. It covers essential settings like `corp-id` and `corp-secret`, along with optional configurations for `agent-id`, `token`, `aes-key`, message audit features, and custom `ConfigStorage` or HTTP proxy settings. These properties are used by the auto-configured beans like `WxCpService` and `WxCpConfigStorage`.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-cp-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 企业微信号配置(必填)\nwx.cp.corp-id = @corp-id\nwx.cp.corp-secret = @corp-secret\n# 选填\nwx.cp.agent-id = @agent-id\nwx.cp.token = @token\nwx.cp.aes-key = @aes-key\nwx.cp.msg-audit-priKey = @msg-audit-priKey\nwx.cp.msg-audit-lib-path = @msg-audit-lib-path\n# ConfigStorage 配置（选填）\nwx.cp.config-storage.type=memory # 配置类型: memory(默认), jedis, redisson, redistemplate\n# http 客户端配置（选填）\nwx.cp.config-storage.http-proxy-host=\nwx.cp.config-storage.http-proxy-port=\nwx.cp.config-storage.http-proxy-username=\nwx.cp.config-storage.http-proxy-password=\n# 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.cp.config-storage.max-retry-times=5\n# 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.cp.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Account WxCpService (Properties)\nDESCRIPTION: This configuration example in application.properties demonstrates how to set up multiple WeChat Work accounts using the `wx.cp.corps.<tenantId>` prefix, along with common settings for config storage and HTTP client.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-cp-multi-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 应用 1 配置\nwx.cp.corps.tenantId1.corp-id = @corp-id\nwx.cp.corps.tenantId1.corp-secret = @corp-secret\n## 选填\nwx.cp.corps.tenantId1.agent-id = @agent-id\nwx.cp.corps.tenantId1.token = @token\nwx.cp.corps.tenantId1.aes-key = @aes-key\nwx.cp.corps.tenantId1.msg-audit-priKey = @msg-audit-priKey\nwx.cp.corps.tenantId1.msg-audit-lib-path = @msg-audit-lib-path\n\n# 应用 2 配置\nwx.cp.corps.tenantId2.corp-id = @corp-id\nwx.cp.corps.tenantId2.corp-secret = @corp-secret\n## 选填\nwx.cp.corps.tenantId2.agent-id = @agent-id\nwx.cp.corps.tenantId2.token = @token\nwx.cp.corps.tenantId2.aes-key = @aes-key\nwx.cp.corps.tenantId2.msg-audit-priKey = @msg-audit-priKey\nwx.cp.corps.tenantId2.msg-audit-lib-path = @msg-audit-lib-path\n\n# 公共配置\n## ConfigStorage 配置（选填）\nwx.cp.config-storage.type=memory # 配置类型: memory(默认), jedis, redisson, redistemplate\n## http 客户端配置（选填）\n## # http客户端类型: http_client(默认), ok_http, jodd_http\nwx.cp.config-storage.http-client-type=http_client\nwx.cp.config-storage.http-proxy-host=\nwx.cp.config-storage.http-proxy-port=\nwx.cp.config-storage.http-proxy-username=\nwx.cp.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.cp.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.cp.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Handling WeChat Component Ticket Callback in Java\nDESCRIPTION: This method handles the callback from the WeChat Open Platform when it sends the component ticket. It validates the signature, decrypts the incoming XML message containing the ticket, and routes the message for processing by the WeChat Open Service component.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/weixin-java-open/README.md#_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\n@RestController\n@RequestMapping(\"notify\")\npublic class NotifyController extends WechatThridBaseController {\n    @Autowired\n    protected WxOpenServiceDemo wxOpenService;\n    @RequestMapping(\"receive_ticket\")\n    public Object receiveTicket(@RequestBody(required = false) String requestBody, @RequestParam(\"timestamp\") String timestamp,\n                                @RequestParam(\"nonce\") String nonce, @RequestParam(\"signature\") String signature,\n                                @RequestParam(name = \"encrypt_type\", required = false) String encType,\n                                @RequestParam(name = \"msg_signature\", required = false) String msgSignature) {\n        this.logger.info(\n                \"\\n接收微信请求：[signature=[{}], encType=[{}], msgSignature=[{}],\"\n                        + \" timestamp=[{}], nonce=[{}], requestBody=[\\n{}\\n] \",\n                signature, encType, msgSignature, timestamp, nonce, requestBody);\n\n        if (!StringUtils.equalsIgnoreCase(\"aes\", encType) || !wxOpenService.getWxOpenComponentService().checkSignature(timestamp, nonce, signature)) {\n            throw new IllegalArgumentException(\"非法请求，可能属于伪造的请求！\");\n        }\n\n        // aes加密的消息\n        WxOpenXmlMessage inMessage = WxOpenXmlMessage.fromEncryptedXml(requestBody, wxOpenService.getWxOpenConfigStorage(), timestamp, nonce, msgSignature);\n        this.logger.debug(\"\\n消息解密后内容为：\\n{} \", inMessage.toString());\n        String out = null;\n        try {\n            out = wxOpenService.getWxOpenComponentService().route(inMessage);\n        } catch (WxErrorException e) {\n            throw new ResponseException(ErrorCodeEnum.ERROR, e);\n        }\n\n        this.logger.debug(\"\\n组装回复信息：{}\", out);\n\n        return out;\n    }\n    @RequestMapping(\"{appId}/callback\")\n    public Object callback(@RequestBody(required = false)String requestBody,\n                           @PathVariable (\"appId\") String appId,\n                           @RequestParam(\"signature\") String signature,\n                           @RequestParam(\"timestamp\") String timestamp,\n                           @RequestParam(\"nonce\") String nonce,\n                           @RequestParam(\"openid\") String openid,\n                           @RequestParam(\"encrypt_type\") String encType,\n                           @RequestParam(\"msg_signature\") String msgSignature) {\n        this.logger.info(\n                \"\\n接收微信请求：[appId=[{}], openid=[{}], signature=[{}], encType=[{}], msgSignature=[{}],\"\n                        + \" timestamp=[{}], nonce=[{}], requestBody=[\\n{}\\n] \",\n                appId, openid, signature, encType, msgSignature, timestamp, nonce, requestBody);\n        logger.info(\"query:\"+getHttpServletRequest().getQueryString()+\"\\nbody:\"+requestBody);\n        if (!StringUtils.equalsIgnoreCase(\"aes\", encType) || !wxOpenService.getWxOpenComponentService().checkSignature(timestamp, nonce, signature)) {\n            throw new IllegalArgumentException(\"非法请求，可能属于伪造的请求！\");\n        }\n\n        String out = \"\";\n        // aes加密的消息\n        WxMpXmlMessage inMessage = WxOpenXmlMessage.fromEncryptedMpXml(requestBody, wxOpenService.getWxOpenConfigStorage(), timestamp, nonce, msgSignature);\n        this.logger.debug(\"\\n消息解密后内容为：\\n{} \", inMessage.toString());\n        // 全网发布测试用例\n        if (StringUtils.equalsAnyIgnoreCase(appId, \"wxd101a85aa106f53e\", \"wx570bc396a51b8ff8\")) {\n            try {\n                if (StringUtils.equals(inMessage.getMsgType(), \"text\")) {\n                    if (StringUtils.equals(inMessage.getContent(), \"TESTCOMPONENT_MSG_TYPE_TEXT\")) {\n                        out = new WxOpenCryptUtil(wxOpenService.getWxOpenConfigStorage()).encrypt(\n                                WxMpXmlOutMessage.TEXT().content(\"TESTCOMPONENT_MSG_TYPE_TEXT_callback\")\n                                        .fromUser(inMessage.getToUser())\n                                        .toUser(inMessage.getFromUser())\n                                        .build()\n                                        .toXml()\n                        );\n                    } else if (StringUtils.startsWith(inMessage.getContent(), \"QUERY_AUTH_CODE:\")) {\n                        String msg = inMessage.getContent().replace(\"QUERY_AUTH_CODE:\", \"\") + \"_from_api\";\n                        WxMpKefuMessage kefuMessage = WxMpKefuMessage.TEXT().content(msg).toUser(inMessage.getFromUser()).build();\n                        wxOpenService.getWxOpenComponentService().getWxMpServiceByAppid(appId).getKefuService().sendKefuMessage(kefuMessage);\n                    }\n                } else if (StringUtils.equals(inMessage.getMsgType(), \"event\")) {\n                    WxMpKefuMessage kefuMessage = WxMpKefuMessage.TEXT().content(inMessage.getEvent() + \"from_callback\").toUser(inMessage.getFromUser()).build();\n                    wxOpenService.getWxOpenComponentService().getWxMpServiceByAppid(appId).getKefuService().sendKefuMessage(kefuMessage);\n                }\n            } catch (WxErrorException e) {\n                logger.error(\"callback\", e);\n            }\n        }\n        return out;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple WxMaService Instances: Java\nDESCRIPTION: Demonstrates how to use the auto-injected `WxMaMultiServices` bean to retrieve `WxMaService` instances for specific configured tenant IDs. You can then access various sub-services like `getUserService()` for a particular mini app account.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-miniapp-multi-spring-boot-starter/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.binarywang.spring.starter.wxjava.miniapp.service.WxMaMultiServices;\nimport com.binarywang.spring.starter.wxjava.miniapp.service.WxMaMultiServices;\nimport cn.binarywang.wx.miniapp.api.WxMaService;\nimport cn.binarywang.wx.miniapp.api.WxMaUserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoService {\n  @Autowired\n  private WxMaMultiServices wxMaMultiServices;\n\n  public void test() {\n    // 应用 1 的 WxMaService\n    WxMaService wxMaService1 = wxMaMultiServices.getWxMaService(\"tenantId1\");\n    WxMaUserService userService1 = wxMaService1.getUserService();\n    userService1.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 2 的 WxMaService\n    WxMaService wxMaService2 = wxMaMultiServices.getWxMaService(\"tenantId2\");\n    WxMaUserService userService2 = wxMaService2.getUserService();\n    userService2.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 3 的 WxMaService\n    WxMaService wxMaService3 = wxMaMultiServices.getWxMaService(\"tenantId3\");\n    // 判断是否为空\n    if (wxMaService3 == null) {\n      // todo wxMaService3 为空，请先配置 tenantId3 微信公众号应用参数\n      return;\n    }\n    WxMaUserService userService3 = wxMaService3.getUserService();\n    userService3.userInfo(\"xxx\");\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WxPayService with Multi-Properties Java\nDESCRIPTION: A Spring `@Configuration` class that initializes and configures the `WxPayService` bean using properties loaded from `WxPayProperties`. It maps the list of `WxPayProperties.Config` objects into a map of `WxPayConfig` objects, keyed by `subMchId`, and sets this multi-configuration on the `WxPayServiceImpl`. Requires the `weixin-java-pay` library and Spring Boot.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/others/weixin-java-config/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\n@Configuration\n@EnableConfigurationProperties(WxPayProperties.class)\n@AllArgsConstructor\npublic class WxPayConfiguration {\n\n    private WxPayProperties properties;\n\n    @Bean\n    public WxPayService wxPayService() {\n\n        // 多配置\n        WxPayService wxPayService = new WxPayServiceImpl();\n        Map<String, WxPayConfig> payConfigs = this.properties.getConfigs().stream().map(config -> {\n            WxPayConfig payConfig = new WxPayConfig();\n            payConfig.setAppId(StringUtils.trimToNull(config.getAppId()));\n            payConfig.setMchId(StringUtils.trimToNull(config.getMchId()));\n            payConfig.setSubAppId(StringUtils.trimToNull(config.getSubAppId()));\n            payConfig.setSubMchId(StringUtils.trimToNull(config.getSubMchId()));\n            payConfig.setApiV3Key(StringUtils.trimToNull(config.getApiV3Key()));\n            payConfig.setPrivateKeyPath(StringUtils.trimToNull(config.getPrivateKeyPath()));\n            payConfig.setPrivateCertPath(StringUtils.trimToNull(config.getPrivateCertPath()));\n\n            // 可以指定是否使用沙箱环境\n            payConfig.setUseSandboxEnv(false);\n            return payConfig;\n        }).collect(Collectors.toMap(config -> config.getSubMchId(), a -> a));\n\n        wxPayService.setMultiConfig(payConfigs);\n        return wxPayService;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Using WxMpMultiServices to Access Multiple Accounts (Java)\nDESCRIPTION: This Java snippet demonstrates how to inject the `WxMpMultiServices` bean provided by the starter.\nIt shows how to retrieve specific `WxMpService` instances for different configured tenant IDs and includes a check for null to handle cases where a tenant ID is not configured.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-mp-multi-spring-boot-starter/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.binarywang.spring.starter.wxjava.mp.service.WxMaMultiServices;\nimport me.chanjar.weixin.mp.api.WxMpService;\nimport me.chanjar.weixin.mp.api.WxMpUserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoService {\n  @Autowired\n  private WxMpMultiServices wxMpMultiServices;\n\n  public void test() {\n    // 应用 1 的 WxMpService\n    WxMpService wxMpService1 = wxMpMultiServices.getWxMpService(\"tenantId1\");\n    WxMpUserService userService1 = wxMpService1.getUserService();\n    userService1.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 2 的 WxMpService\n    WxMpService wxMpService2 = wxMpMultiServices.getWxMpService(\"tenantId2\");\n    WxMpUserService userService2 = wxMpService2.getUserService();\n    userService2.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 3 的 WxMpService\n    WxMpService wxMpService3 = wxMpMultiServices.getWxMpService(\"tenantId3\");\n    // 判断是否为空\n    if (wxMpService3 == null) {\n      // todo wxMpService3 为空，请先配置 tenantId3 微信公众号应用参数\n      return;\n    }\n    WxMpUserService userService3 = wxMpService3.getUserService();\n    userService3.userInfo(\"xxx\");\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring wx-java-miniapp Spring Boot Starter (Properties)\nDESCRIPTION: This snippet provides example configuration properties for integrating the wx-java-miniapp-spring-boot-starter within a Spring Boot application's application.properties file. It includes mandatory settings like appid, secret, token, and aesKey, along with optional configurations for storage (e.g., Redis) and HTTP client settings.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-miniapp-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 小程序配置(必填)\nwx.miniapp.appid = appId\nwx.miniapp.secret = @secret\nwx.miniapp.token = @token\nwx.miniapp.aesKey = @aesKey\nwx.miniapp.msgDataFormat = @msgDataFormat                  # 消息格式，XML或者JSON.\nwx.miniapp.use-stable-access-token=@useStableAccessToken\n# 存储配置redis(可选)\n# 注意: 指定redis.host值后不会使用容器注入的redis连接(JedisPool)\nwx.miniapp.config-storage.type = Jedis                     # 配置类型: Memory(默认), Jedis, RedisTemplate\nwx.miniapp.config-storage.key-prefix = wa                  # 相关redis前缀配置: wa(默认)\nwx.miniapp.config-storage.redis.host = 127.0.0.1\nwx.miniapp.config-storage.redis.port = 6379\n# http客户端配置\nwx.miniapp.config-storage.http-client-type=HttpClient      # http客户端类型: HttpClient(默认), OkHttp, JoddHttp\nwx.miniapp.config-storage.http-proxy-host=\nwx.miniapp.config-storage.http-proxy-port=\nwx.miniapp.config-storage.http-proxy-username=\nwx.miniapp.config-storage.http-proxy-password=\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple WxMaService Instances in Solon (Java)\nDESCRIPTION: Demonstrates how to inject the `WxMaMultiServices` component in a Solon application and retrieve a specific `WxMaService` instance for a given tenant ID (configured in properties) using the `getWxMaService()` method. It also shows how to check if a service instance for a tenant exists.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-miniapp-multi-solon-plugin/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.binarywang.solon.wxjava.miniapp.service.WxMaMultiServices;\nimport cn.binarywang.wx.miniapp.api.WxMaService;\nimport cn.binarywang.wx.miniapp.api.WxMaUserService;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\n\n@Component\npublic class DemoService {\n  @Inject\n  private WxMaMultiServices wxMaMultiServices;\n\n  public void test() {\n    // 应用 1 的 WxMaService\n    WxMaService wxMaService1 = wxMaMultiServices.getWxMaService(\"tenantId1\");\n    WxMaUserService userService1 = wxMaService1.getUserService();\n    userService1.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 2 的 WxMaService\n    WxMaService wxMaService2 = wxMaMultiServices.getWxMaService(\"tenantId2\");\n    WxMaUserService userService2 = wxMaService2.getUserService();\n    userService2.userInfo(\"xxx\");\n    // todo ...\n\n    // 应用 3 的 WxMaService\n    WxMaService wxMaService3 = wxMaMultiServices.getWxMaService(\"tenantId3\");\n    // 判断是否为空\n    if (wxMaService3 == null) {\n      // todo wxMaService3 为空，请先配置 tenantId3 微信公众号应用参数\n      return;\n    }\n    WxMaUserService userService3 = wxMaService3.getUserService();\n    userService3.userInfo(\"xxx\");\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WxJava Open Starter - Spring Boot - Properties\nDESCRIPTION: Explains how to configure essential settings for the wx-java-open Spring Boot starter in `application.properties`. It covers mandatory Weixin Open Platform configuration (appId, secret, token, aesKey), optional Redis config storage settings, and HTTP client configuration like proxy settings and retry parameters.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-open-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: properties\nCODE:\n```\n# 公众号配置(必填)\nwx.open.appId = appId\nwx.open.secret = @secret\nwx.open.token = @token\nwx.open.aesKey = @aesKey\n# 存储配置redis(可选)\n# 优先注入容器的(JedisPool, RedissonClient), 当配置了wx.open.config-storage.redis.host, 不会使用容器注入redis连接配置\nwx.open.config-storage.type = redis                     # 配置类型: memory(默认), redis(jedis), jedisson, redisson, redistemplate\nwx.open.config-storage.key-prefix = wx                  # 相关redis前缀配置: wx(默认)\nwx.open.config-storage.redis.host = 127.0.0.1\nwx.open.config-storage.redis.port = 6379\n# http客户端配置\nwx.open.config-storage.http-client-type=httpclient      # http客户端类型: httpclient(默认)\nwx.open.config-storage.http-proxy-host=\nwx.open.config-storage.http-proxy-port=\nwx.open.config-storage.http-proxy-username=\nwx.open.config-storage.http-proxy-password=\n# 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.open.config-storage.max-retry-times=5\n# 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.open.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring wx-java-channel-solon-plugin Properties - Properties\nDESCRIPTION: Defines essential and optional configuration properties for the wx-java-channel-solon-plugin in the `app.properties` file, covering WeChat Channel credentials, message server settings, config storage options (type, Redis details), and HTTP client configurations.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-channel-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 视频号配置(必填)\n## 视频号小店的appId和secret\nwx.channel.app-id=@appId\nwx.channel.secret=@secret\n# 视频号配置 选填\n## 设置视频号小店消息服务器配置的token\nwx.channel.token=@token\n## 设置视频号小店消息服务器配置的EncodingAESKey\nwx.channel.aes-key=\n## 支持JSON或者XML格式，默认JSON\nwx.channel.msg-data-format=JSON\n## 是否使用稳定版 Access Token\nwx.channel.use-stable-access-token=false\n\n\n# ConfigStorage 配置（选填）\n## 配置类型: memory(默认), jedis, redisson, redis_template\nwx.channel.config-storage.type=memory\n## 相关redis前缀配置: wx:channel(默认)\nwx.channel.config-storage.key-prefix=wx:channel\nwx.channel.config-storage.redis.host=127.0.0.1\nwx.channel.config-storage.redis.port=6379\nwx.channel.config-storage.redis.password=123456\n\n\n# http 客户端配置（选填）\n## # http客户端类型: http_client(默认)\nwx.channel.config-storage.http-client-type=http_client\nwx.channel.config-storage.http-proxy-host=\nwx.channel.config-storage.http-proxy-port=\nwx.channel.config-storage.http-proxy-username=\nwx.channel.config-storage.http-proxy-password=\n## 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.channel.config-storage.max-retry-times=5\n## 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.channel.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring WxJava Open Solon Plugin (Properties)\nDESCRIPTION: This configuration snippet for app.properties sets up the WxJava Open plugin. It includes essential fields like appId, secret, token, and aesKey, and allows configuring optional settings for state storage (e.g., Redis) and HTTP client proxies.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-open-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 公众号配置(必填)\nwx.open.appId = appId\nwx.open.secret = @secret\nwx.open.token = @token\nwx.open.aesKey = @aesKey\n# 存储配置redis(可选)\n# 优先注入容器的(JedisPool, RedissonClient), 当配置了wx.open.config-storage.redis.host, 不会使用容器注入redis连接配置\nwx.open.config-storage.type = redis                     # 配置类型: memory(默认), redis(jedis), jedis, redisson, redistemplate\nwx.open.config-storage.key-prefix = wx                  # 相关redis前缀配置: wx(默认)\nwx.open.config-storage.redis.host = 127.0.0.1\nwx.open.config-storage.redis.port = 6379\n# http客户端配置\nwx.open.config-storage.http-client-type=httpclient      # http客户端类型: httpclient(默认)\nwx.open.config-storage.http-proxy-host=\nwx.open.config-storage.http-proxy-port=\nwx.open.config-storage.http-proxy-username=\nwx.open.config-storage.http-proxy-password=\n# 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.open.config-storage.max-retry-times=5\n# 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.open.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Accessing Multi-Account WxCpService (Java)\nDESCRIPTION: This Java code example shows how to inject the WxCpMultiServices bean and retrieve specific WxCpService instances for different configured tenant IDs, demonstrating how to call methods like getting the user service.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-cp-multi-spring-boot-starter/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.binarywang.spring.starter.wxjava.cp.service.WxCpMultiServices;\nimport me.chanjar.weixin.cp.api.WxCpService;\nimport me.chanjar.weixin.cp.api.WxCpUserService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoService {\n  @Autowired\n  private WxCpMultiServices wxCpMultiServices;\n\n  public void test() {\n    // 应用 1 的 WxCpService\n    WxCpService wxCpService1 = wxCpMultiServices.getWxCpService(\"tenantId1\");\n    WxCpUserService userService1 = wxCpService1.getUserService();\n    userService1.getUserId(\"xxx\");\n    // todo ...\n\n    // 应用 2 的 WxCpService\n    WxCpService wxCpService2 = wxCpMultiServices.getWxCpService(\"tenantId2\");\n    WxCpUserService userService2 = wxCpService2.getUserService();\n    userService2.getUserId(\"xxx\");\n    // todo ...\n\n    // 应用 3 的 WxCpService\n    WxCpService wxCpService3 = wxCpMultiServices.getWxCpService(\"tenantId3\");\n    // 判断是否为空\n    if (wxCpService3 == null) {\n      // todo wxCpService3 为空，请先配置 tenantId3 企业微信应用参数\n      return;\n    }\n    WxCpUserService userService3 = wxCpService3.getUserService();\n    userService3.getUserId(\"xxx\");\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WeChat Work Application Properties - Java\nDESCRIPTION: This Java class uses Spring Boot's @ConfigurationProperties to load configuration details for multiple WeChat Work applications from application configuration files (e.g., application.yml). It defines the corporate ID (corpId) and a list of AppConfig objects, each containing specific details like agentId, secret, token, and aesKey for a single application, allowing easy management of multiple WeChat Work accounts or applications.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/others/weixin-java-config/README.md#_snippet_5\n\nLANGUAGE: Java\nCODE:\n```\n@Getter\n@Setter\n@ConfigurationProperties(prefix = \"wechat.cp\")\npublic class WxCpProperties {\n\n  /**\n   * 设置企业微信的corpId\n   */\n  private String corpId;\n\n  private List<AppConfig> appConfigs;\n\n  @Getter\n  @Setter\n  public static class AppConfig {\n    /**\n     * 设置企业微信应用的AgentId\n     */\n    private Integer agentId;\n\n    /**\n     * 设置企业微信应用的Secret\n     */\n    private String secret;\n\n    /**\n     * 设置企业微信应用的token\n     */\n    private String token;\n\n    /**\n     * 设置企业微信应用的EncodingAESKey\n     */\n    private String aesKey;\n\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for WxJava Channel Starter XML\nDESCRIPTION: Describes how to add the necessary Maven dependencies to a project's `pom.xml` file to include the wx-java-channel-multi-spring-boot-starter. It also lists optional dependencies for different Redis-based configuration storage methods (Jedis, Redisson, Spring Data Redis).\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-channel-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>com.github.binarywang</groupId>\n        <artifactId>wx-java-channel-multi-spring-boot-starter</artifactId>\n        <version>${version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为jedis 则引入jedis -->\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n        <version>${jedis.version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为redisson 则引入redisson -->\n    <dependency>\n        <groupId>org.redisson</groupId>\n        <artifactId>redisson</artifactId>\n        <version>${redisson.version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为redis_template 则引入spring data redis -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-redis</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Configure WeChat Pay V3 Service Provider API in YAML\nDESCRIPTION: This YAML snippet outlines the configuration for the WeChat Pay V3 Service Provider API, using a list under `configs` to manage multiple service provider/sub-merchant setups. Each configuration requires service provider and sub-merchant IDs, API key, certificate serial number, and certificate paths.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-pay-solon-plugin/README.md#_snippet_3\n\nLANGUAGE: YAML\nCODE:\n```\nwx:\n  pay: #微信服务商支付\n    configs:\n    - appId: wxe97b2x9c2b3d #spAppId\n      mchId: 16486610 #服务商商户\n      subAppId: wx118cexxe3c07679 #子appId\n      subMchId: 16496705 #子商户\n      apiV3Key: Dc1DBwSc094jAKDGR5aqqb7PTHr #apiV3密钥\n      privateKeyPath: classpath:cert/apiclient_key.pem #服务商证书文件，apiclient_key.pem证书文件的绝对路径或者以classpath:开头的类路径（可以配置绝对路径）\n      privateCertPath: classpath:cert/apiclient_cert.pem #apiclient_cert.pem证书文件的绝对路径或者以classpath:开头的类路径\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependencies for WxJava Channel Multi-Solon Plugin (XML)\nDESCRIPTION: This snippet shows the required Maven dependencies to include the `wx-java-channel-multi-solon-plugin` in your project. It also lists optional dependencies for different configuration storage types (Jedis, Redisson for Redis). Dependencies must be added to the `<dependencies>` section of your `pom.xml` file.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-channel-multi-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>com.github.binarywang</groupId>\n        <artifactId>wx-java-channel-multi-solon-plugin</artifactId>\n        <version>${version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为jedis 则引入jedis -->\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n        <version>${jedis.version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为redisson 则引入redisson -->\n    <dependency>\n        <groupId>org.redisson</groupId>\n        <artifactId>redisson</artifactId>\n        <version>${redisson.version}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Defining WeChat MiniApp Configuration Properties Java\nDESCRIPTION: A Spring Boot `@ConfigurationProperties` class to load multi-configuration settings for WeChat MiniApp. It defines a list of `Config` objects, each representing a single MiniApp instance with properties like app ID, secret, token, AES key, and message data format.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/others/weixin-java-config/README.md#_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n@Setter\n@Getter\n@ConfigurationProperties(prefix = \"wechat.miniapp\")\npublic class WxMaProperties {\n\n    private List<Config> configs;\n\n    @Data\n    public static class Config {\n\n        /**\n         * 设置微信小程序的appid\n         */\n        private String appid;\n\n        /**\n         * 设置微信小程序的Secret\n         */\n        private String secret;\n\n        /**\n         * 设置微信小程序消息服务器配置的token\n         */\n        private String token;\n\n        /**\n         * 设置微信小程序消息服务器配置的EncodingAESKey\n         */\n        private String aesKey;\n\n        /**\n         * 消息格式，XML或者JSON\n         */\n        private String msgDataFormat;\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configure WeChat Pay V3 API in YAML\nDESCRIPTION: This YAML snippet shows the configuration structure for the WeChat Pay V3 API. It requires parameters such as `appId`, `mchId`, `apiV3Key`, `certSerialNo`, and the paths to the private key (`privateKeyPath`) and certificate files (`privateCertPath`). Paths can be absolute or relative to the classpath.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-pay-solon-plugin/README.md#_snippet_2\n\nLANGUAGE: YAML\nCODE:\n```\nwx:\n  pay:\n    appId: xxxxxxxxxxx\n    mchId: 15xxxxxxxxx #商户id\n    apiV3Key: Dc1DBwSc094jACxxxxxxxxxxxxxxx #V3密钥\n    certSerialNo: 62C6CEAA360BCxxxxxxxxxxxxxxx\n    privateKeyPath: classpath:cert/apiclient_key.pem #apiclient_key.pem证书文件的绝对路径或者以classpath:开头的类路径\n    privateCertPath: classpath:cert/apiclient_cert.pem #apiclient_cert.pem证书文件的绝对路径或者以classpath:开头的类路径\n```\n\n----------------------------------------\n\nTITLE: Using WxChannelService to Get Shop Info - Java\nDESCRIPTION: Demonstrates how to inject the `WxChannelService` into a Solon component and use it to call the WeChat Channel API, specifically retrieving the shop's basic information and encoding the response as a JSON string.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-channel-solon-plugin/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport me.chanjar.weixin.channel.api.WxChannelService;\nimport me.chanjar.weixin.channel.bean.shop.ShopInfoResponse;\nimport me.chanjar.weixin.channel.util.JsonUtils;\nimport me.chanjar.weixin.common.error.WxErrorException;\nimport org.noear.solon.annotation.Inject;\n\n@Component\npublic class DemoService {\n  @Inject\n  private WxChannelService wxChannelService;\n\n  public String getShopInfo() throws WxErrorException {\n    // 获取店铺基本信息\n    ShopInfoResponse response = wxChannelService.getBasicService().getShopInfo();\n    // 此处为演示，如果要返回response的结果，建议自己封装一个VO，避免直接返回response\n    return JsonUtils.encode(response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WeChat Pay Configuration Properties Java\nDESCRIPTION: A Spring Boot `@ConfigurationProperties` class designed to load multi-configuration settings for WeChat Pay from the application's configuration file (e.g., application.yml). It includes a nested class `Config` to represent individual WeChat Pay instances, mapping properties like app ID, merchant ID, API key, and certificate paths.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/others/weixin-java-config/README.md#_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Data\n@ConfigurationProperties(prefix = \"wechat.pay\")\npublic class WxPayProperties {\n\n    private List<Config> configs;\n\n    @Getter\n    @Setter\n    public static class Config {\n\n        private String appId;\n        private String mchId;\n        private String subAppId;\n        private String subMchId;\n        private String apiV3Key;\n        private String privateKeyPath;\n        private String privateCertPath;\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Adding wx-java-mp-multi-solon-plugin Dependency (Maven XML)\nDESCRIPTION: This Maven dependency snippet adds the `wx-java-mp-multi-solon-plugin` to your project's `pom.xml`. This plugin integrates the wx-java library with the Solon framework, providing capabilities for managing multiple WeChat Official Accounts within a single application instance. Ensure you replace `${version}` with the actual version of the plugin.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-mp-multi-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-mp-multi-solon-plugin</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependencies for wx-java-channel-solon-plugin - XML\nDESCRIPTION: Includes the core plugin dependency and optional dependencies for specific config storage types (Jedis, Redisson) required for the wx-java-channel-solon-plugin. Ensure the correct versions are specified.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-channel-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>com.github.binarywang</groupId>\n        <artifactId>wx-java-channel-solon-plugin</artifactId>\n        <version>${version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为jedis 则引入jedis -->\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n        <version>${jedis.version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为redisson 则引入redisson -->\n    <dependency>\n        <groupId>org.redisson</groupId>\n        <artifactId>redisson</artifactId>\n        <version>${redisson.version}</version>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Adding Wx-Java-CP Dependency (Maven XML)\nDESCRIPTION: This snippet demonstrates how to add the `wx-java-cp-spring-boot-starter` dependency to a Maven project's `pom.xml`. Including this dependency is the first step to integrating the Weixin Corporate Account API functionality into a Spring Boot application using the provided starter. It requires a standard Maven build setup.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-cp-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-cp-spring-boot-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for wx-java-miniapp-spring-boot-starter (XML)\nDESCRIPTION: This snippet shows the required Maven dependency declaration to include the wx-java-miniapp-spring-boot-starter in your project's pom.xml file. It specifies the artifact's group ID, artifact ID, and a placeholder for the version, which should be replaced with the desired starter version.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-miniapp-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-miniapp-spring-boot-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency for wx-java-qidian-spring-boot-starter XML\nDESCRIPTION: This snippet shows the Maven dependency configuration required to include the wx-java-qidian-spring-boot-starter library in a project's pom.xml file. It allows the Spring Boot application to utilize the WeChat Qidian integration provided by the starter. Ensure ${version} is replaced with the actual library version.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-qidian-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-qidian-spring-boot-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for wx-java-mp-solon-plugin\nDESCRIPTION: To integrate the wx-java-mp library with Solon, add this dependency block to your project's pom.xml file. Replace ${version} with the appropriate plugin version. This makes the plugin's classes and services available to your Solon application.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-mp-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-mp-solon-plugin</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Committing Changes and Pushing - Git Bash\nDESCRIPTION: Shows how to stage all modified and added files (-am), create a commit with a message (referencing an issue), and push the committed changes to the origin (personal) repository on GitHub. This prepares the changes for a Pull Request.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/CONTRIBUTING.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ #do some change on the content\n$ git commit -am \"Fix issue #1: change something\"\n$ git push\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Setting User Info - Git Bash\nDESCRIPTION: Demonstrates how to clone the forked WxJava repository from GitHub using SSH and configure the local Git client with user name and email. This is the first step in the PR-based contribution workflow.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/CONTRIBUTING.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone git@github.com:{your-github-username}/WxJava.git\n$ cd WxJava\n$ git config user.name \"yourname\"\n$ git config user.email \"your email\"\n```\n\n----------------------------------------\n\nTITLE: Adding Dependency - WxJava Open Spring Boot Starter - XML\nDESCRIPTION: Describes how to include the `wx-java-open-spring-boot-starter` in a Maven `pom.xml` file. It requires the `groupId`, `artifactId`, and `version` of the starter. This makes the starter's features available in the Spring Boot application.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-open-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-open-spring-boot-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding WxJava Open Solon Plugin Dependency (Maven XML)\nDESCRIPTION: This XML snippet adds the required Maven dependency for the WxJava Open Solon Plugin. It specifies the group ID, artifact ID, and version of the plugin library, making it available for use in the project.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-open-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-open-solon-plugin</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency for wx-java-pay-solon-plugin\nDESCRIPTION: This XML snippet shows the required Maven dependency to include the `wx-java-pay-solon-plugin` in a Solon project's `pom.xml` file. Ensure you replace `${version}` with the actual plugin version you intend to use.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-pay-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n\n    <dependency>\n        <groupId>com.github.binarywang</groupId>\n        <artifactId>wx-java-pay-solon-plugin</artifactId>\n        <version>${version}</version>\n    </dependency>\n \n```\n\n----------------------------------------\n\nTITLE: Adding WxJava CP Solon Plugin Dependency (Maven/Gradle) - XML\nDESCRIPTION: Provides the XML snippet for including the `wx-java-cp-solon-plugin` artifact as a dependency in a project's build configuration (typically `pom.xml` for Maven). This is the first step to use the plugin.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-cp-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-cp-solon-plugin</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configure WeChat Pay V2 API in YAML\nDESCRIPTION: This YAML snippet provides the configuration structure for the WeChat Pay V2 API within the `app.yml` file. Essential parameters like `appId`, `mchId`, `mchKey`, and `keyPath` must be provided for successful API communication.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-pay-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: YAML\nCODE:\n```\nwx:\n  pay:\n    appId: \n    mchId: \n    mchKey: \n    keyPath:\n```\n\n----------------------------------------\n\nTITLE: Add Maven Dependency: wx-java-miniapp-multi-spring-boot-starter XML\nDESCRIPTION: Add the `wx-java-miniapp-multi-spring-boot-starter` dependency to your Maven project's `pom.xml` file. This integrates the multi-account WeChat Mini App capabilities into your Spring Boot application.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-miniapp-multi-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-miniapp-multi-spring-boot-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for wx-java-mp-multi-spring-boot-starter (XML)\nDESCRIPTION: This snippet shows the required Maven dependency configuration to include the wx-java-mp-multi-spring-boot-starter library in a project's pom.xml file.\nIt specifies the groupId, artifactId, and a placeholder for the version.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-mp-multi-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-mp-multi-spring-boot-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Importing wx-java-cp-multi-spring-boot-starter Dependency (Maven)\nDESCRIPTION: This snippet shows the required Maven dependency to include the wx-java-cp-multi-spring-boot-starter in your Spring Boot project, enabling multi-account WeChat Work service configuration.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-cp-multi-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-cp-multi-spring-boot-starter</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for wx-java-cp-multi-solon-plugin\nDESCRIPTION: This XML snippet shows the required Maven dependency declaration to include the wx-java-cp-multi-solon-plugin in your project. Add this to the `<dependencies>` section of your `pom.xml` file.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-cp-multi-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-cp-multi-solon-plugin</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding wx-java-channel-multi Spring Boot Starter Maven Dependency\nDESCRIPTION: This XML snippet demonstrates how to include the `wx-java-channel-multi-spring-boot-starter` dependency in a Maven project's `pom.xml`. It also shows optional dependencies for different Redis storage implementations (Jedis, Redisson, Spring Data Redis). Dependencies are required to use the starter.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-channel-multi-spring-boot-starter/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependencies>\n    <dependency>\n        <groupId>com.github.binarywang</groupId>\n        <artifactId>wx-java-channel-multi-spring-boot-starter</artifactId>\n        <version>${version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为jedis 则引入jedis -->\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n        <version>${jedis.version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为redisson 则引入redisson -->\n    <dependency>\n        <groupId>org.redisson</groupId>\n        <artifactId>redisson</artifactId>\n        <version>${redisson.version}</version>\n    </dependency>\n\n    <!-- 配置存储方式为redis_template 则引入spring data redis -->\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-data-redis</artifactId>\n    </dependency>\n</dependencies>\n```\n\n----------------------------------------\n\nTITLE: Access WxChannelService for Multiple Accounts using WxChannelMultiServices (Java)\nDESCRIPTION: This Java snippet demonstrates how to use the auto-injected `WxChannelMultiServices` bean provided by the plugin. It shows how to retrieve specific `WxChannelService` instances for different configured tenant IDs (e.g., \"tenantId1\", \"tenantId2\") and how to check if a service exists for a given ID before using it to access sub-services like `WxFinderLiveService`.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-channel-multi-solon-plugin/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.binarywang.solon.wxjava.channel.service.WxChannelMultiServices;\nimport me.chanjar.weixin.channel.api.WxChannelService;\nimport me.chanjar.weixin.channel.api.WxFinderLiveService;\nimport me.chanjar.weixin.channel.bean.lead.component.response.FinderAttrResponse;\nimport me.chanjar.weixin.common.error.WxErrorException;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\n\n@Component\npublic class DemoService {\n  @Inject\n  private WxChannelMultiServices wxChannelMultiServices;\n\n  public void test() throws WxErrorException {\n    // 应用 1 的 WxChannelService\n    WxChannelService wxChannelService1 = wxChannelMultiServices.getWxChannelService(\"tenantId1\");\n    WxFinderLiveService finderLiveService = wxChannelService1.getFinderLiveService();\n    FinderAttrResponse response1 = finderLiveService.getFinderAttrByAppid();\n    // todo ...\n\n    // 应用 2 的 WxChannelService\n    WxChannelService wxChannelService2 = wxChannelMultiServices.getWxChannelService(\"tenantId2\");\n    WxFinderLiveService finderLiveService2 = wxChannelService2.getFinderLiveService();\n    FinderAttrResponse response2 = finderLiveService2.getFinderAttrByAppid();\n    // todo ...\n\n    // 应用 3 的 WxChannelService\n    WxChannelService wxChannelService3 = wxChannelMultiServices.getWxChannelService(\"tenantId3\");\n    // 判断是否为空\n    if (wxChannelService3 == null) {\n      // todo wxChannelService3 为空，请先配置 tenantId3 微信视频号应用参数\n      return;\n    }\n    WxFinderLiveService finderLiveService3 = wxChannelService3.getFinderLiveService();\n    FinderAttrResponse response3 = finderLiveService3.getFinderAttrByAppid();\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using WxCpMultiServices to Access Specific Account Services in Java\nDESCRIPTION: This Java snippet demonstrates how to inject the `WxCpMultiServices` component into a Solon-managed class and retrieve specific `WxCpService` instances based on their configured tenant IDs (e.g., `tenantId1`, `tenantId2`). It shows how to access sub-services like `WxCpUserService` and includes a check for cases where a service for a given tenant ID might not be configured.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-cp-multi-solon-plugin/README.md#_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nimport com.binarywang.solon.wxjava.cp_multi.service.WxCpMultiServices;\nimport me.chanjar.weixin.cp.api.WxCpService;\nimport me.chanjar.weixin.cp.api.WxCpUserService;\nimport org.noear.solon.annotation.Component;\nimport org.noear.solon.annotation.Inject;\n\n@Component\npublic class DemoService {\n  @Inject\n  private WxCpMultiServices wxCpMultiServices;\n\n  public void test() {\n    // 应用 1 的 WxCpService\n    WxCpService wxCpService1 = wxCpMultiServices.getWxCpService(\"tenantId1\");\n    WxCpUserService userService1 = wxCpService1.getUserService();\n    userService1.getUserId(\"xxx\");\n    // todo ...\n\n    // 应用 2 的 WxCpService\n    WxCpService wxCpService2 = wxCpMultiServices.getWxCpService(\"tenantId2\");\n    WxCpUserService userService2 = wxCpService2.getUserService();\n    userService2.getUserId(\"xxx\");\n    // todo ...\n\n    // 应用 3 的 WxCpService\n    WxCpService wxCpService3 = wxCpMultiServices.getWxCpService(\"tenantId3\");\n    // 判断是否为空\n    if (wxCpService3 == null) {\n      // todo wxCpService3 为空，请先配置 tenantId3 企业微信应用参数\n      return;\n    }\n    WxCpUserService userService3 = wxCpService3.getUserService();\n    userService3.getUserId(\"xxx\");\n    // todo ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Dependency for wx-java-miniapp-multi-solon-plugin (XML)\nDESCRIPTION: Add this dependency to your Maven project's `pom.xml` file within the `<dependencies>` section to include the `wx-java-miniapp-multi-solon-plugin` library, enabling multi-instance WeChat Mini App support in your Solon application.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-miniapp-multi-solon-plugin/README.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n    <groupId>com.github.binarywang</groupId>\n    <artifactId>wx-java-miniapp-multi-solon-plugin</artifactId>\n    <version>${version}</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Syncing with Upstream Repository - Git Bash\nDESCRIPTION: Explains how to add the main project repository as an 'upstream' remote, fetch its content, switch to the 'develop' branch, rebase local changes onto the latest upstream 'develop', and force push the updated 'develop' branch back to the personal origin repository. This keeps the contributor's fork up-to-date.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/CONTRIBUTING.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git remote add upstream https://github.com/binarywang/WxJava\n$ git fetch upstream\n$ git checkout develop\n$ git rebase upstream/develop\n$ git push -f origin develop\n```\n\n----------------------------------------\n\nTITLE: Including WxJava Module Dependency via Maven XML\nDESCRIPTION: This Maven dependency snippet shows how to include a specific WxJava module in your project. You need to replace the artifactId placeholder with the desired module name (e.g., weixin-java-miniapp, weixin-java-pay) and ensure the version matches the one required for your project. This is a necessary step to use the SDK's features.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/README.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<dependency>\\n  <groupId>com.github.binarywang</groupId>\\n  <artifactId>（不同模块参考下文）</artifactId>\\n  <version>4.7.0</version>\\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using WxJava Channel Service Java\nDESCRIPTION: Demonstrates how to use the auto-configured `WxChannelService` in a Spring `@Service` class. It shows how to inject the service and provides an example method call to retrieve WeChat Channel shop information using the injected service instance.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-channel-spring-boot-starter/README.md#_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport me.chanjar.weixin.channel.api.WxChannelService;\nimport me.chanjar.weixin.channel.bean.shop.ShopInfoResponse;\nimport me.chanjar.weixin.channel.util.JsonUtils;\nimport me.chanjar.weixin.common.error.WxErrorException;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class DemoService {\n  @Autowired\n  private WxChannelService wxChannelService;\n\n  public String getShopInfo() throws WxErrorException {\n    // 获取店铺基本信息\n    ShopInfoResponse response = wxChannelService.getBasicService().getShopInfo();\n    // 此处为演示，如果要返回response的结果，建议自己封装一个VO，避免直接返回response\n    return JsonUtils.encode(response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling WeChat Authorized MP Callback Messages in Java\nDESCRIPTION: This method handles callback messages and events sent by authorized service providers (MPs) through the WeChat Open Platform. It validates the signature, decrypts the message, and includes specific logic to handle test cases required for the Tencent full-network publishing test, such as responding to text messages and events.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/weixin-java-open/README.md#_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\n@RequestMapping(\"{appId}/callback\")\n    public Object callback(@RequestBody(required = false)String requestBody,\n                           @PathVariable (\"appId\") String appId,\n                           @RequestParam(\"signature\") String signature,\n                           @RequestParam(\"timestamp\") String timestamp,\n                           @RequestParam(\"nonce\") String nonce,\n                           @RequestParam(\"openid\") String openid,\n                           @RequestParam(\"encrypt_type\") String encType,\n                           @RequestParam(\"msg_signature\") String msgSignature) {\n        this.logger.info(\n                \"\\n接收微信请求：[appId=[{}], openid=[{}], signature=[{}], encType=[{}], msgSignature=[{}],\"\n                        + \" timestamp=[{}], nonce=[{}], requestBody=[\\n{}\\n] \",\n                appId, openid, signature, encType, msgSignature, timestamp, nonce, requestBody);\n        logger.info(\"query:\"+getHttpServletRequest().getQueryString()+\"\\nbody:\"+requestBody);\n        if (!StringUtils.equalsIgnoreCase(\"aes\", encType) || !wxOpenService.getWxOpenComponentService().checkSignature(timestamp, nonce, signature)) {\n            throw new IllegalArgumentException(\"非法请求，可能属于伪造的请求！\");\n        }\n\n        String out = \"\";\n        // aes加密的消息\n        WxMpXmlMessage inMessage = WxOpenXmlMessage.fromEncryptedMpXml(requestBody, wxOpenService.getWxOpenConfigStorage(), timestamp, nonce, msgSignature);\n        this.logger.debug(\"\\n消息解密后内容为：\\n{} \", inMessage.toString());\n        // 全网发布测试用例\n        if (StringUtils.equalsAnyIgnoreCase(appId, \"wxd101a85aa106f53e\", \"wx570bc396a51b8ff8\")) {\n            try {\n                if (StringUtils.equals(inMessage.getMsgType(), \"text\")) {\n                    if (StringUtils.equals(inMessage.getContent(), \"TESTCOMPONENT_MSG_TYPE_TEXT\")) {\n                        out = new WxOpenCryptUtil(wxOpenService.getWxOpenConfigStorage()).encrypt(\n                                WxMpXmlOutMessage.TEXT().content(\"TESTCOMPONENT_MSG_TYPE_TEXT_callback\")\n                                        .fromUser(inMessage.getToUser())\n                                        .toUser(inMessage.getFromUser())\n                                        .build()\n                                        .toXml()\n                        );\n                    } else if (StringUtils.startsWith(inMessage.getContent(), \"QUERY_AUTH_CODE:\")) {\n                        String msg = inMessage.getContent().replace(\"QUERY_AUTH_CODE:\", \"\") + \"_from_api\";\n                        WxMpKefuMessage kefuMessage = WxMpKefuMessage.TEXT().content(msg).toUser(inMessage.getFromUser()).build();\n                        wxOpenService.getWxOpenComponentService().getWxMpServiceByAppid(appId).getKefuService().sendKefuMessage(kefuMessage);\n                    }\n                } else if (StringUtils.equals(inMessage.getMsgType(), \"event\")) {\n                    WxMpKefuMessage kefuMessage = WxMpKefuMessage.TEXT().content(inMessage.getEvent() + \"from_callback\").toUser(inMessage.getFromUser()).build();\n                    wxOpenService.getWxOpenComponentService().getWxMpServiceByAppid(appId).getKefuService().sendKefuMessage(kefuMessage);m\n                }\n            } catch (WxErrorException e) {\n                logger.error(\"callback\", e);\n            }\n        }\n        return out;\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure WeChat Qidian Properties in application.properties Properties\nDESCRIPTION: This snippet provides example configuration properties for the wx-java-qidian-spring-boot-starter in a Spring Boot application.properties file. It covers essential WeChat Qidian credentials (appId, secret, token, aesKey), optional config storage settings (type, Redis details), and HTTP client configuration.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/spring-boot-starters/wx-java-qidian-spring-boot-starter/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 公众号配置(必填)\nwx.qidian.appId = appId\nwx.qidian.secret = @secret\nwx.qidian.token = @token\nwx.qidian.aesKey = @aesKey\n# 存储配置redis(可选)\nwx.qidian.config-storage.type = Jedis                     # 配置类型: Memory(默认), Jedis, RedisTemplate\nwx.qidian.config-storage.key-prefix = wx                  # 相关redis前缀配置: wx(默认)\nwx.qidian.config-storage.redis.host = 127.0.0.1\nwx.qidian.config-storage.redis.port = 6379\n#单机和sentinel同时存在时，优先使用sentinel配置\n#wx.qidian.config-storage.redis.sentinel-ips=127.0.0.1:16379,127.0.0.1:26379\n#wx.qidian.config-storage.redis.sentinel-name=mymaster\n# http客户端配置\nwx.qidian.config-storage.http-client-type=httpclient      # http客户端类型: HttpClient(默认), OkHttp, JoddHttp\nwx.qidian.config-storage.http-proxy-host=\nwx.qidian.config-storage.http-proxy-port=\nwx.qidian.config-storage.http-proxy-username=\nwx.qidian.config-storage.http-proxy-password=\n# 公众号地址host配置\n#wx.qidian.hosts.api-host=http://proxy.com/\n#wx.qidian.hosts.open-host=http://proxy.com/\n#wx.qidian.hosts.mp-host=http://proxy.com/\n```\n\n----------------------------------------\n\nTITLE: Configuring WxJava CP Plugin Properties - Properties\nDESCRIPTION: Shows the configuration options for the WxJava CP Solon plugin in an `app.properties` file. It includes required settings like `corp-id` and `corp-secret`, as well as optional settings for `agent-id`, `token`, `aes-key`, message audit, config storage type, HTTP proxy, and retry behavior.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-cp-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 企业微信号配置(必填)\nwx.cp.corp-id = @corp-id\nwx.cp.corp-secret = @corp-secret\n# 选填\nwx.cp.agent-id = @agent-id\nwx.cp.token = @token\nwx.cp.aes-key = @aes-key\nwx.cp.msg-audit-priKey = @msg-audit-priKey\nwx.cp.msg-audit-lib-path = @msg-audit-lib-path\n# ConfigStorage 配置（选填）\nwx.cp.config-storage.type=memory # 配置类型: memory(默认), jedis, redisson, redistemplate\n# http 客户端配置（选填）\nwx.cp.config-storage.http-proxy-host=\nwx.cp.config-storage.http-proxy-port=\nwx.cp.config-storage.http-proxy-username=\nwx.cp.config-storage.http-proxy-password=\n# 最大重试次数，默认：5 次，如果小于 0，则为 0\nwx.cp.config-storage.max-retry-times=5\n# 重试时间间隔步进，默认：1000 毫秒，如果小于 0，则为 1000\nwx.cp.config-storage.retry-sleep-millis=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring wx-java-mp-solon-plugin in app.properties\nDESCRIPTION: Configure the wx-java-mp plugin within your Solon application by adding these properties to your app.properties file. Essential settings like app-id, secret, token, and aes-key are required. Optional configurations for storage (e.g., Redis) and HTTP client are also shown.\nSOURCE: https://github.com/binarywang/wxjava/blob/develop/solon-plugins/wx-java-mp-solon-plugin/README.md#_snippet_1\n\nLANGUAGE: Properties\nCODE:\n```\n# 公众号配置(必填)\nwx.mp.app-id=appId\nwx.mp.secret=@secret\nwx.mp.token=@token\nwx.mp.aes-key=@aesKey\nwx.mp.use-stable-access-token=@useStableAccessToken\n# 存储配置redis(可选)\nwx.mp.config-storage.type= edis                     # 配置类型: Memory(默认), Jedis, RedisTemplate\nwx.mp.config-storage.key-prefix=wx                  # 相关redis前缀配置: wx(默认)\nwx.mp.config-storage.redis.host=127.0.0.1\nwx.mp.config-storage.redis.port=6379\n\t#单机和sentinel同时存在时，优先使用sentinel配置\n\t#wx.mp.config-storage.redis.sentinel-ips=127.0.0.1:16379,127.0.0.1:26379\n\t#wx.mp.config-storage.redis.sentinel-name=mymaster\n# http客户端配置\nwx.mp.config-storage.http-client-type=httpclient      # http客户端类型: HttpClient(默认), OkHttp, JoddHttp\nwx.mp.config-storage.http-proxy-host=\nwx.mp.config-storage.http-proxy-port=\nwx.mp.config-storage.http-proxy-username=\nwx.mp.config-storage.http-proxy-password=\n\t# 公众号地址host配置\n\t#wx.mp.hosts.api-host=http://proxy.com/\n\t#wx.mp.hosts.open-host=http://proxy.com/\n\t#wx.mp.hosts.mp-host=http://proxy.com/\n```"
  }
]