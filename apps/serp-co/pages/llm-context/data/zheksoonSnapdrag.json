[
  {
    "owner": "zheksoon",
    "repo": "snapdrag",
    "content": "TITLE: Complete useDroppable Hook Implementation Example\nDESCRIPTION: A comprehensive example showing all configuration options and callbacks in a functional component.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_33\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDroppable } from \"snapdrag\";\n\nconst DroppableSquare = () => {\n  const { droppable, hovered } = useDroppable({\n    accepts: \"SQUARE\",\n    data: { maxCapacity: 5 },\n    disabled: false,\n    onDragIn: ({ kind, data, event, element, dropElement, dropTargets }) => {\n      console.log(`Draggable ${kind} entered with data`, data);\n    },\n    onDragOut: ({ kind, data, event, element, dropElement, dropTargets }) => {\n      console.log(`Draggable ${kind} left with data`, data);\n    },\n    onDragMove: ({ kind, data, event, element, dropElement, dropTargets }) => {\n      console.log(`Draggable ${kind} moved with data`, data);\n    },\n    onDrop: ({ kind, data, event, element, dropElement, dropTargets }) => {\n      console.log(`Draggable ${kind} dropped with data`, data);\n    },\n  });\n\n  const backgroundColor = hovered ? hovered.data.color : \"red\";\n\n  return droppable(\n    <div className=\"square\" style={{ backgroundColor }}></div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Complete Draggable Component Implementation\nDESCRIPTION: A comprehensive example showing a complete implementation of a draggable component using all available configuration options of the useDraggable hook.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_25\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDraggable } from \"snapdrag\";\n\nconst DraggableSquare = () => {\n  const { draggable, isDragging } = useDraggable({\n    kind: \"SQUARE\",\n    data: { color: \"red\" },\n    shouldDrag: ({ event, dragStartEvent, element, data }) => true,\n    disabled: false,\n    move: true,\n    component: ({ data }) => <Square color=\"blue\" />,\n    placeholder: ({ data }) => <Square color=\"gray\" />,\n    offset: { top: 0, left: 0 },\n    onDragStart: ({ event, dragStartEvent, element, data }) => {\n      console.log(\"Drag started\", data);\n    },\n    onDragMove: ({ event, dragStartEvent, element, data, dropTargets, top, left }) => {\n      console.log(\"Dragging\", data);\n    },\n    onDragEnd: ({ event, dragStartEvent, element, data, dropTargets }) => {\n      console.log(\"Drag ended\", data);\n    },\n  });\n\n  const opacity = isDragging ? 0.5 : 1;\n\n  return draggable(\n    <div className=\"square\" style={{ backgroundColor: \"red\", opacity }}>\n      {isDragging ? \"Dragging\" : \"Drag me\"}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting up a Drag-and-Drop App with Snapdrag Overlay\nDESCRIPTION: Main App component that renders draggable and droppable squares with absolute positioning and the Overlay component to display the dragged element.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Overlay } from \"snapdrag\";\n\nexport default function App() {\n  return (\n    <>\n      {/* Render squares with absolute wrappers for positioning */}\n      <div style={{ position: \"relative\" }}>\n        <div style={{ position: \"absolute\", top: 100, left: 100 }}>\n          <DraggableSquare color=\"red\" />\n        </div>\n        <div style={{ position: \"absolute\", top: 100, left: 300 }}>\n          <DroppableSquare color=\"green\" />\n        </div>\n      </div>\n      {/* Render overlay to show the dragged component */}\n      <Overlay />\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Combined Draggable and Droppable Component\nDESCRIPTION: Example showing how to make a component both draggable and droppable by combining the useDraggable and useDroppable hooks.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable, isDragging } = useDraggable({\n  kind: \"SQUARE\",\n});\n\nconst { droppable, hovered } = useDroppable({\n  accepts: \"SQUARE\",\n});\n\nconst text = isDragging ? \"Dragging\" : hovered ? \"Hovered\" : \"Drag me\";\n\n// the order doesn't matter\nreturn draggable(droppable(<div className=\"square\">{text}</div>));\n```\n\n----------------------------------------\n\nTITLE: Creating a Droppable Component in React with Snapdrag\nDESCRIPTION: Implementation of a droppable square component using Snapdrag's useDroppable hook. The component changes color when a draggable is hovered over it and updates text when an item is dropped.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDroppable } from \"snapdrag\";\n\nexport const DroppableSquare = ({ color }: { color: string }) => {\n  const [text, setText] = React.useState(\"Drop here\");\n\n  const { droppable, hovered } = useDroppable({\n    accepts: \"SQUARE\",\n    onDrop({ data }) {\n      setText(`Dropped ${data.color}`);\n    },\n  });\n\n  const backgroundColor = hovered ? hovered.data.color : color;\n\n  return droppable(\n    <div className=\"square\" style={{ backgroundColor }}>\n      {text}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Draggable Component in React with Snapdrag\nDESCRIPTION: Implementation of a draggable square component using Snapdrag's useDraggable hook. The component carries color data and changes opacity when being dragged.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useDraggable } from \"snapdrag\";\n\nexport const DraggableSquare = ({ color }: { color: string }) => {\n  const { draggable, isDragging } = useDraggable({\n    kind: \"SQUARE\",\n    data: { color },\n    move: true,\n  });\n\n  const opacity = isDragging ? 0.5 : 1;\n\n  return draggable(\n    <div className=\"square\" style={{ backgroundColor: color, opacity }}>\n      {isDragging ? \"Dragging\" : \"Drag me\"}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Implementation of useDraggable Hook\nDESCRIPTION: Simple example showing how to use the useDraggable hook with minimal configuration, displaying different text based on the dragging state.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst DraggableSquare = () => {\n  const { draggable, isDragging } = useDraggable({\n    kind: \"SQUARE\",\n    // other fields are optional\n  });\n\n  return draggable(<div>{isDragging ? \"Dragging\" : \"Drag me\"}</div>);\n};\n```\n\n----------------------------------------\n\nTITLE: Dynamic Border Droppable Square Implementation\nDESCRIPTION: Advanced implementation of a droppable square that shows dynamic borders based on drag position. Uses onDragMove to calculate border position.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { useDroppable } from \"snapdrag\";\n\nexport const DroppableSquare = ({ color }: { color: string }) => {\n  const [text, setText] = useState(\"Drop here\");\n  const [borderPosition, setBorderPosition] = useState(\"\");\n\n  const { droppable } = useDroppable({\n    accepts: \"SQUARE\",\n    onDragMove({ event, dropElement }) {\n      const { top, left, height } = dropElement.getBoundingClientRect();\n      const x = event.clientX - left;\n      const y = event.clientY - top;\n\n      if (x / y < 1.0) {\n        if (x / (height - y) < 1.0) {\n          setBorderPosition(\"borderLeft\");\n        } else {\n          setBorderPosition(\"borderBottom\");\n        }\n      } else {\n        if (x / (height - y) < 1.0) {\n          setBorderPosition(\"borderTop\");\n        } else {\n          setBorderPosition(\"borderRight\");\n        }\n      }\n    },\n    onDragOut() {\n      setBorderPosition(\"\");\n    },\n    onDrop({ data }) {\n      setText(`Dropped ${data.color}`);\n      setBorderPosition(\"\");\n    },\n  });\n\n  const style = {\n    backgroundColor: color,\n    [borderPosition]: \"10px solid red\",\n  };\n\n  return droppable(\n    <div className=\"square\" style={style}>\n      {text}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Draggable Square Component with Color Transfer\nDESCRIPTION: React component implementing a draggable square that changes color based on drop target data. Uses useDraggable hook with onDragMove and onDragEnd callbacks to manage color state changes during drag operations.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { useDraggable } from \"snapdrag\";\n\nexport const DraggableSquare = ({ color: initialColor }: { color: string }) => {\n  const [color, setColor] = useState(initialColor);\n\n  const { draggable, isDragging } = useDraggable({\n    kind: \"SQUARE\",\n    data: { color },\n    move: true,\n    onDragMove({ dropTargets }) {\n      const color = dropTargets.length\n        ? dropTargets[0].data.color\n        : initialColor;\n\n      setColor(color);\n    },\n    onDragEnd(args) {\n      setColor(initialColor);\n    },\n  });\n\n  const opacity = isDragging ? 0.9 : 1;\n\n  return draggable(\n    <div className=\"square\" style={{ backgroundColor: color, opacity }}>\n      {isDragging ? \"Dragging\" : \"Drag me\"}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring accepts Property in useDroppable Hook\nDESCRIPTION: Demonstrates different ways to configure the accepts property for a droppable area, including single value, array, and function-based acceptance criteria.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_26\n\nLANGUAGE: tsx\nCODE:\n```\nconst { droppable } = useDroppable({\n  accepts: \"SQUARE\",\n});\n// or\nconst { droppable } = useDroppable({\n  accepts: [\"SQUARE\", \"CIRCLE\"],\n});\n// or\nconst { droppable } = useDroppable({\n  accepts: ({ kind, data }) => kind === \"SQUARE\" && data.color === \"red\",\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onDrop Callback in useDroppable Hook\nDESCRIPTION: Shows how to handle drop events using the onDrop callback.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_32\n\nLANGUAGE: tsx\nCODE:\n```\nconst { droppable } = useDroppable({\n  accepts: \"SQUARE\",\n  onDrop: ({ kind, data, event, element, dropElement, dropTargets }) => {\n    console.log(`Draggable ${kind} dropped with data`, data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Drag Event Handlers\nDESCRIPTION: Example showing implementation of onDragIn and onDragOut event handlers in a droppable component.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useState } from \"react\";\nimport { useDroppable } from \"snapdrag\";\n\nconst DroppableSquare = () => {\n  const [text, setText] = useState(\"Drag on me!\");\n\n  const { droppable } = useDroppable({\n    accepts: \"SQUARE\",\n    onDragIn({ data }) {\n      setText(`Dragged in ${data.color}`);\n    },\n    onDragOut({ data }) {\n      setText(`Dragged out ${data.color}`);\n    },\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Data Configuration in useDraggable\nDESCRIPTION: Shows how to associate data with a draggable component using either a static object or a function that returns data.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  data: { color: \"red\" }, // Static object\n});\n\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  data: ({ dragElement, dragStartEvent }) => ({ color: \"red\" }), // Function\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Data Property in useDroppable Hook\nDESCRIPTION: Shows how to associate custom data with a droppable area using the data property.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_27\n\nLANGUAGE: tsx\nCODE:\n```\nconst { droppable } = useDroppable({\n  accepts: \"SQUARE\",\n  data: { maxCapacity: 5 },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragMove Callback in useDraggable\nDESCRIPTION: Example showing how to use the onDragMove callback to respond to dragging movement, with access to drop targets and position data.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst Square = () => {\n  const { draggable } = useDraggable({\n    kind: \"SQUARE\",\n    data: { color: \"red\" },\n    onDragMove(props) {\n      console.log(\"Drag moving\");\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragMove Callback in useDroppable Hook\nDESCRIPTION: Shows how to handle drag move events using the onDragMove callback.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_31\n\nLANGUAGE: tsx\nCODE:\n```\nconst { droppable } = useDroppable({\n  accepts: \"SQUARE\",\n  onDragMove: ({ kind, data, event, element, dropElement, dropTargets }) => {\n    console.log(`Draggable ${kind} moved with data`, data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: OnDragEnd Callback in useDraggable\nDESCRIPTION: Demonstrates how to implement the onDragEnd callback to perform actions when a drag operation completes.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_24\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  onDragEnd: ({ event, dragStartEvent, element, data, dropTargets }) => {\n    console.log(\"Drag ended\", data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragIn Callback in useDroppable Hook\nDESCRIPTION: Shows how to handle drag enter events using the onDragIn callback with access to drag-related data and elements.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_29\n\nLANGUAGE: tsx\nCODE:\n```\nconst { droppable } = useDroppable({\n  accepts: \"SQUARE\",\n  onDragIn: ({ kind, data, event, element, dropElement, dropTargets }) => {\n    console.log(`Draggable ${kind} entered with data`, data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragOut Callback in useDroppable Hook\nDESCRIPTION: Shows how to handle drag leave events using the onDragOut callback.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_30\n\nLANGUAGE: tsx\nCODE:\n```\nconst { droppable } = useDroppable({\n  accepts: \"SQUARE\",\n  onDragOut: ({ kind, data, event, element, dropElement, dropTargets }) => {\n    console.log(`Draggable ${kind} left with data`, data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: OnDragStart Callback in useDraggable\nDESCRIPTION: Demonstrates how to implement the onDragStart callback to perform actions when a drag operation begins.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  onDragStart: ({ event, dragStartEvent, element, data }) => {\n    console.log(\"Drag started\", data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: OnDragMove Callback in useDraggable\nDESCRIPTION: Shows how to implement the onDragMove callback to track and respond to the movement during a drag operation.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_23\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  onDragMove: ({ event, dragStartEvent, element, data, dropTargets, top, left }) => {\n    console.log(\"Dragging\", data);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing onDragStart Callback in useDraggable\nDESCRIPTION: Example showing how to use the onDragStart callback to respond to drag interaction initiation, with access to event data.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst Square = () => {\n  const { draggable } = useDraggable({\n    kind: \"SQUARE\",\n    data: { color: \"red\" },\n    onDragStart(props) {\n      console.log(\"Drag started\");\n    },\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: ShouldDrag Callback in useDraggable\nDESCRIPTION: Shows how to implement the shouldDrag callback to determine if a drag operation should be initiated based on custom conditions.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  shouldDrag: ({ event, dragStartEvent, element, data }) => {\n    return true;\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Droppable Square Component\nDESCRIPTION: React component implementing a droppable square that accepts draggable elements of type 'SQUARE'. Includes data transfer and drop event handling.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from \"react\";\nimport { useDroppable } from \"snapdrag\";\n\nexport const DroppableSquare = ({ color }: { color: string }) => {\n  const [text, setText] = React.useState(\"Drop here\");\n\n  const { droppable } = useDroppable({\n    accepts: \"SQUARE\",\n    data: { color },\n    onDrop({ data }) {\n      setText(`Dropped ${data.color}`);\n    },\n  });\n\n  return droppable(\n    <div className=\"square\" style={{ backgroundColor: color }}>\n      {text}\n    </div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Droppable Square Implementation\nDESCRIPTION: Simple example of implementing a droppable square component using useDroppable hook with basic configuration.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nexport const DroppableSquare = ({ color }: { color: string }) => {\n  const { droppable, hovered } = useDroppable({\n    accepts: \"SQUARE\",\n    // other configuration fields are optional\n  });\n\n  const backgroundColor = hovered ? hovered.data.color : color;\n\n  return droppable(\n    <div className=\"square\" style={{ backgroundColor }}></div>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Basic Kind Configuration in useDraggable\nDESCRIPTION: Demonstrates how to set up a basic draggable component with the required 'kind' parameter to define its type.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable, isDragging } = useDraggable({\n  kind: \"SQUARE\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Refs with Snapdrag Draggable Components\nDESCRIPTION: Example showing how to use your own ref with a draggable component, which will be properly maintained by the draggable wrapper.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst ref = useRef(null); // ref for your own logic\n\nconst { draggable, isDragging } = useDraggable({\n  kind: \"SQUARE\",\n});\n\n// the ref will be populated as usual\nreturn draggable(<div ref={ref} />);\n```\n\n----------------------------------------\n\nTITLE: Move Option Configuration in useDraggable\nDESCRIPTION: Demonstrates how to configure a draggable to move the original component instead of cloning it to an overlay layer.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  move: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Component Option in useDraggable\nDESCRIPTION: Shows how to provide a custom component to be rendered during the drag operation, replacing the default dragging component.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  component: ({ data, props }) => <Square color=\"blue\" />,\n});\n```\n\n----------------------------------------\n\nTITLE: Placeholder Option in useDraggable\nDESCRIPTION: Demonstrates how to specify a placeholder component to be shown in place of the original component during dragging.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  placeholder: ({ data, props }) => <Square color=\"gray\" />,\n});\n```\n\n----------------------------------------\n\nTITLE: Offset Configuration in useDraggable\nDESCRIPTION: Shows how to define the offset of the dragging component relative to cursor position using a static object or a function.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  offset: { top: 0, left: 0 }, // Static object\n});\n\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  offset: ({ element, event, data }) => {\n    return { top: 0, left: 0 }; // Function\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabled Option Configuration in useDraggable\nDESCRIPTION: Shows how to disable drag functionality for a component by setting the disabled flag to true.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst { draggable } = useDraggable({\n  kind: \"SQUARE\",\n  disabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Disabled State in useDroppable Hook\nDESCRIPTION: Demonstrates how to disable drop functionality using the disabled property.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_28\n\nLANGUAGE: tsx\nCODE:\n```\nconst { droppable } = useDroppable({\n  accepts: \"SQUARE\",\n  disabled: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Installing Snapdrag with npm or yarn\nDESCRIPTION: Commands to install the Snapdrag library using npm or yarn package managers.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i --save snapdrag\n\nyarn add snapdrag\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint parserOptions for TypeScript in a React Vite Project\nDESCRIPTION: This code snippet shows how to configure the top-level parserOptions property in your ESLint configuration to enable type-aware lint rules. It sets up the parser to work with TypeScript configuration files in your project.\nSOURCE: https://github.com/zheksoon/snapdrag/blob/main/examples/README.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport default {\n  // other rules...\n  parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n  },\n}\n```"
  }
]