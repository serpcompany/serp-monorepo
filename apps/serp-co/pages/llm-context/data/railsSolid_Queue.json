[
  {
    "owner": "rails",
    "repo": "solid_queue",
    "content": "TITLE: Enabling Transaction-Safe Job Enqueuing in Ruby on Rails\nDESCRIPTION: Configures ApplicationJob to defer job enqueueing until after the transaction commits, ensuring jobs only run after data is committed to the database. This setting can be applied globally or per job class.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_29\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationJob < ActiveJob::Base\n  self.enqueue_after_transaction_commit = true\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Concurrency Controls in Ruby Jobs with Solid Queue\nDESCRIPTION: Shows the basic structure for implementing concurrency limits in Active Jobs. This defines constraints on how many jobs with matching keys can run simultaneously, with parameters for maximum concurrent executions, a key function, duration, and grouping.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyJob < ApplicationJob\n  limits_concurrency to: max_concurrent_executions, key: ->(arg1, arg2, **) { ... }, duration: max_interval_to_guarantee_concurrency_limit, group: concurrency_group\n\n  # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connections for Solid Queue\nDESCRIPTION: Demonstrates how to configure separate database connections for Solid Queue, ensuring it doesn't rely on transactional integrity with your application's database even when using the same physical database.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_30\n\nLANGUAGE: ruby\nCODE:\n```\nclass ApplicationRecord < ActiveRecord::Base\n  self.abstract_class = true\n\n  connects_to database: { writing: :primary, reading: :replica }\n```\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.solid_queue.connects_to = { database: { writing: :primary, reading: :replica } }\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Reporting for Jobs in ApplicationJob\nDESCRIPTION: Example of adding custom error reporting to ApplicationJob by rescuing exceptions. This ensures all job errors are reported to your error tracking system before being re-raised for normal handling by Active Job.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_25\n\nLANGUAGE: ruby\nCODE:\n```\n# application_job.rb\nclass ApplicationJob < ActiveJob::Base\n  rescue_from(Exception) do |exception|\n    Rails.error.report(exception)\n    raise exception\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks in Solid Queue for Ruby on Rails\nDESCRIPTION: Examples of how to implement lifecycle hooks in Solid Queue for various components including supervisor, worker, dispatcher, and scheduler. These hooks allow for custom actions at start and stop points of Solid Queue processes.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: ruby\nCODE:\n```\nSolidQueue.on_start do |supervisor|\n  MyMetricsReporter.process_name = supervisor.name\n\n  start_metrics_server\nend\n\nSolidQueue.on_stop do |_supervisor|\n  stop_metrics_server\nend\n\nSolidQueue.on_worker_start do |worker|\n  MyMetricsReporter.process_name = worker.name\n  MyMetricsReporter.queues = worker.queues.join(',')\nend\n```\n\n----------------------------------------\n\nTITLE: Sample Solid Queue Configuration for Production Environment\nDESCRIPTION: Example YAML configuration specifying both dispatchers and workers with various settings including polling intervals, batch sizes, queue specifications, and threading options.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  dispatchers:\n    - polling_interval: 1\n      batch_size: 500\n      concurrency_maintenance_interval: 300\n  workers:\n    - queues: \"*\"\n      threads: 3\n      polling_interval: 2\n    - queues: [ real_time, background ]\n      threads: 5\n      polling_interval: 0.1\n      processes: 3\n```\n\n----------------------------------------\n\nTITLE: Defining Recurring Tasks in YAML Configuration\nDESCRIPTION: Configuration example for defining recurring tasks in Solid Queue. Shows how to configure job classes, commands, schedules, and parameters for periodic execution using Fugit-compatible syntax.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  a_periodic_job:\n    class: MyJob\n    args: [ 42, { status: \"custom_status\" } ]\n    schedule: every second\n  a_cleanup_task:\n    command: \"DeletedStuff.clear_all\"\n    schedule: every day at 9am\n```\n\n----------------------------------------\n\nTITLE: Managing Failed Executions in Solid Queue via Ruby Console\nDESCRIPTION: Example showing how to retrieve, inspect, retry, or discard failed job executions from the Ruby console. This provides manual intervention capabilities for failed jobs stored in the solid_queue_failed_executions table.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_24\n\nLANGUAGE: ruby\nCODE:\n```\nfailed_execution = SolidQueue::FailedExecution.find(...) # Find the failed execution related to your job\nfailed_execution.error # inspect the error\n\nfailed_execution.retry # This will re-enqueue the job as if it was enqueued for the first time\nfailed_execution.discard # This will delete the job from the system\n```\n\n----------------------------------------\n\nTITLE: Implementing Group-based Concurrency Control for Box Operations\nDESCRIPTION: Example of a job that uses the 'group' parameter to coordinate concurrency between different job classes. This job limits operations on contacts with a 15-minute duration and identifies itself as part of the 'ContactActions' group.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: ruby\nCODE:\n```\nclass Box::MovePostingsByContactToDesignatedBoxJob < ApplicationJob\n  limits_concurrency key: ->(contact) { contact }, duration: 15.minutes, group: \"ContactActions\"\n\n  def perform(contact)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Group-based Concurrency Control for Bundle Operations\nDESCRIPTION: Second example of a job using the same concurrency group ('ContactActions') to ensure that operations on the same contact don't run simultaneously across different job classes. This coordinates with the Box job example.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_23\n\nLANGUAGE: ruby\nCODE:\n```\nclass Bundle::RebundlePostingsJob < ApplicationJob\n  limits_concurrency key: ->(bundle) { bundle.contact }, duration: 15.minutes, group: \"ContactActions\"\n\n  def perform(bundle)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Limiting Account-based Job Concurrency in Ruby\nDESCRIPTION: Example of a job that delivers announcements to contacts with concurrency limited to 2 jobs per account. The key is derived from the contact's account, and the concurrency guarantee expires after 5 minutes.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: ruby\nCODE:\n```\nclass DeliverAnnouncementToContactJob < ApplicationJob\n  limits_concurrency to: 2, key: ->(contact) { contact.account }, duration: 5.minutes\n\n  def perform(contact)\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Error Handler for Solid Queue Threads in Ruby on Rails\nDESCRIPTION: Example of the default error handler for thread errors in Solid Queue. This lambda takes an exception argument and reports it through Rails error reporting. This is specifically for errors in Solid Queue threads, not job execution errors.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: ruby\nCODE:\n```\n-> (exception) { Rails.error.report(exception, handled: false) }\n```\n\n----------------------------------------\n\nTITLE: Implementing Error Reporting for Mailer Jobs\nDESCRIPTION: Example showing how to add error reporting for ActionMailer::MailDeliveryJob, which doesn't inherit from ApplicationJob. This ensures mailer job errors are also captured by your error tracking system.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_26\n\nLANGUAGE: ruby\nCODE:\n```\n# application_mailer.rb\n\nclass ApplicationMailer < ActionMailer::Base\n  ActionMailer::MailDeliveryJob.rescue_from(Exception) do |exception|\n    Rails.error.report(exception)\n    raise exception\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Recommended Queue Specification for Optimal Performance\nDESCRIPTION: The recommended approach for specifying queues in Solid Queue configuration to ensure optimal polling performance by using exact queue names instead of wildcards.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nqueues: [ background, backend ]\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Database with MySQL/PostgreSQL/Trilogy in database.yml\nDESCRIPTION: Configuration example for setting up a separate MySQL, PostgreSQL, or Trilogy database for Solid Queue in production environment with appropriate credentials.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  primary: &primary_production\n    <<: *default\n    database: app_production\n    username: app\n    password: <%= ENV[\"APP_DATABASE_PASSWORD\"] %>\n  queue:\n    <<: *primary_production\n    database: app_production_queue\n    migrations_paths: db/queue_migrate\n```\n\n----------------------------------------\n\nTITLE: Configuring Solid Queue in Development Environment\nDESCRIPTION: Ruby code to add to development.rb to enable Solid Queue as the Active Job adapter and configure the database connection for development environment.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n  # Use Solid Queue in Development.\n  config.active_job.queue_adapter = :solid_queue\n  config.solid_queue.connects_to = { database: { writing: :queue } }\n```\n\n----------------------------------------\n\nTITLE: Enabling Solid Queue Puma Plugin\nDESCRIPTION: Simple configuration to enable the Solid Queue Puma plugin. This allows Puma to run and monitor the Solid Queue supervisor process alongside the web server.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_27\n\nLANGUAGE: ruby\nCODE:\n```\nplugin :solid_queue\n```\n\n----------------------------------------\n\nTITLE: Conditionally Enabling Solid Queue Puma Plugin\nDESCRIPTION: Example showing how to conditionally enable the Solid Queue Puma plugin based on an environment variable. This prevents the Solid Queue supervisor from starting in environments where it's not configured.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_28\n\nLANGUAGE: ruby\nCODE:\n```\nplugin :solid_queue if ENV[\"SOLID_QUEUE_IN_PUMA\"]\n```\n\n----------------------------------------\n\nTITLE: Setting Queue Adapter for Individual Job Classes\nDESCRIPTION: Ruby code example showing how to set Solid Queue as the queue adapter for specific job classes when doing incremental adoption.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# app/jobs/my_job.rb\n\nclass MyJob < ApplicationJob\n  self.queue_adapter = :solid_queue\n  # ...\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring Puma Plugin for Solid Queue\nDESCRIPTION: Ruby code to add to puma.rb to enable the Solid Queue Puma plugin based on environment or environment variable.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# You can either set the env var, or check for development\nplugin :solid_queue if ENV[\"SOLID_QUEUE_IN_PUMA\"] || Rails.env.development?\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Logger for Solid Queue\nDESCRIPTION: Ruby code to configure Solid Queue to use a custom logger that outputs to STDOUT instead of the default Rails logger.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nconfig.solid_queue.logger = ActiveSupport::Logger.new(STDOUT)\n```\n\n----------------------------------------\n\nTITLE: Creating a Job for Another Queue Adapter\nDESCRIPTION: Example of defining a job that uses a different queue adapter (Resque) instead of Solid Queue. This demonstrates how Solid Queue can schedule jobs that will be executed by other queue systems.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_35\n\nLANGUAGE: ruby\nCODE:\n```\nclass MyResqueJob < ApplicationJob\n  self.queue_adapter = :resque\n\n  def perform(arg)\n    # ..\n  end\nend\n```\n\n----------------------------------------\n\nTITLE: Configuring External Queue Jobs in Solid Queue\nDESCRIPTION: YAML configuration for scheduling a job that will be run by a different queue adapter. This shows how Solid Queue can coordinate with other job systems for recurring tasks.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\nmy_periodic_resque_job:\n  class: MyResqueJob\n  args: 22\n  schedule: \"*/5 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Example Job Enqueuing in Ruby\nDESCRIPTION: Illustrates how a job defined in the recurring configuration would be enqueued by Solid Queue. This example shows how arguments are passed to the job's perform_later method.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_33\n\nLANGUAGE: ruby\nCODE:\n```\nMyJob.perform_later(42, status: \"custom_status\")\n```\n\n----------------------------------------\n\nTITLE: Customizing the Recurring Command Job Class\nDESCRIPTION: Shows how to change the default job class used for running command-based recurring tasks. This allows for customizing the job class that evaluates the command string in your application.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_34\n\nLANGUAGE: ruby\nCODE:\n```\nRails.application.config.after_initialize do # or to_prepare\n  SolidQueue::RecurringTask.default_job_class = MyRecurringCommandJob\nend\n```\n\n----------------------------------------\n\nTITLE: Running Solid Queue Jobs with Custom Schedule Configuration\nDESCRIPTION: Command-line example showing how to run Solid Queue jobs with a custom recurring schedule file. This allows overriding the default location of the recurring tasks configuration.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_31\n\nLANGUAGE: bash\nCODE:\n```\nbin/jobs --recurring_schedule_file=config/schedule.yml\n```\n\n----------------------------------------\n\nTITLE: SQL Queries for Ready Job Polling in Solid Queue\nDESCRIPTION: The two types of SQL queries used by Solid Queue for polling jobs from the ready_executions table, either without queue filtering or filtered by a specific queue.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\n-- No filtering by queue\nSELECT job_id\nFROM solid_queue_ready_executions\nORDER BY priority ASC, job_id ASC\nLIMIT ?\nFOR UPDATE SKIP LOCKED;\n\n-- Filtering by a single queue\nSELECT job_id\nFROM solid_queue_ready_executions\nWHERE queue_name = ?\nORDER BY priority ASC, job_id ASC\nLIMIT ?\nFOR UPDATE SKIP LOCKED;\n```\n\n----------------------------------------\n\nTITLE: Minimal Solid Queue Configuration with Dispatcher Only\nDESCRIPTION: Example YAML configuration that only defines a dispatcher with no workers, demonstrating how to run specific components of Solid Queue.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  dispatchers:\n    - polling_interval: 1\n      batch_size: 500\n      concurrency_maintenance_interval: 300\n```\n\n----------------------------------------\n\nTITLE: Solid Queue Configuration with Queue Prefix Wildcards\nDESCRIPTION: Example of a Solid Queue configuration using a wildcard pattern for queue names, allowing a worker to process all queues with a specific prefix.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nstaging:\n  workers:\n    - queues: staging*\n      threads: 3\n      polling_interval: 5\n```\n\n----------------------------------------\n\nTITLE: Installing SolidQueue Binstub\nDESCRIPTION: Command to install the bin/jobs binstub for starting SolidQueue's supervisor in version 0.7.x\nSOURCE: https://github.com/rails/solid_queue/blob/main/UPGRADING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbin/rails generate solid_queue:install\n```\n\n----------------------------------------\n\nTITLE: Installing SolidQueue Migrations\nDESCRIPTION: Commands to install migrations for SolidQueue, with options for default and custom database configurations\nSOURCE: https://github.com/rails/solid_queue/blob/main/UPGRADING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails solid_queue:install:migrations\n```\n\nLANGUAGE: bash\nCODE:\n```\n$ bin/rails solid_queue:install:migrations DATABASE=<the_name_of_your_solid_queue_db>\n```\n\n----------------------------------------\n\nTITLE: Starting SolidQueue Supervisor\nDESCRIPTION: Command to start the SolidQueue supervisor process introduced in version 0.4.x\nSOURCE: https://github.com/rails/solid_queue/blob/main/UPGRADING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ bundle exec rake solid_queue:start\n```\n\n----------------------------------------\n\nTITLE: Worker Configuration Example\nDESCRIPTION: YAML configuration example for SolidQueue workers showing queue, thread, and process settings\nSOURCE: https://github.com/rails/solid_queue/blob/main/UPGRADING.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  workers:\n    - queues: [ real_time, background ]\n      threads: 5\n      polling_interval: 0.1\n      processes: 3\n```\n\n----------------------------------------\n\nTITLE: Dispatcher Configuration Example\nDESCRIPTION: YAML configuration example for SolidQueue dispatcher settings\nSOURCE: https://github.com/rails/solid_queue/blob/main/UPGRADING.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  dispatchers:\n    - polling_interval: 1\n      batch_size: 500\n      concurrency_maintenance_interval: 300\n```\n\n----------------------------------------\n\nTITLE: Configuring Queue Database with SQLite in database.yml\nDESCRIPTION: Configuration example for setting up a separate SQLite database for Solid Queue in production environment by adding a queue section to database.yml.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproduction:\n  primary:\n    <<: *default\n    database: storage/production.sqlite3\n  queue:\n    <<: *default\n    database: storage/production_queue.sqlite3\n    migrations_paths: db/queue_migrate\n```\n\n----------------------------------------\n\nTITLE: Updating database.yml for Development Environment\nDESCRIPTION: Diff showing the changes needed to add Solid Queue database configuration to the development environment in database.yml when using SQLite.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndevelopment:\n+ primary:\n    <<: *default\n    database: storage/development.sqlite3\n+  queue:\n+    <<: *default\n+    database: storage/development_queue.sqlite3\n+    migrations_paths: db/queue_migrate\n```\n\n----------------------------------------\n\nTITLE: Updating Action Cable Configuration for Development\nDESCRIPTION: Diff showing changes needed in cable.yml to configure Action Cable to use a database instead of async adapter for compatibility with Solid Queue.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\ndevelopment:\n-  adapter: async\n+ adapter: solid_cable\n+  connects_to:\n+    database:\n+      writing: cable\n+  polling_interval: 0.1.seconds\n+  message_retention: 1.day\n```\n\n----------------------------------------\n\nTITLE: Adding Action Cable Database Configuration\nDESCRIPTION: Diff showing changes needed in database.yml to add a separate database configuration for Action Cable in development environment.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\ndevelopment:\n  primary:\n    <<: *default\n    database: storage/development.sqlite3\n+  cable:\n+    <<: *default\n+    database: storage/development_cable.sqlite3\n+    migrations_paths: db/cable_migrate\n```\n\n----------------------------------------\n\nTITLE: Running Solid Queue with Custom Configuration File\nDESCRIPTION: Command to run Solid Queue with a specified configuration file instead of using the default config/queue.yml location.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbin/jobs -c config/calendar.yml\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Queue Name Filtering with Wildcards\nDESCRIPTION: SQL query used to find all queue names matching a specific prefix pattern, which is used when wildcard queue specifications are provided in the configuration.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT(queue_name)\nFROM solid_queue_ready_executions\nWHERE queue_name LIKE 'beta%';\n```\n\n----------------------------------------\n\nTITLE: SQL Query for Retrieving All Queue Names\nDESCRIPTION: SQL query used to get all distinct queue names from the ready_executions table, which is needed when dealing with paused queues.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nSELECT DISTINCT(queue_name)\nFROM solid_queue_ready_executions\n```\n\n----------------------------------------\n\nTITLE: Less Performant Queue Specification Using Wildcards\nDESCRIPTION: A less performant approach for specifying queues using wildcards, which may lead to performance issues on some database systems with large queue tables.\nSOURCE: https://github.com/rails/solid_queue/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nqueues: back*\n```"
  }
]