[
  {
    "owner": "suites-dev",
    "repo": "suites",
    "content": "TITLE: Advanced Mock Implementation with Jest Stubs\nDESCRIPTION: Shows how to combine Automock's .mock().using() with Jest spies to both define mock behavior and enable verification of method calls. Includes complete test case demonstrating mock setup and assertions.\nSOURCE: https://github.com/suites-dev/suites/blob/master/docs/automock/overview/examples.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeAll(() => {\n   const mockUsers: User[] = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\n\n   const { unit, unitRef } = TestBed.create(UserService)\n    .mock(Database)\n    .using({ getUsers: jest.fn().mockResolvedValue(mockUsers) })\n    .compile();\n\n  userService = unit;\n  database = unitRef.get(Database);\n});\n\ntest('should log a message, retrieve users from the database, and verify method call', async () => {\n  const users = await userService.getAllUsers();\n\n  expect(logger.log).toHaveBeenCalledWith('Fetching all users...');\n  expect(database.getUsers).toHaveBeenCalled();\n  expect(users).toEqual([{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }]);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Unit Tests with Suites TestBed for UserService\nDESCRIPTION: Example unit test using Suites TestBed to test the UserService class. Shows how to set up an isolated test environment with automated mocking of dependencies and verifying the behavior of the service under test.\nSOURCE: https://github.com/suites-dev/suites/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestBed, Mocked } from '@suites/unit';\nimport { Database, UserService } from './user.service';\n\ndescribe('User Service Unit Spec', () => {\n  let userService: UserService; // 🧪 Declare the unit under test\n  let database: Mocked<Database>; // 🎭 Declare a mocked dependency\n\n  beforeAll(async () => {\n    // 🚀 Create an isolated test env for the unit (under test) + auto generated mock objects\n    const { unit, unitRef } = await TestBed.solitary(UserService).compile();\n\n    userService = unit;\n\n    // 🔍 Retrieve a dependency (mock) from the unit reference\n    database = unitRef.get(Database);\n  });\n\n  // ✅ Test test test\n  test('should return users from the database', async () => {\n    const mockUsers: User[] = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\n    database.getUsers.mockResolvedValue(mockUsers);\n\n    const users = await userService.getAllUsers();\n\n    expect(database.getUsers).toHaveBeenCalled();\n    expect(users).toEqual(mockUsers);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Unit Testing UserService with Suites Framework in TypeScript\nDESCRIPTION: Demonstrates how to use the Suites TestBed to create an isolated test environment for UserService with automatically generated mock objects. The test verifies that the getAllUsers method calls the database's getUsers method and returns the expected results.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/unit/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestBed, Mocked } from '@suites/unit';\nimport { Database, UserService } from './user.service'; \n\ndescribe('User Service Unit Spec', () => {\n  let userService: UserService; // 🧪 Declare the unit under test\n  let database: Mocked<Database>; // 🎭 Declare a mocked dependency\n\n  beforeAll(async () => {\n    // 🚀 Create an isolated test env for the unit (under test) + auto generated mock objects\n    const { unit, unitRef } = await TestBed.solitary(UserService).compile();\n\n    userService = unit;\n\n    // 🔍 Retreive a dependency (mock) from the unit reference\n    database = unitRef.get(Database);\n  });\n\n  // ✅ Test test test\n  test('should return users from the database', async () => {\n    const mockUsers: User[] = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\n    database.getUsers.mockResolvedValue(mockUsers);\n\n    const users = await userService.getAllUsers();\n\n    expect(database.getUsers).toHaveBeenCalled();\n    expect(users).toEqual(mockUsers);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up UserService Test with Automock TestBed\nDESCRIPTION: This snippet demonstrates how to set up a test environment for UserService using Automock's TestBed. It creates mock instances and defines a test case to verify the behavior of getAllUsers method.\nSOURCE: https://github.com/suites-dev/suites/blob/master/docs/automock/overview/examples.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestBed } from '@automock/jest';\n\ndescribe('User Service Unit Test', () => {\n  let userService: UserService;\n  let database: jest.Mocked<Database>;\n\n  beforeAll(() => {\n    const { unit, unitRef } = TestBed.create(UserService).compile();\n\n    userService = unit;\n    database = unitRef.get(Database);\n  });\n\n  test('should retrieve users from the database', async () => {\n    const mockUsers: User[] = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane'}];\n    database.getUsers.mockResolvedValue(mockUsers);\n\n    const users = await userService.getAllUsers();\n\n    expect(database.getUsers).toHaveBeenCalled();\n    expect(users).toEqual(mockUsers);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Mock Implementation with .mock().using()\nDESCRIPTION: Demonstrates how to set up a mock implementation for a Database service using Automock's .mock().using() method chain. This approach defines mock behavior during TestBed setup rather than in individual test cases.\nSOURCE: https://github.com/suites-dev/suites/blob/master/docs/automock/overview/examples.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeAll(() => {\n  const mockUsers: User[] = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\n\n  const { unit, unitRef } = TestBed.create(UserService)\n    .mock(Database)\n    .using({ getUsers: async () => mockUsers })\n    .compile();\n\n  userService = unit;\n  database = unitRef.get(Database);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Database and UserService Classes in TypeScript\nDESCRIPTION: Example code showing the structure of Database and UserService classes, where UserService depends on Database. The Database class has a method to retrieve users, and UserService uses this dependency to implement getAllUsers method.\nSOURCE: https://github.com/suites-dev/suites/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Database {\n  async getUsers(): Promise<User[]> { ... }\n}\n\nexport class UserService {\n  constructor(private database: Database) {}\n\n  async getAllUsers(): Promise<User[]> {\n    return this.database.getUsers();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database and UserService Class Implementation in TypeScript\nDESCRIPTION: Example implementation of a Database class with a getUsers method and a UserService class that depends on the Database class to retrieve users.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/unit/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Database {\n  async getUsers(): Promise<User[]> { ... }\n}\n\nexport class UserService {\n  constructor(private database: Database) {}\n\n  async getAllUsers(): Promise<User[]> {\n    return this.database.getUsers();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database and UserService Classes in TypeScript\nDESCRIPTION: This snippet defines two classes: Database with a getUsers method, and UserService which depends on Database to fetch users.\nSOURCE: https://github.com/suites-dev/suites/blob/master/docs/automock/overview/examples.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Database {\n  async getUsers(): Promise<User[]> { ... }\n}\n\nexport class UserService {\n  constructor(private database: Database) {}\n\n  async getAllUsers(): Promise<User[]> {\n    return this.database.getUsers();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating UserService Test to Include Logger Mock\nDESCRIPTION: This snippet updates the test setup to include mocking of the Logger interface and adds assertions to verify logger interactions.\nSOURCE: https://github.com/suites-dev/suites/blob/master/docs/automock/overview/examples.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbeforeAll(() => {\n  let logger: jest.Mocked<Logger>;\n  const { unit, unitRef } = TestBed.create(UserService).compile();\n\n  userService = unit;\n  database = unitRef.get(Database);\n  logger = unitRef.get(Logger);\n});\n\ntest('should log a message and retrieve users from the database', async () => {\n  const mockUsers: User[] = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\n  database.getUsers.mockResolvedValue(mockUsers);\n\n  const users = await userService.getAllUsers();\n\n  expect(logger.log).toHaveBeenCalledWith('Fetching all users...');\n  expect(database.getUsers).toHaveBeenCalled();\n  expect(users).toEqual(mockUsers);\n});\n```\n\n----------------------------------------\n\nTITLE: Extending UserService with Logger Interface in TypeScript\nDESCRIPTION: This snippet extends the UserService class by adding a Logger interface and integrating it into the constructor and getAllUsers method.\nSOURCE: https://github.com/suites-dev/suites/blob/master/docs/automock/overview/examples.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Logger {\n  log(message: string): void;\n}\n\nclass UserService {\n  constructor(private database: Database, private logger: Logger) {}\n\n  async getAllUsers(): Promise<User[]> {\n    this.logger.log('Fetching all users...');\n    return this.database.getUsers();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Suites Adapters for Testing Framework and DI Container\nDESCRIPTION: Command demonstrating how to install Suites adapter packages for Jest (testing framework) and NestJS (dependency injection framework). These adapters enable Suites to integrate with your specific development stack.\nSOURCE: https://github.com/suites-dev/suites/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D @suites/doubles.jest @suites/di.nestjs\n```\n\n----------------------------------------\n\nTITLE: Installing Suites Adapters for Jest and NestJS\nDESCRIPTION: Command for installing Suites adapters to integrate with Jest mocking framework and NestJS dependency injection.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/unit/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D @suites/doubles.jest @suites/di.nestjs\n```\n\n----------------------------------------\n\nTITLE: Installing Suites Unit Testing Package\nDESCRIPTION: Command to install the main Suites package for unit testing. This is the core package needed to use the Suites testing framework.\nSOURCE: https://github.com/suites-dev/suites/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D @suites/unit\n```\n\n----------------------------------------\n\nTITLE: Installing Suites Core Unit Package\nDESCRIPTION: Command for installing the core Suites unit package using npm.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/unit/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ npm i -D @suites/unit\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Suites with Yarn\nDESCRIPTION: Command to execute the test suite for the Suites project using Yarn.\nSOURCE: https://github.com/suites-dev/suites/blob/master/CONTRIBUTING.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn in Bash\nDESCRIPTION: Command to install all required dependencies for the Suites project using Yarn with frozen lockfile for consistency.\nSOURCE: https://github.com/suites-dev/suites/blob/master/CONTRIBUTING.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn --frozen-lockfile\n```\n\n----------------------------------------\n\nTITLE: Cloning the Suites Repository in Bash\nDESCRIPTION: Command to clone the Suites project repository from GitHub to your local environment.\nSOURCE: https://github.com/suites-dev/suites/blob/master/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/suites.dev/Suites.git\n```\n\n----------------------------------------\n\nTITLE: Cloning and Installing Suites Project in Bash\nDESCRIPTION: Command sequence for cloning the Suites repository from GitHub and installing required dependencies. This initial setup process installs all necessary packages using npm to prepare the development environment.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/types/doubles/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone git@github.com:YourOrganization/suites-dev.git\ncd suites-dev\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Searching for User Keys in the Platform\nDESCRIPTION: Command for searching user keys filtered by client ID in the platform. This uses the platform CLI tool to retrieve specific user key information.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/types/common/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nplatform user_keys:search --client-id=123abc\n```\n\n----------------------------------------\n\nTITLE: Creating a User Key with Full Permissions\nDESCRIPTION: Command to create a new user key with all permissions in the platform. This creates a key with unrestricted access which is not recommended for most use cases.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/types/common/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nplatform user_keys:create --all-permissions 'My key name'\n```\n\n----------------------------------------\n\nTITLE: Example of Semantic Commit Format for Suites\nDESCRIPTION: Example showing the proper format for semantic commit messages in the Suites project, including package prefix and description.\nSOURCE: https://github.com/suites-dev/suites/blob/master/CONTRIBUTING.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nfeat(core): add new logging functionality\n```\n\n----------------------------------------\n\nTITLE: Version Update Entry in Markdown\nDESCRIPTION: Changelog entry documenting a bug fix in version 3.0.1 related to missing return statements for instantiated exposed classes.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/core/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.1](https://github.com/suites-dev/suites/compare/@suites/core.unit@3.0.0...@suites/core.unit@3.0.1) (2025-01-02)\n\n### Bug Fixes\n\n* **core:** add missing return for instantiated exposed classes ([#529](https://github.com/suites-dev/suites/issues/529)) ([85516e7](https://github.com/suites-dev/suites/commit/85516e79a638aeff218bdf4cf763cb12541ce53f))\n```\n\n----------------------------------------\n\nTITLE: Changelog Version Entry in Markdown\nDESCRIPTION: Documents a version bump for @suites/di.nestjs package from version 3.0.1-next.0 to 3.0.1, indicating no significant changes beyond the version increment.\nSOURCE: https://github.com/suites-dev/suites/blob/master/packages/di/nestjs/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [3.0.1](https://github.com/suites-dev/suites/compare/@suites/di.nestjs@3.0.1-next.0...@suites/di.nestjs@3.0.1) (2025-01-02)\n\n**Note:** Version bump only for package @suites/di.nestjs\n```"
  }
]