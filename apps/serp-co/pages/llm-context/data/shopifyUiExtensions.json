[
  {
    "owner": "shopify",
    "repo": "ui-extensions",
    "content": "TITLE: Creating a Checkout UI Extension with React in Shopify\nDESCRIPTION: This example demonstrates how to build a gift note feature as a checkout UI extension using React. It showcases the usage of reactExtension, useApi hook, and TextField component from the @shopify/ui-extensions-react/checkout package. The extension interacts with metafields to store and retrieve the gift note value.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {useState} from 'react';\nimport {\n  reactExtension,\n  useApi,\n  TextField,\n} from '@shopify/ui-extensions-react/checkout';\n\nexport default reactExtension('purchase.checkout.block.render', () => (\n  <GiftNote />\n));\n\nfunction GiftNote() {\n  const {i18n, metafields, applyMetafieldChange} = useApi();\n\n  const [value, setValue] = useState(() => {\n    const metafield = metafields.current.find(\n      (metafield) =>\n        metafield.namespace === 'custom' && metafield.key === 'gift_note',\n    );\n\n    return metafield?.value ?? '';\n  });\n\n  return (\n    <TextField\n      label={i18n.translate('gift_note.label')}\n      value={value}\n      onChange={(value) => {\n        setValue(value);\n        applyMetafieldChange({\n          namespace: 'custom',\n          key: 'gift_note',\n          value,\n          valueType: 'string',\n        });\n      }}\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Checkout Extension with TextField Component in TypeScript\nDESCRIPTION: Demonstrates how to create a basic checkout extension that renders a TextField component for capturing gift notes. The example shows integration with metafields, i18n translations, and state management.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {extension, TextField} from '@shopify/ui-extensions/checkout';\n\nexport default extension(\n  'purchase.checkout.block.render',\n  (root, {i18n, metafields, applyMetafieldChange}) => {\n    const metafield = metafields.current.find(\n      (metafield) =>\n        metafield.namespace === 'custom' && metafield.key === 'gift_note',\n    );\n\n    const textfield = root.createComponent(TextField, {\n      label: i18n.translate('gift_note.label'),\n      value: metafield?.value ?? '',\n      onChange(value) {\n        textfield.updateProps({value});\n\n        applyMetafieldChange({\n          namespace: 'custom',\n          key: 'gift_note',\n          value,\n          valueType: 'string',\n        });\n      },\n    });\n\n    root.appendChild(textfield);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Using React Hooks in Shopify UI Extensions\nDESCRIPTION: This snippet demonstrates how to use React hooks provided by Shopify in a UI extension. It shows the usage of useShippingAddress hook to access and subscribe to the shipping address, automatically re-rendering the component when the address changes.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport {\n  render,\n  Text,\n  useShippingAddress,\n} from '@shopify/ui-extensions-react/checkout';\n\nrender('Checkout::Dynamic::Render', () => <App />);\n\nfunction App() {\n  // Access and subscribe to the shipping address\n  // Your <App /> will automatically re-render when the address has changed\n  const address = useShippingAddress();\n  const firstName = address?.firstName ?? 'guest';\n\n  // Render UI\n  return <Text>Hi {firstName}!</Text>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Shopify UI Extension in JavaScript\nDESCRIPTION: Shows how to create a simple UI extension using the Shopify extensions API. This example demonstrates registering an extension for the Checkout::Dynamic::Render extension point that displays 'Hello world!'.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/documentation/how-extensions-work.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport {extensions} from '@shopify/ui-extensions/checkout';\n\nexport default extensions('Checkout::Dynamic::Render', (root) => {\n  root.append(root.createText('Hello world!'));\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing UI Extension Sandbox Core Logic in JavaScript\nDESCRIPTION: Demonstrates the core implementation of the UI Extension sandbox system, showing how extension points are registered and managed through a global Shopify object. Includes functions for loading scripts and running registered extensions.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/documentation/how-extensions-work.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// We keep a mapping of all the extension points you register for\nconst registeredExtensionPoints = new Map();\n\n// We define a globally-available `shopify` object. The only thing this object\n// can do is register an extension (which is just a callback function) for a\n// specific extension point.\nglobalThis.shopify = {\n  extend(extensionPoint, extension) {\n    registeredExtensionPoints.set(extensionPoint, extension);\n  },\n};\n\n// Here's the function the host application will call to load your extension's\n// script into the sandbox\nexport function load(script) {\n  // Internal workings â€” don't worry too much about this, because we might change\n  // it in the future as new web platform features are available!\n}\n\n// Once your script is loaded, it can register callbacks for extension points using `shopify.extend()`.\n// The host calls this `run()` function with the public API for this extension point, like the data your\n// extension has access to and the UI \"root\" your components will be attached to. `run()` then forwards\n// the arguments it received to the callback you registered for this extension point.\nexport function run(extensionPoint, ...args) {\n  return registeredExtensionPoints.get(extensionPoint)?.(...args);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Modal Overlays with the UI Property in Shopify Extensions\nDESCRIPTION: Demonstrates how to create and manage modal overlays using the ui property. This example shows building a return policy modal that can be triggered from a link and closed with a button.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/checkout/api/standard/README.md#2025-04-23_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  extension,\n  Button,\n  Link,\n  Modal,\n  TextBlock,\n} from '@shopify/ui-extensions/checkout';\n\nexport default extension('ExtensionPoint', (root, {ui}) => {\n  const modalFragment = root.createFragment();\n  const modal = root.createComponent(\n    Modal,\n    {id: 'my-modal', title: 'Return policy', padding: true},\n    [\n      root.createComponent(\n        TextBlock,\n        undefined,\n        'We have a 30-day return policy, which means you have 30 days after receiving your item to request a return.',\n      ),\n      root.createComponent(\n        Button,\n        {\n          onPress() {\n            ui.overlay.close('my-modal');\n          },\n        },\n        'Close',\n      ),\n    ],\n  );\n  modalFragment.appendChild(modal);\n  const link = root.createComponent(\n    Link,\n    {overlay: modalFragment},\n    'Return policy',\n  );\n\n  root.appendChild(link);\n});\n```\n\n----------------------------------------\n\nTITLE: Using useBuyerJourneyIntercept Hook in Shopify UI Extensions\nDESCRIPTION: A hook for intercepting and preventing progression on checkout. It allows blocking progress by returning an object with specific behavior and reason. Requires the block_progress capability to be set in the extension's configuration.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseBuyerJourneyIntercept((interceptor: Interceptor) => void)\n```\n\n----------------------------------------\n\nTITLE: Managing LineItems with StatefulRemoteSubscribable in Shopify Extensions\nDESCRIPTION: Shows how to access and subscribe to changes in the checkout line items. This pattern allows extensions to react to changes in the cart that may occur due to stock problems or modifications from other extensions.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/checkout/api/standard/README.md#2025-04-23_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {extension} from '@shopify/ui-extensions/checkout';\n\nexport default extension('ExtensionPoint', (root, {lineItems}) => {\n  const text = root.createText(\n    `Your line items are: ${JSON.stringify(lineItems.current)}`,\n  );\n  root.appendChild(text);\n\n  lineItems.subscribe((newLineItems) => {\n    text.updateText(`Your new line items are: ${JSON.stringify(newLineItems)}`);\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing API Object with useApi Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns the full API object that was passed to the extension when it was created.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseApi() => StandardApi\n```\n\n----------------------------------------\n\nTITLE: Checking Extension Capability with useExtensionCapabilitiy Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns whether or not a given capability of an extension is granted.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseExtensionCapabilitiy(capability: Capability) => boolean\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Lines with useCartLines Hook in TypeScript\nDESCRIPTION: This hook returns the current cart lines for the checkout and automatically re-renders the component if cart lines are added, removed, or updated.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => CartLine[]\n```\n\n----------------------------------------\n\nTITLE: Using extensionPoint for Multi-Point Extensions in TypeScript\nDESCRIPTION: Demonstrates how to register a single handler function for multiple extension points, using the extensionPoint property to determine which logic to execute based on the current context.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/checkout/api/standard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {extension} from '@shopify/ui-extensions/checkout';\n\nconst first = extension('FirstExtensionPoint', handleExtensionPoint);\nconst second = extension('SecondExtensionPoint', handleExtensionPoint);\n\nexport {first, second};\n\nfunction handleExtensionPoint(input) {\n  switch (input.extensionPoint) {\n    case 'FirstExtensionPoint': {\n      // ...\n      break;\n    }\n    case 'SecondExtensionPoint': {\n      // ...\n      break;\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Extension Storage with useStorage Hook in TypeScript\nDESCRIPTION: This hook returns the key-value Storage interface for the extension point.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => Storage\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Metafields with useMetafields Hook in TypeScript\nDESCRIPTION: This hook returns the current array of metafields applied to the checkout. It allows optional filtering of the list.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n(filters?: MetaFieldFilter) => MetaField[]\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Amount with useTotalAmount Hook in TypeScript\nDESCRIPTION: This hook returns a Money value representing the minimum a buyer can expect to pay at the current step of checkout, excluding amounts yet to be negotiated.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => Money | undefined\n```\n\n----------------------------------------\n\nTITLE: Applying Discount Code Changes in TypeScript\nDESCRIPTION: The useApplyDiscountCodeChange hook returns a function to add or remove discount codes. It takes a DiscountCodeChange object as input and returns a Promise resolving to a DiscountCodeChangeResult.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\n(change: DiscountCodeChange) => Promise<DiscountCodeChangeResult>\n```\n\n----------------------------------------\n\nTITLE: Accessing Extension Settings with useSettings Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns the settings defined by the merchant for the extension.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseSettings() => ExtensionSettings\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cart Discount Codes in TypeScript\nDESCRIPTION: The useDiscountCodes hook returns the current discount codes applied to the cart and automatically re-renders the component if discount codes are added or removed.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => CartDiscountCode[]\n```\n\n----------------------------------------\n\nTITLE: Fetching Single Metafield with useMetafield Hook in TypeScript\nDESCRIPTION: This hook returns a single filtered Metafield or undefined based on the provided MetaFieldFilter.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n(filters: MetaFieldFilter) => MetaField | undefined\n```\n\n----------------------------------------\n\nTITLE: Accessing Cart Discount Allocations in TypeScript\nDESCRIPTION: The useDiscountAllocations hook returns the current discount allocations applied to the cart and automatically re-renders the component if discount allocations change.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => CartDiscountAllocation[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkout Currency with useCurrency Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns the currency of the checkout and automatically re-renders the component if the currency changes.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseCurrency() => string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buyer Email with useEmail Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns the email of the buyer and automatically re-renders the component if the email changes. Requires access to protected customer data.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseEmail() => string | undefined\n```\n\n----------------------------------------\n\nTITLE: Accessing Customer Data with useCustomer Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns the account belonging to the customer. It returns a Customer object if the customer is logged in, undefined otherwise. Requires access to protected customer data.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseCustomer() => Customer | undefined\n```\n\n----------------------------------------\n\nTITLE: Adding Error Event Listeners in JavaScript for UI Extensions\nDESCRIPTION: This snippet demonstrates how to add event listeners for unhandled promise rejections and other exceptions in a Shopify UI extension. It captures both types of errors and logs them to the console.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/documentation/error-handling.md#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// For unhandled promise rejections\nself.addEventListener('unhandledrejection', (error) => {\n  console.warn('event unhandledrejection', error);\n});\n\n// For other exceptions\nself.addEventListener('error', (error) => {\n  console.warn('event error', error);\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Checkout Language with useLanguage Hook in TypeScript\nDESCRIPTION: This hook returns the current language of the checkout and automatically re-renders the component if the language changes.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => string\n```\n\n----------------------------------------\n\nTITLE: Accessing Shipping Address with useShippingAddress Hook in TypeScript\nDESCRIPTION: This hook returns the proposed shippingAddress applied to the checkout. It requires access to protected customer data.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => MailingAddress | undefined\n```\n\n----------------------------------------\n\nTITLE: Integrating Sentry Error Reporting in JavaScript for UI Extensions\nDESCRIPTION: This code snippet shows how to add custom error handlers for Sentry in a Shopify UI extension. It captures both unhandled promise rejections and other exceptions, creating new Error objects with the error stack before sending them to Sentry.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/documentation/error-handling.md#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * Add error handlers\n */\nself.addEventListener('unhandledrejection', (error) => {\n  Sentry.captureException(new Error(error.reason.stack));\n});\n\nself.addEventListener('error', (error) => {\n  Sentry.captureException(new Error(error.reason.stack));\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shop Information with useShop Hook in TypeScript\nDESCRIPTION: This hook returns the Shop where the checkout is taking place.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => Shop\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buyer's Phone Number with usePhone Hook in TypeScript\nDESCRIPTION: This hook returns the phone number of the buyer and automatically re-renders the component if the phone number changes. It requires access to protected customer data.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => string | undefined\n```\n\n----------------------------------------\n\nTITLE: Accessing Presentment Cart Line in TypeScript\nDESCRIPTION: The useTarget hook returns the presentment cart line that the extension is attached to. It's applicable only to the Checkout::CartLineDetails::RenderAfter extension point.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => PresentmentCartLine\n```\n\n----------------------------------------\n\nTITLE: Accessing Translation Interface in TypeScript\nDESCRIPTION: The useTranslate hook returns the I18nTranslate interface used to translate strings in the UI extension.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => I18nTranslate\n```\n\n----------------------------------------\n\nTITLE: Accessing Checkout Note with useNote Hook in TypeScript\nDESCRIPTION: This hook returns the proposed note applied to the checkout.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => string | undefined\n```\n\n----------------------------------------\n\nTITLE: Retrieving Buyer Language with useExtensionLanguage Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns the buyer's language, as supported by the extension.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseExtensionLanguage() => string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Checkout Timezone in TypeScript\nDESCRIPTION: The useTimezone hook returns the timezone of the checkout and automatically re-renders the component if the timezone changes.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\n() => string\n```\n\n----------------------------------------\n\nTITLE: Basic Section Component with Heading Element in React\nDESCRIPTION: Shows how to use Section with a Heading component as a child instead of the heading prop. The result is the same as using the heading prop directly.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Section/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Section>\n  <Heading>Provinces of Canada</Heading>\n</Section>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Select Component with Options in JSX\nDESCRIPTION: Basic implementation of a Select component with individual Option elements for a list of pets. Shows direct JSX implementation with individual Option components.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Select/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Select label=\"Cats and dogs\">\n  <Option value=\"british-shorthair\">Bristish shorthair</Option>\n  <Option value=\"maine-coon\">Maine coon</Option>\n  <Option value=\"persian\">Persian</Option>\n  <Option value=\"germa-shepherd\">German Shepherd</Option>\n  <Option value=\"bulldog\">Bulldog</Option>\n  <Option value=\"labrador-retriever\">Labrador Retriever</Option>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Nested Section Components with Multiple Headings in React\nDESCRIPTION: Illustrates how to nest Section components to create a hierarchical structure with automatically incremented heading levels. The outer section uses h2 while the inner section headings are h3.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Section/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Section heading=\"Some provinces of Canada\">\n    <Section>\n        <Heading>Quebec</Heading>\n        <Text>Most of its residents are in eastern time.<Text>\n\n        <Heading>Ontario</Heading>\n        <Text>Most of its residents are in eastern time.</Text>\n\n        <Heading>British Columbia</Heading>\n        <Text>Most of its residents are in pacific time.</Text>\n    </Section>\n</Section>\n```\n\n----------------------------------------\n\nTITLE: Implementing Select Component with Options Array\nDESCRIPTION: Alternative implementation using an array of option objects passed to the Select component's options prop. Each option object contains value and label properties.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Select/README.md#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst selectOptions = [\n  {value: 'british-shorthair', label: 'Bristish shorthair'},\n  {value: 'maine-coon', label: 'Maine coon'},\n  {value: 'persian', label: 'Persian'},\n  {value: 'germa-shepherd', label: 'German Shepherd'},\n  {value: 'bulldog', label: 'Bulldog'},\n  {value: 'labrador-retriever', label: 'Labrador Retriever'},\n];\n\n<Select label=\"Cats and dogs\" options={selectOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Accessing Extension Metadata with useExtensionData Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns the metadata about the extension.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseExtensionData() => Extension\n```\n\n----------------------------------------\n\nTITLE: Bugsnag CDN Polyfill for WebWorker in JavaScript\nDESCRIPTION: This polyfill is necessary when using the CDN version of Bugsnag in a WebWorker environment for Shopify UI extensions. It creates mock objects for document, history, and window to prevent Bugsnag from throwing errors due to missing variables.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/documentation/error-handling.md#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n/**\n * CDN polyfill\n */\n(() => {\n  const document = {\n    documentElement: {\n      outerHTML: '',\n      createElement: () => ({}),\n      clientWidth: 0,\n      clientHeight: 0,\n    },\n    addEventListener: () => {},\n  };\n  const history = {};\n  const window = self;\n  self.window = window;\n  window.document = document;\n  window.history = history;\n})();\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Select Options with OptionGroup\nDESCRIPTION: Implementation showing how to group options using OptionGroup components to categorize choices into distinct sections.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Select/README.md#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Select label=\"Cats and dogs\">\n  <OptionGroup label=\"Cats\">\n    <Option value=\"british-shorthair\">Bristish shorthair</Option>\n    <Option value=\"maine-coon\">Maine coon</Option>\n    <Option value=\"persian\">Persian</Option>\n  </OptionGroup>\n\n  <OptionGroup label=\"Dogs\">\n    <Option value=\"germa-shepherd\">German Shepherd</Option>\n    <Option value=\"bulldog\">Bulldog</Option>\n    <Option value=\"labrador-retriever\">Labrador Retriever</Option>\n  </OptionGroup>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Select Options with Nested Objects\nDESCRIPTION: Implementation using nested arrays and objects to create grouped options, passed through the options prop of the Select component.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Select/README.md#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst selectOptions = [\n  {\n    label: 'Cats',\n    options: [\n      {value: 'british-shorthair', label: 'Bristish shorthair'},\n      {value: 'maine-coon', label: 'Maine coon'},\n      {value: 'persian', label: 'Persian'},\n    ],\n  },\n  {\n    label: 'Dogs',\n    options: [\n      {value: 'germa-shepherd', label: 'German Shepherd'},\n      {value: 'bulldog', label: 'Bulldog'},\n      {value: 'labrador-retriever', label: 'Labrador Retriever'},\n    ],\n  },\n];\n\n<Select label=\"Cats and dogs\" options={selectOptions} />;\n```\n\n----------------------------------------\n\nTITLE: Using Image Component in Shopify UI Extensions with TSX\nDESCRIPTION: Demonstrates basic usage of the Image component to display a responsive image. The component requires either alt/accessibilityLabel for accessibility and src/source for the image URL.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Image/README.md#2025-04-23_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nexport function MyComponent() {\n  return (\n    <Image\n      // or accessibilityLabel\n      alt=\"A red shirt\"\n      // or source\n      src=\"https://cdn.shopify.com/s/files/1/0757/9955/files/empty-state.svg\"\n    />\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extension Capabilities with useExtensionCapabilities Hook in Shopify UI Extensions\nDESCRIPTION: A hook that returns a list of an extension's granted capabilities.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nuseExtensionCapabilities() => Capability[]\n```\n\n----------------------------------------\n\nTITLE: Implementing Grouped Select Options with OptGroup Alias\nDESCRIPTION: Alternative implementation using OptGroup alias instead of OptionGroup, demonstrating the same grouping functionality with a different component name.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Select/README.md#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Select label=\"Cats and dogs\">\n  <OptGroup label=\"Cats\">\n    <Option value=\"british-shorthair\">Bristish shorthair</Option>\n    <Option value=\"maine-coon\">Maine coon</Option>\n    <Option value=\"persian\">Persian</Option>\n  </OptGroup>\n\n  <OptGroup label=\"Dogs\">\n    <Option value=\"germa-shepherd\">German Shepherd</Option>\n    <Option value=\"bulldog\">Bulldog</Option>\n    <Option value=\"labrador-retriever\">Labrador Retriever</Option>\n  </OptGroup>\n</Select>\n```\n\n----------------------------------------\n\nTITLE: Basic Section Component with Heading Prop in React\nDESCRIPTION: Demonstrates the simplest usage of the Section component with a heading prop. This creates a section element with an h2 heading.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Section/README.md#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Section heading=\"Provinces of Canada\" />\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Nested Section Components\nDESCRIPTION: Shows the rendered HTML for nested Section components, demonstrating how heading levels automatically increment. The parent section has an h2 heading, while the nested section's headings are h3.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Section/README.md#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<section>\n    <h2>Some provinces of Canada</h2>\n    <section>\n        <h3>Quebec</h3>\n        <span>Most of its residents are in eastern time.<span>\n\n        <h3>Ontario</h3>\n        <span>Most of its residents are in eastern time.</span>\n\n        <h3>British Columbia</h3>\n        <span>Most of its residents are in pacific time.</span>\n    </section>\n</section>\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Basic Section with Heading Prop\nDESCRIPTION: Shows the resulting HTML when rendering a Section with a heading prop. The component generates a section element containing an h2 heading.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Section/README.md#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<section>\n  <h2>Provinces of Canada</h2>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Rendering Link with href HTML Implementation\nDESCRIPTION: Shows how the Link component renders as an anchor element when the href prop is provided.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Link/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<a href=\"#\">View email settings</a>\n```\n\n----------------------------------------\n\nTITLE: Text Styling Properties Example in Markdown\nDESCRIPTION: Demonstrates the usage of text styling properties like size and subdued to create visual hierarchy in text content.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/checkout/components/TextBlock/content/guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nsize and subdued\n```\n\n----------------------------------------\n\nTITLE: Rendering Link with onPress/onClick HTML Implementation\nDESCRIPTION: Shows how the Link component renders as a button element when onPress or onClick handlers are provided.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Link/README.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<button type=\"button\">Edit</button>\n```\n\n----------------------------------------\n\nTITLE: Rendering NumberField Component in HTML\nDESCRIPTION: This snippet shows the expected HTML output when rendering a NumberField component in a web host environment. It uses an input element of type 'number' with the 'inputmode' attribute set to 'decimal' to ensure only numerical values are accepted.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/NumberField/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"number\" inputmode=\"decimal\" />\n```\n\n----------------------------------------\n\nTITLE: Referencing Link Component in Shopify UI Extensions\nDESCRIPTION: Shows how to reference the Link component from the Shopify UI Extensions package. The Link component is used to make text interactive for customer actions like navigation.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/checkout/components/Button/content/guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`Link`](https://github.com/Shopify/ui-extensions/tree/main/packages/checkout-ui-extensions/src/components/Link)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating HTML Heading Elements in Markdown\nDESCRIPTION: This snippet shows examples of HTML heading elements (h1, h2) in Markdown syntax. It's used to illustrate how headings are represented in documentation.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Heading/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Heading\n\n## Note\n```\n\n----------------------------------------\n\nTITLE: HTML Output for Section with Heading Element\nDESCRIPTION: Displays the HTML output when using a Section with a Heading component child. The result is identical to using the heading prop.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Section/README.md#2025-04-23_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<section>\n  <h2>Provinces of Canada</h2>\n</section>\n```\n\n----------------------------------------\n\nTITLE: Referencing HTML Elements in Inline Code\nDESCRIPTION: This snippet demonstrates how to reference HTML elements (h1, h2) using inline code formatting in Markdown. It's used to discuss the semantic heading elements rendered by the browser.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Heading/README.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n(`<h1>`,`<h2>`, etc)\n```\n\n----------------------------------------\n\nTITLE: Rendering Paragraph Component in Web Host\nDESCRIPTION: Example of how the Paragraph component renders as HTML in a web host environment. The component is represented as a standard HTML paragraph element.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Paragraph/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<p>Hello, World!</p>\n```\n\n----------------------------------------\n\nTITLE: Markdown Documentation - Related Grid Components\nDESCRIPTION: Documentation showing the relationship between Grid and GridItem components, including a link to the GridItem documentation in the repository.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/checkout/components/Grid/content/guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Related components\n\n- [`GridItem`](https://github.com/Shopify/ui-extensions/tree/main/packages/checkout-ui-extensions/src/components/GridItem): Used as children of the `Grid` component. The `GridItem` offers a way to span the element across a number of columns and rows.\n```\n\n----------------------------------------\n\nTITLE: Rendering HTML Horizontal Rule in Web Host\nDESCRIPTION: The Divider component renders as a standard HTML horizontal rule element in web hosts. This element is used to create a thematic break between content sections.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Divider/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<hr />\n```\n\n----------------------------------------\n\nTITLE: Markdown Header for Shopify Admin API Documentation\nDESCRIPTION: Basic markdown header indicating the file's purpose of documenting the standard admin API.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/api/standard/README.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Standard admin API\n```\n\n----------------------------------------\n\nTITLE: Rendering URLField in Web Host\nDESCRIPTION: The expected HTML output when a URLField component is rendered in a web host environment. It uses the standard HTML input element with type set to 'url'.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/URLField/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"url\" />\n```\n\n----------------------------------------\n\nTITLE: Generating All Target Examples in Bash\nDESCRIPTION: This command regenerates all the default examples across documented targets using a bash script.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-item.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Defining AppMetaFieldFilters Interface in Markdown\nDESCRIPTION: Specifies the structure of the AppMetaFieldFilters interface, including properties for id, type, namespace, and key. Each property is described with its type and usage constraints.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### AppMetaFieldFilters\n\n| Name       | Type                                                                    | Description                                                                                                                                                                                              |\n| ---------- | ----------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| id?        | <code>string</code>                                                     | The numeric owner ID that is associated with the metafield.                                                                                                                                              |\n| type?      | <code>\"customer\" &#124; \"product\" &#124; \"shop\" &#124; \"variant\"</code> | The type of the metafield owner.                                                                                                                                                                         |\n| namespace? | <code>string</code>                                                     | Container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from the metafields used by other apps. This value must be between 2 and 20 characters. |\n| key?       | <code>string</code>                                                     | The name of the metafield. This value must be between 3 and 30 characters.                                                                                                                               |\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Checkout Target Examples in Shopify UI Extensions\nDESCRIPTION: Command to regenerate all default example files across all documented checkout extension targets. This script updates all examples based on their template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.contact.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating a Changeset for UI Extension Updates\nDESCRIPTION: Command to generate a changeset file that records package updates and change descriptions. This is required before creating a PR to track what packages were updated and whether changes are minor features or patches.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/documentation/versions-and-deploys.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn changeset\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Checkout UI Extension Examples\nDESCRIPTION: Command to regenerate default example files for all documented checkout extension targets. This updates all examples based on the template files found in the documentation reference directory.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.actions.render-before/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Referencing React Component in Inline Code\nDESCRIPTION: This snippet shows how to reference a React component (HeadingGroup) using inline code formatting in Markdown. It's used to explain how the specific heading element is determined.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Heading/README.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n`HeadingGroup`\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Checkout Target Examples in Bash\nDESCRIPTION: This command regenerates all default example files for documented checkout extension targets. It processes all targets found in the reference/targets directory.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.reductions.render-before/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Referencing Component Prop in Inline Code\nDESCRIPTION: This snippet demonstrates how to reference a component prop (level) using inline code formatting in Markdown. It's used to explain how the visual level of the heading is affected.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Heading/README.md#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n`level`\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Target Example Files in Shopify UI Extensions\nDESCRIPTION: Shell command to regenerate all default example files across documented targets.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.cart-line-item.line-components.render/README.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Target Examples in Checkout UI Extensions\nDESCRIPTION: This bash command regenerates all default example files for documented checkout extension targets. It uses template files to create implementation examples for all targets found in the reference directory.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.delivery-address.render-before/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Single Target Example in Shopify UI Extensions\nDESCRIPTION: Shell command to generate default example files for a specific checkout target using the template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.payment-method-list.render-before/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.payment-method-list.render-before\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Target Example Files in Shopify UI Extensions\nDESCRIPTION: Shell command to regenerate all default examples across documented targets. This script updates all example files based on the template files in the checkout targets reference directory.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.reductions.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating All Target Examples\nDESCRIPTION: Shell command to regenerate all default examples across documented targets\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.cart-line-item.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Single Target Example Files Using Bash\nDESCRIPTION: Shell command to generate example files for a specific checkout target using the template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.block.render/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.block.render\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Extension Target Examples with Bash Script\nDESCRIPTION: Bash command to regenerate all default examples across documented targets using the generate-target-examples.sh script.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-location-list.render-before/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Shipping Option Item Target Example in Bash\nDESCRIPTION: This command generates the default example files for the shipping-option-item target using a bash script.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-item.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.shipping-option-item.render-after\n```\n\n----------------------------------------\n\nTITLE: Generating All Target Examples in Shopify UI Extensions\nDESCRIPTION: Shell command to regenerate all default examples across documented targets in the UI extensions system.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.payment-method-list.render-before/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Running Script to Generate Target Example for Shipping Option Item\nDESCRIPTION: Command to generate default example files for a specific checkout extension target. This script updates the default.example.tsx and default.example.ts files from their respective templates.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-item.details.render/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.shipping-option-item.details.render\n```\n\n----------------------------------------\n\nTITLE: Generating Target-Specific Example for Checkout UI Extension\nDESCRIPTION: Command to regenerate the default example files for a specific checkout extension target. This script takes a target name as a parameter and creates TypeScript and TSX examples based on template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.actions.render-before/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.actions.render-before\n```\n\n----------------------------------------\n\nTITLE: Regenerating Examples for All Documented Targets in Shopify UI Extensions\nDESCRIPTION: This command regenerates all default example files across all documented targets. It executes a shell script that processes template files to create TypeScript and TSX examples for each target listed in the targets reference directory.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.customer-information.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Single Target Example in Shopify UI Extensions\nDESCRIPTION: Shell command to generate example files for a specific shipping option list target from templates.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-list.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.shipping-option-list.render-after\n```\n\n----------------------------------------\n\nTITLE: Regenerating Example File for Specific Target in Shopify UI Extensions\nDESCRIPTION: This command regenerates the default example files for a specific extension target. It uses a shell script to create TypeScript and TSX example files from template files for the purchase.thank-you.customer-information.render-after target.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.customer-information.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.thank-you.customer-information.render-after\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Checkout Target Examples\nDESCRIPTION: Shell command to regenerate all default example files across documented checkout extension targets.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.payment-method-list.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Example for Specific UI Extension Target in Bash\nDESCRIPTION: This command generates example files for a specific UI extension target using a bash script. It creates 'default.example.tsx' and 'default.example.ts' files for the 'purchase.thank-you.cart-line-list.render-after' target.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.cart-line-list.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.thank-you.cart-line-list.render-after\n```\n\n----------------------------------------\n\nTITLE: Generating Example for Single Checkout Target\nDESCRIPTION: Shell command to generate default example files for a specific checkout extension target using the template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.payment-method-list.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.payment-method-list.render-after\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Example Files for Checkout Targets in Bash\nDESCRIPTION: This command regenerates example files for all documented checkout extension targets. It creates default.example.tsx and default.example.ts files for each target found in the reference directory.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-location-list.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Default Example for Specific Target in Shopify UI Extensions\nDESCRIPTION: This bash command generates the default example files for a specific extension target. It uses a template to create both TypeScript and TSX files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-point-list.render-before/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.pickup-point-list.render-before\n```\n\n----------------------------------------\n\nTITLE: Regenerating Extension Target Example with Bash Script\nDESCRIPTION: Bash command to regenerate the default example files for a specific checkout extension target using the generate-target-example.sh script.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-location-list.render-before/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.pickup-location-list.render-before\n```\n\n----------------------------------------\n\nTITLE: Regenerating Target-Specific Example Files in Shopify UI Extensions\nDESCRIPTION: Command to regenerate example files for a specific checkout target. This shell command uses the generate-target-example.sh script with a specific target path as an argument.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-point-list.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.pickup-point-list.render-after\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Target Example\nDESCRIPTION: Shell command to generate example files for a specific extension target using the template files\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.cart-line-item.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh purchase.thank-you.cart-line-item.render-after\n```\n\n----------------------------------------\n\nTITLE: Generating Example for Specific Checkout Target in Bash\nDESCRIPTION: This command regenerates the default example files for a specific checkout extension target. It uses the template files to create the corresponding TypeScript and TSX examples.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.reductions.render-before/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.reductions.render-before\n```\n\n----------------------------------------\n\nTITLE: Generating Target-Specific Example Files\nDESCRIPTION: Shell command to generate example files for the shipping-option-list target from template files. This command updates default.example.tsx and default.example.ts based on the shipping-option-list-target template.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-list.render-before/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.shipping-option-list.render-before\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Target Examples\nDESCRIPTION: Shell command to regenerate all default examples across documented targets. This script updates all example files for every documented target in the checkout surface.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-list.render-before/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Target Example Files in Shopify UI Extensions\nDESCRIPTION: Shell command to generate example files for a specific checkout target using the template files. This command updates default.example.tsx and default.example.ts for the purchase.checkout.reductions.render-after target.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.reductions.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.reductions.render-after\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Default Examples for Shopify UI Extensions\nDESCRIPTION: This bash command regenerates all the default examples across documented targets for Shopify UI extensions. It's useful for updating all examples at once.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-point-list.render-before/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Target Example Files in Shopify UI Extensions\nDESCRIPTION: Command to regenerate example files for all documented targets. This shell command runs the generate-target-examples.sh script without arguments to update all target examples.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-point-list.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Example Files for Specific Checkout Target in Bash\nDESCRIPTION: This command regenerates example files for a specific checkout extension target. It takes the target name as a parameter and creates default.example.tsx and default.example.ts files based on template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.pickup-location-list.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.pickup-location-list.render-after\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Target Example in Checkout UI Extensions\nDESCRIPTION: This bash command regenerates the default example files for a specific checkout extension target. It uses the template files to create implementation examples for the specified target.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.delivery-address.render-before/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.delivery-address.render-before\n```\n\n----------------------------------------\n\nTITLE: Generating Individual Target Example\nDESCRIPTION: Shell command to generate example files for a specific checkout target using the template files\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.delivery-address.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.delivery-address.render-after\n```\n\n----------------------------------------\n\nTITLE: Generating Example for Specific Checkout Target in Shopify UI Extensions\nDESCRIPTION: Command to regenerate the default example files for a specific checkout extension target. This example shows how to update the files for the 'purchase.checkout.contact.render-after' target.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.contact.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.contact.render-after\n```\n\n----------------------------------------\n\nTITLE: Generating Example Files for a Specific Checkout Target in Shopify UI Extensions\nDESCRIPTION: This bash command generates default example files for a specific extension target. It uses the generate-target-example.sh script to create default.example.tsx and default.example.ts files from template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.cart-line-list.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.cart-line-list.render-after\n```\n\n----------------------------------------\n\nTITLE: Defining MetaFieldFilter Interface in Markdown\nDESCRIPTION: Specifies the structure of the MetaFieldFilter interface, including properties for namespace and key. Each property is described with its type and usage constraints.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions-react/documentation/hooks.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### MetaFieldFilter\n\n| Name       | Type                | Description                                                                                                                                                                                                |\n| ---------- | ------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| namespace? | <code>string</code> | A container for a set of metafields. You need to define a custom namespace for your metafields to distinguish them from the metafields used by other apps. This value must be between 2 and 20 characters. |\n| key?       | <code>string</code> | The name of the metafield. This value must be between 3 and 30 characters.                                                                                                                                 |\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Example Files for Checkout Targets in Shopify UI Extensions\nDESCRIPTION: This bash command regenerates all default example files across documented targets. It uses the generate-target-examples.sh script to update all default.example.tsx and default.example.ts files from their templates.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.cart-line-list.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating Specific Target Example in Shopify UI Extensions\nDESCRIPTION: Bash command to generate example files for a specific cart line item target from template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.cart-line-item.render-after/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.checkout.cart-line-item.render-after\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Target Examples in Shopify UI Extensions\nDESCRIPTION: Bash command to regenerate all default examples across documented targets in the UI extensions package.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.cart-line-item.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating All Target Example Files Using Bash\nDESCRIPTION: Shell command to regenerate all default example files across documented targets in the UI extensions project.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.block.render/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Regenerating Specific Target Example Files in Shopify UI Extensions\nDESCRIPTION: Bash command to regenerate example files for a specific extension target. This command updates the default.example.tsx and default.example.ts files for the purchase.thank-you.block.render target using the standard template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.block.render/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.thank-you.block.render\n```\n\n----------------------------------------\n\nTITLE: Regenerating All Target Example Files in Shopify UI Extensions\nDESCRIPTION: Bash command to regenerate all example files across documented targets. This is used to update all default examples in the UI extension system at once.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.block.render/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Regenerating All UI Extension Target Examples in Bash\nDESCRIPTION: This command runs a bash script to regenerate all default examples across documented targets in the UI extensions project. It updates examples for all targets found in the specified directory.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.thank-you.cart-line-list.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Running Script to Generate All Target Examples\nDESCRIPTION: Command to regenerate all default examples across documented targets in the UI Extensions project. This is useful for bulk updates to maintain consistency across example files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-item.details.render/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Rendering Basic Text with Shopify UI Extensions Text Component\nDESCRIPTION: This snippet demonstrates the expected HTML output when using the Text component to render a simple 'Hello, World!' message. The Text component renders as a <span> element in the web host environment.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/Text/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<span>Hello, World!</span>\n```\n\n----------------------------------------\n\nTITLE: Referencing Button Component in Shopify UI Extensions\nDESCRIPTION: This code snippet demonstrates how to reference the Button component in Shopify UI extensions documentation. It uses a markdown link to point to the Button component's documentation in the GitHub repository.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/checkout/components/Banner/content/guidelines.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`Button`](https://github.com/Shopify/ui-extensions/tree/main/packages/checkout-ui-extensions/src/components/Button)\n```\n\n----------------------------------------\n\nTITLE: Generating Single Target Example Files in Shopify UI Extensions\nDESCRIPTION: Shell command to generate default example files for a specific cart line item target from template files.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.cart-line-item.line-components.render/README.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-example.sh  purchase.cart-line-item.line-components.render\n```\n\n----------------------------------------\n\nTITLE: Rendering PasswordField Component in HTML\nDESCRIPTION: This snippet shows the expected HTML output when a PasswordField component is rendered in a web host environment. It uses the password input type which automatically masks the user's input for security purposes.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/PasswordField/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"password\" />\n```\n\n----------------------------------------\n\nTITLE: Importing Batched Updates from React-DOM in React-Redux\nDESCRIPTION: Code snippet showing how react-redux imports the unstable_batchedUpdates function from react-dom. This dependency is missing in the current build context, causing the error.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/point-of-sale/staticPages/examples/troubleshooting/could-not-resolve.txt#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport { unstable_batchedUpdates } from 'react-dom';\n```\n\n----------------------------------------\n\nTITLE: Rendering EmailField Component in HTML for Web Host\nDESCRIPTION: This snippet shows the expected HTML output when rendering an EmailField component in a web host environment. It uses the standard HTML input element with type 'email'.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/EmailField/README.md#2025-04-23_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"email\" />\n```\n\n----------------------------------------\n\nTITLE: Rendering TextField Component in Web Host\nDESCRIPTION: Demonstrates the expected HTML output when a TextField component is rendered in a web host environment. The TextField is rendered as a standard HTML input element with type 'text'.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/src/surfaces/admin/components/TextField/README.md#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"text\" />\n```\n\n----------------------------------------\n\nTITLE: Generating All Target Examples\nDESCRIPTION: Shell command to generate example files for all documented targets in the UI extensions package\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.delivery-address.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```\n\n----------------------------------------\n\nTITLE: Generating All Target Examples in Shopify UI Extensions\nDESCRIPTION: Shell command to regenerate all default examples across documented targets.\nSOURCE: https://github.com/shopify/ui-extensions/blob/unstable/packages/ui-extensions/docs/surfaces/checkout/reference/examples/purchase.checkout.shipping-option-list.render-after/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash ./packages/ui-extensions/docs/surfaces/checkout/generate-target-examples.sh\n```"
  }
]