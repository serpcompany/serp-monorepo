[
  {
    "owner": "square",
    "repo": "okhttp",
    "content": "TITLE: Executing Synchronous GET Request with OkHttp in Kotlin\nDESCRIPTION: This snippet demonstrates how to perform a synchronous GET request using OkHttp in Kotlin. It initializes an OkHttpClient, builds a simple GET request for a specific URL, executes it using `execute()`, and processes the response within a `use` block for resource management. It checks if the response is successful, prints all response headers, and then prints the response body as a string. A warning is included about avoiding `response.body!!.string()` for large responses (over 1 MiB) due to potential memory issues, suggesting streaming instead.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"https://publicobject.com/helloworld.txt\")\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    for ((name, value) in response.headers) {\n      println(\"$name: $value\")\n    }\n\n    println(response.body!!.string())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous GET Request with OkHttp in Java\nDESCRIPTION: This Java snippet illustrates how to execute an asynchronous GET request using OkHttp. A request is built and then executed asynchronously using `client.newCall(request).enqueue()`, which requires a `Callback` implementation. The `onFailure` method logs exceptions, and the `onResponse` method handles the successful response on a separate thread. Inside `onResponse`, it uses a try-with-resources block for the `ResponseBody`, checks for success, iterates through headers, and prints the body content using `responseBody.string()`. The documentation mentions that reading the response body might still block, even though the initial callback is asynchronous.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build();\n\n  client.newCall(request).enqueue(new Callback() {\n    @Override public void onFailure(Call call, IOException e) {\n      e.printStackTrace();\n    }\n\n    @Override public void onResponse(Call call, Response response) throws IOException {\n      try (ResponseBody responseBody = response.body()) {\n        if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n        Headers responseHeaders = response.headers();\n        for (int i = 0, size = responseHeaders.size(); i < size; i++) {\n          System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n        }\n\n        System.out.println(responseBody.string());\n      }\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Establishing Trusted Client Certificates with OkHttp in Java\nDESCRIPTION: This snippet shows how to set up client-side HandshakeCertificates to trust a server's self-signed certificate, enabling mutual TLS authentication. An OkHttpClient uses the configured sslSocketFactory and trustManager for secure communication.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nHandshakeCertificates clientCertificates = new HandshakeCertificates.Builder()\n    .addTrustedCertificate(localhostCertificate.certificate())\n    .build();\nOkHttpClient client = new OkHttpClient.Builder()\n    .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing HTTP Headers with OkHttp in Java\nDESCRIPTION: This Java snippet illustrates managing HTTP headers with OkHttp. It constructs a request, using `header(\"User-Agent\", ...)` to set a single value for that header (overwriting any previous ones) and `addHeader(\"Accept\", ...)` multiple times to include several values for the 'Accept' header. The request is executed synchronously. It then demonstrates accessing response headers using `response.header(\"Header-Name\")` to get the last value of 'Server' and 'Date', and `response.headers(\"Vary\")` to retrieve all values associated with the 'Vary' header as a list.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"https://api.github.com/repos/square/okhttp/issues\")\n      .header(\"User-Agent\", \"OkHttp Headers.java\")\n      .addHeader(\"Accept\", \"application/json; q=0.5\")\n      .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(\"Server: \" + response.header(\"Server\"));\n    System.out.println(\"Date: \" + response.header(\"Date\"));\n    System.out.println(\"Vary: \" + response.headers(\"Vary\"));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cache Control Response Interceptor\nDESCRIPTION: Creates an interceptor that modifies the Cache-Control header in responses. Demonstrates how to rewrite response headers to enable better response caching.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/interceptors.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n/** Dangerous interceptor that rewrites the server's cache-control header. */\nprivate static final Interceptor REWRITE_CACHE_CONTROL_INTERCEPTOR = new Interceptor() {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Response originalResponse = chain.proceed(chain.request());\n    return originalResponse.newBuilder()\n        .header(\"Cache-Control\", \"max-age=60\")\n        .build();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Executing Synchronous GET Request with OkHttp in Java\nDESCRIPTION: This snippet shows how to perform a synchronous GET request using OkHttp in Java. It initializes an OkHttpClient, builds a GET request, and executes it synchronously via `client.newCall(request).execute()`. The response handling occurs within a try-with-resources block to ensure the response is closed. It checks for response success, iterates through and prints response headers using `response.headers()`, and finally prints the response body as a string using `response.body().string()`. It notes that `string()` is convenient for small documents but should be avoided for large ones (over 1 MiB) to prevent loading the entire content into memory.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"https://publicobject.com/helloworld.txt\")\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    Headers responseHeaders = response.headers();\n    for (int i = 0; i < responseHeaders.size(); i++) {\n      System.out.println(responseHeaders.name(i) + \": \" + responseHeaders.value(i));\n    }\n\n    System.out.println(response.body().string());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posting a File with OkHttp in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to upload a file as a POST request using OkHttp. It converts a file into a request body and posts it to a specified URL using MEDIA_TYPE_MARKDOWN for content type. It outputs the server response content if the request is successful.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val file = File(\"README.md\")\n\n  val request = Request.Builder()\n      .url(\"https://api.github.com/markdown/raw\")\n      .post(file.asRequestBody(MEDIA_TYPE_MARKDOWN))\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    println(response.body!!.string())\n  }\n}\n\ncompanion object {\n  val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response with Moshi in Kotlin\nDESCRIPTION: Demonstrates how to use OkHttp with Moshi to make a GitHub API request and parse the JSON response into Kotlin data classes. The example shows how to create a client, make a request, and use Moshi adapters to convert the response into strongly-typed objects.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_16\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\nprivate val moshi = Moshi.Builder().build()\nprivate val gistJsonAdapter = moshi.adapter(Gist::class.java)\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n      .build()\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    val gist = gistJsonAdapter.fromJson(response.body!!.source())\n\n    for ((key, value) in gist!!.files!!) {\n      println(key)\n      println(value.content)\n    }\n  }\n}\n\n@JsonClass(generateAdapter = true)\ndata class Gist(var files: Map<String, GistFile>?)\n\n@JsonClass(generateAdapter = true)\ndata class GistFile(var content: String?)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging Interceptor in OkHttp\nDESCRIPTION: Shows how to create a basic logging interceptor that tracks request and response timing. Logs outgoing request details and incoming response information with timing metrics.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/interceptors.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass LoggingInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request request = chain.request();\n\n    long t1 = System.nanoTime();\n    logger.info(String.format(\"Sending request %s on %s%n%s\",\n        request.url(), chain.connection(), request.headers()));\n\n    Response response = chain.proceed(request);\n\n    long t2 = System.nanoTime();\n    logger.info(String.format(\"Received response for %s in %.1fms%n%s\",\n        response.request().url(), (t2 - t1) / 1e6d, response.headers()));\n\n    return response;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading URL Content with OkHttp in Java\nDESCRIPTION: This snippet demonstrates how to use OkHttp to download the content of a URL and return it as a string. It creates an OkHttpClient, builds a request, executes it, and returns the response body.\nSOURCE: https://github.com/square/okhttp/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient();\n\nString run(String url) throws IOException {\n  Request request = new Request.Builder()\n      .url(url)\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    return response.body().string();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication with OkHttp in Kotlin\nDESCRIPTION: This code demonstrates how to configure OkHttp client with an Authenticator that responds to 401 responses by adding Basic authentication credentials. It verifies if authentication has already been attempted to avoid infinite loops.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_26\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient.Builder()\n    .authenticator(object : Authenticator {\n      @Throws(IOException::class)\n      override fun authenticate(route: Route?, response: Response): Request? {\n        if (response.request.header(\"Authorization\") != null) {\n          return null // Give up, we've already attempted to authenticate.\n        }\n\n        println(\"Authenticating for response: $response\")\n        println(\"Challenges: ${response.challenges()}\")\n        val credential = Credentials.basic(\"jesse\", \"password1\")\n        return response.request.newBuilder()\n            .header(\"Authorization\", credential)\n            .build()\n      }\n    })\n    .build()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n      .build()\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing HttpLoggingInterceptor in Java\nDESCRIPTION: This snippet demonstrates how to create and configure an OkHttp interceptor for basic HTTP request and response logging in Java. The interceptor is added to an OkHttpClient instance, allowing it to log HTTP traffic at a specified level. The primary dependency is the OkHttp library, and the key configurable parameter is the logging level, which determines the verbosity of the logs.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHttpLoggingInterceptor logging = new HttpLoggingInterceptor();\nlogging.setLevel(Level.BASIC);\nOkHttpClient client = new OkHttpClient.Builder()\n  .addInterceptor(logging)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Posting a Multipart Request with OkHttp in Java\nDESCRIPTION: This Java snippet exhibits the creation of a multipart request using OkHttp. It employs MultipartBody.Builder to assemble a request containing various parts, such as an image, and an authorization header targeting Imgur's API. A valid IMGUR_CLIENT_ID and MEDIA_TYPE_PNG are necessary for authorization and image media type.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_15\n\nLANGUAGE: java\nCODE:\n```\n/**\n * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running\n * these examples, please request your own client ID! https://api.imgur.com/oauth2\n */\nprivate static final String IMGUR_CLIENT_ID = \"...\";\nprivate static final MediaType MEDIA_TYPE_PNG = MediaType.parse(\"image/png\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n  RequestBody requestBody = new MultipartBody.Builder()\n      .setType(MultipartBody.FORM)\n      .addFormDataPart(\"title\", \"Square Logo\")\n      .addFormDataPart(\"image\", \"logo-square.png\",\n          RequestBody.create(MEDIA_TYPE_PNG, new File(\"website/static/logo-square.png\")))\n      .build();\n\n  Request request = new Request.Builder()\n      .header(\"Authorization\", \"Client-ID \" + IMGUR_CLIENT_ID)\n      .url(\"https://api.imgur.com/3/image\")\n      .post(requestBody)\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous GET Request with OkHttp in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates performing an asynchronous GET request with OkHttp. It builds a request and uses `client.newCall(request).enqueue()` to execute it on a worker thread. A `Callback` object is provided to handle the response asynchronously. The `onFailure` method handles network errors, while `onResponse` processes the successful response, printing headers and the body string. The response is managed using a `use` block within the callback. It's noted that while headers are available immediately in the callback, reading the response body might still block.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build()\n\n  client.newCall(request).enqueue(object : Callback {\n    override fun onFailure(call: Call, e: IOException) {\n      e.printStackTrace()\n    }\n\n    override fun onResponse(call: Call, response: Response) {\n      response.use {\n        if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n        for ((name, value) in response.headers) {\n          println(\"$name: $value\")\n        }\n\n        println(response.body!!.string())\n      }\n    }\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Per-Call Settings in OkHttp with Kotlin\nDESCRIPTION: Demonstrates how to customize settings for individual HTTP calls in OkHttp using Kotlin. Two separate calls are made with different read timeout configurations - one with 500ms that will fail and one with 3000ms that will succeed.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_24\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n      .build()\n\n  // Copy to customize OkHttp for this request.\n  val client1 = client.newBuilder()\n      .readTimeout(500, TimeUnit.MILLISECONDS)\n      .build()\n  try {\n    client1.newCall(request).execute().use { response ->\n      println(\"Response 1 succeeded: $response\")\n    }\n  } catch (e: IOException) {\n    println(\"Response 1 failed: $e\")\n  }\n\n  // Copy to customize OkHttp for this request.\n  val client2 = client.newBuilder()\n      .readTimeout(3000, TimeUnit.MILLISECONDS)\n      .build()\n  try {\n    client2.newCall(request).execute().use { response ->\n      println(\"Response 2 succeeded: $response\")\n    }\n  } catch (e: IOException) {\n    println(\"Response 2 failed: $e\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posting JSON Data to Server with OkHttp in Java\nDESCRIPTION: This example shows how to use OkHttp to post JSON data to a server. It defines a JSON media type, creates a request body with the JSON data, builds a POST request, and executes it to get the response.\nSOURCE: https://github.com/square/okhttp/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\npublic static final MediaType JSON = MediaType.get(\"application/json\");\n\nOkHttpClient client = new OkHttpClient();\n\nString post(String url, String json) throws IOException {\n  RequestBody body = RequestBody.create(json, JSON);\n  Request request = new Request.Builder()\n      .url(url)\n      .post(body)\n      .build();\n  try (Response response = client.newCall(request).execute()) {\n    return response.body().string();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Application Interceptor to OkHttpClient\nDESCRIPTION: Demonstrates how to register an application interceptor with OkHttpClient and execute a request. Shows how redirects are handled at the application level.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/interceptors.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient.Builder()\n    .addInterceptor(new LoggingInterceptor())\n    .build();\n\nRequest request = new Request.Builder()\n    .url(\"http://www.publicobject.com/helloworld.txt\")\n    .header(\"User-Agent\", \"OkHttp Example\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nresponse.body().close();\n```\n\n----------------------------------------\n\nTITLE: Setting and Accessing HTTP Headers with OkHttp in Kotlin\nDESCRIPTION: This Kotlin example demonstrates setting request headers and accessing response headers using OkHttp. It builds a request to the GitHub API, setting a 'User-Agent' header using `header()` (which replaces existing values) and adding multiple 'Accept' headers using `addHeader()` (which appends values). After executing the request synchronously, it retrieves specific response headers: 'Server' and 'Date' using `response.header()` (which returns the last value or null), and all 'Vary' headers as a list using `response.headers()`.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"https://api.github.com/repos/square/okhttp/issues\")\n      .header(\"User-Agent\", \"OkHttp Headers.java\")\n      .addHeader(\"Accept\", \"application/json; q=0.5\")\n      .addHeader(\"Accept\", \"application/vnd.github.v3+json\")\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    println(\"Server: ${response.header(\"Server\")}\")\n    println(\"Date: ${response.header(\"Date\")}\")\n    println(\"Vary: ${response.headers(\"Vary\")}\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posting a String Body with OkHttp in Kotlin\nDESCRIPTION: This Kotlin code demonstrates how to send a string payload using an HTTP POST request with OkHttp. It defines a `MediaType` for markdown, prepares a multi-line string as the request body, and creates a `RequestBody` using the extension function `toRequestBody()`. A POST request is built targeting a markdown rendering service, including the created request body. The request is executed synchronously, and the response body (presumably the rendered HTML) is printed. It warns against using this method for large strings (> 1 MiB) as the entire body is loaded into memory.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val postBody = \"\"\"\n      |Releases\n      |--------\n      |\n      | * _1.0_ May 6, 2013\n      | * _1.1_ June 15, 2013\n      | * _1.2_ August 11, 2013\n      |\"\"\".trimMargin()\n\n  val request = Request.Builder()\n      .url(\"https://api.github.com/markdown/raw\")\n      .post(postBody.toRequestBody(MEDIA_TYPE_MARKDOWN))\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    println(response.body!!.string())\n  }\n}\n\ncompanion object {\n  val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()\n}\n```\n\n----------------------------------------\n\nTITLE: Posting Streaming Data with OkHttp in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to POST a request body as a stream using OkHttp. The body content is dynamically generated and streamed directly to a BufferedSink. It requires the OkHttp library and assumes MEDIA_TYPE_MARKDOWN is defined for content type. Input involves generating factors for numbers, and it outputs response data from a GitHub markdown API.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val requestBody = object : RequestBody() {\n    override fun contentType() = MEDIA_TYPE_MARKDOWN\n\n    override fun writeTo(sink: BufferedSink) {\n      sink.writeUtf8(\"Numbers\\n\")\n      sink.writeUtf8(\"-------\\n\")\n      for (i in 2..997) {\n        sink.writeUtf8(String.format(\" * $i = ${factor(i)}\\n\"))\n      }\n    }\n\n    private fun factor(n: Int): String {\n      for (i in 2 until n) {\n        val x = n / i\n        if (x * i == n) return \"${factor(x)} × $i\"\n      }\n      return n.toString()\n    }\n  }\n\n  val request = Request.Builder()\n      .url(\"https://api.github.com/markdown/raw\")\n      .post(requestBody)\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    println(response.body!!.string())\n  }\n}\n\ncompanion object {\n  val MEDIA_TYPE_MARKDOWN = \"text/x-markdown; charset=utf-8\".toMediaType()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing custom Dispatcher in MockWebServer with Java\nDESCRIPTION: This snippet involves implementing a Dispatcher for MockWebServer to handle HTTP requests based on the request path. The Dispatcher interface allows custom response logic beyond the default queue mechanism. It requires exception management for the dispatch method.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nfinal Dispatcher dispatcher = new Dispatcher() {\n\n    @Override\n    public MockResponse dispatch (RecordedRequest request) throws InterruptedException {\n\n        switch (request.getPath()) {\n            case \"/v1/login/auth/\":\n                return new MockResponse().setResponseCode(200);\n            case \"/v1/check/version/\":\n                return new MockResponse().setResponseCode(200).setBody(\"version=9\");\n            case \"/v1/profile/info\":\n                return new MockResponse().setResponseCode(200).setBody(\"{\\\\\\\"info\\\\\\\":{\\\\\\\"name\\\\\\\":\\\"Lucas Albuquerque\\\",\\\"age\\\":\\\"21\\\",\\\"gender\\\":\\\"male\\\"}}\\\");\n        }\n        return new MockResponse().setResponseCode(404);\n    }\n};\nserver.setDispatcher(dispatcher);\n```\n\n----------------------------------------\n\nTITLE: Posting a Multipart Request with OkHttp in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates sending multipart form data using OkHttp. It uses MultipartBody.Builder to create a request with different parts, including an image file, and sends it along with an authorization header to Imgur's API. It requires a valid IMGUR_CLIENT_ID for authorization and MEDIA_TYPE_PNG for the image type.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_14\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  // Use the imgur image upload API as documented at https://api.imgur.com/endpoints/image\n  val requestBody = MultipartBody.Builder()\n      .setType(MultipartBody.FORM)\n      .addFormDataPart(\"title\", \"Square Logo\")\n      .addFormDataPart(\"image\", \"logo-square.png\",\n          File(\"docs/images/logo-square.png\").asRequestBody(MEDIA_TYPE_PNG))\n      .build()\n\n  val request = Request.Builder()\n      .header(\"Authorization\", \"Client-ID $IMGUR_CLIENT_ID\")\n      .url(\"https://api.imgur.com/3/image\")\n      .post(requestBody)\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    println(response.body!!.string())\n  }\n}\n\ncompanion object {\n  /**\n   * The imgur client ID for OkHttp recipes. If you're using imgur for anything other than running\n   * these examples, please request your own client ID! https://api.imgur.com/oauth2\n   */\n  private val IMGUR_CLIENT_ID = \"9199fdef135c122\"\n  private val MEDIA_TYPE_PNG = \"image/png\".toMediaType()\n}\n```\n\n----------------------------------------\n\nTITLE: Posting Streaming Data with OkHttp in Java\nDESCRIPTION: This Java snippet demonstrates posting a request body as a stream using OkHttp. It dynamically generates and streams data to a BufferedSink, computing factors of numbers. Prerequisites include defining MEDIA_TYPE_MARKDOWN for content type. It processes the response from a GitHub markdown API upon success.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  RequestBody requestBody = new RequestBody() {\n    @Override public MediaType contentType() {\n      return MEDIA_TYPE_MARKDOWN;\n    }\n\n    @Override public void writeTo(BufferedSink sink) throws IOException {\n      sink.writeUtf8(\"Numbers\\n\");\n      sink.writeUtf8(\"-------\\n\");\n      for (int i = 2; i <= 997; i++) {\n        sink.writeUtf8(String.format(\" * %s = %s\\n\", i, factor(i)));\n      }\n    }\n\n    private String factor(int n) {\n      for (int i = 2; i < n; i++) {\n        int x = n / i;\n        if (x * i == n) return factor(x) + \" × \" + i;\n      }\n      return Integer.toString(n);\n    }\n  };\n\n  Request request = new Request.Builder()\n      .url(\"https://api.github.com/markdown/raw\")\n      .post(requestBody)\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posting a File with OkHttp in Java\nDESCRIPTION: This Java snippet exemplifies file upload via a POST request utilizing OkHttp. It employs RequestBody to wrap a file using the MEDIA_TYPE_MARKDOWN for content type and sends it to a predetermined URL. Successful responses are printed.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_11\n\nLANGUAGE: java\nCODE:\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  File file = new File(\"README.md\");\n\n  Request request = new Request.Builder()\n      .url(\"https://api.github.com/markdown/raw\")\n      .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, file))\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posting a String Body with OkHttp in Java\nDESCRIPTION: This Java snippet shows how to perform an HTTP POST request with a string body using OkHttp. It defines a static `MediaType` for markdown content. Inside the `run` method, it constructs the string payload. It then builds a POST request using `Request.Builder().post()` and provides a `RequestBody` created using `RequestBody.create()`, passing the `MediaType` and the string body. The request is executed synchronously, and the response body is printed. A cautionary note advises against this approach for large strings (over 1 MiB) because it loads the entire content into memory.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\npublic static final MediaType MEDIA_TYPE_MARKDOWN\n    = MediaType.parse(\"text/x-markdown; charset=utf-8\");\n\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  String postBody = \"\"\n      + \"Releases\\n\"\n      + \"--------\\n\"\n      + \"\\n\"\n      + \" * _1.0_ May 6, 2013\\n\"\n      + \" * _1.1_ June 15, 2013\\n\"\n      + \" * _1.2_ August 11, 2013\\n\";\n\n  Request request = new Request.Builder()\n      .url(\"https://api.github.com/markdown/raw\")\n      .post(RequestBody.create(MEDIA_TYPE_MARKDOWN, postBody))\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Posting Form Parameters with OkHttp in Kotlin\nDESCRIPTION: This Kotlin snippet demonstrates how to send form parameters using OkHttp. Using FormBody.Builder, it constructs a form-encoded request body and sends it via POST to a specified URL. It displays the server's response body if the request is successful.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_12\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient()\n\nfun run() {\n  val formBody = FormBody.Builder()\n      .add(\"search\", \"Jurassic Park\")\n      .build()\n  val request = Request.Builder()\n      .url(\"https://en.wikipedia.org/w/index.php\")\n      .post(formBody)\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    println(response.body!!.string())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Connection Specs in OkHttp\nDESCRIPTION: Demonstrates how to configure an OkHttpClient with multiple connection specs to allow fallback from MODERN_TLS to COMPATIBLE_TLS for improved compatibility.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/https.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient.Builder()\n    .connectionSpecs(Arrays.asList(ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts in OkHttp with Java\nDESCRIPTION: Shows how to configure various timeouts in OkHttp using Java. The example sets connect, write, and read timeouts when building the OkHttpClient, then makes a request to a URL with a 2-second delay.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client;\n\npublic ConfigureTimeouts() throws Exception {\n  client = new OkHttpClient.Builder()\n      .connectTimeout(10, TimeUnit.SECONDS)\n      .writeTimeout(10, TimeUnit.SECONDS)\n      .readTimeout(30, TimeUnit.SECONDS)\n      .build();\n}\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    System.out.println(\"Response completed: \" + response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OkHttpClient with Custom TrustManager in Kotlin\nDESCRIPTION: Demonstrates configuring an OkHttp client in Kotlin to trust a specific set of certificates. It involves creating a custom `X509TrustManager` from certificate data (via `trustedCertificatesInputStream`), initializing an `SSLContext`, and building the `OkHttpClient` with the resulting `SSLSocketFactory` and `TrustManager`. A sample `run` function executes a request using the configured client. Helper methods `trustedCertificatesInputStream()` and `trustManagerForCertificates()` are referenced but their full implementation is omitted.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/https.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\n  private val client: OkHttpClient\n\n  init {\n    val trustManager = trustManagerForCertificates(trustedCertificatesInputStream())\n    val sslContext = SSLContext.getInstance(\"TLS\")\n    sslContext.init(null, arrayOf<TrustManager>(trustManager), null)\n    val sslSocketFactory = sslContext.socketFactory\n\n    client = OkHttpClient.Builder()\n        .sslSocketFactory(sslSocketFactory, trustManager)\n        .build()\n  }\n\n  fun run() {\n    val request = Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build()\n\n    client.newCall(request).execute().use { response ->\n      if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n      for ((name, value) in response.headers) {\n        println(\"$name: $value\")\n      }\n\n      println(response.body!!.string())\n    }\n  }\n\n  /**\n   * Returns an input stream containing one or more certificate PEM files. This implementation just\n   * embeds the PEM files in Java strings; most applications will instead read this from a resource\n   * file that gets bundled with the application.\n   */\n  private fun trustedCertificatesInputStream(): InputStream {\n    ... // Full source omitted. See sample.\n  }\n\n  private fun trustManagerForCertificates(inputStream: InputStream): X509TrustManager {\n    ... // Full source omitted. See sample.\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Caching in Kotlin with OkHttp\nDESCRIPTION: Demonstrates how to configure and use OkHttp's response caching in Kotlin. The example shows setting up a cache directory with size limits, making requests, and examining how responses are served from cache on subsequent requests.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_18\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client: OkHttpClient = OkHttpClient.Builder()\n    .cache(Cache(\n        directory = cacheDirectory,\n        maxSize = 10L * 1024L * 1024L // 10 MiB\n    ))\n    .build()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build()\n\n  val response1Body = client.newCall(request).execute().use {\n    if (!it.isSuccessful) throw IOException(\"Unexpected code $it\")\n\n    println(\"Response 1 response:          $it\")\n    println(\"Response 1 cache response:    ${it.cacheResponse}\")\n    println(\"Response 1 network response:  ${it.networkResponse}\")\n    return@use it.body!!.string()\n  }\n\n  val response2Body = client.newCall(request).execute().use {\n    if (!it.isSuccessful) throw IOException(\"Unexpected code $it\")\n\n    println(\"Response 2 response:          $it\")\n    println(\"Response 2 cache response:    ${it.cacheResponse}\")\n    println(\"Response 2 network response:  ${it.networkResponse}\")\n    return@use it.body!!.string()\n  }\n\n  println(\"Response 2 equals Response 1? \" + (response1Body == response2Body))\n}\n```\n\n----------------------------------------\n\nTITLE: Using OkHttp Bill of Materials (BOM) in Kotlin Projects\nDESCRIPTION: This Kotlin code snippet demonstrates how to use the OkHttp Bill of Materials (BOM) in a Gradle project. It helps keep OkHttp artifacts up to date and ensures version compatibility across different OkHttp modules.\nSOURCE: https://github.com/square/okhttp/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\ndependencies {\n   // define a BOM and its version\n   implementation(platform(\"com.squareup.okhttp3:okhttp-bom:4.12.0\"))\n\n   // define any required OkHttp artifacts without version\n   implementation(\"com.squareup.okhttp3:okhttp\")\n   implementation(\"com.squareup.okhttp3:logging-interceptor\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle for OkHttp 4.x Compatibility\nDESCRIPTION: Gradle configuration to target Java 8 bytecode for Kotlin, Java, and Android plugins, which is required for OkHttp 4.x as it requires Java 8+ and Android 5+.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_8\n\nLANGUAGE: groovy\nCODE:\n```\ncompileKotlin {\n  kotlinOptions {\n    jvmTarget = \"1.8\"\n  }\n}\ncompileTestKotlin {\n  kotlinOptions {\n    jvmTarget = \"1.8\"\n  }\n}\n\ncompileJava {\n  sourceCompatibility = JavaVersion.VERSION_1_8\n  targetCompatibility = JavaVersion.VERSION_1_8\n}\n\nandroid {\n  compileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_8\n    targetCompatibility JavaVersion.VERSION_1_8\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling HTTP Calls with OkHttp in Java\nDESCRIPTION: Demonstrates how to cancel an ongoing OkHttp call in Java. The example creates a call to a URL with a 2-second delay, schedules a cancellation after 1 second, and handles the resulting IOException.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nprivate final ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n      .build();\n\n  final long startNanos = System.nanoTime();\n  final Call call = client.newCall(request);\n\n  // Schedule a job to cancel the call in 1 second.\n  executor.schedule(new Runnable() {\n    @Override public void run() {\n      System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n      call.cancel();\n      System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n    }\n  }, 1, TimeUnit.SECONDS);\n\n  System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f);\n  try (Response response = call.execute()) {\n    System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n        (System.nanoTime() - startNanos) / 1e9f, response);\n  } catch (IOException e) {\n    System.out.printf(\"%.2f Call failed as expected: %s%n\",\n        (System.nanoTime() - startNanos) / 1e9f, e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OkHttpClient with Custom TrustManager in Java\nDESCRIPTION: Shows how to configure an OkHttp client in Java to use custom TLS certificates. It creates a custom `X509TrustManager` (via `trustManagerForCertificates`) from certificate data obtained via `trustedCertificatesInputStream`, initializes an `SSLContext`, and constructs the `OkHttpClient` using the custom `SSLSocketFactory` and `TrustManager`. The constructor handles potential `GeneralSecurityException`. A sample `run` method executes a request. Helper methods `trustedCertificatesInputStream()` and `trustManagerForCertificates()` (implicitly used) are referenced but their full implementation is omitted.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/https.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\n  private final OkHttpClient client;\n\n  public CustomTrust() {\n    X509TrustManager trustManager;\n    SSLSocketFactory sslSocketFactory;\n    try {\n      trustManager = trustManagerForCertificates(trustedCertificatesInputStream());\n      SSLContext sslContext = SSLContext.getInstance(\"TLS\");\n      sslContext.init(null, new TrustManager[] { trustManager }, null);\n      sslSocketFactory = sslContext.getSocketFactory();\n    } catch (GeneralSecurityException e) {\n      throw new RuntimeException(e);\n    }\n\n    client = new OkHttpClient.Builder()\n        .sslSocketFactory(sslSocketFactory, trustManager)\n        .build();\n  }\n\n  public void run() throws Exception {\n    Request request = new Request.Builder()\n        .url(\"https://publicobject.com/helloworld.txt\")\n        .build();\n\n    Response response = client.newCall(request).execute();\n    System.out.println(response.body().string());\n  }\n\n  private InputStream trustedCertificatesInputStream() {\n    ... // Full source omitted. See sample.\n  }\n\n  public SSLContext sslContextForTrustedCertificates(InputStream in) {\n    ... // Full source omitted. See sample.\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Authentication with OkHttp in Java\nDESCRIPTION: Java implementation of an OkHttp client with an Authenticator that handles 401 responses by adding Basic authentication credentials. Includes request execution and response handling.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client;\n\npublic Authenticate() {\n  client = new OkHttpClient.Builder()\n      .authenticator(new Authenticator() {\n        @Override public Request authenticate(Route route, Response response) throws IOException {\n          if (response.request().header(\"Authorization\") != null) {\n            return null; // Give up, we've already attempted to authenticate.\n          }\n\n          System.out.println(\"Authenticating for response: \" + response);\n          System.out.println(\"Challenges: \" + response.challenges());\n          String credential = Credentials.basic(\"jesse\", \"password1\");\n          return response.request().newBuilder()\n              .header(\"Authorization\", credential)\n              .build();\n        }\n      })\n      .build();\n}\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://publicobject.com/secrets/hellosecret.txt\")\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Response Caching in Java with OkHttp\nDESCRIPTION: Shows how to implement HTTP response caching in Java using OkHttp. The example demonstrates configuring a cache directory with size limits, making requests, and examining cache and network responses to verify caching behavior.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client;\n\npublic CacheResponse(File cacheDirectory) throws Exception {\n  int cacheSize = 10 * 1024 * 1024; // 10 MiB\n  Cache cache = new Cache(cacheDirectory, cacheSize);\n\n  client = new OkHttpClient.Builder()\n      .cache(cache)\n      .build();\n}\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://publicobject.com/helloworld.txt\")\n      .build();\n\n  String response1Body;\n  try (Response response1 = client.newCall(request).execute()) {\n    if (!response1.isSuccessful()) throw new IOException(\"Unexpected code \" + response1);\n\n    response1Body = response1.body().string();\n    System.out.println(\"Response 1 response:          \" + response1);\n    System.out.println(\"Response 1 cache response:    \" + response1.cacheResponse());\n    System.out.println(\"Response 1 network response:  \" + response1.networkResponse());\n  }\n\n  String response2Body;\n  try (Response response2 = client.newCall(request).execute()) {\n    if (!response2.isSuccessful()) throw new IOException(\"Unexpected code \" + response2);\n\n    response2Body = response2.body().string();\n    System.out.println(\"Response 2 response:          \" + response2);\n    System.out.println(\"Response 2 cache response:    \" + response2.cacheResponse());\n    System.out.println(\"Response 2 network response:  \" + response2.networkResponse());\n  }\n\n  System.out.println(\"Response 2 equals Response 1? \" + response1Body.equals(response2Body));\n}\n```\n\n----------------------------------------\n\nTITLE: Certificate Pinning Implementation in Kotlin\nDESCRIPTION: Demonstrates certificate pinning in Kotlin using CertificatePinner to restrict trusted certificates for enhanced security.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/https.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client = OkHttpClient.Builder()\n    .certificatePinner(\n        CertificatePinner.Builder()\n            .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\")\n            .build())\n    .build()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"https://publicobject.com/robots.txt\")\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    if (!response.isSuccessful) throw IOException(\"Unexpected code $response\")\n\n    for (certificate in response.handshake!!.peerCertificates) {\n      println(CertificatePinner.pin(certificate))\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Mutual Authentication with OkHttp in Java\nDESCRIPTION: This snippet shows how to implement a mutual TLS authentication between a client and server using HeldCertificate and HandshakeCertificates. Both parties authenticate each other by verifying certificates signed by a commonly trusted root.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_6\n\nLANGUAGE: java\nCODE:\n```\n// Create the root for client and server to trust. We could also use different roots for each!\nHeldCertificate rootCertificate = new HeldCertificate.Builder()\n    .certificateAuthority(0)\n    .build();\n\n// Create a server certificate and a server that uses it.\nHeldCertificate serverCertificate = new HeldCertificate.Builder()\n    .commonName(\"ingen\")\n    .addSubjectAlternativeName(server.getHostName())\n    .signedBy(rootCertificate)\n    .build();\nHandshakeCertificates serverCertificates = new HandshakeCertificates.Builder()\n    .addTrustedCertificate(rootCertificate.certificate())\n    .heldCertificate(serverCertificate)\n    .build();\nMockWebServer server = new MockWebServer();\nserver.useHttps(serverCertificates.sslSocketFactory(), false);\nserver.requestClientAuth();\nserver.enqueue(new MockResponse());\n\n// Create a client certificate and a client that uses it.\nHeldCertificate clientCertificate = new HeldCertificate.Builder()\n    .commonName(\"ianmalcolm\")\n    .signedBy(rootCertificate)\n    .build();\nHandshakeCertificates clientCertificates = new HandshakeCertificates.Builder()\n    .addTrustedCertificate(rootCertificate.certificate())\n    .heldCertificate(clientCertificate)\n    .build();\nOkHttpClient client = new OkHttpClient.Builder()\n    .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager())\n    .build();\n\n// Connect 'em all together. Certificates are exchanged in the handshake.\nCall call = client.newCall(new Request.Builder()\n    .url(server.url(\"/\"))\n    .build());\nResponse response = call.execute();\nSystem.out.println(response.handshake().peerPrincipal());\nRecordedRequest recordedRequest = server.takeRequest();\nSystem.out.println(recordedRequest.getHandshake().peerPrincipal());\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeouts in OkHttp with Kotlin\nDESCRIPTION: Shows how to configure various timeouts in OkHttp using Kotlin. The example sets connect, write, read, and call timeouts when building the OkHttpClient, then makes a request to a URL with a 2-second delay.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val client: OkHttpClient = OkHttpClient.Builder()\n    .connectTimeout(5, TimeUnit.SECONDS)\n    .writeTimeout(5, TimeUnit.SECONDS)\n    .readTimeout(5, TimeUnit.SECONDS)\n    .callTimeout(10, TimeUnit.SECONDS)\n    .build()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n      .build()\n\n  client.newCall(request).execute().use { response ->\n    println(\"Response completed: $response\")\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing JSON Response with Moshi in Java\nDESCRIPTION: Shows how to use OkHttp with Moshi to parse a GitHub API JSON response in Java. It demonstrates client configuration, executing a request, and using Moshi to convert the response into Java objects with a type-safe approach.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client = new OkHttpClient();\nprivate final Moshi moshi = new Moshi.Builder().build();\nprivate final JsonAdapter<Gist> gistJsonAdapter = moshi.adapter(Gist.class);\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"https://api.github.com/gists/c2a7c39532239ff261be\")\n      .build();\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    Gist gist = gistJsonAdapter.fromJson(response.body().source());\n\n    for (Map.Entry<String, GistFile> entry : gist.files.entrySet()) {\n      System.out.println(entry.getKey());\n      System.out.println(entry.getValue().content);\n    }\n  }\n}\n\nstatic class Gist {\n  Map<String, GistFile> files;\n}\n\nstatic class GistFile {\n  String content;\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying RecordedRequest attributes in Java\nDESCRIPTION: This snippet shows how to use the RecordedRequest class to verify the details of an HTTP request, such as request line, headers, and body content. Assert methods are used to ensure the request aligns with expectations, essential for validating client-server communication.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nRecordedRequest request = server.takeRequest();\nassertEquals(\"POST /v1/chat/send HTTP/1.1\", request.getRequestLine());\nassertEquals(\"application/json; charset=utf-8\", request.getHeader(\"Content-Type\"));\nassertEquals(\"{}\", request.getBody().readUtf8());\n```\n\n----------------------------------------\n\nTITLE: Configuring Certificate Pinning with Wildcards - OkHttp Java\nDESCRIPTION: This Java snippet illustrates how to configure CertificatePinner in OkHttp to support wildcard hostnames. It shows using a builder pattern to add several SHA-1 certificate pins for both the apex domain and its wildcard subdomain (e.g., publicobject.com and *.publicobject.com). The snippet requires OkHttp as a dependency and an OkHttpClient instance named 'client'. Inputs are domain names and certificate fingerprint strings. Output is a configured CertificatePinner set on the OkHttpClient. Limitation: Take great care when updating certificates, as improper pinning could render your app unable to connect to servers ('bricking').\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nclient.setCertificatePinner(new CertificatePinner.Builder()\\n    .add(\"publicobject.com\",   \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\")\\n    .add(\"*.publicobject.com\", \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\")\\n    .add(\"publicobject.com\",   \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\")\\n    .add(\"*.publicobject.com\", \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\")\\n    .add(\"publicobject.com\",   \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\")\\n    .add(\"*.publicobject.com\", \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\")\\n    .add(\"publicobject.com\",   \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\")\\n    .add(\"*.publicobject.com\", \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\")\\n    .build());\\n\n```\n\n----------------------------------------\n\nTITLE: Simulating network conditions with MockResponse in Java\nDESCRIPTION: Demonstrates the use of the MockResponse class to simulate a throttled connection, which is useful for testing scenarios involving timeouts or slow network conditions. The throttleBody method specifies the amount of data and delay, requiring java.util.concurrent.TimeUnit for time specification.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nresponse.throttleBody(1024, 1, TimeUnit.SECONDS);\n```\n\n----------------------------------------\n\nTITLE: Posting Form Parameters with OkHttp in Java\nDESCRIPTION: This Java snippet illustrates sending form parameters via POST with OkHttp. It employs FormBody.Builder to build an HTML compatible form-encoded body, which is sent to the defined URL. A successful request prints the response body content.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  RequestBody formBody = new FormBody.Builder()\n      .add(\"search\", \"Jurassic Park\")\n      .build();\n  Request request = new Request.Builder()\n      .url(\"https://en.wikipedia.org/w/index.php\")\n      .post(formBody)\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    System.out.println(response.body().string());\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating MockResponse in Java\nDESCRIPTION: This snippet shows how to initialize a MockResponse with specific headers and a JSON body in Java. The MockResponse class uses a fluent API to set headers and body content. It's useful for configuring mock responses with custom data formats such as JSON.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nMockResponse response = new MockResponse()\n    .addHeader(\"Content-Type\", \"application/json; charset=utf-8\")\n    .addHeader(\"Cache-Control\", \"no-cache\")\n    .setBody(\"{}\");\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous OkHttp Call with Kotlin Coroutines\nDESCRIPTION: Demonstrates making an asynchronous OkHttp request using the `executeAsync()` extension function within a Kotlin coroutine. The response is handled within a `use` block to ensure resources are closed, and the body is read using `withContext(Dispatchers.IO)` to avoid blocking the main thread. Requires an `OkHttpClient` (`client`) and a `Request` (`request`). This implementation uses `suspendCancellableCoroutine` internally but relies on OkHttp's standard dispatcher, not Kotlin's Dispatchers by default. Cancellation propagates between the coroutine scope and the OkHttp call.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-coroutines/README.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nval call = client.newCall(request)\n\ncall.executeAsync().use { response ->\n  withContext(Dispatchers.IO) {\n    println(response.body?.string())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Per-Call Settings in OkHttp with Java\nDESCRIPTION: Demonstrates how to customize settings for individual HTTP calls in OkHttp using Java. Two separate calls are made with different read timeout configurations - one with 500ms that will fail and one with 3000ms that will succeed.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client = new OkHttpClient();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"http://httpbin.org/delay/1\") // This URL is served with a 1 second delay.\n      .build();\n\n  // Copy to customize OkHttp for this request.\n  OkHttpClient client1 = client.newBuilder()\n      .readTimeout(500, TimeUnit.MILLISECONDS)\n      .build();\n  try (Response response = client1.newCall(request).execute()) {\n    System.out.println(\"Response 1 succeeded: \" + response);\n  } catch (IOException e) {\n    System.out.println(\"Response 1 failed: \" + e);\n  }\n\n  // Copy to customize OkHttp for this request.\n  OkHttpClient client2 = client.newBuilder()\n      .readTimeout(3000, TimeUnit.MILLISECONDS)\n      .build();\n  try (Response response = client2.newCall(request).execute()) {\n    System.out.println(\"Response 2 succeeded: \" + response);\n  } catch (IOException e) {\n    System.out.println(\"Response 2 failed: \" + e);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP interactions with MockWebServer in Java\nDESCRIPTION: This snippet demonstrates how to use MockWebServer to script mock responses, start the server, and verify HTTP requests in Java. It requires the MockWebServer and HttpUrl classes for operation. The test method scripts multiple responses, uses a chat application to simulate requests, and asserts the expected server interactions.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\npublic void test() throws Exception {\n  // Create a MockWebServer. These are lean enough that you can create a new\n  // instance for every unit test.\n  MockWebServer server = new MockWebServer();\n\n  // Schedule some responses.\n  server.enqueue(new MockResponse().setBody(\"hello, world!\"));\n  server.enqueue(new MockResponse().setBody(\"sup, bra?\"));\n  server.enqueue(new MockResponse().setBody(\"yo dog\"));\n\n  // Start the server.\n  server.start();\n\n  // Ask the server for its URL. You'll need this to make HTTP requests.\n  HttpUrl baseUrl = server.url(\"/v1/chat/\");\n\n  // Exercise your application code, which should make those HTTP requests.\n  // Responses are returned in the same order that they are enqueued.\n  Chat chat = new Chat(baseUrl);\n\n  chat.loadMore();\n  assertEquals(\"hello, world!\", chat.messages());\n\n  chat.loadMore();\n  chat.loadMore();\n  assertEquals(\"\"\n      + \"hello, world!\\n\"\n      + \"sup, bra?\\n\"\n      + \"yo dog\", chat.messages());\n\n  // Optional: confirm that your app made the HTTP requests you were expecting.\n  RecordedRequest request1 = server.takeRequest();\n  assertEquals(\"/v1/chat/messages/\", request1.getPath());\n  assertNotNull(request1.getHeader(\"Authorization\"));\n\n  RecordedRequest request2 = server.takeRequest();\n  assertEquals(\"/v1/chat/messages/2\", request2.getPath());\n\n  RecordedRequest request3 = server.takeRequest();\n  assertEquals(\"/v1/chat/messages/3\", request3.getPath());\n\n  // Shut down the server. Instances cannot be reused.\n  server.shutdown();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EventListener.Factory for Concurrent HTTP Calls in Java\nDESCRIPTION: This snippet shows how to create an EventListener.Factory that generates unique EventListener instances for each call, allowing for tracking of concurrent HTTP requests.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/events.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass PrintingEventListener extends EventListener {\n  public static final Factory FACTORY = new Factory() {\n    final AtomicLong nextCallId = new AtomicLong(1L);\n\n    @Override public EventListener create(Call call) {\n      long callId = nextCallId.getAndIncrement();\n      System.out.printf(\"%04d %s%n\", callId, call.request().url());\n      return new PrintingEventListener(callId, System.nanoTime());\n    }\n  };\n\n  final long callId;\n  final long callStartNanos;\n\n  public PrintingEventListener(long callId, long callStartNanos) {\n    this.callId = callId;\n    this.callStartNanos = callStartNanos;\n  }\n\n  private void printEvent(String name) {\n    long elapsedNanos = System.nanoTime() - callStartNanos;\n    System.out.printf(\"%04d %.3f %s%n\", callId, elapsedNanos / 1000000000d, name);\n  }\n\n  @Override public void callStart(Call call) {\n    printEvent(\"callStart\");\n  }\n\n  @Override public void callEnd(Call call) {\n    printEvent(\"callEnd\");\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Random Sampling EventListener.Factory in Java\nDESCRIPTION: This snippet shows how to create an EventListener.Factory that randomly captures metrics for a subset of calls (10% in this case).\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/events.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nclass MetricsEventListener extends EventListener {\n  private static final Factory FACTORY = new Factory() {\n    @Override public EventListener create(Call call) {\n      if (Math.random() < 0.10) {\n        return new MetricsEventListener(call);\n      } else {\n        return EventListener.NONE;\n      }\n    }\n  };\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EventListener for HTTP Call Metrics in Java\nDESCRIPTION: This snippet demonstrates how to create an EventListener subclass that prints each event with a timestamp. It overrides methods for various events in the HTTP call lifecycle.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/events.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nclass PrintingEventListener extends EventListener {\n  private long callStartNanos;\n\n  private void printEvent(String name) {\n    long nowNanos = System.nanoTime();\n    if (name.equals(\"callStart\")) {\n      callStartNanos = nowNanos;\n    }\n    long elapsedNanos = nowNanos - callStartNanos;\n    System.out.printf(\"%.3f %s%n\", elapsedNanos / 1000000000d, name);\n  }\n\n  @Override public void callStart(Call call) {\n    printEvent(\"callStart\");\n  }\n\n  @Override public void callEnd(Call call) {\n    printEvent(\"callEnd\");\n  }\n\n  @Override public void dnsStart(Call call, String domainName) {\n    printEvent(\"dnsStart\");\n  }\n\n  @Override public void dnsEnd(Call call, String domainName, List<InetAddress> inetAddressList) {\n    printEvent(\"dnsEnd\");\n  }\n\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring DNS-over-HTTPS Client\nDESCRIPTION: Example showing how to set up a DNS-over-HTTPS client using OkHttp. Creates a cached HTTP client and configures it to use Google's DNS-over-HTTPS service with specified bootstrap DNS servers.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-dnsoverhttps/README.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\n  val appCache = Cache(File(\"cacheDir\", \"okhttpcache\"), 10 * 1024 * 1024)\n  val bootstrapClient = OkHttpClient.Builder().cache(appCache).build()\n\n  val dns = DnsOverHttps.Builder().client(bootstrapClient)\n    .url(\"https://dns.google/dns-query\".toHttpUrl())\n    .bootstrapDnsHosts(InetAddress.getByName(\"8.8.4.4\"), InetAddress.getByName(\"8.8.8.8\"))\n    .build()\n\n  val client = bootstrapClient.newBuilder().dns(dns).build()\n```\n\n----------------------------------------\n\nTITLE: Trusting Certificate Authorities with OkHttp in Java\nDESCRIPTION: This code configures client-side HandshakeCertificates to trust a root certificate authority for TLS communication. It ensures the client can verify server certificates signed by this trusted root.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nHandshakeCertificates clientCertificates = new HandshakeCertificates.Builder()\n    .addTrustedCertificate(rootCertificate.certificate())\n    .build();\nOkHttpClient client = new OkHttpClient.Builder()\n    .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Decoding Certificate and Private Key in Kotlin\nDESCRIPTION: Demonstrates how to decode a certificate and PKCS #8-encoded private key to create a HeldCertificate, and use it with MockWebServer for HTTPS testing.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_8\n\nLANGUAGE: kotlin\nCODE:\n```\nval heldCertificate = HeldCertificate.decode(\"\"\"\n        |-----BEGIN CERTIFICATE-----\n        |MIIBYTCCAQegAwIBAgIBKjAKBggqhkjOPQQDAjApMRQwEgYDVQQLEwtlbmdpbmVl\n        |cmluZzERMA8GA1UEAxMIY2FzaC5hcHAwHhcNNzAwMTAxMDAwMDA1WhcNNzAwMTAx\n        |MDAwMDEwWjApMRQwEgYDVQQLEwtlbmdpbmVlcmluZzERMA8GA1UEAxMIY2FzaC5h\n        |cHAwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASda8ChkQXxGELnrV/oBnIAx3dD\n        |ocUOJfdz4pOJTP6dVQB9U3UBiW5uSX/MoOD0LL5zG3bVyL3Y6pDwKuYvfLNhoyAw\n        |HjAcBgNVHREBAf8EEjAQhwQBAQEBgghjYXNoLmFwcDAKBggqhkjOPQQDAgNIADBF\n        |AiAyHHg1N6YDDQiY920+cnI5XSZwEGhAtb9PYWO8bLmkcQIhAI2CfEZf3V/obmdT\n        |yyaoEufLKVXhrTQhRfodTeigi4RX\n        |-----END CERTIFICATE-----\n        |-----BEGIN PRIVATE KEY-----\n        |MEECAQAwEwYHKoZIzj0CAQYIKoZIzj0DAQcEJzAlAgEBBCA7ODT0xhGSNn4ESj6J\n        |lu/GJQZoU9lDrCPeUcQ28tzOWw==\n        |-----END PRIVATE KEY-----\n        \"\"\".trimMargin())\nval handshakeCertificates = HandshakeCertificates.Builder()\n    .heldCertificate(heldCertificate)\n    .build()\nval server = MockWebServer()\nserver.useHttps(handshakeCertificates.sslSocketFactory(), false)\n```\n\n----------------------------------------\n\nTITLE: Evicting All Entries from OkHttp Cache in Kotlin\nDESCRIPTION: Illustrates how to remove all entries currently stored within the OkHttp cache while keeping the cache directory intact, using the `evictAll()` method in Kotlin. This is useful for clearing space temporarily without deleting the cache structure.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/caching.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\ncache.evictAll()\n```\n\n----------------------------------------\n\nTITLE: Certificate Pinning Implementation in Java\nDESCRIPTION: Shows certificate pinning implementation in Java using CertificatePinner to restrict trusted certificates for enhanced security.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/https.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nprivate final OkHttpClient client = new OkHttpClient.Builder()\n    .certificatePinner(\n        new CertificatePinner.Builder()\n            .add(\"publicobject.com\", \"sha256/afwiKY3RxoMmLkuRW1l7QsPZTJPwDS2pdDROQjXw8ig=\")\n            .build())\n    .build();\n\npublic void run() throws Exception {\n  Request request = new Request.Builder()\n      .url(\"https://publicobject.com/robots.txt\")\n      .build();\n\n  try (Response response = client.newCall(request).execute()) {\n    if (!response.isSuccessful()) throw new IOException(\"Unexpected code \" + response);\n\n    for (Certificate certificate : response.handshake().peerCertificates()) {\n      System.out.println(CertificatePinner.pin(certificate));\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating OkHttp Brotli Dependency in Kotlin\nDESCRIPTION: Demonstrates the inclusion of the OkHttp Brotli library in a Kotlin project by adding a dependency entry to build configurations. This requires the use of a build system like Gradle and the presence of OkHttp 4.12.0 or later. The snippet adds the necessary dependency to support Brotli compression in OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-brotli/README.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okhttp3:okhttp-brotli:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Using Platform's Trusted Certificates with OkHttp in Java\nDESCRIPTION: This code configures a client to use the default platform's trusted root certificates by calling addPlatformTrustedCertificates() on HandshakeCertificates. It provides a straightforward approach to leverage the built-in certificate authorities of the host platform.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nHandshakeCertificates clientCertificates = new HandshakeCertificates.Builder()\n    .addPlatformTrustedCertificates()\n    .build();\nOkHttpClient client = new OkHttpClient.Builder()\n    .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificates with OkHttp in Java\nDESCRIPTION: This snippet demonstrates creating a self-signed HeldCertificate for a test server using OkHttp. The addSubjectAlternativeName and build methods are used to set up the certificate that a test server can use for HTTPS connections.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nHeldCertificate localhostCertificate = new HeldCertificate.Builder()\n    .addSubjectAlternativeName(\"localhost\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Avoiding Authentication Retries in Java\nDESCRIPTION: Java code snippet showing how to prevent retrying authentication with credentials that have already failed, helping to avoid infinite retry loops.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nif (credential.equals(response.request().header(\"Authorization\"))) {\n  return null; // If we already failed with these credentials, don't retry.\n}\n```\n\n----------------------------------------\n\nTITLE: Custom TLS Configuration with Specific Cipher Suites\nDESCRIPTION: Shows how to create a custom ConnectionSpec with specific TLS version and cipher suites for enhanced security. Requires Android 5.0+ and compatible servers.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/https.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nConnectionSpec spec = new ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)\n    .tlsVersions(TlsVersion.TLS_1_2)\n    .cipherSuites(\n          CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,\n          CipherSuite.TLS_DHE_RSA_WITH_AES_128_GCM_SHA256)\n    .build();\n\nOkHttpClient client = new OkHttpClient.Builder()\n    .connectionSpecs(Collections.singletonList(spec))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Limiting Authentication Attempts in Java\nDESCRIPTION: Java code snippet demonstrating how to limit the number of authentication retry attempts by tracking the response count. Prevents infinite retry loops with incorrect credentials.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nif (responseCount(response) >= 3) {\n  return null; // If we've failed 3 times, give up.\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Private Keys to PEM Format with OkHttp in Java\nDESCRIPTION: This snippet demonstrates encoding the private key of a HeldCertificate to PEM format using privateKeyPkcs8Pem. This must be done cautiously as it exposes the private key, critical for certificate security.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nHeldCertificate heldCertificate = ...\nSystem.out.println(heldCertificate.privateKeyPkcs8Pem())\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Logging with HttpLoggingInterceptor in Java\nDESCRIPTION: Demonstrates how to configure and add the `HttpLoggingInterceptor` to an OkHttp client in Java. It involves creating an instance of the interceptor, setting the desired logging level (e.g., `BASIC`), and adding it to the client's network interceptors. This enables basic logging of request and response information.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHttpLoggingInterceptor loggingInterceptor = new HttpLoggingInterceptor();\nloggingInterceptor.setLevel(HttpLoggingInterceptor.Level.BASIC);\nclient.networkInterceptors().add(loggingInterceptor);\n```\n\n----------------------------------------\n\nTITLE: Injecting Multiple Named MockWebServer Instances in Kotlin JUnit 5 Test\nDESCRIPTION: Demonstrates how to inject multiple `MockWebServer` instances into a Kotlin JUnit 5 test class using constructor injection. The `@MockWebServerInstance` annotation is used to distinguish between different server instances by providing unique names. This allows testing scenarios involving multiple independent servers.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit5/README.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest(\n  private val server: MockWebServer,\n  @MockWebServerInstance(\"server2\") private val server2: MockWebServer,\n  @MockWebServerInstance(\"server3\") private val server3: MockWebServer\n) {\n  @Test\n  fun test() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OkHttp Cache in Kotlin\nDESCRIPTION: Demonstrates initializing an OkHttpClient with a persistent disk cache in Kotlin. It configures the cache to store files in a subdirectory named 'http_cache' within the application's cache directory and sets a maximum cache size of 50 MiB.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/caching.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\n  private val client: OkHttpClient = OkHttpClient.Builder()\n      .cache(Cache(\n          directory = File(application.cacheDir, \"http_cache\"),\n          // $0.05 worth of phone storage in 2020\n          maxSize = 50L * 1024L * 1024L // 50 MiB\n      ))\n      .build()\n```\n\n----------------------------------------\n\nTITLE: Registering Bouncy Castle Provider in Kotlin\nDESCRIPTION: Demonstrates how to manually add the Bouncy Castle security provider using `Security.addProvider()` in Kotlin. This became necessary from OkHttp 4.9.0 onwards as `okhttp-tls` no longer bundles or automatically registers Bouncy Castle. This code requires the Bouncy Castle library to be present as a dependency.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nSecurity.addProvider(BouncyCastleProvider())\n```\n\n----------------------------------------\n\nTITLE: Configuring Conscrypt Security Provider with OkHttp in Java\nDESCRIPTION: This snippet demonstrates how to configure OkHttp to use Conscrypt as the first security provider. Conscrypt integrates BoringSSL with Java, potentially improving TLS performance and security.\nSOURCE: https://github.com/square/okhttp/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nSecurity.insertProviderAt(Conscrypt.newProvider(), 1);\n```\n\n----------------------------------------\n\nTITLE: Injecting MockWebServer via Constructor Parameter in Java JUnit 5 Test\nDESCRIPTION: Illustrates injecting a `MockWebServer` instance via the test class constructor in JUnit 5 using Java. The injected server instance is assigned to a field and can be used across multiple test methods within the class. The server's lifecycle is managed by the JUnit 5 extension.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit5/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nclass MyTest {\n  private final MockWebServer server;\n\n  MyTest(MockWebServer server) {\n    this.server = server;\n  }\n\n  @Test\n  void test() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Canceling HTTP Calls with OkHttp in Kotlin\nDESCRIPTION: Demonstrates how to cancel an ongoing OkHttp call in Kotlin. The example creates a call to a URL with a 2-second delay, schedules a cancellation after 1 second, and handles the resulting IOException.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nprivate val executor = Executors.newScheduledThreadPool(1)\nprivate val client = OkHttpClient()\n\nfun run() {\n  val request = Request.Builder()\n      .url(\"http://httpbin.org/delay/2\") // This URL is served with a 2 second delay.\n      .build()\n\n  val startNanos = System.nanoTime()\n  val call = client.newCall(request)\n\n  // Schedule a job to cancel the call in 1 second.\n  executor.schedule({\n    System.out.printf(\"%.2f Canceling call.%n\", (System.nanoTime() - startNanos) / 1e9f)\n    call.cancel()\n    System.out.printf(\"%.2f Canceled call.%n\", (System.nanoTime() - startNanos) / 1e9f)\n  }, 1, TimeUnit.SECONDS)\n\n  System.out.printf(\"%.2f Executing call.%n\", (System.nanoTime() - startNanos) / 1e9f)\n  try {\n    call.execute().use { response ->\n      System.out.printf(\"%.2f Call was expected to fail, but completed: %s%n\",\n          (System.nanoTime() - startNanos) / 1e9f, response)\n    }\n  } catch (e: IOException) {\n    System.out.printf(\"%.2f Call failed as expected: %s%n\",\n        (System.nanoTime() - startNanos) / 1e9f, e)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OkHttpClient with Insecure Host in Kotlin\nDESCRIPTION: Demonstrates creating `HandshakeCertificates` that trust the platform's default certificates while specifically allowing insecure TLS connections to \"localhost\" using `addInsecureHost()`. This configuration is then used to build an `OkHttpClient`, suitable for development environments interacting with local servers that might use self-signed or invalid certificates. This feature was introduced in OkHttp 4.7.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval clientCertificates = HandshakeCertificates.Builder()\n    .addPlatformTrustedCertificates()\n    .addInsecureHost(\"localhost\")\n    .build()\n\nval client = OkHttpClient.Builder()\n    .sslSocketFactory(clientCertificates.sslSocketFactory(), clientCertificates.trustManager)\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Removing Specific Entries from OkHttp Cache in Java\nDESCRIPTION: Provides a Java example for selectively removing cached entries based on their URL. It iterates through all URLs stored in the cache using `cache.urls()` and removes any entry whose URL starts with the specified prefix ('https://www.google.com/' in this case) using the iterator's `remove()` method.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/caching.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n    val urlIterator = cache.urls()\n    while (urlIterator.hasNext()) {\n      if (urlIterator.next().startsWith(\"https://www.google.com/\")) {\n        urlIterator.remove()\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Declaring MockWebServerRule as a JUnit 4 Rule - Kotlin\nDESCRIPTION: This fragment shows correct usage to declare a MockWebServerRule as a JUnit 4 rule in Kotlin test classes. The @JvmField annotation is required in Kotlin to ensure the field is accessible to JUnit for rule processing. Relies on having test dependencies for JUnit 4 and mockwebserver3-junit4 present. The input is a Kotlin test class; output is a JUnit-managed MockWebServer instance field during test execution.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit4/README.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\n@JvmField @Rule val serverRule = MockWebServerRule()\n```\n\n----------------------------------------\n\nTITLE: Implementing Gzip Request Compression Interceptor\nDESCRIPTION: Creates an interceptor that compresses HTTP request bodies using gzip compression. Includes checks for existing compression and handles content encoding appropriately.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/interceptors.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\n/** This interceptor compresses the HTTP request body. Many webservers can't handle this! */\nfinal class GzipRequestInterceptor implements Interceptor {\n  @Override public Response intercept(Interceptor.Chain chain) throws IOException {\n    Request originalRequest = chain.request();\n    if (originalRequest.body() == null || originalRequest.header(\"Content-Encoding\") != null) {\n      return chain.proceed(originalRequest);\n    }\n\n    Request compressedRequest = originalRequest.newBuilder()\n        .header(\"Content-Encoding\", \"gzip\")\n        .method(originalRequest.method(), gzip(originalRequest.body()))\n        .build();\n    return chain.proceed(compressedRequest);\n  }\n\n  private RequestBody gzip(final RequestBody body) {\n    return new RequestBody() {\n      @Override public MediaType contentType() {\n        return body.contentType();\n      }\n\n      @Override public long contentLength() {\n        return -1; // We don't know the compressed length in advance!\n      }\n\n      @Override public void writeTo(BufferedSink sink) throws IOException {\n        BufferedSink gzipSink = Okio.buffer(new GzipSink(sink));\n        body.writeTo(gzipSink);\n        gzipSink.close();\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Threading Architecture in OkHttp HTTP/2 Implementation\nDESCRIPTION: Describes the three main thread types used in OkHttp's HTTP/2 implementation: application calling thread for blocking I/O, shared reader thread for frame processing, and a do-stuff-later thread pool for asynchronous tasks.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/concurrency.md#2025-04-22_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Processing Multipart Response with MultipartReader in Kotlin\nDESCRIPTION: Shows how to use the `MultipartReader`, introduced in OkHttp 4.6.0, to stream and process the parts of a multipart MIME response body. It retrieves the `Response`, creates a `MultipartReader` from the body, and iterates through each `part` using `nextPart()`, allowing access to the headers and body of each part for further processing.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval response: Response = call.execute()\nval multipartReader = MultipartReader(response.body!!)\n\nmultipartReader.use {\n  while (true) {\n    val part = multipartReader.nextPart() ?: break\n    process(part.headers, part.body)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Certificate Chains with TLS in Java\nDESCRIPTION: This snippet sets up a server using HandshakeCertificates that include a server's certificate chain, excluding the root. It's crucial for a server to provide its intermediary certificates to the clients, helping verify the certificate chain during TLS handshakes.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nHandshakeCertificates serverHandshakeCertificates = new HandshakeCertificates.Builder()\n    .heldCertificate(serverCertificate, intermediateCertificate.certificate())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Certificate Authority Chains with OkHttp in Java\nDESCRIPTION: This tutorial demonstrates generating a root, intermediate, and server certificate-to-certificate authority (CA) chain using HeldCertificate. It uses certificateAuthority() to create certs that can sign others, introducing the concept of certificate chains for real-world HTTPS.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nHeldCertificate rootCertificate = new HeldCertificate.Builder()\n    .certificateAuthority(1)\n    .build();\n\nHeldCertificate intermediateCertificate = new HeldCertificate.Builder()\n    .certificateAuthority(0)\n    .signedBy(rootCertificate)\n    .build();\n\nHeldCertificate serverCertificate = new HeldCertificate.Builder()\n    .addSubjectAlternativeName(\"localhost\")\n    .signedBy(intermediateCertificate)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Limiting Authentication Attempts in Kotlin\nDESCRIPTION: A code snippet that demonstrates how to limit the number of authentication retry attempts by tracking the response count. This prevents excessive retries when credentials are incorrect.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_28\n\nLANGUAGE: kotlin\nCODE:\n```\nif (response.responseCount >= 3) {\n  return null // If we've failed 3 times, give up.\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Logger for HttpLoggingInterceptor in Java\nDESCRIPTION: This snippet shows how to integrate a custom logging mechanism with OkHttp's HttpLoggingInterceptor using a Logger instance. The purpose is to direct log outputs to a custom destination, such as Timber in this example. It requires implementing the Logger interface's log method. Prerequisites include the OkHttp library and a logging framework like Timber.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHttpLoggingInterceptor logging = new HttpLoggingInterceptor(new Logger() {\n  @Override public void log(String message) {\n    Timber.tag(\"OkHttp\").d(message);\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Building Native Image with GraalVM\nDESCRIPTION: This snippet demonstrates how to build a native image of the okcurl tool using GraalVM, enhancing startup time compared to the standard JVM. It requires GraalVM setup and uses Gradle to build the native image for okcurl.\nSOURCE: https://github.com/square/okhttp/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ./gradlew okcurl:nativeImage\n$ ./okcurl/build/graal/okcurl https://cash.app/robots.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring TLS Server Certificates with OkHttp in Java\nDESCRIPTION: This snippet configures a server with HandshakeCertificates using a self-signed HeldCertificate. The server is set up to use HTTPS with an SSLSocketFactory created from the serverCertificates, illustrating how to apply certificate policies in a TLS handshake.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nHandshakeCertificates serverCertificates = new HandshakeCertificates.Builder()\n    .heldCertificate(localhostCertificate)\n    .build();\nMockWebServer server = new MockWebServer();\nserver.useHttps(serverCertificates.sslSocketFactory(), false);\n```\n\n----------------------------------------\n\nTITLE: Avoiding Authentication Retries in Kotlin\nDESCRIPTION: A code snippet that shows how to avoid retrying authentication with the same credentials that previously failed. This helps prevent infinite retry loops in authentication implementations.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_27\n\nLANGUAGE: kotlin\nCODE:\n```\nif (credential == response.request.header(\"Authorization\")) {\n  return null // If we already failed with these credentials, don't retry.\n}\n```\n\n----------------------------------------\n\nTITLE: HttpUrl Query Parameter Values Return Type\nDESCRIPTION: Example showing the return type change for HttpUrl.queryParameterValues() which now returns List<String?> instead of List<String>.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nHttpUrl.queryParameterValues(): List<String?>\n```\n\n----------------------------------------\n\nTITLE: Adding OkHttp Dependency in Kotlin Projects\nDESCRIPTION: This Kotlin code snippet shows how to add the OkHttp dependency to a project using Gradle. It specifies the latest version of OkHttp available on Maven Central.\nSOURCE: https://github.com/square/okhttp/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okhttp3:okhttp:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Including OkHttp SSE Dependency\nDESCRIPTION: This Kotlin snippet demonstrates how to include the OkHttp SSE library in your project using a test implementation dependency in Gradle. Ensure that your build system is set up to use Maven Central to download the dependency and that testing libraries can handle server-sent events.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-sse/README.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"com.squareup.okhttp3:okhttp-sse:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Using SAM Conversion with OkHttp 3.x in Kotlin\nDESCRIPTION: Example of using SAM conversion with OkHttp 3.x, where Kotlin allows direct lambda conversion for Java interfaces with a Single Abstract Method (SAM).\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = OkHttpClient.Builder()\n    .dns { hostname -> InetAddress.getAllByName(hostname).toList() }\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Adding Network Interceptor to OkHttpClient\nDESCRIPTION: Shows how to register a network interceptor that intercepts requests at the network level, including redirects and retries. Provides more detailed connection information.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/interceptors.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new LoggingInterceptor())\n    .build();\n\nRequest request = new Request.Builder()\n    .url(\"http://www.publicobject.com/helloworld.txt\")\n    .header(\"User-Agent\", \"OkHttp Example\")\n    .build();\n\nResponse response = client.newCall(request).execute();\nresponse.body().close();\n```\n\n----------------------------------------\n\nTITLE: Adding Brotli Compression to OkHttpClient\nDESCRIPTION: Shows how to enable Brotli compression in OkHttp client by adding the BrotliInterceptor. Requires the okhttp-brotli module dependency.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_9\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = OkHttpClient.Builder()\n    .addInterceptor(BrotliInterceptor)\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio 2.7.0 Dependency (Kotlin DSL)\nDESCRIPTION: Illustrates how to declare a dependency on Okio version 2.7.0 using the Gradle Kotlin DSL `implementation` configuration. This snippet is shown in the context of OkHttp 4.8.0 upgrading its internal Okio dependency.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okio:okio:2.7.0\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Fast Fallback for IPv4+IPv6 Networks\nDESCRIPTION: Java code demonstrating how to enable fast fallback in OkHttpClient, a feature introduced to better support mixed IPv4+IPv6 networks. Fast fallback implements Happy Eyeballs (RFC 8305) to attempt both IPv6 and IPv4 connections concurrently.\nSOURCE: https://github.com/square/okhttp/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient.Builder()\n    .fastFallback(true)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio Dependency Update in Kotlin Gradle\nDESCRIPTION: This Kotlin Gradle script line shows how to declare a specific version (2.4.3) of the Okio library as an implementation dependency. OkHttp 4.4.0 upgrades its internal dependency to Okio 2.4.3. This declaration ensures the project explicitly uses this version of Okio, which is a foundational I/O library for OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_7\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin\nimplementation(\"com.squareup.okio:okio:2.4.3\")\n```\n```\n\n----------------------------------------\n\nTITLE: Connection Pool Implementation Details\nDESCRIPTION: Explains the connection pooling architecture in OkHttp, including the RealConnectionPool, RealConnection, Exchange, and ExchangeFinder components that manage connection lifecycle and reuse.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/concurrency.md#2025-04-22_snippet_2\n\n\n\n----------------------------------------\n\nTITLE: Configuring TLS Connection Specs in OkHttp Java\nDESCRIPTION: This Java code snippet demonstrates how to configure TLS specifications for an OkHttpClient instance, enabling or disabling specific protocols and clear-text connections.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nclient.setConnectionSpecs(Arrays.asList(\n    ConnectionSpec.MODERN_TLS, ConnectionSpec.CLEARTEXT));\n```\n\nLANGUAGE: java\nCODE:\n```\nclient.setConnectionSpecs(Arrays.asList(\n    ConnectionSpec.MODERN_TLS, ConnectionSpec.COMPATIBLE_TLS));\n```\n\n----------------------------------------\n\nTITLE: Creating Empty RequestBody - OkHttp Java\nDESCRIPTION: This Java code demonstrates how to create an empty RequestBody instance with OkHttp. Passing null or an empty byte array is a recommended approach when an HTTP method (like POST or PUT) requires a request body but your request has no content. The code requires OkHttp as a dependency. Input parameters are the media type (here null) and an empty byte array, output is a RequestBody object. Limitation: Only call this for request methods that require a body; do not use null RequestBody for those APIs.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nRequestBody.create(null, new byte[0]);\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring OkHttp 3.12.0 Dependencies in Gradle (Kotlin)\nDESCRIPTION: Specifies the Gradle implementation dependencies for BouncyCastle (1.60), Conscrypt (1.4.0), and Okio (1.15.0) compatible with OkHttp version 3.12.0, as mentioned in its release notes. This ensures the necessary cryptographic and I/O libraries are included for features like TLS 1.3.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.bouncycastle:bcprov-jdk15on:1.60\")\nimplementation(\"org.conscrypt:conscrypt-openjdk-uber:1.4.0\")\nimplementation(\"com.squareup.okio:okio:1.15.0\")\n```\n\n----------------------------------------\n\nTITLE: Installing OkHttp DNS-over-HTTPS Dependency\nDESCRIPTION: Maven/Gradle dependency declaration for including the OkHttp DNS-over-HTTPS implementation in a test environment.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-dnsoverhttps/README.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"com.squareup.okhttp3:okhttp-dnsoverhttps:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Programmatically Enabling Conscrypt Security Provider in Java\nDESCRIPTION: Demonstrates how to programmatically install the Conscrypt OpenSSLProvider as the highest priority security provider in Java. This ensures OkHttp utilizes Conscrypt for TLS operations before other default providers. This code should be executed before creating the OkHttpClient instance.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_4\n\nLANGUAGE: java\nCODE:\n```\n    Security.insertProviderAt(\n        new org.conscrypt.OpenSSLProvider(), 1);\n\n```\n\n----------------------------------------\n\nTITLE: URLConnection Integration with OkHttp Java\nDESCRIPTION: This Java snippet demonstrates how to transition from OkHttp 1.x to 2.x when working with HttpURLConnection, highlighting the use of the new OkUrlFactory API to open connections.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_10\n\nLANGUAGE: java\nCODE:\n```\n// OkHttp 1.x:\nHttpURLConnection connection = client.open(url);\n\n// OkHttp 2.x:\nHttpURLConnection connection = new OkUrlFactory(client).open(url);\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio 2.6.0 Dependency (Kotlin DSL)\nDESCRIPTION: Illustrates how to declare a dependency on Okio version 2.6.0 using the Gradle Kotlin DSL `implementation` configuration. This snippet is shown in the context of OkHttp 4.6.0 upgrading its internal Okio dependency.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okio:okio:2.6.0\")\n```\n\n----------------------------------------\n\nTITLE: Adding MockWebServer dependency in Kotlin\nDESCRIPTION: This Kotlin snippet provides the Gradle dependency declaration for including MockWebServer in a test implementation. The dependency version specified is 4.12.0.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver/README.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"com.squareup.okhttp3:mockwebserver:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Creating Request with Named Parameters in Kotlin\nDESCRIPTION: Example of creating an HTTP request using the new Kotlin-friendly constructor with named parameters, which allows skipping the builder pattern. This is part of OkHttp 5's Kotlin-focused API improvements.\nSOURCE: https://github.com/square/okhttp/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nval request = Request(\n  url = \"https://cash.app/\".toHttpUrl(),\n)\n```\n\n----------------------------------------\n\nTITLE: Injecting MockWebServer via Method Parameter in Java JUnit 5 Test\nDESCRIPTION: Demonstrates injecting a `MockWebServer` instance directly into a JUnit 5 test method parameter within a Java test class. The JUnit 5 extension automatically manages the lifecycle (start/stop) of the injected server for the duration of the test method.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit5/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nclass MyTest {\n  @Test\n  void test(MockWebServer server) {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Bouncy Castle Dependency in Gradle\nDESCRIPTION: Shows the Gradle dependency declaration required to include the Bouncy Castle provider library (`bcprov-jdk15on` version 1.65) in a project using the Groovy DSL. This dependency is necessary if you need to manually register the Bouncy Castle provider as shown in the accompanying Kotlin snippet, particularly after OkHttp 4.9.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_1\n\nLANGUAGE: groovy\nCODE:\n```\ndependencies {\n  implementation \"org.bouncycastle:bcprov-jdk15on:1.65\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Response Count Extension for Kotlin\nDESCRIPTION: An extension property for the Response class that counts the chain of responses, useful for tracking how many authentication attempts have been made.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_29\n\nLANGUAGE: kotlin\nCODE:\n```\nval Response.responseCount: Int\n  get() = generateSequence(this) { it.priorResponse }.count()\n```\n\n----------------------------------------\n\nTITLE: Configuring OkHttpClient for TLSv1 and TLSv1.1 Support in Java\nDESCRIPTION: Code snippet showing how to configure an OkHttpClient to allow TLSv1 and TLSv1.1 connections, which are no longer enabled by default in OkHttp 3.13.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient.Builder()\n    .connectionSpecs(Arrays.asList(ConnectionSpec.COMPATIBLE_TLS))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Injecting MockWebServer via Constructor Parameter in Kotlin JUnit 5 Test\nDESCRIPTION: Shows the concise Kotlin syntax for injecting a `MockWebServer` instance via the primary constructor in a JUnit 5 test class. This achieves the same result as constructor injection in Java but with less boilerplate code. The server's lifecycle is managed automatically.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit5/README.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nclass MyTest(\n  private val server: MockWebServer\n) {\n  @Test\n  fun test() {\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting OkHttp Cache Directory in Kotlin\nDESCRIPTION: Shows how to completely delete the OkHttp cache directory and all its contents using the `delete()` method on the `Cache` instance in Kotlin. This action permanently removes all cached data and the directory itself.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/caching.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\ncache.delete()\n```\n\n----------------------------------------\n\nTITLE: Implementing OkHttp Logging-Interceptor in Kotlin\nDESCRIPTION: This snippet provides the necessary Gradle implementation line to add OkHttp's logging-interceptor dependency to a Kotlin project. This setup is essential for using the logging features provided by the OkHttp library to track HTTP requests and responses.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/README.md#2025-04-22_snippet_3\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okhttp3:logging-interceptor:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Declaring MockWebServerRule as a JUnit 4 Rule - Java\nDESCRIPTION: This code declares a MockWebServerRule instance as a JUnit 4 test rule in a Java test class. The @Rule annotation ensures that MockWebServer is properly started before each test and shut down after. This enables automated lifecycle handling for local HTTP server testing in unit tests. Requires JUnit 4 and mockwebserver3 dependencies active in the classpath. Input: Java test class. Output: Instantiated and managed MockWebServer instance for each test.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit4/README.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\n@Rule public final MockWebServerRule serverRule = new MockWebServerRule();\n```\n\n----------------------------------------\n\nTITLE: Adding Brotli Interceptor in OkHttp Java Client\nDESCRIPTION: This Java snippet demonstrates how to configure an OkHttpClient to use Brotli compression by adding a BrotliInterceptor. It requires the OkHttp library and optionally Gzip for compression handling, where responses encoded with Brotli will be automatically decompressed. Dependencies include OkHttp and Brotli.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-brotli/README.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nOkHttpClient client = new OkHttpClient.Builder()\n  .addInterceptor(BrotliInterceptor.INSTANCE)\n  .build();\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio Dependency in Maven - XML\nDESCRIPTION: This XML snippet demonstrates how to include the Okio library as a Maven dependency in a project. OkHttp requires compatible versions of Okio for various releases, and this block specifies the groupId, artifactId, and version required. To use it, copy the <dependency> block into your Maven pom.xml dependencies section. Key parameters: groupId (project group), artifactId (library id), version (library version). This code is only valid in Maven-compatible build environments.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n  <groupId>com.squareup.okio</groupId>\\n  <artifactId>okio</artifactId>\\n  <version>1.13.0</version>\\n</dependency>\\n\\ncom.squareup.okio:okio:1.13.0\n```\n\n----------------------------------------\n\nTITLE: Creating Markdown Table for Security Provider Status in OkHttp\nDESCRIPTION: This markdown snippet creates a table that displays the status of various security providers, including their support for HTTP/2 and TLSv1.3, the technology powering them, and additional notes. It provides a quick overview of the capabilities of different providers compatible with OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/security/security_providers.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Provider         | HTTP/2  | TLSv1.3      | Powered By      | Notes                                                        |\n| :--------------- | :------ | :----------- | :-------------- | :----------------------------------------------------------- |\n| JVM default      | Java 9+ | Java 11+     | [OpenJDK]       |                                                              |\n| Android default  | ✅      | Android 10+  | [BoringSSL]     |                                                              |\n| [GraalVM]        | ✅      |              | [OpenJDK]       | Only actively tested with JDK 11, not with 8 target          |\n| [Bouncy Castle]  | ✅      |              | [Bouncy Castle] | [Tracking bug.][bug5698]                                     |\n| [Conscrypt]      | ✅      | ✅           | [BoringSSL]     | Activated if Conscrypt is first registered provider.         |\n| [OpenJSSE]       |         | ✅           | [OpenJDK]       | OpenJDK backport.                                            |\n| [Corretto]       | ✅      | ✅           | [OpenSSL]       | Amazon's high-performance provider. [Tracking bug.][bug5592] |\n```\n\n----------------------------------------\n\nTITLE: Redacting Headers in Java\nDESCRIPTION: This snippet illustrates how to redact specific headers when logging HTTP requests and responses using OkHttp's logging interceptor in Java. Specific headers such as 'Authorization' and 'Cookie' can be redacted to prevent sensitive information from appearing in logs. This feature should be used to enhance security, especially when handling sensitive data, and requires prior setup of the HttpLoggingInterceptor.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-logging-interceptor/README.md#2025-04-22_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nlogging.redactHeader(\"Authorization\");\nlogging.redactHeader(\"Cookie\");\n```\n\n----------------------------------------\n\nTITLE: Creating an Android Emulator for OkHttp Testing\nDESCRIPTION: Commands to install the Android 29 system image and create a Pixel 5 emulator for testing. This sets up the testing environment with Google APIs on an x86 architecture.\nSOURCE: https://github.com/square/okhttp/blob/master/regression-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ sdkmanager --install \"system-images;android-29;google_apis;x86\"\n$ echo \"no\" | avdmanager --verbose create avd --force --name \"pixel5\" --device \"pixel\" --package \"system-images;android-29;google_apis;x86\" --tag \"google_apis\" --abi \"x86\"\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio Dependency in Maven (Older Version) - XML\nDESCRIPTION: This XML code block shows how to add Okio version 1.12.0 as a dependency in your project's Maven configuration, which is required for certain OkHttp releases. Insert this inside your pom.xml to ensure your project has the proper version of Okio for expected compatibility. All parameters must match the required library and version as noted in OkHttp's changelog.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n  <groupId>com.squareup.okio</groupId>\\n  <artifactId>okio</artifactId>\\n  <version>1.12.0</version>\\n</dependency>\\n\\ncom.squareup.okio:okio:1.12.0\n```\n\n----------------------------------------\n\nTITLE: Adding MockWebServer JUnit 5 Dependency in Groovy\nDESCRIPTION: This snippet shows how to add the `mockwebserver3-junit5` artifact as a test runtime dependency using Groovy syntax, typically within a `build.gradle` file for a Gradle project. This makes MockWebServer's JUnit 5 integration available during test execution.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit5/README.md#2025-04-22_snippet_0\n\nLANGUAGE: groovy\nCODE:\n```\ntestRuntimeOnly(\"com.squareup.okhttp3:mockwebserver3-junit5:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Configuring SSL Socket Factory for OkHttpClient using Java\nDESCRIPTION: This Java snippet provides guidance to configure an OkHttpClient instance to use the global SSL context by assigning the default SSL socket factory from HttpsURLConnection. Developers should add a dependency on OkHttp and ensure that the client instance is available. The method 'setSslSocketFactory' is called on the client with the appropriate socket factory to ensure secure connections, particularly when upgrading from previous versions that used the global context automatically. Expected input is a properly instantiated OkHttpClient; output is the client configured with SSL support. This approach aligns with post-1.5.0 OkHttp where default SSL context is not used automatically.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_1x.md#2025-04-22_snippet_0\n\nLANGUAGE: java\nCODE:\n```\nokHttpClient.setSslSocketFactory(HttpsURLConnection.getDefaultSSLSocketFactory());\n```\n\n----------------------------------------\n\nTITLE: Configuring OkHttp Debug Logging on Android\nDESCRIPTION: Android adb shell commands to enable HTTP/2 and TaskRunner debug logging, followed by a command to filter logcat output to show only error logs and the specific OkHttp debug categories.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/debug_logging.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ adb shell setprop log.tag.okhttp.Http2 DEBUG\n$ adb shell setprop log.tag.okhttp.TaskRunner DEBUG\n$ adb logcat '*:E' 'okhttp.Http2:D' 'okhttp.TaskRunner:D'\n```\n\n----------------------------------------\n\nTITLE: Declaring Maven Dependency for OkHttp Logging Interceptor (XML)\nDESCRIPTION: Specifies the Maven dependency required to include the OkHttp logging interceptor module in a project. This interceptor allows logging HTTP request and response details. The snippet shows the necessary groupId, artifactId, and version for OkHttp 2.6.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.squareup.okhttp</groupId>\n  <artifactId>logging-interceptor</artifactId>\n  <version>2.6.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Using Credentials.basic() with Non-null Parameters\nDESCRIPTION: Example of the change in Credentials.basic() where username and password parameters are now non-null strings. In OkHttp 3.x, null would yield a username or password of \"null\".\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_0\n\nLANGUAGE: Kotlin\nCODE:\n```\nCredentials.basic(username: String, password: String)\n```\n\n----------------------------------------\n\nTITLE: Creating Headers with OkHttp Java\nDESCRIPTION: This Java snippet demonstrates using the Headers.of() method to create HTTP headers in a Guava-like style, specified by key-value pairs.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nHeaders headers = Headers.of(name1, value1, name2, value2, ...);\n```\n\n----------------------------------------\n\nTITLE: Sample Task Runner Logging Output\nDESCRIPTION: Example log output showing OkHttp's task runner logging which displays task scheduling, execution, and completion times. This shows task lifecycle for connection pool maintenance and HTTP/2 settings management.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/debug_logging.md#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n[2020-01-01 00:00:00] Q10000 scheduled after   0 µs: OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 starting              : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 finished run in   1 ms: OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10001 scheduled after   0 µs: OkHttp squareup.com applyAndAckSettings\n[2020-01-01 00:00:00] Q10001 starting              : OkHttp squareup.com applyAndAckSettings\n[2020-01-01 00:00:00] Q10003 scheduled after   0 µs: OkHttp squareup.com onSettings\n[2020-01-01 00:00:00] Q10003 starting              : OkHttp squareup.com onSettings\n[2020-01-01 00:00:00] Q10001 finished run in   3 ms: OkHttp squareup.com applyAndAckSettings\n[2020-01-01 00:00:00] Q10003 finished run in 528 µs: OkHttp squareup.com onSettings\n[2020-01-01 00:00:00] Q10000 scheduled after   0 µs: OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 starting              : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 run again after 300 s : OkHttp ConnectionPool\n[2020-01-01 00:00:00] Q10000 finished run in 739 µs: OkHttp ConnectionPool\n```\n\n----------------------------------------\n\nTITLE: Encoding Certificates to PEM Format with OkHttp in Java\nDESCRIPTION: This snippet illustrates converting a HeldCertificate to PEM format using the certificatePem method, exporting it for use or sharing. PEM encoding is a standard format for representing certificates and their data as readable text.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nHeldCertificate heldCertificate = ...\nSystem.out.println(heldCertificate.certificatePem())\n```\n\n----------------------------------------\n\nTITLE: Headers Factory Method Change\nDESCRIPTION: Example of the Headers.of() method being replaced with headersOf() for consistency with Kotlin standard library naming conventions.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_2\n\nLANGUAGE: Kotlin\nCODE:\n```\n// Old\nHeaders.of(String...)\n// New\nheadersOf(vararg String)\n```\n\n----------------------------------------\n\nTITLE: Managing OkHttp Dependencies with BOM in Kotlin Gradle\nDESCRIPTION: This Kotlin Gradle script demonstrates how to use the OkHttp Bill of Materials (BOM) introduced in version 4.4.0 to manage dependencies. By declaring `api(platform(\"com.squareup.okhttp3:okhttp-bom:4.4.0\"))`, subsequent OkHttp module dependencies like `okhttp` and `logging-interceptor` inherit the version from the BOM, eliminating the need to specify versions individually and ensuring consistency across transitive dependencies.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_4x.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\n```kotlin\ndependencies {\n   api(platform(\"com.squareup.okhttp3:okhttp-bom:4.4.0\"))\n   api(\"com.squareup.okhttp3:okhttp\")              // No version!\n   api(\"com.squareup.okhttp3:logging-interceptor\") // No version!\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Running Android Tests for OkHttp\nDESCRIPTION: Command for running connected Android tests. Uses the ANDROID_SDK_ROOT environment variable to locate the SDK and passes the androidBuild property to Gradle.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ ANDROID_SDK_ROOT=PATH_TO_ANDROID_HOME/sdk ./gradlew :android-test:connectedCheck -PandroidBuild=true\n```\n\n----------------------------------------\n\nTITLE: Adding Okio Dependency in Kotlin\nDESCRIPTION: Gradle dependency declaration for adding Okio 1.17.3 to a Kotlin project. This is the version required by OkHttp 3.13.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_2\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okio:okio:1.17.3\")\n```\n\n----------------------------------------\n\nTITLE: Sample HTTP/2 Frame Logging Output\nDESCRIPTION: Example log output showing HTTP/2 frame logging with both inbound (<<) and outbound (>>) frames. This demonstrates the format of connection initialization, settings, headers, data transfers, and connection closing.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/debug_logging.md#2025-04-22_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n[2020-01-01 00:00:00] >> CONNECTION 505249202a20485454502f322e300d0a0d0a534d0d0a0d0a\n[2020-01-01 00:00:00] >> 0x00000000     6 SETTINGS\n[2020-01-01 00:00:00] >> 0x00000000     4 WINDOW_UPDATE\n[2020-01-01 00:00:00] >> 0x00000003    47 HEADERS       END_STREAM|END_HEADERS\n[2020-01-01 00:00:00] << 0x00000000     6 SETTINGS\n[2020-01-01 00:00:00] << 0x00000000     0 SETTINGS      ACK\n[2020-01-01 00:00:00] << 0x00000000     4 WINDOW_UPDATE\n[2020-01-01 00:00:00] >> 0x00000000     0 SETTINGS      ACK\n[2020-01-01 00:00:00] << 0x00000003   322 HEADERS       END_HEADERS\n[2020-01-01 00:00:00] << 0x00000003   288 DATA\n[2020-01-01 00:00:00] << 0x00000003     0 DATA          END_STREAM\n[2020-01-01 00:00:00] << 0x00000000     8 GOAWAY\n[2020-01-01 00:00:05] << 0x00000000     8 GOAWAY\n```\n\n----------------------------------------\n\nTITLE: Adding MockWebServer Dependency for Testing in Kotlin Projects\nDESCRIPTION: This Kotlin code snippet shows how to add the MockWebServer dependency for testing HTTP, HTTPS, and HTTP/2 clients in a Gradle project. It specifies the latest version available on Maven Central.\nSOURCE: https://github.com/square/okhttp/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"com.squareup.okhttp3:mockwebserver:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Creating Android Emulator 'pixel5' via Shell\nDESCRIPTION: Installs the required Android 29 system image using `sdkmanager` and then creates an Android Virtual Device (AVD) named 'pixel5' using `avdmanager`, configured for a Pixel device with Google APIs and x86 ABI. Requires Android SDK command-line tools.\nSOURCE: https://github.com/square/okhttp/blob/master/android-test/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ sdkmanager --install \"system-images;android-29;google_apis;x86\"\n$ echo \"no\" | avdmanager --verbose create avd --force --name \"pixel5\" --device \"pixel\" --package \"system-images;android-29;google_apis;x86\" --tag \"google_apis\" --abi \"x86\"\n```\n\n----------------------------------------\n\nTITLE: Okio Dependency XML Configuration\nDESCRIPTION: This XML snippet demonstrates how to include the Okio library as a Maven dependency, specifying its group ID, artifact ID, and version.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.squareup.okio</groupId>\n  <artifactId>okio</artifactId>\n  <version>1.0.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: List of TLS Cipher Suites\nDESCRIPTION: Defines a set of standard TLS cipher suites used for securing network connections. This list likely specifies the algorithms supported or preferred by a component within the OkHttp project.\nSOURCE: https://github.com/square/okhttp/blob/master/samples/tlssurvey/src/main/resources/okhttp_4.10.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTLS_AES_128_GCM_SHA256\\nTLS_AES_256_GCM_SHA384\\nTLS_CHACHA20_POLY1305_SHA256\\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\\nTLS_RSA_WITH_AES_128_GCM_SHA256\\nTLS_RSA_WITH_AES_256_GCM_SHA384\\nTLS_RSA_WITH_AES_128_CBC_SHA\\nTLS_RSA_WITH_AES_256_CBC_SHA\\nTLS_RSA_WITH_3DES_EDE_CBC_SHA\n```\n\n----------------------------------------\n\nTITLE: Adding MockWebServer JUnit 4 Dependency - Gradle\nDESCRIPTION: This snippet demonstrates how to include the mockwebserver3-junit4 library as a test dependency in a Gradle-managed project. Required to gain access to the MockWebServerRule class and JUnit 4 integrations. The dependency string should be added to the testImplementation configuration in build.gradle. No parameters are required, but the appropriate version should be specified. Input: build.gradle file. Output: Configured test dependency.\nSOURCE: https://github.com/square/okhttp/blob/master/mockwebserver-junit4/README.md#2025-04-22_snippet_0\n\nLANGUAGE: gradle\nCODE:\n```\ntestImplementation(\"com.squareup.okhttp3:mockwebserver3-junit4:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Example OkHttp Log Output from logcat\nDESCRIPTION: Sample output generated by `adb logcat` when monitoring OkHttp activity, likely during network operations within tests. Shows detailed, timestamped Debug level messages from the OkHttp tag, including request/response lifecycle events (headers, body start/end, connection release, call end) for HTTPS requests over h2 protocol.\nSOURCE: https://github.com/square/okhttp/blob/master/android-test/README.md#2025-04-22_snippet_3\n\nLANGUAGE: log\nCODE:\n```\n...\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] responseHeadersEnd: Response{protocol=h2, code=200, message=, url=https://1.1.1.1/dns-query?dns=AAABAAABAAAAAAAAA3d3dwhmYWNlYm9vawNjb20AABwAAQ}\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] responseBodyStart\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] responseBodyEnd: byteCount=128\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] connectionReleased\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] callEnd\n01-01 12:53:32.816 10999 11090 D OkHttp  : [54 ms] responseHeadersStart\n01-01 12:53:32.816 10999 11090 D OkHttp  : [54 ms] responseHeadersEnd: Response{protocol=h2, code=200, message=, url=https://1.1.1.1/dns-query?dns=AAABAAABAAAAAAAAA3d3dwhmYWNlYm9vawNjb20AAAEAAQ}\n01-01 12:53:32.817 10999 11090 D OkHttp  : [55 ms] responseBodyStart\n01-01 12:53:32.818 10999 11090 D OkHttp  : [56 ms] responseBodyEnd: byteCount=128\n01-01 12:53:32.818 10999 11090 D OkHttp  : [56 ms] connectionReleased\n01-01 12:53:32.818 10999 11090 D OkHttp  : [56 ms] callEnd\n```\n\n----------------------------------------\n\nTITLE: Running OkHttp Tests with Gradle\nDESCRIPTION: Command for running tests to ensure code quality before submitting a pull request. This verifies that all tests pass in a clean environment.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./gradlew clean check\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Okio 2.9.0 in Kotlin\nDESCRIPTION: This Kotlin snippet shows how to include Okio version 2.9.0 as a dependency in a project. This upgrade may offer improved performance or updated features. The implementation requires inclusion in the project's build file, typically build.gradle.\nSOURCE: https://github.com/square/okhttp/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okio:okio:2.9.0\")\n```\n\n----------------------------------------\n\nTITLE: Declaring Maven Dependency for Okio Library (XML)\nDESCRIPTION: Specifies the Maven dependency for the Okio library, version 1.6.0. Okio is a library that complements java.io and java.nio, providing efficient I/O operations, and is a core dependency for OkHttp. This declaration is needed for projects using OkHttp 2.5.0 or managing Okio explicitly.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.squareup.okio</groupId>\n  <artifactId>okio</artifactId>\n  <version>1.6.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Tagging and Pushing Release with Git - Shell\nDESCRIPTION: This shell snippet performs Git operations to commit all staged changes with a release message, create an annotated tag for the release version, and push both commits and tags to the remote repository. The commands depend on Git and the RELEASE_VERSION environment variable, and should be run after updating project files. The output is a tagged release visible in the GitHub repository.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/releasing.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ngit commit -am \"Prepare for release $RELEASE_VERSION.\"\ngit tag -a parent-$RELEASE_VERSION -m \"Version $RELEASE_VERSION\"\ngit push && git push --tags\n\n```\n\n----------------------------------------\n\nTITLE: Running Connected Android Tests with Gradle via Shell\nDESCRIPTION: Executes the `connectedCheck` Gradle task specifically for the `:android-test` module using the Gradle wrapper (`./gradlew`). It sets the `ANDROID_SDK_ROOT` environment variable to the user's SDK path and passes the `androidBuild=true` project property. This command runs the instrumentation tests on a connected device or emulator. Requires Gradle, Android SDK, the OkHttp project source, and a connected device/emulator.\nSOURCE: https://github.com/square/okhttp/blob/master/android-test/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ ANDROID_SDK_ROOT=/Users/myusername/Library/Android/sdk ./gradlew :android-test:connectedCheck -PandroidBuild=true\n```\n\n----------------------------------------\n\nTITLE: Enabling OkHttp Debug Logging with Kotlin\nDESCRIPTION: Simple Kotlin code to enable HTTP/2 and TaskRunner debug logging in OkHttp. This requires importing the OkHttpDebugLogging utility class.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/debug_logging.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nOkHttpDebugLogging.enableHttp2()\nOkHttpDebugLogging.enableTaskRunner()\n```\n\n----------------------------------------\n\nTITLE: Configuring Okio 1.11.0 Dependency\nDESCRIPTION: Maven and Gradle dependency configurations for Okio version 1.11.0, which is a required dependency for OkHttp 3.5.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.squareup.okio</groupId>\n  <artifactId>okio</artifactId>\n  <version>1.11.0</version>\n</dependency>\n\ncom.squareup.okio:okio:1.11.0\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio 1.14.0 Maven Dependency in XML\nDESCRIPTION: Specifies the Maven dependency configuration for Okio version 1.14.0. This is required for projects using OkHttp 3.10.0 and managing dependencies with Maven. It includes the groupId, artifactId, and version.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n     <dependency>\n       <groupId>com.squareup.okio</groupId>\n       <artifactId>okio</artifactId>\n       <version>1.14.0</version>\n     </dependency>\n\n```\n\n----------------------------------------\n\nTITLE: Running OkHttp Regression Tests with Gradle\nDESCRIPTION: Command to execute the regression tests on a connected Android device or emulator using Gradle. Shows how to set the Android SDK path and includes sample output from a successful test run.\nSOURCE: https://github.com/square/okhttp/blob/master/regression-test/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ ANDROID_SDK_ROOT=/Users/myusername/Library/Android/sdk ./gradlew :regression-test:connectedCheck\n```\n\n----------------------------------------\n\nTITLE: Importing Companion Object Functions in OkHttp 4.x\nDESCRIPTION: Example of importing companion object functions in OkHttp 4.x from Kotlin code, requiring explicit Companion in the import.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_6\n\nLANGUAGE: kotlin\nCODE:\n```\nimport okhttp3.CipherSuite.Companion.forJavaName\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio Dependency - Maven XML\nDESCRIPTION: This snippet demonstrates how to declare a dependency on Okio version 1.4.0 using Maven's XML project file format. Okio is often used by OkHttp internally, and updating this dependency may be necessary for compatibility with newer OkHttp releases. Inputs are groupId, artifactId, and version, which are required by Maven. Output is a valid dependency entry for your pom.xml file. Limitations: Only applicable to projects using Maven.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n  <groupId>com.squareup.okio</groupId>\\n  <artifactId>okio</artifactId>\\n  <version>1.4.0</version>\\n</dependency>\\n\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio 1.14.0 Gradle Dependency String\nDESCRIPTION: Provides the concise Gradle dependency string for Okio version 1.14.0. This format is typically used in build.gradle files to include the necessary Okio library, which is a dependency for OkHttp 3.10.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\n     com.squareup.okio:okio:1.14.0\n\n```\n\n----------------------------------------\n\nTITLE: Executing OkHttp Native Image Tests using Gradle (Shell)\nDESCRIPTION: This shell command executes the JUnit 5 tests specifically configured for GraalVM native image compilation within the `native-image-tests` subproject. It utilizes the Gradle wrapper (`./gradlew`) and the `nativeTest` task, enabling informational logging with the `--info` flag.\nSOURCE: https://github.com/square/okhttp/blob/master/native-image-tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew --info native-image-tests:nativeTest\n```\n\n----------------------------------------\n\nTITLE: Using Object Expression with OkHttp 4.x in Kotlin\nDESCRIPTION: Example of using an object expression with OkHttp 4.x, since automatic SAM conversion is not available for Kotlin APIs called from Kotlin.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_4\n\nLANGUAGE: kotlin\nCODE:\n```\nval client = OkHttpClient.Builder()\n    .dns(object : Dns {\n      override fun lookup(hostname: String) =\n          InetAddress.getAllByName(hostname).toList()\n    })\n    .build()\n```\n\n----------------------------------------\n\nTITLE: Declaring Okio Dependency - Maven XML\nDESCRIPTION: This snippet shows how to include the Okio library version 1.3.0 as a dependency in a Maven pom.xml configuration. It's necessary for OkHttp setups or other Java projects depending on Okio. The code block is written in XML, and requires you to insert it within the dependencies section of your pom.xml. Inputs are groupId, artifactId, and version. Output is a Maven dependency XML block.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_2x.md#2025-04-22_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\\n  <groupId>com.squareup.okio</groupId>\\n  <artifactId>okio</artifactId>\\n  <version>1.3.0</version>\\n</dependency>\\n\n```\n\n----------------------------------------\n\nTITLE: Including OkHttp TLS Dependency in Kotlin\nDESCRIPTION: This line includes the dependency for OkHttp TLS module version 4.12.0 using Kotlin script. It's necessary when planning to implement TLS using OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-tls/README.md#2025-04-22_snippet_10\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okhttp3:okhttp-tls:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Properties for Gradle Build\nDESCRIPTION: This snippet shows the expected content of the `local.properties` file. It defines the path to the Android SDK (`sdk.dir`) required by Gradle for Android builds and enables the Gradle build cache (`org.gradle.caching=true`) to potentially speed up build times. The `cat` command is used here illustratively to display the file's content.\nSOURCE: https://github.com/square/okhttp/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ cat local.properties\nsdk.dir=PATH_TO_ANDROID_HOME/sdk\norg.gradle.caching=true\n```\n\n----------------------------------------\n\nTITLE: Initializing CacheInterceptor in Java\nDESCRIPTION: Constructor for the CacheInterceptor class, which is responsible for handling caching in OkHttp requests.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_4\n\nLANGUAGE: Java\nCODE:\n```\nHSPLokhttp3/internal/cache/CacheInterceptor;-><init>(Lokhttp3/Cache;)V\n```\n\n----------------------------------------\n\nTITLE: Sample OkHttp Test Log Output\nDESCRIPTION: Example logcat output showing the sequence of OkHttp events during test execution, including connection establishment, request/response handling, and connection release.\nSOURCE: https://github.com/square/okhttp/blob/master/regression-test/README.md#2025-04-22_snippet_3\n\nLANGUAGE: log\nCODE:\n```\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] responseHeadersEnd: Response{protocol=h2, code=200, message=, url=https://1.1.1.1/dns-query?dns=AAABAAABAAAAAAAAA3d3dwhmYWNlYm9vawNjb20AABwAAQ}\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] responseBodyStart\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] responseBodyEnd: byteCount=128\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] connectionReleased\n01-01 12:53:32.811 10999 11089 D OkHttp  : [49 ms] callEnd\n01-01 12:53:32.816 10999 11090 D OkHttp  : [54 ms] responseHeadersStart\n01-01 12:53:32.816 10999 11090 D OkHttp  : [54 ms] responseHeadersEnd: Response{protocol=h2, code=200, message=, url=https://1.1.1.1/dns-query?dns=AAABAAABAAAAAAAAA3d3dwhmYWNlYm9vawNjb20AAAEAAQ}\n01-01 12:53:32.817 10999 11090 D OkHttp  : [55 ms] responseBodyStart\n01-01 12:53:32.818 10999 11090 D OkHttp  : [56 ms] responseBodyEnd: byteCount=128\n01-01 12:53:32.818 10999 11090 D OkHttp  : [56 ms] connectionReleased\n01-01 12:53:32.818 10999 11090 D OkHttp  : [56 ms] callEnd\n```\n\n----------------------------------------\n\nTITLE: Running Gradle Checks for OkHttp\nDESCRIPTION: This shell command uses the Gradle wrapper (`./gradlew`) to clean the build output and run all configured checks, including tests and style checks. This should be executed before submitting a pull request to ensure the code meets project standards.\nSOURCE: https://github.com/square/okhttp/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./gradlew clean check\n```\n\n----------------------------------------\n\nTITLE: Adding Conscrypt Dependency in Kotlin\nDESCRIPTION: Gradle dependency declaration for adding Conscrypt 2.0.0 to a Kotlin project. OkHttp 3.14.0 works with this version of Conscrypt.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_1\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"org.conscrypt:conscrypt-openjdk-uber:2.0.0\")\n```\n\n----------------------------------------\n\nTITLE: Executing Android Connected Tests for OkHttp\nDESCRIPTION: This shell command executes the connected Android tests for the `:android-test` module using the Gradle wrapper. It sets the `ANDROID_SDK_ROOT` environment variable to specify the Android SDK location and passes the `-PandroidBuild=true` project property to enable Android-specific build configurations. Requires a connected Android device or emulator.\nSOURCE: https://github.com/square/okhttp/blob/master/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ ANDROID_SDK_ROOT=PATH_TO_ANDROID_HOME/sdk ./gradlew :android-test:connectedCheck -PandroidBuild=true\n```\n\n----------------------------------------\n\nTITLE: Implementing ConnectInterceptor in Java\nDESCRIPTION: Intercept method for the ConnectInterceptor class, which handles the connection process in the OkHttp request chain.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_6\n\nLANGUAGE: Java\nCODE:\n```\nHSPLokhttp3/internal/connection/ConnectInterceptor;->intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;\n```\n\n----------------------------------------\n\nTITLE: Executing HTTP/2 Prior Knowledge Request with Proxy using curl\nDESCRIPTION: A curl command example showing how to execute an HTTP/2 prior knowledge request through a proxy tunnel. This demonstrates the connection approach that OkHttp now implements for handling H2_PRIOR_KNOWLEDGE with HTTP proxies.\nSOURCE: https://github.com/square/okhttp/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl \\\n  --http2-prior-knowledge \\\n  --proxy localhost:8888 \\\n  --proxytunnel \\\n  http://squareup.com/robots.txt\n```\n\n----------------------------------------\n\nTITLE: Locking Mechanisms in OkHttp HTTP/2\nDESCRIPTION: Details the three main lock types used in OkHttp: Http2Connection lock for connection state, Http2Stream lock for stream state, and Http2Writer lock for synchronized socket writes.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/concurrency.md#2025-04-22_snippet_1\n\n\n\n----------------------------------------\n\nTITLE: Exporting Release and Next Version Variables - Shell\nDESCRIPTION: This shell snippet sets two environment variables, RELEASE_VERSION and NEXT_VERSION, that correspond to the release version (e.g., 4.9.3) and the next development version (e.g., 4.9.4-SNAPSHOT). These are used throughout subsequent scripts for version replacement and tagging. The variables should be assigned prior to running version update and tagging commands.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/releasing.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport RELEASE_VERSION=X.Y.Z\nexport NEXT_VERSION=X.Y.Z-SNAPSHOT\n\n```\n\n----------------------------------------\n\nTITLE: Adding Java Net Cookie Handler Dependency - Kotlin\nDESCRIPTION: Implementation statement for adding the Java Net Cookie Handler dependency to a Kotlin project using Gradle.\nSOURCE: https://github.com/square/okhttp/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.squareup.okhttp3:okhttp-java-net-cookiehandler:5.0.0-alpha.12\")\n```\n\n----------------------------------------\n\nTITLE: Starting Android Emulator 'pixel5' via Shell\nDESCRIPTION: Launches the previously created 'pixel5' Android emulator using the `emulator` command. The flags `-no-window` and `-no-snapshot-load` start it headlessly and without loading a previous state. Requires the Android SDK emulator tool and the 'pixel5' AVD.\nSOURCE: https://github.com/square/okhttp/blob/master/android-test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ emulator -no-window -no-snapshot-load @pixel5\n```\n\n----------------------------------------\n\nTITLE: Updating Version Numbers in Project Files - Shell\nDESCRIPTION: This multi-line shell script executes three sed commands to update version numbers in the project's build.gradle.kts file and all README.md files under the directory tree. The commands replace the explicit version strings with the value from $RELEASE_VERSION, automating migration to the new release. The script depends on sed and find, and requires the previously exported RELEASE_VERSION variable. Note: The double backslash (\\\\) and quoting is essential to ensure proper variable expansion and pattern matching.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/releasing.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nsed -i \"\" \\\n  \"s/version = \\\".*\\\"/version = \\\"$RELEASE_VERSION\\\"/g\" \\\n  build.gradle.kts\nsed -i \"\" \\\n  \"s/\\\"com.squareup.okhttp3:\\\\([^^:]*\\\\):[^\\\"]*\\\"/\\\"com.squareup.okhttp3:\\\\1:$RELEASE_VERSION\\\"/g\" \\\n  `find . -name \"README.md\"`\nsed -i \"\" \\\n  \"s/\\/com.squareup.okhttp3\\/\\\\([^:]*\\\\)\\/[^\\/]*\\//\\/com.squareup.okhttp3\\/\\\\1\\/$RELEASE_VERSION\\//g\" \\\n  `find . -name \"README.md\"`\n\n```\n\n----------------------------------------\n\nTITLE: Adding OkHttp URLConnection Dependency in Kotlin\nDESCRIPTION: This code snippet shows how to include the OkHttp URLConnection module as a test dependency in a Kotlin project. It specifies the artifact coordinates for the module.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-urlconnection/README.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"com.squareup.okhttp3:okhttp-urlconnection:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Monitoring Android Logs with adb logcat via Shell\nDESCRIPTION: Uses the Android Debug Bridge (`adb`) command `logcat` to display device logs. It filters messages to show only Error level (`*:E`) for most tags, but Debug level (`:D`) for specific tags like OkHttp, Http2, TestRunner, etc., while filtering out (`:F`) others like GnssHAL. Requires `adb` and a connected Android device or emulator.\nSOURCE: https://github.com/square/okhttp/blob/master/android-test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ adb logcat '*:E' OkHttp:D Http2:D TestRunner:D TaskRunner:D OkHttpTest:D GnssHAL_GnssInterface:F DeviceStateChecker:F memtrack:F\n```\n\n----------------------------------------\n\nTITLE: Importing Static Methods in OkHttp 3.x\nDESCRIPTION: Example of importing static methods in OkHttp 3.x from Kotlin code, where companion object functions can be imported directly.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_5\n\nLANGUAGE: kotlin\nCODE:\n```\nimport okhttp3.CipherSuite.forJavaName\n```\n\n----------------------------------------\n\nTITLE: Configuring Okio 1.9.0 Dependency\nDESCRIPTION: Maven dependency configuration for Okio version 1.9.0, required for OkHttp 3.4.0-RC1.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.squareup.okio</groupId>\n  <artifactId>okio</artifactId>\n  <version>1.9.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Adding okhttp-java-net-cookiehandler Test Dependency in Kotlin Gradle\nDESCRIPTION: This Kotlin code snippet demonstrates how to declare the `okhttp-java-net-cookiehandler` library as a test implementation dependency in a Gradle build script written in Kotlin (build.gradle.kts). This dependency is necessary to use the integration between OkHttp and `java.net.CookieHandler` within test code.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-java-net-cookiejar/README.md#2025-04-22_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\ntestImplementation(\"com.squareup.okhttp3:okhttp-java-net-cookiehandler:4.12.0\")\n```\n\n----------------------------------------\n\nTITLE: Preparing for Next Development Version and Pushing - Shell\nDESCRIPTION: After releasing, this shell script updates the project version in build.gradle.kts to the next development version (using the $NEXT_VERSION variable), commits this change, and pushes it to the repository. This ensures that ongoing development happens on an incremented version. Dependencies include sed, Git, and the preset environment variable NEXT_VERSION.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/releasing.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nsed -i \"\" \\\n  \"s/version = \\\".*\\\"/version = \\\"$NEXT_VERSION\\\"/g\" \\\n  build.gradle.kts\ngit commit -am \"Prepare next development version.\"\ngit push\n\n```\n\n----------------------------------------\n\nTITLE: Mapping HotSpot Symbolic Signatures for kotlinx.coroutines - Text Listing\nDESCRIPTION: This snippet provides a plain text listing of JVM method signatures (HotSpot symbolic links) for various internal classes in kotlinx.coroutines, as they are referenced within OkHttp. Each line uses a format denoting the class path, method name, and method signature, covering initialization, key method dispatchers, and core coroutine primitives, including support for Android contexts. No dependencies are needed for this list, but interpretation requires familiarity with JVM signature conventions. The input and output for each line are entirely symbolic; there are no transformable inputs or runtime results—these are annotations for dynamic lookup, tooling, or code navigation only.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nHSPLkotlinx/coroutines/CoroutineDispatcher;-><clinit>()V\nHSPLkotlinx/coroutines/CoroutineDispatcher;-><init>()V\nHSPLkotlinx/coroutines/CoroutineDispatcher;->get(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;\nHSPLkotlinx/coroutines/CoroutineDispatcher;->interceptContinuation(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;\nHSPLkotlinx/coroutines/CoroutineDispatcher;->isDispatchNeeded(Lkotlin/coroutines/CoroutineContext;)Z\nHSPLkotlinx/coroutines/CoroutineDispatcher;->minusKey(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;\nHSPLkotlinx/coroutines/CoroutineDispatcher;->releaseInterceptedContinuation(Lkotlin/coroutines/Continuation;)V\nHSPLkotlinx/coroutines/CoroutineExceptionHandler$Key;-><clinit>()V\nHSPLkotlinx/coroutines/CoroutineExceptionHandler$Key;-><init>()V\nHSPLkotlinx/coroutines/CoroutineExceptionHandlerImplKt$$ExternalSyntheticServiceLoad0;->m()Ljava/util/Iterator;\nHSPLkotlinx/coroutines/CoroutineExceptionHandlerImplKt;-><clinit>()V\nHSPLkotlinx/coroutines/DefaultExecutorKt;-><clinit>()V\nHSPLkotlinx/coroutines/DispatchedCoroutine;-><clinit>()V\nHSPLkotlinx/coroutines/DispatchedCoroutine;-><init>(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V\nHSPLkotlinx/coroutines/DispatchedCoroutine;->afterResume(Ljava/lang/Object;)V\nHSPLkotlinx/coroutines/DispatchedCoroutine;->getResult()Ljava/lang/Object;\nHSPLkotlinx/coroutines/DispatchedTask;-><init>(I)V\nHSPLkotlinx/coroutines/DispatchedTask;->getExceptionalResult$kotlinx_coroutines_core(Ljava/lang/Object;)Ljava/lang/Throwable;\nHSPLkotlinx/coroutines/DispatchedTask;->getSuccessfulResult$kotlinx_coroutines_core(Ljava/lang/Object;)Ljava/lang/Object;\nHSPLkotlinx/coroutines/DispatchedTask;->handleFatalException(Ljava/lang/Throwable;Ljava/lang/Throwable;)V\nHSPLkotlinx/coroutines/DispatchedTask;->run()V\nHSPLkotlinx/coroutines/DispatchedTaskKt;->isCancellableMode(I)Z\nHSPLkotlinx/coroutines/Dispatchers;-><clinit>()V\nHSPLkotlinx/coroutines/Empty;-><init>(Z)V\nHSPLkotlinx/coroutines/Empty;->getList()Lkotlinx/coroutines/NodeList;\nHSPLkotlinx/coroutines/Empty;->isActive()Z\nHSPLkotlinx/coroutines/EventLoop;-><init>()V\nHSPLkotlinx/coroutines/EventLoop;->decrementUseCount(Z)V\nHSPLkotlinx/coroutines/EventLoop;->delta(Z)J\nHSPLkotlinx/coroutines/EventLoop;->incrementUseCount(Z)V\nHSPLkotlinx/coroutines/EventLoop;->isUnconfinedLoopActive()Z\nHSPLkotlinx/coroutines/EventLoop;->processUnconfinedEvent()Z\nHSPLkotlinx/coroutines/EventLoopImplBase;-><clinit>()V\nHSPLkotlinx/coroutines/EventLoopImplBase;-><init>()V\nHSPLkotlinx/coroutines/EventLoopImplPlatform;-><init>()V\nHSPLkotlinx/coroutines/ExecutorCoroutineDispatcher;-><clinit>()V\nHSPLkotlinx/coroutines/ExecutorCoroutineDispatcher;-><init>()V\nHSPLkotlinx/coroutines/InvokeOnCancel;-><init>(Lkotlin/jvm/functions/Function1;)V\nHSPLkotlinx/coroutines/Job$DefaultImpls;->invokeOnCompletion$default(Lkotlinx/coroutines/Job;ZZLkotlin/jvm/functions/Function1;ILjava/lang/Object;)Lkotlinx/coroutines/DisposableHandle;\nHSPLkotlinx/coroutines/Job$Key;-><clinit>()V\nHSPLkotlinx/coroutines/Job$Key;-><init>()V\nHSPLkotlinx/coroutines/Job;-><clinit>()V\nHSPLkotlinx/coroutines/JobCancellingNode;-><init>()V\nHSPLkotlinx/coroutines/JobImpl;-><init>(Lkotlinx/coroutines/Job;)V\nHSPLkotlinx/coroutines/JobNode;-><init>()V\nHSPLkotlinx/coroutines/JobNode;->dispose()V\nHSPLkotlinx/coroutines/JobNode;->getJob()Lkotlinx/coroutines/JobSupport;\nHSPLkotlinx/coroutines/JobNode;->getList()Lkotlinx/coroutines/NodeList;\nHSPLkotlinx/coroutines/JobSupport$addLastAtomic$$inlined$addLastIf$1;-><init>(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;Lkotlinx/coroutines/JobSupport;Ljava/lang/Object;)V\nHSPLkotlinx/coroutines/JobSupport$addLastAtomic$$inlined$addLastIf$1;->prepare(Ljava/lang/Object;)Ljava/lang/Object;\nHSPLkotlinx/coroutines/JobSupport;-><clinit>()V\nHSPLkotlinx/coroutines/JobSupport;-><init>(Z)V\nHSPLkotlinx/coroutines/JobSupport;->addLastAtomic(Ljava/lang/Object;Lkotlinx/coroutines/NodeList;Lkotlinx/coroutines/JobNode;)Z\nHSPLkotlinx/coroutines/JobSupport;->afterCompletion(Ljava/lang/Object;)V\nHSPLkotlinx/coroutines/JobSupport;->attachChild(Lkotlinx/coroutines/ChildJob;)Lkotlinx/coroutines/ChildHandle;\nHSPLkotlinx/coroutines/JobSupport;->completeStateFinalization(Lkotlinx/coroutines/Incomplete;Ljava/lang/Object;)V\nHSPLkotlinx/coroutines/JobSupport;->fold(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;\nHSPLkotlinx/coroutines/JobSupport;->get(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;\nHSPLkotlinx/coroutines/JobSupport;->getKey()Lkotlin/coroutines/CoroutineContext$Key;\nHSPLkotlinx/coroutines/JobSupport;->getParentHandle$kotlinx_coroutines_core()Lkotlinx/coroutines/ChildHandle;\nHSPLkotlinx/coroutines/JobSupport;->getState$kotlinx_coroutines_core()Ljava/lang/Object;\nHSPLkotlinx/coroutines/JobSupport;->initParentJob(Lkotlinx/coroutines/Job;)V\nHSPLkotlinx/coroutines/JobSupport;->invokeOnCompletion(ZZLkotlin/jvm/functions/Function1;)Lkotlinx/coroutines/DisposableHandle;\nHSPLkotlinx/coroutines/JobSupport;->isActive()Z\nHSPLkotlinx/coroutines/JobSupport;->makeCompletingOnce$kotlinx_coroutines_core(Ljava/lang/Object;)Ljava/lang/Object;\nHSPLkotlinx/coroutines/JobSupport;->minusKey(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;\nHSPLkotlinx/coroutines/JobSupport;->promoteSingleToNodeList(Lkotlinx/coroutines/JobNode;)V\nHSPLkotlinx/coroutines/JobSupport;->start()Z\nHSPLkotlinx/coroutines/JobSupport;->tryMakeCompleting(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\nHSPLkotlinx/coroutines/JobSupportKt;-><clinit>()V\nHSPLkotlinx/coroutines/MainCoroutineDispatcher;-><init>()V\nHSPLkotlinx/coroutines/NodeList;-><init>()V\nHSPLkotlinx/coroutines/NodeList;->getList()Lkotlinx/coroutines/NodeList;\nHSPLkotlinx/coroutines/NonDisposableHandle;-><clinit>()V\nHSPLkotlinx/coroutines/NonDisposableHandle;-><init>()V\nHSPLkotlinx/coroutines/StandaloneCoroutine;-><init>(Lkotlin/coroutines/CoroutineContext;Z)V\nHSPLkotlinx/coroutines/SupervisorJobImpl;-><init>(Lkotlinx/coroutines/Job;)V\nHSPLkotlinx/coroutines/ThreadLocalEventLoop;-><clinit>()V\nHSPLkotlinx/coroutines/ThreadLocalEventLoop;->getEventLoop$kotlinx_coroutines_core()Lkotlinx/coroutines/EventLoop;\nHSPLkotlinx/coroutines/Unconfined;-><clinit>()V\nHSPLkotlinx/coroutines/Unconfined;-><init>()V\nHSPLkotlinx/coroutines/UndispatchedCoroutine;-><init>(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/Continuation;)V\nHSPLkotlinx/coroutines/UndispatchedCoroutine;->afterResume(Ljava/lang/Object;)V\nHSPLkotlinx/coroutines/UndispatchedMarker;-><clinit>()V\nHSPLkotlinx/coroutines/UndispatchedMarker;-><init>()V\nHSPLkotlinx/coroutines/UndispatchedMarker;->fold(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;\nHSPLkotlinx/coroutines/UndispatchedMarker;->get(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;\nHSPLkotlinx/coroutines/UndispatchedMarker;->getKey()Lkotlin/coroutines/CoroutineContext$Key;\nHSPLkotlinx/coroutines/android/AndroidDispatcherFactory;-><init>()V\nHSPLkotlinx/coroutines/android/AndroidDispatcherFactory;->createDispatcher(Ljava/util/List;)Lkotlinx/coroutines/MainCoroutineDispatcher;\nHSPLkotlinx/coroutines/android/AndroidExceptionPreHandler;-><init>()V\nHSPLkotlinx/coroutines/android/HandlerContext;-><init>(Landroid/os/Handler;Ljava/lang/String;Z)V\nHSPLkotlinx/coroutines/android/HandlerContext;->dispatch(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V\nHSPLkotlinx/coroutines/android/HandlerContext;->equals(Ljava/lang/Object;)Z\nHSPLkotlinx/coroutines/android/HandlerContext;->getImmediate()Lkotlinx/coroutines/MainCoroutineDispatcher;\nHSPLkotlinx/coroutines/android/HandlerContext;->isDispatchNeeded(Lkotlin/coroutines/CoroutineContext;)Z\nHSPLkotlinx/coroutines/android/HandlerDispatcher;-><init>(Landroidx/lifecycle/viewmodel/R$id;)V\nHSPLkotlinx/coroutines/android/HandlerDispatcherKt;-><clinit>()V\nHSPLkotlinx/coroutines/android/HandlerDispatcherKt;->asHandler(Landroid/os/Looper;Z)Landroid/os/Handler;\nHSPLkotlinx/coroutines/internal/AtomicKt;-><clinit>()V\nHSPLkotlinx/coroutines/internal/AtomicKt;->resumeCancellableWith$default(Lkotlin/coroutines/Continuation;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;I)V\nHSPLkotlinx/coroutines/internal/AtomicKt;->resumeCancellableWith(Lkotlin/coroutines/Continuation;Ljava/lang/Object;Lkotlin/jvm/functions/Function1;)V\nHSPLkotlinx/coroutines/internal/AtomicOp;-><clinit>()V\nHSPLkotlinx/coroutines/internal/AtomicOp;-><init>()V\nHSPLkotlinx/coroutines/internal/AtomicOp;->perform(Ljava/lang/Object;)Ljava/lang/Object;\nHSPLkotlinx/coroutines/internal/DispatchedContinuation;-><clinit>()V\nHSPLkotlinx/coroutines/internal/DispatchedContinuation;-><init>(Lkotlinx/coroutines/CoroutineDispatcher;Lkotlin/coroutines/Continuation;)V\nHSPLkotlinx/coroutines/internal/DispatchedContinuation;->getContext()Lkotlin/coroutines/CoroutineContext;\nHSPLkotlinx/coroutines/internal/DispatchedContinuation;->getDelegate$kotlinx_coroutines_core()Lkotlin/coroutines/Continuation;\nHSPLkotlinx/coroutines/internal/DispatchedContinuation;->release()V\nHSPLkotlinx/coroutines/internal/DispatchedContinuation;->takeState$kotlinx_coroutines_core()Ljava/lang/Object;\nHSPLkotlinx/coroutines/internal/LimitedDispatcher;-><init>(Lkotlinx/coroutines/CoroutineDispatcher;I)V\nHSPLkotlinx/coroutines/internal/LimitedDispatcher;->dispatch(Lkotlin/coroutines/CoroutineContext;Ljava/lang/Runnable;)V\nHSPLkotlinx/coroutines/internal/LimitedDispatcher;->run()V\nHSPLkotlinx/coroutines/internal/LockFreeLinkedListHead;-><init>()V\nHSPLkotlinx/coroutines/internal/LockFreeLinkedListHead;->isRemoved()Z\nHSPLkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;-><init>(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)V\nHSPLkotlinx/coroutines/internal/LockFreeLinkedListNode$CondAddOp;->complete(Ljava/lang/Object;Ljava/lang/Object;)V\nHSPLkotlinx/coroutines/internal/LockFreeLinkedListNode;-><clinit>()V\n```\n\n----------------------------------------\n\nTITLE: URL Example in OkHttp\nDESCRIPTION: Example of a HTTPS URL format used in OkHttp requests\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/connections.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://github.com/square/okhttp\n```\n\n----------------------------------------\n\nTITLE: Managing Connection in ConnectPlan\nDESCRIPTION: Methods for handling various connection scenarios in the ConnectPlan class, including TCP and TLS connections.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_7\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/connection/ConnectPlan;->connectSocket()V\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/connection/ConnectPlan;->connectTcp()Lokhttp3/internal/connection/RoutePlanner$ConnectResult;\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/connection/ConnectPlan;->connectTls(Ljavax/net/ssl/SSLSocket;Lokhttp3/ConnectionSpec;)V\n```\n\n----------------------------------------\n\nTITLE: Batch Converting Imports for OkHttp 4.x\nDESCRIPTION: Bash script to automatically update import statements from OkHttp 3.x style to OkHttp 4.x style with Companion objects.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/upgrading_to_okhttp_4.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsed -i \"\" \\\n  's/^\\(import okhttp3\\.[^.]*\\)\\.\\([a-z][a-zA-Z]*\\)$/\\1.Companion.\\2/g' \\\n  `find . -name \"*.kt\"`\n```\n\n----------------------------------------\n\nTITLE: OkHttp HTTP Interceptor Method Signatures\nDESCRIPTION: Method signatures for HTTP request/response interceptors including retry, bridge and server interceptors\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_11\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/http/BridgeInterceptor;->intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;\nHSPLokhttp3/internal/http/CallServerInterceptor;->intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;\nHSPLokhttp3/internal/http/RetryAndFollowUpInterceptor;->intercept(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;\n```\n\n----------------------------------------\n\nTITLE: URL Query Parameters Example\nDESCRIPTION: Example of URL query parameters format in OkHttp\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/connections.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n?q=sharks&lang=en\n```\n\n----------------------------------------\n\nTITLE: Handling Request and Response in Exchange\nDESCRIPTION: Methods for managing request and response operations in the Exchange class, including body creation, header reading, and completion handling.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_8\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/connection/Exchange;->createRequestBody(Lokhttp3/Request;Z)Lokio/Sink;\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/connection/Exchange;->readResponseHeaders(Z)Lokhttp3/Response$Builder;\n```\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/connection/Exchange;->bodyComplete(JZZLjava/io/IOException;)Ljava/io/IOException;\n```\n\n----------------------------------------\n\nTITLE: Buffer Operations in Kotlin\nDESCRIPTION: Implements various read and write operations for the Buffer class, which is a core component for handling data in OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_13\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokio/Buffer;-><init>()V\nHSPLokio/Buffer;->exhausted()Z\nHSPLokio/Buffer;->getByte(J)B\nHSPLokio/Buffer;->indexOfElement(Lokio/ByteString;)J\nHSPLokio/Buffer;->rangeEquals(JLokio/ByteString;)Z\nHSPLokio/Buffer;->read(Lokio/Buffer;J)J\nHSPLokio/Buffer;->read([BII)I\nHSPLokio/Buffer;->readByte()B\nHSPLokio/Buffer;->readByteArray(J)[B\nHSPLokio/Buffer;->readByteString()Lokio/ByteString;\nHSPLokio/Buffer;->readByteString(J)Lokio/ByteString;\nHSPLokio/Buffer;->readInt()I\nHSPLokio/Buffer;->readIntLe()I\nHSPLokio/Buffer;->readShort()S\nHSPLokio/Buffer;->readString(JLjava/nio/charset/Charset;)Ljava/lang/String;\nHSPLokio/Buffer;->readString(Ljava/nio/charset/Charset;)Ljava/lang/String;\nHSPLokio/Buffer;->skip(J)V\nHSPLokio/Buffer;->writableSegment$okio(I)Lokio/Segment;\nHSPLokio/Buffer;->write(Lokio/Buffer;J)V\nHSPLokio/Buffer;->write(Lokio/ByteString;)Lokio/Buffer;\nHSPLokio/Buffer;->write([B)Lokio/Buffer;\nHSPLokio/Buffer;->write([BII)Lokio/Buffer;\nHSPLokio/Buffer;->writeAll(Lokio/Source;)J\nHSPLokio/Buffer;->writeByte(I)Lokio/Buffer;\nHSPLokio/Buffer;->writeByte(I)Lokio/BufferedSink;\nHSPLokio/Buffer;->writeInt(I)Lokio/Buffer;\nHSPLokio/Buffer;->writeShort(I)Lokio/Buffer;\nHSPLokio/Buffer;->writeUtf8(Ljava/lang/String;)Lokio/Buffer;\nHSPLokio/Buffer;->writeUtf8(Ljava/lang/String;II)Lokio/Buffer;\n```\n\n----------------------------------------\n\nTITLE: Configuring Gradle Local Properties\nDESCRIPTION: Example of a local.properties file configuration for OkHttp development. Sets the Android SDK directory path and enables Gradle caching for improved build performance.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/contribute/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cat local.properties\nsdk.dir=PATH_TO_ANDROID_HOME/sdk\norg.gradle.caching=true\n```\n\n----------------------------------------\n\nTITLE: OkHttp HTTP/2 Protocol Method Signatures\nDESCRIPTION: Method signatures for HTTP/2 protocol implementation including connection management, settings handling, and frame processing\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_9\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/http2/Http2Connection$ReaderRunnable;->data(ZILokio/BufferedSource;I)V\nHSPLokhttp3/internal/http2/Http2Connection$ReaderRunnable;->headers(ZIILjava/util/List;)V\nHSPLokhttp3/internal/http2/Http2Connection$ReaderRunnable;->settings(ZLokhttp3/internal/http2/Settings;)V\nHSPLokhttp3/internal/http2/Http2Connection$ReaderRunnable;->windowUpdate(IJ)V\n```\n\n----------------------------------------\n\nTITLE: Starting the Android Emulator for OkHttp Tests\nDESCRIPTION: Command to launch the Pixel 5 emulator in headless mode without loading a snapshot, which is optimal for automated testing.\nSOURCE: https://github.com/square/okhttp/blob/master/regression-test/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ emulator -no-window -no-snapshot-load @pixel5\n```\n\n----------------------------------------\n\nTITLE: File System Operations in Kotlin\nDESCRIPTION: Defines various file system operations and implementations, including JVM and NIO system file systems.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_15\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokio/FileSystem;-><clinit>()V\nHSPLokio/FileSystem;-><init>()V\nHSPLokio/ForwardingFileSystem;-><init>(Lokio/FileSystem;)V\nHSPLokio/JvmSystemFileSystem;-><init>()V\nHSPLokio/NioSystemFileSystem;-><init>()V\n```\n\n----------------------------------------\n\nTITLE: Executing TaskQueue in Kotlin\nDESCRIPTION: Method for executing tasks in a TaskQueue with default parameters. It allows scheduling of tasks with custom timing and behavior.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_5\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/concurrent/TaskQueue;->execute$default(Lokhttp3/internal/concurrent/TaskQueue;Ljava/lang/String;JZLkotlin/jvm/functions/Function0;I)V\n```\n\n----------------------------------------\n\nTITLE: Initializing AsyncTimeout in Kotlin\nDESCRIPTION: Defines the initialization and core methods of the AsyncTimeout class, which is used for managing timeouts in asynchronous operations.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_12\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokio/AsyncTimeout;-><clinit>()V\nHSPLokio/AsyncTimeout;-><init>()V\nHSPLokio/AsyncTimeout;->enter()V\nHSPLokio/AsyncTimeout;->exit()Z\n```\n\n----------------------------------------\n\nTITLE: Component Activity in Java\nDESCRIPTION: Defines the ComponentActivity class and related inner classes for Android component lifecycle management.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_19\n\nLANGUAGE: Java\nCODE:\n```\nLandroidx/activity/ComponentActivity$$ExternalSyntheticLambda0;\nLandroidx/activity/ComponentActivity$$ExternalSyntheticLambda1;\nLandroidx/activity/ComponentActivity$$ExternalSyntheticLambda2;\nLandroidx/activity/ComponentActivity$1;\nLandroidx/activity/ComponentActivity$2;\nLandroidx/activity/ComponentActivity$3;\nLandroidx/activity/ComponentActivity$4;\nLandroidx/activity/ComponentActivity$5;\nLandroidx/activity/ComponentActivity$NonConfigurationInstances;\nLandroidx/activity/ComponentActivity;\n```\n\n----------------------------------------\n\nTITLE: Utility Functions in Kotlin\nDESCRIPTION: Implements various utility functions for array operations, offset checking, and other common tasks in OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_18\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokio/_UtilKt;->arrayRangeEquals([BI[BII)Z\nHSPLokio/_UtilKt;->checkOffsetAndCount(JJJ)V\n```\n\n----------------------------------------\n\nTITLE: ByteString Operations in Kotlin\nDESCRIPTION: Implements various operations for the ByteString class, which represents an immutable sequence of bytes in OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_14\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokio/ByteString;-><clinit>()V\nHSPLokio/ByteString;-><init>([B)V\nHSPLokio/ByteString;->compareTo(Ljava/lang/Object;)I\nHSPLokio/ByteString;->compareTo(Lokio/ByteString;)I\nHSPLokio/ByteString;->equals(Ljava/lang/Object;)Z\nHSPLokio/ByteString;->getSize$okio()I\nHSPLokio/ByteString;->hashCode()I\nHSPLokio/ByteString;->indexOf$default(Lokio/ByteString;Lokio/ByteString;IILjava/lang/Object;)I\nHSPLokio/ByteString;->indexOf([BI)I\nHSPLokio/ByteString;->internalArray$okio()[B\nHSPLokio/ByteString;->internalGet$okio(I)B\nHSPLokio/ByteString;->rangeEquals(ILokio/ByteString;II)Z\nHSPLokio/ByteString;->rangeEquals(I[BII)Z\nHSPLokio/ByteString;->startsWith(Lokio/ByteString;)Z\nHSPLokio/ByteString;->toAsciiLowercase()Lokio/ByteString;\nHSPLokio/ByteString;->utf8()Ljava/lang/String;\nHSPLokio/ByteString;->write$okio(Lokio/Buffer;II)V\n```\n\n----------------------------------------\n\nTITLE: Viewing OkHttp Test Logs with Logcat\nDESCRIPTION: Command to filter logcat output to show only errors and debug information related to OkHttp, HTTP/2, and test runners. Includes a sample of the log output showing HTTP request details.\nSOURCE: https://github.com/square/okhttp/blob/master/regression-test/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ adb logcat '*:E' OkHttp:D Http2:D TestRunner:D TaskRunner:D OkHttpTest:D GnssHAL_GnssInterface:F DeviceStateChecker:F memtrack:F\n```\n\n----------------------------------------\n\nTITLE: Configuring Okio 1.8.0 Dependency\nDESCRIPTION: Maven dependency configuration for Okio version 1.8.0, required for OkHttp 3.3.0.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_3x.md#2025-04-22_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.squareup.okio</groupId>\n  <artifactId>okio</artifactId>\n  <version>1.8.0</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: IO Operations in Kotlin\nDESCRIPTION: Implements various IO operations, including gzip compression, inflation, and input/output stream handling.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_16\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokio/GzipSource;-><init>(Lokio/Source;)V\nHSPLokio/GzipSource;->checkEqual(Ljava/lang/String;II)V\nHSPLokio/GzipSource;->close()V\nHSPLokio/GzipSource;->read(Lokio/Buffer;J)J\nHSPLokio/GzipSource;->updateCrc(Lokio/Buffer;JJ)V\nHSPLokio/InflaterSource;-><init>(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V\nHSPLokio/InflaterSource;->close()V\nHSPLokio/InflaterSource;->read(Lokio/Buffer;J)J\nHSPLokio/InputStreamSource;-><init>(Ljava/io/InputStream;Lokio/Timeout;)V\nHSPLokio/InputStreamSource;->close()V\nHSPLokio/InputStreamSource;->read(Lokio/Buffer;J)J\nHSPLokio/OutputStreamSink;-><init>(Ljava/io/OutputStream;Lokio/Timeout;)V\nHSPLokio/OutputStreamSink;->close()V\nHSPLokio/OutputStreamSink;->flush()V\nHSPLokio/OutputStreamSink;->write(Lokio/Buffer;J)V\n```\n\n----------------------------------------\n\nTITLE: Android Architecture Components Core Class Signatures\nDESCRIPTION: Method signatures for core Android Architecture Components classes including ArchTaskExecutor, FastSafeIterableMap, and SafeIterableMap implementations.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_0\n\nLANGUAGE: Java\nCODE:\n```\nHSPLandroidx/arch/core/executor/ArchTaskExecutor;->getInstance()\nHSPLandroidx/arch/core/internal/FastSafeIterableMap;->contains(Ljava/lang/Object;)Z\nHSPLandroidx/arch/core/internal/SafeIterableMap;->put(Ljava/lang/Object;Ljava/lang/Object;)\n```\n\n----------------------------------------\n\nTITLE: Sample OkHttp Regression Test Output\nDESCRIPTION: Example output from a successful regression test run showing test completion details, including the number of tests executed and their results.\nSOURCE: https://github.com/square/okhttp/blob/master/regression-test/README.md#2025-04-22_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n> Task :regression-test:connectedDebugAndroidTest\n...\n11:55:40 V/InstrumentationResultParser: Time: 13.271\n11:55:40 V/InstrumentationResultParser:\n11:55:40 V/InstrumentationResultParser: OK (12 tests)\n...\n11:55:40 I/XmlResultReporter: XML test result file generated at /Users/myusername/workspace/okhttp/regression-test/build/outputs/regression-results/connected/TEST-pixel3a-Q(AVD) - 10-android-test-.xml. Total tests 13, passed 11, assumption_failure 1, ignored 1,\n...\nBUILD SUCCESSFUL in 1m 30s\n63 actionable tasks: 61 executed, 2 up-to-date\n```\n\n----------------------------------------\n\nTITLE: JobSupport Class Methods for Coroutine Cancellation and Completion\nDESCRIPTION: Method signatures from the JobSupport class in kotlinx.coroutines package, which handles job cancellation, completion, and child-parent relationship management. These methods are part of the core implementation that manages coroutine lifecycle.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_20\n\nLANGUAGE: kotlin\nCODE:\n```\nPLkotlinx/coroutines/JobSupport;->cancel(Ljava/util/concurrent/CancellationException;)V\nPLkotlinx/coroutines/JobSupport;->cancelImpl$kotlinx_coroutines_core(Ljava/lang/Object;)Z\nPLkotlinx/coroutines/JobSupport;->cancelParent(Ljava/lang/Throwable;)Z\nPLkotlinx/coroutines/JobSupport;->cancellationExceptionMessage()Ljava/lang/String;\nPLkotlinx/coroutines/JobSupport;->createCauseException(Ljava/lang/Object;)Ljava/lang/Throwable;\nPLkotlinx/coroutines/JobSupport;->finalizeFinishingState(Lkotlinx/coroutines/JobSupport$Finishing;Ljava/lang/Object;)Ljava/lang/Object;\nPLkotlinx/coroutines/JobSupport;->getOrPromoteCancellingList(Lkotlinx/coroutines/Incomplete;)Lkotlinx/coroutines/NodeList;\nPLkotlinx/coroutines/JobSupport;->isScopedCoroutine()Z\nPLkotlinx/coroutines/JobSupport;->nextChild(Lkotlinx/coroutines/internal/LockFreeLinkedListNode;)Lkotlinx/coroutines/ChildHandleNode;\nPLkotlinx/coroutines/JobSupport;->notifyCancelling(Lkotlinx/coroutines/NodeList;Ljava/lang/Throwable;)V\nPLkotlinx/coroutines/JobSupport;->onCompletionInternal(Ljava/lang/Object;)V\n```\n\n----------------------------------------\n\nTITLE: PGP Public Key for Verifying OkHttp Artifacts\nDESCRIPTION: This text block displays the PGP public key used by Square (specifically 'Square Clippy <opensource@squareup.com>') to sign OkHttp release artifacts. Users can import this key (ID 66B50994442D2D40) to verify the integrity and authenticity of downloaded OkHttp libraries, often automated through build systems like Gradle.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/security/security.md#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\npub rsa4096/dbd744ace7ade6aa50dd591f66b50994442d2d40 2021-07-09T14:50:19Z\n\t Hash=a79b48fd6a1f31699c788b50c97d0b98\n\nuid Square Clippy <opensource@squareup.com>\nsig  sig  66b50994442d2d40 2021-07-09T14:50:19Z 2041-07-04T14:50:19Z ____________________ [selfsig]\n```\n\n----------------------------------------\n\nTITLE: Example Gradle Test Execution Output\nDESCRIPTION: Sample console output from running the Gradle `connectedCheck` task. Shows the execution of the `:android-test:connectedDebugAndroidTest` task, instrumentation test summary (e.g., 'OK (12 tests)', timing), the location of the generated XML test result report, and the final overall build status ('BUILD SUCCESSFUL').\nSOURCE: https://github.com/square/okhttp/blob/master/android-test/README.md#2025-04-22_snippet_5\n\nLANGUAGE: log\nCODE:\n```\n...\n> Task :android-test:connectedDebugAndroidTest\n...\n11:55:40 V/InstrumentationResultParser: Time: 13.271\n11:55:40 V/InstrumentationResultParser:\n11:55:40 V/InstrumentationResultParser: OK (12 tests)\n...\n11:55:40 I/XmlResultReporter: XML test result file generated at /Users/myusername/workspace/okhttp/android-test/build/outputs/androidTest-results/connected/TEST-pixel3a-Q(AVD) - 10-android-test-.xml. Total tests 13, passed 11, assumption_failure 1, ignored 1,\n...\nBUILD SUCCESSFUL in 1m 30s\n63 actionable tasks: 61 executed, 2 up-to-date\n\n```\n\n----------------------------------------\n\nTITLE: JobSupport.Finishing Inner Class Methods\nDESCRIPTION: Method signatures from the JobSupport.Finishing inner class, which represents the state of a job that is in the process of completing or cancelling. These methods manage the transition from active to completed state in a coroutine job.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_21\n\nLANGUAGE: kotlin\nCODE:\n```\nPLkotlinx/coroutines/JobSupport$Finishing;->isCancelling()Z\nPLkotlinx/coroutines/JobSupport$Finishing;->isCompleting()Z\nPLkotlinx/coroutines/JobSupport$Finishing;->sealLocked(Ljava/lang/Throwable;)Ljava/util/List;\nPLkotlinx/coroutines/JobSupport$Finishing;->setCompleting(Z)V\n```\n\n----------------------------------------\n\nTITLE: Defining Markdown Links for Security Provider References in OkHttp\nDESCRIPTION: This markdown snippet defines the links used in the security provider status table. It includes references to various security technologies, providers, and relevant bug tracking issues. These links provide additional context and resources for each mentioned provider or technology.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/security/security_providers.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[BoringSSL]: https://boringssl.googlesource.com/boringssl/\n[Bouncy Castle]: https://www.bouncycastle.org/java.html\n[Conscrypt]: https://www.conscrypt.org/\n[Corretto]: https://github.com/corretto/amazon-corretto-crypto-provider\n[GraalVM]: https://www.graalvm.org/\n[OpenJDK]: https://openjdk.java.net/groups/security/\n[OpenJSSE]: https://github.com/openjsse/openjsse\n[OpenSSL]: https://www.openssl.org/\n[bug5592]: https://github.com/square/okhttp/issues/5592\n[bug5698]: https://github.com/square/okhttp/issues/5698\n```\n\n----------------------------------------\n\nTITLE: Android Lifecycle Component Signatures\nDESCRIPTION: Method signatures for Lifecycle related classes including LifecycleRegistry, LifecycleController and LifecycleCoroutineScope integrations.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_1\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLandroidx/lifecycle/LifecycleRegistry;->addObserver(Landroidx/lifecycle/LifecycleObserver;)V\nHSPLandroidx/lifecycle/LifecycleController;->finish()V\nHSPLandroidx/lifecycle/LifecycleCoroutineScope;->launchWhenResumed(Lkotlin/jvm/functions/Function2;)\n```\n\n----------------------------------------\n\nTITLE: Initializing HPACK Test Cases with Git Submodules\nDESCRIPTION: Commands to initialize and update the git submodule containing HPACK test cases that are used to validate OkHttp's HPACK implementation.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp-hpacktests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit submodule init\ngit submodule update\n```\n\n----------------------------------------\n\nTITLE: Custom Header Prefixes Transition Documentation for OkHttp (Plain Text)\nDESCRIPTION: This snippet describes the updated convention for synthetic header fields in OkHttp, demonstrating the mapping between previous 'X-Android-*' headers and the new 'OkHttp-*' header names. It is purely informational with no code execution, used to communicate to developers the necessary string changes for compatibility and logging. This change was part of OkHttp 1.2.0 and affects request/response header naming conventions within integrations or tests.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/changelogs/changelog_1x.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nX-Android-Sent-Millis is now OkHttp-Sent-Millis\nX-Android-Received-Millis is now OkHttp-Received-Millis\nX-Android-Response-Source is now OkHttp-Response-Source\nX-Android-Selected-Transport is now OkHttp-Selected-Transport\n```\n\n----------------------------------------\n\nTITLE: TLS Cipher Suites Configuration for OkHttp\nDESCRIPTION: This is a list of cipher suites supported in OkHttp for TLS connections. It includes modern TLS 1.3 cipher suites (starting with 'TLS_AES' and 'TLS_CHACHA20') followed by TLS 1.2 cipher suites (ECDHE and RSA based) arranged in approximate order of security preference.\nSOURCE: https://github.com/square/okhttp/blob/master/samples/tlssurvey/src/main/resources/okhttp_3.13.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nTLS_AES_128_GCM_SHA256\nTLS_AES_256_GCM_SHA384\nTLS_CHACHA20_POLY1305_SHA256\nTLS_AES_128_CCM_SHA256\nTLS_AES_256_CCM_8_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\nTLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\nTLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\nTLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\nTLS_ECDHE_RSA_WITH_AES_128_CBC_SHA\nTLS_ECDHE_RSA_WITH_AES_256_CBC_SHA\nTLS_RSA_WITH_AES_128_GCM_SHA256\nTLS_RSA_WITH_AES_256_GCM_SHA384\nTLS_RSA_WITH_AES_128_CBC_SHA\nTLS_RSA_WITH_AES_256_CBC_SHA\nTLS_RSA_WITH_3DES_EDE_CBC_SHA\n```\n\n----------------------------------------\n\nTITLE: TLS Configuration Lists across OkHttp Versions\nDESCRIPTION: Comprehensive lists of TLS cipher suites and versions supported by OkHttp across multiple versions from 3.0 to 3.14. Includes RESTRICTED_TLS, MODERN_TLS, and COMPATIBLE_TLS configurations with additions and removals tracked over time.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/security/tls_configuration_history.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n##### RESTRICTED_TLS cipher suites\n\n * TLS_AES_128_GCM_SHA256[¹][tlsv13_only]\n * TLS_AES_256_GCM_SHA384[¹][tlsv13_only]\n * TLS_CHACHA20_POLY1305_SHA256[¹][tlsv13_only]\n * TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\n * TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256\n * TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384\n * TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384\n * TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256\n * TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256\n```\n\n----------------------------------------\n\nTITLE: Making HTTP Requests with OkHttp Client in Java\nDESCRIPTION: This code snippet shows how to create and execute HTTP requests using OkHttp client. It demonstrates making two requests, one establishing a new connection and another reusing a pooled connection.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/events.md#2025-04-22_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nRequest request = new Request.Builder()\n    .url(\"https://publicobject.com/helloworld.txt\")\n    .build();\n\nSystem.out.println(\"REQUEST 1 (new connection)\");\ntry (Response response = client.newCall(request).execute()) {\n  // Consume and discard the response body.\n  response.body().source().readByteString();\n}\n\nSystem.out.println(\"REQUEST 2 (pooled connection)\");\ntry (Response response = client.newCall(request).execute()) {\n  // Consume and discard the response body.\n  response.body().source().readByteString();\n}\n```\n\n----------------------------------------\n\nTITLE: Buffered IO Operations in Kotlin\nDESCRIPTION: Implements buffered sink and source operations for efficient IO handling in OkHttp.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_17\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokio/RealBufferedSink;-><init>(Lokio/Sink;)V\nHSPLokio/RealBufferedSink;->close()V\nHSPLokio/RealBufferedSink;->emitCompleteSegments()Lokio/BufferedSink;\nHSPLokio/RealBufferedSink;->flush()V\nHSPLokio/RealBufferedSink;->write(Lokio/Buffer;J)V\nHSPLokio/RealBufferedSink;->write(Lokio/ByteString;)Lokio/BufferedSink;\nHSPLokio/RealBufferedSink;->write([BII)Lokio/BufferedSink;\nHSPLokio/RealBufferedSink;->writeByte(I)Lokio/BufferedSink;\nHSPLokio/RealBufferedSink;->writeInt(I)Lokio/BufferedSink;\nHSPLokio/RealBufferedSink;->writeShort(I)Lokio/BufferedSink;\nHSPLokio/RealBufferedSource;-><init>(Lokio/Source;)V\nHSPLokio/RealBufferedSource;->close()V\nHSPLokio/RealBufferedSource;->exhausted()Z\nHSPLokio/RealBufferedSource;->getBuffer()Lokio/Buffer;\nHSPLokio/RealBufferedSource;->read(Lokio/Buffer;J)J\nHSPLokio/RealBufferedSource;->readByte()B\nHSPLokio/RealBufferedSource;->readByteString(J)Lokio/ByteString;\nHSPLokio/RealBufferedSource;->readInt()I\nHSPLokio/RealBufferedSource;->readIntLe()I\nHSPLokio/RealBufferedSource;->readShort()S\nHSPLokio/RealBufferedSource;->readString(Ljava/nio/charset/Charset;)Ljava/lang/String;\nHSPLokio/RealBufferedSource;->request(J)Z\nHSPLokio/RealBufferedSource;->require(J)V\nHSPLokio/RealBufferedSource;->select(Lokio/Options;)I\nHSPLokio/RealBufferedSource;->skip(J)V\n```\n\n----------------------------------------\n\nTITLE: OkHttp Connection Management Method Signatures\nDESCRIPTION: Method signatures for connection handling including connection pooling, route selection and connection reuse\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_10\n\nLANGUAGE: Kotlin\nCODE:\n```\nHSPLokhttp3/internal/connection/RealConnection;->isEligible$okhttp(Lokhttp3/Address;Ljava/util/List;)Z\nHSPLokhttp3/internal/connection/RealConnection;->isHealthy(Z)Z\nHSPLokhttp3/internal/connection/RealConnection;->isMultiplexed$okhttp()Z\nHSPLokhttp3/internal/connection/RealConnection;->start()V\n```\n\n----------------------------------------\n\nTITLE: Android ReportFragment Implementation Signatures\nDESCRIPTION: Method signatures for ReportFragment class used for reporting lifecycle events in Android activities.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_2\n\nLANGUAGE: Java\nCODE:\n```\nHSPLandroidx/lifecycle/ReportFragment;->dispatch(Landroid/app/Activity;Landroidx/lifecycle/Lifecycle$Event;)V\nHSPLandroidx/lifecycle/ReportFragment;->injectIfNeededIn(Landroid/app/Activity;)V\nHSPLandroidx/lifecycle/ReportFragment;->onActivityCreated(Landroid/os/Bundle;)V\n```\n\n----------------------------------------\n\nTITLE: Making Concurrent HTTP Requests with OkHttp in Java\nDESCRIPTION: This code demonstrates how to make concurrent HTTP requests using OkHttp client. It creates and enqueues two separate requests to different URLs.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/features/events.md#2025-04-22_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nRequest washingtonPostRequest = new Request.Builder()\n    .url(\"https://www.washingtonpost.com/\")\n    .build();\nclient.newCall(washingtonPostRequest).enqueue(new Callback() {\n  ...\n});\n\nRequest newYorkTimesRequest = new Request.Builder()\n    .url(\"https://www.nytimes.com/\")\n    .build();\nclient.newCall(newYorkTimesRequest).enqueue(new Callback() {\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Response Count Method in Java\nDESCRIPTION: A Java method that counts the number of responses in a chain by traversing prior responses. Useful for tracking authentication retry attempts.\nSOURCE: https://github.com/square/okhttp/blob/master/docs/recipes.md#2025-04-22_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nprivate int responseCount(Response response) {\n  int result = 1;\n  while ((response = response.priorResponse()) != null) {\n    result++;\n  }\n  return result;\n}\n```\n\n----------------------------------------\n\nTITLE: NonDisposableHandle Method\nDESCRIPTION: Method signature for the NonDisposableHandle class in kotlinx.coroutines package. This class represents a handle that cannot be disposed and is used as a special marker in the coroutines framework.\nSOURCE: https://github.com/square/okhttp/blob/master/okhttp/src/androidMain/baseline-prof.txt#2025-04-22_snippet_22\n\nLANGUAGE: kotlin\nCODE:\n```\nPLkotlinx/coroutines/NonDisposableHandle;->dispose()V\n```\n\n----------------------------------------\n\nTITLE: OkHttp Test Status List\nDESCRIPTION: A comprehensive list of test case identifiers and their implementation status (OK, UNIMPLEMENTED, NON-STRICT, INFORMATIONAL, FAILED)\nSOURCE: https://github.com/square/okhttp/blob/master/fuzzing/fuzzingserver-expected.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"1.1.1 OK\"\n\"1.1.2 OK\"\n\"1.1.3 OK\"\n[...remaining status entries...]\n```"
  }
]