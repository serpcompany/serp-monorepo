[
  {
    "owner": "vfarcic",
    "repo": "devopstoolkit-live",
    "content": "TITLE: Defining Dynamic Kubernetes Compositions - KCL\nDESCRIPTION: Demonstrates how to author Crossplane-style resource compositions in KCL, dynamically building Kubernetes resource objects such as Deployments with container images and conditionally including HorizontalPodAutoscaler based on the 'scaling.enabled' parameter. Requires KCL, Crossplane, and parameterized resource manifests. Inputs include composite resource parameters (oxr, ocds), and outputs are composed resource objects for Kubernetes. This snippet leverages variables, type-safe logic, and conditional blocks for maximum flexibility.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: kcl\nCODE:\n```\noxr = option(\"params\").oxr\nocds = option(\"params\").ocds\n_name = oxr.metadata.name\n_spec = oxr.spec\n...\n_items = [\n    {\n        apiVersion = \"apps/v1\"\n        kind = \"Deployment\"\n        metadata = _metadata(_name, \"deployment\")\n        spec = {\n            selector.matchLabels = {\n                \"app.kubernetes.io/name\" = _name\n            }\n            template = {\n                metadata.labels = {\n                    \"app.kubernetes.io/name\" = _name\n                }\n                spec = {\n                    containers = [{\n                        image = _spec.image + \":\" + _spec.tag\n                        ...\nif _spec.scaling?.enabled:\n    _items += [{\n        apiVersion = \"autoscaling/v2\"\n        kind = \"HorizontalPodAutoscaler\"\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Viewing Job Resource Tree Output\nDESCRIPTION: Output showing that the Job created a pod which has completed its execution and is no longer ready, demonstrating the one-time execution nature of Jobs.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_51\n\nLANGUAGE: plaintext\nCODE:\n```\nNAMESPACE NAME                   READY REASON       AGE\na-team    Job/silly-demo         -                  11s\na-team    └─Pod/silly-demo-vn5xg False PodCompleted 11s\n```\n\n----------------------------------------\n\nTITLE: Defining PersistentVolumeClaim and Deployment in Kubernetes YAML\nDESCRIPTION: YAML configuration defining a PersistentVolumeClaim for storage and a Deployment with 5 replicas, including volume mounts and resource specifications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: silly-claim\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  replicas: 5\n  minReadySeconds: 10\n  strategy:\n    rollingUpdate:\n      maxUnavailable: 1\n      maxSurge: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.117\n          name: silly-demo\n          ports:\n            - containerPort: 8080    \n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8080\n          resources:\n            limits:\n              cpu: 250m\n              memory: 256Mi\n            requests:\n              cpu: 125m\n              memory: 128Mi\n          volumeMounts:\n          - mountPath: /cache\n            name: silly-cache\n      volumes:\n        - name: silly-cache\n          persistentVolumeClaim:\n            claimName: silly-claim\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Deployment and Testing emptyDir Volume\nDESCRIPTION: Commands to apply the Kubernetes Deployment, send POST requests to the application, and verify data storage in the emptyDir volume.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename volume/empty-dir.yaml\n\ncurl -XPOST \\\n    \"http://silly-demo.$INGRESS_HOST.nip.io/video?id=1&title=something\"\n\ncurl -XPOST \\\n  \"http://silly-demo.$INGRESS_HOST.nip.io/video?id=2&title=else\"\n\ncurl \"http://silly-demo.$INGRESS_HOST.nip.io/videos\" | jq .\n\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- ls /cache/\n\nkubectl --namespace a-team delete pod \\\n    --selector app.kubernetes.io/name=silly-demo\n\nkubectl --namespace a-team get pods\n\ncurl \"http://silly-demo.$INGRESS_HOST.nip.io/videos\"\n\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- ls /cache/\n```\n\n----------------------------------------\n\nTITLE: Defining a VerticalPodAutoscaler Resource for Automatic Scaling\nDESCRIPTION: This YAML snippet defines a VerticalPodAutoscaler resource targeting the 'silly-demo' Deployment. It's set to 'Auto' mode, which means it will automatically update resource requests and limits for the managed Pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: silly-demo\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: silly-demo\n  updatePolicy:\n    updateMode: Auto\n```\n\n----------------------------------------\n\nTITLE: Applying VPA and Application Manifests in Kubernetes\nDESCRIPTION: These shell commands apply the VPA and application manifests to the 'a-team' namespace in a Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename scale/vpa.yaml\n\nkubectl --namespace a-team apply --filename scale/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Custom Resource Application Definition\nDESCRIPTION: YAML configuration for a custom AppClaim resource that abstracts the deployment of a complete application stack.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1alpha1\nkind: AppClaim\nmetadata:\n  name: silly-demo\n  labels:\n    app-owner: vfarcic\nspec:\n  id: silly-demo\n  compositionSelector:\n    matchLabels:\n      type: backend\n      location: local\n  parameters:\n    namespace: a-team\n    image: ghcr.io/vfarcic/idp-full-demo\n    tag: \"0.0.5\"\n    port: 8080\n    host: silly-demo.127.0.0.1.nip.io\n    ingressClassName: nginx\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Storage Classes using kubectl (Shell)\nDESCRIPTION: This shell command uses `kubectl` to retrieve and display a list of all configured Storage Classes within the current Kubernetes cluster context. It requires `kubectl` to be installed and configured to connect to a Kubernetes cluster. The command outputs details for each Storage Class, including its name, the provisioner (typically a CSI driver), reclaim policy, volume binding mode, and age.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get storageclasses\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Resource Management with Crossplane Composition (YAML/KCL)\nDESCRIPTION: Defines a Crossplane Composition named `github` targeting the `GitHub` Composite Resource (`devopstoolkitseries.com/v1alpha1`). It uses a pipeline of Composition Functions, including `crossplane-contrib-function-kcl` with embedded KCL logic, to dynamically generate managed GitHub resources like Repositories and RepositoryFiles based on the Composite Resource's specification. It also includes a step for auto-detecting readiness and specifies the namespace for connection secrets.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: github\nspec:\n  compositeTypeRef:\n    apiVersion: devopstoolkitseries.com/v1alpha1\n    kind: GitHub\n  mode: Pipeline\n  pipeline:\n  - step: github\n    functionRef:\n      name: crossplane-contrib-function-kcl\n    input:\n      apiVersion: krm.kcl.dev/v1alpha1\n      kind: KCLRun\n      spec:\n        source: |\n          oxr = option(\"params\").oxr\n\n          _metadata = lambda suffix: str, kind: str -> any {\n              {\n                  if suffix == \"\":\n                      name = oxr.spec.id\n                  else:\n                      name = oxr.spec.id + \"-\" + suffix\n                  annotations = {\n                      \"krm.kcl.dev/composition-resource-name\" = oxr.spec.id + \"-\" + kind + \"-\" + suffix\n                  }\n              }\n          }\n\n          schema repositoryFile:\n              _name: str\n              _file: str\n              _content: str\n              _branch: bool = True\n              apiVersion = \"repo.github.upbound.io/v1alpha1\"\n              kind = \"RepositoryFile\"\n              metadata = _metadata(_name, \"file\")\n              spec = {\n                  forProvider = {\n                      commitAuthor = \"Crossplane\"\n                      commitEmail = \"github-provider@crossplane.io\"\n                      commitMessage = \"Crossplane rocks [skip ci]\"\n                      content = _content\n                      file = _file\n                      repositorySelector.matchControllerRef = True\n                      if _branch:\n                          branch = \"init\"\n                  }\n              }\n\n          items = [\n              {\n                  apiVersion = \"repo.github.upbound.io/v1alpha1\"\n                  kind = \"Repository\"\n                  metadata = _metadata(\"\", \"repo\")\n                  spec = {\n                      forProvider = {\n                          name = oxr.spec.id\n                          if oxr.spec.parameters.public:\n                              visibility = \"public\"\n                          else:\n                              visibility = \"private\"\n                          hasIssues = True\n                      }\n                      managementPolicies: [\n                          \"Create\",\n                          \"Observe\",\n                          \"Update\",\n                          \"LateInitialize\",\n                      ]\n                  }\n              }\n              ...\n  - step: automatically-detect-ready-composed-resources\n    functionRef:\n      name: crossplane-contrib-function-auto-ready\n  writeConnectionSecretsToNamespace: crossplane-system\n```\n\n----------------------------------------\n\nTITLE: Listing Custom Resource Definitions by Group - kubectl/grep - Shell\nDESCRIPTION: This shell command lists all Custom Resource Definitions (CRDs) in the Kubernetes cluster and filters those containing the string 'devopstoolkit.live' using grep. The command expects both kubectl and grep to be installed and configured. Inputs are command line invocations; output is a filtered list of CRDs by name and creation timestamp. Limitation: Only shows CRDs related to 'devopstoolkit.live', doesn't validate or inspect their contents.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get crds | grep devopstoolkit.live\n```\n\n----------------------------------------\n\nTITLE: Setting Up an Okteto Dev Manifest for Go (YAML)\nDESCRIPTION: This Okteto YAML manifest configures the development environment for a Go application. It defines a container image with Go and 'air', file system syncing, volume usage, capabilities, and port forwarding. Dependencies: Okteto CLI, Docker image 'okteto/golang:1', and supporting tools. Input is the current directory; output is a configured and hot-reloading remote dev environment matching the manifest.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\ndev:\\n  silly-demo:\\n    image: okteto/golang:1\\n    command: air go run .\\n    sync:\\n      - .:/usr/src/app\\n    volumes:\\n      - /go\\n      - /root/.cache\\n    securityContext:\\n      capabilities:\\n        add:\\n          - SYS_PTRACE\\n    forward:\\n      - 8080:8080\n```\n\n----------------------------------------\n\nTITLE: Examining a Kubernetes CronJob YAML Definition\nDESCRIPTION: YAML manifest for a CronJob that runs every minute. CronJobs manage Jobs using a schedule and jobTemplate, combining periodic scheduling with one-time execution semantics.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_56\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: CronJob\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  schedule: \"*/1 * * * *\"\n  jobTemplate:\n    spec:\n      template:\n        metadata:\n          labels:\n            app.kubernetes.io/name: silly-demo\n        spec:\n          restartPolicy: OnFailure\n          containers:\n            - image: cgr.dev/chainguard/bash\n              name: silly-demo\n              command: [\"echo\", \"What is this?\"]\n```\n\n----------------------------------------\n\nTITLE: Building Backstage with Multi-stage Dockerfile\nDESCRIPTION: Multi-stage Dockerfile that builds Backstage in three stages: packages setup, build environment, and final production image. Includes dependency installation, compilation, and configuration setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:20-bookworm-slim AS packages\n\nWORKDIR /app\nARG SRC=backstage\nCOPY $SRC/package.json $SRC/yarn.lock ./\nCOPY $SRC/.yarn ./.yarn\nCOPY $SRC/.yarnrc.yml ./\nCOPY $SRC/packages packages\nRUN find packages \\! -name \"package.json\" -mindepth 2 -maxdepth 2 -exec rm -rf {} \\+\n\n\nFROM node:20-bookworm-slim AS build\n\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends python3 g++ build-essential && \\\n    rm -rf /var/lib/apt/lists/*\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends libsqlite3-dev\nUSER node\nWORKDIR /app\nCOPY --from=packages --chown=node:node /app .\nCOPY --from=packages --chown=node:node /app/.yarn ./.yarn\nCOPY --from=packages --chown=node:node /app/.yarnrc.yml  ./\nRUN --mount=type=cache,target=/home/node/.cache/yarn,sharing=locked,uid=1000,gid=1000 \\\n    yarn install --immutable\nARG SRC=backstage\nCOPY --chown=node:node $SRC/. .\nRUN yarn tsc\nRUN yarn --cwd packages/backend build\nRUN mkdir packages/backend/dist/skeleton packages/backend/dist/bundle \\\n    && tar xzf packages/backend/dist/skeleton.tar.gz -C packages/backend/dist/skeleton \\\n    && tar xzf packages/backend/dist/bundle.tar.gz -C packages/backend/dist/bundle\n\n\nFROM node:20-bookworm-slim\n\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends python3 g++ build-essential && \\\n    yarn config set python /usr/bin/python3\nRUN --mount=type=cache,target=/var/cache/apt,sharing=locked \\\n    --mount=type=cache,target=/var/lib/apt,sharing=locked \\\n    apt-get update && \\\n    apt-get install -y --no-install-recommends libsqlite3-dev\nUSER node\nWORKDIR /app\nCOPY --from=build --chown=node:node /app/.yarn ./.yarn\nCOPY --from=build --chown=node:node /app/.yarnrc.yml  ./\nCOPY --from=build --chown=node:node /app/yarn.lock /app/package.json /app/packages/backend/dist/skeleton/ ./\nRUN --mount=type=cache,target=/home/node/.cache/yarn,sharing=locked,uid=1000,gid=1000 \\\n    yarn workspaces focus --all --production && rm -rf \"$(yarn cache clean)\"\nCOPY --from=build --chown=node:node /app/packages/backend/dist/bundle/ ./\nCOPY --chown=node:node app-config*.yaml ./\nARG SRC=backstage\nCOPY --chown=node:node $SRC/examples ./examples\nENV NODE_ENV=production\nENV NODE_OPTIONS=\"--no-node-snapshot\"\nCMD [\"node\", \"packages/backend\", \"--config\", \"app-config.yaml\", \"--config\", \"app-config.ingress.yaml\", \"--config\", \"app-config.production.yaml\"]\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composition with Native Kubernetes Resources - YAML\nDESCRIPTION: Demonstrates an improved Crossplane Composition that defines native Kubernetes resources (Deployment, Service, Ingress) directly rather than wrapping them in Managed Resource Objects. Prerequisites: Crossplane with apiextensions, pipeline mode, and patching capability via patch-and-transform. It includes patchSets to map composite fields to resource fields and uses readinessChecks and resource patching for dynamic field injection. Inputs come from the composite resource spec, outputs are native Kubernetes objects. Limitation: remains YAML-based, potentially verbose, but avoids external cluster provider config requirements.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\\nkind: Composition\\nmetadata:\\n  name: app-frontend\\n  labels:\\n    type: frontend\\n    location: local\\nspec:\\n  compositeTypeRef:\\n    apiVersion: devopstoolkit.live/v1beta1\\n    kind: App\\n  mode: Pipeline\\n  pipeline:\\n    - step: patch-and-transform\\n      functionRef:\\n        name: crossplane-contrib-function-patch-and-transform\\n      input:\\n        apiVersion: pt.fn.crossplane.io/v1beta1\\n        kind: Resources\\n        patchSets:\\n          - name: name\\n            patches:\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: metadata.name\\n                toFieldPath: metadata.name\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: metadata.name\\n                toFieldPath: metadata.labels[\"app.kubernetes.io/name\"]\\n        resources:\\n          - name: deployment\\n            base:\\n              apiVersion: apps/v1\\n              kind: Deployment\\n              spec:\\n                template:\\n                  spec:\\n                    containers:\\n                      - name: main\\n                        livenessProbe:\\n                          httpGet:\\n                            path: \"/\"\\n                          failureThreshold: 10\\n                        readinessProbe:\\n                          httpGet:\\n                            path: \"/\"\\n                          failureThreshold: 10\\n                        resources:\\n                          limits:\\n                            memory: 1024Mi\\n                          requests:\\n                            cpu: 500m\\n                            memory: 512Mi\\n                        env:\\n                          - name: BACKEND_URL\\n            readinessChecks:\\n              - type: MatchCondition\\n                matchCondition:\\n                  type: Available\\n                  status: \"True\"\\n            patches:\\n              - type: PatchSet\\n                patchSetName: name\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: metadata.name\\n                toFieldPath: spec.selector.matchLabels[\"app.kubernetes.io/name\"]\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: metadata.name\\n                toFieldPath: spec.template.metadata.labels[\"app.kubernetes.io/name\"]\\n              - type: CombineFromComposite\\n                combine:\\n                  variables:\\n                    - fromFieldPath: spec.image\\n                    - fromFieldPath: spec.tag\\n                  strategy: string\\n                  string:\\n                    fmt: \"%s:%s\"\\n                toFieldPath: spec.template.spec.containers[0].image\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: spec.port\\n                toFieldPath: spec.template.spec.containers[0].livenessProbe.httpGet.port\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: spec.port\\n                toFieldPath: spec.template.spec.containers[0].readinessProbe.httpGet.port\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: spec.port\\n                toFieldPath: spec.template.spec.containers[0].ports[0].containerPort\\n              - type: FromCompositeFieldPath\\n                fromFieldPath: spec.frontend.backendUrl\\n                toFieldPath: spec.template.spec.containers[0].env[0].value\\n          - name: service\\n            base:\\n              apiVersion: v1\\n              kind: Service\\n              ...\\n          - name: ingress\\n            base:\\n              apiVersion: networking.k8s.io/v1\\n              kind: Ingress\\n              ...\n```\n\n----------------------------------------\n\nTITLE: Applying a Kubernetes Deployment Configuration (Shell)\nDESCRIPTION: This command applies a Kubernetes Deployment configuration defined in the `deployment/base.yaml` file to the 'a-team' namespace using `kubectl apply`. This creates or updates the Deployment resource in the cluster according to the manifest.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename deployment/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Pods in a Namespace - Shell\nDESCRIPTION: This command retrieves and lists all pods in the 'a-team' namespace using kubectl. The output provides a table view of pod status, readiness, restarts, and age. Requires kubectl and a running Kubernetes cluster with the specified namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Deployment Schema in KCL\nDESCRIPTION: This KCL code defines a schema named `Deployment` that inherits from `common.KubernetesObject`. It utilizes KCL's Kubernetes API schemas (`k8s.api.apps.v1`) to structure a Deployment manifest within a Crossplane context (`spec.forProvider.manifest`). Key features demonstrated include schema inheritance, internal variables (prefixed with `_`), default values, conditional logic (`if _dbEnabled`) for environment variables, string formatting (`format` function), and collection unioning for defining patches that modify the base manifest based on input parameters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: kcl\nCODE:\n```\nimport .common\nimport k8s.api.apps.v1 as k8sapps\n\nschema Deployment(common.KubernetesObject):\n    _dbEnabled: bool = False\n    _dbSecretName: str = \"spec.id\"\n    _providerConfigName: str = \"spec.id\"\n    _container = \"{}.template.spec.containers[0]\".format(common.ManifestSpec)\n    name = \"deployment\"\n    base = common.KubernetesObjectBase{\n        spec.forProvider.manifest = k8sapps.Deployment{\n            spec = {\n                selector = {}\n                template = {\n                    spec = {\n                        containers = [{\n                            name = \"backend\"\n                            ports = [{containerPort = 80 }]\n                            livenessProbe = {httpGet = {path = \"/\", port = 80 }}\n                            readinessProbe = {httpGet = {path = \"/\", port = 80 }}\n                            resources = {\n                                limits = {cpu = \"250m\", memory = \"256Mi\" }\n                                requests = {cpu = \"125m\", memory = \"128Mi\" }\n                            }\n                            if _dbEnabled:\n                                env = [\n                                    {name = \"DB_ENDPOINT\", valueFrom.secretKeyRef.key = \"endpoint\" },\n                                    {name = \"DB_PASSWORD\", valueFrom.secretKeyRef.key = \"password\" },\n                                    {name = \"DB_PORT\", valueFrom.secretKeyRef = {key = \"port\",  optional = True }},\n                                    {name = \"DB_USERNAME\",  valueFrom.secretKeyRef.key = \"username\" },\n                                    {name = \"DB_NAME\" },\n                                ]\n                        }]\n                    }\n                }\n            }\n        }\n    }\n    patches = common.Patches(\"deployment\") + [\n        {\n            fromFieldPath = \"spec.id\",\n            toFieldPath = \"{}.selector.matchLabels.app\".format(common.ManifestSpec)\n        }, {\n            fromFieldPath = \"spec.id\",\n            toFieldPath = \"{}.template.metadata.labels.app\".format(common.ManifestSpec)\n        }, {\n            fromFieldPath = \"spec.parameters.image\",\n            toFieldPath = \"{}.image\".format(_container)\n        }, {\n            fromFieldPath = \"spec.parameters.port\",\n            toFieldPath = \"{}.ports[0].containerPort\".format(_container)\n        }, {\n            fromFieldPath = \"spec.parameters.port\",\n            toFieldPath = \"{}.livenessProbe.httpGet.port\".format(_container)\n        }, {\n            fromFieldPath = \"spec.parameters.port\",\n            toFieldPath = \"{}.readinessProbe.httpGet.port\".format(_container)\n        },\n        if _dbEnabled:\n            {\n                fromFieldPath = _dbSecretName,\n                toFieldPath = \"{}.env[0].valueFrom.secretKeyRef.name\".format(_container)\n            }, {\n                fromFieldPath = _dbSecretName,\n                toFieldPath = \"{}.env[1].valueFrom.secretKeyRef.name\".format(_container)\n            }, {\n                fromFieldPath = _dbSecretName,\n                toFieldPath = \"{}.env[2].valueFrom.secretKeyRef.name\".format(_container)\n            },\n            {\n                fromFieldPath = _dbSecretName,\n                toFieldPath = \"{}.env[3].valueFrom.secretKeyRef.name\".format(_container)\n            }, {\n                fromFieldPath = _dbSecretName,\n                toFieldPath = \"{}.env[4].value\".format(_container)\n            },\n        {\n            fromFieldPath = _providerConfigName,\n            toFieldPath = \"spec.providerConfigRef.name\"\n        },\n    ]\n```\n\n----------------------------------------\n\nTITLE: Backstage Template Definition\nDESCRIPTION: Template configuration for Backstage that defines form parameters and workflow steps for creating and managing GitHub repositories through a user interface.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\nmetadata:\n  name: dot-github-template-devopsparadox\n  title: dot-github-template-devopsparadox\n  description: Create and Manage GitHub repositories\nspec:\n  owner: devopsparadox/crossplane-gh\n  type: service\n  parameters:\n    - title: Service Definition\n      required:\n        - name\n      properties:\n        name:\n          type: string\n        public:\n          type: string\n          default: \"true\"\n          enum: [\"true\", \"false\"]\n        registry:\n          type: string\n          default: ttl.sh\n        app:\n          type: object\n          properties:\n            language:\n              type: string\n              default: go\n              enum: [\"go\", \"js\"]\n            host:\n              type: string\n              default: my-repo.acme.com\n            namespace:\n              type: string\n              default: a-team\n        db:\n          type: object\n          properties:\n            enabled:\n              type: string\n              default: \"true\"\n              enum: [\"true\", \"false\"]\n            provider:\n              type: string\n              default: aws\n              enum: [\"aws\", \"azure\", \"google\"]\n            version:\n              type: string\n              default: \"16.2\"\n        repo:\n          type: object\n          properties:\n            user:\n              type: string\n              default: devopsparadox\n        gitops:\n          type: object\n          properties:\n            enabled:\n              type: string\n              default: \"true\"\n              pattern: '^(true|false)*$'\n            user:\n              type: string\n              default: devopsparadox\n            repo:\n              type: string\n              default: crossplane-gh\n  steps:\n    - id: log-message\n      name: Log Message\n      action: debug:log\n      input:\n        message: 'Hello, ${{ parameters.gitops.user }}/${{ parameters.gitops.repo }}!'\n    - id: fetch-template\n      action: fetch:template\n      name: Generate manifest\n      input:\n        url: ./backstage-templates\n        targetPath: ./git-repos\n        values:\n          name: ${{ parameters.name }}\n          public: ${{ parameters.public }}\n          registry: ${{ parameters.registry }}\n          app:\n            language: ${{ parameters.app.language }}\n            host: ${{ parameters.app.host }}\n            namespace: ${{ parameters.app.namespace }}\n          db:\n            enabled: ${{ parameters.db.enabled }}\n            provider: ${{ parameters.db.provider }}\n            version: ${{ parameters.db.version }}\n          repo:\n            user: ${{ parameters.repo.user }}\n          gitops:\n            enabled: ${{ parameters.gitops.enabled }}\n            user: ${{ parameters.gitops.user }}\n            repo: ${{ parameters.gitops.repo }}\n    - id: rename-manifest\n      action: fs:rename\n      name: Rename files\n      input:\n        files:\n          - from: ./git-repos/manifest.yaml\n            to: ./git-repos/${{ parameters.name }}.yaml\n    - id: create-pull-request\n      action: publish:github:pull-request\n      name: Create a pull request\n      input:\n        repoUrl: github.com?repo=${{ parameters.gitops.repo }}&owner=${{ parameters.gitops.user }}\n        branchName: init-${{ parameters.name }}\n        title: \"Init: ${{ parameters.name }} app manifest\"\n        description: This pull request creates or updates the ${{ parameters.name }} app manifest [skip ci]\n```\n\n----------------------------------------\n\nTITLE: Pod Manifest with Container, Resource Limits, and Probe - Kubernetes YAML\nDESCRIPTION: This snippet is a Kubernetes Pod manifest defining a single-container Pod. The manifest specifies an application container image ('ghcr.io/vfarcic/silly-demo:1.4.115'), container port (8080), readiness probe for HTTP checks, and CPU/memory resource requests and limits. It is intended to be applied to a Kubernetes cluster using kubectl, and results in a running Pod named 'silly-demo' under specified constraints and readiness conditions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: Pod\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  containers:\n    - image: ghcr.io/vfarcic/silly-demo:1.4.115\n      name: silly-demo\n      ports:\n        - containerPort: 8080    \n      readinessProbe:\n        httpGet:\n          path: /\n          port: 8080\n      resources:\n        limits:\n          cpu: 250m\n          memory: 256Mi\n        requests:\n          cpu: 125m\n          memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Pod Specification Output Snippet (Updated Version) - Kubernetes YAML\nDESCRIPTION: Shows a Pod YAML output after template update and Pod recreation, reflecting the new image version. This outcome demonstrates how ReplicaSet only applies template updates to new Pods, not existing ones. Obtained after deleting Pods and rechecking YAML.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  - apiVersion: v1\n    kind: Pod\n    ...\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.116\n          ...\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kubernetes Demo Environment\nDESCRIPTION: Shell commands to clone and set up a Kubernetes demo environment for scaling examples. Includes repository setup, checking out specific branch, and running setup scripts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kubernetes-demo\n\ncd kubernetes-demo\n\ngit pull\n\ngit checkout scale --\n```\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nchmod +x setup/scale.sh\n\n./setup/scale.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Cluster and Namespace with KinD - Shell\nDESCRIPTION: This snippet shows how to launch a Devbox shell, create a Kubernetes cluster using KinD (Kubernetes in Docker) with a specific configuration file, and create a new namespace named 'a-team'. Dependencies include Devbox, KinD, and kubectl, all of which should be installed (either manually or via Devbox) and Docker running. The expected effect is a local KinD cluster with a configured namespace ready for workload deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nkind create cluster --config kind.yaml\n\nkubectl create namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Deleting a Pod from a ReplicaSet - Shell with kubectl\nDESCRIPTION: Deletes a specific Pod in a namespace using 'kubectl delete pod'. This demonstrates ReplicaSet self-healing behavior by removing a managed Pod, causing automatic replacement by the ReplicaSet controller. Inputs are namespace and Pod name; output is a Pod deletion event, followed by creation of a new Pod.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team delete pod [...]\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Platform CLI Commands\nDESCRIPTION: Shell command to display the help information for the custom 'platform' CLI, showing all available subcommands and options.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nplatform --help\n```\n\n----------------------------------------\n\nTITLE: Viewing Traefik Services in Kubernetes\nDESCRIPTION: This command lists the services in the 'traefik' namespace, showing the LoadBalancer service created by Traefik.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace traefik get services\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Ingress Resource YAML\nDESCRIPTION: This YAML defines an Ingress resource for the 'silly-demo' service, using Traefik as the Ingress class and specifying routing rules.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ingressClassName: traefik\n  rules:\n    - host: silly-demo.35.185.11.184.nip.io\n      http:\n        paths:\n          - backend:\n              service:\n                name: silly-demo\n                port:\n                  number: 8080\n            path: /\n            pathType: ImplementationSpecific\n```\n\n----------------------------------------\n\nTITLE: Querying Deployments Across All Clusters with Clusterpedia\nDESCRIPTION: Example command showing how to use kubectl with Clusterpedia to retrieve deployments from all namespaces across all connected clusters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia get deployments --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Defining a StatefulSet in Kubernetes YAML\nDESCRIPTION: This YAML defines a StatefulSet named 'silly-demo' with 2 replicas. It includes container specifications, resource limits, and a volumeClaimTemplate for persistent storage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: StatefulSet\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  replicas: 2\n  minReadySeconds: 10\n  updateStrategy:\n    rollingUpdate:\n      maxUnavailable: 1\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.117\n          name: silly-demo\n          ports:\n            - containerPort: 8080    \n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8080\n          resources:\n            limits:\n              cpu: 250m\n              memory: 256Mi\n            requests:\n              cpu: 125m\n              memory: 128Mi\n          volumeMounts:\n          - mountPath: /cache\n            name: silly-claim\n  volumeClaimTemplates:\n    - apiVersion: v1\n      kind: PersistentVolumeClaim\n      metadata:\n        name: silly-claim\n      spec:\n        accessModes:\n          - ReadWriteOnce\n        resources:\n          requests:\n            storage: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Setting up NATS Demo Environment in Kubernetes\nDESCRIPTION: Instructions for cloning the demo repository, creating a KinD cluster, installing NATS using Helm, and setting up the required Kubernetes resources for the demo application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/vfarcic/nats-demo\n\ncd nats-demo\n```\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n\nkind create cluster --config kind.yaml\n\nkubectl apply \\\n    --filename https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n\nhelm upgrade --install nats nats \\\n    --repo https://nats-io.github.io/k8s/helm/charts \\\n    --namespace nats --create-namespace --wait\n\nkubectl create namespace a-team\n\nkubectl apply --filename app.yaml\n\nkubectl --namespace nats exec -it deployment/nats-box \\\n    -- sh\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team logs \\\n    --selector app.kubernetes.io/name=silly-demo \\\n    --follow\n```\n\n----------------------------------------\n\nTITLE: Authenticating and Initializing Project in Google Cloud GKE - Shell\nDESCRIPTION: Performs authentication with Google Cloud, sets necessary environment variables for GKE authentication, creates a new project with a unique name using the current timestamp, and prints the URL for enabling Kubernetes API in Google Cloud Console. Requires Google Cloud CLI ('gcloud') to be installed and accessible. Creates a project and outputs a link to enable required GKE services.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngcloud auth login\n\nexport USE_GKE_GCLOUD_AUTH_PLUGIN=True\n\nexport PROJECT_ID=dot-$(date +%Y%m%d%H%M%S)\n\ngcloud projects create $PROJECT_ID\n\necho \"https://console.cloud.google.com/marketplace/product/google/container.googleapis.com?project=$PROJECT_ID\"\n```\n\n----------------------------------------\n\nTITLE: Applying a Kubernetes Job\nDESCRIPTION: Command to apply a Job manifest to the Kubernetes cluster in the a-team namespace, which will execute a one-time task.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename job/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating and Monitoring a StatefulSet in Kubernetes\nDESCRIPTION: This shell command applies an updated StatefulSet configuration and monitors the changes using the 'tree' command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename statefulset/replicas.yaml \\\n    && viddy kubectl tree --namespace a-team \\\n    statefulset silly-demo\n```\n\n----------------------------------------\n\nTITLE: Listing Pods in a Specific Namespace - Shell\nDESCRIPTION: Uses kubectl to list all Pods in the 'a-team' namespace. No extra dependencies beyond a functioning kubeconfig and access to the requested cluster. Returns a table with Pod names, statuses, and ages; useful for verifying deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Defining Parameterized Kubernetes GitHubClaim Manifest Template in YAML\nDESCRIPTION: This YAML snippet defines a Kubernetes Custom Resource manifest template for a `GitHubClaim` (API version `devopstoolkitseries.com/v1alpha1`). It utilizes Backstage's templating syntax (`${{ values.* }}`) to parameterize various fields like `metadata.name` and `spec` parameters based on user input gathered through the Roadie UI. This template is processed by Backstage to create a concrete manifest file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: GitHubClaim\nmetadata:\n  name: ${{ values.name }}\nspec:\n  id: ${{ values.name }}\n  parameters:\n    public: ${{ values.public }}\n    registry: ${{ values.registry }}\n    app:\n      language: ${{ values.app.language }}\n      host: ${{ values.app.host }}\n      namespace: ${{ values.app.namespace }}\n    db:\n      enabled: ${{ values.db.enabled }}\n      provider: ${{ values.db.provider }}\n      version: \"${{ values.db.version }}\"\n    repo:\n      user: ${{ values.repo.user }}\n    gitops:\n      enabled: ${{ values.gitops.enabled }}\n      user: ${{ values.gitops.user }}\n      repo: ${{ values.gitops.repo }}\n    backstage:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Defining CompositeResourceDefinition with Crossplane - YAML\nDESCRIPTION: This YAML file defines a Crossplane CompositeResourceDefinition (CRD) named apps.devopstoolkit.live for Kubernetes. It specifies the schema for a custom resource called App, including detailed properties, validation, required fields, status fields, and additional printer columns. The definition is intended for use with Crossplane and must be applied to a Kubernetes cluster with Crossplane installed; inputs are YAML specification, and outputs are new Kubernetes API endpoints. Limitations: By itself, only describes the API schema; actual logic requires controllers.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: apps.devopstoolkit.live\nspec:\n  defaultCompositionRef:\n    name: app-backend\n  group: devopstoolkit.live\n  names:\n    kind: App\n    plural: apps\n  claimNames:\n    kind: AppClaim\n    plural: appclaims\n  versions:\n  - name: v1alpha1\n    served: true\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        type: object\n        properties:\n          spec:\n            type: object\n            properties:\n              id:\n                type: string\n                description: ID of this application that other objects will use to refer to it.\n              parameters:\n                type: object\n                properties:\n                  namespace:\n                    description: The namespace\n                    type: string\n                    default: production\n                  image:\n                    description: The container image (e.g., `ghcr.io/vfarcic/silly-demo`)\n                    type: string\n                  tag:\n                    description: The tag of the image (e.g., `1.2.3`)\n                    type: string\n                  port:\n                    description: The application port\n                    type: integer\n                    default: 80\n                  host:\n                    description: The host address of the application\n                    type: string\n                    default: devopstoolkit.live\n                  ingressClassName:\n                    description: The Ingress class name\n                    type: string\n                  db:\n                    type: object\n                    properties:\n                      secret:\n                        description: The name of the Secret with DB authentication.\n                        type: string\n                  scaling:\n                    type: object\n                    properties:\n                      enabled:\n                        description: Whether to enable scaling\n                        type: boolean\n                        default: false\n                      min:\n                        description: Minimum number of replicas\n                        type: integer\n                        default: 1\n                      max:\n                        description: Maximum number of replicas\n                        type: integer\n                        default: 10\n                  repository:\n                    type: object\n                    properties:\n                      enabled:\n                        description: Whether to enable a repository\n                        type: boolean\n                        default: false\n                      name:\n                        description: The name of the repository\n                        type: string\n                  ci:\n                    type: object\n                    properties:\n                      enabled:\n                        description: Whether to enable CI. If enabled, the repository must be enabled as well.\n                        type: boolean\n                        default: false\n                      runTests:\n                        description: Whether to run tests\n                        type: boolean\n                        default: true\n                      buildImages:\n                        description: Whether to build container images\n                        type: boolean\n                        default: true\n                  kubernetesProviderConfigName:\n                    description: The name of the Kubernetes provider config (used only with compositions with the label location=remote).\n                    type: string\n                    default: default\n                required:\n                - namespace\n                - image\n                - tag\n            required:\n            - id\n            - parameters\n          status:\n            type: object\n            properties:\n              host:\n                description: The host address of the application\n                type: string\n    additionalPrinterColumns:\n    - name: host\n      type: string\n      jsonPath: \".status.host\"\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment and Service for a Demo Application\nDESCRIPTION: This YAML snippet defines a Kubernetes Deployment and Service for a demo application called 'silly-demo'. The Deployment doesn't specify resource requests or limits, which is the setup for demonstrating VPA.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.123\n          name: silly-demo\n          env:\n            - name: MEMORY_LEAK_MAX_MEMORY\n              value: \"512\"\n            - name: MEMORY_LEAK_FREQUENCY\n              value: \"1\"\n          ports:\n            - containerPort: 8080    \n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8080\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ports:\n  - name: http\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: silly-demo\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Resources\nDESCRIPTION: Retrieves and displays all Kubernetes resources in the specified namespace to verify the deployment status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Applying and Retrieving LoadBalancer Service in Kubernetes\nDESCRIPTION: These commands apply the LoadBalancer Service configuration and retrieve the list of services in the specified namespace, showing the external IP of the load balancer.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename service/load-balancer.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get services\n```\n\n----------------------------------------\n\nTITLE: Configuring Backstage Catalog and Provider Settings\nDESCRIPTION: YAML configuration for Backstage catalog settings including GitHub provider integration, template discovery, and Kubernetes cluster configuration. Defines catalog paths, scheduling, and permission settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\ncatalogInfo:\n  organization: ${GITHUB_USER}\n  catalogPath: /catalog-info.yaml\n  filters:\n    branch: main\n    repository: backstage-demo\n  schedule:\n    frequency: {minutes: 30}\n    timeout: {minutes: 3}\ntemplates:\n  organization: ${GITHUB_USER}\n  catalogPath: /backstage-template.yaml\n  filters:\n    branch: main\n    repository: backstage-demo\n  schedule:\n    frequency: {minutes: 30}\n    timeout: {minutes: 3}\nkubernetes:\n  serviceLocatorMethod:\n    type: 'multiTenant'\n  clusterLocatorMethods:\n    - type: 'config'\n      clusters: []\npermission:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Applying PVC Manifest Relying on Default Storage Class\nDESCRIPTION: This command applies the Persistent Volume Claim definition from the specified YAML file (which omits storageClassName) to the 'a-team' namespace. Kubernetes will use the default Storage Class to fulfill this claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename volume/persistent-volume-claim-default.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Watch Task in Taskfile.yaml (YAML)\nDESCRIPTION: This YAML snippet defines a `test-watch` task for the `task` runner. It specifies dependencies (`package-generate`, `package-apply`), the command to run tests (`kubectl kuttl test`), and enables watch mode (`watch: true`). The `sources` and `generates` fields list files and directories to monitor; changes trigger re-execution of dependencies and commands. It relies on `task`, `kubectl`, `kuttl`, and the tools/tasks specified in `deps`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\ndesc: Runs tests assuming that the cluster is already created and everything is installed.\ndeps:\n  - package-generate\n  - package-apply\ncmds:\n  - kubectl kuttl test\nwatch: true\nsources:\n  - timoni/**/*.cue\n  - tests/**/*.yaml\ngenerates:\n  - package/all.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kyverno Chainsaw Testing Environment\nDESCRIPTION: Initial setup commands for cloning the example repository, switching to the correct branch, and creating a test cluster. Requires Docker to be running and assumes Devbox is installed for development environment setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-sql\n\ncd crossplane-sql\n\ngit pull\n\ngit checkout chainsaw\n```\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n\ntask cluster-create\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Environment for Testing\nDESCRIPTION: Series of commands to set up a KinD Kubernetes cluster with Nginx ingress and prepare it for deploying the demo application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nzellij --session dot --layout zellij.kdl\n\nkind create cluster --config kind.yaml\n\nkubectl apply \\\n    --filename https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n\nkubectl create namespace a-team\n\nyq --inplace \".values.ingress.className = \\\"nginx\\\"\" timoni/values.yaml\n\nyq --inplace \".values.ingress.host = \\\"silly-demo.127.0.0.1.nip.io\\\"\" \\\n    timoni/values.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Workloads and Resources - Shell\nDESCRIPTION: This shell snippet uses kubectl to list a comprehensive set of Kubernetes resources from a specified namespace in a cluster referenced by a custom kubeconfig. It queries core resources (Pods, Services, Deployments, etc.), Ingresses, PersistentVolumes, CNPG clusters, and Atlas schemas. Required prerequisites include access rights to the namespace, installation of any CRDs for clusters/atlasschemas, and a functioning cluster context.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml --namespace a-team \\\n    get all,ingresses,persistentvolumes,clusters,atlasschemas\n```\n\n----------------------------------------\n\nTITLE: Configuring Backstage with Plugins\nDESCRIPTION: Nushell script for configuring Backstage, installing required plugins, updating configuration files, and setting up necessary backend components. Includes TypeScript modifications and environment configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: nushell\nCODE:\n```\ndef --env \"main configure backstage\" [] {\n    print $\"\nWhen asked for a name for the Backstage app make sure to keep the default value (ansi yellow_bold)backstage(ansi reset)\nPress any key to continue.\n\"\n    input\n    npx @backstage/create-app@latest\n    cd backstage\n    for package in [\n        \"@terasky/backstage-plugin-crossplane-common@1.0.1\",\n        \"@terasky/backstage-plugin-crossplane-permissions-backend@1.0.1\",\n        \"@terasky/backstage-plugin-kubernetes-ingestor@1.2.0\",\n        \"@terasky/backstage-plugin-scaffolder-backend-module-terasky-utils@1.0.1\"\n    ] {\n        yarn --cwd packages/backend add $package\n    }\n    for package in [\n        @terasky/backstage-plugin-crossplane-resources-frontend@1.1.0\n    ] {\n        yarn --cwd packages/app add $package\n    }\n    # ... [Configuration file modifications truncated for brevity]\n}\n```\n\n----------------------------------------\n\nTITLE: KubeVela Application YAML Definition\nDESCRIPTION: Sample YAML definition for a KubeVela application that uses the custom 'app-backend' component type and applies the 'scaler' trait for horizontal scaling.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: silly-demo\nspec:\n  components:\n  - name: silly-demo\n    type: app-backend\n    properties:\n      image: ghcr.io/vfarcic/silly-demo\n      tag: 1.4.343\n      port: 8080\n      host: silly-demo.127.0.0.1.nip.io\n      ingressClassName: nginx\n    traits:\n    - type: scaler\n      properties:\n        min: 2\n        max: 5\n  policies:\n  ...\n  workflow:\n    ...\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Secret and Deployment YAML Definition\nDESCRIPTION: This YAML defines a Kubernetes Secret with base64 encoded data and a Deployment that mounts the Secret as a volume. It demonstrates how to structure a Secret and use it in a Deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\ndata:\n  videos.yaml: LSBpZDogIjEiCiAgdGl0bGU6IHNvbWV0aGluZwotIGlkOiAiMiIKICB0aXRsZTogZWxzZQotIGlkOiAiMyIKICB0aXRsZTogc29tZXRoaW5nIG5ldwo=\n  message: SGVsbG8sIERldk9wcyBUb29sa2l0IQo=\n  silly: ZGVtbwo=\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: silly-demo\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine\n          ...\n          volumeMounts:\n            - name: cache\n              mountPath: /cache\n      volumes:\n        - name: cache\n          secret:\n            secretName: silly-demo\n```\n\n----------------------------------------\n\nTITLE: Upgrading or Installing Helm Chart from OCI Registry - Shell\nDESCRIPTION: This snippet installs or upgrades a Helm release ('backstage') from an OCI-compliant registry, using a specific version and custom mode. It needs Helm v3 with OCI support, correct authentication to ghcr.io, and a populated GITHUB_USER environment variable. Parameters: chart location, release name, version, namespace, and values override. Output is a deployed or upgraded application in the specified namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install backstage \\\n    oci://ghcr.io/$GITHUB_USER/backstage-demo/backstage-demo \\\n    --version $TAG --namespace backstage --set mode=production \\\n    --wait\n```\n\n----------------------------------------\n\nTITLE: Running a Temporary Curl Pod (Shell)\nDESCRIPTION: This command uses 'kubectl run' to create a temporary, interactive Pod named 'curl' in the 'a-team' namespace using the 'curlimages/curl:8.7.1' image. The '--rm' flag ensures the Pod is deleted upon exit. It provides a shell ('sh') inside the cluster to test network connectivity to the service.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team run curl \\\n    --image curlimages/curl:8.7.1 --stdin --tty --rm \\\n    -- sh\n```\n\n----------------------------------------\n\nTITLE: Listing Pods for Scaled Application - Shell\nDESCRIPTION: Lists all pods in the 'a-team' namespace using kubectl, providing visibility into pod status, restarts, and age after scaling events. Requires appropriate RBAC permissions and configured KUBECONFIG. Helps users understand scheduling and capacity challenges during scale-out.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Simple HTTP Handler in Go using Spin SDK\nDESCRIPTION: This Go code defines a basic HTTP handler using the Fermyon Spin Go SDK (`spinhttp`). It initializes a handler that responds to any request with a plain text message \"This is a silly demo running as WASM!\" and logs the same message to standard error. The `main` function is empty as Spin handles the execution entry point.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n        \"fmt\"\n        \"log\"\n        \"net/http\"\n        \"os\"\n\n        spinhttp \"github.com/fermyon/spin/sdk/go/v2/http\"\n)\n\nfunc init() {\n        spinhttp.Handle(func(w http.ResponseWriter, r *http.Request) {\n                w.Header().Set(\"Content-Type\", \"text/plain\")\n                fmt.Fprintln(w, \"This is a silly demo running as WASM!\")\n                logger := log.New(os.Stderr, \"\", log.LstdFlags)\n                logger.Println(\"This is a silly demo running as WASM!\")\n        })\n}\n\nfunc main() {}\n```\n\n----------------------------------------\n\nTITLE: Retrieving PVCs and PVs After Using Default Storage Class\nDESCRIPTION: This command retrieves both Persistent Volume Claims and Persistent Volumes within the 'a-team' namespace. It's used to verify the status after applying a PVC that uses the default Storage Class and attaching it to a Deployment (implied).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team \\\n    get persistentvolumeclaims,persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Database Component Configuration in CUE\nDESCRIPTION: CUE configuration defining a database component that creates Google Cloud database resources using Crossplane managed resources, including DatabaseInstance, User, and Secret configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: cue\nCODE:\n```\nname:   context.name + \"-\" + context.namespace\nlabels: \"app.kubernetes.io/name\": context.name\n}\nuser: {\n    apiVersion: \"sql.gcp.upbound.io/v1beta1\"\n    kind:       \"User\"\n    metadata:   #Metadata\n    spec: {\n        deletionPolicy: \"Orphan\"\n        forProvider: {\n        passwordSecretRef: {\n            name:      context.name + \"-password\"\n            namespace: context.namespace\n            key:       \"password\"\n        }\n        instanceRef: name: context.name + \"-\" + context.namespace\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Kubernetes Demo Project\nDESCRIPTION: Commands to clone the Kubernetes demo repository, navigate to the correct directory, and set up the environment using Devbox and Nushell.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kubernetes-demo\n\ncd kubernetes-demo\n\ngit pull\n\ngit checkout volumes\n\ndevbox shell\n\nchmod +x setup/volume.nu\n\n./setup/volume.nu\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Deployment with emptyDir Volume\nDESCRIPTION: YAML configuration for a Kubernetes Deployment that uses an emptyDir volume. It demonstrates how to define and mount an ephemeral volume in a Pod.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine\n          name: silly-demo\n          ports:\n            - containerPort: 8080    \n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8080\n          env:\n            - name: DB\n              value: fs\n          volumeMounts:\n            - mountPath: /cache\n              name: silly-cache\n      volumes:\n        - name: silly-cache\n          emptyDir: {}\n```\n\n----------------------------------------\n\nTITLE: KEDA ScaledObject Configuration\nDESCRIPTION: YAML configuration for KEDA scaled object defining Prometheus-based scaling trigger with memory threshold.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: keda.sh/v1alpha1\nkind: ScaledObject\n...\nspec:\n  ...\n  triggers:\n    - type: prometheus\n      metadata:\n        serverAddress: http://prometheus-server.monitoring:80\n        threshold: \"2000000000\"\n        query: avg(container_memory_usage_bytes{namespace=\"a-team\", container=\"silly-demo\"})\n```\n\n----------------------------------------\n\nTITLE: Defining Application Policies and Workflow with KubeVela YAML\nDESCRIPTION: This YAML manifest defines a KubeVela Application resource with multiple policies and a workflow. The policies include 'topology' and 'override' types to set environment namespaces, hostnames, component parameters, and trait overrides for dev and prod environments. The 'workflow' section orchestrates deployment in multiple steps, applying policies per environment and introducing a manual promotion step. Dependencies include a KubeVela-compatible cluster and the relevant components/traits referenced in the policy entries. Key parameters are the individual policy definitions and the workflow step names, which determine how the application is customized and deployed across environments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.oam.dev/v1beta1\\nkind: Application\\nmetadata:\\n  name: silly-demo\\nspec:\\n  ...\\n  policies:\\n  - name: target-dev\\n    type: topology\\n    properties:\\n      namespace: dev\\n  - name: host-dev\\n    type: override\\n    properties:\\n      components:\\n      - type: app-backend\\n        properties:\\n          host: dev.silly-demo.127.0.0.1.nip.io\\n  - name: target-prod\\n    type: topology\\n    properties:\\n      namespace: prod\\n  - name: scaler-dev\\n    type: override\\n    properties:\\n      components:\\n      - type: app-backend\\n        traits:\\n        - type: scaler\\n          properties:\\n            min: 1\\n  - name: db-prod\\n    type: override\\n    properties:\\n      components:\\n      - type: app-backend\\n        properties:\\n          db:\\n            secret: silly-demo-db\\n  workflow:\\n    steps:\\n    - name: deploy-to-dev\\n      type: deploy\\n      properties:\\n        policies:\\n        - target-dev\\n        - host-dev\\n        - scaler-dev\\n    - name: promotion\\n      type: suspend\\n    - name: deploy-to-prod\\n      type: deploy\\n      properties:\\n        policies:\\n        - target-prod\\n        - db-prod\n```\n\n----------------------------------------\n\nTITLE: Checking Kubeconfig Clusters After Update (Shell)\nDESCRIPTION: This command lists the cluster names defined in the kubeconfig file after executing the Clusterpedia update script. The output shows the original management cluster (`dot-00`), the newly added managed clusters (`dot-01`, `dot-02`, `dot-03`), and a special `clusterpedia` cluster entry created by the script.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl config get-clusters\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME\nclusterpedia\ndot-00\ndot-01\ndot-02\ndot-03\n```\n\n----------------------------------------\n\nTITLE: Examining the WebAssembly RuntimeClass Manifest\nDESCRIPTION: Displaying the RuntimeClass manifest that defines how Kubernetes will handle WebAssembly workloads using the Spin runtime.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat spin.yaml\n```\n\n----------------------------------------\n\nTITLE: Running Platform Setup Script and Sourcing Environment Variables\nDESCRIPTION: Commands to make the platform script executable, run the setup script to configure all components, and load environment variables from the .env file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x platform\n\nplatform setup all\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Defining a LoadBalancer Service in Kubernetes YAML\nDESCRIPTION: This YAML defines a Kubernetes Service of type LoadBalancer, which creates an external load balancer to distribute traffic to the application pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ports:\n  - name: http\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: silly-demo\n  type: LoadBalancer\n```\n\n----------------------------------------\n\nTITLE: Defining CI/CD Pipeline with GitHub Actions Workflow in YAML\nDESCRIPTION: Specifies a GitHub Actions workflow for building, testing, and publishing with Task and related tools. The pipeline triggers on pushes to 'main', checks out code, installs required CLI tools (Timoni, Task, kuttl, up), executes test and publish tasks via Taskfile, and commits/pushes changes. Environment variables, GitHub secrets, and permissions are configured as needed. Dependencies include GitHub Actions runners, referenced actions, and pre-existing Taskfile tasks ('test' and 'package-publish'). Inputs are triggered by repository events; outputs are build artifacts and published packages. Constraints: follows GitHub Actions YAML schema, requires correct secrets setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nname: build11\non:\n  push:\n    branches:\n      - main\njobs:\n  build-package:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n      - name: Setup Timoni\n        uses: stefanprodan/timoni/actions/setup@main\n      - name: Setup Task\n        uses: arduino/setup-task@v1\n      - name: Setup kuttl\n        run: |\n          (\n            set -x; cd \"$(mktemp -d)\" &&\n            OS=\"$(uname | tr '[:upper:]' '[:lower:]')\" &&\n            ARCH=\"$(uname -m | sed -e 's/x86_64/amd64/' -e 's/\\(arm\\)\\(64\\)\\?.*/\\1\\2/' -e 's/aarch64$/arm64/')\" &&\n            KREW=\"krew-${OS}_${ARCH}\" &&\n            curl -fsSLO \"https://github.com/kubernetes-sigs/krew/releases/latest/download/${KREW}.tar.gz\" &&\n            tar zxvf \"${KREW}.tar.gz\" &&\n            ./\"${KREW}\" install krew\n          )\n          export PATH=\"${KREW_ROOT:-$HOME/.krew}/bin:$PATH\"\n          kubectl krew install kuttl\n          echo \"PATH=$PATH\" >> \"$GITHUB_ENV\"\n      - name: Setup up\n        run: |\n          curl -sL https://cli.upbound.io | sh\n          mv up /usr/local/bin/\n      - name: Test\n        run: task test\n      - name: Publish\n        run: task package-publish\n        env:\n          UP_ACCOUNT: ${{ secrets.UP_ACCOUNT }}\n          UP_TOKEN: ${{ secrets.UP_TOKEN }}\n          VERSION: v0.11.${{ github.run_number }}\n      - name: Commit changes\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Config update [skip ci]\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.CROSSPLANE_TOKEN }}\n          branch: ${{ github.ref }}\n\n```\n\n----------------------------------------\n\nTITLE: Defining WebAssembly Kubernetes Deployment Manifest\nDESCRIPTION: A Kubernetes manifest defining a Deployment that runs a WebAssembly application instead of a container, using the 'wasmtime-spin-v2' runtime class to specify that this deployment should use WASM.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1                                                  \nkind: Deployment\nmetadata:\n  name: silly-demo\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      runtimeClassName: wasmtime-spin-v2\n      containers:\n      - name: main\n        image: ttl.sh/kwasm-demo:v0.0.1\n        command: [\"/\"]\n---\napiVersion: v1\nkind: Service\n...\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\n...\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\n...\n```\n\n----------------------------------------\n\nTITLE: Defining a PVC Using the Default Storage Class\nDESCRIPTION: This truncated YAML manifest defines a PersistentVolumeClaim named 'silly-demo'. It requests 1Gi storage with 'ReadWriteOnce' access but notably omits the 'storageClassName', instructing Kubernetes to use the cluster's default Storage Class.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  resources:\n    requests:\n      storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n...\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Manifests for WASM Deployment\nDESCRIPTION: This YAML configuration defines standard Kubernetes resources (Deployment, Service, Ingress, HorizontalPodAutoscaler) to run the application. The key modification for running WASM is the `runtimeClassName: wasmtime-spin-v2` field within the Deployment's Pod template spec, instructing Kubernetes to use a specific WASM runtime instead of the default container runtime. The Deployment references the OCI image containing the WASM module.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1                                                  \nkind: Deployment\nmetadata:\n  name: silly-demo\nspec:\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      runtimeClassName: wasmtime-spin-v2\n      containers:\n      - name: main\n        image: ttl.sh/kwasm-demo:v0.0.1\n        command: [\"/\"]\n---\napiVersion: v1\nkind: Service\n...\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\n...\n---\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\n...\n```\n\n----------------------------------------\n\nTITLE: Complex Task Definition with Variables and Dependencies\nDESCRIPTION: The extracted YAML definition of the cluster-create task showing variables, dependencies, and complex command structures including loops.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndesc: Creates a kind cluster, installs Crossplane, providers, and packages, waits until they are healthy, and runs tests.\nvars:\n  TIMEOUT: 300s\n  PROVIDERS:\n    sh: ls -1 providers | grep -v config\ndeps:\n  - package-generate\n  - cluster-create-kind\n  - helm-repo\ncmds:\n  - helm upgrade --install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace --wait\n  - for: {var: PROVIDERS}\n    cmd: kubectl apply --filename providers/{{ .ITEM }}\n  - task: package-apply\n  - sleep 60\n  - kubectl wait --for=condition=healthy provider.pkg.crossplane.io --all --timeout={{.TIMEOUT}}\n  - kubectl wait --for=condition=healthy function.pkg.crossplane.io --all --timeout={{.TIMEOUT}}\n```\n\n----------------------------------------\n\nTITLE: Launching Remote Development Environment with Okteto Up (Shell)\nDESCRIPTION: Here, Okteto is started in a specific namespace, which spins up a dev container as specified in 'okteto.yaml'. Requires prior manifest configuration, Okteto CLI, and cluster access. Input is the desired namespace; output is a ready-to-use, hot-reloading, file-synced dev environment in the cloud Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nokteto up --namespace egulliksen\n```\n\n----------------------------------------\n\nTITLE: Ollama Helm Values Configuration with NVIDIA GPU Support\nDESCRIPTION: YAML configuration for deploying Ollama AI model with NVIDIA GPU support using Helm, specifying GPU type, count, model selection, and ingress settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nollama:\n  gpu:\n    enabled: true\n    type: nvidia\n    number: 1\n  models:\n  - llama2\ningress:\n  enabled: true\n  className: traefik\n  hosts:\n  - host: ollama.35.229.75.73.nip.io\n    paths:\n    - path: /\n      pathType: Prefix\n```\n\n----------------------------------------\n\nTITLE: Listing Restored Resources in Namespace using kubectl\nDESCRIPTION: Uses `kubectl` to list all core resources (`all`), ingresses (`ingresses`), and persistent volumes (`persistentvolumes`) within the `a-team` namespace in the cluster defined by `kubeconfig-dot2.yaml`. This verifies that the specific Kubernetes objects were restored by Velero.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml --namespace a-team \\\n    get all,ingresses,persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Viewing Application YAML with Explicit Ingress Configuration\nDESCRIPTION: The updated Application resource definition that explicitly sets ingress configuration, which is needed to work around the KRO controller issue with default values in the schema.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ncat silly-demo-ingress.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kro.run/v1alpha1\nkind: Application\nmetadata:\n  name: silly-demo\nspec:\n  name: silly-demo\n  image: ghcr.io/vfarcic/silly-demo\n  tag: \"1.4.305\"\n  ingress:\n    enabled: true\n    host: silly-demo.127.0.0.1.nip.io\n```\n\n----------------------------------------\n\nTITLE: Defining Rollout with Analysis in YAML\nDESCRIPTION: This YAML snippet shows a Rollout definition that incorporates the 'success-rate' analysis template. It specifies a canary deployment strategy with analysis starting at step 2 and using the defined success rate metric.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: silly-demo\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      analysis:\n        templates:\n          - templateName: success-rate\n            clusterScope: true\n        startingStep: 2\n        args:\n          - name: service-name\n            value: silly-demo-canary.a-team.svc.cluster.local\n      steps:\n        - setWeight: 20\n        - pause: {duration: 300}\n        - setWeight: 40\n        - pause: {duration: 300}\n```\n\n----------------------------------------\n\nTITLE: Listing HorizontalPodAutoscalers using kubectl (Status Check) (sh)\nDESCRIPTION: Lists all HorizontalPodAutoscaler (HPA) resources within the 'a-team' namespace using `kubectl get`. This command is executed again after some time to observe the current state of the HPA, including the collected metrics (e.g., CPU/memory utilization percentages) and the current number of replicas.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get horizontalpodautoscalers\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes CRDs - kubectl - Shell\nDESCRIPTION: Uses kubectl to list all CustomResourceDefinitions (CRDs) from the current Kubernetes cluster. No special dependencies are required beyond kubectl installed and access to a cluster. This operation returns a table of CRDs and their creation times and is useful for verifying what APIs are available for extensions or operators within the cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get crds\n```\n\n----------------------------------------\n\nTITLE: Applying Pod Manifest to Kubernetes Cluster - Shell\nDESCRIPTION: This command applies an existing Pod manifest file ('pod/base.yaml') to the 'a-team' namespace using kubectl. This results in the creation (or update) of a Pod as described in the manifest. Requires kubectl configured to access the intended cluster and namespace. The manifest file must exist and be valid YAML.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename pod/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes ClusterClaim Manifest Template (YAML)\nDESCRIPTION: This YAML file serves as a template for generating a Kubernetes `ClusterClaim` custom resource manifest. It uses Backstage's templating syntax (`${{ values... }}`) to insert dynamic values (like name, namespace, provider, version, nodeSize) provided by the `fetch:template` action during the Scaffolder workflow. This manifest, once generated and applied, would instruct Crossplane to provision a Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: ClusterClaim\nmetadata:\n  name: ${{ values.name }}\n  namespace: ${{ values.namespace }}\nspec:\n  id: ${{ values.name }}\n  compositionSelector:\n    matchLabels:\n      provider: ${{ values.provider }}\n  parameters:\n    version: ${{ values.version }}\n    nodeSize: ${{ values.nodeSize }}\n    ...\n```\n\n----------------------------------------\n\nTITLE: Cloning and preparing the Backstage demo repository\nDESCRIPTION: Shell commands for cloning the demo repository, switching to the correct branch, and preparing the environment for a Backstage demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/vfarcic/idp-full-demo\n\ncd idp-full-demo\n\ngit pull\n\ngit fetch\n\ngit switch backstage\n```\n\n----------------------------------------\n\nTITLE: Defining a Backstage Scaffolder Template (YAML)\nDESCRIPTION: This YAML defines a Backstage Scaffolder `Template` (`kind: Template`). It specifies input `parameters` to generate a user form (e.g., for service name, provider) and a series of `steps` to execute upon form submission. These steps include logging, fetching template files (`fetch:template`), renaming the generated manifest (`fs:rename`), and creating a GitHub pull request (`publish:github:pull-request`) with the manifest. The final `output` provides a link to the created PR.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: scaffolder.backstage.io/v1beta3\nkind: Template\n...\nspec:\n  ...\n  parameters:\n  - title: Service Selector\n    properties:\n      name:\n        type: string\n        ui:autofocus: true\n      provider:\n        type: string\n        enum:\n        - aws\n        - azure\n        - google\n        default: aws\n      ...\n    required:\n    - name\n    - provider\n    - namespace\n    - repository\n  - title: Service Definition\n    ...\n  steps:\n  - id: log-message\n    name: Log Message\n    action: debug:log\n    input:\n      message: Created the manifest for the ${{ parameters.name }} Kubernetes cluster.\n  - id: fetch-template\n    action: fetch:template\n    name: Generate manifest\n    input:\n      url: manifest-templates\n      targetPath: manifests\n      values:\n        name: ${{ parameters.name }}\n        namespace: ${{ parameters.namespace }}\n        ...\n  - id: rename-manifest\n    action: fs:rename\n    name: Rename files\n    input:\n      files:\n      - from: manifests/cluster-claim.yaml\n        to: manifests/cluster-claim-${{ parameters.name }}.yaml\n  - id: create-pull-request\n    action: publish:github:pull-request\n    name: Create a pull request\n    input:\n      repoUrl: github.com?repo=${{ parameters.repository }}&owner=${{ parameters.repositoryUser }}\n      branchName: cluster-${{ parameters.name }}\n      gitCommitMessage: Kubernetes cluster\n      title: Kubernetes cluster manifest ${{ parameters.name }}\n      description: This pull request creates the cluster-claim-${{ parameters.name }}.yaml Kubernetes cluster manifest\n  output:\n    links:\n    - title: Pull Request\n      url: ${{ steps['create-pull-request'].output.remoteUrl }}\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Validating Admission Policies for AppClaims\nDESCRIPTION: YAML definition of ValidatingAdmissionPolicy that enforces specific rules for appclaims resources, including scaling requirements. The policy is bound to the a-team namespace and rejects non-compliant resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingAdmissionPolicy\nmetadata:\n  name: dot-app\nspec:\n  failurePolicy: Fail\n  matchConstraints:\n    resourceRules:\n    - apiGroups:   [\"devopstoolkit.live\"]\n      apiVersions: [\"*\"]\n      operations:  [\"CREATE\", \"UPDATE\"]\n      resources:   [\"appclaims\"]\n  validations:\n    - expression: |\n        has(object.spec.parameters.scaling) &&\n        has(object.spec.parameters.scaling.enabled) &&\n        object.spec.parameters.scaling.enabled\n      message: \"`spec.parameters.scaling.enabled` must be set to `true`.\"\n    - expression: |\n        has(object.spec.parameters.scaling) &&\n        object.spec.parameters.scaling.min > 1\n      message: \"`spec.parameters.scaling.min` must be greater than `1`.\"\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingAdmissionPolicyBinding\nmetadata:\n  name: dot-app\nspec:\n  policyName: dot-app\n  validationActions: [Deny]\n  matchResources:\n    namespaceSelector:\n      matchLabels:\n        kubernetes.io/metadata.name: a-team\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Kargo Stage Resources with Promotion Templates in YAML\nDESCRIPTION: This YAML snippet defines three distinct Kargo Stage resources representing different promotion phases ('dev', 'pre-prod', 'prod'). Each stage specifies freight sources, a step-based promotionTemplate using various Kargo plugins (git-clone, kustomize-set-image, argocd-update, etc.), and denotes dependencies between stages. The manifests require Kargo CRDs and are applied using kubectl, with each step configured for the specific delivery workflow of that stage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kargo.akuity.io/v1alpha1\\nkind: Stage\\nmetadata:\\n  name: dev\\nspec:\\n  requestedFreight:\\n  - origin:\\n      kind: Warehouse\\n      name: silly-demo\\n    sources:\\n      direct: true\\n  promotionTemplate:\\n    spec:\\n      steps:\\n      - uses: git-clone\\n        config:\\n          repoURL: https://github.com/vfarcic/kargo-demo\\n          checkout:\\n          - branch: main\\n            path: ./src\\n          - branch: stage/dev\\n            create: true\\n            path: ./out\\n      - uses: git-clear\\n        config:\\n          path: ./out\\n      - uses: kustomize-set-image\\n        as: update-image\\n        config:\\n          path: ./src/kustomize/base\\n          images:\\n          - image: ghcr.io/vfarcic/silly-demo\\n      - uses: kustomize-build\\n        config:\\n          path: ./src/kustomize/overlays/dev\\n          outPath: ./out/manifests.yaml\\n      - uses: git-commit\\n        as: commit\\n        config:\\n          path: ./out\\n          messageFromSteps:\\n          - update-image\\n      - uses: git-push\\n        config:\\n          path: ./out\\n          targetBranch: stage/dev\\n      - uses: argocd-update\\n        config:\\n          apps:\\n          - name: silly-demo-dev\\n            sources:\\n            - repoURL: https://github.com/vfarcic/kargo-demo\\n              desiredCommitFromStep: commit\\napiVersion: kargo.akuity.io/v1alpha1\\nkind: Stage\\nmetadata:\\n  name: pre-prod\\nspec:\\n  requestedFreight:\\n  - origin:\\n      kind: Warehouse\\n      name: silly-demo\\n    sources:\\n      stages:\\n      - dev\\n  promotionTemplate:\\n    spec:\\n      steps:\\n      - uses: git-clone\\n        config:\\n          repoURL: https://github.com/vfarcic/kargo-demo\\n          checkout:\\n          - branch: main\\n            path: ./src\\n          - branch: stage/pre-prod\\n            create: true\\n            path: ./out\\n      - uses: git-clear\\n        config:\\n          path: ./out\\n      - uses: kustomize-set-image\\n        as: update-image\\n        config:\\n          path: ./src/kustomize/base\\n          images:\\n          - image: ghcr.io/vfarcic/silly-demo\\n      - uses: kustomize-build\\n        config:\\n          path: ./src/kustomize/overlays/pre-prod\\n          outPath: ./out/manifests.yaml\\n      - uses: git-commit\\n        as: commit\\n        config:\\n          path: ./out\\n          messageFromSteps:\\n          - update-image\\n      - uses: git-push\\n        config:\\n          path: ./out\\n          targetBranch: stage/pre-prod\\n      - uses: argocd-update\\n        config:\\n          apps:\\n          - name: silly-demo-pre-prod\\n            sources:\\n            - repoURL: https://github.com/vfarcic/kargo-demo\\n              desiredCommitFromStep: commit\\napiVersion: kargo.akuity.io/v1alpha1\\nkind: Stage\\nmetadata:\\n  name: prod\\nspec:\\n  requestedFreight:\\n  - origin:\\n      kind: Warehouse\\n      name: silly-demo\\n    sources:\\n      stages:\\n      - pre-prod\\n  promotionTemplate:\\n    spec:\\n      steps:\\n      - uses: git-clone\\n        config:\\n          repoURL: https://github.com/vfarcic/kargo-demo\\n          checkout:\\n          - branch: main\\n            path: ./src\\n          - branch: stage/prod\\n            create: true\\n            path: ./out\\n      - uses: git-clear\\n        config:\\n          path: ./out\\n      - uses: kustomize-set-image\\n        as: update-image\\n        config:\\n          path: ./src/kustomize/base\\n          images:\\n          - image: ghcr.io/vfarcic/silly-demo\\n      - uses: kustomize-build\\n        config:\\n          path: ./src/kustomize/overlays/prod\\n          outPath: ./out/manifests.yaml\\n      - uses: git-commit\\n        as: commit\\n        config:\\n          path: ./out\\n          messageFromSteps:\\n          - update-image\\n      - uses: git-push\\n        config:\\n          path: ./out\\n          targetBranch: stage/prod\\n      - uses: argocd-update\\n        config:\\n          apps:\\n          - name: silly-demo-prod\\n            sources:\\n            - repoURL: https://github.com/vfarcic/kargo-demo\\n              desiredCommitFromStep: commit\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Manifests\nDESCRIPTION: This shell command uses `kubectl` to apply the Kubernetes resource definitions contained in the `app.yaml` file to the `a-team` namespace in the cluster. This action creates or updates the Deployment, Service, Ingress, and HPA.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename app.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing AppClaim Application Under Policy Constraint - Shell\nDESCRIPTION: This shell command attempts to apply an appclaim manifest to the a-team namespace, triggering the configured admission policies. If the manifest fails validation criteria, the request is denied and an error message is returned. The command relies on kubectl and access to the tmp/appclaim.yaml manifest file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply --filename tmp/appclaim.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring mirrord Target Deployment via JSON\nDESCRIPTION: Defines the mirrord configuration in JSON, specifying which Kubernetes deployment and namespace to target, as well as network features (mirroring incoming traffic) and agent placement. The 'target.path' field points to the specific backend deployment, and 'feature.network.incoming' is set to mirror requests. Requires an existing Kubernetes cluster, the mirrord tool, and knowledge of deployment naming conventions. Inputs: JSON file. Output: Used by mirrord to mirror traffic and inject environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"target\": {\\n    \"path\": \"deployment/silly-demo\",\\n    \"namespace\": \"staging\"\\n  },\\n  \"feature\": {\\n    \"network\": {\\n      \"incoming\": \"mirror\"\\n    }\\n  },\\n  \"agent\": {\\n    \"namespace\": \"staging\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Ollama Deployment YAML with GPU Configuration\nDESCRIPTION: Key portions of Ollama deployment YAML showing GPU configuration, including resource limits, environment variables, and tolerations required for scheduling on GPU nodes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  ...\n  name: ollama\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n        - env:\n            ...\n            - name: NVIDIA_DRIVER_CAPABILITIES\n              value: compute,utility\n            - name: NVIDIA_VISIBLE_DEVICES\n              value: all\n          ...\n          resources:\n            limits:\n              nvidia.com/gpu: \"1\"\n          ...\n      tolerations:\n        - effect: NoSchedule\n          key: nvidia.com/gpu\n          operator: Exists\n      ...\n```\n\n----------------------------------------\n\nTITLE: Promoting an Application to Production with KubeVela\nDESCRIPTION: Command to promote an application from development to production using KubeVela's workflow feature. This allows for simplified application lifecycle management across environments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nvela workflow resume silly-demo\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Name Search of Deployments with Label Selector via kubectl and Clusterpedia (Shell)\nDESCRIPTION: This shell snippet performs a fuzzy name search for deployments containing 'something' in their name within the 'a-team' namespace. It requires Clusterpedia's internal storage labeling and the use of the 'internalstorage.clusterpedia.io/fuzzy-name' selector. The functionality depends on correct label population and resource sync in Clusterpedia. This allows partial matches rather than exact names.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia --namespace a-team \\\n    get deployments \\\n    --selector \"internalstorage.clusterpedia.io/fuzzy-name=something\"\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Application Claim Resources (Shell)\nDESCRIPTION: Demonstrates using the specialized `crossplane` CLI's `beta trace` command to visualize the hierarchy of resources associated with a specific 'appclaim' ('silly-demo') in the 'a-team' namespace. This showcases the user-friendliness of a domain-specific CLI compared to generic tools for the same task.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace --namespace a-team appclaim silly-demo\n```\n\n----------------------------------------\n\nTITLE: Defining a ResourceGroup with Deployment and Service Templates - kro YAML\nDESCRIPTION: This YAML snippet declares a kro ResourceGroup defining a schema for a new CRD (e.g., 'Application') and specifies two templated resources: a Kubernetes Deployment and a Service. The schema lists required fields and default values, while the resource templates use CEL expressions to dynamically inject CR values. Intended for use with kro, dependencies include kro's controller installed on the cluster. Inputs are field values in 'spec'; outputs are generated resources matching the templates, but currently owner references are not set.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kro.run/v1alpha1\\nkind: ResourceGroup\\nmetadata:\\n  name: application\\nspec:\\n  schema:\\n    apiVersion: v1alpha1\\n    kind: Application\\n    spec:\\n      name: string\\n      image: string\\n      tag: string\\n      port: integer | default=8080\\n  resources:\\n    - id: deployment\\n      template:\\n        apiVersion: apps/v1\\n        kind: Deployment\\n        metadata:\\n          labels:\\n            app.kubernetes.io/name: ${schema.spec.name}\\n          name: ${schema.spec.name}\\n        spec:\\n          replicas: 2\\n          selector:\\n            matchLabels:\\n              app.kubernetes.io/name: ${schema.spec.name}\\n          template:\\n            metadata:\\n              labels:\\n                app.kubernetes.io/name: ${schema.spec.name}\\n            spec:\\n              containers:\\n              - name: ${schema.spec.name}\\n                image: ${schema.spec.image}:${schema.spec.tag}\\n                livenessProbe:\\n                  httpGet:\\n                    path: /\\n                    port: ${schema.spec.port}\\n                ports:\\n                - containerPort: ${schema.spec.port}\\n                readinessProbe:\\n                  httpGet:\\n                    path: /\\n                    port: ${schema.spec.port}\\n                resources:\\n                  limits:\\n                    cpu: 500m\\n                    memory: 512Mi\\n                  requests:\\n                    cpu: 250m\\n                    memory: 256Mi\\n    - id: service\\n      template:\\n        apiVersion: v1\\n        kind: Service\\n        metadata:\\n          labels:\\n            app.kubernetes.io/name: ${schema.spec.name}\\n          name: ${schema.spec.name}\\n        spec:\\n          ports:\\n          - name: http\\n            port: ${schema.spec.port}\\n            protocol: TCP\\n            targetPort: ${schema.spec.port}\\n          selector:\\n            app.kubernetes.io/name: ${schema.spec.name}\\n          type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Restoring a Velero Backup to a Specific Namespace (Shell)\nDESCRIPTION: This command uses the Velero CLI to initiate a restore operation from a previously created backup named 'pre-disaster'. It specifically targets a cluster defined by 'kubeconfig-dot2.yaml' and restores only the resources belonging to the 'a-team' namespace. This is used to recover application state in a new or existing cluster after a failure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nvelero --kubeconfig kubeconfig-dot2.yaml restore create \\\n    --from-backup pre-disaster --include-namespaces a-team\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Kubernetes Cluster Connections\nDESCRIPTION: This script creates configuration entries for three Kubernetes clusters and an aggregator connection. It specifies the Kube config path, context, and custom resource tables for each cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\necho '\nconnection \"kubernetes_aks_01\" {\n  plugin         = \"kubernetes\"\n  config_path    = \"/Users/viktorfarcic/code/steampipe-demo/kubeconfig-01.yaml\"\n  config_context = \"dot-01\"\n  custom_resource_tables = [\"*\"]\n}\nconnection \"kubernetes_aks_02\" {\n  plugin         = \"kubernetes\"\n  config_path    = \"/Users/viktorfarcic/code/steampipe-demo/kubeconfig-02.yaml\"\n  config_context = \"dot-02\"\n  custom_resource_tables = [\"*\"]\n}\nconnection \"kubernetes_aks_03\" {\n  plugin         = \"kubernetes\"\n  config_path    = \"/Users/viktorfarcic/code/steampipe-demo/kubeconfig-03.yaml\"\n  config_context = \"dot-03\"\n  custom_resource_tables = [\"*\"]\n}\nconnection \"kubernetes_all\" {\n  plugin      = \"kubernetes\"\n  type        = \"aggregator\"\n  connections = [\"kubernetes_*\"]\n}\n' | tee ~/.steampipe/config/kubernetes.spc\n```\n\n----------------------------------------\n\nTITLE: Defining Base Kubernetes Deployment for Argo Rollouts in YAML\nDESCRIPTION: This YAML manifest defines a Kubernetes Deployment named `silly-demo`. It's configured with `replicas: 0` because Argo Rollouts will manage the actual replica count. It specifies the container image `ghcr.io/vfarcic/silly-demo:1.4.126` and serves as the workload reference for the Argo Rollouts resource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app: silly-demo\n  name: silly-demo\nspec:\n  replicas: 0\n  ...\n  template:\n    ...\n    spec:\n      containers:\n      - image: ghcr.io/vfarcic/silly-demo:1.4.126\n        ...\n```\n\n----------------------------------------\n\nTITLE: Applying Backup Schedule\nDESCRIPTION: Command to apply the Velero backup schedule configuration\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace velero apply --filename velero/schedule.yaml\n```\n\n----------------------------------------\n\nTITLE: Kro ResourceGroup Definition with Database Environment Variables\nDESCRIPTION: YAML definition of a Kro ResourceGroup that includes database connection environment variables for deployments. The schema includes an optional db.enabled flag that defaults to false.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kro.run/v1alpha1\nkind: ResourceGroup\nmetadata:\n  name: application\nspec:\n  schema:\n    apiVersion: v1alpha1\n    kind: Application\n    spec:\n      ...\n      db:\n        enabled: boolean | default=false\n  resources:\n    - id: deployment\n      template:\n        apiVersion: apps/v1\n        kind: Deployment\n        ...\n        spec:\n          ...\n          template:\n            ...\n            spec:\n              containers:\n              - name: ${schema.spec.name}\n                ...\n                env:\n                - name: DB_ENDPOINT\n                  valueFrom:\n                    secretKeyRef:\n                      key: host\n                      name: ${schema.spec.name}-app\n                - name: DB_PORT\n                  valueFrom:\n                    secretKeyRef:\n                      key: port\n                      name: ${schema.spec.name}-app\n                - name: DB_USER\n                  valueFrom:\n                    secretKeyRef:\n                      key: username\n                      name: ${schema.spec.name}-app\n                - name: DB_PASS\n                  valueFrom:\n                    secretKeyRef:\n                      key: password\n                      name: ${schema.spec.name}-app\n                - name: DB_NAME\n                  value: app\n    ...\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Syncing K8s Manifests - Actions YAML\nDESCRIPTION: Defines a reusable GitHub Actions workflow for synchronizing control plane manifests. Major steps include code checkout, data transformation using yq, conditional file updates/removals, and git operations. Relies on 'actions/checkout', 'mikefarah/yq', and 'port-labs/port-github-action'. Inputs are passed as workflow_dispatch parameters, including operation type, user information, manifest content, and destination folder. This automation pushes manifests changed by Port UI into the repository, enabling downstream consumption via Argo CD.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nname: Sync control plane\npermissions:\n  contents: write\non:\n  workflow_dispatch:\n    inputs:\n      operation:\n        required: true\n        description: \"Delete, Update or create\"\n        type: string\n      triggeringUser:\n        required: true\n        description: \"The email of the triggering user\"\n        type: string\n      runId:\n        required: true\n        description: \"Port's Run ID\"\n        type: string\n      manifest:\n        required: true\n        description: \"The K8s manifest generated by Port\"\n        type: string\n      folder:\n        required: true\n        description: Folder where the resource will be stored\n        default: \"./apps\"\n        type: string\njobs:\n  push:\n    runs-on: ubuntu-latest\n    steps:\n      - name: checkout\n        uses: actions/checkout@v2\n      - uses: mikefarah/yq@v4.44.1\n      - uses: port-labs/port-github-action@v1\n        with:\n          clientId: ${{ secrets.PORT_CLIENT_ID }}\n          clientSecret: ${{ secrets.PORT_CLIENT_SECRET }}\n          operation: PATCH_RUN\n          runId: ${{inputs.runId}} \n          icon: GithubActions\n          logMessage: \"${{ inputs.operation }} manifest ${{ env.PATH }}...\"\n      - name: manifest\n        run: |\n          echo '${{ inputs.manifest }}' | yq -p json -o yaml | tee tmp.yaml\n          kind=$(yq .kind tmp.yaml)\n          name=$(yq .metadata.name tmp.yaml)\n          namespace=$(yq .metadata.namespace tmp.yaml)\n          path=${{ inputs.folder }}/$namespace-$kind-$name.yaml\n          if [ \"${{ inputs.operation }}\" = \"DELETE\" ]; then\n            rm -f $path\n            rm -f tmp.yaml\n          else\n            mv tmp.yaml $path\n          fi\n      - name: Push\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          git config user.name \"GitHub Action\"\n          git config user.email \"github-actions[bot]@users.noreply.github.com\"\n          git add .\n          git commit -m \"chore: ${{ inputs.operation }} resource by ${{ inputs.triggeringUser }}\"\n          git push\n```\n\n----------------------------------------\n\nTITLE: Implementing CI/CD Tasks with Nushell Script\nDESCRIPTION: Nushell script defining CI/CD operations including running tests, building Docker images, and updating Kubernetes manifests. The script provides modular commands that can be executed individually or as a complete CI workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: nu\nCODE:\n```\n#!/usr/bin/env nu\ndef main [] {}\n# Runs all CI tasks\ndef \"main run ci\" [\n    tag: string # The tag of the image (e.g., 0.0.1)!\n    manifest = \"apps/silly-demo.yaml\" # The path to the manifest file\n    --run_tests = true # Whether to run tests\n    --build_images = true # Whether to build images\n] {\n    if $run_tests {\n        main run tests --language go\n    }\n    if $build_images {\n        main build image $tag\n    }\n    main update claim $tag $manifest\n}\n# Runs tests\ndef \"main run tests\" [\n    --language = \"go\" # The language of the project (e.g., go)\n] {\n    if $language == \"go\" {\n        go test -v $\"(pwd)/...\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Updated Rollout Configuration for New Release\nDESCRIPTION: Command to apply the updated Kustomize configuration that includes the new image version, triggering the canary deployment process.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --kustomize kustomize/overlays/istio\n```\n\n----------------------------------------\n\nTITLE: Filtering CRDs by Keyword - kubectl/grep - Shell\nDESCRIPTION: Combines kubectl and grep to list CRDs matching a filter (in this case 'devops'). Requires grep and kubectl installed. Outputs a list of CRDs related to DevOps Toolkit, allowing users to quickly identify custom resources associated with a specific project or provider.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get crds | grep devops\n```\n\n----------------------------------------\n\nTITLE: Deleting Application Pod using Label Selector\nDESCRIPTION: This command deletes the pod(s) matching the label selector 'app.kubernetes.io/name=silly-demo' within the 'a-team' namespace. This simulates a pod failure or restart to test volume persistence.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete pod \\\n    --selector app.kubernetes.io/name=silly-demo\n```\n\n----------------------------------------\n\nTITLE: Defining Backstage Build Process (Nushell)\nDESCRIPTION: Defines a Nushell function `main build backstage` that encapsulates the steps for building Backstage. This includes logging into Docker, installing dependencies (`yarn install`), compiling (`yarn tsc`), building the backend (`yarn build:backend`), building and pushing a Docker image (`docker buildx build`, `docker image push`), updating and packaging a Helm chart (`helm package`), pushing the Helm chart (`helm push`), and prompting the user to manually adjust GitHub package visibility.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: nu\nCODE:\n```\n...\ndef --env \"main build backstage\" [\n    tag: string\n    --image = \"ghcr.io/vfarcic/idp-full-backstage\"\n    --github_org = \"vfarcic\"\n] {\n\n    docker login $image\n\n    cd backstage\n\n    yarn install --immutable\n\n    yarn tsc\n\n    yarn build:backend\n\n    (\n        docker buildx build\n            --file packages/backend/Dockerfile\n            --tag $\"($image):($tag)\"\n            --platform linux/amd64\n            .\n    )\n\n    docker image push $\"($image):($tag)\"\n\n    cd ..\n\n    open charts/backstage/Chart.yaml\n        | upsert version $tag\n        | upsert appVersion $tag\n        | save charts/backstage/Chart.yaml --force\n\n    open charts/backstage/values.yaml\n        | upsert image.repository $image\n        | upsert image.tag $tag\n        | save charts/backstage/values.yaml --force\n\n    helm package charts/backstage\n\n    helm push $\"backstage-($tag).tgz\" $\"oci://ghcr.io/($image)\"\n\n    start $\"https://github.com/users/($github_org)/packages/container/package/idp-full-backstage\"\n\n    print $\"\nClick (ansi yellow_bold)Package settings(ansi reset).\nClick the (ansi yellow_bold)Change visibility(ansi reset) button, select (ansi yellow_bold)Public(ansi reset), type (ansi yellow_bold)idp-full-backstage(ansi reset) to confirm, and click the (ansi yellow_bold)I understand the consequences, change package visibility(ansi reset) button.\nPress any key to continue.\n\"\n    input\n\n    start $\"https://github.com/users/($github_org)/packages/container/package/idp-full-backstage%2Fbackstage\"\n\n    print $\"\nClick (ansi yellow_bold)Package settings(ansi reset).\nClick the (ansi yellow_bold)Change visibility(ansi reset) button, select (ansi yellow_bold)Public(ansi reset), type (ansi yellow_bold)idp-full-backstage/backstage(ansi reset) to confirm, and click the (ansi yellow_bold)I understand the consequences, change package visibility(ansi reset) button.\nPress any key to continue.\n\"\n    input\n\n    rm $\"backstage-($tag).tgz\"\n\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Creating a New Backstage App with npx\nDESCRIPTION: This command uses npx to create a new Backstage application. It downloads the necessary dependencies and sets up the initial project structure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx @backstage/create-app@latest\n```\n\n----------------------------------------\n\nTITLE: Defining Service Account and Role Bindings for Argo Events - Kubernetes YAML\nDESCRIPTION: This YAML snippet defines a ServiceAccount, ClusterRole, and ClusterRoleBinding allowing Argo Events to observe and operate on Deployments and ReplicaSets in the cluster. It is required to grant Argo Events necessary access prior to event processing. To use, apply it to your Kubernetes cluster; dependencies include a running cluster with RBAC enabled. The ServiceAccount and roles are scoped to the argo-events namespace and require appropriate cluster permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: argo-events\n  namespace: argo-events\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: argo-events\nrules:\n  - apiGroups:\n      - \"apps\"\n    verbs:\n      - \"*\"\n    resources:\n      - deployments\n      - replicasets\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: argo-events\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: argo-events\nsubjects:\n  - kind: ServiceAccount\n    name: argo-events\n    namespace: argo-events\n```\n\n----------------------------------------\n\nTITLE: Defining Backstage Kubernetes Resources via Helm Templates - YAML\nDESCRIPTION: This is a Helm templated YAML snippet for deploying Backstage in Kubernetes. It conditionally defines a CloudNativePG Cluster for PostgreSQL in production mode, and always deploys a Deployment (with customizable labels, image parameters, environment variables, and secrets), an Ingress for web access, and a Service for networking. Dependencies include Helm, Kubernetes 1.18+, the CloudNativePG operator, and configuration in values.yaml. Key parameters (like mode, image, ingress, database instances) are rendered from Helm values, and template functions inject labels, secrets, and environment configurations. Outputs are Kubernetes resources, and limitations include requirement for correct 'mode' and Helm setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n{{- if eq .Values.mode \\\"production\\\" -}}\\n---\\napiVersion: postgresql.cnpg.io/v1\\nkind: Cluster\\nmetadata:\\n  name: {{ include \\\"backstage-demo.fullname\\\" . }}-db\\n  labels:\\n    {{- include \\\"backstage-demo.labels\\\" . | nindent 4 }}\\nspec:\\n  instances: {{ .Values.db.instances }}\\n  storage:\\n    size: 1Gi\\n  enableSuperuserAccess: true\\n{{- end -}}\\n---\\napiVersion: apps/v1\\nkind: Deployment\\nmetadata:\\n  name: {{ include \\\"backstage-demo.fullname\\\" . }}\\n  labels:\\n    {{- include \\\"backstage-demo.labels\\\" . | nindent 4 }}\\nspec:\\n  replicas: {{ .Values.replicaCount }}\\n  selector:\\n    matchLabels:\\n      {{- include \\\"backstage-demo.selectorLabels\\\" . | nindent 6 }}\\n  template:\\n    metadata:\\n      {{- with .Values.podAnnotations }}\\n      annotations:\\n        {{- toYaml . | nindent 8 }}\\n      {{- end }}\\n      labels:\\n        {{- include \\\"backstage-demo.labels\\\" . | nindent 8 }}\\n        {{- with .Values.podLabels }}\\n        {{- toYaml . | nindent 8 }}\\n        {{- end }}\\n    spec:\\n      containers:\\n        - name: {{ .Chart.Name }}\\n          image: \\\"{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}\\\"\\n          imagePullPolicy: IfNotPresent\\n          ports:\\n            - name: http\\n              containerPort: 7007\\n          env:\\n            - name: NODE_ENV\\n              value: development\\n            - name: BACKSTAGE_HOST\\n              value: http://{{ .Values.ingress.host }}\\n            - name: DB_HOST\\n              value: {{ include \\\"backstage-demo.fullname\\\" . }}-db-rw\\n          envFrom:\\n            {{- if eq .Values.mode \\\"production\\\" }}\\n            - secretRef:\\n                name: {{ include \\\"backstage-demo.fullname\\\" . }}-db-superuser\\n            {{- end }}\\n            - secretRef:\\n                name: {{ include \\\"backstage-demo.fullname\\\" . }}\\n          {{- if eq .Values.mode \\\"development\\\" }}\\n          command: [\\\"node\\\", \\\"packages/backend\\\", \\\"--config\\\", \\\"app-config.yaml\\\", \\\"--config\\\", \\\"app-config.ingress.yaml\\\"]\\n          {{- end }}\\n---\\napiVersion: networking.k8s.io/v1\\nkind: Ingress\\nmetadata:\\n  name: {{ include \\\"backstage-demo.fullname\\\" . }}\\n  labels:\\n    {{- include \\\"backstage-demo.labels\\\" . | nindent 4 }}\\nspec:\\n  ingressClassName: {{ .Values.ingress.className }}\\n  rules:\\n    - host: {{ .Values.ingress.host }}\\n      http:\\n        paths:\\n          - backend:\\n              service:\\n                name: {{ include \\\"backstage-demo.fullname\\\" . }}\\n                port:\\n                  number: 80\\n            path: /\\n            pathType: ImplementationSpecific\\n---\\napiVersion: v1\\nkind: Service\\nmetadata:\\n  name: {{ include \\\"backstage-demo.fullname\\\" . }}\\n  labels:\\n    {{- include \\\"backstage-demo.labels\\\" . | nindent 4 }}\\nspec:\\n  type: ClusterIP\\n  ports:\\n    - port: 80\\n      targetPort: http\\n      name: http\\n  selector:\\n    {{- include \\\"backstage-demo.selectorLabels\\\" . | nindent 4 }}\n```\n\n----------------------------------------\n\nTITLE: Crossplane AppClaim Definition\nDESCRIPTION: YAML definition for a Crossplane AppClaim resource that defines an application with its dependencies, infrastructure requirements, and CI/CD configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: AppClaim\nmetadata:\n  name: silly-demo\n  labels:\n    app-owner: vfarcic\nspec:\n  id: silly-demo\n  compositionSelector:\n    matchLabels:\n      type: backend\n      location: local\n  parameters:\n    namespace: a-team\n    image: ghcr.io/vfarcic/idp-full-demo\n    tag: FIXME\n    port: 8080\n    host: silly-demo.127.0.0.1.nip.io\n    ingressClassName: nginx\n    db:\n      secret: silly-demo-db\n    repository:\n      enabled: true\n      name: idp-full-app\n    ci:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Configuring GKE Cluster and Deploying Initial Namespaces - Shell\nDESCRIPTION: Configures kubeconfig for authentication, creates a standard GKE cluster using gcloud with specific machine type and Gateway API enabled, sets up a firewall rule for NodePort access, creates the 'a-team' and 'b-team' namespaces, and applies a base deployment manifest for 'a-team'. Dependencies include a prior enabled GKE API, Google Cloud CLI, and kubectl. Creates infrastructure necessary for early demo phases.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport KUBECONFIG=$PWD/kubeconfig.yaml\n\ngcloud container clusters create dot --project $PROJECT_ID \\\n    --zone us-east1-b --machine-type e2-standard-4 \\\n    --num-nodes 2 --no-enable-autoupgrade --gateway-api standard\n\ngcloud compute firewall-rules create silly-demo-node-port \\\n    --allow tcp:30000 --project $PROJECT_ID\n\nkubectl create namespace a-team\n\nkubectl --namespace a-team apply --filename deployment/base.yaml\n\nkubectl create namespace b-team\n```\n\n----------------------------------------\n\nTITLE: Defining a ReplicaSet Resource - Kubernetes YAML\nDESCRIPTION: This YAML manifest defines a Kubernetes ReplicaSet named 'silly-demo' with three replicas. It specifies Pod templates, container image, ports, readiness probes, and resource requests/limits. The manifest must be applied to a cluster using kubectl, and the main parameters to modify are 'replicas', container image, and resource settings. Inputs are the manifest itself, and output is an active ReplicaSet in the target namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: ReplicaSet\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.115\n          name: silly-demo\n          ports:\n            - containerPort: 8080    \n          readinessProbe:\n            httpGet:\n              path: /\n              port: 8080\n          resources:\n            limits:\n              cpu: 250m\n              memory: 256Mi\n            requests:\n              cpu: 125m\n              memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes ClusterIP Service (YAML)\nDESCRIPTION: This YAML manifest defines a Kubernetes Service named 'silly-demo'. It specifies the type as 'ClusterIP', meaning it's only accessible within the cluster. The service selects Pods with the label 'app.kubernetes.io/name: silly-demo' and routes traffic from its port 8080 to the targetPort 8080 on the selected Pods using the TCP protocol.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ports:\n  - name: http\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: silly-demo\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Inspecting Container Environment Variables\nDESCRIPTION: This shell command executes the 'env' command inside the 'silly-demo' container to list all environment variables, demonstrating how ConfigMap data is injected as environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- env\n```\n\n----------------------------------------\n\nTITLE: Executing Platform CLI Help Command\nDESCRIPTION: Example showing the output of platform CLI's help command, demonstrating subcommands, flags, and input/output types.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nplatform --help\n```\n\n----------------------------------------\n\nTITLE: Example Output of Listing Kubernetes Resources with kubectl\nDESCRIPTION: Presents sample output from the `kubectl get all,ingresses` command, listing the Pods, Services, Deployments, ReplicaSets, and Ingresses present in the namespace. This output confirms the existence and status of the Kubernetes primitives created by Crossplane.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nNAME                                   READY STATUS  RESTARTS AGE\npod/crossplane-gh-demo-dd69595c5-psq5d 1/1   Running 0        119s\n\nNAME                       TYPE      CLUSTER-IP   EXTERNAL-IP PORT(S)  AGE\nservice/crossplane-gh-demo ClusterIP 10.96.72.189 <none>      8080/TCP 119s\n\nNAME                               READY UP-TO-DATE AVAILABLE AGE\ndeployment.apps/crossplane-gh-demo 1/1   1          1         119s\n\nNAME                                         DESIRED CURRENT READY AGE\nreplicaset.apps/crossplane-gh-demo-dd69595c5 1       1       1     119s\n\nNAME                                         CLASS  HOSTS            ADDRESS PORTS AGE\ningress.networking.k8s.io/crossplane-gh-demo <none> my-repo.acme.com         80    119s\n```\n\n----------------------------------------\n\nTITLE: Verifying Created Kubernetes Resources\nDESCRIPTION: Listing all core Kubernetes resources and ingresses created by the Application, confirming that the deployment, service, and ingress were successfully created.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                              READY   STATUS    RESTARTS   AGE\npod/silly-demo-58445dff96-t6rg2   1/1     Running   0          32s\npod/silly-demo-58445dff96-ttwjd   1/1     Running   0          32s\n\nNAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nservice/silly-demo   ClusterIP   10.96.144.73   <none>        8080/TCP   26s\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/silly-demo   2/2     2            2           32s\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/silly-demo-58445dff96   2         2         2       32s\n\nNAME                                   CLASS   HOSTS                 ADDRESS     PORTS   AGE\ningress.networking.k8s.io/silly-demo   nginx   silly-demo...nip.io   localhost   80      29s\n```\n\n----------------------------------------\n\nTITLE: Retrieving ResourceGroups from Kubernetes Namespace\nDESCRIPTION: This shell command retrieves the ResourceGroups from the 'a-team' namespace in Kubernetes, displaying them in a wide output format. It's used to verify the updated ResourceGroup configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get resourcegroups --output wide\n```\n\n----------------------------------------\n\nTITLE: Setting Up Crossplane v2 Environment\nDESCRIPTION: This snippet shows the commands to clone the repository, switch to the v2 branch, and set up the environment using Devbox and Nushell.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-sql\n\ncd crossplane-sql\n\ngit pull\n\ngit fetch\n\ngit switch v2\n```\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x dot.nu\n```\n\nLANGUAGE: sh\nCODE:\n```\n./dot.nu setup --preview true\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Entering a Devbox Shell Environment - Shell\nDESCRIPTION: This command starts a Devbox shell in the current directory to automatically install and provide all tools listed in devbox.json, including those needed for the Zellij workflow. Requires Devbox to be installed and Docker running, as Docker-based components may be involved in the workflow. On successful execution, the user is placed in a shell session with all project dependencies available, streamlining development setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Querying All Deployments Across Namespaces with kubectl and Clusterpedia (Shell)\nDESCRIPTION: This shell snippet queries all Kubernetes deployments from all namespaces and all clusters using kubectl by targeting the Clusterpedia 'cluster' endpoint. The critical dependency is having Clusterpedia installed and configured as a special cluster endpoint in your kubeconfig. Parameters include resource type (deployments), target cluster (--cluster clusterpedia), and namespace scope (--all-namespaces). Output will include deployments from all synced clusters. Ensure that Clusterpedia is properly collecting and syncing the desired resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia get deployments --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Docker Bake HCL Configuration File\nDESCRIPTION: Shows the contents of the docker-bake.hcl file, which defines the build configuration for Docker Bake.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncat docker-bake.hcl\n```\n\nLANGUAGE: hcl\nCODE:\n```\nvariable \"IMAGE\" {\n    default = \"ghcr.io/vfarcic/silly-demo\"\n}\nvariable \"TAG\" {\n    default = \"dev\"\n}\ntarget \"default\" {\n    name = item.name\n    matrix = {\n        item = [{\n            name = \"backend\"\n            context = \".\"\n            tags = [\"${IMAGE}:${TAG}\", \"${IMAGE}:latest\"]\n        }, {\n            name = \"frontend\"\n            context = \"./frontend\"\n            tags = [\"${IMAGE}-frontend:${TAG}\", \"${IMAGE}-frontend:latest\"]\n        }]\n    }\n    tags = item.tags\n    dockerfile = \"Dockerfile\"\n    context = item.context\n    platforms = [\"linux/amd64\", \"linux/arm64\"]\n    args = {\n        VERSION = TAG\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Google Cloud Database Component Definition\nDESCRIPTION: CUE definition for a Google Cloud SQL database instance component with configurable parameters for region, size, and version\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: cue\nCODE:\n```\nimport \"encoding/base64\"\n\n\"db-google\": {\n    attributes: {\n        workload: definition: {\n            apiVersion: \"sql.gcp.upbound.io/v1beta1\"\n            kind:       \"DatabaseInstance\"\n        }\n    }\n    type: \"component\"\n}\n\ntemplate: {\n    parameter: {\n        region:  *\"us-east1\" | string\n        size:    *\"small\" | string\n        version: string\n    }\n    output: {\n        apiVersion: \"sql.gcp.upbound.io/v1beta1\"\n        kind: \"DatabaseInstance\"\n        metadata: {\n            name:   context.name + \"-\" + context.namespace\n            labels: \"app.kubernetes.io/name\": context.name\n        }\n        spec: {\n            forProvider: {\n                region:          parameter.region\n                databaseVersion: \"POSTGRES_\" + parameter.version\n                rootPasswordSecretRef: {\n                    name:      context.name + \"-password\"\n                    namespace: context.namespace\n                    key:       \"password\"\n                }\n                settings: [{\n                    if parameter.size == \"small\" {\n                        tier: \"db-custom-1-3840\"\n                    }\n                    if parameter.size == \"medium\" {\n                        tier: \"db-custom-16-61440\"\n                    }\n                    if parameter.size == \"large\" {\n                        tier: \"db-custom-64-245760\"\n                    }\n                    availabilityType: \"REGIONAL\"\n                    backupConfiguration: [{\n                        enabled:          true\n                        binaryLogEnabled: false\n                    }]\n                    ipConfiguration: [{\n                        ipv4Enabled: true\n                        authorizedNetworks: [{\n                            name:  \"all\"\n                            value: \"0.0.0.0/0\"\n                        }]\n                    }]\n                }]\n                deletionProtection: false\n            }\n        }\n    }\n    outputs: {\n        #Metadata: {\n\n```\n\n----------------------------------------\n\nTITLE: Defining a Backstage Component for Crossplane Kubernetes (YAML)\nDESCRIPTION: This YAML configuration defines a Backstage `Component` resource (`kind: Component`) representing a Crossplane-managed Kubernetes cluster. It includes metadata like name, title, description, annotations for GitHub and Kubernetes integration, tags, and links. The `spec` section defines its type as 'service', lifecycle as 'production', and assigns an owner. This file (`catalog-info.yaml`) provides static information for Backstage discovery.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: crossplane-kubernetes\n  title: Crossplane Kubernetes\n  description: Silly description of Crossplane Kubernetes\n  annotations:\n    github.com/project-slug: vfarcic/backstage-demo\n    backstage.io/techdocs-ref: dir:. \n    backstage.io/kubernetes-id: dot\n    backstage.io/kubernetes-namespace: a-team\n    backstage.io/kubernetes-label-selector: app.kubernetes.io/name=crossplane-kubernetes\n  tags:\n    - go\n  links:\n    - url: https://youtube.com/@devopstoolkit\n      title: DevOps Toolkit YouTube\n      icon: dashboard\n      type: Website\n    - url: https://devopstoolkit.live/\n      title: DevOps Toolkit Posts\n      icon: dashboard\n      type: Website\nspec:\n  type: service\n  lifecycle: production\n  owner: vfarcic\n```\n\n----------------------------------------\n\nTITLE: Defining Deployment Workflow Steps in KubeVela YAML\nDESCRIPTION: This YAML snippet focuses on the 'workflow' portion of the KubeVela Application manifest. It defines deployment steps that sequentially deploy to development and production environments, with a manual approval ('suspend') step in between. Each deploy step references specific policies, controlling how the application manifest is altered for each environment. The workflow depends on previously defined policies and requires a KubeVela controller to interpret and execute the workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.oam.dev/v1beta1\\nkind: Application\\nmetadata:\\n  name: silly-demo\\nspec:\\n  ...\\n  workflow:\\n    steps:\\n    - name: deploy-to-dev\\n      type: deploy\\n      properties:\\n        policies:\\n        - target-dev\\n        - host-dev\\n        - scaler-dev\\n    - name: promotion\\n      type: suspend\\n    - name: deploy-to-prod\\n      type: deploy\\n      properties:\\n        policies:\\n        - target-prod\\n        - db-prod\n```\n\n----------------------------------------\n\nTITLE: Example SQLClaim Manifest - Kubernetes YAML\nDESCRIPTION: Provides a concrete example of a SQLClaim resource definition in YAML, intended for Kubernetes with Crossplane. Specifies API version, resource kind, metadata, and spec fields including composition reference and claim parameters. Dependencies include the appropriate CRDs and compositions provisioned; inputs include name, namespace, and configuration details like size and version. Applying this manifest will request a database with provided attributes from the underlying hyperscaler via Crossplane.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: silly-demo\n  namespace: a-team\nspec:\n  compositionRef:\n    name: aws-postgresql\n  id: silly-demo\n  parameters:\n    size: small\n    version: \"16.2\"\n```\n\n----------------------------------------\n\nTITLE: Updating Image Tag with Kustomize (sh)\nDESCRIPTION: Navigates into a Kustomize overlay directory, uses `kustomize edit set image` to update the container image tag for `silly-demo` to `1.4.128`, and returns to the previous directory. This sequence prepares the Kustomize configuration for deploying a new application version.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncd kustomize/overlays/simple\n\nkustomize edit set image \\\n    ghcr.io/vfarcic/silly-demo=ghcr.io/vfarcic/silly-demo:1.4.128\n\ncd ../../../\n```\n\n----------------------------------------\n\nTITLE: Listing Pods to Verify HPA Scaling (sh)\nDESCRIPTION: Lists all pods within the 'a-team' namespace using `kubectl get pods`. This is used to confirm the effect of the HorizontalPodAutoscaler (HPA), specifically to verify the number of running replicas matches the number decided by the HPA based on observed metrics.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Monitoring File System Operations\nDESCRIPTION: Command to monitor file system operations in the a-team namespace, showing reads, writes, and bytes transferred.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget top file --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Cleaning up Kubernetes Kind Cluster and Repository\nDESCRIPTION: Shell commands to delete the Kubernetes kind cluster, switch back to the main git branch, and exit the current shell or environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_63\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n\ngit checkout main\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Inspecting ReplicaSet Ownership Tree - Shell with kubectl tree\nDESCRIPTION: Visualizes the hierarchy of a ReplicaSet and its Pods within a namespace using 'kubectl tree', a kubectl plugin. This command requires the kubectl-tree plugin installed and lists all owned resources. Inputs are the ReplicaSet name and namespace; output is a tree-formatted listing of owners and dependents.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl tree --namespace a-team replicaset silly-demo\n```\n\n----------------------------------------\n\nTITLE: CI Workflow for Automated Build, Package, and Push - GitHub Actions YAML\nDESCRIPTION: This YAML describes a GitHub Actions workflow for CI/CD, automating code checkout, plugin installation, Docker image build/push, Helm chart packaging/publishing, and Git commit/push for a Backstage-based project. Dependencies include actions such as 'checkout', 'setup-qemu', 'setup-buildx', and 'docker/build-push-action'. Key parameters are environment variables like TAG and image/chart repository locations. Inputs are branch pushes; outputs are built images, versioned Helm chart artifacts, and updated commits. It requires a GitHub repository and appropriate secrets for authentication.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\nrun-name: ci\non:\n  push:\n    branches:\n      - main\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    env:\n      TAG: 0.0.${{ github.run_number }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Plugins\n        run: |\n          yarn --cwd src/packages/backend add @backstage/plugin-scaffolder-backend-module-github\n          yarn --cwd src/packages/backend add @backstage/plugin-catalog-backend-module-github\n          cp packages/backend/src/index.ts src/packages/backend/src/index.ts\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      - name: Login to ghcr\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: ${{ github.actor }}\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Build and push container image\n        uses: docker/build-push-action@v6\n        with:\n          push: true\n          tags: ghcr.io/${{ github.repository }}:${{ env.TAG }},ghcr.io/${{ github.repository }}:latest\n          build-args: |\n            SRC=src\n          cache-from: type=registry,ref=user/app:latest\n          cache-to: type=inline\n          platforms: linux/amd64,linux/arm64\n      - name: Package Helm\n        run: |\n          env\n          yq --inplace \".version = \\\"${{ env.TAG }}\\\"\" chart/Chart.yaml\n          yq --inplace \".appVersion = \\\"${{ env.TAG }}\\\"\" chart/Chart.yaml\n          helm package chart\n          helm push backstage-demo-${{ env.TAG }}.tgz oci://ghcr.io/${{ github.repository }}\n      - name: Publish Helm\n        uses: actions/upload-artifact@v4\n        with:\n          name: backstage-demo-helm\n          path: backstage-demo-${{ env.TAG }}.tgz\n      - name: Commit changes\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Release ${{ env.TAG }} [skip ci]\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Installing Traefik Ingress Controller with Helm\nDESCRIPTION: This Helm command installs Traefik as the Ingress controller in the 'traefik' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install traefik traefik \\\n    --repo https://helm.traefik.io/traefik \\\n    --namespace traefik --create-namespace --wait\n```\n\n----------------------------------------\n\nTITLE: Argo Rollout Configuration with Istio Traffic Routing\nDESCRIPTION: YAML definition of an Argo Rollout resource that implements canary deployment using Istio for traffic routing. It defines services for stable and canary versions, references VirtualServices, and specifies progressive weight adjustments with pauses between steps.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: silly-demo\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      canaryService: silly-demo-canary\n      stableService: silly-demo-stable\n      trafficRouting:\n        istio:\n          virtualServices:\n            - name: silly-demo-1\n              routes:\n                - primary\n            - name: silly-demo-2\n              routes:\n                - secondary\n      steps:\n        - setWeight: 20\n        - pause: {}\n        - setWeight: 40\n        - pause: {duration: 10}\n        - setWeight: 60\n        - pause: {duration: 10}\n        - setWeight: 80\n        - pause: {duration: 10}\n  revisionHistoryLimit: 2\n  selector:\n    matchLabels:\n      app: silly-demo\n  workloadRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: silly-demo\n```\n\n----------------------------------------\n\nTITLE: Example Output of Tracing Crossplane SQL Claim\nDESCRIPTION: Displays the output structure from tracing a Crossplane `SQLClaim`. It shows the claim itself, the composite `SQL` resource, and underlying managed resources like `DatabaseInstance`, `User`, and associated `ProviderConfig` references, along with their synchronization and readiness status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nNAME                                           SYNCED READY STATUS\nSQLClaim/crossplane-gh-demo-db (a-team)        True   True  Available\n└─ SQL/crossplane-gh-demo-db-vscxp             True   True  Available\n   ├─ ProviderConfig/crossplane-gh-demo-db-sql -      -       \n   ├─ ProviderConfig/crossplane-gh-demo-db-sql -      -       \n   ├─ Object/crossplane-gh-demo-db-secret      True   True  Available\n   ├─ ProviderConfig/crossplane-gh-demo-db     -      -       \n   ├─ DatabaseInstance/crossplane-gh-demo-db   True   True  Available\n   └─ User/crossplane-gh-demo-db               True   True  Available\n```\n\n----------------------------------------\n\nTITLE: Defining Argo Rollouts Canary Strategy in YAML\nDESCRIPTION: This YAML manifest defines an Argo Rollouts `Rollout` resource named `silly-demo`. It configures a canary deployment strategy with specific steps (`setWeight`, `pause`) to gradually shift traffic. The `workloadRef` points to the `silly-demo` Deployment, indicating that this Rollout resource manages that Deployment. The initial pause (`pause: {}`) requires manual intervention to proceed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: silly-demo\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      steps:\n        - setWeight: 20\n        - pause: {}\n        - setWeight: 40\n        - pause: {duration: 10}\n        - setWeight: 60\n        - pause: {duration: 10}\n        - setWeight: 80\n        - pause: {duration: 10}\n  revisionHistoryLimit: 2\n  selector:\n    matchLabels:\n      app: silly-demo\n  workloadRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: silly-demo\n```\n\n----------------------------------------\n\nTITLE: Asserting Filtered Resource References in SQL Resource using Chainsaw YAML\nDESCRIPTION: This YAML snippet defines assertions for an 'SQL' resource within a Chainsaw test, likely the content of 'assert-db.yaml'. It validates the 'spec.parameters.databases' and uses Chainsaw's filtering capabilities (JMESPath-like syntax `(resourceRefs[?kind == 'Database'])`) to specifically assert the state of newly added 'Database' kind resources within the 'resourceRefs' array, without needing to list all existing refs. It also demonstrates dynamic name generation using the 'join' function and a variable `$hyperscaler`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQL\nmetadata:\n  labels:\n    crossplane.io/claim-name: my-db\nspec:\n  parameters:\n    databases:\n      - db-01\n      - db-02\n      - db-03\n  (resourceRefs[?kind == 'Database']):\n  - apiVersion: postgresql.sql.crossplane.io/v1alpha1\n    name: (join('-', ['my-db', $hyperscaler, 'db-01']))\n  - apiVersion: postgresql.sql.crossplane.io/v1alpha1\n    name: (join('-', ['my-db', $hyperscaler, 'db-02']))\n  - apiVersion: postgresql.sql.crossplane.io/v1alpha1\n    name: (join('-', ['my-db', $hyperscaler, 'db-03']))\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying Earthly Build and Push Output to ttl.sh\nDESCRIPTION: Shows the detailed console output from running the `earthly --push` command targeting `ttl.sh`. It includes build steps, caching information, dependency downloads during the `+binary` stage, image saving, and the final push summary confirming images were successfully pushed to the specified `ttl.sh` repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n Init 🚀\n—————————————————————————————————————————————————————\n\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\n\n Build 🔧\n—————————————————————————————————————————————————————\n\n              logbus | Setting organization \"\" and project \"\"\n              +image | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n              +image | --> FROM +base\ng/v/silly-demo-earthly:0.0.5 | --> Load metadata ghcr.io/vfarcic/silly-demo-earthly:0.0.5 linux/arm64\n              +image | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n              +image | --> BUILD +binary\n             +binary | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n             +binary | --> FROM +base\n              +image | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n              +image | --> SAVE IMAGE ttl.sh/silly-demo-20240526015336:0.0.1 ttl.sh/silly-demo-20240526015336:latest\n               +base | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n               +base | --> FROM ghcr.io/vfarcic/silly-demo-earthly:0.0.5\n               +base | [----------] 100% FROM ghcr.io/vfarcic/silly-demo-earthly:0.0.5\n               +base | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n               +base | *cached* --> WORKDIR /go-workdir\n             +binary | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n             +binary | *cached* --> COPY go.mod go.sum vendor .\n             +binary | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n             +binary | *cached* --> COPY *.go .\n             +binary | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n             +binary | --> RUN go mod vendor\n             +binary | go: downloading github.com/bytedance/sonic v1.9.1\n             +binary | go: downloading github.com/chenzhuoyu/base64x v0.0.0-20221115062448-fe3a3abad311\n             +binary | go: downloading github.com/twitchyliquid64/golang-asm v0.15.1\n             +binary | go: downloading github.com/klauspost/cpuid/v2 v2.2.4\n             +binary | go: downloading github.com/gin-gonic/gin v1.9.1\n             +binary | go: downloading github.com/go-pg/pg/v10 v10.11.2\n             +binary | go: downloading github.com/go-resty/resty/v2 v2.10.0\n             +binary | go: downloading github.com/stretchr/testify v1.8.3\n             +binary | go: downloading golang.org/x/arch v0.3.0\n             +binary | go: downloading github.com/gabriel-vasile/mimetype v1.4.2\n             +binary | go: downloading golang.org/x/net v0.17.0\n             +binary | go: downloading github.com/goccy/go-json v0.10.2\n             +binary | go: downloading github.com/go-playground/validator/v10 v10.14.0\n             +binary | go: downloading github.com/pelletier/go-toml/v2 v2.0.8\n             +binary | go: downloading github.com/ugorji/go/codec v1.2.11\n             +binary | go: downloading google.golang.org/protobuf v1.30.0\n             +binary | go: downloading github.com/gin-contrib/sse v0.1.0\n             +binary | go: downloading github.com/mattn/go-isatty v0.0.19\n             +binary | go: downloading github.com/go-pg/zerochecker v0.2.0\n             +binary | go: downloading github.com/jinzhu/inflection v1.0.0\n             +binary | go: downloading github.com/vmihailenco/msgpack/v5 v5.3.4\n             +binary | go: downloading github.com/vmihailenco/tagparser v0.1.2\n             +binary | go: downloading mellium.im/sasl v0.3.1\n             +binary | go: downloading github.com/tmthrgd/go-hex v0.0.0-20190904060850-447a3041c3bc\n             +binary | go: downloading github.com/vmihailenco/bufpool v0.1.11\n             +binary | go: downloading github.com/go-playground/locales v0.14.1\n             +binary | go: downloading golang.org/x/sys v0.13.0\n             +binary | go: downloading github.com/pmezard/go-difflib v1.0.0\n             +binary | go: downloading github.com/go-playground/universal-translator v0.18.1\n             +binary | go: downloading github.com/leodido/go-urn v1.2.4\n             +binary | go: downloading golang.org/x/crypto v0.14.0\n             +binary | go: downloading golang.org/x/text v0.13.0\n             +binary | go: downloading github.com/vmihailenco/tagparser/v2 v2.0.0\n             +binary | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n             +binary | --> RUN GOOS=linux GOARCH=amd64 go build --mod vendor -o silly-demo\n              +image | image=silly-demo-20240526015336 registry=ttl.sh tag=0.0.1\n              +image | *cached* --> COPY +binary/silly-demo /usr/local/bin/silly-demo\n              output | --> exporting outputs\n              output | [----------] 100% exporting outputs\n              output | --> exporting outputs\n\n Push Summary ⏪️\n—————————————————————————————————————————————————————\n\nPushed image github.com/vfarcic/silly-demo:earthly+image as ttl.sh/silly-demo-20240526015336:0.0.1\nPushed image github.com/vfarcic/silly-demo:earthly+image as ttl.sh/silly-demo-20240526015336:latest\n\n Local Output Summary 🎁\n—————————————————————————————————————————————————————\n\nImage +image output as ttl.sh/silly-demo-20240526015336:0.0.1\nImage +image output as ttl.sh/silly-demo-20240526015336:latest\n\n\n========================== 🌍 Earthly Build  ✅ SUCCESS ==========================\n\n🛰️ Reuse cache between CI runs with Earthly Satellites! 2-20X faster than without cache. Generous free tier https://cloud.earthly.dev\n```\n\n----------------------------------------\n\nTITLE: Example Output of Inspektor Gadget Deployment (Shell)\nDESCRIPTION: Shows the typical log output generated when successfully deploying Inspektor Gadget using `kubectl gadget deploy`. It confirms the creation of necessary Kubernetes resources like Namespaces, ServiceAccounts, RBAC roles, DaemonSets, and CRDs, and waits for the gadget pods to become ready.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nCreating Namespace/gadget...\nCreating ServiceAccount/gadget...\nCreating ClusterRole/gadget-cluster-role...\nCreating ClusterRoleBinding/gadget-cluster-role-binding...\nCreating Role/gadget-role...\nCreating RoleBinding/gadget-role-binding...\nCreating DaemonSet/gadget...\nCreating CustomResourceDefinition/traces.gadget.kinvolk.io...\nWaiting for gadget pod(s) to be ready...\n1/1 gadget pod(s) ready\nRetrieving Gadget Catalog...\nInspektor Gadget successfully deployed\n```\n\n----------------------------------------\n\nTITLE: Creating Daily Backup Schedule\nDESCRIPTION: Command to create a daily backup schedule using Velero CLI\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nvelero schedule create daily --schedule \"@daily\"\n```\n\n----------------------------------------\n\nTITLE: Viewing the Istio VirtualService Configuration After Rollout Update\nDESCRIPTION: Command to retrieve the current VirtualService configuration after the Rollout has updated it. Shows how Argo Rollouts automatically adjusts the traffic weights between stable and canary services.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get virtualservice silly-demo-1 \\\n    --output yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Helm Values for Ollama AI Model Deployment with GPU Support\nDESCRIPTION: Command to display the Helm values YAML file for Ollama AI model deployment with GPU support configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncat ollama-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Deploying a Database with KubeVela\nDESCRIPTION: Command to deploy a database application in the production environment. This demonstrates how KubeVela can be used to deploy infrastructure components alongside application services with environment-specific settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nvela up --file db-google.yaml --env prod\n```\n\n----------------------------------------\n\nTITLE: Verifying Files in New Pod's Mounted Volume\nDESCRIPTION: This command re-runs 'kubectl exec' to list files in the '/cache' directory, but this time targets the *new* pod automatically created by the Deployment after the previous one was deleted. It checks if the data persisted on the volume.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- ls /cache/\n```\n\n----------------------------------------\n\nTITLE: Defining a HorizontalPodAutoscaler (HPA) for CPU/Memory (yaml)\nDESCRIPTION: Defines a Kubernetes HorizontalPodAutoscaler (HPA) resource named 'silly-demo' using YAML. It targets the 'silly-demo' Deployment and configures autoscaling based on both CPU and memory utilization, aiming for an average utilization of 80%. The number of replicas will be scaled between a minimum of 2 and a maximum of 5.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: silly-demo\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: silly-demo\n  minReplicas: 2\n  maxReplicas: 5\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 80\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n```\n\n----------------------------------------\n\nTITLE: Filtering and Reverse Sorting Files by Size with Nushell\nDESCRIPTION: This multi-line Nushell command builds upon the previous example. It lists directory contents (`ls`), filters for files (`where type == \"file\"`), filters for files larger than 1kb (`where size > 1kb`), sorts them by size ascending (`sort-by size`), and then reverses the sort order (`reverse`) to display the largest files first. It uses the `ls`, `where`, `sort-by`, and `reverse` Nushell commands. Input is the directory listing, output is a table of files meeting the criteria, sorted by size descending.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nls\n    | where type == \"file\"\n    | where size > 1kb\n    | sort-by size\n    | reverse\n```\n\n----------------------------------------\n\nTITLE: Defining Patch Functions and Path Variables in KCL\nDESCRIPTION: This snippet provides a reusable KCL lambda function, Patches, to automatically generate standard patch objects for Crossplane resources. The lambda accepts a name and outputs a preformatted list of patch definitions for consistent metadata and labeling. The ManifestSpec variable shortens deep field access, aiding maintainability and avoiding typos when referencing spec path strings. These helpers require no runtime dependencies beyond KCL and Crossplane convention. Users must provide target names/fields when using these templates.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: KCL\nCODE:\n```\nPatches = lambda name: str -> [] {\n    [\n        {\n            fromFieldPath = \"spec.id\"\n            toFieldPath = \"metadata.name\"\n            transforms = [{type = \"string\", string = { fmt = \"%s-{}\".format(name)}}]\n        },\n        {fromFieldPath = \"spec.id\", toFieldPath = \"spec.forProvider.manifest.metadata.name\"},\n        {fromFieldPath = \"spec.parameters.namespace\", toFieldPath = \"spec.forProvider.manifest.metadata.namespace\"},\n        {fromFieldPath = \"spec.id\", toFieldPath = \"spec.forProvider.manifest.metadata.labels.app\"},\n    ]\n}\n\nManifestSpec = \"spec.forProvider.manifest.spec\"\n\n```\n\n----------------------------------------\n\nTITLE: Applying Ingress Resource in Kubernetes\nDESCRIPTION: This command applies the Ingress resource YAML to the 'a-team' namespace in Kubernetes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename service/ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: AWS Chainsaw Test Configuration\nDESCRIPTION: YAML configuration defining test steps and bindings for AWS resources\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: aws\nspec:\n  template: true\n  bindings:\n    - name: hyperscaler\n      value: aws\n    - name: cluster\n      value: eks\n  steps:\n    - try:\n        - apply:\n            file: ../common/install.yaml\n        ...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Resource Status\nDESCRIPTION: This shell command uses `kubectl` to list all resources (pods, services, deployments, replicasets, etc.) as well as Ingress resources within the `a-team` namespace. It's used to check the status and verify the successful deployment of the application components.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Listing CronJobs in a Namespace\nDESCRIPTION: Command to list all CronJobs in the a-team namespace, showing their schedules and statuses.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_58\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get cronjobs\n```\n\n----------------------------------------\n\nTITLE: Comparing Two Deployment YAML File Versions (Shell)\nDESCRIPTION: This command uses `diff` to compare two versions of a Deployment manifest (`deployment/base.yaml` and `deployment/image.yaml`). The purpose is to highlight the specific change made, which in this context is updating the container image tag.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ndiff deployment/base.yaml deployment/image.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Crossplane v2 Preview via Helm (Shell/Helm)\nDESCRIPTION: These Helm commands demonstrate how to install or upgrade to a preview version of Crossplane (like v2 during its preview phase). It involves adding the `crossplane-preview` Helm repository and using `helm upgrade --install` with the `--devel` flag. These commands are illustrative and assume Crossplane is already set up.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nhelm repo add crossplane-preview https://charts.crossplane.io/preview\n\nhelm upgrade --install crossplane crossplane-preview/crossplane \\\n    --namespace crossplane-system --create-namespace \\\n    --wait --devel\n```\n\n----------------------------------------\n\nTITLE: Explaining Custom Resources Schema Recursively - kubectl - Shell\nDESCRIPTION: This kubectl command recursively describes the schema for the 'appclaims' custom resource in the Kubernetes cluster. It demonstrates API discoverability and allows users to inspect available fields, their types, and requirements. Prerequisites: kubectl must be installed and configured for the cluster where the CRD has been created. Input is the resource type (appclaims); output is a detailed recursive schema explanation including field names, types, and whether they are required. Limitation: If the resource does not exist, kubectl will return an error.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl explain appclaims --recursive\n```\n\n----------------------------------------\n\nTITLE: Defining a ResourceGroup with Conditional Ingress in YAML\nDESCRIPTION: This YAML defines a kro ResourceGroup that includes a conditional Ingress resource. It adds 'ingress.enabled' and 'ingress.host' parameters to the schema and uses 'includeWhen' to conditionally include the Ingress resource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kro.run/v1alpha1\nkind: ResourceGroup\nmetadata:\n  name: application\nspec:\n  schema:\n    apiVersion: v1alpha1\n    kind: Application\n    spec:\n      ...\n      ingress:\n        enabled: boolean | default=false\n        host: string | default=\"devopstoolkit.live\"\n  resources:\n    ...\n    - id: ingress\n      includeWhen:\n        - ${schema.spec.ingress.enabled}\n      template:\n        apiVersion: networking.k8s.io/v1\n        kind: Ingress\n        metadata:\n          labels:\n            app.kubernetes.io/name: ${schema.spec.name}\n          name: ${schema.spec.name}\n        spec:\n          ingressClassName: nginx\n          rules:\n          - host: ${schema.spec.ingress.host}\n            http:\n              paths:\n              - backend:\n                  service:\n                    name: ${schema.spec.name}\n                    port:\n                      number: ${schema.spec.port}\n                path: /\n                pathType: ImplementationSpecific\n```\n\n----------------------------------------\n\nTITLE: Retrieving Gateway Status in Kubernetes\nDESCRIPTION: This command retrieves the status of Gateway resources in the 'a-team' namespace, showing the assigned IP address and programming status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get gateways\n```\n\n----------------------------------------\n\nTITLE: Executing the Earthly `all` Target with Push and Secrets\nDESCRIPTION: Executes the `+all` target defined in the `Earthfile` using the `earthly` command. It includes the `--push` flag to ensure artifacts are pushed, passes required secrets (`cosignpassword`, `cosignkey`, `password`) using the `--secret` flag (reading values from environment variables like `$COSIGN_PASSWORD` and `$COSIGN_PRIVATE_KEY`, or providing them directly like `password=IWillNeverTell`), and supplies necessary arguments (`--tag`, `--registry`, `--image`) required by the `all` target and its dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nearthly --push \\\n    --secret cosignpassword=$COSIGN_PASSWORD \\\n    --secret cosignkey=$COSIGN_PRIVATE_KEY \\\n    --secret password=IWillNeverTell \\\n    +all --tag 9.9.9 \\\n    --registry ttl.sh --image $IMAGE\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane SQLClaim for PostgreSQL with Secret Propagation (YAML)\nDESCRIPTION: This Kubernetes manifest defines a `SQLClaim` resource using the `devopstoolkitseries.com/v1alpha1` API. It requests a PostgreSQL database (version 14.10, medium size) on AWS. Crucially, the `spec.parameters.secrets` section configures secret management: pulling the root password from AWS Secrets Manager (`pullRootPasswordKey`), pushing the generated database credentials secret back to the specified store (`pushToStore: true`), and pulling this secret into the `production` namespace of the `a-team-cluster` (`pullToCluster`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: my-db\nspec:\n  id: my-db\n  compositionSelector:\n    matchLabels:\n      provider: aws\n      db: postgresql\n  parameters:\n    version: \"14.10\"\n    size: medium\n    databases:\n      - my-db\n    secrets:\n      storeName: aws\n      pullRootPasswordKey: db-password\n      pushToStore: true\n      pullToCluster: a-team-cluster\n      pullToClusterNamespace: production\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Basic Application Resources\nDESCRIPTION: YAML configuration defining basic Kubernetes resources including a Deployment with resource limits, an Ingress for routing, and a ClusterIP Service.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      shareProcessNamespace: true\n      containers:\n      - image: ghcr.io/vfarcic/silly-demo:1.4.327\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8080\n        name: silly-demo\n        ports:\n        - containerPort: 8080\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8080\n        resources:\n          limits:\n            cpu: 500m\n            memory: 512Mi\n          requests:\n            cpu: 250m\n            memory: 256Mi\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ingressClassName: nginx\n  rules:\n  - host: silly-demo.127.0.0.1.nip.io\n    http:\n      paths:\n      - backend:\n          service:\n            name: silly-demo\n            port:\n              number: 8080\n        path: /\n        pathType: ImplementationSpecific\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ports:\n  - name: http\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: silly-demo\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Output Listing Storage Classes (Highlighting Default)\nDESCRIPTION: This output shows the available Storage Classes in the cluster. One class is marked with '(default)', indicating it will be used for Persistent Volume Claims that do not explicitly specify a 'storageClassName'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: text\nCODE:\n```\nNAME                  PROVISIONER        RECLAIMPOLICY VOLUMEBINDINGMODE    ALLOW... AGE\nazurefile             file.csi.azure.com Delete        Immediate            true     39m\nazurefile-csi         file.csi.azure.com Delete        Immediate            true     39m\nazurefile-csi-premium file.csi.azure.com Delete        Immediate            true     39m\nazurefile-premium     file.csi.azure.com Delete        Immediate            true     39m\ndefault (default)     disk.csi.azure.com Delete        WaitForFirstConsumer true     39m\nmanaged               disk.csi.azure.com Delete        WaitForFirstConsumer true     39m\nmanaged-csi           disk.csi.azure.com Delete        WaitForFirstConsumer true     39m\nmanaged-csi-premium   disk.csi.azure.com Delete        WaitForFirstConsumer true     39m\nmanaged-premium       disk.csi.azure.com Delete        WaitForFirstConsumer true     39m\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Cluster Claim Status in Kubernetes\nDESCRIPTION: Runs the Crossplane beta trace command to check the status of the 'cluster' claim in the 'a-team' namespace, showing the provisioning status of all related resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace clusterclaim cluster --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Defining Backend and Frontend Applications in Crossplane\nDESCRIPTION: YAML definition for backend and frontend applications using Crossplane custom resources, specifying image, scaling, and networking configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1beta1\nkind: App\nmetadata:\n  name: silly-demo\nspec:\n  image: ghcr.io/vfarcic/silly-demo\n  tag: v1.5.38\n  port: 8080\n  host: silly-demo.127.0.0.1.nip.io\n  scaling:\n    enabled: true\n    min: 2\n    max: 5\n  crossplane:\n    compositionSelector:\n      matchLabels:\n        type: backend\n        location: local\n---\napiVersion: devopstoolkit.live/v1beta1\nkind: App\nmetadata:\n  name: silly-demo-frontend\nspec:\n  image: ghcr.io/vfarcic/silly-demo-frontend\n  tag: v1.5.38\n  port: 3000\n  host: silly-demo-frontend.127.0.0.1.nip.io\n  frontend:\n    backendUrl: http://silly-demo.127.0.0.1.nip.io\n  crossplane:\n    compositionSelector:\n      matchLabels:\n        type: frontend\n        location: local\n```\n\n----------------------------------------\n\nTITLE: Defining an ExternalSecret within a Crossplane Object (KCL)\nDESCRIPTION: This KCL snippet illustrates the older method (pre-Crossplane v2) of composing Kubernetes resources within Crossplane. It shows an `ExternalSecret` resource being defined within the `forProvider.manifest` field of a `kubernetes.crossplane.io/v1alpha2` `Object`. This wrapping was necessary because Crossplane could previously only compose its own Managed Resources directly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: kcl\nCODE:\n```\n...\n        apiVersion = \"kubernetes.crossplane.io/v1alpha2\"\n        kind = \"Object\"\n        metadata = {\n            name = oxr.spec.id + \"-secret-pull\"\n            annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = oxr.spec.id + \"-secret-pull\"\n            }\n        }\n        spec = {\n            providerConfigRef.name = oxr.spec.id + \"-sql\"\n            forProvider.manifest = {\n                apiVersion = \"external-secrets.io/v1beta1\"\n                kind = \"ExternalSecret\"\n                ...\n            }\n        }\n...\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Repository for Port CRDs Demo\nDESCRIPTION: This snippet shows the process of forking a GitHub repository, cloning it locally, and setting it as the default repository using GitHub CLI. It also includes instructions for enabling GitHub Actions and setting up repository secrets.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngh repo fork vfarcic/port-crds-demo --clone --remote\n\ncd port-crds-demo\n\ngh repo set-default\n```\n\n----------------------------------------\n\nTITLE: SQLClaim Configuration for AWS PostgreSQL in Kubernetes\nDESCRIPTION: A Kubernetes manifest for a SQLClaim custom resource that defines a PostgreSQL database instance in AWS. The configuration includes database parameters like size and version, along with composition references for AWS implementation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: silly-demo\n  namespace: a-team\nspec:\n  compositeDeletePolicy: Background\n  compositionRef:\n    name: aws-postgresql\n  compositionRevisionRef:\n    name: aws-postgresql-28b1771\n  compositionUpdatePolicy: Automatic\n  id: silly-demo\n  parameters:\n    size: medium\n    version: \"16.2\"\n  resourceRef:\n    apiVersion: devopstoolkitseries.com/v1alpha1\n    kind: SQL\n    name: silly-demo-q4qvx\n```\n\n----------------------------------------\n\nTITLE: Building and Packaging a Go Application with Docker Multi-Stage Build\nDESCRIPTION: Dockerfile that uses multi-stage building to compile a Go application and package it into a minimal scratch container image. It includes configuration for environment variables and exposes port 8080.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM golang:1.23.3-alpine AS build\nRUN mkdir /src\nWORKDIR /src\nADD ./go.mod .\nADD ./go.sum .\nADD ./*.go ./\nRUN GOOS=linux GOARCH=amd64 go build -o app\nRUN chmod +x app\nFROM scratch\nARG VERSION\nENV VERSION=$VERSION\nENV DB_PORT=5432 DB_USERNAME=postgres DB_NAME=my-db\nCOPY --from=build /src/app /usr/local/bin/app\nEXPOSE 8080\nCMD [\"app\"]\n```\n\n----------------------------------------\n\nTITLE: Displaying Job Resource Tree\nDESCRIPTION: Command to view the hierarchical resource structure of the created Job, showing its relationship with the pod it created.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\nkubectl tree --namespace a-team job silly-demo\n```\n\n----------------------------------------\n\nTITLE: Setting Up a Local Kubernetes Cluster and Prep Workloads (sh)\nDESCRIPTION: These shell commands set up a local Kubernetes cluster using 'kind', install the NGINX Ingress controller, wait for its readiness, create an application namespace, and prepare environment variables and Ingress configuration for demo workloads. Dependencies include Docker, kubectl, yq, kind, and network access to retrieve manifests. They configure networking for two demo services ('silly-demo' and 'pinger'), apply multi-file Kubernetes deployments, and ensure the environment is correctly bootstrapped for further experimentation with Inspektor Gadget.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkind create cluster --config kind.yaml\n\nkubectl apply \\\n    --filename https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n\nkubectl --namespace ingress-nginx wait \\\n    --for condition=Available deployment ingress-nginx-controller\n\nkubectl create namespace a-team\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport INGRESS_HOST=127.0.0.1\n```\n\nLANGUAGE: sh\nCODE:\n```\nexport INGRESS_CLASS=$(kubectl get ingressclasses \\\n    --output jsonpath=\"{.items[0].metadata.name}\")\n\nyq --inplace \".spec.ingressClassName = \\\"$INGRESS_CLASS\\\"\" \\\n    silly-demo/ingress.yaml\n    \nyq --inplace \\\n    \".spec.rules[0].host = \\\"silly-demo.$INGRESS_HOST.nip.io\\\"\" \\\n    silly-demo/ingress.yaml\n\nyq --inplace \".spec.ingressClassName = \\\"$INGRESS_CLASS\\\"\" \\\n    pinger/ingress.yaml\n    \nyq --inplace \\\n    \".spec.rules[0].host = \\\"pinger.$INGRESS_HOST.nip.io\\\"\" \\\n    pinger/ingress.yaml\n\nkubectl --namespace a-team apply --filename silly-demo/\n\nkubectl --namespace a-team apply --filename pinger/\n\nkubectl --namespace a-team apply --filename caw/\n```\n\n----------------------------------------\n\nTITLE: Applying the KEDA ScaledObject Manifest - Shell\nDESCRIPTION: Applies the KEDA ScaledObject manifest to the 'a-team' namespace, creating or updating the resource in Kubernetes. Requires kubectl configured with permissions for the target namespace and access to the specified YAML file. On success, KEDA will begin monitoring and scaling according to the manifest.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename scale/keda.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Argo Rollouts Manifest using Shell\nDESCRIPTION: This command uses `cat` to display the contents of the Argo Rollouts `Rollout` manifest file located at `kustomize/overlays/simple/rollout.yaml`. This file defines the canary deployment strategy.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncat kustomize/overlays/simple/rollout.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Backstage Ingress Settings\nDESCRIPTION: YAML configuration for Backstage ingress settings that defines base URLs for both frontend and backend components using environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napp:\n  baseUrl: ${BACKSTAGE_HOST}\nbackend:\n  baseUrl: ${BACKSTAGE_HOST}\n```\n\n----------------------------------------\n\nTITLE: Viewing Backend Application Resource Hierarchy\nDESCRIPTION: Command using kubectl tree to display the hierarchy of Kubernetes resources created by the backend application composition, including HorizontalPodAutoscaler for scaling.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl tree --namespace a-team app silly-demo\n```\n\n----------------------------------------\n\nTITLE: Applying and Retrieving NodePort Service in Kubernetes\nDESCRIPTION: These commands apply the NodePort Service configuration and retrieve the list of services in the specified namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename service/node-port.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get services\n```\n\n----------------------------------------\n\nTITLE: Defining Devbox Project Configuration in JSON\nDESCRIPTION: This JSON structure represents the configuration for a Devbox environment. It lists required software packages (like `kind`, `gh`, `kubectl`) with specific versions under the `packages` key. It also defines an `init_hook` within the `shell` section to run commands (like `bat README.md`) upon shell startup, and specifies named custom `scripts` (e.g., `cluster-create`, `test`) for easy execution of common project tasks.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"kind@0.22.0\",\n    \"gh@2.44.1\",\n    \"kubectl@1.29.2\",\n    \"bat@0.24.0\",\n    \"timoni@0.17.0\",\n    \"upbound@0.24.1\",\n    \"yq-go@4.41.1\",\n    \"go-task@3.31.0\",\n    \"kubernetes-helm@3.14.1\"\n  ],\n  \"shell\": {\n    \"init_hook\": [\n      \"bat README.md\"\n    ],\n    \"scripts\": {\n      \"cluster-create\": [ \"task cluster-create\" ],\n      \"cluster-destroy\": [ \"task cluster-destroy\" ],\n      \"package-publish\": [ \"task package-publish\" ],\n      \"test\": [ \"task test\" ],\n      \"test-watch\": [ \"task test-watch\" ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Pods as YAML and Piping to YQ - Shell\nDESCRIPTION: Retrieves all Pod objects as YAML in the 'a-team' namespace and sends the output through 'yq' for formatting. Requires both 'kubectl' and 'yq' installed and configured. Outputs full YAML describing Pod specifications and statuses, revealing fields such as IP allocation, useful for diagnostics.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pod --output yaml | yq .\n```\n\n----------------------------------------\n\nTITLE: Deploying Kubernetes Application Manifest (Shell)\nDESCRIPTION: This `kubectl` command applies the resource definitions contained within the `app.yaml` file to the `a-team` namespace in the Kubernetes cluster. This creates or updates the Deployment, Service, Ingress, and AtlasSchema resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename app.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Initial Kustomize Overlay with kubectl in Shell\nDESCRIPTION: This command uses `kubectl apply` with the `--kustomize` flag to apply the Kubernetes resources defined in the `kustomize/overlays/simple` directory to the `a-team` namespace. This initiates the deployment of the application managed by Argo Rollouts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --kustomize kustomize/overlays/simple\n```\n\n----------------------------------------\n\nTITLE: Inspecting Okteto Cluster Context (Shell)\nDESCRIPTION: This snippet calls the Okteto CLI to show or set the current context, e.g., Kubernetes cluster and namespace. Inputs may include authentication/environment context; outputs are the current Okteto context in human-readable form. Used to ensure correct development namespace and cluster targets. No dependencies beyond Okteto CLI setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\nokteto context\n```\n\n----------------------------------------\n\nTITLE: Verifying Restored Application and Data via HTTP Request\nDESCRIPTION: Uses `curl` to send an HTTP GET request to the `/videos` endpoint of the restored `silly-demo` application, accessed via the updated Ingress host (`$DOT2_INGRESS_HOST`). The JSON response is piped to `jq` for pretty-printing, confirming both application functionality and the successful restoration of data from the persistent volume.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.$DOT2_INGRESS_HOST/videos\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperscaler Provider via Interactive Function - Nushell\nDESCRIPTION: This Nushell function 'get-hyperscaler' interactively prompts the user to select a cloud provider ('google', 'aws', or 'azure'), updates the 'settings.yaml' file with the chosen provider using 'upsert', and saves the changes forcefully. Dependencies are Nushell and a writable 'settings.yaml' in the current directory. The function requires user interaction, reads and modifies YAML, and returns the selected provider as output.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: nushell\nCODE:\n```\ndef get-hyperscaler [] {\n    let hyperscaler = [google aws azure]\n        | input list $\"(ansi green_bold)Which Hyperscaler do you want to use?(ansi yellow_bold)\"\n\n    open settings.yaml\n        | upsert hyperscaler $hyperscaler\n        | save settings.yaml --force\n\n    $hyperscaler\n}\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Resource Hierarchy with kubectl-tree (Shell)\nDESCRIPTION: This command utilizes the `kubectl tree` plugin (or similar tool) to display the hierarchical relationship of Kubernetes resources for the Deployment named 'silly-demo' within the 'a-team' namespace. It shows the Deployment owning a ReplicaSet, which in turn owns several Pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl tree --namespace a-team deployment silly-demo\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resources Output\nDESCRIPTION: The output shows all Kubernetes resources created by KubeVela including pod, service, deployment, replicaset, horizontal pod autoscaler, and ingress. This demonstrates how KubeVela creates a complete application stack from a simplified definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nNAME                              READY   STATUS    RESTARTS   AGE\npod/silly-demo-864f6c8f8c-hxkwv   1/1     Running   0          3m6s\n\nNAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nservice/silly-demo   ClusterIP   10.96.77.159   <none>        8080/TCP   3m6s\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/silly-demo   1/1     1            1           3m6s\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/silly-demo-864f6c8f8c   1         1         1       3m6s\n\nNAME                                             REFERENCE               TARGETS                                     MINPODS   MAXPODS   REPLICAS   AGE\nhorizontalpodautoscaler.autoscaling/silly-demo   Deployment/silly-demo   cpu: <unknown>/80%, memory: <unknown>/80%   1         5         1          3m6s\n\nNAME                                   CLASS   HOSTS                             ADDRESS     PORTS   AGE\ningress.networking.k8s.io/silly-demo   nginx   dev.silly-demo.127.0.0.1.nip.io   localhost   80      3m6s\n```\n\n----------------------------------------\n\nTITLE: Querying Deployments Created Before a Date via Label Selector using kubectl and Clusterpedia (Shell)\nDESCRIPTION: This shell snippet queries deployments created before a specified date (e.g., 2024-01-01) using the 'search.clusterpedia.io/before' label selector. Requires Clusterpedia to track creation timestamps and label resources accordingly. Only deployments with creation times prior to the given date and included in Clusterpedia's sync are returned. If no matching results exist, output will indicate no resources found.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia get deployments --all-namespaces \\\n    --selector \"search.clusterpedia.io/before=2024-01-01\"\n```\n\n----------------------------------------\n\nTITLE: KubeVela Application Definition\nDESCRIPTION: YAML configuration for a KubeVela Application that utilizes the database component, specifying region, size, and version parameters for database deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: core.oam.dev/v1beta1\nkind: Application\nmetadata:\n  name: silly-demo-db\nspec:\n  components:\n  - name: silly-demo-db\n    type: db-google\n    properties:\n      region: us-east1\n      size: small\n      version: \"13\"\n```\n\n----------------------------------------\n\nTITLE: Example Output of kubectl gadget trace Help (Shell)\nDESCRIPTION: Displays the help text for the `kubectl gadget trace` subcommand. It details the available tracing options, such as tracing socket bindings (`bind`), capability checks (`capabilities`), DNS requests (`dns`), process execution (`exec`), network traffic (`network`), file system operations (`fsslower`, `open`), and TCP events (`tcp`, `tcpconnect`, `tcpdrop`, `tcpretrans`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nTrace and print system events\n\nUsage:\n  kubectl-gadget trace [command]\n\nAvailable Commands:\n  bind         Trace socket bindings\n  capabilities Trace security capability checks\n  dns          Trace DNS requests\n  exec         Trace new processes\n  fsslower     Trace open, read, write and fsync operations slower than a threshold\n  mount        Trace mount and umount system calls\n  network      Trace network streams\n  oomkill      Trace when OOM killer is triggered and kills a process\n  open         Trace open system calls\n  signal       Trace signals received by processes\n  sni          Trace Server Name Indication (SNI) from TLS requests\n  tcp          Trace TCP connect, accept and close\n  tcpconnect   Trace connect system calls\n  tcpdrop      Trace TCP kernel-dropped packets/segments\n  tcpretrans   Trace TCP retransmissions\n...\n\n```\n\n----------------------------------------\n\nTITLE: Argo CD ApplicationSet Configuration for Multi-Environment Deployment\nDESCRIPTION: YAML configuration for an Argo CD ApplicationSet that generates three applications (dev, pre-prod, prod) from a list generator. Each application points to a specific branch and namespace based on the environment stage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ApplicationSet\nmetadata:\n  name: silly-demo\nspec:\n  generators:\n  - list:\n      elements:\n      - stage: dev\n      - stage: pre-prod\n      - stage: prod\n  template:\n    metadata:\n      name: silly-demo-{{stage}}\n      annotations:\n        kargo.akuity.io/authorized-stage: silly-demo:{{stage}}\n    spec:\n      project: default\n      source:\n        repoURL: https://github.com/vfarcic/kargo-demo\n        targetRevision: stage/{{stage}}\n        path: .\n      destination:\n        server: https://kubernetes.default.svc\n        namespace: silly-demo-{{stage}}\n      syncPolicy:\n        syncOptions:\n        - CreateNamespace=true\n```\n\n----------------------------------------\n\nTITLE: Pre-Prod Kustomization Configuration with Ingress Patching\nDESCRIPTION: YAML configuration for the pre-prod environment that extends the base configuration and patches the Ingress resource to use an environment-specific host name.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kustomize.config.k8s.io/v1beta1\nkind: Kustomization\nresources:\n- ../../base\npatches:\n- target:\n    kind: Ingress\n    name: silly-demo\n  patch: |-\n    - op: replace\n      path: /spec/rules/0/host\n      value: silly-demo.pre-prod.127.0.0.1.nip.io\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources in Namespace (Shell)\nDESCRIPTION: This command uses `kubectl get` to list common resources (`all`), plus specific types like `ingresses`, `secrets`, and `atlasschemas`, within the `a-team` namespace. It helps verify the deployment status of the application components and associated resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses,secrets,atlasschemas\n```\n\n----------------------------------------\n\nTITLE: Sample kro Application Resource Definition\nDESCRIPTION: A YAML example of a kro Application resource that defines a simple application with an image and ingress configuration, demonstrating how kro can abstract complex Kubernetes configurations into simpler manifests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kro.run/v1alpha1\nkind: Application\nmetadata:\n  name: silly-demo\nspec:\n  name: silly-demo\n  image: ghcr.io/vfarcic/silly-demo\n  tag: \"1.4.305\"\n  ingress:\n    enabled: true\n    host: silly-demo.127.0.0.1.nip.io\n```\n\n----------------------------------------\n\nTITLE: Defining an HTTPRoute Resource in Kubernetes\nDESCRIPTION: This YAML snippet defines an HTTPRoute resource for Kubernetes Gateway API. It specifies the parent Gateway, hostname, and backend service to route traffic to.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_46\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: HTTPRoute\napiVersion: gateway.networking.k8s.io/v1beta1\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  parentRefs:\n    - kind: Gateway\n      name: http\n  hostnames:\n    - silly-demo.34.120.55.14.nip.io\n  rules:\n    - backendRefs:\n        - name: silly-demo\n          port: 8080\n```\n\n----------------------------------------\n\nTITLE: Describing a VerticalPodAutoscaler Resource using kubectl (sh)\nDESCRIPTION: Retrieves detailed information about the VerticalPodAutoscaler (VPA) resource named 'silly-demo' within the 'a-team' namespace using `kubectl describe`. This command is used to inspect the VPA's status, configuration, and resource recommendations after it has had time to analyze pod usage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team \\\n    describe verticalpodautoscaler silly-demo\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing a Development Environment with Git and Docker - Shell (sh)\nDESCRIPTION: This snippet demonstrates sequential commands for setting up a working development environment. It includes cloning the 'cncf-demo' repository, switching branches, and ensuring that Docker, Devbox, and Zellij are available and running. Commands such as 'git clone', 'devbox shell', and 'kind create cluster' are used, and dependencies include Git, Docker, Devbox, Zellij, and KinD. The expected input is a shell terminal with necessary permissions; the output is a prepared project workspace with a development Kubernetes cluster ready for use.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/cncf-demo\n\ncd cncf-demo\n\ngit pull\n\ngit fetch\n\ngit checkout nushell\n```\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\nLANGUAGE: sh\nCODE:\n```\nzellij --session nushell --layout zellij.kdl\n\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Claim Configuration\nDESCRIPTION: YAML configuration for creating a GitHub repository claim with specifications for application settings, database configuration, and GitOps integration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: GitHubClaim\nmetadata:\n  name: crossplane-gh-demo\nspec:\n  id: crossplane-gh-demo\n  parameters:\n    public: true\n    registry: ttl.sh\n    app:\n      language: go\n      host: my-repo.acme.com\n      namespace: a-team\n    db:\n      enabled: true\n      provider: google\n      version: \"13\"\n    repo:\n      user: devopsparadox\n    gitops:\n      enabled: true\n      user: devopsparadox\n      repo: crossplane-gh\n    backstage:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Basic Request Stealing Configuration for mirrord\nDESCRIPTION: JSON configuration for mirrord that enables request stealing from a staging deployment. Sets up the target deployment, network features, and agent namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"path\": \"deployment/silly-demo\",\n    \"namespace\": \"staging\"\n  },\n  \"feature\": {\n    \"network\": {\n      \"incoming\": \"steal\"\n    }\n  },\n  \"agent\": {\n    \"namespace\": \"staging\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Scaling a ReplicaSet and Displaying Ownership Tree - Shell with kubectl\nDESCRIPTION: Applies an updated ReplicaSet manifest to change the number of replicas, then displays the resultant ownership using 'kubectl tree'. Helps to visualize changes in managed Pods. Dependencies are access to kubectl, the tree plugin, and the updated manifest. Inputs are namespace and manifest filename.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename replicaset/replicas.yaml\n\nkubectl tree --namespace a-team replicaset silly-demo\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for CI with Neon Database Branching\nDESCRIPTION: Defines a GitHub Actions workflow that includes steps for unit testing, image building, database branching with Neon, deployment, and integration testing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\nrun-name: ci\non:\n  pull_request:\n    types:\n      - opened\n      - reopened\n      - synchronize\njobs:\n  ci:\n    runs-on: ubuntu-latest\n    env:\n      TAG: 0.0.${{ github.run_number }}\n      FORCE_COLOR: 1\n    steps:\n      - id: checkout\n        uses: actions/checkout@v4\n      - id: setup-qemu\n        uses: docker/setup-qemu-action@v3\n      - name: login-to-ghcr\n        run: echo \"Faking it to avoid you having to create a secret with Registry authentication\"\n      - id: install-devbox\n        uses: jetify-com/devbox-install-action@v0.12.0\n      - id: run-unit-tests\n        run: devbox run -- ./dot.nu run unit_tests\n      - name: build-image\n        run: echo \"Faking it to avoid you having to create a secret with Registry authentication\"\n      - name: update-manifests\n        run: echo \"Faking it to avoid you having to create secrets with Cosign and Registry authentication\"\n      - id: delete-database\n        uses: neondatabase/delete-branch-action@v3\n        continue-on-error: true\n        with:\n          project_id: super-darkness-76149530\n          branch: silly-demo/${{ github.event.number }}\n          api_key: ${{ secrets.NEON_API_KEY }}\n      - id: create-database\n        uses: neondatabase/create-branch-action@v5\n        with:\n          project_id: super-darkness-76149530\n          database: dot_neon\n          parent: main\n          branch_name: silly-demo/${{ github.event.number }}\n          username: dot_owner\n          api_key: ${{ secrets.NEON_API_KEY }}\n      - id: deploy-app\n        run: devbox run -- ./dot.nu deploy app ${{ steps.create-database.outputs.db_url }}\n      - id: run-integration-tests\n        run: devbox run -- ./dot.nu run integration_tests ${{ steps.create-database.outputs.db_url }}\n      - name: commit-changes\n        run: echo \"Faking it since we faked previous tasks that modified files\"\n      - name: push-changes\n        run: echo \"Faking it since we faked previous tasks that modified files\"\n```\n\n----------------------------------------\n\nTITLE: Converting kubectl Text Output to Structured Data with detect columns\nDESCRIPTION: Uses Nushell's 'detect columns' command to transform the text output of kubectl into structured table data that can be processed further.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods --all-namespaces | detect columns\n```\n\n----------------------------------------\n\nTITLE: Filtering Deployments by Cluster with Label Selector via kubectl and Clusterpedia (Shell)\nDESCRIPTION: This snippet lists all deployments in the 'a-team' namespace that exist within the specified clusters (dot-01, dot-02), using a label selector with the 'in' operator on 'search.clusterpedia.io/clusters'. This requires that Clusterpedia synchronizes and labels resources by cluster for accurate query filtering. Outputs only include deployments matching the cluster criteria.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia --namespace a-team \\\n    get deployments \\\n    --selector \"search.clusterpedia.io/clusters in (dot-01,dot-02)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Kubescape Operator via YAML\nDESCRIPTION: This YAML file configures the Kubescape operator Helm chart to enable runtime detection, sets the maximum learning period to 5 minutes, output alerts to stdout, and exports alerts to the specified Prometheus AlertManager endpoint. The clusterName is set to 'dot', and alertCRD.installDefault is enabled. No explicit dependencies aside from runtime expectation; to be referenced during Helm deployment. Key parameters: learning period, exporters, and cluster/application-specific identifiers.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nclusterName: dot\nalertCRD:\n  installDefault: true\ncapabilities:\n  runtimeDetection: enable\nnodeAgent:\n  config:\n    maxLearningPeriod: \"5m\"\n    stdoutExporter: true\n    alertManagerExporterUrls: prometheus-kube-prometheus-alertmanager.monitoring:9093\n```\n\n----------------------------------------\n\nTITLE: Destroying AWS Resources and Kubernetes Components\nDESCRIPTION: Shell script to clean up and destroy all resources created in the setup, including AWS RDS, Secrets Manager entries, and Kubernetes resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\n./destroy.sh\n```\n\n----------------------------------------\n\nTITLE: Watching GitHub Actions Workflow Progress\nDESCRIPTION: Uses the GitHub CLI to watch the progress of the CI workflow in real-time.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\ngh run watch\n```\n\n----------------------------------------\n\nTITLE: Listing ResourceGroups to Check Status\nDESCRIPTION: Kubernetes command to list all ResourceGroups in the a-team namespace and their status after applying the updated definition with PostgreSQL integration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get resourcegroups --output wide\n```\n\n----------------------------------------\n\nTITLE: Displaying Updated Deployment Manifest with PVC\nDESCRIPTION: This command displays the content of the YAML file defining an updated Kubernetes Deployment. This version is modified to use a Persistent Volume Claim instead of an ephemeral volume like 'emptyDir'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncat volume/persistent-volume.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Deployment using Manifest File\nDESCRIPTION: This command deletes the Kubernetes Deployment defined in the 'volume/persistent-volume.yaml' file from the 'a-team' namespace. This removes the application pods that were using the Persistent Volume Claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --filename volume/persistent-volume.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Dev Container Configuration (devcontainer.json) in Shell\nDESCRIPTION: This shell command uses `cat` to display the contents of the `.devcontainer/devcontainer.json` file. This file, typically generated by Devbox or created manually, defines the configuration for the Development Container environment, including build instructions and customizations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat .devcontainer/devcontainer.json\n```\n\n----------------------------------------\n\nTITLE: Defining Fermyon Spin RuntimeClass for WebAssembly\nDESCRIPTION: A Kubernetes RuntimeClass manifest that tells Kubernetes to use the Spin runtime handler for WebAssembly workloads.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: node.k8s.io/v1\nkind: RuntimeClass\nmetadata:\n  name: wasmtime-spin-v2\nhandler: spin\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Manifest for Application Deployment\nDESCRIPTION: Shows the Kubernetes manifest for deploying the application, including the updated image tag from the CI pipeline.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: AppClaim\nmetadata:\n  name: silly-demo\n  labels:\n    app-owner: vfarcic\nspec:\n  id: silly-demo\n  compositionSelector:\n    matchLabels:\n      type: backend\n      location: local\n  parameters:\n    namespace: a-team\n    image: ghcr.io/vfarcic/idp-full-demo\n    tag: 0.0.1\n    port: 8080\n    host: silly-demo.127.0.0.1.nip.io\n    ingressClassName: nginx\n    db:\n      secret: silly-demo-db\n    repository:\n      enabled: true\n      name: idp-full-app\n    ci:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Viewing KEDA ScaledObject YAML Manifest - Shell\nDESCRIPTION: Displays the content of the KEDA ScaledObject manifest using the cat command. This allows inspection of the YAML configuration which defines how KEDA will autoscale the target application. The only dependency is access to the scale/keda.yaml file in your local filesystem.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncat scale/keda.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Deployment Update and Watching Changes with Viddy (Shell)\nDESCRIPTION: This compound command first applies an updated Deployment configuration (`deployment/image.yaml`) to the 'a-team' namespace using `kubectl apply`. Upon successful application (`&&`), it uses `viddy` (a `watch` alternative) to repeatedly execute `kubectl tree` every second, allowing observation of the rolling update process as the Deployment creates a new ReplicaSet and transitions Pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename deployment/image.yaml \\\n    && viddy kubectl tree --namespace a-team \\\n    deployment silly-demo\n```\n\n----------------------------------------\n\nTITLE: Deleting Persistent Volume Claim using Manifest File\nDESCRIPTION: This command deletes the Persistent Volume Claim defined in the 'volume/persistent-volume-claim.yaml' file from the 'a-team' namespace. Depending on the Reclaim Policy of the associated PV, this might also trigger the deletion of the underlying storage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --filename volume/persistent-volume-claim.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining an ExternalSecret Directly in Composition (KCL)\nDESCRIPTION: This KCL snippet demonstrates the newer Crossplane v2 approach to resource composition. It defines an `external-secrets.io/v1beta1` `ExternalSecret` directly within the Composition, without needing the `Object` wrapper used previously. This simplifies the Composition structure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: kcl\nCODE:\n```\n...\n        apiVersion = \"external-secrets.io/v1beta1\"\n        kind = \"ExternalSecret\"\n        metadata = {\n            name = _name + \"-password\"\n            annotations = {\n                \"krm.kcl.dev/ready\" = \"True\"\n                \"krm.kcl.dev/composition-resource-name\" = _name + \"-secret-pull\"\n            }\n        }\n        ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Graceful Shutdown in Go\nDESCRIPTION: This Go code snippet demonstrates how to implement graceful shutdown by capturing system signals and allowing ongoing requests to complete before terminating the application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: go\nCODE:\n```\nfunc main() {\n\t...\n\tif len(os.Getenv(\"NO_SIGNALS\")) > 0 {\n\t\tif err := server.ListenAndServe(); !errors.Is(err, http.ErrServerClosed) {\n\t\t\tlog.Fatalf(\"HTTP server error: %v\", err)\n\t\t}\n\t} else {\n\t\tgo func() {\n\t\t\tif err := server.ListenAndServe(); !errors.Is(err, http.ErrServerClosed) {\n\t\t\t\tlog.Fatalf(\"HTTP server error: %v\", err)\n\t\t\t}\n\t\t\tlog.Println(\"Stopped serving new connections.\")\n\t\t}()\n\t\tsigChan := make(chan os.Signal, 1)\n\t\tsignal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)\n\t\t<-sigChan\n\t\tshutdownCtx, shutdownRelease := context.WithTimeout(context.Background(), 60*time.Second)\n\t\tdefer shutdownRelease()\n\t\tif err := server.Shutdown(shutdownCtx); err != nil {\n\t\t\tlog.Fatalf(\"HTTP shutdown error: %v\", err)\n\t\t}\n\t\tlog.Println(\"Graceful shutdown complete.\")\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Generating KCL Function Scaffolding using `up` CLI\nDESCRIPTION: This shell command uses `up function generate` to scaffold a KCL function structure. It creates a function named `aws` and links it to the specified Composition file (`apis/xsqls/aws.yaml`). This command typically checks dependencies, generates necessary files (like `main.k`), and updates the Composition to include a step for this new function.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nup function generate aws apis/xsqls/aws.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Resource EventSource for Kubernetes Deployments - Argo Events YAML\nDESCRIPTION: This YAML snippet sets up an Argo Events EventSource to watch for 'ADD' and 'UPDATE' events on Kubernetes deployments in the 'a-team' namespace. The configuration associates the previously created ServiceAccount and specifies the resource type and event filtering behavior. Assumes Argo Events is installed and RBAC is configured; input is an EventSource manifest and output is the creation of corresponding cloud events routed to the Event Bus whenever selected deployment events occur.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: EventSource\nmetadata:\n  name: app\nspec:\n  template:\n    serviceAccountName: argo-events\n  resource:\n    app:\n      namespace: a-team\n      group: apps\n      version: v1\n      resource: deployments\n      eventTypes:\n        - ADD\n        - UPDATE\n      filter:\n        afterStart: true\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Actions Functional Tests Workflow Definition (sh)\nDESCRIPTION: Uses the `cat` command to display the contents of the functional tests workflow file located at `.github/workflows/functional-tests.yaml`. This workflow is expected to be triggered by Argo Events.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncat .github/workflows/functional-tests.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Output of Crossplane Trace for SQLClaim\nDESCRIPTION: This text output shows a snapshot of the status hierarchy for the `silly-demo-db` `SQLClaim` as reported by `crossplane beta trace`. It lists the claim itself, the corresponding composite resource (`SQL/silly-demo-db-krxrd`), and numerous managed resources (like `InternetGateway`, `VPC`, `Instance`, `Database`, `Subnet`, etc.) along with their synchronization (`SYNCED`) and readiness (`READY`) status. The output indicates that resource creation is in progress, with many resources showing 'False' for Ready and various statuses like 'Creating' or 'ReconcileError' due to dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nNAME                                            SYNCED   READY   STATUS\nSQLClaim/silly-demo-db (a-team)                 True     False   Waiting: Claim is waiting for composite resource to become Ready\n└─ SQL/silly-demo-db-krxrd                      True     False   Creating: ...es: gateway, mainRouteTableAssociation, rdsinstance, and 14 more\n   ├─ InternetGateway/silly-demo-db             False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ MainRouteTableAssociation/silly-demo-db   False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ RouteTableAssociation/silly-demo-db-1a    False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ RouteTableAssociation/silly-demo-db-1b    False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ RouteTableAssociation/silly-demo-db-1c    False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ RouteTable/silly-demo-db                  False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ Route/silly-demo-db                       False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ SecurityGroupRule/silly-demo-db           False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ SecurityGroup/silly-demo-db               False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ Subnet/silly-demo-db-a                    False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ Subnet/silly-demo-db-b                    False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ Subnet/silly-demo-db-c                    False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   ├─ VPC/silly-demo-db                         True     False   Creating\n   ├─ ProviderConfig/silly-demo-db-sql          -        -       \n   ├─ ProviderConfig/silly-demo-db-sql          -        -       \n   ├─ Object/silly-demo-db-secret               False    -       ReconcileError: ...om referenced resource: status.atProvider.address: no such field\n   ├─ Database/silly-demo-db-db-01              False    -       ReconcileError: ... cannot get credentials Secret: Secret \"silly-demo-db\" not found\n   ├─ Database/silly-demo-db-db-02              False    -       ReconcileError: ... cannot get credentials Secret: Secret \"silly-demo-db\" not found\n   ├─ ProviderConfig/silly-demo-db              -        -       \n   ├─ SubnetGroup/silly-demo-db                 False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n   └─ Instance/silly-demo-db                    False    -       ReconcileError: ...enced field was empty (referenced resource may not yet be ready)\n```\n\n----------------------------------------\n\nTITLE: Listing Supported IDEs in Devpod - Shell\nDESCRIPTION: Lists available IDE integrations supported by Devpod via the CLI. No arguments are needed. Outputs a formatted list of IDEs with an indicator for the default selection. Useful for selecting or switching IDEs for use in the Dev Container environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndevpod ide list\n```\n\n----------------------------------------\n\nTITLE: Publishing and Subscribing to NATS Channels in Go\nDESCRIPTION: This Go code demonstrates two functions: 'natsPublish' for connecting to a NATS server and publishing messages, and 'natsSubscribe' for subscribing to channels and handling incoming messages with a user-defined response function. Requires the NATS Go client ('github.com/nats-io/nats.go') and a valid NATS server URL. Parameters include the message channel, message content, and handler functions. The publisher returns errors on failure; the subscriber listens indefinitely, responding to messages. Channel closure, subscription management, and error handling are included for robustness. Context cancellation correctly stops the subscriber loop.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: go\nCODE:\n```\n...\nfunc natsPublish(channel, message string) error {\n\tnc, err := nats.Connect(getNatsURL())\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer nc.Close()\n\tlog.Printf(\"publishing message: %s\\n\", message)\n\terr = nc.Publish(channel, []byte(message))\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n\nfunc natsSubscribe(ctx context.Context, channel string, fn NatsResponse) {\n\tnc, err := nats.Connect(getNatsURL())\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer nc.Close()\n\n\tmessages := make(chan *nats.Msg, 1000)\n\tsubscription, err := nc.ChanSubscribe(channel, messages)\n\tif err != nil {\n\t\tlog.Fatal(\"Failed to subscribe to subject:\", err)\n\t}\n\tdefer func() {\n\t\tsubscription.Unsubscribe()\n\t\tclose(messages)\n\t}()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\tlog.Println(\"exiting from the message subscriber\")\n\t\t\treturn\n\t\tcase message := <-messages:\n\t\t\tlog.Printf(\"received message: %s\\n\", string(message.Data))\n\t\t\tresponse := fn(string(message.Data))\n\t\t\tmessage.Respond([]byte(response))\n\t\t}\n\t}\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Parameters\nDESCRIPTION: Example of using the platform CLI to build a Docker image with specified tag and push settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nplatform build image 1.2.3 --push false\n```\n\n----------------------------------------\n\nTITLE: Defining a ClusterIP Service in Kubernetes YAML\nDESCRIPTION: This YAML defines a ClusterIP Service for a 'silly-demo' application, exposing port 8080 internally within the cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ports:\n  - name: http\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: silly-demo\n  type: ClusterIP\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composition with Managed Resources - YAML\nDESCRIPTION: Defines a Crossplane Composition resource that assembles several Kubernetes objects (Deployment, Service, Ingress) as Managed Resources using the Object kind. Dependencies include Crossplane with the apiextensions and a configured provider with appropriate providerConfigRef. The manifest expects base resource templates, patching via patch-and-transform, and credentials to access other clusters. Inputs are composite spec fields, and outputs are created resources. Limitation: more verbose, requires provider references even for local resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\\nkind: Composition\\nmetadata:\\n  name: app-frontend\\n  labels:\\n    type: frontend\\n    location: local\\nspec:\\n  compositeTypeRef:\\n    apiVersion: devopstoolkit.live/v1beta1\\n    kind: App\\n  mode: Pipeline\\n  pipeline:\\n    - step: patch-and-transform\\n      functionRef:\\n        name: crossplane-contrib-function-patch-and-transform\\n      input:\\n        apiVersion: pt.fn.crossplane.io/v1beta1\\n        kind: Resources\\n        ...\\n        resources:\\n          - name: deployment\\n            base:\\n              apiVersion: kubernetes.crossplane.io/v1alpha2\\n              kind: Object\\n              metadata:\\n                name: deployment\\n              spec:\\n                forProvider:\\n                  manifest:\\n                    apiVersion: apps/v1\\n                    kind: Deployment\\n                    spec:\\n                      template:\\n                        spec:\\n                          containers:\\n                            - name: main\\n                              livenessProbe:\\n                                httpGet:\\n                                  path: \"/\"\\n                              readinessProbe:\\n                                httpGet:\\n                                  path: \"/\"\\n                              resources:\\n                                limits:\\n                                  cpu: \"250m\"\\n                                  memory: \"256Mi\"\\n                                requests:\\n                                  cpu: \"125m\"\\n                                  memory: \"128Mi\"\\n                              env:\\n                                - name: BACKEND_URL\\n                providerConfigRef:\\n                  name: kubernetes-provider\\n            ...\\n          - name: service\\n            ...\\n          - name: ingress\\n            ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Kargo Git Credential Secret via Here-Document and kubectl\nDESCRIPTION: This shell snippet leverages a here-document piped to 'kubectl apply' to create a Kubernetes Secret holding Git credentials for Kargo. It uses environment variables for sensitive data (repoURL, username, password). The secret includes the required label 'kargo.akuity.io/cred-type: git'. Ensure the needed variables are set in the environment and kubectl access to the target Namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\necho \"\\napiVersion: v1\\nkind: Secret\\ntype: Opaque\\nmetadata:\\n  name: silly-demo-repo\\n  labels:\\n    kargo.akuity.io/cred-type: git\\nstringData:\\n  repoURL: ${GITHUB_REPO_URL}\\n  username: ${GITHUB_USERNAME}\\n  password: ${GITHUB_PAT}\\n\" | kubectl --namespace silly-demo apply --filename -\n```\n\n----------------------------------------\n\nTITLE: Combining Kubernetes Deployment Data from Specific Clusters using UNION ALL (SQL)\nDESCRIPTION: Retrieves deployment details (cluster name extracted from `_ctx`, `name`, `ready_replicas`, `replicas`) specifically from the `kubernetes_aks_01.kubernetes_deployment` table for the 'a-team' namespace, and combines these results with a similar query against the `kubernetes_aks_02.kubernetes_deployment` table using `UNION ALL`. This allows aggregation of data from selected sources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx -> 'connection_name' as cluster, name, ready_replicas, replicas from kubernetes_aks_01.kubernetes_deployment where namespace = 'a-team' union all select _ctx -> 'connection_name' as cluster, name, ready_replicas, replicas from kubernetes_aks_02.kubernetes_deployment where namespace = 'a-team'\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in a Neon Database Branch using psql - Shell\nDESCRIPTION: This snippet demonstrates using the 'psql' command-line tool to list all tables in the current Neon database branch. The '$NEON_CONN_DEV' environment variable must contain the connection string for the target environment. The '\\dt' parameter instructs psql to display all tables, which helps verify the state of the branch's schema. The output details all user tables available in the branch after the reset operation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npsql $NEON_CONN_DEV --command \"\\dt\"\n```\n\n----------------------------------------\n\nTITLE: Getting GitHub Repository Settings URL\nDESCRIPTION: Command to generate the URL for GitHub repository settings to configure workflow permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\necho \"https://github.com/$GITHUB_USER/idp-full-app/settings/actions\"\n```\n\n----------------------------------------\n\nTITLE: AWS Resource Definition in Pkl\nDESCRIPTION: A Pkl definition example showing how to define Crossplane Composition resources for AWS. It demonstrates Pkl syntax with key-value pairs, class definitions, and variable usage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: pkl\nCODE:\n```\n...\napiVersion = \"apiextensions.crossplane.io/v1\"\nkind       = \"Composition\"\n...\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane SQLClaim Resource (Shell)\nDESCRIPTION: This command utilizes the `crossplane` CLI with the beta `trace` subcommand to investigate the resources managed by the `SQLClaim` named 'silly-demo-db' in the 'staging' namespace. It helps understand the underlying infrastructure components provisioned by Crossplane for the database, such as the managed PostgreSQL instance, network, router, and schema.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace sqlclaim silly-demo-db --namespace staging\n```\n\n----------------------------------------\n\nTITLE: Sending Multiple Test Requests with Curl in Shell\nDESCRIPTION: A shell loop that sends 20 HTTP requests to a service called 'silly-demo' to test traffic distribution in an Istio-managed environment. The environment variable ISTIO_HOST is used to form the complete URL.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nfor i in {1..20}; do\n    curl \"http://silly-demo.$ISTIO_HOST\"\ndone\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Secrets in Application Cluster (Shell)\nDESCRIPTION: Lists all standard Kubernetes Secrets within the `production` namespace of the target application cluster. This command verifies that the `my-db` ExternalSecret successfully pulled the database credentials from the secrets manager and created the corresponding Kubernetes Secret (`my-db`) in the application cluster's namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace production get secrets\n```\n\n----------------------------------------\n\nTITLE: Patching Restored Ingress Hostname using kubectl\nDESCRIPTION: Uses `kubectl patch` with a JSON patch (`--type json`) to update the `host` field within the `spec.rules` of the `silly-demo` Ingress resource in the `a-team` namespace. This modification is necessary to point the nip.io domain to the correct external IP address (`$DOT2_INGRESS_HOST`) of the load balancer in the new cluster (`kubeconfig-dot2.yaml`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml \\\n    --namespace a-team patch ingress silly-demo --type json \\\n    --patch \"[{'op': 'replace', 'path': '/spec/rules/0/host', 'value':'silly-demo.$DOT2_INGRESS_HOST'}]\"\n```\n\n----------------------------------------\n\nTITLE: Applying a Kubernetes Manifest to a Namespace - Shell Script\nDESCRIPTION: Uses kubectl to apply the updated application YAML manifest to the 'vfarcic' namespace, initiating or updating the application's deployment and its associated resources. Requires kubectl to be installed and properly configured for the target cluster. The manifest should exist and be properly customized to avoid clashes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace vfarcic apply \\\n    --filename crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Argo Rollout Configuration for Istio-based Canary Deployment\nDESCRIPTION: Command to display the Argo Rollout configuration file that defines the progressive delivery strategy using Istio for traffic routing instead of scaling pod counts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ncat kustomize/overlays/istio/rollout.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Devbox Configuration\nDESCRIPTION: This JSON snippet defines the Devbox configuration, specifying required packages and shell initialization hooks. It includes tools like kind, gcloud, kubectl, and others.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/jetify-com/devbox/0.11.0/.schema/devbox.schema.json\",\n  \"packages\": [\n    \"kind@0.23.0\",\n    \"google-cloud-sdk@478.0.0\",\n    \"gum@0.14.1\",\n    \"teller@1.5.6\",\n    \"stow@2.4.0\",\n    \"gh@2.50.0\",\n    \"jq@1.7.1\",\n    \"yq-go@4.44.1\",\n    \"kubectl@1.30.1\"\n  ],\n  \"shell\": {\n    \"init_hook\": [\n      \"autoload -Uz compinit\",\n      \"compinit\",\n      \"source <(kubectl completion zsh)\"\n    ],\n    \"scripts\": {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Subnets and Route Table Associations in KCL\nDESCRIPTION: This snippet defines subnets across multiple availability zones and creates route table associations for each subnet. It uses list comprehension to generate resources for each zone.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: KCL\nCODE:\n```\n_zoneList = [\n    { zone = \"a\", cidrBlock = \"11.0.0.0/24\" },\n    { zone = \"b\", cidrBlock = \"11.0.1.0/24\"  },\n    { zone = \"c\", cidrBlock = \"11.0.2.0/24\"  }\n]\n\n_routeTableAssociations = [\n    v1beta1.RouteTableAssociation {\n        metadata = {\n            name = oxr.spec.id + \"-1\" + _data.zone\n            annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = \"routeTableAssociation1\" + _data.zone\n            }\n        }\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1RouteTableAssociationSpecForProvider{\n            region = _region\n            routeTableIdSelector.matchControllerRef = True\n            subnetIdSelector = v1beta1.Ec2AwsUpboundIoV1beta1RouteTableAssociationSpecForProviderSubnetIDSelector{\n                matchControllerRef = True\n                matchLabels = { zone = _region + _data.zone }\n            }\n        }\n    } for _data in _zoneList\n]\n\n_subnets = [\n    v1beta1.Subnet {\n        metadata = {\n            name = oxr.spec.id + \"-\" + _data.zone\n            annotations = {\n                \"krm.kcl.dev/composition-resource-name\" = \"subnet-\" + _data.zone\n            }\n            labels = { zone = _region + _data.zone }\n        }\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1SubnetSpecForProvider{\n            region = _region\n            availabilityZone = _region + _data.zone\n            cidrBlock = _data.cidrBlock\n            vpcIdSelector.matchControllerRef = True\n        }\n    } for _data in _zoneList\n]\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub Actions Workflow File - cat - Shell\nDESCRIPTION: Displays the contents of a GitHub Actions workflow YAML file located at .github/workflows/gitops.yaml. Useful for reviewing CI/CD job definitions, permissions, and automation steps required to synchronize Kubernetes manifests via GitHub Actions. Requires local file access.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncat .github/workflows/gitops.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Patch for SQLClaim Resource in YAML\nDESCRIPTION: This YAML snippet defines a patch for the 'SQLClaim' resource named 'my-db'. It specifies adding three database names ('db-01', 'db-02', 'db-03') to the 'spec.parameters.databases' array. This approach, similar to Kustomize overlays, avoids redefining the entire resource for updates.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: my-db\nspec:\n  parameters:\n    databases:\n      - db-01\n      - db-02\n      - db-03\n```\n\n----------------------------------------\n\nTITLE: KCL Backend DB Remote Configuration\nDESCRIPTION: KCL configuration for a backend service with remote database, showing customization through variables\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: kcl\nCODE:\n```\nimport .common\nimport .deployment\nimport .service\nimport .ingress\n\ncommon.Composition {\n    metadata = common.Metadata {\n        name = \"app-backend-db-remote\"\n        labels = common.Labels {\n            type = \"backend-db\"\n            location = \"remote\"\n        }\n    }\n    spec = common.Spec {\n        resources = [\n            deployment.Deployment{\n                _dbEnabled = True\n                _dbSecretName = \"spec.parameters.dbSecret.name\"\n                _providerConfigName = \"spec.parameters.kubernetesProviderConfigName\"\n            },\n            service.Service{\n                _providerConfigName = \"spec.parameters.kubernetesProviderConfigName\"\n            },\n            ingress.Ingress{\n                _providerConfigName = \"spec.parameters.kubernetesProviderConfigName\"\n            },\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing KCL Backend Configuration\nDESCRIPTION: Command to execute the KCL backend configuration file\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkcl kcl/backend.k\n```\n\n----------------------------------------\n\nTITLE: Request-Response via NATS Channels (Non-numeric Input) - Shell\nDESCRIPTION: Uses the NATS CLI to send a request to the 'fibonacci.request' channel with a non-numeric payload ('Something'). Requires a 'nats' CLI client, server connection, and at least one application subscribed to reply. The CLI displays the round trip time and the response from a listener; in this case, the service rejects non-numeric input and returns a relevant error message.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnats request fibonacci.request \"Something\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable for Ollama API Connection\nDESCRIPTION: Command to set the OLLAMA_HOST environment variable to point to the Ingress endpoint for interacting with the deployed Ollama model.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nexport OLLAMA_HOST=\"http://ollama.$INGRESS_HOST.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Task List Output\nDESCRIPTION: Output of the task --list command showing all available tasks in the project with their descriptions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ntask: Available tasks for this project:\n* cluster-create:         Creates a kind cluster, installs Crossplane, providers, and packages, waits until they are healthy, and runs tests.\n* cluster-destroy:        Destroys the cluster\n* package-apply:          Applies Compositions and Composite Resource Definition.\n* package-generate:       Generates package files.\n* package-publish:        Builds and pushes the package.\n* test:                   Combines `cluster-create`, `test-watch` (without the watcher), and `cluster-destroy` tasks.\n* test-watch:             Runs tests assuming that the cluster is already created and everything is installed.\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing Repository for Taskfile Demo\nDESCRIPTION: This snippet shows how to clone a specific repository, switch to the correct branch, and prepare the environment for demonstrating Taskfile usage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-kubernetes\n\ncd crossplane-kubernetes\n\ngit pull\n\ngit checkout -t origin/task\n```\n\n----------------------------------------\n\nTITLE: Defining a NodePort Service in Kubernetes YAML\nDESCRIPTION: This YAML defines a Kubernetes Service of type NodePort, which exposes the application on a specific port (30000) on all nodes of the cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ports:\n  - name: http\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n    nodePort: 30000\n  selector:\n    app.kubernetes.io/name: silly-demo\n  type: NodePort\n```\n\n----------------------------------------\n\nTITLE: Applying ResourceGroup YAML to a Kubernetes Namespace - Shell\nDESCRIPTION: Invokes the 'kubectl' CLI to apply a YAML definition ('resource-group.yaml') to a given namespace ('a-team'). This triggers the creation or update of CRDs and associated resources as per kro's controller logic. Prerequisites are Kubernetes access and proper cluster context. The output shows resource creation events or errors; no input parameters beyond file and namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply --filename resource-group.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying CUE Component Definition for Backend App - Shell & Cue\nDESCRIPTION: The first command displays the contents of a backend app component defined in CUE. The CUE code defines a component named 'app-backend', its deployment attributes, health policy, and parameterized Kubernetes resources (Deployment, Service, and Ingress). The definition uses input parameters (like image, tag, port, db secrets) to template the outputs, and provides conditional logic on configuration. Prerequisites include the 'component-app-backend.cue' file; dependencies may include secrets referenced by the specification. Inputs to the CLI part are the filename; to CUE, component parameters; output is the rendered contents or, in KubeVela usage, the creation of custom API endpoints. Functional constraints may arise from the required parameters (e.g., image and db secret), and the health policy checks that replicas are ready.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncat component-app-backend.cue\n```\n\nLANGUAGE: cue\nCODE:\n```\n\"app-backend\": {\n    attributes: {\n        workload: definition: {\n            apiVersion: \"apps/v1\"\n            kind:       \"Deployment\"\n        }\n        status: healthPolicy: \"isHealth: (context.output.status.readyReplicas > 0) && (context.output.status.readyReplicas == context.output.status.replicas)\"\n    }\n    type: \"component\"\n}\n\ntemplate: {\n    parameter: {\n        image:               string\n        tag:                 string\n        port:                *80 | int\n        host:                *\"devopstoolkit.live\" | string\n        ingressClassName:    string\n        db: secret:          string\n        db: secretNamespace: string\n    }\n    output: {\n        apiVersion: \"apps/v1\"\n        kind:       \"Deployment\"\n        metadata: labels: \"app.kubernetes.io/name\": context.name\n        spec: {\n            selector: matchLabels: \"app.kubernetes.io/name\": context.name\n            template: {\n                metadata: labels: \"app.kubernetes.io/name\": context.name\n                spec: containers: [{\n                    image: parameter.image + \":\" + parameter.tag\n                    livenessProbe: httpGet: {\n                        path: \"/\"\n                        port: parameter.port\n                    }\n                    name: \"backend\"\n                    ports: [{ containerPort: 80 }]\n                    readinessProbe: httpGet: {\n                        path: \"/\"\n                        port: parameter.port\n                    }\n                    resources: {\n                        limits: {\n                            cpu:    \"250m\"\n                            memory: \"256Mi\"\n                        }\n                        requests: {\n                            cpu:    \"125m\"\n                            memory: \"128Mi\"\n                        }\n                    }\n                    if parameter.db.secret != _|_ {\n                        env: [{\n                            name: \"DB_ENDPOINT\"\n                            valueFrom: secretKeyRef: {\n                                key:  \"endpoint\"\n                                name: parameter.db.secret\n                            }\n                        }, {\n                            name: \"DB_PASSWORD\"\n                            valueFrom: secretKeyRef: {\n                                key:  \"password\"\n                                name: parameter.db.secret\n                            }\n                        }, {\n                            name: \"DB_PORT\"\n                            valueFrom: secretKeyRef: {\n                                key:      \"port\"\n                                name:     parameter.db.secret\n                                optional: true\n                            }\n                        }, {\n                            name: \"DB_USERNAME\"\n                            valueFrom: secretKeyRef: {\n                                key:  \"username\"\n                                name: parameter.db.secret\n                            }\n                        }, {\n                            name:  \"DB_NAME\"\n                            value: context.name\n                        }]\n                    }\n                }]\n            }\n        }\n    }\n    outputs: {\n        service: {\n            apiVersion: \"v1\"\n            kind:       \"Service\"\n            metadata: {\n                name:   context.name\n                labels: \"app.kubernetes.io/name\": context.name\n            }\n            spec: {\n                selector: \"app.kubernetes.io/name\": context.name\n                type: \"ClusterIP\"\n                ports: [{\n                    port:       parameter.port\n                    targetPort: parameter.port\n                    protocol:   \"TCP\"\n                    name:       \"http\"\n                }]\n            }\n        }\n        ingress: {\n            apiVersion: \"networking.k8s.io/v1\"\n            kind:       \"Ingress\"\n            metadata: {\n                name:        context.name\n                labels:      \"app.kubernetes.io/name\": context.name\n                annotations: \"ingress.kubernetes.io/ssl-redirect\": \"false\"\n            }\n            spec: {\n                if parameter.ingressClassName != _|_ {\n                    ingressClassName: parameter.ingressClassName\n                }\n                rules: [{\n                    host: parameter.host\n                    http: paths: [{\n                        path:     \"/\"\n                        pathType: \"ImplementationSpecific\"\n                        backend: service: {\n                            name:         context.name\n                            port: number: parameter.port\n                        }\n                    }]\n                }]\n            }\n        }\n    }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Listing Generated KCL Function Files\nDESCRIPTION: This shell command lists the contents of the directory `functions/aws`, which was created by the `up function generate aws` command. It shows the main KCL file (`main.k`), KCL module files (`kcl.mod`, `kcl.mod.lock`), and a symbolic link (`model`) to the downloaded resource schemas.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nls functions/aws\n```\n\n----------------------------------------\n\nTITLE: Defining Functional Tests Workflow Triggered by Argo Events (yaml)\nDESCRIPTION: Defines a GitHub Actions workflow named 'functional-tests' triggered by a `repository_dispatch` event with the type 'functional-tests'. This event is sent by Argo Events. The workflow simply echoes information about the triggering resource (passed in `client_payload.resource`) and prints a placeholder message for running functional tests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nname: functional-tests\nrun-name: functional-tests\non:\n  repository_dispatch:\n    types:\n      - functional-tests\njobs:\n  run-functional-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Functional tests\n        run: |\n          echo \"The following resource was created or updated:\"\n          echo \n          echo '${{ github.event.client_payload.resource }}' | jq .\n          echo \"Running functional tests...\"\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to NATS Channels via CLI (sh)\nDESCRIPTION: These snippets publish messages to the NATS server for two different sub-channels: 'ci.silly-demo' and 'ci.serious-demo'. The NATS CLI's 'publish' command sends a workflow completion message. Requires the NATS CLI accessible to the user, and an active NATS server. The command publishes messages which are received by any matching subscriptions. The message and channel are parameters. Output appears in subscribed terminals.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnats publish ci.silly-demo \"Workflow run finished successfully.\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nnats publish ci.serious-demo \"Workflow run finished successfully.\"\n```\n\n----------------------------------------\n\nTITLE: Earthfile Configuration for Go Application\nDESCRIPTION: The Earthfile configuration for building and managing a Go application. It includes global settings, a binary target for compiling the Go code, and an image target for creating a Docker image.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: Earthfile\nCODE:\n```\nVERSION 0.8\nFROM ghcr.io/vfarcic/silly-demo-earthly:0.0.5\nARG --global registry=ghcr.io/vfarcic\nARG --global user=vfarcic\nARG --global image=silly-demo\nWORKDIR /go-workdir\n\nbinary:\n    COPY go.mod go.sum vendor .\n    COPY *.go .\n    RUN go mod vendor\n    RUN GOOS=linux GOARCH=amd64 go build --mod vendor -o silly-demo\n    SAVE ARTIFACT silly-demo\n\nimage:\n    BUILD +binary\n    ARG tag='latest'\n    ARG taglatest='latest'\n    ARG base='scratch'\n    FROM $base\n    ENV DB_PORT=5432 DB_USERNAME=postgres DB_NAME=silly-demo\n    EXPOSE 8080\n    CMD [\"silly-demo\"]\n    ENV VERSION=$tag\n    COPY +binary/silly-demo /usr/local/bin/silly-demo\n    SAVE IMAGE --push \\\n        $registry/$image:$tag \\\n        $registry/$image:$taglatest\n```\n\n----------------------------------------\n\nTITLE: Modifying Application Resource to Set Minimum Scaling\nDESCRIPTION: Shell command using yq to update the minimum scaling value to 2, addressing the second policy requirement.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nyq --inplace \".spec.parameters.scaling.min = 2\" \\\n    apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Sending Request to Service (Fibonacci 20) (Shell)\nDESCRIPTION: Sends a fourth HTTP GET request from the temporary 'curl' pod to the 'silly-demo' service, calculating Fibonacci number 20.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://silly-demo:8080/fibonacci?number=20\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Git Repository in Shell\nDESCRIPTION: Demonstrates how to add, commit, and push changes to a Git repository using shell commands. This is part of the workflow that triggers the CI process.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n\ngit commit -m \"Silly demo\"\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions CI Workflow Definition\nDESCRIPTION: YAML definition of the GitHub Actions workflow for continuous integration, including steps for building and pushing container images.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\nrun-name: ci\non:\n  push:\n    branches:\n      - main\njobs:\n  all:\n    runs-on: ubuntu-latest\n    env:\n      TAG: 0.0.${{ github.run_number }}\n      FORCE_COLOR: 1\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      - name: Login to ghcr\n        uses: docker/login-action@v3\n        with:\n          registry: ghcr.io\n          username: vfarcic\n          password: ${{ secrets.REGISTRY_PASSWORD }}\n      - name: Install devbox\n        uses: jetify-com/devbox-install-action@v0.11.0\n        with:\n          project-path: devbox-ci.json\n          enable-cache: 'true'\n      - name: All\n        run: |\n          devbox run --config devbox-ci.json -- ./dot.nu run ci $TAG\n        env:\n```\n\n----------------------------------------\n\nTITLE: Updating Nested YAML Properties with yq (Shell)\nDESCRIPTION: This snippet updates the nested parameter 'host' within the YAML manifest using 'yq', which is commonly used for CI/CD or developer automation. It requires 'yq' and access to the INGRESS_HOST shell variable. Outputs are reflected by replacing the '.spec.parameters.host' value in the specified YAML file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nyq --inplace \\\n    \".spec.parameters.host = \\\"egulliksen.silly-demo.$INGRESS_HOST\\\"\" \\\n    crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining a Deployment Using a Persistent Volume Claim\nDESCRIPTION: This truncated YAML manifest shows the relevant sections of a Kubernetes Deployment configuration. It defines a volume named 'silly-cache' that references the Persistent Volume Claim 'silly-demo'. The container mounts this volume at '/cache'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: silly-demo\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine\n          name: silly-demo\n          ...\n          volumeMounts:\n            - mountPath: /cache\n              name: silly-cache\n      volumes:\n        - name: silly-cache\n          persistentVolumeClaim:\n            claimName: silly-demo\n```\n\n----------------------------------------\n\nTITLE: Checking the Deployment After Recreation\nDESCRIPTION: Kubernetes command to verify the deployment now includes the database environment variables after recreating the Application resource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get deployment silly-demo \\\n    --output yaml\n```\n\n----------------------------------------\n\nTITLE: Tracing SQL (Database) Resources Created By Crossplane - Shell\nDESCRIPTION: This shell command uses Crossplane's beta trace on a SQLClaim to visualize and check the status of all resources relating to the provisioned database within a specified namespace. Prerequisites are Crossplane CLI, Kubernetes access, and permissions on the target namespace. Parameters include the SQLClaim name (crossplane-gh-demo-db) and namespace (a-team); output shows child resource status, including AWS infrastructure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace sqlclaim crossplane-gh-demo-db \\\n    --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Listing Kargo Stages in Kubernetes Namespace\nDESCRIPTION: This command retrieves the stages defined in the 'silly-demo' namespace. It shows the current status, health, and phase of each stage in the Kargo workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace silly-demo get stages\n```\n\n----------------------------------------\n\nTITLE: Installing CloudNativePG Operator via Helm - Shell\nDESCRIPTION: This Helm command installs or updates the 'cloudnative-pg' chart as the CNPG operator into the 'cnpg-system' namespace, creating the namespace if necessary and waiting for readiness. This step is required before Backstage can use CloudNativePG-managed PostgreSQL clusters. Dependencies: Helm CLI, Kubernetes admin access, internet for the Helm repo, and permission to create namespaces. Output is a ready CNPG operator deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install cnpg cloudnative-pg \\\n    --repo https://cloudnative-pg.github.io/charts \\\n    --namespace cnpg-system --create-namespace --wait\n```\n\n----------------------------------------\n\nTITLE: Composite Resource Definition Without Claims\nDESCRIPTION: Example of a CompositeResourceDefinition (XRD) that no longer requires claim definitions, as Crossplane v2 supports native namespace-scoping\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v2alpha1\nkind: CompositeResourceDefinition\nmetadata:\n  name: sqls.devopstoolkit.live\nspec:\n  defaultCompositionRef:\n    name: google-postgres\n  group: devopstoolkit.live\n  names:\n    kind: SQL\n    plural: sqls\n  # claimNames:\n  #   kind: SQLClaim\n  #   plural: sqlclaims\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Kubernetes Provider with DeploymentRuntimeConfig (YAML)\nDESCRIPTION: This YAML manifest defines a `DeploymentRuntimeConfig` named `crossplane-provider-kubernetes` and a Crossplane `Provider` resource. The `DeploymentRuntimeConfig` specifies runtime configurations, like the `serviceAccountName`, for the provider's deployment. The `Provider` resource references this runtime configuration via `runtimeConfigRef` and specifies the provider package (`xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.17.1`). This replaces the deprecated `ControllerConfig`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n#   serviceAccountName: crossplane-provider-kubernetes\n---\napiVersion: pkg.crossplane.io/v1beta1\nkind: DeploymentRuntimeConfig\nmetadata:\n  name: crossplane-provider-kubernetes\nspec:\n  deploymentTemplate:\n    spec:\n      selector: {}\n      template:\n        spec:\n          containers:\n            - name: package-runtime\n          serviceAccountName: crossplane-provider-kubernetes\n---\napiVersion: pkg.crossplane.io/v1\nkind: Provider\nmetadata:\n  name: crossplane-provider-kubernetes\nspec:\n  package: xpkg.upbound.io/crossplane-contrib/provider-kubernetes:v0.17.1\n  runtimeConfigRef:\n    name: crossplane-provider-kubernetes\n```\n\n----------------------------------------\n\nTITLE: Describing a Pending Kubernetes Pod for Troubleshooting (sh)\nDESCRIPTION: This command uses `kubectl describe pod` to get detailed information and events for pods matching the selector 'app.kubernetes.io/instance=ollama2' within the 'ollama' namespace. This is used to investigate why the 'ollama2' pod is stuck in the 'Pending' state, specifically looking for scheduling errors related to GPU resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace ollama describe pod \\\n    --selector app.kubernetes.io/instance=ollama2\n```\n\n----------------------------------------\n\nTITLE: Nushell CLI Implementation\nDESCRIPTION: Core implementation of the platform CLI in Nushell, showing command definitions with help text, parameters, and execution logic.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: nushell\nCODE:\n```\n# Builds a container image\ndef \"main build image\" [\n    tag: string                    # The tag of the image (e.g., 0.0.1)\n    --registry = \"ghcr.io/vfarcic\" # Image registry\n    --image = \"idp-full-demo\"      # Image name\n    --push = true                  # Whether to push the image to the registry\n] {\n\n    docker image build --tag $\"($registry)/($image):latest\" .\n\n    docker image tag $\"($registry)/($image):latest\" $\"($registry)/($image):($tag)\"\n\n    if $push {\n\n        docker image push $\"($registry)/($image):latest\"\n\n        docker image push $\"($registry)/($image):($tag)\"\n\n    }\n}\n\n# Executes tests\ndef \"main run unit-tests\" [] {\n\n    print \"Faking execution of unit-tests...\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling GKE Cluster Autoscaling\nDESCRIPTION: Command to update GKE cluster configuration to enable autoscaling with specified minimum and maximum node counts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\ngcloud container clusters update dot --project $PROJECT_ID \\\n    --zone us-east1-b \\\n    --enable-autoscaling --min-nodes 1 --max-nodes 5\n```\n\n----------------------------------------\n\nTITLE: Importing Backstage Scaffolder GitHub Module (TypeScript)\nDESCRIPTION: This instruction specifies adding an import statement to the `packages/backend/src/index.ts` file. This line registers the previously installed Scaffolder GitHub module with the Backstage backend, making its actions available within the application. This step is necessary after installing the plugin via yarn.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nbackend.add(import('@backstage/plugin-scaffolder-backend-module-github'));\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Pods across clusters with SQL\nDESCRIPTION: SQL query that retrieves all Kubernetes pods across multiple clusters, showing the cluster name, namespace, and pod name using the kubernetes_all.kubernetes_pod table in Steampipe.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx -> 'connection_name' as cluster, namespace, name from kubernetes_all.kubernetes_pod;\n```\n\n----------------------------------------\n\nTITLE: Setting Minimum Replicas for AppClaim Using YQ - Shell\nDESCRIPTION: This shell snippet updates the scaling.min property in an appclaim manifest to 2, satisfying the minimum replica policy. Like the previous example, it uses yq with --inplace to edit tmp/appclaim.yaml directly. yq is required and should support the syntax used.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nyq --inplace \".spec.parameters.scaling.min = 2\" \\\n    tmp/appclaim.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Earthly Binary Target in Shell\nDESCRIPTION: A shell command to execute the 'binary' target in the Earthfile using Earthly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nearthly +binary\n```\n\n----------------------------------------\n\nTITLE: Sample Kubescape Alert Log Entry with Process and Event Details in JSON\nDESCRIPTION: This JSON snippet presents a full example of a Kubescape alert when an unexpected system call (like 'munmap') is detected in a monitored container. The object details the rule, infected process info, file hashes, workload and container IDs, process tree, runtime, K8s context, severity, and human-readable suggestions. No runtime dependencies apply; this output is intended for operator inspection, troubleshooting, or alert integrations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"BaseRuntimeMetadata\": {\n    \"alertName\": \"Unexpected system call\",\n    \"infectedPID\": 4996,\n    \"fixSuggestions\": \"If this is a valid behavior, please add the system call \\\"munmap\\\" to the whitelist in the application profile for the Pod \\\"silly-demo-6bc44c5d45-5wsd7\\\".\",\n    \"md5Hash\": \"0ba15535232923f2fa90ef5971c3e2fc\",\n    \"sha1Hash\": \"58d64c911b6f305fddc714d2fd61b69b34a19f13\",\n    \"sha256Hash\": \"262be835341d87f795283a95fc43eae7bb33bc5c88d52e04e91ce7af3078d0ab\",\n    \"severity\": 1,\n    \"size\": \"18 MB\",\n    \"timestamp\": \"2024-08-05T18:20:16.048392104Z\"\n  },\n  \"RuleID\": \"R0003\",\n  \"RuntimeK8sDetails\": {\n    \"clusterName\": \"dot\",\n    \"containerName\": \"silly-demo\",\n    \"hostNetwork\": false,\n    \"namespace\": \"a-team\",\n    \"containerID\": \"a614c61db9132e85e9710baf49e5fcae60c1e4347e483267ceb58bdfd3b515a5\",\n    \"podName\": \"silly-demo-6bc44c5d45-5wsd7\",\n    \"podNamespace\": \"a-team\",\n    \"workloadName\": \"silly-demo\",\n    \"workloadNamespace\": \"a-team\",\n    \"workloadKind\": \"Deployment\"\n  },\n  \"RuntimeProcessDetails\": {\n    \"processTree\": {\n      \"pid\": 4996,\n      \"cmdline\": \"silly-demo\",\n      \"comm\": \"silly-demo\",\n      \"ppid\": 4911,\n      \"pcomm\": \"containerd-shim\",\n      \"uid\": 0,\n      \"gid\": 0,\n      \"cwd\": \"/\",\n      \"path\": \"/usr/local/bin/silly-demo\"\n    },\n    \"uniqueID\": 0,\n    \"containerID\": \"a614c61db9132e85e9710baf49e5fcae60c1e4347e483267ceb58bdfd3b515a5\"\n  },\n  \"event\": {\n    \"runtime\": {\n      \"runtimeName\": \"containerd\",\n      \"containerId\": \"a614c61db9132e85e9710baf49e5fcae60c1e4347e483267ceb58bdfd3b515a5\"\n    },\n    \"k8s\": {\n      \"node\": \"ip-192-168-31-181.ec2.internal\",\n      \"namespace\": \"a-team\",\n      \"podName\": \"silly-demo-6bc44c5d45-5wsd7\",\n      \"podLabels\": {\n        \"app.kubernetes.io/name\": \"silly-demo\",\n        \"pod-template-hash\": \"6bc44c5d45\"\n      },\n      \"containerName\": \"silly-demo\"\n    },\n    \"timestamp\": 1722882016048392104,\n    \"type\": \"normal\"\n  },\n  \"level\": \"error\",\n  \"message\": \"Unexpected system call: munmap in: silly-demo\",\n  \"msg\": \"Unexpected system call\",\n  \"time\": \"2024-08-05T18:20:16Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Output Showing Created Persistent Volume\nDESCRIPTION: This output shows that a Persistent Volume (PV) has now been created and is in the 'Bound' state. It's linked to the 'silly-demo' PVC in the 'a-team' namespace and uses the 'managed' Storage Class. This confirms that the volume was provisioned once a pod (the consumer) started using the claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nNAME    CAPACITY ACCESS... RECLAIM... STATUS CLAIM      STORAGECLASS VOLUME... REASON AGE\npvc-... 1Gi      RWO       Delete     Bound  silly-demo managed      <unset>          10s\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Pods Gracefully (sh)\nDESCRIPTION: This command uses `kubectl delete pod` to initiate the deletion of Pods in the `a-team` namespace that match the label selector `app.kubernetes.io/name=silly-demo`. Kubernetes sends a SIGTERM signal to the containers in these Pods, allowing for graceful shutdown before forced termination.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete pod \\\n    --selector app.kubernetes.io/name=silly-demo\n```\n\n----------------------------------------\n\nTITLE: Re-running ls Inside Pod to Simulate Malicious Behavior in Shell\nDESCRIPTION: This shell command re-executes the 'ls /' command inside the demo application's pod to intentionally trigger Kubescape's anomaly detection for abnormal process execution. Prerequisite: POD_NAME must still be set; depends on kubectl and cluster access being functional. The expected output is the container's root directory listing, and this action will be monitored for alert generation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec --tty --stdin $POD_NAME -- ls /\n```\n\n----------------------------------------\n\nTITLE: Default Kubernetes Plugin Configuration\nDESCRIPTION: This snippet shows the default configuration for the Kubernetes plugin, which includes all custom resource tables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: spc\nCODE:\n```\nconnection \"kubernetes\" {\n  plugin = \"kubernetes\"\n  ...\n  custom_resource_tables = [\"*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: CI Workflow Completion Notification via NATS Publish - Shell\nDESCRIPTION: Demonstrates using the NATS CLI to publish a workflow completion message to a CI-related channel ('ci.silly-demo'), simulating automated notifications from CI pipelines or external tools. Requires 'nats' CLI and server connectivity. The message typically triggers subscriber actions without sender knowledge of the consumer's identity.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnats publish ci.silly-demo \"Workflow run finished successfully.\"\n```\n\n----------------------------------------\n\nTITLE: Confirmation Output from up xrd generate (Text)\nDESCRIPTION: Shows the success message output by the `up xrd generate` command, indicating that the CompositeResourceDefinition was created and saved to the specified file path (`apis/xsqls/definition.yaml`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nSuccessfully created CompositeResourceDefinition and saved to apis/xsqls/definition.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Services (Shell)\nDESCRIPTION: This command uses 'kubectl get services' to list all Services currently running within the 'a-team' namespace. It's used here to verify the creation and status of the 'silly-demo' service.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get services\n```\n\n----------------------------------------\n\nTITLE: Generated Crossplane Composition YAML\nDESCRIPTION: Complex YAML output defining a Crossplane Composition for a backend application, including Kubernetes resources like Deployment, Service, and Ingress\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: app-backend\n  labels:\n    type: backend\n    location: local\nspec:\n  compositeTypeRef:\n    apiVersion: devopstoolkitseries.com/v1alpha1\n    kind: App\n  patchSets:\n  - name: metadata\n    patches:\n    - fromFieldPath: metadata.labels\n  resources:\n  - name: kubernetes\n    base:\n      apiVersion: kubernetes.crossplane.io/v1alpha1\n      kind: ProviderConfig\n      spec:\n        credentials:\n          source: InjectedIdentity\n    patches:\n    - fromFieldPath: spec.id\n      toFieldPath: metadata.name\n    readinessChecks:\n    - type: None\n  - name: deployment\n    base:\n      apiVersion: kubernetes.crossplane.io/v1alpha1\n      kind: Object\n      spec:\n        forProvider:\n          manifest:\n            apiVersion: apps/v1\n            kind: Deployment\n            spec:\n              selector: {}\n              template:\n                spec:\n                  containers:\n                  - livenessProbe:\n                      httpGet:\n                        path: /\n                        port: 80\n                    name: backend\n                    ports:\n                    - containerPort: 80\n                    readinessProbe:\n                      httpGet:\n                        path: /\n                        port: 80\n                    resources:\n                      limits:\n                        cpu: 250m\n                        memory: 256Mi\n                      requests:\n                        cpu: 125m\n                        memory: 128Mi\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Command in Nushell\nDESCRIPTION: This snippet defines a custom 'get-hyperscaler' command in Nushell. It prompts the user to choose a hyperscaler, updates a YAML file with the choice, and returns the selected value.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ndef get-hyperscaler [] {\n    let hyperscaler = [google aws azure]\n        | input list $\"(ansi green_bold)Which Hyperscaler do you want to use?(ansi yellow_bold)\"\n\n    open settings.yaml\n        | upsert hyperscaler $hyperscaler\n        | save settings.yaml --force\n\n    $hyperscaler\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Parameters for Backstage Helm Chart - YAML\nDESCRIPTION: This YAML snippet defines default values used by the Helm chart for deploying Backstage. Parameters include deployment mode (production/development), container image repository and tag, database instance count, ingress class and hostname, and app version. These values are substituted into Helm templates to customize the deployment. Inputs are static YAML definitions; outputs are values referenced by Helm. Limitation: actual viable values depend on the target Kubernetes setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nmode: production\\nimage:\\n  repository: ghcr.io/vfarcic/backstage-demo\\n  tag: v0.0.1\\ndb:\\n  instances: 1\\ningress:\\n  className: nginx\\n  host: backstage.127.0.0.1.nip.io\\nappVersion: 0.0.1\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading Kubescape Operator with Helm in Kubernetes via Shell\nDESCRIPTION: This shell command installs or upgrades the Kubescape operator in the Kubernetes cluster using Helm, referring to a specific helm chart repository and the 'kubescape-values.yaml' config file. It creates the namespace if it does not exist, waits for all resources to become ready, and applies custom values for the deployment. Prerequisites: Helm must be installed and configured to access the Kubernetes cluster. Inputs: operator name, repo URL, namespace, values file; output: status of the Helm release.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install kubescape kubescape-operator \\\n    --repo https://kubescape.github.io/helm-charts \\\n    --namespace kubescape --create-namespace \\\n    --values kubescape-values.yaml --wait\n```\n\n----------------------------------------\n\nTITLE: Executing \"ls /\" in Application Pod Using kubectl exec in Shell\nDESCRIPTION: This shell command executes 'ls /' inside the specified pod in the 'a-team' namespace using kubectl exec, utilizing the POD_NAME environment variable set earlier. The --tty and --stdin flags allow for interactive command execution. Prerequisites are that kubectl is configured, and the POD_NAME variable is set. Input is none (just uses POD_NAME), and output is the root directory listing within the container.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec --tty --stdin $POD_NAME -- ls /\n```\n\n----------------------------------------\n\nTITLE: Viewing a Kubernetes CronJob YAML Manifest\nDESCRIPTION: Command to display the contents of a Kubernetes CronJob manifest, which is used for scheduled job execution.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_55\n\nLANGUAGE: sh\nCODE:\n```\ncat cronjob/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Running an AI Query with Ollama's GPU-Accelerated Llama2 Model\nDESCRIPTION: Command to run a query against the Llama2 AI model running with GPU acceleration in Kubernetes, asking about GPU usage in Kubernetes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nollama run llama2 \"How to run GPU in Kubernetes?\"\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Kubernetes using Timoni and kubectl (sh)\nDESCRIPTION: This command uses `timoni build` to generate Kubernetes YAML manifests for the `silly-demo` application based on definitions in the `timoni` directory and values from `timoni/values.yaml`. The output YAML is piped (`|`) directly to `kubectl apply -f -` to deploy the resources to the `a-team` namespace in the connected Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ntimoni build silly-demo timoni --values timoni/values.yaml --namespace a-team \\\n    | kubectl apply --filename -\n```\n\n----------------------------------------\n\nTITLE: Deployment YAML With Environment Variables After Recreation\nDESCRIPTION: YAML output showing the deployment now includes the database environment variables after recreation, demonstrating that changes to ResourceGroups are not automatically propagated to existing resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  ...\n  name: silly-demo\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n      - env:\n        - name: DB_ENDPOINT\n          valueFrom:\n            secretKeyRef:\n              key: host\n              name: silly-demo-app\n        - name: DB_PORT\n          valueFrom:\n            secretKeyRef:\n              key: port\n              name: silly-demo-app\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              key: username\n              name: silly-demo-app\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              key: password\n              name: silly-demo-app\n        - name: DB_NAME\n          value: app\n        ...\n```\n\n----------------------------------------\n\nTITLE: Visualizing Deployment Resource Tree with Kubectl - Shell\nDESCRIPTION: This command uses kubectl with the tree plugin to visualize parent-child relationships for a Kubernetes Deployment and all dependent resources in the specified namespace. It requires kubectl with the tree plugin installed, Kubernetes cluster access, and proper permissions for the a-team namespace. Parameters are the namespace and the deployment resource name; output will show the hierarchical structure from Deployment to ReplicaSet and Pod.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl tree --namespace a-team deployment crossplane-gh-demo\n```\n\n----------------------------------------\n\nTITLE: Checking External Secrets Status in Production Namespace\nDESCRIPTION: Lists ExternalSecrets resources in the production namespace to verify that secrets are being properly synced from the external secrets manager.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace production \\\n    get externalsecrets.external-secrets.io\n```\n\n----------------------------------------\n\nTITLE: Bootstrapping Shell Environment and Running Setup Scripts - Shell Script\nDESCRIPTION: This shell script sequence enters a Nix 'shell' environment to install all dependencies required for the demo (apart from Docker), adjusts permissions on the main project setup script, executes it, and loads required environment variables from a dotenv file. Dependencies include Nix and the ability to run shell scripts. The sequence must be run from the project's root directory. Key parameters are the 'HYPERSCALER' environment variable (used in 'shell-$HYPERSCALER.nix') and the presence of setup.sh and .env files. Outputs include a prepared dev environment and exported env vars.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix-shell --run $SHELL shell-$HYPERSCALER.nix\n\nchmod +x setup.sh\n\n./setup.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Type and Size with `ls` and `where` in Nushell\nDESCRIPTION: Demonstrates chained filtering in Nushell using its structured data pipeline. It first lists directory contents (`ls`), pipes the data to filter for entries of type 'file' (`where type == \"file\"`), and then pipes the intermediate results to another `where` command to filter for files larger than 1 kilobyte (`where size > 1kb`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nls | where type == \"file\" | where size > 1kb\n```\n\n----------------------------------------\n\nTITLE: Describing CRD Schema Recursively - kubectl explain - Shell\nDESCRIPTION: Shows the schema for a CRD ('appclaims.devopstoolkitseries.com') using kubectl explain with the --recursive flag. This requires the CRD already installed in the cluster. Provides field-level documentation for resources, which aids model introspection and client automation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl explain appclaims.devopstoolkitseries.com --recursive\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Deployments\nDESCRIPTION: This SQL query retrieves all deployments from the kubernetes_deployment table, showing various attributes of each deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect * from kubernetes_deployment\n```\n\n----------------------------------------\n\nTITLE: Applying Updated Deployment Manifest with PVC\nDESCRIPTION: This command applies the updated Deployment manifest (which now includes the PVC reference) to the 'a-team' namespace using kubectl. This will create pods that consume the previously created PVC.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename volume/persistent-volume.yaml\n```\n\n----------------------------------------\n\nTITLE: Task Summary Output\nDESCRIPTION: Output of the task --summary command showing the description and commands of the package-generate task.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ntask: package-generate\n\nGenerates package files.\n\ncommands:\n - timoni build dot-kubernetes timoni > package/all.yaml\n - head -n -1 package/all.yaml > package/all.yaml.tmp\n - mv package/all.yaml.tmp package/all.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Output of kubectl gadget Help (Shell)\nDESCRIPTION: Displays the help text output for `kubectl gadget`. It lists the main categories of commands such as `advise`, `audit`, `deploy`, `profile`, `snapshot`, `trace`, etc., providing an overview of the tool's functionalities.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nCollection of gadgets for Kubernetes developers\n\nUsage:\n  kubectl-gadget [command]\n\nAvailable Commands:\n  advise      Recommend system configurations based on collected information\n  audit       Audit a subsystem\n  completion  Generate the autocompletion script for the specified shell\n  deploy      Deploy Inspektor Gadget on the cluster\n  help        Help about any command\n  profile     Profile different subsystems\n  prometheus  Expose metrics using prometheus\n  run         Run a gadget (experimental)\n  script      Run a bpftrace-compatible scripts\n  snapshot    Take a snapshot of a subsystem and print it\n  sync        Synchronize gadget information with server\n  top         Gather, sort and periodically report events according to a given criteria\n  trace       Trace and print system events\n  traceloop   Get strace-like logs of a container from the past\n  undeploy    Undeploy Inspektor Gadget from cluster\n  version     Show version\n...\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Persistent Volume Claims in a Namespace\nDESCRIPTION: This command uses kubectl to list all Persistent Volume Claims (PVCs) within the 'a-team' namespace. It's used here to check the status of the newly created claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get persistentvolumeclaims\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox shell environment\nDESCRIPTION: Command to enter a Devbox shell environment which provides the required development tools for the demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Deleting a ReplicaSet via Manifest - Shell with kubectl\nDESCRIPTION: Deletes the ReplicaSet and its dependent resources using 'kubectl delete' with a manifest file. Requires access to the manifest and sufficient permissions. Input is the manifest file and namespace, output is resource deletion events.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --filename replicaset/image.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes ConfigMaps\nDESCRIPTION: This shell command retrieves the list of ConfigMaps in the 'a-team' namespace, showing the newly created 'silly-demo' ConfigMap.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get configmaps\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Development Application\nDESCRIPTION: This command sends a GET request to the '/videos' endpoint of the development application and formats the JSON response, showing that the app is connected to the database in the development environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://vfarcic.silly-demo.$INGRESS_HOST/videos\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Querying Deployments Across Clusters with Clusterpedia\nDESCRIPTION: This command uses kubectl with Clusterpedia to retrieve deployments from all namespaces across multiple clusters. It filters results since a specific date and orders them by cluster and namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --cluster clusterpedia get deployments --all-namespaces \\\n    --selector \"search.clusterpedia.io/since=2024-01-01\" \\\n    --selector \"search.clusterpedia.io/orderby in (cluster, namespace)\"\n```\n\n----------------------------------------\n\nTITLE: Testing the Deployed WASM Application\nDESCRIPTION: This shell command uses `curl` to send an HTTP GET request to the application's endpoint, accessed via the Ingress host `silly-demo.127.0.0.1.nip.io`. This tests if the deployed WASM application is running correctly and responding to requests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.127.0.0.1.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Creating a GKE Node Pool with GPU Partitioning (sh)\nDESCRIPTION: This command uses `gcloud` to create a new node pool named 'dot-gpu' in the specified GKE cluster and zone. Key parameters include the machine type (`a2-highgpu-1g`), node count, disabling autoupgrade, and configuring the NVIDIA A100 accelerator with GPU partitioning (`gpu-partition-size=1g.5gb`). This partitioning allows multiple containers to share a single physical GPU.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ngcloud container node-pools create dot-gpu \\\n    --project $PROJECT_ID --cluster dot --zone us-east1-b \\\n    --machine-type a2-highgpu-1g --num-nodes 1 \\\n    --no-enable-autoupgrade \\\n    --accelerator type=nvidia-tesla-a100,count=1,gpu-driver-version=default,gpu-partition-size=1g.5gb\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image in Nushell\nDESCRIPTION: This snippet defines a Nushell command to build and optionally push a Docker image. It accepts parameters for tag, registry, image name, and whether to push the image.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"main build image\" [\n    tag: string                    # The tag of the image (e.g., 0.0.1)\n    --registry = \"ghcr.io/vfarcic\" # Image registry\n    --image = \"idp-full-demo\"      # Image name\n    --push = true                  # Whether to push the image to the registry\n] {\n\n    docker image build --tag $\"($registry)/($image):latest\" .\n\n    docker image tag $\"($registry)/($image):latest\" $\"($registry)/($image):($tag)\"\n\n    if $push {\n\n        docker image push $\"($registry)/($image):latest\"\n\n        docker image push $\"($registry)/($image):($tag)\"\n\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Dev Container in Devpod - Shell\nDESCRIPTION: Removes a specified Dev Container using Devpod's CLI command. Requires the container's name as an argument (e.g., 'silly-demo'). This is a cleanup operation for terminating active environments and reclaiming resources. Outputs confirmation or error messages, depending on result.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\ndevpod delete silly-demo\n```\n\n----------------------------------------\n\nTITLE: Examining AWS ESO Configuration in YAML\nDESCRIPTION: Example of a Composite Resource (XR) SQL definition that can now be namespace-scoped in Crossplane v2. The resource defines a PostgreSQL database with specific version, size and region parameters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkit.live/v1beta1\nkind: SQL\nmetadata:\n  name: my-db\nspec:\n  version: \"16.3\"\n  size: medium\n  region: us-east-1\n  ...\n```\n\n----------------------------------------\n\nTITLE: Describing the ResourceGroup to Diagnose Inactive Status\nDESCRIPTION: Kubernetes command to describe the ResourceGroup to diagnose why it became inactive after adding the PostgreSQL integration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team describe resourcegroup application\n```\n\n----------------------------------------\n\nTITLE: Port-forwarding Karpor Service for Dashboard Access - Kubernetes - Shell\nDESCRIPTION: This shell snippet forwards the local port 7443 to the Karpor service running in the 'karpor' namespace on a Kubernetes cluster, allowing access to the Karpor dashboard via https://127.0.0.1:7443. Prerequisites: Install and configure kubectl, and ensure the Karpor service is deployed in the specified namespace. Modify the namespace and service name as needed for your environment. Input is the shell command; output is dashboard accessibility through local port forwarding.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace karpor \\\n    port-forward service/karpor-server 7443:7443\n```\n\n----------------------------------------\n\nTITLE: Copying Crossplane Database Manifests in Shell\nDESCRIPTION: These shell commands copy two YAML manifest files (one for the SQL claim and one for its password) from a parent `crossplane` directory into the newly created `apps` directory. The source filenames depend on the `$HYPERSCALER` environment variable, likely indicating provider-specific configurations (e.g., 'aws'). The destination files are renamed to `silly-demo-db.yaml` and `silly-demo-db-password.yaml` for clarity within the application context.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncp ../crossplane/$HYPERSCALER-sql.yaml apps/silly-demo-db.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\ncp ../crossplane/$HYPERSCALER-sql-password.yaml \\\n    apps/silly-demo-db-password.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing a Kubernetes Job YAML Manifest\nDESCRIPTION: Command to display the contents of a Kubernetes Job manifest, which is designed for one-time task execution.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\ncat job/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Velero Restore Operation for Specific Namespace\nDESCRIPTION: Uses the `velero` CLI to initiate a restore operation named implicitly based on the backup name and timestamp. It restores resources from the `pre-disaster` backup specifically including only the `a-team` namespace into the cluster defined by `kubeconfig-dot2.yaml`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nvelero --kubeconfig kubeconfig-dot2.yaml restore create \\\n    --from-backup pre-disaster --include-namespaces a-team\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Validation Policies\nDESCRIPTION: Shell command to apply the defined policies.yaml file to the Kubernetes cluster, enabling validation rules for application claims.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename ../kubernetes/policies.yaml\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Application Claim Resources using CLI\nDESCRIPTION: Uses the `crossplane beta trace` command to inspect the status and hierarchy of resources associated with the `crossplane-gh-demo` application claim within the `a-team` namespace. This is suggested as a way to understand the state of Crossplane resources when the Backstage Kubernetes plugin is insufficient. Depends on the Crossplane CLI being installed and configured.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace appclaim crossplane-gh-demo \\\n    --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Annotating Nodes for WebAssembly Support\nDESCRIPTION: Shell command to annotate all Kubernetes nodes to enable WebAssembly support via the Kwasm operator.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl annotate node kwasm.sh/kwasm-node=true --all\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Cluster with Kind\nDESCRIPTION: Shell commands to create a local Kubernetes cluster using Kind, install NGINX Ingress, and create a namespace for the demo application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nkind create cluster --config kind.yaml\n\nkubectl apply \\\n    --filename https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml\n\nsleep 15 # Wait until NGINX Ingress resources are created\n\nkubectl wait --namespace ingress-nginx \\\n    --for=condition=ready pod \\\n    --selector=app.kubernetes.io/component=controller \\\n    --timeout=90s\n\nkubectl create namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Deploying an Application with KubeVela\nDESCRIPTION: This command deploys an application using KubeVela by specifying an application YAML file. The 'vela up' command abstracts away complex Kubernetes details, allowing developers to focus on application-specific configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nvela up --file app.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing All Kubernetes Resources in Namespace with kubectl (Shell)\nDESCRIPTION: Shows how to use `kubectl` to retrieve all Kubernetes resources (pods, services, deployments, etc.) within a specific namespace ('a-team'). This exemplifies a higher-level interaction with the Kubernetes API compared to `curl`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all\n```\n\n----------------------------------------\n\nTITLE: Attempting Cross-Namespace Access by Service Name (Shell)\nDESCRIPTION: From the 'curl' Pod in the 'b-team' namespace, this command attempts to access the 'silly-demo' service using only its short name. This is expected to fail because Kubernetes DNS resolution for short names is typically scoped to the current namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://silly-demo:8080\n```\n\n----------------------------------------\n\nTITLE: Inspecting Pod Specifications with yq - Shell/YAML\nDESCRIPTION: Retrieves and pretty-prints the YAML specification of all Pods in a namespace using 'kubectl get pods' and pipes output to 'yq' for formatting. Demonstrates checking the Pod's actual image and status after ReplicaSet operations. Requires yq and kubectl. Input is the namespace; output is the formatted YAML.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team get pods --output yaml | yq .\n```\n\n----------------------------------------\n\nTITLE: Example Devbox Configuration (devbox.json) in JSON\nDESCRIPTION: This JSON object represents the content of a `devbox.json` file. It defines the project's dependencies by listing required packages (e.g., `kind`, `kubectl`, `go`) with specific versions under the `packages` key. Devbox uses this file to create reproducible development environments. An optional `shell` section can configure initialization hooks and scripts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"kind@0.22.0\",\n    \"gh@2.44.1\",\n    \"kubectl@1.29.2\",\n    \"bat@0.24.0\",\n    \"kubernetes-helm@3.14.3\",\n    \"yq-go@4.43.1\",\n    \"jq@1.7.1\",\n    \"earthly@0.8.11\",\n    \"go@1.22.3\",\n    \"cosign@2.2.4\",\n    \"path:gcloud#google-cloud-sdk\",\n    \"zellij@0.40.1\",\n    \"nodejs@22.6.0\",\n    \"timoni@0.22.0\",\n    \"viddy@1.1.5\",\n    \"nushell@0.100.0\",\n    \"teller@2.0.7\"\n  ],\n  \"shell\": {\n    \"init_hook\": [],\n    \"scripts\":   {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Argo Rollout with kubectl (sh)\nDESCRIPTION: Uses the `kubectl argo rollouts abort` command to stop the ongoing canary deployment for `silly-demo` in the `a-team` namespace and initiate a rollback to the previously stable version. This command is used when issues are detected with the canary release during a pause or rollout phase.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl argo rollouts --namespace a-team abort silly-demo\n```\n\n----------------------------------------\n\nTITLE: Displaying Argo Rollouts Status During Canary Deployment\nDESCRIPTION: This text block shows example output from the `kubectl argo rollouts get rollout` command during a canary deployment. It indicates the Rollout status is `Paused`, with a new canary ReplicaSet (`revision:2`) running alongside the stable one (`revision:1`), reflecting the first step of the defined canary strategy.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n...\nNAME                                    KIND        STATUS     AGE    INFO\n⟳ silly-demo                            Rollout     ॥ Paused   2m15s\n├──# revision:2\n│  └──⧉ silly-demo-5d574b5f4f           ReplicaSet  ✔ Healthy    50s  canary\n│     ├──□ silly-demo-5d574b5f4f-4f77d  Pod         ✔ Running    50s  ready:2/2\n└──# revision:1\n   └──⧉ silly-demo-5c5547db68           ReplicaSet  ✔ Healthy  2m15s  stable\n      ├──□ silly-demo-5c5547db68-mk6p9  Pod         ✔ Running  2m15s  ready:2/2\n      ├──□ silly-demo-5c5547db68-t457w  Pod         ✔ Running  2m15s  ready:2/2\n...\n```\n\n----------------------------------------\n\nTITLE: Configuring Backstage Catalog Locations and Rules (YAML)\nDESCRIPTION: This YAML snippet shows an excerpt from `app-config.yaml`, focusing on the `catalog` section. It defines `rules` to allow specific entity kinds (Component, Template, etc.) and `locations` where Backstage should discover entity definition files. In this case, it points to local YAML files for examples, including templates and organization data (Users, Groups). It also shows the beginning of the `providers` section, hinting at GitHub integration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\n...\ncatalog:\n  ...\n  rules:\n    - allow: [Component, System, API, Resource, Location, Template]\n  ...\n  locations:\n    - type: file\n      target: ../../examples/entities.yaml\n    - type: file\n      target: ../../examples/template/template.yaml\n      rules:\n        - allow: [Template]\n    - type: file\n      target: ../../examples/org.yaml\n      rules:\n        - allow: [User, Group]\n  providers:\n    github:\n```\n\n----------------------------------------\n\nTITLE: Package Generate Task Definition\nDESCRIPTION: The extracted YAML definition of the package-generate task showing its description and commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndesc: Generates package files.\ncmds:\n  - timoni build dot-kubernetes timoni > package/all.yaml\n  - head -n -1 package/all.yaml > package/all.yaml.tmp\n  - mv package/all.yaml.tmp package/all.yaml\n```\n\n----------------------------------------\n\nTITLE: Running the Backstage setup script\nDESCRIPTION: Commands to execute the platform setup script for Backstage and load environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nchmod +x platform\n\nplatform setup backstage\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Displaying Backstage Configuration File\nDESCRIPTION: This command displays the contents of the app-config.yaml file, which is the main configuration file for Backstage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat app-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Horizontal Pod Autoscalers Created by KEDA - Shell\nDESCRIPTION: Shows all HorizontalPodAutoscaler resources for the 'a-team' namespace, confirming that KEDA created an HPA for the application. Requires kubectl access. Outputs vital scaling metrics for each HPA including targets, min/max pods, and current replica count. Useful for verifying HPA/KEDA integration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get horizontalpodautoscalers\n```\n\n----------------------------------------\n\nTITLE: Command Line Operations for mirrord\nDESCRIPTION: Shell commands for viewing configurations and executing mirrord with different settings\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncat .mirrord/steal.json\n```\n\nLANGUAGE: sh\nCODE:\n```\nmirrord exec --config-file .mirrord/steal.json air go run .\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://staging.silly-demo.$INGRESS_HOST?something=else\"\n```\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://staging.silly-demo-frontend.$INGRESS_HOST\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ncat .mirrord/filter.json\n```\n\nLANGUAGE: sh\nCODE:\n```\nmirrord exec --config-file .mirrord/filter.json air go run .\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://staging.silly-demo.$INGRESS_HOST?user=vfarcic\"\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Package Revisions within Zellij in Shell\nDESCRIPTION: This command uses 'kubectl' to retrieve the status of package revisions within a Kubernetes cluster. It's executed in a newly created Zellij pane to illustrate splitting the terminal view.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pkgrev\n```\n\n----------------------------------------\n\nTITLE: Checking Restored Persistent Volumes via Kubectl (Shell)\nDESCRIPTION: This command uses `kubectl` to list Persistent Volumes (PVs) within the 'a-team' namespace, targeting the cluster specified by 'kubeconfig-dot2.yaml'. This helps verify if the persistent data associated with applications was successfully restored by Velero.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml --namespace a-team \\\n    get persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Applying ClusterSyncResources Configuration (Shell)\nDESCRIPTION: This command applies the `ClusterSyncResources` definition from the `cluster-sync-resources.yaml` file to the Kubernetes cluster where Clusterpedia is running. This creates the `common` resource definition that can be referenced by `PediaCluster` resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename cluster-sync-resources.yaml\n```\n\nLANGUAGE: text\nCODE:\n```\nclustersyncresources.cluster.clusterpedia.io/common created\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Mirrord Demo Environment (Shell)\nDESCRIPTION: Git commands to clone and prepare the demo repository, followed by devbox shell initialization. These commands set up the environment needed for the Mirrord demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/idp-full-demo\n\ncd idp-full-demo\n\ngit pull\n\ngit fetch\n\ngit switch mirrord\n\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Viewing Frontend Application Resource Hierarchy\nDESCRIPTION: Command using kubectl tree to display the hierarchy of Kubernetes resources created by the frontend application composition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl tree --namespace a-team app silly-demo-frontend\n```\n\n----------------------------------------\n\nTITLE: Applying a Kubernetes Manifest with kubectl (Shell)\nDESCRIPTION: This snippet uses 'kubectl' to apply a manifest file within a specific Kubernetes namespace, thus deploying or updating resources as defined by the YAML. Prerequisites include authentication with a Kubernetes cluster and RBAC access to the specified namespace. Input is the manifest file; output is new or updated resources applied by the command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace egulliksen apply \\\n    --filename crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub Actions Workflow Configuration\nDESCRIPTION: A shell command to display the GitHub Actions workflow file that integrates with Earthly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ncat .github/workflows/ci.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Resources with Clusterpedia\nDESCRIPTION: This command uses kubectl with Clusterpedia to fetch custom resources (sqlclaims) from a specific namespace across clusters. It demonstrates Clusterpedia's ability to work with custom resource types.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --cluster clusterpedia --namespace a-team get sqlclaims\n```\n\n----------------------------------------\n\nTITLE: Deploy KubeVela Application\nDESCRIPTION: Command to apply a KubeVela application definition using the vela CLI\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nvela up --file app.yaml\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Resource Groups using Steampipe SQL\nDESCRIPTION: This SQL query, intended to be run within the Steampipe environment (either shell or ad-hoc command), retrieves all columns (`*`) for all Azure Resource Groups accessible through the configured Azure credentials. It queries the `azure_resource_group` table provided by the Azure plugin.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nselect * from azure_resource_group\n```\n\n----------------------------------------\n\nTITLE: Viewing Differences Between Deployment and DaemonSet Manifests\nDESCRIPTION: Output showing the key differences between Deployment and DaemonSet YAML files. DaemonSets use a different kind value and don't require replicas or strategy specifications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: plaintext\nCODE:\n```\n2c2\n< kind: Deployment\n---\n> kind: DaemonSet\n8,13d7\n<   replicas: 5\n<   minReadySeconds: 10\n<   strategy:\n<     rollingUpdate:\n<       maxUnavailable: 1\n<       maxSurge: 1\n```\n\n----------------------------------------\n\nTITLE: Querying SQL Claims Across Kubernetes Clusters using Steampipe SQL\nDESCRIPTION: This SQL query retrieves the cluster name (extracted from the '_ctx' JSONB field using the '->' operator), the claim's name, and its creation timestamp from the `kubernetes_sqlclaim` table. It leverages the `kubernetes_all` schema to query across all configured Kubernetes clusters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx -> 'connection_name' as cluster, name, creation_timestamp from kubernetes_all.kubernetes_sqlclaim;\n```\n\n----------------------------------------\n\nTITLE: Inspecting Kubernetes Pod Table Schema in Steampipe (Shell)\nDESCRIPTION: Executes the `.inspect` command within the Steampipe CLI to display the schema definition for the `kubernetes_pod` table associated with the `kubernetes_aks_01` connection. This command helps users understand the available columns, their data types (like `jsonb`, `text`, `boolean`), and descriptions before constructing SQL queries.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n.inspect kubernetes_aks_01.kubernetes_pod\n```\n\n----------------------------------------\n\nTITLE: Monitoring eBPF Usage in Kubernetes\nDESCRIPTION: Command to monitor eBPF programs running in the Kubernetes cluster using Inspektor Gadget. Shows process IDs, types, and resource usage of eBPF programs.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget top ebpf\n```\n\n----------------------------------------\n\nTITLE: Processing YAML with yq in Bash\nDESCRIPTION: Shows how to use yq to format and filter YAML output, as well as convert between YAML and JSON formats. It includes examples of basic formatting, field extraction, and format conversion.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespace kube-system --output yaml \\\n    | yq .\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespace kube-system --output yaml \\\n    | yq \".status.phase\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespace kube-system --output json \\\n    | yq --input-format json\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespace kube-system --output yaml \\\n    | yq --output-format json .\n```\n\n----------------------------------------\n\nTITLE: Listing All Kubernetes Core Resources and Ingresses - Shell\nDESCRIPTION: This command retrieves all standard resource types (pods, services, deployments, replica sets, etc.) and ingresses within the specified namespace using kubectl get. Dependencies are kubectl, cluster access, and rights to the a-team namespace. The command provides a comprehensive current-state overview for troubleshooting and validation with no parameters beyond resource type and namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Applying KubeVela Component Definition - Shell\nDESCRIPTION: This shell command applies the defined 'app-backend' CUE component into the KubeVela system, registering it for future use. By executing 'vela def apply component-app-backend.cue', the custom component becomes available as a reusable platform primitive. It requires KubeVela CLI, a valid CUE definition, and correct permissions on the target cluster. Input is the filename of the CUE component; output is a registration in KubeVela for later use when creating instances of backend apps.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nvela def apply component-app-backend.cue\n```\n\n----------------------------------------\n\nTITLE: Pkl Go Template Integration Definition\nDESCRIPTION: Example of a Pkl file that defines structure for integrating with Go templates, showing how Pkl handles templating variables and delimiters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: pkl\nCODE:\n```\nhidden templateVar: String\nhidden delimLeft = \"{{\"\nhidden delimRight = \"}}\"\n\nfunctionRef { name = \"crossplane-contrib-function-go-templating\" }\nstep: String\ninput {\n    apiVersion = \"gotemplating.fn.crossplane.io/v1beta1\"\n    kind       = \"GoTemplate\"\n    source     = \"Inline\"\n    delims {\n        left = delimLeft\n        right = delimRight\n    }\n    inline {\n      template = templateVar\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing ReplicaSet Manifest Files - Shell with diff\nDESCRIPTION: Uses the shell 'diff' command to compare two ReplicaSet YAML files, showing changes in configuration such as replica count. No dependencies beyond standard tools. Inputs are file paths of two manifests; output is the diff showing what changed, such as the number of replicas.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndiff replicaset/base.yaml replicaset/replicas.yaml\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Claim Configuration in YAML\nDESCRIPTION: Crossplane claim definition for creating a GitHub repository. Specifies repository visibility and programming language preferences.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1alpha1\nkind: GitHubClaim\nmetadata:\n  name: idp-full-app\nspec:\n  id: idp-full-app\n  parameters:\n    public: true\n    app:\n      language: go\n```\n\n----------------------------------------\n\nTITLE: Starting an Isolated Devbox Shell Session (Shell)\nDESCRIPTION: This snippet launches a Devbox-managed shell environment, providing isolated tool versions for development. Dependencies: Devbox CLI and its configuration. Input is the working directory with a valid devbox configuration; output is a new shell session with tools provisioned according to project requirements.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Defining Test Steps with Patch and Assert in Chainsaw YAML\nDESCRIPTION: This YAML snippet shows a part of a Kyverno Chainsaw 'Test' resource for AWS. It illustrates a step within the 'try' block that first applies a patch defined in '../common/db.yaml' and then asserts the resulting state using '../common/assert-db.yaml'. This demonstrates updating a resource and validating the change within a single test step.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: aws\nspec:\n  ...\n  steps:\n    - try:\n        ...\n        - patch:\n            file: ../common/db.yaml\n        - assert:\n            file: ../common/assert-db.yaml\n        ...\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane ClusterClaim for EKS (YAML)\nDESCRIPTION: This YAML manifest defines a `ClusterClaim` custom resource, specific to `devopstoolkitseries.com/v1alpha1`. It requests the creation of an EKS cluster on AWS, configured with specific node size, namespaces (dev, production, crossplane-system), and applications (OpenFunction, External Secrets). Crucially, it specifies under `spec.parameters.creds` that the `aws-creds` secret from the `crossplane-system` namespace should be copied into the new cluster, including specific keys. It also configures External Secrets (`spec.parameters.apps.externalSecrets`) to use these credentials to create a `ClusterSecretStore` and pull a `registry-auth` secret.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: ClusterClaim\nmetadata:\n  name: cluster\nspec:\n  id: a-team-cluster\n  compositionSelector:\n    matchLabels:\n      provider: aws\n      cluster: eks\n  parameters:\n    nodeSize: medium\n    minNodeCount: 3\n    namespaces:\n      - dev\n      - production\n      - crossplane-system\n    apps:\n      openfunction:\n        enabled: true\n      externalSecrets:\n        enabled: true\n        store: true\n        awsAccessKeyIDKey: accessKeyID\n        awsSecretAccessKeyKey: secretAccessKey        \n        secrets:\n          - fromSecret: registry-auth\n            toSecret: push-secret\n            toNamespace: production\n    creds:\n      name: aws-creds\n      namespace: crossplane-system\n      keys:\n        - creds\n        - accessKeyID\n        - secretAccessKey\n```\n\n----------------------------------------\n\nTITLE: Configuring Teller for Secret Management in YAML\nDESCRIPTION: Illustrates the configuration of Teller, a universal secrets manager, using a .teller.yml file. It shows how to map secrets from a provider to environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nproject: dot\nproviders:\n  google_secretmanager:\n    env:\n      AZURE_OPENAI_API_VERSION:\n        path: projects/vfarcic/secrets/azure-openai-api-version/versions/1\n      AZURE_OPENAI_ENDPOINT:\n        path: projects/vfarcic/secrets/azure-openai-endpoint/versions/2\n      AZURE_OPENAI_API_KEY:\n        path: projects/vfarcic/secrets/azure-openai-key/versions/2\n      AZURE_OPENAI_MODEL:\n        path: projects/vfarcic/secrets/azure-openai-model/versions/2\n      YOUTUBE_API_KEY:\n        path: projects/vfarcic/secrets/youtube-api-key/versions/1\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Actions Workflow Definition in Shell\nDESCRIPTION: Outputs the contents of the GitHub Actions workflow file 'ci.yaml'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\ncat .github/workflows/ci.yaml\n```\n\n----------------------------------------\n\nTITLE: Filtering Deployments by Name with Label Selector via kubectl and Clusterpedia (Shell)\nDESCRIPTION: This snippet demonstrates retrieving deployments named 'silly-demo' within the 'a-team' namespace, using a label selector for precise filtering. Requires Clusterpedia's enrichment of resources with appropriate labels (e.g., 'search.clusterpedia.io/names'). Specify the target namespace and pass the label selector to limit output to matching deployments. Only deployments synced and labeled by Clusterpedia will appear.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia --namespace a-team \\\n    get deployments \\\n    --selector \"search.clusterpedia.io/names=silly-demo\"\n```\n\n----------------------------------------\n\nTITLE: Applying the Updated ResourceGroup Definition\nDESCRIPTION: Kubernetes command to apply the updated ResourceGroup with database environment variables to the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename resource-group-db-envs.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Composite Resource Definition File Content (Shell)\nDESCRIPTION: This shell command uses `cat` to print the contents of the `package/definition.yaml` file to standard output. This file is expected to contain a Crossplane Composite Resource Definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncat package/definition.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Pods and PersistentVolumes\nDESCRIPTION: Shell command to list all Pods and PersistentVolumes in the 'a-team' namespace, demonstrating the result of the applied configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods,persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kubernetes Configuration for New EKS Cluster\nDESCRIPTION: Configures the KUBECONFIG environment variable and updates the kubeconfig file to connect to the newly created cluster, with separate commands for Google Cloud and AWS environments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nexport KUBECONFIG=$PWD/kubeconfig.yaml\n\n# Execute only if using Google Cloud\ngcloud container clusters get-credentials a-team-cluster \\\n    --region us-east1 --project $PROJECT_ID\n\n# Execute only if using AWS\naws eks update-kubeconfig --region us-east-1 \\\n    --name a-team-cluster --kubeconfig $KUBECONFIG\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane SQLClaim Resource Creation in Shell\nDESCRIPTION: This command uses the `crossplane beta trace` utility to monitor the status and resource hierarchy associated with the `SQLClaim` named `silly-demo-db` in the `a-team` namespace. It provides real-time insights into the provisioning process, showing the composite resource and all underlying managed resources being created or reconciled by Crossplane.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace --namespace a-team sqlclaim silly-demo-db\n```\n\n----------------------------------------\n\nTITLE: Defining a VerticalPodAutoscaler with 'Off' Mode\nDESCRIPTION: This YAML snippet defines a VerticalPodAutoscaler resource in 'Off' mode, which allows for resource recommendation without actually applying the changes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: silly-demo\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: silly-demo\n  updatePolicy:\n    updateMode: \"Off\"\n```\n\n----------------------------------------\n\nTITLE: Examining a Kubernetes Job YAML Definition\nDESCRIPTION: YAML manifest for a Kubernetes Job that executes a simple bash command. Unlike Deployments, Jobs use restartPolicy: OnFailure and are meant for processes that complete and exit.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_48\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: batch/v1\nkind: Job\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      restartPolicy: OnFailure\n      containers:\n        - image: cgr.dev/chainguard/bash\n          name: silly-demo\n          command: [\"echo\", \"What is this?\"]\n```\n\n----------------------------------------\n\nTITLE: Destroying Cluster with Just\nDESCRIPTION: This snippet shows how to use 'just' to destroy the previously created cluster, cleaning up resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\njust cluster-destroy\n```\n\n----------------------------------------\n\nTITLE: Installing the Azure Plugin for Steampipe via Shell\nDESCRIPTION: This shell command uses the Steampipe CLI to download and install the `azure` plugin. This plugin enables Steampipe to connect to Microsoft Azure APIs and query Azure resources using SQL.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nsteampipe plugin install azure\n```\n\n----------------------------------------\n\nTITLE: Applying Kargo Manifests for Multi-Stage Deployment\nDESCRIPTION: Command to apply Kargo manifests to the silly-demo namespace, which will set up the promotion process described in the text.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace silly-demo apply --filename kargo-manifests/\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kubernetes Gateway API Resources\nDESCRIPTION: These commands clean up the created resources, including deleting the firewall rule, Kubernetes cluster, and GCP project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_50\n\nLANGUAGE: sh\nCODE:\n```\ngcloud compute firewall-rules delete silly-demo-node-port \\\n    --project $PROJECT_ID --quiet\n\ngcloud container clusters delete dot --project $PROJECT_ID \\\n    --zone us-east1-b --quiet\n\ngcloud projects delete $PROJECT_ID --quiet\n\nrm $KUBECONFIG\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Selecting Context, Namespace, and Name from All Kubernetes Pods (SQL)\nDESCRIPTION: Queries the `kubernetes_all.kubernetes_pod` aggregated table to retrieve the Steampipe context (`_ctx`), `namespace`, and pod `name` for all pods across all configured Kubernetes connections. The `_ctx` column contains metadata, including the connection name, stored as a JSONB object.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx, namespace, name from kubernetes_all.kubernetes_pod;\n```\n\n----------------------------------------\n\nTITLE: Defining a Kargo Warehouse Resource with Image Subscriptions in YAML\nDESCRIPTION: This YAML manifest declares a Kargo 'Warehouse' which subscribes to image releases from a container registry using semantic versioning constraints. The resource is specified for releases in 'ghcr.io/vfarcic/silly-demo' with a version constraint of '^1.x' and limits discovery to the last 5 versions. Requires Kargo CRDs installed, and manifests must be applied via kubectl.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kargo.akuity.io/v1alpha1\\nkind: Warehouse\\nmetadata:\\n  name: silly-demo\\nspec:\\n  subscriptions:\\n  - image:\\n      repoURL: ghcr.io/vfarcic/silly-demo\\n      semverConstraint: ^1.x\\n      discoveryLimit: 5\n```\n\n----------------------------------------\n\nTITLE: Comparing ReplicaSet and Deployment YAML Files (Shell)\nDESCRIPTION: This command uses the `diff` utility to show the differences between two Kubernetes manifest files: `replicaset/image.yaml` (presumably defining a ReplicaSet) and `deployment/base.yaml` (defining a Deployment). This helps illustrate the changes needed to convert a ReplicaSet definition to a Deployment, highlighting changes in `kind`, and the addition of `minReadySeconds` and `strategy` fields typical for Deployments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ndiff replicaset/image.yaml deployment/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS Resource Hierarchy in Crossplane\nDESCRIPTION: A tree-style output showing the status of AWS resources managed by Crossplane, including network components (VPC, Subnets, SecurityGroups) and database-related resources (Instance, SubnetGroup). Each resource shows its availability status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: plaintext\nCODE:\n```\n   ├─ SecurityGroup/silly-demo             True   True  Available\n   ├─ Subnet/silly-demo-a                  True   True  Available\n   ├─ Subnet/silly-demo-b                  True   True  Available\n   ├─ Subnet/silly-demo-c                  True   True  Available\n   ├─ VPC/silly-demo                       True   True  Available\n   ├─ ProviderConfig/silly-demo-sql        -      -     \n   ├─ ProviderConfig/silly-demo-sql        -      -     \n   ├─ Object/silly-demo-secret             True   True  Available\n   ├─ ProviderConfig/silly-demo            -      -     \n   ├─ SubnetGroup/silly-demo               True   True  Available\n   └─ Instance/silly-demo                  True   True  Available\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Application Manifest\nDESCRIPTION: Command to view the updated application manifest that contains the new image tag set by the CI workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncat apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Updating ReplicaSet Template and Inspecting Ownership Tree - Shell with kubectl\nDESCRIPTION: Applies a manifest with a changed Pod template (e.g., updated container image), then inspects ReplicaSet ownership. Demonstrates that modifying the template does not update existing Pods unless they are recreated. Required tools are kubectl and the tree plugin. Inputs are the manifest and namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply --filename replicaset/image.yaml\n```\n\nLANGUAGE: shell\nCODE:\n```\nkubectl tree --namespace a-team replicaset silly-demo\n```\n\n----------------------------------------\n\nTITLE: Generating Sample Network Traffic using curl (Shell)\nDESCRIPTION: Sends an HTTP GET request using `curl` to simulate network activity. The request targets the `pinger` service via an Ingress host (defined by the `$INGRESS_HOST` environment variable), which in turn communicates with the `silly-demo` service. This generates traffic for the previously started network monitor to capture.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://pinger.$INGRESS_HOST.nip.io?url=silly-demo:8080\"\n```\n\n----------------------------------------\n\nTITLE: Ordering Kubernetes Deployment Data by Cluster and Namespace (SQL)\nDESCRIPTION: Queries the `kubernetes_all.kubernetes_deployment` table across all connections, selecting cluster name (extracted from `_ctx`), deployment `name`, `namespace`, `ready_replicas`, and total `replicas`. The `ORDER BY` clause sorts the results first based on the `_ctx` column (effectively sorting by cluster name since it's part of the context) and then secondarily by the `namespace` column.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx -> 'connection_name' as cluster, name, namespace, ready_replicas, replicas from kubernetes_all.kubernetes_deployment order by _ctx, namespace\n```\n\n----------------------------------------\n\nTITLE: Applying a StatefulSet in Kubernetes\nDESCRIPTION: This shell command applies the StatefulSet definition to the Kubernetes cluster in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename statefulset/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Fermyon Spin Application Configuration (TOML)\nDESCRIPTION: This TOML file defines the configuration for a Fermyon Spin application. It specifies application metadata (name, version, authors), defines an HTTP trigger that routes all requests (`/...`) to the `silly-demo` component, and provides build instructions for the component, including the command (`tinygo build ...`) to compile the Go source into `main.wasm` and files to watch for changes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: toml\nCODE:\n```\nspin_manifest_version = 2\n\n[application]\nname = \"silly-demo\"\nversion = \"0.1.0\"\nauthors = [\"Viktor Farcic <viktor@farcic.com>\"]\ndescription = \"\"\n\n[[trigger.http]]\nroute = \"/...\"\ncomponent = \"silly-demo\"\n\n[component.silly-demo]\nsource = \"main.wasm\"\nallowed_outbound_hosts = []\n[component.silly-demo.build]\ncommand = \"tinygo build -target=wasi -gc=leaking -no-debug -o main.wasm main.go\"\nwatch = [\"**/*.go\", \"go.mod\"]\n```\n\n----------------------------------------\n\nTITLE: Sample Kubescape Runtime Monitoring Log Output in JSON\nDESCRIPTION: This multi-object JSON output example displays typical Kubescape node-agent monitoring log entries for a container, indicating when monitoring starts and ends for different containers (identified by container ID and K8s workload info). No dependencies are required for reading. Inputs are none; outputs are info log objects with timestamps, workload, and container details relevant to the monitored application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"level\": \"info\",\n  \"ts\": \"2024-08-05T18:09:08Z\",\n  \"msg\": \"start monitor on container\",\n  \"container ID\": \"36b03255dedcf83cb91290565996ed9f0bbfbe485366f891b1b79392c7c645fc\",\n  \"k8s workload\": \"a-team/silly-demo-6bc44c5d45-s28ln/silly-demo\"\n}\n{\n  \"level\": \"info\",\n  \"ts\": \"2024-08-05T18:14:08Z\",\n  \"msg\": \"monitoring time ended\",\n  \"container ID\": \"36b03255dedcf83cb91290565996ed9f0bbfbe485366f891b1b79392c7c645fc\",\n  \"k8s workload\": \"a-team/silly-demo-6bc44c5d45-s28ln/silly-demo\"\n}\n{\n  \"level\": \"info\",\n  \"ts\": \"2024-08-05T18:09:07Z\",\n  \"msg\": \"start monitor on container\",\n  \"container ID\": \"a614c61db9132e85e9710baf49e5fcae60c1e4347e483267ceb58bdfd3b515a5\",\n  \"k8s workload\": \"a-team/silly-demo-6bc44c5d45-5wsd7/silly-demo\"\n}\n{\n  \"level\": \"info\",\n  \"ts\": \"2024-08-05T18:14:07Z\",\n  \"msg\": \"monitoring time ended\",\n  \"container ID\": \"a614c61db9132e85e9710baf49e5fcae60c1e4347e483267ceb58bdfd3b515a5\",\n  \"k8s workload\": \"a-team/silly-demo-6bc44c5d45-5wsd7/silly-demo\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterRole for Direct Resource Composition (YAML)\nDESCRIPTION: This YAML snippet defines a Kubernetes `ClusterRole` named `crossplane-all`. It uses the `rbac.crossplane.io/aggregate-to-crossplane: \"true\"` label to aggregate its permissive rules (allowing all actions on all resources in all API groups) to the main Crossplane `ClusterRole`. This grants Crossplane the necessary permissions to manage non-Crossplane Kubernetes resources directly, although the example uses overly broad permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: crossplane-all\n  labels:\n    rbac.crossplane.io/aggregate-to-crossplane: \"true\"\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n```\n\n----------------------------------------\n\nTITLE: Applying an Argo CD Application Resource - Shell\nDESCRIPTION: This shell snippet shows how to apply the Argo CD Application YAML resource to a specific Kubernetes cluster using a custom kubeconfig file. Ensure both kubectl and the target kubeconfig are available. The apps/silly-demo.yaml file should exist and be completed with a valid Application resource definition. When executed, this command will create or update the 'silly-demo' Argo CD Application in the specified cluster and namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml apply \\\n    --filename apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Teller CLI Location in Devbox Environment\nDESCRIPTION: Command to verify that the teller CLI is installed in the isolated Devbox environment rather than globally on the machine.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nwhich teller\n```\n\n----------------------------------------\n\nTITLE: Output of Teller Location in Devbox Environment\nDESCRIPTION: Shows the path to the teller CLI within the Devbox environment, confirming it's installed in the project-specific directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: plaintext\nCODE:\n```\n/Users/vfarcic/code/clis-demo/.devbox/nix/profile/default/bin/teller\n```\n\n----------------------------------------\n\nTITLE: Running Backstage in Development Mode\nDESCRIPTION: This command starts Backstage in development mode using yarn. It will compile and serve the application, opening it in the default web browser.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Checking Initial Clusterpedia Cluster Status (Shell)\nDESCRIPTION: This command uses `kubectl` to retrieve the list of clusters currently known and managed by Clusterpedia. Initially, before configuration, it's expected to return no resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pediacluster\n```\n\nLANGUAGE: text\nCODE:\n```\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: Setting fzf Preview Alias\nDESCRIPTION: Creating a shell alias for fzf with preview functionality\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\necho \"alias fzfp='fzf --preview \\\"bat --style numbers \\\\n    --color always {}\\\"'\" | tee -a ~/.zshrc\n\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nix Shell Environment\nDESCRIPTION: This command initializes a Nix shell environment, which is used to manage development dependencies without relying on containers.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnix-shell --run $SHELL\n```\n\n----------------------------------------\n\nTITLE: Displaying Crossplane Composition Definition - Shell\nDESCRIPTION: Displays the contents of a Crossplane Composition YAML file (examples/object.yaml) using the cat command. This requires a Unix-like shell with access permissions to the specified file. The expected output is the YAML definition of a Composition, meant for use with the Crossplane control plane.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncat examples/object.yaml\n```\n\n----------------------------------------\n\nTITLE: Complete Taskfile Definition for Kubernetes Project\nDESCRIPTION: A complete Taskfile.yaml that defines various tasks for package management, testing, and cluster operations. It includes task dependencies, command sequencing, and variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '3'\n\ntasks:\n\n  # Package\n  package-generate:\n    desc: Generates package files.\n    cmds:\n      - timoni build dot-kubernetes timoni > package/all.yaml\n      - head -n -1 package/all.yaml > package/all.yaml.tmp\n      - mv package/all.yaml.tmp package/all.yaml\n  package-apply:\n    desc: Applies Compositions and Composite Resource Definition.\n    cmds:\n      - for: [\"definition.yaml\", \"all.yaml\"]\n        cmd: kubectl apply --filename package/{{ .ITEM }}\n  package-publish:\n    desc: Builds and pushes the package.\n    deps:\n      - package-generate\n    cmds:\n      - up login --token $UP_TOKEN\n      - up xpkg build --package-root package --name kubernetes.xpkg\n      - up xpkg push --package package/kubernetes.xpkg xpkg.upbound.io/$UP_ACCOUNT/dot-kubernetes:$VERSION\n      - rm package/kubernetes.xpkg\n      - yq --inplace \".spec.package = \\\"xpkg.upbound.io/devops-toolkit/dot-kubernetes:$VERSION\\\"\" config.yaml\n\n  # Test\n  test:\n    desc: Combines `cluster-create`, `test-watch` (without the watcher), and `cluster-destroy` tasks.\n    cmds:\n      - task: cluster-create\n      - task: test-watch\n      - defer: { task: cluster-destroy }\n  test-watch:\n    desc: Runs tests assuming that the cluster is already created and everything is installed.\n    deps:\n      - package-generate\n    cmds:\n      - task: package-apply\n      - kubectl kuttl test\n    watch: true\n    sources:\n      - timoni/**/*.cue\n      - tests/**/*.yaml\n    generates:\n      - package/all.yaml\n\n  # Cluster\n  cluster-create:\n    desc: Creates a kind cluster, installs Crossplane, providers, and packages, waits until they are healthy, and runs tests.\n    vars:\n      TIMEOUT: 300s\n      PROVIDERS:\n        sh: ls -1 providers | grep -v config\n    deps:\n      - package-generate\n      - cluster-create-kind\n      - helm-repo\n    cmds:\n      - helm upgrade --install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace --wait\n      - for: { var: PROVIDERS }\n        cmd: kubectl apply --filename providers/{{ .ITEM }}\n      - task: package-apply\n      - sleep 60\n      - kubectl wait --for=condition=healthy provider.pkg.crossplane.io --all --timeout={{.TIMEOUT}}\n      - kubectl wait --for=condition=healthy function.pkg.crossplane.io --all --timeout={{.TIMEOUT}}\n  cluster-destroy:\n    desc: Destroys the cluster\n    cmds:\n      - kind delete cluster\n  cluster-create-kind:\n    desc: Creates a kind cluster\n    cmds:\n      - cmd: kind create cluster\n        ignore_error: true\n    internal: true\n  helm-repo:\n    cmds:\n      - helm repo add crossplane-stable https://charts.crossplane.io/stable\n      - helm repo update\n    internal: true\n```\n\n----------------------------------------\n\nTITLE: Retrieving Neon Branch Connection String (Shell)\nDESCRIPTION: This command uses `neonctl connection-string` to fetch the database connection URI for the specified Neon branch (`dev/jane-doe`) and exports it as the environment variable `NEON_CONN_DEV` for subsequent use.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nexport NEON_CONN_DEV=$(neonctl connection-string dev/jane-doe)\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Secret Manifest\nDESCRIPTION: This command applies the Secret manifest to the Kubernetes cluster in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename volume/secret.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Devbox Shell Init Hook (JSON)\nDESCRIPTION: Defines an initialization hook in a Devbox JSON configuration to run a command (here, `bat README.md`) every new shell session. The JSON structure requires a `shell` object with an `init_hook` field, which is an array of shell command strings. When a Devbox shell is started, each command in the array is executed. This ensures environment consistency by displaying project documentation. Inputs: An array of shell commands. Output: Each command executes at shell startup. Limitations: Only commands listed in `init_hook` will run automatically.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"shell\": {\n    \"init_hook\": [\n      \"bat README.md\"\n    ],\n    ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repository to Verify Final Workflow Run (sh)\nDESCRIPTION: Uses the GitHub CLI (`gh`) command one last time to open the repository's web UI. The goal is to check the 'Actions' tab and confirm that the 'functional-tests' workflow was triggered only once after implementing the ReplicaSet-based EventSource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view --web\n```\n\n----------------------------------------\n\nTITLE: Viewing Captured Network Log with jq Formatting (Shell)\nDESCRIPTION: Reads the content of the `network.log` file (containing captured network events in JSON format) using `cat` and pipes the output to `jq` for pretty-printing. This makes the JSON data more human-readable for inspection.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncat network.log | jq .\n```\n\n----------------------------------------\n\nTITLE: Modifying YAML Manifest Parameter via yq - Shell Script\nDESCRIPTION: Updates the '.spec.id' field of the YAML manifest 'crossplane/app-dev-db.yaml' in place to a specific value using yq, a YAML processor for shell scripts. This allows automating custom resource parameterization before deployment. Requires yq to be installed and the manifest path to be accessible.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyq --inplace \".spec.id = \\\"vfarcic-silly-demo\\\"\" \\\n    crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Destroying Karpor Environment in Shell\nDESCRIPTION: Shell commands to terminate port-forwarding and destroy the Karpor environment on the specified hyperscaler. The script first stops active port-forwarding processes with Ctrl+C and then runs the destroy script passing the hyperscaler variable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\n./dot.nu destroy $HYPERSCALER\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kargo Freight Status in JSON Format\nDESCRIPTION: This sequence of commands retrieves the status of a specific freight in JSON format, showing in which stages it has been verified.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nexport FREIGHT_NAME=$(kubectl --namespace silly-demo \\\n    get freights --output jsonpath=\"{.items[0].metadata.name}\")\n\nkubectl --namespace silly-demo get freight $FREIGHT_NAME \\\n    --output jsonpath=\"{.status}\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repository in Browser to Check Actions (sh)\nDESCRIPTION: Uses the GitHub CLI (`gh`) command again to open the repository's web UI. This time, the purpose is to navigate to the 'Actions' tab and observe the status of workflows triggered by Argo Events.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view --web\n```\n\n----------------------------------------\n\nTITLE: Displaying a Simple kro Application Manifest\nDESCRIPTION: A shell command to display a YAML file containing a kro Application custom resource definition, which serves as an example of kro's simplified resource approach.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncat silly-demo-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Crossplane CRDs\nDESCRIPTION: Shell command to list Crossplane Custom Resource Definitions (CRDs) related to the devopstoolkit project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get crds | grep devopstoolkit\n```\n\n----------------------------------------\n\nTITLE: Viewing Argo CD Application Definition in Bash\nDESCRIPTION: Display the Argo CD Application manifest that defines how the application repository will be synchronized with the Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\ncat ../argocd/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Backstage Configuration Script (Shell)\nDESCRIPTION: Runs the `platform configure backstage` command, which executes a custom script to configure the Backstage instance from scratch, likely setting up plugins and initial settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nplatform configure backstage\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container with Signal Handling Enabled (sh)\nDESCRIPTION: This command starts the `silly-demo` Docker container similarly to the first snippet but omits the `NO_SIGNALS=true` environment variable. This allows the application inside the container to receive and handle signals like SIGTERM for graceful shutdown.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ndocker container run --interactive --tty --rm --publish 8080:8080 \\\n    --name silly-demo ghcr.io/vfarcic/silly-demo:1.4.178\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Validating Admission Policy and Binding - YAML\nDESCRIPTION: This YAML snippet defines a ValidatingAdmissionPolicy for the appclaims resource in a custom API group, with validation rules for scaling parameters. It enforces that scaling.enabled is set to true and scaling.min is greater than 1, applying to CREATE and UPDATE operations. The accompanying ValidatingAdmissionPolicyBinding binds the policy to enforce denials within the a-team namespace. Dependencies: Kubernetes cluster v1.30+ (for GA policies), admissionregistration.k8s.io/v1 API.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingAdmissionPolicy\nmetadata:\n  name: dot-app\nspec:\n  failurePolicy: Fail\n  matchConstraints:\n    resourceRules:\n    - apiGroups:   [\"devopstoolkit.live\"]\n      apiVersions: [\"*\"]\n      operations:  [\"CREATE\", \"UPDATE\"]\n      resources:   [\"appclaims\"]\n  validations:\n    - expression: |\n        has(object.spec.parameters.scaling) &&\n        has(object.spec.parameters.scaling.enabled) &&\n        object.spec.parameters.scaling.enabled\n      message: \"`spec.parameters.scaling.enabled` must be set to `true`.\"\n    - expression: |\n        has(object.spec.parameters.scaling) &&\n        object.spec.parameters.scaling.min > 1\n      message: \"`spec.parameters.scaling.min` must be greater than `1`.\"\n---\napiVersion: admissionregistration.k8s.io/v1\nkind: ValidatingAdmissionPolicyBinding\nmetadata:\n  name: dot-app\nspec:\n  policyName: dot-app\n  validationActions: [Deny]\n  matchResources:\n    namespaceSelector:\n      matchLabels:\n        kubernetes.io/metadata.name: a-team\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources in a Namespace using kubectl\nDESCRIPTION: Executes the `kubectl get` command to list all standard Kubernetes resources (Pods, Services, Deployments, ReplicaSets) as well as Ingress resources within the specified `a-team` namespace. This is used to verify the actual resources provisioned in the cluster corresponding to the Crossplane managed resources. Requires `kubectl` configured to access the target cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Upgrading to Production Mode for Backstage - Shell\nDESCRIPTION: This Helm command upgrades (or installs) the Backstage chart, this time with deployment mode set to 'production', telling the Helm templates to provision CloudNativePG and use a persistent PostgreSQL database. It leverages the same chart as development, but parameterizes the 'mode'. Inputs are CLI parameters; dependencies: Helm CLI, ./chart directory, access to the production Kubernetes cluster. Outputs are updated or newly-created Kubernetes resources and status messages.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install backstage ./chart \\\n    --namespace backstage --set mode=production --wait\n```\n\n----------------------------------------\n\nTITLE: Confirming Namespace Restoration using kubectl\nDESCRIPTION: Uses `kubectl` to list all namespaces in the Kubernetes cluster defined by `kubeconfig-dot2.yaml` after the restore operation. This command confirms that the `a-team` namespace has been successfully created by Velero.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml get namespaces\n```\n\n----------------------------------------\n\nTITLE: Sending Second Fibonacci Request to Docker Container (sh)\nDESCRIPTION: This command uses `curl` to send an HTTP GET request to the `/fibonacci` endpoint of the application running on `localhost:8080`. It requests the calculation of the 45th Fibonacci number. This request is sent before initiating a shutdown to test graceful handling.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://localhost:8080/fibonacci?number=45\"\n```\n\n----------------------------------------\n\nTITLE: Filtering and Sorting Files by Size with Nushell\nDESCRIPTION: This Nushell command lists directory contents (`ls`), filters the output to include only entries of type \"file\" (`where type == \"file\"`), further filters to keep only files larger than 1 kilobyte (`where size > 1kb`), and finally sorts the remaining files by their size (`sort-by size`) in ascending order. It relies on the `ls`, `where`, and `sort-by` built-in Nushell commands. The input is the current directory listing, and the output is a table of files meeting the criteria, sorted by size.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nls | where type == \"file\" | where size > 1kb | sort-by size\n```\n\n----------------------------------------\n\nTITLE: Displaying Workflow Section from Application YAML with Shell\nDESCRIPTION: This shell command uses 'cat' to display the full contents of 'app.yaml'. In this instructional context, it highlights the workflow definition, showing how various workflow steps are structured within the KubeVela Application manifest. The command presumes that 'app.yaml' is present in the current directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncat app.yaml\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested YAML Properties in Nushell\nDESCRIPTION: Demonstrates how to retrieve specific nested fields from a YAML file using piping and the get command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nopen settings.yaml | get production.azure.location\n```\n\n----------------------------------------\n\nTITLE: Example of Deprecated ControllerConfig Resource (YAML)\nDESCRIPTION: This YAML snippet shows a commented-out definition for a `pkg.crossplane.io/v1alpha1` `ControllerConfig` resource. It serves as an example of a feature that was deprecated and removed in Crossplane v2, highlighting changes users might need to address when migrating.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n...\n# ---\n# apiVersion: pkg.crossplane.io/v1alpha1\n# kind: ControllerConfig\n# metadata:\n#   name: crossplane-provider-kubernetes\n# spec:\n```\n\n----------------------------------------\n\nTITLE: Querying All Pods Across Namespaces with kubectl and Clusterpedia (Shell)\nDESCRIPTION: This shell command retrieves all pods from every namespace and synchronized cluster using kubectl and specifies the Clusterpedia cluster as the API target. The setup requires Clusterpedia configured to sync pod resources; otherwise, not all clusters may be represented. The key parameters are the --cluster flag, resource type (pods), and --all-namespaces. The output reflects only the clusters and resources that Clusterpedia is configured to collect.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia get pods --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Cluster in Nushell\nDESCRIPTION: This snippet defines a Nushell command to create a Kubernetes cluster. It supports different providers and sets up the KUBECONFIG environment variable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: nushell\nCODE:\n```\ndef --env \"main create kubernetes\" [provider: string, name = \"dot\", min_nodes = 2, max_nodes = 4, auth = true] {\n\n    $env.KUBECONFIG = $\"($env.PWD)/kubeconfig-($name).yaml\"\n    $\"export KUBECONFIG=($env.KUBECONFIG)\\n\" | save --append .env\n\n    if $provider == \"google\" {\n\n        if $auth {\n            gcloud auth login\n        }\n\n        ...\n```\n\n----------------------------------------\n\nTITLE: Sample Kubernetes Pod YAML Output - YAML\nDESCRIPTION: An excerpt of a Kubernetes YAML manifest for a Pod resource showing status fields, including IP allocation (hostIP, podIP, and podIPs), running phase, and start time. Used to provide contextual reference for output of 'kubectl get pod' commands. No dependencies beyond being a standard Kubernetes object representation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: v1\nitems:\n  - apiVersion: v1\n    kind: Pod\n    ...\n    status:\n      ...\n      hostIP: 10.142.0.14\n      phase: Running\n      podIP: 10.124.0.8\n      podIPs:\n        - ip: 10.124.0.8\n      qosClass: Burstable\n      startTime: \"2024-04-16T19:46:38Z\"\n```\n\n----------------------------------------\n\nTITLE: Common Installation Resources\nDESCRIPTION: YAML template defining common resources with dynamic binding values\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: (join('-', ['my-db', $hyperscaler, 'password']))\ndata:\n  password: cG9zdGdyZXM=\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: my-db\nspec:\n  id: (join('-', ['my-db', $hyperscaler]))\n  compositionSelector:\n    matchLabels:\n      provider: ($hyperscaler)\n      db: postgresql\n  parameters:\n    version: \"13.4\"\n    size: medium\n```\n\n----------------------------------------\n\nTITLE: Listing All Application Custom Resources in a Namespace - Shell\nDESCRIPTION: Lists all Application custom resources that match the schema defined earlier within the 'a-team' namespace using 'kubectl get'. Assumes the Application CRD and at least one instance are present. Displays columns for name, state, synced status, and age.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team get applications\n```\n\n----------------------------------------\n\nTITLE: Global Search for Arbitrary String in Resource Content - Karpor Dashboard - SQL\nDESCRIPTION: This SQL query finds any Kubernetes resources (of any type, namespace, or cluster) where the string 'production' appears anywhere in the resource content. This is especially useful for broad investigations with minimal prior knowledge of labeling or structure. Input is the search string; output is a set of resources mentioning 'production' in any field.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nwhere contains(content, 'production')\n```\n\n----------------------------------------\n\nTITLE: Crossplane Backend Application Definition with Database Connection\nDESCRIPTION: YAML configuration for a backend application using Crossplane's AppClaim custom resource. It defines the application image, port, host, and database connection details using abstractions that simplify complex configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1alpha1\nkind: AppClaim\nmetadata:\n  name: silly-demo\nspec:\n  id: silly-demo\n  compositionSelector:\n    matchLabels:\n      type: backend\n      location: local\n  parameters:\n    image: ghcr.io/vfarcic/idp-full-demo\n    tag: 0.0.7\n    port: 8080\n    host: staging.silly-demo.44.208.175.85.nip.io\n    ingressClassName: contour\n    db:\n      secret: silly-demo-db\n      storeName: aws\n      name: main\n```\n\n----------------------------------------\n\nTITLE: Spinning Up a Dev Container Using Devpod - Shell\nDESCRIPTION: Invokes the creation of a Dev Container in the current directory using Devpod. Builds or reuses an image, provisions all necessary resources in the configured provider (e.g., Kubernetes), and establishes the development environment. Prerequisites include a valid devcontainer.json and Dockerfile; outputs provision logs and, on completion, opens the connected IDE (typically VS Code).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ndevpod up .\n```\n\n----------------------------------------\n\nTITLE: Merging GitHub Pull Request\nDESCRIPTION: Command to merge the automatically created PR containing CI workflow configurations and pulling the latest changes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngh pr merge silly-demo-ci --rebase\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Packaging and Pushing WASM as OCI Image with Spin\nDESCRIPTION: This shell command uses Fermyon Spin to package the previously built WASM binary (`main.wasm`) into an OCI-compliant container image and push it to the specified container registry (`ttl.sh`) with the tag `kwasm-demo:v0.0.1`. `ttl.sh` is a temporary registry.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nspin registry push ttl.sh/kwasm-demo:v0.0.1\n```\n\n----------------------------------------\n\nTITLE: Waiting for AtlasSchema Readiness (Shell)\nDESCRIPTION: This `kubectl wait` command pauses execution until the `AtlasSchema` resource named `silly-demo` in the `a-team` namespace reports a condition of `ready`. This ensures the Atlas operator has finished applying schema changes to the database. It includes a timeout of 300 seconds.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team wait atlasschema silly-demo \\\n    --for=condition=ready --timeout=300s\n```\n\n----------------------------------------\n\nTITLE: Listing Zellij Sessions\nDESCRIPTION: Lists all active Zellij sessions using the 'zellij list-sessions' command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nzellij list-sessions\n```\n\n----------------------------------------\n\nTITLE: Displaying Improved Crossplane Composition Definition - Shell\nDESCRIPTION: Prints the contents of a new Crossplane Composition YAML file (package/frontend.yaml) using the cat command. The output showcases a more direct YAML-based resource composition approach that omits Managed Resource wrappers. This requires a typical Unix-like CLI environment and access permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncat package/frontend.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Provider Configuration File (Shell)\nDESCRIPTION: This shell command displays the content of the `providers/provider-kubernetes-incluster.yaml` file. This file likely contains configuration related to a Crossplane provider, and is shown in the context of discussing deprecated features removed in v2, such as `ControllerConfig`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncat providers/provider-kubernetes-incluster.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Old Version of Crossplane Claim\nDESCRIPTION: This snippet shows the command to display an example of an old version Crossplane Claim, highlighting the use of spec.parameters and compositionSelector.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncat examples/aws-v1.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkit.live/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: my-db\nspec:\n  id: my-db\n  parameters:\n    version: \"16.3\"\n    size: medium\n    region: us-east-1\n    ...\n  compositionSelector:\n    matchLabels:\n      provider: aws\n      db: postgresql\n```\n\n----------------------------------------\n\nTITLE: Listing PushSecrets in Control Plane (Shell)\nDESCRIPTION: Lists all resources of type `pushsecrets` (part of the External Secrets Operator extension or a custom implementation) within the `a-team` namespace of the control plane cluster. This verifies that the PushSecret (`my-db`) responsible for pushing the database credentials to the external secrets manager was created.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pushsecrets\n```\n\n----------------------------------------\n\nTITLE: Observing Successful Response After Pod Deletion Request (sh)\nDESCRIPTION: This shows the expected output from the `curl` request (the 45th Fibonacci number). Its appearance after the `kubectl delete pod` command confirms that the application inside the Pod finished processing the ongoing request and sent the response before terminating, thanks to graceful shutdown handling (SIGTERM).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\n1134903170\n```\n\n----------------------------------------\n\nTITLE: Dumping Current Zellij Configuration in Shell\nDESCRIPTION: This command prints the current Zellij configuration, including keybindings, plugins, and settings, to standard output. This allows users to inspect the default configuration or save it to a file (e.g., ~/.config/zellij/config.kdl) for customization.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nzellij setup --dump-config\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resources\nDESCRIPTION: Shell command to trace all resources composed from the AppClaim using Crossplane's beta trace feature.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace --namespace a-team appclaim silly-demo\n```\n\n----------------------------------------\n\nTITLE: Generating XRD with DevEx CLI for Crossplane\nDESCRIPTION: This snippet demonstrates how to use the 'up' CLI to generate an XRD (Composite Resource Definition) based on an example YAML file. It showcases the time-saving capabilities of DevEx for Crossplane users.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nup xrd generate examples/sql/my-db.yaml\n\ncode apis/xsqls/definition.yaml\n```\n\n----------------------------------------\n\nTITLE: Inspecting Steampipe Connections\nDESCRIPTION: This SQL command inspects the Steampipe connections, showing the status of each configured Kubernetes cluster connection.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\n.inspect\n```\n\n----------------------------------------\n\nTITLE: Listing ExternalSecrets in Control Plane (Shell)\nDESCRIPTION: Lists all resources of type `externalsecrets.external-secrets.io` within the `a-team` namespace of the control plane cluster. This command verifies the creation of the ExternalSecret responsible for pulling the root password (`my-db-password`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team \\\n    get externalsecrets.external-secrets.io\n```\n\n----------------------------------------\n\nTITLE: Querying Synced API Resources for dot-02 via Clusterpedia (Shell)\nDESCRIPTION: Similar to the previous command, this uses `kubectl --cluster dot-02` to list API resources for the `dot-02` cluster via Clusterpedia. Because `dot-02` was configured to sync more resource types (including all from `apps`, core, `networking.k8s.io`, etc.), the output lists a larger set of resources compared to `dot-01`, reflecting the specific sync rules applied.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster dot-02 api-resources\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME                          SHORTNAMES APIVERSION                               NAMESPACED KIND\nconfigmaps                    cm         v1                                       true       ConfigMap\nendpoints                     ep         v1                                       true       Endpoints\nevents                        ev         v1                                       true       Event\nlimitranges                   limits     v1                                       true       LimitRange\n...\ncontrollerrevisions                      apps/v1                                  true       ControllerRevision\ndaemonsets                    ds         apps/v1                                  true       DaemonSet\ndeployments                   deploy     apps/v1                                  true       Deployment\n...\nproviderconfigs                          azure.upbound.io/v1beta1                 false      ProviderConfig\n```\n\n----------------------------------------\n\nTITLE: Applying a DaemonSet in Kubernetes\nDESCRIPTION: Command to apply a DaemonSet manifest to a Kubernetes cluster in the a-team namespace, which will deploy pods across all worker nodes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename daemonset/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Extracting Connection Name from Context for All Kubernetes Pods (SQL)\nDESCRIPTION: Queries the `kubernetes_all.kubernetes_pod` table, selecting the `namespace` and `name`. It uses the `->` operator to extract the `connection_name` field from the `_ctx` JSONB column and aliases it as `cluster`. This provides a clearer view of which cluster each pod belongs to.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx -> 'connection_name' as cluster, namespace, name from kubernetes_all.kubernetes_pod;\n```\n\n----------------------------------------\n\nTITLE: Common Assert Installation Template\nDESCRIPTION: YAML template defining common assertion checks with dynamic binding values\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: my-db\nspec:\n  compositionRef:\n    name: (join('-', [$hyperscaler, 'postgresql']))\n  compositionSelector:\n    matchLabels:\n      db: postgresql\n      provider: ($hyperscaler)\n  id: (join('-', ['my-db', $hyperscaler]))\n  parameters:\n    size: medium\n    version: \"13.4\"\n  resourceRef:\n    apiVersion: devopstoolkitseries.com/v1alpha1\n    kind: SQL\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env using Source in Shell\nDESCRIPTION: Loads environment variables defined in the .env file into the current shell session. This is required to ensure downstream tools and commands are properly configured. Prerequisites: .env file exists, shell is Bash or compatible. Inputs: .env file. Output: Current shell has the necessary environment variables set.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Displaying Prompt with 'plain-text-symbols' Preset (Text)\nDESCRIPTION: Shows the example shell prompt after applying the 'plain-text-symbols' Starship preset. Modules like Git, Nix, and GCP are identified using text labels instead of icons.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\ndotfiles-demo on git main via nix impure (nix-shell-env) on gcp viktor@farcic.com(us-east1)\n```\n\n----------------------------------------\n\nTITLE: Toggling Modules On/Off in Starship\nDESCRIPTION: Demonstrates how to use the starship toggle command to quickly enable or disable specific modules without editing the configuration file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nstarship toggle nix_shell\n```\n\n----------------------------------------\n\nTITLE: Sample Pod Status Output After Scaling - Plain Text\nDESCRIPTION: Displays the output of 'kubectl get pods' after scaling, capturing various pod states such as Pending, Running, CrashLoopBackOff, and OOMKilled. This output illustrates the impact of scaling and resource shortages on pod scheduling and health. No parameters or runtime dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME           READY STATUS                 RESTARTS    AGE\\nsilly-demo-... 0/1   Pending                0           35s\\nsilly-demo-... 0/1   Pending                0           98s\\nsilly-demo-... 0/1   OOMKilled              1           113s\\nsilly-demo-... 0/1   Pending                0           98s\\nsilly-demo-... 1/1   Running                1 (43s ago) 113s\\nsilly-demo-... 1/1   Running                1 (27s ago) 98s\\nsilly-demo-... 0/1   CrashLoopBackOff       2 (26s ago) 113s\\nsilly-demo-... 0/1   CrashLoopBackOff       2 (14s ago) 2m8s\\nsilly-demo-... 0/1   Pending                0           98s\\nsilly-demo-... 0/1   Pending                0           98s\\nsilly-demo-... 1/1   Running                1 (39s ago) 98s\\nsilly-demo-... 0/1   Pending                0           78s\\nsilly-demo-... 0/1   Pending                0           98s\\nsilly-demo-... 0/1   ContainerStatusUnknown 1 (85s ago) 113s\\nsilly-demo-... 0/1   Pending                0           82s\\nsilly-demo-... 1/1   Running                2 (64s ago) 2m8s\\nsilly-demo-... 1/1   Running                3 (31s ago) 2m8s\\nsilly-demo-... 1/1   Running                0           5m38s\\nsilly-demo-... 0/1   Pending                0           82s\\nsilly-demo-... 0/1   Pending                0           82s\\nsilly-demo-... 0/1   Pending                0           97s\\nsilly-demo-... 0/1   Pending                0           82s\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Zsh Syntax Highlighting with Docker Command\nDESCRIPTION: This snippet executes `docker container ls`. It serves as another example for `zsh-syntax-highlighting`, showing the command and its subcommand/arguments potentially colored differently. It also adds this command to the shell history, which will be used in later examples for autosuggestions and history search plugins.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker container ls\n```\n\n----------------------------------------\n\nTITLE: Viewing DaemonSet Resource Tree Output\nDESCRIPTION: Output showing the DaemonSet's resource tree, demonstrating how it created three pods (one for each worker node) without specifying replicas explicitly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_43\n\nLANGUAGE: plaintext\nCODE:\n```\nNAMESPACE NAME                                      READY REASON AGE\na-team    DaemonSet/silly-demo                      -            4s \na-team    ├─ControllerRevision/silly-demo-5f76b8d84 -            4s \na-team    ├─Pod/silly-demo-6w5fb                    True         4s \na-team    ├─Pod/silly-demo-mhpcj                    True         4s \na-team    └─Pod/silly-demo-wrdrs                    True         4s\n```\n\n----------------------------------------\n\nTITLE: View Database Component Definition\nDESCRIPTION: Command to display the database component configuration file\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ncat component-db-$HYPERSCALER.cue\n```\n\n----------------------------------------\n\nTITLE: Inspecting Deployed Kubernetes Resources\nDESCRIPTION: Command to inspect all Kubernetes resources created in the 'dev' namespace after deploying an application with KubeVela. This shows how KubeVela generates multiple Kubernetes objects from a simplified application definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace dev get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request with curl (Shell)\nDESCRIPTION: Demonstrates sending a simple HTTP GET request to a specified URL using the `curl` command-line tool. This example illustrates a low-level interaction with a web service, highlighting `curl`'s generic nature.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.127.0.0.1.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Checking KRO ResourceGroup Status\nDESCRIPTION: Examining the ResourceGroup 'application' to understand the controller state, showing that conditions appear normal but the actual resources aren't being created correctly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team describe resourcegroup application\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nName:         application\n...\nSpec:\n  ...\nStatus:\n  Conditions:\n    Last Transition Time:  2024-11-19T00:04:54Z\n    Message:               micro controller is ready\n    Reason:                \n    Status:                True\n    Type:                  ReconcilerReady\n    Last Transition Time:  2024-11-19T00:04:54Z\n    Message:               Directed Acyclic Graph is synced\n    Reason:                \n    Status:                True\n    Type:                  GraphVerified\n    Last Transition Time:  2024-11-19T00:04:54Z\n    Message:               Custom Resource Definition is synced\n    Reason:                \n    Status:                True\n    Type:                  CustomResourceDefinitionSynced\n  State:                   Active\n  Topological Order:\n    deployment\n    ingress\n    service\nEvents:  <none>\n```\n\n----------------------------------------\n\nTITLE: Applying an Example Application Resource to the Cluster - Shell\nDESCRIPTION: Applies the 'silly-demo.yaml' Application CR to the 'a-team' namespace using 'kubectl'. Requires a working kubeconfig and the appropriate kro CRD and controller to be present. Outputs resource creation or update details. There are no input parameters besides the namespace and file name.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply --filename silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Deployment Shell Commands\nDESCRIPTION: Shell commands for applying the component definition, creating necessary secrets, and deploying the application using KubeVela CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: bash\nCODE:\n```\nvela def apply component-db-$HYPERSCALER.cue\nkubectl --namespace prod apply --filename db-$HYPERSCALER-password.yaml\nvela up --file db-$HYPERSCALER.yaml --env prod\nvela status silly-demo-db --env prod\nkubectl get managed\nkubectl --namespace prod get all\n```\n\n----------------------------------------\n\nTITLE: Applying Custom Resource Claim\nDESCRIPTION: Shell command to apply the custom AppClaim resource to the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename tmp/appclaim.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating a Neon Database Branch (Shell)\nDESCRIPTION: This command utilizes the `neonctl` CLI tool to create a new database branch named `dev/jane-doe` within the Neon platform. This allows for isolated schema changes and testing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nneonctl branches create --name dev/jane-doe\n```\n\n----------------------------------------\n\nTITLE: Accessing Backend Service via Curl (Shell)\nDESCRIPTION: This command uses `curl` to send an HTTP GET request directly to the backend service's root endpoint. The URL is constructed using the 'staging.silly-demo.' prefix and the `$INGRESS_HOST` environment variable. It's used to test direct connectivity and the response from the backend.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://staging.silly-demo.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Initial Project Configuration\nDESCRIPTION: The default upbound.yaml configuration file generated during project initialization.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: meta.dev.upbound.io/v1alpha1\nkind: Project\nmetadata:\n  creationTimestamp: null\n  name: silly-demo\nspec:\n  description: This is where you can describe your project.\n  license: Apache-2.0\n  maintainer: Upbound User <user@example.com>\n  readme: |\n    This is where you can add a readme for your project.\n  repository: xpkg.upbound.io/<YOUR ORGANIZATION>/silly-demo\n  source: github.com/upbound/project-template\n```\n\n----------------------------------------\n\nTITLE: Running Setup Script for kro Demo\nDESCRIPTION: Commands to make the setup script executable and run it, followed by sourcing environment variables. The script likely creates a Kubernetes cluster and installs necessary components.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.nu\n\n./setup.nu\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Viewing Custom Resource Claim\nDESCRIPTION: Shell command to display the contents of a custom application claim definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat tmp/appclaim.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing OAM-related Kubernetes CRDs\nDESCRIPTION: Command to list all Custom Resource Definitions (CRDs) related to Open Application Model (OAM) in the Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get crds | grep oam\n```\n\n----------------------------------------\n\nTITLE: Creating a Velero Backup (Shell)\nDESCRIPTION: This command uses the Velero command-line interface (CLI) to create a new backup of the Kubernetes cluster state. The backup is named 'pre-disaster'. This captures the state of cluster resources at the time of execution, intended for later restoration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nvelero backup create pre-disaster\n```\n\n----------------------------------------\n\nTITLE: Reapplying the Application with Updated ResourceGroup Template\nDESCRIPTION: Kubernetes command to reapply the Application resource to use the updated ResourceGroup template with database environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename silly-demo-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status in Kubernetes Namespace (sh)\nDESCRIPTION: This command uses `kubectl` to list all pods within the 'ollama' namespace. It's used here to check the status of the newly deployed 'ollama2' instance alongside the original one.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace ollama get pods\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Zellij Session and Git Repository (sh)\nDESCRIPTION: This sequence of commands performs cleanup tasks. `zellij delete-session dot` removes the Zellij terminal multiplexer session named 'dot'. `exit` closes the current shell. `git stash` saves uncommitted changes. `git checkout master` switches the Git repository back to the master branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nzellij delete-session dot\n\nexit\n\ngit stash\n\ngit checkout master\n```\n\n----------------------------------------\n\nTITLE: Applying the Updated ResourceGroup in Kubernetes\nDESCRIPTION: This shell command applies the updated ResourceGroup YAML to the 'a-team' namespace in Kubernetes. It's used to update the existing ResourceGroup with the new Ingress configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename resource-group-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Argo CD Application YAML - Shell\nDESCRIPTION: This snippet shows the shell command used to output the YAML definition for an Argo CD Application. It assumes that the apps/silly-demo.yaml file exists in the current working directory. The command prints the file contents to the console for review. No dependencies are required other than a Unix shell environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncat apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Ingress Information in Nushell\nDESCRIPTION: A Nushell function that retrieves ingress information from a Kubernetes cluster. Specifically handles AWS provider and extracts the ingress hostname from a Traefik service.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"main get ingress\" [provider: string, type = \"traefik\", env_prefix = \"\"] {\n\n    sleep 30sec\n    \n    mut ingress_ip = \"\"\n  \n    if $provider == \"aws\" {\n\n        let ingress_hostname = (\n            kubectl --namespace traefik\n                get service traefik --output yaml\n                | from yaml\n                | get status.loadBalancer.ingress.0.hostname\n        )\n        ...\n```\n\n----------------------------------------\n\nTITLE: Searching for Devbox Packages Containing 'crossplane' using Shell\nDESCRIPTION: This command utilizes the `devbox search` utility to find available packages in the Nix package repository whose names contain 'crossplane'. It's used to discover relevant packages for managing Crossplane within the Devbox environment. The output lists potential matches with available versions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndevbox search crossplane\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing Demo Repository using Git in Shell\nDESCRIPTION: This sequence of shell commands uses Git to download the 'idp-full-demo' repository from GitHub, changes the current directory to the cloned repository, fetches all remote updates, and checks out the 'clis' branch. This prepares the necessary source code for setting up the custom CLI environment described in the document. Requires Git to be installed and network access to GitHub.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/idp-full-demo\n\ncd idp-full-demo\n\ngit fetch\n\ngit checkout clis\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Mounted ConfigMap Volume\nDESCRIPTION: This shell command lists the contents of the '/cache' directory inside the 'silly-demo' container, showing how ConfigMap keys are mounted as files.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- ls /cache/\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace-Scoped Composite Resource Definition (YAML)\nDESCRIPTION: This YAML snippet shows a Crossplane `CompositeResourceDefinition` for `sqls.devopstoolkit.live`. Crucially, it uses `apiVersion: apiextensions.crossplane.io/v2alpha1`, which signifies that the Composite Resources defined by this CRD, and the resources they manage, should be Namespace-scoped rather than cluster-scoped (which uses `v1`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v2alpha1\nkind: CompositeResourceDefinition\nmetadata:\n  name: sqls.devopstoolkit.live\nspec:\n  ...\n```\n\n----------------------------------------\n\nTITLE: Activating the Devbox Development Environment using Shell\nDESCRIPTION: This command executes `devbox shell`, which activates a development environment managed by Devbox. It ensures that all necessary tools and dependencies specified in the project's `devbox.json` file are available within the current shell session. Requires Devbox to be installed and a `devbox.json` file present in the directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Job Output Logs\nDESCRIPTION: Output showing the result of the command executed by the Job, demonstrating that the pod successfully ran the echo command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_53\n\nLANGUAGE: plaintext\nCODE:\n```\nWhat is this?\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Service Manifest (Shell)\nDESCRIPTION: This command uses 'kubectl apply' to create or update the Kubernetes Service defined in 'service/base.yaml' within the 'a-team' namespace. It requires kubectl configured to access a Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename service/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes ConfigMap and Deployment\nDESCRIPTION: This YAML snippet defines a ConfigMap 'silly-demo' with two data entries and a Deployment that uses this ConfigMap. It demonstrates how to mount the ConfigMap as a volume and how to use its data as environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\ndata:\n  videos.yaml: |\n    - id: \"1\"\n      title: something\n    - id: \"2\"\n      title: else\n    - id: \"3\"\n      title: something new\n  message: Hello, DevOps Toolkit!\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: silly-demo\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.235-alpine\n          ...\n          envFrom:\n            - configMapRef:\n                name: silly-demo\n          env:\n            - name: MESSAGE\n              valueFrom:\n                configMapKeyRef:\n                  name: silly-demo\n                  key: message\n          volumeMounts:\n            - name: cache\n              mountPath: /cache\n      volumes:\n        - name: cache\n          configMap:\n            name: silly-demo\n```\n\n----------------------------------------\n\nTITLE: Viewing a kro ResourceGroup Definition - Shell\nDESCRIPTION: This snippet uses the shell command 'cat' to display the contents of the 'resource-group.yaml' file. It is required as a preliminary step to review and confirm the YAML contents before applying it to Kubernetes. No dependencies except access to the file in the local environment are needed, and it outputs the file as-is to the terminal.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncat resource-group.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning and Switching Git Repository for Devpod Demo\nDESCRIPTION: These commands clone a Git repository named 'silly-demo', navigate into it, update it, and switch to the 'devpod' branch. This prepares the environment for the Devpod demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/silly-demo\n\ncd silly-demo\n\ngit pull\n\ngit fetch\n\ngit switch devpod\n```\n\n----------------------------------------\n\nTITLE: Viewing KRO Application Details with kubectl\nDESCRIPTION: Retrieving details of the 'silly-demo' Application resource, showing its configuration for the image, name, port and tag without any events information.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team describe applications silly-demo\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n  Creation Timestamp:  2024-11-19T00:05:01Z\n  Generation:          1\n  Resource Version:    1367\n  UID:                 be2c7355-f73e-44fe-ac39-fdf97cc3c75b\nSpec:\n  Image:  ghcr.io/vfarcic/silly-demo\n  Name:   silly-demo\n  Port:   8080\n  Tag:    1.4.305\nEvents:   <none>\n```\n\n----------------------------------------\n\nTITLE: Custom File Listing with eza Excluding Certain Columns and Including Git Info - Shell Script\nDESCRIPTION: Executes eza with multiple filters (--long, --all, --no-permissions, --no-filesize, --no-user, --no-time) and --git, producing a concise colored list that excludes various metadata but includes per-file Git status. Requires eza and a Git-initialized directory. Input is the active directory; output is a colorized file listing with Git indicators and minimal metadata.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\neza --long --all --no-permissions --no-filesize --no-user \\\n    --no-time --git\n```\n\n----------------------------------------\n\nTITLE: Setting Up Argo Events Demo Environment\nDESCRIPTION: A series of shell commands to set up the demo environment, including forking a repository, creating a Kubernetes cluster, installing Argo CD and Argo Events, and configuring the necessary resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngh repo fork vfarcic/argo-events-gh-demo --clone --remote\n\ncd argo-events-gh-demo\n\ngh repo set-default\n\ndevbox shell\n\nkind create cluster\n\nkubectl create namespace a-team\n\nhelm upgrade --install argocd argo-cd \\\n    --repo https://argoproj.github.io/argo-helm \\\n    --namespace argocd --create-namespace \\\n    --values values-argocd.yaml --wait\n\nREPO_URL=$(git config --get remote.origin.url)\n\nyq --inplace \".spec.source.repoURL = \\\"$REPO_URL\\\"\" \\\n    apps-argocd.yaml\n\nyq --inplace \".spec.source.repoURL = \\\"$REPO_URL\\\"\" \\\n    apps/silly-demo.yaml\n\ngit add .\n\ngit commit -m \"Make it my own\"\n\ngit push\n\nkubectl apply --filename apps-argocd.yaml\n\nhelm upgrade --install argo-events argo-events \\\n    --repo https://argoproj.github.io/argo-helm \\\n    --namespace argo-events --create-namespace \\\n    --set webhook.enabled=true --wait\n\nkubectl --namespace argo-events apply \\\n    --filename https://raw.githubusercontent.com/argoproj/argo-events/stable/examples/eventbus/native.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing Ingress with cURL\nDESCRIPTION: This cURL command tests the Ingress by sending a request to the configured domain using nip.io for DNS resolution.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.$EXTERNAL_IP.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Monitoring Argo Rollout Status with kubectl Plugin in Shell\nDESCRIPTION: This command uses the `kubectl argo rollouts` plugin to get and continuously watch (`--watch`) the status of the `silly-demo` Rollout resource within the `a-team` namespace. It provides real-time updates on the deployment progress.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl argo rollouts --namespace a-team get rollout silly-demo \\\n    --watch\n```\n\n----------------------------------------\n\nTITLE: Enhanced File Viewing with bat\nDESCRIPTION: Using bat command to view files with syntax highlighting and Git integration features\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nbat k8s/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub Pull Request Details\nDESCRIPTION: Shell command to view the details of the pull request, specifically the files changed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ngh pr view silly-demo-ci --json files\n```\n\n----------------------------------------\n\nTITLE: Tracing TCP Connections\nDESCRIPTION: Command to trace TCP connections in the a-team namespace, showing source and destination IP addresses and ports.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget trace tcp --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Setting Up Dev Containers Environment with Nushell Script\nDESCRIPTION: These commands make the dot.nu script executable, run it to set up the Dev Containers environment, and source the resulting .env file. This prepares the system for using Dev Containers.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x dot.nu\n\n./dot.nu setup devcontainers\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Sourcing Environment Variables for Development (Shell)\nDESCRIPTION: This shell command sources the '.env' file, importing environment variable definitions into the shell session. The '.env' file must exist and be properly formatted (key=value lines). Input is the contents of '.env'; output is new environment variables available for command-line and application usage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: shell\nCODE:\n```\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Demo Repository\nDESCRIPTION: These commands clone the demo repository, navigate to the correct directory, and checkout the 'policies' branch to prepare for the demonstration of Kubernetes Validating Admission Policies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/idp-full-demo\n\ncd idp-full-demo\n\ngit fetch\n\ngit checkout policies\n```\n\n----------------------------------------\n\nTITLE: Starting the Steampipe Interactive Query Shell\nDESCRIPTION: This shell command launches the Steampipe interactive query environment. In this shell, users can execute SQL queries against configured resources and use Steampipe meta-commands (like `.inspect`, `.tables`, `.exit`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nsteampipe query\n```\n\n----------------------------------------\n\nTITLE: Patching Kubernetes Application to Remove Finalizers\nDESCRIPTION: This shell command patches the 'silly-demo' Application in the 'a-team' namespace to remove its finalizers. It's used as a workaround when the application cannot be deleted normally.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team patch application silly-demo \\\n    --patch '{\"metadata\":{\"finalizers\":null}}' --type=merge\n```\n\n----------------------------------------\n\nTITLE: Checking GPU Node Taints in Kubernetes\nDESCRIPTION: Command to check the taints applied to GPU nodes in Kubernetes, which is important for understanding scheduling constraints for GPU workloads.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get node \\\n    --selector cloud.google.com/gke-nodepool=dot-gpu \\\n    --output jsonpath=\"{.items[0].spec.taints[0]}\" \\\n    | jq .\n```\n\n----------------------------------------\n\nTITLE: Listing Available AI Models in Ollama\nDESCRIPTION: Command to list all available AI models in the Ollama deployment running in Kubernetes with GPU acceleration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nollama list\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane AppClaim Manifest (YAML)\nDESCRIPTION: This YAML snippet defines a Crossplane AppClaim resource for deployment on Kubernetes, including resource metadata, selectors, and parameterization. Dependencies include a Crossplane-enabled cluster and custom resources installed for 'devopstoolkit.live/v1alpha1'. Key parameters like 'id', 'host', 'db', and image information drive the provisioning of backend infrastructure components. Inputs are specified directly; output is a claim for backend services and database resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1alpha1\\nkind: AppClaim\\nmetadata:\\n  name: silly-demo\\nspec:\\n  id: vfarcic-silly-demo\\n  compositionSelector:\\n    matchLabels:\\n      type: backend\\n      location: local\\n  parameters:\\n    image: ghcr.io/vfarcic/idp-full-demo\\n    tag: 0.0.5\\n    port: 8080\\n    host: vfarcic.silly-demo.44.208.175.85.nip.io\\n    ingressClassName: contour\\n    db:\\n      secret: silly-demo-db\\n      storeName: aws\\n      name: main\n```\n\n----------------------------------------\n\nTITLE: Opening Generated XRD File with code Command (Shell)\nDESCRIPTION: Executes the `code` command to open the generated Composite Resource Definition (XRD) file (`apis/xsqls/definition.yaml`) in the editor for inspection or further refinement.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncode apis/xsqls/definition.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting HPA and Deployment Resources using kubectl (sh)\nDESCRIPTION: Deletes the Kubernetes resources defined in `scale/hpa.yaml` (HorizontalPodAutoscaler) and `scale/app-resources.yaml` (Deployment) from the 'a-team' namespace using `kubectl delete`. This cleans up the HPA and its target Deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename scale/hpa.yaml\n\nkubectl --namespace a-team delete \\\n    --filename scale/app-resources.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Backstage Production Settings\nDESCRIPTION: Production configuration for Backstage including PostgreSQL database connection settings and GitHub catalog provider configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbackend:\n  database:\n    client: pg\n    connection:\n      host: ${DB_HOST}\n      port: 5432\n      user: ${user}\n      password: ${password}\ncatalog:\n  providers:\n    github:\n      catalogInfo:\n        filters:\n          branch: main\n          repository: \".*\"\n      templates:\n        filters:\n          branch: main\n          repository: \".*\"\n```\n\n----------------------------------------\n\nTITLE: Generating Dev Container Configuration from Devbox in Shell\nDESCRIPTION: This shell command executes `devbox generate devcontainer` with the `--force` flag. It instructs Devbox to automatically create or overwrite the configuration files needed for a Dev Container (specifically `.devcontainer/devcontainer.json` and `.devcontainer/Dockerfile`) based on the packages listed in the project's `devbox.json` file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndevbox generate devcontainer --force\n```\n\n----------------------------------------\n\nTITLE: Pkl Class Definition for AWS Subnet\nDESCRIPTION: Example of a Pkl class definition that creates reusable templates for AWS subnets with hidden variables to reduce duplication in resource definitions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: pkl\nCODE:\n```\n...\nclass Subnet {\n    hidden zoneVar: String\n    hidden cidrBlockVar: String\n    name = \"subnet-\\(zoneVar)\"\n    base {\n        apiVersion = \"ec2.aws.upbound.io/v1beta1\"\n        kind       = \"Subnet\"\n        metadata { labels { zone = \"us-east-1\\(zoneVar)\" } }\n        ...\n...\n```\n\n----------------------------------------\n\nTITLE: Running Nix Garbage Collection with Devbox\nDESCRIPTION: Command to run the Nix store garbage collector through Devbox to free up disk space by removing unused packages and dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ndevbox run -- nix-store --gc\n```\n\n----------------------------------------\n\nTITLE: Sorted Query Results by Creation Timestamp - Karpor Dashboard - SQL\nDESCRIPTION: This snippet adds sorting to the fuzzy name search, ordering the matched resources by their 'creationTimestamp' field in ascending order. Enter in the Karpor dashboard search input to view the most recent or oldest resources depending on UI defaults. Primary parameters are the name filter and sort field; output is a timestamp-ordered list matching the search pattern.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nwhere name like '%silly%' order by creationTimestamp\n```\n\n----------------------------------------\n\nTITLE: Executing Ad-Hoc Steampipe Query for Kubernetes Servers via Shell\nDESCRIPTION: This shell command executes a Steampipe query non-interactively using the `steampipe query` command followed by the SQL query string. It selects all columns (`*`) from the `kubernetes_server` table within the `kubernetes_all` schema, fetching data across all configured Kubernetes clusters, and prints the results to standard output in a table format by default.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nsteampipe query \\\n    \"select * from kubernetes_all.kubernetes_server;\"\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Node Status\nDESCRIPTION: Command to list all nodes in the Kubernetes cluster to verify the current cluster size.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Defining Crossplane Composable Schemas with KCL\nDESCRIPTION: These KCL schema definitions model Crossplane Compositions, specifying the structure and required values for metadata, specification sections, and various Kubernetes objects. The code enforces types on fields, provides default values, and allows for schema extension and reuse by consumers needing to construct valid Crossplane YAML resources through KCL. Required dependencies include the KCL toolchain and familiarity with Crossplane's resource definitions. Inputs (like Metadata.name) must be set by users of the schema; outputs follow KCL's formatting for YAML generation. Limitations include hard-coded defaults and the requirement for explicit field assignment where type is not defined.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: KCL\nCODE:\n```\nschema Composition:\n    apiVersion = \"apiextensions.crossplane.io/v1\"\n    kind = \"Composition\"\n    metadata: Metadata\n    spec: Spec\n\nschema Metadata:\n    name: str\n    labels: Labels\n\nschema Spec:\n    compositeTypeRef = {\n        apiVersion = \"devopstoolkitseries.com/v1alpha1\"\n        kind = \"App\"\n    }\n    patchSets = [{\n        name = \"metadata\"\n        patches = [{fromFieldPath = \"metadata.labels\"}]\n    }]\n    resources: []\n\nschema Labels:\n    type: str\n    location: str\n\nschema KubernetesObject:\n    name: str\n    base = {\n        apiVersion = \"kubernetes.crossplane.io/v1alpha1\"\n        kind = \"Object\"\n        spec: KubernetesObjectSpec\n    }\n    patches: []\n\nschema KubernetesObjectBase:\n    apiVersion = \"kubernetes.crossplane.io/v1alpha1\"\n    kind = \"Object\"\n    spec: KubernetesObjectSpec\n\nschema KubernetesObjectSpec:\n    forProvider: KubernetesObjectForProvider\n\nschema KubernetesObjectForProvider:\n    manifest: any\n\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Git Repository in Shell\nDESCRIPTION: Pushes the committed changes to the remote repository and sets up upstream tracking.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\ngit push --set-upstream origin neon-demo\n```\n\n----------------------------------------\n\nTITLE: Viewing Cluster Nodes Output\nDESCRIPTION: Output showing the nodes in the Kubernetes cluster, with one control-plane node and three worker nodes, explaining why the DaemonSet created exactly three pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_45\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME               STATUS ROLES         AGE VERSION\nkind-control-plane Ready  control-plane 31m v1.29.2\nkind-worker        Ready  <none>        30m v1.29.2\nkind-worker2       Ready  <none>        30m v1.29.2\nkind-worker3       Ready  <none>        30m v1.29.2\n```\n\n----------------------------------------\n\nTITLE: Defining Backstage Deployment Process (Nushell)\nDESCRIPTION: Defines a Nushell function `main apply backstage` that handles deploying Backstage. It retrieves cluster data, creates a Kubernetes Secret (`backstage-config`) with connection details (Kubernetes API, GitHub token), installs CloudNativePG using Helm (`helm upgrade --install cnpg`), deploys the Backstage application using its Helm chart (`helm upgrade --install backstage`) with specified ingress host and version, and finally opens the Backstage URL in a browser.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: nu\nCODE:\n```\n...\ndef --env \"main apply backstage\" [\n    tag: string\n    --kubeconfig = \"kubeconfig-dot.yaml\"\n    --ingress_host = \"backstage.127.0.0.1.nip.io\"\n    --github_token = \"FIXME\"\n] {\n\n    let cluster_data = (\n        get cluster data  --create_secret $create_secret\n    )\n\n    {\n        apiVersion: \"v1\"\n        kind: \"Secret\"\n        metadata: {\n            name: \"backstage-config\"\n            namespace: \"backstage\"\n        }\n        type: \"Opaque\"\n        data: {\n            KUBE_URL: ($cluster_data.kube_url | encode base64)\n            KUBE_SA_TOKEN: $cluster_data.token_encoded\n            KUBE_CA_DATA: ($cluster_data.kube_ca_data | encode base64)\n            GITHUB_TOKEN: ($github_token | encode base64)\n        }\n    }\n        | to yaml\n        | kubectl --namespace backstage apply --filename -\n\n    (\n        helm upgrade --install cnpg cloudnative-pg\n            --repo https://cloudnative-pg.github.io/charts\n            --namespace cnpg-system --create-namespace --wait\n    )\n\n    (\n        helm upgrade --install backstage\n            oci://ghcr.io/vfarcic/idp-full-backstage/backstage\n            --namespace backstage --create-namespace\n            --set $\"ingress.host=($ingress_host)\"\n            --version $tag --wait\n    )\n\n    start $\"http://($ingress_host)\"\n\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Retrieving VPA Resource Information in Kubernetes\nDESCRIPTION: This shell command retrieves information about VerticalPodAutoscaler resources in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get verticalpodautoscalers\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Project Repository\nDESCRIPTION: This snippet shows how to clone the project repository, switch to the correct branch, and set up the development environment using Devbox.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/silly-demo\n\ncd silly-demo\n\ngit pull\n\ngit fetch\n\ngit switch docker-bake\n```\n\n----------------------------------------\n\nTITLE: Deleting a StatefulSet in Kubernetes\nDESCRIPTION: This shell command deletes the StatefulSet from the Kubernetes cluster in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --filename statefulset/replicas.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing KEDA ScaledObjects - Shell\nDESCRIPTION: Lists all existing ScaledObject resources in the 'a-team' namespace to show their scaling status, triggers, and readiness. Requires kubectl access to the target namespace. Outputs a table summarizing each scaled object's scaling parameters and state.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get scaledobjects\n```\n\n----------------------------------------\n\nTITLE: Tracing Application Resources with Crossplane - Shell\nDESCRIPTION: This command uses Crossplane's beta trace functionality to display the hierarchical tree of resources created by the specified AppClaim within a given namespace. It requires Crossplane CLI installed, access to the target Kubernetes cluster, and sufficient permissions to the namespace. Parameters are the claim name (here: crossplane-gh-demo) and namespace (a-team); the output lists sync status, readiness, and the relationship between the AppClaim and its child resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace appclaim crossplane-gh-demo \\\n    --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Executing Velero Demo Setup Script\nDESCRIPTION: This snippet makes the setup script executable, runs it, and then sources the environment variables. The setup script likely installs necessary dependencies and configures the environment for the Velero demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.nu\n\n./setup.nu\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Forking and Cloning the Neon Demo Repository\nDESCRIPTION: Uses GitHub CLI to fork the neon-demo repository, clone it locally, and set it as the default repository for subsequent GitHub CLI commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngh repo fork vfarcic/neon-demo --clone --remote \\\n    --org $GITHUB_ORG\n\ncd neon-demo\n\ngh repo set-default\n```\n\n----------------------------------------\n\nTITLE: Initial Generated Claim Definition Structure (YAML)\nDESCRIPTION: Displays the basic structure of the YAML file (`my-db.yaml`) generated by `up example generate`. It includes the `apiVersion`, `kind`, `metadata` (with `name` and `namespace`), and an empty `spec` section, representing the initial state of a Crossplane claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1alpha1\nkind: SQL\nmetadata:\n  name: my-db\n  namespace: default\nspec: {}\n```\n\n----------------------------------------\n\nTITLE: Querying Kubescape Node-Agent Logs for Alerts After Malicious Action in Shell\nDESCRIPTION: This shell command retrieves logs from node-agent pods filtering for 'silly-demo' after intentionally violating the application's normal behavior, highlighting how Kubescape reports anomalies. Same prerequisites as before apply: kubectl, jq, grep, and node-agent pods available. Output is a stream of JSON-formatted alerts for the detected abnormal behavior.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace kubescape logs \\\n    --selector app.kubernetes.io/name=node-agent \\\n    | grep silly-demo | jq .\n```\n\n----------------------------------------\n\nTITLE: Opening Remote Frontend Application in Browser (Shell)\nDESCRIPTION: Command to open the staging environment frontend application in a browser. This command is part of a preview section and not meant to be executed yet.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nopen \"http://staging.silly-demo-frontend.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Pkl AWS Definition File\nDESCRIPTION: Command to display the content of a Pkl file that defines AWS resources for Crossplane Compositions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ncat pkl/aws.pkl\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Code Changes\nDESCRIPTION: Demonstrates the process of adding, committing, and pushing code changes to trigger the CI pipeline.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"Apps\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Application Manifest\nDESCRIPTION: Shell command to display the contents of a Kubernetes application manifest file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncat kubernetes/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kubernetes Namespace via Kubectl (Shell)\nDESCRIPTION: This command uses `kubectl` to delete the entire 'a-team' namespace and all the resources contained within it from the cluster specified by 'kubeconfig-dot2.yaml'. This is often used to clean up an environment after testing a restore or before attempting a different recovery strategy.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml delete namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Testing Policy Validation with Invalid Resource\nDESCRIPTION: Shell command attempting to apply an app resource that doesn't meet the validation criteria, resulting in a policy violation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining AWS RDS Instance and Related Resources in KCL\nDESCRIPTION: This snippet defines various AWS resources including VPC, Subnet Group, RDS Instance, and associated components using KCL (Kubernetes Configuration Language). It configures the RDS instance with different sizes based on parameters and sets up networking components.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: KCL\nCODE:\n```\nv1beta1.VPC {\n    metadata = _metadata(\"vpc\")\n    spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1VPCSpecForProvider{\n        region = _region\n        cidrBlock = \"11.0.0.0/16\"\n        enableDnsSupport = True\n        enableDnsHostnames = True\n    }\n},\nv1beta1.SubnetGroup {\n    metadata = _metadata(\"subnetgroup\")\n    spec.forProvider = v1beta1.RdsAwsUpboundIoV1beta1SubnetGroupSpecForProvider{\n        region = _region\n        description = \"I'm too lazy to write a good description\"\n        subnetIdSelector.matchControllerRef = True\n    }\n},\nv1beta2.Instance {\n    metadata = _metadata(\"rdsinstance\")\n    spec.forProvider = v1beta2.RdsAwsUpboundIoV1beta2InstanceSpecForProvider{\n        region = _region\n        dbSubnetGroupNameSelector.matchControllerRef = True\n        vpcSecurityGroupIdSelector.matchControllerRef = True\n        username = \"masteruser\"\n        engine = \"postgres\"\n        skipFinalSnapshot = True\n        publiclyAccessible = True\n        allocatedStorage = 200\n        passwordSecretRef = v1beta2.RdsAwsUpboundIoV1beta2InstanceSpecForProviderPasswordSecretRef {\n            name = oxr.spec.id + \"-password\"\n            namespace = oxr.spec.claimRef.namespace\n            key = \"password\"\n        }\n        identifier = oxr.spec.id\n        if oxr.spec.parameters.size == \"small\":\n            instanceClass = \"db.m5.large\"\n        elif oxr.spec.parameters.size == \"medium\":\n            instanceClass = \"db.m5.2xlarge\"\n        else:\n            instanceClass = \"db.m5.8xlarge\"\n        engineVersion = oxr.spec.parameters.version\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initiating Interactive Example Generation with up CLI (Shell)\nDESCRIPTION: Executes the `up example generate` command to start an interactive wizard. This wizard prompts the user for information to create either a baseline Composite Resource Claim (XRC) or a Composite Resource (XR).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nup example generate\n```\n\n----------------------------------------\n\nTITLE: Re-applying Deployment Configuration after Cleanup (sh)\nDESCRIPTION: Re-applies the Kubernetes Deployment configuration from the `scale/app-resources.yaml` file to the 'a-team' namespace using `kubectl apply`. This command is run after deleting the previous Deployment and HPA, likely to set up the application baseline again without the autoscaler.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename scale/app-resources.yaml\n```\n\n----------------------------------------\n\nTITLE: Simulating Load on Demo Application Using hey Load Generator in Shell\nDESCRIPTION: This shell command runs the 'hey' load generator tool to send continuous HTTP requests to the demo application for a duration of 5 minutes ('-z 5m'), simulating realistic traffic for Kubescape to learn normal application behavior. Dependency: 'hey' must be installed and accessible in the environment. Inputs are the test duration and the application endpoint; output is load execution statistics displayed after finishing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nhey -z 5m \"http://silly-demo.$INGRESS_HOST.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Browsing GitHub Repository File with gh CLI (Shell)\nDESCRIPTION: Uses the GitHub CLI (`gh`) command `browse` to open a specific file (`package/definition.yaml`) from the `vfarcic/crossplane-sql` repository in a web browser. This command requires the GitHub CLI to be installed and configured.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngh browse --repo vfarcic/crossplane-sql package/definition.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning Demo Repository - Shell Script\nDESCRIPTION: This shell snippet automates the process of cloning the 'external-secrets-crossplane-demo' repository and changing the current directory to the cloned project folder. No external dependencies are necessary other than Git. The snippet expects 'git' to be installed, and requires internet access. It takes no parameters and outputs the new working directory context for subsequent commands. The snippet is required before running any demo-specific scripts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone \\\n    https://github.com/vfarcic/external-secrets-crossplane-demo\n\ncd external-secrets-crossplane-demo\n```\n\n----------------------------------------\n\nTITLE: Manually Promoting Kargo Freight to Pre-Production Stage\nDESCRIPTION: This command manually promotes a specific freight to the pre-production stage in the Kargo project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nkargo promote --project silly-demo --freight $FREIGHT_NAME \\\n    --stage pre-prod\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Cluster Nodes\nDESCRIPTION: Command to list all nodes in the Kubernetes cluster, used to demonstrate why a DaemonSet created a specific number of pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing Kubernetes Demo Environment - Shell\nDESCRIPTION: Clones the Kubernetes demo repository, navigates to the project directory, updates it to the latest version, and checks out the 'services' branch required for the tutorial. No special dependencies are needed except for git and shell access. Expects standard internet access and git installed; outputs a ready-to-use working directory containing demo manifests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kubernetes-demo\n\ncd kubernetes-demo\n\ngit pull\n\ngit checkout services\n```\n\n----------------------------------------\n\nTITLE: Displaying ClusterSyncResources Definition (YAML)\nDESCRIPTION: This command displays the content of the `cluster-sync-resources.yaml` file. This file defines a `ClusterSyncResources` custom resource named `common`, specifying which Kubernetes resource types (Deployments, Services, Ingresses, and all resources in the `devopstoolkitseries.com` group) should be synchronized by Clusterpedia by default.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat cluster-sync-resources.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.clusterpedia.io/v1alpha2\nkind: ClusterSyncResources\nmetadata:\n  name: common\nspec:\n  syncResources:\n    - group: \"apps\"\n      resources:\n        - deployments\n    - group: \"\"\n      resources:\n        - services\n    - group: \"networking.k8s.io\"\n      resources:\n        - ingresses\n    - group: \"devopstoolkitseries.com\"\n      resources:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Output of Pod Listing (Text)\nDESCRIPTION: This is the expected output of the 'kubectl get pods' command, showing two replicas of the 'silly-demo' application Pod running in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\nNAME                          READY   STATUS    RESTARTS   AGE\nsilly-demo-54757f9885-g2ghq   1/1     Running   0          4m35s\nsilly-demo-54757f9885-q62fk   1/1     Running   0          4m35s\n```\n\n----------------------------------------\n\nTITLE: Verifying Symlink Creation\nDESCRIPTION: This command checks if the .zshrc file in the home directory is indeed a symlink to the one in the dotfiles repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nls ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Tracing SQLClaim Resource Status (Final) (Shell)\nDESCRIPTION: Repeats the Crossplane trace command for the `my-db` SQLClaim in the `a-team` namespace. This is executed after waiting for the resources to be provisioned, showing the final 'Available' status once the database and associated components are ready.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace sqlclaim my-db --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane AppClaim Manually - YAML\nDESCRIPTION: Provides a YAML manifest for a Crossplane AppClaim resource intended to deploy an application in Kubernetes. The manifest defines core application parameters such as image, networking (host, port, ingress), database connection info, and label selectors for targeted compositions. It requires Crossplane and relevant controllers to be deployed in the cluster. The manifest is intended as input for kubectl apply or similar deployment tools, and should be customized to avoid resource or host conflicts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1alpha1\\nkind: AppClaim\\nmetadata:\\n  name: silly-demo\\nspec:\\n  id: vfarcic-silly-demo\\n  compositionSelector:\\n    matchLabels:\\n      type: backend\\n      location: local\\n  parameters:\\n    image: ghcr.io/vfarcic/idp-full-demo\\n    tag: 0.0.5\\n    port: 8080\\n    host: vfarcic.silly-demo.35.231.186.105.nip.io\\n    ingressClassName: contour\\n    db:\\n      secret: silly-demo-db\\n      storeName: aws\\n      name: main\n```\n\n----------------------------------------\n\nTITLE: Generating Simulated Traffic with hey\nDESCRIPTION: This shell command uses 'hey' to generate simulated traffic to the application, including a 'fail=true' parameter to trigger simulated failures for testing the rollback mechanism.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\nhey -z 60m \"http://silly-demo.$ISTIO_HOST?fail=true\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Complete Demo Environment in Nushell\nDESCRIPTION: This snippet defines a Nushell command to set up a complete demo environment. It sources external scripts, retrieves necessary data, and creates a Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: nushell\nCODE:\n```\nsource scripts/kubernetes.nu\nsource scripts/crossplane.nu\n...\n# Sets up the complete demo\ndef \"main setup all\" [] {\n    \n    rm --force .env\n\n    let hyperscaler = main get hyperscaler\n\n    let github_data = main get github\n\n    main create kubernetes kind\n    ...\n```\n\n----------------------------------------\n\nTITLE: Applying the RuntimeClass Configuration\nDESCRIPTION: Shell command to apply the Spin RuntimeClass to the Kubernetes cluster, enabling it to run WebAssembly workloads.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename spin.yaml\n```\n\n----------------------------------------\n\nTITLE: Forking and Cloning Kargo Demo Repository\nDESCRIPTION: Uses GitHub CLI to fork the kargo-demo repository, clone it locally, and set it as the default repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork vfarcic/kargo-demo --clone --remote \\\n    --org $GITHUB_ORG\n\ncd kargo-demo\n\ngh repo set-default\n```\n\n----------------------------------------\n\nTITLE: Crossplane Resources Initial Trace Output\nDESCRIPTION: Output showing the initial state of all resources created by the Crossplane AppClaim, including some resources in progress.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                                              SYNCED   READY   STATUS\nAppClaim/silly-demo (a-team)                      True     False   Waiting: Claim is waiting for composite resource to become Ready\n└─ App/silly-demo-v2c9s                           True     False   Creating: ..., silly-demo-file-dockerfile, silly-demo-file-dot-nu, and 2 more\n   ├─ Object/silly-demo-deployment                True     True    Available\n   ├─ Object/silly-demo-ingress                   True     True    Available\n   ├─ Object/silly-demo-service                   True     True    Available\n   ├─ ProviderConfig/silly-demo-app               -        -       \n   ├─ Branch/silly-demo-branch-ci                 True     True    Available\n   ├─ PullRequest/silly-demo                      False    False   ReconcileError: ... [{Resource:PullRequest Field:head Code:invalid Message:}]  []}]\n   ├─ RepositoryFile/silly-demo-file-devbox       False    False   ReconcileError: ...te the resource: [{0 unexpected status code: 404 Not Found  []}]\n   ├─ RepositoryFile/silly-demo-file-dockerfile   False    False   ReconcileError: ...te the resource: [{0 unexpected status code: 404 Not Found  []}]\n   ├─ RepositoryFile/silly-demo-file-dot-nu       False    False   ReconcileError: ...te the resource: [{0 unexpected status code: 404 Not Found  []}]\n   └─ RepositoryFile/silly-demo-file-gha          False    False   ReconcileError: ...te the resource: [{0 unexpected status code: 404 Not Found  []}]\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Cluster via kind (sh)\nDESCRIPTION: This final command tears down a Kubernetes cluster set up using 'kind' (Kubernetes IN Docker). It's a cleanup operation to destroy the test or demonstration environment. Requires 'kind' CLI installed and access permissions. No input or parameters; output is a destroyed Kubernetes cluster and released resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n```\n\n----------------------------------------\n\nTITLE: Viewing Argo CD ApplicationSet Configuration\nDESCRIPTION: Command to display the ApplicationSet configuration file that defines how applications will be deployed across environments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat application-set.yaml\n```\n\n----------------------------------------\n\nTITLE: Searching Devbox Packages Starting with 'go-ta' using Shell\nDESCRIPTION: This command demonstrates searching for packages whose names *start with* 'go-ta' using `devbox search`. This successfully finds the 'go-task' package, illustrating the prefix-based nature of the search and how to work around its limitations when the exact starting part of the name is known or guessed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ndevbox search go-ta\n```\n\n----------------------------------------\n\nTITLE: Converting Pkl to JSON Format\nDESCRIPTION: Command to evaluate a Pkl file and output the result in JSON format, providing flexibility for different data format requirements.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\npkl eval pkl/aws.pkl --format json\n```\n\n----------------------------------------\n\nTITLE: Listing All Neon Branches - Shell\nDESCRIPTION: This snippet uses 'neonctl branches list' to display all branches in the Neon project. The output contains branch IDs, names, current state, creation times, and additional metadata. Dependencies include the Neon CLI and access to the relevant Neon project. This is typically used to confirm the existence or deletion of branches.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nneonctl branches list\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status\nDESCRIPTION: Command to list all pods in the a-team namespace to verify deployment status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Sample kubectl get Output - Console\nDESCRIPTION: This snippet demonstrates truncated sample output from the 'kubectl get' command listing various Kubernetes resources. It includes Pods, Services, Deployments, ReplicaSets, Ingresses, PersistentVolumes, CNPG clusters, and Atlas schemas. The output reflects the expected state after Argo CD has synchronized resources to the cluster. No direct dependencies or prerequisites exist, but presence of resources relies on successful previous synchronization steps.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nNAME                                   READY STATUS  RESTARTS AGE\npod/silly-demo-1                       1/1   Running 0        2m18s\npod/silly-demo-595c89b567-bxlv5        1/1   Running 0        2m49s\npod/silly-demo-videos-atlas-dev-db-... 1/1   Running 0        117s\n\nNAME                  TYPE      CLUSTER-IP     EXTERNAL-IP PORT(S)  AGE\nservice/silly-demo    ClusterIP 10.100.71.12   <none>      8080/TCP 2m50s\nservice/silly-demo-r  ClusterIP 10.100.248.163 <none>      5432/TCP 2m50s\nservice/silly-demo-ro ClusterIP 10.100.62.94   <none>      5432/TCP 2m50s\nservice/silly-demo-rw ClusterIP 10.100.90.155  <none>      5432/TCP 2m50s\n\nNAME                                           READY UP-TO-DATE AVAILABLE AGE\ndeployment.apps/silly-demo                     1/1   1          1         2m50s\ndeployment.apps/silly-demo-videos-atlas-dev-db 1/1   1          1         2m50s\n\nNAME                                               DESIRED CURRENT READY AGE\nreplicaset.apps/silly-demo-595c89b567              1       1       1     2m50s\nreplicaset.apps/silly-demo-videos-atlas-dev-db-... 1       1       1     2m50s\n\nNAME                                 CLASS   HOSTS                           ADDRESS    PORTS AGE\ningress.networking.k8s.io/silly-demo traefik silly-demo.52.86.219.243.nip.io aa81601... 80    2m51s\n\nNAME                        CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM               STORAGECLASS VOLUMEATTRIBUTESCLASS REASON AGE\npersistentvolume/pvc-11f... 1Gi      RWO          Delete         Bound  a-team/silly-demo-1 gp2          <unset>                      2m48s\n\nNAME                                  AGE   INSTANCES READY STATUS                   PRIMARY\ncluster.postgresql.cnpg.io/silly-demo 2m51s 1         1     Cluster in healthy state silly-demo-1\n\nNAME                                        READY REASON\natlasschema.db.atlasgo.io/silly-demo-videos True  Applied\n```\n\n----------------------------------------\n\nTITLE: Watching GitHub Actions Workflow Run\nDESCRIPTION: Command to monitor the progress of the triggered GitHub Actions workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ngh run watch\n```\n\n----------------------------------------\n\nTITLE: Crossplane GitHubClaim Configuration\nDESCRIPTION: Defines a high-level abstraction for repository creation using Crossplane's composition feature. Includes application, database, and GitOps configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: GitHubClaim\nmetadata:\n  name: crossplane-gh-demo\nspec:\n  id: crossplane-gh-demo\n  parameters:\n    public: true\n    registry: ttl.sh\n    app:\n      language: go\n      host: my-repo.acme.com\n      namespace: a-team\n    db:\n      enabled: true\n      provider: aws\n      version: \"16.2\"\n    repo:\n      user: vfarcic\n    gitops:\n      enabled: true\n      user: vfarcic\n      repo: crossplane-gh\n```\n\n----------------------------------------\n\nTITLE: Applying Updated Argo Events EventSource Configuration with Kubectl (sh)\nDESCRIPTION: Uses `kubectl apply` to deploy the modified Argo Events EventSource configuration defined in `event-source-replicaset.yaml` to the 'argo-events' namespace in the Kubernetes cluster. This updates Argo Events to listen for ReplicaSet creation events instead of Deployment updates.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace argo-events apply \\\n    --filename event-source-replicaset.yaml\n```\n\n----------------------------------------\n\nTITLE: Logging into Kargo in Kubernetes Cluster\nDESCRIPTION: This command logs into the Kargo instance running in the Kubernetes cluster, necessary for performing manual promotions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nkargo login https://127.0.0.1:31444 \\\n    --admin --password admin --insecure-skip-tls-verify\n```\n\n----------------------------------------\n\nTITLE: Checking mirrord Configuration File Content Using Shell\nDESCRIPTION: Uses 'cat' to display the contents of a mirrord JSON configuration file, ensuring the settings for the development environment are correct and visible to the user. No dependencies beyond a POSIX shell and 'cat' command. Inputs: .mirrord/mirror.json path. Output: Standard output of the JSON file contents.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncat .mirrord/mirror.json\n```\n\n----------------------------------------\n\nTITLE: Defining `cosign` and `all` Targets in Earthfile\nDESCRIPTION: An excerpt from an `Earthfile` defining the `cosign` and `all` targets. The `cosign` target signs specified image tags using Cosign, requiring secrets passed via `--secret`. The `all` target orchestrates building multiple image variants (default/scratch and alpine), waits for their completion, signs them using the `cosign` target, and then builds Timoni and Helm packages. This demonstrates argument handling (`ARG`), build dependencies (`BUILD`), execution control (`WAIT`, `END`), and secret management in Earthly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n...\ncosign:\n    ARG --required tag\n    RUN --push \\\n        --secret COSIGN_PASSWORD=cosignpassword \\\n        --secret cosignkey \\\n        --secret password \\\n        cosign sign --yes --key env://cosignkey \\\n        --registry-username $user \\\n        --registry-password $password \\\n        $registry/$image:$tag\n...\nall:\n    ARG tag\n    WAIT\n        BUILD +image --tag $tag --taglatest latest\n        BUILD +image --tag $tag-alpine \\\n            --taglatest latest-alpine --base alpine:3.18.4\n    END\n    BUILD +cosign --tag latest --tag $tag \\\n        --tag latest-alpine --tag $tag-alpine\n    BUILD +timoni --tag $tag\n    BUILD +helm --tag $tag\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Recipe Information with Just\nDESCRIPTION: This snippet shows how to use the '--show' flag with 'just' to display detailed information about a specific recipe.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\njust --show cluster-create\n```\n\n----------------------------------------\n\nTITLE: Defining Argo CD Application for GitOps in YAML\nDESCRIPTION: YAML definition for an Argo CD Application that syncs content from the GitHub repository to the Kubernetes cluster. Includes automated synchronization with self-healing and pruning enabled.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: apps\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/vfarcic/idp-full-app\n    targetRevision: HEAD\n    path: apps\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: a-team\n  syncPolicy:\n    automated:\n      selfHeal: true\n      prune: true\n      allowEmpty: true\n```\n\n----------------------------------------\n\nTITLE: Initializing KubeVela Environments using Shell Commands - Shell\nDESCRIPTION: These shell commands set up two separate environments, 'dev' and 'prod', using KubeVela's CLI, with each environment mapped to a Kubernetes Namespace. The commands 'vela env init dev --namespace dev' and 'vela env init prod --namespace prod' establish isolated namespaces for application lifecycle and resource scoping. No prerequisites are needed except for a functional KubeVela installation and CLI access; these commands require appropriate Kubernetes cluster permissions for namespace creation. Inputs are the desired environment and namespace names, and there are no outputs except indirect creation of the namespaces.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nvela env init dev --namespace dev\n```\n\nLANGUAGE: sh\nCODE:\n```\nvela env init prod --namespace prod\n```\n\n----------------------------------------\n\nTITLE: Displaying Assertion File Content for SQL Resource using Shell\nDESCRIPTION: This command uses 'cat' to display the content of the 'assert-db.yaml' file located in the 'tests/common' directory. This file defines the assertions executed by Chainsaw to validate the state of the 'SQL' resource after the patch defined in 'db.yaml' has been applied.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncat tests/common/assert-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Counting Records in lego_inventory_parts Table\nDESCRIPTION: Executes a SQL query to count the number of records in the lego_inventory_parts table.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npsql $NEON_CONN --command \\\n    \"SELECT COUNT(*) FROM lego_inventory_parts;\"\n```\n\n----------------------------------------\n\nTITLE: Listing App Resources in the Namespace\nDESCRIPTION: Command to list all App custom resources in the a-team namespace to verify their deployment status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get apps\n```\n\n----------------------------------------\n\nTITLE: Listing All Application Resources in a Namespace - Shell Script\nDESCRIPTION: Lists all standard Kubernetes resources, ingresses, ExternalSecrets, and secrets in the specified 'vfarcic' namespace for verification after deployment. Helps check the status and creation of pods, services, deployments, replica sets, ingresses, and relevant secrets. Requires kubectl access to the target cluster and required CRDs for resources like ExternalSecrets.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace vfarcic \\\n    get all,ingresses,externalsecrets,secrets\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Environment with Devbox\nDESCRIPTION: Command to start a shell with all the development dependencies using Devbox.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Nodes with kubectl\nDESCRIPTION: Command to list all nodes in a Kubernetes cluster using kubectl, useful for identifying existing nodes before adding GPU-enabled ones.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Querying API Resources with kubectl in Clusterpedia Context\nDESCRIPTION: Command used to list available API resources in the Clusterpedia cluster context. This command shows all resources that Clusterpedia is tracking across multiple clusters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --cluster clusterpedia api-resources\n```\n\n----------------------------------------\n\nTITLE: Deleting All Pods via Label Selector - Shell with kubectl\nDESCRIPTION: Deletes all Pods with a specific label selector using 'kubectl delete pods'. This triggers the ReplicaSet to recreate required Pods and is used to demonstrate template updates propagating to new Pods. Inputs are namespace and label selector. The effect is the removal and recreation of all matching Pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team delete pods \\\n    --selector app.kubernetes.io/name=silly-demo\n```\n\n----------------------------------------\n\nTITLE: Querying Deployments Created Since a Date via Label Selector using kubectl and Clusterpedia (Shell)\nDESCRIPTION: This command returns all deployments from all namespaces created since a specified date (e.g., 2024-01-01), utilizing Clusterpedia's time-based 'search.clusterpedia.io/since' label selector. Clusterpedia must label and index resources by their creation date for this to function. Output is limited to deployments created after the given timestamp, as available in Clusterpedia's internal database.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia get deployments --all-namespaces \\\n    --selector \"search.clusterpedia.io/since=2024-01-01\"\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Frontend Docker Image for Specific Version\nDESCRIPTION: This code builds and pushes a Docker image for the frontend application, version v0.0.1, for both AMD64 and ARM64 platforms.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker image build --tag ${IMAGE}-frontend:v0.0.1 \\\n    --platform linux/amd64,linux/arm64 --push ./frontend\n```\n\n----------------------------------------\n\nTITLE: Checking Node Status in Kubernetes Cluster\nDESCRIPTION: Command to list all Kubernetes nodes in the cluster to verify the cluster has scaled down from three to two nodes after reducing the application workload.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get nodes\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Application Source Code\nDESCRIPTION: This command displays the source code of the main.go file, which contains the implementation of graceful shutdown.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncat main.go\n```\n\n----------------------------------------\n\nTITLE: Applying Argo CD Application to Kubernetes in Bash\nDESCRIPTION: Apply the Argo CD Application manifest to the Kubernetes cluster using kubectl to start the GitOps workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename ../argocd/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing KCL Backend DB Remote Definition\nDESCRIPTION: Command to view the KCL backend DB remote definition file\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat kcl/backend-db-remote.k\n```\n\n----------------------------------------\n\nTITLE: Updating Image Tag with kustomize\nDESCRIPTION: These shell commands update the image tag for the 'silly-demo' application using kustomize, preparing for a new rollout.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\ncd kustomize/overlays/istio-prometheus\n\nkustomize edit set image \\\n    ghcr.io/vfarcic/silly-demo=ghcr.io/vfarcic/silly-demo:1.4.129\n\ncd ../../../\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Secret Manifest\nDESCRIPTION: This command displays the contents of a YAML file containing a Kubernetes Secret definition and a Deployment that uses it.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\ncat volume/secret.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Devbox Scripts Output\nDESCRIPTION: Output showing the list of available scripts defined in the devbox.json configuration, which can be executed with the 'devbox run' command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: md\nCODE:\n```\nAvailable scripts:\n* test-watch\n* cluster-create\n* cluster-destroy\n* package-publish\n* test\n```\n\n----------------------------------------\n\nTITLE: View Resource Tree\nDESCRIPTION: Command to display the resource hierarchy of a KubeVela application\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nvela status silly-demo --tree\n```\n\n----------------------------------------\n\nTITLE: Complete KCL Function Defining AWS Resources\nDESCRIPTION: This KCL snippet presents the final version of the function (likely `aws.k`), defining multiple AWS managed resources for the Composition. It imports necessary schemas, retrieves the region parameter, uses a lambda for metadata, and populates the `_items` list with definitions for `InternetGateway`, `MainRouteTableAssociation`, `RouteTable`, `Route`, `SecurityGroupRule`, and `SecurityGroup` using the imported `v1beta1` models. It leverages `matchControllerRef = True` for dependencies between managed resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: kcl\nCODE:\n```\nimport models.v1beta1 as v1beta1\nimport models.v1beta2 as v1beta2\nimport models.v1beta3 as v1beta3\nimport models.k8s.apimachinery.pkg.apis.meta.v1 as metav1\n\noxr = option(\"params\").oxr # observed composite resource\n_ocds = option(\"params\").ocds # observed composed resources\n_dxr = option(\"params\").dxr # desired composite resource\ndcds = option(\"params\").dcds # desired composed resources\n\n_metadata = lambda name: str -> any {\n    {\n        name = oxr.spec.id\n        annotations = { \"krm.kcl.dev/composition-resource-name\" = name }\n    }\n}\n\n_region = \"us-east-1\"\nif oxr.spec?.parameters?.region:\n    _region = oxr.spec.parameters.region\n\n_items = [\n    v1beta1.InternetGateway {\n        metadata = _metadata(\"gateway\")\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1InternetGatewaySpecForProvider{\n            region = _region\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n    v1beta1.MainRouteTableAssociation {\n        metadata = _metadata(\"mainRouteTableAssociation\")\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1MainRouteTableAssociationSpecForProvider{\n            region = _region\n            routeTableIdSelector.matchControllerRef = True\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n    v1beta1.RouteTable {\n        metadata = _metadata(\"routeTable\")\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1RouteTableSpecForProvider{\n            region = _region\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n    v1beta1.Route {\n        metadata = _metadata(\"route\")\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1RouteSpecForProvider{\n            region = _region\n            routeTableIdSelector.matchControllerRef = True\n            destinationCidrBlock = \"0.0.0.0/0\"\n            gatewayIdSelector.matchControllerRef = True\n        }\n    },\n    v1beta1.SecurityGroupRule {\n        metadata = _metadata(\"securityGroupRule\")\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1SecurityGroupRuleSpecForProvider{\n            region = _region\n            description = \"I am too lazy to write descriptions\"\n            type = \"ingress\"\n            fromPort = 5432\n            toPort = 5432\n            protocol = \"tcp\"\n            cidrBlocks = [\"0.0.0.0/0\"]\n            securityGroupIdSelector.matchControllerRef = True\n        }\n    },\n    v1beta1.SecurityGroup {\n        metadata = _metadata(\"securityGroup\")\n        spec.forProvider = v1beta1.Ec2AwsUpboundIoV1beta1SecurityGroupSpecForProvider{\n            region = _region\n            description = \"I am too lazy to write descriptions\"\n            vpcIdSelector.matchControllerRef = True\n        }\n    }\n]\nitems = _items\n```\n\n----------------------------------------\n\nTITLE: Listing ExternalSecrets in Application Cluster (Shell)\nDESCRIPTION: Lists all resources of type `externalsecrets.external-secrets.io` within the `production` namespace of the target application cluster (defined by the KUBECONFIG variable). This command verifies that the ExternalSecret (`my-db`) configured to pull the database credentials from the secrets manager exists and is active in the application cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace production \\\n    get externalsecrets.external-secrets.io\n```\n\n----------------------------------------\n\nTITLE: Displaying Persistent Volume Claim Manifest\nDESCRIPTION: This command displays the content of the YAML file defining a Kubernetes Persistent Volume Claim (PVC). This manifest specifies the details for requesting persistent storage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat volume/persistent-volume-claim.yaml\n```\n\n----------------------------------------\n\nTITLE: Adding a Kubernetes Provider with Devpod - Shell\nDESCRIPTION: Adds Kubernetes as a provider for Devpod using the CLI. This enables subsequent Devpod commands to deploy development containers in whichever Kubernetes cluster is currently active in kubeconfig. No prerequisites beyond a functional Devpod and access to a Kubernetes cluster are explicitly stated. Accepts the provider name as an argument; no output unless errors occur.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ndevpod provider add kubernetes\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resource Inspection Commands\nDESCRIPTION: Commands to inspect various Kubernetes resources including pods, services, deployments, and custom resources in the cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n\nkubectl --namespace a-team get persistentvolumes\n\nkubectl --namespace a-team get clusters,atlasschemas\n\nkubectl --namespace infra get sqlclaims\n\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Displaying PediaCluster Definition for dot-01 (YAML)\nDESCRIPTION: This command displays the content of the `pediaclusters/dot-01.yaml` file. This file defines a `PediaCluster` resource for the cluster named `dot-01`. It specifies the `kubeconfig` needed to access the cluster and references the `common` `ClusterSyncResources` definition for determining which resources to sync. No cluster-specific resources (`syncResources: []`) are added beyond the common ones.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncat pediaclusters/dot-01.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.clusterpedia.io/v1alpha2\nkind: PediaCluster\nmetadata:\n  name: dot-01\nspec:\n  kubeconfig: ...\n  syncResourcesRefName: common\n  syncResources: []\n```\n\n----------------------------------------\n\nTITLE: Example Output of Process Snapshot (Shell)\nDESCRIPTION: Displays the tabular output generated by the `kubectl gadget snapshot process` command. It lists processes found within the containers of the `a-team` namespace, showing Kubernetes context (Node, Namespace, Pod, Container) along with process details like the command name (COMM), Process ID (PID), User ID (UID), and Group ID (GID).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nK8S.NODE           K8S.NAMESPACE K8S.POD                     K8S.CONTAINER COMM       PID   UID GID\nkind-control-plane a-team        caw-58f7f578cd-kwbpj        caw           sh         11479 0   0  \nkind-control-plane a-team        caw-58f7f578cd-kwbpj        caw           sleep      16033 0   0  \nkind-control-plane a-team        pinger-7c7ffbf6cf-52gvw     pinger        silly-demo 11386 0   0  \nkind-control-plane a-team        pinger-7c7ffbf6cf-mj8tp     pinger        silly-demo 11433 0   0  \nkind-control-plane a-team        silly-demo-5d64dc9b7f-q42bl silly-demo    silly-demo 11338 0   0  \nkind-control-plane a-team        silly-demo-5d64dc9b7f-v7bwl silly-demo    silly-demo 11292 0   0  \n```\n\n----------------------------------------\n\nTITLE: Displaying Minimal Shell Prompt Example (Text)\nDESCRIPTION: Shows an example of a minimal shell prompt, displaying only the current directory (`dotfiles-demo`). This represents the author's default state before specific actions trigger more informative elements.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\ndotfiles-demo \n➜ \n```\n\n----------------------------------------\n\nTITLE: Displaying Backstage Component Definition (Shell)\nDESCRIPTION: This shell command uses `cat` to display the contents of the `catalog-info.yaml` file, which defines a Backstage Component.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncat ../catalog-info.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Application Definition YAML\nDESCRIPTION: Command to display the YAML file containing definitions for backend and frontend applications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat examples/full.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Backup Schedule Configuration\nDESCRIPTION: Command to display the contents of the Velero schedule configuration file\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncat velero/schedule.yaml\n```\n\n----------------------------------------\n\nTITLE: Exiting Second Temporary Pod (Shell)\nDESCRIPTION: The 'exit' command terminates the shell process inside the temporary 'curl' pod running in the 'b-team' namespace. This also triggers the deletion of the Pod due to the '--rm' flag.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Application API (Shell/cURL)\nDESCRIPTION: This command uses `curl` to send an HTTP GET request to the `/videos` endpoint of the `silly-demo` application. The retrieved JSON response, containing the list of videos previously inserted, is then piped to the `jq` utility for pretty-printing and easy readability.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.127.0.0.1.nip.io/videos\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Starting Steampipe Query Interface\nDESCRIPTION: This command launches the Steampipe query interface, allowing interactive SQL queries against the configured Kubernetes clusters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nsteampipe query\n```\n\n----------------------------------------\n\nTITLE: Viewing Pod Manifest Example - Shell\nDESCRIPTION: This command displays the contents of a simple Pod YAML manifest using the cat utility. It is used to inspect or review the configuration before applying it to the cluster. Requires the 'pod/base.yaml' manifest to exist in the current directory. The output is intended for human inspection.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncat pod/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces using kubectl - Shell\nDESCRIPTION: This shell command lists all namespaces in the connected Kubernetes cluster. It uses 'kubectl get namespaces' to display all namespace names, statuses, and ages. This command requires kubectl to be installed and configured appropriately for the target cluster. The output includes built-in namespaces and those created by KubeVela or other tools; its format is tabular for easy inspection.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Listing Available Tasks in Taskfile\nDESCRIPTION: Command to list all available tasks defined in the Taskfile with their descriptions, providing a quick overview of what can be executed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ntask --list\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubescape Values YAML Configuration for Runtime Detection\nDESCRIPTION: This shell command outputs the contents of the 'kubescape-values.yaml' file, which contains custom configuration for Kubescape's operator deployment. It requires the existence of 'kubescape-values.yaml' in the local directory. The input is the filename; the resulting output is the configuration file's YAML content.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat kubescape-values.yaml\n```\n\n----------------------------------------\n\nTITLE: Launching a Zellij Session with Custom Layout - Shell\nDESCRIPTION: This shell snippet demonstrates how to start a Zellij terminal multiplexer session with a specific name (crossplane-kubernetes) and apply a custom layout file (test-layout.kdl). Zellij must be installed on the system. The --session parameter creates or attaches to a session, while --layout determines the initial window arrangement, allowing for productivity-focused configurations. Inputs include the session and layout names; the output is an interactive Zellij environment as defined in test-layout.kdl.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzellij --session crossplane-kubernetes --layout test-layout.kdl\n```\n\n----------------------------------------\n\nTITLE: Watching GitHub Actions Workflow Run using GitHub CLI\nDESCRIPTION: Monitors the progress of a GitHub Actions workflow run using the GitHub CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\ngh run watch\n```\n\n----------------------------------------\n\nTITLE: Viewing KubeVela Scaler Trait Definition\nDESCRIPTION: CUE definition for a horizontal pod autoscaler trait that can be attached to KubeVela components. It defines parameters for minimum and maximum replicas with resource metrics for CPU and memory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: cue\nCODE:\n```\nscaler: {\n    attributes: {\n        podDisruptive: false\n    }\n    type: \"trait\"\n}\n\ntemplate: {\n    parameter: {\n        min: *1 | int\n        max: *10 | int\n    }\n    outputs: {\n        hpa: {\n            apiVersion: \"autoscaling/v2\"\n            kind: \"HorizontalPodAutoscaler\"\n            metadata: {\n                name:   context.name\n                labels: \"app.kubernetes.io/name\": context.name\n            }\n            spec: {\n                scaleTargetRef: {\n                    apiVersion: \"apps/v1\"\n                    kind:       \"Deployment\"\n                    name:       context.name\n                }\n                minReplicas: parameter.min\n                maxReplicas: parameter.max\n                metrics: [{\n                    type: \"Resource\"\n                    resource: {\n                        name: \"cpu\"\n                        target: {\n                            type: \"Utilization\"\n                            averageUtilization: 80\n                        }\n                    }\n                }, {\n                    type: \"Resource\"\n                    resource: {\n                        name: \"memory\"\n                        target: {\n                            type: \"Utilization\"\n                            averageUtilization: 80\n                        }\n                    }\n                }]\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Database Claim Manifest with kubectl in Shell\nDESCRIPTION: This `kubectl` command applies the Crossplane `SQLClaim` manifest defined in `apps/silly-demo-db.yaml` to the `a-team` namespace. This action creates the `SQLClaim` resource in the cluster, triggering Crossplane to start provisioning the requested PostgreSQL database and its associated infrastructure based on the claim's specifications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename apps/silly-demo-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Devbox Configuration File in Shell\nDESCRIPTION: Command to view the contents of the devbox.json configuration file, which defines the project's development environment and scripts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncat devbox.json\n```\n\n----------------------------------------\n\nTITLE: Watching Kubernetes Managed Resources within Zellij in Shell\nDESCRIPTION: This command uses 'viddy' (a watch tool) to continuously display the output of 'kubectl get managed', showing Kubernetes managed resources. It's executed in a separate Zellij pane, often used alongside another pane running tests or other operations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nviddy kubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Secrets in Control Plane (Shell)\nDESCRIPTION: Lists all standard Kubernetes Secrets within the `a-team` namespace of the control plane cluster. This command is used to verify that the ExternalSecret (`my-db-password`) successfully created the corresponding Kubernetes Secret containing the root password, and also to see the `my-db` secret created by Crossplane itself.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get secrets\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repository in Web Browser\nDESCRIPTION: This command opens the GitHub repository in the default web browser, allowing the user to access the repository settings and enable workflows.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view --web\n```\n\n----------------------------------------\n\nTITLE: Adding a Specific Version of a Package to Devbox using Shell\nDESCRIPTION: This command uses `devbox add` to install the 'crossplane-cli' package at version '1.15.0' and automatically update the `devbox.json` configuration file. This makes the specified version of the tool available within the Devbox shell environment for the project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndevbox add crossplane-cli@1.15.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Application Manifest (Shell)\nDESCRIPTION: This command outputs the content of the `app.yaml` file, which defines the Kubernetes resources (Deployment, Service, Ingress, AtlasSchema) for the `silly-demo` application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncat app.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Kubeconfig Clusters Before Update (Shell)\nDESCRIPTION: This command lists the cluster names currently defined in the user's kubeconfig file. Before running the Clusterpedia update script, it typically only shows the management cluster context.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl config get-clusters\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME\ndot-00\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Application Manifest\nDESCRIPTION: Shell command to display the contents of the Kubernetes application manifest file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat k8s/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Kwasm Operator with Helm\nDESCRIPTION: Shell command to install the Kwasm operator using Helm, which enables WebAssembly support in Kubernetes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install kwasm-operator kwasm-operator \\\n    --repo http://kwasm.sh/kwasm-operator \\\n    --namespace kwasm --create-namespace --wait\n```\n\n----------------------------------------\n\nTITLE: Setting up Steampipe Demo Environment\nDESCRIPTION: Shell commands for cloning the Steampipe demo repository, entering a devbox shell, and running the setup script to configure the Steampipe environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/steampipe-demo\n\ncd steampipe-demo\n```\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nchmod +x setup.sh\n\n./setup.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Subscribing to NATS Channels for Incoming Messages - Shell\nDESCRIPTION: Illustrates subscribing to a NATS channel ('ping') using the NATS CLI, enabling real-time receipt of messages published to this channel. Prerequisites are the 'nats' CLI configured and accessible authentication to a NATS server. The argument specifies the channel to subscribe to; each incoming message is displayed immediately with subscription continuity until the user cancels (Ctrl+C).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnats subscribe ping\n```\n\n----------------------------------------\n\nTITLE: Inspecting Kubernetes Resources by Namespace (Shell)\nDESCRIPTION: This command uses 'kubectl' to get a comprehensive view of all resources (pods, services, deployments, and ingresses) in a Kubernetes Namespace. Dependencies include authenticated access to the cluster and 'kubectl' installed. Input is the namespace name; output is resource statuses for deployment diagnostics and visibility.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace egulliksen get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Destroying Kubernetes Cluster and Resetting Git Branch (Shell)\nDESCRIPTION: This shell script demonstrates how to destroy a local Kubernetes cluster using the 'task' command, reset the Git branch to 'main', and then exit the shell. It depends on the presence of a properly configured 'task' CLI and assumes 'cluster-destroy' is a defined task in the Taskfile. No input parameters are required; running this snippet will irreversibly remove the current cluster and return the repository to the 'main' branch, making it suitable for cleanup steps in automation pipelines. Use with caution as the destruction of the cluster is irreversible.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ntask cluster-destroy\n\ngit checkout main\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Starship Prompt (Text)\nDESCRIPTION: Shows the example output of the shell prompt after initializing Starship with its default settings. It includes directory, Git branch, Nix shell information (via Devbox), and cloud context (GCP).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\ndotfiles-demo on  main via ❄️  impure (nix-shell-env) on ☁️  viktor@farcic.com(us-east1)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Hugo Content Section for Application Management\nDESCRIPTION: This Hugo front matter defines the configuration for an 'Application Management' section in a documentation site. It sets the title, weight (for ordering), and visibility of the section.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n+++\ntitle = \"Application Management\"\nweight = 30\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Displaying Patch File Content for SQLClaim using Shell\nDESCRIPTION: This command uses 'cat' to display the content of the 'db.yaml' file located in the 'tests/common' directory. This file contains the patch definition applied by Chainsaw to modify the 'SQLClaim' resource during the test.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncat tests/common/db.yaml\n```\n\n----------------------------------------\n\nTITLE: Synchronization Script for Dotfiles\nDESCRIPTION: This script authenticates with Google Cloud, sets up environment variables using Teller, and uses Stow to create symlinks for dotfiles. It also provides instructions for VS Code configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngcloud auth login\n\nteller env >.config/fabric/.env\n\nrm ~/.zshrc\n\nstow .\n\necho \"## Follow the instructions at https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions to enable Fira Code in VS Code\" \\\n    | gum format\n\necho '## Execute `source ~/.zshrc`.' | gum format\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Manifest Content\nDESCRIPTION: Shell command to view the contents of the application manifest file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncat apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Backstage Deployment Script with Parameters (Shell)\nDESCRIPTION: Runs the `platform apply backstage` command, passing the version tag `\"0.0.1\"`, the ingress host constructed using the `$INGRESS_HOST` variable, and the GitHub token from the `$GITHUB_TOKEN` variable. This triggers the Nushell deployment script.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nplatform apply backstage \"0.0.1\" \\\n    --ingress_host \"backstage.$INGRESS_HOST\" \\\n    --github_token $GITHUB_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Filtering Running Pods by Field Selector via kubectl and Clusterpedia (Shell)\nDESCRIPTION: This command lists all pods in the 'a-team' namespace whose status phase is 'Running', using a field selector for runtime state filtering. It employs kubectl's --field-selector flag and assumes Clusterpedia's resource synchronization includes pods. The key parameter is --field-selector=\"status.phase=Running\"; only pods with this exact status are returned. Output is limited to synced and selected resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia --namespace a-team \\\n    get pods --field-selector=\"status.phase=Running\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kargo Freights in Kubernetes Namespace\nDESCRIPTION: This command lists all freights in the 'silly-demo' namespace. Freights in Kargo represent the artifacts being promoted across stages.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace silly-demo get freights\n```\n\n----------------------------------------\n\nTITLE: Applying Starship 'jetpack' Preset (Shell)\nDESCRIPTION: Applies the 'jetpack' preset to Starship by writing its configuration to `~/.config/starship.toml`. This preset is characterized by having some information potentially displayed on the right side of the prompt.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nstarship preset jetpack --output ~/.config/starship.toml\n```\n\n----------------------------------------\n\nTITLE: Creating a Namespace for Backstage - Shell\nDESCRIPTION: This shell command creates a new Kubernetes namespace named 'backstage'. It is a prerequisite step for isolating all Backstage resources. Requires kubectl and appropriate permissions to create namespaces. Returns success or error message from kubectl; the namespace must not already exist for successful creation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl create namespace backstage\n```\n\n----------------------------------------\n\nTITLE: Listing Available Storage Classes\nDESCRIPTION: This command uses kubectl to list all Storage Classes available in the Kubernetes cluster. Storage Classes define different types of storage and their provisioners.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get storageclasses\n```\n\n----------------------------------------\n\nTITLE: Creating a Kubernetes Node Pool with NVIDIA Tesla A100 GPUs in GKE\nDESCRIPTION: Command to create a new node pool with NVIDIA Tesla A100 GPUs in Google Kubernetes Engine (GKE), specifying machine type, node count, and GPU driver version.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngcloud container node-pools create dot-gpu \\\n    --project $PROJECT_ID --cluster dot --zone us-east1-b \\\n    --machine-type a2-highgpu-1g --num-nodes 1 \\\n    --no-enable-autoupgrade \\\n    --accelerator type=nvidia-tesla-a100,count=1,gpu-driver-version=default\n```\n\n----------------------------------------\n\nTITLE: Displaying Earthly Build Output without Push\nDESCRIPTION: Shows the console output after running an Earthly build command without the `--push` flag. It indicates that the image `ghcr.io/vfarcic/silly-demo:latest` was built locally but not pushed to a remote registry.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nImage +image output as ghcr.io/vfarcic/silly-demo:latest\n\n\n========================== 🌍 Earthly Build  ✅ SUCCESS ==========================\n\n🛰️ Reuse cache between CI runs with Earthly Satellites! 2-20X faster than without cache. Generous free tier https://cloud.earthly.dev\n```\n\n----------------------------------------\n\nTITLE: Launching Devbox Shell for Development Environment\nDESCRIPTION: This command launches a Devbox shell, which sets up a development environment with predefined tools and dependencies specified in the devbox.json file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP GET Request to Local Backend Using curl\nDESCRIPTION: Sends a GET request to the locally running backend server at port 8080. Used to verify that the development process and code change are in effect locally. Requires curl, local server running on port 8080. Inputs: None. Output: Server plaintext response to stdout.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"localhost:8080\"\n```\n\n----------------------------------------\n\nTITLE: Running Backstage Demo Container with Docker - Shell\nDESCRIPTION: This shell snippet runs the Backstage demo container using the docker CLI, mapping the default Backstage port (7007) and setting essential environment variables: NODE_ENV for development mode, and GITHUB_USER/GITHUB_TOKEN for GitHub authentication. It pulls the image tagged with the current GitHub user and version, then starts the Node.js backend with a specific app-config.yaml. Requirements: Docker installed, GITHUB_USER and GITHUB_TOKEN environment variables set, and access to the ghcr.io package registry. Output is a running Backstage instance accessible at http://localhost:7007. Intended for quick validation in a development environment; not recommended for production use.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker container run --interactive --tty --publish 7007:7007 \\\n    --env NODE_ENV=development --env GITHUB_USER=$GITHUB_USER \\\n    --env GITHUB_TOKEN=$GITHUB_TOKEN \\\n    ghcr.io/$GITHUB_USER/backstage-demo:v0.0.1 \\\n    node packages/backend --config app-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Claim Specification Details (YAML)\nDESCRIPTION: Shows the updated `spec` section for the example claim (`my-db.yaml`). It defines user-configurable fields like `id`, `compositionSelector` (with `matchLabels` for provider and db type), and `parameters` (including `version`, `size`, and `region`). This represents the desired end-user interface for creating the resource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nspec:\n  id: my-db\n  compositionSelector:\n    matchLabels:\n      provider: aws\n      db: postgresql\n  parameters:\n    version: \"16.2\"\n    size: medium\n    region: us-east-1\n```\n\n----------------------------------------\n\nTITLE: Extracting Version Tag from Chart.yaml using yq - Shell\nDESCRIPTION: This shell snippet uses 'cat' and 'yq' to output the 'version' field from 'chart/Chart.yaml', assigning it to the environment variable TAG. Dependencies include the yq CLI and a valid Chart.yaml file. Output is an environment variable (TAG) containing the chart version; input is Chart.yaml.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=$(cat chart/Chart.yaml | yq .version)\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Pods Across All Clusters\nDESCRIPTION: This SQL query retrieves all pods from all configured Kubernetes clusters using the aggregator connection.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect * from kubernetes_all.kubernetes_pod;\n```\n\n----------------------------------------\n\nTITLE: Applying KubeVela Trait Definition\nDESCRIPTION: Command to apply a CUE trait definition to KubeVela, making it available for use with components.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nvela def apply trait-scaler.cue\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane SQL Claim Resources using CLI\nDESCRIPTION: Uses the `crossplane beta trace` command specifically for a `sqlclaim` named `crossplane-gh-demo-db` in the `a-team` namespace. This allows inspection of the resources managed by a database claim, such as the database instance and user credentials. Depends on the Crossplane CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace sqlclaim crossplane-gh-demo-db \\\n    --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Observing Failed Request due to Abrupt Shutdown (sh)\nDESCRIPTION: This shows the typical `curl` error (error 52: Empty reply from server) received when the server connection is closed prematurely. In this context, it indicates the Docker container hosting the application was stopped (via Ctrl+c as mentioned in surrounding text) before the Fibonacci calculation completed and the response could be sent, because signal handling was disabled.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl: (52) Empty reply from server\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kargo Warehouses in Kubernetes Namespace\nDESCRIPTION: This command lists the warehouses in the 'silly-demo' namespace. Warehouses in Kargo are used to store and manage artifacts for deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace silly-demo get warehouses\n```\n\n----------------------------------------\n\nTITLE: Navigating to Backstage Directory\nDESCRIPTION: This command changes the current directory to the newly created Backstage application directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncd backstage\n```\n\n----------------------------------------\n\nTITLE: Incorrect Multi-Line Command with Backslash in Nushell\nDESCRIPTION: Demonstrates a traditional shell syntax using backslash for line continuation that doesn't work in Nushell due to cross-platform compatibility.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace kube-system \\\n        get pods\n```\n\n----------------------------------------\n\nTITLE: Clusterpedia Environment Initialization\nDESCRIPTION: Commands to set up the development environment using Devbox, make the setup script executable, and source environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nchmod +x setup.sh\n\n./setup.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Listing Neon Database Branches\nDESCRIPTION: Uses the Neon CLI to list all existing database branches.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nneonctl branches list\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up KCL Example Repository\nDESCRIPTION: Commands to clone the crossplane-app repository, navigate into it, pull latest changes and checkout the kcl branch for exploring KCL examples.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-app\n\ncd crossplane-app\n\ngit pull\n\ngit checkout kcl\n```\n\n----------------------------------------\n\nTITLE: Extracting Complex Task Definition\nDESCRIPTION: Command to extract a more complex task definition that includes variables and dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncat Taskfile.yaml | yq \".tasks.cluster-create\"\n```\n\n----------------------------------------\n\nTITLE: Querying Azure Kubernetes Clusters with SQL\nDESCRIPTION: SQL query that retrieves all Azure Kubernetes clusters from the azure_kubernetes_cluster table in Steampipe, showing basic information about each cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from azure_kubernetes_cluster\n```\n\n----------------------------------------\n\nTITLE: Filtering Pods by Status using Nushell Pipeline\nDESCRIPTION: Uses a Nushell pipeline to detect columns from kubectl output and filter rows based on the STATUS column value.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods --all-namespaces\n    | detect columns\n    | where STATUS != \"Running\"\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Commands for Repository Setup\nDESCRIPTION: Series of kubectl and crossplane commands to apply the claim and verify resource creation status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat crossplane/repo.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename crossplane/repo.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace --namespace a-team githubclaim idp-full-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit clone \"https://github.com/$GITHUB_USER/idp-full-app\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd idp-full-app\n```\n\nLANGUAGE: sh\nCODE:\n```\ngh pr list\n```\n\nLANGUAGE: sh\nCODE:\n```\ngh pr view init --json files\n```\n\nLANGUAGE: sh\nCODE:\n```\ngh pr merge init --rebase\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Retrieving Data from Application via GET Request\nDESCRIPTION: This command uses curl to send an HTTP GET request to retrieve all stored data from the 'silly-demo' application. The output is piped to 'jq' for pretty-printing the JSON response. Requires the INGRESS_HOST environment variable and the 'jq' utility.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.$INGRESS_HOST.nip.io/videos\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Displaying KCL Deployment Schema File Content (Shell)\nDESCRIPTION: This shell command uses `cat` to display the contents of the `kcl/deployment.k` file. This file contains the KCL schema definition for a Kubernetes Deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncat kcl/deployment.k\n```\n\n----------------------------------------\n\nTITLE: Displaying DaemonSet Resource Tree\nDESCRIPTION: Command to display the ownership hierarchy of a DaemonSet named 'silly-demo' in the a-team namespace, showing the controller and managed pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\nkubectl tree --namespace a-team daemonset silly-demo\n```\n\n----------------------------------------\n\nTITLE: Checking All Resources in a Kubernetes Namespace (Shell)\nDESCRIPTION: This command uses `kubectl` to list all resources (Pods, ReplicaSets, Deployments, Services, etc.) within the specified Kubernetes namespace 'a-team'. It's used here to verify that deleting a controlling resource (like a ReplicaSet) also removes its dependent resources (Pods).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all\n```\n\n----------------------------------------\n\nTITLE: Watching Project Tests Continuously (Sh)\nDESCRIPTION: Starts a continuous testing watch loop using Task's `test-watch` target. Invoking `task test-watch` runs configured fast feedback loops that regenerate Kubernetes YAMLs and re-run tests automatically on file changes. Dependencies: Taskfile must define a `test-watch` target. Input: None (run from root of project). Output: Watches for file changes, automatically rebuilding and testing as needed. Limitation: Requires a properly set up Task runner environment and file system notifications support.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ntask test-watch\n```\n\n----------------------------------------\n\nTITLE: Example Output Confirming Namespace Restoration\nDESCRIPTION: Shows the output of `kubectl get namespaces` after the restore, confirming the presence of the `a-team` namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nNAME              STATUS   AGE\na-team            Active   2m38s\ndefault           Active   52m\nkube-node-lease   Active   52m\nkube-public       Active   52m\nkube-system       Active   52m\ntraefik           Active   42m\nvelero            Active   42m\n```\n\n----------------------------------------\n\nTITLE: Updating HTTPRoute Hostname with External IP\nDESCRIPTION: This command updates the hostname in the HTTPRoute YAML file with the external IP address using yq, a YAML processor.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\nyq --inplace \\\n    \".spec.hostnames[0] = \\\"silly-demo.$EXTERNAL_IP.nip.io\\\"\" \\\n    service/route.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting up Remote Development Environment with Okteto\nDESCRIPTION: Shell commands for cloning and setting up a demo project for remote development using Okteto. Includes repository setup, branch switching, and environment configuration steps.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/vfarcic/idp-full-demo\n\ncd idp-full-demo\n\ngit pull\n\ngit fetch\n\ngit switch okteto\n\ndevbox shell\n```\n\nLANGUAGE: shell\nCODE:\n```\nplatform setup okteto\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Testing Git Branch Display in Starship\nDESCRIPTION: Creates a new git branch to demonstrate how Starship displays branch information when not on main/master branches.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b something\n```\n\n----------------------------------------\n\nTITLE: Checking Restored Custom Resources via Kubectl (Shell)\nDESCRIPTION: This command uses `kubectl` to retrieve instances of specific Custom Resources (CRs), namely CNPG `clusters` and Atlas Operator `atlasschemas`, within the 'a-team' namespace. It targets the cluster defined in 'kubeconfig-dot2.yaml'. This checks if specialized resources managed by operators were restored correctly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml --namespace a-team \\\n    get clusters,atlasschemas\n```\n\n----------------------------------------\n\nTITLE: Defining a KEDA ScaledObject - YAML\nDESCRIPTION: Defines a ScaledObject custom resource for KEDA, which horizontally scales the 'silly-demo' Deployment in the 'a-team' namespace based on a Prometheus query. Key fields include minReplicaCount and maxReplicaCount, and the trigger uses Prometheus to scale based on container memory usage exceeding 250MB. Requires KEDA already installed in the cluster and Prometheus running at the specified endpoint. The manifest should be applied in the relevant namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: keda.sh/v1alpha1\\nkind: ScaledObject\\nmetadata:\\n  name: silly-demo\\nspec:\\n  scaleTargetRef:\\n    apiVersion: apps/v1\\n    kind: Deployment\\n    name: silly-demo\\n  minReplicaCount: 1\\n  maxReplicaCount: 20\\n  triggers:\\n    - type: prometheus\\n      metadata:\\n        serverAddress: http://prometheus-server.monitoring:80\\n        threshold: \\\"250000000\\\"\\n        query: sum(container_memory_usage_bytes{namespace=\\\"a-team\\\", container=\\\"silly-demo\\\"})\n```\n\n----------------------------------------\n\nTITLE: Listing All Available Tables\nDESCRIPTION: This SQL command lists all available tables across all configured connections in Steampipe.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\n.tables\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Management with Crossplane\nDESCRIPTION: Creates a GitHub repository with initial files and branch using Crossplane managed resources. Includes repository creation, file management, and branch setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: repo.github.upbound.io/v1alpha1\nkind: Repository\nmetadata:\n  name: crossplane-github-demo\nspec:\n  forProvider:\n    name: crossplane-github-demo\n    visibility: public\n    hasIssues: true\n---\napiVersion: repo.github.upbound.io/v1alpha1\nkind: RepositoryFile\nmetadata:\n  name: crossplane-github-demo-gitignore\nspec:\n  forProvider:\n    commitAuthor: Crossplane\n    commitEmail: github-provider@crossplane.io\n    commitMessage: \"Crossplane rocks\"\n    content: |\n      /tmp\n    file: .gitignore\n    repositoryRef:\n      name: crossplane-github-demo\n---\napiVersion: repo.github.upbound.io/v1alpha1\nkind: Branch\nmetadata:\n  name: crossplane-github-demo-init\nspec:\n  forProvider:\n    branch: init\n    repositoryRef:\n      name: crossplane-github-demo\n```\n\n----------------------------------------\n\nTITLE: Initial KCL Function Boilerplate (`main.k`)\nDESCRIPTION: This KCL snippet shows the initial boilerplate code generated in `main.k` by `up function generate`. It imports Crossplane resource schemas, defines variables to access observed (`oxr`, `_ocds`) and desired (`_dxr`, `dcds`) composite/composed resources, includes a helper lambda `_metadata` for resource naming, and initializes an empty list `_items` where managed resource definitions should be added.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: kcl\nCODE:\n```\nimport models.v1beta1 as v1beta1\nimport models.v1beta2 as v1beta2\nimport models.v1beta3 as v1beta3\nimport models.k8s.apimachinery.pkg.apis.meta.v1 as metav1\n\noxr = option(\"params\").oxr # observed composite resource\n_ocds = option(\"params\").ocds # observed composed resources\n_dxr = option(\"params\").dxr # desired composite resource\ndcds = option(\"params\").dcds # desired composed resources\n\n_metadata = lambda name: str -> any {\n    { annotations = { \"krm.kcl.dev/composition-resource-name\" = name }}\n}\n\n_items = [\n\n]\nitems = _items\n```\n\n----------------------------------------\n\nTITLE: Displaying Earthfile Contents in Shell\nDESCRIPTION: A shell command to display the contents of the Earthfile.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat Earthfile\n```\n\n----------------------------------------\n\nTITLE: Querying by Label Value - Karpor Dashboard - SQL\nDESCRIPTION: This SQL query finds all Kubernetes resources with the label 'app.kubernetes.io/name' set to 'silly-demo', capturing both standard and auto-generated resources (like ReplicaSets or Pods) that share this label. Use this in the Karpor dashboard search field to broaden results beyond exact name matches. Input is a label filter; output includes resources matching the specified label value across all clusters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nwhere `labels.app.kubernetes.io/name` = 'silly-demo'\n```\n\n----------------------------------------\n\nTITLE: Running Project Task: Cluster Creation (Sh)\nDESCRIPTION: Executes a predefined Taskfile target called `cluster-create` via the `task` runner, automating Kubernetes cluster creation and dependency installation. Requires Taskfile.yml in the project root and the necessary task definitions. Input: The command name of the target task. Output: Orchestrates shell commands to set up a full Kubernetes environment with Crossplane, providers, and compositions. Limitations: The task definitions and dependencies must be correct in the Taskfile.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ntask cluster-create\n```\n\n----------------------------------------\n\nTITLE: Generating Argo CD Web UI URL in Bash\nDESCRIPTION: Generate and display the URL for accessing the Argo CD web interface based on the configured ingress host.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://argocd.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing an Image with Earthly using ttl.sh\nDESCRIPTION: Demonstrates using the `earthly` command with the `--push` flag to build the `+image` target and push it to the ephemeral `ttl.sh` registry. It specifies a tag (`0.0.1`) and overrides the default registry and image name using `--registry` and `--image` arguments. The `$IMAGE` variable is expected to be set in the shell environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nearthly --push +image \\\n    --tag 0.0.1 --registry ttl.sh --image $IMAGE\n```\n\n----------------------------------------\n\nTITLE: Using Nushell's Cross-Platform start Command to Open URLs\nDESCRIPTION: Demonstrates Nushell's platform-agnostic 'start' command which opens files or URLs in the appropriate application regardless of the operating system.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nstart \"https://devopstoolkit.live\"\n```\n\n----------------------------------------\n\nTITLE: Forking and Cloning Backstage Demo Repository\nDESCRIPTION: Commands to fork the Backstage demo repository, clone it locally, and set it as the default repository using GitHub CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngh repo fork vfarcic/backstage-demo --clone --remote\n\ncd backstage-demo\n\ngh repo set-default\n```\n\n----------------------------------------\n\nTITLE: Executing Corrected Nushell Script\nDESCRIPTION: This command executes a corrected version of the Nushell script named 'security.nu', which compiles and runs without errors.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\n./manuscript/setup/security.nu\n```\n\n----------------------------------------\n\nTITLE: Applying a ClusterClaim Manifest (Shell)\nDESCRIPTION: This command uses `kubectl apply` to submit the `ClusterClaim` definition from the specified YAML file (`cluster/$HYPERSCALER.yaml`) to the Kubernetes API server, targeting the `a-team` namespace. This action initiates the cluster provisioning process managed by Crossplane based on the claim's specifications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename cluster/$HYPERSCALER.yaml\n```\n\n----------------------------------------\n\nTITLE: Instantiating Pkl Classes with Different Parameters\nDESCRIPTION: Example showing how to create multiple instances of a Pkl class with different parameter values to generate variations of similar resources without code duplication.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: pkl\nCODE:\n```\n                    (Subnet) {\n                        zoneVar = \"a\"\n                        cidrBlockVar = \"11.0.0.0/24\"\n                    }\n                    (Subnet) {\n                        zoneVar = \"b\"\n                        cidrBlockVar = \"11.0.1.0/24\"\n                    }\n                    (Subnet) {\n                        zoneVar = \"c\"\n                        cidrBlockVar = \"11.0.2.0/24\"\n                    }\n...\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Code Changes with Git (sh)\nDESCRIPTION: Stages all current changes, creates a Git commit with the message \"Silly demo\", and pushes the commit to the remote repository. This action serves as the trigger for the CI workflow defined in GitHub Actions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n\ngit commit -m \"Silly demo\"\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Retrieving Secrets from Crossplane System Namespace\nDESCRIPTION: Lists all secrets in the crossplane-system namespace to verify that credentials were properly copied from the control plane cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace crossplane-system get secrets\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Logs for Specific Requests (Shell)\nDESCRIPTION: This command retrieves logs from a specific Pod (identified by replacing '[...]') in the 'a-team' namespace and filters them using 'grep' to show lines containing 'fibonacci'. This is used to determine which requests were handled by this particular Pod replica, illustrating load balancing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\n# Replace [...] with the NAME of the first Pod\nkubectl --namespace a-team logs [...] | grep fibonacci\n```\n\n----------------------------------------\n\nTITLE: Displaying SQLClaim Manifest (Shell)\nDESCRIPTION: Displays the content of the YAML file that defines the Crossplane SQLClaim resource. The specific file shown depends on the value of the `$HYPERSCALER` environment variable (e.g., `db/aws.yaml`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncat db/$HYPERSCALER.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying a Kubernetes CronJob\nDESCRIPTION: Command to apply a CronJob manifest to the Kubernetes cluster in the a-team namespace, which will execute a task every minute.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_57\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename cronjob/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Zellij Layout in KDL\nDESCRIPTION: Defines a custom Zellij layout using KDL (Kernel Description Language). It includes tab configurations, pane layouts, and command specifications for various development tasks.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: kdl\nCODE:\n```\nlayout {\n    default_tab_template {\n        pane size=1 borderless=true {\n            plugin location=\"zellij:tab-bar\"\n        }\n        children\n        pane size=2 borderless=true {\n            plugin location=\"zellij:status-bar\"\n        }\n    }\n    tab name=\"Do\" focus=true {\n        floating_panes {\n            pane {\n                name \"cluster\"\n                command \"just\"\n                args \"cluster-create\"\n                close_on_exit true\n                x \"20%\"\n                y \"20%\"\n                width \"60%\"\n                height \"60%\"\n                focus true\n            }\n        }\n        pane {\n            name \"test-watch\"\n            command \"just\"\n            args \"test-watch\"\n            start_suspended true\n            size \"70%\"\n        }\n        pane {\n            name \"get-managed\"\n            command \"viddy\"\n            args \"kubectl\" \"get\" \"managed\"\n            start_suspended true\n            size \"30%\"\n        }\n    }\n    tab name=\"Done\" {\n        pane {\n            name \"cluster-destroy\"\n            command \"just\"\n            args \"cluster-destroy\"\n            start_suspended true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repository in Web Browser\nDESCRIPTION: This command uses the GitHub CLI to open the web view of the specified repository. It assumes the $GITHUB_USER environment variable is set to the user's GitHub username.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view $GITHUB_USER/idp-full-app --web\n```\n\n----------------------------------------\n\nTITLE: Generating Network Policies from Traffic Log (Shell)\nDESCRIPTION: Uses the `kubectl gadget advise network-policy report` command to process the previously captured network traffic data stored in `network.json` (Note: the log file was named `network.log` earlier, assuming it was renamed or the command expects `.json`). This command analyzes the traffic patterns and outputs recommended Kubernetes NetworkPolicy resources in YAML format.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget advise network-policy report --input network.json\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Persistent Volumes in the Cluster\nDESCRIPTION: This command uses kubectl to list all Persistent Volumes (PVs) currently existing in the Kubernetes cluster. It helps verify whether a volume has been provisioned for a claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Environment with Devbox\nDESCRIPTION: Command to start a shell with all required development tools using Devbox. This ensures a consistent development environment with all dependencies preinstalled.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Analyzing Starship Performance with Timings\nDESCRIPTION: Uses the starship timings command to analyze the performance impact of each module in the prompt, showing execution time in milliseconds.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nstarship timings\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kubernetes DaemonSet\nDESCRIPTION: Command to delete the previously created DaemonSet from the a-team namespace, removing all its associated pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename daemonset/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Sample HorizontalPodAutoscalers Status Output - Plain Text\nDESCRIPTION: Shows the typical output of 'kubectl get horizontalpodautoscalers', listing scaling metrics for the HPA resource KEDA created. Details reference, targets, pod counts, and age for auditing scaling activity. No executable dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                REFERENCE             TARGETS                  MINPODS MAXPODS REPLICAS AGE\\nkeda-hpa-silly-demo Deployment/silly-demo 243725107200m/250M (avg) 1       20      20       9m54s\n```\n\n----------------------------------------\n\nTITLE: Launching Devbox Development Environment\nDESCRIPTION: Command to start a Devbox shell environment for development. Devbox is used to manage development dependencies and tools.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Application Resource Definitions\nDESCRIPTION: Complete set of Kubernetes resource definitions including Deployment, Service, Ingress, PostgreSQL Cluster, and Atlas Schema configurations. The manifest defines a complete application stack with database integration and external access.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  replicas: 2\n  selector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  template:\n    metadata:\n      labels:\n        app.kubernetes.io/name: silly-demo\n    spec:\n      containers:\n      - env:\n        - name: DB_ENDPOINT\n          valueFrom:\n            secretKeyRef:\n              key: host\n              name: silly-demo-app\n        - name: DB_PORT\n          valueFrom:\n            secretKeyRef:\n              key: port\n              name: silly-demo-app\n        - name: DB_USER\n          valueFrom:\n            secretKeyRef:\n              key: username\n              name: silly-demo-app\n        - name: DB_PASS\n          valueFrom:\n            secretKeyRef:\n              key: password\n              name: silly-demo-app\n        - name: DB_NAME\n          value: app\n        image: ghcr.io/vfarcic/silly-demo:1.4.301\n        livenessProbe:\n          httpGet:\n            path: /\n            port: 8080\n        name: silly-demo\n        ports:\n        - containerPort: 8080\n        readinessProbe:\n          httpGet:\n            path: /\n            port: 8080\n        resources:\n          limits:\n            cpu: 500m\n            memory: 512Mi\n          requests:\n            cpu: 250m\n            memory: 256Mi\n---\napiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  ports:\n  - name: http\n    port: 8080\n    protocol: TCP\n    targetPort: 8080\n  selector:\n    app.kubernetes.io/name: silly-demo\n  type: ClusterIP\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  rules:\n  - host: silly-demo.com\n    http:\n      paths:\n      - backend:\n          service:\n            name: silly-demo\n            port:\n              number: 8080\n        path: /\n        pathType: ImplementationSpecific\n---\napiVersion: postgresql.cnpg.io/v1\nkind: Cluster\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo\nspec:\n  instances: 1\n  storage:\n    size: 1Gi\n---\napiVersion: db.atlasgo.io/v1alpha1\nkind: AtlasSchema\nmetadata:\n  labels:\n    app.kubernetes.io/name: silly-demo\n  name: silly-demo-videos\nspec:\n  credentials:\n    database: app\n    host: silly-demo-rw.a-team\n    parameters:\n      sslmode: disable\n    passwordFrom:\n      secretKeyRef:\n        key: password\n        name: silly-demo-app\n    port: 5432\n    scheme: postgres\n    user: app\n  schema:\n    sql: |\n      create table videos (\n        id varchar(50) not null,\n        title text,\n        primary key (id)\n      );\n      create table comments (\n        id serial,\n        video_id varchar(50) not null,\n        description text not null,\n        primary key (id),\n        CONSTRAINT fk_videos FOREIGN KEY(video_id) REFERENCES videos(id)\n      );\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated KCL Function File using `code`\nDESCRIPTION: This shell command uses the `code` utility to open and display the contents of the main KCL function file (`main.k`) located within the `functions/aws` directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ncode functions/aws/main.k\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret with DB Connection String (Shell)\nDESCRIPTION: This `kubectl` command creates a generic Kubernetes secret named `silly-demo` in the `a-team` namespace. It stores the database connection string (obtained from the `NEON_CONN_DEV` environment variable) under the key `uri`, making it available to pods referencing this secret as defined in `app.yaml`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team create secret generic silly-demo \\\n    --from-literal uri=$NEON_CONN_DEV\n```\n\n----------------------------------------\n\nTITLE: Viewing Argo Rollout Status After New Version Deployment (text)\nDESCRIPTION: Displays the output from Argo Rollouts immediately after applying a new version (1.4.128) of the `silly-demo` deployment. It shows the rollout is 'Paused' at the initial canary step (1/8), with the new canary version (revision 3) receiving 20% of the traffic (1 updated Pod), while the previous stable version (revision 2, image 1.4.127) serves the remainder.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: text\nCODE:\n```\nName:            silly-demo\nNamespace:       a-team\nStatus:          ॥ Paused\nMessage:         CanaryPauseStep\nStrategy:        Canary\n  Step:          1/8\n  SetWeight:     20\n  ActualWeight:  20\nImages:          ghcr.io/vfarcic/silly-demo:1.4.127 (stable)\n                 ghcr.io/vfarcic/silly-demo:1.4.128 (canary)\nReplicas:\n  Desired:       5\n  Current:       5\n  Updated:       1\n  Ready:         5\n  Available:     5\n\nNAME                                    KIND        STATUS        AGE   INFO\n⟳ silly-demo                            Rollout     ॥ Paused      103m\n├──# revision:3\n│  └──⧉ silly-demo-6b8dbddd4b           ReplicaSet  ✔ Healthy     24m   canary\n│     └──□ silly-demo-6b8dbddd4b-qqppw  Pod         ✔ Running     24m   ready:2/2\n├──# revision:2\n│  └──⧉ silly-demo-5d574b5f4f           ReplicaSet  ✔ Healthy     100m  stable\n│     ├──□ silly-demo-5d574b5f4f-jq459  Pod         ✔ Running     100m  ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-ffmxr  Pod         ✔ Running     97m   ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-xxfrp  Pod         ✔ Running     97m   ready:2/2\n│     └──□ silly-demo-5d574b5f4f-8tqtl  Pod         ✔ Running     96m   ready:2/2\n└──# revision:1\n   └──⧉ silly-demo-5c5547db68           ReplicaSet  • ScaledDown  103m\n```\n\n----------------------------------------\n\nTITLE: Successful Cross-Namespace Access using FQDN (Shell)\nDESCRIPTION: This command successfully accesses the 'silly-demo' service from the 'b-team' namespace by using its fully qualified domain name (FQDN): 'silly-demo.a-team'. Kubernetes DNS resolves FQDNs (<service-name>.<namespace-name>) across namespaces.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://silly-demo.a-team:8080\n```\n\n----------------------------------------\n\nTITLE: Cloning the kro Demo Repository\nDESCRIPTION: Shell command to clone the kro demo repository from GitHub, which contains example configurations and setup files for demonstration purposes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kro-demo\n\ncd kro-demo\n```\n\n----------------------------------------\n\nTITLE: Inspecting Okteto Configuration Manifest (Shell & YAML)\nDESCRIPTION: This shell snippet displays the Okteto 'okteto.yaml' manifest, followed by a YAML configuration defining development environment settings. Prerequisites: an Okteto-enabled repo. Keys such as 'dev', 'image', 'command', 'sync', and 'forward' define dev container setup, file sync, custom command execution (with hot-reloading by 'air'), and port mappings. Used by Okteto CLI when starting up a development environment. Input: none or existing repo; output: dev experience matching the manifest.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\ncat okteto.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Kubernetes Documentation Section\nDESCRIPTION: Hugo front matter configuration that defines a Kubernetes documentation section with sorting parameters. It sets the title to 'Kubernetes', assigns a weight of 10 for determining page order, and sets visibility to visible (hidden = false).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = \"Kubernetes\"\nweight = 10\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Inserting a New Record into lego_themes Table\nDESCRIPTION: Inserts a new record into the lego_themes table in the 'dev/john-doe' branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\npsql $NEON_CONN_DEV --command \\\n    \"INSERT INTO lego_themes (id, name, parent_id)\n    VALUES (999, 'DevOps Toolkit', 1);\"\n```\n\n----------------------------------------\n\nTITLE: Modifying YAML Properties In-Place using yq (Shell)\nDESCRIPTION: This command-line snippet uses 'yq' to update the '.spec.id' property in a YAML manifest file in place. 'yq' is a YAML processor; dependencies include having 'yq' installed. This operation enables programmatic updates of configuration files for eventual redeployment—inputs are the new string value and the target file path. The code outputs the updated YAML file, with the change applied directly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nyq --inplace \".spec.id = \\\"egulliksen-silly-demo\\\"\" \\\n    crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Sample ScaledObjects Status Output - Plain Text\nDESCRIPTION: Displays the output of 'kubectl get scaledobjects' showing the status and scaling configuration of the 'silly-demo' ScaledObject. The table details the scale target, trigger type, min/max replica counts, and readiness states. Intended to verify correct KEDA resource creation and current scaling state. No dependencies or parameters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME       SCALETARGETKIND    SCALETARGETNAME MIN MAX TRIGGERS   AUTHENTICATION READY ACTIVE  FALLBACK PAUSED  AGE\\nsilly-demo apps/v1.Deployment silly-demo      1   20  prometheus                True  true    Unknown  Unknown 3s\n```\n\n----------------------------------------\n\nTITLE: Applying a ReplicaSet Manifest - Shell with kubectl\nDESCRIPTION: Applies a ReplicaSet YAML file to a given Kubernetes namespace using 'kubectl apply'. Requires access to a running Kubernetes cluster and appropriate permissions for the namespace. Inputs are a namespace and filename, and output is the creation or update result for the ReplicaSet resource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply --filename replicaset/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Generated Crossplane Composition Boilerplate (YAML)\nDESCRIPTION: This YAML snippet shows the boilerplate content of a Crossplane Composition generated by the `up` tool. It includes metadata (like the name), a reference to the Composite Type (`XSQL`), the mode (`Pipeline`), and a predefined pipeline including `status-transformer` and `auto-ready` functions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: Composition\nmetadata:\n  name: xsqls.devopstoolkit.live\nspec:\n  compositeTypeRef:\n    apiVersion: devopstoolkit.live/v1alpha1\n    kind: XSQL\n  mode: Pipeline\n  pipeline:\n  - functionRef:\n      name: crossplane-contrib-function-status-transformer\n    input:\n      apiVersion: function-status-transformer.fn.crossplane.io/v1beta1\n      kind: StatusTransformation\n      metadata: {}\n    step: crossplane-contrib-function-status-transformer\n  - functionRef:\n      name: crossplane-contrib-function-auto-ready\n    step: crossplane-contrib-function-auto-ready\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Status After Enabling GPU Partitioning (sh)\nDESCRIPTION: This command repeats the earlier `kubectl get pods` command to check the status of pods in the 'ollama' namespace after the node pool has been recreated with GPU partitioning enabled. It verifies if both 'ollama' and 'ollama2' pods are now in the 'Running' state.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace ollama get pods\n```\n\n----------------------------------------\n\nTITLE: Displaying Spin Configuration File\nDESCRIPTION: This shell command displays the content of the `spin.toml` file, which contains the configuration needed by Fermyon Spin to build the Go application into a WASM module.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncat spin.toml\n```\n\n----------------------------------------\n\nTITLE: Applying HTTPRoute Resource in Kubernetes\nDESCRIPTION: This command applies the HTTPRoute resource definition to the Kubernetes cluster in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename service/route.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kubernetes Pod to Simulate Failure\nDESCRIPTION: Command to delete a Kubernetes Pod with the label 'app.kubernetes.io/name=silly-demo' in the 'a-team' namespace, simulating application failure or upgrade.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete pod \\\n    --selector app.kubernetes.io/name=silly-demo\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Endpoint with curl - Shell Script\nDESCRIPTION: Sends an HTTP GET request to the application's endpoint using curl, targeting a dynamically constructed host URL based on the INGRESS_HOST env variable. This is used to test if the deployed application is reachable and functioning after deployment. Requires curl to be installed and the endpoint to be accessible from the local environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://vfarcic.silly-demo.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Basic fzf Usage\nDESCRIPTION: Using fzf command-line fuzzy finder for file searching and selection\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nfzf\n```\n\n----------------------------------------\n\nTITLE: Describing a Velero Restore Operation Details\nDESCRIPTION: Uses the `velero` CLI to display detailed information about a specific Velero restore operation (identified by replacing `[...]` with the restore name). It connects to the cluster specified by `kubeconfig-dot2.yaml` to retrieve status, phase, item counts, and included/excluded namespaces/resources. Requires the user to replace `[...]` with the actual restore name.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nvelero --kubeconfig kubeconfig-dot2.yaml restore describe [...]\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Git Repository (sh)\nDESCRIPTION: Fetches changes from the configured remote Git repository and merges them into the current local branch. This command is used to confirm that the CI workflow successfully updated and pushed the Kubernetes manifest back to the repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Initializing Starship for Zsh (Shell)\nDESCRIPTION: Initializes the Starship prompt for the current zsh session. This command evaluates the output of `starship init zsh` to apply the Starship configuration. It's recommended to add this line to `~/.zshrc` for persistence.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\neval \"$(starship init zsh)\"\n```\n\n----------------------------------------\n\nTITLE: Executing a 'just' Task within Zellij in Shell\nDESCRIPTION: This command runs the 'cluster-create' task defined in a Justfile. 'just' is a command runner, often used for automating project-specific tasks like setting up infrastructure. This command is executed within an active Zellij pane.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\njust cluster-create\n```\n\n----------------------------------------\n\nTITLE: Attempting to Delete a Resource Through Clusterpedia\nDESCRIPTION: This command attempts to delete a custom resource (sqlclaim) using Clusterpedia, which is not supported. It illustrates that Clusterpedia is for observability only and does not allow modifications to resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: bash\nCODE:\n```\nkubectl --cluster dot-01 --namespace a-team \\\n    delete sqlclaim my-db-01\n```\n\n----------------------------------------\n\nTITLE: Defining a Gateway Resource in Kubernetes\nDESCRIPTION: This YAML snippet defines a Gateway resource for Kubernetes Gateway API. It specifies the Gateway class to use and configures the protocol and port for the external load balancer.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_43\n\nLANGUAGE: yaml\nCODE:\n```\n---\nkind: Gateway\napiVersion: gateway.networking.k8s.io/v1beta1\nmetadata:\n  name: http\nspec:\n  gatewayClassName: gke-l7-global-external-managed\n  listeners:\n    - name: http\n      protocol: HTTP\n      port: 80\n```\n\n----------------------------------------\n\nTITLE: Launching Devbox Shell Environment\nDESCRIPTION: Command to start a Devbox shell which provides a consistent development environment with all required tools as specified in devbox.json.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Example Generated Dev Container Dockerfile for Devbox Environment\nDESCRIPTION: This Dockerfile, generated by Devbox for a Dev Container setup, defines the container image build process. It starts from a base `jetpackio/devbox` image, sets the working directory, copies `devbox.json`, `devbox.lock`, and any local flakes (like `gcloud`), installs the specified packages using `devbox run`, and configures the container's shell environment using `devbox shellenv`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: Dockerfile\nCODE:\n```\nFROM jetpackio/devbox:latest\n\n# Installing your devbox project\nWORKDIR /code\nUSER root:root\nRUN mkdir -p /code && chown ${DEVBOX_USER}:${DEVBOX_USER} /code\nUSER ${DEVBOX_USER}:${DEVBOX_USER}\nCOPY --chown=${DEVBOX_USER}:${DEVBOX_USER} devbox.json devbox.json\nCOPY --chown=${DEVBOX_USER}:${DEVBOX_USER} devbox.lock devbox.lock\n\n\n# Copying local flakes directories\nCOPY gcloud gcloud\n\nRUN devbox run -- echo \"Installed Packages.\"\n\nRUN devbox shellenv --init-hook >> ~/.profile\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Backstage Docker Image\nDESCRIPTION: Shell commands for building the Backstage Docker image and pushing it to GitHub Container Registry.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker image build \\\n    --tag ghcr.io/$GITHUB_USER/backstage-demo:v0.0.1 .\n\ndocker image push ghcr.io/$GITHUB_USER/backstage-demo:v0.0.1\n\necho \"https://github.com/users/$GITHUB_USER/packages/container/backstage-demo/settings\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Manifest Template File (Shell)\nDESCRIPTION: This shell command uses `cat` to display the contents of the `cluster-claim.yaml` file located in the `manifest-templates` directory. This file is used by the `fetch:template` step in the Backstage Scaffolder template.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncat ../manifest-templates/cluster-claim.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Kubernetes Context for Starship\nDESCRIPTION: Sets up a Kubernetes configuration and creates a kind cluster to demonstrate how Starship displays Kubernetes context information.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nexport KUBECONFIG=$PWD/kubeconfig.yaml\n\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: Destroying Dev Containers Environment in Shell\nDESCRIPTION: Shell commands to destroy a Dev Containers development environment and exit the shell session. The script invokes a 'dot.nu' script with the 'destroy' command targeting 'devcontainers'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n./dot.nu destroy devcontainers\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Images with Docker Bake\nDESCRIPTION: Executes Docker Bake command to build and push images based on the configuration in docker-bake.hcl file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker buildx bake --push\n```\n\n----------------------------------------\n\nTITLE: Generating Example Claim Non-Interactively with up CLI (Shell)\nDESCRIPTION: Uses the `up example generate` command with specific arguments (`--name`, `--namespace`, `--type`, `--kind`, `--api-group`, `--api-version`) to non-interactively generate a baseline Composite Resource Claim (XRC) definition. This avoids the interactive wizard.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nup example generate --name my-db \\\n    --namespace default --type xrc --kind SQL \\\n    --api-group devopstoolkit.live \\\n    --api-version v1alpha1\n```\n\n----------------------------------------\n\nTITLE: Cloning Velero Demo Repository in Bash\nDESCRIPTION: This snippet clones the Velero demo repository and changes the current directory to the cloned repository. It's the first step in setting up the environment for the Velero backup demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/velero-demo\n\ncd velero-demo\n```\n\n----------------------------------------\n\nTITLE: Displaying Prompt with 'pure-preset' (Text)\nDESCRIPTION: Shows the example shell prompt after applying the 'pure-preset' Starship preset. It provides a very minimal look, typically showing only the directory and Git branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\ndotfiles-demo main\n❯\n```\n\n----------------------------------------\n\nTITLE: Inspecting and Applying Kubernetes Resource Manifests - sh\nDESCRIPTION: These shell commands demonstrate how to view Kubernetes manifest files and apply them directly using kubectl. The use of 'cat' allows inspection of manifest content before deploying, while 'kubectl apply' submits the configuration to the cluster. Assumes required YAML files exist in the current directory and that the user has kubectl access to the target cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat sa.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename sa.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\ncat event-source-deployment.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace argo-events apply \\\n    --filename event-source-deployment.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\ncat sensor-deployment.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace argo-events apply \\\n    --filename sensor-deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Shell Environment for Velero Demo\nDESCRIPTION: This command starts a Devbox shell environment, which is used to ensure consistent development environments across different machines. It's a prerequisite step before running the setup script.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Running a Pod with kubectl in Nushell\nDESCRIPTION: Basic example of using kubectl external command to create a Pod in Kubernetes with a specified image.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkubectl run something --image=something\n```\n\n----------------------------------------\n\nTITLE: Extracting Parameter Information for Nushell 'ls' Command\nDESCRIPTION: This Nushell command chain retrieves the detailed help information for the `ls` command (`help commands | where name == ls | first`) and then uses the `get` command to extract only the value associated with the `params` field. The output is a table listing the parameters accepted by the `ls` command, including their name, type, requirement status, and description.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nhelp commands | where name == ls | first | get params\n```\n\n----------------------------------------\n\nTITLE: Viewing Completed Argo Rollout Status (text)\nDESCRIPTION: Displays the output from Argo Rollouts after the `silly-demo` deployment has successfully completed all canary steps. It shows the status is 'Healthy' at step 8/8, with 100% weight shifted to the new stable version (revision 2, image 1.4.127), and the previous stable version (revision 1) scaled down.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nName:            silly-demo\nNamespace:       a-team\nStatus:          ✔ Healthy\nStrategy:        Canary\n  Step:          8/8\n  SetWeight:     100\n  ActualWeight:  100\nImages:          ghcr.io/vfarcic/silly-demo:1.4.127 (stable)\nReplicas:\n  Desired:       5\n  Current:       5\n  Updated:       5\n  Ready:         5\n  Available:     5\n\nNAME                                    KIND        STATUS        AGE  INFO\n⟳ silly-demo                            Rollout     ✔ Healthy     42m\n├──# revision:2\n│  └──⧉ silly-demo-5d574b5f4f           ReplicaSet  ✔ Healthy     39m  stable\n│     ├──□ silly-demo-5d574b5f4f-jq459  Pod         ✔ Running     39m  ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-ffmxr  Pod         ✔ Running     36m  ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-xxfrp  Pod         ✔ Running     36m  ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-8tqtl  Pod         ✔ Running     36m  ready:2/2\n│     └──□ silly-demo-5d574b5f4f-t2tdf  Pod         ✔ Running     35m  ready:2/2\n└──# revision:1\n   └──⧉ silly-demo-5c5547db68           ReplicaSet  • ScaledDown  42m\n```\n\n----------------------------------------\n\nTITLE: Checking Deployed Resources in Kubernetes Namespace\nDESCRIPTION: This command retrieves all resources and ingresses in the 'silly-demo-dev' namespace, showing the deployed application components.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace silly-demo-dev get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Platform CLI Environment in Shell\nDESCRIPTION: This sequence of shell commands first makes the 'platform' script executable using 'chmod'. Then, it runs the 'setup clis' subcommand of the 'platform' tool, which performs setup tasks specific to the CLI demo. Finally, it loads environment variables defined in the '.env' file into the current shell session using 'source'. Assumes the 'platform' script exists, the Devbox shell is active (providing Nushell), and the setup command potentially creates the '.env' file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x platform\n\nplatform setup clis\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Running Linux Clone Operation in Kubernetes\nDESCRIPTION: Creates a pod that clones the Linux kernel repository to demonstrate file system usage monitoring. Uses Alpine image with git installation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team run never-do-this --image alpine \\\n    -- /bin/sh -c \\\n    \"apk add -U git && git clone https://github.com/torvalds/linux\"\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP GET Request to Remote Backend Using curl\nDESCRIPTION: Sends a GET request with query parameters to the remote backend service via the staging environment's ingress. Used to confirm mirroring behavior and compare outputs between local and remote processes. Requires configured INGRESS_HOST and accessible remote endpoint. Inputs: Query parameter string. Output: Remote server's response.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://staging.silly-demo.$INGRESS_HOST?something=else\"\n```\n\n----------------------------------------\n\nTITLE: Forking and Configuring a GitHub Repository with gh CLI\nDESCRIPTION: Commands to fork the 'crossplane-gh' repository, clone it locally, and set it as the default repository for subsequent GitHub CLI commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngh repo fork vfarcic/crossplane-gh --clone --remote\n\ncd crossplane-gh\n\ngh repo set-default\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Organization Environment Variable for Neon Demo Setup\nDESCRIPTION: Sets the GitHub organization name as an environment variable for use in subsequent commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nexport GITHUB_ORG=[...]\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Cluster with KinD (Shell)\nDESCRIPTION: Uses KinD (Kubernetes in Docker) to create a local Kubernetes cluster. This command requires Docker to be running and is expected to update a Kubernetes-aware prompt.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkind create cluster\n```\n\n----------------------------------------\n\nTITLE: Changing Application Host Parameter via yq - Shell Script\nDESCRIPTION: Modifies the '.spec.parameters.host' value of the application's YAML manifest file to set a dynamic host using the INGRESS_HOST environment variable. The command is useful for ensuring unique URLs per developer or environment and is performed with yq. yq and the target manifest are required.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyq --inplace \\\n    \".spec.parameters.host = \\\"vfarcic.silly-demo.$INGRESS_HOST\\\"\" \\\n    crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Development Environment with Custom Script\nDESCRIPTION: This command uses a custom script to apply a development environment for a specific user, connecting it to a specified database. It simplifies the setup process for developers.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nplatform apply dev vfarcic --db silly-demo-db\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages with Quotes to NATS Channels - Shell\nDESCRIPTION: Shows how to publish a message with spaces and special characters (quotes) to the 'silly-demo.hello' channel via the NATS CLI. The message parameter is wrapped in quotes to ensure correct parsing by the shell. No output is expected locally after publication; any results must be observed by subscribers to the same channel.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnats publish silly-demo.hello \"Hello. I'm NATS.\"\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Shell\nDESCRIPTION: This command starts a new Devbox shell, which provides access to the tools defined in the Devbox configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Cluster Claim Configuration\nDESCRIPTION: YAML configuration for a Kubernetes cluster claim specifying AWS provider settings and various application enablements.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: ClusterClaim\nmetadata:\n  name: my-name\n  namespace: my-namespace\nspec:\n  id: my-name\n  compositionSelector:\n    matchLabels:\n      provider: aws\n  parameters:\n    version: 16.5\n    nodeSize: small\n    minNodeCount: 1\n    namespaces: [dev,production]\n    apps:\n      crossplane:\n        enabled: false\n      argocd:\n        enabled: false\n        host: acme.com\n        repoURL: https://github.com/vfarcic/SOMETHING\n        destinationNamespace: argo-cd\n        sourcePath: .\n      openfunction:\n        enabled: false\n      dapr:\n        enabled: false\n      traefik:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Page Frontmatter for Container Documentation\nDESCRIPTION: Hugo frontmatter in TOML format that configures a documentation page about containers. The configuration sets the page title to 'Containers', assigns it a weight of 120 for ordering in navigation, and specifies that it should not be hidden.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Containers\"\nweight = 120\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Organization Environment Variable\nDESCRIPTION: Exports the GitHub organization name as an environment variable for subsequent commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport GITHUB_ORG=[...]\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources in Namespace\nDESCRIPTION: This command retrieves all resources in the specified Kubernetes namespace, showing the state of the application after stopping the Okteto environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace egulliksen get all\n```\n\n----------------------------------------\n\nTITLE: Displaying Nushell Script Content\nDESCRIPTION: This command displays the content of a Nushell script file named 'security-orig.nu' using the 'cat' command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncat manuscript/setup/security-orig.nu\n```\n\n----------------------------------------\n\nTITLE: Running a Devbox Script to Destroy a Cluster\nDESCRIPTION: Command to execute the 'cluster-destroy' script defined in devbox.json, which creates a temporary shell with required tools, executes the command, and then exits.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\ndevbox run cluster-destroy\n```\n\n----------------------------------------\n\nTITLE: Deleting an Application Resource in Kubernetes\nDESCRIPTION: This shell command deletes the 'silly-demo' Application resource from the 'a-team' namespace in Kubernetes. It's used to remove the old application before creating a new one based on the updated ResourceGroup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Name Search with SQL LIKE - Karpor Dashboard - SQL\nDESCRIPTION: This SQL query returns all Kubernetes resources whose names contain the substring 'silly', leveraging the SQL 'like' operator in the Karpor dashboard's search. It is useful for finding both exact and auto-generated resource names that include a standard prefix. Input parameter is the search pattern, and output is a filtered list of resources with name-matching patterns, across all clusters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nwhere name like '%silly%'\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment\nDESCRIPTION: Commands for starting a Devbox shell environment and executing Kubernetes setup script with proper permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n\nchmod +x setup/kubernetes.nu\n\n./setup/kubernetes.nu\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Listing HorizontalPodAutoscalers using kubectl (Initial Check) (sh)\nDESCRIPTION: Lists all HorizontalPodAutoscaler (HPA) resources within the 'a-team' namespace using `kubectl get`. This command is used shortly after applying the HPA to check its initial status and target metrics, which might show '<unknown>' before metrics are collected.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get horizontalpodautoscalers\n```\n\n----------------------------------------\n\nTITLE: Resume Workflow\nDESCRIPTION: Command to resume a suspended KubeVela workflow\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nvela workflow resume silly-demo\n```\n\n----------------------------------------\n\nTITLE: Inspecting a Deployment Created by the ResourceGroup\nDESCRIPTION: Kubernetes command to examine a deployment created by the ResourceGroup to check if the environment variables were applied.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get deployment silly-demo \\\n    --output yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Kustomize Configuration with kubectl (sh)\nDESCRIPTION: Uses `kubectl apply --kustomize` to apply the Kubernetes manifests defined in the specified Kustomize overlay directory (`kustomize/overlays/simple`) to the `a-team` namespace. This triggers the Argo Rollout process based on the updated configuration, initiating a new deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --kustomize kustomize/overlays/simple\n```\n\n----------------------------------------\n\nTITLE: Initializing Mirrord Platform Setup (Shell)\nDESCRIPTION: Commands to set up the Mirrord platform using a custom CLI script, source environment variables, and enable debug mode. These prepare the environment for the Mirrord demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nplatform setup mirrord\n\nsource .env\n\nexport DEBUG=true\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing Sample Project with Devbox and Zoxide - Shell Script\nDESCRIPTION: This snippet provides commands to clone the demo repository, change into the directory, initialize a Devbox shell session, and add the current working directory and specified Devbox subdirectories to zoxide. It also shows how to add a specific CLI version with Devbox and execute an inline modification of a YAML file using yq. Key parameters include commands for Devbox environment setup and zoxide space marking. Dependencies: git, devbox, zoxide, yq. Inputs are CLI commands and file paths; outputs are prepared shell environment and an updated YAML file. Ensure you have all mentioned tools installed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/vfarcic/clis-demo\n\ncd clis-demo\n```\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n\nzoxide add $PWD\n\nzoxide add $PWD/.devbox/bin\n\nzoxide add $PWD/.devbox/gen\n\nzoxide add $PWD/.devbox/gen/flake\n\nzoxide add $PWD/.devbox/nix\n\ndevbox add kind@0.23.0\n\nyq --inplace \".metadata.annotations.something = \\\"else\\\"\" \\\n    k8s/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Kubernetes Resources\nDESCRIPTION: Command to list all resources, ingresses, and persistent volumes in the a-team namespace\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses,persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node IP Addresses in Kubernetes\nDESCRIPTION: This command retrieves the IP addresses of the first node in the Kubernetes cluster, including its internal and external IP addresses.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get nodes \\\n    --output jsonpath=\"{.items[0].status.addresses}\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources in Staging Namespace (Shell)\nDESCRIPTION: This command uses `kubectl` to list all standard Kubernetes resources (pods, services, deployments, replicasets), ingresses, and secrets within the 'staging' namespace. It's used to get an overview of the deployed application components in the staging environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace staging get all,ingresses,secrets\n```\n\n----------------------------------------\n\nTITLE: Istio VirtualService Definition for Canary Deployments\nDESCRIPTION: YAML definition of an Istio VirtualService that controls traffic routing between stable and canary services. It specifies gateway, hosts, and routes with weights that determine the percentage of traffic sent to each destination.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: silly-demo-1\nspec:\n  gateways:\n    - silly-demo-gateway\n  hosts:\n    - silly-demo.34.139.252.110.nip.io\n  http:\n    - name: primary\n      route:\n        - destination:\n            host: silly-demo-stable\n            port:\n              number: 8080\n          weight: 100\n        - destination:\n            host: silly-demo-canary\n            port:\n              number: 8080\n          weight: 0\n```\n\n----------------------------------------\n\nTITLE: Destroying Applied Policies and Exiting Environment - Shell\nDESCRIPTION: This shell sequence removes previously applied platform policies, restores the main Git branch, and exits the session, cleaning up any temporary changes. platform destroy policies is a custom/third-party CLI (not standard Kubernetes) and must be installed for the script to work as written. The commands require access to the respective tools.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: shell\nCODE:\n```\nplatform destroy policies\n\ngit checkout main\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Listing Files Using eza - Shell Script\nDESCRIPTION: Runs the eza command to display files and directories in the current directory, offering colored output and formatting improvements over ls. Requires the eza CLI installed. No parameters used here; inputs are the files in the current directory. Output is a colored and formatted list of file and directory names.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\neza\n```\n\n----------------------------------------\n\nTITLE: Displaying Devbox Configuration File\nDESCRIPTION: Command to view the devbox.json file, which defines all tools and their versions for the isolated environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ncat devbox.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Application Resource with Platform CLI\nDESCRIPTION: Shell command using the custom platform CLI to delete an appclaim resource from the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nplatform delete crossplane \\\n    --kind appclaim --name silly-demo --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Viewing Test Results Output\nDESCRIPTION: Example output showing successful test execution across multiple namespaces and configurations\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n=== NAME  chainsaw/azure#01\n    | 12:09:52 | azure | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-alive-weevil\n=== NAME  chainsaw/azure\n    | 12:09:53 | azure | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-touching-treefrog\n=== NAME  chainsaw/aws\n    | 12:09:56 | aws | @cleanup | DELETE    | DONE  | v1/Namespace @ chainsaw-merry-starfish\n--- PASS: chainsaw (0.00s)\n    --- PASS: chainsaw/azure#01 (15.37s)\n    --- PASS: chainsaw/azure (15.95s)\n    --- PASS: chainsaw/aws (18.90s)\nPASS\nTests Summary...\n- Passed  tests 3\n- Failed  tests 0\n- Skipped tests 0\nDone.\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote Git Repository in Bash\nDESCRIPTION: Push the committed changes to the remote repository to make them available for Argo CD synchronization.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Querying Kubernetes Resources in Namespace (Shell/kubectl)\nDESCRIPTION: This `kubectl` command retrieves `ExternalSecret`, `PushSecret`, `AtlasSchema`, and `Object` resources from the `a-team` namespace. Its purpose is to demonstrate that specific resource kinds were created directly, potentially using Crossplane v2 capabilities, even when older methods required wrapping. It also shows an unrelated `Object` resource might exist.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team \\\n    get externalsecrets,pushsecrets,atlasschemas,objects\n```\n\n----------------------------------------\n\nTITLE: Retrieving Prometheus URL\nDESCRIPTION: Command to display the Prometheus URL using environment variables. This allows users to access the Prometheus interface for monitoring and querying application metrics.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://prometheus.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Tree Listing to a Specific Level with ls --tree --level 2 - Shell Script\nDESCRIPTION: Executes ls (aliased to eza) with --tree and --level 2 to visualize directory structure up to two levels deep, providing a concise yet informative hierarchy. Input is the file system from the current directory; output is an indented listing, truncated to two depths, making large projects easier to survey. Requires the eza ls alias.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nls --tree --level 2\n```\n\n----------------------------------------\n\nTITLE: Proper Multi-Line Command Syntax in Nushell using Parentheses\nDESCRIPTION: Shows the correct way to split a command across multiple lines in Nushell using parentheses, which works on all platforms including Windows.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\n(\n    kubectl --namespace kube-system\n        get pods\n)\n```\n\n----------------------------------------\n\nTITLE: Staging Changes in Git Repository in Bash\nDESCRIPTION: Add all changes in the current directory to Git staging area for upcoming commit.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox Development Environment\nDESCRIPTION: Launches a Devbox shell with all the required development dependencies specified in the devbox.json file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Applying ClusterIP Service in Kubernetes\nDESCRIPTION: This command applies the ClusterIP Service YAML to the 'a-team' namespace in Kubernetes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename service/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Output Showing Bound PVC and PV Using Default Storage Class\nDESCRIPTION: This output shows the 'silly-demo' PVC and its corresponding PV, both in the 'Bound' state. Crucially, it confirms that the 'default' Storage Class was used for provisioning, as intended by omitting 'storageClassName' in the PVC definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: text\nCODE:\n```\nNAME                             STATUS VOLUME          CAPACITY ACCESS MODES STORAGECLASS VOLUMEATTRIBUTESCLASS AGE\npersistentvolumeclaim/silly-demo Bound  pvc-a717bafe... 1Gi      RWO          default      <unset>               8s\n\nNAME                             CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM             STORAGECLASS VOLUMEATTRIBUTESCLASS REASON AGE\npersistentvolume/pvc-a717bafe... 1Gi      RWO          Delete         Bound  a-team/silly-demo default      <unset>                      3s\n```\n\n----------------------------------------\n\nTITLE: Displaying KCL Composition File - Shell\nDESCRIPTION: Outputs the contents of the KCL file 'backend-resources.k' using a shell command. This is typically used for previewing or inspecting the KCL code that defines the Kubernetes resource composition. No dependencies are required apart from standard bash and file existence.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncat kcl/backend-resources.k\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Namespace (Shell)\nDESCRIPTION: This `kubectl` command deletes the entire `a-team` namespace and all the Kubernetes resources contained within it (Deployments, Services, Pods, Secrets, Ingresses, AtlasSchemas, etc.). This is used as part of the cleanup process to remove the deployed application and its configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nkubectl delete namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Listing Pods in Namespace (Shell)\nDESCRIPTION: This command uses 'kubectl get pods' to list the Pods running in the 'a-team' namespace after the test requests were sent. This helps identify the target Pods associated with the 'silly-demo' service.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Example Output of Tracing Crossplane Application Claim\nDESCRIPTION: Displays the typical output from the `crossplane beta trace appclaim` command, showing the status (`SYNCED`, `READY`) and relationships between the `AppClaim`, `App`, and underlying `Object` resources managed by Crossplane. This helps visualize the resource creation process initiated by the claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nNAME                                       SYNCED READY STATUS\nAppClaim/crossplane-gh-demo (a-team)       True   False Waiting: Claim is waiting for composite resource to become Ready\n└─ App/crossplane-gh-demo-jshr7            True   False Creating: Unready resources: crossplane-gh-demo\n   ├─ Object/crossplane-gh-demo-deployment True   True  Available\n   ├─ Object/crossplane-gh-demo-ingress    True   True  Available\n   ├─ Object/crossplane-gh-demo-service    True   True  Available\n   └─ ProviderConfig/crossplane-gh-demo    -      -\n```\n\n----------------------------------------\n\nTITLE: Get KubeVela Applications\nDESCRIPTION: Command to list all KubeVela applications in the dev namespace\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace dev get applications\n```\n\n----------------------------------------\n\nTITLE: Devbox JSON Configuration\nDESCRIPTION: The devbox.json configuration file that specifies all tools and their versions to be installed in the isolated environment. It includes CLIs like eza, bat, fzf, teller, and others.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"$schema\": \"https://raw.githubusercontent.com/jetify-com/devbox/0.11.1/.schema/devbox.schema.json\",\n  \"packages\": [\n    \"eza@0.18.17\",\n    \"bat@0.24.0\",\n    \"fzf@0.53.0\",\n    \"zoxide@0.9.4\",\n    \"thefuck@3.32\",\n    \"jq@1.7.1\",\n    \"yq-go@4.44.1\",\n    \"teller@1.5.6\",\n    \"gh@2.50.0\",\n    \"gum@0.14.1\",\n    \"kind@0.23.0\"\n  ],\n  \"shell\": {\n    \"init_hook\": [],\n    \"scripts\":   {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Neon Database Branch\nDESCRIPTION: Creates a new database branch named 'dev/john-doe' using the Neon CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nneonctl branches create --name dev/john-doe\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image with Earthly in Shell\nDESCRIPTION: A shell command to build a Docker image using the 'image' target in the Earthfile, specifying a custom tag.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nearthly +image --tag 0.0.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Formatting Backend Data with Curl and Jq (Shell)\nDESCRIPTION: This command uses `curl` to fetch data from the backend's '/videos' endpoint via its Ingress URL (constructed using `$INGRESS_HOST`). The JSON response is then piped to `jq .` for pretty-printing, making it easier to read the video data retrieved from the database.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://staging.silly-demo.$INGRESS_HOST/videos\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Building WASM Binary with Spin\nDESCRIPTION: This shell command executes the Fermyon Spin build process. It uses the configuration defined in `spin.toml` to compile the Go source code (`main.go`) into a WASM binary (`main.wasm`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nspin build\n```\n\n----------------------------------------\n\nTITLE: Example Output of Velero Restore Describe Command\nDESCRIPTION: Displays a sample truncated YAML output from the `velero restore describe` command. It shows the restore operation's name, namespace, status (`Completed`), item counts, and scope (included/excluded namespaces and resources). Note the placeholder `[...]` in the name.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nName:          [1mpre-disaster-20241107002807 [22m\nNamespace:    velero\n...\nPhase:                        [32mCompleted [0m\nTotal items to be restored:  12\nItems restored:              12\n..\nNamespaces:\n  Included:  a-team\n  Excluded:  <none>\n\nResources:\n  Included:        *\n  Excluded:        nodes, events, events.events.k8s.io, backups.velero.io, restores.velero.io, resticrepositories.velero.io, csinodes.storage.k8s.io, volumeattachments.storage.k8s.io, backuprepositories.velero.io\n  Cluster-scoped:  auto\n...\n```\n\n----------------------------------------\n\nTITLE: Output of Filtered Pod Logs (Text)\nDESCRIPTION: This shows example log output from one of the 'silly-demo' Pods after filtering. It indicates that this specific Pod handled requests for Fibonacci numbers 5, 10, 20, and 25, demonstrating that the Service distributed requests among available Pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: text\nCODE:\n```\n2024/04/16 19:50:37 DEBUG Handling request URI=\"/fibonacci?number=5\"\n2024/04/16 19:50:42 DEBUG Handling request URI=\"/fibonacci?number=10\"\n2024/04/16 19:50:45 DEBUG Handling request URI=\"/fibonacci?number=20\"\n2024/04/16 19:50:49 DEBUG Handling request URI=\"/fibonacci?number=25\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Files by Type with `ls` and `where` in Nushell\nDESCRIPTION: Lists directory contents using Nushell's `ls` command, which outputs structured data rather than plain text. This structured output is then piped to the `where` command, which filters the data to include only entries where the 'type' attribute is equal to 'file'. This demonstrates Nushell's data-oriented approach to filtering.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nls | where type == \"file\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Backstage Build Script Content (Shell)\nDESCRIPTION: Uses the `cat` command to display the contents of the `scripts/backstage.nu` file, revealing the Nushell script used for building the Backstage application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncat scripts/backstage.nu\n```\n\n----------------------------------------\n\nTITLE: Displaying Backstage Template Definition (Shell)\nDESCRIPTION: This shell command uses `cat` to display the contents of the `backstage-template.yaml` file, which defines a Backstage Scaffolder Template.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncat ../backstage-template.yaml\n```\n\n----------------------------------------\n\nTITLE: Exporting Pod Name Environment Variable for Targeted Operations in Kubernetes via Shell\nDESCRIPTION: This snippet retrieves the name of the first pod in the 'a-team' namespace using kubectl and assigns it to the POD_NAME environment variable for further operations. It depends on kubectl being installed and configured with appropriate access. Key parameters include the kube namespace ('a-team'); the expected output is to have POD_NAME exported in the current shell session for subsequent commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport POD_NAME=$(kubectl --namespace a-team get pods \\\n    --no-headers --output name | head -1)\n```\n\n----------------------------------------\n\nTITLE: Executing Backstage Build Script with Parameters (Shell)\nDESCRIPTION: Runs the `platform build backstage` command, passing the version tag `\"0.0.1\"` and the target image name using the `$GITHUB_USER` environment variable. This triggers the Nushell build script defined previously.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nplatform build backstage \"0.0.1\" \\\n    --image \"ghcr.io/$GITHUB_USER/idp-full-backstage\"\n```\n\n----------------------------------------\n\nTITLE: Applying and Viewing Namespace-Scoped Resources\nDESCRIPTION: Shell commands demonstrating how to apply and view namespace-scoped Composite Resources in Crossplane v2\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename examples/aws-eso.yaml\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get sqls\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get sqls\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl tree --namespace a-team sqls my-db\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get managed\n```\n\n----------------------------------------\n\nTITLE: Setting Docker Image Tag Environment Variable\nDESCRIPTION: Sets the TAG environment variable to specify the version for Docker image builds.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=v0.0.2\n```\n\n----------------------------------------\n\nTITLE: Exiting Temporary Pod (Shell)\nDESCRIPTION: The 'exit' command terminates the shell process inside the temporary 'curl' pod. Due to the '--rm' flag used during creation, this will also trigger the deletion of the Pod.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands in Shell\nDESCRIPTION: Shell commands for destroying the platform and cleaning up Git state.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nplatform destroy clis\n\nexit\n\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Testing Traffic Distribution with Multiple Requests\nDESCRIPTION: Bash loop that sends 20 HTTP requests to the application to verify that approximately 20% of traffic is being routed to the canary version as configured in the VirtualService.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\nfor i in {1..20}; do\n    curl \"http://silly-demo.$ISTIO_HOST\"\ndone\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Request Files JSON Output\nDESCRIPTION: JSON output showing the files changed in the pull request, including CI workflow definition, Dockerfile, devbox configuration, and a Nu script.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\n    {\n      \"path\": \".github/workflows/ci.yaml\",\n      \"additions\": 44,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"Dockerfile\",\n      \"additions\": 15,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"devbox-ci.json\",\n      \"additions\": 12,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"dot.nu\",\n      \"additions\": 44,\n      \"deletions\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Copying Starship Configuration to User Directory\nDESCRIPTION: Copies the starship.toml configuration file to the user's configuration directory (~/.config/) to apply the custom prompt settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncp starship.toml ~/.config/starship.toml\n```\n\n----------------------------------------\n\nTITLE: Deleting a GKE Node Pool (sh)\nDESCRIPTION: This command uses the Google Cloud CLI (`gcloud`) to delete the existing node pool named 'dot-gpu' associated with the 'dot' cluster in the specified project and zone. This step is necessary before creating a new node pool with different GPU configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ngcloud container node-pools delete dot-gpu --project $PROJECT_ID \\\n    --cluster dot --zone us-east1-b --quiet\n```\n\n----------------------------------------\n\nTITLE: Deleting a Pod in Kubernetes - Shell\nDESCRIPTION: This example demonstrates deleting the 'silly-demo' pod from the 'a-team' namespace. The kubectl delete command is used, which removes the specified pod from the cluster. Requires appropriate access permissions and kubectl context set to the target cluster. The expected result is the pod being terminated and no longer running.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete pod silly-demo\n```\n\n----------------------------------------\n\nTITLE: Setting Node Options for Backstage\nDESCRIPTION: This command sets the NODE_OPTIONS environment variable to avoid issues with templates when running Backstage with NodeJS 20 or later.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport NODE_OPTIONS=\"--no-node-snapshot\"\n```\n\n----------------------------------------\n\nTITLE: Rendering a Directory Tree Structure with ls --tree - Shell Script\nDESCRIPTION: Invokes ls (aliased to eza) with --tree to output a tree-like display of all files and directories recursively from the current folder. This output is extensive by default. Inputs are the present working directory and its filesystem tree; outputs are a structured, indented visual hierarchy. Eza must be installed, and the ls alias must be configured for expected formatting.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nls --tree\n```\n\n----------------------------------------\n\nTITLE: Listing Available GPU Accelerator Types in Google Cloud\nDESCRIPTION: Command to list all available GPU accelerator types in Google Cloud for a specific project, which helps in selecting the appropriate GPU for AI workloads.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngcloud compute accelerator-types list --project $PROJECT_ID\n```\n\n----------------------------------------\n\nTITLE: Example Snippet from Network Traffic Log (JSON)\nDESCRIPTION: Presents a sample JSON object extracted from the `network.log` file generated by the network monitor. It shows detailed information about a single network event, including runtime details (container ID, name, image), Kubernetes context (node, namespace, pod name, labels), timestamp, event type, network namespace IDs, process info (PID, command), packet type, protocol, port, and source/destination details.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n...\n{\n  \"runtime\": {\n    \"runtimeName\": \"containerd\",\n    \"containerId\": \"68301787ca470019457615748ed1ddecf8ee9633a760d3d8a8734070724482ed\",\n    \"containerName\": \"pinger\",\n    \"containerImageName\": \"ghcr.io/vfarcic/silly-demo:1.4.120\",\n    \"containerImageDigest\": \"sha256:7c27b05049a7de002e2fe01170b9e8579ddbed6d6cf7a289e48ccb3460eedb21\"\n  },\n  \"k8s\": {\n    \"node\": \"kind-control-plane\",\n    \"namespace\": \"a-team\",\n    \"podName\": \"pinger-7c7ffbf6cf-n8zgh\",\n    \"podLabels\": {\n      \"app.kubernetes.io/name\": \"pinger\",\n      \"pod-template-hash\": \"7c7ffbf6cf\"\n    },\n    \"containerName\": \"pinger\"\n  },\n  \"timestamp\": 1712243244303049411,\n  \"type\": \"normal\",\n  \"mountnsid\": 4026533165,\n  \"netnsid\": 4026533702,\n  \"pid\": 3784,\n  \"tid\": 3784,\n  \"comm\": \"silly-demo\",\n  \"uid\": 0,\n  \"gid\": 0,\n  \"pktType\": \"HOST\",\n  \"proto\": \"TCP\",\n  \"port\": 8080,\n  \"podHostIP\": \"172.18.0.2\",\n  \"podIP\": \"10.244.0.10\",\n  \"podOwner\": \"pinger\",\n  \"podLabels\": {\n    \"app.kubernetes.io/name\": \"pinger\",\n    \"pod-template-hash\": \"7c7ffbf6cf\"\n  },\n  \"dst\": {\n    \"addr\": \"10.244.0.1\",\n    \"version\": 4,\n    \"kind\": \"raw\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Istio VirtualService Configuration for Canary Deployments\nDESCRIPTION: This command displays the content of a VirtualService configuration file that controls traffic routing between stable and canary services. It initially directs 100% of traffic to the stable service and 0% to the canary service.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncat kustomize/overlays/istio/virtualservice-01.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Tables in Neon Database Branch (Shell/psql)\nDESCRIPTION: This command uses the `psql` PostgreSQL client to connect to the Neon database branch whose connection string is stored in the `NEON_CONN_DEV` environment variable. It executes the `\\dt` meta-command to list all tables within the public schema of that database branch, verifying the presence of tables managed by Atlas (`comments`, `videos`) alongside others.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\npsql $NEON_CONN_DEV --command \"\\dt\"\n```\n\n----------------------------------------\n\nTITLE: Viewing AWS Test Definition\nDESCRIPTION: Command to display the AWS-specific test definition file\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncat tests/aws/chainsaw-test.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Database Tables with psql\nDESCRIPTION: Connects to the Neon database using psql and lists all tables in the public schema.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npsql $NEON_CONN --command \"\\dt\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Backstage Infrastructure with Nushell\nDESCRIPTION: Nushell script that prepares prerequisites for Backstage installation including cluster setup, Argo CD deployment, and Crossplane configuration. Creates necessary GitHub repositories and configures Argo CD applications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"main setup backstage\" [] {\n    rm --force .env\n    let hyperscaler = main get hyperscaler\n    let ingress_data = setup common --hyperscaler $hyperscaler\n    let github_data = main get github\n    (\n        main apply argocd \n            --host_name $\"argocd.($ingress_data.host)\"\n            --apply_apps false\n            --ingress_class_name $ingress_data.class\n    )\n    kubectl apply --filename argocd/app.yaml\n    main apply crossplane --db true --app true --github true\n    open crossplane/app.yaml\n        | upsert spec.parameters.image $\"ghcr.io/vfarcic/silly-demo\"\n        | upsert spec.parameters.tag \"1.4.342\"\n        | save crossplane/app.yaml --force\n    (\n        gh repo create $\"($github_data.user)/idp-full-app\"\n            --public --add-readme\n    )\n    gh repo clone $\"($github_data.user)/idp-full-app\"\n    open argocd/app.yaml\n        | upsert spec.source.repoURL $\"https://github.com/($github_data.user)/idp-full-app\"\n        | save argocd/app.yaml --force\n}\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes After CI Run\nDESCRIPTION: Command to pull the latest changes after the CI workflow has updated the repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for `where` Command in Nushell\nDESCRIPTION: Executes the `where --help` command within the Nushell (nu) environment. This command displays detailed help information, including usage, flags, parameters, and examples for Nushell's built-in `where` command, which is used for filtering structured data based on conditions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nwhere --help\n```\n\n----------------------------------------\n\nTITLE: Creating a GitHub Secret in Kubernetes via Shell and YAML\nDESCRIPTION: This snippet combines shell and YAML to create a Kubernetes Secret containing GitHub token and user credentials, both base64-encoded. It uses shell variable substitution to populate the secret data and applies it directly to the 'backstage' namespace via a kubectl pipe. Dependencies include kubectl, access to environment variables $GITHUB_TOKEN and $GITHUB_USER, and base64. Inputs are the GitHub credentials, outputs are an Opaque Secret resource. Limitation: credentials are handled in plaintext and in-process, which is insecure for production.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\necho \"\\napiVersion: v1\\nkind: Secret\\nmetadata:\\n  name: backstage-backstage-demo\\n  namespace: backstage\\ntype: Opaque\\ndata:\\n  GITHUB_TOKEN: $(echo $GITHUB_TOKEN | base64)\\n  GITHUB_USER: $(echo $GITHUB_USER | base64)\\n\" | kubectl --namespace backstage apply --filename -\n```\n\n----------------------------------------\n\nTITLE: Example Zellij Configuration Output (KDL)\nDESCRIPTION: This snippet shows a truncated example of the output generated by `zellij setup --dump-config`. It displays keybindings, loaded plugins (like tab-bar, status-bar), and various settings (like theme, default shell) in KDL format. This configuration can be saved and modified to customize Zellij's behavior.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: kdl\nCODE:\n```\nkeybinds {\n    ...\n    pane {\n        bind \"Ctrl p\" { SwitchToMode \"Normal\"; }\n        bind \"h\" \"Left\" { MoveFocus \"Left\"; }\n        bind \"l\" \"Right\" { MoveFocus \"Right\"; }\n        bind \"j\" \"Down\" { MoveFocus \"Down\"; }\n        bind \"k\" \"Up\" { MoveFocus \"Up\"; }\n        bind \"p\" { SwitchFocus; }\n        bind \"n\" { NewPane; SwitchToMode \"Normal\"; }\n        bind \"d\" { NewPane \"Down\"; SwitchToMode \"Normal\"; }\n        bind \"r\" { NewPane \"Right\"; SwitchToMode \"Normal\"; }\n        bind \"x\" { CloseFocus; SwitchToMode \"Normal\"; }\n        bind \"f\" { ToggleFocusFullscreen; SwitchToMode \"Normal\"; }\n        bind \"z\" { TogglePaneFrames; SwitchToMode \"Normal\"; }\n        bind \"w\" { ToggleFloatingPanes; SwitchToMode \"Normal\"; }\n        bind \"e\" { TogglePaneEmbedOrFloating; SwitchToMode \"Normal\"; }\n        bind \"c\" { SwitchToMode \"RenamePane\"; PaneNameInput 0;}\n    }\n    ...\n}\n\nplugins {\n    tab-bar location=\"zellij:tab-bar\"\n    status-bar location=\"zellij:status-bar\"\n    strider location=\"zellij:strider\"\n    compact-bar location=\"zellij:compact-bar\"\n    session-manager location=\"zellij:session-manager\"\n    welcome-screen location=\"zellij:session-manager\" {\n        welcome_screen true\n    }\n    filepicker location=\"zellij:strider\" {\n        cwd \"/\"\n    }\n}\n\n..\n// on_force_close \"quit\"\n...\n// simplified_ui true\n..\n// default_shell \"fish\"\n...\n// theme \"default\"\n```\n\n----------------------------------------\n\nTITLE: Updating GitOps Configuration in Nushell\nDESCRIPTION: A Nushell function that updates a YAML file with new image parameters for GitOps deployment. Takes tag, registry, and image name as inputs and modifies the specified YAML file's image reference.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"main update gitops\" [\n    tag: string                    # The tag of the image (e.g., 0.0.1)\n    --registry = \"ghcr.io/vfarcic\" # Image registry\n    --image = \"idp-full-demo\"      # Image name\n] {\n\n    open apps/silly-demo.yaml |\n        | upsert spec.parameters.image $\"($registry)/($image):($tag)\"\n        | save apps/silly-demo.yaml --force\n\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching to a Detached Zellij Session in Shell\nDESCRIPTION: This command attaches the terminal to a previously detached Zellij session. If only one session exists, its name is not required. This allows resuming work exactly where it was left off.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nzellij attach\n```\n\n----------------------------------------\n\nTITLE: Exiting Terminal Sessions\nDESCRIPTION: Command to exit all terminal sessions after the infrastructure has been destroyed. This should be executed in all active terminal windows to complete the cleanup process.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Deleting the Application\nDESCRIPTION: Command to delete the application resources from the Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Current KCL Composition (Shell)\nDESCRIPTION: This shell command displays the content of the `kcl/common.k` file. This file represents an updated Crossplane Composition (likely for v2 or later) where Kubernetes resources can be composed directly without the `Object` wrapper, simplifying the definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncat kcl/common.k\n```\n\n----------------------------------------\n\nTITLE: Listing Directory Contents with Enhanced Output\nDESCRIPTION: This command lists the contents of the current directory, demonstrating the enhanced output provided by the eza tool, which is aliased to ls.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Shell Environment\nDESCRIPTION: Command to enter a Devbox shell, which creates an isolated environment with all tools specified in the devbox.json configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Applying Starship 'plain-text-symbols' Preset (Shell)\nDESCRIPTION: Applies the 'plain-text-symbols' preset to Starship by writing its configuration to `~/.config/starship.toml`. This preset uses plain text descriptions instead of symbols for modules.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nstarship preset plain-text-symbols \\\n    --output ~/.config/starship.toml\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Persistent Volumes After Deployment Update\nDESCRIPTION: This command again lists all Persistent Volumes (PVs) in the cluster using kubectl. It's executed after applying the Deployment that uses the PVC to check if the volume has now been provisioned.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Targeting Application Cluster (Shell)\nDESCRIPTION: Sets the `KUBECONFIG` environment variable to point to a specific kubeconfig file (`$PWD/kubeconfig.yaml`). This file is assumed to contain the connection details for the target application cluster (`a-team-cluster`) where the database secret needs to be pulled.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nexport KUBECONFIG=$PWD/kubeconfig.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying the Updated ResourceGroup with Database Environment Variables\nDESCRIPTION: Shell command to display the contents of a Kro ResourceGroup YAML file that includes database environment variable configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\ncat resource-group-db-envs.yaml\n```\n\n----------------------------------------\n\nTITLE: Inspecting Ollama Deployment Configuration for GPU Settings\nDESCRIPTION: Command to extract and display the YAML configuration of the Ollama deployment, focusing on GPU-related settings and specifications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace ollama get deployment ollama \\\n    --output yaml | yq .\n```\n\n----------------------------------------\n\nTITLE: Executing Earthly Command for Image Building and Pushing\nDESCRIPTION: This command demonstrates the capabilities of Earthly by building, pushing, and signing container images, as well as creating and pushing Timoni and Helm packages.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nearthly --push \\\n    --secret cosignpassword=$COSIGN_PASSWORD \\\n    --secret cosignkey=$COSIGN_PRIVATE_KEY \\\n    --secret password=IWillNeverTell \\\n    +all --tag 9.9.9 \\\n    --registry ttl.sh --image $IMAGE\n```\n\n----------------------------------------\n\nTITLE: Navigating to the Application Repository for GitOps in Bash\nDESCRIPTION: Change directory to the idp-full-app repository to prepare for GitOps operations with Argo CD.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ncd idp-full-app\n```\n\n----------------------------------------\n\nTITLE: Deploying a Second Ollama Instance via Helm (sh)\nDESCRIPTION: This command uses Helm to install or upgrade a second Ollama release named 'ollama2' in the 'ollama' namespace. It utilizes the same Helm chart and values file as the first deployment but assigns a different release name. The `--create-namespace` flag ensures the namespace exists.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install ollama2 ollama \\\n    --repo https://otwld.github.io/ollama-helm \\\n    --values ollama-values.yaml \\\n    --namespace ollama --create-namespace\n```\n\n----------------------------------------\n\nTITLE: Testing the Application Through Ingress\nDESCRIPTION: Sending an HTTP request to the application through the created Ingress resource to verify it's working correctly.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.127.0.0.1.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Informative Shell Prompt Example (Text)\nDESCRIPTION: Shows an example of the customized shell prompt after starting Devbox, switching Git branches, and creating a KinD cluster. It displays Kubernetes context (`kind-kind`), current directory (`dotfiles-demo`), Git branch (`something`), and Devbox status (`via ❄️  devbox`), serving as a reminder of active contexts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n☸ kind-kind in dotfiles-demo on  something via ❄️  devbox underwent 15s\n➜ \n```\n\n----------------------------------------\n\nTITLE: Monitoring StatefulSet Creation in Kubernetes\nDESCRIPTION: This shell command uses 'viddy' to continuously watch the tree structure of the StatefulSet as it's being created.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nviddy kubectl tree --namespace a-team statefulset silly-demo\n```\n\n----------------------------------------\n\nTITLE: Adding Provider Dependencies\nDESCRIPTION: Commands to add various cloud provider dependencies using the Upbound CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nup dependency add \\\n    \"xpkg.upbound.io/upboundcare/provider-aws-ec2@>=v1.16.0\"\n\nup dependency add \\\n    \"xpkg.upbound.io/upboundcare/provider-aws-rds@>=v1.16.0\"\n\nup dependency add \\\n    \"xpkg.upbound.io/upbound/provider-azure-dbforpostgresql@>=v1.7.0\"\n\nup dependency add \\\n    \"xpkg.upbound.io/upbound/provider-gcp-sql@>=v0.33.0\"\n\nup dependency add \\\n    \"xpkg.upbound.io/crossplane-contrib/provider-sql@>=v0.9.0\"\n\nup dependency add \\\n    \"xpkg.upbound.io/crossplane-contrib/provider-kubernetes@>=v0.15.0\"\n\nup dependency add \\\n    \"xpkg.upbound.io/crossplane-contrib/function-status-transformer@v0.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Deployment and PVC\nDESCRIPTION: Shell command to apply the YAML configuration for the PersistentVolumeClaim and Deployment to the Kubernetes cluster in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename deployment/volume.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing Backstage Scaffolder GitHub Module using Yarn (sh)\nDESCRIPTION: This command uses Yarn to install the `@backstage/plugin-scaffolder-backend-module-github` plugin into the `packages/backend` directory of a Backstage project. This plugin adds GitHub-related actions to the Backstage Scaffolder, enabling templates to interact with GitHub repositories, such as pushing manifests. Requires Yarn and a Backstage project structure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nyarn --cwd packages/backend add \\\n    @backstage/plugin-scaffolder-backend-module-github\n```\n\n----------------------------------------\n\nTITLE: Applying Starship 'pure-preset' (Shell)\nDESCRIPTION: Applies the 'pure-preset' to Starship by writing its configuration to `~/.config/starship.toml`. This preset aims for a minimalistic prompt appearance.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nstarship preset pure-preset --output ~/.config/starship.toml\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow Using Devbox\nDESCRIPTION: YAML configuration for GitHub Actions that installs Devbox and uses it to run tests and build packages in a CI/CD pipeline without requiring tools to be preinstalled on the runner.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\n...\njobs:\n  build-package:\n    runs-on: ubuntu-latest\n    steps:\n      ...\n      - name: Install Devbox\n        uses: jetpack-io/devbox-install-action@v0.6.0\n      - name: Test\n        run: |\n          devbox run test\n      - name: Build the package\n        run: |\n          export UP_TOKEN=${{ secrets.UP_TOKEN }}\n          export UP_ACCOUNT=${{ secrets.UP_ACCOUNT }}\n          export VERSION=0.8.${{ github.run_number }}\n          devbox run package-publish\n      ...\n```\n\n----------------------------------------\n\nTITLE: Destroying Kubernetes Cluster in Nushell\nDESCRIPTION: This snippet defines a Nushell command to destroy a Kubernetes cluster. It includes provider-specific logic for cleanup and optionally deletes the associated project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"main destroy kubernetes\" [provider: string, name = \"dot\", delete_project = true] {\n\n    if $provider == \"google\" {\n\n        rm --force kubeconfig.yaml\n\n        (\n            gcloud container clusters delete $name\n                --project $env.PROJECT_ID --zone us-east1-b --quiet\n        )\n\n        if $delete_project {\n            gcloud projects delete $env.PROJECT_ID --quiet\n        }\n    \n    ...\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Nushell Command\nDESCRIPTION: This snippet demonstrates how to execute the previously defined 'get-hyperscaler' command in Nushell.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nget-hyperscaler\n```\n\n----------------------------------------\n\nTITLE: Displaying Argo CD URL\nDESCRIPTION: This command echoes the URL for accessing the Argo CD web interface. It uses the $INGRESS_HOST environment variable to construct the URL.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://argocd.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Entering Devbox Shell and Running Setup Script\nDESCRIPTION: This snippet demonstrates how to enter the Devbox shell and run a setup script for the Docker Bake environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nchmod +x dot.nu\n\n./dot.nu setup bake\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Pulling Changes from Remote Repository - Shell\nDESCRIPTION: This shell command pulls new commits and syncs the local git branch with its upstream counterpart. It is used to update local files after remote changes. Prerequisites include a valid git repository and necessary permissions. Input is the current branch; the output is synchronized code.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Building Specific Target with Docker Bake\nDESCRIPTION: Demonstrates how to build only the frontend target using Docker Bake.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexport TAG=v0.0.3\ndocker buildx bake frontend\n```\n\n----------------------------------------\n\nTITLE: Opening and Displaying YAML File in Nushell\nDESCRIPTION: Shows how to open and display contents of a YAML configuration file using the open command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nopen settings.yaml\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Searching Kubernetes Deployments by Name within a Namespace (SQL)\nDESCRIPTION: Queries the `kubernetes_all.kubernetes_deployment` table, extracting the cluster name and selecting deployment `name`, `ready_replicas`, and `replicas`. It filters results using the `WHERE` clause for the 'a-team' namespace and uses the `LIKE` operator with wildcards (`%`) to find deployments whose names contain the substring 'something'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx -> 'connection_name' as cluster, name, ready_replicas, replicas from kubernetes_all.kubernetes_deployment where namespace = 'a-team' and name like '%something%';\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Kind Cluster and Exiting Session - Shell\nDESCRIPTION: This shell snippet deletes a Kubernetes cluster created by 'kind' and exits the current shell session. Prerequisites: kind CLI installed and a running cluster to delete. The main inputs are none; outputs are the removal of the cluster and termination of the shell session. It is intended for cleanup after development or testing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Displaying Prompt with 'pastel-powerline' Preset (Text)\nDESCRIPTION: Shows the example shell prompt after applying the 'pastel-powerline' Starship preset. It features Powerline-style aesthetics with colored segments and special characters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nvfarcic  …/dotfiles-demo   main   ♥ 20:00 \n```\n\n----------------------------------------\n\nTITLE: Viewing the platform setup script\nDESCRIPTION: Command to display the contents of the platform script which contains setup instructions for Backstage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncat platform\n```\n\n----------------------------------------\n\nTITLE: Generated XRD YAML for Crossplane SQL Resource\nDESCRIPTION: This YAML snippet shows the output of the XRD generation command. It defines a Composite Resource Definition for a SQL resource, including its API version, kind, and schema properties.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xsqls.devopstoolkit.live\nspec:\n  claimNames:\n    kind: SQL\n    plural: sqls\n  group: devopstoolkit.live\n  names:\n    categories:\n      - crossplane\n    kind: XSQL\n    plural: xsqls\n  versions:\n    - name: v1alpha1\n      referenceable: true\n      schema:\n        openAPIV3Schema:\n          description: SQL is the Schema for the SQL API.\n          properties:\n            spec:\n              description: SQLSpec defines the desired state of SQL.\n              properties:\n                id:\n                  type: string\n                parameters:\n                  properties:\n                    databases:\n                      items:\n                        type: string\n                      type: array\n    region:\n      type: string\n    size:\n      type: string\n    version:\n      type: string\n  type: object\ntype: object\nstatus:\n  description: SQLStatus defines the observed state of SQL.\n  type: object\nrequired:\n  - spec\ntype: object\nserved: true\n```\n\n----------------------------------------\n\nTITLE: Synchronizing with Upstream Repository\nDESCRIPTION: Command to pull changes from the upstream main branch to keep the forked repository up to date.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Viewing Common Installation Template\nDESCRIPTION: Command to display the common installation template file\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat tests/common/install.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying ClusterClaim Configuration File Content (Shell)\nDESCRIPTION: This command uses `cat` to display the contents of a YAML file specified by the path `cluster/$HYPERSCALER.yaml`. The `$HYPERSCALER` variable likely holds the name of the cloud provider (e.g., 'aws'). The file contains the Crossplane `ClusterClaim` definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat cluster/$HYPERSCALER.yaml\n```\n\n----------------------------------------\n\nTITLE: Output from Multiple Service Requests\nDESCRIPTION: The response output showing 20 identical responses from version 1.4.127 of the application, demonstrating that all traffic is now being routed to the same version after Istio traffic routing has been applied.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: text\nCODE:\n```\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\nThis is a silly demo version 1.4.127\n```\n\n----------------------------------------\n\nTITLE: Defining Default Values and Resource Lists in Pkl\nDESCRIPTION: Example demonstrating how to define default values for resource properties and create lists of resources using the 'new' keyword in Pkl.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: pkl\nCODE:\n```\n...\nspec {\n    ...\n    pipeline {\n        new {\n            ...\n            input {\n                ...\n                resources {\n                    default {\n                        base {\n                            apiVersion = \"ec2.aws.upbound.io/v1beta1\"\n                            spec { forProvider { region = \"us-east-1\" } }\n                        }\n                        patches { new {\n                            type = \"PatchSet\"\n                            patchSetName = \"metadata\"\n                        } }\n                    }\n                    new {\n                        name = \"vpc\"\n                        base {\n                            kind = \"VPC\"\n                            spec { forProvider {\n                                cidrBlock          = \"11.0.0.0/16\"\n                                enableDnsSupport   = true\n                                enableDnsHostnames = true\n                            } }\n                        }\n                    }\n                    ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for kubectl gadget trace Subcommand (Shell)\nDESCRIPTION: Executes the `kubectl gadget trace` command with the `--help` flag to list the specific tracing gadgets available under the `trace` subcommand. This helps understand the different types of system events that can be traced.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget trace --help\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox Shell Environment\nDESCRIPTION: Command to launch a Devbox shell environment, which provides a consistent development environment with all required tools for the kro demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Checking Pods and PersistentVolumes in Kubernetes\nDESCRIPTION: This shell command retrieves information about Pods and PersistentVolumes in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods,persistentvolumes\n```\n\n----------------------------------------\n\nTITLE: Example Application Custom Resource for kro - YAML\nDESCRIPTION: Defines an Application custom resource in the YAML format as per the schema created by the ResourceGroup. Fields include 'name', 'image', and 'tag', while 'port' is omitted to trigger defaulting logic in the CRD. Consumption requires kro's controller and prior application of the CRD. The output is a new Application instance that will trigger deployment/service generation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kro.run/v1alpha1\\nkind: Application\\nmetadata:\\n  name: silly-demo\\nspec:\\n  name: silly-demo\\n  image: ghcr.io/vfarcic/silly-demo\\n  tag: \\\"1.4.305\\\"\n```\n\n----------------------------------------\n\nTITLE: Initial Setup Commands - Shell Setup\nDESCRIPTION: Commands for setting up the demo environment including cloning repository, initializing devbox shell, and running setup scripts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nrm -rf velero-demo\n\ngh repo fork vfarcic/velero-demo --clone --remote\n\ncd velero-demo\n\ngh repo set-default\n\ndevbox shell\n\nchmod +x setup-cnpg-crossplane.nu\n\n./setup-cnpg-crossplane.nu\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Executing Unit Tests in Nushell\nDESCRIPTION: This snippet defines a Nushell command to execute unit tests. It currently only prints a placeholder message.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: nushell\nCODE:\n```\ndef \"main run unit-tests\" [] {\n\n    print \"Faking execution of unit-tests...\"\n\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Local Kind Kubernetes Cluster (sh)\nDESCRIPTION: This command instructs the `kind` tool to delete the default local Kubernetes cluster it manages. This is a cleanup step after the Kubernetes demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n```\n\n----------------------------------------\n\nTITLE: Displaying Prompt with 'jetpack' Preset (Text)\nDESCRIPTION: Shows the example shell prompt after applying the 'jetpack' Starship preset. This preset might utilize both the left and right sides of the terminal line for displaying information, like time or status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: text\nCODE:\n```\n◉           ▦ dotfiles-demo ◬ main nix ⊛ impure nix-shell-envon ☁️  viktor@farcic.com(us-east1)  20:04\n```\n\n----------------------------------------\n\nTITLE: Defining Namespace-Scoped AWS Managed Resource in KCL\nDESCRIPTION: This KCL code snippet defines an AWS `InternetGateway` resource intended to be managed by Crossplane. The `apiVersion` is set to `ec2.m.aws.upbound.io/v1beta1`. The `.m` subdomain indicates that this is the API for the Namespace-scoped version of the resource, aligning with Crossplane v2's capabilities. The resource configuration includes metadata and spec details like region and VPC association.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: kcl\nCODE:\n```\n...\n    {\n        apiVersion = \"ec2.m.aws.upbound.io/v1beta1\"\n        kind = \"InternetGateway\"\n        metadata = _metadata(\"gateway\")\n        spec.forProvider = {\n            region = _region\n            vpcIdSelector.matchControllerRef = True\n        }\n    },\n...\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branches in Starship\nDESCRIPTION: Switches back to the main branch to demonstrate how Starship hides branch information for main/master branches as configured.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Filtering Kubernetes Deployments by Namespace and Name (SQL)\nDESCRIPTION: Queries the `kubernetes_all.kubernetes_deployment` table across all configured connections. It extracts the cluster name from the `_ctx` column and selects the deployment `name`, `ready_replicas`, and total `replicas`. The `WHERE` clause filters the results to include only deployments in the 'a-team' namespace with the exact name 'silly-demo'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect _ctx -> 'connection_name' as cluster, name, ready_replicas, replicas from kubernetes_all.kubernetes_deployment where namespace = 'a-team' and name = 'silly-demo';\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding a String\nDESCRIPTION: This command demonstrates how to base64 encode a string, which is the format used for values in Kubernetes Secret manifests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\necho 'Hello, DevOps Toolkit!' | base64\n```\n\n----------------------------------------\n\nTITLE: Generating Crossplane Composition Boilerplate using `up` CLI\nDESCRIPTION: This shell command uses the `up composition generate` tool to create a boilerplate Crossplane Composition YAML file. It takes the path to an existing Composite Resource Definition (XRD) (`apis/xsqls/definition.yaml`) as input and specifies the output path for the generated Composition (`xsqls/aws.yaml`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nup composition generate apis/xsqls/definition.yaml \\\n    --path xsqls/aws.yaml\n```\n\n----------------------------------------\n\nTITLE: Echo Ingress URL\nDESCRIPTION: Displays the URL for generating test traffic to the application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://pinger.$INGRESS_HOST.nip.io?url=silly-demo:8080\"\n```\n\n----------------------------------------\n\nTITLE: Deployment YAML Without Environment Variables\nDESCRIPTION: YAML output of the deployment showing that the environment variables were not automatically propagated from the updated ResourceGroup definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  ...\n  name: silly-demo\n  ...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n      - image: ghcr.io/vfarcic/silly-demo:1.4.305\n        ...\n```\n\n----------------------------------------\n\nTITLE: Viewing Available Policy Files\nDESCRIPTION: Shell command to display the contents of the policies.yaml file that contains validation policies for the platform.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ncat ../kubernetes/policies.yaml\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Zsh Syntax Highlighting for Invalid Commands\nDESCRIPTION: This snippet shows the command `eco` being typed in the Zsh shell. It is used to illustrate the `zsh-syntax-highlighting` plugin's feature where non-existent commands are highlighted (typically in red) to immediately indicate a typo or error before execution.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\neco\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Shell\nDESCRIPTION: Command to initialize and enter a Devbox shell environment with project-specific tools\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Applying Updated Kustomize Overlay with kubectl in Shell\nDESCRIPTION: This command reapplies the Kustomize configuration from `kustomize/overlays/simple` to the `a-team` namespace after the image has been updated. This action triggers Argo Rollouts to start the canary deployment process based on the new image version.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --kustomize kustomize/overlays/simple\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing Kubernetes Demo Project - Shell\nDESCRIPTION: This snippet demonstrates the steps to clone the 'kubernetes-demo' repository, navigate into it, update it with the latest changes, and switch to the 'workloads' branch. Prerequisites include Git being installed and network access to GitHub. The primary inputs are Git commands, and the expected output is a local checked-out copy of the necessary demo codebase.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kubernetes-demo\n\ncd kubernetes-demo\n\ngit pull\n\ngit checkout workloads\n```\n\n----------------------------------------\n\nTITLE: Interactive Prompt from up example generate (Text)\nDESCRIPTION: Displays the output prompt from the `up example generate` command's interactive wizard, asking the user whether to create a Composite Resource Claim (XRC) or a Composite Resource (XR).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\nWhat do you want to create? [type to search]: \n> Composite Resource Claim (XRC)\n  Composite Resource (XR)\n```\n\n----------------------------------------\n\nTITLE: Installing Backstage Catalog GitHub Module using Yarn (sh)\nDESCRIPTION: This command uses Yarn to install the `@backstage/plugin-catalog-backend-module-github` plugin into the `packages/backend` directory. This plugin enhances the Backstage Catalog by adding capabilities to display information fetched from GitHub repositories associated with catalog entities. Requires Yarn and a Backstage project structure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nyarn --cwd packages/backend add \\\n    @backstage/plugin-catalog-backend-module-github\n```\n\n----------------------------------------\n\nTITLE: Launching Local Development Server with mirrord and air in Shell\nDESCRIPTION: Executes the current backend application locally with live reload via 'air' under mirrord, using the specified configuration file. This command mirrors incoming traffic from the remote deployment, and auto-reloads/restarts the Go server on changes. Dependencies: mirrord installed and configured, air tool, access to the repo and Go code. Inputs: mirrord config, Go codebase. Output: Local server receives mirrored requests from remote deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nmirrord exec --config-file .mirrord/mirror.json air go run .\n```\n\n----------------------------------------\n\nTITLE: Displaying Backstage Deploy Script Content (Shell)\nDESCRIPTION: Uses the `cat` command to display the contents of the `scripts/backstage.nu` file, revealing the Nushell script used for deploying the Backstage application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncat scripts/backstage.nu\n```\n\n----------------------------------------\n\nTITLE: Pod Specification Output Snippet - Kubernetes YAML\nDESCRIPTION: Truncated example of the YAML output of a Pod generated by the ReplicaSet. Used for inspection to check image version, container spec, etc. Demonstrates how actual Pod spec matches or differs from the template. No direct dependencies; output is usually obtained via kubectl/yq.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n...\n  - apiVersion: v1\n    kind: Pod\n    ...\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.115\n          ...\n```\n\n----------------------------------------\n\nTITLE: Updating the Application Image for a New Release\nDESCRIPTION: Commands to update the image tag in the Kustomize configuration to trigger a new release. Changes the image from version 1.4.126 to 1.4.127.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ncd kustomize/overlays/istio\n\nkustomize edit set image \\\n    ghcr.io/vfarcic/silly-demo=ghcr.io/vfarcic/silly-demo:1.4.127\n\ncd ../../../\n```\n\n----------------------------------------\n\nTITLE: Watching Pods Created by CronJob\nDESCRIPTION: Command to continuously watch the pods in the a-team namespace, demonstrating how the CronJob creates a new pod each minute.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_60\n\nLANGUAGE: sh\nCODE:\n```\nviddy kubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Applying KEDA Configuration\nDESCRIPTION: Command to apply the updated KEDA configuration to the cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename scale/keda-2.yaml\n```\n\n----------------------------------------\n\nTITLE: Promoting the Canary Deployment to the Next Step\nDESCRIPTION: Command to manually promote the canary deployment to the next step in the Rollout progression, which will increase the traffic weight to the canary version according to the defined steps.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nkubectl argo rollouts --namespace a-team promote silly-demo\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repository in Browser using GitHub CLI\nDESCRIPTION: Shows how to use the GitHub CLI to open the current repository in a web browser. This is used to view GitHub Actions workflow runs.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view --web\n```\n\n----------------------------------------\n\nTITLE: Generated Composite Resource Definition (XRD) (YAML)\nDESCRIPTION: Presents the complete YAML structure of the `CompositeResourceDefinition` generated by the `up xrd generate` command based on the example claim. It defines the schema (`openAPIV3Schema`) for the new custom resource, including the properties derived from the example's `spec` (`id`, `parameters` with `region`, `size`, `version`). This XRD establishes the API for the `SQL` kind within the `devopstoolkit.live` group.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apiextensions.crossplane.io/v1\nkind: CompositeResourceDefinition\nmetadata:\n  name: xsqls.devopstoolkit.live\nspec:\n  claimNames:\n    kind: SQL\n    plural: sqls\n  group: devopstoolkit.live\n  names:\n    categories:\n    - crossplane\n    kind: XSQL\n    plural: xsqls\n  versions:\n  - name: v1alpha1\n    referenceable: true\n    schema:\n      openAPIV3Schema:\n        description: SQL is the Schema for the SQL API.\n        properties:\n          spec:\n            description: SQLSpec defines the desired state of SQL.\n            properties:\n              id:\n                type: string\n              parameters:\n                properties:\n                  region:\n                    type: string\n                  size:\n                    type: string\n                  version:\n                    type: string\n                type: object\n            type: object\n          status:\n            description: SQLStatus defines the observed state of SQL.\n            type: object\n        required:\n        - spec\n        type: object\n    served: true\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from Restored Application\nDESCRIPTION: Displays the JSON array returned by the restored application's `/videos` endpoint after querying it with `curl`. The presence of the video entries confirms that the data from the persistent volume snapshot was successfully restored along with the Kubernetes resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"1\",\n    \"title\": \"Video1\"\n  },\n  {\n    \"id\": \"2\",\n    \"title\": \"Video2\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Infrastructure Destroy Script with Nushell\nDESCRIPTION: Makes the destroy.nu script executable and then runs it to tear down infrastructure resources. This is typically done after stopping any running processes in other terminal sessions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.nu\n\n./destroy.nu\n```\n\n----------------------------------------\n\nTITLE: Viewing Devbox Environment Configuration (Sh)\nDESCRIPTION: Displays the contents of the Devbox project JSON configuration file using a shell command. This command requires the `cat` utility and a properly initialized Devbox project. It outputs the entire devbox.json file, which typically contains environment configuration settings such as shell hooks and dependencies. Input: devbox.json file must exist. Output: Contents of devbox.json printed to stdout.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncat devbox.json\n```\n\n----------------------------------------\n\nTITLE: Applying Starship 'bracketed-segments' Preset (Shell)\nDESCRIPTION: Applies the 'bracketed-segments' preset to Starship by writing its configuration to the `~/.config/starship.toml` file. This preset styles prompt segments enclosed in brackets.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nstarship preset bracketed-segments \\\n    --output ~/.config/starship.toml\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Uncustomized Prompt (Text)\nDESCRIPTION: Shows an example of a standard, uncustomized zsh prompt on macOS before Starship is initialized. It typically includes username, hostname, and current directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: text\nCODE:\n```\nvfarcic@Viktors-MacBook-Pro-2 dotfiles-demo %\n```\n\n----------------------------------------\n\nTITLE: Listing GitHub Pull Requests\nDESCRIPTION: Shell command to list pull requests in the GitHub repository using the GitHub CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ngh pr list\n```\n\n----------------------------------------\n\nTITLE: Running Backstage in Development Mode using Yarn (sh)\nDESCRIPTION: This command uses Yarn to start the Backstage application in development mode from the project root. This is typically used after installing plugins or making configuration changes to test the application locally and see the effects of the newly added plugins. It runs the development server, often with hot-reloading enabled.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Handling Interactive Shells and Session Cleanup (sh)\nDESCRIPTION: This command exits an interactive shell session started earlier, such as exiting from a 'nats-box' container shell. This ensures proper cleanup of open sessions in the Kubernetes pod. There are no arguments or outputs except for terminating the shell. Useful as part of scripting or automation to ensure shell sessions are appropriately closed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Checking Kargo Project Status in Kubernetes\nDESCRIPTION: This command retrieves the status of Kargo projects in the Kubernetes cluster. It shows the readiness and initialization status of the project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get projects\n```\n\n----------------------------------------\n\nTITLE: Querying by Resource Name - Karpor Dashboard - SQL\nDESCRIPTION: This SQL query snippet finds all Kubernetes resources across all clusters and namespaces where the resource name is exactly 'silly-demo', when entered into the Karpor dashboard's search field. No additional dependencies are needed aside from access to the Karpor dashboard. The key parameter is 'name', and the result is a multi-cluster, multi-kind list matching the specified name; non-exact matches (e.g., suffixed names) will not be returned.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nwhere name = 'silly-demo'\n```\n\n----------------------------------------\n\nTITLE: Setting Cloud Provider Environment Variable - Shell Script\nDESCRIPTION: This single-line shell snippet sets the environment variable 'HYPERSCALER' to specify the target cloud provider (either 'aws' or 'google') for the demo setup. The snippet must be executed before further environment provisioning steps, as it is referenced by downstream scripts and Nix configuration. The user is required to replace '[...]' with a supported provider value, and the snippet has no output.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport HYPERSCALER=[...]\n```\n\n----------------------------------------\n\nTITLE: Viewing Generated Composition File using `code`\nDESCRIPTION: This shell command uses the `code` utility (likely the VS Code command-line interface) to open and display the contents of the generated Crossplane Composition YAML file located at `apis/xsqls/aws.yaml`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncode apis/xsqls/aws.yaml\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Code from Repository - git pull - Shell\nDESCRIPTION: Synchronizes the local git working tree with the remote repository using git pull. No external dependencies beyond git required. Used here to ensure the latest manifests created by workflow automation are available locally for inspection.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Exiting Devbox Shell\nDESCRIPTION: Command to exit the Devbox shell environment\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Launching Development Shell with Devbox - Shell\nDESCRIPTION: Launches a Devbox-managed shell environment, which provides consistent tool dependencies as defined in 'devbox.json'. Requires Devbox to be installed on the local system. This command ensures the correct development environment, but may be skipped by manually installing tools.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Listing All Namespaces in a Kubernetes Cluster\nDESCRIPTION: This shell command executes 'kubectl get namespaces' to list all Kubernetes Namespaces. It helps verify if resource application resulted in Namespace creation. The only dependency is a functional kubectl context.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kargo Promotions in Kubernetes Namespace\nDESCRIPTION: This command lists all promotions in the 'silly-demo' namespace. It shows the details of automatic and manual promotions across different stages.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace silly-demo get promotions\n```\n\n----------------------------------------\n\nTITLE: Displaying Backstage Template Content using Shell\nDESCRIPTION: This shell command uses `cat` to output the contents of the `manifest.yaml` file located within the `backstage/backstage-templates` directory. This file serves as a Backstage/Roadie template for generating Kubernetes manifests based on user input.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat backstage/backstage-templates/manifest.yaml\n```\n\n----------------------------------------\n\nTITLE: Destroying mirrord Platform Resources\nDESCRIPTION: Commands to destroy mirrord resources in the platform and exit. Requires the PROVIDER environment variable to be set.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nplatform destroy mirrord $PROVIDER\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Extending Pkl Templates with Amendment\nDESCRIPTION: Example of extending a Pkl template using 'amends' keyword, showing how to reuse and modify existing templates by providing specific values for template variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: pkl\nCODE:\n```\namends \"goTemplate.pkl\"\n\nstep = \"dapr-components\"\ntemplateVar = \"\"\"\n    {{ if and .observed.composite.resource.spec.parameters.secrets.daprComponents .observed.composite.resource.spec.parameters.secrets.pullToCluster }}\n    {{ range .observed.composite.resource.spec.parameters.databases }}\n    ---\n    apiVersion: kubernetes.crossplane.io/v1alpha2\n    kind: Object\n    metadata:\n      name: {{ $.observed.composite.resource.spec.id }}-dapr-component-{{ . }}\n      annotations:\n        gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-dapr-component-{{ . }}\n    spec:\n      providerConfigRef:\n        name: {{ $.observed.composite.resource.spec.parameters.secrets.pullToCluster }}\n      forProvider:\n        manifest:\n          apiVersion: dapr.io/v1alpha1\n          kind: Component\n          metadata:\n            name: {{ $.observed.composite.resource.spec.id }}-{{ . }}\n            namespace: {{ $.observed.composite.resource.spec.parameters.secrets.pullToClusterNamespace }}\n          spec:\n            type: state.postgresql\n            version: v1\n            metadata:\n              - name: connectionString\n                secretKeyRef:\n                  name: {{ $.observed.composite.resource.spec.id }}\n                  key: conn-{{ . }}\n    {{ end }}\n    {{ end }}\n    \"\"\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Secrets\nDESCRIPTION: This command retrieves the list of Secrets in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get secrets\n```\n\n----------------------------------------\n\nTITLE: Defining Backstage Catalog Configuration\nDESCRIPTION: Basic catalog definition for Backstage that specifies component metadata, annotations for GitHub and Kubernetes integration, and component specifications.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: backstage.io/v1alpha1\nkind: Component\nmetadata:\n  name: dot-github-devopsparadox\n  description: Silly description of dot-github\n  annotations:\n    github.com/project-slug: devopsparadox/crossplane-gh\n    backstage.io/kubernetes-id: dot\n    backstage.io/kubernetes-namespace: git-repos\n    backstage.io/kubernetes-label-selector: app.kubernetes.io/name=dot-github\nspec:\n  type: infra\n  lifecycle: production\n  owner: devopsparadox/crossplane-gh\n  system: DevOpsCatalog\n```\n\n----------------------------------------\n\nTITLE: Listing KubeVela Component Definitions\nDESCRIPTION: Command to list all component definitions available in the vela-system namespace, which shows both pre-defined components and custom ones like app-backend.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace vela-system get componentdefinitions\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Closing Pull Requests\nDESCRIPTION: Workflow that automatically deletes a Neon database branch when a pull request is closed. Uses the neondatabase/delete-branch-action to remove the branch associated with the PR number.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: yaml\nCODE:\n```\nname: pr-close\nrun-name: pr-close\non:\n  pull_request:\n    types:\n      - closed\njobs:\n  pro-close:\n    runs-on: ubuntu-latest\n    env:\n      FORCE_COLOR: 1\n    steps:\n      - id: delete-neon-branch\n        uses: neondatabase/delete-branch-action@v3\n        continue-on-error: true\n        with:\n          project_id: super-darkness-76149530\n          branch: silly-demo/${{ github.event.number }}\n          api_key: ${{ secrets.NEON_API_KEY }}\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Actions CI Workflow Definition - Shell\nDESCRIPTION: This snippet outputs the content of the GitHub Actions workflow YAML file located in '.github/workflows/ci.yaml'. The command relies on the presence of an appropriate YAML workflow file and will print its contents to the terminal. It assists with reviewing the workflow but makes no changes. Prerequisite: a valid UNIX-like shell and the specified file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ncat .github/workflows/ci.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Manifest Files - ls - Shell\nDESCRIPTION: Lists the files in the 'apps' directory, showing currently deployed manifest files. Uses the -1 flag for single-column output. Assumes the directory contains YAML manifests managed by the automation workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nls -1 apps/\n```\n\n----------------------------------------\n\nTITLE: ResourceGroup Definition with CNPG PostgreSQL Integration\nDESCRIPTION: YAML definition of a ResourceGroup that includes a CNPG Cluster resource with conditional inclusion based on the db.enabled flag. This defines a PostgreSQL cluster with minimal configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_44\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kro.run/v1alpha1\nkind: ResourceGroup\nmetadata:\n  name: application\nspec:\n  ...\n  resources:\n    ...\n    - id: postgresql\n      includeWhen:\n        - ${schema.spec.db.enabled}\n      template:\n        apiVersion: postgresql.cnpg.io/v1\n        kind: Cluster\n        metadata:\n          labels:\n            app.kubernetes.io/name: ${schema.spec.name}\n          name: ${schema.spec.name}\n        spec:\n          instances: 1\n          storage:\n            size: 1Gi\n```\n\n----------------------------------------\n\nTITLE: Destroying KubeVela Resources and Cleaning Up Environment (Shell)\nDESCRIPTION: This snippet contains shell commands to delete KubeVela applications and clean up the environment. It uses the 'vela' CLI to remove applications and a custom script to destroy resources in a hyperscaler.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nvela delete silly-demo-db --yes --wait --env prod\n\nvela delete silly-demo --yes --wait\n\n./dot.nu destroy $HYPERSCALER\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Examining Devbox JSON Configuration\nDESCRIPTION: JSON configuration that defines Devbox shell settings and scripts. The scripts section maps script names to commands that can be executed with 'devbox run'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"shell\": {\n    ...\n    \"scripts\": {\n      \"cluster-create\":  [\"task cluster-create\"],\n      \"cluster-destroy\": [\"task cluster-destroy\"],\n      \"package-publish\": [\"task package-publish\"],\n      \"test\":            [\"task test\"],\n      \"test-watch\":      [\"task test-watch\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Installation Script\nDESCRIPTION: This snippet demonstrates executing the installation script, which is assumed to install various tools and set up the environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n./install.sh\n```\n\n----------------------------------------\n\nTITLE: Updating Application Image using Kustomize Edit in Shell\nDESCRIPTION: This sequence of shell commands navigates into the Kustomize overlay directory and uses `kustomize edit set image` to update the image tag for the `silly-demo` application to `1.4.127`. This change prepares for triggering a new canary rollout.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncd kustomize/overlays/simple\n\nkustomize edit set image \\\n    ghcr.io/vfarcic/silly-demo=ghcr.io/vfarcic/silly-demo:1.4.127\n\ncd ../../../\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Nushell Environment and Resources in Shell\nDESCRIPTION: Commands to delete a Nushell session in Zellij, remove a Kind Kubernetes cluster, exit the shell, and reset the Git repository to the main branch. These commands are meant to be executed after working with Nushell to properly clean up resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nzellij delete-session nushell\n\nkind delete cluster\n\nexit\n\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Viewing an Example kro Application Custom Resource - Shell\nDESCRIPTION: Displays the contents of the 'silly-demo.yaml' file, which defines an Application custom resource conforming to the generated schema from the earlier ResourceGroup. Used to review or verify resource details before applying. Prerequisite is the presence of the file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncat silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Forcefully Removing the Nginx Docker Container\nDESCRIPTION: This command forcefully removes the Docker container named `nginx`. It is part of the 'Destroy' or cleanup section, intended to remove resources created during the demonstration of Zsh plugins. The `--force` flag ensures removal even if the container is running. Requires Docker.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndocker container rm nginx --force\n```\n\n----------------------------------------\n\nTITLE: Creating an Alias for ls with Enhanced eza Options in Zsh - Shell Script\nDESCRIPTION: Appends an alias definition to ~/.zshrc to replace all usages of the ls command with eza plus default options (--long, --all, --no-permissions, --no-filesize, --no-user, --no-time, --git). Immediately sources the updated zshrc to apply the change. Requires eza and the zsh shell. Key parameters include the alias string and the target rc file. Once in place, ls yields the enhanced colored eza output by default.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\necho \"alias ls='eza --long --all --no-permissions --no-filesize \\\n    --no-user --no-time --git'\" | tee -a ~/.zshrc\n\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Enumerating Video Records from Backend Using HTTP GET and jq\nDESCRIPTION: Fetches the list of video records from the local backend and pipes the JSON response to jq for pretty-printing. Demonstrates both functional backend retrieval and environmental parity with remote DB. Dependencies: curl, jq installed; local server running. Inputs: None. Output: Pretty-printed JSON array of videos.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"localhost:8080/videos\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Hugo Shortcode for YouTube Embed\nDESCRIPTION: A Hugo shortcode to embed a YouTube video in the blog post.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/top-10-devops-tools-you-must-use-in-2025/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{< youtube 4N_MWAQEzWg >}}\n```\n\n----------------------------------------\n\nTITLE: Querying Kubescape Node-Agent Logs with grep and jq Filtering in Shell\nDESCRIPTION: This snippet retrieves logs from all node-agent pods in the 'kubescape' namespace, filters for lines containing 'silly-demo', and pipes them to jq for pretty-printing JSON entries. It assumes kubectl, jq, and grep are available, and the node-agent pods are labeled according to the Kubescape Helm deployment. Inputs are namespace and selector; outputs are prettified JSON log lines for the targeted application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace kubescape logs \\\n    --selector app.kubernetes.io/name=node-agent \\\n    | grep silly-demo | jq .\n```\n\n----------------------------------------\n\nTITLE: Deploying Inspektor Gadget using kubectl (Shell)\nDESCRIPTION: Deploys the Inspektor Gadget components (Namespace, ServiceAccount, RBAC, DaemonSet, CRD) into the Kubernetes cluster using the `kubectl gadget` plugin. This command automates the setup required to run Inspektor Gadget.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget deploy\n```\n\n----------------------------------------\n\nTITLE: Exiting Shell Session (Sh)\nDESCRIPTION: Terminates the current shell session with the `exit` command. This is a built-in shell command; no dependencies needed. Input: None. Output: Ends the shell or command processing session. It is commonly used after completing a development session or demo.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Applying Persistent Volume Claim Manifest using kubectl\nDESCRIPTION: This command uses kubectl to apply the Persistent Volume Claim definition from the specified YAML file to the 'a-team' namespace in the Kubernetes cluster. This action initiates the request for persistent storage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename volume/persistent-volume-claim.yaml\n```\n\n----------------------------------------\n\nTITLE: Verifying Tool Installation\nDESCRIPTION: Commands to verify the installation and location of the timoni tool within the Devbox environment\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ntimoni --version\n\nwhich timoni\n```\n\n----------------------------------------\n\nTITLE: Executing the Neon Setup Script\nDESCRIPTION: Makes the Nushell setup script executable, runs it to configure the Neon environment, and sources the environment variables created during setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x dot.nu\n\n./dot.nu setup\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Inserting Records into Application via HTTP POST - Shell Script\nDESCRIPTION: Makes HTTP POST requests using curl to insert specific video records ('id' and 'title') into the deployed application. The payload is passed as query parameters in the request URL. Requires curl and an up-and-running application backend that listens on the defined host and endpoint. Data sent is visible in server-side logs or database depending on implementation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST \\\n    \"http://vfarcic.silly-demo.$INGRESS_HOST/video?id=z7Nfl-u-hLI&title=Neon\"\n\ncurl -XPOST \\\n    \"http://vfarcic.silly-demo.$INGRESS_HOST/video?id=WAm3ypS0_wg&title=IDP%20History\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Docker Bake Configuration\nDESCRIPTION: Prints the Docker Bake configuration in JSON format for inspection.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndocker buildx bake --print | jq .\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment with Devbox\nDESCRIPTION: These commands set up the development environment using Devbox, execute a setup script, and source environment variables. It assumes the user has Devbox installed or provides an alternative for manual tool installation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nchmod +x setup.sh\n\n./setup.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Checking Pod Resource Usage with kubectl top (sh)\nDESCRIPTION: Displays the current CPU and memory consumption for all pods running within the 'a-team' namespace using the `kubectl top pods` command. This provides real-time resource usage metrics, contrasting with VPA which provides recommendations based on historical usage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team top pods\n```\n\n----------------------------------------\n\nTITLE: Triggering Demo Application via HTTP with curl in Shell\nDESCRIPTION: This shell snippet sends a GET request to the demo application's ingress endpoint using curl to verify that the application is running and reachable through the designated hostname. It assumes that the $INGRESS_HOST environment variable is already set. The only required dependency is curl. The main input is the application's fully qualified domain name; output is the HTTP response from the demo app.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.$INGRESS_HOST.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Deleting the Application to Update with New ResourceGroup Definition\nDESCRIPTION: Kubernetes command to delete the existing Application resource so it can be recreated with the updated ResourceGroup template.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --filename silly-demo-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Browsing Codebase Files Remotely Using GitHub CLI (sh)\nDESCRIPTION: This snippet uses the GitHub CLI to browse the 'nats.go' file in the 'vfarcic/silly-demo' repository at the 'nats' branch. It is a support command to conveniently access the Go code responsible for NATS integrations. Requires the GitHub CLI ('gh') installed and authenticated. Command opens the code in the browser, does not process any input/output within the shell.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngh browse --repo vfarcic/silly-demo --branch nats nats.go\n```\n\n----------------------------------------\n\nTITLE: Executing Destroy Script for DevOpsToolkit Live Project\nDESCRIPTION: A shell script that makes the destroy.nu file executable and runs it, followed by exiting the current shell session.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.nu\n\n./destroy.nu\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Setting up GitHub Repository Fork\nDESCRIPTION: Commands for forking a Backstage demo repository, cloning it locally, and configuring the default repository settings using GitHub CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngh repo fork vfarcic/backstage-demo --clone --remote\n\ncd backstage-demo\n\ngh repo set-default\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Backstage Helm Release - Shell\nDESCRIPTION: This command deletes the Backstage Helm release from the 'backstage' namespace, cleaning up all resources created by the chart. It is necessary before packaging or redeploying the chart. Dependencies: Helm CLI, permission to delete in the target namespace. No output unless the release is present.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nhelm --namespace backstage uninstall backstage\n```\n\n----------------------------------------\n\nTITLE: Configuring Hyperscaler and Running Setup Script\nDESCRIPTION: Commands to set the hyperscaler environment variable, make the setup script executable, run it, and source the environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport HYPERSCALER=[...]\n\nchmod +x setup.sh\n\n./setup.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Changes from Upstream Repository\nDESCRIPTION: Command to pull the latest changes from the upstream main branch of the Backstage demo repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit pull upstream main\n```\n\n----------------------------------------\n\nTITLE: Describing a VerticalPodAutoscaler Resource in Kubernetes\nDESCRIPTION: This shell command provides detailed information about a specific VerticalPodAutoscaler named 'silly-demo' in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team \\\n    describe verticalpodautoscaler silly-demo\n```\n\n----------------------------------------\n\nTITLE: AWS-Specific Assert Installation\nDESCRIPTION: YAML configuration defining AWS-specific resource assertions\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQL\nmetadata:\n  labels:\n    crossplane.io/claim-name: my-db\nspec:\n  claimRef:\n    apiVersion: devopstoolkitseries.com/v1alpha1\n    kind: SQLClaim\n    name: my-db\n  compositionRef:\n    name: aws-postgresql\n  compositionSelector:\n    matchLabels:\n      db: postgresql\n      provider: aws\n  compositionUpdatePolicy: Automatic\n  id: my-db-aws\n  parameters:\n    size: medium\n    version: \"13.4\"\n  resourceRefs:\n  - apiVersion: ec2.aws.upbound.io/v1beta1\n    kind: InternetGateway\n    name: my-db-aws\n```\n\n----------------------------------------\n\nTITLE: Examining KRO Controller Logs\nDESCRIPTION: Checking the logs of the KRO controller, which reveal the underlying issue - it's failing to evaluate 'schema.spec.ingress.host' because the 'ingress' field wasn't specified in the Application resource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace kro logs \\\n    --selector app.kubernetes.io/name=kro --tail 50\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n...\n2024-11-19T00:07:00.790Z        DEBUG   dynamic-controller      Syncing resourcegroup instance request  {\"gvr\": \"kro.run/v1alpha1/applications\", \"namespacedKey\": \"a-team/silly-demo\"}\n2024-11-19T00:07:00.795Z        DEBUG   dynamic-controller      Finished syncing resourcegroup instance request {\"gvr\": \"kro.run/v1alpha1/applications\", \"namespacedKey\": \"a-team/silly-demo\", \"duration\": \"4.661042ms\"}\n2024-11-19T00:07:00.795Z        ERROR   dynamic-controller      Error syncing item, requeuing with rate limit   {\"item\": {\"NamespacedKey\":\"a-team/silly-demo\",\"GVR\":{\"Group\":\"kro.run\",\"Version\":\"v1alpha1\",\"Resource\":\"applications\"}}, \"error\": \"failed to create runtime resource group: failed to evaluate static variables: failed evaluating expression schema.spec.ingress.host: no such key: ingress\"}\ngithub.com/awslabs/kro/internal/dynamiccontroller.(*DynamicController).processNextWorkItem\n        github.com/awslabs/kro/internal/dynamiccontroller/dynamic_controller.go:277\ngithub.com/awslabs/kro/internal/dynamiccontroller.(*DynamicController).worker\n        github.com/awslabs/kro/internal/dynamiccontroller/dynamic_controller.go:229\nk8s.io/apimachinery/pkg/util/wait.JitterUntilWithContext.func1\n        k8s.io/apimachinery@v0.31.0/pkg/util/wait/backoff.go:259\nk8s.io/apimachinery/pkg/util/wait.BackoffUntil.func1\n        k8s.io/apimachinery@v0.31.0/pkg/util/wait/backoff.go:226\nk8s.io/apimachinery/pkg/util/wait.BackoffUntil\n        k8s.io/apimachinery@v0.31.0/pkg/util/wait/backoff.go:227\nk8s.io/apimachinery/pkg/util/wait.JitterUntil\n        k8s.io/apimachinery@v0.31.0/pkg/util/wait/backoff.go:204\nk8s.io/apimachinery/pkg/util/wait.JitterUntilWithContext\n        k8s.io/apimachinery@v0.31.0/pkg/util/wait/backoff.go:259\nk8s.io/apimachinery/pkg/util/wait.UntilWithContext\n        k8s.io/apimachinery@v0.31.0/pkg/util/wait/backoff.go:170\n```\n\n----------------------------------------\n\nTITLE: Applying Updated Application Manifest\nDESCRIPTION: Command to apply the updated application manifest with the new image tag to the Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing the Chart Values File - Shell\nDESCRIPTION: This shell command displays the contents of the chart's values.yaml file, which stores configurable parameters for the Helm chart such as image repository, database instance count, ingress host/class, and the application mode. No dependencies beyond standard shell and filesystem required. Output is the raw YAML contents of the values.yaml file, typically referenced by Helm templates.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncat chart/values.yaml\n```\n\n----------------------------------------\n\nTITLE: Confirmation Output from up example generate (Text)\nDESCRIPTION: Shows the success message output by the `up example generate` command, indicating that the resource definition was created and saved to the specified file path (`examples/sql/my-db.yaml`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nSuccessfully created resource and saved to examples/sql/my-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox Shell Environment\nDESCRIPTION: Command to initialize a Devbox shell environment, which provides the necessary development tools as specified in the devbox.json file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Okteto Development Environment\nDESCRIPTION: Shell commands for destroying the Okteto platform deployment and resetting git state. Includes platform destruction, stashing changes, and switching back to main branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nplatform destroy okteto --provider $PROVIDER\n\ngit stash\n\ngit switch main\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Pulling Latest Git Changes\nDESCRIPTION: Shell command to pull the latest changes from the Git repository after the pull request is merged.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Listing Available Commands in Nushell\nDESCRIPTION: This Nushell command uses the `help` command with the `commands` subcommand to display a table listing all available commands within the Nushell environment. The output includes the command name, category, type, usage summary, and other details. No external dependencies are required.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nhelp commands\n```\n\n----------------------------------------\n\nTITLE: Retrieving Neon Connection String\nDESCRIPTION: Exports the Neon connection string for the main branch to an environment variable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport NEON_CONN=$(neonctl connection-string main)\n```\n\n----------------------------------------\n\nTITLE: Comparing Argo Events EventSource Definitions using Diff (sh)\nDESCRIPTION: Uses the `diff` command to show the differences between two Argo Events EventSource configuration files: `event-source-deployment.yaml` (original) and `event-source-replicaset.yaml` (modified). This highlights the change from watching Deployment updates to watching ReplicaSet creations to avoid multiple workflow triggers.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ndiff event-source-deployment.yaml event-source-replicaset.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving ResourceGroups with Extended Output - Shell\nDESCRIPTION: Uses 'kubectl get' to list ResourceGroups within the 'a-team' namespace, displaying additional columns in wide format. Requires the kro CRDs to be installed. Inputs are just the resource type and namespace; outputs are a summary table showing objects, their state, and topological order.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team get resourcegroups --output wide\n```\n\n----------------------------------------\n\nTITLE: Using Variable with kubectl describe Command\nDESCRIPTION: Shows how to use a previously stored variable with the kubectl describe command to get detailed information about a specific Pod.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nkubectl describe pod $pod_name\n```\n\n----------------------------------------\n\nTITLE: Example Output of Kubernetes Resource Status\nDESCRIPTION: This is sample output from the `kubectl get all,ingresses` command, showing that the Pods, Service, Deployment, ReplicaSet, HorizontalPodAutoscaler, and Ingress for the `silly-demo` application have been successfully created and are in a running or available state within the Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                            READY STATUS  RESTARTS AGE\npod/silly-demo-564cc7645c-mqn4w 1/1   Running 0        9s\npod/silly-demo-564cc7645c-mz4lr 1/1   Running 0        24s\n\nNAME               TYPE      CLUSTER-IP   EXTERNAL-IP PORT(S) AGE\nservice/silly-demo ClusterIP 10.96.94.173 <none>      80/TCP  24s\n\nNAME                       READY UP-TO-DATE AVAILABLE AGE\ndeployment.apps/silly-demo 2/2   2          2         24s\n\nNAME                                  DESIRED CURRENT READY AGE\nreplicaset.apps/silly-demo-564cc7645c 2       2       2     24s\n\nNAME                                           REFERENCE             TARGETS                      MINPODS MAXPODS REPLICAS AGE\nhorizontalpodautoscaler.autoscaling/silly-demo Deployment/silly-demo <unknown>/80%, <unknown>/80% 2       10      1        24s\n\nNAME                                 CLASS HOSTS                       ADDRESS PORTS AGE\ningress.networking.k8s.io/silly-demo nginx silly-demo.127.0.0.1.nip.io         80    24s\n```\n\n----------------------------------------\n\nTITLE: Executing Cluster Destruction Script in Shell\nDESCRIPTION: Commands to make a destruction script executable and run it before exiting the shell. This represents the practical implementation of the recommended approach to enforce cluster destruction.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.nu\n\n./destroy.nu\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Listing Files and Directories - Standard Shell (sh, Zsh)\nDESCRIPTION: This group includes invocations of the 'ls' command in a standard shell, optionally with the '-l' flag for detailed output. These examples illustrate basic filesystem enumeration and information retrieval as known in Unix-like shells. The commands depend on any POSIX-compliant shell, and output includes lists of filenames or file attributes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nls\n```\n\nLANGUAGE: sh\nCODE:\n```\nls -l\n```\n\n----------------------------------------\n\nTITLE: Defining a Kubernetes Deployment with Resource Limits/Requests (yaml)\nDESCRIPTION: Provides a snippet of a Kubernetes Deployment definition in YAML format. It configures a container using the 'ghcr.io/vfarcic/silly-demo:1.4.123' image and specifies resource requests (50m CPU, 512Mi memory) and limits (1000m CPU, 2Gi memory). These values are hardcoded and, as noted in the text, might ideally be derived from VPA recommendations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: apps/v1\nkind: Deployment\n...\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n        - image: ghcr.io/vfarcic/silly-demo:1.4.123\n          ...\n          resources:\n            limits:\n              cpu: 1000m\n              memory: 2Gi\n            requests:\n              cpu: 50m\n              memory: 512Mi\n...\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes ConfigMap\nDESCRIPTION: This shell command deletes the previously created ConfigMap and associated resources defined in the 'volume/config-map.yaml' file from the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --filename volume/config-map.yaml\n```\n\n----------------------------------------\n\nTITLE: Defining Kubernetes Resources for Silly Demo Application (YAML)\nDESCRIPTION: This YAML manifest defines multiple Kubernetes resources: a Deployment for the `silly-demo` application container (referencing a `DB_URI` from a secret 'silly-demo'), a Service to expose the Deployment, an Ingress for external access, and an `AtlasSchema` custom resource to manage the database schema using the Atlas operator. The schema definition includes `videos` and `comments` tables and excludes several `lego_*` tables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  ...\n  name: silly-demo\nspec:\n  ...\n  template:\n    ...\n    spec:\n      containers:\n      - env:\n        - name: DB_URI\n          valueFrom:\n            secretKeyRef:\n              key: uri\n              name: silly-demo\n        image: ghcr.io/vfarcic/silly-demo:1.4.366\n        ...\n---\napiVersion: v1\nkind: Service\nmetadata:\n  ...\n  name: silly-demo\n...\n---\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  ...\n  name: silly-demo\n...\n---\napiVersion: db.atlasgo.io/v1alpha1\nkind: AtlasSchema\nmetadata:\n  ...\n  name: silly-demo\nspec:\n  urlFrom:\n    secretKeyRef:\n      name: silly-demo\n      key: uri\n  schema:\n    sql: |\n      create table videos (\n          id varchar(50) not null,\n          title text,\n          primary key (id)\n      );\n      create table comments (\n          id serial,\n          video_id varchar(50) not null,\n          description text not null,\n          primary key (id),\n          CONSTRAINT fk_videos FOREIGN KEY(video_id) REFERENCES videos(id)\n      );\n  exclude:\n  - public.lego_colors\n  - public.lego_inventories\n  - public.lego_inventory_parts\n  - public.lego_inventory_sets\n  - public.lego_part_categories\n  - public.lego_parts\n  - public.lego_sets\n  - public.lego_themes\n```\n\n----------------------------------------\n\nTITLE: Applying VPA Configuration in Off Mode using kubectl (sh)\nDESCRIPTION: Applies a VerticalPodAutoscaler (VPA) configuration defined in the `scale/vpa-off.yaml` file to the 'a-team' namespace using `kubectl`. This specific configuration likely sets the VPA update mode to 'Off', meaning it will only provide recommendations without automatically applying them.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename scale/vpa-off.yaml\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repository in Browser using GitHub CLI (sh)\nDESCRIPTION: Uses the GitHub CLI (`gh`) command to open the current project's GitHub repository page in the default web browser. This is used to visually inspect the repository and the status of GitHub Actions workflows.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view --web\n```\n\n----------------------------------------\n\nTITLE: Starting Backstage Development Server with Yarn (Shell)\nDESCRIPTION: Executes the `yarn dev` command within the Backstage source directory to start the local development server, allowing for testing and development.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode with Just\nDESCRIPTION: This snippet demonstrates how to use 'just' to run tests in watch mode, which re-runs tests when source code changes are detected.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\njust test-watch\n```\n\n----------------------------------------\n\nTITLE: Displaying the Resource Tree for a Specific Application - Shell\nDESCRIPTION: Runs 'kubectl tree' (a kubectl plugin) to attempt visualization of the resource hierarchy for a given Application object ('silly-demo') in the 'a-team' namespace. Useful for introspecting which resources are owned or created by the Application, but currently outputs none as kro does not yet set owner references. Requires installation of the kubectl-tree plugin.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nkubectl tree --namespace a-team application silly-demo\n```\n\n----------------------------------------\n\nTITLE: Variable Declaration with Auto-complete\nDESCRIPTION: Shows variable declaration using let keyword with auto-completion functionality.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nlet hyperscaler = get-hyperscaler\n```\n\n----------------------------------------\n\nTITLE: Viewing Crossplane Application Definition\nDESCRIPTION: Command to display the Crossplane custom resource definition for the backend application in staging environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat crossplane/app-staging-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Checking Out a Specific Git Branch - Shell\nDESCRIPTION: By changing directories into the freshly cloned crossplane-kubernetes repository and checking out the zellij branch, this snippet ensures the working directory matches the state required for the Zellij demo. The branch must exist in the remote repository. Requires an initialized local git repository and the crossplane-kubernetes directory already present. After execution, the local directory will reflect the files as defined in the zellij branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncd crossplane-kubernetes\n\ngit checkout zellij\n```\n\n----------------------------------------\n\nTITLE: Git Operations Commands\nDESCRIPTION: Shell commands for copying repository configuration and pushing changes to Git.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncp examples/repo-$HYPERSCALER.yaml git-repos/crossplane-gh-demo.yaml\n\ngit add .\n\ngit commit -m \"Repo [skip ci]\"\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Output of Failed Cross-Namespace Curl (Text)\nDESCRIPTION: This output shows the error message 'Could not resolve host: silly-demo', confirming that the service name alone is not resolvable from a different namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: text\nCODE:\n```\ncurl: Could not resolve host: silly-demo\n```\n\n----------------------------------------\n\nTITLE: Displaying Devbox Configuration File Contents in Shell\nDESCRIPTION: This shell command uses `cat` to output the content of the `devbox.json` file. This file is central to Devbox, listing all the packages (tools and their specific versions) required for the project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat devbox.json\n```\n\n----------------------------------------\n\nTITLE: Executing Cluster Creation with Just\nDESCRIPTION: This snippet shows how to use the 'just' command to create a cluster using a predefined recipe.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\njust cluster-create\n```\n\n----------------------------------------\n\nTITLE: Backstage Configuration YAML\nDESCRIPTION: This YAML snippet shows the default configuration for a Backstage application, including settings for the app, backend, integrations, and various plugins.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napp:\n  title: Scaffolded Backstage App\n  baseUrl: http://localhost:3000\norganization:\n  name: My Company\nbackend:\n  baseUrl: http://localhost:7007\n  listen:\n    port: 7007\n  csp:\n    connect-src: [\"'self'\", 'http:', 'https:']\n  cors:\n    origin: http://localhost:3000\n    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]\n    credentials: true\n  database:\n    client: better-sqlite3\n    connection: ':memory:'\nintegrations:\n  github:\n    - host: github.com\n      token: ${GITHUB_TOKEN}\nproxy:\ntechdocs:\n  builder: 'local' # Alternatives - 'external'\n  generator:\n    runIn: 'docker' # Alternatives - 'local'\n  publisher:\n    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.\nauth:\n  providers:\n    guest: {}\nscaffolder:\ncatalog:\n  import:\n    entityFilename: catalog-info.yaml\n    pullRequestBranchName: backstage-integration\n  rules:\n    - allow: [Component, System, API, Resource, Location]\n  locations:\n    - type: file\n      target: ../../examples/entities.yaml\n    - type: file\n      target: ../../examples/template/template.yaml\n      rules:\n        - allow: [Template]\n    - type: file\n      target: ../../examples/org.yaml\n      rules:\n        - allow: [User, Group]\nkubernetes:\npermission:\n  enabled: true\n```\n\n----------------------------------------\n\nTITLE: Displaying AWS Chainsaw Test File Content using Shell\nDESCRIPTION: This command uses 'cat' to display the content of the Kyverno Chainsaw test definition file located at 'tests/aws/chainsaw-test.yaml'. This file outlines the steps and configurations for testing AWS-related resources within the project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncat tests/aws/chainsaw-test.yaml\n```\n\n----------------------------------------\n\nTITLE: Comparing ReplicaSet Image Versions - Shell with diff\nDESCRIPTION: Compares two ReplicaSet YAML files to highlight a change in the container image version. Useful for reviewing updates before application. Uses standard tools and requires both input files. The output is the visual difference, often highlighting lines related to the image tag.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ndiff replicaset/replicas.yaml replicaset/image.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Go Application Source Code\nDESCRIPTION: This shell command displays the content of the `main.go` file, which contains the source code for the simple Go application intended to be compiled into WASM.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncat main.go\n```\n\n----------------------------------------\n\nTITLE: Promoting Argo Rollout with kubectl (sh)\nDESCRIPTION: Uses the `kubectl argo rollouts promote` command to advance the `silly-demo` rollout in the `a-team` namespace to the next step in its canary deployment strategy. This command is executed after a pause point to manually approve continuation of the rollout.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nkubectl argo rollouts --namespace a-team promote silly-demo\n```\n\n----------------------------------------\n\nTITLE: Executing Earthly Build Command Output\nDESCRIPTION: The terminal output of an Earthly build process showing initialization, build steps, push summary of container images to registry, and local output summary including artifacts and images.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n Init 🚀\n————————————————————————————————————————————————————————————————————————————————\n\n           buildkitd | Found buildkit daemon as docker container (earthly-buildkitd)\n\n Build 🔧\n————————————————————————————————————————————————————————————————————————————————\n\n              logbus | Setting organization \"\" and project \"\"\n                +all | image=silly-demo-20240526015336 registry=ttl.sh tag=9.9.9\n...\n              output | --> exporting outputs\n\n Push Summary ⏫\n————————————————————————————————————————————————————————————————————————————————\n\nPushed image github.com/vfarcic/silly-demo:earthly+image as ttl.sh/silly-demo-20240526015336:9.9.9\nPushed image github.com/vfarcic/silly-demo:earthly+image as ttl.sh/silly-demo-20240526015336:latest\nPushed image github.com/vfarcic/silly-demo:earthly+image as ttl.sh/silly-demo-20240526015336:9.9.9-alpine\nPushed image github.com/vfarcic/silly-demo:earthly+image as ttl.sh/silly-demo-20240526015336:latest-alpine\n\n Local Output Summary 🎁\n————————————————————————————————————————————————————————————————————————————————\n\nArtifact github.com/vfarcic/silly-demo:earthly+helm/Chart.yaml output as helm/app/Chart.yaml\nArtifact github.com/vfarcic/silly-demo:earthly+helm/values.yaml output as helm/app/values.yaml\nArtifact github.com/vfarcic/silly-demo:earthly+timoni/values.cue.tmp output as timoni/values.cue\nImage +image output as ttl.sh/silly-demo-20240526015336:9.9.9\nImage +image output as ttl.sh/silly-demo-20240526015336:latest\nImage +image output as ttl.sh/silly-demo-20240526015336:9.9.9-alpine\nImage +image output as ttl.sh/silly-demo-20240526015336:latest-alpine\n\n\n========================== 🌍 Earthly Build  ✅ SUCCESS ==========================\n\n🛰️ Reuse cache between CI runs with Earthly Satellites! 2-20X faster than without cache. Generous free tier https://cloud.earthly.dev\n```\n\n----------------------------------------\n\nTITLE: Querying Command Parameters in Nushell\nDESCRIPTION: Demonstrates how to query command parameters using short-hand syntax by wrapping the command in parentheses and accessing the params property.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n(help commands | where name == ls | first).params\n```\n\n----------------------------------------\n\nTITLE: Listing Files And Directories Using Built-In ls - Shell Script\nDESCRIPTION: Runs the standard ls command to list all files and directories in the current working directory. This basic shell command requires no dependencies. Input is the current directory; output is a list of items in that directory. In this context, it demonstrates default listing behavior for comparison before using enhanced tools.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Application Manifests\nDESCRIPTION: This shell command displays the content of the `app.yaml` file, which contains the Kubernetes resource definitions required to deploy the WASM application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncat app.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting a New Zellij Session in Shell\nDESCRIPTION: This command initiates a new Zellij session named 'crossplane-kubernetes'. Zellij is a terminal multiplexer, and this command creates an isolated workspace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nzellij --session crossplane-kubernetes\n```\n\n----------------------------------------\n\nTITLE: Pkl Object Hierarchy Definition\nDESCRIPTION: Example showing how Pkl uses curly braces to define nested object structures, similar to JSON syntax but with different assignment operators.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: pkl\nCODE:\n```\n...\nmetadata {\n    name = \"aws-postgresql\"\n    labels {\n        provider = \"aws\"\n        db       = \"postgresql\"\n    }\n}\nspec {\n    compositeTypeRef {\n        apiVersion = \"devopstoolkitseries.com/v1alpha1\"\n        kind       = \"SQL\"\n    }\n    mode = \"Pipeline\"\n    pipeline {\n        new {\n            functionRef { name = \"crossplane-contrib-function-patch-and-transform\" }\n            ...\n```\n\n----------------------------------------\n\nTITLE: Setting ApplicationProfile Name as Environment Variable\nDESCRIPTION: This command sets an environment variable with the name of the ApplicationProfile. It requires manual input to replace the placeholder.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nexport PROFILE_NAME=[...]\n```\n\n----------------------------------------\n\nTITLE: Importing Backstage Catalog GitHub Module (TypeScript)\nDESCRIPTION: This instruction specifies adding an import statement to the `packages/backend/src/index.ts` file. This line registers the previously installed Catalog GitHub module (alpha version) with the Backstage backend, enabling its features within the Catalog. This step is required after installing the plugin via yarn.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nbackend.add(import('@backstage/plugin-catalog-backend-module-github/alpha'));\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up and Reverting Changes in Shell\nDESCRIPTION: This script deletes a Kind cluster, updates the image version in a deployment YAML file, commits the changes, and pushes them to the repository. It's used to clean up the environment and revert changes after the demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n\nyq --inplace \\\n    \".spec.template.spec.containers[0].image = \\\"ghcr.io/vfarcic/silly-demo:1.4.171\\\"\" \\\n    silly-demo/deployment.yaml\n\ngit add .\n\ngit commit -m \"Revert [skip ci]\"\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Token for Authentication\nDESCRIPTION: Command to set the GITHUB_TOKEN environment variable for GitHub authentication in the Backstage setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport GITHUB_TOKEN=[...]\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Platform Resources in Bash\nDESCRIPTION: Clean up all platform resources based on the configured hyperscaler and GitHub user, then exit the environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nplatform destroy all $HYPERSCALER $GITHUB_USER\n\ngit checkout main\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Defining Catch Block Actions in Chainsaw YAML for Failure Handling\nDESCRIPTION: This YAML snippet shows a part of a Kyverno Chainsaw 'Test' resource, focusing on the 'catch' block within a test step. It defines actions ('get' and 'describe') to be executed if any operation within the preceding 'try' block fails. These actions retrieve diagnostic information ('managed' resources and description of 'sqls' resources) to help debug test failures.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: chainsaw.kyverno.io/v1alpha1\nkind: Test\nmetadata:\n  name: aws\nspec:\n  ...\n  steps:\n    - try:\n      ...\n      catch:\n        - get:\n            resource: managed\n        - describe:\n            resource: sqls\n            selector: crossplane.io/claim-namespace=$NAMESPACE\n```\n\n----------------------------------------\n\nTITLE: Destroying Resources\nDESCRIPTION: These commands make a script executable and run it to destroy the resources created in the example, then exit the environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_48\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy/volume.nu\n\n./destroy/volume.nu\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources in Namespace\nDESCRIPTION: Shell command to list all Kubernetes resources and ingresses in the application namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Deleting SQL Resource with Platform CLI\nDESCRIPTION: Shell command using the custom platform CLI to delete a sqlclaim resource from the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nplatform delete crossplane \\\n    --kind sqlclaim --name silly-demo-db --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Crossplane Resource Tracing\nDESCRIPTION: Command to trace all resources created by the GitHubClaim using Crossplane beta trace feature.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace githubclaim crossplane-gh-demo \\\n    --namespace git-repos\n```\n\n----------------------------------------\n\nTITLE: Attempting Steampipe SQL Join Between Text and JSONB Fields\nDESCRIPTION: This SQL query attempts to join the `kubernetes_sqlclaim` (aliased as `sqlclaim`) and `kubernetes_sql` (aliased as `sql`) tables across all clusters. The join condition tries to match the text `sqlclaim.name` with a value extracted from the JSONB `sql.labels` field ('crossplane.io/claim-name'). This query demonstrates a common Steampipe limitation and is expected to fail because direct comparison between text and jsonb types in JOIN or WHERE clauses is not supported without casting or specific functions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nselect sqlclaim.name, sqlclaim.namespace, sqlclaim.parameters -> 'size' as size, sqlclaim.parameters -> 'version' as version, sql.name as sql_name, sql.labels -> 'crossplane.io/claim-name' as claim_name from kubernetes_all.kubernetes_sqlclaim as sqlclaim join kubernetes_all.kubernetes_sql as sql on sqlclaim.name = sql.labels -> 'crossplane.io/claim-name';\n```\n\n----------------------------------------\n\nTITLE: Generating Hugo Frontmatter Template\nDESCRIPTION: A Hugo template that generates frontmatter metadata for new content. The title is derived from the content base name with hyphens replaced by spaces, and includes an automatic timestamp.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/archetypes/default.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = '{{ replace .File.ContentBaseName \"-\" \" \" | title }}'\ndate = {{ .Date }}\ndraft = true\n+++\n```\n\n----------------------------------------\n\nTITLE: Listing Kro CRDs in the Cluster - Shell\nDESCRIPTION: Executes a 'kubectl get crds' command and filters the results using 'grep' to match those related to kro. This helps confirm installation of necessary CustomResourceDefinitions, required for ResourceGroups and other kro-backed types. There are no special input parameters besides access to kubectl.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get crds | grep kro\n```\n\n----------------------------------------\n\nTITLE: Starship Configuration in TOML Format\nDESCRIPTION: Complete Starship configuration file in TOML format that customizes the shell prompt appearance. It configures various modules including character symbols, package display, command duration, cloud providers, directory, git status, and more.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: toml\nCODE:\n```\n\"$schema\" = 'https://starship.rs/config-schema.json'\n\nadd_newline = true\n\n[character]\nsuccess_symbol = '[➜](bold green)'\nerror_symbol = '[✗](bold red) '\n\n[package]\ndisabled = true\n\n[cmd_duration]\nmin_time = 5000\nformat = 'underwent [$duration](bold yellow)'\n\n[aws]\ndisabled = true\n\n[azure]\nformat = 'on [$symbol($subscription)]($style) '\ndisabled = true\n\n[gcloud]\ndisabled = true\n\n[directory]\ntruncate_to_repo = true\n\n[docker_context]\ndisabled = true\n\n[git_branch]\nignore_branches = ['master', 'main']\n\n[git_status]\nconflicted = '🏳'\nahead = '🏎💨'\nbehind = '😰'\ndiverged = '😵'\nup_to_date = ''\nuntracked = '🤷'\nstashed = ''\nmodified = '📝'\nstaged = '[++\\($count\\)](green)'\nrenamed = '👅'\ndeleted = '🗑'\ndisabled = false\n\n[golang]\ndisabled = true\n\n[kubernetes]\ndisabled = false\n\n[nix_shell]\ndisabled = false\nimpure_msg = 'devbox'\nformat = 'via [$symbol$state](bold blue) '\n\n[sudo]\ndisabled = false\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kubernetes CronJob\nDESCRIPTION: Command to delete the previously created CronJob from the a-team namespace, stopping future scheduled executions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_62\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename cronjob/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Inspecting a ReplicaSet Manifest with cat - Shell\nDESCRIPTION: Displays the contents of the base ReplicaSet manifest file using the shell command 'cat'. This step is used to review the YAML configuration before applying it to the cluster. No dependencies other than access to the file system are required. The input is the file path, and the output is the contents printed to the console.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\ncat replicaset/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Example Generated Dev Container Configuration (devcontainer.json) in JSON\nDESCRIPTION: This JSON object shows an example structure of a `.devcontainer/devcontainer.json` file, likely generated by `devbox generate devcontainer`. It specifies the container's name, build details (pointing to a Dockerfile and context), VS Code specific customizations (like settings and required extensions, including the Devbox extension), and the user (`devbox`) to run as inside the container.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Devbox Remote Container\",\n  \"build\": {\n    \"dockerfile\": \"./Dockerfile\",\n    \"context\": \"..\"\n  },\n  \"customizations\": {\n    \"vscode\": {\n      \"settings\": {},\n      \"extensions\": [\n        \"jetpack-io.devbox\"\n      ]\n    }\n  },\n  \"remoteUser\": \"devbox\"\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Application Definitions to Kubernetes\nDESCRIPTION: Command to apply the application definitions to the a-team namespace in the Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename examples/full.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing a Cluster Destruction Task within Zellij in Shell\nDESCRIPTION: This command runs the 'cluster-destroy' task using 'just'. This task is intended to tear down the resources created by the 'cluster-create' task, cleaning up the environment. It's executed within a Zellij pane after stopping any running processes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\njust cluster-destroy\n```\n\n----------------------------------------\n\nTITLE: Exiting Devbox Shell Environment\nDESCRIPTION: Command to exit the Devbox shell and return to the host environment, used to demonstrate tool isolation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Initializing Nushell and Setting Executable Permissions - Shell (sh)\nDESCRIPTION: This snippet initializes the Nushell environment and makes specific Nushell script files executable with 'chmod +x'. It is essential to ensure that custom Nushell scripts can be run within the interactive session. Dependencies include a Unix-like environment with Nushell installed, and the scripts referenced must exist at the specified paths.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnu\n\nchmod +x manuscript/setup/security.nu\n\nchmod +x manuscript/setup/security-orig.nu\n```\n\n----------------------------------------\n\nTITLE: Viewing SQLClaim Manifest - cat - Shell\nDESCRIPTION: Shows the contents of a generated SQLClaim manifest file. This command helps verify that the manifest matches expected resource specifications after workflow automation. Requires the file to exist in 'apps' directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncat apps/a-team-SQLClaim-silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox Shell for Development Environment (sh)\nDESCRIPTION: This command launches a shell session managed by Devbox, loading the tool versions and environment variables specified in a 'devbox.json' file. It requires Devbox to be installed on the host system. No output is produced; the command ensures all declared dependencies are available for interactive work within the project directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Sending Request to Service (Fibonacci 10) (Shell)\nDESCRIPTION: Sends another HTTP GET request from the temporary 'curl' pod to the 'silly-demo' service, this time calculating Fibonacci number 10. Demonstrates continued access to the service.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://silly-demo:8080/fibonacci?number=10\n```\n\n----------------------------------------\n\nTITLE: Applying the ResourceGroup with PostgreSQL Integration\nDESCRIPTION: Kubernetes command to apply the updated ResourceGroup with CNPG PostgreSQL integration to the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename resource-group-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Output of Kubernetes Service Listing (Text)\nDESCRIPTION: This is the expected output of the 'kubectl get services' command. It shows the 'silly-demo' Service with type 'ClusterIP', its assigned internal cluster IP, the port it listens on (8080/TCP), and confirms it has no external IP ('<none>').\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: text\nCODE:\n```\nNAME         TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nsilly-demo   ClusterIP   10.95.55.206   <none>        8080/TCP   5s\n```\n\n----------------------------------------\n\nTITLE: Cleaning up and exiting the development environment in Bash\nDESCRIPTION: This snippet shows a series of commands to stash changes, switch to the master branch, and exit the current shell or environment. It's likely used as a cleanup or teardown process after development work.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ngit stash\n\ngit checkout master\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Executing Nushell Setup Script\nDESCRIPTION: Makes the `setup.nu` script executable using `chmod +x` and then runs the script using `./setup.nu`. This script likely contains Nushell commands to perform further setup tasks for the demonstration environment. Requires Nushell to be installed or accessible via Devbox.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.nu\n\n./setup.nu\n```\n\n----------------------------------------\n\nTITLE: Output of Successful Cross-Namespace Curl (Text)\nDESCRIPTION: This output 'This is a silly demo' confirms that the request sent using the FQDN successfully reached the 'silly-demo' service running in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: text\nCODE:\n```\nThis is a silly demo\n```\n\n----------------------------------------\n\nTITLE: Displaying Task Definition using cat and yq (Shell)\nDESCRIPTION: This command displays the definition of the `test-watch` task stored within `Taskfile.yaml`. It uses `cat` to output the file content and pipes it to `yq`, a YAML processor, to extract and format the specific `.tasks.test-watch` section. Requires `cat` and `yq` utilities.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncat Taskfile.yaml | yq \".tasks.test-watch\"\n```\n\n----------------------------------------\n\nTITLE: Inspecting Specific Kubernetes Cluster Connection\nDESCRIPTION: This SQL command inspects the tables available for a specific Kubernetes cluster connection (aks_01 in this case).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\n.inspect kubernetes_aks_01\n```\n\n----------------------------------------\n\nTITLE: Displaying File Contents with cat - Shell Script\nDESCRIPTION: Displays the contents of the 'crossplane/app-dev-db.yaml' manifest file using the cat command. This is useful for reviewing the YAML manifest before making modifications or applying it. No external dependencies other than a Unix shell are required; the input file must exist at the specified location.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncat crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Column Values from Filtered Pod Data\nDESCRIPTION: Extends the filtering pipeline to extract only the NAME column from Pods that don't have Running status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods --all-namespaces\n    | detect columns\n    | where STATUS != \"Running\"\n    | get NAME\n```\n\n----------------------------------------\n\nTITLE: Example Generated Kubernetes Network Policies (YAML)\nDESCRIPTION: Shows example Kubernetes NetworkPolicy resources generated by `kubectl gadget advise network-policy report`. The YAML output defines ingress rules for the `pinger` and `silly-demo` pods based on the observed network traffic, specifying allowed source IPs/pods and ports. These generated policies can serve as a starting point for securing network communication.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  creationTimestamp: null\n  name: pinger-network\n  namespace: a-team\nspec:\n  ingress:\n  - from:\n    - ipBlock:\n        cidr: 10.244.0.1/32\n    ports:\n    - port: 8080\n      protocol: TCP\n  - from:\n    - namespaceSelector:\n        matchLabels:\n          kubernetes.io/metadata.name: ingress-nginx\n      podSelector:\n        matchLabels:\n          app.kubernetes.io/component: controller\n          app.kubernetes.io/instance: ingress-nginx\n          app.kubernetes.io/name: ingress-nginx\n          app.kubernetes.io/part-of: ingress-nginx\n          app.kubernetes.io/version: 1.10.0\n    ports:\n    - port: 8080\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/name: pinger\n  policyTypes:\n  - Ingress\n  - Egress\n---\napiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  creationTimestamp: null\n  name: silly-demo-network\n  namespace: a-team\nspec:\n  ingress:\n  - from:\n    - ipBlock:\n        cidr: 10.244.0.1/32\n    ports:\n    - port: 8080\n      protocol: TCP\n  podSelector:\n    matchLabels:\n      app.kubernetes.io/name: silly-demo\n  policyTypes:\n  - Ingress\n  - Egress\n```\n\n----------------------------------------\n\nTITLE: Generating XRD from Example Claim with up CLI (Shell)\nDESCRIPTION: Executes the `up xrd generate` command, providing the path to the example claim file (`examples/sql/my-db.yaml`). This command analyzes the example claim and generates the corresponding Crossplane Composite Resource Definition (XRD).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nup xrd generate examples/sql/my-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Page Settings in TOML\nDESCRIPTION: This TOML configuration snippet sets the title, weight, and visibility for a database page in a documentation or content management system. It defines the page title as 'Databases', sets a weight of 150 for ordering, and makes the page visible.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Databases\"\nweight = 150\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Querying Custom Kubernetes Resources with kubectl (Shell)\nDESCRIPTION: Illustrates using `kubectl` to query custom resource definitions (CRDs), specifically 'appclaims', within the 'a-team' namespace. This demonstrates `kubectl`'s ability to interact with extensions to the standard Kubernetes API.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get appclaims\n```\n\n----------------------------------------\n\nTITLE: fzf with Preview\nDESCRIPTION: Combining fzf with bat for file preview functionality\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nfzf --preview 'bat --style numbers --color always {}'\n```\n\n----------------------------------------\n\nTITLE: Viewing Argo Rollout Status After Promotion (text)\nDESCRIPTION: Displays the output from Argo Rollouts after promoting the `silly-demo` deployment. It shows the current status is 'Paused' at step 3/8, with the canary version receiving 40% of the traffic, and details the associated Kubernetes resources (ReplicaSets, Pods) for both stable and canary versions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\nName:            silly-demo\nNamespace:       a-team\nStatus:          ॥ Paused\nMessage:         CanaryPauseStep\nStrategy:        Canary\n  Step:          3/8\n  SetWeight:     40\n  ActualWeight:  40\nImages:          ghcr.io/vfarcic/silly-demo:1.4.126 (stable)\n                 ghcr.io/vfarcic/silly-demo:1.4.127 (canary)\nReplicas:\n  Desired:       5\n  Current:       5\n  Updated:       2\n  Ready:         5\n  Available:     5\n\nNAME                                    KIND        STATUS     AGE    INFO\n⟳ silly-demo                            Rollout     ॥ Paused   6m6s\n├──# revision:2\n│  └──⧉ silly-demo-5d574b5f4f           ReplicaSet  ✔ Healthy  2m57s  canary\n│     ├──□ silly-demo-5d574b5f4f-jq459  Pod         ✔ Running  2m56s  ready:2/2\n│     └──□ silly-demo-5d574b5f4f-ffmxr  Pod         ✔ Running  10s    ready:2/2\n└──# revision:1\n   └──⧉ silly-demo-5c5547db68           ReplicaSet  ✔ Healthy  6m6s   stable\n      ├──□ silly-demo-5c5547db68-492kk  Pod         ✔ Running  6m6s   ready:2/2\n      ├──□ silly-demo-5c5547db68-fkpp2  Pod         ✔ Running  6m6s   ready:2/2\n      └──□ silly-demo-5c5547db68-zh8ck  Pod         ✔ Running  6m6s   ready:2/2\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to Test Updated Workflow (sh)\nDESCRIPTION: Stages all changes, creates another Git commit with the message \"Silly demo\", and pushes it to the remote repository. This triggers the entire CI/CD and eventing process again, allowing verification of the updated Argo Events configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n\ngit commit -m \"Silly demo\"\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Getting Task Summary\nDESCRIPTION: Command to display a summary of a specific task including its description and commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ntask --summary package-generate\n```\n\n----------------------------------------\n\nTITLE: Neon Database Resource Cleanup Command\nDESCRIPTION: Shell command to destroy Neon database resources using a custom script.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\n./dot.nu destroy --neon_db $NEON_DB\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Filtering Directory Listing with `ls` and `egrep` in Zsh/Shell\nDESCRIPTION: Lists files and directories in long format using `ls -l` and pipes the text output to `egrep`. The `egrep -v '^d'` command filters out lines starting with 'd', effectively removing directories and displaying only files. This exemplifies traditional text-based filtering in POSIX-like shells.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nls -l | egrep -v '^d'\n```\n\n----------------------------------------\n\nTITLE: Example Output Listing Restored Kubernetes Resources\nDESCRIPTION: Displays sample truncated output from the `kubectl get all,ingresses,persistentvolumes` command. It shows restored resources like Pods, Services, Deployments, ReplicaSets, Ingresses, and PersistentVolumes within the `a-team` namespace, indicating successful resource restoration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nNAME                            READY STATUS  RESTARTS AGE\npod/silly-demo-6f85bd9f4f-frhxm 1/1   Running 0        2m57s\n\nNAME               TYPE      CLUSTER-IP    EXTERNAL-IP PORT(S)  AGE\nservice/silly-demo ClusterIP 10.100.198.31 <none>      8080/TCP 2m58s\n\nNAME                       READY UP-TO-DATE AVAILABLE AGE\ndeployment.apps/silly-demo 1/1   1          1         2m58s\n\nNAME                                  DESIRED CURRENT READY AGE\nreplicaset.apps/silly-demo-6f85bd9f4f 1       1       1     2m58s\n\nNAME                                 CLASS   HOSTS                           ADDRESS   PORTS AGE\ningress.networking.k8s.io/silly-demo traefik silly-demo.44.219.253.50.nip.io afb2f3... 80    2m59s\n\nNAME                        CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM                   STORAGECLASS VOLUMEATTRIBUTESCLASS REASON AGE\npersistentvolume/pvc-8f2... 1Gi      RWO          Delete         Bound  a-team/silly-demo-cache gp2          <unset>                      3m\n```\n\n----------------------------------------\n\nTITLE: Executing Nushell Script\nDESCRIPTION: This command attempts to execute a Nushell script named 'security-orig.nu', which results in a compilation error due to an undefined variable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\n./manuscript/setup/security-orig.nu\n```\n\n----------------------------------------\n\nTITLE: Defining ClusterAnalysisTemplate for Success Rate Monitoring in YAML\nDESCRIPTION: This YAML snippet defines a ClusterAnalysisTemplate named 'success-rate' that uses Prometheus queries to calculate the success rate of requests to a service. It sets a success condition of 95% or higher.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_38\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: ClusterAnalysisTemplate\nmetadata:\n  name: success-rate\nspec:\n  args:\n  - name: service-name\n  - name: prometheus-addr\n    value: http://kube-prometheus-stack-prometheus.monitoring\n  - name: prometheus-port\n    value: \"9090\"\n  metrics:\n  - name: success-rate\n    successCondition: result[0] >= 0.95\n    provider:\n      prometheus:\n        address: \"{{args.prometheus-addr}}:{{args.prometheus-port}}\"\n        query: |\n          sum(irate(\n            istio_requests_total{reporter=\"source\",destination_service=\"{{args.service-name}}\",response_code!~\"5.*\"}[5m]\n          )) /\n          sum(irate(\n            istio_requests_total{reporter=\"source\",destination_service=\"{{args.service-name}}\"}[5m]\n          ))\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands for the Demonstration\nDESCRIPTION: Cleanup commands that delete the temporary git branch and exit the shell session after completing the Starship demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\ngit branch -d something\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Viewing Secret File Content\nDESCRIPTION: This command executes into the container and displays the content of the 'silly' file from the mounted Secret.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_47\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- cat /cache/silly\n```\n\n----------------------------------------\n\nTITLE: Verifying Live Application Updates with curl (Shell)\nDESCRIPTION: This snippet sends an HTTP GET request to the application endpoint using 'curl', after code changes, to verify that updates are correctly reflected. Dependencies: network access, curl, and a running application at the constructed URL. Input is the URL; output is the application response body, indicating deployment correctness.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://egulliksen.silly-demo.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Exiting and Destroying Resources in Shell\nDESCRIPTION: This snippet demonstrates how to exit the current session, make a destroy script executable, run it, and then exit again. It's likely part of a cleanup process after using Steampipe or Clusterpedia.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\n.exit\n\nchmod +x destroy.sh\n\n./destroy.sh\n\nexit\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Earthly Integration\nDESCRIPTION: A GitHub Actions workflow that sets up Earthly, builds and pushes container images using Earthly, and commits changes back to the repository. The workflow includes environment variables, secrets management, and git operations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\nrun-name: ci\non:\n  push:\n    branches:\n      - main\n      - master\njobs:\n  build-container-image:\n    runs-on: ubuntu-latest\n    env:\n      TAG: 1.4.${{ github.run_number }}\n      FORCE_COLOR: 1\n    steps:\n      - uses: earthly/actions-setup@v1\n        with:\n          version: v0.8.0\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      - name: Login to ghcr\n        uses: docker/login-action@v2\n        with:\n          registry: ghcr.io\n          username: vfarcic\n          password: ${{ secrets.REGISTRY_PASSWORD }}\n      - name: Build and push\n        run: |\n          earthly --push \\\n            --secret cosignpassword=\"$COSIGN_PASSWORD\" \\\n            --secret cosignkey=\"$COSIGN_PRIVATE_KEY\" \\\n            --secret password=\"$REGISTRY_PASSWORD\" \\\n            +all --tag $TAG\n        env:\n          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}\n          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}\n          REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}\n      - name: Commit changes\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Release ${{ env.TAG }} [skip ci]\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Initializing Development Environment\nDESCRIPTION: Launches devbox shell environment and executes setup script with necessary permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ndevbox shell\n\nchmod +x setup.nu\n\n./setup.nu\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Destroying Cluster Using Taskfile (Task) from Shell Script (sh)\nDESCRIPTION: Invokes the 'cluster-destroy' task using the Taskfile-based task runner via shell. Assumes Task is installed and a Taskfile is present in the project root. No arguments are passed, and the invocation triggers cleanup steps as defined in the Taskfile. The expected output is successful teardown of infrastructure defined in the associated tasks. Shell access and Taskfile setup are prerequisites.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ntask cluster-destroy\n```\n\n----------------------------------------\n\nTITLE: Listing Kustomize Base Directory Contents\nDESCRIPTION: Command to list files in the base directory of a Kustomize configuration, showing the core components of the application manifests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nls kustomize/base/\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Policy Manifests Using Kubectl - Shell\nDESCRIPTION: This shell command applies the previously defined YAML policy manifest to the Kubernetes cluster. Using kubectl apply with the --filename parameter ensures that the resources in kubernetes/policies.yaml are created or updated as needed. It requires kubectl to be installed and configured to access the target cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nkubectl apply --filename kubernetes/policies.yaml\n```\n\n----------------------------------------\n\nTITLE: Describing Kargo Promotion in Kubernetes\nDESCRIPTION: These commands retrieve and describe a specific Kargo promotion, showing detailed information about the promotion process and configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\nexport PROMOTION_NAME=[...]\n\nkubectl --namespace silly-demo describe promotion $PROMOTION_NAME\n```\n\n----------------------------------------\n\nTITLE: Displaying Detailed Help for the Nushell 'ls' Command\nDESCRIPTION: This Nushell command chain first finds the help entry for the `ls` command (`help commands | where name == ls`) and then pipes the resulting single-row table to the `first` command. When `first` receives a single record, Nushell often displays it in a more detailed, key-value format, showing all available fields for that command's help information, including parameters, input/output types, and search terms.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nhelp commands | where name == ls | first\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables from .env File (Shell)\nDESCRIPTION: Sources the `.env` file in the current directory to load environment variables into the current shell session. This is typically done before running an application locally to provide necessary configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Task with the Task Runner (Shell)\nDESCRIPTION: Executes the `cluster-create` task using the `task` command. This task, defined in a `Taskfile.yaml`, likely orchestrates the creation and configuration of a Kubernetes cluster (e.g., using Kind), installation of Crossplane, configuration of providers, and application of necessary manifests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ntask cluster-create\n```\n\n----------------------------------------\n\nTITLE: Searching for Devbox Packages Containing 'helm' using Shell\nDESCRIPTION: This command uses `devbox search` to find packages related to 'helm'. Similar to the 'task' example, it demonstrates that searching for a general term like 'helm' might not return the specific desired package (e.g., 'kubernetes-helm') if the package name doesn't start with 'helm'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ndevbox search helm\n```\n\n----------------------------------------\n\nTITLE: Creating a Pull Request using GitHub CLI\nDESCRIPTION: Creates a new pull request with a title and body using the GitHub CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\ngh pr create --title \"Fancy feature\" --body \"...or a silly feature?\"\n```\n\n----------------------------------------\n\nTITLE: Viewing kro Logs in Kubernetes\nDESCRIPTION: This shell command retrieves the logs from the kro pods in the 'kro' namespace, showing the last 50 lines. It's used to troubleshoot issues with the kro controller.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace kro logs \\\n    --selector app.kubernetes.io/name=kro --tail 50\n```\n\n----------------------------------------\n\nTITLE: Displaying Zellij Layout Configuration\nDESCRIPTION: Shows the content of a Zellij layout configuration file named 'test-layout.kdl' using the 'cat' command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncat test-layout.kdl\n```\n\n----------------------------------------\n\nTITLE: Running a Test Watcher Task within Zellij in Shell\nDESCRIPTION: This command executes the 'test-watch' task using 'just'. This task likely watches for file changes and reruns tests automatically. It's run in one of the Zellij panes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\njust test-watch\n```\n\n----------------------------------------\n\nTITLE: Applying SQLClaim Manifest (Shell)\nDESCRIPTION: Applies the SQLClaim manifest (referenced by `db/$HYPERSCALER.yaml`) to the `a-team` namespace in the current Kubernetes context (expected to be the control plane cluster after unsetting KUBECONFIG). This initiates the provisioning of the PostgreSQL database and related resources by Crossplane.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename db/$HYPERSCALER.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Starship 'pastel-powerline' Preset (Shell)\nDESCRIPTION: Applies the 'pastel-powerline' preset to Starship by writing its configuration to `~/.config/starship.toml`. This preset uses Powerline-style separators and pastel colors.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nstarship preset pastel-powerline \\\n    --output ~/.config/starship.toml\n```\n\n----------------------------------------\n\nTITLE: Listing Active Zellij Sessions in Shell\nDESCRIPTION: This command lists all currently running Zellij sessions, typically showing their names and creation times. This is useful for managing multiple detached sessions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nzellij list-sessions\n```\n\n----------------------------------------\n\nTITLE: Task Execution Output\nDESCRIPTION: Output from running the package-generate task, showing each command as it executes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ntask: [package-generate] timoni build dot-kubernetes timoni > package/all.yaml\ntask: [package-generate] head -n -1 package/all.yaml > package/all.yaml.tmp\ntask: [package-generate] mv package/all.yaml.tmp package/all.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Backstage Application Configuration (Shell)\nDESCRIPTION: This shell command uses `cat` to display the contents of the main Backstage configuration file, `app-config.yaml`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncat ../app-config.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Pkl Go Template Definition\nDESCRIPTION: Command to show a Pkl template that integrates with Go templating, demonstrating how Pkl can be used with other templating systems.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncat pkl/goTemplate.pkl\n```\n\n----------------------------------------\n\nTITLE: Customized bat Configuration\nDESCRIPTION: Configuring bat with custom theme and display options for enhanced viewing\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nbat --paging never --theme DarkNeon --style plain k8s/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Inspecting Available Azure Tables in Steampipe Shell\nDESCRIPTION: This meta-command, executed within the Steampipe interactive shell (`steampipe query`), lists the tables and their descriptions available within the `azure` schema. This requires the Azure plugin to be installed and configured.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\n.inspect azure\n```\n\n----------------------------------------\n\nTITLE: Setting bat Alias\nDESCRIPTION: Creating a shell alias to replace cat with customized bat command\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\necho \"alias cat='bat --paging never --theme DarkNeon \\\\n    --style plain'\" | tee -a ~/.zshrc\n\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Expected Output from WASM Application Test\nDESCRIPTION: This is the expected output received from the `curl` command when testing the deployed WASM application. It confirms that the Go application, running as WASM via Spin and Kubernetes, successfully handled the HTTP request and returned the defined response.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: plaintext\nCODE:\n```\nThis is a silly demo running as WASM!\n```\n\n----------------------------------------\n\nTITLE: Displaying a Kargo Project Manifest via Shell Command\nDESCRIPTION: This shell snippet uses the 'cat' command to display the YAML manifest for a Kargo Project. It's often used for inspection or verification prior to applying manifests with kubectl. No dependencies are required other than basic shell access and file permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncat kargo-manifests/project.yaml\n```\n\n----------------------------------------\n\nTITLE: Preparing Nushell Script for Execution\nDESCRIPTION: Command to make the Nushell script executable for setting up the environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x dot.nu\n```\n\n----------------------------------------\n\nTITLE: Opening VSCode Editor\nDESCRIPTION: Commands to open the project in Visual Studio Code.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncode .\n```\n\nLANGUAGE: sh\nCODE:\n```\ncode upbound.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating Cosign Key Pair and Setting Environment Variables\nDESCRIPTION: This snippet generates a Cosign key pair for image signing, moves the keys to a dedicated directory, and sets necessary environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nexport COSIGN_PASSWORD=IWillNeverTell\n\ncosign generate-key-pair\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up GPU Demo Repository\nDESCRIPTION: Initial setup commands to clone the Kubernetes GPU demo repository and navigate to the project directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kubernetes-gpu-demo\n\ncd kubernetes-gpu-demo\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Formatted Output - Nushell\nDESCRIPTION: This snippet shows the 'ls' command executed in Nushell, which returns directory contents as a richly formatted table. Nushell's 'ls' command outputs structured data, featuring columns for file name, type, size, and modification time, along with colorized terminal output (not shown here). Requires Nushell and display support for ANSI terminal formatting.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Outputting Ingress Host for Kubernetes Application\nDESCRIPTION: This command echoes the Ingress host for the 'silly-demo' application using the $INGRESS_HOST environment variable and nip.io for DNS resolution.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\necho \"silly-demo.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Viewing CronJob Status Output\nDESCRIPTION: Output showing the details of the created CronJob, including its schedule (every minute) and the last execution time.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_59\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME       SCHEDULE    SUSPEND ACTIVE LAST SCHEDULE AGE\nsilly-demo */1 * * * * False   0      22s           35s\n```\n\n----------------------------------------\n\nTITLE: Configuring Cosign Keys and Setting Image Name\nDESCRIPTION: This snippet moves the generated Cosign keys to a dedicated directory, sets the COSIGN_PRIVATE_KEY environment variable, and generates a unique image name.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nmkdir -p cosign\n\nmv cosign.pub cosign.key cosign/.\n\nexport COSIGN_PRIVATE_KEY=\"$(cat cosign/cosign.key)\"\n\nexport IMAGE=silly-demo-$(date +%Y%m%d%H%M%S)\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub Package Settings URL\nDESCRIPTION: Creates a URL for accessing the GitHub package settings to make the container registry public.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\necho https://github.com/users/$GITHUB_USER/packages/container/idp-full-app/settings\n```\n\n----------------------------------------\n\nTITLE: Extracting Specific Task Definition\nDESCRIPTION: Command to extract the definition of a specific task from the Taskfile using yq for YAML processing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncat Taskfile.yaml | yq \".tasks.package-generate\"\n```\n\n----------------------------------------\n\nTITLE: Executing Resource Destruction Script (Shell)\nDESCRIPTION: This shell snippet executes a Nushell script (`./dot.nu`) with the `destroy` argument, presumably to tear down resources created earlier. Afterwards, it exits the current shell session.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n./dot.nu destroy\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to Git Repository in Bash\nDESCRIPTION: Commit staged changes with a message indicating Argo CD implementation. The [skip ci] tag prevents CI pipelines from running.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"This time with Argo CD [skip ci]\"\n```\n\n----------------------------------------\n\nTITLE: Viewing Kubernetes Plugin Configuration\nDESCRIPTION: This command displays the contents of the Kubernetes plugin configuration file, showing the default settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncat ~/.steampipe/config/kubernetes.spc\n```\n\n----------------------------------------\n\nTITLE: Tracing SQLClaim Resource Status (Initial) (Shell)\nDESCRIPTION: Uses the Crossplane CLI beta command `trace` to display the status and relationship of the `my-db` SQLClaim resource and all the managed resources it orchestrates within the `a-team` namespace. This shows the initial state shortly after applying the claim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace sqlclaim my-db --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Listing Secrets in a Kubernetes Namespace (Shell)\nDESCRIPTION: This command uses `kubectl` to list all Secret resources within the `crossplane-system` namespace of the currently targeted Kubernetes cluster. It's used here to verify the presence of the `aws-creds` secret in the control plane cluster before attempting to propagate it.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace crossplane-system get secrets\n```\n\n----------------------------------------\n\nTITLE: Deleting a Zellij Session\nDESCRIPTION: Forcefully deletes a specific Zellij session named 'crossplane-kubernetes' using the 'zellij delete-session' command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nzellij delete-session crossplane-kubernetes --force\n```\n\n----------------------------------------\n\nTITLE: Git Commit and Push to Trigger Workflow\nDESCRIPTION: Commands to commit changes and push to the repository, which will trigger the CI workflow in GitHub Actions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"Apps\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Application via POST Request (1)\nDESCRIPTION: This command uses curl to send an HTTP POST request to the 'silly-demo' application endpoint. It aims to store data (video ID 1 with title 'something') which the application should write to its mounted persistent volume. Requires the INGRESS_HOST environment variable to be set.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST \\\n    \"http://silly-demo.$INGRESS_HOST.nip.io/video?id=1&title=something\"\n```\n\n----------------------------------------\n\nTITLE: Launching Devbox Shell for Development Environment\nDESCRIPTION: Command to start a Devbox shell, which sets up the development environment with necessary tools as specified in devbox.json.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Displaying Initial Argo Rollouts Status Output\nDESCRIPTION: This text block shows example output from the `kubectl argo rollouts get rollout` command. It indicates that the initial deployment (`revision:1`) of the `silly-demo` Rollout is complete and healthy, with 5 running pods.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\n...\nNAME                                    KIND        STATUS     AGE   INFO\n⟳ silly-demo                            Rollout     ✔ Healthy  118s\n└──# revision:1\n   └──⧉ silly-demo-5c5547db68           ReplicaSet  ✔ Healthy  118s  stable\n      ├──□ silly-demo-5c5547db68-2rn84  Pod         ✔ Running  118s  ready:2/2\n      ├──□ silly-demo-5c5547db68-492kk  Pod         ✔ Running  118s  ready:2/2\n      ├──□ silly-demo-5c5547db68-bm9vt  Pod         ✔ Running  118s  ready:2/2\n      ├──□ silly-demo-5c5547db68-fkpp2  Pod         ✔ Running  118s  ready:2/2\n      └──□ silly-demo-5c5547db68-zh8ck  Pod         ✔ Running  118s  ready:2/2 \n```\n\n----------------------------------------\n\nTITLE: Sending Request to Service (Fibonacci 25) (Shell)\nDESCRIPTION: Sends the fifth HTTP GET request from the temporary 'curl' pod to the 'silly-demo' service, calculating Fibonacci number 25. These multiple requests help illustrate potential load balancing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://silly-demo:8080/fibonacci?number=25\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script and Environment Configuration\nDESCRIPTION: Commands to make the setup script executable, run it, and source environment variables. This setup is specifically designed for Google Cloud deployments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x setup.nu\n\n./setup.nu\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Destroying a Kind Kubernetes Cluster with WASM/Kwasm\nDESCRIPTION: A shell script that deletes a Kind Kubernetes cluster and exits the current shell session. Used for cleanup after experimenting with WASM and Kwasm in Kubernetes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Multi-select with fzf\nDESCRIPTION: Using fzf with multi-select capability for selecting multiple files\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nfzf --multi\n```\n\n----------------------------------------\n\nTITLE: Pull Request Files JSON Output\nDESCRIPTION: JSON response showing the files included in the initial pull request, including README and Go-specific files.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\n    {\n      \"path\": \"README.md\",\n      \"additions\": 3,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"go.mod\",\n      \"additions\": 34,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"go.sum\",\n      \"additions\": 89,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"main.go\",\n      \"additions\": 25,\n      \"deletions\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Kubernetes Resources Created by kro\nDESCRIPTION: Shell command to list all Kubernetes resources and ingresses in the a-team namespace, used to demonstrate the resources that kro creates from the simplified Application manifest.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Displaying the ResourceGroup with CNPG PostgreSQL Integration\nDESCRIPTION: Shell command to display the contents of a ResourceGroup YAML file that includes CNPG PostgreSQL database integration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_43\n\nLANGUAGE: sh\nCODE:\n```\ncat resource-group-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Final KCL Function File using `code`\nDESCRIPTION: This shell command uses the `code` utility to open and display the contents of the final, completed KCL function file, presumably named `aws.k` and located in the parent directory relative to the current context (`../aws.k`). This file contains the full definition of managed resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ncode ../aws.k\n```\n\n----------------------------------------\n\nTITLE: Running Go Application With Signal Handling\nDESCRIPTION: This command runs the Go application with signal handling enabled, allowing for graceful shutdown.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngo run .\n```\n\n----------------------------------------\n\nTITLE: Sending Fibonacci Request to Kubernetes Service (sh)\nDESCRIPTION: This command uses `curl` to send an HTTP GET request to the `/fibonacci` endpoint of the `silly-demo` application, accessed via its service endpoint (`silly-demo.127.0.0.1.nip.io`). It requests the calculation of the 45th Fibonacci number. The `nip.io` domain resolves to `127.0.0.1`, assuming an Ingress controller or port-forwarding is set up.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.127.0.0.1.nip.io/fibonacci?number=45\"\n```\n\n----------------------------------------\n\nTITLE: Updating Project Metadata\nDESCRIPTION: Commands to update the project metadata with user-specific information using yq.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nyq --inplace \".spec.maintainer = \\\"$NAME <$EMAIL>\\\"\" upbound.yaml\n\nyq --inplace \\\n    \".spec.repository = \\\"xpkg.upbound.io/$UP_ACCOUNT/silly-demo\\\"\" \\\n    upbound.yaml\n\nyq --inplace \".spec.source = \\\"$GIT_URL\\\"\" upbound.yaml\n```\n\n----------------------------------------\n\nTITLE: Printing Argo CD Application URL - echo - Shell\nDESCRIPTION: Echoes the Argo CD web UI URL to the terminal. No external dependencies. This lightweight method enables quick access for users or subsequent automation to guide operators to the relevant dashboard for manual verification.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\necho \"http://argocd.127.0.0.1.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Accessing Frontend Application via URL in Shell\nDESCRIPTION: Command to generate and display the URL for accessing the frontend application in a staging environment. The command uses an environment variable INGRESS_HOST to construct the complete URL.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://staging.silly-demo-frontend.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Starship Configuration File\nDESCRIPTION: Displays the contents of the starship.toml configuration file using the cat command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncat starship.toml\n```\n\n----------------------------------------\n\nTITLE: Viewing Taskfile.yaml Content\nDESCRIPTION: Command to display the content of a Taskfile.yaml, which contains all defined tasks for the project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncat Taskfile.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources and Ingresses in a Namespace - Shell\nDESCRIPTION: This shell command lists all resources and ingresses in the a-team namespace, verifying the result of applying the validated appclaim. It uses kubectl get all,ingresses to show pods, services, deployments, replicasets, HPAs, and ingresses, enabling the user to confirm resource creation and autoscaling setups. Kubectl must be connected to a valid cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Targeting Control Plane Cluster (Shell)\nDESCRIPTION: Unsets the `KUBECONFIG` environment variable. This typically makes `kubectl` use the default kubeconfig file (e.g., `~/.kube/config`), which is assumed here to point to the Kubernetes control plane cluster where Crossplane is running.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nunset KUBECONFIG\n```\n\n----------------------------------------\n\nTITLE: Listing Pods Across All Namespaces with kubectl\nDESCRIPTION: Demonstrates the basic usage of kubectl to retrieve all Pods from all namespaces in a Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pods --all-namespaces\n```\n\n----------------------------------------\n\nTITLE: Applying Deployment Configuration using kubectl (sh)\nDESCRIPTION: Applies the Kubernetes Deployment configuration defined in the `scale/app-resources.yaml` file to the 'a-team' namespace using `kubectl apply`. This creates or updates the Deployment with the specified resource requests and limits.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename scale/app-resources.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Secret Volume\nDESCRIPTION: This command executes into the container and lists the files in the '/cache' directory where the Secret is mounted.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_46\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- ls /cache/\n```\n\n----------------------------------------\n\nTITLE: Cloning the Demo Repository\nDESCRIPTION: Command to clone the KubeVela demonstration repository from GitHub. This provides access to the example files and configurations needed for the tutorial.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kubevela-demo-2\n\ncd kubevela-demo-2\n```\n\n----------------------------------------\n\nTITLE: Displaying ClusterRole for Crossplane Permissions (Shell)\nDESCRIPTION: This shell command displays the content of the `providers/cluster-role.yaml` file. This file contains the definition of a Kubernetes `ClusterRole` needed to grant Crossplane the necessary permissions to manage arbitrary Kubernetes resources directly, a requirement for the direct composition feature in v2.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncat providers/cluster-role.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Available Just Recipes\nDESCRIPTION: This snippet demonstrates how to list all available recipes defined in the Justfile by running 'just' without arguments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\njust\n```\n\n----------------------------------------\n\nTITLE: Generating Continuous Load with Hey Tool\nDESCRIPTION: Uses the 'hey' load testing tool to generate continuous traffic to the application for 60 minutes. This simulates real user traffic for testing and monitoring purposes in a progressive delivery scenario.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\nhey -z 60m \"http://silly-demo.$ISTIO_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Defining a Persistent Volume Claim (PVC) in YAML\nDESCRIPTION: This YAML manifest defines a Kubernetes PersistentVolumeClaim named 'silly-demo'. It requests 1Gi of storage using the 'managed' StorageClass and requires 'ReadWriteOnce' access mode. Labels are applied for identification.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nkind: PersistentVolumeClaim\napiVersion: v1\nmetadata:\n  name: silly-demo\n  labels:\n    app.kubernetes.io/name: silly-demo\nspec:\n  storageClassName: managed\n  resources:\n    requests:\n      storage: 1Gi\n  accessModes:\n  - ReadWriteOnce\n```\n\n----------------------------------------\n\nTITLE: Check Application Status\nDESCRIPTION: Command to view the current status of a KubeVela application\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nvela status silly-demo\n```\n\n----------------------------------------\n\nTITLE: Deploying Backstage Platform Portal in Bash\nDESCRIPTION: Deploy Backstage using a platform CLI with GitHub token authentication and service account creation. Configures ingress for web access.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\nplatform apply backstage \"0.0.1\" \\\n    --ingress_host \"backstage.$INGRESS_HOST\" \\\n    --github_token $GITHUB_TOKEN \\\n    --create_service_account true\n```\n\n----------------------------------------\n\nTITLE: Pushing Commits to Remote Repository - Shell\nDESCRIPTION: This shell command pushes all local commits to the configured upstream remote (typically 'origin') and branch. It requires network access to the remote git server and an initialized git repository. The primary output is updated remote branch state; limitations depend on authentication and permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ngit push\n```\n\n----------------------------------------\n\nTITLE: Viewing CI Workflow Definition\nDESCRIPTION: Shell command to view the contents of the CI workflow file created by the AppClaim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ncat .github/workflows/ci.yaml\n```\n\n----------------------------------------\n\nTITLE: Blog Post Header in Hugo Format\nDESCRIPTION: Front matter configuration for a Hugo blog post, defining the title, publication date, and draft status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/top-10-devops-tools-you-must-use-in-2025/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = 'Top 10 DevOps Tools You MUST Use in 2025!'\ndate = 2025-01-06T14:00:00+00:00\ndraft = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Specific Version\nDESCRIPTION: This code builds and pushes a Docker image for version v0.0.1, targeting both AMD64 and ARM64 platforms.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndocker image build --tag ${IMAGE}:v0.0.1 \\\n    --platform linux/amd64,linux/arm64 --push .\n```\n\n----------------------------------------\n\nTITLE: Applying Argo CD ApplicationSet to Kubernetes\nDESCRIPTION: Command to apply the ApplicationSet configuration to the Argo CD namespace in Kubernetes, which creates the application definitions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace argocd apply --filename application-set.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Specific Module Output in Starship\nDESCRIPTION: Uses the starship module command to show the output of a specific module (nix_shell) for debugging or understanding purposes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nstarship module nix_shell\n```\n\n----------------------------------------\n\nTITLE: Comparing StatefulSet YAML Files in Kubernetes\nDESCRIPTION: This shell command shows the difference between two StatefulSet YAML files, highlighting the change in the number of replicas.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\ndiff statefulset/base.yaml statefulset/replicas.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying eza Help Information - Shell Script\nDESCRIPTION: Calls eza with the --help flag to display a full help text with explanations for all options and usage. This is useful for exploring available features or troubleshooting invocation problems. Requires eza installed. Input is the command; output is usage documentation printed to the terminal.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\neza --help\n```\n\n----------------------------------------\n\nTITLE: Listing Available Velero Backups using kubectl\nDESCRIPTION: Uses `kubectl` to query Velero backup custom resources (`backups.velero.io`) within the `velero` namespace in the cluster specified by `kubeconfig-dot2.yaml`. This checks if backups created previously (potentially by another cluster using the same storage) are accessible.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml \\\n    --namespace velero get backups.velero.io\n```\n\n----------------------------------------\n\nTITLE: Displaying Generated Dev Container Dockerfile in Shell\nDESCRIPTION: This shell command uses `cat` to output the content of the `.devcontainer/Dockerfile`. This file contains the instructions used to build the Docker image for the Dev Container environment, often generated automatically by tools like Devbox based on project dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ncat .devcontainer/Dockerfile\n```\n\n----------------------------------------\n\nTITLE: Activating Development Environment with Devbox in Shell\nDESCRIPTION: This command initiates a Devbox shell session. It utilizes the 'devbox.json' file within the current directory ('idp-full-demo') to configure a development environment with all the required tools (like Nushell, potentially Docker client, etc.) needed for the project, isolating dependencies and ensuring reproducibility. Requires Devbox to be installed and Docker to be running as noted in the surrounding text.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Pages in Hugo Documentation\nDESCRIPTION: Hugo shortcode that renders child pages of the current page, sorted by date, with descriptions displayed and styled as h2 headers. This creates a table of contents for container-related documentation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Creating Directory for Application Manifests in Shell\nDESCRIPTION: This shell command creates a new directory named `apps` in the current working directory. It is used to organize files related to third-party applications or infrastructure within the project repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nmkdir apps\n```\n\n----------------------------------------\n\nTITLE: Viewing Kargo Manifests in GitHub Repository\nDESCRIPTION: This command opens the manifests.yaml file in the GitHub repository, showing how Kargo manages the deployment configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\ngh browse --repo $GITHUB_ORG/kargo-demo \\\n    --branch stage/dev manifests.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning Demo Repository using Git\nDESCRIPTION: Clones the `argo-rollouts-demo` repository from GitHub using the `git clone` command and then changes the current directory to the newly cloned repository folder using `cd`. This is the initial step required to obtain the necessary files for the demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/argo-rollouts-demo\n\ncd argo-rollouts-demo\n```\n\n----------------------------------------\n\nTITLE: Cloning a Project Repository for Zellij Workflow - Shell\nDESCRIPTION: This snippet shows how to clone the crossplane-kubernetes GitHub repository, which is integral to following the Zellij demonstration. It requires git to be installed on the system. The command retrieves the complete repository and prepares it locally for further operations. The output is a local directory named crossplane-kubernetes with the project's contents.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-kubernetes\n```\n\n----------------------------------------\n\nTITLE: Displaying Multiple Kargo Stage Manifests with Shell Globbing\nDESCRIPTION: This shell command uses 'cat' with a glob pattern to display the contents of all Kargo Stage manifest files matching 'stage-*.yaml'. Intended for batch inspection of stage definitions prior to application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncat kargo-manifests/stage-*.yaml\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Environment\nDESCRIPTION: These commands restore original configuration files, effectively undoing the changes made by the synchronization script.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nmv ~/.zshrc-orig ~/.zshrc\n\nmv ~/.config/starship.toml-orig ~/.config/starship.toml\n\nmv ~/.config/fabric-orig ~/.config/fabric\n```\n\n----------------------------------------\n\nTITLE: Defining a Kargo Project Resource in YAML for Kubernetes\nDESCRIPTION: This YAML manifest defines a Kargo 'Project' with a promotion policy for the 'dev' stage with automatic promotion enabled. It is intended to be applied to a Kubernetes cluster using kubectl. It requires Akuity's Kargo CRDs installed in the cluster, and key parameters include 'promotionPolicies' for auto-promotion behavior. The output is creation of the Project resource in the specified Namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: kargo.akuity.io/v1alpha1\\nkind: Project\\nmetadata:\\n  name: silly-demo\\nspec:\\n  promotionPolicies:\\n    - stage: dev\\n      autoPromotionEnabled: true\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Zsh Syntax Highlighting for Valid Commands and Arguments\nDESCRIPTION: This snippet shows the command `echo \"What is this?\"` being typed. It demonstrates how the `zsh-syntax-highlighting` plugin colors valid commands (like `echo`) and their arguments differently (e.g., command green, string yellow), improving readability.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\necho \"What is this?\"\n```\n\n----------------------------------------\n\nTITLE: Modifying Application Resource to Enable Scaling\nDESCRIPTION: Shell command using yq to update the application manifest to enable scaling, addressing the first policy requirement.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nyq --inplace \".spec.parameters.scaling.enabled = true\" \\\n    apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Available Devbox Scripts\nDESCRIPTION: Command to list all scripts defined in the devbox.json configuration file, which can be executed with 'devbox run'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ndevbox run --list\n```\n\n----------------------------------------\n\nTITLE: Output Showing Pending Persistent Volume Claim Status\nDESCRIPTION: This output shows the status of the 'silly-demo' Persistent Volume Claim (PVC) after creation. The 'Pending' status indicates that the volume binding mode is likely 'WaitForFirstConsumer' and the volume hasn't been provisioned yet because no pod is using it.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: text\nCODE:\n```\nNAME       STATUS  VOLUME CAPACITY ACCESS MODES STORAGECLASS VOLUMEATTRIBUTESCLASS AGE\nsilly-demo Pending                              managed      <unset>               7s\n```\n\n----------------------------------------\n\nTITLE: Defining an Argo CD Application - YAML\nDESCRIPTION: This snippet provides a sample YAML manifest for creating an Argo CD Application resource in a Kubernetes cluster. The manifest defines the sync target (repo URL, revision, path), destination (cluster server and namespace), and synchronization policy with options for self-healing, pruning, and empty states. This YAML should be applied with kubectl or Argo CD and assumes Argo CD has been installed in the cluster, with necessary access to the referenced Git repository. Replace appropriate fields (e.g., repoURL, paths) based on your setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: silly-demo\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/vfarcic/velero-demo\n    targetRevision: HEAD\n    path: app/overlays/full\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: a-team\n  syncPolicy:\n    automated:\n      selfHeal: true\n      prune: true\n      allowEmpty: true\n```\n\n----------------------------------------\n\nTITLE: Extracting Region Parameter in KCL Function\nDESCRIPTION: This KCL snippet demonstrates how to extract a parameter (`region`) from the observed composite resource (`oxr`) within the KCL function. It sets a default value for `_region` (`us-east-1`) and then conditionally overrides it with the value from `oxr.spec.parameters.region` if it exists. The surrounding `...` indicates this code is part of the larger `main.k` file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: kcl\nCODE:\n```\n...\n}\n\n_region = \"us-east-1\"\nif oxr.spec?.parameters?.region:\n    _region = oxr.spec.parameters.region\n\n_items = [\n...\n```\n\n----------------------------------------\n\nTITLE: Initiating Zsh History Substring Search\nDESCRIPTION: This snippet shows typing `docker container` in the Zsh prompt. It sets the stage for using the `zsh-history-substring-search` plugin. By pressing the Up (`↑`) or Down (`↓`) arrow keys, the user can cycle through commands in history that contain the substring `docker container`, starting with the most recent matches.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndocker container\n```\n\n----------------------------------------\n\nTITLE: Switching Git Branch\nDESCRIPTION: Switches the current Git branch to 'main' using the 'git checkout' command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Session (Shell)\nDESCRIPTION: Initiates a Devbox shell session. Devbox is used to manage development environments, and entering its shell makes specific tools available.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Deleting a Neon Branch - Shell\nDESCRIPTION: This code snippet shows how to permanently delete a Neon database branch using the 'neonctl branches delete' command. The command requires the name of the branch to delete and will remove the branch from the Neon environment, releasing its resources. This irreversible operation ensures that no experimental state remains unless otherwise saved.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nneonctl branches delete dev/john-doe\n```\n\n----------------------------------------\n\nTITLE: Removing Kubernetes Context in Starship\nDESCRIPTION: Deletes the kind cluster to demonstrate how Starship removes Kubernetes context information when no cluster is available.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n```\n\n----------------------------------------\n\nTITLE: Checking Clusterpedia Cluster Status After Configuration (Shell)\nDESCRIPTION: This command uses `kubectl` to again retrieve the list of clusters known by Clusterpedia. After applying the `PediaCluster` definitions, this command should now list the configured clusters (`dot-01`, `dot-02`, `dot-03`) and their status.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get pediacluster\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME   READY VERSION APISERVER\ndot-01 True  v1.28.5 https://dot-01-dot-...azmk8s.io:443\ndot-02 True  v1.28.5 https://dot-02-dot-...azmk8s.io:443\ndot-03 True  v1.28.5 https://dot-03-dot-...azmk8s.io:443\n```\n\n----------------------------------------\n\nTITLE: Destroying Resources and Environment Cleanup - Shell\nDESCRIPTION: Performs a sequence of shell commands to destroy resources managed by dot.nu, switch to the main git branch, and exit the shell. Intended for cleanup and returning the development environment to its default state after resource experimentation. Depends on the presence of dot.nu and a git repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n./dot.nu destroy\n\ngit switch main\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Development Environment\nDESCRIPTION: Command to initialize a Devbox shell environment. Devbox is used to ensure all required development dependencies are available without manual installation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: KCL Command-Line Interface Help Output (Text)\nDESCRIPTION: This text block shows the output generated by the `kcl --help` command. It lists the available subcommands for the KCL CLI, such as `run`, `fmt`, `lint`, `mod` (for module management), `import` (for converting other formats to KCL), `test`, `vet`, and others, providing a brief description for each.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\nThe KCL Command Line Interface (CLI).\n\nKCL is an open-source, constraint-based record and functional language that\nenhances the writing of complex configurations, including those for cloud-native\nscenarios. The KCL website: https://kcl-lang.io\n\nUsage:\n  kcl [command]\n\nAvailable Commands:\n  clean       KCL clean tool\n  completion  Generate the autocompletion script for the specified shell\n  doc         KCL document tool\n  fmt         KCL format tool\n  help        Help about any command\n  import      KCL import tool\n  lint        Lint KCL codes.\n  mod         KCL module management\n  play        Open the kcl playground in the browser.\n  registry    KCL registry management\n  run         Run KCL codes.\n  server      Run a KCL server\n  test        KCL test tool\n  version     Show version of the KCL CLI\n  vet         KCL validation tool\n\nFlags:\n  -h, --help      help for kcl\n  -v, --version   version for kcl\n\nUse \"kcl [command] --help\" for more information about a command.\n```\n\n----------------------------------------\n\nTITLE: Cloning Repository and Changing Directory (Shell)\nDESCRIPTION: Clones the `dotfiles-demo` repository from GitHub and then changes the current directory into the newly cloned repository folder. This sets up the working directory for subsequent commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/dotfiles-demo\n\ncd dotfiles-demo\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Namespaces\nDESCRIPTION: Command to list all namespaces in the Kubernetes cluster, showing the various components of the environment including atlas-operator, contour, crossplane-system, and others.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespaces\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the IDP Full Demo Repository\nDESCRIPTION: Commands to clone the demo repository, navigate to the relevant branch, and prepare the development environment. These steps initialize the demo environment for the application setup process.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/idp-full-demo\n\ncd idp-full-demo\n\ngit fetch\n\ngit checkout apps\n```\n\n----------------------------------------\n\nTITLE: Viewing Logs from a Completed Job\nDESCRIPTION: Command to retrieve logs from the pod created by the Job, even after the pod has completed execution, using selector labels.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_52\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team logs \\\n    --selector app.kubernetes.io/name=silly-demo\n```\n\n----------------------------------------\n\nTITLE: Checking Tool Availability\nDESCRIPTION: Command to verify if a specific tool (timoni) is available in the system path\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nwhich timoni\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Demo Environment\nDESCRIPTION: Script to clone the 'silly-demo' repository and checkout the 'sigterm' branch to demonstrate graceful shutdown implementation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/silly-demo\n\ncd silly-demo\n\ngit checkout sigterm\n```\n\n----------------------------------------\n\nTITLE: Retrieving RuntimeRuleAlertBinding in Kubernetes\nDESCRIPTION: This command retrieves the 'all-rules-all-pods' RuntimeRuleAlertBinding resource from Kubernetes and outputs it in YAML format. It demonstrates how to view the configured rules for Kubescape.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get \\\n    runtimerulealertbindings.kubescape.io all-rules-all-pods \\\n    --output yaml\n```\n\n----------------------------------------\n\nTITLE: Navigating Back to Main Repository\nDESCRIPTION: Shell command to change directory back to the parent directory before proceeding to the next section.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Adding Changes to Staging - Shell\nDESCRIPTION: This simple shell command stages all modified, deleted, and new files in the current git repository for the next commit. It works with any git repository and does not require additional configuration. The input is implicitly all working directory changes; the output is an updated staging area in git. It's most commonly run prior to 'git commit'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: Content-Based Fuzzy Search for Image Tags - Karpor Dashboard - SQL\nDESCRIPTION: This SQL snippet retrieves all Kubernetes resources whose underlying content contains the substring 'silly-demo:1.4.327', useful when the image reference is not in a predictable field. The 'contains' function allows for deep, field-agnostic queries. Input is the target content string; output is a list of resources (e.g., Deployments) that specify the search term within any content field.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nwhere contains(content, 'silly-demo:1.4.327')\n```\n\n----------------------------------------\n\nTITLE: Running netstat for Active Connection Inspection (sh)\nDESCRIPTION: This shell snippet demonstrates the use of the 'netstat' command to list all active network connections on a system. 'netstat' is a standard Unix utility that shows protocol statistics and current TCP/UDP connections. No additional dependencies are needed beyond a standard Linux distribution; the command outputs connection details such as protocol, addresses, port numbers, and states.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnetstat\n```\n\n----------------------------------------\n\nTITLE: Displaying Devbox Configuration File Content using Shell\nDESCRIPTION: This command uses the `cat` utility in a shell environment to display the contents of the `devbox.json` file. This file defines the packages, shell hooks, and scripts for the Devbox development environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat devbox.json\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Deployment and PVC\nDESCRIPTION: Shell command to delete the previously applied PersistentVolumeClaim and Deployment from the Kubernetes cluster in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --filename deployment/volume.yaml\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resource Creation (Shell)\nDESCRIPTION: This command utilizes the `crossplane beta trace` utility to monitor the status and relationships of Kubernetes resources associated with the `ClusterClaim` named `cluster` within the `a-team` namespace. It provides a hierarchical view of the resources being created or managed by Crossplane as part of fulfilling the `ClusterClaim`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace clusterclaim cluster --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Sending Data to Application via POST Request (2)\nDESCRIPTION: Similar to the previous command, this uses curl to send another HTTP POST request to store additional data (video ID 2 with title 'else') in the application's persistent volume. Requires the INGRESS_HOST environment variable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST \\\n    \"http://silly-demo.$INGRESS_HOST.nip.io/video?id=2&title=else\"\n```\n\n----------------------------------------\n\nTITLE: Inserting Data into Application via API (Shell/cURL)\nDESCRIPTION: These `curl` commands send HTTP POST requests to the `/video` endpoint of the deployed `silly-demo` application (accessed via its Ingress hostname `silly-demo.127.0.0.1.nip.io`). They instruct the application to insert two separate video records into the connected Neon database branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \"http://silly-demo.127.0.0.1.nip.io/video?id=1&title=something\"\n```\n\nLANGUAGE: sh\nCODE:\n```\ncurl -X POST \"http://silly-demo.127.0.0.1.nip.io/video?id=2&title=else\"\n```\n\n----------------------------------------\n\nTITLE: Setting Cluster Type for Kubernetes Deployment\nDESCRIPTION: Command to set an environment variable for the desired Kubernetes cluster type (eks, gke, or aks).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport CLUSTER_TYPE=[...]\n```\n\n----------------------------------------\n\nTITLE: Explaining the Current Prompt in Starship\nDESCRIPTION: Uses the starship explain command to get a detailed breakdown of what each part of the current prompt represents.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nstarship explain\n```\n\n----------------------------------------\n\nTITLE: Cloning and Preparing the IDP Demo Repository\nDESCRIPTION: Commands to clone the idp-full-demo repository, navigate to the directory, update it, and switch to the 'full' branch for the complete demo.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/idp-full-demo\n\ncd idp-full-demo\n\ngit pull\n\ngit fetch\n\ngit switch full\n```\n\n----------------------------------------\n\nTITLE: Displaying Prompt with 'tokyo-night' Preset (Text)\nDESCRIPTION: Shows the example shell prompt after applying the 'tokyo-night' Starship preset. It presents information with a specific dark color palette and icons, offering a slightly more minimalistic look than pastel-powerline.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\n░▒▓   …/dotfiles-demo   main   20:03 \n❯\n```\n\n----------------------------------------\n\nTITLE: Displaying PediaCluster Definition for dot-02 (YAML)\nDESCRIPTION: This command displays the content of the `pediaclusters/dot-02.yaml` file. This file defines a `PediaCluster` for the `dot-02` cluster. It references the `common` sync resources and adds specific `syncResources` rules to synchronize all resources (`*`) from the `apps`, core (`\"\"`), `networking.k8s.io`, `azure.upbound.io`, and `dbforpostgresql.azure.upbound.io` API groups.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat pediaclusters/dot-02.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.clusterpedia.io/v1alpha2\nkind: PediaCluster\nmetadata:\n  name: dot-02\nspec:\n  kubeconfig: ...\n  syncResourcesRefName: common\n  syncResources:\n    - group: \"apps\"\n      resources:\n        - \"*\"\n    - group: \"\"\n      resources:\n        - \"*\"\n    - group: \"networking.k8s.io\"\n      resources:\n        - \"*\"\n    - group: \"azure.upbound.io\"\n      resources:\n        - \"*\"\n    - group: \"dbforpostgresql.azure.upbound.io\"\n      resources:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Crossplane Application Demo Repository\nDESCRIPTION: Commands for cloning the crossplane-app repository, switching to the v2 branch, and preparing the environment for the demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-app\n\ncd crossplane-app\n\ngit pull\n\ngit fetch\n\ngit switch v2\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub Pull Request Files\nDESCRIPTION: Command to examine files created in a Pull Request that was automatically generated by Crossplane to set up CI workflows.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ngh pr view silly-demo-ci --json files\n```\n\n----------------------------------------\n\nTITLE: Pulling Updated Changes from GitHub\nDESCRIPTION: Pulls the latest changes from the GitHub repository after the CI pipeline has completed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\ngit pull\n```\n\n----------------------------------------\n\nTITLE: Testing Gateway API Configuration with cURL\nDESCRIPTION: This command sends an HTTP GET request to the configured hostname to test the Gateway API routing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_49\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.$EXTERNAL_IP.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Database Claim Manifest Content in Shell\nDESCRIPTION: This shell command uses `cat` to output the contents of the `silly-demo-db.yaml` file located in the `apps` directory. This allows viewing the Crossplane `SQLClaim` definition before applying it.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncat apps/silly-demo-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Destroying and Cleaning Up Project\nDESCRIPTION: This bash script exits the current shell session and checks out the main branch of the git repository, effectively cleaning up the project environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nexit\n\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Re-displaying AWS Chainsaw Test File for Catch Block Context using Shell\nDESCRIPTION: This command uses 'cat' again to display the content of the 'tests/aws/chainsaw-test.yaml' file. The context here is to examine the test structure, specifically looking for 'catch' blocks used for handling test failures.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncat tests/aws/chainsaw-test.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating and Switching Git Branch (Shell)\nDESCRIPTION: Creates a new Git branch named 'something' and switches the current working directory to it. This action is expected to be reflected in a Git-aware prompt.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout -b something\n```\n\n----------------------------------------\n\nTITLE: Managing GitHub Repositories with GitHub CLI in Bash\nDESCRIPTION: Shows how to use GitHub CLI (gh) to perform various GitHub operations from the command line, including forking repositories, setting default remotes, and opening repositories in a web browser.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ngh repo fork vfarcic/dotfiles --clone --remote\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd dotfiles\n```\n\nLANGUAGE: sh\nCODE:\n```\ngh repo set-default\n```\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view --web\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Applying ClusterAnalysisTemplate with kubectl\nDESCRIPTION: This shell command applies the ClusterAnalysisTemplate defined in the 'cluster-analysis-template.yaml' file to the Kubernetes cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename cluster-analysis-template.yaml\n```\n\n----------------------------------------\n\nTITLE: Generating GitHub Repository Settings URL\nDESCRIPTION: Creates a URL for accessing the GitHub repository settings. This is used to manually configure workflow permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_36\n\nLANGUAGE: sh\nCODE:\n```\necho \"https://github.com/$GITHUB_USER/idp-full-app/settings/actions\"\n```\n\n----------------------------------------\n\nTITLE: Comparing Deployment and DaemonSet YAML Manifests\nDESCRIPTION: Shows the differences between Deployment and DaemonSet manifests using the diff command, highlighting that DaemonSets don't need replica specifications since they automatically run one pod per node.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\ndiff deployment/base.yaml daemonset/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Running a Detached Nginx Container with Docker\nDESCRIPTION: This command runs an Nginx container in detached mode (`--detach`) and names it `nginx`. It primarily serves to demonstrate `zsh-syntax-highlighting` on a more complex command and adds this specific command to the shell history for use in subsequent plugin demonstrations (autosuggestions, history search). Requires Docker to be running.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker container run --detach --name nginx nginx\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Requests for Verification (Shell)\nDESCRIPTION: This shell code uses 'curl' to send an HTTP request to the service ingress, accepting ride-along the dynamic INGRESS_HOST variable. Dependencies include network connectivity and the curl CLI. Input is a constructed URL string; output is printed to stdout, commonly used to verify the application is running and responding as expected.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\ncurl \"http://egulliksen.silly-demo.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Committing Changes to the Git Repository - Shell\nDESCRIPTION: This shell command creates a git commit with the provided commit message ('Is it working?') for all files staged in the git index. Dependency: a git repository with staged changes. The main parameter is the commit message, and the output is the creation of a new commit in the git history. Limitations: does not add files automatically; use 'git add' beforehand.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"Is it working?\"\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container without Signal Handling (sh)\nDESCRIPTION: This command starts the `silly-demo` Docker container in interactive mode (`-it`), removes it on exit (`--rm`), maps host port 8080 to container port 8080 (`-p`), names it `silly-demo`, and sets the `NO_SIGNALS=true` environment variable to disable graceful shutdown handling in the application. It uses the specified image version.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndocker container run --interactive --tty --rm --publish 8080:8080 \\\n    --name silly-demo --env NO_SIGNALS=true ghcr.io/vfarcic/silly-demo:1.4.178\n```\n\n----------------------------------------\n\nTITLE: Compound Search: Name Pattern, Namespace and Kind Filtering - Karpor Dashboard - SQL\nDESCRIPTION: This SQL query combines a fuzzy name search with namespace and resource kind filters to retrieve all Pod resources whose names contain 'silly' within the 'production' namespace, across all clusters in Karpor. Use this in the dashboard to focus your search on specific resource types and locations. Inputs include name pattern, target namespace, and kind; output is a narrowed list matching all conditions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nwhere name like '%silly%' and namespace = 'production' and kind = 'Pod'\n```\n\n----------------------------------------\n\nTITLE: Displaying Content of Mounted ConfigMap File\nDESCRIPTION: This shell command outputs the content of the 'videos.yaml' file from the mounted ConfigMap in the 'silly-demo' container, demonstrating how ConfigMap data is stored as files.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- cat /cache/videos.yaml \\\n    | yq .\n```\n\n----------------------------------------\n\nTITLE: Constructing Frontend URL using Ingress Host (Shell)\nDESCRIPTION: This command uses `echo` to print the full URL for accessing the frontend application. It dynamically constructs the URL using the 'staging.silly-demo-frontend.' prefix and an environment variable `$INGRESS_HOST` which should contain the external IP or hostname managed by the Ingress controller.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://staging.silly-demo-frontend.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Setting KubeVela Environment\nDESCRIPTION: Command to set the current KubeVela environment to 'dev', which affects where applications will be deployed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nvela env set dev\n```\n\n----------------------------------------\n\nTITLE: Deleting Neon Database Branch (Shell)\nDESCRIPTION: This command uses the `neonctl` CLI tool to delete the Neon database branch named `dev/jane-doe`. This removes the isolated database environment created earlier for development or testing purposes, completing the cleanup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nneonctl branches delete dev/jane-doe\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resources Status\nDESCRIPTION: Command to check the status of Crossplane resources to ensure they are available before proceeding with the workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncrossplane beta trace --namespace a-team appclaim silly-demo\n```\n\n----------------------------------------\n\nTITLE: Displaying GitHub Actions CI Workflow Definition (sh)\nDESCRIPTION: Uses the `cat` command to display the contents of the GitHub Actions CI workflow file located at `.github/workflows/ci.yaml`. This allows examination of the steps involved in the CI process.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncat .github/workflows/ci.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Neon Database Branches using Neon CLI\nDESCRIPTION: Lists all database branches in the Neon project using the Neon CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nneonctl branches list\n```\n\n----------------------------------------\n\nTITLE: Retrieving ApplicationProfile Details in Kubernetes\nDESCRIPTION: This command retrieves the details of a specific ApplicationProfile in the 'a-team' namespace and outputs it in YAML format. It uses the previously set environment variable for the profile name.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get applicationprofile $PROFILE_NAME \\\n    --output yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Help for kubectl gadget (Shell)\nDESCRIPTION: Executes the `kubectl gadget` command with the `--help` flag to list all available top-level subcommands and their brief descriptions. This is useful for discovering the tool's capabilities.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget --help\n```\n\n----------------------------------------\n\nTITLE: Querying Deployments in a Specific Namespace Across Clusters with kubectl and Clusterpedia (Shell)\nDESCRIPTION: This command retrieves all deployments in the 'a-team' namespace across all clusters monitored by Clusterpedia. It leverages the --namespace parameter with kubectl and Clusterpedia, requiring Clusterpedia's sync configuration to include deployments for the given namespace. Results show deployments for all clusters in the specified namespace. Ensure correct namespace and sufficient permissions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia --namespace a-team get deployments\n```\n\n----------------------------------------\n\nTITLE: Production Resources Output\nDESCRIPTION: The output shows all Kubernetes resources created in the production environment, highlighting differences from the development environment such as increased replica count and different host configuration. It also shows error states related to missing database dependencies.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nNAME                              READY   STATUS                       RESTARTS   AGE\npod/silly-demo-7bc9d88df7-4gzkd   0/1     CreateContainerConfigError   0          3m31s\npod/silly-demo-7bc9d88df7-vhxgm   0/1     CreateContainerConfigError   0          3m46s\n\nNAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nservice/silly-demo   ClusterIP   10.96.99.182   <none>        8080/TCP   3m46s\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/silly-demo   0/2     2            0           3m46s\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/silly-demo-7bc9d88df7   2         2         0       3m46s\n\nNAME                                             REFERENCE               TARGETS                                     MINPODS   MAXPODS   REPLICAS   AGE\nhorizontalpodautoscaler.autoscaling/silly-demo   Deployment/silly-demo   cpu: <unknown>/80%, memory: <unknown>/80%   2         5         2          3m46s\n\nNAME                                   CLASS   HOSTS                         ADDRESS     PORTS   AGE\ningress.networking.k8s.io/silly-demo   nginx   silly-demo.127.0.0.1.nip.io   localhost   80      3m46s\n```\n\n----------------------------------------\n\nTITLE: Configuring Zsh History Substring Search Keybindings and Menu Selection\nDESCRIPTION: This shell command appends configuration settings to the user's `.zshrc` file. It binds the Up and Down arrow keys (represented by '^[[A' and '^[[B') to the `history-substring-search-up` and `history-substring-search-down` functions respectively, enabling searching through history based on the currently typed substring. It also enables menu selection for Zsh's completion system.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\necho \"\nbindkey '^[[A' history-substring-search-up\nbindkey '^[[B' history-substring-search-down\nzstyle ':completion:*' menu yes select\n\" | tee -a ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Listing Files with Custom Alias in Default ls Command - Shell Script\nDESCRIPTION: After configuring an alias, running ls now actually invokes eza with the pre-selected set of options, producing a colored listing with Git statuses and minimal metadata. Inputs are directory contents; outputs are informative, color-coded listings. This is meant to replace all standard invocations of ls for the user.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Committing Changes in Git using Shell\nDESCRIPTION: Commits the staged changes with a commit message.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: sh\nCODE:\n```\ngit commit -m \"Not yet fancy\"\n```\n\n----------------------------------------\n\nTITLE: Running Go Application Without Signal Handling\nDESCRIPTION: This snippet shows how to run a Go application without implementing signal handling, using an environment variable to disable signal processing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nNO_SIGNALS=true go run .\n```\n\n----------------------------------------\n\nTITLE: Searching for Devbox Packages Containing 'task' using Shell\nDESCRIPTION: This command attempts to find packages related to 'task' using `devbox search`. The example highlights a limitation where it fails to find the desired 'go-task' package, suggesting the search might primarily match package names that *start with* the keyword, rather than contain it anywhere.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ndevbox search task\n```\n\n----------------------------------------\n\nTITLE: Sending a Request to an Application in Kubernetes\nDESCRIPTION: Command to send a request to the 'silly-demo' application running in Kubernetes, asking it to calculate the Fibonacci number for 50.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.127.0.0.1.nip.io/fibonacci?number=50\"\n```\n\n----------------------------------------\n\nTITLE: Running a Task in Watch Mode (Shell)\nDESCRIPTION: Executes the `test-watch` task using the `task` command. Since the task definition includes `watch: true`, this command initiates a persistent process. It monitors the files specified in the task's `sources` and `generates` fields and automatically re-runs the task's dependencies (`deps`) and commands (`cmds`) whenever changes are detected. Requires the `task` binary and a `Taskfile.yaml` defining the `test-watch` task.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\ntask test-watch\n```\n\n----------------------------------------\n\nTITLE: Setting Debug Log Level for Backstage\nDESCRIPTION: This command sets the LOG_LEVEL environment variable to 'debug' for more detailed logging output when running Backstage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nexport LOG_LEVEL=debug\n```\n\n----------------------------------------\n\nTITLE: Viewing Argo Rollout Status After Abort (text)\nDESCRIPTION: Displays the output from Argo Rollouts after aborting the `silly-demo` deployment (revision 3). It shows the status is 'Degraded', indicating the rollback process. The system reverts traffic fully to the previous stable version (revision 2, image 1.4.127) by scaling it up, and scales down the aborted canary version (revision 3).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nName:            silly-demo\nNamespace:       a-team\nStatus:          ✖ Degraded\nMessage:         RolloutAborted: Rollout aborted update to revision 3\nStrategy:        Canary\n  Step:          0/8\n  SetWeight:     0\n  ActualWeight:  0\nImages:          ghcr.io/vfarcic/silly-demo:1.4.127 (stable)\nReplicas:\n  Desired:       5\n  Current:       5\n  Updated:       0\n  Ready:         5\n  Available:     5\n\nNAME                                    KIND        STATUS        AGE   INFO\n⟳ silly-demo                            Rollout     ✖ Degraded    103m\n├──# revision:3\n│  └──⧉ silly-demo-6b8dbddd4b           ReplicaSet  • ScaledDown  24m   canary\n├──# revision:2\n│  └──⧉ silly-demo-5d574b5f4f           ReplicaSet  ✔ Healthy     100m  stable\n│     ├──□ silly-demo-5d574b5f4f-jq459  Pod         ✔ Running     100m  ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-ffmxr  Pod         ✔ Running     97m   ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-xxfrp  Pod         ✔ Running     97m   ready:2/2\n│     ├──□ silly-demo-5d574b5f4f-8tqtl  Pod         ✔ Running     97m   ready:2/2\n│     └──□ silly-demo-5d574b5f4f-f8rhm  Pod         ✔ Running     13s   ready:2/2\n└──# revision:1\n   └──⧉ silly-demo-5c5547db68           ReplicaSet  • ScaledDown  103m\n```\n\n----------------------------------------\n\nTITLE: Searching Devbox Packages Starting with 'kubernetes' using Shell\nDESCRIPTION: This command uses `devbox search` to find packages whose names start with 'kubernetes'. This search successfully lists 'kubernetes-helm', reinforcing the observation that knowing the beginning of the package name (or a significant part of it) is often necessary for effective searching with `devbox search`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ndevbox search kubernetes\n```\n\n----------------------------------------\n\nTITLE: Listing All Helm Template YAML Files - Shell\nDESCRIPTION: This snippet uses a shell command to list or concatenate all YAML resource templates in a Helm chart's templates directory. It is typically used to preview the aggregated manifests that will be rendered or applied when deploying the Helm chart. No dependencies beyond standard shell and filesystem access are needed. The output is the concatenated YAML definitions for the Helm chart's resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncat chart/templates/*.yaml\n```\n\n----------------------------------------\n\nTITLE: Running a Temporary Detached Alpine Container with Docker\nDESCRIPTION: This command runs an Alpine Linux container in detached mode (`--detach`), names it `alpine`, automatically removes it upon exit (`--rm`), and makes it sleep for 1 second before exiting. This is used to illustrate `zsh-syntax-highlighting` and populates the command history for demonstrating `zsh-autosuggestions` and `zsh-history-substring-search`. Requires Docker to be running.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker container run --rm --detach --name alpine alpine sleep 1\n```\n\n----------------------------------------\n\nTITLE: Output Confirming File Persistence in New Pod\nDESCRIPTION: This output shows the contents of the '/cache' directory in the new pod. The presence of 'videos.yaml', identical to the output before pod deletion, confirms that the data persisted on the Persistent Volume and was remounted by the new pod.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: text\nCODE:\n```\nlost+found videos.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Service Action JSON in Port\nDESCRIPTION: Example JSON configuration for a self-service action in Port, showing the structure of a CREATE operation for SQLClaim with user input properties. The snippet demonstrates how to configure field visibility and input parameters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"identifier\": \"create_sqlclaim\",\n  ...\n  \"trigger\": {\n    \"type\": \"self-service\",\n    \"operation\": \"CREATE\",\n    \"userInputs\": {\n      \"properties\": {\n        ...\n        \"compositionRef__name\": {\n          \"type\": \"string\",\n          \"visible\": true\n        },\n        ...\n\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Pods in Namespace with Kubectl (sh)\nDESCRIPTION: Uses the Kubernetes command-line tool (`kubectl`) to retrieve and list all pods within the 'a-team' namespace. This helps verify that Argo CD has detected the manifest change in Git and deployed new application pods accordingly, indicated by their recent `AGE`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get pods\n```\n\n----------------------------------------\n\nTITLE: Testing Deployed Application with cURL\nDESCRIPTION: This command sends a HTTP request to the deployed application to verify its functionality and version.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.dev.127.0.0.1.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: GPU Node Taint JSON Output\nDESCRIPTION: Sample JSON output showing the NoSchedule taint applied to GPU nodes in Kubernetes, indicating that pods must have specific tolerations to be scheduled on these nodes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"effect\": \"NoSchedule\",\n  \"key\": \"nvidia.com/gpu\",\n  \"value\": \"present\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Resource Cleanup Script\nDESCRIPTION: Contains two shell commands. The first (`chmod +x destroy.sh`) makes the `destroy.sh` script executable. The second (`./destroy.sh`) runs the script, presumably to tear down the infrastructure and resources created earlier in the demo or project. Requires the `destroy.sh` script to be present in the current directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.sh\n\n./destroy.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: This command lists all the Docker images that have been built, showing their repository, tag, image ID, creation time, and size.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Dry Run Task Execution\nDESCRIPTION: Command to perform a dry run of a task to preview what would be executed without actually running the commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ntask cluster-create --dry\n```\n\n----------------------------------------\n\nTITLE: Initializing Crossplane Project\nDESCRIPTION: Creates a new Crossplane project named silly-demo using the Upbound CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nup project init silly-demo\n```\n\n----------------------------------------\n\nTITLE: Executing Setup Script and Loading Environment Variables using Shell\nDESCRIPTION: This sequence of shell commands first makes the `dot.nu` script executable using `chmod +x`. It then executes this setup script (`./dot.nu setup`), which likely configures the demo environment. Finally, it loads environment variables defined in the `.env` file (presumably created or populated by the setup script) into the current shell session using the `source` command. This completes the environment preparation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x dot.nu\n\n./dot.nu setup\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Verifying Application Status After Fix\nDESCRIPTION: Checking the status of the Application resource after applying the fix, showing it's now active and synced.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get applications\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME         STATE    SYNCED   AGE\nsilly-demo   ACTIVE   True     4m26s\n```\n\n----------------------------------------\n\nTITLE: Starting Zellij with Custom Layout\nDESCRIPTION: Launches a new Zellij session named 'crossplane-kubernetes' using a custom layout defined in 'test-layout.kdl'.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nzellij --session crossplane-kubernetes --layout test-layout.kdl\n```\n\n----------------------------------------\n\nTITLE: Applying PediaCluster Definitions (Shell)\nDESCRIPTION: This command applies all YAML files located in the `pediaclusters` directory. This creates the `PediaCluster` resources in the management cluster, instructing Clusterpedia to start syncing resources from the specified clusters (`dot-01`, `dot-02`, `dot-03`) based on their respective configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nkubectl apply --filename pediaclusters\n```\n\n----------------------------------------\n\nTITLE: Destroying Kubescape Deployment with Shell Commands\nDESCRIPTION: A simple shell script execution sequence to run the destroy script that cleans up the Kubescape deployment. The script makes the destroy.sh file executable and then runs it before exiting the session.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.sh\n\n./destroy.sh\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Hugo Front Matter Configuration for Cloud Section\nDESCRIPTION: Defines the Hugo front matter for the cloud section page with title, weight, and visibility settings. The configuration establishes this as the Cloud section with a weight of 100 in the navigation hierarchy.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = \"Cloud\"\nweight = 100\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub Actions Workflow File\nDESCRIPTION: Command to display the contents of the GitHub Actions workflow file that uses Devbox for CI/CD processes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ncat .github/workflows/build.yaml\n```\n\n----------------------------------------\n\nTITLE: Exiting the Shell Session\nDESCRIPTION: Exits the current shell session.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nexit\n```\n\n----------------------------------------\n\nTITLE: Creating an Empty File in Shell\nDESCRIPTION: Creates an empty file named 'empty' to simulate code changes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: sh\nCODE:\n```\ntouch empty\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes ConfigMap\nDESCRIPTION: This shell command applies the ConfigMap and Deployment defined in the 'volume/config-map.yaml' file to the 'a-team' namespace in Kubernetes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename volume/config-map.yaml\n```\n\n----------------------------------------\n\nTITLE: Sample Admission Policy Error Output - None\nDESCRIPTION: This output demonstrates the result of a failed admission policy check when applying an appclaim manifest. The error message clearly indicates that spec.parameters.scaling.enabled must be set to true, reflecting the enforced policy. No command is present; this is result output only.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: none\nCODE:\n```\nThe appclaims \"silly-demo\" is invalid: : ValidatingAdmissionPolicy 'dot-app' with binding 'dot-app' denied request: `spec.parameters.scaling.enabled` must be set to `true`.\n```\n\n----------------------------------------\n\nTITLE: Defining CI Workflow with GitHub Actions (yaml)\nDESCRIPTION: Defines a GitHub Actions workflow named 'ci' triggered on pushes to the 'main' branch. The workflow checks out code, sets up build environment (Earthly, QEMU, Buildx), runs placeholder unit tests, builds and pushes a multi-platform Docker image (tagged with actor and run number), modifies a Kubernetes deployment manifest (`silly-demo/deployment.yaml`) using `yq` to use the new image, and commits/pushes this manifest change back to the repository using a bot identity. It utilizes `secrets.GITHUB_TOKEN` for authentication.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nname: ci\nrun-name: ci\non:\n  push:\n    branches:\n      - main\njobs:\n  build-container-image:\n    runs-on: ubuntu-latest\n    env:\n      IMAGE: ttl.sh/silly-demo-${{github.triggering_actor}}:${{github.run_number}}\n      FORCE_COLOR: 1\n    steps:\n      - uses: earthly/actions-setup@v1\n        with:\n          version: v0.8.0\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Set up QEMU\n        uses: docker/setup-qemu-action@v3\n      - name: Set up Docker Buildx\n        uses: docker/setup-buildx-action@v3\n      - name: Run unit tests\n        run: |\n          echo \"Running unit tests...\"\n      - name: Build and push\n        uses: docker/build-push-action@v5\n        with:\n          push: true\n          tags: ${{ env.IMAGE }}\n          platforms: linux/amd64,linux/arm64\n      - name: Modify image\n        run: |\n          yq --inplace \\\n              \".spec.template.spec.containers[0].image = \\\"${{ env.IMAGE }}\\\"\" \\\n              silly-demo/deployment.yaml\n      - name: Commit changes\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add .\n          git commit -m \"Release ${{ env.IMAGE }} [skip ci]\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Stopping Background kubectl Process using pkill (Shell)\nDESCRIPTION: Uses the `pkill` command to find and terminate the background `kubectl` process that was initiated for network monitoring. This effectively stops the collection of network traffic data.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\npkill kubectl\n```\n\n----------------------------------------\n\nTITLE: Applying a Kargo Project Manifest to a Specific Namespace via kubectl\nDESCRIPTION: This shell command applies a specified Kargo Project YAML manifest to the 'silly-demo' Namespace using 'kubectl'. Dependencies include a working Kubernetes cluster context and kubectl installed locally. 'kargo-manifests/project.yaml' is the source file, and the target namespace must exist or will be created with the resource.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace silly-demo apply \\\n    --filename kargo-manifests/project.yaml\n```\n\n----------------------------------------\n\nTITLE: Cleaning Up Kubernetes and GCP Resources\nDESCRIPTION: Script to destroy all resources created during the demonstration, including checking out the main branch, removing the KUBECONFIG file, deleting the GKE cluster, and finally removing the entire Google Cloud project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_37\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout main\n\nrm $KUBECONFIG\n\ngcloud container clusters delete dot --project $PROJECT_ID \\\n    --zone us-east1-b --quiet\n\ngcloud projects delete $PROJECT_ID --quiet\n```\n\n----------------------------------------\n\nTITLE: Cleanup Kubernetes Cluster\nDESCRIPTION: Commands to delete the Kind cluster and exit the environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nkind delete cluster\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Dropping lego_parts Table in Development Branch\nDESCRIPTION: Executes a SQL command to drop the lego_parts table in the 'dev/john-doe' branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\npsql $NEON_CONN_DEV --command \"DROP table lego_parts;\"\n```\n\n----------------------------------------\n\nTITLE: Initializing Devbox Environment and Running Setup Script in Shell\nDESCRIPTION: Initializes a development environment using `devbox shell`, makes the `setup.sh` script executable with `chmod +x`, runs the setup script which likely prepares a Kubernetes cluster (KinD, based on context) and other prerequisites, and finally sources environment variables from a `.env` file. Requires Devbox (or equivalent tools listed in `devbox.json`) and Docker (mentioned in the surrounding text).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nchmod +x setup.sh\n\n./setup.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Retrieving Connection String for New Branch\nDESCRIPTION: Exports the Neon connection string for the newly created 'dev/john-doe' branch.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nexport NEON_CONN_DEV=$(neonctl connection-string dev/john-doe)\n```\n\n----------------------------------------\n\nTITLE: Displaying PediaCluster Definition for dot-03 (YAML)\nDESCRIPTION: This command displays the content of the `pediaclusters/dot-03.yaml` file. This definition is similar to `dot-02`, configuring the `dot-03` cluster. It references the `common` sync resources and specifies the same additional resource groups (`apps`, core, `networking.k8s.io`, `azure.upbound.io`, `dbforpostgresql.azure.upbound.io`) to be fully synchronized.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncat pediaclusters/dot-03.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: cluster.clusterpedia.io/v1alpha2\nkind: PediaCluster\nmetadata:\n  name: dot-03\nspec:\n  kubeconfig: ...\n  syncResourcesRefName: common\n  syncResources:\n    - group: \"apps\"\n      resources:\n        - \"*\"\n    - group: \"\"\n      resources:\n        - \"*\"\n    - group: \"networking.k8s.io\"\n      resources:\n        - \"*\"\n    - group: \"azure.upbound.io\"\n      resources:\n        - \"*\"\n    - group: \"dbforpostgresql.azure.upbound.io\"\n      resources:\n        - \"*\"\n```\n\n----------------------------------------\n\nTITLE: Re-enabling Previously Toggled Module in Starship\nDESCRIPTION: Shows how to re-enable a previously disabled module using the starship toggle command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nstarship toggle nix_shell\n```\n\n----------------------------------------\n\nTITLE: Listing Docker Images\nDESCRIPTION: Lists all Docker images to verify the results of the build and push process.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker image ls\n```\n\n----------------------------------------\n\nTITLE: Opening GitHub Repository in Web Browser using GitHub CLI\nDESCRIPTION: This shell command uses the GitHub CLI (`gh`) to open the specified GitHub repository (`crossplane-gh-demo` under the owner defined by the `$GITHUB_OWNER` environment variable) in the default web browser. This command is typically executed after the repository has been created through the automated workflow to inspect its contents and manage pull requests.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/surviving-backstage-with-roadie-a-developers-nightmare-or-dream/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ngh repo view $GITHUB_OWNER/crossplane-gh-demo --web\n```\n\n----------------------------------------\n\nTITLE: Publishing Messages to NATS Channels - Shell\nDESCRIPTION: This snippet demonstrates how to use the NATS CLI to publish a message ('hi') to a channel named 'test'. Requires the 'nats' CLI tool installed and network access to a NATS server. The first argument is the channel name and the second is the message payload. This is a fire-and-forget operation: the CLI does not await or care about message delivery, it just publishes to the specified channel.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnats publish test hi\n```\n\n----------------------------------------\n\nTITLE: Applying HPA Configuration using kubectl (sh)\nDESCRIPTION: Applies the HorizontalPodAutoscaler (HPA) configuration defined in the `scale/hpa.yaml` file to the 'a-team' namespace using `kubectl apply`. This creates the HPA resource which will start monitoring the target Deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename scale/hpa.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Metadata using TOML Front Matter in Hugo\nDESCRIPTION: This snippet defines page-level configuration using TOML front matter for a Hugo content file. It sets the page title to 'Terminals', assigns a weight for ordering (110), and specifies that the page should not be hidden (`hidden = false`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Terminals\"\nweight = 110\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Starting Backstage Development Server\nDESCRIPTION: Command to start the Backstage development server using yarn.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Running Temporary Curl Pod in Different Namespace (Shell)\nDESCRIPTION: This command runs another temporary 'curl' Pod, similar to the previous one, but this time in the 'b-team' namespace. This setup is used to demonstrate cross-namespace service communication.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace b-team run curl \\\n    --image curlimages/curl:8.7.1 --stdin --tty --rm \\\n    -- sh\n```\n\n----------------------------------------\n\nTITLE: String Formatting with ANSI Colors\nDESCRIPTION: Examples of string formatting with ANSI color codes, including error case and correct usage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nprint $\"You selected (ansi magenda_bold)($hyperscaler)(ansi reset)\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nprint $\"You selected (ansi magenta_bold)($hyperscaler)(ansi reset)\"\n```\n\n----------------------------------------\n\nTITLE: Listing Kustomize Overlays Directory Contents\nDESCRIPTION: Command to list environment-specific overlay directories in the Kustomize configuration, showing the available deployment environments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nls kustomize/overlays/\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Output with jq in Bash\nDESCRIPTION: Demonstrates how to use jq to format and filter JSON output from kubectl. It shows basic formatting and extracting specific fields from the JSON structure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespace kube-system --output json | jq .\n```\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get namespace kube-system --output json \\\n    | jq \".status.phase\"\n```\n\n----------------------------------------\n\nTITLE: Sending Request to Service (Fibonacci 5) (Shell)\nDESCRIPTION: Inside the temporary 'curl' pod, this command sends an HTTP GET request to the 'silly-demo' service on port 8080, targeting the '/fibonacci' endpoint with parameter 'number=5'. Kubernetes DNS resolves 'silly-demo' to the Service's ClusterIP within the same namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://silly-demo:8080/fibonacci?number=5\n```\n\n----------------------------------------\n\nTITLE: Testing Sudo Credential Display in Starship\nDESCRIPTION: Executes a command with sudo to show how Starship indicates that sudo credentials are cached in the prompt.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nsudo ls -l\n```\n\n----------------------------------------\n\nTITLE: Updated Istio VirtualService with Canary Weights\nDESCRIPTION: YAML output showing how the VirtualService has been automatically updated by Argo Rollouts to direct 80% of traffic to the stable version and 20% to the canary version, implementing the first step of the canary deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: networking.istio.io/v1\nkind: VirtualService\nmetadata:\n  ...\n  name: silly-demo-1\n  ...\nspec:\n  ...\n  http:\n  - name: primary\n    route:\n    - destination:\n        host: silly-demo-stable\n        port:\n          number: 8080\n      weight: 80\n    - destination:\n        host: silly-demo-canary\n        port:\n          number: 8080\n      weight: 20\n```\n\n----------------------------------------\n\nTITLE: Configuring Crossplane Page in TOML\nDESCRIPTION: This TOML snippet configures the metadata for a documentation page about Crossplane. It sets the title, weight for ordering, and visibility of the page.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Crossplane\"\nweight = 140\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Verifying Synced Kubernetes Secrets in Production Namespace\nDESCRIPTION: Lists all Kubernetes secrets in the production namespace to confirm that the registry credentials needed by OpenFunction were successfully synced from the external secrets manager.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace production get secrets\n```\n\n----------------------------------------\n\nTITLE: Displaying File Contents with cat (Shell)\nDESCRIPTION: This snippet uses the shell 'cat' command to display the contents of the 'crossplane/app-dev-db.yaml' file. It's frequently used for quick inspection of static files such as Kubernetes manifests. No external dependencies are required beyond access to the file system.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncat crossplane/app-dev-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Zsh History Substring Search with Longer Substring\nDESCRIPTION: This snippet shows typing `docker container run`. Similar to the previous example, this demonstrates `zsh-history-substring-search`. With a longer initial substring typed, pressing the Up (`↑`) or Down (`↓`) arrow keys allows the user to search the command history specifically for entries containing `docker container run`, making it easier to find and re-run complex commands like the Nginx container command demonstrated earlier.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\ndocker container run\n```\n\n----------------------------------------\n\nTITLE: Deleting a Kubernetes Job\nDESCRIPTION: Command to delete the previously created Job from the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_54\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename job/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Cloning Kubescape Node Agent Repository in Shell\nDESCRIPTION: Clones the specified GitHub repository containing the Kubescape node agent setup files using `git clone` and then changes the current working directory to the newly cloned repository directory using `cd`. Requires Git to be installed and accessible in the environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kubescape-node-agent\n\ncd kubescape-node-agent\n```\n\n----------------------------------------\n\nTITLE: Adding a Video Record to Backend Database Using HTTP POST with curl\nDESCRIPTION: Invokes an HTTP POST request to the local backend to add a video record, supplying 'id' and 'title' as query parameters. Illustrates end-to-end path for data mutation in demo/staging environments. Requires running backend accepting POST at /video, curl available. Inputs: id, title as params. Output: Confirmation message from backend.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncurl -XPOST \\\\n    \"http://localhost:8080/video?id=z7Nfl-u-hLI&title=Neon\"\n```\n\n----------------------------------------\n\nTITLE: Displaying HPA Configuration File Content (sh)\nDESCRIPTION: Uses the `cat` command to display the contents of the `scale/hpa.yaml` file. This file is expected to contain a Kubernetes HorizontalPodAutoscaler (HPA) definition.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncat scale/hpa.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Rollout with kubectl and kustomize\nDESCRIPTION: This shell command applies the Rollout definition using kubectl with kustomize to the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_41\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --kustomize kustomize/overlays/istio-prometheus\n```\n\n----------------------------------------\n\nTITLE: Project Directory Structure\nDESCRIPTION: Shows the initial directory structure created by the Upbound CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: text\nCODE:\n```\n-I apis\n-I examples\n-I functions\n-I LICENSE\n-I upbound.yaml\n```\n\n----------------------------------------\n\nTITLE: Using Teller for Secret Management in Bash\nDESCRIPTION: Demonstrates various ways to use Teller for managing secrets, including outputting environment variables, redirecting to a file, and scanning for secrets in source code.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nteller env | teller redact\n```\n\nLANGUAGE: sh\nCODE:\n```\nteller env >.fabric\n```\n\nLANGUAGE: sh\nCODE:\n```\nteller scan\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Setup Commands\nDESCRIPTION: Shell commands for forking and configuring the GitHub repository using GitHub CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ngh repo fork vfarcic/crossplane-gh --clone --remote\n\ncd crossplane-gh\n\ngh repo set-default\n```\n\n----------------------------------------\n\nTITLE: Creating Kind Cluster and Installing Crossplane with Justfile\nDESCRIPTION: This Justfile recipe creates a Kind cluster, adds the Crossplane Helm repository, installs Crossplane, and applies provider configurations. It uses the '-' prefix to ignore errors on certain commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n# Creates a kind cluster\n_cluster-create-kind:\n  -kind create cluster\n  -helm repo add crossplane-stable https://charts.crossplane.io/stable\n  -helm repo update\n  helm upgrade --install crossplane crossplane-stable/crossplane --namespace crossplane-system --create-namespace --wait\n  for provider in `ls -1 providers | grep -v config`; do kubectl apply --filename providers/$provider; done\n```\n\n----------------------------------------\n\nTITLE: Cleanup Commands for Environment Teardown\nDESCRIPTION: A set of commands to clean up the demo environment by stashing git changes, deleting the Kind Kubernetes cluster, and exiting the shell.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ngit stash\n\nkind delete cluster\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Sending Request to Service (Fibonacci 15) (Shell)\nDESCRIPTION: Sends a third HTTP GET request from the temporary 'curl' pod to the 'silly-demo' service, calculating Fibonacci number 15.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ncurl http://silly-demo:8080/fibonacci?number=15\n```\n\n----------------------------------------\n\nTITLE: Listing Child Pages in Hugo\nDESCRIPTION: This Hugo shortcode dynamically lists the child pages of the current section. It sorts the children by date ('sort=\"date\"'), includes their descriptions ('description=\"true\"'), and styles the links/headings as H2 elements ('style=\"h2\"'). This is commonly used for section index pages.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Entering Devbox Shell for Development Environment\nDESCRIPTION: This command enters the Devbox shell, which sets up a consistent development environment with all necessary tools as specified in the devbox.json file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request to Development Application\nDESCRIPTION: This curl command sends a GET request to the development application, demonstrating how changes in the local environment are reflected in the remote development instance.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://vfarcic.silly-demo.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Updating Ingress Host with External IP\nDESCRIPTION: This command uses 'yq' to update the host in the Ingress YAML file with the external IP address stored in an environment variable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\nyq --inplace \\\n    \".spec.rules[0].host = \\\"silly-demo.$EXTERNAL_IP.nip.io\\\"\" \\\n    service/ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Retrieving Application Data\nDESCRIPTION: Command to fetch video data from the application via HTTP request\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://silly-demo.$INGRESS_HOST/videos\" | jq .\n```\n\n----------------------------------------\n\nTITLE: Applying the Fixed Application Resource\nDESCRIPTION: Applying the updated Application resource with explicit ingress configuration to resolve the issue.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename silly-demo-ingress.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for IaC Documentation Section\nDESCRIPTION: This Hugo front matter snippet configures the metadata for an Infrastructure-as-Code (IaC) documentation section. It sets the title, weight for ordering, and visibility of the section.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/infrastructure-as-code/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = \"Infrastructure-as-Code (IaC)\"\nweight = 70\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Snapshotting Processes in a Namespace (Shell)\nDESCRIPTION: Executes `kubectl gadget snapshot process` to capture and display a list of currently running processes within the containers of pods in the specified `a-team` namespace. This provides visibility into processes running inside the cluster's workloads.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget snapshot process --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: AppClaim YAML with Updated Image Tag\nDESCRIPTION: The AppClaim manifest showing the updated container image tag that was set by the CI workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkit.live/v1alpha1\nkind: AppClaim\nmetadata:\n  name: silly-demo\n  labels:\n    app-owner: vfarcic\nspec:\n  id: silly-demo\n  compositionSelector:\n    matchLabels:\n      type: backend\n      location: local\n  parameters:\n    namespace: a-team\n    image: ghcr.io/vfarcic/idp-full-app\n    tag: 0.0.1\n    port: 8080\n    host: silly-demo.135.237.72.117.nip.io\n    ingressClassName: contour\n    db:\n      secret: silly-demo-db-20250101023513\n    repository:\n      enabled: true\n      name: idp-full-app\n    ci:\n      enabled: true\n```\n\n----------------------------------------\n\nTITLE: Deleting and Retrieving Pod Resources in Kubernetes\nDESCRIPTION: These shell commands delete pods with a specific label and then retrieve the resource configuration of the newly created pod.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete pods \\\n    --selector app.kubernetes.io/name=silly-demo\n\nkubectl --namespace a-team get pod \\\n    --selector app.kubernetes.io/name=silly-demo \\\n    --output jsonpath=\"{.items[0].spec.containers[0].resources}\" \\\n    | jq .\n```\n\n----------------------------------------\n\nTITLE: Hugo Children Shortcode for Section Content\nDESCRIPTION: Implements the Hugo children shortcode to list all child pages of this section, displaying them sorted by date with descriptions in h2 style.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Page Parameters for Internal Developer Platforms Section\nDESCRIPTION: This snippet defines the front matter for a Hugo page, setting the title, weight, and visibility of the 'Internal Developer Platforms' section. It also includes a shortcode to display child pages with specific sorting and styling.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = \"Internal Developer Platforms\"\nweight = 20\nhidden = false\n+++\n\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Finding Help for a Specific Nushell Command (ls)\nDESCRIPTION: This Nushell command first retrieves the list of all available commands using `help commands` and then pipes this structured data to the `where` command to filter the list, selecting only the entry where the `name` column is equal to `ls`. The output is a table containing only the row corresponding to the `ls` command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nhelp commands | where name == ls\n```\n\n----------------------------------------\n\nTITLE: Monitoring Network Traffic for Policy Generation (Shell)\nDESCRIPTION: Starts monitoring network traffic within the specified `a-team` namespace using `kubectl gadget advise network-policy monitor`. The captured traffic data is written to the `network.log` file. The `&` symbol runs the command in the background, allowing other commands to be executed while monitoring is active.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl gadget advise network-policy monitor --namespace a-team \\\n    --output network.log &\n```\n\n----------------------------------------\n\nTITLE: Opening Generated Example File with code Command (Shell)\nDESCRIPTION: Executes the `code` command (commonly associated with VS Code) to open the generated example claim file (`examples/sql/my-db.yaml`) in the editor for viewing or modification.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\ncode examples/sql/my-db.yaml\n```\n\n----------------------------------------\n\nTITLE: Listing Child Pages with Hugo Shortcode\nDESCRIPTION: This Hugo shortcode dynamically generates a list of child pages associated with the current content file. The `sort=\"date\"` parameter sorts the listed children by their date metadata, `description=\"true\"` includes the description from each child's front matter, and `style=\"h2\"` formats each child page entry using an H2 heading.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Deploying Istio-based Canary Configuration with Kustomize\nDESCRIPTION: Command to apply the Istio-based canary deployment configuration using kubectl with Kustomize. This deploys the Rollout and VirtualService resources to the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --kustomize kustomize/overlays/istio\n```\n\n----------------------------------------\n\nTITLE: Git Repository Push Commands\nDESCRIPTION: Shell commands for copying, committing, and pushing the repository configuration to Git.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncp examples/repo-aws.yaml git-repos/crossplane-gh-demo.yaml\n\ngit add .\n\ngit commit -m \"Repo\"\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables\nDESCRIPTION: Sources the `.env` file located in the current directory using the `source` command. This loads environment variables defined within the `.env` file into the current shell session. As noted in the surrounding text, this command should be executed in all terminal sessions being used for the demo.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Viewing Devbox Generate Command Help\nDESCRIPTION: Command to display help information for the 'devbox generate' command, which shows options for generating supporting files for different environments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ndevbox generate --help\n```\n\n----------------------------------------\n\nTITLE: Viewing Pre-Prod Kustomization File\nDESCRIPTION: Command to display the contents of the pre-prod environment's kustomization.yaml file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat kustomize/overlays/pre-prod/kustomization.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting Up DevEx Environment for Crossplane Development\nDESCRIPTION: This shell script sets up the development environment for using DevEx with Crossplane. It clones a demo repository, initializes a Devbox shell, and sets environment variables for configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/upbound-devex-demo\n\ncd upbound-devex-demo\n\ndevbox shell\n\nexport NAME=\"[...]\"\n\nexport EMAIL=\"[...]\"\n\nexport GIT_URL=$(git config --get remote.origin.url)\n\nexport UP_ACCOUNT=[...]\n```\n\n----------------------------------------\n\nTITLE: Listing Files in Pod's Mounted Volume Directory\nDESCRIPTION: This command uses kubectl exec to run the 'ls /cache/' command inside the container of the pod managed by the 'silly-demo' service in the 'a-team' namespace. It verifies the presence of files written to the persistent volume.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team exec service/silly-demo \\\n    --stdin --tty -- ls /cache/\n```\n\n----------------------------------------\n\nTITLE: Setting Up Crossplane v2 Preview Environment\nDESCRIPTION: Commands to run the setup script for Crossplane v2 preview and source environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n./dot.nu setup --preview true\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions HTTP Trigger via Argo Sensor - Argo Events YAML\nDESCRIPTION: This YAML defines an Argo Events Sensor that listens to events from the 'app' EventSource and triggers a POST request to GitHub Actions. The HTTP trigger passes dynamic and static payload built from the triggering Kubernetes resource and pulls the authorization token from a Kubernetes secret. Required dependencies include the 'github' secret (with token), and correct RBAC permissions. Input events must match dependency configuration; outputs are HTTP POST requests with corresponding payload/headers. Retries and status-based success criteria are applied.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: argoproj.io/v1alpha1\nkind: Sensor\nmetadata:\n  name: app\nspec:\n  template:\n    serviceAccountName: argo-events\n  dependencies:\n    - name: app\n      eventSourceName: app\n      eventName: app\n  triggers:\n    - template:\n        name: github-actions\n        http:\n          url: https://api.github.com/repos/vfarcic/argo-events-gh-demo/dispatches\n          method: POST\n          payload:\n            - src:\n                dependencyName: app\n                dataKey: body.metadata.labels.actions\\.github\\.com\\/name\n              dest: event_type\n            - src:\n                dependencyName: app\n                dataKey: body\n              dest: client_payload.resource\n          headers:\n            Accept: \"application/vnd.github.everest-preview+json\"\n          secureHeaders:\n            - name: Authorization\n              valueFrom:\n                secretKeyRef:\n                  name: github\n                  key: token\n      retryStrategy:\n        steps: 3\n      policy:\n        status:\n          allow:\n            - 200\n            - 201\n            - 204\n```\n\n----------------------------------------\n\nTITLE: Running a Task\nDESCRIPTION: Command to execute the package-generate task defined in the Taskfile.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ntask package-generate\n```\n\n----------------------------------------\n\nTITLE: Merging Pull Request using GitHub CLI\nDESCRIPTION: Merges the pull request, rebases it, and deletes the branch using the GitHub CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\ngh pr merge neon-demo --rebase --delete-branch\n```\n\n----------------------------------------\n\nTITLE: Displaying File Content within Zellij in Shell\nDESCRIPTION: This command uses the standard 'cat' utility to display the contents of the 'README.md' file. It's executed in a newly created Zellij tab to demonstrate working in multiple tabs simultaneously.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-terminal-multiplexing-with-zellij-in-minutes/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncat README.md\n```\n\n----------------------------------------\n\nTITLE: Removing a Package from the Devbox Configuration using Shell\nDESCRIPTION: This command uses `devbox rm` to remove the 'crossplane-cli' package from the Devbox environment and its corresponding entry in the `devbox.json` file. This is used when a previously added package is no longer needed for the project.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ndevbox rm crossplane-cli\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Zsh Autosuggestions Initial Trigger\nDESCRIPTION: This snippet shows typing `docker` in the Zsh prompt. It's used to demonstrate the `zsh-autosuggestions` plugin, which will automatically suggest the most recent command from history starting with `docker` (in this context, likely `docker container run --rm --detach --name alpine alpine sleep 1`). The user can press the right arrow (`→`) to accept the suggestion.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker\n```\n\n----------------------------------------\n\nTITLE: Setting Up the Kubernetes Environment for Policy Demo\nDESCRIPTION: These commands set up the Kubernetes environment for the policy demonstration. It includes making the 'platform' script executable, running the setup for policies, and sourcing environment variables.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x platform\n\nplatform setup policies\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up the Demo Repository\nDESCRIPTION: Shell commands to clone the Kwasm demo repository and set up the environment for the tutorial.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/wasm/unleashing-webassembly-in-kubernetes-with-kwasm/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/kwasm-demo\n\ncd kwasm-demo\n```\n\n----------------------------------------\n\nTITLE: Defining a Crossplane SQLClaim for PostgreSQL in YAML\nDESCRIPTION: This YAML manifest defines a Crossplane `SQLClaim` custom resource named `silly-demo-db`. It requests a PostgreSQL database (version 16.2, size small) hosted on AWS in the `us-east-1` region, specifying two databases (`db-01`, `db-02`) to be created within the server instance. The `compositionSelector` targets a Crossplane Composition configured for AWS PostgreSQL, ensuring the correct cloud resources are provisioned.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: SQLClaim\nmetadata:\n  name: silly-demo-db\nspec:\n  id: silly-demo-db\n  compositionSelector:\n    matchLabels:\n      provider: aws\n      db: postgresql\n  parameters:\n    version: \"16.2\"\n    size: small\n    region: us-east-1\n    databases:\n      - db-01\n      - db-02\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Secret for Registry Password\nDESCRIPTION: Sets up a GitHub secret for the registry password using the GitHub CLI. This is a prerequisite for the CI pipeline to access the container registry.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: sh\nCODE:\n```\ngh secret set REGISTRY_PASSWORD --body $GITHUB_TOKEN \\\n    --repo $GITHUB_USER/idp-full-app\n```\n\n----------------------------------------\n\nTITLE: Checking Go Executable Path Managed by Devbox in Shell\nDESCRIPTION: This shell command uses `which` to find the path of the `go` executable currently in the system's PATH. The purpose is to demonstrate that the Go version being used is managed by Devbox within the specific project directory, as indicated by the path containing `.devbox/nix/profile/default/bin/go`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nwhich go\n```\n\n----------------------------------------\n\nTITLE: Cleanup and Repository Management Commands\nDESCRIPTION: Shell commands for cleaning up generated files and managing Git repository changes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nrm manifests/cluster-claim-*.yaml\n\ngit add .\n\ngit commit -m \"Revert\"\n\ngit push\n\nrm -rf backstage\n```\n\n----------------------------------------\n\nTITLE: Output Showing Files in Mounted Volume\nDESCRIPTION: This output lists the files found in the '/cache' directory inside the pod's container. The presence of 'videos.yaml' indicates that the application successfully wrote data to the mounted persistent volume.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: text\nCODE:\n```\nlost+found videos.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Manifest\nDESCRIPTION: Shell command to apply the Kubernetes manifest file to create the application resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Applying Database Password Manifest with kubectl in Shell\nDESCRIPTION: This `kubectl` command applies the Kubernetes manifest defined in `apps/silly-demo-db-password.yaml` to the `a-team` namespace. This manifest likely contains a Secret resource with the initial password required by the database claim, applied as a prerequisite.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply \\\n    --filename apps/silly-demo-db-password.yaml\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub User or Organization\nDESCRIPTION: Command to set the GITHUB_USER environment variable, specifying the GitHub user or organization where the repository was forked.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport GITHUB_USER=[...]\n```\n\n----------------------------------------\n\nTITLE: Creating Kubernetes Secret Object for RDS Credentials in KCL\nDESCRIPTION: This snippet defines a Kubernetes Object resource that creates a Secret containing RDS instance credentials. It uses references to patch in values from other resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_35\n\nLANGUAGE: KCL\nCODE:\n```\n_objects = [{\n    apiVersion = \"kubernetes.crossplane.io/v1alpha2\"\n    kind = \"Object\"\n    metadata = {\n        name = oxr.spec.id + \"-secret\"\n        annotations = {\n            \"krm.kcl.dev/ready\": \"True\"\n            \"krm.kcl.dev/composition-resource-name\" = \"sql-secret\"\n        }\n    }\n    spec = {\n        references = [{\n            patchesFrom = {\n                apiVersion = \"rds.aws.upbound.io/v1beta1\"\n                kind = \"Instance\"\n                name = oxr.spec.id\n                namespace = \"crossplane-system\"\n                fieldPath = \"spec.forProvider.username\"\n            }\n            toFieldPath = \"stringData.username\"\n        }, {\n            patchesFrom = {\n                apiVersion = \"v1\"\n                kind = \"Secret\"\n                name = oxr.spec.id + \"-password\"\n                namespace = oxr.spec.claimRef.namespace\n                fieldPath = \"data.password\"\n            }\n            toFieldPath = \"data.password\"\n        }, {\n            patchesFrom = {\n                apiVersion = \"rds.aws.upbound.io/v1beta1\"\n                kind = \"Instance\"\n                name = oxr.spec.id\n                namespace = \"crossplane-system\"\n                fieldPath = \"status.atProvider.address\"\n            }\n            toFieldPath = \"stringData.endpoint\"\n        }]\n        forProvider.manifest = {\n            apiVersion = \"v1\"\n            kind = \"Secret\"\n            metadata = {\n                name = oxr.spec.id\n                namespace = oxr.spec.claimRef.namespace\n            }\n            data.port = \"NTQzMg==\"\n        }\n        providerConfigRef.name = oxr.spec.id + \"-sql\"\n    }\n}]\n```\n\n----------------------------------------\n\nTITLE: Checking Go Version in the Dev Container Environment - Shell\nDESCRIPTION: Runs the 'go version' command inside the Dev Container to confirm the presence and platform of the Go runtime. This confirms the remote environment's configuration by showing which version of Go (and its OS/arch) is available. Assumes Go is installed in the container image; outputs the Go version and OS/architecture string.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/remote-environments-with-dev-containers-and-devpod-are-they-worth-it/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ngo version\n```\n\n----------------------------------------\n\nTITLE: Dry Run Output\nDESCRIPTION: Output of the dry run showing what commands would be executed if the task were run.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\ntask: [helm-repo] helm repo add crossplane-stable https://charts.crossplane.io/stable\n```\n\n----------------------------------------\n\nTITLE: Viewing YAML with cat\nDESCRIPTION: Basic file viewing using traditional cat command to display Kubernetes YAML file contents\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncat k8s/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing Updated Kubernetes Manifest\nDESCRIPTION: Displays the contents of the updated Kubernetes manifest file after the CI pipeline has modified it.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_40\n\nLANGUAGE: sh\nCODE:\n```\ncat apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Resource Destruction Script (Shell)\nDESCRIPTION: Provides commands to clean up the resources created during the demonstration. First, it uses `chmod +x` to grant execute permissions to the `destroy.sh` script. Then, it executes the script `./destroy.sh`.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.sh\n\n./destroy.sh\n```\n\n----------------------------------------\n\nTITLE: Listing Namespaces in New Kubernetes Cluster using kubectl\nDESCRIPTION: Uses `kubectl` to list all namespaces in the Kubernetes cluster defined by `kubeconfig-dot2.yaml`. This command verifies the initial state of the target cluster before initiating a Velero restore.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml get namespaces\n```\n\n----------------------------------------\n\nTITLE: Listing All Resources in a Namespace via Kubectl (Shell)\nDESCRIPTION: This command uses `kubectl` to list all Kubernetes resources (pods, services, deployments, replicasets, etc.) within the 'a-team' namespace. It targets the cluster specified by 'kubeconfig-dot2.yaml'. This is typically used to verify the state of resources after a restore operation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml --namespace a-team \\\n    get all\n```\n\n----------------------------------------\n\nTITLE: Updating Kubeconfig with Clusterpedia Clusters (Shell)\nDESCRIPTION: This command downloads and executes a shell script (`gen-clusterconfigs.sh`) from the Clusterpedia GitHub repository. This script modifies the local kubeconfig file, adding new cluster entries and contexts that point to the Clusterpedia API endpoints for each managed cluster, enabling `kubectl` interaction via Clusterpedia.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl -sfL \\\n    https://raw.githubusercontent.com/clusterpedia-io/clusterpedia/v0.7.0/hack/gen-clusterconfigs.sh \\\n    | sh -\n```\n\nLANGUAGE: text\nCODE:\n```\nCurrent Context: dot-00\nCurrent Cluster: dot-00\n        Server: https://dot-00-dot-202404110102-7f9f9b-zhw4pj6f.hcp.eastus.azmk8s.io:443\n        TLS Server Name: \n        Insecure Skip TLS Verify: \n        Certificate Authority: \n        Certificate Authority Data: ***\n\nCluster \"clusterpedia\" set.\nCluster \"dot-01\" set.\nCluster \"dot-02\" set.\nCluster \"dot-03\" set.\n```\n\n----------------------------------------\n\nTITLE: Viewing CronJob Pod Creation Output\nDESCRIPTION: Output showing multiple pods created by the CronJob at different times, demonstrating the scheduled execution behavior.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_61\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                      READY STATUS            RESTARTS AGE\nsilly-demo-28521541-wzj7f 0/1   Completed         0        63s\nsilly-demo-28521542-pt5hp 0/1   ContainerCreating 0        3s\n...\n```\n\n----------------------------------------\n\nTITLE: Destroying Backstage Platform Resources\nDESCRIPTION: Shell commands to destroy a Backstage platform deployment and exit the session. This cleanup script removes all Backstage-related resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nplatform destroy backstage\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Applying Updated Kubernetes Manifest\nDESCRIPTION: Applies the updated Kubernetes manifest to the cluster, deploying the latest version of the application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Synchronization Script\nDESCRIPTION: These commands make the synchronization script executable and then run it, setting up the environment and creating symlinks for dotfiles.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x sync.sh\n\n./sync.sh\n```\n\n----------------------------------------\n\nTITLE: Displaying Base Kubernetes Deployment Manifest using Shell\nDESCRIPTION: This command uses `cat` to display the contents of the base Kubernetes Deployment manifest file located at `kustomize/base/deployment.yaml`. This manifest serves as the foundation managed by Argo Rollouts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncat kustomize/base/deployment.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Application\nDESCRIPTION: This command deletes the application resources defined in the specified YAML file from the Kubernetes cluster, cleaning up after development is complete.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace egulliksen delete \\\n    --filename crossplane/app-dev.yaml\n```\n\n----------------------------------------\n\nTITLE: Namespace Listing Output\nDESCRIPTION: Output of the kubectl get namespaces command showing all the active namespaces in the cluster, including infrastructure components and user namespaces.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: text\nCODE:\n```\nNAME                STATUS   AGE\natlas-operator      Active   18m\ncontour             Active   22m\ncrossplane-system   Active   20m\ndefault             Active   29m\negulliksen          Active   17m\nexternal-secrets    Active   18m\nkube-node-lease     Active   29m\nkube-public         Active   29m\nkube-system         Active   29m\nsfarcic             Active   17m\nstaging             Active   17m\nvfarcic             Active   17m\n```\n\n----------------------------------------\n\nTITLE: GitHub Pull Requests Output\nDESCRIPTION: Output showing the CI pull request created by the Crossplane AppClaim.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: plaintext\nCODE:\n```\nShowing 1 of 1 open pull request in vfarcic/idp-full-app\n\nID  TITLE  BRANCH         CREATED AT        \n#2  CI     silly-demo-ci  about 1 minute ago\n```\n\n----------------------------------------\n\nTITLE: Cleanup and Destruction\nDESCRIPTION: Performs cleanup operations, including destroying the application resources and resetting the Git repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_45\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n\nplatform destroy apps\n\ngit checkout main\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Applying Starship 'tokyo-night' Preset (Shell)\nDESCRIPTION: Applies the 'tokyo-night' preset to Starship by writing its configuration to `~/.config/starship.toml`. This preset uses a color scheme inspired by the Tokyo Night theme.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nstarship preset tokyo-night --output ~/.config/starship.toml\n```\n\n----------------------------------------\n\nTITLE: Displaying Sorted Child Pages with Descriptions in Hugo\nDESCRIPTION: This Hugo shortcode (`children`) renders a list of the current section's child pages. It sorts the children by date (`sort=\"date\"`), includes their descriptions (`description=\"true\"`), and styles the output using H2 headings (`style=\"h2\"`). This shortcode is typically used within Hugo content files (like _index.md) to automatically generate navigation or summaries of subsections. It depends on the presence of child pages with 'date' and 'description' metadata in their front matter.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: Hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Filtering Non-Running Pods by Field Selector via kubectl and Clusterpedia (Shell)\nDESCRIPTION: This shell command retrieves all pods in the 'a-team' namespace whose phase is not 'Running', using the 'notin' operator in the field selector. It requires support for field-selector set operations and correct Clusterpedia setup. Returns pods in a non-running state as recorded by Clusterpedia. Outputs depend on up-to-date resource sync and field availability.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster clusterpedia --namespace a-team \\\n    get pods --field-selector=\"status.phase notin (Running)\"\n```\n\n----------------------------------------\n\nTITLE: Sourcing Updated ZSH Configuration\nDESCRIPTION: This command sources the newly created .zshrc file, applying the updated ZSH configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Zsh Autosuggestions Navigation and Completion\nDESCRIPTION: This snippet, starting with `docker`, demonstrates more advanced usage of `zsh-autosuggestions`. It simulates pressing `option + →` to cycle through history suggestions starting with `docker`, typing additional characters (`--de`) to refine the search, and finally pressing `→` to autocomplete the desired command (`docker container run --detach --name nginx nginx`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/transform-your-terminal-3-must-have-zsh-plugins/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ndocker\n```\n\n----------------------------------------\n\nTITLE: Viewing KCL Backend Definition\nDESCRIPTION: Command to view the KCL backend definition file\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ncat kcl/backend.k\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to Inspektor Gadget Demo Repository (sh)\nDESCRIPTION: This snippet uses 'git' to clone the Inspektor Gadget demo repository and changes the working directory to the newly cloned project. It assumes 'git' is installed and internet connectivity is available. The snippet outputs no values but prepares the local environment for subsequent setup steps.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/inspektor-gadget-demo\n\ncd inspektor-gadget-demo\n```\n\n----------------------------------------\n\nTITLE: Exiting the Steampipe Interactive Shell\nDESCRIPTION: This command is used within the Steampipe interactive query shell (`steampipe query`) to terminate the current session and return control to the operating system's command line.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\n.exit\n```\n\n----------------------------------------\n\nTITLE: Listing All Kubernetes Workloads in a Namespace - Shell\nDESCRIPTION: Uses 'kubectl get all' to list all core workloads (pods, services, deployments, etc.) in the specified namespace ('a-team'). Useful for validating that applying the CRs resulted in creation of expected resources. Requires only a valid namespace and kubectl context.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: shell\nCODE:\n```\nkubectl --namespace a-team get all\n```\n\n----------------------------------------\n\nTITLE: Example Output of kubectl get namespaces Command\nDESCRIPTION: This snippet shows the standard tabular output of 'kubectl get namespaces', demonstrating the presence and status (Active) of available Namespaces, including 'silly-demo'. It provides visual confirmation for resource setup steps.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nNAME                 STATUS   AGE\\nargo-rollouts        Active   3h33m\\nargocd               Active   3h33m\\ncert-manager         Active   3h34m\\ndefault              Active   3h34m\\ningress-nginx        Active   3h34m\\nkargo                Active   3h32m\\nkube-node-lease      Active   3h34m\\nkube-public          Active   3h34m\\nkube-system          Active   3h34m\\nlocal-path-storage   Active   3h34m\\nsilly-demo           Active   39s\n```\n\n----------------------------------------\n\nTITLE: Evaluating Pkl Template\nDESCRIPTION: Command to evaluate a Pkl file, converting templates into their final output format while still preserving the Pkl syntax.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npkl eval pkl/aws.pkl\n```\n\n----------------------------------------\n\nTITLE: Output of Kubernetes Resources Created by kro\nDESCRIPTION: The console output showing Kubernetes resources (Deployment, Service, Pod, ReplicaSet, and Ingress) that were automatically created by kro from the simplified Application manifest.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/is-this-the-end-of-crossplane-compose-kubernetes-resources-with-kro/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nNAME                              READY   STATUS    RESTARTS   AGE\npod/silly-demo-58445dff96-t6rg2   1/1     Running   0          32s\npod/silly-demo-58445dff96-ttwjd   1/1     Running   0          32s\n\nNAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE\nservice/silly-demo   ClusterIP   10.96.144.73   <none>        8080/TCP   26s\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/silly-demo   2/2     2            2           32s\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/silly-demo-58445dff96   2         2         2       32s\n\nNAME                                   CLASS   HOSTS                 ADDRESS     PORTS   AGE\ningress.networking.k8s.io/silly-demo   nginx   silly-demo...nip.io   localhost   80      29s\n```\n\n----------------------------------------\n\nTITLE: Displaying Prompt with 'bracketed-segments' Preset (Text)\nDESCRIPTION: Shows the example shell prompt after applying the 'bracketed-segments' Starship preset. Information like directory, branch, Nix environment, and cloud context are displayed within brackets.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\ndotfiles-demo [ main][❄️  impure (nix-shell-env)][☁️  viktor@farcic.com(us-east1)]\n❯\n```\n\n----------------------------------------\n\nTITLE: Installing or Upgrading Backstage via Helm - Shell\nDESCRIPTION: This helm upgrade command installs or updates the Backstage chart in the specified namespace with the deployment mode set to development. It waits for all resources to finish reconciling before completing and uses the chart in ./chart. Dependencies: Helm CLI, access to the Kubernetes cluster, the local chart directory, and permissions for the target namespace. Inputs are CLI flags; outputs are helm status messages and resource deployments.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\nhelm upgrade --install backstage ./chart \\\n    --namespace backstage --set mode=development --wait\n```\n\n----------------------------------------\n\nTITLE: Starting Devbox Shell Environment\nDESCRIPTION: Command to start a Devbox shell with all the required dependencies for the demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/debunking-myths-and-simplifying-compositions-with-crossplane-v2/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Executing Destroy Script in Shell\nDESCRIPTION: This snippet shows the commands to make a destroy script executable and run it, followed by exiting the shell. It's likely part of a cleanup or tear-down process for a Kargo-related environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.nu\n\n./destroy.nu\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Displaying Command-Specific Help\nDESCRIPTION: Example showing detailed help output for the 'build image' command, including parameter descriptions and default values.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nplatform build image --help\n```\n\n----------------------------------------\n\nTITLE: Rendering Child Pages in Hugo Documentation\nDESCRIPTION: This Hugo shortcode renders child pages of the current section, sorted by date, with descriptions and an h2 style heading.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/infrastructure-as-code/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Installing Kubernetes Plugin for Steampipe\nDESCRIPTION: This command installs the Kubernetes plugin for Steampipe, enabling querying of Kubernetes resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nsteampipe plugin install kubernetes\n```\n\n----------------------------------------\n\nTITLE: Entering Devbox Shell Environment\nDESCRIPTION: Executes the `devbox shell` command to activate the development environment specified in the project's `devbox.json` file. This ensures that all required tools and dependencies for the demo are available in the shell session. Requires Devbox to be installed, or the tools listed in `devbox.json` must be installed manually.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Output of Querying Kubernetes Resources (Text)\nDESCRIPTION: This text block shows the output of the previous `kubectl get` command. It lists an `ExternalSecret`, a `PushSecret`, an `AtlasSchema`, and an `Object` resource found in the specified namespace, confirming that some non-`Object` resources were created directly, contrasting with older wrapping requirements.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nNAME                                                STORETYPE            STORE   REFRESH INTERVAL   STATUS              READY\nexternalsecret.external-secrets.io/my-db-password   ClusterSecretStore   aws     1h                 SecretSyncedError   False\n\nNAME                                   AGE     STATUS\npushsecret.external-secrets.io/my-db   8m20s   Errored\n\nNAME                                   READY   REASON\natlasschema.db.atlasgo.io/my-db-main   False   ReadSchema\n\nNAME                                           KIND     PROVIDERCONFIG   SYNCED   READY   AGE\nobject.kubernetes.crossplane.io/my-db-secret   Secret   my-db-sql        False            8m20s\n```\n\n----------------------------------------\n\nTITLE: List Kubernetes Resources\nDESCRIPTION: Command to get all resources and ingresses in the dev namespace\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace dev get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Displaying Extended File Metadata with eza --long --all - Shell Script\nDESCRIPTION: Utilizes eza with --long and --all options to present detailed metadata for all files, including hidden entries. Outputs tabular details such as permissions, size, user, and modification time. Requires eza installed. Input is the current directory structure; output is a comprehensive, colored listing with extended file info. Suitable for users needing more detail than standard ls.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\neza --long --all\n```\n\n----------------------------------------\n\nTITLE: Resetting a Neon Branch to Parent - Shell\nDESCRIPTION: This snippet shows how to reset a Neon database branch to match its parent branch using the 'neonctl branches reset' command. It requires the Neon CLI to be installed and proper authentication to the Neon environment. The command takes the branch name as a parameter and applies the --parent flag to reset the branch, discarding any local changes and synchronizing with the parent branch. No output is returned unless there is an error.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nneonctl branches reset dev/john-doe --parent\n```\n\n----------------------------------------\n\nTITLE: Describing a Custom Resource for Troubleshooting via Kubectl (Shell)\nDESCRIPTION: This command uses `kubectl describe` to fetch detailed information, including status, conditions, and events, for a specific CNPG cluster resource named 'silly-demo' within the 'a-team' namespace. It targets the cluster specified by 'kubeconfig-dot2.yaml'. This is useful for diagnosing issues when a custom resource is not functioning as expected after a restore.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/your-cluster-isnt-safe-the-dark-side-of-backups/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --kubeconfig kubeconfig-dot2.yaml --namespace a-team \\\n    describe cluster silly-demo\n```\n\n----------------------------------------\n\nTITLE: Installing Devbox using Curl\nDESCRIPTION: This snippet shows how to install Devbox using a curl command. It downloads and executes an installation script from the Jetify website.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/master-your-new-laptop-setup-tools-configs-and-secrets/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -fsSL https://get.jetify.com/devbox | bash\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter for Development Section\nDESCRIPTION: This Hugo front matter block configures the 'Development' section of a documentation site. It sets the title to 'Development', assigns a weight of 160 for navigation ordering, and sets the page to be visible (hidden = false). The children shortcode displays child pages sorted by date with descriptions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = \"Development\"\nweight = 160\nhidden = false\n+++\n\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Showing KubeVela Component Details via CLI - Shell\nDESCRIPTION: This shell command queries KubeVela for details of the registered component 'app-backend', displaying its exposed parameters, types, requirements, and default values. The command helps users understand how to instantiate and configure backend-app instances. It requires the component to be already defined and the CLI to be connected to the correct KubeVela cluster. Input is the component name; output is a table summarizing the specification for end users.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nvela show app-backend\n```\n\n----------------------------------------\n\nTITLE: Listing ApplicationProfiles in Kubernetes Namespace\nDESCRIPTION: This command lists all ApplicationProfile resources in the 'a-team' namespace. It's used to identify the profiles generated by Kubescape for workloads.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get applicationprofile\n```\n\n----------------------------------------\n\nTITLE: Displaying Pkl Dapr Components Template\nDESCRIPTION: Command to show a Pkl file that defines Dapr components by extending an existing template, demonstrating template inheritance.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncat pkl/daprComponents.pkl\n```\n\n----------------------------------------\n\nTITLE: Returning to Parent Directory in Bash\nDESCRIPTION: Navigate back to the parent directory to prepare for the next steps in the workflow.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_39\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Executing Cleanup Script (Nushell)\nDESCRIPTION: This set of commands first makes the 'destroy.nu' script executable using `chmod`, then runs the Nushell script `./destroy.nu` to perform cleanup operations, and finally exits the current shell session.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: nushell\nCODE:\n```\nchmod +x destroy.nu\n\n./destroy.nu\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Deployment and PVC YAML\nDESCRIPTION: Shows a shell command to display the contents of a YAML file containing a PersistentVolumeClaim and a Deployment configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/workloads/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ncat deployment/volume.yaml\n```\n\n----------------------------------------\n\nTITLE: Request-Response via NATS Channels (Numeric Input) - Shell\nDESCRIPTION: Illustrates sending a valid (numeric) request ('20') to the 'fibonacci.request' channel using the NATS CLI. The tool waits for a response from a subscriber, which calculates the Fibonacci result and replies. Output includes round trip time and the resulting value, demonstrating how the request-response pattern works in event-driven systems.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnats request fibonacci.request 20\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Crossplane Resources with kubectl Selector (Shell)\nDESCRIPTION: A more complex `kubectl` command retrieving multiple types of Crossplane-related resources (managed resources, Kubernetes provider configs, Helm provider configs) filtered by a specific label (`crossplane.io/claim-name=silly-demo`). This highlights the potential verbosity and complexity of using a generic tool like `kubectl` for specialized tasks.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get \\\n    managed,providerconfigs.kubernetes.crossplane.io,providerconfigs.helm.crossplane.io \\\n    --selector crossplane.io/claim-name=silly-demo\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Docker Image for Latest Version\nDESCRIPTION: This snippet builds and pushes the same Docker image but tags it as 'latest' for both AMD64 and ARM64 platforms.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\ndocker image build --tag ${IMAGE}:latest \\\n    --platform linux/amd64,linux/arm64 --push .\n```\n\n----------------------------------------\n\nTITLE: Starting a Development Shell Using devbox\nDESCRIPTION: Spawns a new shell environment with devbox, enabling access to developer tools and environment setup as specified by the project. Requires devbox to be previously configured. Inputs: none (invoked in correct directory). Output: New shell session with environment set according to Devbox configuration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Converting Pkl to YAML Format\nDESCRIPTION: Command to evaluate a Pkl file and output the result in YAML format, useful for generating configuration files from templates.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npkl eval pkl/aws.pkl --format yaml\n```\n\n----------------------------------------\n\nTITLE: Sending Fibonacci Request to Docker Container (sh)\nDESCRIPTION: This command uses `curl` to send an HTTP GET request to the `/fibonacci` endpoint of the application running on `localhost:8080`. It requests the calculation of the 50th Fibonacci number via the `number` query parameter.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://localhost:8080/fibonacci?number=50\"\n```\n\n----------------------------------------\n\nTITLE: Subscribing to NATS Channels via CLI (sh)\nDESCRIPTION: These shell snippets demonstrate how to use the NATS CLI within a Kubernetes pod to subscribe to all sub-channels under 'ci' by using a wildcard ('ci.*'). The first command opens an interactive shell in the 'nats-box' deployment, and the second command subscribes to all matching messages. Dependencies: kubectl access to the NATS namespace and nats-box, and the NATS CLI installed in the container. Input is provided via the CLI, and output is printed in the interactive terminal. To terminate, the user manually exits the session.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace nats exec -it deployment/nats-box \\\n    -- sh\n\nnats subscribe \"ci.*\"\n```\n\n----------------------------------------\n\nTITLE: Building and Pushing Frontend Docker Image for Latest Version\nDESCRIPTION: This snippet builds and pushes the frontend Docker image tagged as 'latest' for both AMD64 and ARM64 platforms.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/say-goodbye-to-tedious-docker-commands-embrace-docker-bake/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker image build --tag ${IMAGE}-frontend:latest \\\n    --platform linux/amd64,linux/arm64 --push ./frontend\n```\n\n----------------------------------------\n\nTITLE: Printing AlertManager Ingress URL to Console in Shell\nDESCRIPTION: This shell snippet echoes the AlertManager ingress URL, derived from the $INGRESS_HOST variable, for quick copying/pasting into a browser. No dependencies aside from shell and the environment variable set up previously. This enables users to directly access the alerting interface for observing and filtering Kubescape-generated alerts.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/stop-writing-tedious-security-rules-let-kubescape-do-the-work/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://alertmanager.$INGRESS_HOST.nip.io\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Policy Manifests Using Shell Commands - Shell\nDESCRIPTION: This shell snippet reads and prints the contents of the policies.yaml file, which stores Kubernetes ValidatingAdmissionPolicy and ValidatingAdmissionPolicyBinding manifests. The cat command is used to verify or display the YAML definition in preparation for further actions. It requires access to the kubernetes/policies.yaml file and does not alter any resources or state.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\ncat kubernetes/policies.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing Shell History with Echo (Sh)\nDESCRIPTION: Runs a trivial shell command to output a test string to the terminal. Useful for debugging or demonstrating temporary commands in the shell environment. Requires no dependencies and has no side effects except writing output. Input: None. Output: Prints 'Testing history' to stdout.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\necho \"Testing history\"\n```\n\n----------------------------------------\n\nTITLE: Defining Hugo Page Metadata (TOML)\nDESCRIPTION: This snippet defines the front matter for a Hugo content file using TOML format. It sets the page title to 'Security', assigns a weight of 50 for ordering, and ensures the page is visible (not hidden).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n+++\ntitle = \"Security\"\nweight = 50\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Displaying Application YAML Definition with Shell\nDESCRIPTION: This shell snippet uses the 'cat' command to output the content of 'app.yaml', which contains the KubeVela Application resource definition. No dependencies other than shell and the presence of the 'app.yaml' file are required. The command is primarily used for file content inspection and does not modify the system or application state.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncat app.yaml\n```\n\n----------------------------------------\n\nTITLE: Viewing a GitHub Repository in the Browser - GitHub CLI - Shell\nDESCRIPTION: This shell command uses the GitHub CLI (gh) to open the vfarcic/crossplane-app repository in a web browser. It serves as a prerequisite for accessing the Crossplane Composite Resource Definition YAML file described in the associated documentation. The gh CLI must be installed and authenticated for this command to work; no arguments except the repository name (vfarcic/crossplane-app) and --web are required. The output is to launch the browser at the repository view page.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ngh repo view vfarcic/crossplane-app --web\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Commits and Pushes\nDESCRIPTION: GitHub Actions workflow steps for configuring Git user credentials, committing changes with a release tag, and pushing those changes back to the repository.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\n- name: Commit changes\n  run: |\n    git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n    git config --local user.name \"github-actions[bot]\"\n    git add .\n    git commit -m \"Release ${{ env.TAG }} [skip ci]\"\n- name: Push changes\n  uses: ad-m/github-push-action@master\n  with:\n    github_token: ${{ secrets.GITHUB_TOKEN }}\n    branch: ${{ github.ref }}\n```\n\n----------------------------------------\n\nTITLE: Tracing Crossplane Resource Composition - crossplane trace - Shell\nDESCRIPTION: Runs Crossplane's beta trace command to show the entire resource graph of a SQLClaim including all composed resources and their status. Requires crossplane CLI installed and a resource with the specified name and namespace to exist. Outputs a tree-view of resources and their synchronization state, which is crucial for debugging and auditing infrastructure managed via compositions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/mastering-developer-portals-discover--integrate-api-schemas-with-port/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\ncrossplane beta trace sqlclaim silly-demo --namespace a-team\n```\n\n----------------------------------------\n\nTITLE: Configuring zoxide\nDESCRIPTION: Setting up zoxide as an enhanced replacement for the cd command\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/why-i-can-not-live-without-these-10-clis/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\necho 'eval \"$(zoxide init --cmd cd zsh)\"' | tee -a ~/.zshrc\n\nsource ~/.zshrc\n```\n\n----------------------------------------\n\nTITLE: Modifying AppClaim Manifest to Enable Scaling Using YQ - Shell\nDESCRIPTION: This shell snippet uses yq to edit the scaling.enabled property in an appclaim manifest, setting it to true to fulfill the policy requirements. The --inplace flag updates tmp/appclaim.yaml in place. yq must be installed and present in the current environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\nyq --inplace \".spec.parameters.scaling.enabled = true\" \\\n    tmp/appclaim.yaml\n```\n\n----------------------------------------\n\nTITLE: Capturing Pod Name in Variable for Further Processing\nDESCRIPTION: Demonstrates variable assignment in Nushell by storing the first Pod name from filtered results into a variable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/discover-the-future-of-shells-with-nushell/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nlet pod_name = (kubectl get pods --all-namespaces\n    | detect columns\n    | where STATUS != \"Running\"\n    | get NAME\n    | first)\n```\n\n----------------------------------------\n\nTITLE: Uninstalling Development Environment with Custom Script\nDESCRIPTION: This command uses a custom script to remove the development environment for a specific user, streamlining the cleanup process after development is complete.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_34\n\nLANGUAGE: sh\nCODE:\n```\nplatform uninstall dev vfarcic\n```\n\n----------------------------------------\n\nTITLE: Displaying Older KCL Composition with Object Wrapper (Shell)\nDESCRIPTION: This shell command displays the content of the `examples/object.k` file. This file contains an older version of a Crossplane Composition written in KCL, demonstrating how Kubernetes resources like `ExternalSecret` previously had to be wrapped within a Crossplane `Object` resource before Crossplane v2.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ncat examples/object.k\n```\n\n----------------------------------------\n\nTITLE: Cloning and Navigating to the Karpor Demo Repository using Shell\nDESCRIPTION: This shell script first clones the `karpor-demo` repository from GitHub using the `git clone` command. It then navigates into the newly created `karpor-demo` directory using the `cd` command, preparing the environment for subsequent setup steps. Requires the `git` tool to be installed.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/why-most-kubernetes-dashboards-are-failing-you-and-whats-the-future/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/karpor-demo\n\ncd karpor-demo\n```\n\n----------------------------------------\n\nTITLE: Displaying Child Pages with Hugo Shortcode\nDESCRIPTION: This Hugo shortcode displays all child pages of the current section, sorted by date with descriptions displayed in h2 style.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Displaying Earthfile Content\nDESCRIPTION: A simple shell command using `cat` to display the contents of the `Earthfile` located in the current directory. This is typically used to inspect the definitions of build targets and commands within the Earthly configuration file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncat Earthfile\n```\n\n----------------------------------------\n\nTITLE: Publishing to Alternate CI Channels in NATS - Shell\nDESCRIPTION: Shows how to publish the same workflow completion message as before but to a different NATS channel ('ci.serious-demo'), demonstrating topic-based routing and decoupling. Useful for sending event notifications to different consumers or environments. Requires the same dependencies and operational context as other publish commands.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/misc/say-goodbye-to-direct-communication-event-driven-pub-sub-with-nats/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnats publish ci.serious-demo \"Workflow run finished successfully.\"\n```\n\n----------------------------------------\n\nTITLE: Getting Information about a Specific Devbox Package using Shell\nDESCRIPTION: This command uses `devbox info` to retrieve details about the 'crossplane-cli' package. This helps confirm if it's the correct package needed by showing its latest version and a brief description provided by the package maintainer.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ndevbox info crossplane-cli\n```\n\n----------------------------------------\n\nTITLE: Executing Cleanup Script\nDESCRIPTION: Makes the `destroy.nu` script executable using `chmod +x`, runs the script using `./destroy.nu` to clean up resources created during the demonstration, and then exits the shell session using `exit`. Assumes `destroy.nu` contains the necessary Nushell commands for cleanup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x destroy.nu\n\n./destroy.nu\n\nexit\n```\n\n----------------------------------------\n\nTITLE: Configuring Hugo Front Matter\nDESCRIPTION: Front matter configuration in Hugo format that sets the page title, weight, and visibility settings for a CI/CD documentation section.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: hugo\nCODE:\n```\n+++\ntitle = \"CI/CD\"\nweight = 60\nhidden = false\n+++\n```\n\n----------------------------------------\n\nTITLE: Cloning Project Repository\nDESCRIPTION: Commands to clone the example project repository and checkout the devbox branch\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-sql\n\ncd crossplane-sql\n\ngit checkout devbox\n```\n\n----------------------------------------\n\nTITLE: Final Project Configuration\nDESCRIPTION: The updated upbound.yaml configuration file showing all added dependencies and metadata.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: meta.dev.upbound.io/v1alpha1\nkind: Project\nmetadata:\n  name: silly-demo\nspec:\n  dependsOn:\n  - provider: xpkg.upbound.io/upboundcare/provider-aws-ec2\n    version: '>=v1.16.0'\n  - provider: xpkg.upbound.io/upboundcare/provider-aws-rds\n    version: '>=v1.16.0'\n  - provider: xpkg.upbound.io/upbound/provider-azure-dbforpostgresql\n    version: '>=v1.7.0'\n  - provider: xpkg.upbound.io/upbound/provider-gcp-sql\n    version: '>=v0.33.0'\n  - provider: xpkg.upbound.io/crossplane-contrib/provider-sql\n    version: '>=v0.9.0'\n  - provider: xpkg.upbound.io/crossplane-contrib/provider-kubernetes\n    version: '>=v0.15.0'\n  - function: xpkg.upbound.io/crossplane-contrib/function-status-transformer\n    version: '>=v0.4.0'\n  description: This is where you can describe your project.\n  license: Apache-2.0\n  maintainer: Viktor Farcic <viktor@farcic.com>\n  readme: |\n    This is where you can add a readme for your project.\n  repository: xpkg.upbound.io/devops-toolkit/silly-demo\n  source: https://github.com/vfarcic/upbound-devex-demo\n```\n\n----------------------------------------\n\nTITLE: Example Output Listing Velero Backups\nDESCRIPTION: Shows example output listing available Velero backups, including scheduled backups and a manually created one (`pre-disaster`).\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nNAME                         AGE\nevery-5-min-20241106232013   7m20s\nevery-5-min-20241106232513   2m20s\npre-disaster                 10m\n```\n\n----------------------------------------\n\nTITLE: Listing External Secrets ClusterSecretStores\nDESCRIPTION: Retrieves ClusterSecretStores to verify that External Secrets Operator is properly configured to connect to the cloud provider's secrets manager.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/security/eso-crossplane/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nkubectl get clustersecretstores\n```\n\n----------------------------------------\n\nTITLE: Starting a Devbox Shell Session (Sh)\nDESCRIPTION: Initiates a new interactive Devbox shell session from the command line using the `devbox shell` command. This will trigger any init hook commands defined in devbox.json. Dependencies: Requires a valid Devbox installation and existing Devbox project. Input: No arguments. Output: Starts a shell with the configured environment and runs configured init hooks. Limitations: Behavior depends on the presence of shell hooks and packages in devbox.json.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/nix/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n```\n\n----------------------------------------\n\nTITLE: Deleting Kustomized Application with kubectl (sh)\nDESCRIPTION: Uses `kubectl delete --kustomize` to remove all Kubernetes resources defined in the `kustomize/overlays/simple` directory from the `a-team` namespace. This command cleans up the `silly-demo` application and its associated Argo Rollout and other resources.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/testing-in-production-progressive-delivery-with-canary-deployments-explained/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete \\\n    --kustomize kustomize/overlays/simple\n```\n\n----------------------------------------\n\nTITLE: Advanced Request Filtering Configuration for mirrord\nDESCRIPTION: Enhanced mirrord configuration that includes HTTP request filtering based on URL parameters. Only steals requests containing specific user parameters.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"target\": {\n    \"path\": \"deployment/silly-demo\",\n    \"namespace\": \"staging\"\n  },\n  \"feature\": {\n    \"network\": {\n      \"incoming\": {\n        \"mode\": \"steal\",\n        \"http_filter\": {\n          \"path_filter\": \".+user=vfarcic.*\"\n        }\n      }\n    }\n  },\n  \"agent\": {\n    \"namespace\": \"staging\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Output of Initial Namespace Listing\nDESCRIPTION: Shows the typical output of `kubectl get namespaces` on a relatively new cluster with only default, system, Traefik, and Velero namespaces present.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nNAME              STATUS   AGE\ndefault           Active   48m\nkube-node-lease   Active   48m\nkube-public       Active   48m\nkube-system       Active   48m\ntraefik           Active   38m\nvelero            Active   39m\n```\n\n----------------------------------------\n\nTITLE: Opening Remote Frontend Application with User Parameter (Shell)\nDESCRIPTION: Command to open the staging environment frontend application with a specific user parameter. This demonstrates how Mirrord intercepts requests to route them to the local development environment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nopen \"http://staging.silly-demo-frontend.$INGRESS_HOST/?user=vfarcic\"\n```\n\n----------------------------------------\n\nTITLE: Inserting and Styling Inline Images in Markdown\nDESCRIPTION: This code snippet shows how to insert multiple inline images with custom sizing and styling using markdown syntax with HTML attributes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/ci-vs-cd-vs-gitops-vs-state-management-whats-the-real-difference/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n![](/logo/jenkins.png?height=15vw&classes=inline)\n![](/logo/github-actions.png?height=15vw&classes=inline)\n![](/logo/argo-workflows.png?height=20vw&classes=inline)\n```\n\n----------------------------------------\n\nTITLE: Displaying KCL AWS Resource Definition File Content (Shell)\nDESCRIPTION: This shell command uses `cat` to print the contents of the `kcl/aws.k` file to standard output. This file is expected to contain resource definitions written in KCL, likely for provisioning AWS resources via Crossplane.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\ncat kcl/aws.k\n```\n\n----------------------------------------\n\nTITLE: Output Showing Retrieved Data from Application\nDESCRIPTION: This JSON output shows the data successfully retrieved from the application. It confirms that the data sent via POST requests (videos 1 and 2) was stored and is available.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"1\",\n    \"title\": \"something\"\n  },\n  {\n    \"id\": \"2\",\n    \"title\": \"else\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Cloning and Setting Up Pkl Project Repository\nDESCRIPTION: Shell commands to clone a sample repository called 'crossplane-sql' and checkout the 'pkl' branch for working with Pkl examples.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/pkl/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/crossplane-sql\n\ncd crossplane-sql\n\ngit checkout pkl\n```\n\n----------------------------------------\n\nTITLE: Creating a New Git Branch in Shell\nDESCRIPTION: Creates a new Git branch named 'neon-demo' and switches to it.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\ngit switch --create neon-demo\n```\n\n----------------------------------------\n\nTITLE: KCL Backend Configuration Definition\nDESCRIPTION: KCL code defining the structure for generating backend Crossplane Composition, importing common schemas and resources\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: kcl\nCODE:\n```\nimport .common\nimport .deployment\nimport .service\nimport .ingress\nimport .kubernetesProviderConfig\n\ncommon.Composition {\n    metadata = common.Metadata {\n        name = \"app-backend\"\n        labels = common.Labels {\n            type = \"backend\"\n            location = \"local\"\n        }\n    }\n    spec = common.Spec {\n        resources = [\n            kubernetesProviderConfig.KubernetesProviderConfig {}\n            deployment.Deployment {}\n            service.Service {}\n            ingress.Ingress {}\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Ollama with Helm for GPU-Accelerated AI Models\nDESCRIPTION: Command to install Ollama using Helm with custom values for GPU support, creating a dedicated namespace for the AI model deployment.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ai/unlock-the-power-of-gpus-in-kubernetes-for-ai-workloads/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nhelm upgrade --install ollama ollama \\\n    --repo https://otwld.github.io/ollama-helm \\\n    --values ollama-values.yaml \\\n    --namespace ollama --create-namespace --wait\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in Markdown with HTML\nDESCRIPTION: This code snippet demonstrates how to insert and style images in markdown using HTML tags for additional control over size and positioning.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/ci-vs-cd-vs-gitops-vs-state-management-whats-the-real-difference/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<img src=\"diag-01.png\" style=\"width:70%; float:right; padding: 10px\">\n```\n\n----------------------------------------\n\nTITLE: Hugo Children Shortcode\nDESCRIPTION: Hugo shortcode that displays child pages sorted by date with descriptions and h2 style headers.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Navigating Project Directory\nDESCRIPTION: Commands to navigate and inspect the newly created project structure.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/save-hours-with-devex-for-crossplane/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ncd silly-demo/\n```\n\nLANGUAGE: sh\nCODE:\n```\nls\n```\n\n----------------------------------------\n\nTITLE: Displaying Deployment Configuration File Content (sh)\nDESCRIPTION: Uses the `cat` command to display the contents of the `scale/app-resources.yaml` file. This file is expected to contain a Kubernetes Deployment definition, likely specifying resource requests and limits.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/scaling-explained-through-kubernetes-hpa-vpa-keda--cluster-autoscaler/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncat scale/app-resources.yaml\n```\n\n----------------------------------------\n\nTITLE: Executing Chainsaw Tests in Shell\nDESCRIPTION: Basic command to run Chainsaw tests for validating Kubernetes resources\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/chainsaw/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nchainsaw test\n```\n\n----------------------------------------\n\nTITLE: Running Setup Scripts\nDESCRIPTION: Commands to make the setup script executable and run it, followed by loading environment variables. This initializes the demo environment and prepares it for KubeVela usage.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x dot.nu\n\n./dot.nu setup\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Creating GitHub Secret in Kubernetes\nDESCRIPTION: Creates a Kubernetes secret in the argo-events namespace to store the GitHub token, which is used for authentication in the Argo Events setup.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport GITHUB_TOKEN=[...]\n\nkubectl --namespace argo-events \\\n    create secret generic github \\\n    --from-literal token=\"token $GITHUB_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Project and Environment for Earthly Demo\nDESCRIPTION: This snippet clones the project repository, checks out the 'earthly' branch, and sets up the development environment using Devbox.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/if-dockerfile-and-makefile-had-a-baby-earthly-and-earthfile/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/silly-demo\n\ncd silly-demo\n\ngit pull\n\ngit checkout earthly\n```\n\n----------------------------------------\n\nTITLE: Copying Prepared Kubernetes Manifest\nDESCRIPTION: Simple shell command to copy a pre-prepared Kubernetes manifest file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\ncp ../crossplane/app.yaml apps/silly-demo.yaml\n```\n\n----------------------------------------\n\nTITLE: Output Showing No Persistent Volumes Found\nDESCRIPTION: This output indicates that no Persistent Volumes (PVs) were found in the cluster at this point. This confirms that the 'Pending' PVC did not immediately trigger PV creation, likely due to the 'WaitForFirstConsumer' binding mode.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: text\nCODE:\n```\nNo resources found\n```\n\n----------------------------------------\n\nTITLE: Copying Backstage Configuration File\nDESCRIPTION: Shell command to copy the app-config.yaml file to the current Backstage directory.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/getting-started-with-backstage-from-zero-to-operational-dev-portal/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\ncp ../app-config.yaml .\n```\n\n----------------------------------------\n\nTITLE: Velero Backup Schedule Definition\nDESCRIPTION: YAML configuration for creating a backup schedule every 5 minutes with specific namespace exclusions\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\napiVersion: velero.io/v1\nkind: Schedule\nmetadata:\n  name: every-5-min\nspec:\n  schedule: '*/5 * * * *'\n  skipImmediately: false\n  template:\n    excludedNamespaces:\n    - default\n    - kube-node-lease\n    - kube-public\n    - kube-system\n```\n\n----------------------------------------\n\nTITLE: Snippet of the platform script showing Backstage configuration\nDESCRIPTION: Part of the platform Nushell script that imports Backstage-specific functions and setup procedures.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: nushell\nCODE:\n```\n#!/usr/bin/env nu\n...\nsource scripts/backstage.nu\n...\n```\n\n----------------------------------------\n\nTITLE: Displaying a Kargo Warehouse Manifest via Shell Command\nDESCRIPTION: This shell command prints the YAML content for the Kargo Warehouse resource from its manifest file. It is primarily used to review or verify the manifest before applying.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncat kargo-manifests/warehouse.yaml\n```\n\n----------------------------------------\n\nTITLE: Changing Directory to Backstage Source Code (Shell)\nDESCRIPTION: Navigates the shell into the `backstage` directory, which contains the source code for the Backstage application.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\ncd backstage\n```\n\n----------------------------------------\n\nTITLE: Embedding YouTube Video in Markdown\nDESCRIPTION: This code snippet embeds a YouTube video into the markdown document using a custom shortcode.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/ci-vs-cd-vs-gitops-vs-state-management-whats-the-real-difference/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{< youtube KOElr5eFJh8 >}}\n```\n\n----------------------------------------\n\nTITLE: Viewing GitHub Actions Workflow File Contents Using Shell (sh)\nDESCRIPTION: Executes a shell command to output the contents of the specified GitHub Actions workflow YAML file. Requires shell access and presence of '.github/workflows/build11.yaml' in the project. Displays the complete workflow YAML file to standard output for inspection, troubleshooting, or review.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/say-goodbye-to-makefile-use-taskfile-to-manage-tasks-in-ci-cd-pipelines-and-locally/_index.md#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\ncat .github/workflows/build11.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying Justfile Contents\nDESCRIPTION: This snippet shows how to view the contents of the Justfile, which defines the recipes and their implementations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/from-makefile-to-justfile-or-taskfile-recipe-runner-replacement/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncat Justfile\n```\n\n----------------------------------------\n\nTITLE: Switching to Main Branch with Git\nDESCRIPTION: A simple Git command to checkout the main branch, likely used to reset the environment after experimenting with KCL configurations.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout main\n```\n\n----------------------------------------\n\nTITLE: Invoking KCL Command-Line Help (Shell)\nDESCRIPTION: This shell command executes the KCL command-line interface (CLI) tool with the `--help` flag. It is used to display the available commands, flags, and general usage instructions for the KCL tool.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/app-management/kcl/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkcl --help\n```\n\n----------------------------------------\n\nTITLE: Echoing Remote Frontend URL for Manual Testing in Shell\nDESCRIPTION: Prints the full frontend URL used to access the remote frontend service, allowing the tester to copy-paste into a browser to verify UI and integration with backend. Requires $INGRESS_HOST to be set in the environment. Inputs: None. Output: Fully qualified frontend URL to standard output.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/mirrord-magic-write-code-locally-see-it-remotely/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\necho \"http://staging.silly-demo-frontend.$INGRESS_HOST\"\n```\n\n----------------------------------------\n\nTITLE: Sending HTTP Request to Calculate Fibonacci Number\nDESCRIPTION: This curl command sends an HTTP request to the application to calculate a Fibonacci number, demonstrating a long-running operation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncurl \"http://localhost:8080/fibonacci?number=50\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Processes with ps and grep (sh)\nDESCRIPTION: This shell command lists all running processes using 'ps aux' and filters the output for processes that match 'VSCode' using 'grep'. It is commonly used to locate one or more processes by name or property. Dependencies include standard Unix 'ps' and 'grep' utilities; the command outputs process details such as user, PID, CPU/memory usage, and command line for matched processes.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/observability/inspektor-gadget-kubernetes-debugging-ebpf/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nps aux | grep VSCode\n```\n\n----------------------------------------\n\nTITLE: Development Environment Setup Commands\nDESCRIPTION: Shell commands for setting up the development environment and initializing the cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndevbox shell\n\nchmod +x setup.sh\n\nCLUSTER_TYPE=kind ./setup.sh\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Applying Kubernetes Resources\nDESCRIPTION: Shell command to apply the Kubernetes resources to the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename kubernetes/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Development Environment with Devbox\nDESCRIPTION: Devbox configuration file defining required packages (Nushell and Go) for the CI environment, with an initialization hook to make the Nushell script executable.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_33\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"packages\": [\n    \"nushell@0.100.0\",\n    \"go@1.22.3\"\n  ],\n  \"shell\": {\n    \"init_hook\": [\n      \"chmod +x dot.nu\"\n    ],\n    \"scripts\":   {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Gateway Resource in Kubernetes\nDESCRIPTION: This command applies the Gateway resource definition to the Kubernetes cluster in the 'a-team' namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_44\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team apply --filename service/gateway.yaml\n```\n\n----------------------------------------\n\nTITLE: Displaying New Version of Crossplane Claim\nDESCRIPTION: This snippet shows the command to display an example of a new version Crossplane Claim, demonstrating the move of Crossplane-specific parameters to spec.crossplane and custom parameters directly under spec.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/crossplane/crossplane-v2-simplified-compositions-namespace-scoped-resources-and-more/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ncat examples/aws-eso.yaml\n```\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkit.live/v1beta1\nkind: SQL\nmetadata:\n  name: my-db\nspec:\n  version: \"16.3\"\n  size: medium\n  region: us-east-1\n  ...\n  crossplane:\n    compositionSelector:\n      matchLabels:\n        provider: aws\n        db: postgresql\n```\n\n----------------------------------------\n\nTITLE: Navigating Up One Directory Level (Shell)\nDESCRIPTION: Changes the current working directory to the parent directory, moving out of the `backstage` source code folder.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/why-i-changed-my-mind-about-backstage-a-brutally-honest-opinion/_index.md#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\ncd ..\n```\n\n----------------------------------------\n\nTITLE: Example JSON Output from Application API (JSON)\nDESCRIPTION: This JSON snippet shows the expected output format when querying the `/videos` endpoint of the `silly-demo` application after inserting data. It represents an array of video objects, each containing an `id` and a `title` field.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_26\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"1\",\n    \"title\": \"something\"\n  },\n  {\n    \"id\": \"2\",\n    \"title\": \"else\"\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Implementing Hugo Shortcode for Child Pages\nDESCRIPTION: Hugo shortcode that renders child pages with sorting by date, including descriptions, and using h2-style headings. This shortcode is used to automatically generate a list of subpages in the Kubernetes section.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: hugo\nCODE:\n```\n{{% children sort=\"date\" description=\"true\" style=\"h2\" %}}\n```\n\n----------------------------------------\n\nTITLE: Stopping Okteto Development Environment in Kubernetes\nDESCRIPTION: This command stops the Okteto development environment in the specified namespace, reverting the application back to its original state.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/development/stop-using-docker-and-local-kubernetes-for-dev-environments-feat-okteto/_index.md#2025-04-23_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nokteto down --namespace egulliksen\n```\n\n----------------------------------------\n\nTITLE: Setting GitHub Registry Secret\nDESCRIPTION: Command to set the REGISTRY_PASSWORD secret in GitHub to enable pushing container images from CI workflows.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ngh secret set REGISTRY_PASSWORD --body $GITHUB_TOKEN \\\n    --repo $GITHUB_USER/idp-full-app\n```\n\n----------------------------------------\n\nTITLE: Adding Files to Git Staging in Shell\nDESCRIPTION: Adds all changes in the current directory to Git staging.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/db/neon---never-share-databases-again/_index.md#2025-04-23_snippet_32\n\nLANGUAGE: sh\nCODE:\n```\ngit add .\n```\n\n----------------------------------------\n\nTITLE: 502 Bad Gateway Error Response\nDESCRIPTION: HTML output showing a 502 Bad Gateway error that occurs when a request is interrupted by Pod deletion before the application can respond.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/containers/stop-losing-requests-learn-graceful-shutdown-techniques/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<html>\n<head><title>502 Bad Gateway</title></head>\n<body>\n<center><h1>502 Bad Gateway</h1></center>\n<hr><center>nginx</center>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Displaying Kubernetes Service Definition File (Shell)\nDESCRIPTION: This command uses 'cat' to display the contents of the YAML file defining the Kubernetes Service. This allows examination of the service configuration before applying it.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\ncat service/base.yaml\n```\n\n----------------------------------------\n\nTITLE: Creating On-Demand Backup\nDESCRIPTION: Command to create an immediate backup using Velero\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/master-kubernetes-backups-with-velero-step-by-step-guide/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nvelero backup create pre-disaster\n```\n\n----------------------------------------\n\nTITLE: Listing Kubernetes Resources\nDESCRIPTION: Shell command to list all resources and ingresses in the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: GitHub Repository Claim Configuration\nDESCRIPTION: YAML manifest defining the repository configuration including application language, database requirements, and GitOps settings.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n---\napiVersion: devopstoolkitseries.com/v1alpha1\nkind: GitHubClaim\nmetadata:\n  name: crossplane-gh-demo\nspec:\n  id: crossplane-gh-demo\n  parameters:\n    public: true\n    registry: ttl.sh\n    app:\n      language: go\n      host: my-repo.acme.com\n      namespace: a-team\n    db:\n      enabled: true\n      provider: aws\n      version: \"16.2\"\n    repo:\n      user: vfarcic\n    gitops:\n      enabled: true\n      user: vfarcic\n      repo: crossplane-gh\n```\n\n----------------------------------------\n\nTITLE: Listing Gateway Classes in Kubernetes\nDESCRIPTION: This command lists all available Gateway classes in the Kubernetes cluster. It shows the different types of external load balancers that can be created.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/services-ingress-cluster-api/_index.md#2025-04-23_snippet_42\n\nLANGUAGE: sh\nCODE:\n```\nkubectl get gatewayclasses\n```\n\n----------------------------------------\n\nTITLE: Viewing Repository Configuration Template\nDESCRIPTION: Shell command to display the repository configuration template file.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncat examples/repo-$HYPERSCALER.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Kubernetes Resources\nDESCRIPTION: Shell command to delete the previously created Kubernetes resources from the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename kubernetes/app.yaml\n```\n\n----------------------------------------\n\nTITLE: Testing Command Duration Display in Starship\nDESCRIPTION: Demonstrates how Starship shows command duration for commands that take longer than the configured threshold (5 seconds) using the sleep command.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/from-boring-to-productive-customize-your-shell-prompt-with-starship/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nsleep 6\n```\n\n----------------------------------------\n\nTITLE: Running Platform Setup Script for Applications\nDESCRIPTION: Commands to make the platform script executable, run the setup process specifically for applications, and load environment variables. This prepares the Kubernetes environment and configures necessary components.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nchmod +x platform\n\nplatform setup apps\n\nsource .env\n```\n\n----------------------------------------\n\nTITLE: Displaying Crossplane Composition File Content (Shell)\nDESCRIPTION: Executes the `cat` command to display the contents of the `package/compositions.yaml` file. This file contains the Crossplane Composition definition discussed in the text.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/automate-everything-how-one-manifest-powers-your-entire-devops-pipeline/_index.md#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncat package/compositions.yaml\n```\n\n----------------------------------------\n\nTITLE: Deleting Custom Resource Claim\nDESCRIPTION: Shell command to delete the custom AppClaim resource from the a-team namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-ux-to-api-mastering-platform-validations-with-kubernetes-validating-admission-policies/_index.md#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team delete --filename tmp/appclaim.yaml\n```\n\n----------------------------------------\n\nTITLE: Inspecting Production Kubernetes Resources\nDESCRIPTION: Command to check all Kubernetes resources created in the production namespace after promoting an application. This allows inspection of environment-specific configurations applied by KubeVela.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/kubevela-oam-the-resurrection-of-simplified-app-management/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace prod get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Merging GitHub Pull Request\nDESCRIPTION: Shell command to merge the pull request using the GitHub CLI with rebase strategy.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\ngh pr merge silly-demo-ci --rebase\n```\n\n----------------------------------------\n\nTITLE: Querying Synced API Resources for dot-01 via Clusterpedia (Shell)\nDESCRIPTION: This command uses `kubectl` with the `--cluster dot-01` flag (referencing the kubeconfig entry created by the script) to list the API resources available through Clusterpedia for the `dot-01` cluster. The output reflects only the resources that Clusterpedia was configured to sync for this cluster (Services, Deployments, SQLClaims, SQLs, Ingresses), not all resources present on the actual cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --cluster dot-01 api-resources\n```\n\nLANGUAGE: text\nCODE:\n```\nNAME        SHORTNAMES APIVERSION                       NAMESPACED KIND\nservices    svc        v1                               true       Service\ndeployments deploy     apps/v1                          true       Deployment\nsqlclaims              devopstoolkitseries.com/v1alpha1 true       SQLClaim\nsqls                   devopstoolkitseries.com/v1alpha1 false      SQL\ningresses   ing        networking.k8s.io/v1             true       Ingress\n```\n\n----------------------------------------\n\nTITLE: Checking Application Resources in Kubernetes\nDESCRIPTION: Command to check all resources created in the namespace, including pods, services, and ingresses.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace a-team get all,ingresses\n```\n\n----------------------------------------\n\nTITLE: Displaying Platform CLI Help in Shell\nDESCRIPTION: This command executes the custom 'platform' CLI with the '--help' flag. It is used to display the usage instructions, available subcommands (like 'apply', 'build', 'create', 'delete', 'destroy', 'get', 'run', 'setup', 'update'), and flags for the 'platform' tool, demonstrating its capabilities within a shell environment. The output shows the structured help generated by the CLI.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/terminal/how-to-create-custom-clis-that-make-your-devops-life-easier---nushell/_index.md#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nplatform --help\n```\n\nLANGUAGE: text\nCODE:\n```\n [32mUsage [0m:\n  > platform \n\n [32mSubcommands [0m:\n   [36mplatform apply argocd  [32m(custom) [0m - \n   [36mplatform apply crossplane  [32m(custom) [0m - \n   [36mplatform apply ingress  [32m(custom) [0m - \n   [36mplatform apply kyverno  [32m(custom) [0m - \n   [36mplatform apply port  [32m(custom) [0m - \n   [36mplatform build image  [32m(custom) [0m - Builds a container image\n   [36mplatform create kubernetes  [32m(custom) [0m - \n   [36mplatform delete crossplane  [32m(custom) [0m - \n   [36mplatform delete port  [32m(custom) [0m - \n   [36mplatform destroy all  [32m(custom) [0m - Destroys the complete demo\n   [36mplatform destroy clis  [32m(custom) [0m - Destroys the CLIs demo\n   [36mplatform destroy kubernetes  [32m(custom) [0m - \n   [36mplatform get github  [32m(custom) [0m - \n   [36mplatform get hyperscaler  [32m(custom) [0m - \n   [36mplatform get ingress  [32m(custom) [0m - \n   [36mplatform run ci  [32m(custom) [0m - Runs all CI tasks\n   [36mplatform run unit-tests  [32m(custom) [0m - Executes tests\n   [36mplatform setup all  [32m(custom) [0m - Sets up the complete demo\n   [36mplatform setup clis  [32m(custom) [0m - Sets up the CLIs demo\n   [36mplatform update gitops  [32m(custom) [0m - Executes tests\n\n [32mFlags [0m:\n   [36m-h [0m [39m, [0m  [36m--help [0m: Display the help message for this command\n\n [32mInput/output types [0m:\n  ╭───┬───────┬────────╮\n  │ # │ input │ output │\n  ├───┼───────┼────────┤\n  │ 0 │ any   │ any    │\n  ╰───┴───────┴────────╯\n```\n\n----------------------------------------\n\nTITLE: Packaging Helm Chart via Helm CLI - Shell\nDESCRIPTION: This snippet shows how to package a Helm chart using the 'helm package chart' command. It requires Helm CLI installed and the presence of a valid Helm chart directory named 'chart'. The command creates a '.tgz' tarball archive of the chart in the current directory. The input is the Helm chart directory, and the output is a package file suitable for publishing. No special configuration is needed beyond the chart itself.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-docker-to-kubernetes-running-backstage-in-production/_index.md#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nhelm package chart\n```\n\n----------------------------------------\n\nTITLE: Kubernetes Resources Output\nDESCRIPTION: Output showing the Kubernetes resources created by the AppClaim, including deployment, replicaset, pod, service, and ingress.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_19\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                              READY   STATUS         RESTARTS   AGE\npod/silly-demo-6b5974ff5c-wcvxx   0/1     ErrImagePull   0          6s\n\nNAME                 TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\nservice/silly-demo   ClusterIP   10.96.167.228   <none>        8080/TCP   6s\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/silly-demo   0/1     1            0           6s\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/silly-demo-6b5974ff5c   1         1         0       6s\n\nNAME                                   CLASS   HOSTS                         ADDRESS   PORTS   AGE\ningress.networking.k8s.io/silly-demo   nginx   silly-demo.127.0.0.1.nip.io             80      6s\n```\n\n----------------------------------------\n\nTITLE: Displaying PVC Manifest Using Default Storage Class\nDESCRIPTION: This command displays the content of a YAML file defining a Persistent Volume Claim that omits the 'storageClassName' field. This relies on a default Storage Class being configured in the cluster.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/mastering-kubernetes-volumes-emptydir-csi-drivers-storage-classes-persistent-volumes-and-persistent-volume-claims-configmaps-and-secrets/_index.md#2025-04-23_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\ncat volume/persistent-volume-claim-default.yaml\n```\n\n----------------------------------------\n\nTITLE: JSON Output of Pull Request Files\nDESCRIPTION: JSON response showing the files created by Crossplane in the Pull Request, including GitHub workflows, Dockerfile, and configuration files.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/from-zero-to-fully-operational-developer-platform-in-5-steps/_index.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": [\n    {\n      \"path\": \".github/workflows/ci.yaml\",\n      \"additions\": 43,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \".github/workflows/sync-control-plane-direct.yml\",\n      \"additions\": 64,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"Dockerfile\",\n      \"additions\": 15,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"devbox-ci.json\",\n      \"additions\": 12,\n      \"deletions\": 0\n    },\n    {\n      \"path\": \"dot.nu\",\n      \"additions\": 44,\n      \"deletions\": 0\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Argo Events Sensor for GitHub Dispatches\nDESCRIPTION: Updates the Argo Events sensor configuration to use the correct GitHub repository URL for dispatching events. This is crucial for connecting Argo Events with GitHub Actions.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/gitops-broke-ci-cd-here-is-how-to-fix-it-with-argo-events/_index.md#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nexport GITHUB_USER=[...]\n\nyq --inplace \\\n    \".spec.triggers[0].template.http.url = \\\"https://api.github.com/repos/$GITHUB_USER/argo-events-gh-demo/dispatches\\\"\" \\\n    sensor-deployment.yaml\n\ngh repo view --web\n```\n\n----------------------------------------\n\nTITLE: Crossplane Resources Complete Trace Output\nDESCRIPTION: Output showing all resources created by the AppClaim in their final, available state after reconciliation.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/internal-developer-platforms/full-application-setup-in-internal-developer-platform-idp-with-crossplane/_index.md#2025-04-23_snippet_22\n\nLANGUAGE: plaintext\nCODE:\n```\nNAME                                              SYNCED   READY   STATUS\nAppClaim/silly-demo (a-team)                      True     True    Available\n└─ App/silly-demo-v2c9s                           True     True    Available\n   ├─ Object/silly-demo-deployment                True     True    Available\n   ├─ Object/silly-demo-ingress                   True     True    Available\n   ├─ Object/silly-demo-service                   True     True    Available\n   ├─ ProviderConfig/silly-demo-app               -        -       \n   ├─ Branch/silly-demo-branch-ci                 True     True    Available\n   ├─ PullRequest/silly-demo                      True     True    Available\n   ├─ RepositoryFile/silly-demo-file-devbox       True     True    Available\n   ├─ RepositoryFile/silly-demo-file-dockerfile   True     True    Available\n   ├─ RepositoryFile/silly-demo-file-dot-nu       True     True    Available\n   └─ RepositoryFile/silly-demo-file-gha          True     True    Available\n```\n\n----------------------------------------\n\nTITLE: Clusterpedia Demo Setup Commands\nDESCRIPTION: Series of commands to clone the demo repository, enter the development environment, and initialize the setup for Clusterpedia demonstration.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/kubernetes/clusterpedia/_index.md#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/vfarcic/clusterpedia-demo\n\ncd clusterpedia-demo\n```\n\n----------------------------------------\n\nTITLE: Checking Argo CD Applications Status\nDESCRIPTION: Command to list and check the status of applications created by the ApplicationSet in the Argo CD namespace.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/ci-cd/argo-cd-gitops-promotions-with-kargo-by-akuity-a-brilliant-idea-with-flawed-execution/_index.md#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nkubectl --namespace argocd get applications\n```\n\n----------------------------------------\n\nTITLE: Executing Ad-Hoc Steampipe Query with JSON Output and Formatting\nDESCRIPTION: This shell command demonstrates running a Steampipe query non-interactively and processing its output. It queries all data from `kubernetes_all.kubernetes_server`, specifies JSON as the output format using `--output json`, and then pipes (|) the raw JSON output to the `jq` utility for pretty-printing.\nSOURCE: https://github.com/vfarcic/devopstoolkit-live/blob/main/content/cloud/single-pane-of-glass-for-everything-aws-azure-gcp-kubernetes-with-steampipe/_index.md#2025-04-23_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nsteampipe query \\\n    \"select * from kubernetes_all.kubernetes_server;\" \\\n    --output json | jq .\n```"
  }
]