[
  {
    "owner": "solana-foundation",
    "repo": "gill",
    "content": "TITLE: Creating a Solana RPC Client\nDESCRIPTION: Establishes a connection to the Solana blockchain by creating RPC and subscription clients. Can connect to standard Solana networks (mainnet, devnet, etc.) or custom RPC endpoints.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc, rpcSubscriptions, sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"mainnet\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc, rpcSubscriptions, sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"localnet\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc, rpcSubscriptions, sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"https://private-solana-rpc-provider.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Token with Metadata in Solana using Gill\nDESCRIPTION: Builds a transaction that creates a token with metadata, supporting both original token program and token extensions (token22). For original tokens, it uses Metaplex's Token Metadata program, while token22 uses metadata pointer extensions.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildCreateTokenTransaction } from \"gill/programs/token\";\n\nconst createTokenTx = await buildCreateTokenTransaction({\n  feePayer: signer,\n  latestBlockhash,\n  mint,\n  // mintAuthority, // default=same as the `feePayer`\n  metadata: {\n    isMutable: true, // if the `updateAuthority` can change this metadata in the future\n    name: \"Only Possible On Solana\",\n    symbol: \"OPOS\",\n    uri: \"https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/Climate/metadata.json\",\n  },\n  // updateAuthority, // default=same as the `feePayer`\n  decimals: 2, // default=9,\n  tokenProgram, // default=TOKEN_PROGRAM_ADDRESS, token22 also supported\n  // default cu limit set to be optimized, but can be overriden here\n  // computeUnitLimit?: number,\n  // obtain from your favorite priority fee api\n  // computeUnitPrice?: number, // no default set\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up SolanaProvider for React\nDESCRIPTION: Wraps a React application with the SolanaProvider context and initializes a Solana client for devnet. This provides Solana blockchain connectivity to the entire application.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\nimport { SolanaProvider } from \"gill-react\";\n\nconst client = createSolanaClient({\n  urlOrMoniker: \"devnet\",\n});\n\nfunction App() {\n  return <SolanaProvider client={client}>{/* ... */}</SolanaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Token with Metadata using TypeScript in Solana\nDESCRIPTION: Builds a transaction to create a token with metadata using either the original token program or token extensions program. Supports configurable parameters including metadata properties, decimals, and compute units.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildCreateTokenTransaction } from \"gill/programs/token\";\n\nconst createTokenTx = await buildCreateTokenTransaction({\n  feePayer: signer,\n  latestBlockhash,\n  mint,\n  // mintAuthority, // default=same as the `feePayer`\n  metadata: {\n    isMutable: true, // if the `updateAuthority` can change this metadata in the future\n    name: \"Only Possible On Solana\",\n    symbol: \"OPOS\",\n    uri: \"https://raw.githubusercontent.com/solana-developers/opos-asset/main/assets/Climate/metadata.json\",\n  },\n  // updateAuthority, // default=same as the `feePayer`\n  decimals: 2, // default=9,\n  tokenProgram, // default=TOKEN_PROGRAM_ADDRESS, token22 also supported\n  // default cu limit set to be optimized, but can be overriden here\n  // computeUnitLimit?: number,\n  // obtain from your favorite priority fee api\n  // computeUnitPrice?: number, // no default set\n});\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens to Destination Wallet in Solana\nDESCRIPTION: Builds a transaction to mint new tokens to a destination wallet address. Handles automatic creation of associated token accounts and considers decimal places in amount calculation.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildMintTokensTransaction } from \"gill/programs/token\";\n\nconst mintTokensTx = await buildMintTokensTransaction({\n  feePayer: signer,\n  latestBlockhash,\n  mint,\n  mintAuthority: signer,\n  amount: 1000, // note: be sure to consider the mint's `decimals` value\n  // if decimals=2 => this will mint 10.00 tokens\n  // if decimals=4 => this will mint 0.100 tokens\n  destination,\n  // use the correct token program for the `mint`\n  tokenProgram, // default=TOKEN_PROGRAM_ADDRESS\n  // default cu limit set to be optimized, but can be overriden here\n  // computeUnitLimit?: number,\n  // obtain from your favorite priority fee api\n  // computeUnitPrice?: number, // no default set\n});\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens Between Wallets in Solana\nDESCRIPTION: Builds a transaction to transfer tokens between wallets, handling associated token account creation and decimal place calculations. Supports custom source accounts and compute unit configurations.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildTransferTokensTransaction } from \"gill/programs/token\";\n\nconst transferTokensTx = await buildTransferTokensTransaction({\n  feePayer: signer,\n  latestBlockhash,\n  mint,\n  authority: signer,\n  // sourceAta, // default=derived from the `authority`.\n  /**\n   * if the `sourceAta` is not derived from the `authority` (like for multi-sig wallets),\n   * manually derive with `getAssociatedTokenAccountAddress()`\n  */\n  amount: 900, // note: be sure to consider the mint's `decimals` value\n  // if decimals=2 => this will transfer 9.00 tokens\n  // if decimals=4 => this will transfer 0.090 tokens\n  destination: address(...),\n  // use the correct token program for the `mint`\n  tokenProgram, // default=TOKEN_PROGRAM_ADDRESS\n  // default cu limit set to be optimized, but can be overriden here\n  // computeUnitLimit?: number,\n  // obtain from your favorite priority fee api\n  // computeUnitPrice?: number, // no default set\n});\n```\n\n----------------------------------------\n\nTITLE: Transferring Tokens Between Wallets in Solana using Gill\nDESCRIPTION: Builds a transaction that transfers tokens from a source wallet to a destination wallet. Automatically creates an associated token account for the destination if needed, and requires consideration of the mint's decimals value when setting amounts.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildTransferTokensTransaction } from \"gill/programs/token\";\n\nconst transferTokensTx = await buildTransferTokensTransaction({\n  feePayer: signer,\n  latestBlockhash,\n  mint,\n  authority: signer,\n  // sourceAta, // default=derived from the `authority`.\n  /**\n   * if the `sourceAta` is not derived from the `authority` (like for multi-sig wallets),\n   * manually derive with `getAssociatedTokenAccountAddress()`\n  */\n  amount: 900, // note: be sure to consider the mint's `decimals` value\n  // if decimals=2 => this will transfer 9.00 tokens\n  // if decimals=4 => this will transfer 0.090 tokens\n  destination: address(...),\n  // use the correct token program for the `mint`\n  tokenProgram, // default=TOKEN_PROGRAM_ADDRESS\n  // default cu limit set to be optimized, but can be overriden here\n  // computeUnitLimit?: number,\n  // obtain from your favorite priority fee api\n  // computeUnitPrice?: number, // no default set\n});\n```\n\n----------------------------------------\n\nTITLE: Sending and Confirming Solana Transactions with Gill\nDESCRIPTION: Shows how to send and confirm a Solana transaction using the sendAndConfirmTransaction function from Gill. It includes signing the transaction, obtaining the signature, and logging an explorer link.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill\";\n\nconst { sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"mainnet\",\n});\n\nconst transaction = createTransaction(...);\n\nconst signedTransaction = await signTransactionMessageWithSigners(transaction);\nconst signature: string = getSignatureFromTransaction(signedTransaction);\n\nconsole.log(getExplorerLink({ transaction: signature }));\n\n// default commitment level of `confirmed`\nawait sendAndConfirmTransaction(signedTransaction)\n```\n\n----------------------------------------\n\nTITLE: Sending and Confirming Transactions with Gill\nDESCRIPTION: Demonstrates how to send and confirm a transaction on the Solana blockchain using sendAndConfirmTransaction. This includes signing the transaction, extracting the signature, and generating an explorer link.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill\";\n\nconst { sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"mainnet\",\n});\n\nconst transaction = createTransaction(...);\n\nconst signedTransaction = await signTransactionMessageWithSigners(transaction);\nconst signature: string = getSignatureFromTransaction(signedTransaction);\n\nconsole.log(getExplorerLink({ transaction: signature }));\n\n// default commitment level of `confirmed`\nawait sendAndConfirmTransaction(signedTransaction)\n```\n\n----------------------------------------\n\nTITLE: Creating a Solana Transaction\nDESCRIPTION: Creates a Solana transaction with specified parameters. The feePayer can be either an Address or TransactionSigner, and compute budget parameters are highly recommended for better transaction success rates.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTransaction } from \"gill\";\n\nconst transaction = createTransaction({\n  version,\n  feePayer,\n  instructions,\n  // the compute budget values are HIGHLY recommend to be set in order to maximize your transaction landing rate\n  // computeUnitLimit: number,\n  // computeUnitPrice: number,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Solana Transaction in TypeScript\nDESCRIPTION: Demonstrates how to create a Solana transaction using the createTransaction function from Gill.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTransaction } from \"gill\";\n\nconst transaction = createTransaction({\n  version,\n  feePayer,\n  instructions,\n  // the compute budget values are HIGHLY recommend to be set in order to maximize your transaction landing rate\n  // computeUnitLimit: number,\n  // computeUnitPrice: number,\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Balance with useBalance Hook\nDESCRIPTION: Uses the useBalance hook to fetch an account's balance in lamports and convert it to SOL for display. Demonstrates handling loading and error states.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { lamportsToSol } from \"gill\";\nimport { useBalance } from \"gill-react\";\n\nexport function PageClient() {\n  const { balance, isLoading, isError, error } = useBalance({\n    address: \"nicktrLHhYzLmoVbuZQzHUTicd2sfP571orwo9jfc8c\",\n  });\n\n  // if (isLoading) { return ... }\n  // if (isError) { return ... }\n\n  return (\n    <div className=\"\">\n      <p>Balance: {lamportsToSol(balance) + \" SOL\"}</p>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Transaction with Latest Blockhash\nDESCRIPTION: Creates a Solana transaction while explicitly setting the latest blockhash, which is required for transaction validity within a specific timeframe.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTransaction } from \"gill\";\n\nconst { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n\nconst transaction = createTransaction({\n  version,\n  feePayer,\n  instructions,\n  latestBlockhash,\n  // the compute budget values are HIGHLY recommend to be set in order to maximize your transaction landing rate\n  // computeUnitLimit: number,\n  // computeUnitPrice: number,\n});\n```\n\n----------------------------------------\n\nTITLE: Minting Tokens to a Destination Wallet in Solana using Gill\nDESCRIPTION: Builds a transaction that mints new tokens to a destination wallet, increasing the token's overall supply. Automatically creates an associated token account for the destination if it doesn't exist, and requires consideration of the mint's decimals value when setting amounts.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { buildMintTokensTransaction } from \"gill/programs/token\";\n\nconst mintTokensTx = await buildMintTokensTransaction({\n  feePayer: signer,\n  latestBlockhash,\n  mint,\n  mintAuthority: signer,\n  amount: 1000, // note: be sure to consider the mint's `decimals` value\n  // if decimals=2 => this will mint 10.00 tokens\n  // if decimals=4 => this will mint 0.100 tokens\n  destination,\n  // use the correct token program for the `mint`\n  tokenProgram, // default=TOKEN_PROGRAM_ADDRESS\n  // default cu limit set to be optimized, but can be overriden here\n  // computeUnitLimit?: number,\n  // obtain from your favorite priority fee api\n  // computeUnitPrice?: number, // no default set\n});\n```\n\n----------------------------------------\n\nTITLE: Generating a Non-Extractable KeyPairSigner\nDESCRIPTION: Creates a secure non-extractable KeyPairSigner instance that can be used to sign transactions and messages. The secret key material cannot be extracted from this instance, making it more secure for most operations.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateKeyPairSigner } from \"gill\";\n\nconst signer: KeyPairSigner = generateKeyPairSigner();\n```\n\n----------------------------------------\n\nTITLE: Creating Solana RPC Client for Mainnet in TypeScript\nDESCRIPTION: Establishes a Solana RPC client connection to the mainnet using the createSolanaClient function.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc, rpcSubscriptions, sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"mainnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generating an Extractable KeyPairSigner\nDESCRIPTION: Creates an extractable KeyPairSigner that allows access to the secret key material. This should only be used when you need to save the keypair, as it's less secure than non-extractable keypairs.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateExtractableKeyPairSigner } from \"gill\";\n\nconst signer: KeyPairSigner = generateExtractableKeyPairSigner();\n```\n\n----------------------------------------\n\nTITLE: Decoding Account Data with useAccount and a Custom Decoder\nDESCRIPTION: Uses the useAccount hook with a custom decoder to parse token mint account data into a structured format, demonstrating how to work with complex on-chain data structures.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useAccount } from \"gill-react\";\nimport { getMintDecoder } from \"gill/programs/token\";\n\nexport function PageClient() {\n  const { account, isLoading, isError, error } = useAccount({\n    // USDC mint account (on Solana mainnet)\n    address: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    decoder: getMintDecoder(),\n  });\n\n  // if (isLoading) { return ... }\n  // if (isError) { return ... }\n\n  return (\n    <div className=\"\">\n      <pre>account: {JSON.stringify(account, null, \"\\t\")}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Simulating Solana Transactions with Gill\nDESCRIPTION: Demonstrates how to simulate a Solana transaction using the simulateTransaction function from the Gill library. This function can be used with either signed or unsigned transactions.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill\";\n\nconst { simulateTransaction } = createSolanaClient({\n  urlOrMoniker: \"mainnet\",\n});\n\nconst transaction = createTransaction(...);\n\nconst simulation = await simulateTransaction(transaction)\n```\n\n----------------------------------------\n\nTITLE: Using Debug Mode in Gill for Solana Development\nDESCRIPTION: Demonstrates how to enable and use Gill's debug mode for troubleshooting Solana transactions. Debug mode can log transaction explorer links and base64 transaction strings for inspection, with configurable log levels.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { debug, isDebugEnabled } from \"gill\";\n\nif (isDebugEnabled()) {\n  // your custom logic\n}\n\n// log this message if the \"info\" or above log level is enabled\ndebug(\"custom message\");\n\n// log this message if the \"debug\" or above log level is enabled\ndebug(\"custom message\", \"debug\");\n\n// log this message if the \"warn\" or above log level is enabled\ndebug(\"custom message\", \"warn\");\n\n// log this message if the \"warn\" or above log level is enabled\ndebug(\"custom message\", \"warn\");\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Blockhash Setting\nDESCRIPTION: Signs a transaction while setting the latest blockhash lifetime. This is necessary when the transaction was created without a blockhash or needs an updated one.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createTransaction,\n  createSolanaClient,\n  signTransactionMessageWithSigners,\n  setTransactionMessageLifetimeUsingBlockhash,\n} from \"gill\";\n\nconst { rpc } = createSolanaClient(...);\nconst transaction = createTransaction(...);\n\nconst { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n\nconst signedTransaction = await signTransactionMessageWithSigners(\n  setTransactionMessageLifetimeUsingBlockhash(latestBlockhash, transaction),\n);\n```\n\n----------------------------------------\n\nTITLE: Simulating Transactions with Gill\nDESCRIPTION: Shows how to simulate a transaction on the Solana blockchain using the simulateTransaction function from createSolanaClient(). This allows testing transaction execution without committing it to the blockchain.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill\";\n\nconst { simulateTransaction } = createSolanaClient({\n  urlOrMoniker: \"mainnet\",\n});\n\nconst transaction = createTransaction(...);\n\nconst simulation = await simulateTransaction(transaction)\n```\n\n----------------------------------------\n\nTITLE: Signing a Transaction with Blockhash Already Set\nDESCRIPTION: Signs a transaction that already has the latest blockhash lifetime set. This is a simpler signing flow when the transaction was created with a blockhash.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTransaction, signTransactionMessageWithSigners } from \"gill\";\n\nconst transaction = createTransaction(...);\n\nconst signedTransaction = await signTransactionMessageWithSigners(transaction);\n```\n\n----------------------------------------\n\nTITLE: Configuring Transaction Confirmation Options in Gill\nDESCRIPTION: Shows how to configure advanced options when sending and confirming transactions, including commitment level, preflight checks, and retry settings.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nawait sendAndConfirmTransaction(signedTransaction, {\n  commitment: \"confirmed\",\n  skipPreflight: true,\n  maxRetries: 10n,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Solana Transaction with Latest Blockhash in TypeScript\nDESCRIPTION: Shows how to create a Solana transaction while setting the latest blockhash using Gill and RPC calls.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTransaction } from \"gill\";\n\nconst { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n\nconst transaction = createTransaction({\n  version,\n  feePayer,\n  instructions,\n  latestBlockhash,\n  // the compute budget values are HIGHLY recommend to be set in order to maximize your transaction landing rate\n  // computeUnitLimit: number,\n  // computeUnitPrice: number,\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing SolanaProviderClient in NextJS Root Layout\nDESCRIPTION: Demonstrates how to use the client-only SolanaProviderClient in a NextJS root layout to provide Solana functionality throughout the application.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SolanaProviderClient } from \"@/providers/solana-provider\";\n\nexport default function RootLayout({ children }: Readonly<{ children: React.ReactNode }>) {\n  return (\n    <html>\n      <body>\n        <SolanaProviderClient>{children}</SolanaProviderClient>\n      </body>\n    </html>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Making Solana RPC Calls\nDESCRIPTION: Demonstrates how to make RPC method calls to the Solana blockchain using the RPC client. Shows examples of fetching the current slot and getting the latest blockhash.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc } = createSolanaClient({ urlOrMoniker: \"devnet\" });\n\n// get slot\nconst slot = await rpc.getSlot().send();\n\n// get the latest blockhash\nconst { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n```\n\n----------------------------------------\n\nTITLE: Checking Transaction Status with useSignatureStatuses Hook\nDESCRIPTION: Utilizes the useSignatureStatuses hook to retrieve the status of a transaction by its signature, useful for tracking transaction confirmations.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useSignatureStatuses } from \"gill-react\";\n\nexport function PageClient() {\n  const { statuses, isLoading, isError, error } = useSignatureStatuses({\n    signatures: [\"5ewJmppABUbsWcDQEvThJj4GH4pRVK8NDjUtMVJXjvEndkhdy23mHjHpDmHVNNGoKsjPAsCwD4vzTQY4V2GEmvKu\"],\n  });\n\n  // if (isLoading) { return ... }\n  // if (isError) { return ... }\n\n  return (\n    <div className=\"\">\n      <pre>statuses: {JSON.stringify(statuses, null, \"\\t\")}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Solana Transaction Confirmation with Gill\nDESCRIPTION: Demonstrates how to configure the sendAndConfirmTransaction function with additional options such as commitment level, preflight skip, and retry count.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nawait sendAndConfirmTransaction(signedTransaction, {\n  commitment: \"confirmed\",\n  skipPreflight: true,\n  maxRetries: 10n,\n  ...\n});\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Rent for Accounts with Data\nDESCRIPTION: Shows how to calculate the minimum rent balance required for an account with specified data size. The calculation is based on the byte size that will be stored on-chain.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMinimumBalanceForRentExemption } from \"gill\";\n\nconst rent: bigint = getMinimumBalanceForRentExemption(50 /* 50 bytes */);\n// Expected value: 1_238_880n\n\n// same as, but this requires a network call\n// const rent = await rpc.getMinimumBalanceForRentExemption(50n).send();\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Explorer Links for Accounts\nDESCRIPTION: Shows how to create a Solana Explorer link for an account on a specific cluster (devnet in this example). This is useful for exploring account details on the blockchain.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  cluster: \"devnet\",\n  account: \"nick6zJc6HpW3kfBm4xS2dmbuVRyb5F3AnUvj5ymzR5\",\n});\n```\n\n----------------------------------------\n\nTITLE: Making Solana RPC Calls in TypeScript\nDESCRIPTION: Demonstrates how to make RPC calls to get slot and latest blockhash using the Solana RPC client.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc } = createSolanaClient({ urlOrMoniker: \"devnet\" });\n\n// get slot\nconst slot = await rpc.getSlot().send();\n\n// get the latest blockhash\nconst { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n```\n\n----------------------------------------\n\nTITLE: Generating Explorer Links for Transactions Before Sending\nDESCRIPTION: Demonstrates how to generate an explorer link for a transaction that has been signed but not yet sent to the network. This allows for sharing links to transactions before they are finalized.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getExplorerLink,\n  getSignatureFromTransaction,\n  signTransactionMessageWithSigners,\n} from \"gill\";\n\nconst signedTransaction = await signTransactionMessageWithSigners(...);\nconst link: string = getExplorerLink({\n  transaction: getSignatureFromTransaction(signedTransaction),\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Explorer Links with Gill\nDESCRIPTION: Demonstrates how to create Solana Explorer links for transactions, accounts, and blocks using the getExplorerLink function from Gill. It covers various scenarios including different clusters.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  transaction: \"4nzNU7YxPtPsVzeg16oaZvLz4jMPtbAzavDfEFmemHNv93iYXKKYAaqBJzFCwEVxiULqTYYrbjPwQnA1d9ZCTELg\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  getExplorerLink,\n  getSignatureFromTransaction\n  signTransactionMessageWithSigners,\n} from \"gill\";\n\nconst signedTransaction = await signTransactionMessageWithSigners(...);\nconst link: string = getExplorerLink({\n  transaction: getSignatureFromTransaction(signedTransaction),\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  cluster: \"devnet\",\n  account: \"nick6zJc6HpW3kfBm4xS2dmbuVRyb5F3AnUvj5ymzR5\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  cluster: \"localnet\",\n  account: \"11111111111111111111111111111111\",\n});\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  cluster: \"mainnet\",\n  block: \"242233124\",\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Explorer Links for Blocks\nDESCRIPTION: Shows how to create a Solana Explorer link for a specific block on the blockchain. This allows for easy viewing of block details in the explorer.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  cluster: \"mainnet\",\n  block: \"242233124\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using gill-react Hooks in React Server Component Applications\nDESCRIPTION: Example of using gill-react hooks in a NextJS application with React server components. The 'use client' directive is necessary to mark the component as client-side only.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"; // <--- directive required anywhere you use `gill-react`\n\nimport { useBalance, ... } from \"gill-react\";\n// ... other imports\n\nexport function PageClient() {\n  const { balance } = useBalance({\n    address: \"nicktrLHhYzLmoVbuZQzHUTicd2sfP571orwo9jfc8c\",\n  });\n\n  return (\n    {/* ... */}\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Obtaining Solana Transaction Signature with Gill\nDESCRIPTION: Shows how to get the signature from a signed Solana transaction using the getSignatureFromTransaction function from Gill.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignatureFromTransaction } from \"gill\";\n\nconst signature: string = getSignatureFromTransaction(signedTransaction);\nconsole.log(signature);\n// Example output: 4nzNU7YxPtPsVzeg16oaZvLz4jMPtbAzavDfEFmemHNv93iYXKKYAaqBJzFCwEVxiULqTYYrbjPwQnA1d9ZCTELg\n```\n\n----------------------------------------\n\nTITLE: Loading Keypair from Environment Variable\nDESCRIPTION: Shows how to load a keypair from bytes stored in an environment variable. This is useful for securely accessing keypairs in server environments.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromEnvironment } from \"gill/node\";\n\n// loads signer from bytes stored at `process.env[variableName]`\nconst signer = await loadKeypairSignerFromEnvironment(variableName);\nconsole.log(\"address:\", signer.address);\n```\n\n----------------------------------------\n\nTITLE: Extracting Transaction Signatures in Gill\nDESCRIPTION: Demonstrates how to get the transaction signature (transaction ID) from a signed transaction. This is useful for tracking transactions and building explorer links.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getSignatureFromTransaction } from \"gill\";\n\nconst signature: string = getSignatureFromTransaction(signedTransaction);\nconsole.log(signature);\n// Example output: 4nzNU7YxPtPsVzeg16oaZvLz4jMPtbAzavDfEFmemHNv93iYXKKYAaqBJzFCwEVxiULqTYYrbjPwQnA1d9ZCTELg\n```\n\n----------------------------------------\n\nTITLE: Loading Base58 Solana Keypair from Environment Variable with Gill/Node\nDESCRIPTION: Demonstrates how to load a KeyPairSigner from a base58 encoded keypair stored in an environment variable using the loadKeypairSignerFromEnvironmentBase58 function from the Gill/Node library.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromEnvironmentBase58 } from \"gill/node\";\n\n// loads signer from base58 keypair stored at `process.env[variableName]`\nconst signer = await loadKeypairSignerFromEnvironmentBase58(variableName);\nconsole.log(\"address:\", signer.address);\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Rent for Solana Accounts with Gill\nDESCRIPTION: Shows how to calculate the minimum rent balance for a Solana account using the getMinimumBalanceForRentExemption function from Gill. It demonstrates usage with and without specifying account space.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMinimumBalanceForRentExemption } from \"gill\";\n\n// when not `space` argument is provided: defaults to `0`\nconst rent: bigint = getMinimumBalanceForRentExemption();\n// Expected value: 890_880n\n\n// same as\n// getMinimumBalanceForRentExemption(0);\n\n// same as, but this requires a network call\n// const rent = await rpc.getMinimumBalanceForRentExemption(0n).send();\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMinimumBalanceForRentExemption } from \"gill\";\n\nconst rent: bigint = getMinimumBalanceForRentExemption(50 /* 50 bytes */);\n// Expected value: 1_238_880n\n\n// same as, but this requires a network call\n// const rent = await rpc.getMinimumBalanceForRentExemption(50n).send();\n```\n\n----------------------------------------\n\nTITLE: Loading Solana Keypair from File with Gill/Node\nDESCRIPTION: Demonstrates how to load a KeyPairSigner from a filesystem wallet JSON file using the loadKeypairSignerFromFile function from the Gill/Node library.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromFile } from \"gill/node\";\n\n// default file path: ~/.config/solana/id.json\nconst signer = await loadKeypairSignerFromFile();\nconsole.log(\"address:\", signer.address);\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromFile } from \"gill/node\";\n\nconst signer = await loadKeypairSignerFromFile(\"/path/to/your/keypair.json\");\nconsole.log(\"address:\", signer.address);\n```\n\n----------------------------------------\n\nTITLE: Calculating Minimum Rent for Empty Account\nDESCRIPTION: Demonstrates how to calculate the minimum rent balance required for an empty account (0 bytes). This is the storage deposit fee needed to create the account on Solana.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getMinimumBalanceForRentExemption } from \"gill\";\n\n// when not `space` argument is provided: defaults to `0`\nconst rent: bigint = getMinimumBalanceForRentExemption();\n// Expected value: 890_880n\n\n// same as\n// getMinimumBalanceForRentExemption(0);\n\n// same as, but this requires a network call\n// const rent = await rpc.getMinimumBalanceForRentExemption(0n).send();\n```\n\n----------------------------------------\n\nTITLE: Loading Solana Keypair from Environment Variable with Gill/Node\nDESCRIPTION: Demonstrates how to load a KeyPairSigner from bytes stored in an environment variable using the loadKeypairSignerFromEnvironment function from the Gill/Node library.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromEnvironment } from \"gill/node\";\n\n// loads signer from bytes stored at `process.env[variableName]`\nconst signer = await loadKeypairSignerFromEnvironment(variableName);\nconsole.log(\"address:\", signer.address);\n```\n\n----------------------------------------\n\nTITLE: Querying Program Accounts with useProgramAccounts Hook\nDESCRIPTION: Uses the useProgramAccounts hook to fetch all accounts owned by a specific program, with filtering options to narrow down results by data size and content.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useProgramAccounts } from \"gill-react\";\n\nexport function PageClient() {\n  const { accounts, isLoading, isError, error } = useProgramAccounts({\n    program: \"4Nd1mBQtrMJVYVfKf2PJy9NZUZdTAsp7D4xWLs4gDB4T\",\n    config: {\n      encoding: \"base64\",\n      filters: [\n        { dataSize: 17n },\n        {\n          memcmp: {\n            offset: 4n,\n            bytes: \"3Mc6vR\",\n            encoding: \"base64\",\n          },\n        },\n      ],\n    },\n  });\n\n  // if (isLoading) { return ... }\n  // if (isError) { return ... }\n\n  return (\n    <div className=\"\">\n      <pre>accounts: {JSON.stringify(accounts, null, \"\\t\")}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Keypair to Environment File\nDESCRIPTION: Demonstrates how to save an extractable keypair to a local environment variable file (.env). This is useful for storing keypairs for use in development environments.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill/node\";\nconst extractableSigner = generateExtractableKeyPairSigner();\n// default: envPath = `.env` (in your current working directory)\nawait saveKeypairSignerToEnvFile(extractableSigner, variableName, envPath);\n```\n\n----------------------------------------\n\nTITLE: Fetching Account Info with useAccount Hook\nDESCRIPTION: Demonstrates using the useAccount hook to retrieve account information for a specific address from the Solana blockchain.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useAccount } from \"gill-react\";\n\nexport function PageClient() {\n  const { account, isLoading, isError, error } = useAccount({\n    address: \"nicktrLHhYzLmoVbuZQzHUTicd2sfP571orwo9jfc8c\",\n  });\n\n  // if (isLoading) { return ... }\n  // if (isError) { return ... }\n\n  return (\n    <div className=\"\">\n      <pre>account: {JSON.stringify(account, null, \"\\t\")}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Saving Solana Keypair to Environment File with Gill/Node\nDESCRIPTION: Shows how to save an extractable KeyPairSigner to a local environment variable file using the saveKeypairSignerToEnvFile function from the Gill/Node library.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill/node\";\nconst extractableSigner = generateExtractableKeyPairSigner();\n// default: envPath = `.env` (in your current working directory)\nawait saveKeypairSignerToEnvFile(extractableSigner, variableName, envPath);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Blockhash with useLatestBlockhash Hook\nDESCRIPTION: Uses the useLatestBlockhash hook to fetch the latest blockhash from the Solana blockchain, with proper handling of loading and error states.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useLatestBlockhash } from \"gill-react\";\n\nexport function PageClient() {\n  const { latestBlockhash, isLoading, isError, error } = useLatestBlockhash();\n\n  // if (isLoading) { return ... }\n  // if (isError) { return ... }\n\n  return (\n    <div className=\"\">\n      <pre>latestBlockhash: {JSON.stringify(latestBlockhash, null, \"\\t\")}</pre>\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Explorer Links for Local Validator Accounts\nDESCRIPTION: Demonstrates how to create a Solana Explorer link for an account on a local test validator. This is useful during development for debugging locally running blockchain state.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  cluster: \"localnet\",\n  account: \"11111111111111111111111111111111\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using useSolanaClient Hook to Access Solana RPC\nDESCRIPTION: Demonstrates how to use the useSolanaClient hook to access the current Solana client's RPC and RPC Subscriptions connections for direct API calls.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\";\n\nimport { useSolanaClient } from \"gill-react\";\n\nexport function PageClient() {\n  const { rpc, rpcSubscriptions } = useSolanaClient();\n\n  // you can now use `rpc` to access any of the Solana JSON RPC methods\n\n  return { ... }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Solana Explorer Links for Transactions\nDESCRIPTION: Shows how to create a Solana Explorer link for a transaction, which is useful for providing users with a way to track their transactions in the blockchain explorer.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getExplorerLink } from \"gill\";\n\nconst link: string = getExplorerLink({\n  transaction: \"4nzNU7YxPtPsVzeg16oaZvLz4jMPtbAzavDfEFmemHNv93iYXKKYAaqBJzFCwEVxiULqTYYrbjPwQnA1d9ZCTELg\",\n});\n```\n\n----------------------------------------\n\nTITLE: Saving Solana Keypair to File with Gill/Node\nDESCRIPTION: Shows how to save an extractable KeyPairSigner to a local JSON file using the saveKeypairSignerToFile function from the Gill/Node library.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill/node\";\nconst extractableSigner = generateExtractableKeyPairSigner();\nawait saveKeypairSignerToFile(extractableSigner, filePath);\n```\n\n----------------------------------------\n\nTITLE: Signing Solana Transactions with Latest Blockhash in TypeScript\nDESCRIPTION: Demonstrates how to sign a Solana transaction that already has the latest blockhash set.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTransaction, signTransactionMessageWithSigners } from \"gill\";\n\nconst transaction = createTransaction(...);\n\nconst signedTransaction = await signTransactionMessageWithSigners(transaction);\n```\n\n----------------------------------------\n\nTITLE: Loading Keypair from Default File Location\nDESCRIPTION: Demonstrates how to load a keypair from the default Solana CLI keypair location. This function requires Node.js access to the file system.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromFile } from \"gill/node\";\n\n// default file path: ~/.config/solana/id.json\nconst signer = await loadKeypairSignerFromFile();\nconsole.log(\"address:\", signer.address);\n```\n\n----------------------------------------\n\nTITLE: Signing Solana Transactions and Setting Latest Blockhash in TypeScript\nDESCRIPTION: Shows how to sign a Solana transaction while setting the latest blockhash if it wasn't set during creation.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  createTransaction,\n  createSolanaClient,\n  signTransactionMessageWithSigners,\n  setTransactionMessageLifetimeUsingBlockhash,\n} from \"gill\";\n\nconst { rpc } = createSolanaClient(...);\nconst transaction = createTransaction(...);\n\nconst { value: latestBlockhash } = await rpc.getLatestBlockhash().send();\n\nconst signedTransaction = await signTransactionMessageWithSigners(\n  setTransactionMessageLifetimeUsingBlockhash(latestBlockhash, transaction),\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Keypair from Custom File Path\nDESCRIPTION: Shows how to load a keypair from a specific file path. This is useful when working with multiple keypairs stored in different locations.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromFile } from \"gill/node\";\n\nconst signer = await loadKeypairSignerFromFile(\"/path/to/your/keypair.json\");\nconsole.log(\"address:\", signer.address);\n```\n\n----------------------------------------\n\nTITLE: Using AbortController with RPC Calls\nDESCRIPTION: Shows how to add an AbortController to RPC calls to allow cancellation of pending requests, such as when a user navigates away from a page.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc } = createSolanaClient({ urlOrMoniker: \"devnet\" });\n\n// Create a new AbortController.\nconst abortController = new AbortController();\n\n// Abort the request when the user navigates away from the current page.\nfunction onUserNavigateAway() {\n  abortController.abort();\n}\n\n// The request will be aborted if and only if the user navigates away from the page.\nconst slot = await rpc.getSlot().send({ abortSignal: abortController.signal });\n```\n\n----------------------------------------\n\nTITLE: Saving Keypair to File\nDESCRIPTION: Demonstrates how to save an extractable keypair signer to a local JSON file. This is useful for creating and storing new keypairs for later use.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill/node\";\nconst extractableSigner = generateExtractableKeyPairSigner();\nawait saveKeypairSignerToFile(extractableSigner, filePath);\n```\n\n----------------------------------------\n\nTITLE: Installing Gill via package managers\nDESCRIPTION: Installation commands for adding the Gill package to your project using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gill\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add gill\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add gill\n```\n\n----------------------------------------\n\nTITLE: Loading Base58 Keypair from Environment Variable\nDESCRIPTION: Shows how to load a keypair from a base58-encoded string stored in an environment variable. This is a common format for storing keypairs in server environments.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { loadKeypairSignerFromEnvironmentBase58 } from \"gill/node\";\n\n// loads signer from base58 keypair stored at `process.env[variableName]`\nconst signer = await loadKeypairSignerFromEnvironmentBase58(variableName);\nconsole.log(\"address:\", signer.address);\n```\n\n----------------------------------------\n\nTITLE: Installing gill-react with pnpm\nDESCRIPTION: Command to install gill-react and its peer dependencies (gill and @tanstack/react-query) using pnpm package manager.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm add gill gill-react @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Generating Non-Extractable KeyPairSigner in TypeScript\nDESCRIPTION: Creates a random, non-extractable KeyPairSigner instance for secure signing operations.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateKeyPairSigner } from \"gill\";\n\nconst signer: KeyPairSigner = generateKeyPairSigner();\n```\n\n----------------------------------------\n\nTITLE: Defining Shared Build Script for Monorepo Packages in Markdown\nDESCRIPTION: This markdown file describes the purpose of the 'build-scripts' directory, which contains a base build script shared across all packages in the monorepo. It serves as documentation for the shared build configuration.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/build-scripts/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# `build-scripts`\n\nThis is the base build script shared across all packages in this monorepo.\n```\n\n----------------------------------------\n\nTITLE: Generating Extractable KeyPairSigner in TypeScript\nDESCRIPTION: Creates a random, extractable KeyPairSigner instance. This is less secure and should be used sparingly.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { generateExtractableKeyPairSigner } from \"gill\";\n\nconst signer: KeyPairSigner = generateExtractableKeyPairSigner();\n```\n\n----------------------------------------\n\nTITLE: Displaying Gill React Version 0.2.1 Changelog in Markdown\nDESCRIPTION: This snippet shows the changelog entry for version 0.2.1 of gill-react, which includes a patch update to the gill dependency.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.1\n\n### Patch Changes\n\n- Updated dependencies\n  [[`93b875a`](https://github.com/solana-foundation/gill/commit/93b875a088a4830ef39e8084d3d5e6038c8a96cc)]:\n  - gill@0.8.2\n```\n\n----------------------------------------\n\nTITLE: Creating Solana RPC Client for Local Test Validator in TypeScript\nDESCRIPTION: Sets up a Solana RPC client connection to a local test validator.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc, rpcSubscriptions, sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"localnet\",\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Changelog\nDESCRIPTION: Changelog entries documenting version history, bug fixes, feature additions, and improvements to the Gill library.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# gill\n\n## 0.8.2\n\n### Patch Changes\n\n- [#84](https://github.com/solana-foundation/gill/pull/84)\n  [`93b875a`](https://github.com/solana-foundation/gill/commit/93b875a088a4830ef39e8084d3d5e6038c8a96cc) Thanks\n  [@hwsimmons17](https://github.com/hwsimmons17)! - Fix bug with converting https -> wss\n\n## 0.8.1\n\n### Patch Changes\n\n- [#83](https://github.com/solana-foundation/gill/pull/83)\n  [`b99ac65`](https://github.com/solana-foundation/gill/commit/b99ac65a6de6d379e5f0f65b80c1f2a1a492d061) Thanks\n  [@nickfrosty](https://github.com/nickfrosty)! - fixed ts config module resolution\n\n## 0.8.0\n\n### Minor Changes\n\n- [#75](https://github.com/solana-foundation/gill/pull/75)\n  [`2cb27d5`](https://github.com/solana-foundation/gill/commit/2cb27d5b2450002038bf6501015c259eb4c43ee6) Thanks\n  [@nickfrosty](https://github.com/nickfrosty)! - added multiple \"keypair from base58\" functions\n\n### Patch Changes\n\n- [#74](https://github.com/solana-foundation/gill/pull/74)\n  [`6415cd7`](https://github.com/solana-foundation/gill/commit/6415cd774ea333135756863a227613d8d075fa8a) Thanks\n  [@jim4067](https://github.com/jim4067)! - fix broken link in tsdoc comment\n\n- [#72](https://github.com/solana-foundation/gill/pull/72)\n  [`6b24c98`](https://github.com/solana-foundation/gill/commit/6b24c982a7cd00b71be82ef65753d0cce074b868) Thanks\n  [@mcintyre94](https://github.com/mcintyre94)! - Refactor `lamportsPerSol` to use scientific format\n```\n\n----------------------------------------\n\nTITLE: Creating Solana RPC Client for Custom Provider in TypeScript\nDESCRIPTION: Establishes a Solana RPC client connection to a custom RPC provider or service.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc, rpcSubscriptions, sendAndConfirmTransaction } = createSolanaClient({\n  urlOrMoniker: \"https://private-solana-rpc-provider.com\",\n});\n```\n\n----------------------------------------\n\nTITLE: Using AbortController with Solana RPC Calls in TypeScript\nDESCRIPTION: Shows how to use an AbortController to manage RPC call cancellation in response to user actions.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createSolanaClient } from \"gill\";\n\nconst { rpc } = createSolanaClient({ urlOrMoniker: \"devnet\" });\n\n// Create a new AbortController.\nconst abortController = new AbortController();\n\n// Abort the request when the user navigates away from the current page.\nfunction onUserNavigateAway() {\n  abortController.abort();\n}\n\n// The request will be aborted if and only if the user navigates away from the page.\nconst slot = await rpc.getSlot().send({ abortSignal: abortController.signal });\n```\n\n----------------------------------------\n\nTITLE: Importing Node-Specific Gill Functions\nDESCRIPTION: Shows the import statement for Node.js specific functions from the Gill library. These functions are designed for use in Node.js environments with access to file system and environment variables.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill/node\"\n```\n\n----------------------------------------\n\nTITLE: Importing Program Clients in Gill\nDESCRIPTION: Demonstrates how to import program clients from the gill library. Shows the basic import syntax for accessing program functionality.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ... } from \"gill/programs\";\nimport { ... } from \"gill/programs/token\";\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Usage in Gill Library\nDESCRIPTION: Shows how to use the debug functionality in the gill library for custom logging. Demonstrates checking debug status and logging at different priority levels.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/README.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { debug, isDebugEnabled } from \"gill\";\n\nif (isDebugEnabled()) {\n  // your custom logic\n}\n\n// log this message if the \"info\" or above log level is enabled\ndebug(\"custom message\");\n\n// log this message if the \"debug\" or above log level is enabled\ndebug(\"custom message\", \"debug\");\n\n// log this message if the \"warn\" or above log level is enabled\ndebug(\"custom message\", \"warn\");\n\n// log this message if the \"warn\" or above log level is enabled\ndebug(\"custom message\", \"warn\");\n```\n\n----------------------------------------\n\nTITLE: Creating Client-Only SolanaProvider for NextJS\nDESCRIPTION: Creates a client-only wrapper for the SolanaProvider to use with React server components in NextJS. The 'use client' directive is required to mark this component as client-side only.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n\"use client\"; // <--- this \"use client\" directive is required!\n\nimport { createSolanaClient } from \"gill\";\nimport { SolanaProvider } from \"gill-react\";\n\nconst client = createSolanaClient({\n  urlOrMoniker: \"devnet\",\n});\n\nexport function SolanaProviderClient({ children }: { children: React.ReactNode }) {\n  return <SolanaProvider client={client}>{children}</SolanaProvider>;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Gill via Package Managers\nDESCRIPTION: Commands to install the Gill library using npm, pnpm, or yarn package managers.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/gill/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gill\n```\n\nLANGUAGE: shell\nCODE:\n```\npnpm add gill\n```\n\nLANGUAGE: shell\nCODE:\n```\nyarn add gill\n```\n\n----------------------------------------\n\nTITLE: Installing gill-react with npm\nDESCRIPTION: Command to install gill-react and its peer dependencies (gill and @tanstack/react-query) using npm package manager.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install gill gill-react @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Installing gill-react with yarn\nDESCRIPTION: Command to install gill-react and its peer dependencies (gill and @tanstack/react-query) using yarn package manager.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/README.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nyarn add gill gill-react @tanstack/react-query\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with esrun in Shell\nDESCRIPTION: Instructions for executing TypeScript scripts in the examples repository using the esrun tool, which allows running TypeScript files without needing a bundler.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/examples/get-started/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx esrun ./src/<script>\npnpx esrun ./src/<script>\n```\n\n----------------------------------------\n\nTITLE: Running Scripts with esrun in Shell\nDESCRIPTION: Commands for executing TypeScript scripts directly using esrun, which allows running TypeScript code without requiring a bundler.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/examples/tokens/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpx esrun ./src/<script>\npnpx esrun ./src/<script>\n```\n\n----------------------------------------\n\nTITLE: Displaying Gill React Version 0.2.0 Changelog in Markdown\nDESCRIPTION: This snippet details the changes in version 0.2.0 of gill-react, including minor changes such as standardized hook inputs and new hooks, along with a patch update to the gill dependency.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n### Minor Changes\n\n- [#82](https://github.com/solana-foundation/gill/pull/82)\n  [`05c8605`](https://github.com/solana-foundation/gill/commit/05c8605ff00d65ba04b0b6e218d540da2a164232) Thanks\n  [@nickfrosty](https://github.com/nickfrosty)! - standardized hook arg inputs\n\n- [#79](https://github.com/solana-foundation/gill/pull/79)\n  [`26551ea`](https://github.com/solana-foundation/gill/commit/26551ea988eb1db8490cd0bb1003e1805c75e327) Thanks\n  [@nickfrosty](https://github.com/nickfrosty)! - added `useProgramAccounts` and `useSignatureStatuses` hooks\n\n### Patch Changes\n\n- Updated dependencies\n  [[`b99ac65`](https://github.com/solana-foundation/gill/commit/b99ac65a6de6d379e5f0f65b80c1f2a1a492d061)]:\n  - gill@0.8.1\n```\n\n----------------------------------------\n\nTITLE: Displaying Gill React Version 0.1.0 Changelog in Markdown\nDESCRIPTION: This snippet shows the changelog for version 0.1.0 of gill-react, which introduces basic React hooks and includes refactoring of peer dependencies, along with updates to the gill dependency.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\n### Minor Changes\n\n- [#76](https://github.com/solana-foundation/gill/pull/76)\n  [`56f142c`](https://github.com/solana-foundation/gill/commit/56f142c537e30d5f74c337e600c2216be5dd525a) Thanks\n  [@nickfrosty](https://github.com/nickfrosty)! - added basic react hooks\n\n### Patch Changes\n\n- [#77](https://github.com/solana-foundation/gill/pull/77)\n  [`b8ee97c`](https://github.com/solana-foundation/gill/commit/b8ee97ccdd38a2d0d0bc2284cf9ecfad3e717ad1) Thanks\n  [@nickfrosty](https://github.com/nickfrosty)! - refactor peer dep due to changeset limitations\n\n- Updated dependencies\n  [[`2cb27d5`](https://github.com/solana-foundation/gill/commit/2cb27d5b2450002038bf6501015c259eb4c43ee6),\n  [`6415cd7`](https://github.com/solana-foundation/gill/commit/6415cd774ea333135756863a227613d8d075fa8a),\n  [`6b24c98`](https://github.com/solana-foundation/gill/commit/6b24c982a7cd00b71be82ef65753d0cce074b868)]:\n  - gill@0.8.0\n```\n\n----------------------------------------\n\nTITLE: Displaying Gill React Version 0.0.2 Changelog in Markdown\nDESCRIPTION: This snippet shows the changelog entry for version 0.0.2 of gill-react, which only includes updates to the gill dependency.\nSOURCE: https://github.com/solana-foundation/gill/blob/master/packages/react/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.0.2\n\n### Patch Changes\n\n- Updated dependencies\n  [[`6ae676f`](https://github.com/solana-foundation/gill/commit/6ae676f0f06c0ab07af8b2d03fd2e0f3fb051916),\n  [`1438ba7`](https://github.com/solana-foundation/gill/commit/1438ba7fbf1a572d7c8c7936b70ba85e775d2cf0)]:\n  - gill@0.0.4\n```"
  }
]