[
  {
    "owner": "simolus3",
    "repo": "drift",
    "content": "TITLE: Initializing Drift Database in Vanilla Flutter\nDESCRIPTION: Demonstrates how to create a singleton instance of MyDatabase in a vanilla Flutter app by initializing it in the main function.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/faq.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nlate MyDatabase database;\n\nvoid main() {\n  database = MyDatabase();\n  runApp(MyFlutterApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a TodosDao in Drift for Dart\nDESCRIPTION: This snippet demonstrates how to create a DAO (Data Access Object) for Todo operations in a Drift database. The DAO class extends DatabaseAccessor and implements query methods for retrieving todos filtered by category. It requires the Drift package and code generation to work properly.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/daos.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\npart '../Dart API/todos_dao.g.dart';\n\n// the _TodosDaoMixin will be created by drift. It contains all the necessary\n// fields for the tables. The <MyDatabase> type annotation is the database class\n// that should use this dao.\n@DriftAccessor(tables: [Todos])\nclass TodosDao extends DatabaseAccessor<MyDatabase> with _$TodosDaoMixin {\n  // this constructor is required so that the main database can create an instance\n  // of this object.\n  TodosDao(MyDatabase db) : super(db);\n\n  Stream<List<TodoEntry>> todosInCategory(Category category) {\n    if (category == null) {\n      return (select(todos)..where((t) => isNull(t.category))).watch();\n    } else {\n      return (select(todos)..where((t) => t.category.equals(category.id)))\n          .watch();\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplified Type Converter Using JsonTypeConverter\nDESCRIPTION: This snippet demonstrates a simplified approach where the type converter is defined as part of the data class itself, using JsonTypeConverter to ensure the converter works for both database and JSON serialization.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/type_converters.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@JsonSerializable()\nclass Preferences {\n  final bool receiveEmails;\n  final bool darkTheme;\n\n  const Preferences({this.receiveEmails = false, this.darkTheme = true});\n\n  factory Preferences.fromJson(Map<String, Object?> json) =>\n      _$PreferencesFromJson(json);\n  Map<String, Object?> toJson() => _$PreferencesToJson(this);\n\n  // This converter will be used by drift when reading this class from a\n  // database row, but also when serializing the class to json.\n  static JsonTypeConverter<Preferences, String> converter =\n      JsonTypeConverter.json(\n    fromJson: (json) => Preferences.fromJson(json as Map<String, Object?>),\n    toJson: (preferences) => preferences.toJson(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating with SQL Expressions Using Companion.custom in Drift\nDESCRIPTION: This example demonstrates how to use the .custom method on companions to mix values and SQL expressions in update operations, such as converting all usernames to lowercase.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// Update all users in the table, so that all of them have lowercase names\nawait db.update(db.users).write(\n  UsersCompanion(\n    username: UsersCompanion.custom(\n      db.users.username.lower(),\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Multiple Table Joins in Drift\nDESCRIPTION: Shows how to join multiple tables in a single query, finding related todo entries in the same category as a given entry.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n// loads all todo entries in the same category as the entry with the given id, but\n// excluding the entry itself\nStream<List<TypedResult>> otherTodosInSameCategory(int idOfTodo) {\n  final categoriesOfFirstEntry = select(categories).join([\n    innerJoin(todos, todos.category.equalsExp(categories.id),\n        where: todos.id.equals(idOfTodo)),\n  ]);\n\n  final asTempTable = categoriesOfFirstEntry.asJoinableTable();\n\n  return select(todos)\n      .join([\n        innerJoin(asTempTable, asTempTable.$5.equalsExp(todos.category)),\n      ])\n      .where(todos.id.isNotEqual(idOfTodo))\n      .watch();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Safe Database Migrations with Transaction Controls in Dart\nDESCRIPTION: Example of a migration callback that ensures data integrity by managing foreign keys and transactions. It disables foreign keys before migrations, runs migrations in a transaction, and verifies consistency afterward.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/api.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nm.createAll();\n\n// Alternative, with more safety checks:\nawait executor.transaction(() async {\n  // Make sure foreign_keys are disabled\n  await customStatement('PRAGMA foreign_keys = OFF');\n\n  // Your schema changes / migrations here\n\n  // Make sure we didn't break any constraints\n  final result = await customSelect(\n    'PRAGMA foreign_key_check',\n  ).get();\n\n  assert(\n    result.isEmpty,\n    'Foreign key check failed: \\n${result.map((e) => e.data).join('\\n')}',\n  );\n\n  // Before we leave the transaction, we should enable foreign keys again. Not\n  // all databases support this though.\n  try {\n    await customStatement('PRAGMA foreign_keys = ON');\n  } catch (_) {}\n});\n```\n\n----------------------------------------\n\nTITLE: Using JSON1 Extension in Dart with Drift\nDESCRIPTION: Demonstrates how to use the json1 extension in a Drift database. It shows a Contacts table with a JSON data column and a method to find contacts by phone number stored in the JSON data.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/extensions.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift/extensions/json1.dart';\n\nclass Contacts extends Table {\n    IntColumn get id => integer().autoIncrement()();\n    TextColumn get data => text()();\n}\n\n@DriftDatabase(tables: [Contacts])\nclass Database extends _$Database {\n  // constructor and schemaVersion omitted for brevity\n\n  Future<List<Contacts>> findContactsWithNumber(String number) {\n    return (select(contacts)\n      ..where((row) {\n        // assume the phone number is stored in a json key in the `data` column\n        final phoneNumber = row.data.jsonExtract<String, StringType>('phone_number');\n        return phoneNumber.equals(number);\n      })\n    ).get();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Check Constraints to Columns in Drift\nDESCRIPTION: This example shows how to add a check constraint to a column in a Drift table. It ensures that the 'age' column is always greater than or equal to 0.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  IntColumn get age => integer().check(age.isBiggerOrEqualValue(0))();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating and Deleting Rows in Drift (Dart)\nDESCRIPTION: Demonstrates how to update specific fields, replace entire rows, and delete rows using Drift in Dart. It showcases the use of companions for partial updates and the importance of using where clauses.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/writes.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture moveImportantTasksIntoCategory(Category target) {\n  return (update(todos)\n      ..where((t) => t.title.like('%Important%')))\n    .write(TodosCompanion(\n      category: Value(target.id),\n    ));\n}\n\nFuture updateTodo(Todo entry) {\n  return update(todos).replace(entry);\n}\n\nFuture feelingLazy() {\n  return (delete(todos)..where((t) => t.id.isSmallerThanValue(10))).go();\n}\n```\n\n----------------------------------------\n\nTITLE: Watching Users with Drift Stream Query in Dart\nDESCRIPTION: A simple example showing how to create an auto-updating stream of users with drift's fluent query API. This demonstrates the library's ability to watch queries and automatically update when underlying data changes.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/index.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nselect(users).watch()\n```\n\n----------------------------------------\n\nTITLE: Initializing Drift Database with Provider Package\nDESCRIPTION: Shows how to use the Provider package to manage a Drift database instance and make it accessible to widgets.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/faq.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  runApp(\n    Provider<MyDatabase>(\n      create: (context) => MyDatabase(),\n      child: MyFlutterApp(),\n      dispose: (context, db) => db.close(),\n   ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing database constructor for Flutter with sqlite3\nDESCRIPTION: Database implementation for Flutter applications using sqlite3. Uses LazyDatabase to find the right location for the database file asynchronously in the application documents directory.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nAppDatabase() : super(_openConnection());\n\n// the LazyDatabase util lets us find the right location for the file async.\nstatic LazyDatabase _openConnection() {\n  // put the database file, called db.sqlite here, into the documents folder\n  // for your app.\n  return LazyDatabase(() async {\n    final dbFolder = await getApplicationDocumentsDirectory();\n    final file = File(p.join(dbFolder.path, 'db.sqlite'));\n\n    return NativeDatabase.createInBackground(file);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSONB Format with TypeConverter in Drift\nDESCRIPTION: This snippet demonstrates how to use SQLite's JSONB format with Drift's TypeConverter.jsonb for more efficient storage and processing of JSON data.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/type_converters.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@JsonSerializable()\nclass Preferences {\n  final bool receiveEmails;\n  final bool darkTheme;\n\n  const Preferences({this.receiveEmails = false, this.darkTheme = true});\n\n  factory Preferences.fromJson(Map<String, Object?> json) =>\n      _$PreferencesFromJson(json);\n  Map<String, Object?> toJson() => _$PreferencesToJson(this);\n\n  static JsonTypeConverter2<Preferences, Map<String, dynamic>, Uint8List>\n      binaryConverter = TypeConverter.jsonb(\n    fromJson: (json) => Preferences.fromJson(json as Map<String, Object?>),\n    toJson: (preferences) => preferences.toJson(),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Watching Data with Core Query Builder in Dart\nDESCRIPTION: Demonstrates how to use the core query builder in Drift to create a query and watch it as a stream. It shows querying todos created after a specific date and watching the results.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/streams.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal query = select(todos)..where((t) => t.createdAt.isBiggerThan(min));\n\n// Run the query once\nfinal List<Todo> currentTodos = await query.get();\n\n// Watch the query\nfinal Stream<List<Todo>> todosStream = query.watch();\n```\n\n----------------------------------------\n\nTITLE: Configuring build.yaml for Postgres support\nDESCRIPTION: YAML configuration file to set up drift with Postgres dialect support. This is required when using Postgres since drift only generates code for sqlite3 by default.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          sql:\n            dialects:\n              - postgres\n              # Uncomment if you need to support both\n#              - sqlite\n```\n\n----------------------------------------\n\nTITLE: Defining Database Tables in SQL with Drift\nDESCRIPTION: SQL table definitions in a .drift file that creates tables for todos and categories. It includes foreign key relationships and demonstrates how to rename table classes using the AS keyword.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/index.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n-- tables.drift\n\nCREATE TABLE todos (\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  title TEXT NOT NULL,\n  content TEXT NOT NULL,\n  category INTEGER REFERENCES categories (id)\n);\n\nCREATE TABLE categories (\n  id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,\n  description TEXT NOT NULL\n) AS Category;\n\n/* Query that loads the description from a todo's category */\ntodosWithCategory:\n  SELECT t.*, c.description AS category\n    FROM todos t\n    LEFT OUTER JOIN categories c ON c.id = t.category;\n```\n\n----------------------------------------\n\nTITLE: Initializing Drift Database in Flutter\nDESCRIPTION: Demonstrates how to create a basic drift database class in a Flutter application using the driftDatabase utility method. Shows the standard pattern for database initialization with optional constructor for testing.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_flutter/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift_flutter/drift_flutter.dart';\n\n@DriftDatabase(...)\nfinal class MyAppDatabase extends _$MyAppDatabase {\n  // Keeping a custom constructor is useful for unit tests which may want to\n  // open an in-memory database only.\n  MyAppDatabase(super.e);\n\n  MyAppDatabase.defaults(): super(driftDatabase(name: 'app_db'));\n}\n```\n\n----------------------------------------\n\nTITLE: Ordering Query Results in Drift\nDESCRIPTION: Shows how to order query results by one or more columns using the orderBy method, demonstrating both ascending and descending order options.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// Orders entries by their due date which defaults to ascending order\nStream<List<TodoEntry>> watchEntriesSortedByDueDate() {\n  return (select(todos)..orderBy([(t) => OrderingTerm(expression: t.dueDate)])).watch();\n}\n\n// Returns entries that are sorted by both urgency and due date with equal urgencies\n// put earlier\nFuture<List<TodoEntry>> sortedByUrgency() {\n  return (select(todos)\n    ..orderBy([\n      (t) => OrderingTerm(expression: t.priority, mode: OrderingMode.desc),\n      (t) => OrderingTerm(expression: t.dueDate),\n    ])).get();\n}\n```\n\n----------------------------------------\n\nTITLE: Using the database for basic operations\nDESCRIPTION: Example code demonstrating how to use the drift database for basic operations like inserting data and querying tables. Shows how to instantiate the database, insert items, and retrieve them with type safety.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> main() async {\n  final database = AppDatabase();\n\n  // Simple select on a table\n  final allTodoEntries = await database.select(database.todoItems).get();\n  print('Todo entries: $allTodoEntries');\n\n  // More complex select query with where clauses\n  final specificTodoEntries = await (database.select(database.todoItems)\n        ..where((tbl) => tbl.title.like('%important%')))\n      .get();\n  print('Specific todo entries: $specificTodoEntries');\n\n  // Writing data\n  await database.into(database.todoItems).insert(\n      TodoItemsCompanion.insert(\n        title: 'A first entry',\n        content: 'My content',\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing database constructor for Dart with Postgres\nDESCRIPTION: Database implementation for Dart applications using PostgreSQL. Connects to a PostgreSQL database using connection details like host, port, database name, username, and password.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nAppDatabase()\n    : super(PostgreSQLConnection(\n        'localhost', // host\n        5432, // port\n        'dart_test', // database name\n        username: 'postgres',\n        password: 'postgres',\n      ));\n\n// you should bump this number whenever you change or add a table definition\n@override\nint get schemaVersion => 1;\n```\n\n----------------------------------------\n\nTITLE: Deleting Category with Transaction in Dart using Drift\nDESCRIPTION: Example showing how to use a transaction to safely delete a category while moving associated todo entries to a default category. Demonstrates proper transaction usage with multiple atomic operations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/transactions.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> deleteCategory(Category category) {\n  return transaction(() async {\n    // First, move all entries in the category we're about to delete into the\n    // default category\n    await (update(todos)..where((t) => t.category.equals(category.id)))\n        .write(TodosCompanion(category: Value(Category.defaultId)));\n\n    // Then, delete the category itself\n    await delete(categories).delete(category);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Functions for Drift Database on Web\nDESCRIPTION: Shows how to set up custom SQL functions for a Drift database running on the web using a custom worker.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/web.dart';\n\nvoid main() {\n  workerMainForOpen((openingRequest) {\n    return setupAllDatabases(openingRequest);\n  });\n}\n\nFuture<void> setupAllDatabases(DriftWorkerRequest openingRequest) async {\n  await openingRequest.resolvedExecutor.runCustom<void>((rawExecutor) {\n    rawExecutor.createFunction(\n      functionName: 'my_custom_function',\n      function: (args) => 'Hello from WASM',\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Parameterized Custom Query Example\nDESCRIPTION: Shows how to create a custom query with parameters using SQL variables and the variables parameter for safe value binding.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/custom_queries.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> amountOfTodosInCategory(Category category) {\n  return customSelect(\n    'SELECT COUNT(*) FROM todo_items WHERE category = ?',\n    variables: [Variable.withInt(category.id)],\n    readsFrom: {todoItems},\n  ).map((row) => row.read<int>('COUNT(*)')).getSingle();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift for Flutter Web\nDESCRIPTION: Code for configuring drift in a Flutter application for web support by setting up DriftWebOptions with paths to WebAssembly and worker files.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nfinal db = AppDatabase(\n  connectToDriftWebDatabase(\n    // This is the name of your web database. It will be stored in the\n    // IndexedDB with that name.\n    databaseName: 'my_app_database',\n    // Additional options for web databases.\n    webOptions: DriftWebOptions(\n      // This option only applies to drift's wasm implementation. If\n      // your app currently uses `sqlite3_flutter_libs` + `moor_flutter`\n      // (e.g. you're migrating from an old version), make sure to remove\n      // those packages when moving to web support.\n\n      // Use a web worker instead of the main thread.\n      useWorker: true,\n      // The path to the worker JavaScript file (relative to your apps HTML file).\n      // The file will be served from web/drift_worker.dart.js, which is created by\n      // running the Dart-to-JS compiler on the worker defined in the\n      // worker_support.dart Dart file.\n      driftWorkerUri: 'drift_worker.dart.js',\n    ),\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Using CustomExpression for Inline SQL in Drift\nDESCRIPTION: Demonstrates how to use the CustomExpression class to embed raw SQL statements within Drift queries. This approach allows for using SQL functions not directly supported by Drift's API.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\n// You can embed custom sql snippets into drift queries\nExpression<String> concat(Expression<String> a, Expression<String> b) {\n  return CustomExpression('${a.sql} || ${b.sql}', [a, b]);\n}\n\n// This will generate a query like SELECT u.name || ? FROM users\nfinal query = select(users).addColumns((user) => [\n      concat(user.name, const Variable.withString(' is an admin'))\n          .as('displayName')\n    ]);\n\n// This will generate a query like \n// SELECT u.name || ?, u.name || ? FROM users\nfinal query = select(users).addColumns((user) => [\n      concat(user.name, const Variable.withString(' is an admin'))\n          .as('displayName'),\n      concat(user.name, user.name).as('nameTwice')\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Defining Tables for Todo-List Application in Dart with Drift\nDESCRIPTION: Example of two related tables for a todo-list app, defining TodoItems and Categories with their respective columns. This serves as the foundation for subsequent query examples.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@DriftDatabase(tables: [TodoItems, Categories])\nclass MyDatabase extends _$MyDatabase {\n\n  // the schemaVersion getter and the constructor from the previous page\n  // have been omitted.\n\n  // loads all todo entries\n  Future<List<TodoItem>> get allTodoItems => select(todoItems).get();\n\n  // watches all todo entries in a given category. The stream will automatically\n  // emit new items whenever the underlying data changes.\n  Stream<List<TodoItem>> watchEntriesInCategory(Category c) {\n    return (select(todos)..where((t) => t.category.equals(c.id))).watch();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Drift to Remote libSQL Servers with Hrana Protocol\nDESCRIPTION: Shows how to connect a drift database directly to a hosted libSQL server using the drift_hrana package. This method runs all queries against the remote server without local caching or synchronization.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/libsql.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift_hrana/drift_hrana.dart';\n\n@DriftDatabase(...)\nclass AppDatabase extends _$AppDatabase {\n  AppDatabase(super.e);\n\n  @override\n  int get schemaVersion => 1;\n}\n\nvoid main() async {\n  final database = AppDatabase(HranaDatabase(\n    Uri.parse('ws://localhost:8080/'),\n    jwtToken: null,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating SQL Definitions with Dart Database Class\nDESCRIPTION: Dart code showing how to create a database class that includes SQL definitions from .drift files. The @DriftDatabase annotation's include parameter specifies which .drift files to incorporate.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/index.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// database.dart\n\nimport 'package:drift/drift.dart';\n\npart 'database.g.dart';\n\n@DriftDatabase(\n  include: {'tables.drift'},\n)\nclass AppDb extends _$AppDb {\n  AppDb(QueryExecutor e) : super(e);\n\n  @override\n  int get schemaVersion => 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Drift Database with Custom Setup on Web\nDESCRIPTION: Demonstrates how to open a Drift database on the web with custom setup functions for both worker and local environments.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await WasmDatabase.open(\n  databaseName: 'my_app',\n  sqlite3Uri: Uri.parse('sqlite3.wasm'),\n  driftWorkerUri: Uri.parse('my_custom_worker.dart.js'),\n  localSetup: (db) {\n    db.createFunction(\n      functionName: 'my_custom_function',\n      function: (args) => 'Hello from WASM',\n    );\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Foreign Key References in Drift\nDESCRIPTION: This snippet demonstrates how to create a foreign key reference in a Drift table. It shows a 'category' column referencing the 'id' column of the 'categories' table, with update and delete actions specified.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass TodoItems extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get title => text()();\n  IntColumn get category => integer().references(Categories, #id)(\n        onUpdate: KeyAction.cascade,\n        onDelete: KeyAction.setNull,\n      )();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Drift Database in Dart\nDESCRIPTION: This snippet defines a basic drift database with a Users table and methods for creating, updating, and watching users. It uses an explicit QueryExecutor in the constructor for easier testing.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/testing.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\n\npart 'database.g.dart';\n\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n}\n\n@DriftDatabase(tables: [Users])\nclass MyDatabase extends _$MyDatabase {\n  MyDatabase(QueryExecutor e) : super(e);\n\n  @override\n  int get schemaVersion => 1;\n\n  /// Creates a user and returns their id\n  Future<int> createUser(String name) {\n    return into(users).insert(UsersCompanion.insert(name: name));\n  }\n\n  /// Changes the name of a user with the [id] to the [newName].\n  Future<void> updateName(int id, String newName) {\n    return update(users).replace(User(id: id, name: newName));\n  }\n\n  Stream<User> watchUserWithId(int id) {\n    return (select(users)..where((u) => u.id.equals(id))).watchSingle();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Mapping Query Results in Drift\nDESCRIPTION: Shows how to transform query results using the map method before they are returned, enabling custom object creation or field extraction.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// will only return the content of todo entries\nFuture<List<String>> allTodoContents() {\n  return (select(todos)..orderBy([(t) => OrderingTerm(expression: t.dueDate)]))\n      .map((entry) => entry.content)\n      .get();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Database Class for Isolate Usage in Dart\nDESCRIPTION: This snippet shows how to define a database class that can be used with drift's isolate APIs. It includes a constructor that takes a QueryExecutor, which is necessary for isolate communication.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@DriftDatabase(tables: [Todos, Categories])\nclass MyDatabase extends _$MyDatabase {\n  MyDatabase(QueryExecutor e) : super(e);\n\n  MyDatabase.connect(DatabaseConnection connection)\n      : super.connect(connection);\n\n  @override\n  int get schemaVersion => 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Type Converter for JSON Data in Drift\nDESCRIPTION: This snippet demonstrates how to create a TypeConverter for converting between a Preferences object and its JSON string representation in the database. It uses json_serializable to handle the serialization.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/type_converters.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n/// Converts between [Preferences] and a [String] representation.\nclass PreferenceConverter extends TypeConverter<Preferences, String> {\n  const PreferenceConverter();\n\n  @override\n  Preferences fromSql(String fromDb) {\n    return Preferences.fromJson(json.decode(fromDb) as Map<String, Object?>);\n  }\n\n  @override\n  String toSql(Preferences value) {\n    return json.encode(value.toJson());\n  }\n}\n\n// Note: Consider using TypeConverter.json2 instead, which is a more modern API\n// that allows using proper JSON objects in json serialization.\nfinal modernConverter = TypeConverter.json2<Preferences>(\n  // to database\n  (value) => value.toJson(),\n  // from database\n  (json) => Preferences.fromJson(json as Map<String, Object?>),\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Data Using Manager API in Drift\nDESCRIPTION: This example shows how to retrieve all users from the database using the Manager API, which returns a list of strongly-typed User objects.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// load all users from the database\nfinal allUsers = await db.users.all();\n\n// optionally, we can specify where clauses or order by clauses\nfinal filtered = await db.users.where((u) => u.id.equals(3)).get();\n\n// iterating over allUsers gives us User objects\nfor (final User user in allUsers) {\n  print(user.username);\n}\n```\n\n----------------------------------------\n\nTITLE: Watching a Single Cart with JSON Functions\nDESCRIPTION: Implements a method to watch a shopping cart and its items using SQLite's json_each function to transform the JSON array of items into rows that can be joined with product data.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@override\nStream<CartWithItems> watchCart(int id) {\n  final items = <CartItem>[];\n  final query = customSelect(\n    '''\n    SELECT\n      c.id as cart_id, c.created_at,\n      i.id as item_id, i.name, i.image, i.price,\n      json_extract(value, '\\$.amount') as amount\n    FROM shopping_carts c\n    LEFT JOIN json_each(c.items_json) items\n    LEFT JOIN buyable_items i ON i.id = json_extract(value, '\\$.product')\n    WHERE c.id = ?;\n    ''',\n    variables: [Variable.withInt(id)],\n    readsFrom: {shoppingCarts, buyableItems},\n  );\n\n  return query.watch().map((rows) {\n    // All rows are for the same cart, so we can extract the cart data from\n    // the first row\n    if (rows.isEmpty) {\n      throw StateError('Cart with id $id not found');\n    }\n\n    final first = rows.first;\n    final cartId = first.read<int>('cart_id');\n    final createdAt = first.read<DateTime>('created_at');\n\n    final items = rows.map((row) {\n      // Some rows might not have an item id, which happens when json_each\n      // doesn't return any rows. In that case, the item id is null\n      final itemId = row.readNullable<int>('item_id');\n      if (itemId == null) {\n        return null;\n      }\n\n      return CartItem(\n        item: BuyableItem(\n          id: itemId,\n          name: row.read<String>('name'),\n          image: row.read<Uint8List>('image'),\n          price: row.read<double>('price'),\n        ),\n        amount: row.read<int>('amount'),\n      );\n    }).whereType<CartItem>().toList();\n\n    return CartWithItems(\n      id: cartId,\n      createdAt: createdAt,\n      items: items,\n    );\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Generated Custom Queries\nDESCRIPTION: Shows how to execute custom queries using the generated API, including both one-time queries and streams for auto-updating results.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/custom_queries.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// run the query once\nList<CategoriesWithCountResult> categories = await categoriesWithCount().get();\n\n// get a stream of results that automatically updates\nStream<List<CategoriesWithCountResult>> categories = categoriesWithCount().watch();\n```\n\n----------------------------------------\n\nTITLE: Basic Join Query in Drift\nDESCRIPTION: Demonstrates how to join tables using the join method, connecting todo items with their categories through a left outer join.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// loads all todo entries together with their category\nStream<List<TypedResult>> entriesWithCategory() {\n  return select(todos).join([\n    leftOuterJoin(categories, categories.id.equalsExp(todos.category)),\n  ]).watch();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding drift dependencies for Flutter with sqlite3\nDESCRIPTION: YAML configuration to add drift dependencies for Flutter projects using sqlite3. Includes the core drift package, Flutter-specific packages, and development dependencies for code generation.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: ^{{ versions.drift }}\n  drift_flutter: ^{{ versions.drift_flutter }}\n  path_provider: ^{{ versions.path_provider }}\n\ndev_dependencies:\n  drift_dev: ^{{ versions.drift_dev }}\n  build_runner: ^{{ versions.build_runner }}\n```\n\n----------------------------------------\n\nTITLE: Setting Up In-Memory Database for Testing in Dart\nDESCRIPTION: This snippet demonstrates how to set up an in-memory database for testing using NativeDatabase.memory(). It uses setUp and tearDown methods from the test package to manage the database lifecycle.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/testing.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift/native.dart';\nimport 'package:test/test.dart';\n// the file defined above, you can test any drift database of course\nimport 'database.dart';\n\nvoid main() {\n  late MyDatabase database;\n\n  setUp(() {\n    database = MyDatabase(DatabaseConnection(\n      NativeDatabase.memory(),\n      closeStreamsSynchronously: true, // (1)!\n    ));\n  });\n  tearDown(() async {\n    await database.close();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Step-by-Step Migration in Drift Database\nDESCRIPTION: Example showing how to implement basic step-by-step migrations in a Drift database class using the generated stepByStep utility.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/step_by_step.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@DriftDatabase()\nclass Database extends _$Database {\n  // Constructor and other methods\n\n  MigrationStrategy get migration {\n    return MigrationStrategy(\n      onUpgrade: stepByStep(\n        from1To2: (m, schema) async {\n          await m.addColumn(schema.users, schema.users.birthdate);\n        },\n        from2To3: (m, schema) async {\n          await m.deleteTable('users');\n        },\n      ),\n    );\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using computeWithDatabase for Background Database Operations in Dart\nDESCRIPTION: This example demonstrates how to use computeWithDatabase to perform database operations on a background isolate. It shows inserting multiple todos in a batch operation.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> insertManyTodos(MyDatabase db, List<Todo> todos) async {\n  await db.computeWithDatabase((db) {\n    return db.batch((batch) {\n      batch.insertAll(db.todos, todos);\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a SQL View as a Dart Class in Drift\nDESCRIPTION: This snippet demonstrates how to create a SQL view using a Dart class that extends 'View'. It defines a view that counts the number of todo items in each category, referencing the 'Todos' and 'Categories' tables.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/views.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass CategoryTodoCount extends View {\n  TodosTable get todos => alias(const TodosTable(), 'todos');\n  CategoriesTable get categories => alias(const CategoriesTable(), 'categories');\n\n  Expression<int> get itemCount => todos.id.count();\n\n  @override\n  Query as() => select([\n        categories.description,\n        itemCount,\n      ])\n          .from(categories)\n          .join([\n            leftOuterJoin(todos, todos.category.equalsExp(categories.id)),\n          ])\n          .groupBy([categories.description]);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining database and table structure before code generation\nDESCRIPTION: Initial Dart code defining a database class and a TodoItems table. This serves as the foundation for drift's code generator to build upon, creating the necessary typed APIs for database interactions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:io';\n\nimport 'package:drift/drift.dart';\nimport 'package:path_provider/path_provider.dart';\nimport 'package:path/path.dart' as p;\nimport 'package:drift/native.dart';\n\n// This will generate a table called \"todos\" for us in the database\nclass TodoItems extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get title => text().withLength(min: 6, max: 32)();\n  TextColumn get content => text().named('body')();\n  IntColumn get category => integer().nullable()();\n}\n\n// This will make drift generate a class called \"Category\" to represent a row in this table.\n// By default, \"Categorie\" would have been used because it only strips away the trailing \"s\".\n@DataClassName('Category')\nclass Categories extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get description => text()();\n}\n\n// this annotation tells drift to prepare a database class that uses both of the\n// tables we just defined. We'll see how to use that database class in a moment.\n@DriftDatabase(tables: [TodoItems, Categories])\nclass AppDatabase extends _$AppDatabase {\n  // we tell the database where to store the data with this constructor\n  AppDatabase();\n\n  // you should bump this number whenever you change or add a table definition\n  @override\n  int get schemaVersion => 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Drift Database Class\nDESCRIPTION: This code snippet demonstrates how to create a basic Drift database class. It includes the necessary annotations and a method for opening the database.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/migrating_to_drift.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\n\npart 'database.g.dart';\n\n@DriftDatabase()\nclass MyDatabase extends _$MyDatabase {\n  MyDatabase() : super(_openDatabase());\n\n  @override\n  int get schemaVersion => 1;\n\n  static QueryExecutor _openDatabase() {\n    // TODO: Implement this\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Rows in Drift (Dart)\nDESCRIPTION: Explains how to insert rows using companions and batch inserts for efficient bulk operations. It demonstrates the use of Value for nullable or default columns.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/writes.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<int> addTodo(TodosCompanion entry) {\n  return into(todos).insert(entry);\n}\n\naddTodo(\n  TodosCompanion(\n    title: Value('Important task'),\n    content: Value('Refactor persistence code'),\n  ),\n);\n\nFuture<void> insertMultipleEntries() async{\n  await batch((batch) {\n    batch.insertAll(todos, [\n      TodosCompanion.insert(\n        title: 'First entry',\n        content: 'My content',\n      ),\n      TodosCompanion.insert(\n        title: 'Another entry',\n        content: 'More content',\n        category: Value(3),\n      ),\n    ]);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Upsert Operations in Drift (Dart)\nDESCRIPTION: Demonstrates upsert functionality for creating or updating rows based on conflicts. It includes examples of simple upserts and more complex scenarios with custom conflict resolution.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/writes.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass Users extends Table {\n  TextColumn get email => text()();\n  TextColumn get name => text()();\n\n  @override\n  Set<Column> get primaryKey => {email};\n}\n\nFuture<int> createOrUpdateUser(User user) {\n  return into(users).insertOnConflictUpdate(user);\n}\n\nclass Words extends Table {\n  TextColumn get word => text()();\n  IntColumn get usages => integer().withDefault(const Constant(0))();\n\n  @override\n  Set<Column> get primaryKey => {word};\n}\n\nFuture<void> trackWord(String word) {\n  return into(words).insert(\n    WordsCompanion.insert(word: word),\n    onConflict: DoUpdate((old) => WordsCompanion.custom(\n      usages: old.usages + Constant(1),\n    )),\n  );\n}\n\nFuture<void> upsertWithTarget(Word word) {\n  return into(words).insert(\n    word,\n    onConflict: DoUpdate(\n      (old) => WordsCompanion.custom(usages: old.usages + Constant(1)),\n      target: [words.word],\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Querying and Watching Data with Manager in Dart\nDESCRIPTION: Shows how to use the manager API in Drift to create a query and watch it as a stream. It demonstrates querying todos created after a specific date and watching the results.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/streams.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal query = db.todoItems.filter((t) => t.createdAt.isBiggerThan(min));\n\n// Run the query once\nfinal List<TodoItem> currentTodos = await query.get();\n\n// Watch the query\nfinal Stream<List<TodoItem>> todosStream = query.watch();\n```\n\n----------------------------------------\n\nTITLE: Setting up a basic Drift database in Dart\nDESCRIPTION: This code demonstrates how to set up a basic Drift database class in Dart that references a .drift file. It extends the automatically generated class that will be created by the build runner.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\n\npart 'database.g.dart';\n\n@DriftDatabase(include: {'tables.drift'})\nclass MyDb extends _$MyDb {\n  MyDb(QueryExecutor executor) : super(executor);\n  \n  @override\n  int get schemaVersion => 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting SQLCipher Support in NativeDatabase Setup\nDESCRIPTION: Example of how to assert that SQLCipher support is available when setting up a NativeDatabase, including setting the encryption key and checking for cipher support.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/encryption.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nNativeDatabase(\n  'path/to/file.db',\n  setup: (db) {\n    db.execute(\"PRAGMA key = 'my_password';\");\n    assert(_debugCheckHasCipher(db), 'Could not find SQLCipher support!');\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Compute Function with Drift Database in Dart\nDESCRIPTION: This snippet shows how to use a custom compute function with a drift database. It demonstrates creating a serializable connection and using it in a compute function.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<Todo>> loadTodosInBackground(MyDatabase db) async {\n  final connection = await db.serializableConnection();\n\n  return compute((connection) {\n    final db = MyDatabase.connect(connection);\n    return db.select(db.todos).get();\n  }, connection);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Database Class for Drift in Dart\nDESCRIPTION: Defines a shared database class that works across native and web platforms by using a customizable QueryExecutor.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// don't import drift/wasm.dart or drift/native.dart in shared code\nimport 'package:drift/drift.dart';\n\n@DriftDatabase(/* ... */)\nclass SharedDatabase extends _$SharedDatabase {\n    SharedDatabase(QueryExecutor e): super(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Returning Inserted Rows in Drift (Dart)\nDESCRIPTION: Showcases the insertReturning method to insert a row and immediately retrieve the inserted data, including auto-generated values. This requires a recent sqlite3 version.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/writes.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal row = await into(todos).insertReturning(TodosCompanion.insert(\n  title: 'A todo entry',\n  content: 'A description',\n));\n```\n\n----------------------------------------\n\nTITLE: Nested Transactions Example in Dart using Drift\nDESCRIPTION: Demonstration of nested transactions behavior, showing how changes are isolated between transaction levels and how exceptions affect transaction state.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/transactions.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> example(Database db) async {\n  await db.transaction(() async {\n    print('in outer transaction');\n    await db.into(db.todos).insert(TodosCompanion.insert(content: 'first'));\n\n    try {\n      await db.transaction(() async {\n        print('in nested transaction');\n        await db.into(db.todos).insert(\n            TodosCompanion.insert(content: 'only visible in nested'));\n        throw Exception('roll back nested transaction');\n      });\n    } catch (e) {\n      print('caught: $e');\n    }\n\n    // At this point, the second insert was never visible to this transaction\n    final amount = await db.select(db.todos).get();\n    print('todos in outer transaction: $amount');\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Columns in Drift\nDESCRIPTION: This example shows how to define a unique column in a Drift table. The 'email' column is set to be unique across all rows.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get email => text().unique()();\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Drift Database for Web Applications\nDESCRIPTION: Creates an instance of SharedDatabase for web applications using WasmDatabase and handling browser feature detection.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// web.dart\nimport 'package:drift/wasm.dart';\n\nSharedDatabase constructDb() {\n  return SharedDatabase(connectOnWeb());\n}\n\nDatabaseConnection connectOnWeb() {\n  return DatabaseConnection.delayed(Future(() async {\n    final result = await WasmDatabase.open(\n      databaseName: 'my_app_db', // prefer to only use valid identifiers here\n      sqlite3Uri: Uri.parse('sqlite3.wasm'),\n      driftWorkerUri: Uri.parse('drift_worker.dart.js'),\n    );\n\n    if (result.missingFeatures.isNotEmpty) {\n      // Depending how central local persistence is to your app, you may want\n      // to show a warning to the user if only unrealiable implemetentations\n      // are available.\n      print('Using ${result.chosenImplementation} due to missing browser '\n          'features: ${result.missingFeatures}');\n    }\n\n    return result.resolvedExecutor;\n  }));\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing a Logging QueryInterceptor in Dart for Drift\nDESCRIPTION: A class that implements QueryInterceptor to log detailed information about database operations, including query execution times and parameter values.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/tracing.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass LogInterceptor extends QueryInterceptor {\n  final bool logStatements;\n  final bool logResults;\n\n  LogInterceptor({this.logStatements = true, this.logResults = true});\n\n  @override\n  Future<void> beforeOpeningUser(QueryExecutor executor) async {\n    print('using executor $executor');\n  }\n\n  @override\n  Future<dynamic> interceptOpen(\n      QueryExecutor executor, OpenUser open) async {\n    print('opening database with version ${open.versionNr}');\n    final stopwatch = Stopwatch()..start();\n\n    try {\n      return await open();\n    } finally {\n      print('opened database in ${stopwatch.elapsedMilliseconds}ms');\n    }\n  }\n\n  @override\n  Future<List<Map<String, Object?>>> interceptSelect(\n      QueryExecutor executor,\n      SelectStatement stmt,\n      Selectable<Object?> selectable) async {\n    final stopwatch = Stopwatch()..start();\n\n    if (logStatements) {\n      print('executing select with arguments');\n      print('  ${stmt.sql}');\n      print('  args: ${stmt.boundVariables}');\n    }\n\n    final result = await super.interceptSelect(executor, stmt, selectable);\n\n    if (logStatements) {\n      print('-> select took ${stopwatch.elapsedMilliseconds}ms, returned '\n          '${result.length} rows');\n    }\n\n    if (logResults) {\n      for (final row in result) {\n        print('  * $row');\n      }\n    }\n\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to DriftIsolate with DatabaseConnection.delayed in Dart\nDESCRIPTION: This example shows how to connect to a DriftIsolate using DatabaseConnection.delayed. This approach allows for synchronous database creation while deferring the actual connection.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nMyDatabase connectToDatabase(Future<DriftIsolate> isolate) {\n  final connection = DatabaseConnection.delayed(() async {\n    final isolate = await isolate;\n    return await isolate.connect();\n  });\n  return MyDatabase.connect(connection);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Database Schema in Drift File\nDESCRIPTION: This snippet demonstrates how to define a database schema using a .drift file. It includes a CREATE TABLE statement and a named SELECT query for use with Drift.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/migrating_to_drift.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE Test (\n  id INTEGER PRIMARY KEY,\n  name TEXT,\n  value INTEGER,\n  num REAL\n);\n\ngetItemsWithHighValue: SELECT * FROM Test WHERE value > :minValue;\n```\n\n----------------------------------------\n\nTITLE: Using Compound Selects for Category Item Counts in Drift\nDESCRIPTION: Demonstrates how to use compound selects with UNION ALL to combine the results of multiple queries. This example counts items in each category plus items without a category in a single result set.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<CategoryWithCount>> compound() {\n  // Returns rows of form (category_description, count).\n  // The first query includes all categories with associated items (counting the\n  // items), the second query adds a (NULL, count) row for items without a category\n  final firstQuery = (select(categories)..addColumns([todos.id.count()]))\n      .join([innerJoin(todos, todos.category.equalsExp(categories.id))])\n      .groupBy([categories.id])\n      .map((row) {\n        return CategoryWithCount(\n          category: Category.fromData(row.readTable(categories)),\n          count: row.read(todos.id.count()) ?? 0,\n        );\n      });\n\n  final secondQuery = selectOnly(todos)\n    ..addColumns([todos.id.count()])\n    ..where(todos.category.isNull())\n    ..map((row) => CategoryWithCount(\n          category: null,\n          count: row.read(todos.id.count()) ?? 0,\n        ));\n\n  return firstQuery.unionAll(secondQuery).get();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relational Shopping Cart Tables in Drift\nDESCRIPTION: Defines two tables for the relational approach: ShoppingCarts for the cart itself and CartEntries as a junction table linking carts to products with quantity information.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass ShoppingCarts extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  DateTimeColumn get createdAt => dateTime()();\n}\n\nclass CartEntries extends Table {\n  IntColumn get cart => integer().references(ShoppingCarts, #id)();\n  IntColumn get product => integer().references(BuyableItems, #id)();\n  IntColumn get amount => integer()();\n\n  @override\n  Set<Column> get primaryKey => {cart, product};\n}\n```\n\n----------------------------------------\n\nTITLE: Using DatabaseConnection.delayed for Synchronous Database Creation in Dart\nDESCRIPTION: This example shows how to use DatabaseConnection.delayed to create a database instance synchronously, which is useful for dependency injection frameworks.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nMyDatabase createDatabaseSynchronously(DriftIsolate isolate) {\n  final connection = DatabaseConnection.delayed(() async {\n    final connection = await isolate.connect();\n    return connection;\n  });\n  return MyDatabase.connect(connection);\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Drift Database to PostgreSQL in Dart\nDESCRIPTION: This code demonstrates how to connect a Drift database class to PostgreSQL using PgDatabase from the drift_postgres package. It includes configuration for the database endpoint with host, database name, username, and password.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_postgres/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal database = AppDatabase(PgDatabase(\n  endpoint: PgEndpoint(\n    host: 'localhost',\n    database: 'postgres',\n    username: 'postgres',\n    password: 'postgres',\n  ),\n));\n```\n\n----------------------------------------\n\nTITLE: Initializing Drift Database with Pre-populated Asset\nDESCRIPTION: Shows how to initialize a Drift database using a pre-populated database file from app assets.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/faq.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nQueryExecutor databaseWithDefaultAsset(File file, String asset) {\n  // A LazyDatabase lets us do async initialization work.\n  return LazyDatabase(() async {\n    if (!await file.exists()) {\n      // Database does not exist yet, use default from asset\n      final content = await rootBundle.load(asset);\n\n      await file.parent.create(recursive: true);\n      await file.writeAsBytes(content.buffer.asUint8List(0));\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Column Type with TableMigration in Drift\nDESCRIPTION: Demonstrates migrating a column from text to nullable integer type using the TableMigration API. The columnTransformer allows casting the old text values to integers during the migration process.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/api.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nawait m.alterTable(TableMigration(\n  todos,\n  columnTransformer: {\n    todos.category: todos.category.cast<int>(),\n  },\n));\n```\n\n----------------------------------------\n\nTITLE: Using LazyDatabase for Existing SQLite Database in Dart\nDESCRIPTION: Demonstrates how to use LazyDatabase to perform async work before opening an existing SQLite database file with drift.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/vm.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// before\nNativeDatabase(File('...'));\n\n// after\nLazyDatabase(() async {\n  final file = File('...');\n  if (!await file.exists()) {\n    // copy the file from an asset, or network, or any other source\n  }\n  return NativeDatabase(file);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Background Isolate for Drift Database in Dart\nDESCRIPTION: Snippet showing how to create a background isolate for hosting the drift database, improving UI responsiveness by offloading database operations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/vm.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal executor = NativeDatabase.createInBackground(File('path/to/database.sqlite'));\n\n// Then, use this executor to construct your database:\nfinal database = MyDatabase(executor);\n```\n\n----------------------------------------\n\nTITLE: Creating a Contacts Table with JSON Storage in Drift\nDESCRIPTION: Shows how to define a Drift table that stores complex Contact objects using JSON. This example includes a generated column that extracts the name field from the JSON for efficient querying.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nclass Contacts extends Table {\n  IntColumn get id => integer().autoIncrement()();\n\n  // Store the contact as JSON\n  TextColumn get contact => text()\n      .map(const JsonTypeConverter<Contact, String>(\n        fromSql: Contact.fromJson,\n        toSql: (c) => json.encode(c.toJson()),\n      ))()\n      .named('contact_json')();\n\n  // For efficient lookups, let's store the contact name in its own column\n  TextColumn get name => text()\n      .generatedAs(jsonExtract(contact.dartCast<String>(), r'$.name'))()\n      .nullable();\n}\n\nclass JsonTypeConverter<D, S> extends TypeConverter<D, S> {\n  final D Function(Map<String, Object?>) fromSql;\n  final S Function(D) toSql;\n\n  const JsonTypeConverter({required this.fromSql, required this.toSql});\n\n  @override\n  D fromSql(S fromDb) {\n    return fromSql(json.decode(fromDb as String) as Map<String, Object?>);\n  }\n\n  @override\n  S toSql(D value) {\n    return toSql(value);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring build.yaml for PostgreSQL dialect support\nDESCRIPTION: Create a build.yaml file to enable code generation for PostgreSQL dialect alongside SQLite.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/postgres.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          sql:\n            dialects:\n              - sqlite # remove this line if you only need postgres\n              - postgres\n```\n\n----------------------------------------\n\nTITLE: Updating with SQL Expressions in Drift (Dart)\nDESCRIPTION: Shows how to use Companion.custom for efficient updates based on SQL expressions, allowing for database-side operations without loading rows into Dart.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/writes.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nupdate(users)\n  .write(UsersCompanion.custom(name: users.name.lower()));\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Read Isolates for Drift Database in Dart\nDESCRIPTION: Example of setting up multiple read isolates for a drift database to improve performance and concurrency for read operations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/vm.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal executor = NativeDatabase.createInBackground(\n  File('path/to/database.sqlite'),\n  readPool: 4, // 4 additional isolates for reads\n);\n\n// Then, use this executor to construct your database:\nfinal database = MyDatabase(executor);\n```\n\n----------------------------------------\n\nTITLE: Basic PostgreSQL Database Setup in Drift\nDESCRIPTION: Example showing how to set up a basic PostgreSQL database connection and define tables in drift.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/postgres.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift_postgres/drift_postgres.dart';\n\n// This could also be a class extending a `Table` and defining columns in Dart,\n// which would work exactly the same way!\n@DriftDatabase(\n  include: {'tables.drift'},\n)\nclass Database extends _$Database {\n  Database()\n      : super(PgDatabase(\n          host: 'localhost',\n          port: 5432,\n          username: 'postgres',\n          password: 'postgres',\n        ));\n\n  // For full type-safety, you'd typically use the generated types\n  Future<List<TypedResult>> complexQuery() {\n    return customSelect(\n      'SELECT * FROM my_table WHERE some_column = @param',\n      variables: [Variable.withString('param', 'Dart is awesome')],\n      readsFrom: {myTable},\n    ).get();\n  }\n\n  @override\n  int get schemaVersion => 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Selectable Query References in Drift\nDESCRIPTION: Shows how to create reference types that can be consumed as either Future or Stream, deferring the decision between get() and watch() to the consumer.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nSimpleSelectStatement<$TodosTable, TodoEntry> get entriesWithHighPriority =>\n    select(todos)..where((t) => t.priority.isBiggerThanValue(5));\n\n// Can later be consumed as either:\n// entriesWithHighPriority.get()\n// entriesWithHighPriority.watch()\n```\n\n----------------------------------------\n\nTITLE: Using Subqueries to Count Top-10 Todo Items in Each Category in Drift\nDESCRIPTION: A demonstration of using the Subquery feature to join complex query results. This example counts how many of the top-10 longest todo items belong to each category by first creating a subquery and then joining it to the main query.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<CategoryWithCount>> subquery() {\n  // First, create a query for the top 10 todos by length\n  final top10 = select(todos)\n    ..orderBy([(t) => OrderingTerm.desc(t.title.length)])\n    ..limit(10);\n\n  // Now, create a larger query grouping todos by category\n  return (select(categories)..addColumns([todos.id.count()]))\n      .join([\n        leftOuterJoin(\n          todos,\n          todos.category.equalsExp(categories.id),\n        ),\n        // Join the top10 subquery to only include todos that are also in the top 10\n        innerJoin(\n          Subquery(top10, 'top10'),\n          todos.id.equalsExp(Subquery(top10, 'top10').ref(todos.id)),\n          useColumns: false,\n        )\n      ])\n      .groupBy([categories.id])\n      .map((row) {\n        return CategoryWithCount(\n          category: Category.fromData(row.readTable(categories)),\n          count: row.read(todos.id.count()),\n        );\n      })\n      .get();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart with Items in Relational Model\nDESCRIPTION: Implements a transaction to update a shopping cart by replacing all its entries. First deletes all existing entries for the cart, then inserts new entries for each item in the cart.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> updateCart(CartWithItems updatedCart) {\n  return transaction(() async {\n    // First, delete all existing entries for this cart\n    await (delete(cartEntries)..where((e) => e.cart.equals(updatedCart.id)))\n        .go();\n\n    // Then, re-create all entries\n    for (final item in updatedCart.items) {\n      await into(cartEntries).insert(CartEntriesCompanion.insert(\n            cart: updatedCart.id,\n            product: item.item.id,\n            amount: item.amount,\n          ));\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Adding drift dependencies for Dart with sqlite3\nDESCRIPTION: YAML configuration to add drift dependencies for Dart projects using sqlite3. Includes the core drift package, sqlite3 dependency, and development packages for code generation.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: ^{{ versions.drift }}\n  sqlite3: ^{{ versions.sqlite3 }}\n\ndev_dependencies:\n  drift_dev: ^{{ versions.drift_dev }}\n  build_runner: ^{{ versions.build_runner }}\n```\n\n----------------------------------------\n\nTITLE: Basic Manager Select Operations\nDESCRIPTION: Shows how to use the manager interface to select and watch records from a table.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/manager.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// Get all todo items\nList<TodoItem> todos = await db.managers.todoItems.all();\n\n// Watching for changes to the table\nStream<List<TodoItem>> todoStream = db.managers.todoItems.watchAll();\n\n// Get a single row by id\nTodoItem? todo = await db.managers.todoItems.findById(1);\n\n// Watch a single row\nStream<TodoItem?> singleTodoStream = db.managers.todoItems.watchById(1);\n```\n\n----------------------------------------\n\nTITLE: Using Named Constructor for Custom Row Classes in Drift\nDESCRIPTION: This example demonstrates how to specify a named constructor to use when mapping database rows to custom classes using the constructor parameter on @UseRowClass.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@UseRowClass(User, constructor: 'fromDb')\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  DateTimeColumn get birthDate => dateTime()();\n}\n\nclass User {\n  final int id;\n  final String name;\n  final DateTime birthDate;\n\n  User.fromDb({required this.id, required this.name, required this.birthDate});\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to a DriftIsolate from Multiple Isolates in Dart\nDESCRIPTION: This snippet demonstrates how to connect to a DriftIsolate from different isolates. It shows creating a database connection and using it to instantiate a MyDatabase object.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<MyDatabase> connectToDatabase(DriftIsolate isolate) async {\n  final connection = await isolate.connect();\n  return MyDatabase.connect(connection);\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Drift Database with Sqflite in Dart\nDESCRIPTION: Example showing how to initialize a Drift database using SqfliteQueryExecutor. Demonstrates database class setup with tables and schema version, along with connection initialization using SqfliteQueryExecutor.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_sqflite/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@DriftDatabase(tables: [Todos, Categories])\nclass MyDatabase extends _$MyDatabase {\n  // we tell the database where to store the data with this constructor\n  MyDatabase() : super(_openConnection());\n\n  // you should bump this number whenever you change or add a table definition.\n  // Migrations are covered later in the documentation.\n  @override\n  int get schemaVersion => 1;\n}\n\nQueryExecutor _openConnection() {\n  return SqfliteQueryExecutor.inDatabaseFolder(path: 'db.sqlite');\n}\n```\n\n----------------------------------------\n\nTITLE: Manual Custom Select Implementation\nDESCRIPTION: Example of manually writing and executing a custom SELECT query without using the generated API, including table specification for auto-updating streams.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/custom_queries.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nStream<List<TypedResult>> categoryQueryStream = customSelect(\n    'SELECT c.*, (SELECT COUNT(*) FROM todo_items WHERE category = c.id) itemCount'\n    ' FROM categories c',\n    readsFrom: {categories, todoItems},\n).watch();\n```\n\n----------------------------------------\n\nTITLE: Defining Interface for Shopping Cart Repository in Dart\nDESCRIPTION: Defines the interface for a shopping cart repository with methods for creating, watching, and updating carts along with data classes for shopping cart items.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nabstract class CartRepository {\n  // Create a new, empty shopping cart. Returns the id of the created cart.\n  Future<int> createEmptyCart(DateTime createdAt);\n\n  // Updates the items stored in the provided cart\n  Future<void> updateCart(CartWithItems updatedCart);\n\n  // Watches a single cart for changes and returns an updated model when it changes\n  Stream<CartWithItems> watchCart(int id);\n\n  // Watches all carts and their entries\n  Stream<List<CartWithItems>> watchAllCarts();\n}\n\nclass BuyableItem {\n  final int id;\n  final String name;\n  final Uint8List image;\n  final double price;\n\n  BuyableItem({\n    required this.id,\n    required this.name,\n    required this.image,\n    required this.price,\n  });\n}\n\nclass CartItem {\n  final BuyableItem item;\n  final int amount;\n\n  CartItem({required this.item, required this.amount});\n}\n\nclass CartWithItems {\n  final int id;\n  final DateTime createdAt;\n  final List<CartItem> items;\n\n  CartWithItems({required this.id, required this.createdAt, required this.items});\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting a NativeDatabase in Dart\nDESCRIPTION: Example of how to encrypt a NativeDatabase using SQLCipher, including setting the encryption key and disabling double-quoted string literals.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/encryption.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nNativeDatabase(\n  'path/to/file.db',\n  setup: (db) {\n    db.execute(\"PRAGMA key = 'my_password';\");\n    // Recommended: Disable double-quoted string literals for consistency\n    // with sqlite3_flutter_libs\n    db.execute('PRAGMA cipher_compatibility = 3;');\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Encrypted Drift/Moor\nDESCRIPTION: YAML configuration for adding encrypted_moor dependency to a project. This replaces the standard moor_flutter dependency with encrypted_moor which uses sqflite_sqlcipher for database encryption.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/encryption/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  moor: \"$latest version\"\n  encrypted_moor:\n   git:\n    url: https://github.com/simolus3/drift.git\n    path: extras/encryption\n```\n\n----------------------------------------\n\nTITLE: Using Connection Pools with PostgreSQL in Drift\nDESCRIPTION: Example showing how to use connection pooling with PostgreSQL in drift using the postgres package's Pool implementation.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/postgres.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift_postgres/drift_postgres.dart';\nimport 'package:postgres/postgres.dart';\n\nfuture<void> main() async {\n  // Create a pool with 5 concurrent connections to the database\n  final endpoint = Endpoint(\n    host: 'localhost',\n    database: 'postgres',\n    username: 'postgres',\n    password: 'postgres',\n  );\n  final pool = Pool(endpoint, concurrency: 5);\n\n  // Connect to Postgres with the pool\n  final database = Database.withPool(pool);\n\n  // Don't forget to close the database AND the pool when you're done\n  await database.close();\n  await pool.close();\n}\n\nclass Database extends _$Database {\n  Database.withPool(Pool pool) : super(PgDatabase.opened(pool));\n\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Shopping Cart in Relational Model\nDESCRIPTION: Creates a new empty shopping cart by inserting a record into the ShoppingCarts table and returning the generated cart ID.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<int> createEmptyCart(DateTime createdAt) {\n  return into(shoppingCarts)\n      .insert(ShoppingCartsCompanion.insert(createdAt: createdAt));\n}\n```\n\n----------------------------------------\n\nTITLE: Using array variables in drift queries\nDESCRIPTION: An example of using an array variable with the IN operator in a .drift query, which will be expanded into multiple parameters at runtime.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nentriesWithId: SELECT * FROM todos WHERE id IN ?;\n```\n\n----------------------------------------\n\nTITLE: Opening Drift Database with NativeDatabase\nDESCRIPTION: This code demonstrates how to implement the _openDatabase method using NativeDatabase for projects migrating from sqlite3 or sqlite_async. It uses LazyDatabase to asynchronously open the database file.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/migrating_to_drift.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/native.dart';\n\nstatic QueryExecutor _openDatabase() {\n  return LazyDatabase(() async {\n    var dbFolder = await getApplicationDocumentsDirectory();\n    var file = File(p.join(dbFolder.path, 'db.sqlite'));\n\n    return NativeDatabase.createInBackground(file);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Watching a Single Cart with RxDart in Relational Model\nDESCRIPTION: Implements a method to watch a shopping cart and its items using RxDart's combineLatest2 to merge streams of cart data and cart entries into a single CartWithItems object.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@override\nStream<CartWithItems> watchCart(int id) {\n  // First, create a stream of cart entries. We join the BuyableItems table\n  // to include information about the product\n  final entriesQuery = select(cartEntries).join([\n    innerJoin(buyableItems, cartEntries.product.equalsExp(buyableItems.id)),\n  ]);\n  entriesQuery.where(cartEntries.cart.equals(id));\n\n  // Then, create a stream of the cart itself\n  final cartQuery = select(shoppingCarts)..where((c) => c.id.equals(id));\n  \n  // Finally, we use the `combineLatest2` feature from the rxdart package to wait\n  // for both streams to emit a value, and then we combine the two results into a\n  // CartWithItems object\n  return Rx.combineLatest2(\n    cartQuery.watchSingle(),\n    entriesQuery.watch(),\n    (ShoppingCart cart, List<TypedResult> entries) {\n      // For each entry, extract the joined buyable item and the amount\n      final items = entries.map((row) {\n        final product = row.readTable(buyableItems);\n        final entry = row.readTable(cartEntries);\n\n        final buyable = BuyableItem(\n          id: product.id,\n          name: product.name,\n          image: product.image,\n          price: product.price,\n        );\n\n        return CartItem(item: buyable, amount: entry.amount);\n      }).toList();\n\n      return CartWithItems(\n        id: cart.id,\n        createdAt: cart.createdAt,\n        items: items,\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Simple Table in Drift\nDESCRIPTION: This snippet demonstrates how to define a simple users table in Drift with an auto-incrementing primary key and a username column.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get username => text()();\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Drift Database for Native Flutter Apps\nDESCRIPTION: Creates an instance of SharedDatabase for native Flutter applications using NativeDatabase and LazyDatabase.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// native.dart\nimport 'package:drift/native.dart';\n\nSharedDatabase constructDb() {\n  final db = LazyDatabase(() async {\n    final dbFolder = await getApplicationDocumentsDirectory();\n    final file = File(p.join(dbFolder.path, 'db.sqlite'));\n    return NativeDatabase(file);\n  });\n  return SharedDatabase(db);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Drift MariaDB Dependencies in pubspec.yaml\nDESCRIPTION: Instructions for adding the required dependencies to your pubspec.yaml file. This includes the main drift package along with the experimental drift_mariadb package from GitHub.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_mariadb/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: \"$latest version\"\n  drift_mariadb:\n   git:\n    url: https://github.com/simolus3/drift.git\n    path: extras/drift_mariadb\n```\n\n----------------------------------------\n\nTITLE: Nested Results Query in Drift\nDESCRIPTION: Example showing how to use nested results in Drift queries to avoid column name clashes and improve readability when querying multiple tables.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass RoutesWithNestedPointsResult {\n  final int id;\n  final String name;\n  final Point from;\n  final Point to;\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Virtual Generated Columns in Drift\nDESCRIPTION: This example shows how to create a virtual generated column in a Drift table. The 'fullName' column is calculated based on the 'firstName' and 'lastName' columns.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nclass People extends Table {\n  TextColumn get firstName => text()();\n  TextColumn get lastName => text()();\n  TextColumn get fullName => text().generatedAs(firstName + ' ' + lastName)();\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Column Names in Drift\nDESCRIPTION: This example shows how to explicitly set the SQL name of a column in a Drift table, overriding the default naming convention.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get createdAt => text().named('creation_time')();\n}\n```\n\n----------------------------------------\n\nTITLE: Applying a QueryInterceptor to a Database Connection in Drift\nDESCRIPTION: Example showing how to apply a custom QueryInterceptor to a database connection using the interceptWith extension method.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/tracing.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// assuming that `connection` is a DatabaseConnection or a QueryExecutor\nfinal connectionWithLogging = connection.interceptWith(LogInterceptor());\n```\n\n----------------------------------------\n\nTITLE: Using Custom Row Values Expression in Drift Queries\nDESCRIPTION: Demonstrates how to use the custom RowValues expression implementation in a Drift query. This example shows a comparison between two row value expressions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_20\n\nLANGUAGE: dart\nCODE:\n```\nfinal query = select(users).where((user) {\n  return RowValues([user.id, user.name])\n      .equals(RowValues([const Variable(1), const Variable('name')]));\n});\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Table Constraints in Drift\nDESCRIPTION: This example shows how to add custom table constraints in a Drift table. It adds a CHECK constraint to ensure that the end date is after the start date.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass Events extends Table {\n  DateTimeColumn get startDate => dateTime()();\n  DateTimeColumn get endDate => dateTime()();\n\n  @override\n  List<String> get customConstraints => [\n        'CHECK (end_date > start_date)',\n      ];\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting to Web Worker in Flutter Web with Drift\nDESCRIPTION: This Dart code for Flutter web applications demonstrates how to connect to a web worker using drift. It creates a SharedWorker instance and establishes a remote database connection, with considerations for release and debug modes.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:js_interop';\n\nimport 'package:drift/drift.dart';\nimport 'package:drift/remote.dart';\nimport 'package:drift/web.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:web/web.dart';\n\nDatabaseConnection connectToWorker(String databaseName) {\n  final worker = SharedWorker(\n      (kReleaseMode ? 'worker.dart.min.js' : 'worker.dart.js').toJS,\n      databaseName.toJS);\n\n  return DatabaseConnection.delayed(\n      connectToRemoteAndInitialize(worker.port.channel()));\n}\n```\n\n----------------------------------------\n\nTITLE: IN Operator Usage\nDESCRIPTION: Shows how to use isIn and isNotIn for checking values against lists.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nwhere(todos.category.isIn(['private', 'shopping']));\n```\n\n----------------------------------------\n\nTITLE: Migrating WebDatabase to WasmDatabase.open with Data Preservation in Dart\nDESCRIPTION: This code shows how to migrate from a WebDatabase to the new WasmDatabase.open setup while preserving existing data. It uses the initializeDatabase callback to load the old database and migrate it to the new format.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nfinal db = await WasmDatabase.open(\n  path: 'new_db',\n  initializeDatabase: (db) async {\n    final oldStorage = await DriftWebStorage.indexedDbIfSupported('old_db');\n    final oldDb = WebDatabase(oldStorage);\n    final migrator = DatabaseMigrator(oldDb, db);\n    await migrator.migrate();\n    await oldDb.close();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Comparison Operations in Drift\nDESCRIPTION: Shows how to compare expressions using equals, equalsExpr, and comparison operators for numeric and datetime values.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nwhere(todos.id.equals(67));\nwhere(todos.categoryId.equalsExp(otherTable.id));\nwhere(todos.dueDate.isSmallerThan(DateTime.now()));\n```\n\n----------------------------------------\n\nTITLE: Inserting Data on First App Start with Drift Migration Strategy\nDESCRIPTION: Demonstrates how to use a custom migration strategy to populate the database when it's first created.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/faq.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nMigrationStrategy(\n  onCreate: (m) async {\n    await m.createAll(); // create all tables\n    await into(myTable).insert(...); // insert on first run.\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Using a Type Converter in a Drift Table Definition\nDESCRIPTION: This example shows how to apply a type converter to a column in a drift table definition. It maps a TEXT column to the Preferences custom type using the PreferenceConverter.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/type_converters.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n\n  // Store the preferences object as a TEXT column that\n  // uses our converter\n  TextColumn get preferences =>\n      text().map(const PreferenceConverter()).nullable()();\n}\n```\n\n----------------------------------------\n\nTITLE: Opening Drift Database with SqfliteQueryExecutor\nDESCRIPTION: This snippet shows how to implement the _openDatabase method using SqfliteQueryExecutor for projects migrating from sqflite. It opens a database file in the application's database folder.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/migrating_to_drift.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift_sqflite/drift_sqflite.dart';\n\nstatic QueryExecutor _openDatabase() {\n  return SqfliteQueryExecutor.inDatabaseFolder(path: 'db.sqlite');\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Join Results in Drift\nDESCRIPTION: Shows how to read data from joined tables using the readTable method on TypedResult objects, extracting both the todo entry and its associated category.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n// loads all todo entries together with their category\nStream<List<EntryWithCategory>> entriesWithCategory() {\n  return select(todos)\n      .join([\n        leftOuterJoin(categories, categories.id.equalsExp(todos.category)),\n      ])\n      .watch()\n      .map((rows) {\n        return rows.map((row) {\n          return EntryWithCategory(\n            entry: row.readTable(todos),\n            category: row.readTableOrNull(categories),\n          );\n        }).toList();\n      });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking If Todo Items Exist without FROM Clause in Drift\nDESCRIPTION: A query that checks if any todo items exist without using a FROM clause. This demonstrates the selectExpressions API, which allows evaluating expressions in a standalone SELECT statement without requiring a table.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_18\n\nLANGUAGE: dart\nCODE:\n```\nFuture<bool> hasTodoItem() {\n  final exists = existsQuery(select(todos));\n\n  return customSelect('SELECT \\$exists AS value',\n          variables: [Variable.withBool(exists)],\n          readsFrom: {todos})\n      .map((row) => row.read<bool>('value'))\n      .getSingle();\n\n  // Alternative, using Dart code only:\n  //\n  // You can call `selectExpressions` to run a SELECT without any FROM clause,\n  // which is useful if you only want to select expressions directly (like\n  // subqueries here).\n  //\n  // return db.selectExpressions([existsQuery(db.select(todos))])\n  //    .map((row) => row.read<bool>(0))\n  //    .getSingle();\n}\n```\n\n----------------------------------------\n\nTITLE: Using a QueryInterceptor for a Specific Code Block in Drift\nDESCRIPTION: Example demonstrating how to apply an interceptor temporarily for a specific code block instead of the entire database connection.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/tracing.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// This will run the transaction with the interceptor, but not modify the original\n// database connection\nawait database.connection.runWithInterceptor(\n  LogInterceptor(logResults: false),\n  (connection) => connection.transaction(() async {\n    // run some queries...\n  }),\n);\n```\n\n----------------------------------------\n\nTITLE: Importing files in a drift file\nDESCRIPTION: Example of importing other .drift files and Dart files in a .drift file, demonstrating how to access tables defined in other files.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nimport 'other.drift';\nimport 'package:my_package/tables.dart';\n```\n\n----------------------------------------\n\nTITLE: Migrating Existing Database to Encryption in Dart\nDESCRIPTION: Function to migrate an existing unencrypted database to an encrypted one using SQLCipher, following the recommended steps for encryption migration.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/encryption.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> migrateToEncryption(String path) async {\n  final database = sqlite3.open(path);\n\n  // Create a new, encrypted database file\n  database.execute(\n    \"ATTACH DATABASE '$path.encrypted' AS encrypted KEY 'my_password';\",\n  );\n\n  // Copy all data from the unencrypted database to the new one\n  database.execute('SELECT sqlcipher_export(\"encrypted\");');\n  database.execute('DETACH DATABASE encrypted;');\n\n  database.dispose();\n\n  // Delete the old, unencrypted database\n  await File(path).delete();\n  // Rename the encrypted database to match the old file name\n  await File('$path.encrypted').rename(path);\n}\n\n// Use this in your app like this:\nfinal database = await NativeDatabase.createInBackground(\n  await getDatabasesPath(),\n  setup: (db) {\n    db.execute(\"PRAGMA key = 'my_password';\");\n  },\n  isolateSetup: () async {\n    await setupSqlCipher();\n    BackgroundIsolateBinaryMessenger.ensureInitialized();\n\n    final dbPath = await getDatabasePath();\n    await migrateToEncryption(dbPath);\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Up SQLCipher on Android in Dart\nDESCRIPTION: Code snippet for setting up SQLCipher on Android, including applying a workaround for older Android versions and setting up the isolate for background database operations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/encryption.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:sqlite3/sqlite3.dart';\nimport 'package:sqlcipher_flutter_libs/sqlcipher_flutter_libs.dart';\n\nfuture setupSqlCipher() async {\n  // Use sqlcipher_flutter_libs to ensure that the SQLCipher library is available\n  // ignore: unused_local_variable\n  var ensureInitialized = sqlcipher;\n\n  // Then, tell sqlite3_flutter_libs to use SQLCipher\n  applyWorkaroundToOpenSqlCipherOnOldAndroidVersions();\n  sqlite3.openMode =\n      OpenMode.readWriteCreate | OpenMode.uri | OpenMode.passwordProtected;\n}\n\n// When using this with NativeDatabase.createInBackground, you'd write:\nfinal database = await NativeDatabase.createInBackground(\n  await getDatabasesPath(),\n  setup: (db) {\n    // Configure the database to use encryption\n  },\n  setupIsolate: () async {\n    // Need to setup SQLCipher on the background isolate as well\n    await setupSqlCipher();\n\n    // Register a background message handler to communicate with the UI isolate\n    BackgroundIsolateBinaryMessenger.ensureInitialized();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Opening a Web Database with WasmDatabase\nDESCRIPTION: Example of how to manually open a web database using WasmDatabase in a pure Dart application, with options to control storage implementation preferences.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// First example: Let drift handle the storage, with automatic fallbacks.\nfinal db = await WasmDatabase.open(\n  // where the sqlite3.wasm file can be found - this is passed to fetch()\n  sqlite3Uri: Uri.parse('sqlite3.wasm'),\n  // At what path worker scripts can be found - also passed to fetch()\n  driftWorkerUri: Uri.parse('drift_worker.dart.js'),\n  // The name of the database to open, excluding file extensions. This must be a constant\n  // at compile-time, do not use UUID v4 here!\n  databaseName: 'database',\n);\n\n// Second example: Control storage preference\nfinal db = await WasmDatabase.open(\n  sqlite3Uri: Uri.parse('sqlite3.wasm'),\n  driftWorkerUri: Uri.parse('drift_worker.dart.js'),\n  databaseName: 'database',\n  // Set storage preferences: First, try to use the FileSystem API if\n  // possible. If that's not available, fall back to IndexedDb, and\n  // then to in-memory as a last resort.\n  initializeOptions: const DriftWebInitializeOptions(\n    preferredStorages: [\n      SqliteStorageImplementation.opfsLocks,\n      SqliteStorageImplementation.indexedDbMultiEntry,\n      SqliteStorageImplementation.inMemory,\n    ],\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Strict Tables in Drift\nDESCRIPTION: This snippet demonstrates how to create a strict table in Drift where more stringent type checking rules are applied to columns.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nclass StrictUsers extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n\n  @override\n  bool get isStrict => true;\n}\n```\n\n----------------------------------------\n\nTITLE: Migration with Legacy Support\nDESCRIPTION: Example showing how to handle migrations with a mix of legacy migration code and new step-by-step migrations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/step_by_step.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nMigrationStrategy get migration {\n  return MigrationStrategy(\n    onUpgrade: (m, from, to) async {\n      if (from < 2) {\n        // Run legacy migrations to get to version 2\n        await legacyMigrations(m, from);\n        from = 2;\n      }\n\n      await m.runMigrationSteps(\n        from: from,\n        to: to,\n        migration: stepByStep(\n          from2To3: (m, s) async {\n            await m.createTable(s.cats);\n          },\n          from3To4: (m, s) async {\n            await m.addColumn(s.cats, s.cats.name);\n          },\n        ),\n      );\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Spawning of DriftIsolate in Dart\nDESCRIPTION: This example shows how to manually spawn an isolate and create a DriftIsolate server within it. It demonstrates passing a SendPort to the isolate for communication.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<DriftIsolate> spawnInBackground() async {\n  final receivePort = ReceivePort();\n  await Isolate.spawn(\n    _startBackground,\n    receivePort.sendPort,\n  );\n  return DriftIsolate.fromConnectPort(await receivePort.first);\n}\n\nvoid _startBackground(SendPort sendPort) {\n  final executor = NativeDatabase.memory();\n  final isolate = DriftIsolate.inCurrent(() => executor);\n  sendPort.send(isolate.connectPort);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining tables and queries in a .drift file\nDESCRIPTION: A complete example of a .drift file that defines two tables (todos and categories) and demonstrates various query types including inserting, deleting, and selecting data with JOINs.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE todos (\n  id INTEGER NOT NULL PRIMARY KEY,\n  title TEXT NOT NULL,\n  content TEXT NOT NULL,\n  category_id INTEGER REFERENCES categories (id)\n);\n\nCREATE TABLE categories AS Category (\n  id INTEGER NOT NULL PRIMARY KEY,\n  description TEXT NOT NULL\n);\n\ncreateEntry: INSERT INTO todos (title, content)\n  VALUES (?, ?) RETURNING id;\n\ndeleteById: DELETE FROM todos WHERE id = ?;\n\nallTodos: SELECT\n  todos.*,\n  categories.description AS category\nFROM todos\nLEFT OUTER JOIN categories ON categories.id = todos.category_id;\n```\n\n----------------------------------------\n\nTITLE: Initializing Drift Database with GetX Package\nDESCRIPTION: Demonstrates how to use the GetX package to manage a Drift database instance as a service.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/faq.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  Get.put(MyDatabase());\n  runApp(MyFlutterApp());\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite for Windows and Linux in Dart\nDESCRIPTION: Code snippet demonstrating how to set up SQLite support for Windows and Linux platforms by loading the appropriate shared libraries.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/vm.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nDynamicLibrary.open('sqlite3.dll');\nDynamicLibrary.open('sqlite3.so');\n\n// After opening the libraries, you can use drift as usual\nfinal db = MyDatabase();\n```\n\n----------------------------------------\n\nTITLE: Writing Test Cases for Drift Database Operations in Dart\nDESCRIPTION: This snippet shows how to write test cases for drift database operations. It includes tests for creating users and verifying stream updates when user data changes.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/testing.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntest('users can be created', () async {\n  final id = await database.createUser('some user');\n  final user = await database.watchUserWithId(id).first;\n\n  expect(user.name, 'some user');\n});\n\ntest('stream emits a new user when the name updates', () async {\n  final id = await database.createUser('first name');\n\n  final expectation = expectLater(\n    database.watchUserWithId(id).map((user) => user.name),\n    emitsInOrder(['first name', 'changed name']),\n  );\n\n  await database.updateName(id, 'changed name');\n  await expectation;\n});\n```\n\n----------------------------------------\n\nTITLE: Connecting to Drift Web Worker in Dart\nDESCRIPTION: This code snippet shows how to connect to a drift web worker from the main application. It creates a SharedWorker instance and establishes a remote database connection using the worker's message port.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift/remote.dart';\nimport 'package:drift/web.dart';\n\nDatabaseConnection connectToWorker(String dbName) {\n  final worker = SharedWorker('worker.dart.js', dbName);\n  return DatabaseConnection.delayed(\n    connectToRemoteAndInitialize(worker.port.channel()),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Row Values Expression in Drift\nDESCRIPTION: Shows how to implement the Expression interface directly to create a custom expression for SQLite row values. This advanced approach provides complete control over how the SQL is generated.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_19\n\nLANGUAGE: dart\nCODE:\n```\nclass RowValues<T extends ResultSetImplementation> implements Expression {\n  final List<Expression> _expressions;\n\n  RowValues(this._expressions);\n\n  @override\n  final bool? restrictions = null;\n\n  @override\n  Precedence get precedence => Precedence.primary;\n\n  @override\n  void writeInto(GenerationContext context) {\n    context.buffer.write('(');\n    var first = true;\n    for (final expression in _expressions) {\n      if (!first) {\n        context.buffer.write(', ');\n      } else {\n        first = false;\n      }\n\n      expression.writeInto(context);\n    }\n    context.buffer.write(')');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Connection and Asset Extraction\nDESCRIPTION: Implementation of LazyDatabase to handle database initialization, including extracting pre-populated database from assets and applying Android-specific workarounds.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/existing_databases.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:flutter/services.dart' show rootBundle;\nimport 'package:path/path.dart' as p;\nimport 'package:sqlite3/sqlite3.dart';\nimport 'package:sqlite3_flutter_libs/sqlite3_flutter_libs.dart';\n\nLazyDatabase _openConnection() {\n  return LazyDatabase(() async {\n    // put the database file, called db.sqlite here, into the documents folder\n    // for your app.\n    final dbFolder = await getApplicationDocumentsDirectory();\n    final file = File(p.join(dbFolder.path, 'app.db'));\n\n    if (!await file.exists()) {\n        // Extract the pre-populated database file from assets\n        final blob = await rootBundle.load('assets/my_database.db');\n        final buffer = blob.buffer;\n        await file.writeAsBytes(buffer.asUint8List(blob.offsetInBytes, blob.lengthInBytes));\n    }\n\n    // Also work around limitations on old Android versions\n    if (Platform.isAndroid) {\n      await applyWorkaroundToOpenSqlite3OnOldAndroidVersions();\n    }\n\n    // Make sqlite3 pick a more suitable location for temporary files - the\n    // one from the system may be inaccessible due to sandboxing.\n    final cachebase = (await getTemporaryDirectory()).path;\n    // We can't access /tmp on Android, which sqlite3 would try by default.\n    // Explicitly tell it about the correct temporary directory.\n    sqlite3.tempDirectory = cachebase;\n\n    return NativeDatabase.createInBackground(file);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Records as Row Classes in Drift\nDESCRIPTION: This example demonstrates how to use records as a lightweight representation of database rows by using @UseRowClass with a record type parameter.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@UseRowClass.record\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  DateTimeColumn get birthDate => dateTime()();\n}\n```\n\n----------------------------------------\n\nTITLE: Using Value Class for Partial Rows in Drift\nDESCRIPTION: This snippet shows how to use the Value class to represent partial rows in Drift, enabling distinctions between NULL values and absent columns in database operations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// Inserting a user\nfinal companion = UsersCompanion(\n  id: const Value.absent(), // 1\n  username: Value('user'),\n);\n\n// This can also be written more concisely with a generated constructor:\nfinal companion2 = UsersCompanion.insert(username: 'user'); // 2\n```\n\n----------------------------------------\n\nTITLE: Creating FTS5 Virtual Table in SQL for Drift\nDESCRIPTION: Shows how to create a virtual table using the FTS5 extension in a Drift file. The example creates an 'email' table with 'sender', 'title', and 'body' columns for full-text search.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/extensions.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIRTUAL TABLE email USING fts5(sender, title, body);\n```\n\n----------------------------------------\n\nTITLE: Database Export Implementation\nDESCRIPTION: Method to export a SQLite database to a file using VACUUM INTO statement.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/existing_databases.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> exportInto(File file) async {\n  // Make sure the directory of the target file exists\n  await file.parent.create(recursive: true);\n\n  // Override an existing backup, sqlite expects the target file to be empty\n  if (file.existsSync()) {\n    file.deleteSync();\n  }\n\n  await customStatement('VACUUM INTO ?', [file.path]);\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing SQL Query with Type Inference in Dart\nDESCRIPTION: Shows how to use the SqlEngine for analyzing an SQL query, including registering tables and inferring types of result columns. It demonstrates type inference for various column types and expressions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nfinal id = TableColumn('id', const ResolvedType(type: BasicType.int));\nfinal content = TableColumn('content', const ResolvedType(type: BasicType.text));\nfinal demoTable = Table(\n  name: 'demo',\n  resolvedColumns: [id, content],\n);\nfinal engine = SqlEngine()..registerTable(demoTable);\n\nfinal context =\n    engine.analyze('SELECT id, d.content, *, 3 + 4 FROM demo AS d');\n\nfinal select = context.root as SelectStatement;\nfinal resolvedColumns = select.resolvedColumns;\n\nresolvedColumns.map((c) => c.name); // id, content, id, content, 3 + 4\nresolvedColumns.map((c) => context.typeOf(c).type.type); // int, text, int, text, int, int\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Isolate Database Sharing\nDESCRIPTION: Shows how to enable database sharing between multiple isolates using DriftNativeOptions. This is useful for scenarios like WorkManager where background services need database access.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_flutter/README.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n  MyAppDatabase.defaults(): super(\n    driftDatabase(\n      name: 'app_db',\n      native: DriftNativeOptions(\n        shareAcrossIsolates: true,\n      ),\n    )\n  );\n```\n\n----------------------------------------\n\nTITLE: Watching All Carts with JSON Functions\nDESCRIPTION: Implements a method to watch all shopping carts and their items using a custom SQL query with SQLite's json_each function to join cart data with product information.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n@override\nStream<List<CartWithItems>> watchAllCarts() {\n  final query = customSelect(\n    '''\n    SELECT\n      c.id as cart_id, c.created_at,\n      i.id as item_id, i.name, i.image, i.price,\n      json_extract(value, '\\$.amount') as amount\n    FROM shopping_carts c\n    LEFT JOIN json_each(c.items_json) items\n    LEFT JOIN buyable_items i ON i.id = json_extract(value, '\\$.product')\n    ''',\n    readsFrom: {shoppingCarts, buyableItems},\n  );\n\n  return query.watch().map((rows) {\n    // We need to group all entries by the cart they belong to\n    final cartRows = <int, List<QueryRow>>{};\n\n    for (final row in rows) {\n      final cartId = row.read<int>('cart_id');\n      cartRows.putIfAbsent(cartId, () => []).add(row);\n    }\n\n    // Now create the final CartWithItems objects\n    return [\n      for (final entry in cartRows.entries)\n        _cartFromRows(entry.key, entry.value),\n    ];\n  });\n}\n\nCartWithItems _cartFromRows(int cartId, List<QueryRow> rows) {\n  final createdAt = rows.first.read<DateTime>('created_at');\n\n  final items = rows.map((row) {\n    // Some rows might not have an item id, which happens when json_each\n    // doesn't return any rows. In that case, the item id is null\n    final itemId = row.readNullable<int>('item_id');\n    if (itemId == null) {\n      return null;\n    }\n\n    return CartItem(\n      item: BuyableItem(\n        id: itemId,\n        name: row.read<String>('name'),\n        image: row.read<Uint8List>('image'),\n        price: row.read<double>('price'),\n      ),\n      amount: row.read<int>('amount'),\n    );\n  }).whereType<CartItem>().toList();\n\n  return CartWithItems(\n    id: cartId,\n    createdAt: createdAt,\n    items: items,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Watching Custom Queries in Dart\nDESCRIPTION: Illustrates how to create and watch custom queries in Drift. It includes specifying the tables involved in the query, which is necessary for custom queries to be watchable.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/streams.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal query = customSelect(\n  'SELECT * FROM todos WHERE created_at > ?',\n  variables: [Variable.withDateTime(min)],\n  readsFrom: {todos}, // [1]\n);\n\n// Run the query once\nfinal List<QueryRow> currentTodos = await query.get();\n\n// Watch the query\nfinal Stream<List<QueryRow>> todosStream = query.watch();\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Test Implementation in Dart\nDESCRIPTION: Demonstrates how to write a basic migration test using SchemaVerifier to validate schema changes between versions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/tests.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nvoid main() {\n  late SchemaVerifier verifier;\n\n  setUp(() {\n    verifier = SchemaVerifier(GeneratedHelper());\n  });\n\n  test('upgrade from v1 to v2', () async {\n    final connection = await verifier.startAt(1);\n    final db = YourDatabase(connection);\n    await verifier.migrateAndValidate(db, 2);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stored Generated Columns in Drift\nDESCRIPTION: This snippet demonstrates how to create a stored generated column in a Drift table. The 'fullName' column is calculated and stored based on the 'firstName' and 'lastName' columns.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass People extends Table {\n  TextColumn get firstName => text()();\n  TextColumn get lastName => text()();\n  TextColumn get fullName => text().generatedAs(firstName + ' ' + lastName, stored: true)();\n}\n```\n\n----------------------------------------\n\nTITLE: Querying FTS5 Table in SQL for Drift\nDESCRIPTION: Demonstrates a query on an FTS5 table in Drift. The example selects all emails matching 'fts5' and orders them by rank.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/extensions.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nemailsWithFts5: SELECT * FROM email WHERE email MATCH 'fts5' ORDER BY rank;\n```\n\n----------------------------------------\n\nTITLE: Listening for Table Updates in Dart\nDESCRIPTION: Shows how to listen for update events on tables directly in Drift, without using a specific query.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/streams.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nStream<Set<TableUpdate>> tableUpdates = db.tableUpdates([todos]);\ntableUpdates.listen((updates) {\n  for (final update in updates) {\n    print('update on table ${update.table} of kind ${update.kind}');\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating SQL-based Indexes in Drift Tables\nDESCRIPTION: This snippet demonstrates how to create a more complex index using a direct SQL statement in a Drift table. It creates a partial index on the 'name' column where 'isActive' is true.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@TableIndex('CREATE INDEX users_active_name ON users (name) WHERE is_active')\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  BoolColumn get isActive => boolean()();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Row Classes with @UseRowClass in Drift\nDESCRIPTION: This snippet shows how to use the @UseRowClass annotation to specify a custom class for representing table rows instead of using the automatically generated dataclass.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@UseRowClass(User)\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  DateTimeColumn get birthDate => dateTime()();\n}\n\nclass User {\n  final int id;\n  final String name;\n  final DateTime birthDate;\n\n  User({required this.id, required this.name, required this.birthDate});\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for SQLCipher Support in Dart\nDESCRIPTION: Function to check if the database supports SQLCipher encryption by verifying the availability of the cipher_version pragma.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/encryption.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nbool _debugCheckHasCipher(Database database) {\n  try {\n    database.select('PRAGMA cipher_version;');\n    return true;\n  } catch (_) {\n    return false;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Using Manager API in Drift\nDESCRIPTION: This example shows how to insert a new user into the database using the Manager API, which doesn't require companions and simplifies the process by directly accepting required fields.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// add a new user into the users table with the username \"user\"\nawait db.users.insertOne(UsersInsertRequest(username: 'user'));\n\n// alternatively, we can write\nawait db.into(db.users).insert(UsersInsertRequest(username: 'user'));\n```\n\n----------------------------------------\n\nTITLE: Window Ranking Operations\nDESCRIPTION: Shows how to use window functions for row ranking.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_15\n\nLANGUAGE: dart\nCODE:\n```\nrank().over(\n  orderBy: [OrderingTerm.desc(todos.priority)],\n);\n```\n\n----------------------------------------\n\nTITLE: Average Length Calculation\nDESCRIPTION: Example of using aggregate functions to calculate average values.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n(select(todos)..where((t) => t.completed)).map((t) => t.content.length.avg());\n```\n\n----------------------------------------\n\nTITLE: Generic Method to Update Title Column in Any Table\nDESCRIPTION: An extension method that updates the 'title' column of any table based on a row's ID. This demonstrates how to use RawValuesInsertable for generic updates across different tables.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/schema_inspection.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nextension UpdateTitle<Table extends HasResultSet, D> on TableInfo<Table, D> {\n  Future<int> updateTitleById(int id, String newTitle) {\n    final idColumn = columnsByName['id'];\n    final titleColumn = columnsByName['title'];\n\n    if (idColumn is! GeneratedColumn<int, dynamic>) {\n      throw ArgumentError('id is not an int column on this table!');\n    }\n    if (titleColumn is! GeneratedColumn<String, dynamic>) {\n      throw ArgumentError('title is not a string column on this table!');\n    }\n\n    final query = update();\n    // Explicitly set the WHERE clause - we could also use whereSamePrimaryKey if we know\n    // that the id column is the primary key.\n    query.where((tbl) => idColumn.equals(id));\n\n    // RawValuesInsertable can be used as a generic companion backed by a map of\n    // column name -> value\n    query.write(RawValuesInsertable({titleColumn.name: newTitle}));\n\n    return query.go();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Custom Queries with DriftDatabase Annotation\nDESCRIPTION: Demonstrates how to define custom SQL queries using the @DriftDatabase annotation. The example shows a query that counts items in categories.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/custom_queries.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@DriftDatabase(tables: [Categories, TodoItems], queries: {\n  'categoriesWithCount': '''\n    SELECT c.*, (SELECT COUNT(*) FROM todo_items WHERE category = c.id) itemCount\n    FROM categories c\n  '''\n})\nclass MyDatabase extends _$MyDatabase {\n  MyDatabase(QueryExecutor e) : super(e);\n\n  @override\n  int get schemaVersion => 1;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drift with libSQL Synchronization in Dart\nDESCRIPTION: Demonstrates how to set up a drift database with libSQL synchronization capabilities using the drift_libsql package. This approach maintains a local database copy that syncs with the remote server on a specified interval.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/libsql.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift_libsql/drift_libsql.dart';\n\n@DriftDatabase(...)\nclass AppDatabase extends _$AppDatabase {\n  AppDatabase(super.e);\n\n  @override\n  int get schemaVersion => 1;\n}\n\nvoid main() async {\n  final database = AppDatabase(DriftLibsqlDatabase(\n    \"${dir.path}/replica.db\",\n    syncUrl: 'hrana url',\n    authToken: 'your-token',\n    readYourWrites: true,\n    syncIntervalSeconds: 3,\n  ));\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Extensions in Drift\nDESCRIPTION: YAML configuration for enabling SQLite extensions like json1, fts5, math, and dbstat in Drift's analyzer. This enables static analysis support for these extensions in custom queries, though runtime support depends on the platform.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/index.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          sql:\n            dialect: sqlite\n            options:\n              modules:\n                - json1\n                - fts5\n                - math\n                - dbstat\n```\n\n----------------------------------------\n\nTITLE: Group Concatenation\nDESCRIPTION: Shows how to concatenate multiple values into a single string using groupConcat.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nselect(todos).map((t) => t.content.groupConcat());\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Not Null Column Constraints in Drift\nDESCRIPTION: This snippet demonstrates how to add a custom SQL constraint to a column while keeping it NOT NULL in a Drift table. It adds a CHECK constraint to ensure the 'priority' column is between 1 and 5 and is not null.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass Tasks extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  IntColumn get priority => integer().customConstraint('NOT NULL CHECK(priority BETWEEN 1 AND 5)')();\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Drift Web Worker in Dart\nDESCRIPTION: This snippet demonstrates how to create a web worker for handling drift database operations. It sets up a DriftWorker with an in-memory database and establishes a server to handle remote database connections.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_13\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\nimport 'package:drift/remote.dart';\nimport 'package:drift/web/worker.dart';\n\nvoid main() {\n  final self = SharedWorkerGlobalScope.instance;\n  final server = DriftServer(\n    () => WebDatabase.withStorage(\n      DriftWebStorage.indexedDb('worker_db', migrateFromLocalStorage: false),\n    ),\n  );\n\n  self.onConnect.listen((event) {\n    final messagePort = event.ports.first;\n    server.serve(messagePort.channel());\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Drift-Specific SQL Functions in Dart\nDESCRIPTION: Example of using drift-specific SQL functions like pow and sqrt in a database query to find nearby coordinates.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/vm.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:drift/drift.dart';\n// those methods are hidden behind another import because they're only available with a NativeDatabase\nimport 'package:drift/extensions/native.dart';\n\nclass Coordinates extends Table {\n  RealColumn get x => real()();\n  RealColumn get y => real()();\n}\n\n// Can now be used like this:\nFuture<List<Coordinate>> findNearby(Coordinate center, int radius) {\n  return (select(coordinates)..where((other) {\n    // find coordinates where sqrt((center - x)² + (center.y - y)²) < radius\n    final distanceSquared = sqlPow(center.x - row.x, 2) + sqlPow(center.y - row.y, 2);\n    return sqlSqrt(distanceSquared).isLessThanValue(radius);\n  })).get();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Change Tracking in SQL\nDESCRIPTION: Example mention of using CREATE TRIGGER statements to track database changes for synchronization purposes. This would be used to maintain a log of changes that need to be synced to the backend server.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/server_sync.md#2025-04-17_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TRIGGER\n```\n\n----------------------------------------\n\nTITLE: Finding a Todo Entry by ID Using Specific Table Reference\nDESCRIPTION: A simple query to find a Todo entry by its ID using a direct reference to the Todos table. This approach is straightforward but specific to a single table.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/schema_inspection.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nFuture<Todo> findTodo(int id) {\n  return (select(todos)..where((t) => t.id.equals(id))).getSingle();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding SQLCipher Dependency in YAML\nDESCRIPTION: Adding the sqlcipher_flutter_libs package as a dependency in the pubspec.yaml file.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/encryption.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  sqlcipher_flutter_libs: ^0.6.0\n```\n\n----------------------------------------\n\nTITLE: Configuring Multi-Dialect Support in Drift\nDESCRIPTION: Configuration example for generating code compatible with multiple database systems. This allows sharing database code between different environments (e.g., backend and Flutter app) or supporting multiple database management systems.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/index.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          sql:\n            dialects:\n              - sqlite\n              - postgres\n            options:\n              version: \"3.34\"\n```\n\n----------------------------------------\n\nTITLE: List AND Operations\nDESCRIPTION: Shows how to combine multiple predicates using Expression.and for matching all conditions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal predicates = [\n  todos.id.isBiggerThan(10),\n  todos.title.like('%drift%'),\n];\nwhere(Expression.and(predicates));\n```\n\n----------------------------------------\n\nTITLE: Custom Migration Steps with Foreign Key Handling\nDESCRIPTION: Implementation of step-by-step migrations with custom foreign key handling and validation checks.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/step_by_step.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nMigrationStrategy get migration {\n  return MigrationStrategy(\n    onUpgrade: (m, from, to) async {\n      // Temporarily disable foreign keys during migration\n      await m.customStatement('PRAGMA foreign_keys = OFF');\n      try {\n        await m.runMigrationSteps(\n          from: from,\n          to: to,\n          migration: stepByStep(\n            from1To2: (m, s) async {\n              await m.addColumn(s.users, s.users.birthDate);\n            },\n            from2To3: (m, s) async {\n              await m.deleteTable('users');\n            },\n          ),\n        );\n\n        // Re-enable foreign keys and validate data\n        await m.customStatement('PRAGMA foreign_keys = ON');\n        if (const bool.fromEnvironment('dart.vm.product')) {\n          await m.validateDatabaseSchema();\n        }\n      } finally {\n        // Always re-enable foreign keys, even if the migration failed\n        await m.customStatement('PRAGMA foreign_keys = ON');\n      }\n    },\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Typed Geopoly Virtual Table in SQL for Drift\nDESCRIPTION: Demonstrates creating a Geopoly virtual table with specified column types in a Drift file. This approach helps generate more convenient Dart code by providing type hints.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/extensions.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\ncreate virtual table geo using geopoly (\n    geoID INTEGER not null,\n    a INTEGER,\n    b\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Dataclass for Named Queries\nDESCRIPTION: Example of applying an existing class to a named query in a .drift file, showing how to map query results to class properties.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nimport 'my_existing_class.dart';\n\nmyQuery WITH MyExistingClass: SELECT name, AVG(age) AS avg_age FROM entries GROUP BY category;\n```\n\n----------------------------------------\n\nTITLE: Installing drift packages with Dart CLI for Postgres\nDESCRIPTION: Command-line instruction to add drift, postgres and related packages to a Dart project using the Dart package manager CLI.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add drift postgres drift_postgres dev:drift_dev dev:build_runner\n```\n\n----------------------------------------\n\nTITLE: Implementing database constructor for Dart with sqlite3\nDESCRIPTION: Database implementation for pure Dart applications using sqlite3. Creates an in-memory database for simplicity, which is useful for tests but doesn't persist data between app restarts.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nAppDatabase() : super(NativeDatabase.memory());\n\n// you should bump this number whenever you change or add a table definition\n@override\nint get schemaVersion => 1;\n```\n\n----------------------------------------\n\nTITLE: Limiting Results in Drift Queries\nDESCRIPTION: Demonstrates how to limit the number of results returned by a SELECT query using the limit method, including specifying an offset for pagination.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n// load the first 10 entries\nFuture<List<TodoEntry>> loadFirstTen() {\n  return (select(todos)..limit(10)).get();\n}\n\n// load the next 10 entries\nFuture<List<TodoEntry>> loadMoreTen(int offset) {\n  return (select(todos)..limit(10, offset: offset)).get();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Table with Custom Dataclass\nDESCRIPTION: Shows how to create a table that uses an existing User class with the WITH keyword. The table defines columns for id, name and birth date.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nimport 'user.dart';\n\nCREATE TABLE users(\n  id INTEGER NOT NULL PRIMARY KEY,\n  name TEXT NOT NULL,\n  birth_date DATETIME NOT NULL\n) WITH User;\n```\n\n----------------------------------------\n\nTITLE: Spawning a DriftIsolate Server in Dart\nDESCRIPTION: This code demonstrates how to spawn a DriftIsolate server using the DriftIsolate.spawn method. It creates a NativeDatabase and wraps it in a DriftIsolate.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<DriftIsolate> createDriftIsolate() async {\n  final path = await getApplicationDocumentsDirectory();\n  final dbPath = p.join(path.path, 'db.sqlite');\n  final driftIsolate = await DriftIsolate.spawn(() => NativeDatabase(File(dbPath)));\n  return driftIsolate;\n}\n```\n\n----------------------------------------\n\nTITLE: Database Table Definitions in Dart\nDESCRIPTION: Defines database tables for todos and categories with relationships using Drift annotations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/manager.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@DataClassName('TodoItem')\nclass TodoItems extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get title => text().nullable()();\n  BoolColumn get isComplete => boolean().withDefault(const Constant(false))();\n  IntColumn get category => integer().references(Categories, #id).nullable()();\n}\n\nclass Categories extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get description => text()();\n}\n```\n\n----------------------------------------\n\nTITLE: Inserting Data Using Core API with Companions in Drift\nDESCRIPTION: This snippet demonstrates how to insert data using the Core API with the UsersCompanion.insert constructor, which provides required parameters for columns without database defaults.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n// add a new user into the users table with the username \"user\"\nawait db.into(db.users).insert(UsersCompanion.insert(username: 'user'));\n\n// alternatively, we can write\nawait db.insert(db.users).insert(UsersCompanion.insert(username: 'user'));\n```\n\n----------------------------------------\n\nTITLE: Adding drift dependencies for Dart with Postgres\nDESCRIPTION: YAML configuration to add drift dependencies for Dart projects using PostgreSQL. Includes drift, postgres, and the postgres adapter alongside development dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: ^{{ versions.drift }}\n  postgres: ^{{ versions.postgres }}\n  drift_postgres: ^{{ versions.drift_postgres }}\n\ndev_dependencies:\n  drift_dev: ^{{ versions.drift_dev }}\n  build_runner: ^{{ versions.build_runner }}\n```\n\n----------------------------------------\n\nTITLE: Migrating from moor_flutter to drift/native in Dart\nDESCRIPTION: Code changes required to migrate from moor_flutter to drift/native, including dependency updates and executor replacement.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/vm.md#2025-04-17_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n drift: ^{{ versions.drift }}\n sqlite3_flutter_libs:\n sqflite: ^1.1.7 # Still used to obtain the database location\ndev_dependencies:\n drift_dev: ^{{ versions.drift_dev }}\n```\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:sqflite/sqflite.dart' show getDatabasesPath;\nimport 'package:path/path.dart' as p;\n\nLazyDatabase(() async {\n  final dbFolder = await getDatabasesPath();\n  final file = File(p.join(dbFolder, 'db.sqlite'));\n  return NativeDatabase(file);\n})\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Values from Drift Queries\nDESCRIPTION: Demonstrates how to retrieve a single row from a query using getSingle and watchSingle methods, useful when you expect exactly one or zero results.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\n// uses the id column to find a specific entry\nFuture<TodoEntry> entryById(int id) {\n  return (select(todos)..where((t) => t.id.equals(id))).getSingle();\n}\n\n// uses watchSingle to emit a stream of that row. The stream will automatically\n// update the result when the underlying data changes.\nStream<TodoEntry> watchEntryById(int id) {\n  return (select(todos)..where((t) => t.id.equals(id))).watchSingle();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cart with Items in JSON Model\nDESCRIPTION: Updates a shopping cart by serializing cart items to JSON and updating the itemsJson field in the ShoppingCarts table.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<void> updateCart(CartWithItems updatedCart) {\n  final jsonItems = updatedCart.items\n      .map((item) => JsonCartItem(\n            product: item.item.id,\n            amount: item.amount,\n          ).toJson())\n      .toList();\n\n  return (update(shoppingCarts)..where((c) => c.id.equals(updatedCart.id)))\n      .write(ShoppingCartsCompanion(\n        itemsJson: Value(jsonEncode(jsonItems)),\n      ));\n}\n```\n\n----------------------------------------\n\nTITLE: Using INSERT INTO SELECT to Create Categories for Unassigned Todos in Drift\nDESCRIPTION: An example of using insertFromSelect to efficiently insert data from a SELECT query into a table. This creates a new category for each todo entry that doesn't have a category assigned.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> createCategoryForUnassignedTodoEntries() async {\n  final newDescription = todos.title.substr(0, 20).as('title');\n\n  // insertFromSelect will run an INSERT INTO ... SELECT FROM ... statement\n  await batch((batch) {\n    batch.insertFromSelect(\n      categories,\n      selectOnly(todos)\n        ..addColumns([newDescription])\n        ..where(todos.category.isNull()),\n      columns: {categories.description: newDescription},\n    );\n\n    // We also need to update todos with their new category ID.\n    // First, category IDs start at 1 and are increased for each new category.\n    // We can use COUNT to know how many categories there are.\n    final rowCount = selectOnly(categories)\n      ..addColumns([categories.id.count()]);\n    final startId =\n        await rowCount.map((row) => row.read(categories.id.count())).getSingle();\n\n    // Now, we need to figure out which of the original categories we have\n    // just created. To do this, we can find the category with a matching title.\n    final subquery = selectOnly(todos)\n      ..addColumns([todos.id, categories.id])\n      ..join([\n        innerJoin(\n            categories,\n            todos.title.like(\n                categories.description.concat(const Constant('%'))))\n      ])\n      ..where(todos.category.isNull());\n\n    final update = update(todos);\n    update.where((todo) => existsQuery(\n        subquery..where(todos.id.equalsExp(todo.id))));\n    update.write(TodosCompanion(category: Value(startId)));\n    batch.update(todos, update);\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using required named parameters in drift queries\nDESCRIPTION: An example of declaring a variable as required in a .drift query, which affects the generated Dart API when using named parameters.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselectWithRequired: SELECT * FROM entries\n WHERE title LIKE $title:TEXT REQUIRED;\n```\n\n----------------------------------------\n\nTITLE: Generating Drift Database Migrations\nDESCRIPTION: Command to generate schema migrations and step-by-step migration helper for drift database changes. Used when modifying database structure or schema.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart run drift_dev make-migrations\n```\n\n----------------------------------------\n\nTITLE: Querying Data Using Core API in Drift\nDESCRIPTION: This snippet shows how to query data using the Core API, which offers more flexibility for advanced database operations while maintaining type safety.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\n// load all users from the database\nfinal allUsers = await db.select(db.users).get();\n\n// optionally, we can specify where clauses or order by clauses\nfinal filtered = await db.select(db.users)..where((u) => u.id.equals(3));\n\n// iterating over allUsers gives us User objects\nfor (final User user in allUsers) {\n  print(user.username);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Modular Code Generation in build.yaml\nDESCRIPTION: YAML configuration to enable Drift's modular code generation by disabling the default builder and enabling the analyzer and modular builders with specific options.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/modular.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        enabled: false\n\n      drift_dev:analyzer:\n        enabled: true\n        options: &options\n          store_date_time_values_as_text: true\n          named_parameters: true\n          sql:\n            dialect: sqlite\n            options:\n              version: \"3.39\"\n              modules: [fts5]\n      drift_dev:modular:\n        enabled: true\n        options: *options\n```\n\n----------------------------------------\n\nTITLE: Watching All Carts with RxDart in Relational Model\nDESCRIPTION: Implements a method to watch all shopping carts and their items using RxDart's switchMap to transform a stream of carts into a stream of cart lists with their associated items.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n@override\nStream<List<CartWithItems>> watchAllCarts() {\n  final carts = select(shoppingCarts).watch();\n\n  return carts.switchMap((allCarts) {\n    if (allCarts.isEmpty) {\n      // No need to load anything else, there are no carts\n      return Stream.value(<CartWithItems>[]);\n    }\n\n    // Load entries for all carts\n    final entriesQuery = select(cartEntries).join([\n      innerJoin(buyableItems, cartEntries.product.equalsExp(buyableItems.id)),\n    ]);\n\n    // Convert entries into a CartWithItems for each cart\n    return entriesQuery.watch().map((entries) {\n      // We need to group all entries by the cart they belong to\n      final entriesByCart = <int, List<CartItem>>{};\n\n      for (final row in entries) {\n        final product = row.readTable(buyableItems);\n        final entry = row.readTable(cartEntries);\n\n        final buyable = BuyableItem(\n          id: product.id,\n          name: product.name,\n          image: product.image,\n          price: product.price,\n        );\n        final item = CartItem(item: buyable, amount: entry.amount);\n\n        entriesByCart.putIfAbsent(entry.cart, () => []).add(item);\n      }\n\n      // Now create the final CartWithItems objects\n      return [\n        for (final cart in allCarts)\n          CartWithItems(\n            id: cart.id,\n            createdAt: cart.createdAt,\n            items: entriesByCart[cart.id] ?? [],\n          )\n      ];\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Columns in Drift Queries\nDESCRIPTION: Demonstrates how to include custom expressions as columns in a SELECT query, including computed values such as LIKE operators and concatenated strings.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\n// calculates both the content length (for all rows), and whether the content matches\n// a filter (dynamic for each filter)\nFuture<List<ResultRow>> contentInfo(String filter) {\n  // We'll need to define what columns to read at this point. The first argument\n  // is a list of columns for which the runtime can determine the type. In this\n  // case, that's the content of each todo entry. The second argument contains\n  // expressions whose type can't be determined at runtime. For those expressions,\n  // we need to tell drift about the expected type.\n  final contentLength = todos.content.length.cast<int>();\n  final matches = todos.content.like('%$filter%').cast<bool>();\n  final query = select(\n    columns: [todos.content],\n    variables: {\n      // give it a friendly name for later. If you don't add a name, drift will\n      // generate one for you.\n      'length': contentLength,\n      'matches': matches,\n    },\n    from: todos,\n  );\n\n  // .then() will run for each row, a bit like .map but more type safe\n  return query.then((row) {\n      final content = row.read(todos.content);\n      final length = row.read<int>('length');\n      final rowMatches = row.read<bool>('matches');\n      return CustomResult(content, length, rowMatches);\n  }).get();\n}\n```\n\n----------------------------------------\n\nTITLE: Manager Query Filtering\nDESCRIPTION: Demonstrates filtering records using the manager interface with logical operators.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/manager.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nfinal completedTodos = await db.managers.todoItems\n    .filter((f) => f.isComplete(true))\n    .all();\n\nfinal emptyCategories = await db.managers.categories\n    .filter((f) => f.description.isEmpty)\n    .all();\n\nfinal complexFilter = await db.managers.todoItems\n    .filter((f) => (f.title.like('%drift%') & f.isComplete(false)) | f.id(1))\n    .all();\n```\n\n----------------------------------------\n\nTITLE: Creating Indexes in Drift Tables\nDESCRIPTION: This example shows how to create an index on a column in a Drift table. It creates an index on the 'name' column of the 'users' table to make queries based on user names more efficient.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\n@TableIndex(name: 'user_names', columns: [#name])\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n}\n```\n\n----------------------------------------\n\nTITLE: Date Arithmetic Operations\nDESCRIPTION: Shows how to perform date arithmetic with durations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\nfinal inOneWeek = todos.dueDate + const Duration(days: 7);\nfinal yesterday = currentDate - const Duration(days: 1);\n```\n\n----------------------------------------\n\nTITLE: Creating View with Custom Dataclass\nDESCRIPTION: Demonstrates how to create a view that uses an existing class using the WITH keyword.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nCREATE VIEW my_view WITH ExistingClass AS SELECT ...\n```\n\n----------------------------------------\n\nTITLE: Defining SELECT Statement in SQL for Drift\nDESCRIPTION: Shows how to define a SELECT statement in a drift file, which generates a method in the database class returning a Selectable.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/streams.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nallItemsAfter: SELECT * FROM todo_items WHERE created_at > :min;\n```\n\n----------------------------------------\n\nTITLE: Exporting Drift Schema as SQL Statements\nDESCRIPTION: Demonstrates the use of the 'schema export' command to generate a list of CREATE statements that define a drift database. It takes a path to a Dart source file as an argument and supports different SQL dialects.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Tools/index.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run drift_dev schema dump path/to/database.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom SQLite Library Path in Dart\nDESCRIPTION: This code demonstrates how to configure a custom SQLite library path for a drift database on Linux platforms. It uses the DynamicLibrary.open approach to load a custom SQLite library located next to the application executable before initializing drift.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/index.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'dart:ffi';\nimport 'dart:io';\n\nimport 'package:drift/native.dart';\nimport 'package:sqlite3/sqlite3.dart';\nimport 'package:sqlite3/open.dart';\n\nvoid main() {\n  final scriptDir = File(Platform.script.toFilePath()).parent;\n  final libraryNextToScript = File('${scriptDir.path}/sqlite3.so');\n  \n  // Override the library that sqlite3.dart will use\n  open.overrideFor(\n    OperatingSystem.linux, // Or OperatingSystem.android/windows/iOS/macOS\n    () => DynamicLibrary.open(libraryNextToScript.path),\n  );\n\n  // use drift normally after you called overrideFor\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Todo Items in Categories using GROUP BY in Drift\nDESCRIPTION: A query that counts the number of todo entries in each category by joining the categories table with the todos table, using GROUP BY and COUNT aggregation function with useColumns: false to optimize performance.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<CategoryWithCount>> countTodosInCategories() {\n  return (select(categories)\n        ..addColumns([todos.id.count()]))\n      .join(\n        [leftOuterJoin(todos, todos.category.equalsExp(categories.id),\n            useColumns: false)],\n      )\n      .groupBy([categories.id])\n      .map((row) {\n        return CategoryWithCount(\n          category: Category.fromData(row.readTable(categories)),\n          count: row.read(todos.id.count()),\n        );\n      })\n      .get();\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Record Type for Row Classes in Drift\nDESCRIPTION: This snippet shows how to specify an explicit record type to use as the row class representation for a database table in Drift.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n@UseRowClass.recordType((int, String, DateTime))\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  DateTimeColumn get birthDate => dateTime()();\n}\n```\n\n----------------------------------------\n\nTITLE: Date Modification Operations\nDESCRIPTION: Demonstrates complex date transformations using modify and modifyAll functions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nfinal toMonday = todos.dueDate.modify(const DateTimeModifier(\n  weekday: 1, // monday\n));\n```\n\n----------------------------------------\n\nTITLE: Creating Unique Key Combinations in Drift Tables\nDESCRIPTION: This snippet demonstrates how to create a unique key combination in a Drift table. It ensures that the same room can't be reserved twice on the same day.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nclass Reservations extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  IntColumn get roomId => integer()();\n  DateTimeColumn get day => dateTime()();\n\n  @override\n  List<Set<Column>> get uniqueKeys => [{roomId, day}];\n}\n```\n\n----------------------------------------\n\nTITLE: Data Class Import Configuration for Migration Tests\nDESCRIPTION: Shows how to import and alias generated schema versions for data integrity testing.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/tests.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nimport 'generated_migrations/schema_v1.dart' as v1;\nimport 'generated_migrations/schema_v2.dart' as v2;\n```\n\n----------------------------------------\n\nTITLE: Generated Dart Method for Custom SQL Query\nDESCRIPTION: Demonstrates the generated Dart method for a custom SQL query defined in a drift file. This method returns a Selectable that can be watched.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/streams.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nSelectable<TodoItem> allItemsAfter({required DateTime min}) {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Using CAST for Datetime in Drift Files\nDESCRIPTION: Shows how to use the CAST function to convert a value to a DATETIME type in drift files. This is now consistently interpreted across the package.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_dev/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nCAST (x AS DATETIME)\n```\n\n----------------------------------------\n\nTITLE: Data Integrity Verification Test\nDESCRIPTION: Example of testing data integrity during migrations by inserting test data and verifying it after migration.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/tests.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\ntest('upgrade from v1 to v2 preserves data', () async {\n  final state = await verifier.schemaAt(1);\n  final connection = state.newConnection();\n\n  // Insert data using the old schema\n  final oldTodo = v1.Todo(\n    id: 1,\n    title: 'test',\n    content: 'test body',\n  );\n  await state.database.execute(\n    'INSERT INTO todos (id, title, content) VALUES (?, ?, ?)',\n    [oldTodo.id, oldTodo.title, oldTodo.content],\n  );\n\n  final db = TodoDb(connection);\n  await verifier.migrateAndValidate(db, 2);\n\n  // Verify that the data is still there\n  final todo = await db.select(db.todos).getSingle();\n  expect(todo.id, oldTodo.id);\n  expect(todo.title, oldTodo.title);\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Buyable Items Table in Drift\nDESCRIPTION: Creates a table definition for products that can be purchased in the shop, including fields for product name, image and price.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nclass BuyableItems extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  BlobColumn get image => blob()();\n  RealColumn get price => real()();\n}\n```\n\n----------------------------------------\n\nTITLE: Native Runtime Schema Verification\nDESCRIPTION: Implementation of runtime schema verification for native platforms.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/tests.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> validateDatabaseAtRuntime() async {\n  final db = constructDb();\n  await validateDatabaseSchema(\n    db.executor,\n    schemaVersion: yourTargetVersion,\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Window Function Usage\nDESCRIPTION: Demonstrates using window functions for running totals and rankings.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nfinal sumOver = todos.someNumericColumn.sum().over(\n  partitionBy: [todos.category],\n  orderBy: [OrderingTerm.asc(todos.date)],\n);\n```\n\n----------------------------------------\n\nTITLE: Using Generated Drift Query Method\nDESCRIPTION: This code shows how to use a query method generated by Drift from a .drift file. It demonstrates type-safe parameter passing and result handling.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/migrating_to_drift.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<GetItemsWithHighValueResult>> getHighValueItems(int minimum) {\n  return getItemsWithHighValue(minValue: minimum).get();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting explicit variable types in drift queries\nDESCRIPTION: An example of explicitly specifying variable types in a .drift query, which is useful when the analyzer cannot automatically infer the type.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nbyNameAndRecent: SELECT * FROM entries\n WHERE title LIKE $title:TEXT -- explicitly set the type to TEXT\n   AND creation_date > $after:DATETIME;\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Version in Drift\nDESCRIPTION: Configuration example showing how to specify a particular SQLite version for static analysis during code generation. This allows drift to emit warnings when using features not supported by the specified version.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          sql:\n            dialect: sqlite\n            options:\n              version: \"3.34\"\n```\n\n----------------------------------------\n\nTITLE: Calculating Average Todo Item Length with Aggregate Functions in Drift\nDESCRIPTION: A query that calculates the average length of todo entries using the AVG() function. It demonstrates the use of selectOnly for optimization when only working with aggregate results rather than full row data.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nFuture<double> averageItemLength() {\n  final query = selectOnly(todos);\n  query.addColumns([todos.content.length.avg()]);\n\n  return query.map((row) => row.read(todos.content.length.avg())).getSingle();\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Algebra Operations\nDESCRIPTION: Demonstrates nesting boolean expressions using & and | operators and the not method.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nwhere(todos.id.equals(67) & todos.title.like('%important%') | todos.tag.equals('urgent').not())\n```\n\n----------------------------------------\n\nTITLE: Web Runtime Schema Verification\nDESCRIPTION: Implementation of runtime schema verification for web platforms.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/tests.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> validateDatabaseAtRuntime() async {\n  final db = constructDb();\n  await validateDatabaseSchema(\n    db.executor,\n    schemaVersion: yourTargetVersion,\n    validateWithReferenceSchema: const ValidateWithReferenceSchema(\n      name: 'validation_copy',\n      deleteAfterValidation: true,\n    ),\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Date Field Extraction\nDESCRIPTION: Examples of extracting individual fields from DateTime expressions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal monthOfEntry = todos.dueDate.month;\nfinal isAfterMarch = todos.dueDate.month.isBiggerThan(3);\n```\n\n----------------------------------------\n\nTITLE: Setting Up Conditional Imports for Drift Database\nDESCRIPTION: Uses conditional imports to select the appropriate constructDb function based on the platform.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\n// shared.dart\nexport 'unsupported.dart'\n  if (dart.library.ffi) 'native.dart'\n  if (dart.library.js_interop) 'web.dart';\n```\n\n----------------------------------------\n\nTITLE: Dynamic Query Filtering\nDESCRIPTION: Shows how to implement dynamic query filtering using Dart templates in Drift\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nStream<List<Todo>> watchInCategory(Category category) {\n  return filterTodos(todos.category.equals(category)).watch();\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Column Constraints in Drift\nDESCRIPTION: This example shows how to add a custom SQL constraint to a column in a Drift table. It adds a CHECK constraint to ensure the 'priority' column is between 1 and 5.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_9\n\nLANGUAGE: dart\nCODE:\n```\nclass Tasks extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text()();\n  IntColumn get priority => integer().customConstraint('CHECK(priority BETWEEN 1 AND 5)')();\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Stable Worker for Drift Database on Web\nDESCRIPTION: Shows how to create a stable worker entry point for Drift database on the web platform.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\n// web/drift_worker.dart\nimport 'package:drift/web.dart';\n\nvoid main() {\n  // The parameter to `workerMainForOpen` is optional. When not provided, drift\n  // opens databases as-is without additional setup.\n  workerMainForOpen();\n}\n```\n\n----------------------------------------\n\nTITLE: Coalesce Operations\nDESCRIPTION: Shows how to use coalesce for fallback values when expressions evaluate to null.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nselect(coalesce([todos.title, const Constant('Empty')]));\n```\n\n----------------------------------------\n\nTITLE: Custom Row Class Definition\nDESCRIPTION: Example of defining and using custom row classes in Drift\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_10\n\nLANGUAGE: dart\nCODE:\n```\nclass User {\n  final int id;\n  final String name;\n  final String profilePicture;\n\n  User({required this.id, required this.name, required this.profilePicture});\n}\n```\n\n----------------------------------------\n\nTITLE: Calling the Generic Update Method on a Specific Table\nDESCRIPTION: Example of how to call the generic updateTitleById method on the todos table inside a database or database accessor class.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/schema_inspection.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nFuture<void> updateTodoWithId(int id) async {\n  // This will work as long as todos has an int id column and a String title column\n  await todos.updateTitleById(id, 'New title');\n}\n```\n\n----------------------------------------\n\nTITLE: Generic Function to Find Entries by ID in Any Table\nDESCRIPTION: An extension method on ResultSetImplementation that allows finding an entry by ID in any table that has an integer 'id' column. This demonstrates how to use schema inspection to create generic database operations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/schema_inspection.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\nextension FindById<Table extends HasResultSet, Row> on ResultSetImplementation<Table, Row> {\n  Selectable<Row> findById(int id) {\n    final idColumn = columnsByName['id'];\n    if (idColumn is! GeneratedColumn<int, dynamic>) {\n      throw ArgumentError('id is not an int column on this table!');\n    }\n\n    // Start a select statement and filter for the id\n    return select().where((row) => idColumn.equals(id));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: User With Friends Class\nDESCRIPTION: Extended custom row class example showing relationships\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\nclass UserWithFriends {\n  final User user;\n  final List<User> friends;\n\n  UserWithFriends({required this.user, required this.friends});\n}\n```\n\n----------------------------------------\n\nTITLE: Null Check Operations\nDESCRIPTION: Demonstrates how to check for NULL values in SQL expressions.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nwhere(todos.title.isNull());\n```\n\n----------------------------------------\n\nTITLE: Customizing Table Names in Drift\nDESCRIPTION: This snippet demonstrates how to customize the SQL name of a table in Drift by overriding the tableName getter.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass TodoListItems extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get title => text()();\n\n  @override\n  String get tableName => 'todo_items';\n}\n```\n\n----------------------------------------\n\nTITLE: Constraining Text Length in Drift Columns\nDESCRIPTION: This snippet demonstrates how to set minimum and maximum length constraints on a text column in Drift. It ensures that the 'name' column is not empty and less than 50 characters long.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get name => text().withLength(min: 1, max: 50)();\n}\n```\n\n----------------------------------------\n\nTITLE: Working with DateTime Columns in PostgreSQL\nDESCRIPTION: Example demonstrating how to use PostgreSQL-specific date and datetime types instead of SQLite's datetime() columns.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/postgres.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nclass Events extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  \n  // Instead of dateTime(), which is sqlite-specific\n  Column<DateTime> get timestamp => customType(PgTypes.timestamptz)();\n  Column<DateTime> get date => customType(PgTypes.date)();\n}\n```\n\n----------------------------------------\n\nTITLE: Row Counting Operations\nDESCRIPTION: Demonstrates counting rows and grouping by categories.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_12\n\nLANGUAGE: dart\nCODE:\n```\nselect(categories).addColumns([todos.id.count()])\n  .join([\n    leftOuterJoin(todos, todos.category.equalsExp(categories.id))\n  ])\n  .groupBy([categories.id]);\n```\n\n----------------------------------------\n\nTITLE: Manually Marking a Table as Updated in Dart\nDESCRIPTION: Demonstrates how to manually mark a table as updated in Drift, which can be useful when changes are made outside of Drift's APIs.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/streams.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\ndb.markTablesUpdated({todos});\n```\n\n----------------------------------------\n\nTITLE: Implementing Post-Migration Data Population\nDESCRIPTION: Example of using beforeOpen callback to populate initial data after database creation\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/index.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nbeforeOpen: (details) async {\n    if (details.wasCreated) {\n      final workId = await into(categories).insert(Category(description: 'Work'));\n\n      await into(todos).insert(TodoEntry(\n            content: 'A first todo entry',\n            category: null,\n            targetDate: DateTime.now(),\n      ));\n\n      await into(todos).insert(\n            TodoEntry(\n              content: 'Rework persistence code',\n              category: workId,\n              targetDate: DateTime.now().add(const Duration(days: 4)),\n      ));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Bitwise Operations\nDESCRIPTION: Shows how to perform bitwise operations on integer values using ~, bitwiseAnd and bitwiseOr.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal bits = todos.id.bitwiseAnd(Variable(15));\nfinal moreBits = ~todos.id;\nfinal evenMore = todos.id.bitwiseOr(Variable(15));\n```\n\n----------------------------------------\n\nTITLE: Migrating Custom WasmDatabase to WasmDatabase.open in Dart\nDESCRIPTION: This snippet demonstrates how to migrate from a custom WasmDatabase setup to the new WasmDatabase.open API. It shows the old approach of manually loading WASM and creating a CommonSqlite3 instance, compared to the new simplified approach.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_11\n\nLANGUAGE: dart\nCODE:\n```\n// Old approach:\nfinal wasm = await WasmModule.load('sqlite3.wasm');\nfinal sqlite3 = await CommonSqlite3.loadFromModule(wasm);\nfinal db = WasmDatabase(sqlite3: sqlite3, path: 'app.db');\n\n// New approach:\nfinal db = await WasmDatabase.open(path: 'app.db');\n```\n\n----------------------------------------\n\nTITLE: Joining Calls with Contacts using JSON_EACH in Drift\nDESCRIPTION: A complex query that matches call records with contacts by using JSON_EACH to expand the phone numbers array from each contact's JSON data, enabling a join between calls and the appropriate contact.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nFuture<List<CallWithContact>> getCallsWithContacts() {\n  // This query will find the contact for each call, if there's any with a\n  // matching phone number.\n\n  // We can't join calls and contacts directly since the phone numbers are stored\n  // in a JSON array. json_each can be used to expand the array into a table where\n  // each array element becomes a row.\n  final expandedNumbers = jsonEach(contacts.contact.dartCast<String>(),\n      '$.phoneNumbers')\n      .asExpression()\n      .as('expanded');\n\n  return (select(calls)\n        ..addColumns([contacts.contact]))\n      .join([\n        leftOuterJoin(\n          expandedNumbers,\n          calls.phoneNumber.equals(expandedNumbers.ref('value').dartCast<String>()),\n          useColumns: false,\n        ),\n        // The previous join used the expanded array. Now, find the contact that this\n        // array belongs to\n        leftOuterJoin(contacts,\n            contacts.id.equalsExp(expandedNumbers.ref('id').dartCast<int>()))\n      ])\n      .map(\n        (row) => CallWithContact(\n          call: Call.fromData(row.readTable(calls)),\n          contact: row.read(contacts.contact),\n        ),\n      )\n      .get();\n}\n```\n\n----------------------------------------\n\nTITLE: Type-Specific Filtering Operations\nDESCRIPTION: Shows various type-specific filtering operations available in the manager interface.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/manager.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal todos = await db.managers.todoItems\n    .filter((f) => f.id.between(1, 10))\n    .all();\n\nfinal categories = await db.managers.categories\n    .filter((f) => f.description.like('%important%'))\n    .all();\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Object Class with JSON Serialization in Dart\nDESCRIPTION: This snippet shows how to define a custom Dart class (Preferences) with JSON serialization support using the json_serializable package. It includes annotations for JSON serialization and methods for conversion.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/type_converters.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\n@JsonSerializable()\nclass Preferences {\n  final bool receiveEmails;\n  final bool darkTheme;\n\n  const Preferences({this.receiveEmails = false, this.darkTheme = true});\n\n  factory Preferences.fromJson(Map<String, Object?> json) =>\n      _$PreferencesFromJson(json);\n  Map<String, Object?> toJson() => _$PreferencesToJson(this);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift Generation Options using build.yaml\nDESCRIPTION: Example of a basic build.yaml configuration file that sets the store_date_time_values_as_text option to true. This configuration file is placed at the root of your project to customize how drift generates code.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# build.yaml. This file is quite powerful, see https://pub.dev/packages/build_config\n\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          store_date_time_values_as_text: true\n```\n\n----------------------------------------\n\nTITLE: Writing Queries Using Drift's Dart API\nDESCRIPTION: This snippet demonstrates how to write a SELECT query using Drift's Dart-based query builder API. It shows filtering and converting the result to an auto-updating stream.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/migrating_to_drift.md#2025-04-17_snippet_6\n\nLANGUAGE: dart\nCODE:\n```\nStream<List<TestTableData>> watchHighValueItems(int minimum) {\n  return (select(test)..where((t) => t.value.isBiggerThan(minimum)))\n      .watch();\n}\n```\n\n----------------------------------------\n\nTITLE: Empty Categories Check\nDESCRIPTION: Shows how to find empty categories using exists queries.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_17\n\nLANGUAGE: dart\nCODE:\n```\nfinal todosInCategory = select(todos)\n  ..where((todo) => todo.category.equalsExp(categories.id));\n\nfinal emptyCategories = select(categories)\n  ..where((category) => notExistsQuery(todosInCategory));\n```\n\n----------------------------------------\n\nTITLE: Initializing DriftIsolate with Platform-Specific Path in Dart\nDESCRIPTION: This snippet demonstrates a workaround for older Flutter versions where platform channels weren't available on background isolates. It shows how to initialize a DriftIsolate with a platform-specific database path.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/isolates.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nFuture<DriftIsolate> createDriftIsolate() async {\n  final dir = await getApplicationDocumentsDirectory();\n  final path = p.join(dir.path, 'db.sqlite');\n  final receivePort = ReceivePort();\n\n  await Isolate.spawn(\n    _startBackground,\n    _IsolateStartRequest(receivePort.sendPort, path),\n  );\n\n  return await receivePort.first as DriftIsolate;\n}\n\nvoid _startBackground(_IsolateStartRequest request) {\n  final executor = NativeDatabase(File(request.targetPath));\n  final driftIsolate = DriftIsolate.inCurrent(\n    () => DatabaseConnection(executor),\n  );\n  request.sendDriftIsolate.send(driftIsolate);\n}\n\nclass _IsolateStartRequest {\n  final SendPort sendDriftIsolate;\n  final String targetPath;\n\n  _IsolateStartRequest(this.sendDriftIsolate, this.targetPath);\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Drift Dependencies in pubspec.yaml\nDESCRIPTION: YAML configuration showing how to include drift dependencies in your project's pubspec.yaml file.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/upgrading.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: ^{{ versions.drift }}\ndev_dependencies:\n  drift_dev: ^{{ versions.drift_dev }}\n```\n\n----------------------------------------\n\nTITLE: Subquery Operations\nDESCRIPTION: Examples of using subqueries in expressions for filtering and checking existence.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nfinal groupId = selectOnly(categories)\n  ..addColumns([categories.id])\n  ..where(categories.description.equals('shopping'));\n\nfinal itemsInCategory = select(todos)\n  ..where((t) => t.category.equals(subqueryExpression(groupId)));\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift Plugin in analysis_options.yaml\nDESCRIPTION: Configuration for enabling the drift analyzer plugin in your Dart project. Add this to your analysis_options.yaml file to tell the Dart analysis server to run the drift plugin.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/sql_ide.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  plugins:\n    - drift\n```\n\n----------------------------------------\n\nTITLE: Running Drift Migration Generator Command\nDESCRIPTION: Command line instruction for generating schema migrations using drift_dev tool\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart run drift_dev make-migrations\n```\n\n----------------------------------------\n\nTITLE: Customizing Result Class Names in Drift SQL\nDESCRIPTION: Shows how to assign a custom name to a query result class by adding the desired class name after 'AS' in the query declaration. This allows multiple queries with identical result sets to share a single result class.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nroutesWithNestedPoints AS FullRoute: SELECT r.id, -- ...\n```\n\n----------------------------------------\n\nTITLE: Using Named Constructors with Custom Dataclass\nDESCRIPTION: Shows how to target a specific named constructor when using custom dataclasses.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users(\n  id INTEGER NOT NULL PRIMARY KEY,\n  name TEXT NOT NULL,\n  birth_date DATETIME NOT NULL\n) WITH User.myNamedConstructor;\n```\n\n----------------------------------------\n\nTITLE: Using Dialect-Aware DateTime Columns for Cross-Database Compatibility\nDESCRIPTION: Example showing how to create dialect-aware datetime columns that work with both SQLite and PostgreSQL.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/postgres.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nclass Events extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  \n  // Will use a TIMESTAMP WITH TIME ZONE in postgres, datetime in sqlite\n  Column<DateTime> get createdAt => customType(\n        DialectSpecificType(\n          sqliteType: drift.DateTimeType(),\n          postgresType: PgTypes.timestamptz,\n        ),\n      )();\n\n  // Similar to the above, but using a nullable column\n  Column<DateTime?> get modifiedAt => customType(\n        DialectSpecificType(\n          sqliteType: drift.DateTimeType(),\n          postgresType: PgTypes.timestamptz,\n        ),\n      ).nullable()();\n}\n```\n\n----------------------------------------\n\nTITLE: Installing drift packages with Dart CLI for Flutter\nDESCRIPTION: Command-line instruction to add drift and related packages to a Flutter project using the Dart package manager CLI.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add drift drift_flutter path_provider dev:drift_dev dev:build_runner\n```\n\n----------------------------------------\n\nTITLE: Defining Text Enum Column in Drift File\nDESCRIPTION: Demonstrates how to define a text enum column in a .drift file using the ENUMNAME keyword. This corresponds to the textEnum type in Dart.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_dev/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nENUMNAME\n```\n\n----------------------------------------\n\nTITLE: Creating a Phone Calls Table in Drift\nDESCRIPTION: Defines a table to store phone call logs with timestamp and phone number information. This table will later be joined with the contacts table to match calls to contacts.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass Calls extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  DateTimeColumn get time =>\n      dateTime().withDefault(currentDateAndTime).map(const UtcDateTimeConverter())();\n  TextColumn get phoneNumber => text()();\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Pragma Statements in Post-Migration\nDESCRIPTION: Example of executing pragma statements in the beforeOpen callback after database creation\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/index.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nbeforeOpen: (details) async {\n  if (details.wasCreated) {\n    // ...\n  }\n  await customStatement('PRAGMA foreign_keys = ON');\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing SQL Statement with SqlEngine in Dart\nDESCRIPTION: Demonstrates how to use the SqlEngine class to parse an SQL SELECT statement. The parsed result contains the abstract syntax tree representation of the query.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/README.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nimport 'package:sqlparser/sqlparser.dart';\n\nfinal engine = SqlEngine();\nfinal result = engine.parse('''\nSELECT f.* FROM frameworks f\n  INNER JOIN uses_language ul ON ul.framework = f.id\n  INNER JOIN languages l ON l.id = ul.language\nWHERE l.name = 'Dart'\nORDER BY f.name ASC, f.popularity DESC\nLIMIT 5 OFFSET 5 * 3\n  ''');\n// result.rootNode contains the select statement in tree form\n```\n\n----------------------------------------\n\nTITLE: Dart Interop Insert Example\nDESCRIPTION: Demonstrates how to use Dart interop with Drift files for database operations\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nfilterTodos($predicate = TRUE):\n  SELECT * FROM todos WHERE $predicate\n```\n\n----------------------------------------\n\nTITLE: Setting up dependencies for drift with PostgreSQL\nDESCRIPTION: Add the necessary drift and PostgreSQL-related dependencies to your pubspec.yaml file.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/postgres.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: ^{{ versions.drift }}\n  drift_postgres: ^{{ versions.drift_postgres }}\n\ndev_dependencies:\n  drift_dev: ^{{ versions.drift_dev }}\n  build_runner: ^{{ versions.build_runner }}\n```\n\n----------------------------------------\n\nTITLE: Adding drift_postgres Dependency in Pubspec.yaml\nDESCRIPTION: This snippet shows how to add the drift and drift_postgres dependencies to the pubspec.yaml file. It specifies the latest version for drift and version 0.1.0 for drift_postgres.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_postgres/README.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: \"$latest version\"\n  drift_postgres: ^0.1.0\n```\n\n----------------------------------------\n\nTITLE: Defining an Existing JSON Structure for Contact Storage in Drift\nDESCRIPTION: Demonstrates how to define a Dart class that will be stored as JSON in a Drift database. This example shows a Contact class with name and phone numbers that will be serialized to JSON format.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/select.md#2025-04-17_snippet_14\n\nLANGUAGE: dart\nCODE:\n```\nclass Contact {\n  final String name;\n  final List<String> phoneNumbers;\n\n  Contact({required this.name, required this.phoneNumbers});\n\n  factory Contact.fromJson(Map<String, Object?> json) {\n    return Contact(\n      name: json['name'] as String,\n      phoneNumbers: (json['phoneNumbers'] as List).cast<String>(),\n    );\n  }\n\n  Map<String, Object?> toJson() {\n    return {\n      'name': name,\n      'phoneNumbers': phoneNumbers,\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Manager References and Joins\nDESCRIPTION: Demonstrates handling table references and joins using the manager interface.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/manager.md#2025-04-17_snippet_4\n\nLANGUAGE: dart\nCODE:\n```\nfinal todos = await db.managers.todoItems.withReferences((todo) => todo.category).all();\n\nfor (final todo in todos) {\n  print('Todo: ${todo.entity.title}');\n  print('Category: ${todo.refs.category?.description}');\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Moor Generator for Migration\nDESCRIPTION: YAML configuration for adding moor_generator as a development dependency to prepare for migration to drift.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/upgrading.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ndev_dependencies:\n  moor_generator: ^4.6.0\n```\n\n----------------------------------------\n\nTITLE: Using nullable variables in drift queries\nDESCRIPTION: This code demonstrates how to declare a nullable variable in a .drift query using the NULL keyword after the type specification.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/drift_files.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselectWithNullableVar: SELECT * FROM entries\n WHERE category = $category:INTEGER NULL;\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift Database Locations in build.yaml\nDESCRIPTION: Configuration for specifying database file locations and optional test/schema directories in build.yaml for the make-migrations command\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          databases:\n            # Required: A name for the database and it's path\n            my_database: lib/database.dart\n\n            # Optional: Add more databases\n            another_db: lib/database2.dart\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift Builder Options for PostgreSQL in build.yaml\nDESCRIPTION: This YAML configuration snippet shows how to set up builder options in build.yaml to make Drift generate PostgreSQL-specific code. It includes options for both SQLite and PostgreSQL dialects.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_postgres/README.md#2025-04-17_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# build.yaml\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          sql:\n            dialects:\n              - sqlite # remove this line if you only need postgres\n              - postgres\n```\n\n----------------------------------------\n\nTITLE: Adding Drift Dependencies to pubspec.yaml\nDESCRIPTION: This snippet shows how to add the necessary Drift dependencies to a Dart/Flutter project's pubspec.yaml file. It includes both the main drift package and development dependencies for code generation.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/migrating_to_drift.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependencies:\n  drift: ^{{ versions.drift }}\n\ndev_dependencies:\n  drift_dev: ^{{ versions.drift_dev }}\n  build_runner: ^{{ versions.build_runner }}\n```\n\n----------------------------------------\n\nTITLE: Analyzing Drift Files with CLI\nDESCRIPTION: Demonstrates how to use the 'analyze' command to run drift's analyzer and linter across all .drift files in a project. It shows the command syntax and example output, including warnings and error reporting.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Tools/index.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run drift_dev analyze\n\nWARNING: For file test/data/tables/tables.drift:\nWARNING: line 38, column 28: This table has columns without default values, so defaults can't be used for insert.\n   ╷\n38 │ defaultConfig: INSERT INTO config DEFAULT VALUES;\n   │                            ^^^^^^\n   ╵\nINFO: Found 1 errors or problems\n```\n\n----------------------------------------\n\nTITLE: Manager Reference Prefetching\nDESCRIPTION: Shows how to efficiently prefetch referenced data using the manager interface.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/manager.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\nfinal todos = await db.managers.todoItems\n    .withReferences((todo) => todo.category.prefetch())\n    .all();\n\nfor (final todo in todos) {\n  final category = db.managers.categories.prefetchedData[todo.entity.category];\n  print('Todo: ${todo.entity.title}');\n  print('Category: ${category?.description}');\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Assets for Database\nDESCRIPTION: Flutter pubspec configuration to include a SQLite database file as an asset.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/existing_databases.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nflutter:\n  assets:\n    - assets/my_database.db\n```\n\n----------------------------------------\n\nTITLE: Installing drift packages with Dart CLI for pure Dart\nDESCRIPTION: Command-line instruction to add drift and sqlite3 packages to a Dart project using the Dart package manager CLI.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/setup.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndart pub add drift sqlite3 dev:drift_dev dev:build_runner\n```\n\n----------------------------------------\n\nTITLE: Defining Custom SQL Functions for Drift Analyzer\nDESCRIPTION: YAML configuration that lets you declare custom SQL functions to be recognized by Drift's analyzer. This example defines a custom function called 'my_function' that takes a text and nullable integer parameter and returns a boolean value.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/index.md#2025-04-17_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          sql:\n            dialect: sqlite\n            options:\n              known_functions:\n                my_function: \"boolean (text, int null)\"\n```\n\n----------------------------------------\n\nTITLE: Configuring dependency_overrides for Drift Development Version in YAML\nDESCRIPTION: This YAML configuration demonstrates how to override the drift packages to use the development version directly from GitHub. It includes overrides for the main drift package, drift_dev for code generation, and the sqlparser dependency, all pointing to specific paths in the repository.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Internals/index.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ndependency_overrides:\n  drift:\n    git:\n      url: https://github.com/simolus3/drift.git\n      ref: develop\n      path: drift\n  drift_dev:\n    git:\n      url: https://github.com/simolus3/drift.git\n      ref: develop\n      path: drift_dev\n  sqlparser:\n    git:\n      url: https://github.com/simolus3/drift.git\n      ref: develop\n      path: sqlparser\n```\n\n----------------------------------------\n\nTITLE: Defining Table Columns in Drift\nDESCRIPTION: Shows different syntax options for defining columns in a Drift table class, comparing the older getter syntax with the newer late final field syntax.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_dev/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: dart\nCODE:\n```\nclass MyTable extends Table {\n  // Before:\n  IntColumn get id => integer().autoIncrement()();\n\n  // After:\n  late final id = integer().nullable()();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON-based Shopping Cart Tables in Drift\nDESCRIPTION: Creates a table structure for the JSON approach where cart items are stored directly in the shopping cart table as a JSON array of items.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nclass ShoppingCarts extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  DateTimeColumn get createdAt => dateTime()();\n  TextColumn get itemsJson => text().nullable()();\n}\n\n@JsonSerializable()\nclass JsonCartItem {\n  final int product;\n  final int amount;\n\n  JsonCartItem({required this.product, required this.amount});\n\n  factory JsonCartItem.fromJson(Map<String, dynamic> json) =>\n      _$JsonCartItemFromJson(json);\n  Map<String, dynamic> toJson() => _$JsonCartItemToJson(this);\n}\n\nclass ShoppingCartsWithItems extends View {\n  ShoppingCarts get carts => attachedDatabase.shoppingCarts;\n  BuyableItems get products => attachedDatabase.buyableItems;\n\n  Expression<int> get cartId => carts.id;\n  DateTimeColumn get createdAt => carts.createdAt;\n\n  Expression<String> get jsonArrayElement => FunctionCallExpression(\n      'json_extract', [carts.itemsJson, Variable.withString('value')]);\n\n  Expression<int> get productId =>\n      jsonArrayElement.dartCast<String>().jsonExtract<int>('product');\n  Expression<int> get amount =>\n      jsonArrayElement.dartCast<String>().jsonExtract<int>('amount');\n\n  @override\n  Query as() {\n    return select([\n      cartId,\n      createdAt,\n      products.id,\n      products.name,\n      products.image,\n      products.price,\n      amount,\n    ]).from(carts).join([\n      innerJoinTable(\n          products, products.id.equalsExp(productId),\n          useColumns: true),\n    ]);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Database Class Initialization\nDESCRIPTION: Example of initializing a Drift database class using the connection method.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/existing_databases.md#2025-04-17_snippet_2\n\nLANGUAGE: dart\nCODE:\n```\n@DriftDatabase(tables: [Todos, Categories])\nclass MyDatabase extends _$MyDatabase {\n  MyDatabase() : super(_openConnection());\n\n  // ...\n```\n\n----------------------------------------\n\nTITLE: Defining Text Enum Column in Dart\nDESCRIPTION: Shows how to define a text enum column in Dart using the new 'textEnum' type. This allows storing enum values as text using Enum.name.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_dev/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: Dart\nCODE:\n```\ntextEnum\n```\n\n----------------------------------------\n\nTITLE: Dumping Drift Schema for Version Control\nDESCRIPTION: Explains how to use the 'schema dump' command to export a database schema to JSON. This command requires a Dart file containing a class annotated with @DriftDatabase and a target output file path.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Tools/index.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run drift_dev schema dump path/to/database.dart schema.json\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code settings.json for Drift Analysis\nDESCRIPTION: Configuration to tell VS Code's Dart extension to analyze .drift files. This setting should be added to your VS Code settings.json file.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/sql_ide.md#2025-04-17_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"dart.additionalAnalyzerFileExtensions\": [\"drift\"]\n```\n\n----------------------------------------\n\nTITLE: Using CAST for Text in Drift Files\nDESCRIPTION: Demonstrates using the CAST function to convert a value to a TEXT type in drift files. This is now consistently interpreted across the package.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_dev/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: SQL\nCODE:\n```\nCAST(x AS TEXT)\n```\n\n----------------------------------------\n\nTITLE: Setting up MariaDB Container for Testing\nDESCRIPTION: Docker command to create a MariaDB container for testing the drift_mariadb package. It exposes port 3306 and sets up root password and database name.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_mariadb/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 3306:3306 -e MARIADB_ROOT_PASSWORD=password -e MARIADB_DATABASE=database mariadb:latest\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL Docker Container for Testing\nDESCRIPTION: This command runs a PostgreSQL Docker container for testing purposes. It sets up the container with specified port, username, and password.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_postgres/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres postgres\n```\n\n----------------------------------------\n\nTITLE: Using LIST() Function in Queries\nDESCRIPTION: Demonstrates the use of the LIST() function in queries. The package now supports two different queries using LIST() columns having the same result class name.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_dev/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: SQL\nCODE:\n```\nLIST()\n```\n\n----------------------------------------\n\nTITLE: Customizing Dataclass Name with @DataClassName in Drift\nDESCRIPTION: This example demonstrates how to customize the generated dataclass name using the @DataClassName annotation instead of relying on the default naming convention.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n@DataClassName('Account')\nclass Users extends Table {\n  IntColumn get id => integer().autoIncrement()();\n  TextColumn get username => text()();\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Class Implementation Example\nDESCRIPTION: Shows implementation of custom classes for handling nested query results with employee data.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/rows.md#2025-04-17_snippet_16\n\nLANGUAGE: dart\nCODE:\n```\nclass IdAndName {\n  final int id;\n  final String name;\n\n  IdAndName(this.id, this.name);\n}\n\nclass EmployeeWithStaff {\n  final Employee self;\n  final String supervisor;\n  final List<IdAndName> staff;\n\n  EmployeeWithStaff(this.self, this.supervisor, this.staff);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift in Modular Mode with build.yaml\nDESCRIPTION: A build.yaml configuration for enabling drift's modular mode, which creates independent libraries that can be used by other builders. This configuration disables the default drift builder and instead uses the analyzer and modular builders in a separate target.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/in_other_builders.md#2025-04-17_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  drift:\n    auto_apply_builders: false\n    builders:\n      drift_dev:analyzer:\n        enabled: true\n        options: &options\n          # Drift build options, as per https://drift.simonbinder.eu/docs/advanced-features/builder_options/\n          store_date_time_values_as_text: true\n          named_parameters: true\n          sql:\n            dialect: sqlite\n            options:\n              version: \"3.39\"\n              modules: [fts5]\n      drift_dev:modular:\n        enabled: true\n        # We use yaml anchors to give the two builders the same options\n        options: *options\n\n  $default:\n    dependencies:\n      # run drift's builder first\n      - \":drift\"\n    builders:\n      # This builder is enabled by default, but we're using the modular builder in\n      # its own target instead.\n      drift_dev:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Shopping Cart in JSON Model\nDESCRIPTION: Creates a new empty shopping cart in the JSON model by inserting a record into the ShoppingCarts table with a null itemsJson field.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Examples/relationships.md#2025-04-17_snippet_8\n\nLANGUAGE: dart\nCODE:\n```\n@override\nFuture<int> createEmptyCart(DateTime createdAt) {\n  return into(shoppingCarts)\n      .insert(ShoppingCartsCompanion.insert(createdAt: createdAt));\n}\n```\n\n----------------------------------------\n\nTITLE: Compiling and Copying Web Worker JavaScript in Shell\nDESCRIPTION: These shell commands demonstrate how to compile Dart web worker code to JavaScript using build_runner and copy the resulting files to the web directory for both debug and release modes.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\n#Debug mode\ndart run build_runner build --delete-conflicting-outputs -o web:build/web/\ncp -f build/web/worker.dart.js web/worker.dart.js\n```\n\nLANGUAGE: shell\nCODE:\n```\n#Release mode\ndart run build_runner build --release --delete-conflicting-outputs -o web:build/web/\ncp -f build/web/worker.dart.js web/worker.dart.min.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Test and Schema Directories in build.yaml\nDESCRIPTION: Additional configuration options for specifying test and schema file directories in build.yaml\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Migrations/index.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          # The directory where the test files are stored: \n          test_dir: test/drift/ # (default)\n\n          # The directory where the schema files are stored:\n          schema_dir: drift_schemas/  # (default)\n```\n\n----------------------------------------\n\nTITLE: Configuring DateTime Storage Format in Drift build.yaml\nDESCRIPTION: YAML configuration to set the DateTime storage format in Drift. The store_date_time_values_as_text option determines whether DateTime values are stored as Unix timestamps (false) or ISO-8601 strings (true).\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/tables.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      drift_dev:\n        options:\n          store_date_time_values_as_text: false # (default)\n          # To use ISO 8601 strings\n          # store_date_time_values_as_text: true\n```\n\n----------------------------------------\n\nTITLE: Project Structure Overview - Dart Package Organization\nDESCRIPTION: Lists and describes the main packages/modules that make up the Drift project, including the core drift package, Flutter implementation, development tools, and SQL parser.\nSOURCE: https://github.com/simolus3/drift/blob/develop/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n- `drift/`: Contains common APIs that will run on all platforms.\n  - `backends`: Common helper classes to make implementing backends easier.\n  - `web.dart`: Experimental web implementation, built with `sql.js`.\n  - `native.dart`: FFI-based implementation around the `sqlite3` package.\n- `moor_flutter/`: Contains a Flutter implementation for the database.\n- `drift_dev/`: Creates table, database and dao classes.\n- `sqlparser/`: Contains an SQL parser and analyzer.\n```\n\n----------------------------------------\n\nTITLE: Using MAPPED BY in Queries or Views\nDESCRIPTION: Shows how to use the MAPPED BY clause for individual columns in queries or in views defined with SQL. This feature is now supported in the package.\nSOURCE: https://github.com/simolus3/drift/blob/develop/drift_dev/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: SQL\nCODE:\n```\nMAPPED BY\n```\n\n----------------------------------------\n\nTITLE: Configuring Drift with not_shared Builder\nDESCRIPTION: A build.yaml configuration for using drift's not_shared builder, which is a simpler alternative to modular mode. This configuration generates a separate .drift.dart part file instead of using the shared .g.dart file, requiring fewer code changes in your project.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/in_other_builders.md#2025-04-17_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  drift:\n    auto_apply_builders: false\n    builders:\n      drift_dev:analyzer:\n        enabled: true\n        options: &options\n          has_separate_analyzer: true # always enable this option when using `not_shared`\n          # remaining options...\n      drift_dev:not_shared:\n        enabled: true\n        # We use yaml anchors to give the two builders the same options\n        options: *options\n\n  $default:\n    dependencies:\n      # run drift's builder first\n      - \":drift\"\n    builders:\n      # This builder is enabled by default, but we're using the modular builder in\n      # its own target instead.\n      drift_dev:\n        enabled: false\n```\n\n----------------------------------------\n\nTITLE: Running Drift DevTools Extension in Chrome\nDESCRIPTION: Command to launch the Drift DevTools extension in standalone mode using Chrome with simulated environment.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_devtools_extension/README.md#2025-04-17_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nflutter run -d chrome --dart-define=use_simulated_environment=true\n```\n\n----------------------------------------\n\nTITLE: Running Example App in Debug Mode\nDESCRIPTION: Commands to navigate to the example app directory and launch it in debug mode for testing the DevTools extension.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_devtools_extension/README.md#2025-04-17_snippet_1\n\nLANGUAGE: console\nCODE:\n```\ncd ../../examples/app/\nflutter run --debug\n```\n\n----------------------------------------\n\nTITLE: Initializing Existing Database in Drift for Web\nDESCRIPTION: Demonstrates how to use an existing SQLite database file when initializing a WasmDatabase on the web.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_7\n\nLANGUAGE: dart\nCODE:\n```\nfinal result = await WasmDatabase.open(\n  databaseName: 'my_app',\n  sqlite3Uri: Uri.parse('sqlite3.wasm'),\n  driftWorkerUri: Uri.parse('drift_worker.dart.js'),\n  initializeDatabase: () async {\n    final httpClient = HttpClient();\n    final request = await httpClient.getUrl(Uri.parse('init.db'));\n    final response = await request.close();\n    return response.expand((e) => e).toList();\n  },\n);\n```\n\n----------------------------------------\n\nTITLE: Example SQL Table and Query Definition\nDESCRIPTION: Sample SQL code showing table creation and query definition in a Drift file, demonstrating how queries are organized in the modular generation approach.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/generation_options/modular.md#2025-04-17_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nCREATE TABLE users (\n  id INTEGER NOT NULL,\n  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,\n  name TEXT NOT NULL,\n  is_admin BOOLEAN NOT NULL DEFAULT FALSE\n);\n\nfindUsers($predicate = TRUE): SELECT * FROM users WHERE $predicate;\n```\n\n----------------------------------------\n\nTITLE: Identifying Drift Databases and DAOs\nDESCRIPTION: Shows how to use the 'identify-databases' command to locate all databases or DAOs defined in a project. This command helps verify that drift's analyzer is working correctly by scanning the project files.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Tools/index.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ dart run drift_dev identify-databases\n\nStarting to scan in /tmp/example/ ...\nINFO: example/example.dart has drift databases or daos: Database\nINFO: lib/src/data/database.dart has drift databases or daos: AppDatabase\nINFO: test/fake_db.dart has drift databases or daos: TodoDb, SomeDao\n```\n\n----------------------------------------\n\nTITLE: Implementing Unsupported Platform Stub for Drift Database\nDESCRIPTION: Provides a stub implementation for unsupported platforms, throwing an UnimplementedError.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_5\n\nLANGUAGE: dart\nCODE:\n```\n// unsupported.dart\nSharedDatabase constructDb() => throw UnimplementedError();\n```\n\n----------------------------------------\n\nTITLE: IDE Debug Service Output Example\nDESCRIPTION: Example of the debug service connection information when running the app from an IDE, showing WebSocket URLs that need to be converted to HTTP format.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_devtools_extension/README.md#2025-04-17_snippet_3\n\nLANGUAGE: console\nCODE:\n```\nConnecting to VM Service at ws://127.0.0.1:33333/7j9YZqoiWe8=/ws\n[...]\nThis app is linked to the debug service: ws://127.0.0.1:33333/7j9YZqoiWe8=/ws\n[...]\nDebug service listening on ws://127.0.0.1:33333/7j9YZqoiWe8=/ws\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.8.0 Changes in Markdown\nDESCRIPTION: Lists changes in version 0.8.0, including constructor modifications, type changes, and new default behaviors.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.8.0\n\n- Remove `SqlEngine.withOptions` constructor - the default constructor now takes options\n- Changed `SelectStatement.from` from `List<Queryable>` to `Queryable?`. Selecting from multiple tables with a comma\n  will now be parsed as a `JoinClause`.\n- Changed `SelectStatementAsSource.statement` from `SelectStatement` to `BaseSelectStatement` and allow compound select\n  statements to appear in a `FROM` clause\n- Support the `VALUES` clause as select statement\n- The new type inference engine is now enabled by default and the `enableExperimentalTypeInference` option has been\n  removed. To continue using the old engine, the `useLegacyTypeInference` flag can be used.\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres Database Server with Docker\nDESCRIPTION: This command starts a Postgres database server using Docker. It exposes port 5432 and sets the username and password to 'postgres'.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/multi_package/README.md#2025-04-17_snippet_0\n\nLANGUAGE: Bash\nCODE:\n```\ndocker run -p 5432:5432 -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres postgres\n```\n\n----------------------------------------\n\nTITLE: Running Automatic Tests for Drift Native Package in Dart\nDESCRIPTION: Command to run the integration tests automatically using the Dart test runner. This method manages the browser driver for you.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/web_wasm/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndart test\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.7.0 Changes in Markdown\nDESCRIPTION: Details changes in version 0.7.0, including new features, breaking changes, and parsing improvements.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.7.0\n\n- New feature: Table valued functions.\n- __Breaking__: Removed the `enableJson1` parameter on `EngineOptions`. Add a `Json1Extension` instance\n  to `enabledExtensions` instead.\n- Parse `rowid` as a valid reference when needed (`SELECT rowid FROM tbl` is now parsed correctly)\n- Parse `CURRENT_TIME`, `CURRENT_DATE` and `CURRENT_TIMESTAMP`\n- Parse `UPSERT` clauses for insert statements\n```\n\n----------------------------------------\n\nTITLE: Configuring build_web_compilers for Dart Web Workers\nDESCRIPTION: This YAML configuration sets up build_web_compilers to compile Dart files to JavaScript for web workers. It specifies compiler options for both debug and release modes.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/Platforms/web.md#2025-04-17_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ntargets:\n  $default:\n    builders:\n      build_web_compilers:entrypoint:\n        generate_for:\n          - web/**.dart\n        options:\n          compiler: dart2js\n        dev_options:\n          dart2js_args:\n            - --no-minify\n        release_options:\n          dart2js_args:\n            - -O4\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.1.1 Changes in Markdown\nDESCRIPTION: Outlines bug fixes and parsing improvements in version 0.1.1.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.1\n\nAttempt to recognize when a bound variable should be an array (eg. in `WHERE x IN ?`). Also fixes a number of parsing\nbugs:\n\n- Parses tuples, proper type resolution for `IN` expressions\n- Don't resolve references to tables that don't appear in the surrounding statement.\n- Parse joins without any additional operator, e.g. `table1 JOIN table2` instead of\n  `table1 CROSS JOIN table2`.\n- Parser now complains when parsing a query doesn't fully consume the input\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.5.0 Changes in Markdown\nDESCRIPTION: Lists changes in version 0.5.0, focusing on optional module support.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.5.0\n\n- Optionally support the `json1` module\n- Optionally support the `fts5` module\n```\n\n----------------------------------------\n\nTITLE: Running the Drift Web Worker Example with Flutter\nDESCRIPTION: Instructions for setting up and running the Drift with shared web worker example. First generate JavaScript files with a shell script, then launch the Flutter application in a browser.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/flutter_web_worker_example/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n./generate_js.sh\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Running Drift Web Worker Example with Build Runner\nDESCRIPTION: Command to serve the example application using Dart's build_runner, which will compile and serve the project at localhost:8080.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/web_worker_example/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart run build_runner serve\n```\n\n----------------------------------------\n\nTITLE: Setting Documentation Script Permissions in Bash\nDESCRIPTION: Command to make the docs.sh script executable before running documentation builds\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x docs.sh\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.4.0 Changes in Markdown\nDESCRIPTION: Details changes in version 0.4.0, including support for common table expressions and special references.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.4.0\n\n- Support common table expressions\n- Handle special `rowid`, `oid`, `__rowid__` references\n- Support references to `sqlite_master` and `sqlite_sequence` tables\n```\n\n----------------------------------------\n\nTITLE: Setting up Flutter Windows Environment in CMake\nDESCRIPTION: This CMake configuration establishes the basic Flutter environment for Windows applications. It sets minimum CMake version, defines paths, includes generated configuration, and sets up the Flutter library paths.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n\n# TODO: Move the rest of this into files in ephemeral. See\n# https://github.com/flutter/flutter/issues/57146.\nset(WRAPPER_ROOT \"${EPHEMERAL_DIR}/cpp_client_wrapper\")\n```\n\n----------------------------------------\n\nTITLE: Generating Migrations with Drift CLI\nDESCRIPTION: Command to generate migration code after adapting a schema and incrementing the schemaVersion in the database.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/migrations_example/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndart run drift_dev make-migrations\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.1.0 Changes in Markdown\nDESCRIPTION: Describes the initial version capabilities and limitations.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.0\n\nInitial version, can parse most statements but not `DELETE`, common table expressions and other advanced features.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Assets Installation for Windows\nDESCRIPTION: Installation configuration for Flutter assets on Windows. This ensures that all required assets, ICU data, libraries, and AOT code are properly installed alongside the executable for the application to run correctly.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Running Drift Encryption Sample Project with Flutter\nDESCRIPTION: Instructions for running the drift encryption sample project using Flutter CLI.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nflutter run\n```\n\n----------------------------------------\n\nTITLE: Configuring Analysis Options for Drift Generated Files\nDESCRIPTION: YAML configuration to exclude generated .g.dart files from static analysis to avoid linter warnings.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/faq.md#2025-04-17_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nanalyzer:\n  exclude:\n    - \"**/*.g.dart\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Cross-Building Settings for Flutter Linux App\nDESCRIPTION: Sets up the root filesystem for cross-building if a target platform sysroot is specified. This includes setting the CMAKE_SYSROOT and configuring find root path modes.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library in CMake\nDESCRIPTION: This section configures the Flutter Windows library, setting paths to the DLL and ICU data file, and publishing these to the parent scope for installation. It also creates a Flutter interface library with appropriate include directories and dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Starting Local Web Server for Manual Debugging of Drift Tests in Dart\nDESCRIPTION: Command to run a Dart script that starts a local web server. This allows manual debugging of the test content, which will be accessible at http://localhost:8080.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/web_wasm/README.md#2025-04-17_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndart run tool/serve_manually.dart\n```\n\n----------------------------------------\n\nTITLE: Installation Configuration\nDESCRIPTION: Sets up installation rules for the application bundle, including executable, libraries, and assets.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: cmake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter App Wrapper Library in CMake\nDESCRIPTION: This snippet creates a static library for Flutter app wrapper functionality. It combines core and app sources, applies standard settings, links against the Flutter interface library, and sets appropriate include directories.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Defining Application Target and Dependencies\nDESCRIPTION: Creates the executable target with source files and links required libraries, including Flutter and GTK dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# Define the application target. To change its name, change BINARY_NAME above,\n# not the value here, or `flutter run` will no longer work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Add dependency libraries. Add any application-specific dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n\n# Only the install-generated bundle's copy of the executable will launch\n# correctly, since the resources must in the right relative locations. To avoid\n# people trying to run the unbundled copy, put it in a subdirectory instead of\n# the default top-level location.\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation with Build Runner\nDESCRIPTION: Command to serve documentation with real-time updates for both markdown and code snippet changes\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/README.md#2025-04-17_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocs.sh serve --with-build-runner\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library in CMake for Windows\nDESCRIPTION: Sets up the Flutter library and its dependencies for Windows builds. It defines paths, includes necessary headers, and creates an interface library target for Flutter.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/windows/app.so\" PARENT_SCOPE)\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: Sets up the Flutter tool backend command and assembly target for building Flutter components on Windows.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Settings for Windows\nDESCRIPTION: Sets up installation directories and default values, ensuring the application can run in place within Visual Studio without a separate bundle.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n```\n\n----------------------------------------\n\nTITLE: Implementing List Prepend Function in CMake for Flutter Linux Build\nDESCRIPTION: Defines a custom CMake function called list_prepend that adds a prefix to each element in a list. This serves the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Installing Runtime Components and Libraries\nDESCRIPTION: Installs the binary, Flutter ICU data file, Flutter library, and any bundled plugin libraries to the appropriate installation directories.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake\nDESCRIPTION: Configures a custom command to run the Flutter tool backend for Windows builds. This ensures that necessary Flutter assets and libraries are generated or updated during the build process.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Windows Runner\nDESCRIPTION: This CMake snippet sets up the project, defines the executable, specifies source files, and configures build settings for a Flutter Windows runner application. It includes linking necessary libraries and setting up dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Running Specific Migration Test\nDESCRIPTION: Command to test a specific migration by using the -N flag with the migration name.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/migrations_example/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndart test -N \"v1 to v2\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers and Dependencies in CMake\nDESCRIPTION: Sets up the Flutter library interface in CMake, including header files and dependencies. This creates a Flutter interface library and links it with the required system libraries.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Process\nDESCRIPTION: Sets up installation paths and procedures for creating a relocatable bundle, including handling of Flutter assets, ICU data, and libraries.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Installation ===\n# By default, \"installing\" just makes a relocatable bundle in the build\n# directory.\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\n# Start with a clean build bundle directory every time.\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nforeach(bundled_library ${PLUGIN_BUNDLED_LIBRARIES})\n  install(FILES \"${bundled_library}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendforeach(bundled_library)\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers\nDESCRIPTION: Defines the list of Flutter library headers needed for the project and prepends the ephemeral directory path to each header file.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\n```\n\n----------------------------------------\n\nTITLE: Setting Up System Dependencies for Flutter Linux with pkg-config\nDESCRIPTION: Configures the system-level dependencies required for Flutter on Linux using pkg-config. This includes GTK, GLIB, and GIO packages which are essential for the Flutter Linux implementation.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake Build Process\nDESCRIPTION: Sets up a custom command and target to execute the Flutter tool backend script during the build process. This ensures the Flutter library and headers are properly generated before being used in the build.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting up CMake Minimum Version and Configuration Files\nDESCRIPTION: Sets the minimum required CMake version to 3.10 and includes the generated configuration file from the ephemeral directory.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Serving Documentation Locally with Bash\nDESCRIPTION: Command to serve documentation locally with real-time updates for markdown changes\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocs.sh serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and System Dependencies for Linux App\nDESCRIPTION: Sets up Flutter library and tool build rules, and configures system-level dependencies like GTK. Adds definitions for the application ID.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Running Migration Tests\nDESCRIPTION: Command to run all migration verification tests to ensure migrations work correctly.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/migrations_example/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndart test\n```\n\n----------------------------------------\n\nTITLE: Cross-Build Configuration\nDESCRIPTION: Configures system root and find root paths for cross-building scenarios when targeting specific platforms.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Helper Function in CMake\nDESCRIPTION: Creates a custom function that prepends a prefix to each element in a list, serving the same purpose as list(TRANSFORM ... PREPEND ...) which isn't available in CMake 3.10.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Serves the same purpose as list(TRANSFORM ... PREPEND ...),\n# which isn't available in 3.10.\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Building Documentation with Bash Script\nDESCRIPTION: Command to build the complete documentation using the docs.sh script\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocs.sh build\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter and System Dependencies\nDESCRIPTION: Adds the Flutter managed directory, configures GTK dependencies with pkg-config, and defines the application ID.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\n\nadd_definitions(-DAPPLICATION_ID=\"${APPLICATION_ID}\")\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Wrapper Libraries in CMake\nDESCRIPTION: Defines and configures two static libraries: flutter_wrapper_plugin for plugins and flutter_wrapper_app for the main application. These libraries wrap core Flutter functionality for C++ integration.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n\n# Wrapper sources needed for the runner.\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Creating Geopoly Virtual Table in SQL for Drift\nDESCRIPTION: Shows how to create a virtual table using the Geopoly extension in a Drift file. The example creates a 'geo' table with 'geoID', 'a', and 'b' columns.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/sql_api/extensions.md#2025-04-17_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\ncreate virtual table geo using geopoly(geoID, a, b);\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.3.0 Changes in Markdown\nDESCRIPTION: Outlines changes in version 0.3.0, including parsing improvements and new features.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.3.0\n\n- parse compound select statements\n- scan comment tokens\n- experimental auto-complete engine (only supports a tiny subset based on the grammar only)\n- some features that are specific to moor\n\n__0.3.0+1__: Accept `\\r` characters as whitespace\n```\n\n----------------------------------------\n\nTITLE: Creating and Configuring Flutter Interface Library\nDESCRIPTION: Defines an interface library for Flutter with proper include directories and dependencies, linking it with the Flutter library and required system libraries.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/flutter/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Windows Application Project in CMake\nDESCRIPTION: Complete CMake configuration for building a Flutter application on Windows. It sets up project parameters, compilation flags, defines helper functions, manages Flutter libraries and plugins, and configures installation paths for the application bundle.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(app LANGUAGES CXX)\n\nset(BINARY_NAME \"app\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Configure build options.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\n\n# Flutter library and tool build rules.\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n\n\n# === Installation ===\n# Support files are copied into place next to the executable, so that it can\n# run in place. This is done instead of making a separate bundle (as on Linux)\n# so that building and running from within Visual Studio will work.\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\n# Make the \"install\" step default, as it's required to run.\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Web Crawler Access in robots.txt\nDESCRIPTION: A standard robots.txt configuration that allows all web crawlers (User-agent: *) to access the entire website. The empty Disallow directive indicates no restrictions are placed on crawler access.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/robots.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nUser-agent: *\nDisallow:\n```\n\n----------------------------------------\n\nTITLE: Publishing Flutter Variables to Parent Scope\nDESCRIPTION: Sets variables related to Flutter library, ICU data file, and build directories in the parent scope for use in the installation step.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend in CMake\nDESCRIPTION: This section sets up the Flutter tool backend by creating a custom command that runs the Flutter tool to generate necessary files. It creates a symbolic phony output to ensure the command runs every time, and establishes dependencies through a custom target.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/flutter/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nset(PHONY_OUTPUT \"${CMAKE_CURRENT_BINARY_DIR}/_phony_\")\nset_source_files_properties(\"${PHONY_OUTPUT}\" PROPERTIES SYMBOLIC TRUE)\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CPP_WRAPPER_SOURCES_CORE} ${CPP_WRAPPER_SOURCES_PLUGIN}\n    ${CPP_WRAPPER_SOURCES_APP}\n    ${PHONY_OUTPUT}\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.bat\"\n      windows-x64 $<CONFIG>\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Standard C++ Compilation Settings for Flutter Windows Targets\nDESCRIPTION: Function that applies standard compilation settings to CMake targets. Configures C++17 standard, warning levels, exception handling, and debug definitions for Windows builds.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux Build\nDESCRIPTION: Sets up the CMake project with minimum required version and includes the generated config file. It also defines the ephemeral directory path.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\n\nset(EPHEMERAL_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/ephemeral\")\n\n# Configuration provided via flutter tool.\ninclude(${EPHEMERAL_DIR}/generated_config.cmake)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for FFI on Flutter\nDESCRIPTION: Sets up the CMake project with minimum version requirement and project name. It also defines the binary name for the application.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(ffi_on_flutter LANGUAGES CXX)\n\nset(BINARY_NAME \"ffi_on_flutter\")\n```\n\n----------------------------------------\n\nTITLE: Managing Flutter Assets and AOT Library Installation\nDESCRIPTION: Configures the installation of Flutter assets by completely refreshing the assets directory on each build, and installs the AOT library for non-Debug builds only.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# Fully re-copy the assets directory on each build to avoid having stale files\n# from a previous install.\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\n# Install the AOT library on non-Debug builds only.\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Installation Rules for Flutter FFI Project\nDESCRIPTION: Defines installation rules for the application binary, Flutter ICU data, Flutter library, bundled libraries, and assets. It also includes rules for AOT library installation in non-Debug builds.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"$<TARGET_FILE_DIR:${BINARY_NAME}>\")\nset(CMAKE_VS_INCLUDE_INSTALL_TO_DEFAULT_BUILD 1)\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\ninstall(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  CONFIGURATIONS Profile;Release\n  COMPONENT Runtime)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Drift Encryption Sample\nDESCRIPTION: Sets up the initial CMake configuration including minimum required version, project name, and primary executable name.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(drift_encryption_sample LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"drift_encryption_sample\")\n```\n\n----------------------------------------\n\nTITLE: Setting Compilation Flags for Flutter FFI Project\nDESCRIPTION: Defines a function to apply standard compilation settings to targets. It sets C++17 standard, warning levels, and exception handling options.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Opening Xcode Workspace for Flutter iOS Project\nDESCRIPTION: Command to open the Flutter project's Xcode workspace for managing launch screen assets through the Xcode interface\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md#2025-04-17_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nopen ios/Runner.xcworkspace\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Behavior and Installation Paths\nDESCRIPTION: Sets CMake policies and installation path configurations, including instructions for cross-building with a target platform sysroot.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Load bundled libraries from the lib/ directory relative to the binary.\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n\n# Root filesystem for cross-building.\nif(FLUTTER_TARGET_PLATFORM_SYSROOT)\n  set(CMAKE_SYSROOT ${FLUTTER_TARGET_PLATFORM_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH ${CMAKE_SYSROOT})\n  set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)\n  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Dependency Override Warning - Package Configuration\nDESCRIPTION: Instructions for managing dependency overrides during release process across multiple Drift-related packages.\nSOURCE: https://github.com/simolus3/drift/blob/develop/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n3. Comment out the `dependency_overrides` section in `drift`, `drift/tool/analyzer_plugin`, `moor_flutter`,\n   `drift_dev` and `sqlparser`. Make sure that `useDebuggingVariant` is false in the\n   analyzer plugin.\n```\n\n----------------------------------------\n\nTITLE: Defining Standard Compilation Settings for Flutter Linux App\nDESCRIPTION: Creates a function to apply standard compilation settings to targets. This includes setting C++14 standard, compiler warnings, and optimization flags.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Modes for Flutter Project\nDESCRIPTION: Defines build configuration options for Debug, Profile, and Release modes. It sets the default build type to Debug if not specified.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n```\n\n----------------------------------------\n\nTITLE: Standard Build Settings Function\nDESCRIPTION: Defines a function to apply standard compilation settings including C++14 support, warning flags, and optimization options.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Application Target Definition\nDESCRIPTION: Defines the main application executable target and its source files, linking required libraries and dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: cmake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\n```\n\n----------------------------------------\n\nTITLE: Defining Build Configuration Options\nDESCRIPTION: Sets build type defaults to Debug if not specified and defines available build types (Debug, Profile, Release).\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Define build configuration options.\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Setup in CMake\nDESCRIPTION: Sets up the Flutter Windows DLL and related headers, configuring include directories and linking libraries for the Flutter interface library.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/flutter/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/flutter_windows.dll\")\n\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"flutter_export.h\"\n  \"flutter_windows.h\"\n  \"flutter_messenger.h\"\n  \"flutter_plugin_registrar.h\"\n  \"flutter_texture_registrar.h\"\n)\nlist(TRANSFORM FLUTTER_LIBRARY_HEADERS PREPEND \"${EPHEMERAL_DIR}/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}.lib\")\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Plugin Wrapper in CMake\nDESCRIPTION: Configures the Flutter plugin wrapper library with core and plugin sources, setting up compilation flags and dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Linux App\nDESCRIPTION: Sets up the CMake project with minimum version, project name, and language. Defines the binary name and application ID for the Flutter app.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"app\")\nset(APPLICATION_ID \"com.example.app\")\n\ncmake_policy(SET CMP0063 NEW)\n\nset(CMAKE_INSTALL_RPATH \"$ORIGIN/lib\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Library Headers in CMake\nDESCRIPTION: Defines a list of Flutter library headers and prepends the ephemeral directory path to each header. It then sets up the Flutter library as an interface library with the necessary include directories and link libraries.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nlist(APPEND FLUTTER_LIBRARY_HEADERS\n  \"fl_basic_message_channel.h\"\n  \"fl_binary_codec.h\"\n  \"fl_binary_messenger.h\"\n  \"fl_dart_project.h\"\n  \"fl_engine.h\"\n  \"fl_json_message_codec.h\"\n  \"fl_json_method_codec.h\"\n  \"fl_message_codec.h\"\n  \"fl_method_call.h\"\n  \"fl_method_channel.h\"\n  \"fl_method_codec.h\"\n  \"fl_method_response.h\"\n  \"fl_plugin_registrar.h\"\n  \"fl_plugin_registry.h\"\n  \"fl_standard_message_codec.h\"\n  \"fl_standard_method_codec.h\"\n  \"fl_string_codec.h\"\n  \"fl_value.h\"\n  \"fl_view.h\"\n  \"flutter_linux.h\"\n)\nlist_prepend(FLUTTER_LIBRARY_HEADERS \"${EPHEMERAL_DIR}/flutter_linux/\")\nadd_library(flutter INTERFACE)\ntarget_include_directories(flutter INTERFACE\n  \"${EPHEMERAL_DIR}\"\n)\ntarget_link_libraries(flutter INTERFACE \"${FLUTTER_LIBRARY}\")\ntarget_link_libraries(flutter INTERFACE\n  PkgConfig::GTK\n  PkgConfig::GLIB\n  PkgConfig::GIO\n)\nadd_dependencies(flutter flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Project for Flutter Windows Application\nDESCRIPTION: This CMake snippet sets up the project, defines the application target, and configures build settings for a Flutter Windows application. It includes necessary source files, applies standard settings, disables conflicting Windows macros, and sets up dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\napply_standard_settings(${BINARY_NAME})\n\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring Installation Rules for Flutter Linux App\nDESCRIPTION: Sets up installation rules for the Flutter Linux app, including bundle directory, data files, libraries, and assets. Handles different configurations for Debug and non-Debug builds.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\nset(BUILD_BUNDLE_DIR \"${PROJECT_BINARY_DIR}/bundle\")\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX \"${BUILD_BUNDLE_DIR}\" CACHE PATH \"...\" FORCE)\nendif()\n\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${BUILD_BUNDLE_DIR}/\\\")\n  \" COMPONENT Runtime)\n\nset(INSTALL_BUNDLE_DATA_DIR \"${CMAKE_INSTALL_PREFIX}/data\")\nset(INSTALL_BUNDLE_LIB_DIR \"${CMAKE_INSTALL_PREFIX}/lib\")\n\ninstall(TARGETS ${BINARY_NAME} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_ICU_DATA_FILE}\" DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\"\n  COMPONENT Runtime)\n\ninstall(FILES \"${FLUTTER_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n  COMPONENT Runtime)\n\nif(PLUGIN_BUNDLED_LIBRARIES)\n  install(FILES \"${PLUGIN_BUNDLED_LIBRARIES}\"\n    DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n\nset(FLUTTER_ASSET_DIR_NAME \"flutter_assets\")\ninstall(CODE \"\n  file(REMOVE_RECURSE \\\"${INSTALL_BUNDLE_DATA_DIR}/${FLUTTER_ASSET_DIR_NAME}\\\")\n  \" COMPONENT Runtime)\ninstall(DIRECTORY \"${PROJECT_BUILD_DIR}/${FLUTTER_ASSET_DIR_NAME}\"\n  DESTINATION \"${INSTALL_BUNDLE_DATA_DIR}\" COMPONENT Runtime)\n\nif(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n  install(FILES \"${AOT_LIBRARY}\" DESTINATION \"${INSTALL_BUNDLE_LIB_DIR}\"\n    COMPONENT Runtime)\nendif()\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter Tool Backend Command\nDESCRIPTION: Sets up a custom command to run the Flutter tool backend script which generates the necessary Flutter library and headers. Uses a _phony_ target to force the command to run every time.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/flutter/CMakeLists.txt#2025-04-17_snippet_6\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter tool backend ===\n# _phony_ is a non-existent file to force this command to run every time,\n# since currently there's no way to get a full input/output list from the\n# flutter tool.\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Library Dependencies in CMake\nDESCRIPTION: Finds and configures system-level dependencies (GTK, GLIB, GIO) required for the Flutter library. It also sets up the Flutter library path and publishes variables to the parent scope.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n\n# Published to parent scope for install step.\nset(FLUTTER_LIBRARY ${FLUTTER_LIBRARY} PARENT_SCOPE)\nset(FLUTTER_ICU_DATA_FILE \"${EPHEMERAL_DIR}/icudtl.dat\" PARENT_SCOPE)\nset(PROJECT_BUILD_DIR \"${PROJECT_DIR}/build/\" PARENT_SCOPE)\nset(AOT_LIBRARY \"${PROJECT_DIR}/build/lib/libapp.so\" PARENT_SCOPE)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Flutter Tool Backend in CMake\nDESCRIPTION: Defines a custom command to run the Flutter tool backend script, which generates necessary files for the build process. It also creates a custom target 'flutter_assemble' that depends on the generated files.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/flutter/CMakeLists.txt#2025-04-17_snippet_4\n\nLANGUAGE: CMake\nCODE:\n```\nadd_custom_command(\n  OUTPUT ${FLUTTER_LIBRARY} ${FLUTTER_LIBRARY_HEADERS}\n    ${CMAKE_CURRENT_BINARY_DIR}/_phony_\n  COMMAND ${CMAKE_COMMAND} -E env\n    ${FLUTTER_TOOL_ENVIRONMENT}\n    \"${FLUTTER_ROOT}/packages/flutter_tools/bin/tool_backend.sh\"\n      ${FLUTTER_TARGET_PLATFORM} ${CMAKE_BUILD_TYPE}\n  VERBATIM\n)\nadd_custom_target(flutter_assemble DEPENDS\n  \"${FLUTTER_LIBRARY}\"\n  ${FLUTTER_LIBRARY_HEADERS}\n)\n```\n\n----------------------------------------\n\nTITLE: Setting Unicode Definitions and Standard Compiler Settings\nDESCRIPTION: Adds Unicode definitions and creates a function that applies standard compilation settings to targets, including C++17 standard, warning levels, and exception handling settings.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# Use Unicode for all projects.\nadd_definitions(-DUNICODE -D_UNICODE)\n\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_17)\n  target_compile_options(${TARGET} PRIVATE /W4 /WX /wd\"4100\")\n  target_compile_options(${TARGET} PRIVATE /EHsc)\n  target_compile_definitions(${TARGET} PRIVATE \"_HAS_EXCEPTIONS=0\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<CONFIG:Debug>:_DEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Defining List Prepend Function in CMake\nDESCRIPTION: Creates a custom function to prepend a prefix to each element in a list. This is used as a workaround for CMake versions that don't support list(TRANSFORM ... PREPEND ...).\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/flutter/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\nfunction(list_prepend LIST_NAME PREFIX)\n    set(NEW_LIST \"\")\n    foreach(element ${${LIST_NAME}})\n        list(APPEND NEW_LIST \"${PREFIX}${element}\")\n    endforeach(element)\n    set(${LIST_NAME} \"${NEW_LIST}\" PARENT_SCOPE)\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Adding Flutter and Application Build Components\nDESCRIPTION: Includes the Flutter library and tool build rules, adds the application build subdirectory, and incorporates plugin build rules from generated configuration.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Flutter library and tool build rules.\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\n# Application build; see runner/CMakeLists.txt.\nadd_subdirectory(\"runner\")\n\n# Generated plugin build rules, which manage building the plugins and adding\n# them to the application.\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Project Configuration and Basic Settings\nDESCRIPTION: Initializes CMake project and sets basic configuration variables including binary name and application ID.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: cmake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\nset(BINARY_NAME \"ffi_on_flutter\")\nset(APPLICATION_ID \"com.example.ffi_on_flutter\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter and Plugin Build Rules\nDESCRIPTION: Sets up the Flutter library and tool build rules, adds the runner subdirectory, and includes generated plugin build rules.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\nset(FLUTTER_MANAGED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/flutter\")\nadd_subdirectory(${FLUTTER_MANAGED_DIR})\n\nadd_subdirectory(\"runner\")\n\ninclude(flutter/generated_plugins.cmake)\n```\n\n----------------------------------------\n\nTITLE: Configuring Windows Flutter Application Build in CMake\nDESCRIPTION: Sets up the CMake build configuration for a Flutter Windows application runner. It defines the executable target with source files, applies standard build settings, disables Windows macros that conflict with C++ standard library, and configures dependencies and include directories.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/integration_tests/ffi_on_flutter/windows/runner/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.14)\nproject(runner LANGUAGES CXX)\n\n# Define the application target. To change its name, change BINARY_NAME in the\n# top-level CMakeLists.txt, not the value here, or `flutter run` will no longer\n# work.\n#\n# Any new source files that you add to the application should be added here.\nadd_executable(${BINARY_NAME} WIN32\n  \"flutter_window.cpp\"\n  \"main.cpp\"\n  \"utils.cpp\"\n  \"win32_window.cpp\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n  \"Runner.rc\"\n  \"runner.exe.manifest\"\n)\n\n# Apply the standard set of build settings. This can be removed for applications\n# that need different build settings.\napply_standard_settings(${BINARY_NAME})\n\n# Disable Windows macros that collide with C++ standard library functions.\ntarget_compile_definitions(${BINARY_NAME} PRIVATE \"NOMINMAX\")\n\n# Add dependency libraries and include directories. Add any application-specific\n# dependencies here.\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter flutter_wrapper_app)\ntarget_include_directories(${BINARY_NAME} PRIVATE \"${CMAKE_SOURCE_DIR}\")\n\n# Run the Flutter tool portions of the build. This must not be removed.\nadd_dependencies(${BINARY_NAME} flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Configuring CMake Policies and Build Types\nDESCRIPTION: Sets modern CMake behaviors and defines build configuration options, including Debug, Profile, and Release build types with appropriate settings.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/CMakeLists.txt#2025-04-17_snippet_1\n\nLANGUAGE: CMake\nCODE:\n```\n# Explicitly opt in to modern CMake behaviors to avoid warnings with recent\n# versions of CMake.\ncmake_policy(SET CMP0063 NEW)\n\n# Define build configuration option.\nget_property(IS_MULTICONFIG GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)\nif(IS_MULTICONFIG)\n  set(CMAKE_CONFIGURATION_TYPES \"Debug;Profile;Release\"\n    CACHE STRING \"\" FORCE)\nelse()\n  if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n    set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n      STRING \"Flutter build mode\" FORCE)\n    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n      \"Debug\" \"Profile\" \"Release\")\n  endif()\nendif()\n# Define settings for the Profile build mode.\nset(CMAKE_EXE_LINKER_FLAGS_PROFILE \"${CMAKE_EXE_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_SHARED_LINKER_FLAGS_PROFILE \"${CMAKE_SHARED_LINKER_FLAGS_RELEASE}\")\nset(CMAKE_C_FLAGS_PROFILE \"${CMAKE_C_FLAGS_RELEASE}\")\nset(CMAKE_CXX_FLAGS_PROFILE \"${CMAKE_CXX_FLAGS_RELEASE}\")\n```\n\n----------------------------------------\n\nTITLE: Adding a View to a Drift Database\nDESCRIPTION: This snippet shows how to include a defined view in a Drift database by adding it to the 'views' parameter of the database annotation.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/views.md#2025-04-17_snippet_1\n\nLANGUAGE: dart\nCODE:\n```\n@DriftDatabase(tables: [Todos, Categories], views: [CategoryTodoCount])\nclass MyDatabase extends _$MyDatabase {\n```\n\n----------------------------------------\n\nTITLE: Arithmetic Operations\nDESCRIPTION: Examples of performing arithmetic calculations between SQL expressions and Dart values.\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/docs/dart_api/expressions.md#2025-04-17_snippet_3\n\nLANGUAGE: dart\nCODE:\n```\nfinal someNumber = Variable(10);\nfinal calculation = todos.id * someNumber + Variable(3);\n```\n\n----------------------------------------\n\nTITLE: Building and Serving Documentation with Flutter Example\nDESCRIPTION: Commands to build documentation including Flutter example and then serve it locally\nSOURCE: https://github.com/simolus3/drift/blob/develop/docs/README.md#2025-04-17_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocs.sh build\ndocs.sh serve\n```\n\n----------------------------------------\n\nTITLE: Dart VM Service Output Example\nDESCRIPTION: Sample console output showing the Dart VM Service and Flutter DevTools debugger URLs after launching the example app.\nSOURCE: https://github.com/simolus3/drift/blob/develop/extras/drift_devtools_extension/README.md#2025-04-17_snippet_2\n\nLANGUAGE: console\nCODE:\n```\nA Dart VM Service on Linux is available at: http://127.0.0.1:42439/XZyfqXFUYlg=/\nThe Flutter DevTools debugger and profiler on Linux is available at:\nhttp://127.0.0.1:9102?uri=http://127.0.0.1:42439/XZyfqXFUYlg=/\n```\n\n----------------------------------------\n\nTITLE: Applying Standard Compilation Settings Function\nDESCRIPTION: Defines a function for applying standard compilation settings to targets, including C++14 standard, compiler warnings, and optimizations for non-debug builds.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Compilation settings that should be applied to most targets.\n#\n# Be cautious about adding new options here, as plugins use this function by\n# default. In most cases, you should add new options to specific targets instead\n# of modifying this function.\nfunction(APPLY_STANDARD_SETTINGS TARGET)\n  target_compile_features(${TARGET} PUBLIC cxx_std_14)\n  target_compile_options(${TARGET} PRIVATE -Wall -Werror)\n  target_compile_options(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:-O3>\")\n  target_compile_definitions(${TARGET} PRIVATE \"$<$<NOT:$<CONFIG:Debug>>:NDEBUG>\")\nendfunction()\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.6.0 Changes in Markdown\nDESCRIPTION: Outlines changes in version 0.6.0, including breaking changes, new algorithms, and additional parsing support.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.6.0\n\n- __Breaking:__ Added an argument type and argument to the visitor classes\n- Experimental new type inference algorithm\n  (`SqlEngine.withOptions(EngineOptions(enableExperimentalTypeInference: true))`)\n- Support `CAST` expressions and the `ISNULL` / `NOTNULL` postfixes\n- Support parsing `CREATE TRIGGER` statements\n- Support parsing `CREATE INDEX` statements\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.2.0 Changes in Markdown\nDESCRIPTION: Lists changes in version 0.2.0, focusing on CREATE TABLE statement parsing.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.2.0\n\n- Parse `CREATE TABLE` statements\n- Extract schema information from parsed create table statements with `SchemaFromCreateTable`.\n```\n\n----------------------------------------\n\nTITLE: Documenting Version 0.1.2 Changes in Markdown\nDESCRIPTION: Details minor parsing improvements in version 0.1.2.\nSOURCE: https://github.com/simolus3/drift/blob/develop/sqlparser/CHANGELOG.md#2025-04-17_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n## 0.1.2\n\n- parse `COLLATE` expressions\n- fix wrong order in parsed `LIMIT` clauses\n```\n\n----------------------------------------\n\nTITLE: Running Server and Client Applications\nDESCRIPTION: These commands run the server and client applications. The server is started first, followed by the client.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/multi_package/README.md#2025-04-17_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ndart run server/bin/server.dart\ndart run client/bin/client.dart\n```\n\n----------------------------------------\n\nTITLE: Creating Flutter Plugin Wrapper Library in CMake\nDESCRIPTION: This snippet creates a static library for Flutter plugin wrapper functionality. It combines core and plugin sources, applies standard settings, sets appropriate properties for position independence and visibility, and links against the Flutter interface library.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/flutter/CMakeLists.txt#2025-04-17_snippet_3\n\nLANGUAGE: CMake\nCODE:\n```\n# Wrapper sources needed for a plugin.\nadd_library(flutter_wrapper_plugin STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_PLUGIN}\n)\napply_standard_settings(flutter_wrapper_plugin)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  POSITION_INDEPENDENT_CODE ON)\nset_target_properties(flutter_wrapper_plugin PROPERTIES\n  CXX_VISIBILITY_PRESET hidden)\ntarget_link_libraries(flutter_wrapper_plugin PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_plugin PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_plugin flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting up C++ Wrapper Sources for Flutter in CMake\nDESCRIPTION: This section defines source file lists for the C++ wrappers needed for Flutter integration. It organizes sources into core, plugin, and app categories, and transforms the paths to include the wrapper root directory.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Wrapper ===\nlist(APPEND CPP_WRAPPER_SOURCES_CORE\n  \"core_implementations.cc\"\n  \"standard_codec.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_CORE PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_PLUGIN\n  \"plugin_registrar.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_PLUGIN PREPEND \"${WRAPPER_ROOT}/\")\nlist(APPEND CPP_WRAPPER_SOURCES_APP\n  \"flutter_engine.cc\"\n  \"flutter_view_controller.cc\"\n)\nlist(TRANSFORM CPP_WRAPPER_SOURCES_APP PREPEND \"${WRAPPER_ROOT}/\")\n```\n\n----------------------------------------\n\nTITLE: Configuring System Dependencies for Flutter Linux\nDESCRIPTION: Checks for required system-level dependencies using pkg-config, specifically GTK3, GLib, and GIO which are needed for Flutter Linux applications.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\n# === Flutter Library ===\n# System-level dependencies.\nfind_package(PkgConfig REQUIRED)\npkg_check_modules(GTK REQUIRED IMPORTED_TARGET gtk+-3.0)\npkg_check_modules(GLIB REQUIRED IMPORTED_TARGET glib-2.0)\npkg_check_modules(GIO REQUIRED IMPORTED_TARGET gio-2.0)\n\nset(FLUTTER_LIBRARY \"${EPHEMERAL_DIR}/libflutter_linux_gtk.so\")\n```\n\n----------------------------------------\n\nTITLE: Building Flutter Linux Application\nDESCRIPTION: Configures the main executable for the Flutter Linux app, including source files and linking libraries. Sets up build properties and dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/CMakeLists.txt#2025-04-17_snippet_5\n\nLANGUAGE: CMake\nCODE:\n```\nadd_executable(${BINARY_NAME}\n  \"main.cc\"\n  \"my_application.cc\"\n  \"${FLUTTER_MANAGED_DIR}/generated_plugin_registrant.cc\"\n)\napply_standard_settings(${BINARY_NAME})\ntarget_link_libraries(${BINARY_NAME} PRIVATE flutter)\ntarget_link_libraries(${BINARY_NAME} PRIVATE PkgConfig::GTK)\nadd_dependencies(${BINARY_NAME} flutter_assemble)\nset_target_properties(${BINARY_NAME}\n  PROPERTIES\n  RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}/intermediates_do_not_run\"\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing CMake Project for Flutter Application\nDESCRIPTION: Sets up the initial project configuration with minimum required CMake version, project name, and application identifiers.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/linux/CMakeLists.txt#2025-04-17_snippet_0\n\nLANGUAGE: CMake\nCODE:\n```\ncmake_minimum_required(VERSION 3.10)\nproject(runner LANGUAGES CXX)\n\n# The name of the executable created for the application. Change this to change\n# the on-disk name of your application.\nset(BINARY_NAME \"drift_encryption_sample\")\n# The unique GTK application identifier for this application. See:\n# https://wiki.gnome.org/HowDoI/ChooseApplicationID\nset(APPLICATION_ID \"com.example.drift_encryption_sample\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Flutter App Wrapper in CMake\nDESCRIPTION: Sets up the Flutter application wrapper library with core and app sources, configuring build settings and dependencies.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/encryption/windows/flutter/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: cmake\nCODE:\n```\nadd_library(flutter_wrapper_app STATIC\n  ${CPP_WRAPPER_SOURCES_CORE}\n  ${CPP_WRAPPER_SOURCES_APP}\n)\napply_standard_settings(flutter_wrapper_app)\ntarget_link_libraries(flutter_wrapper_app PUBLIC flutter)\ntarget_include_directories(flutter_wrapper_app PUBLIC\n  \"${WRAPPER_ROOT}/include\"\n)\nadd_dependencies(flutter_wrapper_app flutter_assemble)\n```\n\n----------------------------------------\n\nTITLE: Setting Build Options for Flutter Linux App\nDESCRIPTION: Configures the build type for the Flutter app, defaulting to Debug if not specified. Sets up cache strings for different build modes.\nSOURCE: https://github.com/simolus3/drift/blob/develop/examples/app/linux/CMakeLists.txt#2025-04-17_snippet_2\n\nLANGUAGE: CMake\nCODE:\n```\nif(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)\n  set(CMAKE_BUILD_TYPE \"Debug\" CACHE\n    STRING \"Flutter build mode\" FORCE)\n  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS\n    \"Debug\" \"Profile\" \"Release\")\nendif()\n```"
  }
]