[
  {
    "owner": "uuidjs",
    "repo": "uuid",
    "content": "TITLE: Validating UUIDs in JavaScript\nDESCRIPTION: Tests a string to determine if it is a valid UUID. This utility function returns true if the input string conforms to the UUID format, false otherwise.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validate as uuidValidate } from 'uuid';\n\nuuidValidate('not a UUID'); // RESULT\nuuidValidate('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Creating UUID v4 (Random)\nDESCRIPTION: Example of generating a version 4 (random) UUID using the v4 function.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid';\n\nuuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n```\n\n----------------------------------------\n\nTITLE: Creating Version 7 UUID in JavaScript\nDESCRIPTION: Demonstrates how to generate a version 7 UUID (random). Version 7 UUIDs combine a timestamp with random data to create unique identifiers.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v7 as uuidv7 } from 'uuid';\n\nuuidv7(); // ⇨ '01695553-c90c-705a-b56d-778dfbbd4bed'\n```\n\n----------------------------------------\n\nTITLE: UUID V4 Generation - CommonJS\nDESCRIPTION: Demonstrates UUID v4 generation using CommonJS require syntax.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { v4: uuidv4 } = require('uuid');\nuuidv4();\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v6 in JavaScript\nDESCRIPTION: Creates an RFC version 6 (timestamp, reordered) UUID. This method generates a time-based UUID similar to v1 but with fields reordered for improved database locality.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v6 as uuidv6 } from 'uuid';\n\nuuidv6(); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Creating UUID v4 using CommonJS Syntax\nDESCRIPTION: Example of requiring and using the v4 UUID generation function with CommonJS syntax.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { v4: uuidv4 } = require('uuid');\nuuidv4(); // ⇨ '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed'\n```\n\n----------------------------------------\n\nTITLE: Creating UUID v4 using ESM Syntax\nDESCRIPTION: Example of importing and using the v4 UUID generation function with ECMAScript module syntax.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid';\nuuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n```\n\n----------------------------------------\n\nTITLE: Creating Version 5 UUID with RFC URL Namespace in JavaScript\nDESCRIPTION: Example of generating a version 5 UUID using the predefined RFC URL namespace. This demonstrates the use of the built-in URL namespace constant provided by the library.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v5 as uuidv5 } from 'uuid';\n\nuuidv5('https://www.w3.org/', uuidv5.URL); // ⇨ 'c106a26a-21bb-5538-8bf2-57095d1976c1'\n```\n\n----------------------------------------\n\nTITLE: UUID V4 Generation - ESM\nDESCRIPTION: Demonstrates UUID v4 generation using ESM import syntax.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid';\nuuidv4();\n```\n\n----------------------------------------\n\nTITLE: Converting Byte Array to UUID String\nDESCRIPTION: Example of using the stringify function to convert an array of bytes to a UUID string.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stringify as uuidStringify } from 'uuid';\n\nconst uuidBytes = Uint8Array.of(\n  0x6e,\n  0xc0,\n  0xbd,\n  0x7f,\n  0x11,\n  0xc0,\n  0x43,\n  0xda,\n  0x97,\n  0x5e,\n  0x2a,\n  0x8a,\n  0xd9,\n  0xeb,\n  0xae,\n  0x0b\n);\n\nuuidStringify(uuidBytes); // ⇨ '6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'\n```\n\n----------------------------------------\n\nTITLE: Creating UUID v1 (Timestamp)\nDESCRIPTION: Example of generating a version 1 (timestamp) UUID using the v1 function.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v1 as uuidv1 } from 'uuid';\n\nuuidv1(); // ⇨ '2c5ea4c0-4067-11e9-9bdd-2b0d7b3dcb6d'\n```\n\n----------------------------------------\n\nTITLE: UUID V1 to V6 Conversion\nDESCRIPTION: Demonstrates converting a version 1 UUID to a version 6 UUID.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v1ToV6 } from 'uuid';\n\nv1ToV6('92f62d9e-22c4-11ef-97e9-325096b39f47');\n```\n\n----------------------------------------\n\nTITLE: UUID V1 Generation\nDESCRIPTION: Demonstrates generation of version 1 (timestamp) UUIDs with and without options.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v1 as uuidv1 } from 'uuid';\n\nuuidv1();\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs via Command Line\nDESCRIPTION: Demonstrates how to generate UUIDs using the command line interface. The UUID.js library provides a CLI that supports generating various UUID versions.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ npx uuid\nddeb27fb-d9a0-4624-be4d-4615062daed4\n```\n\n----------------------------------------\n\nTITLE: Validating a UUID String in JavaScript\nDESCRIPTION: Shows how to validate if a string is a valid UUID using the validate function. This utility function returns a boolean indicating if the provided string conforms to UUID format.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport { validate as uuidValidate } from 'uuid';\n\nuuidValidate('not a UUID'); // ⇨ false\nuuidValidate('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'); // ⇨ true\n```\n\n----------------------------------------\n\nTITLE: Accessing NIL UUID Constant\nDESCRIPTION: Example of importing and using the NIL UUID constant, which represents a UUID with all zeros.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NIL as NIL_UUID } from 'uuid';\n\nNIL_UUID; // ⇨ '00000000-0000-0000-0000-000000000000'\n```\n\n----------------------------------------\n\nTITLE: Validating UUIDs by Version in JavaScript\nDESCRIPTION: Creates a version-specific UUID validator function. This example shows how to combine the validate and version functions to check if a UUID is specifically a v4 UUID.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { version as uuidVersion } from 'uuid';\nimport { validate as uuidValidate } from 'uuid';\n\nfunction uuidValidateV4(uuid) {\n  return uuidValidate(uuid) && uuidVersion(uuid) === 4;\n}\n\nconst v1Uuid = 'd9428888-122b-11e1-b85c-61cd3cbb3210';\nconst v4Uuid = '109156be-c4fb-41ea-b1b4-efe1671c5836';\n\nuuidValidateV4(v4Uuid); // RESULT\nuuidValidateV4(v1Uuid); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Initializing UUID Test Environment\nDESCRIPTION: Sets up a test environment with deterministic date and crypto functions for consistent UUID generation across documentation revisions.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nrunmd.onRequire = (path) => {\n  if (path == 'rng') return fun;\n  return path.replace(/^uuid/, './dist/cjs/');\n};\n\nrunmd.Date.now = () => 1551914748172;\n\nlet seed = 0xdefaced;\nrequire('crypto').randomFillSync = function (a) {\n  for (let i = 0; i < 16; i++) a[i] = (seed = (seed * 0x41a7) & 0x7fffffff) & 0xff;\n  return a;\n};\n\nrequire('crypto').randomUUID = undefined;\n```\n\n----------------------------------------\n\nTITLE: Version-Specific UUID Validation in JavaScript\nDESCRIPTION: Demonstrates how to validate a UUID specifically for version 4 by combining the validate and version functions. This example creates a custom validation function that checks both UUID validity and version.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport { version as uuidVersion } from 'uuid';\nimport { validate as uuidValidate } from 'uuid';\n\nfunction uuidValidateV4(uuid) {\n  return uuidValidate(uuid) && uuidVersion(uuid) === 4;\n}\n\nconst v1Uuid = 'd9428888-122b-11e1-b85c-61cd3cbb3210';\nconst v4Uuid = '109156be-c4fb-41ea-b1b4-efe1671c5836';\n\nuuidValidateV4(v4Uuid); // ⇨ true\nuuidValidateV4(v1Uuid); // ⇨ false\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing UUID with Node.js CommonJS\nDESCRIPTION: Commands for setting up and testing the UUID library in a Node.js project using the CommonJS module system. First installs dependencies with npm install and then runs tests with npm test.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/node-commonjs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Detecting UUID Version in JavaScript\nDESCRIPTION: Detects the RFC version of a UUID. This function returns the version number (1-7) of a valid UUID, or throws a TypeError if the input is not a valid UUID.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { version as uuidVersion } from 'uuid';\n\nuuidVersion('45637ec4-c85f-11ea-87d0-0242ac130003'); // RESULT\nuuidVersion('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Detecting UUID Version in JavaScript\nDESCRIPTION: Shows how to detect the RFC version of a UUID using the version function. This utility returns a number indicating the UUID version (1-8) or special values for NIL and MAX UUIDs.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport { version as uuidVersion } from 'uuid';\n\nuuidVersion('45637ec4-c85f-11ea-87d0-0242ac130003'); // ⇨ 1\nuuidVersion('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'); // ⇨ 4\n```\n\n----------------------------------------\n\nTITLE: Installing and Testing UUID Package\nDESCRIPTION: Commands to install dependencies and run tests for the UUID package using npm.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/node-esmodules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Package\nDESCRIPTION: Shell command to install the uuid package using npm.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm install uuid\n```\n\n----------------------------------------\n\nTITLE: Installing UUID Library via npm\nDESCRIPTION: Command to install the uuid library using npm package manager.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install uuid\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Support Test for UUID Project\nDESCRIPTION: This snippet shows the commands to install dependencies and run the TypeScript support test for the UUID project. It uses npm to manage packages and run the test script, which likely executes tsc with the oldest supported TypeScript version.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/typescript/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v7 in JavaScript\nDESCRIPTION: Creates an RFC version 7 (random) UUID. Version 7 UUIDs combine a timestamp with random data to provide both temporal ordering and uniqueness guarantees.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v7 as uuidv7 } from 'uuid';\n\nuuidv7(); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Installing and Running UUID Example with npm\nDESCRIPTION: These commands install the necessary dependencies and start the example project. After running these commands, users should navigate to the example HTML files.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/browser-webpack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Version 6 UUID in JavaScript\nDESCRIPTION: Demonstrates how to generate a version 6 UUID (timestamp, reordered) without any options. This example shows the simplest way to create a v6 UUID using the uuid library.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v6 as uuidv6 } from 'uuid';\n\nuuidv6(); // ⇨ '1e940672-c5ea-64c0-9b5d-ab8dfbbd4bed'\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v6 with Options in JavaScript\nDESCRIPTION: Creates an RFC version 6 UUID with custom options. This example demonstrates how to specify node, clockseq, timestamp (msecs), and nanoseconds (nsecs) when generating a v6 UUID.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v6 as uuidv6 } from 'uuid';\n\nconst options = {\n  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n  clockseq: 0x1234,\n  msecs: new Date('2011-11-01').getTime(),\n  nsecs: 5678,\n};\nuuidv6(options); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Creating Version 6 UUID with Options in JavaScript\nDESCRIPTION: Example of generating a version 6 UUID with specific options for node, clockseq, msecs, and nsecs. This shows how to customize the UUID generation with predefined values.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v6 as uuidv6 } from 'uuid';\n\nconst options = {\n  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],\n  clockseq: 0x1234,\n  msecs: new Date('2011-11-01').getTime(),\n  nsecs: 5678,\n};\nuuidv6(options); // ⇨ '1e1041c7-10b9-662e-9234-0123456789ab'\n```\n\n----------------------------------------\n\nTITLE: Creating UUID v1 with Custom Options\nDESCRIPTION: Example of generating a version 1 UUID with custom options for node, clockseq, msecs, and nsecs.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v1 as uuidv1 } from 'uuid';\n\nconst options = {\n  node: Uint8Array.of(0x01, 0x23, 0x45, 0x67, 0x89, 0xab),\n  clockseq: 0x1234,\n  msecs: new Date('2011-11-01').getTime(),\n  nsecs: 5678,\n};\nuuidv1(options); // ⇨ '710b962e-041c-11e1-9234-0123456789ab'\n```\n\n----------------------------------------\n\nTITLE: UUID V1 Generation with Options\nDESCRIPTION: Shows how to generate a v1 UUID with custom node, clockseq, and timestamp options.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v1 as uuidv1 } from 'uuid';\n\nconst options = {\n  node: Uint8Array.of(0x01, 0x23, 0x45, 0x67, 0x89, 0xab),\n  clockseq: 0x1234,\n  msecs: new Date('2011-11-01').getTime(),\n  nsecs: 5678,\n};\nuuidv1(options);\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v5 with Custom Namespace in JavaScript\nDESCRIPTION: Creates an RFC version 5 (namespace with SHA-1) UUID using a custom namespace. This example demonstrates how to generate a UUID v5 by providing a custom namespace UUID and a name string.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v5 as uuidv5 } from 'uuid';\n\n// Define a custom namespace.  Readers, create your own using something like\n// https://www.uuidgenerator.net/\nconst MY_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';\n\nuuidv5('Hello, World!', MY_NAMESPACE); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Creating Version 5 UUID with Custom Namespace in JavaScript\nDESCRIPTION: Demonstrates how to generate a version 5 UUID (namespace with SHA-1) using a custom namespace. This example imports the v5 function from the uuid library and creates a UUID based on a string and custom namespace.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v5 as uuidv5 } from 'uuid';\n\n// Define a custom namespace.  Readers, create your own using something like\n// https://www.uuidgenerator.net/\nconst MY_NAMESPACE = '1b671a64-40d5-491e-99b0-da01ff1f3341';\n\nuuidv5('Hello, World!', MY_NAMESPACE); // ⇨ '630eb68f-e0fa-5ecc-887a-7c7a62614681'\n```\n\n----------------------------------------\n\nTITLE: Generating UUID v5 with RFC URL Namespace in JavaScript\nDESCRIPTION: Creates an RFC version 5 UUID using the predefined URL namespace from the RFC specification. This example shows how to generate a UUID v5 from a URL string using the built-in URL namespace.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v5 as uuidv5 } from 'uuid';\n\nuuidv5('https://www.w3.org/', uuidv5.URL); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Creating UUID v4 with Predefined Random Values\nDESCRIPTION: Example of generating a version 4 UUID with predefined random values using the options parameter.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid';\n\nconst v4options = {\n  random: Uint8Array.of(\n    0x10,\n    0x91,\n    0x56,\n    0xbe,\n    0xc4,\n    0xfb,\n    0xc1,\n    0xea,\n    0x71,\n    0xb4,\n    0xef,\n    0xe1,\n    0x67,\n    0x1c,\n    0x58,\n    0x36\n  ),\n};\nuuidv4(v4options); // ⇨ '109156be-c4fb-41ea-b1b4-efe1671c5836'\n```\n\n----------------------------------------\n\nTITLE: UUID V4 Generation with Custom Random Values\nDESCRIPTION: Shows how to generate a v4 UUID using predefined random values.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v4 as uuidv4 } from 'uuid';\n\nconst v4options = {\n  random: Uint8Array.of(\n    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea,\n    0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36\n  ),\n};\nuuidv4(v4options);\n```\n\n----------------------------------------\n\nTITLE: UUID Parse Function\nDESCRIPTION: Demonstrates parsing a UUID string into a byte array.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse as uuidParse } from 'uuid';\n\nuuidParse('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b');\n```\n\n----------------------------------------\n\nTITLE: Parsing UUID String to Byte Array\nDESCRIPTION: Example of using the parse function to convert a UUID string to an array of bytes.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { parse as uuidParse } from 'uuid';\n\n// Parse a UUID\nuuidParse('6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b'); // ⇨\n// Uint8Array(16) [\n//   110, 192, 189, 127,  17,\n//   192,  67, 218, 151,  94,\n//    42, 138, 217, 235, 174,\n//    11\n// ]\n```\n\n----------------------------------------\n\nTITLE: UUID Stringify Function\nDESCRIPTION: Shows how to convert a byte array back into a UUID string.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nimport { stringify as uuidStringify } from 'uuid';\n\nconst uuidBytes = Uint8Array.of(\n  0x6e, 0xc0, 0xbd, 0x7f, 0x11, 0xc0, 0x43, 0xda,\n  0x97, 0x5e, 0x2a, 0x8a, 0xd9, 0xeb, 0xae, 0x0b\n);\n\nuuidStringify(uuidBytes);\n```\n\n----------------------------------------\n\nTITLE: Converting UUID from Version 6 to Version 1 in JavaScript\nDESCRIPTION: Shows how to convert a Version 6 UUID to a Version 1 UUID. This utility function allows for interoperability between different UUID versions.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v6ToV1 } from 'uuid';\n\nv6ToV1('1ef22c49-2f62-6d9e-97e9-325096b39f47'); // ⇨ '92f62d9e-22c4-11ef-97e9-325096b39f47'\n```\n\n----------------------------------------\n\nTITLE: Converting UUID v1 to v6\nDESCRIPTION: Example of converting a version 1 UUID to a version 6 UUID using the v1ToV6 function.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v1ToV6 } from 'uuid';\n\nv1ToV6('92f62d9e-22c4-11ef-97e9-325096b39f47'); // ⇨ '1ef22c49-2f62-6d9e-97e9-325096b39f47'\n```\n\n----------------------------------------\n\nTITLE: Converting UUID v6 to v1 in JavaScript\nDESCRIPTION: Converts a UUID from version 6 format to version 1 format. This utility function transforms the reordered timestamp fields of a v6 UUID back to the v1 format.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nimport { v6ToV1 } from 'uuid';\n\nv6ToV1('1ef22c49-2f62-6d9e-97e9-325096b39f47'); // RESULT\n```\n\n----------------------------------------\n\nTITLE: Using React Native Polyfill for UUID Generation\nDESCRIPTION: Shows how to use the react-native-get-random-values polyfill to make UUID.js work in React Native environments. This example demonstrates the proper import order to ensure compatibility.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'react-native-get-random-values';\nimport { v4 as uuidv4 } from 'uuid';\n```\n\n----------------------------------------\n\nTITLE: Resolving getRandomValues Polyfill in React Native\nDESCRIPTION: Example showing how to resolve the 'getRandomValues() not supported' error in React Native environments by importing a polyfill before using the uuid library.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nimport 'react-native-get-random-values';\nimport { v4 as uuidv4 } from 'uuid';\n```\n\n----------------------------------------\n\nTITLE: ESM Import Example - UUID v8.0\nDESCRIPTION: Example showing the new ESM import syntax for UUID v8.0+, demonstrating the migration from default export to named exports.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n-import uuid from 'uuid';\n-console.log(uuid.v4()); // -> 'cd6c3b08-0adc-4f4b-a6ef-36087a1c9869'\n+import { v4 as uuidv4 } from 'uuid';\n+uuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n```\n\n----------------------------------------\n\nTITLE: CommonJS Require Example - UUID v8.0\nDESCRIPTION: Example showing the new CommonJS require syntax for UUID v8.0+, demonstrating the migration from deep requires to named exports.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n-const uuidv4 = require('uuid/v4');\n+const { v4: uuidv4 } = require('uuid');\nuuidv4();\n```\n\n----------------------------------------\n\nTITLE: Accessing MAX UUID Constant\nDESCRIPTION: Example of importing and using the MAX UUID constant, which represents a UUID with all ones.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MAX as MAX_UUID } from 'uuid';\n\nMAX_UUID; // ⇨ 'ffffffff-ffff-ffff-ffff-ffffffffffff'\n```\n\n----------------------------------------\n\nTITLE: UUID MAX Usage\nDESCRIPTION: Shows how to use the MAX UUID constant (all ones).\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport { MAX as MAX_UUID } from 'uuid';\n\nMAX_UUID;\n```\n\n----------------------------------------\n\nTITLE: UUID NIL Usage\nDESCRIPTION: Shows how to use the NIL UUID constant (all zeros).\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nimport { NIL as NIL_UUID } from 'uuid';\n\nNIL_UUID;\n```\n\n----------------------------------------\n\nTITLE: Generating UUIDs from Command Line\nDESCRIPTION: Example showing how to generate UUIDs directly from the command line using the npx command. The uuid package provides a CLI interface for various UUID generation methods.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_21\n\nLANGUAGE: shell\nCODE:\n```\n$ npx uuid\nddeb27fb-d9a0-4624-be4d-4615062daed4\n```\n\n----------------------------------------\n\nTITLE: Displaying UUID CLI Help Information\nDESCRIPTION: Shows the help information for the UUID command-line interface. This provides details on the available commands and options for generating different UUID versions via CLI.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README_js.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ npx uuid --help\n\nUsage:\n  uuid\n  uuid v1\n  uuid v3 <name> <namespace uuid>\n  uuid v4\n  uuid v5 <name> <namespace uuid>\n  uuid v7\n  uuid --help\n\nNote: <namespace uuid> may be \"URL\" or \"DNS\" to use the corresponding UUIDs\ndefined by RFC9562\n```\n\n----------------------------------------\n\nTITLE: Displaying UUID CLI Help Information\nDESCRIPTION: Shows the help information for the UUID command line interface. This includes all available options and supported UUID versions for command line generation.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/README.md#2025-04-21_snippet_22\n\nLANGUAGE: shell\nCODE:\n```\n$ npx uuid --help\n\nUsage:\n  uuid\n  uuid v1\n  uuid v3 <name> <namespace uuid>\n  uuid v4\n  uuid v5 <name> <namespace uuid>\n  uuid v7\n  uuid --help\n\nNote: <namespace uuid> may be \"URL\" or \"DNS\" to use the corresponding UUIDs\ndefined by RFC9562\n```\n\n----------------------------------------\n\nTITLE: Comparing UUID.js Bundle Sizes with Tree Shaking\nDESCRIPTION: Shell command showing the file size differences between importing all UUID functionality versus specific versions (v1, v4, v7), demonstrating effective tree shaking.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/browser-rollup/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ du -sh dist/*\n 20K  dist/all.js\n8.0K  dist/v1.js\n4.0K  dist/v4.js\n4.0K  dist/v7.js\n```\n\n----------------------------------------\n\nTITLE: Example UUID Benchmark Output\nDESCRIPTION: This snippet shows the example output of running UUID benchmarks, including performance metrics for different UUID versions. It demonstrates operations per second for uuidv1, uuidv4, uuidv3, and uuidv5, as well as array filling operations.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/benchmark/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nStarting. Tests take ~1 minute to run ...\nuuidv1() x 1,306,861 ops/sec ±2.62% (85 runs sampled)\nuuidv1() fill existing array x 4,750,515 ops/sec ±2.76% (88 runs sampled)\nuuidv4() x 302,174 ops/sec ±3.06% (81 runs sampled)\nuuidv4() fill existing array x 359,703 ops/sec ±3.67% (82 runs sampled)\nuuidv3() x 105,667 ops/sec ±3.84% (79 runs sampled)\nuuidv5() x 110,886 ops/sec ±2.55% (81 runs sampled)\nFastest is uuidv1() fill existing array\n```\n\n----------------------------------------\n\nTITLE: Webpack Output Demonstrating Tree Shaking for UUID\nDESCRIPTION: This output shows the result of Webpack bundling, highlighting the successful tree shaking for UUID v1 and v4. It demonstrates that only the necessary code is included in each bundle, optimizing the file sizes.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/browser-webpack/README.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n Asset      Size  Chunks             Chunk Names\nall.js  8.54 KiB       0  [emitted]  all\n v1.js   2.6 KiB       1  [emitted]  v1\n v4.js     2 KiB       2  [emitted]  v4\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests for UUID.js with Webpack\nDESCRIPTION: Commands to install project dependencies and run tests for the UUID.js project. This will execute Webpack to bundle the application and then run the resulting bundles from the dist directory.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/node-webpack/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing and Running UUID.js Browser Example\nDESCRIPTION: Commands to install dependencies and start the UUID.js browser example with Rollup.js.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/browser-rollup/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing and Running UUID JS Browser Example with npm\nDESCRIPTION: Commands to install dependencies and start the UUID JS browser example. After running these commands, users should navigate to the example.html file in their browser.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/browser-esmodules/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\nnpm start\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Running Tests for UUID Node.js Project\nDESCRIPTION: This snippet shows the commands to install project dependencies and run tests using npm. It assumes the project uses Jest for testing the UUID implementation.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/node-jest/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for UUID Benchmarks\nDESCRIPTION: This command installs the necessary dependencies for running the UUID benchmarks.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/examples/benchmark/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Running Tests for UUID.js\nDESCRIPTION: Command to execute the test suite for the UUID.js project. This ensures all tests pass before submitting a pull request.\nSOURCE: https://github.com/uuidjs/uuid/blob/main/CONTRIBUTING.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm test\n```"
  }
]