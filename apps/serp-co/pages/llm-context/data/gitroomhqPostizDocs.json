[
  {
    "owner": "gitroomhq",
    "repo": "postiz-docs",
    "content": "TITLE: Creating or Updating Posts with Postiz API (HTTP POST)\nDESCRIPTION: This endpoint allows creating or updating posts. It accepts a payload with post type, date, and an array of post objects containing integration details, content, and optional settings. The response includes the ID of the created or updated post.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/public-api.mdx#2025-04-16_snippet_3\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.postiz.com/public/v1/posts\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"draft|schedule|now\",\n  \"date\": \"2024-12-14T08:18:54.274Z\",\n  \"posts\": [\n    {\n      \"integration\": {\n        \"id\": \"asdfsad23rwdfasfsddc\"\n      },\n      \"value\": [\n        {\n          \"content\": \"This is my cool post\",\n          \"id\": \"Only if you want to edit an existing post\",\n          \"image\": [\n            {\n              \"id\": \"string\"\n            }\n          ]\n        }\n      ],\n      \"group\": \"uniqueId for all the posts in the same group\",\n      \"settings\": {\n        \"[key]\": \"check each integration DTOs in the files, or wait for the error on a new request\"\n      }\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"e639003b-f727-4a1e-87bd-74a2c48ae41e\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Posts with Postiz API (HTTP GET)\nDESCRIPTION: This endpoint retrieves a list of posts. It accepts query parameters for filtering by display type (day, week, month) and date ranges. The response includes post details such as content, publish date, and associated integration information.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/public-api.mdx#2025-04-16_snippet_2\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.postiz.com/public/v1/posts\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"posts\": [\n        {\n            \"id\": \"cm4gklk8o00008copo77fa0f8\",\n            \"content\": \"blabla\",\n            \"publishDate\": \"2024-12-09T05:06:00.000Z\",\n            \"releaseURL\": \"https://twitter.com/nevodavid/status/1865986385708204316\",\n            \"state\": \"QUEUE|PUBLISHED|ERROR|DRAFT\",\n            \"integration\": {\n                \"id\": \"cm4ean69r0003w8w1cdomox9n\",\n                \"providerIdentifier\": \"x\",\n                \"name\": \"Nevo David\",\n                \"picture\": \"https://uploads.gitroom.com/5g9mEIVCAq.jpeg\"\n            }\n        }\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Postiz Environment Variables\nDESCRIPTION: Sample .env file content for configuring Postiz. This includes database connection strings, JWT secret, URLs, and various API keys for different services.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/development.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Required Settings\nDATABASE_URL=\"postgresql://postiz-user:postiz-password@localhost:5432/postiz-db-local\"\nREDIS_URL=\"redis://localhost:6379\"\nJWT_SECRET=\"random string for your JWT secret, make it long\"\nFRONTEND_URL=\"http://localhost:4200\"\nNEXT_PUBLIC_BACKEND_URL=\"http://localhost:3000\"\nBACKEND_INTERNAL_URL=\"http://localhost:3000\"\n\n# Optional. Your upload directory path if you host your files locally.\nUPLOAD_DIRECTORY=\"/opt/postiz/uploads/\"\n\n# Optional: your upload directory slug if you host your files locally.\nNEXT_PUBLIC_UPLOAD_STATIC_DIRECTORY=\"\"\n\n# Your email provider, optional\nEMAIL_PROVIDER=\"resend|nodemailer\"\nRESEND_API_KEY=\"re_1234567890\" # api key if you choose resend\nEMAIL_HOST=\"smtp.gmail.com\" # smtp host if you choose nodemailer\nEMAIL_PORT=\"465\" # smtp port if you choose nodemailer\nEMAIL_SECURE=\"true\" # smtp secure if you choose nodemailer\nEMAIL_USER=\"user\" # smtp user if you choose nodemailer\nEMAIL_PASS=\"pass\" # smtp pass if you choose nodemailer\n\n## These are dummy values, you must create your own from Cloudflare.\n## Remember to set your public internet IP address in the allow-list for the API token.\nCLOUDFLARE_ACCOUNT_ID=\"QhcMSXQyPuMCRpSQcSYdEuTYgHeCXHbu\"\nCLOUDFLARE_ACCESS_KEY=\"dcfCMSuFEeCNfvByUureMZEfxWJmDqZe\"\nCLOUDFLARE_SECRET_ACCESS_KEY=\"zTTMXBmtyLPwHEdpACGHgDgzRTNpTJewiNriLnUS\"\nCLOUDFLARE_BUCKETNAME=\"postiz\"\nCLOUDFLARE_BUCKET_URL=\"https://QhcMSXQyPuMCRpSQcSYdEuTYgHeCXHbu.r2.cloudflarestorage.com/\"\nCLOUDFLARE_REGION=\"auto\"\n\n# Social Media API Settings\nX_API_KEY=\"Twitter API key for normal oAuth not oAuth2\"\nX_API_SECRET=\"Twitter API secret for normal oAuth not oAuth2\"\nLINKEDIN_CLIENT_ID=\"Linkedin Client ID\"\nLINKEDIN_CLIENT_SECRET=\"Linkedin Client Secret\"\nREDDIT_CLIENT_ID=\"Reddit Client ID\"\nREDDIT_CLIENT_SECRET=\"Linkedin Client Secret\"\nGITHUB_CLIENT_ID=\"GitHub Client ID\"\nGITHUB_CLIENT_SECRET=\"GitHub Client Secret\"\n\n# AI\nOPENAI_API_KEY=\"OpenAI API key\"\n\n# Developer Settings\nNX_ADD_PLUGINS=false\nIS_GENERAL=\"true\" # required for now\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for Postiz Deployment\nDESCRIPTION: This YAML configuration defines the services, volumes, and networks for deploying Postiz using Docker Compose. It includes containers for the Postiz application, PostgreSQL database, and Redis, along with necessary environment variables and volume mappings.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/docker-compose.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  postiz:\n    image: ghcr.io/gitroomhq/postiz-app:latest\n    container_name: postiz\n    restart: always\n    environment:\n      # You must change these. Replace `postiz.your-server.com` with your DNS name - this needs to be exactly the URL you're accessing Postiz on.\n      MAIN_URL: \"https://postiz.your-server.com\"\n      FRONTEND_URL: \"https://postiz.your-server.com\"\n      NEXT_PUBLIC_BACKEND_URL: \"https://postiz.your-server.com/api\"\n      JWT_SECRET: \"random string that is unique to every install - just type random characters here!\"\n\n      # These defaults are probably fine, but if you change your user/password, update it in the\n      # postiz-postgres or postiz-redis services below.\n      DATABASE_URL: \"postgresql://postiz-user:postiz-password@postiz-postgres:5432/postiz-db-local\"\n      REDIS_URL: \"redis://postiz-redis:6379\"\n      BACKEND_INTERNAL_URL: \"http://localhost:3000\"\n      IS_GENERAL: \"true\" # Required for self-hosting.\n      # The container images are pre-configured to use /uploads for file storage.\n      # You probably should not change this unless you have a really good reason!\n      STORAGE_PROVIDER: \"local\"\n      UPLOAD_DIRECTORY: \"/uploads\"\n      NEXT_PUBLIC_UPLOAD_DIRECTORY: \"/uploads\"\n    volumes:\n      - postiz-config:/config/\n      - postiz-uploads:/uploads/\n    ports:\n      - 5000:5000\n    networks:\n      - postiz-network\n    depends_on:\n      postiz-postgres:\n        condition: service_healthy\n      postiz-redis:\n        condition: service_healthy\n\n  postiz-postgres:\n    image: postgres:17-alpine\n    container_name: postiz-postgres\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: postiz-password\n      POSTGRES_USER: postiz-user\n      POSTGRES_DB: postiz-db-local\n    volumes:\n      - postgres-volume:/var/lib/postgresql/data\n    networks:\n      - postiz-network\n    healthcheck:\n      test: pg_isready -U postiz-user -d postiz-db-local\n      interval: 10s\n      timeout: 3s\n      retries: 3\n  postiz-redis:\n    image: redis:7.2\n    container_name: postiz-redis\n    restart: always\n    healthcheck:\n      test: redis-cli ping\n      interval: 10s\n      timeout: 3s\n      retries: 3\n    volumes:\n      - postiz-redis-data:/data\n    networks:\n      - postiz-network\n\n\nvolumes:\n  postgres-volume:\n    external: false\n\n  postiz-redis-data:\n    external: false\n\n  postiz-config:\n    external: false\n\n  postiz-uploads:\n    external: false\n\nnetworks:\n  postiz-network:\n    external: false\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Postiz API (HTTP POST)\nDESCRIPTION: This endpoint allows uploading a new file using form-data. It accepts a 'file' parameter and returns details about the uploaded file, including its ID, name, path, and associated timestamps.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/public-api.mdx#2025-04-16_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nPOST https://api.postiz.com/public/v1/upload\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"e639003b-f727-4a1e-87bd-74a2c48ae41e\",\n  \"name\": \"vXJYn8EzSB.png\",\n  \"path\": \"https://uploads.gitroom.com/vXJYn8EzSB.png\",\n  \"organizationId\": \"85460a39-6329-4cf4-a252-187ce89a3480\",\n  \"createdAt\": \"2024-12-14T08:18:54.274Z\",\n  \"updatedAt\": \"2024-12-14T08:18:54.274Z\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL and Redis Docker Containers\nDESCRIPTION: Commands to run PostgreSQL and Redis as single Docker containers for development purposes. This sets up the required database and caching services for Postiz.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/development.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -e POSTGRES_USER=root -e POSTGRES_PASSWORD=your_password --name postgres -p 5432:5432 -d postgres\ndocker run --name redis -p 6379:6379 -d redis\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for Postiz on Coolify\nDESCRIPTION: Complete Docker Compose configuration for setting up Postiz with PostgreSQL and Redis on Coolify. Includes environment variables configuration, volume mappings, networking, and health checks for all required services.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/coolify.mdx#2025-04-16_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  postiz:\n    image: ghcr.io/gitroomhq/postiz-app:latest\n    container_name: postiz\n    restart: always\n    environment:\n      # You must change these. `yourServerAddress` this needs to be exactly the URL you're accessing Postiz on.\n      MAIN_URL: \"https://postiz.your-server.com\"\n      FRONTEND_URL: \"https://postiz.your-server.com\"\n      NEXT_PUBLIC_BACKEND_URL: \"https://postiz.your-server.com/api\"\n      JWT_SECRET: \"random string that is unique to every install - just type random characters here!\"\n\n      # These defaults are probably fine, but if you change your user/password, update it in the \n      # postiz-postgres or postiz-redis services below.\n      DATABASE_URL: \"postgresql://postiz-user:postiz-password@postiz-postgres:5432/postiz-db-local\"\n      REDIS_URL: \"redis://postiz-redis:6379\"\n      BACKEND_INTERNAL_URL: \"http://localhost:3000\"\n      IS_GENERAL: \"true\" # Required for self-hosting.\n\n      # The container images are pre-configured to use /uploads for file storage.\n      # You probably should not change this unless you have a really good reason!\n      STORAGE_PROVIDER: \"local\"\n      UPLOAD_DIRECTORY: \"/uploads\"\n      NEXT_PUBLIC_UPLOAD_DIRECTORY: \"/uploads\"\n    volumes:\n      - postiz-config:/config/\n      - postiz-uploads:/uploads/\n    ports:\n      - 5000:5000\n    networks:\n      - postiz-network\n    labels:\n      - \"traefik.enable=true\"\n      - \"traefik.https.routers.<unique_router_name>.rule=Host(`coolify.io`) && PathPrefix(`/`)\"\n      - \"traefik.https.routers.<unique_router_name>.entryPoints=https\"\n    depends_on:\n      postiz-postgres:\n        condition: service_healthy\n      postiz-redis:\n        condition: service_healthy\n\n  postiz-postgres:\n    image: postgres:14.5\n    container_name: postiz-postgres\n    restart: always\n    environment:\n      POSTGRES_PASSWORD: postiz-password\n      POSTGRES_USER: postiz-user\n      POSTGRES_DB: postiz-db-local\n    volumes:\n      - postgres-volume:/var/lib/postgresql/data\n    ports:\n      - 5432:5432\n    networks:\n      - postiz-network\n    healthcheck:\n      test: pg_isready -U postiz-user -d postiz-db-local\n      interval: 10s\n      timeout: 3s\n      retries: 3\n  postiz-redis:\n    image: redis:7.2\n    container_name: postiz-redis\n    restart: always\n    ports:\n      - 6379:6379\n    healthcheck:\n      test: redis-cli ping\n      interval: 10s\n      timeout: 3s\n      retries: 3\n    volumes:\n      - postiz-redis-data:/data\n    networks:\n      - postiz-network\n\n\nvolumes:\n  postgres-volume:\n    external: false\n\n  postiz-redis-data:\n    external: false\n\n  postiz-config:\n    external: false\n\nnetworks:\n  postiz-network:\n    external: false\n```\n\n----------------------------------------\n\nTITLE: Creating Postiz Docker Container\nDESCRIPTION: This command creates a Docker container for Postiz, setting up volume mounts for uploads and configuration, and exposing port 5000. It uses the latest image from the GitHub Container Registry.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/docker.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker create --name postiz -v postiz-uploads:/uploads/ -v postiz-config:/config/ -p 5000:5000 ghcr.io/gitroomhq/postiz-app:latest\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx as Reverse Proxy with Enhanced Security\nDESCRIPTION: This Nginx configuration sets up a secure reverse proxy with HTTP/2, strong SSL settings, and various security headers for a Postiz application.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_5\n\nLANGUAGE: nginx\nCODE:\n```\n    # HTTP -> HTTPS Redirection\n    server {\n        listen 80;\n        listen [::]:80;  # IPv6 support\n        server_name <subdomain.domain.tld>;  # CHANGE HERE\n\n        location /.well-known/acme-challenge/ {\n            root /var/www/certbot;\n        }\n\n        location / {\n            return 301 https://$host$request_uri;\n        }\n\n        # Hide NGINX version for security reasons\n        server_tokens off;\n    }\n\n    # HTTPS Configuration\n    server {\n        listen 443 ssl http2;\n        listen [::]:443 ssl http2;  # Enable HTTP/2 and IPv6 support if you need\n        server_name <subdomain.domain.tld>; # CHANGE HERE\n\n        # Hide NGINX version\n        server_tokens off;\n\n        # SSL Certificates\n        ssl_certificate /etc/letsencrypt/live/<subdomain.domain.tld>/fullchain.pem;  # CHANGE HERE\n        ssl_certificate_key /etc/letsencrypt/live/<subdomain.domain.tld>/privkey.pem;  # CHANGE HERE\n        ssl_trusted_certificate /etc/letsencrypt/live/<subdomain.domain.tld>/chain.pem;  # CHANGE HERE\n\n        # Security: Stronger SSL Configuration\n        ssl_session_cache shared:SSL:10m;  # Cache SSL sessions\n        ssl_session_timeout 1d;  # Set session timeout to 1 day\n        ssl_session_tickets off;  # Disable SSL session tickets\n\n        # Use only modern SSL/TLS protocols (disables older insecure ones)\n        ssl_protocols TLSv1.2 TLSv1.3;\n\n        # Configure SSL ciphers (strong encryption algorithms)\n        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;\n        ssl_prefer_server_ciphers off;  # Allow clients to prefer their ciphers\n\n        # Diffie-Hellman parameter for Perfect Forward Secrecy (PFS)\n        ssl_dhparam /etc/ssl/certs/dhparam.pem;  # Generate with `sudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048`\n\n        # OCSP Stapling for improved SSL/TLS performance\n        ssl_stapling on;\n        ssl_stapling_verify on;\n\n        # DNS resolver for OCSP\n        resolver 1.1.1.1 1.0.0.1 valid=300s;\n        resolver_timeout 5s;\n\n        # some HTTP Security Headers\n        add_header Strict-Transport-Security \"max-age=63072000; includeSubDomains; preload\" always;  # HSTS\n        add_header X-Frame-Options \"SAMEORIGIN\" always;  # Prevent Clickjacking\n        add_header X-Content-Type-Options \"nosniff\" always;  # Prevent MIME-type sniffing\n        add_header X-XSS-Protection \"1; mode=block\" always;  # XSS Protection\n        add_header Referrer-Policy \"no-referrer\" always;  # Better privacy control\n        add_header Permissions-Policy \"geolocation=(self), microphone=(), camera=()\" always;  # Limit browser permissions\n\n        # Reverse Proxy to Postiz application\n        location / {\n            proxy_pass http://localhost:5000;\n            proxy_http_version 1.1;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # WebSocket Support\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n        }\n\n        # Disable directory listing for security\n        autoindex off;\n\n        # Increase maximum post size to prevent 413 error with images larger than 2MB (changes max size to 100MB)\n        client_max_body_size 100M;\n\n        # Enable Gzip compression for better performance\n        gzip on;\n        gzip_comp_level 6;\n        gzip_min_length 1100;\n        gzip_buffers 4 32k;\n        gzip_proxied any;\n        gzip_types text/plain text/css text/javascript application/json application/xml image/svg+xml;\n\n        # Optional Access/Error Logging\n        access_log /var/log/nginx/<subdomain.domain.tld>.log; # CHANGE HERE\n        error_log /var/log/nginx/<subdomain.domain.tld>.log; # CHANGE HERE\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Caddy Reverse Proxy for Postiz\nDESCRIPTION: Basic Caddyfile configuration to set up reverse proxy for Postiz running on port 5000. Includes internal TLS configuration for secure communication.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/caddy.mdx#2025-04-16_snippet_0\n\nLANGUAGE: caddy\nCODE:\n```\npostiz.example.lan {\n        reverse_proxy * localhost:5000\n        tls internal\n}\n```\n\n----------------------------------------\n\nTITLE: NodeMailer SMTP Configuration\nDESCRIPTION: Complete SMTP configuration for NodeMailer including host, port, security settings, and authentication credentials.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/emails.mdx#2025-04-16_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nEMAIL_PROVIDER: \"nodemailer\"\nEMAIL_HOST: \"smtp.gmail.com\" # smtp host if you choose nodemailer\nEMAIL_PORT: \"465\" # smtp port if you choose nodemailer\nEMAIL_SECURE: \"true\" # smtp secure if you choose nodemailer\nEMAIL_USER: \"user\" # smtp user if you choose nodemailer\nEMAIL_PASS: \"pass\" # smtp pass if you choose nodemailer\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth2 Social Provider Class in TypeScript\nDESCRIPTION: Base implementation template for creating a new OAuth2-based social media provider class. Includes methods for token refresh, authentication URL generation, user authentication, and content posting.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/create-provider.mdx#2025-04-16_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  AuthTokenDetails,\n  PostDetails,\n  PostResponse,\n  SocialProvider,\n} from '@gitroom/nestjs-libraries/integrations/social/social.integrations.interface';\n\nexport class XProvider implements SocialProvider {\n  identifier = 'providerName';\n  name = 'Provider Name';\n  async refreshToken(refreshToken: string): Promise<AuthTokenDetails> {\n    ...refresh the token\n  }\n\n  async generateAuthUrl() {\n    ...generate the auth url\n  }\n\n  async authenticate(params: { code: string; codeVerifier: string }) {\n    ...authenticate the user\n  }\n\n  async post(\n    id: string,\n    accessToken: string,\n    postDetails: PostDetails<DTOClassName>[]\n  ): Promise<PostResponse[]> {\n    ...post the content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Simple Nginx Reverse Proxy\nDESCRIPTION: This Nginx configuration sets up a basic reverse proxy for a Postiz application with SSL support.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_6\n\nLANGUAGE: nginx\nCODE:\n```\n    # HTTP -> HTTPS Redirection\n    server {\n        listen 80;\n        server_name <subdomain.domain.tld>; # CHANGE HERE\n\n        # Location for Let's Encrypt validation\n        location /.well-known/acme-challenge/ {\n            root /var/www/certbot;\n        }\n\n        return 301 https://$host$request_uri;  # Redirect all traffic to HTTPS\n    }\n\n    # HTTPS Configuration\n    server {\n        listen 443 ssl;\n        server_name <subdomain.domain.tld>; # CHANGE HERE\n\n        # SSL certificate\n        ssl_certificate /etc/letsencrypt/live/<subdomain.domain.tld>/fullchain.pem; # CHANGE HERE\n        ssl_certificate_key /etc/letsencrypt/live/<subdomain.domain.tld>/privkey.pem; # CHANGE HERE\n\n        # Proxy requests to Postiz running on port 5000\n        location / {\n            proxy_pass http://localhost:5000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n            proxy_set_header X-Forwarded-Proto $scheme;\n\n            # WebSocket Support\n            proxy_set_header Upgrade $http_upgrade;\n            proxy_set_header Connection \"upgrade\";\n        }\n\n        # Optional Access/Error Logging\n        access_log /var/log/nginx/<subdomain.domain.tld>.log; # CHANGE HERE\n        error_log /var/log/nginx/<subdomain.domain.tld>.log; # CHANGE HERE\n    }\n```\n\n----------------------------------------\n\nTITLE: Visualizing Postiz Architecture with Mermaid Flow Chart\nDESCRIPTION: This mermaid flowchart illustrates the relationship between Postiz's four main services (Frontend, Backend, Cron, and Worker) and its three external services (Redis Queue, SQL Database, and Storage). The diagram shows data flow and service dependencies through directional arrows.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/howitworks.mdx#2025-04-16_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\nflowchart LR;\n    classDef ext fill:#8ED14F,color:black,stroke:#fff\n    classDef svc fill:#9900e6,color:white,stroke:#fff\n\n    frontend[Frontend Service]:::svc\n    backend[Backend Service]:::svc\n    cron[Cron Service]:::svc\n    workers[Worker Service]:::svc\n    redis[Redis Queue]:::ext\n    db[SQL Database]:::ext\n    storage[Storage]:::ext\n\n\tfrontend --> backend\n    backend --> db\n    backend --> redis\n    cron <--> redis\n    workers --> storage\n    workers --> db\n    redis --> workers\n    backend --> storage\n\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Policy for R2 Bucket\nDESCRIPTION: JSON configuration for CORS policy settings including allowed origins, methods, headers, and expose headers with maximum age settings.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/r2.mdx#2025-04-16_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"AllowedOrigins\": [\n      \"http://localhost:4200\",\n      \"https://yourDomain.com\"\n    ],\n    \"AllowedMethods\": [\n      \"GET\",\n      \"POST\",\n      \"HEAD\",\n      \"PUT\",\n      \"DELETE\"\n    ],\n    \"AllowedHeaders\": [\n      \"Authorization\",\n      \"x-amz-date\",\n      \"x-amz-content-sha256\",\n      \"content-type\"\n    ],\n    \"ExposeHeaders\": [\n      \"ETag\",\n      \"Location\"\n    ],\n    \"MaxAgeSeconds\": 3600\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Integrations with Postiz API (HTTP GET)\nDESCRIPTION: This endpoint retrieves all added integrations. It requires an API key in the Authorization header and returns an array of integration objects with details like ID, name, identifier, and associated customer information.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/public-api.mdx#2025-04-16_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://api.postiz.com/public/v1/integrations\n```\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": \"asdfasf2342dsaxfcsf\",\n    \"name\": \"Nevo David\",\n    \"identifier\": \"facebook\",\n    \"picture\": \"https://upload.postiz.com/picture.png\",\n    \"disabled\": false,\n    \"profile\": \"nevo_david\",\n    \"customer\": {\n      \"id\": \"asdfasf2342dsaxfcsfsadfsadf\",\n      \"name\": \"My Customer\"\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Setting DATABASE_URL for Postiz Configuration\nDESCRIPTION: Configures the database connection string for Postiz. While PostgreSQL is shown in the example, Postiz uses Prisma and can potentially support other databases like MariaDB.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/reference.mdx#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npostgresql://postiz-user:postiz-password@localhost:5432/postiz-db-local\n```\n\n----------------------------------------\n\nTITLE: Configuring R2 Environment Variables in dotenv\nDESCRIPTION: Environment variables required for Cloudflare R2 configuration including account ID, access keys, bucket name, and region settings.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/r2.mdx#2025-04-16_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nCLOUDFLARE_ACCOUNT_ID=\"accountId\"\nCLOUDFLARE_ACCESS_KEY=\"accessKey\"\nCLOUDFLARE_SECRET_ACCESS_KEY=\"secretAccessKey\"\nCLOUDFLARE_BUCKETNAME=\"bucketName\"\nCLOUDFLARE_REGION=\"region (like wnam)\"\n```\n\n----------------------------------------\n\nTITLE: Network Diagram for Postiz Setup using Mermaid\nDESCRIPTION: This Mermaid diagram illustrates the network setup for Postiz, showing the flow from the user's browser through a reverse proxy to the internal services and databases. It visualizes the connections between different components and their respective ports.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/installation-pre-reqs.mdx#2025-04-16_snippet_1\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD;\n\tA[Your Browser] -->|HTTPS 443/tcp| B[Your Reverse Proxy]\n\tB -->|HTTP 5000/tcp| C[\"Internal Proxy (Caddy)\"]\n\n\tsubgraph \"Postiz Container\"\n\tC -->|4200/tcp| D[Frontend Service]\n\tC -->|3000/tcp| E[Backend Service]\n    C -->|/api| H[uploads]\n\tend\n\n\tE -->|5432/tcp| F[Postgres Container]\n\tE -->|6379/tcp| G[Redis Container]\n```\n\n----------------------------------------\n\nTITLE: Running PostgreSQL and Redis with Docker Compose\nDESCRIPTION: Command to start PostgreSQL and Redis services using a docker-compose file. This is an alternative to running individual containers.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/development.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f \"docker-compose.dev.yaml\" up\n```\n\n----------------------------------------\n\nTITLE: Setting FRONTEND_URL for Postiz Configuration\nDESCRIPTION: Specifies the URL for the frontend of the Postiz application. This is a required setting for proper functionality.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/reference.mdx#2025-04-16_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://postiz.example.lan:4200\n```\n\n----------------------------------------\n\nTITLE: Creating Provider Frontend Component in React\nDESCRIPTION: React component template for implementing provider settings and preview UI. Includes integration with custom hooks for settings management and provider-specific functionality.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/create-provider.mdx#2025-04-16_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { FC } from 'react';\nimport { withProvider } from '@gitroom/frontend/components/launches/providers/high.order.provider';\nimport { useSettings } from '@gitroom/frontend/components/launches/helpers/use.values';\nimport { useIntegration } from '@gitroom/frontend/components/launches/helpers/use.integration';\n\nconst ProviderPreview: FC = () => {\n  const { value } = useIntegration();\n  const settings = useSettings();\n\n  return (\n    ...Preview\n  );\n};\n\nconst ProviderSettings: FC = () => {\n  const form = useSettings();\n  const { date } = useIntegration();\n  return (\n    ...Settings\n  );\n};\n\nexport default withProvider(DevtoSettings, DevtoPreview, DTOClassName);\n```\n\n----------------------------------------\n\nTITLE: Configuring NEXT_PUBLIC_BACKEND_URL for Postiz\nDESCRIPTION: Sets the publicly accessible URL for the backend of the Postiz application. This is essential for client-side communication with the server.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/reference.mdx#2025-04-16_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://postiz.example.lan:3000\n```\n\n----------------------------------------\n\nTITLE: Deleting Posts with Postiz API (HTTP DELETE)\nDESCRIPTION: This endpoint allows deleting a specific post by its ID. It returns the ID of the deleted post in the response.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/public-api.mdx#2025-04-16_snippet_4\n\nLANGUAGE: http\nCODE:\n```\nDELETE https://api.postiz.com/public/v1/posts/:id\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"e639003b-f727-4a1e-87bd-74a2c48ae41e\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BACKEND_INTERNAL_URL for Postiz\nDESCRIPTION: Configures the internal URL for the backend when running everything on the same host or container. This is used for internal communication within the application.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/reference.mdx#2025-04-16_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://localhost:3000\n```\n\n----------------------------------------\n\nTITLE: Resend Email Provider Configuration\nDESCRIPTION: Environment variables required for setting up Resend as the email provider, including the API key configuration.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/emails.mdx#2025-04-16_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nEMAIL_PROVIDER=\"resend\"\nRESEND_API_KEY=\"<your-api-key-here>\"\n```\n\n----------------------------------------\n\nTITLE: Running Postiz Development Server\nDESCRIPTION: NPM command to start the Postiz development server.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/development.mdx#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Installing Postiz Dependencies\nDESCRIPTION: NPM command to install all required dependencies for the Postiz project.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/development.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Configuring REDIS_URL for Postiz\nDESCRIPTION: Sets the Redis connection URL for Postiz, which is a required setting for the application.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/reference.mdx#2025-04-16_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nredis://localhost:6379\n```\n\n----------------------------------------\n\nTITLE: Configuring YouTube OAuth Credentials in Environment Variables\nDESCRIPTION: Set the YouTube client ID and client secret in environment variables for authentication. These credentials are obtained from the Google Cloud Console after setting up the OAuth application.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/youtube.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nYOUTUBE_CLIENT_ID=\"\"\nYOUTUBE_CLIENT_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Email Provider Selection in Environment Variables\nDESCRIPTION: Environment variable to specify which email provider to use - either Resend or NodeMailer.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/emails.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nEMAIL_PROVIDER: \"resend|nodemailer\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook API Credentials in Environment Variables for Instagram Integration\nDESCRIPTION: Environment variable configuration for Facebook API credentials to enable Instagram integration through the Facebook Business option. These credentials need to be copied from the Meta developer dashboard after setting up the app.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/instagram.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nFACEBOOK_APP_ID=\"app id\"\nFACEBOOK_APP_SECRET=\"app secret\"\n```\n\n----------------------------------------\n\nTITLE: Setting Email Sender Details\nDESCRIPTION: Environment variables for configuring the sender name and email address used for all outgoing emails.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/emails.mdx#2025-04-16_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nEMAIL_FROM_NAME: \"Postiz Emailer\"\nEMAIL_FROM_ADDRESS: \"postiz@example.com\"\n```\n\n----------------------------------------\n\nTITLE: Setting Pinterest OAuth Credentials in Environment Variables\nDESCRIPTION: This snippet shows how to set the Pinterest client ID and client secret as environment variables. These credentials are obtained from the Pinterest Developer Dashboard and are required for authenticating with the Pinterest API.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/pinterest.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nPINTEREST_CLIENT_ID=\"\"\nPINTEREST_CLIENT_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Postiz Environment Variables for Reverse Proxy\nDESCRIPTION: Environment variable configuration required for Postiz to work correctly behind a reverse proxy. Defines main URL, frontend URL, and backend API URL.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/caddy.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nMAIN_URL=\"https://postiz.example.lan\"\nFRONTEND_URL=\"https://postiz.example.lan\"\nNEXT_PUBLIC_BACKEND_URL=\"https://postiz.example.lan/api\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn Credentials in Environment Variables\nDESCRIPTION: This snippet shows how to set up the LinkedIn Client ID and Client Secret in the .env file. These credentials are necessary for authenticating with the LinkedIn API.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/linkedin-page.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nLINKEDIN_CLIENT_ID=\"\"\nLINKEDIN_CLIENT_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Facebook OAuth Environment Variables\nDESCRIPTION: Environment variables configuration for Facebook OAuth integration, requiring the App ID and App Secret from the Facebook Developer Console.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/facebook.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nFACEBOOK_APP_ID=\"app id\"\nFACEBOOK_APP_SECRET=\"app secret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LinkedIn OAuth2 Environment Variables\nDESCRIPTION: Environment variable configuration for LinkedIn OAuth2 integration. Requires Client ID and Client Secret from the LinkedIn Developer Portal's Auth tab.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/linkedin.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nLINKEDIN_CLIENT_ID=\"\"\nLINKEDIN_CLIENT_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring TikTok Environment Variables\nDESCRIPTION: Environment variables configuration for TikTok integration, including client ID and secret credentials required for API authentication\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/tiktok.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nTIKTOK_CLIENT_ID=1234567890123456\nTIKTOK_CLIENT_SECRET=12345678901234567890123456789012\n```\n\n----------------------------------------\n\nTITLE: Setting Slack OAuth Credentials in Environment Variables\nDESCRIPTION: Configuration of Slack client ID and secret in environment variables required for OAuth authentication.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/slack.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nSLACK_ID=\"\"\nSLACK_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Setting Discord OAuth2 Credentials\nDESCRIPTION: Configuration for Discord client credentials in the environment variables file. These credentials are obtained from the Discord Developer Portal OAuth2 section.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/discord.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nDISCORD_CLIENT_ID=\"your_client_id\"\nDISCORD_CLIENT_SECRET=\"your_client_secret\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Instagram Standalone API Credentials in Environment Variables\nDESCRIPTION: Environment variable configuration for direct Instagram API integration without requiring Facebook Business. These Instagram-specific credentials need to be copied from the Instagram Basic Display panel in the Meta developer dashboard.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/instagram.mdx#2025-04-16_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nINSTAGRAM_APP_ID=\"app id\"\nINSTAGRAM_APP_SECRET=\"app secret\"\n```\n\n----------------------------------------\n\nTITLE: Setting Discord Bot Token\nDESCRIPTION: Configuration for Discord bot token in the environment variables file. This token is required to prevent 404 errors when adding Discord channels in the Postiz web interface.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/discord.mdx#2025-04-16_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nDISCORD_BOT_TOKEN_ID=\"your_bot_token\"\n```\n\n----------------------------------------\n\nTITLE: Setting Reddit OAuth Credentials in Environment Variables\nDESCRIPTION: This snippet shows how to set the Reddit client ID and client secret as environment variables. These credentials are obtained from the Reddit developers portal after creating a new app.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/reddit.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nREDDIT_CLIENT_ID=\"\"\nREDDIT_CLIENT_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring X API Credentials in Environment Variables\nDESCRIPTION: Environment variables configuration for storing X (Twitter) API credentials. Requires API Key and API Secret obtained from the Twitter Developer Portal.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/x.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nX_API_KEY=\"\"\nX_API_SECRET=\"\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Telegram Bot Token in Environment Variables\nDESCRIPTION: This snippet shows how to add the Telegram Bot Name and API Token to the .env file. The bot name should be added without the @ symbol, and the token is the one received from BotFather during bot creation.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/telegram.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nTELEGRAM_BOT_NAME=\"MyPostizBot_bot\"\nTELEGRAM_TOKEN=\"MyPostizBot token\"\n```\n\n----------------------------------------\n\nTITLE: Setting R2 Bucket URL in dotenv\nDESCRIPTION: Environment variable for specifying the custom domain URL for the R2 bucket.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/r2.mdx#2025-04-16_snippet_1\n\nLANGUAGE: dotenv\nCODE:\n```\nCLOUDFLARE_BUCKET_URL=\"https://customdomain.com\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Configuration\nDESCRIPTION: Configuration of Mastodon credentials in the .env file using the client ID and secret obtained from the API response.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/mastodon.mdx#2025-04-16_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nMASTODON_CLIENT_ID=\"shown in the output from the above command\"\nMASTODON_CLIENT_SECRET=\"shown in the output from the above command\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dribbble OAuth Environment Variables\nDESCRIPTION: Environment variables configuration for Dribbble OAuth authentication. Requires client ID and secret from Dribbble application registration.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/dribbble.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nDRIBBLE_CLIENT_ID=\"1234...\"\nDRIBBLE_CLIENT_SECRET=\"5678...\"\n```\n\n----------------------------------------\n\nTITLE: Registering Mastodon Client with API Request\nDESCRIPTION: Uses curl command to register a new client application with Mastodon.social API. The request includes client name, redirect URI, and required scopes for posting statuses and media.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/mastodon.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST -sS https://mastodon.social/api/v1/apps -F \"client_name=YourAppName\" -F \"redirect_uris=http://localhost:4200/integrations/social/mastodon\" -F \"scopes=write:statuses write:media profile\" | jq\n```\n\n----------------------------------------\n\nTITLE: Installing Nginx and Certbot on Ubuntu/Debian\nDESCRIPTION: These commands update the package list, install Nginx and Certbot, and ensure Nginx starts automatically on system boot.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install nginx -y\nsudo systemctl start nginx && sudo systemctl enable nginx\n```\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update && sudo apt install python3-certbot-nginx -y\n```\n\n----------------------------------------\n\nTITLE: Mastodon API Response Format\nDESCRIPTION: Example JSON response from the Mastodon API showing the client registration details including client ID and secret.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/mastodon.mdx#2025-04-16_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"1234567890\",\n  \"redirect_uris\": [\n    \"http://localhost:4200/integrations/social/mastodon\"\n  ],\n  ...,\n  \"client_id\": \"your_client_id\",\n  \"client_secret\": \"your_client_secret\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Temporary Nginx for SSL Certificate Creation\nDESCRIPTION: This Nginx configuration sets up a temporary server block to facilitate SSL certificate creation using Certbot's webroot method.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\n    server {\n        listen 80;\n        listen [::]:80;  # IPv6 support\n        server_name <subdomain.domain.tld>;  # CHANGE HERE\n\n        location /.well-known/acme-challenge/ {\n            root /var/www/certbot;\n        }\n\n        location / {\n            return 301 https://$host$request_uri;\n        }\n\n        # Hide NGINX version for security reasons\n        server_tokens off;\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting POSTIZ_APPS for Frontend-Only Container in Bash\nDESCRIPTION: Sets the POSTIZ_APPS environment variable to run only the frontend service in a Docker container. This configuration is useful for scaling the frontend independently.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/docker-envvar-apps.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPOSTIZ_APPS=\"frontend\"\n```\n\n----------------------------------------\n\nTITLE: Testing Nginx Configuration\nDESCRIPTION: This command tests the Nginx configuration for syntax errors before applying changes.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo nginx -t\n```\n\n----------------------------------------\n\nTITLE: Setting POSTIZ_APPS for Backend-Only Container in Bash\nDESCRIPTION: Configures the POSTIZ_APPS environment variable to run only the backend service in a Docker container. This setup allows for independent scaling of the backend component.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/docker-envvar-apps.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPOSTIZ_APPS=\"backend\"\n```\n\n----------------------------------------\n\nTITLE: Setting POSTIZ_APPS for Worker and Cron Services in Bash\nDESCRIPTION: Sets the POSTIZ_APPS environment variable to run both worker and cron services in a single Docker container. This configuration is useful for background task processing and scheduled jobs.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/docker-envvar-apps.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPOSTIZ_APPS=\"worker cron\"\n```\n\n----------------------------------------\n\nTITLE: Registering Provider in Frontend List\nDESCRIPTION: Code snippet for adding the new provider to the frontend providers list configuration.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/create-provider.mdx#2025-04-16_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{identifier: 'providerName', component: DefaultImportFromHighOrderProvider},\n```\n\n----------------------------------------\n\nTITLE: Generating Prisma Client and Running Migrations\nDESCRIPTION: NPM command to generate the Prisma client and run database migrations for Postiz.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/development.mdx#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run prisma-db-push\n```\n\n----------------------------------------\n\nTITLE: Running Development Scripts with NPM\nDESCRIPTION: Core NPM commands for managing the Postiz development environment. Includes commands for starting the dev server, generating Prisma client, and updating database schema.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/developer-guide.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\nnpm run prisma-generate\nnpm run prisma-db-push\n```\n\n----------------------------------------\n\nTITLE: Installing and Starting DevContainer CLI\nDESCRIPTION: Commands to globally install the DevContainers CLI package and start up a dev container environment. This enables consistent development environments across different machines.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/devcontainer.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install -g @devcontainers/cli\ndevcontainer up\n```\n\n----------------------------------------\n\nTITLE: Creating Webroot Directory for Certbot\nDESCRIPTION: This command creates the necessary directory structure for Certbot's webroot method and sets appropriate ownership.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /var/www/certbot/.well-known/acme-challenge && sudo chown -R www-data:www-data /var/www/certbot\n```\n\n----------------------------------------\n\nTITLE: Obtaining SSL Certificates with Certbot\nDESCRIPTION: This command uses Certbot to obtain SSL certificates using the webroot method for the specified domain.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo certbot certonly --webroot -w /var/www/certbot -d <subdomain.domain.tld> --email your-email@example.com --agree-tos --no-eff-email\n```\n\n----------------------------------------\n\nTITLE: Setting NOT_SECURED Environment Variable for Postiz\nDESCRIPTION: This snippet shows how to set the NOT_SECURED environment variable in the .env file to disable secure cookie requirements. This should only be used in development environments or when fully understanding the security implications.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/installation-pre-reqs.mdx#2025-04-16_snippet_0\n\nLANGUAGE: env\nCODE:\n```\nNOT_SECURED=true\n```\n\n----------------------------------------\n\nTITLE: Cloning Postiz Repository\nDESCRIPTION: Git command to clone the Postiz application repository from GitHub, which is the first step in setting up the development environment.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/development.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/gitroomhq/postiz-app.git\n```\n\n----------------------------------------\n\nTITLE: Generating Diffie-Hellman Parameters\nDESCRIPTION: This command generates Diffie-Hellman parameters for enhanced SSL security, required for the robust Nginx configuration.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048\n```\n\n----------------------------------------\n\nTITLE: Creating Symbolic Link for Nginx Configuration\nDESCRIPTION: This command creates a symbolic link to enable the Nginx site configuration.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /etc/nginx/sites-available/<subdomain.domain.tld> /etc/nginx/sites-enabled/\n```\n\n----------------------------------------\n\nTITLE: Adding Provider DTO to Discriminator\nDESCRIPTION: Template for registering the provider's DTO in the type discriminator configuration.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/configuration/create-provider.mdx#2025-04-16_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{ value: DTOClassName, name: 'providerName' },\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt for Web Crawlers\nDESCRIPTION: This robots.txt file sets up rules for web crawlers accessing the Postiz documentation site. It allows all user agents to access all content, specifies the host URL, and provides the location of the sitemap.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/public/robots.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# *\nUser-agent: *\nAllow: /\n\n# Host\nHost: https://docs.postiz.com\n\n# Sitemaps\nSitemap: https://docs.postiz.com/sitemap.xml\n```\n\n----------------------------------------\n\nTITLE: Running Docker Compose Commands\nDESCRIPTION: Commands to restart Docker containers after environment variable changes\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\ndocker compose up\n```\n\n----------------------------------------\n\nTITLE: Setting Up Automatic Nginx Reload on SSL Certificate Renewal\nDESCRIPTION: This command creates a script to automatically reload Nginx when SSL certificates are renewed by Certbot.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\necho -e '#!/bin/bash\\nnginx -t && systemctl reload nginx' | sudo tee /etc/letsencrypt/renewal-hooks/post/nginx-reload.sh && sudo chmod a+x /etc/letsencrypt/renewal-hooks/post/nginx-reload.sh\n```\n\n----------------------------------------\n\nTITLE: Rendering OAuth2 Redirect Component for Threads in JSX\nDESCRIPTION: This snippet renders an OAuth2Redirect component specifically for the Threads provider. It's likely used in the setup process to handle authentication redirects.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/providers/threads.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<OAuth2Redirect provider = \"threads\" />\n```\n\n----------------------------------------\n\nTITLE: Reloading Nginx Configuration\nDESCRIPTION: This command reloads the Nginx configuration to apply all changes.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/reverse-proxies/nginx.mdx#2025-04-16_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl reload nginx\n```\n\n----------------------------------------\n\nTITLE: Creating Feature Branch in Bash\nDESCRIPTION: Command to create and checkout a new feature branch for development. Uses Git branch naming convention with feature/ prefix.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/contributing.mdx#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Rendering Documentation Homepage with NextJS and Nextra\nDESCRIPTION: JSX code for rendering the documentation homepage layout using Nextra components, including dark/light mode logo display and navigation cards.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/introduction.mdx#2025-04-16_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Cards } from \"nextra/components\";\n\n<div className=\"nx-mt-5 w-full flex justify-center rounded-full\">\n  <img className=\"hidden nx-dark:block\" style={{maxWidth: 150}} src=\"/logo/dark.png\" alt=\"Hero Dark\" />\n</div>\n\n<Cards>\n  <Cards.Card\n    icon={<></>}\n    title=\"Learn how to install the project and start using it\"\n    href=\"/quickstart\"\n  />\n  <Cards.Card\n    icon={<></>}\n    title=\"Learn the architecture of the project\"\n    href=\"/howitworks\"\n  />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Cloning Postiz Repository in Bash\nDESCRIPTION: Command to clone a forked Postiz repository to local machine. Requires Git to be installed and GitHub account setup.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/contributing.mdx#2025-04-16_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/YOUR_USERNAME/postiz.git\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Nextra Callout Component\nDESCRIPTION: Demonstrates importing and implementing a Callout component from Nextra to display an information notice about early documentation status.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/earlydoc.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n\n<Callout type=\"info\">\n\t**NOTE:** This page is marked \"earlydoc\", or \"early documentation\", which means it might\n\tbe brief, or contain information about parts of the app that are under heavy development. \n\tWe do not provide support at all to any earlydoc documentation. \n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Remote in Bash\nDESCRIPTION: Command to push local branch changes to remote repository. Sets up upstream tracking for the new feature branch.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/contributing.mdx#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit push -u origin feature/your-feature-name\n```\n\n----------------------------------------\n\nTITLE: Using Callout Component in React JSX\nDESCRIPTION: Shows how to implement the Callout component with the 'info' type attribute to create an information box containing text. This is a reusable snippet for documentation.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/snippet-example.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"info\">\nThis is an example of a reusable snippet\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Importing Callout Component from Nextra in React\nDESCRIPTION: Demonstrates how to import the Callout component from the Nextra components library for use in a React application or documentation.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/snippet-example.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from \"nextra/components\";\n```\n\n----------------------------------------\n\nTITLE: Warning Callout Component Implementation\nDESCRIPTION: Implements a warning callout component using Nextra's Callout to display installation recommendations and alternatives.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/installation-recommended-options.mdx#2025-04-16_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Callout type=\"warning\">\n**This is a not a recommended installation option.**\n\n* **For Users**: [Docker Compose](/installation/docker-compose) is recommended.\n* **For Developers**: [Developer Environment](/installation/development) is recommended.\n\nThe instructions on this page are provided for more advanced or custom installations. Please only use these if the standard options don't fit your needs.\n</Callout>\n```\n\n----------------------------------------\n\nTITLE: Importing Nextra Callout Component\nDESCRIPTION: Imports the Callout component from Nextra packages for creating warning messages.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/components/snippets/installation-recommended-options.mdx#2025-04-16_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Callout } from 'nextra/components'\n```\n\n----------------------------------------\n\nTITLE: Component Implementation\nDESCRIPTION: Implementation of imported MDX components and card navigation elements for documentation structure.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/kubernetes-helm.mdx#2025-04-16_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<EarlyDoc />\n<InstallationRecommendedOptions />\n<Prereqs />\n\n<Cards>\n  <Cards.Card title=\"Set up providers such as Linkedin, X and Reddit\" href=\"/providers\" />\n  <Cards.Card title=\"Learn the architecture of the project\" href=\"/howitworks\" />\n</Cards>\n```\n\n----------------------------------------\n\nTITLE: Importing MDX Components\nDESCRIPTION: Import statements for MDX components used in the documentation page, including early documentation notice, installation options, and prerequisites components.\nSOURCE: https://github.com/gitroomhq/postiz-docs/blob/main/pages/installation/kubernetes-helm.mdx#2025-04-16_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\nimport EarlyDoc from '../../components/snippets/earlydoc.mdx';\nimport { Cards, Steps } from 'nextra/components';\nimport InstallationRecommendedOptions from \"../../components/snippets/installation-recommended-options.mdx\";\nimport Prereqs from '../../components/snippets/installation-pre-reqs.mdx';\n```"
  }
]