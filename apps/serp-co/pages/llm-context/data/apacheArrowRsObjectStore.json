[
  {
    "owner": "apache",
    "repo": "arrow-rs-object-store",
    "content": "TITLE: Example of API Deprecation in Rust\nDESCRIPTION: Example code showing how to mark an API as deprecated using the Rust deprecated attribute with version information and migration notes.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_19\n\nLANGUAGE: rust\nCODE:\n```\n#[deprecated(since = \"0.11.0\", note = \"Use `date_part` instead\")]\n```\n\n----------------------------------------\n\nTITLE: Running Basic Tests with Cargo\nDESCRIPTION: Command to run the standard test suite using Cargo.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS Environment Variables for Testing\nDESCRIPTION: Environment variable configuration needed to run S3 integration tests against Localstack.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nexport TEST_INTEGRATION=1\nexport AWS_DEFAULT_REGION=us-east-1\nexport AWS_ACCESS_KEY_ID=test\nexport AWS_SECRET_ACCESS_KEY=test\nexport AWS_ENDPOINT=http://localhost:4566\nexport AWS_ALLOW_HTTP=true\nexport AWS_BUCKET_NAME=test-bucket\n```\n\n----------------------------------------\n\nTITLE: Running AWS Integration Tests\nDESCRIPTION: Command to run integration tests with AWS S3 features enabled.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncargo test --features aws\n```\n\n----------------------------------------\n\nTITLE: Building for WebAssembly Target in Rust\nDESCRIPTION: Command for building the object_store package for the wasm32-unknown-unknown target. Note that cloud storage features like aws, azure, gcp, and http are not supported in this target.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo build -p object_store --target wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Starting Localstack Docker Container for S3 Testing\nDESCRIPTION: Commands to start Localstack and EC2 metadata mock containers for S3 integration testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nLOCALSTACK_VERSION=sha256:a0b79cb2430f1818de2c66ce89d41bba40f5a1823410f5a7eaf3494b692eed97\npodman run -d -p 4566:4566 localstack/localstack@$LOCALSTACK_VERSION\npodman run -d -p 1338:1338 amazon/amazon-ec2-metadata-mock:v1.9.2 --imdsv2\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Test Bucket and DynamoDB Table Directly\nDESCRIPTION: Commands to create a test bucket and DynamoDB table directly using the AWS CLI.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\naws s3 mb s3://test-bucket --endpoint-url=http://localhost:4566\naws --endpoint-url=http://localhost:4566 dynamodb create-table --table-name test-table --key-schema AttributeName=path,KeyType=HASH AttributeName=etag,KeyType=RANGE --attribute-definitions AttributeName=path,AttributeType=S AttributeName=etag,AttributeType=S --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5\n```\n\n----------------------------------------\n\nTITLE: Creating S3 Test Bucket Using AWS CLI with Podman\nDESCRIPTION: Command to create a test bucket in Localstack using the AWS CLI via Podman.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\npodman run --net=host --env-host amazon/aws-cli --endpoint-url=http://localhost:4566 s3 mb s3://test-bucket\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS KMS Encryption for Testing\nDESCRIPTION: Environment variable setup for testing AWS KMS encryption features.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_SERVER_SIDE_ENCRYPTION=aws:kms\nexport AWS_SSE_BUCKET_KEY=false\ncargo test --features aws\n```\n\n----------------------------------------\n\nTITLE: Setting Up AWS DSSE-KMS Encryption for Testing\nDESCRIPTION: Environment variable setup for testing AWS DSSE-KMS encryption features.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nunset AWS_SSE_BUCKET_KEY\nexport AWS_SERVER_SIDE_ENCRYPTION=aws:kms:dsse\ncargo test --features aws\n```\n\n----------------------------------------\n\nTITLE: Creating AWS KMS Encryption Key for Testing\nDESCRIPTION: Command to create a KMS encryption key in Localstack and store its ID for testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_SSE_KMS_KEY_ID=$(aws --endpoint-url=http://localhost:4566 \\\n  kms create-key --description \"test key\" |\n  jq -r '.KeyMetadata.KeyId')\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Certificate for MinIO HTTPS\nDESCRIPTION: Commands to create a self-signed certificate for enabling HTTPS in MinIO, required for SSE-C encryption testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nmkdir ~/certs\ncd ~/certs\nopenssl genpkey -algorithm RSA -out private.key\nopenssl req -new -key private.key -out request.csr -subj \"/C=US/ST=State/L=City/O=Organization/OU=Unit/CN=example.com/emailAddress=email@example.com\"\nopenssl x509 -req -days 365 -in request.csr -signkey private.key -out public.crt\nrm request.csr\n```\n\n----------------------------------------\n\nTITLE: Starting MinIO Container for SSE-C Testing\nDESCRIPTION: Docker command to start a MinIO container with SSL certificates for SSE-C encryption testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -d \\\n  -p 9000:9000 \\\n  --name minio \\\n  -v ${HOME}/certs:/root/.minio/certs \\\n  -e \"MINIO_ROOT_USER=minio\" \\\n  -e \"MINIO_ROOT_PASSWORD=minio123\" \\\n  minio/minio server /data\n```\n\n----------------------------------------\n\nTITLE: Creating Test Bucket in MinIO for SSE-C Testing\nDESCRIPTION: Environment variable setup and command to create a test bucket in MinIO for SSE-C encryption testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nexport AWS_BUCKET_NAME=test-bucket\nexport AWS_ACCESS_KEY_ID=minio\nexport AWS_SECRET_ACCESS_KEY=minio123\nexport AWS_ENDPOINT=https://localhost:9000\naws s3 mb s3://test-bucket --endpoint-url=https://localhost:9000 --no-verify-ssl\n```\n\n----------------------------------------\n\nTITLE: Running S3 SSE-C Encryption Tests with MinIO\nDESCRIPTION: Command to run the SSE-C encryption test specifically against MinIO.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nexport TEST_S3_SSEC_ENCRYPTION=1\ncargo test --features aws --package object_store --lib aws::tests::test_s3_ssec_encryption_with_minio -- --exact --nocapture\n```\n\n----------------------------------------\n\nTITLE: Starting Azurite Container for Azure Testing\nDESCRIPTION: Command to start an Azurite container for Azure Storage integration testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\npodman run -p 10000:10000 -p 10001:10001 -p 10002:10002 mcr.microsoft.com/azure-storage/azurite\n```\n\n----------------------------------------\n\nTITLE: Creating Azure Storage Container for Testing\nDESCRIPTION: Command to create a test container in Azurite using Azure CLI via Podman.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_14\n\nLANGUAGE: shell\nCODE:\n```\npodman run --net=host mcr.microsoft.com/azure-cli az storage container create -n test-bucket --connection-string 'DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;QueueEndpoint=http://127.0.0.1:10001/devstoreaccount1;'\n```\n\n----------------------------------------\n\nTITLE: Running Azure Integration Tests\nDESCRIPTION: Environment variables setup and command to run Azure Storage integration tests.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nAZURE_USE_EMULATOR=1 \\\nTEST_INTEGRATION=1 \\\nAZURE_CONTAINER_NAME=test-bucket \\\nAZURE_STORAGE_ACCOUNT_NAME=devstoreaccount1 \\\nAZURE_STORAGE_ACCESS_KEY=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw== \\\nAZURE_ENDPOINT=http://127.0.0.1:10000/devstoreaccount1 \\\nAZURE_ALLOW_HTTP=true \\\ncargo test --features azure\n```\n\n----------------------------------------\n\nTITLE: Starting Fake GCS Server for GCP Testing\nDESCRIPTION: Docker command to start a fake GCS server for Google Cloud Storage integration testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\ndocker run -p 4443:4443 tustvold/fake-gcs-server -scheme http\n```\n\n----------------------------------------\n\nTITLE: Setting Up GCS Test Bucket and Credentials\nDESCRIPTION: Commands to create a GCS test bucket and credentials file for testing.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncurl -v -X POST --data-binary '{\"name\":\"test-bucket\"}' -H \"Content-Type: application/json\" \"http://localhost:4443/storage/v1/b\"\necho '{\"gcs_base_url\": \"http://localhost:4443\", \"disable_oauth\": true, \"client_email\": \"\", \"private_key\": \"\"}' > /tmp/gcs.json\n```\n\n----------------------------------------\n\nTITLE: Running GCP Integration Tests\nDESCRIPTION: Environment variables setup and command to run Google Cloud Storage integration tests.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/CONTRIBUTING.md#2025-04-22_snippet_18\n\nLANGUAGE: shell\nCODE:\n```\nTEST_INTEGRATION=1 \\\nOBJECT_STORE_BUCKET=test-bucket \\\nGOOGLE_SERVICE_ACCOUNT=/tmp/gcs.json \\\ncargo test -p object_store --features=gcp\n```\n\n----------------------------------------\n\nTITLE: Preparing Release Branch and Updating Version\nDESCRIPTION: Commands to create a release branch, update version numbers in files, and commit changes.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ngit pull\ngit checkout -b <RELEASE_BRANCH>\n\nsed -i '' -e 's/0.11.0/0.11.1/g' `find . -name 'Cargo.toml' -or -name '*.md' | grep -v CHANGELOG`\ngit commit -a -m 'Update version'\n\nexport CHANGELOG_GITHUB_TOKEN=<TOKEN>\n\n./dev/release/update_change_log.sh\n\ngit commit -a -m 'Create changelog'\n\ngit push\n```\n\n----------------------------------------\n\nTITLE: Creating Git Tag for Release\nDESCRIPTION: Commands to create and push a git tag for the release version.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit fetch apache\ngit tag <version> apache/main\ngit push apache <version>\n```\n\n----------------------------------------\n\nTITLE: Creating and Uploading Release Candidate Tarball\nDESCRIPTION: Command to run the script that creates and uploads the release candidate tarball.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./object_store/dev/release/create-tarball.sh 0.11.1 1\n```\n\n----------------------------------------\n\nTITLE: Verifying Release Candidate\nDESCRIPTION: Command to run the script that verifies the release candidate.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./object_store/dev/release/verify-release-candidate.sh 0.11.0 1\n```\n\n----------------------------------------\n\nTITLE: Releasing Approved Tarball\nDESCRIPTION: Command to run the script that moves the approved tarball to the release location.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n./object_store/dev/release/release-tarball.sh 4.1.0 2\n```\n\n----------------------------------------\n\nTITLE: Publishing to Crates.io\nDESCRIPTION: Command to publish the approved release to crates.io.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncargo publish\n```\n\n----------------------------------------\n\nTITLE: Release Vote Email Template\nDESCRIPTION: Template for the email sent to the mailing list to vote on a release candidate.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/README.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\nTo: dev@arrow.apache.org\nSubject: [VOTE][RUST] Release Apache Arrow Rust Object Store 0.11.1 RC1\n\nHi,\n\nI would like to propose a release of Apache Arrow Rust Object\nStore Implementation, version 0.11.1.\n\nThis release candidate is based on commit: b945b15de9085f5961a478d4f35b0c5c3427e248 [1]\n\nThe proposed release tarball and signatures are hosted at [2].\n\nThe changelog is located at [3].\n\nPlease download, verify checksums and signatures, run the unit tests,\nand vote on the release. There is a script [4] that automates some of\nthe verification.\n\nThe vote will be open for at least 72 hours.\n\n[ ] +1 Release this as Apache Arrow Rust Object Store\n[ ] +0\n[ ] -1 Do not release this as Apache Arrow Rust Object Store  because...\n\n[1]: https://github.com/apache/arrow-rs/tree/b945b15de9085f5961a478d4f35b0c5c3427e248\n[2]: https://dist.apache.org/repos/dist/dev/arrow/apache-arrow-object-store-rs-0.11.1-rc1\n[3]: https://github.com/apache/arrow-rs/blob/b945b15de9085f5961a478d4f35b0c5c3427e248/object_store/CHANGELOG.md\n[4]: https://github.com/apache/arrow-rs/blob/main/object_store/dev/release/verify-release-candidate.sh\n```\n\n----------------------------------------\n\nTITLE: Git and Build System Ignore Patterns for Apache Arrow Rust\nDESCRIPTION: A collection of file and directory patterns to be excluded from version control and build processes. Includes development environments, build artifacts, test data, auto-generated code files, and project configuration files.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/dev/release/rat_exclude_files.txt#2025-04-22_snippet_0\n\nLANGUAGE: gitignore\nCODE:\n```\nvenv/*\ntesting/*\ntarget/*\ndev/release/rat_exclude_files.txt\narrow/test/data/*\narrow-csv/test/data/*\narrow-json/test/data/*\narrow/test/dependency/*\narrow-integration-test/data/*\nparquet_derive/test/dependency/*\n.gitattributes\n**.gitignore\n.gitmodules\nCargo.lock\nfiltered_rat.txt\nrat.txt\n# auto-generated\narrow-flight/src/arrow.flight.protocol.rs\narrow-flight/src/sql/arrow.flight.protocol.sql.rs\n.github/*\nparquet/src/bin/parquet-fromcsv-help.txt\narrow-flight/examples/data/*\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: A template for the copyright notice that should be included in files licensed under Apache License 2.0. This template includes placeholders for copyright year and owner information.\nSOURCE: https://github.com/apache/arrow-rs-object-store/blob/main/LICENSE.txt#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```"
  }
]