[
  {
    "owner": "starikcetin",
    "repo": "eflatun.scenereference",
    "content": "TITLE: Accessing SceneReference Properties\nDESCRIPTION: Code demonstrating how to access various properties of a SceneReference object, including GUID, path, build index, name, loaded scene, and address (when addressables support is enabled).\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\n// You can access these anytime, anywhere\nvar sceneGuid = mySceneReference.Guid;\nvar scenePath = mySceneReference.Path;\nvar sceneBuildIndex = mySceneReference.BuildIndex;\nvar sceneName = mySceneReference.Name;\n\n// You can only access these when the scene is currently loaded\nvar loadedScene = mySceneReference.LoadedScene\n\n// You can only access these if you have addressables support enabled\nvar sceneAddress = mySceneReference.Address;\n```\n\n----------------------------------------\n\nTITLE: Accessing SceneReference Properties in Unity C#\nDESCRIPTION: Example showing how to access the various properties of a SceneReference object, including GUID, path, build index, name, loaded scene, and address (for addressables).\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\n// You can access these anytime, anywhere\nvar sceneGuid = mySceneReference.Guid;\nvar scenePath = mySceneReference.Path;\nvar sceneBuildIndex = mySceneReference.BuildIndex;\nvar sceneName = mySceneReference.Name;\n\n// You can only access these when the scene is currently loaded\nvar loadedScene = mySceneReference.LoadedScene\n\n// You can only access these if you have addressables support enabled\nvar sceneAddress = mySceneReference.Address;\n```\n\n----------------------------------------\n\nTITLE: Creating SceneReference Instances Programmatically in C#\nDESCRIPTION: Shows various methods for creating SceneReference instances in code, including from scene GUID, path, address, or asset. Each approach has different requirements and use cases.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_16\n\nLANGUAGE: C#\nCODE:\n```\n// Empty (and subsequently invalid)\nvar empty = new SceneReference();\n\n// From Scene GUID\nstring sceneGuid = /* ... */;\nvar fromSceneGuid = new SceneReference(sceneGuid);\n\n// From Scene Path\nstring scenePath = /* ... */;\nvar fromScenePath = SceneReference.FromScenePath(scenePath);\n\n// Fom Scene Address\n// Will throw AddressablesSupportDisabledException if addressables support is disabled.\nstring sceneAddress = /* ... */;\nvar fromSceneAddress = SceneReference.FromAddress(sceneAddress);\n\n// From Scene Asset \n// You can only do this in Editor code.\nUnityEngine.Object sceneAsset = /* ... */;\nvar fromSceneAsset = new SceneReference(sceneAsset);\n```\n\n----------------------------------------\n\nTITLE: Creating SceneReference Instances in C#\nDESCRIPTION: Demonstrates various ways to create SceneReference instances in code, including empty, from GUID, path, address, and scene asset.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n// Empty (and subsequently invalid)\nvar empty = new SceneReference();\n\n// From Scene GUID\nstring sceneGuid = /* ... */;\nvar fromSceneGuid = new SceneReference(sceneGuid);\n\n// From Scene Path\nstring scenePath = /* ... */;\nvar fromScenePath = SceneReference.FromScenePath(scenePath);\n\n// Fom Scene Address\n// Will throw AddressablesSupportDisabledException if addressables support is disabled.\nstring sceneAddress = /* ... */;\nvar fromSceneAddress = SceneReference.FromAddress(sceneAddress);\n\n// From Scene Asset \n// You can only do this in Editor code.\nUnityEngine.Object sceneAsset = /* ... */;\nvar fromSceneAsset = new SceneReference(sceneAsset);\n```\n\n----------------------------------------\n\nTITLE: Validating SceneReference State\nDESCRIPTION: Code example showing how to check the state of a SceneReference to ensure it's valid before use, with different state handling for regular and addressable scenes.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\nif (mySceneReference.State == SceneReferenceState.Unsafe)\n{\n    // The scene is not safe to use. Something is wrong.\n}\n\nif (mySceneReference.State == SceneReferenceState.Regular)\n{\n    // The scene is safe to use. It references a regular scene.\n}\n\n// If you have addressables support enabled, you can also get this state:\nif (mySceneReference.State == SceneReferenceState.Addressable)\n{\n    // The scene is safe to use. It references an addressable scene.\n}\n```\n\n----------------------------------------\n\nTITLE: Validating SceneReference State in Unity C#\nDESCRIPTION: Example showing how to check the state of a SceneReference to ensure it's valid before use. States include Unsafe, Regular, and Addressable (if addressables support is enabled).\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\nif (mySceneReference.State == SceneReferenceState.Unsafe)\n{\n    // The scene is not safe to use. Something is wrong.\n}\n\nif (mySceneReference.State == SceneReferenceState.Regular)\n{\n    // The scene is safe to use. It references a regular scene.\n}\n\n// If you have addressables support enabled, you can also get this state:\nif (mySceneReference.State == SceneReferenceState.Addressable)\n{\n    // The scene is safe to use. It references an addressable scene.\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SceneReference Fields in C#\nDESCRIPTION: Example showing how to define scene references as serialized fields in a class, including single references and collections.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\n// You can define it by itself\n[SerializeField] private SceneReference mySceneReference;\n\n// Or in a collection\n[SerializeField] private List<SceneReference> mySceneReferences;\n```\n\n----------------------------------------\n\nTITLE: Defining SceneReference Fields in Unity C# Scripts\nDESCRIPTION: Example showing how to define SceneReference fields in Unity scripts. These can be defined as individual fields or in collections like lists.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\n// You can define it by itself\n[SerializeField] private SceneReference mySceneReference;\n\n// Or in a collection\n[SerializeField] private List<SceneReference> mySceneReferences;\n```\n\n----------------------------------------\n\nTITLE: Checking SceneReference UnsafeReason Property\nDESCRIPTION: Code sample demonstrating how to check why a SceneReference is marked as unsafe, handling different reasons like empty references or scenes not included in builds.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.None)\n{\n    // All good. Safe to use.\n}\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.Empty)\n{\n    // mySceneReference is empty. It is not referencing anything. \n}\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.NotInMaps)\n{\n    // The scene referenced by mySceneReference is not found in any of the maps.\n}\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.NotInBuild)\n{\n    // The scene referenced by mySceneReference is not added and enabled in build.\n}\n```\n\n----------------------------------------\n\nTITLE: Checking SceneReference UnsafeReason in Unity C#\nDESCRIPTION: Example showing how to check the UnsafeReason property of a SceneReference to determine why it's deemed unsafe. Reasons include None, Empty, NotInMaps, and NotInBuild.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Runtime namespace\nusing Eflatun.SceneReference;\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.None)\n{\n    // All good. Safe to use.\n}\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.Empty)\n{\n    // mySceneReference is empty. It is not referencing anything. \n}\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.NotInMaps)\n{\n    // The scene referenced by mySceneReference is not found in any of the maps.\n}\n\nif (mySceneReference.UnsafeReason == SceneReferenceUnsafeReason.NotInBuild)\n{\n    // The scene referenced by mySceneReference is not added and enabled in build.\n}\n```\n\n----------------------------------------\n\nTITLE: Using SceneReference with Dynamic UnityEvent Parameters in C#\nDESCRIPTION: Demonstrates how to use SceneReference as a dynamic parameter with UnityEvents. Shows the implementation of both the event emitter and listener components for proper integration.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_17\n\nLANGUAGE: C#\nCODE:\n```\npublic class Emitter : MonoBehaviour\n{\n    public SceneReference scene;\n    public UnityEvent<SceneReference> raised;\n\n    void Raise()\n    {\n        raised.Invoke(scene);\n    }\n}\n\npublic class Listener : MonoBehaviour\n{\n    public void Listen(SceneReference scene)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using SceneReference with UnityEvent in C#\nDESCRIPTION: Shows how to use SceneReference as a parameter with UnityEvent, including both dynamically provided and statically assigned scenarios.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Emitter : MonoBehaviour\n{\n    public SceneReference scene;\n    public UnityEvent<SceneReference> raised;\n\n    void Raise()\n    {\n        raised.Invoke(scene);\n    }\n}\n\npublic class Listener : MonoBehaviour\n{\n    public void Listen(SceneReference scene)\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Emitter : MonoBehaviour\n{\n    public UnityEvent raised;\n\n    void Raise()\n    {\n        raised.Invoke();\n    }\n}\n\npublic class Listener : MonoBehaviour\n{\n    public void Listen(SceneReference scene)\n    {\n        // ...\n    }\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SceneLoader : MonoBehaviour\n{\n    public void LoadScene(SceneReference scene)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding SceneReference Inspector Settings Using Attributes in C#\nDESCRIPTION: Demonstrates how to use the SceneReferenceOptions attribute to override project-level settings for individual SceneReference fields. This allows developers to customize the behavior of inspector utilities on a per-field basis.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n[SceneReferenceOptions(SceneInBuildColoring = ColoringBehaviour.Disabled, Toolbox = ToolboxBehaviour.Disabled, AddressableColoring = ColoringBehaviour.Disabled)]\n[SerializeField] private SceneReference scene;\n```\n\n----------------------------------------\n\nTITLE: Overriding SceneReference Options in C#\nDESCRIPTION: Demonstrates how to use the SceneReferenceOptions attribute to override inline inspector utility settings for a SceneReference field.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\n[SceneReferenceOptions(SceneInBuildColoring = ColoringBehaviour.Disabled, Toolbox = ToolboxBehaviour.Disabled, AddressableColoring = ColoringBehaviour.Disabled)]\n[SerializeField] private SceneReference scene;\n```\n\n----------------------------------------\n\nTITLE: Using SceneReference in Custom Unity Editor Scripts\nDESCRIPTION: Demonstrates how to use SceneReference in custom Unity editor scripts, including accessing serialized properties and using EditorGUILayout.PropertyField.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomEditorUsageDemo : MonoBehaviour\n{\n    public SceneReference PublicScene;\n    [SerializeField] private SceneReference privateScene;\n}\n```\n\nLANGUAGE: csharp\nCODE:\n```\nvar serializedProp = serializedObject.FindProperty(\"privateScene\");\nEditorGUILayout.PropertyField(serializedProp);\n```\n\n----------------------------------------\n\nTITLE: SceneLoader Listener Implementation for UnityEvent Adapter in C#\nDESCRIPTION: Demonstrates the implementation of a SceneLoader class that can be used with the SceneReferenceUnityEventAdapter to enable indirect connections between UnityEvents and methods that require SceneReference parameters.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_19\n\nLANGUAGE: C#\nCODE:\n```\npublic class SceneLoader : MonoBehaviour\n{\n    public void LoadScene(SceneReference scene)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization of SceneReference with Newtonsoft.Json in C#\nDESCRIPTION: Demonstrates how to serialize and deserialize SceneReference objects to and from JSON using the Newtonsoft.Json library. This enables persistence of scene references across application sessions.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nusing Eflatun.SceneReference;\nusing Newtonsoft.Json;\n\n// Serialize\nSceneReference sceneRef = /* ... */;\nvar serialized = JsonConvert.SerializeObject(sceneRef);\n\n// Deserialize\nstring json = /* ... */;\nSceneReference deserialized = JsonConvert.DeserializeObject<SceneReference>(json);\n```\n\n----------------------------------------\n\nTITLE: JSON Serialization of SceneReference using Newtonsoft.Json\nDESCRIPTION: Demonstrates how to serialize and deserialize a SceneReference object to and from JSON using Newtonsoft.Json library.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nusing Eflatun.SceneReference;\nusing Newtonsoft.Json;\n\n// Serialize\nSceneReference sceneRef = /* ... */;\nvar serialized = JsonConvert.SerializeObject(sceneRef);\n\n// Deserialize\nstring json = /* ... */;\nSceneReference deserialized = JsonConvert.DeserializeObject<SceneReference>(json);\n```\n\n----------------------------------------\n\nTITLE: XML Serialization of SceneReference in C#\nDESCRIPTION: Demonstrates serializing and deserializing SceneReference objects to and from XML format using the System.Xml namespace. This provides an alternative serialization approach for scene references.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_15\n\nLANGUAGE: C#\nCODE:\n```\nusing Eflatun.SceneReference;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\n\n// Serialize\nSceneReference sceneRef = /* ... */;\nvar xmlSerializer = new XmlSerializer(typeof(SceneReference));\nvar sb = new StringBuilder();\nusing var xmlWriter = XmlWriter.Create(sb);\nxmlSerializer.Serialize(xmlWriter, sceneRef);\nvar serialized = sb.ToString();\n\n// Deserialize\nstring xml = /* ... */;\nvar xmlSerializer = new XmlSerializer(typeof(SceneReference));\nusing var stringReader = new StringReader(xml);\nusing var xmlReader = XmlReader.Create(stringReader);\nSceneReference deserialized = xmlSerializer.Deserialize(xmlReader) as SceneReference;\n```\n\n----------------------------------------\n\nTITLE: XML Serialization of SceneReference using System.Xml\nDESCRIPTION: Illustrates how to serialize and deserialize a SceneReference object to and from XML format using System.Xml.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nusing Eflatun.SceneReference;\nusing System.IO;\nusing System.Text;\nusing System.Xml;\nusing System.Xml.Serialization;\n\n// Serialize\nSceneReference sceneRef = /* ... */;\nvar xmlSerializer = new XmlSerializer(typeof(SceneReference));\nvar sb = new StringBuilder();\nusing var xmlWriter = XmlWriter.Create(sb);\nxmlSerializer.Serialize(xmlWriter, sceneRef);\nvar serialized = sb.ToString();\n\n// Deserialize\nstring xml = /* ... */;\nvar xmlSerializer = new XmlSerializer(typeof(SceneReference));\nusing var stringReader = new StringReader(xml);\nusing var xmlReader = XmlReader.Create(stringReader);\nSceneReference deserialized = xmlSerializer.Deserialize(xmlReader) as SceneReference;\n```\n\n----------------------------------------\n\nTITLE: Binary Serialization of SceneReference with BinaryFormatter in C#\nDESCRIPTION: Shows how to serialize and deserialize SceneReference objects using BinaryFormatter, though this approach is not recommended due to security concerns and inconsistency across platforms.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nusing Eflatun.SceneReference;\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\n\n// Serialize\nSceneReference sceneRef = /* ... */;\nvar bf = new BinaryFormatter();\nusing var ms = new MemoryStream();\nbf.Serialize(ms, sceneRef);\nvar serializedBytes = ms.ToArray();\nvar serializedBase64 = Convert.ToBase64String(serializedBytes);\n\n// Deserialize\nbyte[] bytes = /* ... */;\nvar bf = new BinaryFormatter();\nusing var ms = new MemoryStream(bytes);\nSceneReference deserialized = bf.Deserialize(ms) as SceneReference;\n```\n\n----------------------------------------\n\nTITLE: Binary Serialization of SceneReference using BinaryFormatter\nDESCRIPTION: Shows how to serialize and deserialize a SceneReference object to and from binary format using System.Runtime.Serialization.Formatters.Binary.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nusing Eflatun.SceneReference;\nusing System;\nusing System.IO;\nusing System.Runtime.Serialization.Formatters.Binary;\n\n// Serialize\nSceneReference sceneRef = /* ... */;\nvar bf = new BinaryFormatter();\nusing var ms = new MemoryStream();\nbf.Serialize(ms, sceneRef);\nvar serializedBytes = ms.ToArray();\nvar serializedBase64 = Convert.ToBase64String(serializedBytes);\n\n// Deserialize\nbyte[] bytes = /* ... */;\nvar bf = new BinaryFormatter();\nusing var ms = new MemoryStream(bytes);\nSceneReference deserialized = bf.Deserialize(ms) as SceneReference;\n```\n\n----------------------------------------\n\nTITLE: Static SceneReference Parameters with UnityEvents in C#\nDESCRIPTION: Shows a code example that would not work with UnityEvents due to SceneReference needing to be statically assigned. This illustrates a limitation in the UnityEvent system when used with custom non-UnityEngine.Object types.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_18\n\nLANGUAGE: C#\nCODE:\n```\npublic class Emitter : MonoBehaviour\n{\n    public UnityEvent raised;\n\n    void Raise()\n    {\n        raised.Invoke();\n    }\n}\n\npublic class Listener : MonoBehaviour\n{\n    public void Listen(SceneReference scene)\n    {\n        // ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Partially Overriding SceneReference Inspector Settings in C#\nDESCRIPTION: Shows how to selectively override only specific inspector utilities while allowing others to follow project settings. Missing arguments default to DoNotOverride behavior.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n[SceneReferenceOptions(Toolbox = ToolboxBehaviour.Disabled)]\n[SerializeField] private SceneReference scene;\n```\n\n----------------------------------------\n\nTITLE: Partial Override of SceneReference Options in C#\nDESCRIPTION: Shows how to partially override SceneReference options, disabling the toolbox while respecting project settings for coloring.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n[SceneReferenceOptions(Toolbox = ToolboxBehaviour.Disabled)]\n[SerializeField] private SceneReference scene;\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene GUID to Path Map\nDESCRIPTION: Shows how to directly access the scene GUID to path mapping data. This provides bidirectional lookups between scene GUIDs and paths that can be used in both runtime and editor code.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Import the Runtime namespace\nusing Eflatun.SceneReference;\n\n// Get the scene path from a scene GUID. You can do this both in runtime and in editor.\nvar scenePath = SceneGuidToPathMapProvider.SceneGuidToPathMap[sceneGuid];\n\n// Get the scene GUID from a scene path. You can do this both in runtime and in editor.\nvar sceneGuid = SceneGuidToPathMapProvider.ScenePathToGuidMap[scenePath];\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene GUID to Path Maps\nDESCRIPTION: Demonstrates how to access the scene GUID to path mapping functionality in both runtime and editor contexts\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\n// Import the Runtime namespace\nusing Eflatun.SceneReference;\n\n// Get the scene path from a scene GUID. You can do this both in runtime and in editor.\nvar scenePath = SceneGuidToPathMapProvider.SceneGuidToPathMap[sceneGuid];\n\n// Get the scene GUID from a scene path. You can do this both in runtime and in editor.\nvar sceneGuid = SceneGuidToPathMapProvider.ScenePathToGuidMap[scenePath];\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene GUID to Address Map\nDESCRIPTION: Demonstrates how to access scene GUID to address mapping for addressable assets. Shows both the direct lookup from GUID to address and the inverse lookup methods which handle non-unique addresses.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Import the Runtime namespace\nusing Eflatun.SceneReference;\n\n// Get the scene address from a scene GUID. You can do this both in runtime and in editor.\nvar sceneAddress = SceneGuidToAddressMapProvider.SceneGuidToAddressMap[sceneGuid];\n\n// Get the scene GUID from a scene address. You can do this both in runtime and in editor.\n\n// First way. Will throw exceptions on faliure.\nvar sceneGuid = SceneGuidToAddressMapProvider.GetGuidFromAddress(sceneAddress);\n\n// Second way. Returns a bool that represents success or failure.\nif(SceneGuidToAddressMapProvider.TryGetGuidFromAddress(sceneAddress, out var sceneGuid)) \n{\n    // Success. sceneGuid is valid.\n}\nelse \n{\n    // Failure. sceneGuid is invalid.\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Scene GUID to Address Maps\nDESCRIPTION: Shows how to work with scene GUID to address mappings, including handling multiple address scenarios and potential failures\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n// Import the Runtime namespace\nusing Eflatun.SceneReference;\n\n// Get the scene address from a scene GUID. You can do this both in runtime and in editor.\nvar sceneAddress = SceneGuidToAddressMapProvider.SceneGuidToAddressMap[sceneGuid];\n\n// Get the scene GUID from a scene address. You can do this both in runtime and in editor.\n\n// First way. Will throw exceptions on faliure.\nvar sceneGuid = SceneGuidToAddressMapProvider.GetGuidFromAddress(sceneAddress);\n\n// Second way. Returns a bool that represents success or failure.\nif(SceneGuidToAddressMapProvider.TryGetGuidFromAddress(sceneAddress, out var sceneGuid)) \n{\n    // Success. sceneGuid is valid.\n}\nelse \n{\n    // Failure. sceneGuid is invalid.\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Scene Data Maps Generator in Editor Code\nDESCRIPTION: Shows how to manually run the Scene Data Maps Generator from editor scripts. This can be done with or without outputting files to disk, as the generator runs automatically according to configured triggers.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Editor namespace\nusing Eflatun.SceneReference.Editor;\n\n// Run the generator and output files. Only do this in Editor code!\nSceneDataMapsGenerator.Run(true);\n\n// Run the generator and but do not output files. Only do this in Editor code!\nSceneDataMapsGenerator.Run(false);\n```\n\n----------------------------------------\n\nTITLE: Running Scene Data Maps Generator in Editor Code\nDESCRIPTION: Demonstrates how to programmatically trigger the scene data maps generator from editor code, with options to output files or not\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n// Import Editor namespace\nusing Eflatun.SceneReference.Editor;\n\n// Run the generator and output files. Only do this in Editor code!\nSceneDataMapsGenerator.Run(true);\n\n// Run the generator and but do not output files. Only do this in Editor code!\nSceneDataMapsGenerator.Run(false);\n```\n\n----------------------------------------\n\nTITLE: Accessing SceneReference Settings in Editor Code\nDESCRIPTION: Demonstrates how to read and modify Eflatun.SceneReference settings programmatically from editor scripts. This allows for automated configuration of the plugin's behavior.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Import the Editor namespace\nusing Eflatun.SceneReference.Editor;\n\n// Access a setting. Only do this in Editor code!\nvar generationTriggers = SettingsManager.SceneDataMaps.GenerationTriggers;\n\n// Change a setting. Only do this in Editor code!\nSettingsManager.SceneDataMaps.GenerationTriggers = GenerationTriggers.All;\n```\n\n----------------------------------------\n\nTITLE: Accessing SceneReference Settings in Editor Code\nDESCRIPTION: Shows how to read and modify Eflatun.SceneReference settings programmatically from editor code\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\n// Import the Editor namespace\nusing Eflatun.SceneReference.Editor;\n\n// Access a setting. Only do this in Editor code!\nvar generationTriggers = SettingsManager.SceneDataMaps.GenerationTriggers;\n\n// Change a setting. Only do this in Editor code!\nSettingsManager.SceneDataMaps.GenerationTriggers = GenerationTriggers.All;\n```\n\n----------------------------------------\n\nTITLE: Scene Reference Exception Documentation\nDESCRIPTION: Documentation of four exception classes - AddressNotUniqueException, SceneNotAddressableException, AddressablesSupportDisabledException, and SceneReferenceInternalException - used in the Unity Scene Reference system for handling various error cases.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_20\n\nLANGUAGE: markdown\nCODE:\n```\n## `AddressNotUniqueException`\n\nThrown if a given address matches multiple entries in the Scene GUID to Address Map. This can happen for these reasons:\n\n1. There are multiple addressable scenes with the same given address. To fix this, make sure there is only one addressable scene with the given address.\n\n2. The Scene GUID to Address Map is outdated. To fix this, you can either manually run the generator, or enable generation triggers. It is highly recommended to keep all the generation triggers enabled.\n\n> [!NOTE]<br/>\n> This exception will never be thrown if addressables support is disabled.\n\n## `SceneNotAddressableException`\n\nThrown if addressables-specific operations are attempted on a `SceneReference` that is assigned a non-addressable scene.\n\nYou can avoid this exception by making sure the `State` property is `Addressable`.\n\n> [!NOTE]<br/>\n> This exception will never be thrown if addressables support is disabled.\n\n## `AddressablesSupportDisabledException`\n\nThrown if an operation that requires addressables support is attempted while addressables support is disabled.\n\nTo fix it, make sure addressables support is enabled.\n\n## `SceneReferenceInternalException`\n\nThis exception is not part of the public API. It indicates that something has gone wrong internally. It is not meant to be catched, fixed, or avoided by user code.\n\nIf you come across this exception, make sure to create a bug report by [opening an issue](https://github.com/starikcetin/Eflatun.SceneReference/issues) and including the relevant information in the exception message.\n```\n\n----------------------------------------\n\nTITLE: Installing Eflatun.SceneReference with Git URL in manifest.json\nDESCRIPTION: JSON snippet showing how to add Eflatun.SceneReference to the project's manifest.json dependencies using Git URL.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"com.eflatun.scenereference\": \"git+https://github.com/starikcetin/Eflatun.SceneReference.git#4.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Installing Eflatun.SceneReference via Git URL in manifest.json\nDESCRIPTION: JSON snippet showing how to add the Eflatun.SceneReference package to a Unity project's manifest.json file using a Git URL. Replace 4.1.1 with the desired version.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"com.eflatun.scenereference\": \"git+https://github.com/starikcetin/Eflatun.SceneReference.git#4.1.1\"\n```\n\n----------------------------------------\n\nTITLE: Using Ignore Library in C#\nDESCRIPTION: Demonstrates the usage of Ignore library including initialization, adding single and multiple rules, fluent rule addition, filtering paths, and checking if a path is ignored.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/ThirdParty/Ignore/README.md#2025-04-19_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Initialize ignore\nvar ignore = new Ignore();\n\n// Add a rule\nignore.Add(\".vs/\");\n\n// Add multiple rules\nignore.Add(new[] { \"*.user\", \"obj/*\" });\n\n// Add rules fluently\nignore\n    .Add(\".vs/\")\n    .Add(new[] { \"*.user\", \"obj/*\" });\n\n// Filter paths to exclude paths ignored as per the rules\nvar filteredFiles = ignore.Filter(new[] { \".vs/a.txt\", \"x.user\", \"obj/a.dll\" });\n\n// Check if a path is ignored\nvar isIgnored = ignore.IsIgnored(\"x.user\");\n```\n\n----------------------------------------\n\nTITLE: Installing Eflatun.SceneReference with OpenUPM\nDESCRIPTION: Command to install the Eflatun.SceneReference package in a Unity project using openupm-cli.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nopenupm add com.eflatun.scenereference\n```\n\n----------------------------------------\n\nTITLE: Installing Eflatun.SceneReference via OpenUPM CLI\nDESCRIPTION: Command to add the Eflatun.SceneReference package to a Unity project using OpenUPM CLI. This should be run at the root of the Unity project.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_1\n\nLANGUAGE: console\nCODE:\n```\nopenupm add com.eflatun.scenereference\n```\n\n----------------------------------------\n\nTITLE: Installing Eflatun.SceneReference via npm\nDESCRIPTION: Command to install the openupm-cli tool via npm, which is required for the recommended installation method.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/README.md#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g openupm-cli\n```\n\n----------------------------------------\n\nTITLE: Installing Eflatun.SceneReference with OpenUPM via NPM\nDESCRIPTION: Command to install the OpenUPM CLI via NPM, which is a prerequisite for installing the package via OpenUPM. This step can be skipped if OpenUPM CLI is already installed.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/README.md#2025-04-19_snippet_0\n\nLANGUAGE: console\nCODE:\n```\nnpm install -g openupm-cli\n```\n\n----------------------------------------\n\nTITLE: Defining Unity Editor Version with Revision\nDESCRIPTION: Configuration setting that declares the Unity editor version used for this project. It specifies both the main version (2020.3.48f1) and the same version with its specific revision hash (b805b124c6b7).\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/ProjectSettings/ProjectVersion.txt#2025-04-19_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nm_EditorVersion: 2020.3.48f1\nm_EditorVersionWithRevision: 2020.3.48f1 (b805b124c6b7)\n```\n\n----------------------------------------\n\nTITLE: Installing Ignore Package via NuGet\nDESCRIPTION: Command to install the Ignore package from NuGet package manager.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/ThirdParty/Ignore/README.md#2025-04-19_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package Ignore\n```\n\n----------------------------------------\n\nTITLE: Running Ignore Tests\nDESCRIPTION: Command to run the unit tests for the Ignore project from the root directory.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/ThirdParty/Ignore/README.md#2025-04-19_snippet_3\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet test\n```\n\n----------------------------------------\n\nTITLE: Building the Ignore Project\nDESCRIPTION: Command to build the Ignore project from the root directory.\nSOURCE: https://github.com/starikcetin/eflatun.scenereference/blob/main/Eflatun.SceneReference/Packages/com.eflatun.scenereference/ThirdParty/Ignore/README.md#2025-04-19_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\ndotnet build\n```"
  }
]